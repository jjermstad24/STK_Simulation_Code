################################################################################
#          Copyright 2020-2023, Ansys Government Initiatives
################################################################################ 

__all__ = ["AgAvtrADDSMessage", "AgAvtrADDSMessageCollection", "AgAvtrARINC424Airport", "AgAvtrARINC424Helipad", "AgAvtrARINC424Navaid", 
"AgAvtrARINC424Runway", "AgAvtrARINC424Source", "AgAvtrARINC424Waypoint", "AgAvtrAdvFixedWingElectricPowerplant", "AgAvtrAdvFixedWingEmpiricalJetEngine", 
"AgAvtrAdvFixedWingExternalAero", "AgAvtrAdvFixedWingExternalProp", "AgAvtrAdvFixedWingGeometryBasic", "AgAvtrAdvFixedWingGeometryVariable", 
"AgAvtrAdvFixedWingPistonPowerplant", "AgAvtrAdvFixedWingRamjetBasic", "AgAvtrAdvFixedWingScramjetBasic", "AgAvtrAdvFixedWingSubSuperHypersonicAero", 
"AgAvtrAdvFixedWingSubSuperHypersonicProp", "AgAvtrAdvFixedWingSubsonicAero", "AgAvtrAdvFixedWingSupersonicAero", "AgAvtrAdvFixedWingTool", 
"AgAvtrAdvFixedWingTurbofanBasicABPowerplant", "AgAvtrAdvFixedWingTurbofanBasicABProp", "AgAvtrAdvFixedWingTurbojetBasicABPowerplant", 
"AgAvtrAdvFixedWingTurbojetBasicABProp", "AgAvtrAdvFixedWingTurbopropPowerplant", "AgAvtrAeroPropManeuverModeHelper", "AgAvtrAircraft", 
"AgAvtrAircraftAcceleration", "AgAvtrAircraftAccelerationMode", "AgAvtrAircraftAdvAccelerationModel", "AgAvtrAircraftAdvClimbModel", 
"AgAvtrAircraftAdvCruiseModel", "AgAvtrAircraftAdvDescentModel", "AgAvtrAircraftAdvLandingModel", "AgAvtrAircraftAdvTakeoffModel", 
"AgAvtrAircraftAero", "AgAvtrAircraftBasicAccelerationModel", "AgAvtrAircraftBasicClimbModel", "AgAvtrAircraftBasicCruiseModel", 
"AgAvtrAircraftBasicDescentModel", "AgAvtrAircraftBasicFixedWingAero", "AgAvtrAircraftBasicFixedWingProp", "AgAvtrAircraftBasicLandingModel", 
"AgAvtrAircraftBasicTakeoffModel", "AgAvtrAircraftCategory", "AgAvtrAircraftClimb", "AgAvtrAircraftCruise", "AgAvtrAircraftDescent", 
"AgAvtrAircraftExternalAero", "AgAvtrAircraftExternalProp", "AgAvtrAircraftLanding", "AgAvtrAircraftModels", "AgAvtrAircraftProp", 
"AgAvtrAircraftSimpleAero", "AgAvtrAircraftSimpleProp", "AgAvtrAircraftTakeoff", "AgAvtrAircraftTerrainFollow", "AgAvtrAircraftTerrainFollowModel", 
"AgAvtrAircraftVTOL", "AgAvtrAircraftVTOLModel", "AgAvtrAirportCategory", "AgAvtrAltitudeMSLAndLevelOffOptions", "AgAvtrAltitudeMSLOptions", 
"AgAvtrAltitudeOptions", "AgAvtrArcAltitudeAndDelayOptions", "AgAvtrArcAltitudeOptions", "AgAvtrArcOptions", "AgAvtrArcVerticalPlaneOptions", 
"AgAvtrAtmosphereModel", "AgAvtrAtmosphereModelBasic", "AgAvtrAttitudeTransitions", "AgAvtrBasicFixedWingFwdFlightLiftHelper", 
"AgAvtrBasicManeuverAirspeedOptions", "AgAvtrBasicManeuverStrategyAileronRoll", "AgAvtrBasicManeuverStrategyAutopilotNav", 
"AgAvtrBasicManeuverStrategyAutopilotProf", "AgAvtrBasicManeuverStrategyBallistic3D", "AgAvtrBasicManeuverStrategyBarrelRoll", 
"AgAvtrBasicManeuverStrategyBezier", "AgAvtrBasicManeuverStrategyCruiseProfile", "AgAvtrBasicManeuverStrategyFlyAOA", "AgAvtrBasicManeuverStrategyGlideProfile", 
"AgAvtrBasicManeuverStrategyIntercept", "AgAvtrBasicManeuverStrategyLTAHover", "AgAvtrBasicManeuverStrategyLoop", "AgAvtrBasicManeuverStrategyPitch3D", 
"AgAvtrBasicManeuverStrategyPull", "AgAvtrBasicManeuverStrategyPushPull", "AgAvtrBasicManeuverStrategyRelSpeedAlt", "AgAvtrBasicManeuverStrategyRelativeBearing", 
"AgAvtrBasicManeuverStrategyRelativeCourse", "AgAvtrBasicManeuverStrategyRelativeFPA", "AgAvtrBasicManeuverStrategyRendezvous", 
"AgAvtrBasicManeuverStrategyRollingPull", "AgAvtrBasicManeuverStrategySimpleTurn", "AgAvtrBasicManeuverStrategySmoothAccel", 
"AgAvtrBasicManeuverStrategySmoothTurn", "AgAvtrBasicManeuverStrategyStationkeeping", "AgAvtrBasicManeuverStrategyStraightAhead", 
"AgAvtrBasicManeuverStrategyWeave", "AgAvtrBasicManeuverTargetPosVel", "AgAvtrBasicManeuverTargetPosVelNoisyBrgRng", "AgAvtrBasicManeuverTargetPosVelNoisySurfTgt", 
"AgAvtrCalculationOptions", "AgAvtrCatalog", "AgAvtrClimbAndDescentTransitions", "AgAvtrConfiguration", "AgAvtrCruiseAirspeedAndProfileOptions", 
"AgAvtrCruiseAirspeedOptions", "AgAvtrCruiseAirspeedProfile", "AgAvtrDAFIFHelipad", "AgAvtrDAFIFRunway", "AgAvtrDAFIFSource", 
"AgAvtrDAFIFWaypoint", "AgAvtrEnrouteAndDelayOptions", "AgAvtrEnrouteOptions", "AgAvtrEnrouteTurnDirectionOptions", "AgAvtrFuelModelKeroseneAFPROP", 
"AgAvtrFuelModelKeroseneCEA", "AgAvtrFuelTankExternal", "AgAvtrFuelTankInternal", "AgAvtrHoverAltitudeOptions", "AgAvtrLandingCruiseAirspeedAndProfileOptions", 
"AgAvtrLandingEnrouteOptions", "AgAvtrLandingEnterDownwindPattern", "AgAvtrLandingInterceptGlideslope", "AgAvtrLandingStandardInstrumentApproach", 
"AgAvtrLandingVerticalPlaneOptions", "AgAvtrLevelTurns", "AgAvtrMissile", "AgAvtrMissileAdvancedAero", "AgAvtrMissileAero", 
"AgAvtrMissileExternalAero", "AgAvtrMissileExternalProp", "AgAvtrMissileModels", "AgAvtrMissileProp", "AgAvtrMissileRamjetProp", 
"AgAvtrMissileRocketProp", "AgAvtrMissileSimpleAero", "AgAvtrMissileSimpleProp", "AgAvtrMissileTurbojetProp", "AgAvtrMission", 
"AgAvtrNavaidCategory", "AgAvtrNavigationOptions", "AgAvtrPayloadStation", "AgAvtrPerformanceModel", "AgAvtrPerformanceModelOptions", 
"AgAvtrPhase", "AgAvtrPhaseCollection", "AgAvtrProcedure", "AgAvtrProcedureAirway", "AgAvtrProcedureAirwayRouter", "AgAvtrProcedureArcEnroute", 
"AgAvtrProcedureArcPointToPoint", "AgAvtrProcedureAreaTargetSearch", "AgAvtrProcedureBasicManeuver", "AgAvtrProcedureBasicPointToPoint", 
"AgAvtrProcedureCollection", "AgAvtrProcedureDelay", "AgAvtrProcedureEnroute", "AgAvtrProcedureExtEphem", "AgAvtrProcedureFastTimeOptions", 
"AgAvtrProcedureFlightLine", "AgAvtrProcedureFormationFlyer", "AgAvtrProcedureFormationRecover", "AgAvtrProcedureHoldingCircular", 
"AgAvtrProcedureHoldingFigure8", "AgAvtrProcedureHoldingRacetrack", "AgAvtrProcedureHover", "AgAvtrProcedureHoverTranslate", 
"AgAvtrProcedureInFormation", "AgAvtrProcedureLanding", "AgAvtrProcedureLaunch", "AgAvtrProcedureLaunchDynState", "AgAvtrProcedureLaunchWaypoint", 
"AgAvtrProcedureParallelFlightLine", "AgAvtrProcedureReferenceState", "AgAvtrProcedureSuperProcedure", "AgAvtrProcedureTakeoff", 
"AgAvtrProcedureTerrainFollow", "AgAvtrProcedureTimeOptions", "AgAvtrProcedureTransitionToForwardFlight", "AgAvtrProcedureTransitionToHover", 
"AgAvtrProcedureVGTPoint", "AgAvtrProcedureVerticalLanding", "AgAvtrProcedureVerticalTakeoff", "AgAvtrPropagator", "AgAvtrPropulsionEfficiencies", 
"AgAvtrPropulsionThrust", "AgAvtrRefStateForwardFlightOptions", "AgAvtrRefStateHoverOptions", "AgAvtrRefStateTakeoffLandingOptions", 
"AgAvtrRefStateWeightOnWheelsOptions", "AgAvtrRefuelDumpProperties", "AgAvtrRotorcraft", "AgAvtrRotorcraftAero", "AgAvtrRotorcraftModels", 
"AgAvtrRotorcraftProp", "AgAvtrRunwayCategory", "AgAvtrRunwayHeadingOptions", "AgAvtrSite", "AgAvtrSiteAirportFromCatalog", 
"AgAvtrSiteDynState", "AgAvtrSiteEndOfPrevProcedure", "AgAvtrSiteNavaidFromCatalog", "AgAvtrSiteReferenceState", "AgAvtrSiteRelToPrevProcedure", 
"AgAvtrSiteRelToSTKObject", "AgAvtrSiteRunway", "AgAvtrSiteRunwayFromCatalog", "AgAvtrSiteSTKAreaTarget", "AgAvtrSiteSTKObjectWaypoint", 
"AgAvtrSiteSTKStaticObject", "AgAvtrSiteSTKVehicle", "AgAvtrSiteSuperProcedure", "AgAvtrSiteVTOLPoint", "AgAvtrSiteVTOLPointFromCatalog", 
"AgAvtrSiteWaypoint", "AgAvtrSiteWaypointFromCatalog", "AgAvtrStationCollection", "AgAvtrTakeoffDeparturePoint", "AgAvtrTakeoffLowTransition", 
"AgAvtrTakeoffNormal", "AgAvtrUserRunway", "AgAvtrUserRunwaySource", "AgAvtrUserVTOLPoint", "AgAvtrUserVTOLPointSource", 
"AgAvtrUserWaypoint", "AgAvtrUserWaypointSource", "AgAvtrVTOLPointCategory", "AgAvtrVerticalPlaneAndFlightPathOptions", 
"AgAvtrVerticalPlaneOptions", "AgAvtrWaypointCategory", "AgAvtrWindModel", "AgAvtrWindModelADDS", "AgAvtrWindModelConstant", 
"AgEAvtrADDSForecastType", "AgEAvtrADDSMissingMsgType", "AgEAvtrADDSMsgExtrapType", "AgEAvtrADDSMsgInterpType", "AgEAvtrAFPROPFuelType", 
"AgEAvtrAGLMSL", "AgEAvtrAccelManeuverAeroPropMode", "AgEAvtrAccelManeuverMode", "AgEAvtrAccelMode", "AgEAvtrAccelPerfModelOverride", 
"AgEAvtrAccelerationAdvAccelMode", "AgEAvtrAdvFixedWingAeroStrategy", "AgEAvtrAdvFixedWingGeometry", "AgEAvtrAdvFixedWingPowerplantStrategy", 
"AgEAvtrAeroPropFlightMode", "AgEAvtrAeroPropSimpleMode", "AgEAvtrAileronRollFlightPath", "AgEAvtrAileronRollMode", "AgEAvtrAircraftAeroStrategy", 
"AgEAvtrAircraftPropStrategy", "AgEAvtrAirspeedType", "AgEAvtrAltitudeConstraintManeuverMode", "AgEAvtrAltitudeRef", "AgEAvtrAndOr", 
"AgEAvtrAngleMode", "AgEAvtrApproachMode", "AgEAvtrAtmosphereModel", "AgEAvtrAutopilotAltitudeControlMode", "AgEAvtrAutopilotAltitudeMode", 
"AgEAvtrAutopilotHorizPlaneMode", "AgEAvtrBallistic3DControlMode", "AgEAvtrBasicFixedWingPropMode", "AgEAvtrBasicManeuverAirspeedMode", 
"AgEAvtrBasicManeuverAltitudeLimit", "AgEAvtrBasicManeuverFuelFlowType", "AgEAvtrBasicManeuverGlideSpeedControlMode", "AgEAvtrBasicManeuverRefFrame", 
"AgEAvtrBasicManeuverStrategy", "AgEAvtrBasicManeuverStrategyAirspeedPerfLimits", "AgEAvtrBasicManeuverStrategyNavControlLimit", 
"AgEAvtrBasicManeuverStrategyPoweredCruiseMode", "AgEAvtrCEAFuelType", "AgEAvtrClimbSpeedType", "AgEAvtrClosureMode", "AgEAvtrClosureValue", 
"AgEAvtrCruiseMaxPerfSpeedType", "AgEAvtrCruiseSpeed", "AgEAvtrDelayAltMode", "AgEAvtrDelayTurnDir", "AgEAvtrDepartureSpeedMode", 
"AgEAvtrDescentSpeedType", "AgEAvtrErrorCodes", "AgEAvtrExtEphemFlightMode", "AgEAvtrFlightLineProcType", "AgEAvtrFlyAOALeftRight", 
"AgEAvtrFlyToFlightPathAngleMode", "AgEAvtrFormationFlyerStopCondition", "AgEAvtrFuelFlowType", "AgEAvtrHoldRefuelDumpMode", 
"AgEAvtrHoldingDirection", "AgEAvtrHoldingEntryManeuver", "AgEAvtrHoldingProfileMode", "AgEAvtrHoverAltitudeMode", "AgEAvtrHoverHeadingMode", 
"AgEAvtrHoverMode", "AgEAvtrInterceptMode", "AgEAvtrJetEngineExhaustNozzleType", "AgEAvtrJetEngineIntakeType", "AgEAvtrJetEngineTechnologyLevel", 
"AgEAvtrJetEngineTurbineType", "AgEAvtrJetFuelType", "AgEAvtrJoinExitArcMethod", "AgEAvtrLandingApproachFixRangeMode", "AgEAvtrLaunchAttitudeMode", 
"AgEAvtrLaunchDynStateBearingRef", "AgEAvtrLaunchDynStateCoordFrame", "AgEAvtrLineOrientation", "AgEAvtrMinimizeSiteProcTimeDiff", 
"AgEAvtrMissileAeroStrategy", "AgEAvtrMissilePropStrategy", "AgEAvtrNavigatorTurnDir", "AgEAvtrNumericalIntegrator", "AgEAvtrPerfModelOverride", 
"AgEAvtrPhaseOfFlight", "AgEAvtrPitch3DControlMode", "AgEAvtrPointToPointMode", "AgEAvtrProcedureType", "AgEAvtrProfileControlLimit", 
"AgEAvtrPullMode", "AgEAvtrPushPull", "AgEAvtrRamjetMode", "AgEAvtrRefStateAttitudeMode", "AgEAvtrRefStateLateralAccelMode", 
"AgEAvtrRefStateLongitudinalAccelMode", "AgEAvtrRefStatePerfMode", "AgEAvtrRefuelDumpMode", "AgEAvtrRelAbsBearing", "AgEAvtrRelSpeedAltStopCondition", 
"AgEAvtrRelativeAltitudeMode", "AgEAvtrRendezvousStopCondition", "AgEAvtrRollLeftRight", "AgEAvtrRollUprightInverted", "AgEAvtrRollingPullMode", 
"AgEAvtrRotorcraftPowerplantType", "AgEAvtrRunwayHighLowEnd", "AgEAvtrSTKObjectWaypointOffsetMode", "AgEAvtrScramjetMode", 
"AgEAvtrSearchPatternCourseMode", "AgEAvtrSiteType", "AgEAvtrSmoothAccelLeftRight", "AgEAvtrSmoothAccelStopConditions", 
"AgEAvtrSmoothTurnFPAMode", "AgEAvtrSmoothTurnMode", "AgEAvtrStationkeepingStopCondition", "AgEAvtrStraightAheadRefFrame", 
"AgEAvtrTakeoffLandingSpeedMode", "AgEAvtrTakeoffMode", "AgEAvtrTargetPosVelType", "AgEAvtrTrajectoryBlendMode", "AgEAvtrTransitionToHoverMode", 
"AgEAvtrTurbineMode", "AgEAvtrTurnDirection", "AgEAvtrTurnMode", "AgEAvtrVTOLFinalHeadingMode", "AgEAvtrVTOLHeadingMode", 
"AgEAvtrVTOLRateMode", "AgEAvtrVTOLTransitionMode", "AgEAvtrVTOLTranslationFinalCourseMode", "AgEAvtrVTOLTranslationMode", 
"AgEAvtrVertLandingMode", "AgEAvtrWindAtmosModelSource", "AgEAvtrWindModelType", "IAgAvtrADDSMessage", "IAgAvtrADDSMessageCollection", 
"IAgAvtrARINC424Airport", "IAgAvtrARINC424Item", "IAgAvtrARINC424Runway", "IAgAvtrARINC424Source", "IAgAvtrAdvFixedWingElectricPowerplant", 
"IAgAvtrAdvFixedWingEmpiricalJetEngine", "IAgAvtrAdvFixedWingExternalAero", "IAgAvtrAdvFixedWingExternalProp", "IAgAvtrAdvFixedWingGeometry", 
"IAgAvtrAdvFixedWingGeometryBasic", "IAgAvtrAdvFixedWingGeometryVariable", "IAgAvtrAdvFixedWingPistonPowerplant", "IAgAvtrAdvFixedWingPowerplant", 
"IAgAvtrAdvFixedWingRamjetBasic", "IAgAvtrAdvFixedWingScramjetBasic", "IAgAvtrAdvFixedWingSubSuperHypersonicAero", "IAgAvtrAdvFixedWingSubSuperHypersonicProp", 
"IAgAvtrAdvFixedWingSubsonicAero", "IAgAvtrAdvFixedWingSupersonicAero", "IAgAvtrAdvFixedWingTool", "IAgAvtrAdvFixedWingTurbofanBasicABPowerplant", 
"IAgAvtrAdvFixedWingTurbofanBasicABProp", "IAgAvtrAdvFixedWingTurbojetBasicABPowerplant", "IAgAvtrAdvFixedWingTurbojetBasicABProp", 
"IAgAvtrAdvFixedWingTurbopropPowerplant", "IAgAvtrAeroPropManeuverModeHelper", "IAgAvtrAircraft", "IAgAvtrAircraftAcceleration", 
"IAgAvtrAircraftAccelerationMode", "IAgAvtrAircraftAdvAccelerationModel", "IAgAvtrAircraftAdvClimbModel", "IAgAvtrAircraftAdvCruiseModel", 
"IAgAvtrAircraftAdvDescentModel", "IAgAvtrAircraftAdvLandingModel", "IAgAvtrAircraftAdvTakeoffModel", "IAgAvtrAircraftAero", 
"IAgAvtrAircraftBasicAccelerationModel", "IAgAvtrAircraftBasicClimbModel", "IAgAvtrAircraftBasicCruiseModel", "IAgAvtrAircraftBasicDescentModel", 
"IAgAvtrAircraftBasicFixedWingAero", "IAgAvtrAircraftBasicFixedWingProp", "IAgAvtrAircraftBasicLandingModel", "IAgAvtrAircraftBasicTakeoffModel", 
"IAgAvtrAircraftCategory", "IAgAvtrAircraftClimb", "IAgAvtrAircraftCruise", "IAgAvtrAircraftDescent", "IAgAvtrAircraftExternalAero", 
"IAgAvtrAircraftExternalProp", "IAgAvtrAircraftLanding", "IAgAvtrAircraftModels", "IAgAvtrAircraftProp", "IAgAvtrAircraftSimpleAero", 
"IAgAvtrAircraftSimpleProp", "IAgAvtrAircraftTakeoff", "IAgAvtrAircraftTerrainFollow", "IAgAvtrAircraftTerrainFollowModel", 
"IAgAvtrAircraftVTOL", "IAgAvtrAircraftVTOLModel", "IAgAvtrAirportCategory", "IAgAvtrAltitudeMSLAndLevelOffOptions", "IAgAvtrAltitudeMSLOptions", 
"IAgAvtrAltitudeOptions", "IAgAvtrArcAltitudeAndDelayOptions", "IAgAvtrArcAltitudeOptions", "IAgAvtrArcOptions", "IAgAvtrArcVerticalPlaneOptions", 
"IAgAvtrAtmosphereModel", "IAgAvtrAtmosphereModelBasic", "IAgAvtrAttitudeTransitions", "IAgAvtrAutomationStrategyFactory", 
"IAgAvtrBasicFixedWingLiftHelper", "IAgAvtrBasicManeuverAirspeedOptions", "IAgAvtrBasicManeuverStrategy", "IAgAvtrBasicManeuverStrategyAileronRoll", 
"IAgAvtrBasicManeuverStrategyAutopilotNav", "IAgAvtrBasicManeuverStrategyAutopilotProf", "IAgAvtrBasicManeuverStrategyBallistic3D", 
"IAgAvtrBasicManeuverStrategyBarrelRoll", "IAgAvtrBasicManeuverStrategyBezier", "IAgAvtrBasicManeuverStrategyCruiseProfile", 
"IAgAvtrBasicManeuverStrategyFlyAOA", "IAgAvtrBasicManeuverStrategyGlideProfile", "IAgAvtrBasicManeuverStrategyIntercept", 
"IAgAvtrBasicManeuverStrategyLTAHover", "IAgAvtrBasicManeuverStrategyLoop", "IAgAvtrBasicManeuverStrategyPitch3D", "IAgAvtrBasicManeuverStrategyPull", 
"IAgAvtrBasicManeuverStrategyPushPull", "IAgAvtrBasicManeuverStrategyRelSpeedAlt", "IAgAvtrBasicManeuverStrategyRelativeBearing", 
"IAgAvtrBasicManeuverStrategyRelativeCourse", "IAgAvtrBasicManeuverStrategyRelativeFPA", "IAgAvtrBasicManeuverStrategyRendezvous", 
"IAgAvtrBasicManeuverStrategyRollingPull", "IAgAvtrBasicManeuverStrategySimpleTurn", "IAgAvtrBasicManeuverStrategySmoothAccel", 
"IAgAvtrBasicManeuverStrategySmoothTurn", "IAgAvtrBasicManeuverStrategyStationkeeping", "IAgAvtrBasicManeuverStrategyStraightAhead", 
"IAgAvtrBasicManeuverStrategyWeave", "IAgAvtrBasicManeuverTargetPosVel", "IAgAvtrBasicManeuverTargetPosVelNoisyBrgRng", 
"IAgAvtrBasicManeuverTargetPosVelNoisySurfTgt", "IAgAvtrCalculationOptions", "IAgAvtrCatalog", "IAgAvtrCatalogAirport", 
"IAgAvtrCatalogItem", "IAgAvtrCatalogNavaid", "IAgAvtrCatalogRunway", "IAgAvtrCatalogSource", "IAgAvtrCatalogVTOLPoint", 
"IAgAvtrCatalogWaypoint", "IAgAvtrClimbAndDescentTransitions", "IAgAvtrConfiguration", "IAgAvtrConnect", "IAgAvtrCruiseAirspeedAndProfileOptions", 
"IAgAvtrCruiseAirspeedOptions", "IAgAvtrCruiseAirspeedProfile", "IAgAvtrDAFIFItem", "IAgAvtrDAFIFSource", "IAgAvtrEnrouteAndDelayOptions", 
"IAgAvtrEnrouteOptions", "IAgAvtrEnrouteTurnDirectionOptions", "IAgAvtrFuelModelKeroseneAFPROP", "IAgAvtrFuelModelKeroseneCEA", 
"IAgAvtrFuelTankExternal", "IAgAvtrFuelTankInternal", "IAgAvtrHoverAltitudeOptions", "IAgAvtrLandingEnterDownwindPattern", 
"IAgAvtrLandingInterceptGlideslope", "IAgAvtrLandingStandardInstrumentApproach", "IAgAvtrLevelTurns", "IAgAvtrMissile", 
"IAgAvtrMissileAdvancedAero", "IAgAvtrMissileAero", "IAgAvtrMissileExternalAero", "IAgAvtrMissileExternalProp", "IAgAvtrMissileModels", 
"IAgAvtrMissileProp", "IAgAvtrMissileRamjetProp", "IAgAvtrMissileRocketProp", "IAgAvtrMissileSimpleAero", "IAgAvtrMissileSimpleProp", 
"IAgAvtrMissileTurbojetProp", "IAgAvtrMission", "IAgAvtrNavaidCategory", "IAgAvtrNavigationOptions", "IAgAvtrPayloadStation", 
"IAgAvtrPerformanceModel", "IAgAvtrPerformanceModelOptions", "IAgAvtrPhase", "IAgAvtrPhaseCollection", "IAgAvtrProcedure", 
"IAgAvtrProcedureAirway", "IAgAvtrProcedureAirwayRouter", "IAgAvtrProcedureArcEnroute", "IAgAvtrProcedureArcPointToPoint", 
"IAgAvtrProcedureAreaTargetSearch", "IAgAvtrProcedureBasicManeuver", "IAgAvtrProcedureBasicPointToPoint", "IAgAvtrProcedureCollection", 
"IAgAvtrProcedureDelay", "IAgAvtrProcedureEnroute", "IAgAvtrProcedureExtEphem", "IAgAvtrProcedureFastTimeOptions", "IAgAvtrProcedureFlightLine", 
"IAgAvtrProcedureFormationFlyer", "IAgAvtrProcedureFormationRecover", "IAgAvtrProcedureHoldingCircular", "IAgAvtrProcedureHoldingFigure8", 
"IAgAvtrProcedureHoldingRacetrack", "IAgAvtrProcedureHover", "IAgAvtrProcedureHoverTranslate", "IAgAvtrProcedureInFormation", 
"IAgAvtrProcedureLanding", "IAgAvtrProcedureLaunch", "IAgAvtrProcedureLaunchDynState", "IAgAvtrProcedureLaunchWaypoint", 
"IAgAvtrProcedureParallelFlightLine", "IAgAvtrProcedureReferenceState", "IAgAvtrProcedureSuperProcedure", "IAgAvtrProcedureTakeoff", 
"IAgAvtrProcedureTerrainFollow", "IAgAvtrProcedureTimeOptions", "IAgAvtrProcedureTransitionToForwardFlight", "IAgAvtrProcedureTransitionToHover", 
"IAgAvtrProcedureVGTPoint", "IAgAvtrProcedureVerticalLanding", "IAgAvtrProcedureVerticalTakeoff", "IAgAvtrPropagator", "IAgAvtrPropulsionEfficiencies", 
"IAgAvtrPropulsionThrust", "IAgAvtrRefStateForwardFlightOptions", "IAgAvtrRefStateHoverOptions", "IAgAvtrRefStateTakeoffLandingOptions", 
"IAgAvtrRefStateWeightOnWheelsOptions", "IAgAvtrRefuelDumpProperties", "IAgAvtrRotorcraft", "IAgAvtrRotorcraftAero", "IAgAvtrRotorcraftModels", 
"IAgAvtrRotorcraftProp", "IAgAvtrRunwayCategory", "IAgAvtrRunwayHeadingOptions", "IAgAvtrSite", "IAgAvtrSiteAirportFromCatalog", 
"IAgAvtrSiteDynState", "IAgAvtrSiteEndOfPrevProcedure", "IAgAvtrSiteNavaidFromCatalog", "IAgAvtrSiteReferenceState", "IAgAvtrSiteRelToPrevProcedure", 
"IAgAvtrSiteRelToSTKObject", "IAgAvtrSiteRunway", "IAgAvtrSiteRunwayFromCatalog", "IAgAvtrSiteSTKAreaTarget", "IAgAvtrSiteSTKObjectWaypoint", 
"IAgAvtrSiteSTKStaticObject", "IAgAvtrSiteSTKVehicle", "IAgAvtrSiteSuperProcedure", "IAgAvtrSiteUnknown", "IAgAvtrSiteVTOLPoint", 
"IAgAvtrSiteVTOLPointFromCatalog", "IAgAvtrSiteWaypoint", "IAgAvtrSiteWaypointFromCatalog", "IAgAvtrStation", "IAgAvtrStationCollection", 
"IAgAvtrTakeoffDeparturePoint", "IAgAvtrTakeoffLowTransition", "IAgAvtrTakeoffNormal", "IAgAvtrUserRunway", "IAgAvtrUserRunwaySource", 
"IAgAvtrUserVTOLPoint", "IAgAvtrUserVTOLPointSource", "IAgAvtrUserWaypoint", "IAgAvtrUserWaypointSource", "IAgAvtrVTOLPointCategory", 
"IAgAvtrVehicle", "IAgAvtrVerticalPlaneAndFlightPathOptions", "IAgAvtrVerticalPlaneOptions", "IAgAvtrWaypointCategory", 
"IAgAvtrWindModel", "IAgAvtrWindModelADDS", "IAgAvtrWindModelConstant"]

import typing

from ctypes   import byref, POINTER
from datetime import datetime
from enum     import IntEnum, IntFlag

from ...internal  import comutil          as agcom
from ...internal  import coclassutil      as agcls
from ...internal  import marshall         as agmarshall
from ...internal  import dataanalysisutil as agdata
from ...utilities import colors           as agcolor
from ...internal.comutil     import IUnknown, IDispatch, IPictureDisp
from ...internal.apiutil     import interface_proxy, enumerator_proxy, out_arg
from ...internal.eventutil   import *
from ...utilities.exceptions import *


def _raise_uninitialized_error(*args):
    raise STKRuntimeError("Valid STK object model classes are returned from STK methods and should not be created independently.")

class AgEAvtrErrorCodes(IntEnum):
    """Error Codes."""
    # Object not found.
    eAvtrErrorObjectNotFound = (((1 << 31) | (4 << 16)) | (0x200 + 1))
    # Index out of range.
    eAvtrErrorIndexOutOfRange = (((1 << 31) | (4 << 16)) | (0x200 + 2))
    # The attribute is invalid.
    eAvtrErrorInvalidAttribute = (((1 << 31) | (4 << 16)) | (0x200 + 3))
    # The command failed.
    eAvtrErrorCommandFailed = (((1 << 31) | (4 << 16)) | (0x200 + 4))
    # Invalid argument.
    eAvtrAvtrErrorInvalidArg = (((1 << 31) | (4 << 16)) | (0x200 + 5))
    # Empty argument.
    eAvtrErrorEmptyArg = (((1 << 31) | (4 << 16)) | (0x200 + 6))
    # Object was not removed.
    eAvtrErrorObjectNotRemoved = (((1 << 31) | (4 << 16)) | (0x200 + 7))
    # Error renaming object.
    eAvtrErrorFailedToRenameObject = (((1 << 31) | (4 << 16)) | (0x200 + 8))
    # Unknown class type.
    eAvtrErrorUnknownClassType = (((1 << 31) | (4 << 16)) | (0x200 + 9))
    # Failed to create the object.
    eAvtrErrorFailedToCreateObject = (((1 << 31) | (4 << 16)) | (0x200 + 10))
    # Invalid choice for object link.
    eAvtrErrorObjectLinkInvalidChoice = (((1 << 31) | (4 << 16)) | (0x200 + 11))
    # No choices available.
    eAvtrErrorObjectLinkNoChoices = (((1 << 31) | (4 << 16)) | (0x200 + 12))
    # Read only attribute.
    eAvtrErrorReadOnlyAttribute = (((1 << 31) | (4 << 16)) | (0x200 + 13))
    # Invalid constraint list.
    eAvtrErrorCstrInvalidCstrList = (((1 << 31) | (4 << 16)) | (0x200 + 14))
    # InvalidConstraint.
    eAvtrErrorCstrInvalidConstraint = (((1 << 31) | (4 << 16)) | (0x200 + 15))
    # List if read only.
    eAvtrErrorListReadOnly = (((1 << 31) | (4 << 16)) | (0x200 + 16))
    # Failed to insert the item into the list.
    eAvtrErrorListInsertFailed = (((1 << 31) | (4 << 16)) | (0x200 + 17))
    # Length is invalid.
    eAvtrErrorInvalidLength = (((1 << 31) | (4 << 16)) | (0x200 + 18))
    # Error loading a file.
    eAvtrErrorFailedToLoadFile = (((1 << 31) | (4 << 16)) | (0x200 + 19))
    # Invalid operation.
    eAvtrErrorInvalidOperation = (((1 << 31) | (4 << 16)) | (0x200 + 20))
    # Method failed.
    eAvtrErrorMethodInvokeFailed = (((1 << 31) | (4 << 16)) | (0x200 + 21))
    # Deprecated property or method.
    eAvtrErrorDeprecated = (((1 << 31) | (4 << 16)) | (0x200 + 22))

AgEAvtrErrorCodes.eAvtrErrorObjectNotFound.__doc__ = "Object not found."
AgEAvtrErrorCodes.eAvtrErrorIndexOutOfRange.__doc__ = "Index out of range."
AgEAvtrErrorCodes.eAvtrErrorInvalidAttribute.__doc__ = "The attribute is invalid."
AgEAvtrErrorCodes.eAvtrErrorCommandFailed.__doc__ = "The command failed."
AgEAvtrErrorCodes.eAvtrAvtrErrorInvalidArg.__doc__ = "Invalid argument."
AgEAvtrErrorCodes.eAvtrErrorEmptyArg.__doc__ = "Empty argument."
AgEAvtrErrorCodes.eAvtrErrorObjectNotRemoved.__doc__ = "Object was not removed."
AgEAvtrErrorCodes.eAvtrErrorFailedToRenameObject.__doc__ = "Error renaming object."
AgEAvtrErrorCodes.eAvtrErrorUnknownClassType.__doc__ = "Unknown class type."
AgEAvtrErrorCodes.eAvtrErrorFailedToCreateObject.__doc__ = "Failed to create the object."
AgEAvtrErrorCodes.eAvtrErrorObjectLinkInvalidChoice.__doc__ = "Invalid choice for object link."
AgEAvtrErrorCodes.eAvtrErrorObjectLinkNoChoices.__doc__ = "No choices available."
AgEAvtrErrorCodes.eAvtrErrorReadOnlyAttribute.__doc__ = "Read only attribute."
AgEAvtrErrorCodes.eAvtrErrorCstrInvalidCstrList.__doc__ = "Invalid constraint list."
AgEAvtrErrorCodes.eAvtrErrorCstrInvalidConstraint.__doc__ = "InvalidConstraint."
AgEAvtrErrorCodes.eAvtrErrorListReadOnly.__doc__ = "List if read only."
AgEAvtrErrorCodes.eAvtrErrorListInsertFailed.__doc__ = "Failed to insert the item into the list."
AgEAvtrErrorCodes.eAvtrErrorInvalidLength.__doc__ = "Length is invalid."
AgEAvtrErrorCodes.eAvtrErrorFailedToLoadFile.__doc__ = "Error loading a file."
AgEAvtrErrorCodes.eAvtrErrorInvalidOperation.__doc__ = "Invalid operation."
AgEAvtrErrorCodes.eAvtrErrorMethodInvokeFailed.__doc__ = "Method failed."
AgEAvtrErrorCodes.eAvtrErrorDeprecated.__doc__ = "Deprecated property or method."

agcls.AgTypeNameMap["AgEAvtrErrorCodes"] = AgEAvtrErrorCodes

class AgEAvtrClosureValue(IntEnum):
    """The closure value."""
    # The closure mode
    eClosureMode = 0
    # The HOBS max angle offset
    eMaxAngle = 1
    # The HOBS angle tolerance
    eAngleTol = 2

AgEAvtrClosureValue.eClosureMode.__doc__ = "The closure mode"
AgEAvtrClosureValue.eMaxAngle.__doc__ = "The HOBS max angle offset"
AgEAvtrClosureValue.eAngleTol.__doc__ = "The HOBS angle tolerance"

agcls.AgTypeNameMap["AgEAvtrClosureValue"] = AgEAvtrClosureValue

class AgEAvtrProcedureType(IntEnum):
    """Aviator procedure types."""
    # Airway procedure.
    eProcAirway = 0
    # Airway Router procedure.
    eProcAirwayRouter = 1
    # ArcEnroute procedure.
    eProcArcEnroute = 2
    # ArcPointToPoint procedure.
    eProcArcPointToPoint = 3
    # Area Target Search procedure.
    eProcAreaTargetSearch = 4
    # Basic Maneuver procedure.
    eProcBasicManeuver = 5
    # Basic Point to Point procedure.
    eProcBasicPointToPoint = 6
    # Delay procedure.
    eProcDelay = 7
    # Enroute procedure.
    eProcEnroute = 8
    # Flight Line procedure.
    eProcFlightLine = 9
    # Formation Recover procedure.
    eProcFormationRecover = 10
    # Holding Circular procedure.
    eProcHoldingCircular = 11
    # Holding Figure 8 procedure.
    eProcHoldingFigure8 = 12
    # Holding Racetrack procedure.
    eProcHoldingRacetrack = 13
    # Hover procedure.
    eProcHover = 14
    # Hover Translate procedure.
    eProcHoverTranslate = 15
    # In Formation procedure.
    eProcInFormation = 16
    # Landing procedure.
    eProcLanding = 17
    # Launch procedure.
    eProcLaunch = 18
    # Parallel Flight Line procedure.
    eProcParallelFlightLine = 19
    # Reference State procedure.
    eProcReferenceState = 20
    # Super Procedure procedure.
    eProcSuperProcedure = 21
    # Takeoff procedure.
    eProcTakeoff = 22
    # Terrain Following procedure.
    eProcTerrainFollowing = 23
    # Transition to Forward Flight procedure.
    eProcTransitionToForwardFlight = 24
    # Transition To Hover procedure.
    eProcTransitionToHover = 25
    # Vertical Landing procedure.
    eProcVerticalLanding = 26
    # Vertical Takeoff procedure.
    eProcVerticalTakeoff = 27
    # VGT Point procedure.
    eProcVGTPoint = 28
    # LaunchDynState procedure.
    eProcLaunchDynState = 29
    # LaunchWaypoint procedure.
    eProcLaunchWaypoint = 30
    # FormationFlyer procedure.
    eProcFormationFlyer = 31
    # ExtEphem procedure.
    eProcExtEphem = 32

AgEAvtrProcedureType.eProcAirway.__doc__ = "Airway procedure."
AgEAvtrProcedureType.eProcAirwayRouter.__doc__ = "Airway Router procedure."
AgEAvtrProcedureType.eProcArcEnroute.__doc__ = "ArcEnroute procedure."
AgEAvtrProcedureType.eProcArcPointToPoint.__doc__ = "ArcPointToPoint procedure."
AgEAvtrProcedureType.eProcAreaTargetSearch.__doc__ = "Area Target Search procedure."
AgEAvtrProcedureType.eProcBasicManeuver.__doc__ = "Basic Maneuver procedure."
AgEAvtrProcedureType.eProcBasicPointToPoint.__doc__ = "Basic Point to Point procedure."
AgEAvtrProcedureType.eProcDelay.__doc__ = "Delay procedure."
AgEAvtrProcedureType.eProcEnroute.__doc__ = "Enroute procedure."
AgEAvtrProcedureType.eProcFlightLine.__doc__ = "Flight Line procedure."
AgEAvtrProcedureType.eProcFormationRecover.__doc__ = "Formation Recover procedure."
AgEAvtrProcedureType.eProcHoldingCircular.__doc__ = "Holding Circular procedure."
AgEAvtrProcedureType.eProcHoldingFigure8.__doc__ = "Holding Figure 8 procedure."
AgEAvtrProcedureType.eProcHoldingRacetrack.__doc__ = "Holding Racetrack procedure."
AgEAvtrProcedureType.eProcHover.__doc__ = "Hover procedure."
AgEAvtrProcedureType.eProcHoverTranslate.__doc__ = "Hover Translate procedure."
AgEAvtrProcedureType.eProcInFormation.__doc__ = "In Formation procedure."
AgEAvtrProcedureType.eProcLanding.__doc__ = "Landing procedure."
AgEAvtrProcedureType.eProcLaunch.__doc__ = "Launch procedure."
AgEAvtrProcedureType.eProcParallelFlightLine.__doc__ = "Parallel Flight Line procedure."
AgEAvtrProcedureType.eProcReferenceState.__doc__ = "Reference State procedure."
AgEAvtrProcedureType.eProcSuperProcedure.__doc__ = "Super Procedure procedure."
AgEAvtrProcedureType.eProcTakeoff.__doc__ = "Takeoff procedure."
AgEAvtrProcedureType.eProcTerrainFollowing.__doc__ = "Terrain Following procedure."
AgEAvtrProcedureType.eProcTransitionToForwardFlight.__doc__ = "Transition to Forward Flight procedure."
AgEAvtrProcedureType.eProcTransitionToHover.__doc__ = "Transition To Hover procedure."
AgEAvtrProcedureType.eProcVerticalLanding.__doc__ = "Vertical Landing procedure."
AgEAvtrProcedureType.eProcVerticalTakeoff.__doc__ = "Vertical Takeoff procedure."
AgEAvtrProcedureType.eProcVGTPoint.__doc__ = "VGT Point procedure."
AgEAvtrProcedureType.eProcLaunchDynState.__doc__ = "LaunchDynState procedure."
AgEAvtrProcedureType.eProcLaunchWaypoint.__doc__ = "LaunchWaypoint procedure."
AgEAvtrProcedureType.eProcFormationFlyer.__doc__ = "FormationFlyer procedure."
AgEAvtrProcedureType.eProcExtEphem.__doc__ = "ExtEphem procedure."

agcls.AgTypeNameMap["AgEAvtrProcedureType"] = AgEAvtrProcedureType

class AgEAvtrSiteType(IntEnum):
    """Aviator site types."""
    # Airport from Catalog site.
    eSiteAirportFromCatalog = 0
    # End of Previous Procedure site.
    eSiteEndOfPrevProcedure = 1
    # Navaid from Catalog site.
    eSiteNavaidFromCatalog = 2
    # Reference State site.
    eSiteReferenceState = 3
    # Relative to Previous Procedure site.
    eSiteRelativeToPrevProcedure = 4
    # Relative to Stationary STK Object site.
    eSiteRelativeToStationarySTKObject = 5
    # Runway site.
    eSiteRunway = 6
    # Runway from Catalog site.
    eSiteRunwayFromCatalog = 7
    # STK Area Target site.
    eSiteSTKAreaTarget = 8
    # STK Object Waypoint site.
    eSiteSTKObjectWaypoint = 9
    # STK STatic Object site.
    eSiteSTKStaticObject = 10
    # STK Vehicle site.
    eSiteSTKVehicle = 11
    # Super Procedure site.
    eSiteSuperProcedure = 12
    # VTOL Point site.
    eSiteVTOLPoint = 13
    # VTOL Point from Catalog site.
    eSiteVTOLPointFromCatalog = 14
    # Waypoint site.
    eSiteWaypoint = 15
    # Waypoint from Catalog site.
    eSiteWaypointFromCatalog = 16
    # DynState site.
    eSiteDynState = 17

AgEAvtrSiteType.eSiteAirportFromCatalog.__doc__ = "Airport from Catalog site."
AgEAvtrSiteType.eSiteEndOfPrevProcedure.__doc__ = "End of Previous Procedure site."
AgEAvtrSiteType.eSiteNavaidFromCatalog.__doc__ = "Navaid from Catalog site."
AgEAvtrSiteType.eSiteReferenceState.__doc__ = "Reference State site."
AgEAvtrSiteType.eSiteRelativeToPrevProcedure.__doc__ = "Relative to Previous Procedure site."
AgEAvtrSiteType.eSiteRelativeToStationarySTKObject.__doc__ = "Relative to Stationary STK Object site."
AgEAvtrSiteType.eSiteRunway.__doc__ = "Runway site."
AgEAvtrSiteType.eSiteRunwayFromCatalog.__doc__ = "Runway from Catalog site."
AgEAvtrSiteType.eSiteSTKAreaTarget.__doc__ = "STK Area Target site."
AgEAvtrSiteType.eSiteSTKObjectWaypoint.__doc__ = "STK Object Waypoint site."
AgEAvtrSiteType.eSiteSTKStaticObject.__doc__ = "STK STatic Object site."
AgEAvtrSiteType.eSiteSTKVehicle.__doc__ = "STK Vehicle site."
AgEAvtrSiteType.eSiteSuperProcedure.__doc__ = "Super Procedure site."
AgEAvtrSiteType.eSiteVTOLPoint.__doc__ = "VTOL Point site."
AgEAvtrSiteType.eSiteVTOLPointFromCatalog.__doc__ = "VTOL Point from Catalog site."
AgEAvtrSiteType.eSiteWaypoint.__doc__ = "Waypoint site."
AgEAvtrSiteType.eSiteWaypointFromCatalog.__doc__ = "Waypoint from Catalog site."
AgEAvtrSiteType.eSiteDynState.__doc__ = "DynState site."

agcls.AgTypeNameMap["AgEAvtrSiteType"] = AgEAvtrSiteType

class AgEAvtrBasicManeuverStrategy(IntEnum):
    """Basic maneuver strategy types."""
    # Straight Ahead strategy.
    eStraightAhead = 0
    # Weave strategy.
    eWeave = 1

AgEAvtrBasicManeuverStrategy.eStraightAhead.__doc__ = "Straight Ahead strategy."
AgEAvtrBasicManeuverStrategy.eWeave.__doc__ = "Weave strategy."

agcls.AgTypeNameMap["AgEAvtrBasicManeuverStrategy"] = AgEAvtrBasicManeuverStrategy

class AgEAvtrStraightAheadRefFrame(IntEnum):
    """Straight Ahead basic maneuver Reference Frame."""
    # Maintain Course.
    eMaintainCourse = 0
    # Maintain Heading.
    eMaintainHeading = 1
    # No Lateral Accelerations.
    eNoLateralAcc = 2
    # Compensate For Coriolis
    eCompensateCoriolis = 3

AgEAvtrStraightAheadRefFrame.eMaintainCourse.__doc__ = "Maintain Course."
AgEAvtrStraightAheadRefFrame.eMaintainHeading.__doc__ = "Maintain Heading."
AgEAvtrStraightAheadRefFrame.eNoLateralAcc.__doc__ = "No Lateral Accelerations."
AgEAvtrStraightAheadRefFrame.eCompensateCoriolis.__doc__ = "Compensate For Coriolis"

agcls.AgTypeNameMap["AgEAvtrStraightAheadRefFrame"] = AgEAvtrStraightAheadRefFrame

class AgEAvtrAirspeedType(IntEnum):
    """Airspeed types."""
    # Mach number.
    eMach = 0
    # Equivalent airspeed.
    eEAS = 1
    # Calibrated airspeed.
    eCAS = 2
    # True airspeed.
    eTAS = 3

AgEAvtrAirspeedType.eMach.__doc__ = "Mach number."
AgEAvtrAirspeedType.eEAS.__doc__ = "Equivalent airspeed."
AgEAvtrAirspeedType.eCAS.__doc__ = "Calibrated airspeed."
AgEAvtrAirspeedType.eTAS.__doc__ = "True airspeed."

agcls.AgTypeNameMap["AgEAvtrAirspeedType"] = AgEAvtrAirspeedType

class AgEAvtrAeroPropSimpleMode(IntEnum):
    """Aircraft operating mode for basic acceleration models with aerodynamics set to Simple."""
    # Fixed wing operatiog mode.
    eFixedWing = 0
    # Helicopter operating mode.
    eHelicopter = 1

AgEAvtrAeroPropSimpleMode.eFixedWing.__doc__ = "Fixed wing operatiog mode."
AgEAvtrAeroPropSimpleMode.eHelicopter.__doc__ = "Helicopter operating mode."

agcls.AgTypeNameMap["AgEAvtrAeroPropSimpleMode"] = AgEAvtrAeroPropSimpleMode

class AgEAvtrAeroPropFlightMode(IntEnum):
    """Flight mode for the Aero/Prop maneuver mode helper in aircraft acceleration models."""
    # Forward Flight mode.
    eFlightPerfForwardFlight = 0
    # Hover mode.
    eFlightPerfHover = 1
    # Takeoff mode.
    eFlightPerfTakeoff = 2
    # Landing mode.
    eFlightPerfLanding = 3
    # Weight on wheels mode.
    eFlightPerfWeightOnWheels = 4

AgEAvtrAeroPropFlightMode.eFlightPerfForwardFlight.__doc__ = "Forward Flight mode."
AgEAvtrAeroPropFlightMode.eFlightPerfHover.__doc__ = "Hover mode."
AgEAvtrAeroPropFlightMode.eFlightPerfTakeoff.__doc__ = "Takeoff mode."
AgEAvtrAeroPropFlightMode.eFlightPerfLanding.__doc__ = "Landing mode."
AgEAvtrAeroPropFlightMode.eFlightPerfWeightOnWheels.__doc__ = "Weight on wheels mode."

agcls.AgTypeNameMap["AgEAvtrAeroPropFlightMode"] = AgEAvtrAeroPropFlightMode

class AgEAvtrPhaseOfFlight(IntEnum):
    """Flight mode for basic maneuver procedures."""
    # Takeoff flight mode.
    eFlightPhaseTakeoff = 1
    # Forward flight climb flight mode.
    eFlightPhaseClimb = 2
    # Forward flight - cruise flight mode.
    eFlightPhaseCruise = 3
    # Forward flight descend flight mode.
    eFlightPhaseDescend = 4
    # Landing flight mode.
    eFlightPhaseLanding = 5
    # Rotary wing / hover flight mode
    eFlightPhaseVTOL = 6

AgEAvtrPhaseOfFlight.eFlightPhaseTakeoff.__doc__ = "Takeoff flight mode."
AgEAvtrPhaseOfFlight.eFlightPhaseClimb.__doc__ = "Forward flight climb flight mode."
AgEAvtrPhaseOfFlight.eFlightPhaseCruise.__doc__ = "Forward flight - cruise flight mode."
AgEAvtrPhaseOfFlight.eFlightPhaseDescend.__doc__ = "Forward flight descend flight mode."
AgEAvtrPhaseOfFlight.eFlightPhaseLanding.__doc__ = "Landing flight mode."
AgEAvtrPhaseOfFlight.eFlightPhaseVTOL.__doc__ = "Rotary wing / hover flight mode"

agcls.AgTypeNameMap["AgEAvtrPhaseOfFlight"] = AgEAvtrPhaseOfFlight

class AgEAvtrCruiseSpeed(IntEnum):
    """Cruise airspeed type for the procedure."""
    # Minimum airspeed.
    eMinAirspeed = 0
    # Maximum endurance airspeed.
    eMaxEnduranceAirspeed = 1
    # Maximum range airspeed.
    eMaxRangeAirspeed = 2
    # Other airspeed.
    eOtherAirspeed = 3
    # Maximum airspeed.
    eMaxAirspeed = 4
    # Maximum performance airspeed.
    eMaxPerfAirspeed = 6

AgEAvtrCruiseSpeed.eMinAirspeed.__doc__ = "Minimum airspeed."
AgEAvtrCruiseSpeed.eMaxEnduranceAirspeed.__doc__ = "Maximum endurance airspeed."
AgEAvtrCruiseSpeed.eMaxRangeAirspeed.__doc__ = "Maximum range airspeed."
AgEAvtrCruiseSpeed.eOtherAirspeed.__doc__ = "Other airspeed."
AgEAvtrCruiseSpeed.eMaxAirspeed.__doc__ = "Maximum airspeed."
AgEAvtrCruiseSpeed.eMaxPerfAirspeed.__doc__ = "Maximum performance airspeed."

agcls.AgTypeNameMap["AgEAvtrCruiseSpeed"] = AgEAvtrCruiseSpeed

class AgEAvtrTakeoffMode(IntEnum):
    """Takeoff procedure mode."""
    # Normal takeoff mode.
    eTakeoffNormal = 0
    # Fly to departure point takeoff mode.
    eTakeoffFlyToDeparturePoint = 1
    # Low transition takeoff.
    eTakeoffLowTransition = 2

AgEAvtrTakeoffMode.eTakeoffNormal.__doc__ = "Normal takeoff mode."
AgEAvtrTakeoffMode.eTakeoffFlyToDeparturePoint.__doc__ = "Fly to departure point takeoff mode."
AgEAvtrTakeoffMode.eTakeoffLowTransition.__doc__ = "Low transition takeoff."

agcls.AgTypeNameMap["AgEAvtrTakeoffMode"] = AgEAvtrTakeoffMode

class AgEAvtrApproachMode(IntEnum):
    """Landing procedure approach mode."""
    # Standard instrument approach mode.
    eStandardInstrumentApproach = 0
    # Intercept Glideslope approach mode.
    eInterceptGlideslope = 1
    # Enter downwind pattern approach mode.
    eEnterDownwindPattern = 2

AgEAvtrApproachMode.eStandardInstrumentApproach.__doc__ = "Standard instrument approach mode."
AgEAvtrApproachMode.eInterceptGlideslope.__doc__ = "Intercept Glideslope approach mode."
AgEAvtrApproachMode.eEnterDownwindPattern.__doc__ = "Enter downwind pattern approach mode."

agcls.AgTypeNameMap["AgEAvtrApproachMode"] = AgEAvtrApproachMode

class AgEAvtrNavigatorTurnDir(IntEnum):
    """Turn mode for procedures with Enroute Turn Direction options."""
    # Automatic turn. Aviator will determine the direction of the turn.
    eNavigatorTurnAuto = 0
    # Left turn.
    eNavigatorTurnLeft = 1
    # Right turn.
    eNavigatorTurnRight = 2

AgEAvtrNavigatorTurnDir.eNavigatorTurnAuto.__doc__ = "Automatic turn. Aviator will determine the direction of the turn."
AgEAvtrNavigatorTurnDir.eNavigatorTurnLeft.__doc__ = "Left turn."
AgEAvtrNavigatorTurnDir.eNavigatorTurnRight.__doc__ = "Right turn."

agcls.AgTypeNameMap["AgEAvtrNavigatorTurnDir"] = AgEAvtrNavigatorTurnDir

class AgEAvtrBasicManeuverFuelFlowType(IntEnum):
    """Fuel flow type for basic maneuver procedures."""
    # Fuel flow defined for the current Takeoff performance model.
    eBasicManeuverFuelFlowTakeoff = 0
    # Fuel flow defined for the current Cruise performance model.
    eBasicManeuverFuelFlowCruise = 1
    # Fuel flow defined for the current Landing performance model.
    eBasicManeuverFuelFlowLanding = 2
    # Fuel flow defined for the current VTOL performance model.
    eBasicManeuverFuelFlowVTOL = 3
    # Fuel flow defined for the Aerodynamics and Propulsion Analysis component of the current basic acceleration performance model.
    eBasicManeuverFuelFlowAeroProp = 4
    # Fuel flow defined manually.
    eBasicManeuverFuelFlowOverride = 5
    # Fuel flow defined using the thrust model for this maneuver.
    eBasicManeuverFuelFlowThrustModel = 6

AgEAvtrBasicManeuverFuelFlowType.eBasicManeuverFuelFlowTakeoff.__doc__ = "Fuel flow defined for the current Takeoff performance model."
AgEAvtrBasicManeuverFuelFlowType.eBasicManeuverFuelFlowCruise.__doc__ = "Fuel flow defined for the current Cruise performance model."
AgEAvtrBasicManeuverFuelFlowType.eBasicManeuverFuelFlowLanding.__doc__ = "Fuel flow defined for the current Landing performance model."
AgEAvtrBasicManeuverFuelFlowType.eBasicManeuverFuelFlowVTOL.__doc__ = "Fuel flow defined for the current VTOL performance model."
AgEAvtrBasicManeuverFuelFlowType.eBasicManeuverFuelFlowAeroProp.__doc__ = "Fuel flow defined for the Aerodynamics and Propulsion Analysis component of the current basic acceleration performance model."
AgEAvtrBasicManeuverFuelFlowType.eBasicManeuverFuelFlowOverride.__doc__ = "Fuel flow defined manually."
AgEAvtrBasicManeuverFuelFlowType.eBasicManeuverFuelFlowThrustModel.__doc__ = "Fuel flow defined using the thrust model for this maneuver."

agcls.AgTypeNameMap["AgEAvtrBasicManeuverFuelFlowType"] = AgEAvtrBasicManeuverFuelFlowType

class AgEAvtrBasicManeuverAltitudeLimit(IntEnum):
    """The type of response Aviator will have if the maneuver attempts to exceed the altitude limit."""
    # Error when altitude limit exceeded.
    eBasicManeuverAltLimitError = 0
    # Stop when altitude limit exceeded.
    eBasicManeuverAltLimitStop = 1
    # Continue when altitude limit exceeded.
    eBasicManeuverAltLimitContinue = 2

AgEAvtrBasicManeuverAltitudeLimit.eBasicManeuverAltLimitError.__doc__ = "Error when altitude limit exceeded."
AgEAvtrBasicManeuverAltitudeLimit.eBasicManeuverAltLimitStop.__doc__ = "Stop when altitude limit exceeded."
AgEAvtrBasicManeuverAltitudeLimit.eBasicManeuverAltLimitContinue.__doc__ = "Continue when altitude limit exceeded."

agcls.AgTypeNameMap["AgEAvtrBasicManeuverAltitudeLimit"] = AgEAvtrBasicManeuverAltitudeLimit

class AgEAvtrRunwayHighLowEnd(IntEnum):
    """Runway heading that the aircraft will use."""
    # High end.
    eHighEnd = 0
    # Low end.
    eLowEnd = 1
    # Headwind.
    eHeadwind = 2

AgEAvtrRunwayHighLowEnd.eHighEnd.__doc__ = "High end."
AgEAvtrRunwayHighLowEnd.eLowEnd.__doc__ = "Low end."
AgEAvtrRunwayHighLowEnd.eHeadwind.__doc__ = "Headwind."

agcls.AgTypeNameMap["AgEAvtrRunwayHighLowEnd"] = AgEAvtrRunwayHighLowEnd

class AgEAvtrBasicManeuverRefFrame(IntEnum):
    """Reference frame for the basic maneuver strategy."""
    # Earth frame.
    eEarthFrame = 0
    # Wind frame.
    eWindFrame = 1

AgEAvtrBasicManeuverRefFrame.eEarthFrame.__doc__ = "Earth frame."
AgEAvtrBasicManeuverRefFrame.eWindFrame.__doc__ = "Wind frame."

agcls.AgTypeNameMap["AgEAvtrBasicManeuverRefFrame"] = AgEAvtrBasicManeuverRefFrame

class AgEAvtrBasicManeuverStrategyNavControlLimit(IntEnum):
    """Method to define the control limits for the aircraft during the maneuver."""
    # Use Accel Perf Model.
    eNavUseAccelPerfModel = 0
    # Specify min turn radius.
    eNavMinTurnRadius = 1
    # Specify max turn rate.
    eNavMaxTurnRate = 2
    # Specify max horiz accel.
    eNavMaxHorizAccel = 3

AgEAvtrBasicManeuverStrategyNavControlLimit.eNavUseAccelPerfModel.__doc__ = "Use Accel Perf Model."
AgEAvtrBasicManeuverStrategyNavControlLimit.eNavMinTurnRadius.__doc__ = "Specify min turn radius."
AgEAvtrBasicManeuverStrategyNavControlLimit.eNavMaxTurnRate.__doc__ = "Specify max turn rate."
AgEAvtrBasicManeuverStrategyNavControlLimit.eNavMaxHorizAccel.__doc__ = "Specify max horiz accel."

agcls.AgTypeNameMap["AgEAvtrBasicManeuverStrategyNavControlLimit"] = AgEAvtrBasicManeuverStrategyNavControlLimit

class AgEAvtrAccelManeuverMode(IntEnum):
    """The mode that the aircraft will adhere to the specified acceleration parameters."""
    # Constant value (default).
    eAccelManeuverModeNormal = 0
    # Scale by amtmospheric density. The aircraft will consider dynamic pressure when calculating turn radius.
    eAccelManeuverModeDensityScale = 1
    # Aero/Prop maneuver mode.
    eAccelManeuverModeAeroProp = 2

AgEAvtrAccelManeuverMode.eAccelManeuverModeNormal.__doc__ = "Constant value (default)."
AgEAvtrAccelManeuverMode.eAccelManeuverModeDensityScale.__doc__ = "Scale by amtmospheric density. The aircraft will consider dynamic pressure when calculating turn radius."
AgEAvtrAccelManeuverMode.eAccelManeuverModeAeroProp.__doc__ = "Aero/Prop maneuver mode."

agcls.AgTypeNameMap["AgEAvtrAccelManeuverMode"] = AgEAvtrAccelManeuverMode

class AgEAvtrAircraftAeroStrategy(IntEnum):
    """The aerodynamic strategy used to compute lift, drag, angle of attack, sideslip and intermediate / derived values."""
    # Simple aerodynamics.
    eAircraftAeroSimple = 0
    # External file aerodynamics.
    eAircraftAeroExternalFile = 1
    # Basic fixed wing aerodynamics.
    eAircraftAeroBasicFixedWing = 2
    # Advanced missile aerodynamics.
    eAircraftAeroAdvancedMissile = 3

AgEAvtrAircraftAeroStrategy.eAircraftAeroSimple.__doc__ = "Simple aerodynamics."
AgEAvtrAircraftAeroStrategy.eAircraftAeroExternalFile.__doc__ = "External file aerodynamics."
AgEAvtrAircraftAeroStrategy.eAircraftAeroBasicFixedWing.__doc__ = "Basic fixed wing aerodynamics."
AgEAvtrAircraftAeroStrategy.eAircraftAeroAdvancedMissile.__doc__ = "Advanced missile aerodynamics."

agcls.AgTypeNameMap["AgEAvtrAircraftAeroStrategy"] = AgEAvtrAircraftAeroStrategy

class AgEAvtrAircraftPropStrategy(IntEnum):
    """The propulsion strategy used to compute thrust and throttle setting."""
    # Simple propulsion.
    eAircraftPropSimple = 0
    # External file propulsion.
    eAircraftPropExternalFile = 1
    # Basic fixed wing propulsion.
    eAircraftPropBasicFixedWing = 2
    # Missile - Ramjet propulsion.
    eAircraftPropMissileRamjet = 3
    # Missile - Rocket propulsion.
    eAircraftPropMissileRocket = 4
    # Missile - Turbojet propulsion.
    eAircraftPropMissileTurbojet = 5

AgEAvtrAircraftPropStrategy.eAircraftPropSimple.__doc__ = "Simple propulsion."
AgEAvtrAircraftPropStrategy.eAircraftPropExternalFile.__doc__ = "External file propulsion."
AgEAvtrAircraftPropStrategy.eAircraftPropBasicFixedWing.__doc__ = "Basic fixed wing propulsion."
AgEAvtrAircraftPropStrategy.eAircraftPropMissileRamjet.__doc__ = "Missile - Ramjet propulsion."
AgEAvtrAircraftPropStrategy.eAircraftPropMissileRocket.__doc__ = "Missile - Rocket propulsion."
AgEAvtrAircraftPropStrategy.eAircraftPropMissileTurbojet.__doc__ = "Missile - Turbojet propulsion."

agcls.AgTypeNameMap["AgEAvtrAircraftPropStrategy"] = AgEAvtrAircraftPropStrategy

class AgEAvtrAGLMSL(IntEnum):
    """The altitude mode."""
    # AGl altitude. ALtitude above local terrain
    eAltAGL = 0
    # MSL altitude. Altitude above sea level.
    eAltMSL = 1

AgEAvtrAGLMSL.eAltAGL.__doc__ = "AGl altitude. ALtitude above local terrain"
AgEAvtrAGLMSL.eAltMSL.__doc__ = "MSL altitude. Altitude above sea level."

agcls.AgTypeNameMap["AgEAvtrAGLMSL"] = AgEAvtrAGLMSL

class AgEAvtrLandingApproachFixRangeMode(IntEnum):
    """The reference point on the runway for the Approach Fix Range."""
    # Runway center.
    eRelToRunwayCenter = 0
    # Runway end.
    eRelToRunwayEnd = 1

AgEAvtrLandingApproachFixRangeMode.eRelToRunwayCenter.__doc__ = "Runway center."
AgEAvtrLandingApproachFixRangeMode.eRelToRunwayEnd.__doc__ = "Runway end."

agcls.AgTypeNameMap["AgEAvtrLandingApproachFixRangeMode"] = AgEAvtrLandingApproachFixRangeMode

class AgEAvtrAccelerationAdvAccelMode(IntEnum):
    """Acceleration mode for aircraft advanced acceleration models."""
    # Max acceleration.
    eAccelModeMaxAccel = 0
    # Manually override the acceleration.
    eAccelModeOverrideAccel = 1

AgEAvtrAccelerationAdvAccelMode.eAccelModeMaxAccel.__doc__ = "Max acceleration."
AgEAvtrAccelerationAdvAccelMode.eAccelModeOverrideAccel.__doc__ = "Manually override the acceleration."

agcls.AgTypeNameMap["AgEAvtrAccelerationAdvAccelMode"] = AgEAvtrAccelerationAdvAccelMode

class AgEAvtrAccelManeuverAeroPropMode(IntEnum):
    """The mode used for the Aero/Prop maneuver mode helper for aircraft basic acceleration models."""
    # Use Thrust and Lift Coefficient
    eUseThrustAndLiftCoefficient = 0
    # Use Lift Coefficient only.
    eUseLiftCoefficientOnly = 1

AgEAvtrAccelManeuverAeroPropMode.eUseThrustAndLiftCoefficient.__doc__ = "Use Thrust and Lift Coefficient"
AgEAvtrAccelManeuverAeroPropMode.eUseLiftCoefficientOnly.__doc__ = "Use Lift Coefficient only."

agcls.AgTypeNameMap["AgEAvtrAccelManeuverAeroPropMode"] = AgEAvtrAccelManeuverAeroPropMode

class AgEAvtrBasicManeuverStrategyAirspeedPerfLimits(IntEnum):
    """The type of response Aviator will have if the basic maneuver attempts to exceed the airspeed limit."""
    # Constrain the aircraft to not exceed the airspeed limit.
    eConstrainIfViolated = 0
    # Stop when airspeed limit exceeded..
    eStopIfViolated = 1
    # Error when airspeed limit exceeded.
    eErrorIfViolated = 2
    # Ignore when airspeed limit exceeded.
    eIgnoreIfViolated = 3

AgEAvtrBasicManeuverStrategyAirspeedPerfLimits.eConstrainIfViolated.__doc__ = "Constrain the aircraft to not exceed the airspeed limit."
AgEAvtrBasicManeuverStrategyAirspeedPerfLimits.eStopIfViolated.__doc__ = "Stop when airspeed limit exceeded.."
AgEAvtrBasicManeuverStrategyAirspeedPerfLimits.eErrorIfViolated.__doc__ = "Error when airspeed limit exceeded."
AgEAvtrBasicManeuverStrategyAirspeedPerfLimits.eIgnoreIfViolated.__doc__ = "Ignore when airspeed limit exceeded."

agcls.AgTypeNameMap["AgEAvtrBasicManeuverStrategyAirspeedPerfLimits"] = AgEAvtrBasicManeuverStrategyAirspeedPerfLimits

class AgEAvtrBasicManeuverStrategyPoweredCruiseMode(IntEnum):
    """Powered Cruise Options."""
    # The mode selected is unpowered options.
    eGlideSpecifyUnPoweredCruise = 0
    # The mode selected is specify throttle.
    eGlideSpecifyThrottle = 1
    # The mode selected is thrust model.
    eGlideSpecifyThrustModel = 2

AgEAvtrBasicManeuverStrategyPoweredCruiseMode.eGlideSpecifyUnPoweredCruise.__doc__ = "The mode selected is unpowered options."
AgEAvtrBasicManeuverStrategyPoweredCruiseMode.eGlideSpecifyThrottle.__doc__ = "The mode selected is specify throttle."
AgEAvtrBasicManeuverStrategyPoweredCruiseMode.eGlideSpecifyThrustModel.__doc__ = "The mode selected is thrust model."

agcls.AgTypeNameMap["AgEAvtrBasicManeuverStrategyPoweredCruiseMode"] = AgEAvtrBasicManeuverStrategyPoweredCruiseMode

class AgEAvtrTurnMode(IntEnum):
    """The mode to specify an aircraft's level turn performance for acceleration performance models."""
    # Turn G. The standard G force of the aircraft in a turn.
    eTurnModeTurnG = 0
    # Bank angle.
    eTurnModeBankAngle = 1
    # Turn acceleration.
    eTurnModeAccel = 2
    # Turn radius.
    eTurnModeRadius = 3
    # Turn rate.
    eTurnModeRate = 4

AgEAvtrTurnMode.eTurnModeTurnG.__doc__ = "Turn G. The standard G force of the aircraft in a turn."
AgEAvtrTurnMode.eTurnModeBankAngle.__doc__ = "Bank angle."
AgEAvtrTurnMode.eTurnModeAccel.__doc__ = "Turn acceleration."
AgEAvtrTurnMode.eTurnModeRadius.__doc__ = "Turn radius."
AgEAvtrTurnMode.eTurnModeRate.__doc__ = "Turn rate."

agcls.AgTypeNameMap["AgEAvtrTurnMode"] = AgEAvtrTurnMode

class AgEAvtrPointToPointMode(IntEnum):
    """The heading or course of the aircraft at the beginning of the procedure."""
    # Fly direct.
    eFlyDirect = 0
    # Arrive on course for next procedure.
    eArriveOnCourseForNext = 1
    # Arrive on course.
    eArriveOnCourse = 2
    # Inscribed turn.
    eInscribedTurn = 3
    # Arrive on heading into wind.
    eArriveOnHdgIntoWind = 4

AgEAvtrPointToPointMode.eFlyDirect.__doc__ = "Fly direct."
AgEAvtrPointToPointMode.eArriveOnCourseForNext.__doc__ = "Arrive on course for next procedure."
AgEAvtrPointToPointMode.eArriveOnCourse.__doc__ = "Arrive on course."
AgEAvtrPointToPointMode.eInscribedTurn.__doc__ = "Inscribed turn."
AgEAvtrPointToPointMode.eArriveOnHdgIntoWind.__doc__ = "Arrive on heading into wind."

agcls.AgTypeNameMap["AgEAvtrPointToPointMode"] = AgEAvtrPointToPointMode

class AgEAvtrAltitudeConstraintManeuverMode(IntEnum):
    """Turn mode for procedures that may require a level off maneuver."""
    # Automatic turn.Aviator will determine the direction of the turn.
    eLevelOffAutomaticManeuver = 0
    # Left turn.
    eLevelOffLeftTurnManeuver = 1
    # Right turn.
    eLevelOffRightTurnManeuver = 2
    # No turn. A level off maneuver will not be performed.
    eLevelOffNoManeuver = 3

AgEAvtrAltitudeConstraintManeuverMode.eLevelOffAutomaticManeuver.__doc__ = "Automatic turn.Aviator will determine the direction of the turn."
AgEAvtrAltitudeConstraintManeuverMode.eLevelOffLeftTurnManeuver.__doc__ = "Left turn."
AgEAvtrAltitudeConstraintManeuverMode.eLevelOffRightTurnManeuver.__doc__ = "Right turn."
AgEAvtrAltitudeConstraintManeuverMode.eLevelOffNoManeuver.__doc__ = "No turn. A level off maneuver will not be performed."

agcls.AgTypeNameMap["AgEAvtrAltitudeConstraintManeuverMode"] = AgEAvtrAltitudeConstraintManeuverMode

class AgEAvtrWindModelType(IntEnum):
    """The wind model type."""
    # Constant Wind/Speed.
    eConstantWind = 0
    # NOAA ADDS Service.
    eADDS = 1
    # Disabled wind model.
    eDisabled = 2

AgEAvtrWindModelType.eConstantWind.__doc__ = "Constant Wind/Speed."
AgEAvtrWindModelType.eADDS.__doc__ = "NOAA ADDS Service."
AgEAvtrWindModelType.eDisabled.__doc__ = "Disabled wind model."

agcls.AgTypeNameMap["AgEAvtrWindModelType"] = AgEAvtrWindModelType

class AgEAvtrWindAtmosModelSource(IntEnum):
    """The source for the wind or atmosphere model."""
    # Scenario Model.
    eScenarioModel = 0
    # Mission Model.
    eMissionModel = 1
    # Procedure Model.
    eProcedureModel = 2

AgEAvtrWindAtmosModelSource.eScenarioModel.__doc__ = "Scenario Model."
AgEAvtrWindAtmosModelSource.eMissionModel.__doc__ = "Mission Model."
AgEAvtrWindAtmosModelSource.eProcedureModel.__doc__ = "Procedure Model."

agcls.AgTypeNameMap["AgEAvtrWindAtmosModelSource"] = AgEAvtrWindAtmosModelSource

class AgEAvtrADDSMsgInterpType(IntEnum):
    """The interpolation method for the wind conditions."""
    # One Point Interpolation.
    eInterpOnePoint = 0
    # Two Point Interpolation.
    eInterpTwoPoint = 1

AgEAvtrADDSMsgInterpType.eInterpOnePoint.__doc__ = "One Point Interpolation."
AgEAvtrADDSMsgInterpType.eInterpTwoPoint.__doc__ = "Two Point Interpolation."

agcls.AgTypeNameMap["AgEAvtrADDSMsgInterpType"] = AgEAvtrADDSMsgInterpType

class AgEAvtrADDSMissingMsgType(IntEnum):
    """The wind effect to apply if there is an interval gap between messages."""
    # Zero Wind.
    eMissingMsgZeroWind = 0
    # Interpolate End Points.
    eMissingMsgInterpEndPoints = 1

AgEAvtrADDSMissingMsgType.eMissingMsgZeroWind.__doc__ = "Zero Wind."
AgEAvtrADDSMissingMsgType.eMissingMsgInterpEndPoints.__doc__ = "Interpolate End Points."

agcls.AgTypeNameMap["AgEAvtrADDSMissingMsgType"] = AgEAvtrADDSMissingMsgType

class AgEAvtrADDSMsgExtrapType(IntEnum):
    """The wind effect to apply if the procedure(s) extend beyond the intervals of any available messages."""
    # Zero Wind.
    eExtrapMsgZeroWind = 0
    # Hold End Point Wind.
    eExtrapMsgHoldEndPoints = 1

AgEAvtrADDSMsgExtrapType.eExtrapMsgZeroWind.__doc__ = "Zero Wind."
AgEAvtrADDSMsgExtrapType.eExtrapMsgHoldEndPoints.__doc__ = "Hold End Point Wind."

agcls.AgTypeNameMap["AgEAvtrADDSMsgExtrapType"] = AgEAvtrADDSMsgExtrapType

class AgEAvtrADDSForecastType(IntEnum):
    """The forecast type for the NOAA ADDS message."""
    # 6 hour forecast
    e6Hour = 0
    # 12 hour forecast
    e12Hour = 1
    # 24 hour forecast
    e24Hour = 2

AgEAvtrADDSForecastType.e6Hour.__doc__ = "6 hour forecast"
AgEAvtrADDSForecastType.e12Hour.__doc__ = "12 hour forecast"
AgEAvtrADDSForecastType.e24Hour.__doc__ = "24 hour forecast"

agcls.AgTypeNameMap["AgEAvtrADDSForecastType"] = AgEAvtrADDSForecastType

class AgEAvtrAtmosphereModel(IntEnum):
    """The basic atmosphere model type."""
    # 1976 U.S. Standard Atmosphere
    eStandard1976 = 0
    # U.S. MIL HDBK 310 - Hot
    eMILHot = 1
    # U.S. MIL HDBK 310 - Cold
    eMILCold = 2
    # U.S. MIL HDBK 310 - Low Density
    eMILLowDensity = 3
    # U.S. MIL HDBK 310 - High Density
    eMILHighDensity = 4
    # Interpolate MIL HDBK 310 Data
    eMILInterpolate = 5

AgEAvtrAtmosphereModel.eStandard1976.__doc__ = "1976 U.S. Standard Atmosphere"
AgEAvtrAtmosphereModel.eMILHot.__doc__ = "U.S. MIL HDBK 310 - Hot"
AgEAvtrAtmosphereModel.eMILCold.__doc__ = "U.S. MIL HDBK 310 - Cold"
AgEAvtrAtmosphereModel.eMILLowDensity.__doc__ = "U.S. MIL HDBK 310 - Low Density"
AgEAvtrAtmosphereModel.eMILHighDensity.__doc__ = "U.S. MIL HDBK 310 - High Density"
AgEAvtrAtmosphereModel.eMILInterpolate.__doc__ = "Interpolate MIL HDBK 310 Data"

agcls.AgTypeNameMap["AgEAvtrAtmosphereModel"] = AgEAvtrAtmosphereModel

class AgEAvtrSmoothTurnMode(IntEnum):
    """The basic maneuver smooth turn mode."""
    # Specify the load factor of the smooth turn
    eSmoothTurnLoadFactor = 0
    # Specify the roll angle of the smooth turn
    eSmoothTurnRollAngle = 1

AgEAvtrSmoothTurnMode.eSmoothTurnLoadFactor.__doc__ = "Specify the load factor of the smooth turn"
AgEAvtrSmoothTurnMode.eSmoothTurnRollAngle.__doc__ = "Specify the roll angle of the smooth turn"

agcls.AgTypeNameMap["AgEAvtrSmoothTurnMode"] = AgEAvtrSmoothTurnMode

class AgEAvtrPerfModelOverride(IntEnum):
    """The performance model override mode."""
    # Use the performance model value
    ePerfModelValue = 0
    # Override the performance model value
    eOverride = 1

AgEAvtrPerfModelOverride.ePerfModelValue.__doc__ = "Use the performance model value"
AgEAvtrPerfModelOverride.eOverride.__doc__ = "Override the performance model value"

agcls.AgTypeNameMap["AgEAvtrPerfModelOverride"] = AgEAvtrPerfModelOverride

class AgEAvtrBasicManeuverAirspeedMode(IntEnum):
    """The basic maneuver airspeed mode."""
    # Maintain the current airspeed
    eMaintainCurrentAirspeed = 0
    # Maintain the specified airspeed
    eMaintainSpecifiedAirspeed = 1
    # Maintain the minimum airspeed for the aircraft
    eMaintainMinAirspeed = 2
    # Maintain the maximum endurance airspeed for the aircraft
    eMaintainMaxEnduranceAirspeed = 3
    # Maintain the maximum range airspeed for the aircraft
    eMaintainMaxRangeAirspeed = 4
    # Maintain the maximum airspeed for the aircraft
    eMaintainMaxAirspeed = 5
    # Maintain the maximum performance airspeed for the aircraft
    eMaintainMaxPerformanceAirspeed = 6
    # Accelerate at the specified rate
    eAccelAtG = 7
    # Decelerate at the specified rate
    eDecelAtG = 8
    # Accel/Decel at the force of gravity (no drag, no thrust)
    eAccelDecelUnderGravity = 9
    # Accel/Decel using Aero/Propulsion with throttle setting
    eAccelDecelAeroProp = 10
    # Specify thrust (using drag from Aerodynamics model)
    eThrust = 11
    # Interpolate Accelerate/Decelerate over interval
    eInterpolateAccelDecel = 12

AgEAvtrBasicManeuverAirspeedMode.eMaintainCurrentAirspeed.__doc__ = "Maintain the current airspeed"
AgEAvtrBasicManeuverAirspeedMode.eMaintainSpecifiedAirspeed.__doc__ = "Maintain the specified airspeed"
AgEAvtrBasicManeuverAirspeedMode.eMaintainMinAirspeed.__doc__ = "Maintain the minimum airspeed for the aircraft"
AgEAvtrBasicManeuverAirspeedMode.eMaintainMaxEnduranceAirspeed.__doc__ = "Maintain the maximum endurance airspeed for the aircraft"
AgEAvtrBasicManeuverAirspeedMode.eMaintainMaxRangeAirspeed.__doc__ = "Maintain the maximum range airspeed for the aircraft"
AgEAvtrBasicManeuverAirspeedMode.eMaintainMaxAirspeed.__doc__ = "Maintain the maximum airspeed for the aircraft"
AgEAvtrBasicManeuverAirspeedMode.eMaintainMaxPerformanceAirspeed.__doc__ = "Maintain the maximum performance airspeed for the aircraft"
AgEAvtrBasicManeuverAirspeedMode.eAccelAtG.__doc__ = "Accelerate at the specified rate"
AgEAvtrBasicManeuverAirspeedMode.eDecelAtG.__doc__ = "Decelerate at the specified rate"
AgEAvtrBasicManeuverAirspeedMode.eAccelDecelUnderGravity.__doc__ = "Accel/Decel at the force of gravity (no drag, no thrust)"
AgEAvtrBasicManeuverAirspeedMode.eAccelDecelAeroProp.__doc__ = "Accel/Decel using Aero/Propulsion with throttle setting"
AgEAvtrBasicManeuverAirspeedMode.eThrust.__doc__ = "Specify thrust (using drag from Aerodynamics model)"
AgEAvtrBasicManeuverAirspeedMode.eInterpolateAccelDecel.__doc__ = "Interpolate Accelerate/Decelerate over interval"

agcls.AgTypeNameMap["AgEAvtrBasicManeuverAirspeedMode"] = AgEAvtrBasicManeuverAirspeedMode

class AgEAvtrAileronRollFlightPath(IntEnum):
    """The flight path option for an aileron roll strategy for a basic maneuver procedure."""
    # Fly a straight line flight path
    eStraightLineFlightPath = 0
    # Fly a zero G flight path
    eZeroGFlightPath = 1

AgEAvtrAileronRollFlightPath.eStraightLineFlightPath.__doc__ = "Fly a straight line flight path"
AgEAvtrAileronRollFlightPath.eZeroGFlightPath.__doc__ = "Fly a zero G flight path"

agcls.AgTypeNameMap["AgEAvtrAileronRollFlightPath"] = AgEAvtrAileronRollFlightPath

class AgEAvtrRollLeftRight(IntEnum):
    """The roll direction for an aileron roll strategy for a basic maneuver procedure."""
    # Roll left
    eRollLeft = 0
    # Roll right
    eRollRight = 1

AgEAvtrRollLeftRight.eRollLeft.__doc__ = "Roll left"
AgEAvtrRollLeftRight.eRollRight.__doc__ = "Roll right"

agcls.AgTypeNameMap["AgEAvtrRollLeftRight"] = AgEAvtrRollLeftRight

class AgEAvtrRollUprightInverted(IntEnum):
    """The orientation for an aileron roll strategy for a basic maneuver procedure."""
    # Upright roll
    eRollUpright = 0
    # Inverted roll
    eRollInverted = 1

AgEAvtrRollUprightInverted.eRollUpright.__doc__ = "Upright roll"
AgEAvtrRollUprightInverted.eRollInverted.__doc__ = "Inverted roll"

agcls.AgTypeNameMap["AgEAvtrRollUprightInverted"] = AgEAvtrRollUprightInverted

class AgEAvtrAileronRollMode(IntEnum):
    """The roll mode aileron roll strategy for a basic maneuver procedure."""
    # Specify the angle to roll
    eRollToAngle = 0
    # Specify the orientation to roll to
    eRollToOrientation = 1

AgEAvtrAileronRollMode.eRollToAngle.__doc__ = "Specify the angle to roll"
AgEAvtrAileronRollMode.eRollToOrientation.__doc__ = "Specify the orientation to roll to"

agcls.AgTypeNameMap["AgEAvtrAileronRollMode"] = AgEAvtrAileronRollMode

class AgEAvtrFlyAOALeftRight(IntEnum):
    """The roll direction for a Fly AOA strategy for a basic maneuver procedure."""
    # Roll left
    eFlyAOALeft = 0
    # Roll right
    eFlyAOARight = 1
    # No roll
    eFlyAOANoRoll = 2

AgEAvtrFlyAOALeftRight.eFlyAOALeft.__doc__ = "Roll left"
AgEAvtrFlyAOALeftRight.eFlyAOARight.__doc__ = "Roll right"
AgEAvtrFlyAOALeftRight.eFlyAOANoRoll.__doc__ = "No roll"

agcls.AgTypeNameMap["AgEAvtrFlyAOALeftRight"] = AgEAvtrFlyAOALeftRight

class AgEAvtrSmoothAccelLeftRight(IntEnum):
    """The roll direction for a smooth acceleration strategy for a basic maneuver procedure."""
    # Roll left
    eSmoothAccelLeft = 0
    # Roll right
    eSmoothAccelRight = 1
    # No roll
    eSmoothAccelNoRoll = 2

AgEAvtrSmoothAccelLeftRight.eSmoothAccelLeft.__doc__ = "Roll left"
AgEAvtrSmoothAccelLeftRight.eSmoothAccelRight.__doc__ = "Roll right"
AgEAvtrSmoothAccelLeftRight.eSmoothAccelNoRoll.__doc__ = "No roll"

agcls.AgTypeNameMap["AgEAvtrSmoothAccelLeftRight"] = AgEAvtrSmoothAccelLeftRight

class AgEAvtrPullMode(IntEnum):
    """The pull mode for a pull strategy of a basic maneuver procedure."""
    # Pull to the specified angle
    ePullToAngle = 0
    # Pull to the horizon plus the additional angle
    ePullToHorizon = 1

AgEAvtrPullMode.ePullToAngle.__doc__ = "Pull to the specified angle"
AgEAvtrPullMode.ePullToHorizon.__doc__ = "Pull to the horizon plus the additional angle"

agcls.AgTypeNameMap["AgEAvtrPullMode"] = AgEAvtrPullMode

class AgEAvtrRollingPullMode(IntEnum):
    """The rolling pull mode for a rolling pull strategy of a basic maneuver procedure."""
    # Roll to the specified angle
    eRollToAngleMode = 0
    # Roll to the specified orientaiton plus additional angle
    eRollToOrientationMode = 1
    # Pull to the specified angle
    ePullToAngleMode = 2
    # Pull to the horizon plus the additional angle
    ePullToHorizonMode = 3

AgEAvtrRollingPullMode.eRollToAngleMode.__doc__ = "Roll to the specified angle"
AgEAvtrRollingPullMode.eRollToOrientationMode.__doc__ = "Roll to the specified orientaiton plus additional angle"
AgEAvtrRollingPullMode.ePullToAngleMode.__doc__ = "Pull to the specified angle"
AgEAvtrRollingPullMode.ePullToHorizonMode.__doc__ = "Pull to the horizon plus the additional angle"

agcls.AgTypeNameMap["AgEAvtrRollingPullMode"] = AgEAvtrRollingPullMode

class AgEAvtrSmoothAccelStopConditions(IntEnum):
    """The rolling pull mode for a rolling pull strategy of a basic maneuver procedure."""
    # Roll rate and load factor rate achieved
    eRollRateANDLoadFactor = 0
    # Roll rate or load factor rate achieved
    eRollRateORLoadFactor = 1
    # Basic stop conditions
    eSmoothAccelNormalStopConditions = 2

AgEAvtrSmoothAccelStopConditions.eRollRateANDLoadFactor.__doc__ = "Roll rate and load factor rate achieved"
AgEAvtrSmoothAccelStopConditions.eRollRateORLoadFactor.__doc__ = "Roll rate or load factor rate achieved"
AgEAvtrSmoothAccelStopConditions.eSmoothAccelNormalStopConditions.__doc__ = "Basic stop conditions"

agcls.AgTypeNameMap["AgEAvtrSmoothAccelStopConditions"] = AgEAvtrSmoothAccelStopConditions

class AgEAvtrAutopilotHorizPlaneMode(IntEnum):
    """The autopilot mode for an autopilot - horizontal plane strategy of a basic maneuver procedure."""
    # The absolute heading mode
    eAutopilotAbsoluteHeading = 0
    # The absolute course mode
    eAutopilotAbsoluteCourse = 1
    # The relative heading change mode
    eAutopilotRelativeHeading = 2
    # The relative course change mode
    eAutopilotRelativeCourse = 3
    # The set heading rate mode
    eAutopilotHeadingRate = 4
    # The set course rate  mode
    eAutopilotCourseRate = 5

AgEAvtrAutopilotHorizPlaneMode.eAutopilotAbsoluteHeading.__doc__ = "The absolute heading mode"
AgEAvtrAutopilotHorizPlaneMode.eAutopilotAbsoluteCourse.__doc__ = "The absolute course mode"
AgEAvtrAutopilotHorizPlaneMode.eAutopilotRelativeHeading.__doc__ = "The relative heading change mode"
AgEAvtrAutopilotHorizPlaneMode.eAutopilotRelativeCourse.__doc__ = "The relative course change mode"
AgEAvtrAutopilotHorizPlaneMode.eAutopilotHeadingRate.__doc__ = "The set heading rate mode"
AgEAvtrAutopilotHorizPlaneMode.eAutopilotCourseRate.__doc__ = "The set course rate  mode"

agcls.AgTypeNameMap["AgEAvtrAutopilotHorizPlaneMode"] = AgEAvtrAutopilotHorizPlaneMode

class AgEAvtrAngleMode(IntEnum):
    """The angle mode for a barrel roll strategy of a basic maneuver procedure."""
    # The absolute angle option
    eRelativeAngle = 0
    # The relative angle option
    eAbsoluteAngle = 1

AgEAvtrAngleMode.eRelativeAngle.__doc__ = "The absolute angle option"
AgEAvtrAngleMode.eAbsoluteAngle.__doc__ = "The relative angle option"

agcls.AgTypeNameMap["AgEAvtrAngleMode"] = AgEAvtrAngleMode

class AgEAvtrHoverAltitudeMode(IntEnum):
    """The altitude mode for the lighter than air hover strategy of a basic maneuver procedure."""
    # The hold initial altitude mode
    eHoverHoldInitAltitude = 0
    # The specify altitude mode
    eHoverSpecifyAltitude = 1
    # The specify altitude change mode
    eHoverSpecifyAltitudeChange = 2
    # The specify altitude rate mode
    eHoverSpecifyAltitudeRate = 3
    # The hold initial altitude rate mode
    eHoverHoldInitAltitudeRate = 4
    # The parachute mode
    eHoverParachute = 5

AgEAvtrHoverAltitudeMode.eHoverHoldInitAltitude.__doc__ = "The hold initial altitude mode"
AgEAvtrHoverAltitudeMode.eHoverSpecifyAltitude.__doc__ = "The specify altitude mode"
AgEAvtrHoverAltitudeMode.eHoverSpecifyAltitudeChange.__doc__ = "The specify altitude change mode"
AgEAvtrHoverAltitudeMode.eHoverSpecifyAltitudeRate.__doc__ = "The specify altitude rate mode"
AgEAvtrHoverAltitudeMode.eHoverHoldInitAltitudeRate.__doc__ = "The hold initial altitude rate mode"
AgEAvtrHoverAltitudeMode.eHoverParachute.__doc__ = "The parachute mode"

agcls.AgTypeNameMap["AgEAvtrHoverAltitudeMode"] = AgEAvtrHoverAltitudeMode

class AgEAvtrHoverHeadingMode(IntEnum):
    """The heading mode for the lighter than air hover strategy of a basic maneuver procedure."""
    # The relative to start heading mode
    eHoverRelative = 0
    # The absolute heading mode
    eHoverAbsolute = 1
    # The align into wind heading mode
    eHoverIntoWind = 2
    # The align opposite wind heading mode
    eHoverOppositeWind = 3

AgEAvtrHoverHeadingMode.eHoverRelative.__doc__ = "The relative to start heading mode"
AgEAvtrHoverHeadingMode.eHoverAbsolute.__doc__ = "The absolute heading mode"
AgEAvtrHoverHeadingMode.eHoverIntoWind.__doc__ = "The align into wind heading mode"
AgEAvtrHoverHeadingMode.eHoverOppositeWind.__doc__ = "The align opposite wind heading mode"

agcls.AgTypeNameMap["AgEAvtrHoverHeadingMode"] = AgEAvtrHoverHeadingMode

class AgEAvtrAutopilotAltitudeMode(IntEnum):
    """The altitude mode for the autopilot - vertical plane strategy of a basic maneuver procedure."""
    # The hold initial altitude mode
    eAutopilotHoldInitAltitude = 0
    # The specify altitude mode
    eAutopilotSpecifyAltitude = 1
    # The specify altitude change mode
    eAutopilotSpecifyAltitudeChange = 2
    # The specify altitude rate mode
    eAutopilotSpecifyAltitudeRate = 3
    # The hold initial altitude rate mode
    eAutopilotHoldInitAltitudeRate = 4
    # The specify wind frame flight path angle mode
    eAutopilotSpecifyFPA = 5
    # The hold initial wind frame flight path angle mode
    eAutopilotHoldInitFPA = 6
    # The ballistic flight path mode
    eAutopilotBallistic = 7

AgEAvtrAutopilotAltitudeMode.eAutopilotHoldInitAltitude.__doc__ = "The hold initial altitude mode"
AgEAvtrAutopilotAltitudeMode.eAutopilotSpecifyAltitude.__doc__ = "The specify altitude mode"
AgEAvtrAutopilotAltitudeMode.eAutopilotSpecifyAltitudeChange.__doc__ = "The specify altitude change mode"
AgEAvtrAutopilotAltitudeMode.eAutopilotSpecifyAltitudeRate.__doc__ = "The specify altitude rate mode"
AgEAvtrAutopilotAltitudeMode.eAutopilotHoldInitAltitudeRate.__doc__ = "The hold initial altitude rate mode"
AgEAvtrAutopilotAltitudeMode.eAutopilotSpecifyFPA.__doc__ = "The specify wind frame flight path angle mode"
AgEAvtrAutopilotAltitudeMode.eAutopilotHoldInitFPA.__doc__ = "The hold initial wind frame flight path angle mode"
AgEAvtrAutopilotAltitudeMode.eAutopilotBallistic.__doc__ = "The ballistic flight path mode"

agcls.AgTypeNameMap["AgEAvtrAutopilotAltitudeMode"] = AgEAvtrAutopilotAltitudeMode

class AgEAvtrAutopilotAltitudeControlMode(IntEnum):
    """The altitude control mode for the autopilot - vertical plane strategy of a basic maneuver procedure."""
    # The control altitude rate mode
    eAutopilotAltitudeRate = 0
    # The control flight path angle mode
    eAutopilotFPA = 1
    # The climb/descent performance models mode
    eAutopilotPerfModels = 2

AgEAvtrAutopilotAltitudeControlMode.eAutopilotAltitudeRate.__doc__ = "The control altitude rate mode"
AgEAvtrAutopilotAltitudeControlMode.eAutopilotFPA.__doc__ = "The control flight path angle mode"
AgEAvtrAutopilotAltitudeControlMode.eAutopilotPerfModels.__doc__ = "The climb/descent performance models mode"

agcls.AgTypeNameMap["AgEAvtrAutopilotAltitudeControlMode"] = AgEAvtrAutopilotAltitudeControlMode

class AgEAvtrClosureMode(IntEnum):
    """The closure mode for guidance strategies of the basic maneuver procedure."""
    # The closure is not set. The maneuver will continue whether or not the aircraft is closing with the target
    eClosureNotSet = 0
    # The closure is required
    eClosureRequired = 1
    # The high off boresight mode
    eHOBS = 2

AgEAvtrClosureMode.eClosureNotSet.__doc__ = "The closure is not set. The maneuver will continue whether or not the aircraft is closing with the target"
AgEAvtrClosureMode.eClosureRequired.__doc__ = "The closure is required"
AgEAvtrClosureMode.eHOBS.__doc__ = "The high off boresight mode"

agcls.AgTypeNameMap["AgEAvtrClosureMode"] = AgEAvtrClosureMode

class AgEAvtrInterceptMode(IntEnum):
    """The intercept mode for the intercept strategy of the basic maneuver procedure."""
    # The target aspect mode. The aircraft will maintain an approach angle with the target.
    eTargetAspect = 0
    # The lateral separation mode. The aircraft will guide to a specific distance from the target
    eLateralSeparation = 1

AgEAvtrInterceptMode.eTargetAspect.__doc__ = "The target aspect mode. The aircraft will maintain an approach angle with the target."
AgEAvtrInterceptMode.eLateralSeparation.__doc__ = "The lateral separation mode. The aircraft will guide to a specific distance from the target"

agcls.AgTypeNameMap["AgEAvtrInterceptMode"] = AgEAvtrInterceptMode

class AgEAvtrRendezvousStopCondition(IntEnum):
    """The stop condition options for a rendezvous formation strategy of the basic maneuver procedure."""
    # The basic stopping conditions will be used.
    eStopNormal = 0
    # Stop after the target completes the current procedure.
    eStopAfterTargetCurrentProcedure = 1
    # Stop after the target completes the current phase.
    eStopAfterTargetCurrentPhase = 2
    # Stop when the target enters a new mode of flight.
    eStopWhenTargetPerfModeChanges = 3
    # Stop when the target enters a new performance phase.
    eStopWhenTargetPhaseOfFlightChanges = 4

AgEAvtrRendezvousStopCondition.eStopNormal.__doc__ = "The basic stopping conditions will be used."
AgEAvtrRendezvousStopCondition.eStopAfterTargetCurrentProcedure.__doc__ = "Stop after the target completes the current procedure."
AgEAvtrRendezvousStopCondition.eStopAfterTargetCurrentPhase.__doc__ = "Stop after the target completes the current phase."
AgEAvtrRendezvousStopCondition.eStopWhenTargetPerfModeChanges.__doc__ = "Stop when the target enters a new mode of flight."
AgEAvtrRendezvousStopCondition.eStopWhenTargetPhaseOfFlightChanges.__doc__ = "Stop when the target enters a new performance phase."

agcls.AgTypeNameMap["AgEAvtrRendezvousStopCondition"] = AgEAvtrRendezvousStopCondition

class AgEAvtrFormationFlyerStopCondition(IntEnum):
    """The stop condition options for a Formation Flyer procedure."""
    # Stop After FullMission.
    eFormationFlyerStopAfterFullMission = 0
    # Stop After Time.
    eFormationFlyerStopAfterTime = 1
    # Stop After FuelState.
    eFormationFlyerStopAfterFuelState = 2
    # Stop After DownRange.
    eFormationFlyerStopAfterDownRange = 3
    # Stop When TargetProcedure Changes.
    eFormationFlyerStopWhenTargetProcedureChanges = 4
    # Stop When Target Mission Changes.
    eFormationFlyerStopWhenTargetMissionChanges = 5
    # Stop When Target PhaseOfFlight Changes.
    eFormationFlyerStopWhenTargetPhaseOfFlightChanges = 6
    # Stop When Target PerfMode Changes.
    eFormationFlyerStopWhenTargetPerfModeChanges = 7

AgEAvtrFormationFlyerStopCondition.eFormationFlyerStopAfterFullMission.__doc__ = "Stop After FullMission."
AgEAvtrFormationFlyerStopCondition.eFormationFlyerStopAfterTime.__doc__ = "Stop After Time."
AgEAvtrFormationFlyerStopCondition.eFormationFlyerStopAfterFuelState.__doc__ = "Stop After FuelState."
AgEAvtrFormationFlyerStopCondition.eFormationFlyerStopAfterDownRange.__doc__ = "Stop After DownRange."
AgEAvtrFormationFlyerStopCondition.eFormationFlyerStopWhenTargetProcedureChanges.__doc__ = "Stop When TargetProcedure Changes."
AgEAvtrFormationFlyerStopCondition.eFormationFlyerStopWhenTargetMissionChanges.__doc__ = "Stop When Target Mission Changes."
AgEAvtrFormationFlyerStopCondition.eFormationFlyerStopWhenTargetPhaseOfFlightChanges.__doc__ = "Stop When Target PhaseOfFlight Changes."
AgEAvtrFormationFlyerStopCondition.eFormationFlyerStopWhenTargetPerfModeChanges.__doc__ = "Stop When Target PerfMode Changes."

agcls.AgTypeNameMap["AgEAvtrFormationFlyerStopCondition"] = AgEAvtrFormationFlyerStopCondition

class AgEAvtrExtEphemFlightMode(IntEnum):
    """Flight mode enums for ExtEphem."""
    # ForwardFlightClimb.
    eExtEphemFlightModeForwardFlightClimb = 0
    # ForwardFlightCruise.
    eExtEphemFlightModeForwardFlightCruise = 1
    # ForwardFlightDescend.
    eExtEphemFlightModeForwardFlightDescend = 2
    # Landing.
    eExtEphemFlightModeLanding = 3
    # LandingWOW.
    eExtEphemFlightModeLandingWOW = 4
    # Takeoff.
    eExtEphemFlightModeTakeoff = 5
    # TakeoffWOW.
    eExtEphemFlightModeTakeoffWOW = 6
    # VTOLHover .
    eExtEphemFlightModeVTOLHover = 7

AgEAvtrExtEphemFlightMode.eExtEphemFlightModeForwardFlightClimb.__doc__ = "ForwardFlightClimb."
AgEAvtrExtEphemFlightMode.eExtEphemFlightModeForwardFlightCruise.__doc__ = "ForwardFlightCruise."
AgEAvtrExtEphemFlightMode.eExtEphemFlightModeForwardFlightDescend.__doc__ = "ForwardFlightDescend."
AgEAvtrExtEphemFlightMode.eExtEphemFlightModeLanding.__doc__ = "Landing."
AgEAvtrExtEphemFlightMode.eExtEphemFlightModeLandingWOW.__doc__ = "LandingWOW."
AgEAvtrExtEphemFlightMode.eExtEphemFlightModeTakeoff.__doc__ = "Takeoff."
AgEAvtrExtEphemFlightMode.eExtEphemFlightModeTakeoffWOW.__doc__ = "TakeoffWOW."
AgEAvtrExtEphemFlightMode.eExtEphemFlightModeVTOLHover.__doc__ = "VTOLHover ."

agcls.AgTypeNameMap["AgEAvtrExtEphemFlightMode"] = AgEAvtrExtEphemFlightMode

class AgEAvtrAccelPerfModelOverride(IntEnum):
    """The acceleration performance model override mode."""
    # Use the acceleration performanc model value.
    eAccelPerfModelValue = 0
    # Override the performanc model value.
    eAccelOverride = 1
    # Set no limit on the acceleration.
    eAccelNoLimit = 2

AgEAvtrAccelPerfModelOverride.eAccelPerfModelValue.__doc__ = "Use the acceleration performanc model value."
AgEAvtrAccelPerfModelOverride.eAccelOverride.__doc__ = "Override the performanc model value."
AgEAvtrAccelPerfModelOverride.eAccelNoLimit.__doc__ = "Set no limit on the acceleration."

agcls.AgTypeNameMap["AgEAvtrAccelPerfModelOverride"] = AgEAvtrAccelPerfModelOverride

class AgEAvtrStationkeepingStopCondition(IntEnum):
    """The stop condition options for a stationkeeping strategy."""
    # The basic stopping conditions will be used.
    eStopConditionNotSet = 0
    # Stop after a specified number of turns.
    eStopAfterTurnCount = 1
    # Stop after a specified duration.
    eStopAfterDuration = 2
    # Stop at the specified time.
    eStopAfterTime = 3

AgEAvtrStationkeepingStopCondition.eStopConditionNotSet.__doc__ = "The basic stopping conditions will be used."
AgEAvtrStationkeepingStopCondition.eStopAfterTurnCount.__doc__ = "Stop after a specified number of turns."
AgEAvtrStationkeepingStopCondition.eStopAfterDuration.__doc__ = "Stop after a specified duration."
AgEAvtrStationkeepingStopCondition.eStopAfterTime.__doc__ = "Stop at the specified time."

agcls.AgTypeNameMap["AgEAvtrStationkeepingStopCondition"] = AgEAvtrStationkeepingStopCondition

class AgEAvtrTurnDirection(IntEnum):
    """The roll direction for an aileron roll strategy for a basic maneuver procedure."""
    # Turn left
    eTurnLeft = 0
    # Turn right
    eTurnRight = 2

AgEAvtrTurnDirection.eTurnLeft.__doc__ = "Turn left"
AgEAvtrTurnDirection.eTurnRight.__doc__ = "Turn right"

agcls.AgTypeNameMap["AgEAvtrTurnDirection"] = AgEAvtrTurnDirection

class AgEAvtrProfileControlLimit(IntEnum):
    """Method to define the control limits for a profile strategy of a basic maneuver procedure."""
    # Use Accel Perf Model
    eProfileAccelPerfModel = 0
    # Specify the pitch rate
    eProfilePitchRate = 1

AgEAvtrProfileControlLimit.eProfileAccelPerfModel.__doc__ = "Use Accel Perf Model"
AgEAvtrProfileControlLimit.eProfilePitchRate.__doc__ = "Specify the pitch rate"

agcls.AgTypeNameMap["AgEAvtrProfileControlLimit"] = AgEAvtrProfileControlLimit

class AgEAvtrRelSpeedAltStopCondition(IntEnum):
    """The stop condition options for a relative speed/altitude strategy."""
    # The basic stopping conditions will be used.
    eRelSpeedAltStopNormal = 0
    # Stop when the aircraft achieves the range for equal speed.
    eRelSpeedAltStopMinRangeForEqualSpeed = 1
    # Stop when the aircraft achieves the range to transition speed.
    eRelSpeedAltStopTransitionSpeedRange = 2
    # Stop after the target completes the current procedure.
    eRelSpeedAltStopAfterTargetCurrentProcedure = 3
    # Stop after the target completes the current phase.
    eRelSpeedAltStopAfterTargetCurrentPhase = 4
    # Stop when the target enters a new mode of flight.
    eRelSpeedAltStopWhenTargetPerfModeChanges = 5
    # Stop when the target enters a new performance phase.
    eRelSpeedAltStopWhenTargetPhaseOfFlightChanges = 6

AgEAvtrRelSpeedAltStopCondition.eRelSpeedAltStopNormal.__doc__ = "The basic stopping conditions will be used."
AgEAvtrRelSpeedAltStopCondition.eRelSpeedAltStopMinRangeForEqualSpeed.__doc__ = "Stop when the aircraft achieves the range for equal speed."
AgEAvtrRelSpeedAltStopCondition.eRelSpeedAltStopTransitionSpeedRange.__doc__ = "Stop when the aircraft achieves the range to transition speed."
AgEAvtrRelSpeedAltStopCondition.eRelSpeedAltStopAfterTargetCurrentProcedure.__doc__ = "Stop after the target completes the current procedure."
AgEAvtrRelSpeedAltStopCondition.eRelSpeedAltStopAfterTargetCurrentPhase.__doc__ = "Stop after the target completes the current phase."
AgEAvtrRelSpeedAltStopCondition.eRelSpeedAltStopWhenTargetPerfModeChanges.__doc__ = "Stop when the target enters a new mode of flight."
AgEAvtrRelSpeedAltStopCondition.eRelSpeedAltStopWhenTargetPhaseOfFlightChanges.__doc__ = "Stop when the target enters a new performance phase."

agcls.AgTypeNameMap["AgEAvtrRelSpeedAltStopCondition"] = AgEAvtrRelSpeedAltStopCondition

class AgEAvtrRelativeAltitudeMode(IntEnum):
    """The relative altitude mode for a relative speed/altitude strategy."""
    # Maintain the specified altitude offset from the target.
    eHoldOffsetAlt = 0
    # Maintain the altitude offset at the beginning of the maneuver.
    eHoldInitAltOffset = 1
    # Maintain the specified elevation angle from the target.
    eHoldElevationAngle = 2
    # Maintain the elevation angle at the beginning of the maneuver.
    eHoldInitElevationAngle = 3

AgEAvtrRelativeAltitudeMode.eHoldOffsetAlt.__doc__ = "Maintain the specified altitude offset from the target."
AgEAvtrRelativeAltitudeMode.eHoldInitAltOffset.__doc__ = "Maintain the altitude offset at the beginning of the maneuver."
AgEAvtrRelativeAltitudeMode.eHoldElevationAngle.__doc__ = "Maintain the specified elevation angle from the target."
AgEAvtrRelativeAltitudeMode.eHoldInitElevationAngle.__doc__ = "Maintain the elevation angle at the beginning of the maneuver."

agcls.AgTypeNameMap["AgEAvtrRelativeAltitudeMode"] = AgEAvtrRelativeAltitudeMode

class AgEAvtrFlyToFlightPathAngleMode(IntEnum):
    """The flight path angle mode mode for a bezier profile strategy."""
    # Fly to a specified altitude rate.
    eFlyToAltRate = 0
    # Fly to a specified flight path angle.
    eFlyToFlightPathAngle = 1

AgEAvtrFlyToFlightPathAngleMode.eFlyToAltRate.__doc__ = "Fly to a specified altitude rate."
AgEAvtrFlyToFlightPathAngleMode.eFlyToFlightPathAngle.__doc__ = "Fly to a specified flight path angle."

agcls.AgTypeNameMap["AgEAvtrFlyToFlightPathAngleMode"] = AgEAvtrFlyToFlightPathAngleMode

class AgEAvtrPushPull(IntEnum):
    """The option to pull up or push over for a push/pull profile strategy."""
    # Pull up.
    ePullUp = 0
    # Push over.
    ePushOver = 1

AgEAvtrPushPull.ePullUp.__doc__ = "Pull up."
AgEAvtrPushPull.ePushOver.__doc__ = "Push over."

agcls.AgTypeNameMap["AgEAvtrPushPull"] = AgEAvtrPushPull

class AgEAvtrAccelMode(IntEnum):
    """The acceleration/decelation option for a push/pull profile strategy."""
    # Accelerate at specified G.
    eAccel = 0
    # Decelerate at specified G.
    eDecel = 1
    # Maintain the initial airspeed.
    eMaintainSpeed = 2

AgEAvtrAccelMode.eAccel.__doc__ = "Accelerate at specified G."
AgEAvtrAccelMode.eDecel.__doc__ = "Decelerate at specified G."
AgEAvtrAccelMode.eMaintainSpeed.__doc__ = "Maintain the initial airspeed."

agcls.AgTypeNameMap["AgEAvtrAccelMode"] = AgEAvtrAccelMode

class AgEAvtrDelayAltMode(IntEnum):
    """The altitude options for a delay procedure."""
    # Use a level off maneuver to fly to the default altitude.
    eDelayLevelOff = 0
    # The default cruise altitude.
    eDelayDefaultCruiseAlt = 1
    # Override the default altitude.
    eDelayOverride = 2

AgEAvtrDelayAltMode.eDelayLevelOff.__doc__ = "Use a level off maneuver to fly to the default altitude."
AgEAvtrDelayAltMode.eDelayDefaultCruiseAlt.__doc__ = "The default cruise altitude."
AgEAvtrDelayAltMode.eDelayOverride.__doc__ = "Override the default altitude."

agcls.AgTypeNameMap["AgEAvtrDelayAltMode"] = AgEAvtrDelayAltMode

class AgEAvtrJoinExitArcMethod(IntEnum):
    """The options to join or exit an arc."""
    # The aircraft begins/ends the procedure on a course away from the site.
    eJoinExitOutbound = 0
    # The aircraft begins/ends the procedure at the start bearing.
    eJoinExitOn = 1
    # The aircraft begins/ends on a course towards the site.
    eJoinExitInbound = 2

AgEAvtrJoinExitArcMethod.eJoinExitOutbound.__doc__ = "The aircraft begins/ends the procedure on a course away from the site."
AgEAvtrJoinExitArcMethod.eJoinExitOn.__doc__ = "The aircraft begins/ends the procedure at the start bearing."
AgEAvtrJoinExitArcMethod.eJoinExitInbound.__doc__ = "The aircraft begins/ends on a course towards the site."

agcls.AgTypeNameMap["AgEAvtrJoinExitArcMethod"] = AgEAvtrJoinExitArcMethod

class AgEAvtrFlightLineProcType(IntEnum):
    """The procedure methodology used to calculate the flight line."""
    # An enroute procedure type.
    eProcTypeEnroute = 0
    # A basic point to point procedure type.
    eProcTypeBasicPointToPoint = 1
    # A terrain follow procedure type.
    eProcTypeTerrainFollow = 2

AgEAvtrFlightLineProcType.eProcTypeEnroute.__doc__ = "An enroute procedure type."
AgEAvtrFlightLineProcType.eProcTypeBasicPointToPoint.__doc__ = "A basic point to point procedure type."
AgEAvtrFlightLineProcType.eProcTypeTerrainFollow.__doc__ = "A terrain follow procedure type."

agcls.AgTypeNameMap["AgEAvtrFlightLineProcType"] = AgEAvtrFlightLineProcType

class AgEAvtrTransitionToHoverMode(IntEnum):
    """The type of hover to transition to."""
    # Transition to a full stop hover.
    eFullStop = 0
    # Transition to a hover with a constant translation rate.
    eTranslationOnly = 1
    # Transition to a hover with a constant translation and altitude rate.
    eTranslationAndAltitude = 2

AgEAvtrTransitionToHoverMode.eFullStop.__doc__ = "Transition to a full stop hover."
AgEAvtrTransitionToHoverMode.eTranslationOnly.__doc__ = "Transition to a hover with a constant translation rate."
AgEAvtrTransitionToHoverMode.eTranslationAndAltitude.__doc__ = "Transition to a hover with a constant translation and altitude rate."

agcls.AgTypeNameMap["AgEAvtrTransitionToHoverMode"] = AgEAvtrTransitionToHoverMode

class AgEAvtrVTOLRateMode(IntEnum):
    """The rate mode for the VTOL procedure."""
    # The rate during the procedure will be maintained.
    eHaltAutomatic = 0
    # The rate will be set to zero.
    eAlwaysStop = 1

AgEAvtrVTOLRateMode.eHaltAutomatic.__doc__ = "The rate during the procedure will be maintained."
AgEAvtrVTOLRateMode.eAlwaysStop.__doc__ = "The rate will be set to zero."

agcls.AgTypeNameMap["AgEAvtrVTOLRateMode"] = AgEAvtrVTOLRateMode

class AgEAvtrHoldingProfileMode(IntEnum):
    """How the aircraft will perform during the holding pattern with respect to airspeed and altitude."""
    # The aircraft will fly the pattern at the speed at which it arrived at the entry point.
    eSTK8Compatible = 0
    # The aircraft will level off and fly at the cruise speed
    eLevelOffCruiseSpeed = 1
    # The aircraft will climb or descend to the specified altitude.
    eClimbDescentOnStation = 2

AgEAvtrHoldingProfileMode.eSTK8Compatible.__doc__ = "The aircraft will fly the pattern at the speed at which it arrived at the entry point."
AgEAvtrHoldingProfileMode.eLevelOffCruiseSpeed.__doc__ = "The aircraft will level off and fly at the cruise speed"
AgEAvtrHoldingProfileMode.eClimbDescentOnStation.__doc__ = "The aircraft will climb or descend to the specified altitude."

agcls.AgTypeNameMap["AgEAvtrHoldingProfileMode"] = AgEAvtrHoldingProfileMode

class AgEAvtrHoldingDirection(IntEnum):
    """The turn direction for the aircraft to enter the holding pattern."""
    # Turn left on the way inbound to the site.
    eInboundLeftTurn = 0
    # Turn right on the way inbound to the site.
    eInboundRightTurn = 1
    # Turn left on the way outbound from the site.
    eOutboundLeftTurn = 2
    # Turn right on the way outbound from the site.
    eOutboundRightTurn = 3

AgEAvtrHoldingDirection.eInboundLeftTurn.__doc__ = "Turn left on the way inbound to the site."
AgEAvtrHoldingDirection.eInboundRightTurn.__doc__ = "Turn right on the way inbound to the site."
AgEAvtrHoldingDirection.eOutboundLeftTurn.__doc__ = "Turn left on the way outbound from the site."
AgEAvtrHoldingDirection.eOutboundRightTurn.__doc__ = "Turn right on the way outbound from the site."

agcls.AgTypeNameMap["AgEAvtrHoldingDirection"] = AgEAvtrHoldingDirection

class AgEAvtrHoldRefuelDumpMode(IntEnum):
    """Defines when the aircraft will leave the holding pattern after it has completed refueling or dumping fuel."""
    # Turn left on the way inbound to the site.
    eFullNumerOfTurns = 0
    # Turn right on the way inbound to the site.
    eExitAtEndOfTurn = 1
    # Turn left on the way outbound from the site.
    eImmediateExit = 2

AgEAvtrHoldRefuelDumpMode.eFullNumerOfTurns.__doc__ = "Turn left on the way inbound to the site."
AgEAvtrHoldRefuelDumpMode.eExitAtEndOfTurn.__doc__ = "Turn right on the way inbound to the site."
AgEAvtrHoldRefuelDumpMode.eImmediateExit.__doc__ = "Turn left on the way outbound from the site."

agcls.AgTypeNameMap["AgEAvtrHoldRefuelDumpMode"] = AgEAvtrHoldRefuelDumpMode

class AgEAvtrHoldingEntryManeuver(IntEnum):
    """Defines how the aircraft will enter the holding pattern."""
    # The aircraft will enter the holding pattern at the normal holding point.
    eHoldEntryNoManeuver = 0
    # The aircraft will enter the holding pattern using a standard entry maneuvers defined in the FAA Instrument Flying Handbook
    eUseStandardEntryTurns = 1
    # The aircraft will enter the holding pattern at an alternate entry point.
    eUseAlternateEntryPoints = 2

AgEAvtrHoldingEntryManeuver.eHoldEntryNoManeuver.__doc__ = "The aircraft will enter the holding pattern at the normal holding point."
AgEAvtrHoldingEntryManeuver.eUseStandardEntryTurns.__doc__ = "The aircraft will enter the holding pattern using a standard entry maneuvers defined in the FAA Instrument Flying Handbook"
AgEAvtrHoldingEntryManeuver.eUseAlternateEntryPoints.__doc__ = "The aircraft will enter the holding pattern at an alternate entry point."

agcls.AgTypeNameMap["AgEAvtrHoldingEntryManeuver"] = AgEAvtrHoldingEntryManeuver

class AgEAvtrVTOLTransitionMode(IntEnum):
    """The mode to specify the course of the transition maneuver."""
    # Specify a heading relative to the previous procedure.
    eTransitionRelativeHdg = 0
    # Specify an absolute heading.
    eTransitionAbsoluteHdg = 1
    # Transition into the wind direction.
    eTransitionIntoWind = 2

AgEAvtrVTOLTransitionMode.eTransitionRelativeHdg.__doc__ = "Specify a heading relative to the previous procedure."
AgEAvtrVTOLTransitionMode.eTransitionAbsoluteHdg.__doc__ = "Specify an absolute heading."
AgEAvtrVTOLTransitionMode.eTransitionIntoWind.__doc__ = "Transition into the wind direction."

agcls.AgTypeNameMap["AgEAvtrVTOLTransitionMode"] = AgEAvtrVTOLTransitionMode

class AgEAvtrVTOLFinalHeadingMode(IntEnum):
    """The mode to specify the heading at the end of the maneuver."""
    # Specify a heading relative to the previous procedure.
    eFinalHeadingRelative = 0
    # Specify an absolute heading.
    eFinalHeadingAbsolute = 1
    # The aircraft have the same heading as the translation bearing.
    eFinalHeadingTranslationCourse = 2

AgEAvtrVTOLFinalHeadingMode.eFinalHeadingRelative.__doc__ = "Specify a heading relative to the previous procedure."
AgEAvtrVTOLFinalHeadingMode.eFinalHeadingAbsolute.__doc__ = "Specify an absolute heading."
AgEAvtrVTOLFinalHeadingMode.eFinalHeadingTranslationCourse.__doc__ = "The aircraft have the same heading as the translation bearing."

agcls.AgTypeNameMap["AgEAvtrVTOLFinalHeadingMode"] = AgEAvtrVTOLFinalHeadingMode

class AgEAvtrVTOLTranslationMode(IntEnum):
    """The mode to specify the translation of the VTOL maneuver."""
    # The aircraft will translate on a specific bearing and range.
    eSetBearingAndRange = 0
    # The aircraft will come to a complete stop.
    eComeToStop = 1
    # The aircraft will continue to translate with the same rate and direction as it began the procedure.
    eMaintainRate = 2

AgEAvtrVTOLTranslationMode.eSetBearingAndRange.__doc__ = "The aircraft will translate on a specific bearing and range."
AgEAvtrVTOLTranslationMode.eComeToStop.__doc__ = "The aircraft will come to a complete stop."
AgEAvtrVTOLTranslationMode.eMaintainRate.__doc__ = "The aircraft will continue to translate with the same rate and direction as it began the procedure."

agcls.AgTypeNameMap["AgEAvtrVTOLTranslationMode"] = AgEAvtrVTOLTranslationMode

class AgEAvtrVTOLTranslationFinalCourseMode(IntEnum):
    """The mode to specify the final course of the VTOL maneuver."""
    # The aircraft will translate directly along the specified bearing and range.
    eTranslateDirect = 0
    # The aircraft will translate along a bisecting line between the inbound and outbound course.
    eBisectInboundOutbound = 1
    # The aircraft will evaluate the procedure ahead to determine the translation bearing and rate.
    eAnticipateNextTranslation = 2

AgEAvtrVTOLTranslationFinalCourseMode.eTranslateDirect.__doc__ = "The aircraft will translate directly along the specified bearing and range."
AgEAvtrVTOLTranslationFinalCourseMode.eBisectInboundOutbound.__doc__ = "The aircraft will translate along a bisecting line between the inbound and outbound course."
AgEAvtrVTOLTranslationFinalCourseMode.eAnticipateNextTranslation.__doc__ = "The aircraft will evaluate the procedure ahead to determine the translation bearing and rate."

agcls.AgTypeNameMap["AgEAvtrVTOLTranslationFinalCourseMode"] = AgEAvtrVTOLTranslationFinalCourseMode

class AgEAvtrHoverMode(IntEnum):
    """The hover mode."""
    # Hover in place for a fixed time.
    eHoverModeFixedTime = 0
    # Perform a hovering maneuver.
    eHoverModeManeuver = 1

AgEAvtrHoverMode.eHoverModeFixedTime.__doc__ = "Hover in place for a fixed time."
AgEAvtrHoverMode.eHoverModeManeuver.__doc__ = "Perform a hovering maneuver."

agcls.AgTypeNameMap["AgEAvtrHoverMode"] = AgEAvtrHoverMode

class AgEAvtrVTOLHeadingMode(IntEnum):
    """The heading mode for the hover maneuver."""
    # The aircraft's heading is independent of its translation.
    eHeadingIndependent = 0
    # The aircraft will align its heading with the translation course.
    eHeadingAlignTranslationCourse = 1
    # The aircraft will set its heading into the wind.
    eHeadingIntoWind = 2

AgEAvtrVTOLHeadingMode.eHeadingIndependent.__doc__ = "The aircraft's heading is independent of its translation."
AgEAvtrVTOLHeadingMode.eHeadingAlignTranslationCourse.__doc__ = "The aircraft will align its heading with the translation course."
AgEAvtrVTOLHeadingMode.eHeadingIntoWind.__doc__ = "The aircraft will set its heading into the wind."

agcls.AgTypeNameMap["AgEAvtrVTOLHeadingMode"] = AgEAvtrVTOLHeadingMode

class AgEAvtrVertLandingMode(IntEnum):
    """The heading mode for a vertical landing maneuver."""
    # The aircraft's heading is independent of its translation.
    eVertLandingIndependent = 0
    # The aircraft will align its heading with the translation course.
    eVertLandingAlignTranslationCourse = 1
    # The aircraft will set its heading into the wind.
    eVertLandingIntoWind = 2
    # The aircraft will align its heading with the translation course  will achieve the specified heading upon arriving.
    eVertLandingAlignTranslationCourseOverride = 3

AgEAvtrVertLandingMode.eVertLandingIndependent.__doc__ = "The aircraft's heading is independent of its translation."
AgEAvtrVertLandingMode.eVertLandingAlignTranslationCourse.__doc__ = "The aircraft will align its heading with the translation course."
AgEAvtrVertLandingMode.eVertLandingIntoWind.__doc__ = "The aircraft will set its heading into the wind."
AgEAvtrVertLandingMode.eVertLandingAlignTranslationCourseOverride.__doc__ = "The aircraft will align its heading with the translation course  will achieve the specified heading upon arriving."

agcls.AgTypeNameMap["AgEAvtrVertLandingMode"] = AgEAvtrVertLandingMode

class AgEAvtrLaunchAttitudeMode(IntEnum):
    """The attitude mode for the launch procedure."""
    # The aircraft's attitude is aligned with the specified direction vector.
    eLaunchAlignDirectionVector = 0
    # The aircraft will maintain the parent vehicle's attiude at the time of launch.
    eLaunchHoldParentAttitude = 1
    # The aircraft launches in level flight
    eLaunchVTOL = 2

AgEAvtrLaunchAttitudeMode.eLaunchAlignDirectionVector.__doc__ = "The aircraft's attitude is aligned with the specified direction vector."
AgEAvtrLaunchAttitudeMode.eLaunchHoldParentAttitude.__doc__ = "The aircraft will maintain the parent vehicle's attiude at the time of launch."
AgEAvtrLaunchAttitudeMode.eLaunchVTOL.__doc__ = "The aircraft launches in level flight"

agcls.AgTypeNameMap["AgEAvtrLaunchAttitudeMode"] = AgEAvtrLaunchAttitudeMode

class AgEAvtrFuelFlowType(IntEnum):
    """The fuel flow type to use for the procedure."""
    # Fuel flow defined for the current Takeoff performance model.
    eFuelFlowTakeoff = 0
    # Fuel flow defined for the current Cruise performance model.
    eFuelFlowCruise = 1
    # Fuel flow defined for the current Landing performance model.
    eFuelFlowLanding = 2
    # Fuel flow defined for the current VTOL performance model.
    eFuelFlowVTOL = 3
    # Fuel flow defined for the Aerodynamics and Propulsion Analysis component of the current basic acceleration performance model.
    eFuelFlowAeroProp = 4
    # Fuel flow defined manually.
    eFuelFlowOverride = 5

AgEAvtrFuelFlowType.eFuelFlowTakeoff.__doc__ = "Fuel flow defined for the current Takeoff performance model."
AgEAvtrFuelFlowType.eFuelFlowCruise.__doc__ = "Fuel flow defined for the current Cruise performance model."
AgEAvtrFuelFlowType.eFuelFlowLanding.__doc__ = "Fuel flow defined for the current Landing performance model."
AgEAvtrFuelFlowType.eFuelFlowVTOL.__doc__ = "Fuel flow defined for the current VTOL performance model."
AgEAvtrFuelFlowType.eFuelFlowAeroProp.__doc__ = "Fuel flow defined for the Aerodynamics and Propulsion Analysis component of the current basic acceleration performance model."
AgEAvtrFuelFlowType.eFuelFlowOverride.__doc__ = "Fuel flow defined manually."

agcls.AgTypeNameMap["AgEAvtrFuelFlowType"] = AgEAvtrFuelFlowType

class AgEAvtrLineOrientation(IntEnum):
    """The orientation for a parallel flight line procedure."""
    # Left of the previous flight line.
    eFlightLineToLeft = 0
    # Right of the previous flight line.
    eFlightLineToRight = 1

AgEAvtrLineOrientation.eFlightLineToLeft.__doc__ = "Left of the previous flight line."
AgEAvtrLineOrientation.eFlightLineToRight.__doc__ = "Right of the previous flight line."

agcls.AgTypeNameMap["AgEAvtrLineOrientation"] = AgEAvtrLineOrientation

class AgEAvtrRelAbsBearing(IntEnum):
    """The options for a bearing that can be relative or absolute."""
    # A bearing relative to the previous course.
    eRelativeBearing = 0
    # A bearing using true north.
    eTrueBearing = 1
    # A bearing using magnetic north.
    eMagneticBearing = 2

AgEAvtrRelAbsBearing.eRelativeBearing.__doc__ = "A bearing relative to the previous course."
AgEAvtrRelAbsBearing.eTrueBearing.__doc__ = "A bearing using true north."
AgEAvtrRelAbsBearing.eMagneticBearing.__doc__ = "A bearing using magnetic north."

agcls.AgTypeNameMap["AgEAvtrRelAbsBearing"] = AgEAvtrRelAbsBearing

class AgEAvtrBasicFixedWingPropMode(IntEnum):
    """The option to specify the thrust (jet engines) or power (propellers)."""
    # Jet - Specify net thrust.
    eSpecifyThrust = 0
    # Propeller - Specify net power.
    eSpecifyPower = 1

AgEAvtrBasicFixedWingPropMode.eSpecifyThrust.__doc__ = "Jet - Specify net thrust."
AgEAvtrBasicFixedWingPropMode.eSpecifyPower.__doc__ = "Propeller - Specify net power."

agcls.AgTypeNameMap["AgEAvtrBasicFixedWingPropMode"] = AgEAvtrBasicFixedWingPropMode

class AgEAvtrClimbSpeedType(IntEnum):
    """The mode to calculate the aircraft's airspeed while climbing for an advanced climb performance model."""
    # The speed at which the aircraft's rate of climb is maximized.
    eClimbSpeedBestRate = 0
    # The speed at which the aircraft will gain the most altitude over downrange distance.
    eClimbSpeedBestAngle = 1
    # The speed at which the aircraft's fuel consumption is minimized.
    eClimbSpeedMinFuel = 2
    # Manually specify the speed.
    eClimbSpeedOverride = 3

AgEAvtrClimbSpeedType.eClimbSpeedBestRate.__doc__ = "The speed at which the aircraft's rate of climb is maximized."
AgEAvtrClimbSpeedType.eClimbSpeedBestAngle.__doc__ = "The speed at which the aircraft will gain the most altitude over downrange distance."
AgEAvtrClimbSpeedType.eClimbSpeedMinFuel.__doc__ = "The speed at which the aircraft's fuel consumption is minimized."
AgEAvtrClimbSpeedType.eClimbSpeedOverride.__doc__ = "Manually specify the speed."

agcls.AgTypeNameMap["AgEAvtrClimbSpeedType"] = AgEAvtrClimbSpeedType

class AgEAvtrCruiseMaxPerfSpeedType(IntEnum):
    """The method for defining the maximum performance airspeed of the aircraft for an advanced cruise model."""
    # The lowest speed at which the aircraft can generate lift while pulling maximum Gs.
    eCornerSpeed = 0
    # The maximum specific excess power without afterburning.
    eMaxPsDryThrust = 1
    # The maximum specific excess power while afterburning.
    eMaxPsAfterburner = 2
    # The maximum speed without afterburning.
    eMaxSpeedDryThrust = 3
    # The speed which maximizes the aircraft range while afterburning.
    eMaxRangeAfterburner = 4

AgEAvtrCruiseMaxPerfSpeedType.eCornerSpeed.__doc__ = "The lowest speed at which the aircraft can generate lift while pulling maximum Gs."
AgEAvtrCruiseMaxPerfSpeedType.eMaxPsDryThrust.__doc__ = "The maximum specific excess power without afterburning."
AgEAvtrCruiseMaxPerfSpeedType.eMaxPsAfterburner.__doc__ = "The maximum specific excess power while afterburning."
AgEAvtrCruiseMaxPerfSpeedType.eMaxSpeedDryThrust.__doc__ = "The maximum speed without afterburning."
AgEAvtrCruiseMaxPerfSpeedType.eMaxRangeAfterburner.__doc__ = "The speed which maximizes the aircraft range while afterburning."

agcls.AgTypeNameMap["AgEAvtrCruiseMaxPerfSpeedType"] = AgEAvtrCruiseMaxPerfSpeedType

class AgEAvtrDescentSpeedType(IntEnum):
    """The method for calculating the aircraft's airspeed while descending."""
    # A variable airspeed that maximizes the distance that the aircraft can fly.
    eDescentMaxRangeCruise = 0
    # The speed at which the aircraft's glide ratio is maximized.
    eDescentMaxGlideRatio = 1
    # The speed at which the aircraft's rate of descent is minimized.
    eDescentMinSinkRate = 2
    # A speed relative to the aircraft's stall speed..
    eDescentStallSpeedRatio = 3
    # Manually define the airspeed.
    eDescentSpeedOverride = 4

AgEAvtrDescentSpeedType.eDescentMaxRangeCruise.__doc__ = "A variable airspeed that maximizes the distance that the aircraft can fly."
AgEAvtrDescentSpeedType.eDescentMaxGlideRatio.__doc__ = "The speed at which the aircraft's glide ratio is maximized."
AgEAvtrDescentSpeedType.eDescentMinSinkRate.__doc__ = "The speed at which the aircraft's rate of descent is minimized."
AgEAvtrDescentSpeedType.eDescentStallSpeedRatio.__doc__ = "A speed relative to the aircraft's stall speed.."
AgEAvtrDescentSpeedType.eDescentSpeedOverride.__doc__ = "Manually define the airspeed."

agcls.AgTypeNameMap["AgEAvtrDescentSpeedType"] = AgEAvtrDescentSpeedType

class AgEAvtrTakeoffLandingSpeedMode(IntEnum):
    """The method for calculating the aircraft's speed upon leaving the ground or at wheels down."""
    # A multiple of the aircraft's stall speed.
    eTakeoffLandingStallSpeedRatio = 0
    # The speed needed to achieve lift at the specified Angle of Attack.
    eTakeoffLandingAngleOfAttack = 1

AgEAvtrTakeoffLandingSpeedMode.eTakeoffLandingStallSpeedRatio.__doc__ = "A multiple of the aircraft's stall speed."
AgEAvtrTakeoffLandingSpeedMode.eTakeoffLandingAngleOfAttack.__doc__ = "The speed needed to achieve lift at the specified Angle of Attack."

agcls.AgTypeNameMap["AgEAvtrTakeoffLandingSpeedMode"] = AgEAvtrTakeoffLandingSpeedMode

class AgEAvtrDepartureSpeedMode(IntEnum):
    """The method for calculating the aircraft's airspeed upon leaving the ground."""
    # The aircraft will fly at the max climb angle.
    eMaxClimbAngle = 0
    # The aircraft will fly at the max climb rate.
    eMaxClimbRate = 1
    # The aircraft will fly at the airspeed defined in the Climb performance model.
    eUseClimbModel = 2

AgEAvtrDepartureSpeedMode.eMaxClimbAngle.__doc__ = "The aircraft will fly at the max climb angle."
AgEAvtrDepartureSpeedMode.eMaxClimbRate.__doc__ = "The aircraft will fly at the max climb rate."
AgEAvtrDepartureSpeedMode.eUseClimbModel.__doc__ = "The aircraft will fly at the airspeed defined in the Climb performance model."

agcls.AgTypeNameMap["AgEAvtrDepartureSpeedMode"] = AgEAvtrDepartureSpeedMode

class AgEAvtrAdvFixedWingAeroStrategy(IntEnum):
    """The aerodynamic strategy for the Advanced Fixed Wing Tool."""
    # Define the aerodynamics using an external .aero file.
    eExternalAeroFile = 0
    # Define the aerodynamics using a model derived from first principles that is valid for the full speed range of high speed aircraft.
    eSubSuperHyperAero = 1
    # Define the aerodynamics for an aircraft that generally travels at subsonic speeds.
    eSubsonicAero = 2
    # Define the aerodynamics for an aircraft that generally travels at supersonic speeds.
    eSupersonicAero = 3

AgEAvtrAdvFixedWingAeroStrategy.eExternalAeroFile.__doc__ = "Define the aerodynamics using an external .aero file."
AgEAvtrAdvFixedWingAeroStrategy.eSubSuperHyperAero.__doc__ = "Define the aerodynamics using a model derived from first principles that is valid for the full speed range of high speed aircraft."
AgEAvtrAdvFixedWingAeroStrategy.eSubsonicAero.__doc__ = "Define the aerodynamics for an aircraft that generally travels at subsonic speeds."
AgEAvtrAdvFixedWingAeroStrategy.eSupersonicAero.__doc__ = "Define the aerodynamics for an aircraft that generally travels at supersonic speeds."

agcls.AgTypeNameMap["AgEAvtrAdvFixedWingAeroStrategy"] = AgEAvtrAdvFixedWingAeroStrategy

class AgEAvtrAdvFixedWingGeometry(IntEnum):
    """The method to define the wing geometry of an aircraft in the Advanced Fixed Wing Tool."""
    # Define the static properties of an immovable wing.
    eBasicGeometry = 0
    # Define the minimum and maximum properties of an adjustable wing.
    eVariableGeometry = 1

AgEAvtrAdvFixedWingGeometry.eBasicGeometry.__doc__ = "Define the static properties of an immovable wing."
AgEAvtrAdvFixedWingGeometry.eVariableGeometry.__doc__ = "Define the minimum and maximum properties of an adjustable wing."

agcls.AgTypeNameMap["AgEAvtrAdvFixedWingGeometry"] = AgEAvtrAdvFixedWingGeometry

class AgEAvtrAdvFixedWingPowerplantStrategy(IntEnum):
    """The powerplant strategy for the Advanced Fixed Wing Tool."""
    # An electric engine.
    eElectricPowerplant = 0
    # Define the powerplant using an external .prop file.
    eExternalPropFile = 1
    # A piston, or reciprocating, engine.
    ePistonPowerplant = 2
    # A thermodynamic model that includes turbine, ramjet, and scramjet performance modes.
    eSubSuperHyperPowerplant = 3
    # A thermodynamic model of a dual-spool turbofan engine that has an afterburner.
    eTurbofanBasicAB = 4
    # An empirical model for a turbofan engine that produces significantly more fan thrust than jet thrust.
    eTurbofanHighBypass = 5
    # An empirical model for a turbofan engine that produces significantly more jet thrust than fan thrust.
    eTurbofanLowBypass = 6
    # An empirical model for a turbofan engine that has an afterburner and produces significantly more jet thrust than fan thrust.
    eTurbofanLowBypassAfterburning = 7
    # An empirical model that models a turbojet engine that has an afterburner.
    eTurbojetAfterburning = 8
    # An empirical model that models a turbojet engine.
    eTurbojetBasicAB = 9
    # An empirical model that models a turbojet engine.
    eTurbojet = 10
    # An empirical model that models a turboprop engine.
    eTurboprop = 11

AgEAvtrAdvFixedWingPowerplantStrategy.eElectricPowerplant.__doc__ = "An electric engine."
AgEAvtrAdvFixedWingPowerplantStrategy.eExternalPropFile.__doc__ = "Define the powerplant using an external .prop file."
AgEAvtrAdvFixedWingPowerplantStrategy.ePistonPowerplant.__doc__ = "A piston, or reciprocating, engine."
AgEAvtrAdvFixedWingPowerplantStrategy.eSubSuperHyperPowerplant.__doc__ = "A thermodynamic model that includes turbine, ramjet, and scramjet performance modes."
AgEAvtrAdvFixedWingPowerplantStrategy.eTurbofanBasicAB.__doc__ = "A thermodynamic model of a dual-spool turbofan engine that has an afterburner."
AgEAvtrAdvFixedWingPowerplantStrategy.eTurbofanHighBypass.__doc__ = "An empirical model for a turbofan engine that produces significantly more fan thrust than jet thrust."
AgEAvtrAdvFixedWingPowerplantStrategy.eTurbofanLowBypass.__doc__ = "An empirical model for a turbofan engine that produces significantly more jet thrust than fan thrust."
AgEAvtrAdvFixedWingPowerplantStrategy.eTurbofanLowBypassAfterburning.__doc__ = "An empirical model for a turbofan engine that has an afterburner and produces significantly more jet thrust than fan thrust."
AgEAvtrAdvFixedWingPowerplantStrategy.eTurbojetAfterburning.__doc__ = "An empirical model that models a turbojet engine that has an afterburner."
AgEAvtrAdvFixedWingPowerplantStrategy.eTurbojetBasicAB.__doc__ = "An empirical model that models a turbojet engine."
AgEAvtrAdvFixedWingPowerplantStrategy.eTurbojet.__doc__ = "An empirical model that models a turbojet engine."
AgEAvtrAdvFixedWingPowerplantStrategy.eTurboprop.__doc__ = "An empirical model that models a turboprop engine."

agcls.AgTypeNameMap["AgEAvtrAdvFixedWingPowerplantStrategy"] = AgEAvtrAdvFixedWingPowerplantStrategy

class AgEAvtrMissileAeroStrategy(IntEnum):
    """The aerodynamic strategy used to compute lift, drag, angle of attack, sideslip and intermediate / derived values."""
    # Simple aerodynamics.
    eMissileAeroSimple = 0
    # External file aerodynamics.
    eMissileAeroExternalFile = 1
    # Advanced missile aerodynamics.
    eMissileAeroAdvanced = 2

AgEAvtrMissileAeroStrategy.eMissileAeroSimple.__doc__ = "Simple aerodynamics."
AgEAvtrMissileAeroStrategy.eMissileAeroExternalFile.__doc__ = "External file aerodynamics."
AgEAvtrMissileAeroStrategy.eMissileAeroAdvanced.__doc__ = "Advanced missile aerodynamics."

agcls.AgTypeNameMap["AgEAvtrMissileAeroStrategy"] = AgEAvtrMissileAeroStrategy

class AgEAvtrMissilePropStrategy(IntEnum):
    """The propulsion strategy used to compute thrust and throttle setting."""
    # Simple propulsion.
    eMissilePropSimple = 0
    # External file propulsion.
    eMissilePropExternalFile = 1
    # Ramjet propulsion.
    eMissilePropRamjet = 2
    # Rocket propulsion.
    eMissilePropRocket = 3
    # Turbojet propulsion.
    eMissilePropTurbojet = 4

AgEAvtrMissilePropStrategy.eMissilePropSimple.__doc__ = "Simple propulsion."
AgEAvtrMissilePropStrategy.eMissilePropExternalFile.__doc__ = "External file propulsion."
AgEAvtrMissilePropStrategy.eMissilePropRamjet.__doc__ = "Ramjet propulsion."
AgEAvtrMissilePropStrategy.eMissilePropRocket.__doc__ = "Rocket propulsion."
AgEAvtrMissilePropStrategy.eMissilePropTurbojet.__doc__ = "Turbojet propulsion."

agcls.AgTypeNameMap["AgEAvtrMissilePropStrategy"] = AgEAvtrMissilePropStrategy

class AgEAvtrRotorcraftPowerplantType(IntEnum):
    """The powerplant type for a rotorcraft."""
    # Electric propulsion.
    eRotorcraftElectric = 0
    # Turboshaft propulsion.
    eRotorcraftTurboshaft = 1
    # Piston propulsion.
    eRotorcraftPiston = 2

AgEAvtrRotorcraftPowerplantType.eRotorcraftElectric.__doc__ = "Electric propulsion."
AgEAvtrRotorcraftPowerplantType.eRotorcraftTurboshaft.__doc__ = "Turboshaft propulsion."
AgEAvtrRotorcraftPowerplantType.eRotorcraftPiston.__doc__ = "Piston propulsion."

agcls.AgTypeNameMap["AgEAvtrRotorcraftPowerplantType"] = AgEAvtrRotorcraftPowerplantType

class AgEAvtrMinimizeSiteProcTimeDiff(IntEnum):
    """Options for minimizing the time difference between the procedure and site times."""
    # Do not converge the procedure and site times.
    eMinimizeTimeDifferenceOff = 0
    # Always recalculate.
    eMinimizeTimeDifferenceAlways = 1
    # Only recalculate when updated.
    eMinimizeTimeDifferenceNextUpdate = 2

AgEAvtrMinimizeSiteProcTimeDiff.eMinimizeTimeDifferenceOff.__doc__ = "Do not converge the procedure and site times."
AgEAvtrMinimizeSiteProcTimeDiff.eMinimizeTimeDifferenceAlways.__doc__ = "Always recalculate."
AgEAvtrMinimizeSiteProcTimeDiff.eMinimizeTimeDifferenceNextUpdate.__doc__ = "Only recalculate when updated."

agcls.AgTypeNameMap["AgEAvtrMinimizeSiteProcTimeDiff"] = AgEAvtrMinimizeSiteProcTimeDiff

class AgEAvtrSTKObjectWaypointOffsetMode(IntEnum):
    """The options to offset the site location relative to the STK Object."""
    # No offset.
    eOffsetNone = 0
    # Bearing/Range (relative to North).
    eOffsetBearingRange = 1
    # VGT Point.
    eOffsetVGTPoint = 2
    # Bearing/Reange relative to Vehicle course.
    eOffsetRelativeBearingRange = 3

AgEAvtrSTKObjectWaypointOffsetMode.eOffsetNone.__doc__ = "No offset."
AgEAvtrSTKObjectWaypointOffsetMode.eOffsetBearingRange.__doc__ = "Bearing/Range (relative to North)."
AgEAvtrSTKObjectWaypointOffsetMode.eOffsetVGTPoint.__doc__ = "VGT Point."
AgEAvtrSTKObjectWaypointOffsetMode.eOffsetRelativeBearingRange.__doc__ = "Bearing/Reange relative to Vehicle course."

agcls.AgTypeNameMap["AgEAvtrSTKObjectWaypointOffsetMode"] = AgEAvtrSTKObjectWaypointOffsetMode

class AgEAvtrSearchPatternCourseMode(IntEnum):
    """The mode to determine the course of the search pattern."""
    # Automatically begin the search pattern within 0 - 180 degrees.
    eCourseModeLow = 0
    # Automatically begin the search pattern within 180 - 360 degrees.
    eCourseModeHigh = 1
    # Manually define the course of the search pattern.
    eCourseModeOverride = 2

AgEAvtrSearchPatternCourseMode.eCourseModeLow.__doc__ = "Automatically begin the search pattern within 0 - 180 degrees."
AgEAvtrSearchPatternCourseMode.eCourseModeHigh.__doc__ = "Automatically begin the search pattern within 180 - 360 degrees."
AgEAvtrSearchPatternCourseMode.eCourseModeOverride.__doc__ = "Manually define the course of the search pattern."

agcls.AgTypeNameMap["AgEAvtrSearchPatternCourseMode"] = AgEAvtrSearchPatternCourseMode

class AgEAvtrDelayTurnDir(IntEnum):
    """Turn mode for procedures with Delay options."""
    # Automatic turn. Aviator will determine the direction of the turn.
    eDelayTurnAuto = 0
    # Left turn.
    eDelayTurnLeft = 1
    # Right turn.
    eDelayTurnRight = 2

AgEAvtrDelayTurnDir.eDelayTurnAuto.__doc__ = "Automatic turn. Aviator will determine the direction of the turn."
AgEAvtrDelayTurnDir.eDelayTurnLeft.__doc__ = "Left turn."
AgEAvtrDelayTurnDir.eDelayTurnRight.__doc__ = "Right turn."

agcls.AgTypeNameMap["AgEAvtrDelayTurnDir"] = AgEAvtrDelayTurnDir

class AgEAvtrTrajectoryBlendMode(IntEnum):
    """The interpolation mode to determine the aircraft's position and velocity."""
    # Quadratic interpolation using the body frame.
    eBlendBodyQuadratic = 0
    # Cubic interpolation using the body frame.
    eBlendBodyCubic = 1
    # Quadratic interpolation using the local horizontal frame.
    eBlendLHQuadratic = 2
    # Cubic interpolation using the local horizontal frame.
    eBlendLHCubic = 3
    # Quadratic interpolation using the Earth-Centered Fixed frame.
    eBlendECFQuadratic = 4
    # Cubic interpolation using the Earth-Centered Fixed frame.
    eBlendECFCubic = 5

AgEAvtrTrajectoryBlendMode.eBlendBodyQuadratic.__doc__ = "Quadratic interpolation using the body frame."
AgEAvtrTrajectoryBlendMode.eBlendBodyCubic.__doc__ = "Cubic interpolation using the body frame."
AgEAvtrTrajectoryBlendMode.eBlendLHQuadratic.__doc__ = "Quadratic interpolation using the local horizontal frame."
AgEAvtrTrajectoryBlendMode.eBlendLHCubic.__doc__ = "Cubic interpolation using the local horizontal frame."
AgEAvtrTrajectoryBlendMode.eBlendECFQuadratic.__doc__ = "Quadratic interpolation using the Earth-Centered Fixed frame."
AgEAvtrTrajectoryBlendMode.eBlendECFCubic.__doc__ = "Cubic interpolation using the Earth-Centered Fixed frame."

agcls.AgTypeNameMap["AgEAvtrTrajectoryBlendMode"] = AgEAvtrTrajectoryBlendMode

class AgEAvtrRefStatePerfMode(IntEnum):
    """The type of motion the aircraft is engaged in at the reference state."""
    # Forward Flight - Climb performance mode.
    eRefStateClimb = 0
    # Forward Flight - Cruise performance mode.
    eRefStateCruise = 1
    # Forward Flight - Descend performance mode.
    eRefStateDescend = 2
    # Hover performance mode.
    eRefStateHover = 3
    # Landing performance mode.
    eRefStateLanding = 4
    # Takeoff performance mode.
    eRefStateTakeoff = 5
    # Weight On Wheels - Landing Rollout performance mode
    eRefStateLandingRollout = 6
    # Weight On Wheels - Takeoff Run performance mode
    eRefStateTakeoffRun = 7

AgEAvtrRefStatePerfMode.eRefStateClimb.__doc__ = "Forward Flight - Climb performance mode."
AgEAvtrRefStatePerfMode.eRefStateCruise.__doc__ = "Forward Flight - Cruise performance mode."
AgEAvtrRefStatePerfMode.eRefStateDescend.__doc__ = "Forward Flight - Descend performance mode."
AgEAvtrRefStatePerfMode.eRefStateHover.__doc__ = "Hover performance mode."
AgEAvtrRefStatePerfMode.eRefStateLanding.__doc__ = "Landing performance mode."
AgEAvtrRefStatePerfMode.eRefStateTakeoff.__doc__ = "Takeoff performance mode."
AgEAvtrRefStatePerfMode.eRefStateLandingRollout.__doc__ = "Weight On Wheels - Landing Rollout performance mode"
AgEAvtrRefStatePerfMode.eRefStateTakeoffRun.__doc__ = "Weight On Wheels - Takeoff Run performance mode"

agcls.AgTypeNameMap["AgEAvtrRefStatePerfMode"] = AgEAvtrRefStatePerfMode

class AgEAvtrRefStateLongitudinalAccelMode(IntEnum):
    """The mode to specify the longitudinal acceleration of the aircraft."""
    # Specify the true airspeed acceleration.
    eSpecifyTASDot = 0
    # Specify the groundspeed acceleration.
    eSpecifyGroundSpeedDot = 1

AgEAvtrRefStateLongitudinalAccelMode.eSpecifyTASDot.__doc__ = "Specify the true airspeed acceleration."
AgEAvtrRefStateLongitudinalAccelMode.eSpecifyGroundSpeedDot.__doc__ = "Specify the groundspeed acceleration."

agcls.AgTypeNameMap["AgEAvtrRefStateLongitudinalAccelMode"] = AgEAvtrRefStateLongitudinalAccelMode

class AgEAvtrRefStateLateralAccelMode(IntEnum):
    """The mode to specify the lateral acceleration of the aircraft."""
    # Specify the heading rate of change.
    eSpecifyHeadingDot = 0
    # Specify the course rate of change.
    eSpecifyCourseDot = 1

AgEAvtrRefStateLateralAccelMode.eSpecifyHeadingDot.__doc__ = "Specify the heading rate of change."
AgEAvtrRefStateLateralAccelMode.eSpecifyCourseDot.__doc__ = "Specify the course rate of change."

agcls.AgTypeNameMap["AgEAvtrRefStateLateralAccelMode"] = AgEAvtrRefStateLateralAccelMode

class AgEAvtrRefStateAttitudeMode(IntEnum):
    """The mode to specify the attitude rate of change."""
    # Specify the push/pull G.
    eSpecifyPushPullG = 0
    # Specify the pitch rate of change.
    eSpecifyPitchRate = 1

AgEAvtrRefStateAttitudeMode.eSpecifyPushPullG.__doc__ = "Specify the push/pull G."
AgEAvtrRefStateAttitudeMode.eSpecifyPitchRate.__doc__ = "Specify the pitch rate of change."

agcls.AgTypeNameMap["AgEAvtrRefStateAttitudeMode"] = AgEAvtrRefStateAttitudeMode

class AgEAvtrAndOr(IntEnum):
    """The option to specify AND or OR."""
    # And option.
    eAvtrAND = 0
    # Or option.
    eAvtrOR = 1

AgEAvtrAndOr.eAvtrAND.__doc__ = "And option."
AgEAvtrAndOr.eAvtrOR.__doc__ = "Or option."

agcls.AgTypeNameMap["AgEAvtrAndOr"] = AgEAvtrAndOr

class AgEAvtrJetEngineTechnologyLevel(IntEnum):
    """The technology level of the jet engine."""
    # Ideal (perfect efficiencies).
    eIdeal = 0
    # Level 1 (1945-1965).
    eLevel1 = 1
    # Level 2 (1965-1985).
    eLevel2 = 2
    # Level 3 (1985-2005).
    eLevel3 = 3
    # Level 4 (2005-2025).
    eLevel4 = 4
    # Level 5 (2025-2045).
    eLevel5 = 5

AgEAvtrJetEngineTechnologyLevel.eIdeal.__doc__ = "Ideal (perfect efficiencies)."
AgEAvtrJetEngineTechnologyLevel.eLevel1.__doc__ = "Level 1 (1945-1965)."
AgEAvtrJetEngineTechnologyLevel.eLevel2.__doc__ = "Level 2 (1965-1985)."
AgEAvtrJetEngineTechnologyLevel.eLevel3.__doc__ = "Level 3 (1985-2005)."
AgEAvtrJetEngineTechnologyLevel.eLevel4.__doc__ = "Level 4 (2005-2025)."
AgEAvtrJetEngineTechnologyLevel.eLevel5.__doc__ = "Level 5 (2025-2045)."

agcls.AgTypeNameMap["AgEAvtrJetEngineTechnologyLevel"] = AgEAvtrJetEngineTechnologyLevel

class AgEAvtrJetEngineIntakeType(IntEnum):
    """The intake type of the jet engine."""
    # Subsonic nacelles.
    eSubsonicNacelles = 0
    # Subsonic embedded.
    eSubsonicEmbedded = 1
    # Supersonic embedded.
    eSupersonicEmbedded = 2

AgEAvtrJetEngineIntakeType.eSubsonicNacelles.__doc__ = "Subsonic nacelles."
AgEAvtrJetEngineIntakeType.eSubsonicEmbedded.__doc__ = "Subsonic embedded."
AgEAvtrJetEngineIntakeType.eSupersonicEmbedded.__doc__ = "Supersonic embedded."

agcls.AgTypeNameMap["AgEAvtrJetEngineIntakeType"] = AgEAvtrJetEngineIntakeType

class AgEAvtrJetEngineTurbineType(IntEnum):
    """The turbine type of the jet engine."""
    # Uncooled turbine.
    eUncooled = 0
    # Cooled turbine.
    eCooled = 1

AgEAvtrJetEngineTurbineType.eUncooled.__doc__ = "Uncooled turbine."
AgEAvtrJetEngineTurbineType.eCooled.__doc__ = "Cooled turbine."

agcls.AgTypeNameMap["AgEAvtrJetEngineTurbineType"] = AgEAvtrJetEngineTurbineType

class AgEAvtrJetEngineExhaustNozzleType(IntEnum):
    """The exhaust nozzle type of the jet engine."""
    # Fixed Area Convergent.
    eFixedAreaConvergent = 0
    # Variable Area Convergent.
    eVariableAreaConvergent = 1
    # Variable Area Convergent - Divergent.
    eVariableAreaConvergentDivergent = 2

AgEAvtrJetEngineExhaustNozzleType.eFixedAreaConvergent.__doc__ = "Fixed Area Convergent."
AgEAvtrJetEngineExhaustNozzleType.eVariableAreaConvergent.__doc__ = "Variable Area Convergent."
AgEAvtrJetEngineExhaustNozzleType.eVariableAreaConvergentDivergent.__doc__ = "Variable Area Convergent - Divergent."

agcls.AgTypeNameMap["AgEAvtrJetEngineExhaustNozzleType"] = AgEAvtrJetEngineExhaustNozzleType

class AgEAvtrJetFuelType(IntEnum):
    """The jet fuel type."""
    # A kerosene fuel model based on AFPROP.
    eKeroseneAFPROP = 0
    # A kerosene fuel model based on NASA CEA.
    eKeroseneCEA = 1
    # A hydrogen fuel model based on NASA CEA.
    eHydrogen = 2

AgEAvtrJetFuelType.eKeroseneAFPROP.__doc__ = "A kerosene fuel model based on AFPROP."
AgEAvtrJetFuelType.eKeroseneCEA.__doc__ = "A kerosene fuel model based on NASA CEA."
AgEAvtrJetFuelType.eHydrogen.__doc__ = "A hydrogen fuel model based on NASA CEA."

agcls.AgTypeNameMap["AgEAvtrJetFuelType"] = AgEAvtrJetFuelType

class AgEAvtrAFPROPFuelType(IntEnum):
    """The AFPROP fuel type."""
    # Override the specific energy.
    eAFPROPOverride = 0
    # Jet A fuel model based on AFPROP.
    eAFPROPJetA = 1
    # Jet A-1 fuel model based on AFPROP.
    eAFPROPJetA1 = 2
    # JP-5 fuel model based on AFPROP.
    eAFPROPJP5 = 3
    # JP-7 fuel model based on AFPROP.
    eAFPROPJP7 = 4

AgEAvtrAFPROPFuelType.eAFPROPOverride.__doc__ = "Override the specific energy."
AgEAvtrAFPROPFuelType.eAFPROPJetA.__doc__ = "Jet A fuel model based on AFPROP."
AgEAvtrAFPROPFuelType.eAFPROPJetA1.__doc__ = "Jet A-1 fuel model based on AFPROP."
AgEAvtrAFPROPFuelType.eAFPROPJP5.__doc__ = "JP-5 fuel model based on AFPROP."
AgEAvtrAFPROPFuelType.eAFPROPJP7.__doc__ = "JP-7 fuel model based on AFPROP."

agcls.AgTypeNameMap["AgEAvtrAFPROPFuelType"] = AgEAvtrAFPROPFuelType

class AgEAvtrCEAFuelType(IntEnum):
    """The CEA fuel type."""
    # Override the specific energy.
    eCEAOverride = 0
    # Jet A fuel model based on NASA CEA.
    eCEAJetA = 1
    # Jet A-1 fuel model based on NASA CEA.
    eCEAJetA1 = 2
    # JP-5 fuel model based on NASA CEA.
    eCEAJP5 = 3
    # JP-7 fuel model based on NASA CEA.
    eCEAJP7 = 4

AgEAvtrCEAFuelType.eCEAOverride.__doc__ = "Override the specific energy."
AgEAvtrCEAFuelType.eCEAJetA.__doc__ = "Jet A fuel model based on NASA CEA."
AgEAvtrCEAFuelType.eCEAJetA1.__doc__ = "Jet A-1 fuel model based on NASA CEA."
AgEAvtrCEAFuelType.eCEAJP5.__doc__ = "JP-5 fuel model based on NASA CEA."
AgEAvtrCEAFuelType.eCEAJP7.__doc__ = "JP-7 fuel model based on NASA CEA."

agcls.AgTypeNameMap["AgEAvtrCEAFuelType"] = AgEAvtrCEAFuelType

class AgEAvtrTurbineMode(IntEnum):
    """The turbine mode for a Sub/Super/Hypersonic powerplant."""
    # Disabled turbine mode.
    eTurbineModeDisabled = 0
    # Turbojet - Basic w/AB (Thermodynamic model).
    eTurbineModeTurbojetBasicAB = 1
    # Turbofan - Basic w/AB (Thermodynamic model).
    eTurbineModeTurbofanBasicAB = 2

AgEAvtrTurbineMode.eTurbineModeDisabled.__doc__ = "Disabled turbine mode."
AgEAvtrTurbineMode.eTurbineModeTurbojetBasicAB.__doc__ = "Turbojet - Basic w/AB (Thermodynamic model)."
AgEAvtrTurbineMode.eTurbineModeTurbofanBasicAB.__doc__ = "Turbofan - Basic w/AB (Thermodynamic model)."

agcls.AgTypeNameMap["AgEAvtrTurbineMode"] = AgEAvtrTurbineMode

class AgEAvtrRamjetMode(IntEnum):
    """The ramjet mode for a Sub/Super/Hypersonic powerplant."""
    # Disabled ramjet mode.
    eRamjetModeDisabled = 0
    # Ramjet - Basic mode.
    eRamjetModeBasic = 1

AgEAvtrRamjetMode.eRamjetModeDisabled.__doc__ = "Disabled ramjet mode."
AgEAvtrRamjetMode.eRamjetModeBasic.__doc__ = "Ramjet - Basic mode."

agcls.AgTypeNameMap["AgEAvtrRamjetMode"] = AgEAvtrRamjetMode

class AgEAvtrScramjetMode(IntEnum):
    """The scramjet mode for a Sub/Super/Hypersonic powerplant."""
    # Disabled scramjet mode.
    eScramjetModeDisabled = 0
    # Scramjet - Basic mode.
    eScramjetModeBasic = 1

AgEAvtrScramjetMode.eScramjetModeDisabled.__doc__ = "Disabled scramjet mode."
AgEAvtrScramjetMode.eScramjetModeBasic.__doc__ = "Scramjet - Basic mode."

agcls.AgTypeNameMap["AgEAvtrScramjetMode"] = AgEAvtrScramjetMode

class AgEAvtrNumericalIntegrator(IntEnum):
    """The numerical integrator to be used for the procedure."""
    # Runge-Kutta 4th Order Fixed Time Step Integrator
    eRK4 = 0
    # Runge-Kutta 4th Order Adaptive Time Step Integrator.
    eRK45 = 1

AgEAvtrNumericalIntegrator.eRK4.__doc__ = "Runge-Kutta 4th Order Fixed Time Step Integrator"
AgEAvtrNumericalIntegrator.eRK45.__doc__ = "Runge-Kutta 4th Order Adaptive Time Step Integrator."

agcls.AgTypeNameMap["AgEAvtrNumericalIntegrator"] = AgEAvtrNumericalIntegrator

class AgEAvtrBallistic3DControlMode(IntEnum):
    """The control mode used to define the ballistic 3D strategy of the basic maneuver procedure."""
    # The vehicle will compensate for the wind along its ballistic trajectory.
    eBallistic3DCompensateForWind = 0
    # Allow the wind to affect the ballistic trajectory.
    eBallistic3DWindPushesVehicle = 1
    # Model the vehicle as a parachute.
    eBallistic3DParachuteMode = 2

AgEAvtrBallistic3DControlMode.eBallistic3DCompensateForWind.__doc__ = "The vehicle will compensate for the wind along its ballistic trajectory."
AgEAvtrBallistic3DControlMode.eBallistic3DWindPushesVehicle.__doc__ = "Allow the wind to affect the ballistic trajectory."
AgEAvtrBallistic3DControlMode.eBallistic3DParachuteMode.__doc__ = "Model the vehicle as a parachute."

agcls.AgTypeNameMap["AgEAvtrBallistic3DControlMode"] = AgEAvtrBallistic3DControlMode

class AgEAvtrLaunchDynStateCoordFrame(IntEnum):
    """The coordinate frame used for a LaunchDynState procedure."""
    # The object's body frame.
    eLaunchDynStateCoordFrameBody = 0
    # The object's local horizontal frame.
    eLaunchDynStateCoordFrameLocalHorizontal = 1

AgEAvtrLaunchDynStateCoordFrame.eLaunchDynStateCoordFrameBody.__doc__ = "The object's body frame."
AgEAvtrLaunchDynStateCoordFrame.eLaunchDynStateCoordFrameLocalHorizontal.__doc__ = "The object's local horizontal frame."

agcls.AgTypeNameMap["AgEAvtrLaunchDynStateCoordFrame"] = AgEAvtrLaunchDynStateCoordFrame

class AgEAvtrLaunchDynStateBearingRef(IntEnum):
    """The vector used as a bearing reference for a LaunchDynState procedure."""
    # The object's velocity vector.
    eLaunchDynStateBearingRefVelocity = 0
    # The X vector of the object's coordinate frame.
    eLaunchDynStateBearingRefCoordFrameX = 1
    # The object's vector to North.
    eLaunchDynStateBearingRefNorth = 2

AgEAvtrLaunchDynStateBearingRef.eLaunchDynStateBearingRefVelocity.__doc__ = "The object's velocity vector."
AgEAvtrLaunchDynStateBearingRef.eLaunchDynStateBearingRefCoordFrameX.__doc__ = "The X vector of the object's coordinate frame."
AgEAvtrLaunchDynStateBearingRef.eLaunchDynStateBearingRefNorth.__doc__ = "The object's vector to North."

agcls.AgTypeNameMap["AgEAvtrLaunchDynStateBearingRef"] = AgEAvtrLaunchDynStateBearingRef

class AgEAvtrAltitudeRef(IntEnum):
    """The altitude reference."""
    # Altitude above WGS84 ground reference.
    eAltitudeRefWGS84 = 0
    # Altitude above Mean Sea Level (MSL).
    eAltitudeRefMSL = 1
    # ALtitude above terrain.
    eAltitudeRefTerrain = 2

AgEAvtrAltitudeRef.eAltitudeRefWGS84.__doc__ = "Altitude above WGS84 ground reference."
AgEAvtrAltitudeRef.eAltitudeRefMSL.__doc__ = "Altitude above Mean Sea Level (MSL)."
AgEAvtrAltitudeRef.eAltitudeRefTerrain.__doc__ = "ALtitude above terrain."

agcls.AgTypeNameMap["AgEAvtrAltitudeRef"] = AgEAvtrAltitudeRef

class AgEAvtrSmoothTurnFPAMode(IntEnum):
    """The flight path angle mode for the Smooth Turn strategy of the Basic Maneuver procedure."""
    # Hold the initial flight path angle.
    eSmoothTurnFPAHoldInitial = 0
    # Levell off the flight path angle.
    eSmoothTurnFPALevelOff = 1

AgEAvtrSmoothTurnFPAMode.eSmoothTurnFPAHoldInitial.__doc__ = "Hold the initial flight path angle."
AgEAvtrSmoothTurnFPAMode.eSmoothTurnFPALevelOff.__doc__ = "Levell off the flight path angle."

agcls.AgTypeNameMap["AgEAvtrSmoothTurnFPAMode"] = AgEAvtrSmoothTurnFPAMode

class AgEAvtrPitch3DControlMode(IntEnum):
    """The control mode used to define the pitch 3D strategy of the basic maneuver procedure."""
    # The vehicle will compensate for the wind along its trajectory.
    ePitch3DCompensateForWind = 0
    # Allow the wind to affect the trajectory.
    ePitch3DWindPushesVehicle = 1

AgEAvtrPitch3DControlMode.ePitch3DCompensateForWind.__doc__ = "The vehicle will compensate for the wind along its trajectory."
AgEAvtrPitch3DControlMode.ePitch3DWindPushesVehicle.__doc__ = "Allow the wind to affect the trajectory."

agcls.AgTypeNameMap["AgEAvtrPitch3DControlMode"] = AgEAvtrPitch3DControlMode

class AgEAvtrRefuelDumpMode(IntEnum):
    """The modes used to define procedure refuel/dump modes."""
    # RefuelDump Disabled.
    eRefuelDumpDisabled = 0
    # Refuel Top Off.
    eRefuelTopOff = 1
    # Refuel to specified fuel state.
    eRefuelToFuelState = 2
    # Refuel to specified weight.
    eRefuelToWeight = 3
    # Refuel specified quantity.
    eRefuelQuantity = 4
    # Dump to specified fuel state.
    eDumpToFuelState = 5
    # Dump to specified weight.
    eDumpToWeight = 6
    # Dump specified quantity.
    eDumpQuantity = 7

AgEAvtrRefuelDumpMode.eRefuelDumpDisabled.__doc__ = "RefuelDump Disabled."
AgEAvtrRefuelDumpMode.eRefuelTopOff.__doc__ = "Refuel Top Off."
AgEAvtrRefuelDumpMode.eRefuelToFuelState.__doc__ = "Refuel to specified fuel state."
AgEAvtrRefuelDumpMode.eRefuelToWeight.__doc__ = "Refuel to specified weight."
AgEAvtrRefuelDumpMode.eRefuelQuantity.__doc__ = "Refuel specified quantity."
AgEAvtrRefuelDumpMode.eDumpToFuelState.__doc__ = "Dump to specified fuel state."
AgEAvtrRefuelDumpMode.eDumpToWeight.__doc__ = "Dump to specified weight."
AgEAvtrRefuelDumpMode.eDumpQuantity.__doc__ = "Dump specified quantity."

agcls.AgTypeNameMap["AgEAvtrRefuelDumpMode"] = AgEAvtrRefuelDumpMode

class AgEAvtrBasicManeuverGlideSpeedControlMode(IntEnum):
    """The modes used to define basic maneuver glide speed control modes."""
    # Immediate speed change.
    eGlideSpeedImmediateChange = 0
    # Achieve speed at altitude.
    eGlideSpeedAtAltitude = 1

AgEAvtrBasicManeuverGlideSpeedControlMode.eGlideSpeedImmediateChange.__doc__ = "Immediate speed change."
AgEAvtrBasicManeuverGlideSpeedControlMode.eGlideSpeedAtAltitude.__doc__ = "Achieve speed at altitude."

agcls.AgTypeNameMap["AgEAvtrBasicManeuverGlideSpeedControlMode"] = AgEAvtrBasicManeuverGlideSpeedControlMode

class AgEAvtrTargetPosVelType(IntEnum):
    """The target pos/vel type."""
    # Noisy Surface Target PosVel.
    eSurfaceTargetPosVel = 0
    # Noisy Bearing Range Target PosVel.
    eBearingRangeTargetPosVel = 1
    # Disabled Target PosVel.
    eDisabledPosVel = 2

AgEAvtrTargetPosVelType.eSurfaceTargetPosVel.__doc__ = "Noisy Surface Target PosVel."
AgEAvtrTargetPosVelType.eBearingRangeTargetPosVel.__doc__ = "Noisy Bearing Range Target PosVel."
AgEAvtrTargetPosVelType.eDisabledPosVel.__doc__ = "Disabled Target PosVel."

agcls.AgTypeNameMap["AgEAvtrTargetPosVelType"] = AgEAvtrTargetPosVelType


class IAgAvtrSite(object):
    """Interface to access Site options"""
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{ca4ddeac-d1c9-4bd8-9569-22c259ae7a1b}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_Name" : 1,
                             "set_Name" : 2, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrSite._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrSite from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrSite.__dict__ and type(IAgAvtrSite.__dict__[attrname]) == property:
            return IAgAvtrSite.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrSite.")
    
    _get_Name_metadata = { "name" : "Name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def Name(self) -> str:
        """The name of the site."""
        return self._intf.get_property(IAgAvtrSite._metadata, IAgAvtrSite._get_Name_metadata)

    _set_Name_metadata = { "name" : "Name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @Name.setter
    def Name(self, newVal:str) -> None:
        """The name of the site."""
        return self._intf.set_property(IAgAvtrSite._metadata, IAgAvtrSite._set_Name_metadata, newVal)


agcls.AgClassCatalog.add_catalog_entry("{ca4ddeac-d1c9-4bd8-9569-22c259ae7a1b}", IAgAvtrSite)
agcls.AgTypeNameMap["IAgAvtrSite"] = IAgAvtrSite

class IAgAvtrWindModel(object):
    """Interface used to access the wind model for a mission, scenario, or procedure."""
    _num_methods = 10
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{7147f488-83c5-49be-949c-84e81fdcfb1a}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_WindModelType" : 1,
                             "set_WindModelType" : 2,
                             "get_WindModelTypeString" : 3,
                             "set_WindModelTypeString" : 4,
                             "get_WindModelSource" : 5,
                             "set_WindModelSource" : 6,
                             "get_ModeAsConstant" : 7,
                             "get_ModeAsADDS" : 8,
                             "Copy" : 9,
                             "Paste" : 10, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrWindModel._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrWindModel from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrWindModel.__dict__ and type(IAgAvtrWindModel.__dict__[attrname]) == property:
            return IAgAvtrWindModel.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrWindModel.")
    
    _get_WindModelType_metadata = { "name" : "WindModelType",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrWindModelType),) }
    @property
    def WindModelType(self) -> "AgEAvtrWindModelType":
        """The wind model type."""
        return self._intf.get_property(IAgAvtrWindModel._metadata, IAgAvtrWindModel._get_WindModelType_metadata)

    _set_WindModelType_metadata = { "name" : "WindModelType",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrWindModelType),) }
    @WindModelType.setter
    def WindModelType(self, pVal:"AgEAvtrWindModelType") -> None:
        """The wind model type."""
        return self._intf.set_property(IAgAvtrWindModel._metadata, IAgAvtrWindModel._set_WindModelType_metadata, pVal)

    _get_WindModelTypeString_metadata = { "name" : "WindModelTypeString",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def WindModelTypeString(self) -> str:
        """The wind model type as a string value. Use this for custom models."""
        return self._intf.get_property(IAgAvtrWindModel._metadata, IAgAvtrWindModel._get_WindModelTypeString_metadata)

    _set_WindModelTypeString_metadata = { "name" : "WindModelTypeString",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @WindModelTypeString.setter
    def WindModelTypeString(self, pVal:str) -> None:
        """The wind model type as a string value. Use this for custom models."""
        return self._intf.set_property(IAgAvtrWindModel._metadata, IAgAvtrWindModel._set_WindModelTypeString_metadata, pVal)

    _get_WindModelSource_metadata = { "name" : "WindModelSource",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrWindAtmosModelSource),) }
    @property
    def WindModelSource(self) -> "AgEAvtrWindAtmosModelSource":
        """The wind model source."""
        return self._intf.get_property(IAgAvtrWindModel._metadata, IAgAvtrWindModel._get_WindModelSource_metadata)

    _set_WindModelSource_metadata = { "name" : "WindModelSource",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrWindAtmosModelSource),) }
    @WindModelSource.setter
    def WindModelSource(self, pVal:"AgEAvtrWindAtmosModelSource") -> None:
        """The wind model source."""
        return self._intf.set_property(IAgAvtrWindModel._metadata, IAgAvtrWindModel._set_WindModelSource_metadata, pVal)

    _get_ModeAsConstant_metadata = { "name" : "ModeAsConstant",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def ModeAsConstant(self) -> "IAgAvtrWindModelConstant":
        """Get the options for a Constant Bearing/Speed wind model."""
        return self._intf.get_property(IAgAvtrWindModel._metadata, IAgAvtrWindModel._get_ModeAsConstant_metadata)

    _get_ModeAsADDS_metadata = { "name" : "ModeAsADDS",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def ModeAsADDS(self) -> "IAgAvtrWindModelADDS":
        """Get the options for a NOAA ADDS Service wind model."""
        return self._intf.get_property(IAgAvtrWindModel._metadata, IAgAvtrWindModel._get_ModeAsADDS_metadata)

    _Copy_metadata = { "name" : "Copy",
            "arg_types" : (),
            "marshallers" : () }
    def Copy(self) -> None:
        """Copy the wind model."""
        return self._intf.invoke(IAgAvtrWindModel._metadata, IAgAvtrWindModel._Copy_metadata, )

    _Paste_metadata = { "name" : "Paste",
            "arg_types" : (),
            "marshallers" : () }
    def Paste(self) -> None:
        """Paste the wind model."""
        return self._intf.invoke(IAgAvtrWindModel._metadata, IAgAvtrWindModel._Paste_metadata, )


agcls.AgClassCatalog.add_catalog_entry("{7147f488-83c5-49be-949c-84e81fdcfb1a}", IAgAvtrWindModel)
agcls.AgTypeNameMap["IAgAvtrWindModel"] = IAgAvtrWindModel

class IAgAvtrADDSMessage(object):
    """Interface used to access a message from the NOAA ADDS forecast."""
    _num_methods = 5
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{cc723181-9845-44c1-b061-f3e516343d88}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_StartTime" : 1,
                             "get_StopTime" : 2,
                             "get_MessageTime" : 3,
                             "get_Type" : 4,
                             "get_Source" : 5, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrADDSMessage._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrADDSMessage from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrADDSMessage.__dict__ and type(IAgAvtrADDSMessage.__dict__[attrname]) == property:
            return IAgAvtrADDSMessage.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrADDSMessage.")
    
    _get_StartTime_metadata = { "name" : "StartTime",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def StartTime(self) -> typing.Any:
        """Valid start time for the ADDS message."""
        return self._intf.get_property(IAgAvtrADDSMessage._metadata, IAgAvtrADDSMessage._get_StartTime_metadata)

    _get_StopTime_metadata = { "name" : "StopTime",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def StopTime(self) -> typing.Any:
        """Valid stop time for the ADDS message."""
        return self._intf.get_property(IAgAvtrADDSMessage._metadata, IAgAvtrADDSMessage._get_StopTime_metadata)

    _get_MessageTime_metadata = { "name" : "MessageTime",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def MessageTime(self) -> typing.Any:
        """The message time for the ADDS message."""
        return self._intf.get_property(IAgAvtrADDSMessage._metadata, IAgAvtrADDSMessage._get_MessageTime_metadata)

    _get_Type_metadata = { "name" : "Type",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrADDSForecastType),) }
    @property
    def Type(self) -> "AgEAvtrADDSForecastType":
        """The ADDS message type."""
        return self._intf.get_property(IAgAvtrADDSMessage._metadata, IAgAvtrADDSMessage._get_Type_metadata)

    _get_Source_metadata = { "name" : "Source",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def Source(self) -> str:
        """The ADDS message source."""
        return self._intf.get_property(IAgAvtrADDSMessage._metadata, IAgAvtrADDSMessage._get_Source_metadata)


agcls.AgClassCatalog.add_catalog_entry("{cc723181-9845-44c1-b061-f3e516343d88}", IAgAvtrADDSMessage)
agcls.AgTypeNameMap["IAgAvtrADDSMessage"] = IAgAvtrADDSMessage

class IAgAvtrFuelTankInternal(object):
    """Interface used to set an aircraft's internal fuel tank."""
    _num_methods = 12
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{4cc46781-fe55-4b7e-9bd8-b4f174b208b2}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_Name" : 1,
                             "set_Name" : 2,
                             "get_Capacity" : 3,
                             "set_Capacity" : 4,
                             "get_ConsumptionOrder" : 5,
                             "set_ConsumptionOrder" : 6,
                             "get_InitialFuelState" : 7,
                             "set_InitialFuelState" : 8,
                             "get_PositionX" : 9,
                             "get_PositionY" : 10,
                             "get_PositionZ" : 11,
                             "SetPosition" : 12, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrFuelTankInternal._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrFuelTankInternal from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrFuelTankInternal.__dict__ and type(IAgAvtrFuelTankInternal.__dict__[attrname]) == property:
            return IAgAvtrFuelTankInternal.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrFuelTankInternal.")
    
    _get_Name_metadata = { "name" : "Name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def Name(self) -> str:
        """The name of the fuel tank."""
        return self._intf.get_property(IAgAvtrFuelTankInternal._metadata, IAgAvtrFuelTankInternal._get_Name_metadata)

    _set_Name_metadata = { "name" : "Name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @Name.setter
    def Name(self, newVal:str) -> None:
        """The name of the fuel tank."""
        return self._intf.set_property(IAgAvtrFuelTankInternal._metadata, IAgAvtrFuelTankInternal._set_Name_metadata, newVal)

    _get_Capacity_metadata = { "name" : "Capacity",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def Capacity(self) -> float:
        """The capacity of the fuel tank."""
        return self._intf.get_property(IAgAvtrFuelTankInternal._metadata, IAgAvtrFuelTankInternal._get_Capacity_metadata)

    _set_Capacity_metadata = { "name" : "Capacity",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @Capacity.setter
    def Capacity(self, newVal:float) -> None:
        """The capacity of the fuel tank."""
        return self._intf.set_property(IAgAvtrFuelTankInternal._metadata, IAgAvtrFuelTankInternal._set_Capacity_metadata, newVal)

    _get_ConsumptionOrder_metadata = { "name" : "ConsumptionOrder",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.LONG_arg,) }
    @property
    def ConsumptionOrder(self) -> int:
        """The consumption order of the fuel tank."""
        return self._intf.get_property(IAgAvtrFuelTankInternal._metadata, IAgAvtrFuelTankInternal._get_ConsumptionOrder_metadata)

    _set_ConsumptionOrder_metadata = { "name" : "ConsumptionOrder",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.LONG_arg,) }
    @ConsumptionOrder.setter
    def ConsumptionOrder(self, newVal:int) -> None:
        """The consumption order of the fuel tank."""
        return self._intf.set_property(IAgAvtrFuelTankInternal._metadata, IAgAvtrFuelTankInternal._set_ConsumptionOrder_metadata, newVal)

    _get_InitialFuelState_metadata = { "name" : "InitialFuelState",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def InitialFuelState(self) -> float:
        """The initial fuel state of the fuel tank."""
        return self._intf.get_property(IAgAvtrFuelTankInternal._metadata, IAgAvtrFuelTankInternal._get_InitialFuelState_metadata)

    _set_InitialFuelState_metadata = { "name" : "InitialFuelState",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @InitialFuelState.setter
    def InitialFuelState(self, newVal:float) -> None:
        """The initial fuel state of the fuel tank."""
        return self._intf.set_property(IAgAvtrFuelTankInternal._metadata, IAgAvtrFuelTankInternal._set_InitialFuelState_metadata, newVal)

    _get_PositionX_metadata = { "name" : "PositionX",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def PositionX(self) -> float:
        """The X value of the fuel tank's parent relative position."""
        return self._intf.get_property(IAgAvtrFuelTankInternal._metadata, IAgAvtrFuelTankInternal._get_PositionX_metadata)

    _get_PositionY_metadata = { "name" : "PositionY",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def PositionY(self) -> float:
        """The Y value of the fuel tank's parent relative position."""
        return self._intf.get_property(IAgAvtrFuelTankInternal._metadata, IAgAvtrFuelTankInternal._get_PositionY_metadata)

    _get_PositionZ_metadata = { "name" : "PositionZ",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def PositionZ(self) -> float:
        """The Z value of the fuel tank's parent relative position."""
        return self._intf.get_property(IAgAvtrFuelTankInternal._metadata, IAgAvtrFuelTankInternal._get_PositionZ_metadata)

    _SetPosition_metadata = { "name" : "SetPosition",
            "arg_types" : (agcom.DOUBLE, agcom.DOUBLE, agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg,) }
    def SetPosition(self, x:float, y:float, z:float) -> None:
        """Set the fuel tank's parent relative position."""
        return self._intf.invoke(IAgAvtrFuelTankInternal._metadata, IAgAvtrFuelTankInternal._SetPosition_metadata, x, y, z)


agcls.AgClassCatalog.add_catalog_entry("{4cc46781-fe55-4b7e-9bd8-b4f174b208b2}", IAgAvtrFuelTankInternal)
agcls.AgTypeNameMap["IAgAvtrFuelTankInternal"] = IAgAvtrFuelTankInternal

class IAgAvtrFuelTankExternal(object):
    """Interface used to set an aircraft's external fuel tank."""
    _num_methods = 12
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{d4c0aa70-49ba-4343-907b-d7271a23a42f}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_Name" : 1,
                             "set_Name" : 2,
                             "get_EmptyWeight" : 3,
                             "set_EmptyWeight" : 4,
                             "get_Capacity" : 5,
                             "set_Capacity" : 6,
                             "get_InitialFuelState" : 7,
                             "set_InitialFuelState" : 8,
                             "get_ConsumptionOrder" : 9,
                             "set_ConsumptionOrder" : 10,
                             "get_DragIndex" : 11,
                             "set_DragIndex" : 12, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrFuelTankExternal._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrFuelTankExternal from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrFuelTankExternal.__dict__ and type(IAgAvtrFuelTankExternal.__dict__[attrname]) == property:
            return IAgAvtrFuelTankExternal.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrFuelTankExternal.")
    
    _get_Name_metadata = { "name" : "Name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def Name(self) -> str:
        """The name of the fuel tank."""
        return self._intf.get_property(IAgAvtrFuelTankExternal._metadata, IAgAvtrFuelTankExternal._get_Name_metadata)

    _set_Name_metadata = { "name" : "Name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @Name.setter
    def Name(self, newVal:str) -> None:
        """The name of the fuel tank."""
        return self._intf.set_property(IAgAvtrFuelTankExternal._metadata, IAgAvtrFuelTankExternal._set_Name_metadata, newVal)

    _get_EmptyWeight_metadata = { "name" : "EmptyWeight",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def EmptyWeight(self) -> float:
        """The empty weight of the fuel tank."""
        return self._intf.get_property(IAgAvtrFuelTankExternal._metadata, IAgAvtrFuelTankExternal._get_EmptyWeight_metadata)

    _set_EmptyWeight_metadata = { "name" : "EmptyWeight",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @EmptyWeight.setter
    def EmptyWeight(self, newVal:float) -> None:
        """The empty weight of the fuel tank."""
        return self._intf.set_property(IAgAvtrFuelTankExternal._metadata, IAgAvtrFuelTankExternal._set_EmptyWeight_metadata, newVal)

    _get_Capacity_metadata = { "name" : "Capacity",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def Capacity(self) -> float:
        """The capacity of the fuel tank."""
        return self._intf.get_property(IAgAvtrFuelTankExternal._metadata, IAgAvtrFuelTankExternal._get_Capacity_metadata)

    _set_Capacity_metadata = { "name" : "Capacity",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @Capacity.setter
    def Capacity(self, newVal:float) -> None:
        """The capacity of the fuel tank."""
        return self._intf.set_property(IAgAvtrFuelTankExternal._metadata, IAgAvtrFuelTankExternal._set_Capacity_metadata, newVal)

    _get_InitialFuelState_metadata = { "name" : "InitialFuelState",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def InitialFuelState(self) -> float:
        """The initial fuel state of the fuel tank."""
        return self._intf.get_property(IAgAvtrFuelTankExternal._metadata, IAgAvtrFuelTankExternal._get_InitialFuelState_metadata)

    _set_InitialFuelState_metadata = { "name" : "InitialFuelState",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @InitialFuelState.setter
    def InitialFuelState(self, newVal:float) -> None:
        """The initial fuel state of the fuel tank."""
        return self._intf.set_property(IAgAvtrFuelTankExternal._metadata, IAgAvtrFuelTankExternal._set_InitialFuelState_metadata, newVal)

    _get_ConsumptionOrder_metadata = { "name" : "ConsumptionOrder",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.LONG_arg,) }
    @property
    def ConsumptionOrder(self) -> int:
        """The consumption order of the fuel tank."""
        return self._intf.get_property(IAgAvtrFuelTankExternal._metadata, IAgAvtrFuelTankExternal._get_ConsumptionOrder_metadata)

    _set_ConsumptionOrder_metadata = { "name" : "ConsumptionOrder",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.LONG_arg,) }
    @ConsumptionOrder.setter
    def ConsumptionOrder(self, newVal:int) -> None:
        """The consumption order of the fuel tank."""
        return self._intf.set_property(IAgAvtrFuelTankExternal._metadata, IAgAvtrFuelTankExternal._set_ConsumptionOrder_metadata, newVal)

    _get_DragIndex_metadata = { "name" : "DragIndex",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def DragIndex(self) -> float:
        """The drag index of the fuel tank."""
        return self._intf.get_property(IAgAvtrFuelTankExternal._metadata, IAgAvtrFuelTankExternal._get_DragIndex_metadata)

    _set_DragIndex_metadata = { "name" : "DragIndex",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @DragIndex.setter
    def DragIndex(self, newVal:float) -> None:
        """The drag index of the fuel tank."""
        return self._intf.set_property(IAgAvtrFuelTankExternal._metadata, IAgAvtrFuelTankExternal._set_DragIndex_metadata, newVal)


agcls.AgClassCatalog.add_catalog_entry("{d4c0aa70-49ba-4343-907b-d7271a23a42f}", IAgAvtrFuelTankExternal)
agcls.AgTypeNameMap["IAgAvtrFuelTankExternal"] = IAgAvtrFuelTankExternal

class IAgAvtrPayloadStation(object):
    """Interface used to set an aircraft's payload station."""
    _num_methods = 9
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{d13cdb7b-4771-4ca1-954b-772a87f77ad2}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_Name" : 1,
                             "set_Name" : 2,
                             "get_PositionX" : 3,
                             "get_PositionY" : 4,
                             "get_PositionZ" : 5,
                             "SetPosition" : 6,
                             "RemoveSubItem" : 7,
                             "AddExternalFuelTank" : 8,
                             "GetExternalFuelTank" : 9, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrPayloadStation._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrPayloadStation from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrPayloadStation.__dict__ and type(IAgAvtrPayloadStation.__dict__[attrname]) == property:
            return IAgAvtrPayloadStation.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrPayloadStation.")
    
    _get_Name_metadata = { "name" : "Name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def Name(self) -> str:
        """The name of the payload station."""
        return self._intf.get_property(IAgAvtrPayloadStation._metadata, IAgAvtrPayloadStation._get_Name_metadata)

    _set_Name_metadata = { "name" : "Name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @Name.setter
    def Name(self, newVal:str) -> None:
        """The name of the payload station."""
        return self._intf.set_property(IAgAvtrPayloadStation._metadata, IAgAvtrPayloadStation._set_Name_metadata, newVal)

    _get_PositionX_metadata = { "name" : "PositionX",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def PositionX(self) -> float:
        """The X value of the payload station's parent relative position."""
        return self._intf.get_property(IAgAvtrPayloadStation._metadata, IAgAvtrPayloadStation._get_PositionX_metadata)

    _get_PositionY_metadata = { "name" : "PositionY",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def PositionY(self) -> float:
        """The Y value of the payload station's parent relative position."""
        return self._intf.get_property(IAgAvtrPayloadStation._metadata, IAgAvtrPayloadStation._get_PositionY_metadata)

    _get_PositionZ_metadata = { "name" : "PositionZ",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def PositionZ(self) -> float:
        """The Z value of the payload station's parent relative position."""
        return self._intf.get_property(IAgAvtrPayloadStation._metadata, IAgAvtrPayloadStation._get_PositionZ_metadata)

    _SetPosition_metadata = { "name" : "SetPosition",
            "arg_types" : (agcom.DOUBLE, agcom.DOUBLE, agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg,) }
    def SetPosition(self, x:float, y:float, z:float) -> None:
        """Set the payload station's parent relative position."""
        return self._intf.invoke(IAgAvtrPayloadStation._metadata, IAgAvtrPayloadStation._SetPosition_metadata, x, y, z)

    _RemoveSubItem_metadata = { "name" : "RemoveSubItem",
            "arg_types" : (),
            "marshallers" : () }
    def RemoveSubItem(self) -> None:
        """Remove any sub item that may be attached to the payload station."""
        return self._intf.invoke(IAgAvtrPayloadStation._metadata, IAgAvtrPayloadStation._RemoveSubItem_metadata, )

    _AddExternalFuelTank_metadata = { "name" : "AddExternalFuelTank",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    def AddExternalFuelTank(self) -> "IAgAvtrFuelTankExternal":
        """Add an external fuel tank to the payload station."""
        return self._intf.invoke(IAgAvtrPayloadStation._metadata, IAgAvtrPayloadStation._AddExternalFuelTank_metadata, out_arg())

    _GetExternalFuelTank_metadata = { "name" : "GetExternalFuelTank",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    def GetExternalFuelTank(self) -> "IAgAvtrFuelTankExternal":
        """Get the external fuel tank attached to the payload station."""
        return self._intf.invoke(IAgAvtrPayloadStation._metadata, IAgAvtrPayloadStation._GetExternalFuelTank_metadata, out_arg())


agcls.AgClassCatalog.add_catalog_entry("{d13cdb7b-4771-4ca1-954b-772a87f77ad2}", IAgAvtrPayloadStation)
agcls.AgTypeNameMap["IAgAvtrPayloadStation"] = IAgAvtrPayloadStation

class IAgAvtrAircraft(object):
    """Interface used to access the aircraft options in the Aviator catalog."""
    _num_methods = 12
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{42c19506-e18d-4500-bc0e-c5db5dad14a1}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_PerfModelTypes" : 1,
                             "get_Acceleration" : 2,
                             "get_Climb" : 3,
                             "get_Cruise" : 4,
                             "get_Descent" : 5,
                             "get_Landing" : 6,
                             "get_Takeoff" : 7,
                             "get_DefaultConfiguration" : 8,
                             "get_AdvFixedWingTool" : 9,
                             "GetAsCatalogItem" : 10,
                             "get_VTOL" : 11,
                             "get_TerrainFollow" : 12, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrAircraft._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrAircraft from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrAircraft.__dict__ and type(IAgAvtrAircraft.__dict__[attrname]) == property:
            return IAgAvtrAircraft.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrAircraft.")
    
    _get_PerfModelTypes_metadata = { "name" : "PerfModelTypes",
            "arg_types" : (POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg,) }
    @property
    def PerfModelTypes(self) -> list:
        """Get the types of performance models."""
        return self._intf.get_property(IAgAvtrAircraft._metadata, IAgAvtrAircraft._get_PerfModelTypes_metadata)

    _get_Acceleration_metadata = { "name" : "Acceleration",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def Acceleration(self) -> "IAgAvtrAircraftAcceleration":
        """Get the acceleration interface."""
        return self._intf.get_property(IAgAvtrAircraft._metadata, IAgAvtrAircraft._get_Acceleration_metadata)

    _get_Climb_metadata = { "name" : "Climb",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def Climb(self) -> "IAgAvtrAircraftClimb":
        """Get the climb interface."""
        return self._intf.get_property(IAgAvtrAircraft._metadata, IAgAvtrAircraft._get_Climb_metadata)

    _get_Cruise_metadata = { "name" : "Cruise",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def Cruise(self) -> "IAgAvtrAircraftCruise":
        """Get the cruise interface."""
        return self._intf.get_property(IAgAvtrAircraft._metadata, IAgAvtrAircraft._get_Cruise_metadata)

    _get_Descent_metadata = { "name" : "Descent",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def Descent(self) -> "IAgAvtrAircraftDescent":
        """Get the descent interface."""
        return self._intf.get_property(IAgAvtrAircraft._metadata, IAgAvtrAircraft._get_Descent_metadata)

    _get_Landing_metadata = { "name" : "Landing",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def Landing(self) -> "IAgAvtrAircraftLanding":
        """Get the landing interface."""
        return self._intf.get_property(IAgAvtrAircraft._metadata, IAgAvtrAircraft._get_Landing_metadata)

    _get_Takeoff_metadata = { "name" : "Takeoff",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def Takeoff(self) -> "IAgAvtrAircraftTakeoff":
        """Get the takeoff interface."""
        return self._intf.get_property(IAgAvtrAircraft._metadata, IAgAvtrAircraft._get_Takeoff_metadata)

    _get_DefaultConfiguration_metadata = { "name" : "DefaultConfiguration",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def DefaultConfiguration(self) -> "IAgAvtrConfiguration":
        """The aircraft's default configuration as saved in the catalog."""
        return self._intf.get_property(IAgAvtrAircraft._metadata, IAgAvtrAircraft._get_DefaultConfiguration_metadata)

    _get_AdvFixedWingTool_metadata = { "name" : "AdvFixedWingTool",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def AdvFixedWingTool(self) -> "IAgAvtrAdvFixedWingTool":
        """Get the Advanced Fixed Wing Tool for the aircraft."""
        return self._intf.get_property(IAgAvtrAircraft._metadata, IAgAvtrAircraft._get_AdvFixedWingTool_metadata)

    _GetAsCatalogItem_metadata = { "name" : "GetAsCatalogItem",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    def GetAsCatalogItem(self) -> "IAgAvtrCatalogItem":
        """Get the catalog item interface for this object."""
        return self._intf.invoke(IAgAvtrAircraft._metadata, IAgAvtrAircraft._GetAsCatalogItem_metadata, out_arg())

    _get_VTOL_metadata = { "name" : "VTOL",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def VTOL(self) -> "IAgAvtrAircraftVTOL":
        """Get the VTOL interface."""
        return self._intf.get_property(IAgAvtrAircraft._metadata, IAgAvtrAircraft._get_VTOL_metadata)

    _get_TerrainFollow_metadata = { "name" : "TerrainFollow",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def TerrainFollow(self) -> "IAgAvtrAircraftTerrainFollow":
        """Get the TerrainFollow interface."""
        return self._intf.get_property(IAgAvtrAircraft._metadata, IAgAvtrAircraft._get_TerrainFollow_metadata)


agcls.AgClassCatalog.add_catalog_entry("{42c19506-e18d-4500-bc0e-c5db5dad14a1}", IAgAvtrAircraft)
agcls.AgTypeNameMap["IAgAvtrAircraft"] = IAgAvtrAircraft

class IAgAvtrAircraftSimpleAero(object):
    """Interface used to access the Simple Aerodynamics options for the Basic Acceleration Model of an aircraft."""
    _num_methods = 8
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{b3a9d57b-8ebb-428c-b36a-b4c701931cc1}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_OperatingMode" : 1,
                             "set_OperatingMode" : 2,
                             "get_SRef" : 3,
                             "set_SRef" : 4,
                             "get_ClMax" : 5,
                             "set_ClMax" : 6,
                             "get_Cd" : 7,
                             "set_Cd" : 8, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrAircraftSimpleAero._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrAircraftSimpleAero from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrAircraftSimpleAero.__dict__ and type(IAgAvtrAircraftSimpleAero.__dict__[attrname]) == property:
            return IAgAvtrAircraftSimpleAero.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrAircraftSimpleAero.")
    
    _get_OperatingMode_metadata = { "name" : "OperatingMode",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrAeroPropSimpleMode),) }
    @property
    def OperatingMode(self) -> "AgEAvtrAeroPropSimpleMode":
        """The mode option to treat the aircraft as a helicopter or a fixed wing aircraft when calculating the aircraft's attitude."""
        return self._intf.get_property(IAgAvtrAircraftSimpleAero._metadata, IAgAvtrAircraftSimpleAero._get_OperatingMode_metadata)

    _set_OperatingMode_metadata = { "name" : "OperatingMode",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrAeroPropSimpleMode),) }
    @OperatingMode.setter
    def OperatingMode(self, newVal:"AgEAvtrAeroPropSimpleMode") -> None:
        """The mode option to treat the aircraft as a helicopter or a fixed wing aircraft when calculating the aircraft's attitude."""
        return self._intf.set_property(IAgAvtrAircraftSimpleAero._metadata, IAgAvtrAircraftSimpleAero._set_OperatingMode_metadata, newVal)

    _get_SRef_metadata = { "name" : "SRef",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def SRef(self) -> float:
        """The reference surface area of the aircraft."""
        return self._intf.get_property(IAgAvtrAircraftSimpleAero._metadata, IAgAvtrAircraftSimpleAero._get_SRef_metadata)

    _set_SRef_metadata = { "name" : "SRef",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @SRef.setter
    def SRef(self, newVal:float) -> None:
        """The reference surface area of the aircraft."""
        return self._intf.set_property(IAgAvtrAircraftSimpleAero._metadata, IAgAvtrAircraftSimpleAero._set_SRef_metadata, newVal)

    _get_ClMax_metadata = { "name" : "ClMax",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def ClMax(self) -> float:
        """The max coefficient of lift."""
        return self._intf.get_property(IAgAvtrAircraftSimpleAero._metadata, IAgAvtrAircraftSimpleAero._get_ClMax_metadata)

    _set_ClMax_metadata = { "name" : "ClMax",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @ClMax.setter
    def ClMax(self, newVal:float) -> None:
        """The max coefficient of lift."""
        return self._intf.set_property(IAgAvtrAircraftSimpleAero._metadata, IAgAvtrAircraftSimpleAero._set_ClMax_metadata, newVal)

    _get_Cd_metadata = { "name" : "Cd",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def Cd(self) -> float:
        """The coefficient of drag."""
        return self._intf.get_property(IAgAvtrAircraftSimpleAero._metadata, IAgAvtrAircraftSimpleAero._get_Cd_metadata)

    _set_Cd_metadata = { "name" : "Cd",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @Cd.setter
    def Cd(self, newVal:float) -> None:
        """The coefficient of drag."""
        return self._intf.set_property(IAgAvtrAircraftSimpleAero._metadata, IAgAvtrAircraftSimpleAero._set_Cd_metadata, newVal)


agcls.AgClassCatalog.add_catalog_entry("{b3a9d57b-8ebb-428c-b36a-b4c701931cc1}", IAgAvtrAircraftSimpleAero)
agcls.AgTypeNameMap["IAgAvtrAircraftSimpleAero"] = IAgAvtrAircraftSimpleAero

class IAgAvtrLevelTurns(object):
    """Interface used to access the Level Turns Transitions options found in the Basic Acceleration Model of an aircraft."""
    _num_methods = 10
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{5c45254a-230f-4f6d-adb9-d33c0a1bf06c}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_TurnMode" : 1,
                             "get_TurnG" : 2,
                             "get_BankAngle" : 3,
                             "get_TurnAcceleration" : 4,
                             "get_TurnRadius" : 5,
                             "get_TurnRate" : 6,
                             "SetLevelTurn" : 7,
                             "get_ManeuverMode" : 8,
                             "set_ManeuverMode" : 9,
                             "get_ManeuverModeHelper" : 10, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrLevelTurns._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrLevelTurns from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrLevelTurns.__dict__ and type(IAgAvtrLevelTurns.__dict__[attrname]) == property:
            return IAgAvtrLevelTurns.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrLevelTurns.")
    
    _get_TurnMode_metadata = { "name" : "TurnMode",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrTurnMode),) }
    @property
    def TurnMode(self) -> "AgEAvtrTurnMode":
        """Get the turn mode."""
        return self._intf.get_property(IAgAvtrLevelTurns._metadata, IAgAvtrLevelTurns._get_TurnMode_metadata)

    _get_TurnG_metadata = { "name" : "TurnG",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def TurnG(self) -> float:
        """Get the TurnG."""
        return self._intf.get_property(IAgAvtrLevelTurns._metadata, IAgAvtrLevelTurns._get_TurnG_metadata)

    _get_BankAngle_metadata = { "name" : "BankAngle",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def BankAngle(self) -> typing.Any:
        """Get the bank angle."""
        return self._intf.get_property(IAgAvtrLevelTurns._metadata, IAgAvtrLevelTurns._get_BankAngle_metadata)

    _get_TurnAcceleration_metadata = { "name" : "TurnAcceleration",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def TurnAcceleration(self) -> float:
        """Get the turn acceleration."""
        return self._intf.get_property(IAgAvtrLevelTurns._metadata, IAgAvtrLevelTurns._get_TurnAcceleration_metadata)

    _get_TurnRadius_metadata = { "name" : "TurnRadius",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def TurnRadius(self) -> float:
        """Get the turn radius."""
        return self._intf.get_property(IAgAvtrLevelTurns._metadata, IAgAvtrLevelTurns._get_TurnRadius_metadata)

    _get_TurnRate_metadata = { "name" : "TurnRate",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def TurnRate(self) -> float:
        """get the turn rate."""
        return self._intf.get_property(IAgAvtrLevelTurns._metadata, IAgAvtrLevelTurns._get_TurnRate_metadata)

    _SetLevelTurn_metadata = { "name" : "SetLevelTurn",
            "arg_types" : (agcom.LONG, agcom.VARIANT,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrTurnMode), agmarshall.VARIANT_arg,) }
    def SetLevelTurn(self, turnMode:"AgEAvtrTurnMode", turnValue:typing.Any) -> None:
        """Set the level turn mode and corresponding value."""
        return self._intf.invoke(IAgAvtrLevelTurns._metadata, IAgAvtrLevelTurns._SetLevelTurn_metadata, turnMode, turnValue)

    _get_ManeuverMode_metadata = { "name" : "ManeuverMode",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrAccelManeuverMode),) }
    @property
    def ManeuverMode(self) -> "AgEAvtrAccelManeuverMode":
        """The mode that the aircraft will adhere to the specified acceleration parameters. Scale by atmospheric density will cause the aircraft to consider dynamic pressure when calculating turn radius."""
        return self._intf.get_property(IAgAvtrLevelTurns._metadata, IAgAvtrLevelTurns._get_ManeuverMode_metadata)

    _set_ManeuverMode_metadata = { "name" : "ManeuverMode",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrAccelManeuverMode),) }
    @ManeuverMode.setter
    def ManeuverMode(self, newVal:"AgEAvtrAccelManeuverMode") -> None:
        """The mode that the aircraft will adhere to the specified acceleration parameters. Scale by atmospheric density will cause the aircraft to consider dynamic pressure when calculating turn radius."""
        return self._intf.set_property(IAgAvtrLevelTurns._metadata, IAgAvtrLevelTurns._set_ManeuverMode_metadata, newVal)

    _get_ManeuverModeHelper_metadata = { "name" : "ManeuverModeHelper",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def ManeuverModeHelper(self) -> "IAgAvtrAeroPropManeuverModeHelper":
        """Get the interface for the Aero/Prop Maneuver Mode helper. The maneuver mode must be set to Aero/Prop to access this interface."""
        return self._intf.get_property(IAgAvtrLevelTurns._metadata, IAgAvtrLevelTurns._get_ManeuverModeHelper_metadata)


agcls.AgClassCatalog.add_catalog_entry("{5c45254a-230f-4f6d-adb9-d33c0a1bf06c}", IAgAvtrLevelTurns)
agcls.AgTypeNameMap["IAgAvtrLevelTurns"] = IAgAvtrLevelTurns

class IAgAvtrAttitudeTransitions(object):
    """Interface used to access the Attitude Transitions options found in the Basic Acceleration Model of an aircraft."""
    _num_methods = 6
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{3dd0e618-20a7-42be-b04d-63472b068f36}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_RollRate" : 1,
                             "set_RollRate" : 2,
                             "get_PitchRate" : 3,
                             "set_PitchRate" : 4,
                             "get_YawRate" : 5,
                             "set_YawRate" : 6, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrAttitudeTransitions._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrAttitudeTransitions from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrAttitudeTransitions.__dict__ and type(IAgAvtrAttitudeTransitions.__dict__[attrname]) == property:
            return IAgAvtrAttitudeTransitions.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrAttitudeTransitions.")
    
    _get_RollRate_metadata = { "name" : "RollRate",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def RollRate(self) -> typing.Any:
        """The roll rate when the aircraft in a turn."""
        return self._intf.get_property(IAgAvtrAttitudeTransitions._metadata, IAgAvtrAttitudeTransitions._get_RollRate_metadata)

    _set_RollRate_metadata = { "name" : "RollRate",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @RollRate.setter
    def RollRate(self, newVal:typing.Any) -> None:
        """The roll rate when the aircraft in a turn."""
        return self._intf.set_property(IAgAvtrAttitudeTransitions._metadata, IAgAvtrAttitudeTransitions._set_RollRate_metadata, newVal)

    _get_PitchRate_metadata = { "name" : "PitchRate",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def PitchRate(self) -> typing.Any:
        """The pitch rate when transitioning between attitude modes."""
        return self._intf.get_property(IAgAvtrAttitudeTransitions._metadata, IAgAvtrAttitudeTransitions._get_PitchRate_metadata)

    _set_PitchRate_metadata = { "name" : "PitchRate",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @PitchRate.setter
    def PitchRate(self, newVal:typing.Any) -> None:
        """The pitch rate when transitioning between attitude modes."""
        return self._intf.set_property(IAgAvtrAttitudeTransitions._metadata, IAgAvtrAttitudeTransitions._set_PitchRate_metadata, newVal)

    _get_YawRate_metadata = { "name" : "YawRate",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def YawRate(self) -> typing.Any:
        """The yaw rate when transitioning between attitude modes."""
        return self._intf.get_property(IAgAvtrAttitudeTransitions._metadata, IAgAvtrAttitudeTransitions._get_YawRate_metadata)

    _set_YawRate_metadata = { "name" : "YawRate",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @YawRate.setter
    def YawRate(self, newVal:typing.Any) -> None:
        """The yaw rate when transitioning between attitude modes."""
        return self._intf.set_property(IAgAvtrAttitudeTransitions._metadata, IAgAvtrAttitudeTransitions._set_YawRate_metadata, newVal)


agcls.AgClassCatalog.add_catalog_entry("{3dd0e618-20a7-42be-b04d-63472b068f36}", IAgAvtrAttitudeTransitions)
agcls.AgTypeNameMap["IAgAvtrAttitudeTransitions"] = IAgAvtrAttitudeTransitions

class IAgAvtrClimbAndDescentTransitions(object):
    """Interface used to access the Climb and Descent Transitions options found in the Basic Acceleration Model of an aircraft."""
    _num_methods = 9
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{8733914e-9bc9-4270-ab39-0b32af9ca84e}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_MaxPullUpG" : 1,
                             "set_MaxPullUpG" : 2,
                             "get_MaxPushOverG" : 3,
                             "set_MaxPushOverG" : 4,
                             "get_ManeuverMode" : 5,
                             "set_ManeuverMode" : 6,
                             "get_IgnoreFPA" : 7,
                             "set_IgnoreFPA" : 8,
                             "get_ManeuverModeHelper" : 9, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrClimbAndDescentTransitions._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrClimbAndDescentTransitions from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrClimbAndDescentTransitions.__dict__ and type(IAgAvtrClimbAndDescentTransitions.__dict__[attrname]) == property:
            return IAgAvtrClimbAndDescentTransitions.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrClimbAndDescentTransitions.")
    
    _get_MaxPullUpG_metadata = { "name" : "MaxPullUpG",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def MaxPullUpG(self) -> float:
        """The force normal to the velocity vector used to transition into a climb or to a transition out of a dive into the next flight segment."""
        return self._intf.get_property(IAgAvtrClimbAndDescentTransitions._metadata, IAgAvtrClimbAndDescentTransitions._get_MaxPullUpG_metadata)

    _set_MaxPullUpG_metadata = { "name" : "MaxPullUpG",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @MaxPullUpG.setter
    def MaxPullUpG(self, newVal:float) -> None:
        """The force normal to the velocity vector used to transition into a climb or to a transition out of a dive into the next flight segment."""
        return self._intf.set_property(IAgAvtrClimbAndDescentTransitions._metadata, IAgAvtrClimbAndDescentTransitions._set_MaxPullUpG_metadata, newVal)

    _get_MaxPushOverG_metadata = { "name" : "MaxPushOverG",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def MaxPushOverG(self) -> float:
        """The force normal to the velocity vector used to transition into a descent or to a transition from a climb into the next flight segment."""
        return self._intf.get_property(IAgAvtrClimbAndDescentTransitions._metadata, IAgAvtrClimbAndDescentTransitions._get_MaxPushOverG_metadata)

    _set_MaxPushOverG_metadata = { "name" : "MaxPushOverG",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @MaxPushOverG.setter
    def MaxPushOverG(self, newVal:float) -> None:
        """The force normal to the velocity vector used to transition into a descent or to a transition from a climb into the next flight segment."""
        return self._intf.set_property(IAgAvtrClimbAndDescentTransitions._metadata, IAgAvtrClimbAndDescentTransitions._set_MaxPushOverG_metadata, newVal)

    _get_ManeuverMode_metadata = { "name" : "ManeuverMode",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrAccelManeuverMode),) }
    @property
    def ManeuverMode(self) -> "AgEAvtrAccelManeuverMode":
        """The mode that the aircraft will adhere to the specified acceleration parameters. Scale by atmospheric density will cause the aircraft to consider dynamic pressure when calculating turn radius."""
        return self._intf.get_property(IAgAvtrClimbAndDescentTransitions._metadata, IAgAvtrClimbAndDescentTransitions._get_ManeuverMode_metadata)

    _set_ManeuverMode_metadata = { "name" : "ManeuverMode",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrAccelManeuverMode),) }
    @ManeuverMode.setter
    def ManeuverMode(self, newVal:"AgEAvtrAccelManeuverMode") -> None:
        """The mode that the aircraft will adhere to the specified acceleration parameters. Scale by atmospheric density will cause the aircraft to consider dynamic pressure when calculating turn radius."""
        return self._intf.set_property(IAgAvtrClimbAndDescentTransitions._metadata, IAgAvtrClimbAndDescentTransitions._set_ManeuverMode_metadata, newVal)

    _get_IgnoreFPA_metadata = { "name" : "IgnoreFPA",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def IgnoreFPA(self) -> bool:
        """Opt whether to ignore the flight path angle."""
        return self._intf.get_property(IAgAvtrClimbAndDescentTransitions._metadata, IAgAvtrClimbAndDescentTransitions._get_IgnoreFPA_metadata)

    _set_IgnoreFPA_metadata = { "name" : "IgnoreFPA",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @IgnoreFPA.setter
    def IgnoreFPA(self, newVal:bool) -> None:
        """Opt whether to ignore the flight path angle."""
        return self._intf.set_property(IAgAvtrClimbAndDescentTransitions._metadata, IAgAvtrClimbAndDescentTransitions._set_IgnoreFPA_metadata, newVal)

    _get_ManeuverModeHelper_metadata = { "name" : "ManeuverModeHelper",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def ManeuverModeHelper(self) -> "IAgAvtrAeroPropManeuverModeHelper":
        """Get the interface for the Aero/Prop Maneuver Mode helper. The maneuver mode must be set to Aero/Prop to access this interface."""
        return self._intf.get_property(IAgAvtrClimbAndDescentTransitions._metadata, IAgAvtrClimbAndDescentTransitions._get_ManeuverModeHelper_metadata)


agcls.AgClassCatalog.add_catalog_entry("{8733914e-9bc9-4270-ab39-0b32af9ca84e}", IAgAvtrClimbAndDescentTransitions)
agcls.AgTypeNameMap["IAgAvtrClimbAndDescentTransitions"] = IAgAvtrClimbAndDescentTransitions

class IAgAvtrCatalogItem(object):
    """Interface used to access the options for a Catalog Item in the Aviator Catalog. Use this interface to Create, Remove, Duplicate, or Rename items in the catalog."""
    _num_methods = 13
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{97dd0fde-8548-4bbf-b2c5-909c6013b32d}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_Name" : 1,
                             "set_Name" : 2,
                             "get_Description" : 3,
                             "Duplicate" : 4,
                             "Remove" : 5,
                             "Save" : 6,
                             "get_IsReadOnly" : 7,
                             "get_ChildNames" : 8,
                             "GetChildItemByName" : 9,
                             "get_ChildTypes" : 10,
                             "AddDefaultChild" : 11,
                             "AddChildOfType" : 12,
                             "ContainsChildItem" : 13, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrCatalogItem._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrCatalogItem from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrCatalogItem.__dict__ and type(IAgAvtrCatalogItem.__dict__[attrname]) == property:
            return IAgAvtrCatalogItem.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrCatalogItem.")
    
    _get_Name_metadata = { "name" : "Name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def Name(self) -> str:
        """Get the name of the catalog item."""
        return self._intf.get_property(IAgAvtrCatalogItem._metadata, IAgAvtrCatalogItem._get_Name_metadata)

    _set_Name_metadata = { "name" : "Name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @Name.setter
    def Name(self, pVal:str) -> None:
        """Get the name of the catalog item."""
        return self._intf.set_property(IAgAvtrCatalogItem._metadata, IAgAvtrCatalogItem._set_Name_metadata, pVal)

    _get_Description_metadata = { "name" : "Description",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def Description(self) -> str:
        """Get the description of the catalog item."""
        return self._intf.get_property(IAgAvtrCatalogItem._metadata, IAgAvtrCatalogItem._get_Description_metadata)

    _Duplicate_metadata = { "name" : "Duplicate",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    def Duplicate(self) -> "IAgAvtrCatalogItem":
        """Duplicates the catalog item."""
        return self._intf.invoke(IAgAvtrCatalogItem._metadata, IAgAvtrCatalogItem._Duplicate_metadata, out_arg())

    _Remove_metadata = { "name" : "Remove",
            "arg_types" : (),
            "marshallers" : () }
    def Remove(self) -> None:
        """Removes the catalog item."""
        return self._intf.invoke(IAgAvtrCatalogItem._metadata, IAgAvtrCatalogItem._Remove_metadata, )

    _Save_metadata = { "name" : "Save",
            "arg_types" : (),
            "marshallers" : () }
    def Save(self) -> None:
        """Saves the catalog item."""
        return self._intf.invoke(IAgAvtrCatalogItem._metadata, IAgAvtrCatalogItem._Save_metadata, )

    _get_IsReadOnly_metadata = { "name" : "IsReadOnly",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def IsReadOnly(self) -> bool:
        """Get whether the catalog item is read only."""
        return self._intf.get_property(IAgAvtrCatalogItem._metadata, IAgAvtrCatalogItem._get_IsReadOnly_metadata)

    _get_ChildNames_metadata = { "name" : "ChildNames",
            "arg_types" : (POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg,) }
    @property
    def ChildNames(self) -> list:
        """Get the child names of the catalog item."""
        return self._intf.get_property(IAgAvtrCatalogItem._metadata, IAgAvtrCatalogItem._get_ChildNames_metadata)

    _GetChildItemByName_metadata = { "name" : "GetChildItemByName",
            "arg_types" : (agcom.BSTR, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.AgInterface_out_arg,) }
    def GetChildItemByName(self, childName:str) -> "IAgAvtrCatalogItem":
        """Get the child of the catalog item with the given name."""
        return self._intf.invoke(IAgAvtrCatalogItem._metadata, IAgAvtrCatalogItem._GetChildItemByName_metadata, childName, out_arg())

    _get_ChildTypes_metadata = { "name" : "ChildTypes",
            "arg_types" : (POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg,) }
    @property
    def ChildTypes(self) -> list:
        """Get the child types."""
        return self._intf.get_property(IAgAvtrCatalogItem._metadata, IAgAvtrCatalogItem._get_ChildTypes_metadata)

    _AddDefaultChild_metadata = { "name" : "AddDefaultChild",
            "arg_types" : (agcom.BSTR, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.AgInterface_out_arg,) }
    def AddDefaultChild(self, childName:str) -> "IAgAvtrCatalogItem":
        """Creates a new child with the given name and default type."""
        return self._intf.invoke(IAgAvtrCatalogItem._metadata, IAgAvtrCatalogItem._AddDefaultChild_metadata, childName, out_arg())

    _AddChildOfType_metadata = { "name" : "AddChildOfType",
            "arg_types" : (agcom.BSTR, agcom.BSTR, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.BSTR_arg, agmarshall.AgInterface_out_arg,) }
    def AddChildOfType(self, childType:str, childName:str) -> "IAgAvtrCatalogItem":
        """Creates a new child with the given name and specified type."""
        return self._intf.invoke(IAgAvtrCatalogItem._metadata, IAgAvtrCatalogItem._AddChildOfType_metadata, childType, childName, out_arg())

    _ContainsChildItem_metadata = { "name" : "ContainsChildItem",
            "arg_types" : (agcom.BSTR, POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.VARIANT_BOOL_arg,) }
    def ContainsChildItem(self, childItem:str) -> bool:
        """Get whether the catalog item is contains the given child item."""
        return self._intf.invoke(IAgAvtrCatalogItem._metadata, IAgAvtrCatalogItem._ContainsChildItem_metadata, childItem, out_arg())


agcls.AgClassCatalog.add_catalog_entry("{97dd0fde-8548-4bbf-b2c5-909c6013b32d}", IAgAvtrCatalogItem)
agcls.AgTypeNameMap["IAgAvtrCatalogItem"] = IAgAvtrCatalogItem

class IAgAvtrAircraftBasicClimbModel(object):
    """Interface used to access the basic climb model options for a climb model of an aircraft in the Aviator catalog."""
    _num_methods = 18
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{db58182c-ba76-44ea-be78-5c529aea4de7}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_CeilingAltitude" : 1,
                             "set_CeilingAltitude" : 2,
                             "get_Airspeed" : 3,
                             "get_AirspeedType" : 4,
                             "SetAirspeed" : 5,
                             "get_AltitudeRate" : 6,
                             "set_AltitudeRate" : 7,
                             "get_UseAeroPropFuel" : 8,
                             "set_UseAeroPropFuel" : 9,
                             "get_ScaleFuelFlowByNonStdDensity" : 10,
                             "set_ScaleFuelFlowByNonStdDensity" : 11,
                             "get_FuelFlow" : 12,
                             "set_FuelFlow" : 13,
                             "get_EnableRelativeAirspeedTolerance" : 14,
                             "set_EnableRelativeAirspeedTolerance" : 15,
                             "get_RelativeAirspeedTolerance" : 16,
                             "set_RelativeAirspeedTolerance" : 17,
                             "GetAsCatalogItem" : 18, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrAircraftBasicClimbModel._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrAircraftBasicClimbModel from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrAircraftBasicClimbModel.__dict__ and type(IAgAvtrAircraftBasicClimbModel.__dict__[attrname]) == property:
            return IAgAvtrAircraftBasicClimbModel.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrAircraftBasicClimbModel.")
    
    _get_CeilingAltitude_metadata = { "name" : "CeilingAltitude",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def CeilingAltitude(self) -> float:
        """Get the ceiling altitude."""
        return self._intf.get_property(IAgAvtrAircraftBasicClimbModel._metadata, IAgAvtrAircraftBasicClimbModel._get_CeilingAltitude_metadata)

    _set_CeilingAltitude_metadata = { "name" : "CeilingAltitude",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @CeilingAltitude.setter
    def CeilingAltitude(self, newVal:float) -> None:
        """Put the ceiling altitude."""
        return self._intf.set_property(IAgAvtrAircraftBasicClimbModel._metadata, IAgAvtrAircraftBasicClimbModel._set_CeilingAltitude_metadata, newVal)

    _get_Airspeed_metadata = { "name" : "Airspeed",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def Airspeed(self) -> float:
        """Get the airsepeed."""
        return self._intf.get_property(IAgAvtrAircraftBasicClimbModel._metadata, IAgAvtrAircraftBasicClimbModel._get_Airspeed_metadata)

    _get_AirspeedType_metadata = { "name" : "AirspeedType",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrAirspeedType),) }
    @property
    def AirspeedType(self) -> "AgEAvtrAirspeedType":
        """Get the airspeed type."""
        return self._intf.get_property(IAgAvtrAircraftBasicClimbModel._metadata, IAgAvtrAircraftBasicClimbModel._get_AirspeedType_metadata)

    _SetAirspeed_metadata = { "name" : "SetAirspeed",
            "arg_types" : (agcom.LONG, agcom.DOUBLE,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrAirspeedType), agmarshall.DOUBLE_arg,) }
    def SetAirspeed(self, airspeedType:"AgEAvtrAirspeedType", aispeed:float) -> None:
        """Set the airspeed type and value."""
        return self._intf.invoke(IAgAvtrAircraftBasicClimbModel._metadata, IAgAvtrAircraftBasicClimbModel._SetAirspeed_metadata, airspeedType, aispeed)

    _get_AltitudeRate_metadata = { "name" : "AltitudeRate",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def AltitudeRate(self) -> float:
        """Get the altitude rate."""
        return self._intf.get_property(IAgAvtrAircraftBasicClimbModel._metadata, IAgAvtrAircraftBasicClimbModel._get_AltitudeRate_metadata)

    _set_AltitudeRate_metadata = { "name" : "AltitudeRate",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @AltitudeRate.setter
    def AltitudeRate(self, newVal:float) -> None:
        """Put the altitude rate."""
        return self._intf.set_property(IAgAvtrAircraftBasicClimbModel._metadata, IAgAvtrAircraftBasicClimbModel._set_AltitudeRate_metadata, newVal)

    _get_UseAeroPropFuel_metadata = { "name" : "UseAeroPropFuel",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def UseAeroPropFuel(self) -> bool:
        """Get whether to use Aero/Propulsion fuel flow."""
        return self._intf.get_property(IAgAvtrAircraftBasicClimbModel._metadata, IAgAvtrAircraftBasicClimbModel._get_UseAeroPropFuel_metadata)

    _set_UseAeroPropFuel_metadata = { "name" : "UseAeroPropFuel",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @UseAeroPropFuel.setter
    def UseAeroPropFuel(self, newVal:bool) -> None:
        """Put whether to use Aero/Propulsion fuel flow."""
        return self._intf.set_property(IAgAvtrAircraftBasicClimbModel._metadata, IAgAvtrAircraftBasicClimbModel._set_UseAeroPropFuel_metadata, newVal)

    _get_ScaleFuelFlowByNonStdDensity_metadata = { "name" : "ScaleFuelFlowByNonStdDensity",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def ScaleFuelFlowByNonStdDensity(self) -> bool:
        """Get whether to scale fuel flow by non std density."""
        return self._intf.get_property(IAgAvtrAircraftBasicClimbModel._metadata, IAgAvtrAircraftBasicClimbModel._get_ScaleFuelFlowByNonStdDensity_metadata)

    _set_ScaleFuelFlowByNonStdDensity_metadata = { "name" : "ScaleFuelFlowByNonStdDensity",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @ScaleFuelFlowByNonStdDensity.setter
    def ScaleFuelFlowByNonStdDensity(self, newVal:bool) -> None:
        """Put whether to scale fuel flow by non std density."""
        return self._intf.set_property(IAgAvtrAircraftBasicClimbModel._metadata, IAgAvtrAircraftBasicClimbModel._set_ScaleFuelFlowByNonStdDensity_metadata, newVal)

    _get_FuelFlow_metadata = { "name" : "FuelFlow",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def FuelFlow(self) -> float:
        """Get the Sea Level Fuel Flow."""
        return self._intf.get_property(IAgAvtrAircraftBasicClimbModel._metadata, IAgAvtrAircraftBasicClimbModel._get_FuelFlow_metadata)

    _set_FuelFlow_metadata = { "name" : "FuelFlow",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @FuelFlow.setter
    def FuelFlow(self, newVal:float) -> None:
        """Put the Sea Level Fuel Flow."""
        return self._intf.set_property(IAgAvtrAircraftBasicClimbModel._metadata, IAgAvtrAircraftBasicClimbModel._set_FuelFlow_metadata, newVal)

    _get_EnableRelativeAirspeedTolerance_metadata = { "name" : "EnableRelativeAirspeedTolerance",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def EnableRelativeAirspeedTolerance(self) -> bool:
        """Get whether to enable relative airspeed tolerance."""
        return self._intf.get_property(IAgAvtrAircraftBasicClimbModel._metadata, IAgAvtrAircraftBasicClimbModel._get_EnableRelativeAirspeedTolerance_metadata)

    _set_EnableRelativeAirspeedTolerance_metadata = { "name" : "EnableRelativeAirspeedTolerance",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @EnableRelativeAirspeedTolerance.setter
    def EnableRelativeAirspeedTolerance(self, newVal:bool) -> None:
        """Put whether to enable relative airspeed tolerance."""
        return self._intf.set_property(IAgAvtrAircraftBasicClimbModel._metadata, IAgAvtrAircraftBasicClimbModel._set_EnableRelativeAirspeedTolerance_metadata, newVal)

    _get_RelativeAirspeedTolerance_metadata = { "name" : "RelativeAirspeedTolerance",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def RelativeAirspeedTolerance(self) -> float:
        """Get the relative airspeed tolerance."""
        return self._intf.get_property(IAgAvtrAircraftBasicClimbModel._metadata, IAgAvtrAircraftBasicClimbModel._get_RelativeAirspeedTolerance_metadata)

    _set_RelativeAirspeedTolerance_metadata = { "name" : "RelativeAirspeedTolerance",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @RelativeAirspeedTolerance.setter
    def RelativeAirspeedTolerance(self, newVal:float) -> None:
        """Put the relative airspeed tolerance."""
        return self._intf.set_property(IAgAvtrAircraftBasicClimbModel._metadata, IAgAvtrAircraftBasicClimbModel._set_RelativeAirspeedTolerance_metadata, newVal)

    _GetAsCatalogItem_metadata = { "name" : "GetAsCatalogItem",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    def GetAsCatalogItem(self) -> "IAgAvtrCatalogItem":
        """Get the catalog item interface for this object."""
        return self._intf.invoke(IAgAvtrAircraftBasicClimbModel._metadata, IAgAvtrAircraftBasicClimbModel._GetAsCatalogItem_metadata, out_arg())


agcls.AgClassCatalog.add_catalog_entry("{db58182c-ba76-44ea-be78-5c529aea4de7}", IAgAvtrAircraftBasicClimbModel)
agcls.AgTypeNameMap["IAgAvtrAircraftBasicClimbModel"] = IAgAvtrAircraftBasicClimbModel

class IAgAvtrAircraftBasicAccelerationModel(object):
    """Interface used to access the basic acceleration model options for an acceleration model of an aircraft in the Aviator catalog."""
    _num_methods = 6
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{a1a75a12-5730-4442-b84c-dc51c7783896}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_LevelTurns" : 1,
                             "get_AttitudeTransitions" : 2,
                             "get_ClimbAndDescentTransitions" : 3,
                             "get_Aerodynamics" : 4,
                             "get_Propulsion" : 5,
                             "GetAsCatalogItem" : 6, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrAircraftBasicAccelerationModel._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrAircraftBasicAccelerationModel from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrAircraftBasicAccelerationModel.__dict__ and type(IAgAvtrAircraftBasicAccelerationModel.__dict__[attrname]) == property:
            return IAgAvtrAircraftBasicAccelerationModel.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrAircraftBasicAccelerationModel.")
    
    _get_LevelTurns_metadata = { "name" : "LevelTurns",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def LevelTurns(self) -> "IAgAvtrLevelTurns":
        """Get the level turns interface."""
        return self._intf.get_property(IAgAvtrAircraftBasicAccelerationModel._metadata, IAgAvtrAircraftBasicAccelerationModel._get_LevelTurns_metadata)

    _get_AttitudeTransitions_metadata = { "name" : "AttitudeTransitions",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def AttitudeTransitions(self) -> "IAgAvtrAttitudeTransitions":
        """Get the attitude transitions interface."""
        return self._intf.get_property(IAgAvtrAircraftBasicAccelerationModel._metadata, IAgAvtrAircraftBasicAccelerationModel._get_AttitudeTransitions_metadata)

    _get_ClimbAndDescentTransitions_metadata = { "name" : "ClimbAndDescentTransitions",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def ClimbAndDescentTransitions(self) -> "IAgAvtrClimbAndDescentTransitions":
        """Get the climb and descent transitions interface."""
        return self._intf.get_property(IAgAvtrAircraftBasicAccelerationModel._metadata, IAgAvtrAircraftBasicAccelerationModel._get_ClimbAndDescentTransitions_metadata)

    _get_Aerodynamics_metadata = { "name" : "Aerodynamics",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def Aerodynamics(self) -> "IAgAvtrAircraftAero":
        """Get the aerodynamics interface."""
        return self._intf.get_property(IAgAvtrAircraftBasicAccelerationModel._metadata, IAgAvtrAircraftBasicAccelerationModel._get_Aerodynamics_metadata)

    _get_Propulsion_metadata = { "name" : "Propulsion",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def Propulsion(self) -> "IAgAvtrAircraftProp":
        """Get the propulsion interface."""
        return self._intf.get_property(IAgAvtrAircraftBasicAccelerationModel._metadata, IAgAvtrAircraftBasicAccelerationModel._get_Propulsion_metadata)

    _GetAsCatalogItem_metadata = { "name" : "GetAsCatalogItem",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    def GetAsCatalogItem(self) -> "IAgAvtrCatalogItem":
        """Get the catalog item interface for this object."""
        return self._intf.invoke(IAgAvtrAircraftBasicAccelerationModel._metadata, IAgAvtrAircraftBasicAccelerationModel._GetAsCatalogItem_metadata, out_arg())


agcls.AgClassCatalog.add_catalog_entry("{a1a75a12-5730-4442-b84c-dc51c7783896}", IAgAvtrAircraftBasicAccelerationModel)
agcls.AgTypeNameMap["IAgAvtrAircraftBasicAccelerationModel"] = IAgAvtrAircraftBasicAccelerationModel

class IAgAvtrAircraftCategory(object):
    """Interface used to access the Aircraft Category in the Aviator Catalog."""
    _num_methods = 3
    _vtable_offset = IDispatch._vtable_offset + IDispatch._num_methods
    _metadata = {
        "uuid" : "{222d5a63-81e6-4ada-b309-e5ada49f075d}",
        "vtable_reference" : IDispatch._vtable_offset + IDispatch._num_methods - 1,
        "method_offsets" : { "get_AircraftModels" : 1,
                             "get_MissileModels" : 2,
                             "get_RotorcraftModels" : 3, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrAircraftCategory._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrAircraftCategory from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrAircraftCategory.__dict__ and type(IAgAvtrAircraftCategory.__dict__[attrname]) == property:
            return IAgAvtrAircraftCategory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrAircraftCategory.")
    
    _get_AircraftModels_metadata = { "name" : "AircraftModels",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def AircraftModels(self) -> "IAgAvtrAircraftModels":
        """Get the user aircraft models."""
        return self._intf.get_property(IAgAvtrAircraftCategory._metadata, IAgAvtrAircraftCategory._get_AircraftModels_metadata)

    _get_MissileModels_metadata = { "name" : "MissileModels",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def MissileModels(self) -> "IAgAvtrMissileModels":
        """Get the user missile models."""
        return self._intf.get_property(IAgAvtrAircraftCategory._metadata, IAgAvtrAircraftCategory._get_MissileModels_metadata)

    _get_RotorcraftModels_metadata = { "name" : "RotorcraftModels",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def RotorcraftModels(self) -> "IAgAvtrRotorcraftModels":
        """Get the user rotorcraft models."""
        return self._intf.get_property(IAgAvtrAircraftCategory._metadata, IAgAvtrAircraftCategory._get_RotorcraftModels_metadata)


agcls.AgClassCatalog.add_catalog_entry("{222d5a63-81e6-4ada-b309-e5ada49f075d}", IAgAvtrAircraftCategory)
agcls.AgTypeNameMap["IAgAvtrAircraftCategory"] = IAgAvtrAircraftCategory

class IAgAvtrRunwayCategory(object):
    """Interface used to access runways in the Aviator catalog."""
    _num_methods = 3
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{76f32dcb-0127-47b6-b347-c78c18de45c6}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_UserRunways" : 1,
                             "get_ARINC424Runways" : 2,
                             "get_DAFIFRunways" : 3, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrRunwayCategory._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrRunwayCategory from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrRunwayCategory.__dict__ and type(IAgAvtrRunwayCategory.__dict__[attrname]) == property:
            return IAgAvtrRunwayCategory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrRunwayCategory.")
    
    _get_UserRunways_metadata = { "name" : "UserRunways",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def UserRunways(self) -> "IAgAvtrUserRunwaySource":
        """Get the user runways."""
        return self._intf.get_property(IAgAvtrRunwayCategory._metadata, IAgAvtrRunwayCategory._get_UserRunways_metadata)

    _get_ARINC424Runways_metadata = { "name" : "ARINC424Runways",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def ARINC424Runways(self) -> "IAgAvtrARINC424Source":
        """Get the ARINC-424 runways."""
        return self._intf.get_property(IAgAvtrRunwayCategory._metadata, IAgAvtrRunwayCategory._get_ARINC424Runways_metadata)

    _get_DAFIFRunways_metadata = { "name" : "DAFIFRunways",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def DAFIFRunways(self) -> "IAgAvtrDAFIFSource":
        """Get the DAFIF runways."""
        return self._intf.get_property(IAgAvtrRunwayCategory._metadata, IAgAvtrRunwayCategory._get_DAFIFRunways_metadata)


agcls.AgClassCatalog.add_catalog_entry("{76f32dcb-0127-47b6-b347-c78c18de45c6}", IAgAvtrRunwayCategory)
agcls.AgTypeNameMap["IAgAvtrRunwayCategory"] = IAgAvtrRunwayCategory

class IAgAvtrBasicManeuverStrategy(object):
    """Interface used to access options for a Basic Maneuver Strategy."""
    _num_methods = 0
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{55e05a46-43d4-41d7-9866-2b1255b5d08f}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : {  }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrBasicManeuverStrategy._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrBasicManeuverStrategy from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrBasicManeuverStrategy.__dict__ and type(IAgAvtrBasicManeuverStrategy.__dict__[attrname]) == property:
            return IAgAvtrBasicManeuverStrategy.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrBasicManeuverStrategy.")
    

agcls.AgClassCatalog.add_catalog_entry("{55e05a46-43d4-41d7-9866-2b1255b5d08f}", IAgAvtrBasicManeuverStrategy)
agcls.AgTypeNameMap["IAgAvtrBasicManeuverStrategy"] = IAgAvtrBasicManeuverStrategy

class IAgAvtrAircraftVTOL(object):
    """Interface used to access the VTOL options for an aircraft in the Aviator catalog."""
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{dbf209b7-90de-455a-b287-1b0d6c6fd823}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "GetVTOLByName" : 1,
                             "GetAsCatalogItem" : 2, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrAircraftVTOL._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrAircraftVTOL from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrAircraftVTOL.__dict__ and type(IAgAvtrAircraftVTOL.__dict__[attrname]) == property:
            return IAgAvtrAircraftVTOL.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrAircraftVTOL.")
    
    _GetVTOLByName_metadata = { "name" : "GetVTOLByName",
            "arg_types" : (agcom.BSTR, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.AgInterface_out_arg,) }
    def GetVTOLByName(self, name:str) -> "IAgAvtrAircraftVTOLModel":
        """Gets the VTOL model with the given name."""
        return self._intf.invoke(IAgAvtrAircraftVTOL._metadata, IAgAvtrAircraftVTOL._GetVTOLByName_metadata, name, out_arg())

    _GetAsCatalogItem_metadata = { "name" : "GetAsCatalogItem",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    def GetAsCatalogItem(self) -> "IAgAvtrCatalogItem":
        """Get the catalog item interface for this object."""
        return self._intf.invoke(IAgAvtrAircraftVTOL._metadata, IAgAvtrAircraftVTOL._GetAsCatalogItem_metadata, out_arg())


agcls.AgClassCatalog.add_catalog_entry("{dbf209b7-90de-455a-b287-1b0d6c6fd823}", IAgAvtrAircraftVTOL)
agcls.AgTypeNameMap["IAgAvtrAircraftVTOL"] = IAgAvtrAircraftVTOL

class IAgAvtrAircraftExternalAero(object):
    """Interface used to access the External File Aerodynamics options for the Basic Acceleration Model of an aircraft."""
    _num_methods = 14
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{8edd99ca-d7c9-4552-aff5-540ae780d319}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_ForwardFlightFilepath" : 1,
                             "SetForwardFlightFilepath" : 2,
                             "ReloadForwardFlightFile" : 3,
                             "get_ForwardFlightRefArea" : 4,
                             "set_ForwardFlightRefArea" : 5,
                             "get_CanSetForwardFlightRefArea" : 6,
                             "get_IsForwardFlightValid" : 7,
                             "get_TakeoffLandingFilepath" : 8,
                             "SetTakeoffLandingFilepath" : 9,
                             "ReloadTakeoffLandingFile" : 10,
                             "get_TakeoffLandingRefArea" : 11,
                             "set_TakeoffLandingRefArea" : 12,
                             "get_CanSetTakeoffLandingRefArea" : 13,
                             "get_IsTakeoffLandingValid" : 14, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrAircraftExternalAero._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrAircraftExternalAero from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrAircraftExternalAero.__dict__ and type(IAgAvtrAircraftExternalAero.__dict__[attrname]) == property:
            return IAgAvtrAircraftExternalAero.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrAircraftExternalAero.")
    
    _get_ForwardFlightFilepath_metadata = { "name" : "ForwardFlightFilepath",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def ForwardFlightFilepath(self) -> str:
        """The filepath for the forward flight aero file."""
        return self._intf.get_property(IAgAvtrAircraftExternalAero._metadata, IAgAvtrAircraftExternalAero._get_ForwardFlightFilepath_metadata)

    _SetForwardFlightFilepath_metadata = { "name" : "SetForwardFlightFilepath",
            "arg_types" : (agcom.BSTR, POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.BSTR_arg,) }
    def SetForwardFlightFilepath(self, filepath:str) -> str:
        """Set the filepath for the forward flight aero file."""
        return self._intf.invoke(IAgAvtrAircraftExternalAero._metadata, IAgAvtrAircraftExternalAero._SetForwardFlightFilepath_metadata, filepath, out_arg())

    _ReloadForwardFlightFile_metadata = { "name" : "ReloadForwardFlightFile",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    def ReloadForwardFlightFile(self) -> str:
        """Reload the forward flight aero file."""
        return self._intf.invoke(IAgAvtrAircraftExternalAero._metadata, IAgAvtrAircraftExternalAero._ReloadForwardFlightFile_metadata, out_arg())

    _get_ForwardFlightRefArea_metadata = { "name" : "ForwardFlightRefArea",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def ForwardFlightRefArea(self) -> float:
        """The area of the lifting surface of the aircraft."""
        return self._intf.get_property(IAgAvtrAircraftExternalAero._metadata, IAgAvtrAircraftExternalAero._get_ForwardFlightRefArea_metadata)

    _set_ForwardFlightRefArea_metadata = { "name" : "ForwardFlightRefArea",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @ForwardFlightRefArea.setter
    def ForwardFlightRefArea(self, pVal:float) -> None:
        """The area of the lifting surface of the aircraft."""
        return self._intf.set_property(IAgAvtrAircraftExternalAero._metadata, IAgAvtrAircraftExternalAero._set_ForwardFlightRefArea_metadata, pVal)

    _get_CanSetForwardFlightRefArea_metadata = { "name" : "CanSetForwardFlightRefArea",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def CanSetForwardFlightRefArea(self) -> bool:
        """Check whether you can set the reference area or whether it is specified in the file."""
        return self._intf.get_property(IAgAvtrAircraftExternalAero._metadata, IAgAvtrAircraftExternalAero._get_CanSetForwardFlightRefArea_metadata)

    _get_IsForwardFlightValid_metadata = { "name" : "IsForwardFlightValid",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def IsForwardFlightValid(self) -> bool:
        """Check whether the forward flight file is valid."""
        return self._intf.get_property(IAgAvtrAircraftExternalAero._metadata, IAgAvtrAircraftExternalAero._get_IsForwardFlightValid_metadata)

    _get_TakeoffLandingFilepath_metadata = { "name" : "TakeoffLandingFilepath",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def TakeoffLandingFilepath(self) -> str:
        """The filepath for the takeoff and landing aero file."""
        return self._intf.get_property(IAgAvtrAircraftExternalAero._metadata, IAgAvtrAircraftExternalAero._get_TakeoffLandingFilepath_metadata)

    _SetTakeoffLandingFilepath_metadata = { "name" : "SetTakeoffLandingFilepath",
            "arg_types" : (agcom.BSTR, POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.BSTR_arg,) }
    def SetTakeoffLandingFilepath(self, filepath:str) -> str:
        """Set the filepath for the takeoff and landing aero file."""
        return self._intf.invoke(IAgAvtrAircraftExternalAero._metadata, IAgAvtrAircraftExternalAero._SetTakeoffLandingFilepath_metadata, filepath, out_arg())

    _ReloadTakeoffLandingFile_metadata = { "name" : "ReloadTakeoffLandingFile",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    def ReloadTakeoffLandingFile(self) -> str:
        """Reload the takeoff and landing aero file."""
        return self._intf.invoke(IAgAvtrAircraftExternalAero._metadata, IAgAvtrAircraftExternalAero._ReloadTakeoffLandingFile_metadata, out_arg())

    _get_TakeoffLandingRefArea_metadata = { "name" : "TakeoffLandingRefArea",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def TakeoffLandingRefArea(self) -> float:
        """The area of the lifting surface of the aircraft."""
        return self._intf.get_property(IAgAvtrAircraftExternalAero._metadata, IAgAvtrAircraftExternalAero._get_TakeoffLandingRefArea_metadata)

    _set_TakeoffLandingRefArea_metadata = { "name" : "TakeoffLandingRefArea",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @TakeoffLandingRefArea.setter
    def TakeoffLandingRefArea(self, pVal:float) -> None:
        """The area of the lifting surface of the aircraft."""
        return self._intf.set_property(IAgAvtrAircraftExternalAero._metadata, IAgAvtrAircraftExternalAero._set_TakeoffLandingRefArea_metadata, pVal)

    _get_CanSetTakeoffLandingRefArea_metadata = { "name" : "CanSetTakeoffLandingRefArea",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def CanSetTakeoffLandingRefArea(self) -> bool:
        """Check whether you can set the reference area or whether it is specified in the file."""
        return self._intf.get_property(IAgAvtrAircraftExternalAero._metadata, IAgAvtrAircraftExternalAero._get_CanSetTakeoffLandingRefArea_metadata)

    _get_IsTakeoffLandingValid_metadata = { "name" : "IsTakeoffLandingValid",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def IsTakeoffLandingValid(self) -> bool:
        """Check whether the takeoff and landing file is valid."""
        return self._intf.get_property(IAgAvtrAircraftExternalAero._metadata, IAgAvtrAircraftExternalAero._get_IsTakeoffLandingValid_metadata)


agcls.AgClassCatalog.add_catalog_entry("{8edd99ca-d7c9-4552-aff5-540ae780d319}", IAgAvtrAircraftExternalAero)
agcls.AgTypeNameMap["IAgAvtrAircraftExternalAero"] = IAgAvtrAircraftExternalAero

class IAgAvtrAircraftSimpleProp(object):
    """Interface used to access the Simple Propulsion options for the Basic Acceleration Model of an aircraft."""
    _num_methods = 7
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{e765bd7d-75d3-4b0e-afa6-cff14f98226c}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_MaxThrustAccel" : 1,
                             "set_MaxThrustAccel" : 2,
                             "get_MinThrustDecel" : 3,
                             "set_MinThrustDecel" : 4,
                             "get_UseDensityScaling" : 5,
                             "get_DensityRatioExponent" : 6,
                             "SetDensityScaling" : 7, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrAircraftSimpleProp._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrAircraftSimpleProp from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrAircraftSimpleProp.__dict__ and type(IAgAvtrAircraftSimpleProp.__dict__[attrname]) == property:
            return IAgAvtrAircraftSimpleProp.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrAircraftSimpleProp.")
    
    _get_MaxThrustAccel_metadata = { "name" : "MaxThrustAccel",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def MaxThrustAccel(self) -> float:
        """The rate at which the aircraft speeds up at max throttle."""
        return self._intf.get_property(IAgAvtrAircraftSimpleProp._metadata, IAgAvtrAircraftSimpleProp._get_MaxThrustAccel_metadata)

    _set_MaxThrustAccel_metadata = { "name" : "MaxThrustAccel",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @MaxThrustAccel.setter
    def MaxThrustAccel(self, pVal:float) -> None:
        """The rate at which the aircraft speeds up at max throttle."""
        return self._intf.set_property(IAgAvtrAircraftSimpleProp._metadata, IAgAvtrAircraftSimpleProp._set_MaxThrustAccel_metadata, pVal)

    _get_MinThrustDecel_metadata = { "name" : "MinThrustDecel",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def MinThrustDecel(self) -> float:
        """The rate at which the aircraft slows down at minimum throttle setting."""
        return self._intf.get_property(IAgAvtrAircraftSimpleProp._metadata, IAgAvtrAircraftSimpleProp._get_MinThrustDecel_metadata)

    _set_MinThrustDecel_metadata = { "name" : "MinThrustDecel",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @MinThrustDecel.setter
    def MinThrustDecel(self, pVal:float) -> None:
        """The rate at which the aircraft slows down at minimum throttle setting."""
        return self._intf.set_property(IAgAvtrAircraftSimpleProp._metadata, IAgAvtrAircraftSimpleProp._set_MinThrustDecel_metadata, pVal)

    _get_UseDensityScaling_metadata = { "name" : "UseDensityScaling",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def UseDensityScaling(self) -> bool:
        """Opt whether to scale the accel/decel performance by the density ratio."""
        return self._intf.get_property(IAgAvtrAircraftSimpleProp._metadata, IAgAvtrAircraftSimpleProp._get_UseDensityScaling_metadata)

    _get_DensityRatioExponent_metadata = { "name" : "DensityRatioExponent",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def DensityRatioExponent(self) -> float:
        """The relative impace of atmospheric density on the aircraft's performance."""
        return self._intf.get_property(IAgAvtrAircraftSimpleProp._metadata, IAgAvtrAircraftSimpleProp._get_DensityRatioExponent_metadata)

    _SetDensityScaling_metadata = { "name" : "SetDensityScaling",
            "arg_types" : (agcom.VARIANT_BOOL, agcom.DOUBLE,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg, agmarshall.DOUBLE_arg,) }
    def SetDensityScaling(self, useScaling:bool, exponent:float) -> None:
        """Set the option to use density scaling and set the density ratio exponent."""
        return self._intf.invoke(IAgAvtrAircraftSimpleProp._metadata, IAgAvtrAircraftSimpleProp._SetDensityScaling_metadata, useScaling, exponent)


agcls.AgClassCatalog.add_catalog_entry("{e765bd7d-75d3-4b0e-afa6-cff14f98226c}", IAgAvtrAircraftSimpleProp)
agcls.AgTypeNameMap["IAgAvtrAircraftSimpleProp"] = IAgAvtrAircraftSimpleProp

class IAgAvtrAircraftExternalProp(object):
    """Interface used to access the External File Propulsion options for the Basic Acceleration Model of an aircraft."""
    _num_methods = 12
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{bc0afa8f-6ccd-4369-8cfd-ee88f8251eec}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_PropFilepath" : 1,
                             "SetPropFilepath" : 2,
                             "ReloadPropFile" : 3,
                             "get_IsValid" : 4,
                             "get_CanSetAccelDecel" : 5,
                             "get_MaxThrustAccel" : 6,
                             "set_MaxThrustAccel" : 7,
                             "get_MinThrustDecel" : 8,
                             "set_MinThrustDecel" : 9,
                             "get_UseDensityScaling" : 10,
                             "get_DensityRatioExponent" : 11,
                             "SetDensityScaling" : 12, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrAircraftExternalProp._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrAircraftExternalProp from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrAircraftExternalProp.__dict__ and type(IAgAvtrAircraftExternalProp.__dict__[attrname]) == property:
            return IAgAvtrAircraftExternalProp.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrAircraftExternalProp.")
    
    _get_PropFilepath_metadata = { "name" : "PropFilepath",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def PropFilepath(self) -> str:
        """The filepath for the prop file."""
        return self._intf.get_property(IAgAvtrAircraftExternalProp._metadata, IAgAvtrAircraftExternalProp._get_PropFilepath_metadata)

    _SetPropFilepath_metadata = { "name" : "SetPropFilepath",
            "arg_types" : (agcom.BSTR, POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.BSTR_arg,) }
    def SetPropFilepath(self, filepath:str) -> str:
        """Set the filepath for the prop file."""
        return self._intf.invoke(IAgAvtrAircraftExternalProp._metadata, IAgAvtrAircraftExternalProp._SetPropFilepath_metadata, filepath, out_arg())

    _ReloadPropFile_metadata = { "name" : "ReloadPropFile",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    def ReloadPropFile(self) -> str:
        """Reload the prop file."""
        return self._intf.invoke(IAgAvtrAircraftExternalProp._metadata, IAgAvtrAircraftExternalProp._ReloadPropFile_metadata, out_arg())

    _get_IsValid_metadata = { "name" : "IsValid",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def IsValid(self) -> bool:
        """Check if the prop file is valid."""
        return self._intf.get_property(IAgAvtrAircraftExternalProp._metadata, IAgAvtrAircraftExternalProp._get_IsValid_metadata)

    _get_CanSetAccelDecel_metadata = { "name" : "CanSetAccelDecel",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def CanSetAccelDecel(self) -> bool:
        """Check whether you can set the acceleration and deceleration values or whether they are specified in the file."""
        return self._intf.get_property(IAgAvtrAircraftExternalProp._metadata, IAgAvtrAircraftExternalProp._get_CanSetAccelDecel_metadata)

    _get_MaxThrustAccel_metadata = { "name" : "MaxThrustAccel",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def MaxThrustAccel(self) -> float:
        """The rate at which the aircraft speeds up at max throttle."""
        return self._intf.get_property(IAgAvtrAircraftExternalProp._metadata, IAgAvtrAircraftExternalProp._get_MaxThrustAccel_metadata)

    _set_MaxThrustAccel_metadata = { "name" : "MaxThrustAccel",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @MaxThrustAccel.setter
    def MaxThrustAccel(self, pVal:float) -> None:
        """The rate at which the aircraft speeds up at max throttle."""
        return self._intf.set_property(IAgAvtrAircraftExternalProp._metadata, IAgAvtrAircraftExternalProp._set_MaxThrustAccel_metadata, pVal)

    _get_MinThrustDecel_metadata = { "name" : "MinThrustDecel",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def MinThrustDecel(self) -> float:
        """The rate at which the aircraft slows down at minimum throttle setting."""
        return self._intf.get_property(IAgAvtrAircraftExternalProp._metadata, IAgAvtrAircraftExternalProp._get_MinThrustDecel_metadata)

    _set_MinThrustDecel_metadata = { "name" : "MinThrustDecel",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @MinThrustDecel.setter
    def MinThrustDecel(self, pVal:float) -> None:
        """The rate at which the aircraft slows down at minimum throttle setting."""
        return self._intf.set_property(IAgAvtrAircraftExternalProp._metadata, IAgAvtrAircraftExternalProp._set_MinThrustDecel_metadata, pVal)

    _get_UseDensityScaling_metadata = { "name" : "UseDensityScaling",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def UseDensityScaling(self) -> bool:
        """Opt whether to scale the accel/decel performance by the density ratio."""
        return self._intf.get_property(IAgAvtrAircraftExternalProp._metadata, IAgAvtrAircraftExternalProp._get_UseDensityScaling_metadata)

    _get_DensityRatioExponent_metadata = { "name" : "DensityRatioExponent",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def DensityRatioExponent(self) -> float:
        """The relative impace of atmospheric density on the aircraft's performance."""
        return self._intf.get_property(IAgAvtrAircraftExternalProp._metadata, IAgAvtrAircraftExternalProp._get_DensityRatioExponent_metadata)

    _SetDensityScaling_metadata = { "name" : "SetDensityScaling",
            "arg_types" : (agcom.VARIANT_BOOL, agcom.DOUBLE,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg, agmarshall.DOUBLE_arg,) }
    def SetDensityScaling(self, useScaling:bool, exponent:float) -> None:
        """Set the option to use density scaling and set the density ratio exponent."""
        return self._intf.invoke(IAgAvtrAircraftExternalProp._metadata, IAgAvtrAircraftExternalProp._SetDensityScaling_metadata, useScaling, exponent)


agcls.AgClassCatalog.add_catalog_entry("{bc0afa8f-6ccd-4369-8cfd-ee88f8251eec}", IAgAvtrAircraftExternalProp)
agcls.AgTypeNameMap["IAgAvtrAircraftExternalProp"] = IAgAvtrAircraftExternalProp

class IAgAvtrAircraftBasicFixedWingProp(object):
    """Interface used to access the Basic Fixed Wing Propulsion options for the Basic Acceleration Model of an aircraft."""
    _num_methods = 23
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{0c92bc71-bb3f-4953-8171-6efb0d0ab922}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_PropulsionMode" : 1,
                             "set_PropulsionMode" : 2,
                             "get_PropellerCount" : 3,
                             "set_PropellerCount" : 4,
                             "get_PropellerDiameter" : 5,
                             "set_PropellerDiameter" : 6,
                             "get_PropellerRPM" : 7,
                             "set_PropellerRPM" : 8,
                             "get_MinPowerThrust" : 9,
                             "set_MinPowerThrust" : 10,
                             "get_MinFuelFlow" : 11,
                             "set_MinFuelFlow" : 12,
                             "get_MaxPowerThrust" : 13,
                             "set_MaxPowerThrust" : 14,
                             "get_MaxFuelFlow" : 15,
                             "set_MaxFuelFlow" : 16,
                             "get_MaxThrustAccel" : 17,
                             "set_MaxThrustAccel" : 18,
                             "get_MinThrustDecel" : 19,
                             "set_MinThrustDecel" : 20,
                             "get_UseDensityScaling" : 21,
                             "get_DensityRatioExponent" : 22,
                             "SetDensityScaling" : 23, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrAircraftBasicFixedWingProp._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrAircraftBasicFixedWingProp from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrAircraftBasicFixedWingProp.__dict__ and type(IAgAvtrAircraftBasicFixedWingProp.__dict__[attrname]) == property:
            return IAgAvtrAircraftBasicFixedWingProp.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrAircraftBasicFixedWingProp.")
    
    _get_PropulsionMode_metadata = { "name" : "PropulsionMode",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrBasicFixedWingPropMode),) }
    @property
    def PropulsionMode(self) -> "AgEAvtrBasicFixedWingPropMode":
        """The option of whether to specify net thrust or net power."""
        return self._intf.get_property(IAgAvtrAircraftBasicFixedWingProp._metadata, IAgAvtrAircraftBasicFixedWingProp._get_PropulsionMode_metadata)

    _set_PropulsionMode_metadata = { "name" : "PropulsionMode",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrBasicFixedWingPropMode),) }
    @PropulsionMode.setter
    def PropulsionMode(self, pVal:"AgEAvtrBasicFixedWingPropMode") -> None:
        """The option of whether to specify net thrust or net power."""
        return self._intf.set_property(IAgAvtrAircraftBasicFixedWingProp._metadata, IAgAvtrAircraftBasicFixedWingProp._set_PropulsionMode_metadata, pVal)

    _get_PropellerCount_metadata = { "name" : "PropellerCount",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.LONG_arg,) }
    @property
    def PropellerCount(self) -> int:
        """The number of propellers."""
        return self._intf.get_property(IAgAvtrAircraftBasicFixedWingProp._metadata, IAgAvtrAircraftBasicFixedWingProp._get_PropellerCount_metadata)

    _set_PropellerCount_metadata = { "name" : "PropellerCount",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.LONG_arg,) }
    @PropellerCount.setter
    def PropellerCount(self, pVal:int) -> None:
        """The number of propellers."""
        return self._intf.set_property(IAgAvtrAircraftBasicFixedWingProp._metadata, IAgAvtrAircraftBasicFixedWingProp._set_PropellerCount_metadata, pVal)

    _get_PropellerDiameter_metadata = { "name" : "PropellerDiameter",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def PropellerDiameter(self) -> float:
        """The propeller diameter."""
        return self._intf.get_property(IAgAvtrAircraftBasicFixedWingProp._metadata, IAgAvtrAircraftBasicFixedWingProp._get_PropellerDiameter_metadata)

    _set_PropellerDiameter_metadata = { "name" : "PropellerDiameter",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @PropellerDiameter.setter
    def PropellerDiameter(self, pVal:float) -> None:
        """The propeller diameter."""
        return self._intf.set_property(IAgAvtrAircraftBasicFixedWingProp._metadata, IAgAvtrAircraftBasicFixedWingProp._set_PropellerDiameter_metadata, pVal)

    _get_PropellerRPM_metadata = { "name" : "PropellerRPM",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def PropellerRPM(self) -> float:
        """The propeller RPM."""
        return self._intf.get_property(IAgAvtrAircraftBasicFixedWingProp._metadata, IAgAvtrAircraftBasicFixedWingProp._get_PropellerRPM_metadata)

    _set_PropellerRPM_metadata = { "name" : "PropellerRPM",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @PropellerRPM.setter
    def PropellerRPM(self, pVal:float) -> None:
        """The propeller RPM."""
        return self._intf.set_property(IAgAvtrAircraftBasicFixedWingProp._metadata, IAgAvtrAircraftBasicFixedWingProp._set_PropellerRPM_metadata, pVal)

    _get_MinPowerThrust_metadata = { "name" : "MinPowerThrust",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def MinPowerThrust(self) -> float:
        """The minimum power/thrust depending on the propulsion mode."""
        return self._intf.get_property(IAgAvtrAircraftBasicFixedWingProp._metadata, IAgAvtrAircraftBasicFixedWingProp._get_MinPowerThrust_metadata)

    _set_MinPowerThrust_metadata = { "name" : "MinPowerThrust",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @MinPowerThrust.setter
    def MinPowerThrust(self, pVal:float) -> None:
        """The minimum power/thrust depending on the propulsion mode."""
        return self._intf.set_property(IAgAvtrAircraftBasicFixedWingProp._metadata, IAgAvtrAircraftBasicFixedWingProp._set_MinPowerThrust_metadata, pVal)

    _get_MinFuelFlow_metadata = { "name" : "MinFuelFlow",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def MinFuelFlow(self) -> float:
        """The fuel flow for the minimum thrust/power setting."""
        return self._intf.get_property(IAgAvtrAircraftBasicFixedWingProp._metadata, IAgAvtrAircraftBasicFixedWingProp._get_MinFuelFlow_metadata)

    _set_MinFuelFlow_metadata = { "name" : "MinFuelFlow",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @MinFuelFlow.setter
    def MinFuelFlow(self, pVal:float) -> None:
        """The fuel flow for the minimum thrust/power setting."""
        return self._intf.set_property(IAgAvtrAircraftBasicFixedWingProp._metadata, IAgAvtrAircraftBasicFixedWingProp._set_MinFuelFlow_metadata, pVal)

    _get_MaxPowerThrust_metadata = { "name" : "MaxPowerThrust",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def MaxPowerThrust(self) -> float:
        """The maximum power/thrust depending on the propulsion mode."""
        return self._intf.get_property(IAgAvtrAircraftBasicFixedWingProp._metadata, IAgAvtrAircraftBasicFixedWingProp._get_MaxPowerThrust_metadata)

    _set_MaxPowerThrust_metadata = { "name" : "MaxPowerThrust",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @MaxPowerThrust.setter
    def MaxPowerThrust(self, pVal:float) -> None:
        """The maximum power/thrust depending on the propulsion mode."""
        return self._intf.set_property(IAgAvtrAircraftBasicFixedWingProp._metadata, IAgAvtrAircraftBasicFixedWingProp._set_MaxPowerThrust_metadata, pVal)

    _get_MaxFuelFlow_metadata = { "name" : "MaxFuelFlow",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def MaxFuelFlow(self) -> float:
        """The fuel flow for the maximum thrust/power setting."""
        return self._intf.get_property(IAgAvtrAircraftBasicFixedWingProp._metadata, IAgAvtrAircraftBasicFixedWingProp._get_MaxFuelFlow_metadata)

    _set_MaxFuelFlow_metadata = { "name" : "MaxFuelFlow",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @MaxFuelFlow.setter
    def MaxFuelFlow(self, pVal:float) -> None:
        """The fuel flow for the maximum thrust/power setting."""
        return self._intf.set_property(IAgAvtrAircraftBasicFixedWingProp._metadata, IAgAvtrAircraftBasicFixedWingProp._set_MaxFuelFlow_metadata, pVal)

    _get_MaxThrustAccel_metadata = { "name" : "MaxThrustAccel",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def MaxThrustAccel(self) -> float:
        """The rate at which the aircraft speeds up at max throttle."""
        return self._intf.get_property(IAgAvtrAircraftBasicFixedWingProp._metadata, IAgAvtrAircraftBasicFixedWingProp._get_MaxThrustAccel_metadata)

    _set_MaxThrustAccel_metadata = { "name" : "MaxThrustAccel",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @MaxThrustAccel.setter
    def MaxThrustAccel(self, pVal:float) -> None:
        """The rate at which the aircraft speeds up at max throttle."""
        return self._intf.set_property(IAgAvtrAircraftBasicFixedWingProp._metadata, IAgAvtrAircraftBasicFixedWingProp._set_MaxThrustAccel_metadata, pVal)

    _get_MinThrustDecel_metadata = { "name" : "MinThrustDecel",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def MinThrustDecel(self) -> float:
        """The rate at which the aircraft slows down at minimum throttle setting."""
        return self._intf.get_property(IAgAvtrAircraftBasicFixedWingProp._metadata, IAgAvtrAircraftBasicFixedWingProp._get_MinThrustDecel_metadata)

    _set_MinThrustDecel_metadata = { "name" : "MinThrustDecel",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @MinThrustDecel.setter
    def MinThrustDecel(self, pVal:float) -> None:
        """The rate at which the aircraft slows down at minimum throttle setting."""
        return self._intf.set_property(IAgAvtrAircraftBasicFixedWingProp._metadata, IAgAvtrAircraftBasicFixedWingProp._set_MinThrustDecel_metadata, pVal)

    _get_UseDensityScaling_metadata = { "name" : "UseDensityScaling",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def UseDensityScaling(self) -> bool:
        """Opt whether to scale the accel/decel performance by the density ratio."""
        return self._intf.get_property(IAgAvtrAircraftBasicFixedWingProp._metadata, IAgAvtrAircraftBasicFixedWingProp._get_UseDensityScaling_metadata)

    _get_DensityRatioExponent_metadata = { "name" : "DensityRatioExponent",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def DensityRatioExponent(self) -> float:
        """The relative impace of atmospheric density on the aircraft's performance."""
        return self._intf.get_property(IAgAvtrAircraftBasicFixedWingProp._metadata, IAgAvtrAircraftBasicFixedWingProp._get_DensityRatioExponent_metadata)

    _SetDensityScaling_metadata = { "name" : "SetDensityScaling",
            "arg_types" : (agcom.VARIANT_BOOL, agcom.DOUBLE,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg, agmarshall.DOUBLE_arg,) }
    def SetDensityScaling(self, useScaling:bool, exponent:float) -> None:
        """Set the option to use density scaling and set the density ratio exponent."""
        return self._intf.invoke(IAgAvtrAircraftBasicFixedWingProp._metadata, IAgAvtrAircraftBasicFixedWingProp._SetDensityScaling_metadata, useScaling, exponent)


agcls.AgClassCatalog.add_catalog_entry("{0c92bc71-bb3f-4953-8171-6efb0d0ab922}", IAgAvtrAircraftBasicFixedWingProp)
agcls.AgTypeNameMap["IAgAvtrAircraftBasicFixedWingProp"] = IAgAvtrAircraftBasicFixedWingProp

class IAgAvtrAircraftAdvClimbModel(object):
    """Interface used to access the advanced climb model options for a climb model of an aircraft in the Aviator catalog."""
    _num_methods = 21
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{3e994b97-b141-4cee-aada-d02409dc4756}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_ClimbSpeedType" : 1,
                             "set_ClimbSpeedType" : 2,
                             "get_ClimbOverrideAirspeedType" : 3,
                             "get_ClimbOverrideAirspeed" : 4,
                             "SetClimbOverrideAirspeed" : 5,
                             "get_UseAfterburner" : 6,
                             "set_UseAfterburner" : 7,
                             "get_UseAirspeedLimit" : 8,
                             "set_UseAirspeedLimit" : 9,
                             "get_AltitudeLimit" : 10,
                             "set_AltitudeLimit" : 11,
                             "get_AirspeedLimitType" : 12,
                             "get_AirspeedLimit" : 13,
                             "SetAirspeedLimit" : 14,
                             "get_UseFlightPathAngleLimit" : 15,
                             "set_UseFlightPathAngleLimit" : 16,
                             "get_FlightPathAngle" : 17,
                             "SetFlightPathAngle" : 18,
                             "get_ComputeDeltaAltitude" : 19,
                             "set_ComputeDeltaAltitude" : 20,
                             "GetAsCatalogItem" : 21, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrAircraftAdvClimbModel._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrAircraftAdvClimbModel from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrAircraftAdvClimbModel.__dict__ and type(IAgAvtrAircraftAdvClimbModel.__dict__[attrname]) == property:
            return IAgAvtrAircraftAdvClimbModel.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrAircraftAdvClimbModel.")
    
    _get_ClimbSpeedType_metadata = { "name" : "ClimbSpeedType",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrClimbSpeedType),) }
    @property
    def ClimbSpeedType(self) -> "AgEAvtrClimbSpeedType":
        """The mode to calculate the aircraft's airspeed while climbing."""
        return self._intf.get_property(IAgAvtrAircraftAdvClimbModel._metadata, IAgAvtrAircraftAdvClimbModel._get_ClimbSpeedType_metadata)

    _set_ClimbSpeedType_metadata = { "name" : "ClimbSpeedType",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrClimbSpeedType),) }
    @ClimbSpeedType.setter
    def ClimbSpeedType(self, newVal:"AgEAvtrClimbSpeedType") -> None:
        """The mode to calculate the aircraft's airspeed while climbing."""
        return self._intf.set_property(IAgAvtrAircraftAdvClimbModel._metadata, IAgAvtrAircraftAdvClimbModel._set_ClimbSpeedType_metadata, newVal)

    _get_ClimbOverrideAirspeedType_metadata = { "name" : "ClimbOverrideAirspeedType",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrAirspeedType),) }
    @property
    def ClimbOverrideAirspeedType(self) -> "AgEAvtrAirspeedType":
        """Get the override airspeed type."""
        return self._intf.get_property(IAgAvtrAircraftAdvClimbModel._metadata, IAgAvtrAircraftAdvClimbModel._get_ClimbOverrideAirspeedType_metadata)

    _get_ClimbOverrideAirspeed_metadata = { "name" : "ClimbOverrideAirspeed",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def ClimbOverrideAirspeed(self) -> float:
        """Get the override airsepeed."""
        return self._intf.get_property(IAgAvtrAircraftAdvClimbModel._metadata, IAgAvtrAircraftAdvClimbModel._get_ClimbOverrideAirspeed_metadata)

    _SetClimbOverrideAirspeed_metadata = { "name" : "SetClimbOverrideAirspeed",
            "arg_types" : (agcom.LONG, agcom.DOUBLE,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrAirspeedType), agmarshall.DOUBLE_arg,) }
    def SetClimbOverrideAirspeed(self, airspeedType:"AgEAvtrAirspeedType", aispeed:float) -> None:
        """Set the override airspeed and airspeed type."""
        return self._intf.invoke(IAgAvtrAircraftAdvClimbModel._metadata, IAgAvtrAircraftAdvClimbModel._SetClimbOverrideAirspeed_metadata, airspeedType, aispeed)

    _get_UseAfterburner_metadata = { "name" : "UseAfterburner",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def UseAfterburner(self) -> bool:
        """Opt to use the engine's afterburner when climbing if available."""
        return self._intf.get_property(IAgAvtrAircraftAdvClimbModel._metadata, IAgAvtrAircraftAdvClimbModel._get_UseAfterburner_metadata)

    _set_UseAfterburner_metadata = { "name" : "UseAfterburner",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @UseAfterburner.setter
    def UseAfterburner(self, newVal:bool) -> None:
        """Opt to use the engine's afterburner when climbing if available."""
        return self._intf.set_property(IAgAvtrAircraftAdvClimbModel._metadata, IAgAvtrAircraftAdvClimbModel._set_UseAfterburner_metadata, newVal)

    _get_UseAirspeedLimit_metadata = { "name" : "UseAirspeedLimit",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def UseAirspeedLimit(self) -> bool:
        """Opt to limit the airspeed below a specified altitude."""
        return self._intf.get_property(IAgAvtrAircraftAdvClimbModel._metadata, IAgAvtrAircraftAdvClimbModel._get_UseAirspeedLimit_metadata)

    _set_UseAirspeedLimit_metadata = { "name" : "UseAirspeedLimit",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @UseAirspeedLimit.setter
    def UseAirspeedLimit(self, newVal:bool) -> None:
        """Opt to limit the airspeed below a specified altitude."""
        return self._intf.set_property(IAgAvtrAircraftAdvClimbModel._metadata, IAgAvtrAircraftAdvClimbModel._set_UseAirspeedLimit_metadata, newVal)

    _get_AltitudeLimit_metadata = { "name" : "AltitudeLimit",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def AltitudeLimit(self) -> float:
        """The altitude threshold, below which the airspeed limit will be applied."""
        return self._intf.get_property(IAgAvtrAircraftAdvClimbModel._metadata, IAgAvtrAircraftAdvClimbModel._get_AltitudeLimit_metadata)

    _set_AltitudeLimit_metadata = { "name" : "AltitudeLimit",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @AltitudeLimit.setter
    def AltitudeLimit(self, newVal:float) -> None:
        """The altitude threshold, below which the airspeed limit will be applied."""
        return self._intf.set_property(IAgAvtrAircraftAdvClimbModel._metadata, IAgAvtrAircraftAdvClimbModel._set_AltitudeLimit_metadata, newVal)

    _get_AirspeedLimitType_metadata = { "name" : "AirspeedLimitType",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrAirspeedType),) }
    @property
    def AirspeedLimitType(self) -> "AgEAvtrAirspeedType":
        """Get the airspeed limit type."""
        return self._intf.get_property(IAgAvtrAircraftAdvClimbModel._metadata, IAgAvtrAircraftAdvClimbModel._get_AirspeedLimitType_metadata)

    _get_AirspeedLimit_metadata = { "name" : "AirspeedLimit",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def AirspeedLimit(self) -> float:
        """Get the airsepeed limit below the altitude threshold."""
        return self._intf.get_property(IAgAvtrAircraftAdvClimbModel._metadata, IAgAvtrAircraftAdvClimbModel._get_AirspeedLimit_metadata)

    _SetAirspeedLimit_metadata = { "name" : "SetAirspeedLimit",
            "arg_types" : (agcom.LONG, agcom.DOUBLE,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrAirspeedType), agmarshall.DOUBLE_arg,) }
    def SetAirspeedLimit(self, airspeedType:"AgEAvtrAirspeedType", aispeed:float) -> None:
        """Set the airspeed limit and airspeed type below the altitude threshold."""
        return self._intf.invoke(IAgAvtrAircraftAdvClimbModel._metadata, IAgAvtrAircraftAdvClimbModel._SetAirspeedLimit_metadata, airspeedType, aispeed)

    _get_UseFlightPathAngleLimit_metadata = { "name" : "UseFlightPathAngleLimit",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def UseFlightPathAngleLimit(self) -> bool:
        """Opt to limit the flight path angle."""
        return self._intf.get_property(IAgAvtrAircraftAdvClimbModel._metadata, IAgAvtrAircraftAdvClimbModel._get_UseFlightPathAngleLimit_metadata)

    _set_UseFlightPathAngleLimit_metadata = { "name" : "UseFlightPathAngleLimit",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @UseFlightPathAngleLimit.setter
    def UseFlightPathAngleLimit(self, newVal:bool) -> None:
        """Opt to limit the flight path angle."""
        return self._intf.set_property(IAgAvtrAircraftAdvClimbModel._metadata, IAgAvtrAircraftAdvClimbModel._set_UseFlightPathAngleLimit_metadata, newVal)

    _get_FlightPathAngle_metadata = { "name" : "FlightPathAngle",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def FlightPathAngle(self) -> typing.Any:
        """Get the flight path angle limit."""
        return self._intf.get_property(IAgAvtrAircraftAdvClimbModel._metadata, IAgAvtrAircraftAdvClimbModel._get_FlightPathAngle_metadata)

    _SetFlightPathAngle_metadata = { "name" : "SetFlightPathAngle",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    def SetFlightPathAngle(self, angle:typing.Any) -> None:
        """Enable the flight path angle limit an set the flight path angle value."""
        return self._intf.invoke(IAgAvtrAircraftAdvClimbModel._metadata, IAgAvtrAircraftAdvClimbModel._SetFlightPathAngle_metadata, angle)

    _get_ComputeDeltaAltitude_metadata = { "name" : "ComputeDeltaAltitude",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def ComputeDeltaAltitude(self) -> float:
        """The maximum change in altitude in a computed segment before the data is sampled again."""
        return self._intf.get_property(IAgAvtrAircraftAdvClimbModel._metadata, IAgAvtrAircraftAdvClimbModel._get_ComputeDeltaAltitude_metadata)

    _set_ComputeDeltaAltitude_metadata = { "name" : "ComputeDeltaAltitude",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @ComputeDeltaAltitude.setter
    def ComputeDeltaAltitude(self, newVal:float) -> None:
        """The maximum change in altitude in a computed segment before the data is sampled again."""
        return self._intf.set_property(IAgAvtrAircraftAdvClimbModel._metadata, IAgAvtrAircraftAdvClimbModel._set_ComputeDeltaAltitude_metadata, newVal)

    _GetAsCatalogItem_metadata = { "name" : "GetAsCatalogItem",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    def GetAsCatalogItem(self) -> "IAgAvtrCatalogItem":
        """Get the catalog item interface for this object."""
        return self._intf.invoke(IAgAvtrAircraftAdvClimbModel._metadata, IAgAvtrAircraftAdvClimbModel._GetAsCatalogItem_metadata, out_arg())


agcls.AgClassCatalog.add_catalog_entry("{3e994b97-b141-4cee-aada-d02409dc4756}", IAgAvtrAircraftAdvClimbModel)
agcls.AgTypeNameMap["IAgAvtrAircraftAdvClimbModel"] = IAgAvtrAircraftAdvClimbModel

class IAgAvtrAircraftBasicCruiseModel(object):
    """Interface used to access the basic cruise model options for a cruise model of an aircraft in the Aviator catalog."""
    _num_methods = 31
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{0416553d-3446-49c1-8b44-e677197bd059}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_CeilingAltitude" : 1,
                             "set_CeilingAltitude" : 2,
                             "get_DefaultCruiseAltitude" : 3,
                             "set_DefaultCruiseAltitude" : 4,
                             "get_UseAeroPropFuel" : 5,
                             "set_UseAeroPropFuel" : 6,
                             "get_ScaleFuelFlowByNonStdDensity" : 7,
                             "set_ScaleFuelFlowByNonStdDensity" : 8,
                             "get_AirspeedType" : 9,
                             "set_AirspeedType" : 10,
                             "get_MinAirspeed" : 11,
                             "set_MinAirspeed" : 12,
                             "get_MaxEnduranceAirspeed" : 13,
                             "set_MaxEnduranceAirspeed" : 14,
                             "get_MaxRangeAirspeed" : 15,
                             "set_MaxRangeAirspeed" : 16,
                             "get_MaxAirspeed" : 17,
                             "set_MaxAirspeed" : 18,
                             "get_MaxPerfAirspeed" : 19,
                             "set_MaxPerfAirspeed" : 20,
                             "get_MinAirspeedFuelFlow" : 21,
                             "set_MinAirspeedFuelFlow" : 22,
                             "get_MaxEnduranceFuelFlow" : 23,
                             "set_MaxEnduranceFuelFlow" : 24,
                             "get_MaxRangeFuelFlow" : 25,
                             "set_MaxRangeFuelFlow" : 26,
                             "get_MaxAirspeedFuelFlow" : 27,
                             "set_MaxAirspeedFuelFlow" : 28,
                             "get_MaxPerfAirspeedFuelFlow" : 29,
                             "set_MaxPerfAirspeedFuelFlow" : 30,
                             "GetAsCatalogItem" : 31, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrAircraftBasicCruiseModel._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrAircraftBasicCruiseModel from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrAircraftBasicCruiseModel.__dict__ and type(IAgAvtrAircraftBasicCruiseModel.__dict__[attrname]) == property:
            return IAgAvtrAircraftBasicCruiseModel.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrAircraftBasicCruiseModel.")
    
    _get_CeilingAltitude_metadata = { "name" : "CeilingAltitude",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def CeilingAltitude(self) -> float:
        """The maximum altitude above mean sea level."""
        return self._intf.get_property(IAgAvtrAircraftBasicCruiseModel._metadata, IAgAvtrAircraftBasicCruiseModel._get_CeilingAltitude_metadata)

    _set_CeilingAltitude_metadata = { "name" : "CeilingAltitude",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @CeilingAltitude.setter
    def CeilingAltitude(self, newVal:float) -> None:
        """The maximum altitude above mean sea level."""
        return self._intf.set_property(IAgAvtrAircraftBasicCruiseModel._metadata, IAgAvtrAircraftBasicCruiseModel._set_CeilingAltitude_metadata, newVal)

    _get_DefaultCruiseAltitude_metadata = { "name" : "DefaultCruiseAltitude",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def DefaultCruiseAltitude(self) -> float:
        """The aircraft's default cruise altitude."""
        return self._intf.get_property(IAgAvtrAircraftBasicCruiseModel._metadata, IAgAvtrAircraftBasicCruiseModel._get_DefaultCruiseAltitude_metadata)

    _set_DefaultCruiseAltitude_metadata = { "name" : "DefaultCruiseAltitude",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @DefaultCruiseAltitude.setter
    def DefaultCruiseAltitude(self, newVal:float) -> None:
        """The aircraft's default cruise altitude."""
        return self._intf.set_property(IAgAvtrAircraftBasicCruiseModel._metadata, IAgAvtrAircraftBasicCruiseModel._set_DefaultCruiseAltitude_metadata, newVal)

    _get_UseAeroPropFuel_metadata = { "name" : "UseAeroPropFuel",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def UseAeroPropFuel(self) -> bool:
        """Opt to use the fuel flow calculated by the acceleration performance model."""
        return self._intf.get_property(IAgAvtrAircraftBasicCruiseModel._metadata, IAgAvtrAircraftBasicCruiseModel._get_UseAeroPropFuel_metadata)

    _set_UseAeroPropFuel_metadata = { "name" : "UseAeroPropFuel",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @UseAeroPropFuel.setter
    def UseAeroPropFuel(self, newVal:bool) -> None:
        """Opt to use the fuel flow calculated by the acceleration performance model."""
        return self._intf.set_property(IAgAvtrAircraftBasicCruiseModel._metadata, IAgAvtrAircraftBasicCruiseModel._set_UseAeroPropFuel_metadata, newVal)

    _get_ScaleFuelFlowByNonStdDensity_metadata = { "name" : "ScaleFuelFlowByNonStdDensity",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def ScaleFuelFlowByNonStdDensity(self) -> bool:
        """Opt to scale the fuel flow by the aircraft's actual altitude."""
        return self._intf.get_property(IAgAvtrAircraftBasicCruiseModel._metadata, IAgAvtrAircraftBasicCruiseModel._get_ScaleFuelFlowByNonStdDensity_metadata)

    _set_ScaleFuelFlowByNonStdDensity_metadata = { "name" : "ScaleFuelFlowByNonStdDensity",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @ScaleFuelFlowByNonStdDensity.setter
    def ScaleFuelFlowByNonStdDensity(self, newVal:bool) -> None:
        """Opt to scale the fuel flow by the aircraft's actual altitude."""
        return self._intf.set_property(IAgAvtrAircraftBasicCruiseModel._metadata, IAgAvtrAircraftBasicCruiseModel._set_ScaleFuelFlowByNonStdDensity_metadata, newVal)

    _get_AirspeedType_metadata = { "name" : "AirspeedType",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrAirspeedType),) }
    @property
    def AirspeedType(self) -> "AgEAvtrAirspeedType":
        """The airspeed type."""
        return self._intf.get_property(IAgAvtrAircraftBasicCruiseModel._metadata, IAgAvtrAircraftBasicCruiseModel._get_AirspeedType_metadata)

    _set_AirspeedType_metadata = { "name" : "AirspeedType",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrAirspeedType),) }
    @AirspeedType.setter
    def AirspeedType(self, newVal:"AgEAvtrAirspeedType") -> None:
        """The airspeed type."""
        return self._intf.set_property(IAgAvtrAircraftBasicCruiseModel._metadata, IAgAvtrAircraftBasicCruiseModel._set_AirspeedType_metadata, newVal)

    _get_MinAirspeed_metadata = { "name" : "MinAirspeed",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def MinAirspeed(self) -> float:
        """The minimum cruising airspeed."""
        return self._intf.get_property(IAgAvtrAircraftBasicCruiseModel._metadata, IAgAvtrAircraftBasicCruiseModel._get_MinAirspeed_metadata)

    _set_MinAirspeed_metadata = { "name" : "MinAirspeed",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @MinAirspeed.setter
    def MinAirspeed(self, newVal:float) -> None:
        """The minimum cruising airspeed."""
        return self._intf.set_property(IAgAvtrAircraftBasicCruiseModel._metadata, IAgAvtrAircraftBasicCruiseModel._set_MinAirspeed_metadata, newVal)

    _get_MaxEnduranceAirspeed_metadata = { "name" : "MaxEnduranceAirspeed",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def MaxEnduranceAirspeed(self) -> float:
        """The cruising airspeed that will provide the maximum flying time for the aircraft."""
        return self._intf.get_property(IAgAvtrAircraftBasicCruiseModel._metadata, IAgAvtrAircraftBasicCruiseModel._get_MaxEnduranceAirspeed_metadata)

    _set_MaxEnduranceAirspeed_metadata = { "name" : "MaxEnduranceAirspeed",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @MaxEnduranceAirspeed.setter
    def MaxEnduranceAirspeed(self, newVal:float) -> None:
        """The cruising airspeed that will provide the maximum flying time for the aircraft."""
        return self._intf.set_property(IAgAvtrAircraftBasicCruiseModel._metadata, IAgAvtrAircraftBasicCruiseModel._set_MaxEnduranceAirspeed_metadata, newVal)

    _get_MaxRangeAirspeed_metadata = { "name" : "MaxRangeAirspeed",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def MaxRangeAirspeed(self) -> float:
        """The maximum range cruising airspeed."""
        return self._intf.get_property(IAgAvtrAircraftBasicCruiseModel._metadata, IAgAvtrAircraftBasicCruiseModel._get_MaxRangeAirspeed_metadata)

    _set_MaxRangeAirspeed_metadata = { "name" : "MaxRangeAirspeed",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @MaxRangeAirspeed.setter
    def MaxRangeAirspeed(self, newVal:float) -> None:
        """The maximum range cruising airspeed."""
        return self._intf.set_property(IAgAvtrAircraftBasicCruiseModel._metadata, IAgAvtrAircraftBasicCruiseModel._set_MaxRangeAirspeed_metadata, newVal)

    _get_MaxAirspeed_metadata = { "name" : "MaxAirspeed",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def MaxAirspeed(self) -> float:
        """The maximum cruisng airspeed."""
        return self._intf.get_property(IAgAvtrAircraftBasicCruiseModel._metadata, IAgAvtrAircraftBasicCruiseModel._get_MaxAirspeed_metadata)

    _set_MaxAirspeed_metadata = { "name" : "MaxAirspeed",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @MaxAirspeed.setter
    def MaxAirspeed(self, newVal:float) -> None:
        """The maximum cruisng airspeed."""
        return self._intf.set_property(IAgAvtrAircraftBasicCruiseModel._metadata, IAgAvtrAircraftBasicCruiseModel._set_MaxAirspeed_metadata, newVal)

    _get_MaxPerfAirspeed_metadata = { "name" : "MaxPerfAirspeed",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def MaxPerfAirspeed(self) -> float:
        """A custom performance airspeed that can be used to model specific flight conditions."""
        return self._intf.get_property(IAgAvtrAircraftBasicCruiseModel._metadata, IAgAvtrAircraftBasicCruiseModel._get_MaxPerfAirspeed_metadata)

    _set_MaxPerfAirspeed_metadata = { "name" : "MaxPerfAirspeed",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @MaxPerfAirspeed.setter
    def MaxPerfAirspeed(self, newVal:float) -> None:
        """A custom performance airspeed that can be used to model specific flight conditions."""
        return self._intf.set_property(IAgAvtrAircraftBasicCruiseModel._metadata, IAgAvtrAircraftBasicCruiseModel._set_MaxPerfAirspeed_metadata, newVal)

    _get_MinAirspeedFuelFlow_metadata = { "name" : "MinAirspeedFuelFlow",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def MinAirspeedFuelFlow(self) -> float:
        """The fuel flow for the minimum cruising airspeed."""
        return self._intf.get_property(IAgAvtrAircraftBasicCruiseModel._metadata, IAgAvtrAircraftBasicCruiseModel._get_MinAirspeedFuelFlow_metadata)

    _set_MinAirspeedFuelFlow_metadata = { "name" : "MinAirspeedFuelFlow",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @MinAirspeedFuelFlow.setter
    def MinAirspeedFuelFlow(self, newVal:float) -> None:
        """The fuel flow for the minimum cruising airspeed."""
        return self._intf.set_property(IAgAvtrAircraftBasicCruiseModel._metadata, IAgAvtrAircraftBasicCruiseModel._set_MinAirspeedFuelFlow_metadata, newVal)

    _get_MaxEnduranceFuelFlow_metadata = { "name" : "MaxEnduranceFuelFlow",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def MaxEnduranceFuelFlow(self) -> float:
        """The fuel flow for the maximum endurance cruising airspeed."""
        return self._intf.get_property(IAgAvtrAircraftBasicCruiseModel._metadata, IAgAvtrAircraftBasicCruiseModel._get_MaxEnduranceFuelFlow_metadata)

    _set_MaxEnduranceFuelFlow_metadata = { "name" : "MaxEnduranceFuelFlow",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @MaxEnduranceFuelFlow.setter
    def MaxEnduranceFuelFlow(self, newVal:float) -> None:
        """The fuel flow for the maximumendurance cruising airspeed."""
        return self._intf.set_property(IAgAvtrAircraftBasicCruiseModel._metadata, IAgAvtrAircraftBasicCruiseModel._set_MaxEnduranceFuelFlow_metadata, newVal)

    _get_MaxRangeFuelFlow_metadata = { "name" : "MaxRangeFuelFlow",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def MaxRangeFuelFlow(self) -> float:
        """The fuel flow for the maximum range cruising airspeed."""
        return self._intf.get_property(IAgAvtrAircraftBasicCruiseModel._metadata, IAgAvtrAircraftBasicCruiseModel._get_MaxRangeFuelFlow_metadata)

    _set_MaxRangeFuelFlow_metadata = { "name" : "MaxRangeFuelFlow",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @MaxRangeFuelFlow.setter
    def MaxRangeFuelFlow(self, newVal:float) -> None:
        """The fuel flow for the maximum range cruising airspeed."""
        return self._intf.set_property(IAgAvtrAircraftBasicCruiseModel._metadata, IAgAvtrAircraftBasicCruiseModel._set_MaxRangeFuelFlow_metadata, newVal)

    _get_MaxAirspeedFuelFlow_metadata = { "name" : "MaxAirspeedFuelFlow",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def MaxAirspeedFuelFlow(self) -> float:
        """The fuel flow for the maximum cruising airspeed."""
        return self._intf.get_property(IAgAvtrAircraftBasicCruiseModel._metadata, IAgAvtrAircraftBasicCruiseModel._get_MaxAirspeedFuelFlow_metadata)

    _set_MaxAirspeedFuelFlow_metadata = { "name" : "MaxAirspeedFuelFlow",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @MaxAirspeedFuelFlow.setter
    def MaxAirspeedFuelFlow(self, newVal:float) -> None:
        """The fuel flow for the maximum cruising airspeed."""
        return self._intf.set_property(IAgAvtrAircraftBasicCruiseModel._metadata, IAgAvtrAircraftBasicCruiseModel._set_MaxAirspeedFuelFlow_metadata, newVal)

    _get_MaxPerfAirspeedFuelFlow_metadata = { "name" : "MaxPerfAirspeedFuelFlow",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def MaxPerfAirspeedFuelFlow(self) -> float:
        """The fuel flow for the maximum performance cruising airspeed."""
        return self._intf.get_property(IAgAvtrAircraftBasicCruiseModel._metadata, IAgAvtrAircraftBasicCruiseModel._get_MaxPerfAirspeedFuelFlow_metadata)

    _set_MaxPerfAirspeedFuelFlow_metadata = { "name" : "MaxPerfAirspeedFuelFlow",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @MaxPerfAirspeedFuelFlow.setter
    def MaxPerfAirspeedFuelFlow(self, newVal:float) -> None:
        """The fuel flow for the maximum performance cruising airspeed."""
        return self._intf.set_property(IAgAvtrAircraftBasicCruiseModel._metadata, IAgAvtrAircraftBasicCruiseModel._set_MaxPerfAirspeedFuelFlow_metadata, newVal)

    _GetAsCatalogItem_metadata = { "name" : "GetAsCatalogItem",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    def GetAsCatalogItem(self) -> "IAgAvtrCatalogItem":
        """Get the catalog item interface for this object."""
        return self._intf.invoke(IAgAvtrAircraftBasicCruiseModel._metadata, IAgAvtrAircraftBasicCruiseModel._GetAsCatalogItem_metadata, out_arg())


agcls.AgClassCatalog.add_catalog_entry("{0416553d-3446-49c1-8b44-e677197bd059}", IAgAvtrAircraftBasicCruiseModel)
agcls.AgTypeNameMap["IAgAvtrAircraftBasicCruiseModel"] = IAgAvtrAircraftBasicCruiseModel

class IAgAvtrAircraftAdvCruiseModel(object):
    """Interface used to access the advanced cruise model options for a cruise model of an aircraft in the Aviator catalog."""
    _num_methods = 14
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{49d2ea85-8dad-44b8-8ebd-596a3ef22c88}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_DefaultCruiseAltitude" : 1,
                             "set_DefaultCruiseAltitude" : 2,
                             "get_MaxPerfAirspeed" : 3,
                             "set_MaxPerfAirspeed" : 4,
                             "get_UseAirspeedLimit" : 5,
                             "set_UseAirspeedLimit" : 6,
                             "get_AltitudeLimit" : 7,
                             "set_AltitudeLimit" : 8,
                             "get_AirspeedLimitType" : 9,
                             "get_AirspeedLimit" : 10,
                             "SetAirspeedLimit" : 11,
                             "get_ComputeDeltaDownrange" : 12,
                             "set_ComputeDeltaDownrange" : 13,
                             "GetAsCatalogItem" : 14, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrAircraftAdvCruiseModel._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrAircraftAdvCruiseModel from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrAircraftAdvCruiseModel.__dict__ and type(IAgAvtrAircraftAdvCruiseModel.__dict__[attrname]) == property:
            return IAgAvtrAircraftAdvCruiseModel.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrAircraftAdvCruiseModel.")
    
    _get_DefaultCruiseAltitude_metadata = { "name" : "DefaultCruiseAltitude",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def DefaultCruiseAltitude(self) -> float:
        """The aircraft's default cruising altitude."""
        return self._intf.get_property(IAgAvtrAircraftAdvCruiseModel._metadata, IAgAvtrAircraftAdvCruiseModel._get_DefaultCruiseAltitude_metadata)

    _set_DefaultCruiseAltitude_metadata = { "name" : "DefaultCruiseAltitude",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @DefaultCruiseAltitude.setter
    def DefaultCruiseAltitude(self, newVal:float) -> None:
        """The aircraft's default cruising altitude."""
        return self._intf.set_property(IAgAvtrAircraftAdvCruiseModel._metadata, IAgAvtrAircraftAdvCruiseModel._set_DefaultCruiseAltitude_metadata, newVal)

    _get_MaxPerfAirspeed_metadata = { "name" : "MaxPerfAirspeed",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrCruiseMaxPerfSpeedType),) }
    @property
    def MaxPerfAirspeed(self) -> "AgEAvtrCruiseMaxPerfSpeedType":
        """The method for defining the maximum performance airspeed of the aircraft with respect to its altitude."""
        return self._intf.get_property(IAgAvtrAircraftAdvCruiseModel._metadata, IAgAvtrAircraftAdvCruiseModel._get_MaxPerfAirspeed_metadata)

    _set_MaxPerfAirspeed_metadata = { "name" : "MaxPerfAirspeed",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrCruiseMaxPerfSpeedType),) }
    @MaxPerfAirspeed.setter
    def MaxPerfAirspeed(self, newVal:"AgEAvtrCruiseMaxPerfSpeedType") -> None:
        """The method for defining the maximum performance airspeed of the aircraft with respect to its altitude."""
        return self._intf.set_property(IAgAvtrAircraftAdvCruiseModel._metadata, IAgAvtrAircraftAdvCruiseModel._set_MaxPerfAirspeed_metadata, newVal)

    _get_UseAirspeedLimit_metadata = { "name" : "UseAirspeedLimit",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def UseAirspeedLimit(self) -> bool:
        """Opt to limit the airspeed below a specified altitude."""
        return self._intf.get_property(IAgAvtrAircraftAdvCruiseModel._metadata, IAgAvtrAircraftAdvCruiseModel._get_UseAirspeedLimit_metadata)

    _set_UseAirspeedLimit_metadata = { "name" : "UseAirspeedLimit",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @UseAirspeedLimit.setter
    def UseAirspeedLimit(self, newVal:bool) -> None:
        """Opt to limit the airspeed below a specified altitude."""
        return self._intf.set_property(IAgAvtrAircraftAdvCruiseModel._metadata, IAgAvtrAircraftAdvCruiseModel._set_UseAirspeedLimit_metadata, newVal)

    _get_AltitudeLimit_metadata = { "name" : "AltitudeLimit",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def AltitudeLimit(self) -> float:
        """The altitude threshold, below which the airspeed limit will be applied."""
        return self._intf.get_property(IAgAvtrAircraftAdvCruiseModel._metadata, IAgAvtrAircraftAdvCruiseModel._get_AltitudeLimit_metadata)

    _set_AltitudeLimit_metadata = { "name" : "AltitudeLimit",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @AltitudeLimit.setter
    def AltitudeLimit(self, newVal:float) -> None:
        """The altitude threshold, below which the airspeed limit will be applied."""
        return self._intf.set_property(IAgAvtrAircraftAdvCruiseModel._metadata, IAgAvtrAircraftAdvCruiseModel._set_AltitudeLimit_metadata, newVal)

    _get_AirspeedLimitType_metadata = { "name" : "AirspeedLimitType",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrAirspeedType),) }
    @property
    def AirspeedLimitType(self) -> "AgEAvtrAirspeedType":
        """Get the airspeed limit type."""
        return self._intf.get_property(IAgAvtrAircraftAdvCruiseModel._metadata, IAgAvtrAircraftAdvCruiseModel._get_AirspeedLimitType_metadata)

    _get_AirspeedLimit_metadata = { "name" : "AirspeedLimit",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def AirspeedLimit(self) -> float:
        """Get the airsepeed limit below the altitude threshold."""
        return self._intf.get_property(IAgAvtrAircraftAdvCruiseModel._metadata, IAgAvtrAircraftAdvCruiseModel._get_AirspeedLimit_metadata)

    _SetAirspeedLimit_metadata = { "name" : "SetAirspeedLimit",
            "arg_types" : (agcom.LONG, agcom.DOUBLE,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrAirspeedType), agmarshall.DOUBLE_arg,) }
    def SetAirspeedLimit(self, airspeedType:"AgEAvtrAirspeedType", aispeed:float) -> None:
        """Set the airspeed limit and airspeed type below the altitude threshold."""
        return self._intf.invoke(IAgAvtrAircraftAdvCruiseModel._metadata, IAgAvtrAircraftAdvCruiseModel._SetAirspeedLimit_metadata, airspeedType, aispeed)

    _get_ComputeDeltaDownrange_metadata = { "name" : "ComputeDeltaDownrange",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def ComputeDeltaDownrange(self) -> float:
        """The maximum change in downrange distance in a computed segment before the data is sampled again."""
        return self._intf.get_property(IAgAvtrAircraftAdvCruiseModel._metadata, IAgAvtrAircraftAdvCruiseModel._get_ComputeDeltaDownrange_metadata)

    _set_ComputeDeltaDownrange_metadata = { "name" : "ComputeDeltaDownrange",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @ComputeDeltaDownrange.setter
    def ComputeDeltaDownrange(self, newVal:float) -> None:
        """The maximum change in downrange distance in a computed segment before the data is sampled again."""
        return self._intf.set_property(IAgAvtrAircraftAdvCruiseModel._metadata, IAgAvtrAircraftAdvCruiseModel._set_ComputeDeltaDownrange_metadata, newVal)

    _GetAsCatalogItem_metadata = { "name" : "GetAsCatalogItem",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    def GetAsCatalogItem(self) -> "IAgAvtrCatalogItem":
        """Get the catalog item interface for this object."""
        return self._intf.invoke(IAgAvtrAircraftAdvCruiseModel._metadata, IAgAvtrAircraftAdvCruiseModel._GetAsCatalogItem_metadata, out_arg())


agcls.AgClassCatalog.add_catalog_entry("{49d2ea85-8dad-44b8-8ebd-596a3ef22c88}", IAgAvtrAircraftAdvCruiseModel)
agcls.AgTypeNameMap["IAgAvtrAircraftAdvCruiseModel"] = IAgAvtrAircraftAdvCruiseModel

class IAgAvtrAircraftBasicDescentModel(object):
    """Interface used to access the basic descent model options for a descent model of an aircraft in the Aviator catalog."""
    _num_methods = 18
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{b2fec1db-7e30-401b-91cf-b78db9b1401b}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_CeilingAltitude" : 1,
                             "set_CeilingAltitude" : 2,
                             "get_Airspeed" : 3,
                             "get_AirspeedType" : 4,
                             "SetAirspeed" : 5,
                             "get_AltitudeRate" : 6,
                             "set_AltitudeRate" : 7,
                             "get_UseAeroPropFuel" : 8,
                             "set_UseAeroPropFuel" : 9,
                             "get_ScaleFuelFlowByNonStdDensity" : 10,
                             "set_ScaleFuelFlowByNonStdDensity" : 11,
                             "get_FuelFlow" : 12,
                             "set_FuelFlow" : 13,
                             "get_EnableRelativeAirspeedTolerance" : 14,
                             "set_EnableRelativeAirspeedTolerance" : 15,
                             "get_RelativeAirspeedTolerance" : 16,
                             "set_RelativeAirspeedTolerance" : 17,
                             "GetAsCatalogItem" : 18, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrAircraftBasicDescentModel._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrAircraftBasicDescentModel from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrAircraftBasicDescentModel.__dict__ and type(IAgAvtrAircraftBasicDescentModel.__dict__[attrname]) == property:
            return IAgAvtrAircraftBasicDescentModel.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrAircraftBasicDescentModel.")
    
    _get_CeilingAltitude_metadata = { "name" : "CeilingAltitude",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def CeilingAltitude(self) -> float:
        """Get the ceiling altitude."""
        return self._intf.get_property(IAgAvtrAircraftBasicDescentModel._metadata, IAgAvtrAircraftBasicDescentModel._get_CeilingAltitude_metadata)

    _set_CeilingAltitude_metadata = { "name" : "CeilingAltitude",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @CeilingAltitude.setter
    def CeilingAltitude(self, newVal:float) -> None:
        """Put the ceiling altitude."""
        return self._intf.set_property(IAgAvtrAircraftBasicDescentModel._metadata, IAgAvtrAircraftBasicDescentModel._set_CeilingAltitude_metadata, newVal)

    _get_Airspeed_metadata = { "name" : "Airspeed",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def Airspeed(self) -> float:
        """Get the airsepeed."""
        return self._intf.get_property(IAgAvtrAircraftBasicDescentModel._metadata, IAgAvtrAircraftBasicDescentModel._get_Airspeed_metadata)

    _get_AirspeedType_metadata = { "name" : "AirspeedType",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrAirspeedType),) }
    @property
    def AirspeedType(self) -> "AgEAvtrAirspeedType":
        """Get the airspeed type."""
        return self._intf.get_property(IAgAvtrAircraftBasicDescentModel._metadata, IAgAvtrAircraftBasicDescentModel._get_AirspeedType_metadata)

    _SetAirspeed_metadata = { "name" : "SetAirspeed",
            "arg_types" : (agcom.LONG, agcom.DOUBLE,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrAirspeedType), agmarshall.DOUBLE_arg,) }
    def SetAirspeed(self, airspeedType:"AgEAvtrAirspeedType", aispeed:float) -> None:
        """Set the airspeed type and value."""
        return self._intf.invoke(IAgAvtrAircraftBasicDescentModel._metadata, IAgAvtrAircraftBasicDescentModel._SetAirspeed_metadata, airspeedType, aispeed)

    _get_AltitudeRate_metadata = { "name" : "AltitudeRate",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def AltitudeRate(self) -> float:
        """Get the altitude rate."""
        return self._intf.get_property(IAgAvtrAircraftBasicDescentModel._metadata, IAgAvtrAircraftBasicDescentModel._get_AltitudeRate_metadata)

    _set_AltitudeRate_metadata = { "name" : "AltitudeRate",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @AltitudeRate.setter
    def AltitudeRate(self, newVal:float) -> None:
        """Put the altitude rate."""
        return self._intf.set_property(IAgAvtrAircraftBasicDescentModel._metadata, IAgAvtrAircraftBasicDescentModel._set_AltitudeRate_metadata, newVal)

    _get_UseAeroPropFuel_metadata = { "name" : "UseAeroPropFuel",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def UseAeroPropFuel(self) -> bool:
        """Get whether to use Aero/Propulsion fuel flow."""
        return self._intf.get_property(IAgAvtrAircraftBasicDescentModel._metadata, IAgAvtrAircraftBasicDescentModel._get_UseAeroPropFuel_metadata)

    _set_UseAeroPropFuel_metadata = { "name" : "UseAeroPropFuel",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @UseAeroPropFuel.setter
    def UseAeroPropFuel(self, newVal:bool) -> None:
        """Put whether to use Aero/Propulsion fuel flow."""
        return self._intf.set_property(IAgAvtrAircraftBasicDescentModel._metadata, IAgAvtrAircraftBasicDescentModel._set_UseAeroPropFuel_metadata, newVal)

    _get_ScaleFuelFlowByNonStdDensity_metadata = { "name" : "ScaleFuelFlowByNonStdDensity",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def ScaleFuelFlowByNonStdDensity(self) -> bool:
        """Get whether to scale fuel flow by non std density."""
        return self._intf.get_property(IAgAvtrAircraftBasicDescentModel._metadata, IAgAvtrAircraftBasicDescentModel._get_ScaleFuelFlowByNonStdDensity_metadata)

    _set_ScaleFuelFlowByNonStdDensity_metadata = { "name" : "ScaleFuelFlowByNonStdDensity",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @ScaleFuelFlowByNonStdDensity.setter
    def ScaleFuelFlowByNonStdDensity(self, newVal:bool) -> None:
        """Put whether to scale fuel flow by non std density."""
        return self._intf.set_property(IAgAvtrAircraftBasicDescentModel._metadata, IAgAvtrAircraftBasicDescentModel._set_ScaleFuelFlowByNonStdDensity_metadata, newVal)

    _get_FuelFlow_metadata = { "name" : "FuelFlow",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def FuelFlow(self) -> float:
        """Get the Sea Level Fuel Flow."""
        return self._intf.get_property(IAgAvtrAircraftBasicDescentModel._metadata, IAgAvtrAircraftBasicDescentModel._get_FuelFlow_metadata)

    _set_FuelFlow_metadata = { "name" : "FuelFlow",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @FuelFlow.setter
    def FuelFlow(self, newVal:float) -> None:
        """Put the Sea Level Fuel Flow."""
        return self._intf.set_property(IAgAvtrAircraftBasicDescentModel._metadata, IAgAvtrAircraftBasicDescentModel._set_FuelFlow_metadata, newVal)

    _get_EnableRelativeAirspeedTolerance_metadata = { "name" : "EnableRelativeAirspeedTolerance",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def EnableRelativeAirspeedTolerance(self) -> bool:
        """Get whether to enable relative airspeed tolerance."""
        return self._intf.get_property(IAgAvtrAircraftBasicDescentModel._metadata, IAgAvtrAircraftBasicDescentModel._get_EnableRelativeAirspeedTolerance_metadata)

    _set_EnableRelativeAirspeedTolerance_metadata = { "name" : "EnableRelativeAirspeedTolerance",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @EnableRelativeAirspeedTolerance.setter
    def EnableRelativeAirspeedTolerance(self, newVal:bool) -> None:
        """Put whether to enable relative airspeed tolerance."""
        return self._intf.set_property(IAgAvtrAircraftBasicDescentModel._metadata, IAgAvtrAircraftBasicDescentModel._set_EnableRelativeAirspeedTolerance_metadata, newVal)

    _get_RelativeAirspeedTolerance_metadata = { "name" : "RelativeAirspeedTolerance",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def RelativeAirspeedTolerance(self) -> float:
        """Get the relative airspeed tolerance."""
        return self._intf.get_property(IAgAvtrAircraftBasicDescentModel._metadata, IAgAvtrAircraftBasicDescentModel._get_RelativeAirspeedTolerance_metadata)

    _set_RelativeAirspeedTolerance_metadata = { "name" : "RelativeAirspeedTolerance",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @RelativeAirspeedTolerance.setter
    def RelativeAirspeedTolerance(self, newVal:float) -> None:
        """Put the relative airspeed tolerance."""
        return self._intf.set_property(IAgAvtrAircraftBasicDescentModel._metadata, IAgAvtrAircraftBasicDescentModel._set_RelativeAirspeedTolerance_metadata, newVal)

    _GetAsCatalogItem_metadata = { "name" : "GetAsCatalogItem",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    def GetAsCatalogItem(self) -> "IAgAvtrCatalogItem":
        """Get the catalog item interface for this object."""
        return self._intf.invoke(IAgAvtrAircraftBasicDescentModel._metadata, IAgAvtrAircraftBasicDescentModel._GetAsCatalogItem_metadata, out_arg())


agcls.AgClassCatalog.add_catalog_entry("{b2fec1db-7e30-401b-91cf-b78db9b1401b}", IAgAvtrAircraftBasicDescentModel)
agcls.AgTypeNameMap["IAgAvtrAircraftBasicDescentModel"] = IAgAvtrAircraftBasicDescentModel

class IAgAvtrAircraftAdvDescentModel(object):
    """Interface used to access the advanced descent model options for a descent model of an aircraft in the Aviator catalog."""
    _num_methods = 19
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{e668da71-2641-4751-a2eb-880eff768017}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_DescentSpeedType" : 1,
                             "set_DescentSpeedType" : 2,
                             "get_DescentStallSpeedRatio" : 3,
                             "set_DescentStallSpeedRatio" : 4,
                             "get_DescentOverrideAirspeedType" : 5,
                             "get_DescentOverrideAirspeed" : 6,
                             "SetDescentOverrideAirspeed" : 7,
                             "get_Speedbrakes" : 8,
                             "set_Speedbrakes" : 9,
                             "get_UseAirspeedLimit" : 10,
                             "set_UseAirspeedLimit" : 11,
                             "get_AltitudeLimit" : 12,
                             "set_AltitudeLimit" : 13,
                             "get_AirspeedLimitType" : 14,
                             "get_AirspeedLimit" : 15,
                             "SetAirspeedLimit" : 16,
                             "get_ComputeDeltaAltitude" : 17,
                             "set_ComputeDeltaAltitude" : 18,
                             "GetAsCatalogItem" : 19, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrAircraftAdvDescentModel._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrAircraftAdvDescentModel from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrAircraftAdvDescentModel.__dict__ and type(IAgAvtrAircraftAdvDescentModel.__dict__[attrname]) == property:
            return IAgAvtrAircraftAdvDescentModel.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrAircraftAdvDescentModel.")
    
    _get_DescentSpeedType_metadata = { "name" : "DescentSpeedType",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrDescentSpeedType),) }
    @property
    def DescentSpeedType(self) -> "AgEAvtrDescentSpeedType":
        """The mode to calculate the aircraft's airspeed while descending ."""
        return self._intf.get_property(IAgAvtrAircraftAdvDescentModel._metadata, IAgAvtrAircraftAdvDescentModel._get_DescentSpeedType_metadata)

    _set_DescentSpeedType_metadata = { "name" : "DescentSpeedType",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrDescentSpeedType),) }
    @DescentSpeedType.setter
    def DescentSpeedType(self, newVal:"AgEAvtrDescentSpeedType") -> None:
        """The mode to calculate the aircraft's airspeed while descending ."""
        return self._intf.set_property(IAgAvtrAircraftAdvDescentModel._metadata, IAgAvtrAircraftAdvDescentModel._set_DescentSpeedType_metadata, newVal)

    _get_DescentStallSpeedRatio_metadata = { "name" : "DescentStallSpeedRatio",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def DescentStallSpeedRatio(self) -> float:
        """The ratio of the airspeed upon leaving the ground to the stall speed."""
        return self._intf.get_property(IAgAvtrAircraftAdvDescentModel._metadata, IAgAvtrAircraftAdvDescentModel._get_DescentStallSpeedRatio_metadata)

    _set_DescentStallSpeedRatio_metadata = { "name" : "DescentStallSpeedRatio",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @DescentStallSpeedRatio.setter
    def DescentStallSpeedRatio(self, newVal:float) -> None:
        """The ratio of the airspeed upon leaving the ground to the stall speed."""
        return self._intf.set_property(IAgAvtrAircraftAdvDescentModel._metadata, IAgAvtrAircraftAdvDescentModel._set_DescentStallSpeedRatio_metadata, newVal)

    _get_DescentOverrideAirspeedType_metadata = { "name" : "DescentOverrideAirspeedType",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrAirspeedType),) }
    @property
    def DescentOverrideAirspeedType(self) -> "AgEAvtrAirspeedType":
        """Get the override airspeed type."""
        return self._intf.get_property(IAgAvtrAircraftAdvDescentModel._metadata, IAgAvtrAircraftAdvDescentModel._get_DescentOverrideAirspeedType_metadata)

    _get_DescentOverrideAirspeed_metadata = { "name" : "DescentOverrideAirspeed",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def DescentOverrideAirspeed(self) -> float:
        """Get the override airsepeed."""
        return self._intf.get_property(IAgAvtrAircraftAdvDescentModel._metadata, IAgAvtrAircraftAdvDescentModel._get_DescentOverrideAirspeed_metadata)

    _SetDescentOverrideAirspeed_metadata = { "name" : "SetDescentOverrideAirspeed",
            "arg_types" : (agcom.LONG, agcom.DOUBLE,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrAirspeedType), agmarshall.DOUBLE_arg,) }
    def SetDescentOverrideAirspeed(self, airspeedType:"AgEAvtrAirspeedType", aispeed:float) -> None:
        """Set the override airspeed and airspeed type."""
        return self._intf.invoke(IAgAvtrAircraftAdvDescentModel._metadata, IAgAvtrAircraftAdvDescentModel._SetDescentOverrideAirspeed_metadata, airspeedType, aispeed)

    _get_Speedbrakes_metadata = { "name" : "Speedbrakes",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def Speedbrakes(self) -> float:
        """The extension of the speedbrakes during the landing."""
        return self._intf.get_property(IAgAvtrAircraftAdvDescentModel._metadata, IAgAvtrAircraftAdvDescentModel._get_Speedbrakes_metadata)

    _set_Speedbrakes_metadata = { "name" : "Speedbrakes",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @Speedbrakes.setter
    def Speedbrakes(self, newVal:float) -> None:
        """The extension of the speedbrakes during the landing."""
        return self._intf.set_property(IAgAvtrAircraftAdvDescentModel._metadata, IAgAvtrAircraftAdvDescentModel._set_Speedbrakes_metadata, newVal)

    _get_UseAirspeedLimit_metadata = { "name" : "UseAirspeedLimit",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def UseAirspeedLimit(self) -> bool:
        """Opt to limit the airspeed below a specified altitude."""
        return self._intf.get_property(IAgAvtrAircraftAdvDescentModel._metadata, IAgAvtrAircraftAdvDescentModel._get_UseAirspeedLimit_metadata)

    _set_UseAirspeedLimit_metadata = { "name" : "UseAirspeedLimit",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @UseAirspeedLimit.setter
    def UseAirspeedLimit(self, newVal:bool) -> None:
        """Opt to limit the airspeed below a specified altitude."""
        return self._intf.set_property(IAgAvtrAircraftAdvDescentModel._metadata, IAgAvtrAircraftAdvDescentModel._set_UseAirspeedLimit_metadata, newVal)

    _get_AltitudeLimit_metadata = { "name" : "AltitudeLimit",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def AltitudeLimit(self) -> float:
        """The altitude threshold, below which the airspeed limit will be applied."""
        return self._intf.get_property(IAgAvtrAircraftAdvDescentModel._metadata, IAgAvtrAircraftAdvDescentModel._get_AltitudeLimit_metadata)

    _set_AltitudeLimit_metadata = { "name" : "AltitudeLimit",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @AltitudeLimit.setter
    def AltitudeLimit(self, newVal:float) -> None:
        """The altitude threshold, below which the airspeed limit will be applied."""
        return self._intf.set_property(IAgAvtrAircraftAdvDescentModel._metadata, IAgAvtrAircraftAdvDescentModel._set_AltitudeLimit_metadata, newVal)

    _get_AirspeedLimitType_metadata = { "name" : "AirspeedLimitType",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrAirspeedType),) }
    @property
    def AirspeedLimitType(self) -> "AgEAvtrAirspeedType":
        """Get the airspeed limit type."""
        return self._intf.get_property(IAgAvtrAircraftAdvDescentModel._metadata, IAgAvtrAircraftAdvDescentModel._get_AirspeedLimitType_metadata)

    _get_AirspeedLimit_metadata = { "name" : "AirspeedLimit",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def AirspeedLimit(self) -> float:
        """Get the airsepeed limit below the altitude threshold."""
        return self._intf.get_property(IAgAvtrAircraftAdvDescentModel._metadata, IAgAvtrAircraftAdvDescentModel._get_AirspeedLimit_metadata)

    _SetAirspeedLimit_metadata = { "name" : "SetAirspeedLimit",
            "arg_types" : (agcom.LONG, agcom.DOUBLE,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrAirspeedType), agmarshall.DOUBLE_arg,) }
    def SetAirspeedLimit(self, airspeedType:"AgEAvtrAirspeedType", aispeed:float) -> None:
        """Set the airspeed limit and airspeed type below the altitude threshold."""
        return self._intf.invoke(IAgAvtrAircraftAdvDescentModel._metadata, IAgAvtrAircraftAdvDescentModel._SetAirspeedLimit_metadata, airspeedType, aispeed)

    _get_ComputeDeltaAltitude_metadata = { "name" : "ComputeDeltaAltitude",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def ComputeDeltaAltitude(self) -> float:
        """The maximum change in altitude in a computed segment before the data is sampled again."""
        return self._intf.get_property(IAgAvtrAircraftAdvDescentModel._metadata, IAgAvtrAircraftAdvDescentModel._get_ComputeDeltaAltitude_metadata)

    _set_ComputeDeltaAltitude_metadata = { "name" : "ComputeDeltaAltitude",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @ComputeDeltaAltitude.setter
    def ComputeDeltaAltitude(self, newVal:float) -> None:
        """The maximum change in altitude in a computed segment before the data is sampled again."""
        return self._intf.set_property(IAgAvtrAircraftAdvDescentModel._metadata, IAgAvtrAircraftAdvDescentModel._set_ComputeDeltaAltitude_metadata, newVal)

    _GetAsCatalogItem_metadata = { "name" : "GetAsCatalogItem",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    def GetAsCatalogItem(self) -> "IAgAvtrCatalogItem":
        """Get the catalog item interface for this object."""
        return self._intf.invoke(IAgAvtrAircraftAdvDescentModel._metadata, IAgAvtrAircraftAdvDescentModel._GetAsCatalogItem_metadata, out_arg())


agcls.AgClassCatalog.add_catalog_entry("{e668da71-2641-4751-a2eb-880eff768017}", IAgAvtrAircraftAdvDescentModel)
agcls.AgTypeNameMap["IAgAvtrAircraftAdvDescentModel"] = IAgAvtrAircraftAdvDescentModel

class IAgAvtrAircraftBasicLandingModel(object):
    """Interface used to access the basic landing model options for a landing model of an aircraft in the Aviator catalog."""
    _num_methods = 12
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{3e5cc8b6-970b-4412-8ee7-4863224e2ae5}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_LandingSpeed" : 1,
                             "get_LandingSpeedType" : 2,
                             "SetLandingSpeed" : 3,
                             "get_SeaLevelGroundRoll" : 4,
                             "set_SeaLevelGroundRoll" : 5,
                             "get_UseAeroPropFuel" : 6,
                             "set_UseAeroPropFuel" : 7,
                             "get_ScaleFuelFlowByNonStdDensity" : 8,
                             "set_ScaleFuelFlowByNonStdDensity" : 9,
                             "get_FuelFlow" : 10,
                             "set_FuelFlow" : 11,
                             "GetAsCatalogItem" : 12, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrAircraftBasicLandingModel._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrAircraftBasicLandingModel from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrAircraftBasicLandingModel.__dict__ and type(IAgAvtrAircraftBasicLandingModel.__dict__[attrname]) == property:
            return IAgAvtrAircraftBasicLandingModel.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrAircraftBasicLandingModel.")
    
    _get_LandingSpeed_metadata = { "name" : "LandingSpeed",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def LandingSpeed(self) -> float:
        """The landing speed of the aircraft."""
        return self._intf.get_property(IAgAvtrAircraftBasicLandingModel._metadata, IAgAvtrAircraftBasicLandingModel._get_LandingSpeed_metadata)

    _get_LandingSpeedType_metadata = { "name" : "LandingSpeedType",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrAirspeedType),) }
    @property
    def LandingSpeedType(self) -> "AgEAvtrAirspeedType":
        """The landing speed type."""
        return self._intf.get_property(IAgAvtrAircraftBasicLandingModel._metadata, IAgAvtrAircraftBasicLandingModel._get_LandingSpeedType_metadata)

    _SetLandingSpeed_metadata = { "name" : "SetLandingSpeed",
            "arg_types" : (agcom.LONG, agcom.DOUBLE,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrAirspeedType), agmarshall.DOUBLE_arg,) }
    def SetLandingSpeed(self, airspeedType:"AgEAvtrAirspeedType", aispeed:float) -> None:
        """Set the landing speed of the aircraft."""
        return self._intf.invoke(IAgAvtrAircraftBasicLandingModel._metadata, IAgAvtrAircraftBasicLandingModel._SetLandingSpeed_metadata, airspeedType, aispeed)

    _get_SeaLevelGroundRoll_metadata = { "name" : "SeaLevelGroundRoll",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def SeaLevelGroundRoll(self) -> float:
        """The distance the aircraft travels along the ground while decelerating to a stop at sea level."""
        return self._intf.get_property(IAgAvtrAircraftBasicLandingModel._metadata, IAgAvtrAircraftBasicLandingModel._get_SeaLevelGroundRoll_metadata)

    _set_SeaLevelGroundRoll_metadata = { "name" : "SeaLevelGroundRoll",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @SeaLevelGroundRoll.setter
    def SeaLevelGroundRoll(self, newVal:float) -> None:
        """The distance the aircraft travels along the ground while decelerating to a stop at sea level."""
        return self._intf.set_property(IAgAvtrAircraftBasicLandingModel._metadata, IAgAvtrAircraftBasicLandingModel._set_SeaLevelGroundRoll_metadata, newVal)

    _get_UseAeroPropFuel_metadata = { "name" : "UseAeroPropFuel",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def UseAeroPropFuel(self) -> bool:
        """Get whether to use Aero/Propulsion fuel flow."""
        return self._intf.get_property(IAgAvtrAircraftBasicLandingModel._metadata, IAgAvtrAircraftBasicLandingModel._get_UseAeroPropFuel_metadata)

    _set_UseAeroPropFuel_metadata = { "name" : "UseAeroPropFuel",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @UseAeroPropFuel.setter
    def UseAeroPropFuel(self, newVal:bool) -> None:
        """Put whether to use Aero/Propulsion fuel flow."""
        return self._intf.set_property(IAgAvtrAircraftBasicLandingModel._metadata, IAgAvtrAircraftBasicLandingModel._set_UseAeroPropFuel_metadata, newVal)

    _get_ScaleFuelFlowByNonStdDensity_metadata = { "name" : "ScaleFuelFlowByNonStdDensity",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def ScaleFuelFlowByNonStdDensity(self) -> bool:
        """Get whether to scale fuel flow by non std density."""
        return self._intf.get_property(IAgAvtrAircraftBasicLandingModel._metadata, IAgAvtrAircraftBasicLandingModel._get_ScaleFuelFlowByNonStdDensity_metadata)

    _set_ScaleFuelFlowByNonStdDensity_metadata = { "name" : "ScaleFuelFlowByNonStdDensity",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @ScaleFuelFlowByNonStdDensity.setter
    def ScaleFuelFlowByNonStdDensity(self, newVal:bool) -> None:
        """Put whether to scale fuel flow by non std density."""
        return self._intf.set_property(IAgAvtrAircraftBasicLandingModel._metadata, IAgAvtrAircraftBasicLandingModel._set_ScaleFuelFlowByNonStdDensity_metadata, newVal)

    _get_FuelFlow_metadata = { "name" : "FuelFlow",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def FuelFlow(self) -> float:
        """Get the Sea Level Fuel Flow."""
        return self._intf.get_property(IAgAvtrAircraftBasicLandingModel._metadata, IAgAvtrAircraftBasicLandingModel._get_FuelFlow_metadata)

    _set_FuelFlow_metadata = { "name" : "FuelFlow",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @FuelFlow.setter
    def FuelFlow(self, newVal:float) -> None:
        """Put the Sea Level Fuel Flow."""
        return self._intf.set_property(IAgAvtrAircraftBasicLandingModel._metadata, IAgAvtrAircraftBasicLandingModel._set_FuelFlow_metadata, newVal)

    _GetAsCatalogItem_metadata = { "name" : "GetAsCatalogItem",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    def GetAsCatalogItem(self) -> "IAgAvtrCatalogItem":
        """Get the catalog item interface for this object."""
        return self._intf.invoke(IAgAvtrAircraftBasicLandingModel._metadata, IAgAvtrAircraftBasicLandingModel._GetAsCatalogItem_metadata, out_arg())


agcls.AgClassCatalog.add_catalog_entry("{3e5cc8b6-970b-4412-8ee7-4863224e2ae5}", IAgAvtrAircraftBasicLandingModel)
agcls.AgTypeNameMap["IAgAvtrAircraftBasicLandingModel"] = IAgAvtrAircraftBasicLandingModel

class IAgAvtrAircraftAdvLandingModel(object):
    """Interface used to access the advanced landing model options for a landing model of an aircraft in the Aviator catalog."""
    _num_methods = 13
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{bee9a455-0eeb-493f-aff6-93a11be34090}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_LandingSpeedMode" : 1,
                             "set_LandingSpeedMode" : 2,
                             "get_StallSpeedRatio" : 3,
                             "SetStallSpeedRatio" : 4,
                             "get_AngleOfAttack" : 5,
                             "SetAngleOfAttack" : 6,
                             "get_Flaps" : 7,
                             "set_Flaps" : 8,
                             "get_Speedbrakes" : 9,
                             "set_Speedbrakes" : 10,
                             "get_BrakingDecelG" : 11,
                             "set_BrakingDecelG" : 12,
                             "GetAsCatalogItem" : 13, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrAircraftAdvLandingModel._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrAircraftAdvLandingModel from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrAircraftAdvLandingModel.__dict__ and type(IAgAvtrAircraftAdvLandingModel.__dict__[attrname]) == property:
            return IAgAvtrAircraftAdvLandingModel.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrAircraftAdvLandingModel.")
    
    _get_LandingSpeedMode_metadata = { "name" : "LandingSpeedMode",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrTakeoffLandingSpeedMode),) }
    @property
    def LandingSpeedMode(self) -> "AgEAvtrTakeoffLandingSpeedMode":
        """The mode to calculate the aircraft's speed at wheels down."""
        return self._intf.get_property(IAgAvtrAircraftAdvLandingModel._metadata, IAgAvtrAircraftAdvLandingModel._get_LandingSpeedMode_metadata)

    _set_LandingSpeedMode_metadata = { "name" : "LandingSpeedMode",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrTakeoffLandingSpeedMode),) }
    @LandingSpeedMode.setter
    def LandingSpeedMode(self, newVal:"AgEAvtrTakeoffLandingSpeedMode") -> None:
        """The mode to calculate the aircraft's speed at wheels down."""
        return self._intf.set_property(IAgAvtrAircraftAdvLandingModel._metadata, IAgAvtrAircraftAdvLandingModel._set_LandingSpeedMode_metadata, newVal)

    _get_StallSpeedRatio_metadata = { "name" : "StallSpeedRatio",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def StallSpeedRatio(self) -> float:
        """The ratio of the airspeed to the stall speed at wheels down."""
        return self._intf.get_property(IAgAvtrAircraftAdvLandingModel._metadata, IAgAvtrAircraftAdvLandingModel._get_StallSpeedRatio_metadata)

    _SetStallSpeedRatio_metadata = { "name" : "SetStallSpeedRatio",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    def SetStallSpeedRatio(self, stallSpeedRatio:float) -> None:
        """Set the landing speed mode to StallSpeedRatio and specify the stall speed ratio."""
        return self._intf.invoke(IAgAvtrAircraftAdvLandingModel._metadata, IAgAvtrAircraftAdvLandingModel._SetStallSpeedRatio_metadata, stallSpeedRatio)

    _get_AngleOfAttack_metadata = { "name" : "AngleOfAttack",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def AngleOfAttack(self) -> typing.Any:
        """The Angle of Attack at wheels down."""
        return self._intf.get_property(IAgAvtrAircraftAdvLandingModel._metadata, IAgAvtrAircraftAdvLandingModel._get_AngleOfAttack_metadata)

    _SetAngleOfAttack_metadata = { "name" : "SetAngleOfAttack",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    def SetAngleOfAttack(self, angleOfAttack:typing.Any) -> None:
        """Set the landing speed mode to AngleOfAttack and specify the angle of attack"""
        return self._intf.invoke(IAgAvtrAircraftAdvLandingModel._metadata, IAgAvtrAircraftAdvLandingModel._SetAngleOfAttack_metadata, angleOfAttack)

    _get_Flaps_metadata = { "name" : "Flaps",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def Flaps(self) -> float:
        """The extension of the flaps during the landing."""
        return self._intf.get_property(IAgAvtrAircraftAdvLandingModel._metadata, IAgAvtrAircraftAdvLandingModel._get_Flaps_metadata)

    _set_Flaps_metadata = { "name" : "Flaps",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @Flaps.setter
    def Flaps(self, newVal:float) -> None:
        """The extension of the flaps during the landing."""
        return self._intf.set_property(IAgAvtrAircraftAdvLandingModel._metadata, IAgAvtrAircraftAdvLandingModel._set_Flaps_metadata, newVal)

    _get_Speedbrakes_metadata = { "name" : "Speedbrakes",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def Speedbrakes(self) -> float:
        """The extension of the speedbrakes during the landing."""
        return self._intf.get_property(IAgAvtrAircraftAdvLandingModel._metadata, IAgAvtrAircraftAdvLandingModel._get_Speedbrakes_metadata)

    _set_Speedbrakes_metadata = { "name" : "Speedbrakes",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @Speedbrakes.setter
    def Speedbrakes(self, newVal:float) -> None:
        """The extension of the speedbrakes during the landing."""
        return self._intf.set_property(IAgAvtrAircraftAdvLandingModel._metadata, IAgAvtrAircraftAdvLandingModel._set_Speedbrakes_metadata, newVal)

    _get_BrakingDecelG_metadata = { "name" : "BrakingDecelG",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def BrakingDecelG(self) -> float:
        """The deceleration rate, in G, when braking."""
        return self._intf.get_property(IAgAvtrAircraftAdvLandingModel._metadata, IAgAvtrAircraftAdvLandingModel._get_BrakingDecelG_metadata)

    _set_BrakingDecelG_metadata = { "name" : "BrakingDecelG",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @BrakingDecelG.setter
    def BrakingDecelG(self, newVal:float) -> None:
        """The deceleration rate, in G, when braking."""
        return self._intf.set_property(IAgAvtrAircraftAdvLandingModel._metadata, IAgAvtrAircraftAdvLandingModel._set_BrakingDecelG_metadata, newVal)

    _GetAsCatalogItem_metadata = { "name" : "GetAsCatalogItem",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    def GetAsCatalogItem(self) -> "IAgAvtrCatalogItem":
        """Get the catalog item interface for this object."""
        return self._intf.invoke(IAgAvtrAircraftAdvLandingModel._metadata, IAgAvtrAircraftAdvLandingModel._GetAsCatalogItem_metadata, out_arg())


agcls.AgClassCatalog.add_catalog_entry("{bee9a455-0eeb-493f-aff6-93a11be34090}", IAgAvtrAircraftAdvLandingModel)
agcls.AgTypeNameMap["IAgAvtrAircraftAdvLandingModel"] = IAgAvtrAircraftAdvLandingModel

class IAgAvtrAircraftBasicTakeoffModel(object):
    """Interface used to access the basic takeoff model options for a takeoff model of an aircraft in the Aviator catalog."""
    _num_methods = 17
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{981697a5-e6b3-45d7-a3d4-7caec2237c0a}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_TakeoffSpeed" : 1,
                             "get_TakeoffSpeedType" : 2,
                             "SetTakeoffSpeed" : 3,
                             "get_SeaLevelGroundRoll" : 4,
                             "set_SeaLevelGroundRoll" : 5,
                             "get_DepartureSpeed" : 6,
                             "get_DepartureSpeedType" : 7,
                             "SetDepartureSpeed" : 8,
                             "get_UseAeroPropFuel" : 9,
                             "set_UseAeroPropFuel" : 10,
                             "get_ScaleFuelFlowByNonStdDensity" : 11,
                             "set_ScaleFuelFlowByNonStdDensity" : 12,
                             "get_AccelFuelFlow" : 13,
                             "set_AccelFuelFlow" : 14,
                             "get_DepartureFuelFlow" : 15,
                             "set_DepartureFuelFlow" : 16,
                             "GetAsCatalogItem" : 17, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrAircraftBasicTakeoffModel._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrAircraftBasicTakeoffModel from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrAircraftBasicTakeoffModel.__dict__ and type(IAgAvtrAircraftBasicTakeoffModel.__dict__[attrname]) == property:
            return IAgAvtrAircraftBasicTakeoffModel.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrAircraftBasicTakeoffModel.")
    
    _get_TakeoffSpeed_metadata = { "name" : "TakeoffSpeed",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def TakeoffSpeed(self) -> float:
        """The speed to which the aircraft accelerates on its ground roll for takeoff."""
        return self._intf.get_property(IAgAvtrAircraftBasicTakeoffModel._metadata, IAgAvtrAircraftBasicTakeoffModel._get_TakeoffSpeed_metadata)

    _get_TakeoffSpeedType_metadata = { "name" : "TakeoffSpeedType",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrAirspeedType),) }
    @property
    def TakeoffSpeedType(self) -> "AgEAvtrAirspeedType":
        """The takeoff speed type."""
        return self._intf.get_property(IAgAvtrAircraftBasicTakeoffModel._metadata, IAgAvtrAircraftBasicTakeoffModel._get_TakeoffSpeedType_metadata)

    _SetTakeoffSpeed_metadata = { "name" : "SetTakeoffSpeed",
            "arg_types" : (agcom.LONG, agcom.DOUBLE,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrAirspeedType), agmarshall.DOUBLE_arg,) }
    def SetTakeoffSpeed(self, airspeedType:"AgEAvtrAirspeedType", aispeed:float) -> None:
        """Set the takeoff speed of the aircraft."""
        return self._intf.invoke(IAgAvtrAircraftBasicTakeoffModel._metadata, IAgAvtrAircraftBasicTakeoffModel._SetTakeoffSpeed_metadata, airspeedType, aispeed)

    _get_SeaLevelGroundRoll_metadata = { "name" : "SeaLevelGroundRoll",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def SeaLevelGroundRoll(self) -> float:
        """The distance the aircraft travels along the ground while accelerationg to takeoff at sea level."""
        return self._intf.get_property(IAgAvtrAircraftBasicTakeoffModel._metadata, IAgAvtrAircraftBasicTakeoffModel._get_SeaLevelGroundRoll_metadata)

    _set_SeaLevelGroundRoll_metadata = { "name" : "SeaLevelGroundRoll",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @SeaLevelGroundRoll.setter
    def SeaLevelGroundRoll(self, newVal:float) -> None:
        """The distance the aircraft travels along the ground while accelerationg to takeoff at sea level."""
        return self._intf.set_property(IAgAvtrAircraftBasicTakeoffModel._metadata, IAgAvtrAircraftBasicTakeoffModel._set_SeaLevelGroundRoll_metadata, newVal)

    _get_DepartureSpeed_metadata = { "name" : "DepartureSpeed",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def DepartureSpeed(self) -> float:
        """The aircraft's speed upon leaving the ground."""
        return self._intf.get_property(IAgAvtrAircraftBasicTakeoffModel._metadata, IAgAvtrAircraftBasicTakeoffModel._get_DepartureSpeed_metadata)

    _get_DepartureSpeedType_metadata = { "name" : "DepartureSpeedType",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrAirspeedType),) }
    @property
    def DepartureSpeedType(self) -> "AgEAvtrAirspeedType":
        """The departure speed type."""
        return self._intf.get_property(IAgAvtrAircraftBasicTakeoffModel._metadata, IAgAvtrAircraftBasicTakeoffModel._get_DepartureSpeedType_metadata)

    _SetDepartureSpeed_metadata = { "name" : "SetDepartureSpeed",
            "arg_types" : (agcom.LONG, agcom.DOUBLE,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrAirspeedType), agmarshall.DOUBLE_arg,) }
    def SetDepartureSpeed(self, airspeedType:"AgEAvtrAirspeedType", aispeed:float) -> None:
        """Set the departure speed of the aircraft."""
        return self._intf.invoke(IAgAvtrAircraftBasicTakeoffModel._metadata, IAgAvtrAircraftBasicTakeoffModel._SetDepartureSpeed_metadata, airspeedType, aispeed)

    _get_UseAeroPropFuel_metadata = { "name" : "UseAeroPropFuel",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def UseAeroPropFuel(self) -> bool:
        """Get whether to use Aero/Propulsion fuel flow."""
        return self._intf.get_property(IAgAvtrAircraftBasicTakeoffModel._metadata, IAgAvtrAircraftBasicTakeoffModel._get_UseAeroPropFuel_metadata)

    _set_UseAeroPropFuel_metadata = { "name" : "UseAeroPropFuel",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @UseAeroPropFuel.setter
    def UseAeroPropFuel(self, newVal:bool) -> None:
        """Put whether to use Aero/Propulsion fuel flow."""
        return self._intf.set_property(IAgAvtrAircraftBasicTakeoffModel._metadata, IAgAvtrAircraftBasicTakeoffModel._set_UseAeroPropFuel_metadata, newVal)

    _get_ScaleFuelFlowByNonStdDensity_metadata = { "name" : "ScaleFuelFlowByNonStdDensity",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def ScaleFuelFlowByNonStdDensity(self) -> bool:
        """Get whether to scale fuel flow by non std density."""
        return self._intf.get_property(IAgAvtrAircraftBasicTakeoffModel._metadata, IAgAvtrAircraftBasicTakeoffModel._get_ScaleFuelFlowByNonStdDensity_metadata)

    _set_ScaleFuelFlowByNonStdDensity_metadata = { "name" : "ScaleFuelFlowByNonStdDensity",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @ScaleFuelFlowByNonStdDensity.setter
    def ScaleFuelFlowByNonStdDensity(self, newVal:bool) -> None:
        """Put whether to scale fuel flow by non std density."""
        return self._intf.set_property(IAgAvtrAircraftBasicTakeoffModel._metadata, IAgAvtrAircraftBasicTakeoffModel._set_ScaleFuelFlowByNonStdDensity_metadata, newVal)

    _get_AccelFuelFlow_metadata = { "name" : "AccelFuelFlow",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def AccelFuelFlow(self) -> float:
        """The aircraft's fuel flow rate while accelerating during takeoff."""
        return self._intf.get_property(IAgAvtrAircraftBasicTakeoffModel._metadata, IAgAvtrAircraftBasicTakeoffModel._get_AccelFuelFlow_metadata)

    _set_AccelFuelFlow_metadata = { "name" : "AccelFuelFlow",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @AccelFuelFlow.setter
    def AccelFuelFlow(self, newVal:float) -> None:
        """The aircraft's fuel flow rate while accelerating during takeoff."""
        return self._intf.set_property(IAgAvtrAircraftBasicTakeoffModel._metadata, IAgAvtrAircraftBasicTakeoffModel._set_AccelFuelFlow_metadata, newVal)

    _get_DepartureFuelFlow_metadata = { "name" : "DepartureFuelFlow",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def DepartureFuelFlow(self) -> float:
        """The aircraft's fuel flow rate at departure speed."""
        return self._intf.get_property(IAgAvtrAircraftBasicTakeoffModel._metadata, IAgAvtrAircraftBasicTakeoffModel._get_DepartureFuelFlow_metadata)

    _set_DepartureFuelFlow_metadata = { "name" : "DepartureFuelFlow",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @DepartureFuelFlow.setter
    def DepartureFuelFlow(self, newVal:float) -> None:
        """The aircraft's fuel flow rate at departure speed."""
        return self._intf.set_property(IAgAvtrAircraftBasicTakeoffModel._metadata, IAgAvtrAircraftBasicTakeoffModel._set_DepartureFuelFlow_metadata, newVal)

    _GetAsCatalogItem_metadata = { "name" : "GetAsCatalogItem",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    def GetAsCatalogItem(self) -> "IAgAvtrCatalogItem":
        """Get the catalog item interface for this object."""
        return self._intf.invoke(IAgAvtrAircraftBasicTakeoffModel._metadata, IAgAvtrAircraftBasicTakeoffModel._GetAsCatalogItem_metadata, out_arg())


agcls.AgClassCatalog.add_catalog_entry("{981697a5-e6b3-45d7-a3d4-7caec2237c0a}", IAgAvtrAircraftBasicTakeoffModel)
agcls.AgTypeNameMap["IAgAvtrAircraftBasicTakeoffModel"] = IAgAvtrAircraftBasicTakeoffModel

class IAgAvtrAircraftAdvTakeoffModel(object):
    """Interface used to access the advanced takeoff model options for a takeoff model of an aircraft in the Aviator catalog."""
    _num_methods = 16
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{3290c530-62d6-49d7-8d89-69f0c3e6148d}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_TakeoffSpeedMode" : 1,
                             "set_TakeoffSpeedMode" : 2,
                             "get_StallSpeedRatio" : 3,
                             "SetStallSpeedRatio" : 4,
                             "get_AngleOfAttack" : 5,
                             "SetAngleOfAttack" : 6,
                             "get_Flaps" : 7,
                             "set_Flaps" : 8,
                             "get_DepartureSpeedMode" : 9,
                             "set_DepartureSpeedMode" : 10,
                             "get_DepartureSpeedLimit" : 11,
                             "get_DepartureSpeedLimitType" : 12,
                             "SetDepartureSpeedLimit" : 13,
                             "get_UseAfterburner" : 14,
                             "set_UseAfterburner" : 15,
                             "GetAsCatalogItem" : 16, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrAircraftAdvTakeoffModel._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrAircraftAdvTakeoffModel from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrAircraftAdvTakeoffModel.__dict__ and type(IAgAvtrAircraftAdvTakeoffModel.__dict__[attrname]) == property:
            return IAgAvtrAircraftAdvTakeoffModel.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrAircraftAdvTakeoffModel.")
    
    _get_TakeoffSpeedMode_metadata = { "name" : "TakeoffSpeedMode",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrTakeoffLandingSpeedMode),) }
    @property
    def TakeoffSpeedMode(self) -> "AgEAvtrTakeoffLandingSpeedMode":
        """The mode to calculate the aircraft's airspeed upon leaving the ground."""
        return self._intf.get_property(IAgAvtrAircraftAdvTakeoffModel._metadata, IAgAvtrAircraftAdvTakeoffModel._get_TakeoffSpeedMode_metadata)

    _set_TakeoffSpeedMode_metadata = { "name" : "TakeoffSpeedMode",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrTakeoffLandingSpeedMode),) }
    @TakeoffSpeedMode.setter
    def TakeoffSpeedMode(self, newVal:"AgEAvtrTakeoffLandingSpeedMode") -> None:
        """The mode to calculate the aircraft's  airspeed upon leaving the ground."""
        return self._intf.set_property(IAgAvtrAircraftAdvTakeoffModel._metadata, IAgAvtrAircraftAdvTakeoffModel._set_TakeoffSpeedMode_metadata, newVal)

    _get_StallSpeedRatio_metadata = { "name" : "StallSpeedRatio",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def StallSpeedRatio(self) -> float:
        """The ratio of the airspeed to the stall speed upon leaving the ground."""
        return self._intf.get_property(IAgAvtrAircraftAdvTakeoffModel._metadata, IAgAvtrAircraftAdvTakeoffModel._get_StallSpeedRatio_metadata)

    _SetStallSpeedRatio_metadata = { "name" : "SetStallSpeedRatio",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    def SetStallSpeedRatio(self, stallSpeedRatio:float) -> None:
        """Set the takeoff speed mode to StallSpeedRatio and specify the stall speed ratio."""
        return self._intf.invoke(IAgAvtrAircraftAdvTakeoffModel._metadata, IAgAvtrAircraftAdvTakeoffModel._SetStallSpeedRatio_metadata, stallSpeedRatio)

    _get_AngleOfAttack_metadata = { "name" : "AngleOfAttack",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def AngleOfAttack(self) -> typing.Any:
        """The Angle of Attack upon leaving the ground."""
        return self._intf.get_property(IAgAvtrAircraftAdvTakeoffModel._metadata, IAgAvtrAircraftAdvTakeoffModel._get_AngleOfAttack_metadata)

    _SetAngleOfAttack_metadata = { "name" : "SetAngleOfAttack",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    def SetAngleOfAttack(self, angleOfAttack:typing.Any) -> None:
        """Set the takeoff speed mode to AngleOfAttack and specify the angle of attack"""
        return self._intf.invoke(IAgAvtrAircraftAdvTakeoffModel._metadata, IAgAvtrAircraftAdvTakeoffModel._SetAngleOfAttack_metadata, angleOfAttack)

    _get_Flaps_metadata = { "name" : "Flaps",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def Flaps(self) -> float:
        """The extension of the flaps during takeoff."""
        return self._intf.get_property(IAgAvtrAircraftAdvTakeoffModel._metadata, IAgAvtrAircraftAdvTakeoffModel._get_Flaps_metadata)

    _set_Flaps_metadata = { "name" : "Flaps",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @Flaps.setter
    def Flaps(self, newVal:float) -> None:
        """The extension of the flaps during takeoff."""
        return self._intf.set_property(IAgAvtrAircraftAdvTakeoffModel._metadata, IAgAvtrAircraftAdvTakeoffModel._set_Flaps_metadata, newVal)

    _get_DepartureSpeedMode_metadata = { "name" : "DepartureSpeedMode",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrDepartureSpeedMode),) }
    @property
    def DepartureSpeedMode(self) -> "AgEAvtrDepartureSpeedMode":
        """The mode to calculate the airspeed upon leaving the ground."""
        return self._intf.get_property(IAgAvtrAircraftAdvTakeoffModel._metadata, IAgAvtrAircraftAdvTakeoffModel._get_DepartureSpeedMode_metadata)

    _set_DepartureSpeedMode_metadata = { "name" : "DepartureSpeedMode",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrDepartureSpeedMode),) }
    @DepartureSpeedMode.setter
    def DepartureSpeedMode(self, newVal:"AgEAvtrDepartureSpeedMode") -> None:
        """The mode to calculate the airspeed upon leaving the ground."""
        return self._intf.set_property(IAgAvtrAircraftAdvTakeoffModel._metadata, IAgAvtrAircraftAdvTakeoffModel._set_DepartureSpeedMode_metadata, newVal)

    _get_DepartureSpeedLimit_metadata = { "name" : "DepartureSpeedLimit",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def DepartureSpeedLimit(self) -> float:
        """The aircraft's maximum airspeed upon leaving the ground."""
        return self._intf.get_property(IAgAvtrAircraftAdvTakeoffModel._metadata, IAgAvtrAircraftAdvTakeoffModel._get_DepartureSpeedLimit_metadata)

    _get_DepartureSpeedLimitType_metadata = { "name" : "DepartureSpeedLimitType",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrAirspeedType),) }
    @property
    def DepartureSpeedLimitType(self) -> "AgEAvtrAirspeedType":
        """The departure speed limim type."""
        return self._intf.get_property(IAgAvtrAircraftAdvTakeoffModel._metadata, IAgAvtrAircraftAdvTakeoffModel._get_DepartureSpeedLimitType_metadata)

    _SetDepartureSpeedLimit_metadata = { "name" : "SetDepartureSpeedLimit",
            "arg_types" : (agcom.LONG, agcom.DOUBLE,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrAirspeedType), agmarshall.DOUBLE_arg,) }
    def SetDepartureSpeedLimit(self, airspeedType:"AgEAvtrAirspeedType", aispeed:float) -> None:
        """Set the departure speed limit of the aircraft."""
        return self._intf.invoke(IAgAvtrAircraftAdvTakeoffModel._metadata, IAgAvtrAircraftAdvTakeoffModel._SetDepartureSpeedLimit_metadata, airspeedType, aispeed)

    _get_UseAfterburner_metadata = { "name" : "UseAfterburner",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def UseAfterburner(self) -> bool:
        """Opt whether to use the afterburner if it is possible."""
        return self._intf.get_property(IAgAvtrAircraftAdvTakeoffModel._metadata, IAgAvtrAircraftAdvTakeoffModel._get_UseAfterburner_metadata)

    _set_UseAfterburner_metadata = { "name" : "UseAfterburner",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @UseAfterburner.setter
    def UseAfterburner(self, newVal:bool) -> None:
        """Opt whether to use the afterburner if it is possible."""
        return self._intf.set_property(IAgAvtrAircraftAdvTakeoffModel._metadata, IAgAvtrAircraftAdvTakeoffModel._set_UseAfterburner_metadata, newVal)

    _GetAsCatalogItem_metadata = { "name" : "GetAsCatalogItem",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    def GetAsCatalogItem(self) -> "IAgAvtrCatalogItem":
        """Get the catalog item interface for this object."""
        return self._intf.invoke(IAgAvtrAircraftAdvTakeoffModel._metadata, IAgAvtrAircraftAdvTakeoffModel._GetAsCatalogItem_metadata, out_arg())


agcls.AgClassCatalog.add_catalog_entry("{3290c530-62d6-49d7-8d89-69f0c3e6148d}", IAgAvtrAircraftAdvTakeoffModel)
agcls.AgTypeNameMap["IAgAvtrAircraftAdvTakeoffModel"] = IAgAvtrAircraftAdvTakeoffModel

class IAgAvtrAircraftVTOLModel(object):
    """Interface used to access the options for a VTOL performance model of an aircraft."""
    _num_methods = 25
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{e9a1ecac-84c0-4fed-bbfc-ae61a6b5d745}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_MaxHoverAltitude" : 1,
                             "set_MaxHoverAltitude" : 2,
                             "get_UseAeroPropFuel" : 3,
                             "set_UseAeroPropFuel" : 4,
                             "get_ScaleFuelFlowByNonStdDensity" : 5,
                             "set_ScaleFuelFlowByNonStdDensity" : 6,
                             "get_HoverFuel" : 7,
                             "set_HoverFuel" : 8,
                             "get_HeadingRate" : 9,
                             "set_HeadingRate" : 10,
                             "get_HeadingTransitionTime" : 11,
                             "set_HeadingTransitionTime" : 12,
                             "get_VerticalRate" : 13,
                             "set_VerticalRate" : 14,
                             "get_VerticalTransitionTime" : 15,
                             "set_VerticalTransitionTime" : 16,
                             "get_TranslationRate" : 17,
                             "set_TranslationRate" : 18,
                             "get_TranslationTransitionTime" : 19,
                             "set_TranslationTransitionTime" : 20,
                             "get_ForwardFlightAirspeed" : 21,
                             "get_ForwardFlightAirspeedType" : 22,
                             "SetForwardFlightAirspeed" : 23,
                             "get_ForwardFlightTransitionTime" : 24,
                             "set_ForwardFlightTransitionTime" : 25, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrAircraftVTOLModel._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrAircraftVTOLModel from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrAircraftVTOLModel.__dict__ and type(IAgAvtrAircraftVTOLModel.__dict__[attrname]) == property:
            return IAgAvtrAircraftVTOLModel.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrAircraftVTOLModel.")
    
    _get_MaxHoverAltitude_metadata = { "name" : "MaxHoverAltitude",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def MaxHoverAltitude(self) -> float:
        """The maximum altitude at which the aircraft is capable of hovering."""
        return self._intf.get_property(IAgAvtrAircraftVTOLModel._metadata, IAgAvtrAircraftVTOLModel._get_MaxHoverAltitude_metadata)

    _set_MaxHoverAltitude_metadata = { "name" : "MaxHoverAltitude",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @MaxHoverAltitude.setter
    def MaxHoverAltitude(self, newVal:float) -> None:
        """The maximum altitude at which the aircraft is capable of hovering."""
        return self._intf.set_property(IAgAvtrAircraftVTOLModel._metadata, IAgAvtrAircraftVTOLModel._set_MaxHoverAltitude_metadata, newVal)

    _get_UseAeroPropFuel_metadata = { "name" : "UseAeroPropFuel",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def UseAeroPropFuel(self) -> bool:
        """Get whether to use Aero/Propulsion fuel flow."""
        return self._intf.get_property(IAgAvtrAircraftVTOLModel._metadata, IAgAvtrAircraftVTOLModel._get_UseAeroPropFuel_metadata)

    _set_UseAeroPropFuel_metadata = { "name" : "UseAeroPropFuel",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @UseAeroPropFuel.setter
    def UseAeroPropFuel(self, newVal:bool) -> None:
        """Put whether to use Aero/Propulsion fuel flow."""
        return self._intf.set_property(IAgAvtrAircraftVTOLModel._metadata, IAgAvtrAircraftVTOLModel._set_UseAeroPropFuel_metadata, newVal)

    _get_ScaleFuelFlowByNonStdDensity_metadata = { "name" : "ScaleFuelFlowByNonStdDensity",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def ScaleFuelFlowByNonStdDensity(self) -> bool:
        """Get whether to scale fuel flow by non std density."""
        return self._intf.get_property(IAgAvtrAircraftVTOLModel._metadata, IAgAvtrAircraftVTOLModel._get_ScaleFuelFlowByNonStdDensity_metadata)

    _set_ScaleFuelFlowByNonStdDensity_metadata = { "name" : "ScaleFuelFlowByNonStdDensity",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @ScaleFuelFlowByNonStdDensity.setter
    def ScaleFuelFlowByNonStdDensity(self, newVal:bool) -> None:
        """Put whether to scale fuel flow by non std density."""
        return self._intf.set_property(IAgAvtrAircraftVTOLModel._metadata, IAgAvtrAircraftVTOLModel._set_ScaleFuelFlowByNonStdDensity_metadata, newVal)

    _get_HoverFuel_metadata = { "name" : "HoverFuel",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def HoverFuel(self) -> float:
        """The aircraft's fuel flow rate while hovering."""
        return self._intf.get_property(IAgAvtrAircraftVTOLModel._metadata, IAgAvtrAircraftVTOLModel._get_HoverFuel_metadata)

    _set_HoverFuel_metadata = { "name" : "HoverFuel",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @HoverFuel.setter
    def HoverFuel(self, newVal:float) -> None:
        """The aircraft's fuel flow rate while hovering."""
        return self._intf.set_property(IAgAvtrAircraftVTOLModel._metadata, IAgAvtrAircraftVTOLModel._set_HoverFuel_metadata, newVal)

    _get_HeadingRate_metadata = { "name" : "HeadingRate",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def HeadingRate(self) -> typing.Any:
        """The rate at which the aircraft can change heading while hovering."""
        return self._intf.get_property(IAgAvtrAircraftVTOLModel._metadata, IAgAvtrAircraftVTOLModel._get_HeadingRate_metadata)

    _set_HeadingRate_metadata = { "name" : "HeadingRate",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @HeadingRate.setter
    def HeadingRate(self, newVal:typing.Any) -> None:
        """The rate at which the aircraft can change heading while hovering."""
        return self._intf.set_property(IAgAvtrAircraftVTOLModel._metadata, IAgAvtrAircraftVTOLModel._set_HeadingRate_metadata, newVal)

    _get_HeadingTransitionTime_metadata = { "name" : "HeadingTransitionTime",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def HeadingTransitionTime(self) -> float:
        """The time required to transition from another maneuvering mode to heading change maneuver mode."""
        return self._intf.get_property(IAgAvtrAircraftVTOLModel._metadata, IAgAvtrAircraftVTOLModel._get_HeadingTransitionTime_metadata)

    _set_HeadingTransitionTime_metadata = { "name" : "HeadingTransitionTime",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @HeadingTransitionTime.setter
    def HeadingTransitionTime(self, newVal:float) -> None:
        """The time required to transition from another maneuvering mode to heading change maneuver mode."""
        return self._intf.set_property(IAgAvtrAircraftVTOLModel._metadata, IAgAvtrAircraftVTOLModel._set_HeadingTransitionTime_metadata, newVal)

    _get_VerticalRate_metadata = { "name" : "VerticalRate",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def VerticalRate(self) -> float:
        """The aircraft's vertical rate."""
        return self._intf.get_property(IAgAvtrAircraftVTOLModel._metadata, IAgAvtrAircraftVTOLModel._get_VerticalRate_metadata)

    _set_VerticalRate_metadata = { "name" : "VerticalRate",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @VerticalRate.setter
    def VerticalRate(self, newVal:float) -> None:
        """The aircraft's vertical rate."""
        return self._intf.set_property(IAgAvtrAircraftVTOLModel._metadata, IAgAvtrAircraftVTOLModel._set_VerticalRate_metadata, newVal)

    _get_VerticalTransitionTime_metadata = { "name" : "VerticalTransitionTime",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def VerticalTransitionTime(self) -> float:
        """The time required to transition from another maneuvering mode to vertical maneuver mode."""
        return self._intf.get_property(IAgAvtrAircraftVTOLModel._metadata, IAgAvtrAircraftVTOLModel._get_VerticalTransitionTime_metadata)

    _set_VerticalTransitionTime_metadata = { "name" : "VerticalTransitionTime",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @VerticalTransitionTime.setter
    def VerticalTransitionTime(self, newVal:float) -> None:
        """The time required to transition from another maneuvering mode to vertical maneuver mode."""
        return self._intf.set_property(IAgAvtrAircraftVTOLModel._metadata, IAgAvtrAircraftVTOLModel._set_VerticalTransitionTime_metadata, newVal)

    _get_TranslationRate_metadata = { "name" : "TranslationRate",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def TranslationRate(self) -> float:
        """The rate at which the aircraft can translate while hovering."""
        return self._intf.get_property(IAgAvtrAircraftVTOLModel._metadata, IAgAvtrAircraftVTOLModel._get_TranslationRate_metadata)

    _set_TranslationRate_metadata = { "name" : "TranslationRate",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @TranslationRate.setter
    def TranslationRate(self, newVal:float) -> None:
        """The rate at which the aircraft can translate while hovering."""
        return self._intf.set_property(IAgAvtrAircraftVTOLModel._metadata, IAgAvtrAircraftVTOLModel._set_TranslationRate_metadata, newVal)

    _get_TranslationTransitionTime_metadata = { "name" : "TranslationTransitionTime",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def TranslationTransitionTime(self) -> float:
        """The time required to transition from another maneuvering mode to translation maneuver mode."""
        return self._intf.get_property(IAgAvtrAircraftVTOLModel._metadata, IAgAvtrAircraftVTOLModel._get_TranslationTransitionTime_metadata)

    _set_TranslationTransitionTime_metadata = { "name" : "TranslationTransitionTime",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @TranslationTransitionTime.setter
    def TranslationTransitionTime(self, newVal:float) -> None:
        """The time required to transition from another maneuvering mode to translation maneuver mode."""
        return self._intf.set_property(IAgAvtrAircraftVTOLModel._metadata, IAgAvtrAircraftVTOLModel._set_TranslationTransitionTime_metadata, newVal)

    _get_ForwardFlightAirspeed_metadata = { "name" : "ForwardFlightAirspeed",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def ForwardFlightAirspeed(self) -> float:
        """The speed at which the aircraft can begin forward flight."""
        return self._intf.get_property(IAgAvtrAircraftVTOLModel._metadata, IAgAvtrAircraftVTOLModel._get_ForwardFlightAirspeed_metadata)

    _get_ForwardFlightAirspeedType_metadata = { "name" : "ForwardFlightAirspeedType",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrAirspeedType),) }
    @property
    def ForwardFlightAirspeedType(self) -> "AgEAvtrAirspeedType":
        """The forward flight airspeed type."""
        return self._intf.get_property(IAgAvtrAircraftVTOLModel._metadata, IAgAvtrAircraftVTOLModel._get_ForwardFlightAirspeedType_metadata)

    _SetForwardFlightAirspeed_metadata = { "name" : "SetForwardFlightAirspeed",
            "arg_types" : (agcom.LONG, agcom.DOUBLE,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrAirspeedType), agmarshall.DOUBLE_arg,) }
    def SetForwardFlightAirspeed(self, airspeedType:"AgEAvtrAirspeedType", airspeed:float) -> None:
        """Set the speed at which the aircraft can begin forward flight."""
        return self._intf.invoke(IAgAvtrAircraftVTOLModel._metadata, IAgAvtrAircraftVTOLModel._SetForwardFlightAirspeed_metadata, airspeedType, airspeed)

    _get_ForwardFlightTransitionTime_metadata = { "name" : "ForwardFlightTransitionTime",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def ForwardFlightTransitionTime(self) -> float:
        """The time required to transition from another maneuvering mode to forward flight at sea level."""
        return self._intf.get_property(IAgAvtrAircraftVTOLModel._metadata, IAgAvtrAircraftVTOLModel._get_ForwardFlightTransitionTime_metadata)

    _set_ForwardFlightTransitionTime_metadata = { "name" : "ForwardFlightTransitionTime",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @ForwardFlightTransitionTime.setter
    def ForwardFlightTransitionTime(self, newVal:float) -> None:
        """The time required to transition from another maneuvering mode to forward flight at sea level."""
        return self._intf.set_property(IAgAvtrAircraftVTOLModel._metadata, IAgAvtrAircraftVTOLModel._set_ForwardFlightTransitionTime_metadata, newVal)


agcls.AgClassCatalog.add_catalog_entry("{e9a1ecac-84c0-4fed-bbfc-ae61a6b5d745}", IAgAvtrAircraftVTOLModel)
agcls.AgTypeNameMap["IAgAvtrAircraftVTOLModel"] = IAgAvtrAircraftVTOLModel

class IAgAvtrAircraftTerrainFollow(object):
    """Interface used to access the TerrainFollow options for an aircraft in the Aviator catalog."""
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{293c033c-5053-4a55-bfbb-fd8ea210749f}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "GetTerrainFollowByName" : 1,
                             "GetAsCatalogItem" : 2, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrAircraftTerrainFollow._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrAircraftTerrainFollow from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrAircraftTerrainFollow.__dict__ and type(IAgAvtrAircraftTerrainFollow.__dict__[attrname]) == property:
            return IAgAvtrAircraftTerrainFollow.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrAircraftTerrainFollow.")
    
    _GetTerrainFollowByName_metadata = { "name" : "GetTerrainFollowByName",
            "arg_types" : (agcom.BSTR, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.AgInterface_out_arg,) }
    def GetTerrainFollowByName(self, name:str) -> "IAgAvtrAircraftTerrainFollowModel":
        """Gets the TerrainFollow model with the given name."""
        return self._intf.invoke(IAgAvtrAircraftTerrainFollow._metadata, IAgAvtrAircraftTerrainFollow._GetTerrainFollowByName_metadata, name, out_arg())

    _GetAsCatalogItem_metadata = { "name" : "GetAsCatalogItem",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    def GetAsCatalogItem(self) -> "IAgAvtrCatalogItem":
        """Get the catalog item interface for this object."""
        return self._intf.invoke(IAgAvtrAircraftTerrainFollow._metadata, IAgAvtrAircraftTerrainFollow._GetAsCatalogItem_metadata, out_arg())


agcls.AgClassCatalog.add_catalog_entry("{293c033c-5053-4a55-bfbb-fd8ea210749f}", IAgAvtrAircraftTerrainFollow)
agcls.AgTypeNameMap["IAgAvtrAircraftTerrainFollow"] = IAgAvtrAircraftTerrainFollow

class IAgAvtrPerformanceModelOptions(object):
    """Interface used to change the active performance model in a phase for a given model type."""
    _num_methods = 8
    _vtable_offset = IDispatch._vtable_offset + IDispatch._num_methods
    _metadata = {
        "uuid" : "{DE05DB32-36E7-4C14-916E-C626C4E084FD}",
        "vtable_reference" : IDispatch._vtable_offset + IDispatch._num_methods - 1,
        "method_offsets" : { "LinkToCatalog" : 1,
                             "CopyFromCatalog" : 2,
                             "CreateNew" : 3,
                             "Rename" : 4,
                             "Delete" : 5,
                             "get_Name" : 6,
                             "get_IsLinkedToCatalog" : 7,
                             "get_Properties" : 8, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrPerformanceModelOptions._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrPerformanceModelOptions from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrPerformanceModelOptions.__dict__ and type(IAgAvtrPerformanceModelOptions.__dict__[attrname]) == property:
            return IAgAvtrPerformanceModelOptions.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrPerformanceModelOptions.")
    
    _LinkToCatalog_metadata = { "name" : "LinkToCatalog",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    def LinkToCatalog(self, name:str) -> None:
        """Link to the performance model in the catalog with the given name."""
        return self._intf.invoke(IAgAvtrPerformanceModelOptions._metadata, IAgAvtrPerformanceModelOptions._LinkToCatalog_metadata, name)

    _CopyFromCatalog_metadata = { "name" : "CopyFromCatalog",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    def CopyFromCatalog(self, name:str) -> None:
        """Create a copy of the performance model in the catalog with the given name."""
        return self._intf.invoke(IAgAvtrPerformanceModelOptions._metadata, IAgAvtrPerformanceModelOptions._CopyFromCatalog_metadata, name)

    _CreateNew_metadata = { "name" : "CreateNew",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    def CreateNew(self, type:str) -> None:
        """Create a new performance model of the given type."""
        return self._intf.invoke(IAgAvtrPerformanceModelOptions._metadata, IAgAvtrPerformanceModelOptions._CreateNew_metadata, type)

    _Rename_metadata = { "name" : "Rename",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    def Rename(self, type:str) -> None:
        """Rename the performance model."""
        return self._intf.invoke(IAgAvtrPerformanceModelOptions._metadata, IAgAvtrPerformanceModelOptions._Rename_metadata, type)

    _Delete_metadata = { "name" : "Delete",
            "arg_types" : (),
            "marshallers" : () }
    def Delete(self) -> None:
        """Delete the performance model."""
        return self._intf.invoke(IAgAvtrPerformanceModelOptions._metadata, IAgAvtrPerformanceModelOptions._Delete_metadata, )

    _get_Name_metadata = { "name" : "Name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def Name(self) -> str:
        """Get the name of the performance model."""
        return self._intf.get_property(IAgAvtrPerformanceModelOptions._metadata, IAgAvtrPerformanceModelOptions._get_Name_metadata)

    _get_IsLinkedToCatalog_metadata = { "name" : "IsLinkedToCatalog",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def IsLinkedToCatalog(self) -> bool:
        """Get whether the performance model is linked to the catalog."""
        return self._intf.get_property(IAgAvtrPerformanceModelOptions._metadata, IAgAvtrPerformanceModelOptions._get_IsLinkedToCatalog_metadata)

    _get_Properties_metadata = { "name" : "Properties",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def Properties(self) -> "IAgAvtrPerformanceModel":
        """Get the properties of the performance model."""
        return self._intf.get_property(IAgAvtrPerformanceModelOptions._metadata, IAgAvtrPerformanceModelOptions._get_Properties_metadata)


agcls.AgClassCatalog.add_catalog_entry("{DE05DB32-36E7-4C14-916E-C626C4E084FD}", IAgAvtrPerformanceModelOptions)
agcls.AgTypeNameMap["IAgAvtrPerformanceModelOptions"] = IAgAvtrPerformanceModelOptions

class IAgAvtrAdvFixedWingTool(object):
    """Interface used to access the options for the Advanced Fixed Wing Tool of an aircraft."""
    _num_methods = 41
    _vtable_offset = IDispatch._vtable_offset + IDispatch._num_methods
    _metadata = {
        "uuid" : "{3722BD33-A1BE-48AD-AF6F-4AC40B19FBBA}",
        "vtable_reference" : IDispatch._vtable_offset + IDispatch._num_methods - 1,
        "method_offsets" : { "get_WingArea" : 1,
                             "set_WingArea" : 2,
                             "get_FlapsArea" : 3,
                             "set_FlapsArea" : 4,
                             "get_SpeedbrakesArea" : 5,
                             "set_SpeedbrakesArea" : 6,
                             "get_MaxAltitude" : 7,
                             "set_MaxAltitude" : 8,
                             "get_MaxMach" : 9,
                             "set_MaxMach" : 10,
                             "get_MaxEAS" : 11,
                             "set_MaxEAS" : 12,
                             "get_MinLoadFactor" : 13,
                             "set_MinLoadFactor" : 14,
                             "get_MaxLoadFactor" : 15,
                             "set_MaxLoadFactor" : 16,
                             "get_UseMaxTemperatureLimit" : 17,
                             "set_UseMaxTemperatureLimit" : 18,
                             "get_MaxTemperature" : 19,
                             "set_MaxTemperature" : 20,
                             "get_CacheAeroData" : 21,
                             "set_CacheAeroData" : 22,
                             "get_CacheFuelFlow" : 23,
                             "set_CacheFuelFlow" : 24,
                             "get_AeroStrategy" : 25,
                             "set_AeroStrategy" : 26,
                             "get_AeroModeAsExternal" : 27,
                             "get_AeroModeAsSubsonic" : 28,
                             "get_AeroModeAsSubSuperHypersonic" : 29,
                             "get_AeroModeAsSupersonic" : 30,
                             "get_PowerplantStrategy" : 31,
                             "set_PowerplantStrategy" : 32,
                             "get_PowerplantModeAsElectric" : 33,
                             "get_PowerplantModeAsExternal" : 34,
                             "get_PowerplantModeAsPiston" : 35,
                             "get_PowerplantModeAsTurboprop" : 36,
                             "get_PowerplantModeAsEmpiricalJetEngine" : 37,
                             "CreateAllPerfModels" : 38,
                             "get_PowerplantModeAsBasicTurbofan" : 39,
                             "get_PowerplantModeAsBasicTurbojet" : 40,
                             "get_PowerplantModeAsSubSuperHypersonic" : 41, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrAdvFixedWingTool._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrAdvFixedWingTool from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrAdvFixedWingTool.__dict__ and type(IAgAvtrAdvFixedWingTool.__dict__[attrname]) == property:
            return IAgAvtrAdvFixedWingTool.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrAdvFixedWingTool.")
    
    _get_WingArea_metadata = { "name" : "WingArea",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def WingArea(self) -> float:
        """The total surface area of the wing."""
        return self._intf.get_property(IAgAvtrAdvFixedWingTool._metadata, IAgAvtrAdvFixedWingTool._get_WingArea_metadata)

    _set_WingArea_metadata = { "name" : "WingArea",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @WingArea.setter
    def WingArea(self, newVal:float) -> None:
        """The total surface area of the wing."""
        return self._intf.set_property(IAgAvtrAdvFixedWingTool._metadata, IAgAvtrAdvFixedWingTool._set_WingArea_metadata, newVal)

    _get_FlapsArea_metadata = { "name" : "FlapsArea",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def FlapsArea(self) -> float:
        """The total surface area of the flaps."""
        return self._intf.get_property(IAgAvtrAdvFixedWingTool._metadata, IAgAvtrAdvFixedWingTool._get_FlapsArea_metadata)

    _set_FlapsArea_metadata = { "name" : "FlapsArea",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @FlapsArea.setter
    def FlapsArea(self, newVal:float) -> None:
        """The total surface area of the flaps."""
        return self._intf.set_property(IAgAvtrAdvFixedWingTool._metadata, IAgAvtrAdvFixedWingTool._set_FlapsArea_metadata, newVal)

    _get_SpeedbrakesArea_metadata = { "name" : "SpeedbrakesArea",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def SpeedbrakesArea(self) -> float:
        """The total surface area of the speedbrakes."""
        return self._intf.get_property(IAgAvtrAdvFixedWingTool._metadata, IAgAvtrAdvFixedWingTool._get_SpeedbrakesArea_metadata)

    _set_SpeedbrakesArea_metadata = { "name" : "SpeedbrakesArea",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @SpeedbrakesArea.setter
    def SpeedbrakesArea(self, newVal:float) -> None:
        """The total surface area of the speedbrakes."""
        return self._intf.set_property(IAgAvtrAdvFixedWingTool._metadata, IAgAvtrAdvFixedWingTool._set_SpeedbrakesArea_metadata, newVal)

    _get_MaxAltitude_metadata = { "name" : "MaxAltitude",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def MaxAltitude(self) -> float:
        """The maximum altitude of the aircraft."""
        return self._intf.get_property(IAgAvtrAdvFixedWingTool._metadata, IAgAvtrAdvFixedWingTool._get_MaxAltitude_metadata)

    _set_MaxAltitude_metadata = { "name" : "MaxAltitude",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @MaxAltitude.setter
    def MaxAltitude(self, newVal:float) -> None:
        """The maximum altitude of the aircraft."""
        return self._intf.set_property(IAgAvtrAdvFixedWingTool._metadata, IAgAvtrAdvFixedWingTool._set_MaxAltitude_metadata, newVal)

    _get_MaxMach_metadata = { "name" : "MaxMach",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def MaxMach(self) -> float:
        """The maximum mach number of the aircraft."""
        return self._intf.get_property(IAgAvtrAdvFixedWingTool._metadata, IAgAvtrAdvFixedWingTool._get_MaxMach_metadata)

    _set_MaxMach_metadata = { "name" : "MaxMach",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @MaxMach.setter
    def MaxMach(self, newVal:float) -> None:
        """The maximum mach number of the aircraft."""
        return self._intf.set_property(IAgAvtrAdvFixedWingTool._metadata, IAgAvtrAdvFixedWingTool._set_MaxMach_metadata, newVal)

    _get_MaxEAS_metadata = { "name" : "MaxEAS",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def MaxEAS(self) -> float:
        """The maximum equivalent airspeed of the aircraft."""
        return self._intf.get_property(IAgAvtrAdvFixedWingTool._metadata, IAgAvtrAdvFixedWingTool._get_MaxEAS_metadata)

    _set_MaxEAS_metadata = { "name" : "MaxEAS",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @MaxEAS.setter
    def MaxEAS(self, newVal:float) -> None:
        """The maximum equivalent airspeed of the aircraft."""
        return self._intf.set_property(IAgAvtrAdvFixedWingTool._metadata, IAgAvtrAdvFixedWingTool._set_MaxEAS_metadata, newVal)

    _get_MinLoadFactor_metadata = { "name" : "MinLoadFactor",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def MinLoadFactor(self) -> float:
        """The minimum load factor the aircraft can bear."""
        return self._intf.get_property(IAgAvtrAdvFixedWingTool._metadata, IAgAvtrAdvFixedWingTool._get_MinLoadFactor_metadata)

    _set_MinLoadFactor_metadata = { "name" : "MinLoadFactor",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @MinLoadFactor.setter
    def MinLoadFactor(self, newVal:float) -> None:
        """The minimum load factor the aircraft can bear."""
        return self._intf.set_property(IAgAvtrAdvFixedWingTool._metadata, IAgAvtrAdvFixedWingTool._set_MinLoadFactor_metadata, newVal)

    _get_MaxLoadFactor_metadata = { "name" : "MaxLoadFactor",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def MaxLoadFactor(self) -> float:
        """The maximum load factor the aircraft can bear."""
        return self._intf.get_property(IAgAvtrAdvFixedWingTool._metadata, IAgAvtrAdvFixedWingTool._get_MaxLoadFactor_metadata)

    _set_MaxLoadFactor_metadata = { "name" : "MaxLoadFactor",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @MaxLoadFactor.setter
    def MaxLoadFactor(self, newVal:float) -> None:
        """The maximum load factor the aircraft can bear."""
        return self._intf.set_property(IAgAvtrAdvFixedWingTool._metadata, IAgAvtrAdvFixedWingTool._set_MaxLoadFactor_metadata, newVal)

    _get_UseMaxTemperatureLimit_metadata = { "name" : "UseMaxTemperatureLimit",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def UseMaxTemperatureLimit(self) -> bool:
        """The option to limit the maximum speed of the aircraft so the specified temperature is not exceeded."""
        return self._intf.get_property(IAgAvtrAdvFixedWingTool._metadata, IAgAvtrAdvFixedWingTool._get_UseMaxTemperatureLimit_metadata)

    _set_UseMaxTemperatureLimit_metadata = { "name" : "UseMaxTemperatureLimit",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @UseMaxTemperatureLimit.setter
    def UseMaxTemperatureLimit(self, newVal:bool) -> None:
        """The option to limit the maximum speed of the aircraft so the specified temperature is not exceeded."""
        return self._intf.set_property(IAgAvtrAdvFixedWingTool._metadata, IAgAvtrAdvFixedWingTool._set_UseMaxTemperatureLimit_metadata, newVal)

    _get_MaxTemperature_metadata = { "name" : "MaxTemperature",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def MaxTemperature(self) -> float:
        """The maximum total temperature limit of the aircraft."""
        return self._intf.get_property(IAgAvtrAdvFixedWingTool._metadata, IAgAvtrAdvFixedWingTool._get_MaxTemperature_metadata)

    _set_MaxTemperature_metadata = { "name" : "MaxTemperature",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @MaxTemperature.setter
    def MaxTemperature(self, newVal:float) -> None:
        """The maximum total temperature limit of the aircraft."""
        return self._intf.set_property(IAgAvtrAdvFixedWingTool._metadata, IAgAvtrAdvFixedWingTool._set_MaxTemperature_metadata, newVal)

    _get_CacheAeroData_metadata = { "name" : "CacheAeroData",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def CacheAeroData(self) -> bool:
        """The option to store intermediate results for aerodynamics calculations."""
        return self._intf.get_property(IAgAvtrAdvFixedWingTool._metadata, IAgAvtrAdvFixedWingTool._get_CacheAeroData_metadata)

    _set_CacheAeroData_metadata = { "name" : "CacheAeroData",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @CacheAeroData.setter
    def CacheAeroData(self, newVal:bool) -> None:
        """The option to store intermediate results for aerodynamics calculations."""
        return self._intf.set_property(IAgAvtrAdvFixedWingTool._metadata, IAgAvtrAdvFixedWingTool._set_CacheAeroData_metadata, newVal)

    _get_CacheFuelFlow_metadata = { "name" : "CacheFuelFlow",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def CacheFuelFlow(self) -> bool:
        """The option to store intermediate results for fuel flow calculations."""
        return self._intf.get_property(IAgAvtrAdvFixedWingTool._metadata, IAgAvtrAdvFixedWingTool._get_CacheFuelFlow_metadata)

    _set_CacheFuelFlow_metadata = { "name" : "CacheFuelFlow",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @CacheFuelFlow.setter
    def CacheFuelFlow(self, newVal:bool) -> None:
        """The option to store intermediate results for fuel flow calculations."""
        return self._intf.set_property(IAgAvtrAdvFixedWingTool._metadata, IAgAvtrAdvFixedWingTool._set_CacheFuelFlow_metadata, newVal)

    _get_AeroStrategy_metadata = { "name" : "AeroStrategy",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrAdvFixedWingAeroStrategy),) }
    @property
    def AeroStrategy(self) -> "AgEAvtrAdvFixedWingAeroStrategy":
        """The aerodynamic strategy type."""
        return self._intf.get_property(IAgAvtrAdvFixedWingTool._metadata, IAgAvtrAdvFixedWingTool._get_AeroStrategy_metadata)

    _set_AeroStrategy_metadata = { "name" : "AeroStrategy",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrAdvFixedWingAeroStrategy),) }
    @AeroStrategy.setter
    def AeroStrategy(self, newVal:"AgEAvtrAdvFixedWingAeroStrategy") -> None:
        """The aerodynamic strategy type."""
        return self._intf.set_property(IAgAvtrAdvFixedWingTool._metadata, IAgAvtrAdvFixedWingTool._set_AeroStrategy_metadata, newVal)

    _get_AeroModeAsExternal_metadata = { "name" : "AeroModeAsExternal",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def AeroModeAsExternal(self) -> "IAgAvtrAdvFixedWingExternalAero":
        """Get the interface for an Extern File Aerodynamics strategy."""
        return self._intf.get_property(IAgAvtrAdvFixedWingTool._metadata, IAgAvtrAdvFixedWingTool._get_AeroModeAsExternal_metadata)

    _get_AeroModeAsSubsonic_metadata = { "name" : "AeroModeAsSubsonic",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def AeroModeAsSubsonic(self) -> "IAgAvtrAdvFixedWingSubsonicAero":
        """Get the interface for a Subsonic Aerodynamics strategy."""
        return self._intf.get_property(IAgAvtrAdvFixedWingTool._metadata, IAgAvtrAdvFixedWingTool._get_AeroModeAsSubsonic_metadata)

    _get_AeroModeAsSubSuperHypersonic_metadata = { "name" : "AeroModeAsSubSuperHypersonic",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def AeroModeAsSubSuperHypersonic(self) -> "IAgAvtrAdvFixedWingSubSuperHypersonicAero":
        """Get the interface for a Sub/Super/Hypersonic Aerodynamics strategy."""
        return self._intf.get_property(IAgAvtrAdvFixedWingTool._metadata, IAgAvtrAdvFixedWingTool._get_AeroModeAsSubSuperHypersonic_metadata)

    _get_AeroModeAsSupersonic_metadata = { "name" : "AeroModeAsSupersonic",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def AeroModeAsSupersonic(self) -> "IAgAvtrAdvFixedWingSupersonicAero":
        """Get the interface for a Supersonic Aerodynamics strategy."""
        return self._intf.get_property(IAgAvtrAdvFixedWingTool._metadata, IAgAvtrAdvFixedWingTool._get_AeroModeAsSupersonic_metadata)

    _get_PowerplantStrategy_metadata = { "name" : "PowerplantStrategy",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrAdvFixedWingPowerplantStrategy),) }
    @property
    def PowerplantStrategy(self) -> "AgEAvtrAdvFixedWingPowerplantStrategy":
        """The powerplant strategy type."""
        return self._intf.get_property(IAgAvtrAdvFixedWingTool._metadata, IAgAvtrAdvFixedWingTool._get_PowerplantStrategy_metadata)

    _set_PowerplantStrategy_metadata = { "name" : "PowerplantStrategy",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrAdvFixedWingPowerplantStrategy),) }
    @PowerplantStrategy.setter
    def PowerplantStrategy(self, newVal:"AgEAvtrAdvFixedWingPowerplantStrategy") -> None:
        """The powerplant  strategy type."""
        return self._intf.set_property(IAgAvtrAdvFixedWingTool._metadata, IAgAvtrAdvFixedWingTool._set_PowerplantStrategy_metadata, newVal)

    _get_PowerplantModeAsElectric_metadata = { "name" : "PowerplantModeAsElectric",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def PowerplantModeAsElectric(self) -> "IAgAvtrAdvFixedWingElectricPowerplant":
        """Get the interface for an Electric Powerplant strategy."""
        return self._intf.get_property(IAgAvtrAdvFixedWingTool._metadata, IAgAvtrAdvFixedWingTool._get_PowerplantModeAsElectric_metadata)

    _get_PowerplantModeAsExternal_metadata = { "name" : "PowerplantModeAsExternal",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def PowerplantModeAsExternal(self) -> "IAgAvtrAdvFixedWingExternalProp":
        """Get the interface for an External Prop File Powerplant strategy."""
        return self._intf.get_property(IAgAvtrAdvFixedWingTool._metadata, IAgAvtrAdvFixedWingTool._get_PowerplantModeAsExternal_metadata)

    _get_PowerplantModeAsPiston_metadata = { "name" : "PowerplantModeAsPiston",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def PowerplantModeAsPiston(self) -> "IAgAvtrAdvFixedWingPistonPowerplant":
        """Get the interface for a Piston Powerplant strategy."""
        return self._intf.get_property(IAgAvtrAdvFixedWingTool._metadata, IAgAvtrAdvFixedWingTool._get_PowerplantModeAsPiston_metadata)

    _get_PowerplantModeAsTurboprop_metadata = { "name" : "PowerplantModeAsTurboprop",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def PowerplantModeAsTurboprop(self) -> "IAgAvtrAdvFixedWingTurbopropPowerplant":
        """Get the interface for a Turboprop Powerplant strategy."""
        return self._intf.get_property(IAgAvtrAdvFixedWingTool._metadata, IAgAvtrAdvFixedWingTool._get_PowerplantModeAsTurboprop_metadata)

    _get_PowerplantModeAsEmpiricalJetEngine_metadata = { "name" : "PowerplantModeAsEmpiricalJetEngine",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def PowerplantModeAsEmpiricalJetEngine(self) -> "IAgAvtrAdvFixedWingEmpiricalJetEngine":
        """Get the interface for an Empirical Jet Engine Powerplant strategy."""
        return self._intf.get_property(IAgAvtrAdvFixedWingTool._metadata, IAgAvtrAdvFixedWingTool._get_PowerplantModeAsEmpiricalJetEngine_metadata)

    _CreateAllPerfModels_metadata = { "name" : "CreateAllPerfModels",
            "arg_types" : (agcom.BSTR, agcom.VARIANT_BOOL, agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.VARIANT_BOOL_arg, agmarshall.VARIANT_BOOL_arg,) }
    def CreateAllPerfModels(self, name:str, overwrite:bool, makeDefault:bool) -> None:
        """Create a set of advanced performance models for the aircraft with the given name."""
        return self._intf.invoke(IAgAvtrAdvFixedWingTool._metadata, IAgAvtrAdvFixedWingTool._CreateAllPerfModels_metadata, name, overwrite, makeDefault)

    _get_PowerplantModeAsBasicTurbofan_metadata = { "name" : "PowerplantModeAsBasicTurbofan",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def PowerplantModeAsBasicTurbofan(self) -> "IAgAvtrAdvFixedWingTurbofanBasicABProp":
        """Get the interface for a Turbofan - Basic w/ AB Powerplant strategy."""
        return self._intf.get_property(IAgAvtrAdvFixedWingTool._metadata, IAgAvtrAdvFixedWingTool._get_PowerplantModeAsBasicTurbofan_metadata)

    _get_PowerplantModeAsBasicTurbojet_metadata = { "name" : "PowerplantModeAsBasicTurbojet",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def PowerplantModeAsBasicTurbojet(self) -> "IAgAvtrAdvFixedWingTurbojetBasicABProp":
        """Get the interface for a Turbojet - Basic w/ AB Powerplant strategy."""
        return self._intf.get_property(IAgAvtrAdvFixedWingTool._metadata, IAgAvtrAdvFixedWingTool._get_PowerplantModeAsBasicTurbojet_metadata)

    _get_PowerplantModeAsSubSuperHypersonic_metadata = { "name" : "PowerplantModeAsSubSuperHypersonic",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def PowerplantModeAsSubSuperHypersonic(self) -> "IAgAvtrAdvFixedWingSubSuperHypersonicProp":
        """Get the interface for a Sub/Super/Hypersoinc Powerplant strategy."""
        return self._intf.get_property(IAgAvtrAdvFixedWingTool._metadata, IAgAvtrAdvFixedWingTool._get_PowerplantModeAsSubSuperHypersonic_metadata)


agcls.AgClassCatalog.add_catalog_entry("{3722BD33-A1BE-48AD-AF6F-4AC40B19FBBA}", IAgAvtrAdvFixedWingTool)
agcls.AgTypeNameMap["IAgAvtrAdvFixedWingTool"] = IAgAvtrAdvFixedWingTool

class IAgAvtrAdvFixedWingExternalAero(object):
    """Interface used to access the options for an external file aerodynamic strategy in the advanced fixed wing tool."""
    _num_methods = 3
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{7A440104-B346-417B-98CB-7718A5A95848}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_Filepath" : 1,
                             "SetFilepath" : 2,
                             "get_IsValid" : 3, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrAdvFixedWingExternalAero._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrAdvFixedWingExternalAero from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrAdvFixedWingExternalAero.__dict__ and type(IAgAvtrAdvFixedWingExternalAero.__dict__[attrname]) == property:
            return IAgAvtrAdvFixedWingExternalAero.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrAdvFixedWingExternalAero.")
    
    _get_Filepath_metadata = { "name" : "Filepath",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def Filepath(self) -> str:
        """The filepath for the external aero file."""
        return self._intf.get_property(IAgAvtrAdvFixedWingExternalAero._metadata, IAgAvtrAdvFixedWingExternalAero._get_Filepath_metadata)

    _SetFilepath_metadata = { "name" : "SetFilepath",
            "arg_types" : (agcom.BSTR, POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.BSTR_arg,) }
    def SetFilepath(self, filepath:str) -> str:
        """Set the filepath for the external aero file."""
        return self._intf.invoke(IAgAvtrAdvFixedWingExternalAero._metadata, IAgAvtrAdvFixedWingExternalAero._SetFilepath_metadata, filepath, out_arg())

    _get_IsValid_metadata = { "name" : "IsValid",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def IsValid(self) -> bool:
        """Check whether the filepath is valid."""
        return self._intf.get_property(IAgAvtrAdvFixedWingExternalAero._metadata, IAgAvtrAdvFixedWingExternalAero._get_IsValid_metadata)


agcls.AgClassCatalog.add_catalog_entry("{7A440104-B346-417B-98CB-7718A5A95848}", IAgAvtrAdvFixedWingExternalAero)
agcls.AgTypeNameMap["IAgAvtrAdvFixedWingExternalAero"] = IAgAvtrAdvFixedWingExternalAero

class IAgAvtrAdvFixedWingSubsonicAero(object):
    """Interface used to access the options for the subsonic aerodynamic strategy in the advanced fixed wing tool."""
    _num_methods = 12
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{9e4abf77-2ca1-4130-8ff8-e13d216d722b}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_GeometryType" : 1,
                             "set_GeometryType" : 2,
                             "get_GeometryModeAsBasic" : 3,
                             "get_GeometryModeAsVariable" : 4,
                             "get_MaxAOA" : 5,
                             "set_MaxAOA" : 6,
                             "get_Cd0" : 7,
                             "set_Cd0" : 8,
                             "get_MachDivergence" : 9,
                             "set_MachDivergence" : 10,
                             "get_TransonicMachDragFactor" : 11,
                             "set_TransonicMachDragFactor" : 12, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrAdvFixedWingSubsonicAero._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrAdvFixedWingSubsonicAero from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrAdvFixedWingSubsonicAero.__dict__ and type(IAgAvtrAdvFixedWingSubsonicAero.__dict__[attrname]) == property:
            return IAgAvtrAdvFixedWingSubsonicAero.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrAdvFixedWingSubsonicAero.")
    
    _get_GeometryType_metadata = { "name" : "GeometryType",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrAdvFixedWingGeometry),) }
    @property
    def GeometryType(self) -> "AgEAvtrAdvFixedWingGeometry":
        """The type of wing geometry for the aircraft."""
        return self._intf.get_property(IAgAvtrAdvFixedWingSubsonicAero._metadata, IAgAvtrAdvFixedWingSubsonicAero._get_GeometryType_metadata)

    _set_GeometryType_metadata = { "name" : "GeometryType",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrAdvFixedWingGeometry),) }
    @GeometryType.setter
    def GeometryType(self, newVal:"AgEAvtrAdvFixedWingGeometry") -> None:
        """The type of wing geometry for the aircraft."""
        return self._intf.set_property(IAgAvtrAdvFixedWingSubsonicAero._metadata, IAgAvtrAdvFixedWingSubsonicAero._set_GeometryType_metadata, newVal)

    _get_GeometryModeAsBasic_metadata = { "name" : "GeometryModeAsBasic",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def GeometryModeAsBasic(self) -> "IAgAvtrAdvFixedWingGeometryBasic":
        """The options for a basic geometry wing."""
        return self._intf.get_property(IAgAvtrAdvFixedWingSubsonicAero._metadata, IAgAvtrAdvFixedWingSubsonicAero._get_GeometryModeAsBasic_metadata)

    _get_GeometryModeAsVariable_metadata = { "name" : "GeometryModeAsVariable",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def GeometryModeAsVariable(self) -> "IAgAvtrAdvFixedWingGeometryVariable":
        """The options for a variable geometry wing."""
        return self._intf.get_property(IAgAvtrAdvFixedWingSubsonicAero._metadata, IAgAvtrAdvFixedWingSubsonicAero._get_GeometryModeAsVariable_metadata)

    _get_MaxAOA_metadata = { "name" : "MaxAOA",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def MaxAOA(self) -> typing.Any:
        """The maximum angle of attack possible."""
        return self._intf.get_property(IAgAvtrAdvFixedWingSubsonicAero._metadata, IAgAvtrAdvFixedWingSubsonicAero._get_MaxAOA_metadata)

    _set_MaxAOA_metadata = { "name" : "MaxAOA",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @MaxAOA.setter
    def MaxAOA(self, newVal:typing.Any) -> None:
        """The maximum angle of attack possible."""
        return self._intf.set_property(IAgAvtrAdvFixedWingSubsonicAero._metadata, IAgAvtrAdvFixedWingSubsonicAero._set_MaxAOA_metadata, newVal)

    _get_Cd0_metadata = { "name" : "Cd0",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def Cd0(self) -> float:
        """The parasitic drag coefficient of the aircraft when flying at a speed less than the Mach Divergence."""
        return self._intf.get_property(IAgAvtrAdvFixedWingSubsonicAero._metadata, IAgAvtrAdvFixedWingSubsonicAero._get_Cd0_metadata)

    _set_Cd0_metadata = { "name" : "Cd0",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @Cd0.setter
    def Cd0(self, newVal:float) -> None:
        """The parasitic drag coefficient of the aircraft when flying at a speed less than the Mach Divergence."""
        return self._intf.set_property(IAgAvtrAdvFixedWingSubsonicAero._metadata, IAgAvtrAdvFixedWingSubsonicAero._set_Cd0_metadata, newVal)

    _get_MachDivergence_metadata = { "name" : "MachDivergence",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def MachDivergence(self) -> float:
        """The speed at which the aircraft begins to experience air compression."""
        return self._intf.get_property(IAgAvtrAdvFixedWingSubsonicAero._metadata, IAgAvtrAdvFixedWingSubsonicAero._get_MachDivergence_metadata)

    _set_MachDivergence_metadata = { "name" : "MachDivergence",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @MachDivergence.setter
    def MachDivergence(self, newVal:float) -> None:
        """The speed at which the aircraft begins to experience air compression."""
        return self._intf.set_property(IAgAvtrAdvFixedWingSubsonicAero._metadata, IAgAvtrAdvFixedWingSubsonicAero._set_MachDivergence_metadata, newVal)

    _get_TransonicMachDragFactor_metadata = { "name" : "TransonicMachDragFactor",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def TransonicMachDragFactor(self) -> float:
        """A factor applied to the aircraft's parasitic drag coefficient when it is flying faster than the Mach Divergence."""
        return self._intf.get_property(IAgAvtrAdvFixedWingSubsonicAero._metadata, IAgAvtrAdvFixedWingSubsonicAero._get_TransonicMachDragFactor_metadata)

    _set_TransonicMachDragFactor_metadata = { "name" : "TransonicMachDragFactor",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @TransonicMachDragFactor.setter
    def TransonicMachDragFactor(self, newVal:float) -> None:
        """A factor applied to the aircraft's parasitic drag coefficient when it is flying faster than the Mach Divergence."""
        return self._intf.set_property(IAgAvtrAdvFixedWingSubsonicAero._metadata, IAgAvtrAdvFixedWingSubsonicAero._set_TransonicMachDragFactor_metadata, newVal)


agcls.AgClassCatalog.add_catalog_entry("{9e4abf77-2ca1-4130-8ff8-e13d216d722b}", IAgAvtrAdvFixedWingSubsonicAero)
agcls.AgTypeNameMap["IAgAvtrAdvFixedWingSubsonicAero"] = IAgAvtrAdvFixedWingSubsonicAero

class IAgAvtrAdvFixedWingSubSuperHypersonicAero(object):
    """Interface used to access the options for the Sub/Super/Hypersonic aerodynamic strategy in the advanced fixed wing tool."""
    _num_methods = 16
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{c229225f-d608-457a-a100-7ef7a8618825}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_MaxAOA" : 1,
                             "set_MaxAOA" : 2,
                             "get_TransonicMinMach" : 3,
                             "set_TransonicMinMach" : 4,
                             "get_TransonicMaxMach" : 5,
                             "set_TransonicMaxMach" : 6,
                             "get_SuperHyperMachTransition" : 7,
                             "set_SuperHyperMachTransition" : 8,
                             "get_LeadingEdgeFrontalAreaRatio" : 9,
                             "set_LeadingEdgeFrontalAreaRatio" : 10,
                             "get_SubsonicAspectRatio" : 11,
                             "set_SubsonicAspectRatio" : 12,
                             "get_TransonicMachDragFactor" : 13,
                             "set_TransonicMachDragFactor" : 14,
                             "get_WaveDragFactor" : 15,
                             "set_WaveDragFactor" : 16, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrAdvFixedWingSubSuperHypersonicAero._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrAdvFixedWingSubSuperHypersonicAero from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrAdvFixedWingSubSuperHypersonicAero.__dict__ and type(IAgAvtrAdvFixedWingSubSuperHypersonicAero.__dict__[attrname]) == property:
            return IAgAvtrAdvFixedWingSubSuperHypersonicAero.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrAdvFixedWingSubSuperHypersonicAero.")
    
    _get_MaxAOA_metadata = { "name" : "MaxAOA",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def MaxAOA(self) -> typing.Any:
        """The maximum angle of attack possible."""
        return self._intf.get_property(IAgAvtrAdvFixedWingSubSuperHypersonicAero._metadata, IAgAvtrAdvFixedWingSubSuperHypersonicAero._get_MaxAOA_metadata)

    _set_MaxAOA_metadata = { "name" : "MaxAOA",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @MaxAOA.setter
    def MaxAOA(self, newVal:typing.Any) -> None:
        """The maximum angle of attack possible."""
        return self._intf.set_property(IAgAvtrAdvFixedWingSubSuperHypersonicAero._metadata, IAgAvtrAdvFixedWingSubSuperHypersonicAero._set_MaxAOA_metadata, newVal)

    _get_TransonicMinMach_metadata = { "name" : "TransonicMinMach",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def TransonicMinMach(self) -> float:
        """The minimum speed at which the aircraft begins to experience air compression."""
        return self._intf.get_property(IAgAvtrAdvFixedWingSubSuperHypersonicAero._metadata, IAgAvtrAdvFixedWingSubSuperHypersonicAero._get_TransonicMinMach_metadata)

    _set_TransonicMinMach_metadata = { "name" : "TransonicMinMach",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @TransonicMinMach.setter
    def TransonicMinMach(self, newVal:float) -> None:
        """The minimum speed at which the aircraft begins to experience air compression."""
        return self._intf.set_property(IAgAvtrAdvFixedWingSubSuperHypersonicAero._metadata, IAgAvtrAdvFixedWingSubSuperHypersonicAero._set_TransonicMinMach_metadata, newVal)

    _get_TransonicMaxMach_metadata = { "name" : "TransonicMaxMach",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def TransonicMaxMach(self) -> float:
        """The maximum speed, below supersonic, at which the aircraft begins to experience air compression."""
        return self._intf.get_property(IAgAvtrAdvFixedWingSubSuperHypersonicAero._metadata, IAgAvtrAdvFixedWingSubSuperHypersonicAero._get_TransonicMaxMach_metadata)

    _set_TransonicMaxMach_metadata = { "name" : "TransonicMaxMach",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @TransonicMaxMach.setter
    def TransonicMaxMach(self, newVal:float) -> None:
        """The maximum speed, below supersonic, at which the aircraft begins to experience air compression."""
        return self._intf.set_property(IAgAvtrAdvFixedWingSubSuperHypersonicAero._metadata, IAgAvtrAdvFixedWingSubSuperHypersonicAero._set_TransonicMaxMach_metadata, newVal)

    _get_SuperHyperMachTransition_metadata = { "name" : "SuperHyperMachTransition",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def SuperHyperMachTransition(self) -> float:
        """The minimum speed at which the air flow will be treated as hypersonic."""
        return self._intf.get_property(IAgAvtrAdvFixedWingSubSuperHypersonicAero._metadata, IAgAvtrAdvFixedWingSubSuperHypersonicAero._get_SuperHyperMachTransition_metadata)

    _set_SuperHyperMachTransition_metadata = { "name" : "SuperHyperMachTransition",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @SuperHyperMachTransition.setter
    def SuperHyperMachTransition(self, newVal:float) -> None:
        """The minimum speed at which the air flow will be treated as hypersonic."""
        return self._intf.set_property(IAgAvtrAdvFixedWingSubSuperHypersonicAero._metadata, IAgAvtrAdvFixedWingSubSuperHypersonicAero._set_SuperHyperMachTransition_metadata, newVal)

    _get_LeadingEdgeFrontalAreaRatio_metadata = { "name" : "LeadingEdgeFrontalAreaRatio",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def LeadingEdgeFrontalAreaRatio(self) -> float:
        """The frontal face thickness of the aircraft's wings at their leading edge."""
        return self._intf.get_property(IAgAvtrAdvFixedWingSubSuperHypersonicAero._metadata, IAgAvtrAdvFixedWingSubSuperHypersonicAero._get_LeadingEdgeFrontalAreaRatio_metadata)

    _set_LeadingEdgeFrontalAreaRatio_metadata = { "name" : "LeadingEdgeFrontalAreaRatio",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @LeadingEdgeFrontalAreaRatio.setter
    def LeadingEdgeFrontalAreaRatio(self, newVal:float) -> None:
        """The frontal face thickness of the aircraft's wings at their leading edge."""
        return self._intf.set_property(IAgAvtrAdvFixedWingSubSuperHypersonicAero._metadata, IAgAvtrAdvFixedWingSubSuperHypersonicAero._set_LeadingEdgeFrontalAreaRatio_metadata, newVal)

    _get_SubsonicAspectRatio_metadata = { "name" : "SubsonicAspectRatio",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def SubsonicAspectRatio(self) -> float:
        """The aircraft's wingspan squared divided by the wing area."""
        return self._intf.get_property(IAgAvtrAdvFixedWingSubSuperHypersonicAero._metadata, IAgAvtrAdvFixedWingSubSuperHypersonicAero._get_SubsonicAspectRatio_metadata)

    _set_SubsonicAspectRatio_metadata = { "name" : "SubsonicAspectRatio",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @SubsonicAspectRatio.setter
    def SubsonicAspectRatio(self, newVal:float) -> None:
        """The aircraft's wingspan squared divided by the wing area."""
        return self._intf.set_property(IAgAvtrAdvFixedWingSubSuperHypersonicAero._metadata, IAgAvtrAdvFixedWingSubSuperHypersonicAero._set_SubsonicAspectRatio_metadata, newVal)

    _get_TransonicMachDragFactor_metadata = { "name" : "TransonicMachDragFactor",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def TransonicMachDragFactor(self) -> float:
        """A factor applied to the aircraft's parasitic drag coefficient when it is flying between the Transonic Min Mach and Transonic Mach Drag Factor speeds."""
        return self._intf.get_property(IAgAvtrAdvFixedWingSubSuperHypersonicAero._metadata, IAgAvtrAdvFixedWingSubSuperHypersonicAero._get_TransonicMachDragFactor_metadata)

    _set_TransonicMachDragFactor_metadata = { "name" : "TransonicMachDragFactor",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @TransonicMachDragFactor.setter
    def TransonicMachDragFactor(self, newVal:float) -> None:
        """A factor applied to the aircraft's parasitic drag coefficient when it is flying between the Transonic Min Mach and Transonic Mach Drag Factor speeds."""
        return self._intf.set_property(IAgAvtrAdvFixedWingSubSuperHypersonicAero._metadata, IAgAvtrAdvFixedWingSubSuperHypersonicAero._set_TransonicMachDragFactor_metadata, newVal)

    _get_WaveDragFactor_metadata = { "name" : "WaveDragFactor",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def WaveDragFactor(self) -> float:
        """A scalar value that models drag produced by shock waves at or near the aircraft's critical Mach number."""
        return self._intf.get_property(IAgAvtrAdvFixedWingSubSuperHypersonicAero._metadata, IAgAvtrAdvFixedWingSubSuperHypersonicAero._get_WaveDragFactor_metadata)

    _set_WaveDragFactor_metadata = { "name" : "WaveDragFactor",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @WaveDragFactor.setter
    def WaveDragFactor(self, newVal:float) -> None:
        """A scalar value that models drag produced by shock waves at or near the aircraft's critical Mach number."""
        return self._intf.set_property(IAgAvtrAdvFixedWingSubSuperHypersonicAero._metadata, IAgAvtrAdvFixedWingSubSuperHypersonicAero._set_WaveDragFactor_metadata, newVal)


agcls.AgClassCatalog.add_catalog_entry("{c229225f-d608-457a-a100-7ef7a8618825}", IAgAvtrAdvFixedWingSubSuperHypersonicAero)
agcls.AgTypeNameMap["IAgAvtrAdvFixedWingSubSuperHypersonicAero"] = IAgAvtrAdvFixedWingSubSuperHypersonicAero

class IAgAvtrAdvFixedWingSubSuperHypersonicProp(object):
    """Interface used to access the options for the Sub/Super/Hypersonic powerplant strategy in the advanced fixed wing tool."""
    _num_methods = 25
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{1a204443-6853-4897-b530-6e7231607545}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_TurbineMode" : 1,
                             "set_TurbineMode" : 2,
                             "get_TurbineModeAsTurbojet" : 3,
                             "get_TurbineModeAsTurbofan" : 4,
                             "get_RamjetMode" : 5,
                             "set_RamjetMode" : 6,
                             "get_RamjetModeAsBasic" : 7,
                             "get_ScramjetMode" : 8,
                             "set_ScramjetMode" : 9,
                             "get_ScramjetModeAsBasic" : 10,
                             "get_TurbineRefArea" : 11,
                             "get_RamjetRefArea" : 12,
                             "get_ScramjetRefArea" : 13,
                             "get_MaxTurbineCompressionTemp" : 14,
                             "set_MaxTurbineCompressionTemp" : 15,
                             "get_MaxTurbineBurnerTemp" : 16,
                             "set_MaxTurbineBurnerTemp" : 17,
                             "get_CanRamCompressorPressureRatio" : 18,
                             "set_CanRamCompressorPressureRatio" : 19,
                             "get_MustRamCompressorPressureRatio" : 20,
                             "set_MustRamCompressorPressureRatio" : 21,
                             "get_MaxRamScramCompressionTemperature" : 22,
                             "set_MaxRamScramCompressionTemperature" : 23,
                             "get_MaxRamScramBurnerTotalTemperature" : 24,
                             "set_MaxRamScramBurnerTotalTemperature" : 25, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrAdvFixedWingSubSuperHypersonicProp._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrAdvFixedWingSubSuperHypersonicProp from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrAdvFixedWingSubSuperHypersonicProp.__dict__ and type(IAgAvtrAdvFixedWingSubSuperHypersonicProp.__dict__[attrname]) == property:
            return IAgAvtrAdvFixedWingSubSuperHypersonicProp.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrAdvFixedWingSubSuperHypersonicProp.")
    
    _get_TurbineMode_metadata = { "name" : "TurbineMode",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrTurbineMode),) }
    @property
    def TurbineMode(self) -> "AgEAvtrTurbineMode":
        """The turbine operating mode."""
        return self._intf.get_property(IAgAvtrAdvFixedWingSubSuperHypersonicProp._metadata, IAgAvtrAdvFixedWingSubSuperHypersonicProp._get_TurbineMode_metadata)

    _set_TurbineMode_metadata = { "name" : "TurbineMode",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrTurbineMode),) }
    @TurbineMode.setter
    def TurbineMode(self, newVal:"AgEAvtrTurbineMode") -> None:
        """The turbine operating mode."""
        return self._intf.set_property(IAgAvtrAdvFixedWingSubSuperHypersonicProp._metadata, IAgAvtrAdvFixedWingSubSuperHypersonicProp._set_TurbineMode_metadata, newVal)

    _get_TurbineModeAsTurbojet_metadata = { "name" : "TurbineModeAsTurbojet",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def TurbineModeAsTurbojet(self) -> "IAgAvtrAdvFixedWingTurbojetBasicABProp":
        """Get the interface for a Turbojet Basic w/ AB tubrine mode."""
        return self._intf.get_property(IAgAvtrAdvFixedWingSubSuperHypersonicProp._metadata, IAgAvtrAdvFixedWingSubSuperHypersonicProp._get_TurbineModeAsTurbojet_metadata)

    _get_TurbineModeAsTurbofan_metadata = { "name" : "TurbineModeAsTurbofan",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def TurbineModeAsTurbofan(self) -> "IAgAvtrAdvFixedWingTurbofanBasicABProp":
        """Get the interface for a Turbojet Basic w/ AB tubrine mode."""
        return self._intf.get_property(IAgAvtrAdvFixedWingSubSuperHypersonicProp._metadata, IAgAvtrAdvFixedWingSubSuperHypersonicProp._get_TurbineModeAsTurbofan_metadata)

    _get_RamjetMode_metadata = { "name" : "RamjetMode",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrRamjetMode),) }
    @property
    def RamjetMode(self) -> "AgEAvtrRamjetMode":
        """The ramjet operating mode."""
        return self._intf.get_property(IAgAvtrAdvFixedWingSubSuperHypersonicProp._metadata, IAgAvtrAdvFixedWingSubSuperHypersonicProp._get_RamjetMode_metadata)

    _set_RamjetMode_metadata = { "name" : "RamjetMode",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrRamjetMode),) }
    @RamjetMode.setter
    def RamjetMode(self, newVal:"AgEAvtrRamjetMode") -> None:
        """The ramjet operating mode."""
        return self._intf.set_property(IAgAvtrAdvFixedWingSubSuperHypersonicProp._metadata, IAgAvtrAdvFixedWingSubSuperHypersonicProp._set_RamjetMode_metadata, newVal)

    _get_RamjetModeAsBasic_metadata = { "name" : "RamjetModeAsBasic",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def RamjetModeAsBasic(self) -> "IAgAvtrAdvFixedWingRamjetBasic":
        """Get the interface for a Ramjet - Basic."""
        return self._intf.get_property(IAgAvtrAdvFixedWingSubSuperHypersonicProp._metadata, IAgAvtrAdvFixedWingSubSuperHypersonicProp._get_RamjetModeAsBasic_metadata)

    _get_ScramjetMode_metadata = { "name" : "ScramjetMode",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrScramjetMode),) }
    @property
    def ScramjetMode(self) -> "AgEAvtrScramjetMode":
        """The scramjet operating mode."""
        return self._intf.get_property(IAgAvtrAdvFixedWingSubSuperHypersonicProp._metadata, IAgAvtrAdvFixedWingSubSuperHypersonicProp._get_ScramjetMode_metadata)

    _set_ScramjetMode_metadata = { "name" : "ScramjetMode",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrScramjetMode),) }
    @ScramjetMode.setter
    def ScramjetMode(self, newVal:"AgEAvtrScramjetMode") -> None:
        """The scramjet operating mode."""
        return self._intf.set_property(IAgAvtrAdvFixedWingSubSuperHypersonicProp._metadata, IAgAvtrAdvFixedWingSubSuperHypersonicProp._set_ScramjetMode_metadata, newVal)

    _get_ScramjetModeAsBasic_metadata = { "name" : "ScramjetModeAsBasic",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def ScramjetModeAsBasic(self) -> "IAgAvtrAdvFixedWingScramjetBasic":
        """Get the interface for a Scramjet - Basic."""
        return self._intf.get_property(IAgAvtrAdvFixedWingSubSuperHypersonicProp._metadata, IAgAvtrAdvFixedWingSubSuperHypersonicProp._get_ScramjetModeAsBasic_metadata)

    _get_TurbineRefArea_metadata = { "name" : "TurbineRefArea",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def TurbineRefArea(self) -> float:
        """The reference area used for the turbine operating mode."""
        return self._intf.get_property(IAgAvtrAdvFixedWingSubSuperHypersonicProp._metadata, IAgAvtrAdvFixedWingSubSuperHypersonicProp._get_TurbineRefArea_metadata)

    _get_RamjetRefArea_metadata = { "name" : "RamjetRefArea",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def RamjetRefArea(self) -> float:
        """The reference area used for the ramjet operating mode."""
        return self._intf.get_property(IAgAvtrAdvFixedWingSubSuperHypersonicProp._metadata, IAgAvtrAdvFixedWingSubSuperHypersonicProp._get_RamjetRefArea_metadata)

    _get_ScramjetRefArea_metadata = { "name" : "ScramjetRefArea",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def ScramjetRefArea(self) -> float:
        """The reference area used for the scramjet operating mode."""
        return self._intf.get_property(IAgAvtrAdvFixedWingSubSuperHypersonicProp._metadata, IAgAvtrAdvFixedWingSubSuperHypersonicProp._get_ScramjetRefArea_metadata)

    _get_MaxTurbineCompressionTemp_metadata = { "name" : "MaxTurbineCompressionTemp",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def MaxTurbineCompressionTemp(self) -> float:
        """The maximum temperature at the compressor stage in the turbine operating mode."""
        return self._intf.get_property(IAgAvtrAdvFixedWingSubSuperHypersonicProp._metadata, IAgAvtrAdvFixedWingSubSuperHypersonicProp._get_MaxTurbineCompressionTemp_metadata)

    _set_MaxTurbineCompressionTemp_metadata = { "name" : "MaxTurbineCompressionTemp",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @MaxTurbineCompressionTemp.setter
    def MaxTurbineCompressionTemp(self, newVal:float) -> None:
        """The maximum temperature at the compressor stage in the turbine operating mode."""
        return self._intf.set_property(IAgAvtrAdvFixedWingSubSuperHypersonicProp._metadata, IAgAvtrAdvFixedWingSubSuperHypersonicProp._set_MaxTurbineCompressionTemp_metadata, newVal)

    _get_MaxTurbineBurnerTemp_metadata = { "name" : "MaxTurbineBurnerTemp",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def MaxTurbineBurnerTemp(self) -> float:
        """The maximum temperature at the combustion stage in the turbine operating mode."""
        return self._intf.get_property(IAgAvtrAdvFixedWingSubSuperHypersonicProp._metadata, IAgAvtrAdvFixedWingSubSuperHypersonicProp._get_MaxTurbineBurnerTemp_metadata)

    _set_MaxTurbineBurnerTemp_metadata = { "name" : "MaxTurbineBurnerTemp",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @MaxTurbineBurnerTemp.setter
    def MaxTurbineBurnerTemp(self, newVal:float) -> None:
        """The maximum temperature at the combustion stage in the turbine operating mode."""
        return self._intf.set_property(IAgAvtrAdvFixedWingSubSuperHypersonicProp._metadata, IAgAvtrAdvFixedWingSubSuperHypersonicProp._set_MaxTurbineBurnerTemp_metadata, newVal)

    _get_CanRamCompressorPressureRatio_metadata = { "name" : "CanRamCompressorPressureRatio",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def CanRamCompressorPressureRatio(self) -> float:
        """Can Ram compressor pressure ratio."""
        return self._intf.get_property(IAgAvtrAdvFixedWingSubSuperHypersonicProp._metadata, IAgAvtrAdvFixedWingSubSuperHypersonicProp._get_CanRamCompressorPressureRatio_metadata)

    _set_CanRamCompressorPressureRatio_metadata = { "name" : "CanRamCompressorPressureRatio",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @CanRamCompressorPressureRatio.setter
    def CanRamCompressorPressureRatio(self, newVal:float) -> None:
        """Can Ram compressor pressure ratio."""
        return self._intf.set_property(IAgAvtrAdvFixedWingSubSuperHypersonicProp._metadata, IAgAvtrAdvFixedWingSubSuperHypersonicProp._set_CanRamCompressorPressureRatio_metadata, newVal)

    _get_MustRamCompressorPressureRatio_metadata = { "name" : "MustRamCompressorPressureRatio",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def MustRamCompressorPressureRatio(self) -> float:
        """Must Ram compressor pressure ratio."""
        return self._intf.get_property(IAgAvtrAdvFixedWingSubSuperHypersonicProp._metadata, IAgAvtrAdvFixedWingSubSuperHypersonicProp._get_MustRamCompressorPressureRatio_metadata)

    _set_MustRamCompressorPressureRatio_metadata = { "name" : "MustRamCompressorPressureRatio",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @MustRamCompressorPressureRatio.setter
    def MustRamCompressorPressureRatio(self, newVal:float) -> None:
        """Must Ram compressor pressure ratio."""
        return self._intf.set_property(IAgAvtrAdvFixedWingSubSuperHypersonicProp._metadata, IAgAvtrAdvFixedWingSubSuperHypersonicProp._set_MustRamCompressorPressureRatio_metadata, newVal)

    _get_MaxRamScramCompressionTemperature_metadata = { "name" : "MaxRamScramCompressionTemperature",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def MaxRamScramCompressionTemperature(self) -> float:
        """The maximum temperature at the compressor stage in the Ramjet or Scramjet operating mode."""
        return self._intf.get_property(IAgAvtrAdvFixedWingSubSuperHypersonicProp._metadata, IAgAvtrAdvFixedWingSubSuperHypersonicProp._get_MaxRamScramCompressionTemperature_metadata)

    _set_MaxRamScramCompressionTemperature_metadata = { "name" : "MaxRamScramCompressionTemperature",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @MaxRamScramCompressionTemperature.setter
    def MaxRamScramCompressionTemperature(self, newVal:float) -> None:
        """The maximum temperature at the compressor stage in the Ramjet or Scramjet operating mode."""
        return self._intf.set_property(IAgAvtrAdvFixedWingSubSuperHypersonicProp._metadata, IAgAvtrAdvFixedWingSubSuperHypersonicProp._set_MaxRamScramCompressionTemperature_metadata, newVal)

    _get_MaxRamScramBurnerTotalTemperature_metadata = { "name" : "MaxRamScramBurnerTotalTemperature",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def MaxRamScramBurnerTotalTemperature(self) -> float:
        """The maximum temperature at the combustion stage in the Ramjet or Scramjet operating mode."""
        return self._intf.get_property(IAgAvtrAdvFixedWingSubSuperHypersonicProp._metadata, IAgAvtrAdvFixedWingSubSuperHypersonicProp._get_MaxRamScramBurnerTotalTemperature_metadata)

    _set_MaxRamScramBurnerTotalTemperature_metadata = { "name" : "MaxRamScramBurnerTotalTemperature",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @MaxRamScramBurnerTotalTemperature.setter
    def MaxRamScramBurnerTotalTemperature(self, newVal:float) -> None:
        """The maximum temperature at the combustion stage in the Ramjet or Scramjet operating mode."""
        return self._intf.set_property(IAgAvtrAdvFixedWingSubSuperHypersonicProp._metadata, IAgAvtrAdvFixedWingSubSuperHypersonicProp._set_MaxRamScramBurnerTotalTemperature_metadata, newVal)


agcls.AgClassCatalog.add_catalog_entry("{1a204443-6853-4897-b530-6e7231607545}", IAgAvtrAdvFixedWingSubSuperHypersonicProp)
agcls.AgTypeNameMap["IAgAvtrAdvFixedWingSubSuperHypersonicProp"] = IAgAvtrAdvFixedWingSubSuperHypersonicProp

class IAgAvtrAdvFixedWingSupersonicAero(object):
    """Interface used to access the options for the supersonic aerodynamic strategy in the advanced fixed wing tool."""
    _num_methods = 20
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{8864671c-5df8-40d1-95db-a2f92c6016ea}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_GeometryType" : 1,
                             "set_GeometryType" : 2,
                             "get_GeometryModeAsBasic" : 3,
                             "get_GeometryModeAsVariable" : 4,
                             "get_MaxAOA" : 5,
                             "set_MaxAOA" : 6,
                             "get_SubsonicCd0" : 7,
                             "set_SubsonicCd0" : 8,
                             "get_TransonicMinMach" : 9,
                             "set_TransonicMinMach" : 10,
                             "get_TransonicMaxMach" : 11,
                             "set_TransonicMaxMach" : 12,
                             "get_SupersonicMaxMach" : 13,
                             "set_SupersonicMaxMach" : 14,
                             "get_TransonicMachDragFactor" : 15,
                             "set_TransonicMachDragFactor" : 16,
                             "get_SupersonicMachDragFactor" : 17,
                             "set_SupersonicMachDragFactor" : 18,
                             "get_LeadingEdgeSuctionEfficiency" : 19,
                             "set_LeadingEdgeSuctionEfficiency" : 20, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrAdvFixedWingSupersonicAero._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrAdvFixedWingSupersonicAero from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrAdvFixedWingSupersonicAero.__dict__ and type(IAgAvtrAdvFixedWingSupersonicAero.__dict__[attrname]) == property:
            return IAgAvtrAdvFixedWingSupersonicAero.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrAdvFixedWingSupersonicAero.")
    
    _get_GeometryType_metadata = { "name" : "GeometryType",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrAdvFixedWingGeometry),) }
    @property
    def GeometryType(self) -> "AgEAvtrAdvFixedWingGeometry":
        """The type of wing geometry for the aircraft."""
        return self._intf.get_property(IAgAvtrAdvFixedWingSupersonicAero._metadata, IAgAvtrAdvFixedWingSupersonicAero._get_GeometryType_metadata)

    _set_GeometryType_metadata = { "name" : "GeometryType",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrAdvFixedWingGeometry),) }
    @GeometryType.setter
    def GeometryType(self, newVal:"AgEAvtrAdvFixedWingGeometry") -> None:
        """The type of wing geometry for the aircraft."""
        return self._intf.set_property(IAgAvtrAdvFixedWingSupersonicAero._metadata, IAgAvtrAdvFixedWingSupersonicAero._set_GeometryType_metadata, newVal)

    _get_GeometryModeAsBasic_metadata = { "name" : "GeometryModeAsBasic",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def GeometryModeAsBasic(self) -> "IAgAvtrAdvFixedWingGeometryBasic":
        """The options for a basic geometry wing."""
        return self._intf.get_property(IAgAvtrAdvFixedWingSupersonicAero._metadata, IAgAvtrAdvFixedWingSupersonicAero._get_GeometryModeAsBasic_metadata)

    _get_GeometryModeAsVariable_metadata = { "name" : "GeometryModeAsVariable",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def GeometryModeAsVariable(self) -> "IAgAvtrAdvFixedWingGeometryVariable":
        """The options for a variable geometry wing."""
        return self._intf.get_property(IAgAvtrAdvFixedWingSupersonicAero._metadata, IAgAvtrAdvFixedWingSupersonicAero._get_GeometryModeAsVariable_metadata)

    _get_MaxAOA_metadata = { "name" : "MaxAOA",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def MaxAOA(self) -> typing.Any:
        """The maximum angle of attack possible."""
        return self._intf.get_property(IAgAvtrAdvFixedWingSupersonicAero._metadata, IAgAvtrAdvFixedWingSupersonicAero._get_MaxAOA_metadata)

    _set_MaxAOA_metadata = { "name" : "MaxAOA",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @MaxAOA.setter
    def MaxAOA(self, newVal:typing.Any) -> None:
        """The maximum angle of attack possible."""
        return self._intf.set_property(IAgAvtrAdvFixedWingSupersonicAero._metadata, IAgAvtrAdvFixedWingSupersonicAero._set_MaxAOA_metadata, newVal)

    _get_SubsonicCd0_metadata = { "name" : "SubsonicCd0",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def SubsonicCd0(self) -> float:
        """The parasitic drag coefficient of the aircraft when flying at a speed less than the Mach Divergence."""
        return self._intf.get_property(IAgAvtrAdvFixedWingSupersonicAero._metadata, IAgAvtrAdvFixedWingSupersonicAero._get_SubsonicCd0_metadata)

    _set_SubsonicCd0_metadata = { "name" : "SubsonicCd0",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @SubsonicCd0.setter
    def SubsonicCd0(self, newVal:float) -> None:
        """The parasitic drag coefficient of the aircraft when flying at a speed less than the Mach Divergence."""
        return self._intf.set_property(IAgAvtrAdvFixedWingSupersonicAero._metadata, IAgAvtrAdvFixedWingSupersonicAero._set_SubsonicCd0_metadata, newVal)

    _get_TransonicMinMach_metadata = { "name" : "TransonicMinMach",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def TransonicMinMach(self) -> float:
        """The minimum speed at which the aircraft begins to experience air compression."""
        return self._intf.get_property(IAgAvtrAdvFixedWingSupersonicAero._metadata, IAgAvtrAdvFixedWingSupersonicAero._get_TransonicMinMach_metadata)

    _set_TransonicMinMach_metadata = { "name" : "TransonicMinMach",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @TransonicMinMach.setter
    def TransonicMinMach(self, newVal:float) -> None:
        """The minimum speed at which the aircraft begins to experience air compression."""
        return self._intf.set_property(IAgAvtrAdvFixedWingSupersonicAero._metadata, IAgAvtrAdvFixedWingSupersonicAero._set_TransonicMinMach_metadata, newVal)

    _get_TransonicMaxMach_metadata = { "name" : "TransonicMaxMach",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def TransonicMaxMach(self) -> float:
        """The maximum speed, below supersonic, at which the aircraft begins to experience air compression."""
        return self._intf.get_property(IAgAvtrAdvFixedWingSupersonicAero._metadata, IAgAvtrAdvFixedWingSupersonicAero._get_TransonicMaxMach_metadata)

    _set_TransonicMaxMach_metadata = { "name" : "TransonicMaxMach",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @TransonicMaxMach.setter
    def TransonicMaxMach(self, newVal:float) -> None:
        """The maximum speed, below supersonic, at which the aircraft begins to experience air compression."""
        return self._intf.set_property(IAgAvtrAdvFixedWingSupersonicAero._metadata, IAgAvtrAdvFixedWingSupersonicAero._set_TransonicMaxMach_metadata, newVal)

    _get_SupersonicMaxMach_metadata = { "name" : "SupersonicMaxMach",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def SupersonicMaxMach(self) -> float:
        """The speed at which the Supersonic Mach Drag Factor is applied."""
        return self._intf.get_property(IAgAvtrAdvFixedWingSupersonicAero._metadata, IAgAvtrAdvFixedWingSupersonicAero._get_SupersonicMaxMach_metadata)

    _set_SupersonicMaxMach_metadata = { "name" : "SupersonicMaxMach",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @SupersonicMaxMach.setter
    def SupersonicMaxMach(self, newVal:float) -> None:
        """The speed at which the Supersonic Mach Drag Factor is applied."""
        return self._intf.set_property(IAgAvtrAdvFixedWingSupersonicAero._metadata, IAgAvtrAdvFixedWingSupersonicAero._set_SupersonicMaxMach_metadata, newVal)

    _get_TransonicMachDragFactor_metadata = { "name" : "TransonicMachDragFactor",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def TransonicMachDragFactor(self) -> float:
        """A factor applied to the aircraft's parasitic drag coefficient when it is flying between the Transonic Min Mach and Transonic Mach Drag Factor speeds."""
        return self._intf.get_property(IAgAvtrAdvFixedWingSupersonicAero._metadata, IAgAvtrAdvFixedWingSupersonicAero._get_TransonicMachDragFactor_metadata)

    _set_TransonicMachDragFactor_metadata = { "name" : "TransonicMachDragFactor",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @TransonicMachDragFactor.setter
    def TransonicMachDragFactor(self, newVal:float) -> None:
        """A factor applied to the aircraft's parasitic drag coefficient when it is flying between the Transonic Min Mach and Transonic Mach Drag Factor speeds."""
        return self._intf.set_property(IAgAvtrAdvFixedWingSupersonicAero._metadata, IAgAvtrAdvFixedWingSupersonicAero._set_TransonicMachDragFactor_metadata, newVal)

    _get_SupersonicMachDragFactor_metadata = { "name" : "SupersonicMachDragFactor",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def SupersonicMachDragFactor(self) -> float:
        """A scalar value applied to the aircraft's parasitic drag coefficient when it is flying faster than the Supersonic Max Mach."""
        return self._intf.get_property(IAgAvtrAdvFixedWingSupersonicAero._metadata, IAgAvtrAdvFixedWingSupersonicAero._get_SupersonicMachDragFactor_metadata)

    _set_SupersonicMachDragFactor_metadata = { "name" : "SupersonicMachDragFactor",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @SupersonicMachDragFactor.setter
    def SupersonicMachDragFactor(self, newVal:float) -> None:
        """A scalar value applied to the aircraft's parasitic drag coefficient when it is flying faster than the Supersonic Max Mach."""
        return self._intf.set_property(IAgAvtrAdvFixedWingSupersonicAero._metadata, IAgAvtrAdvFixedWingSupersonicAero._set_SupersonicMachDragFactor_metadata, newVal)

    _get_LeadingEdgeSuctionEfficiency_metadata = { "name" : "LeadingEdgeSuctionEfficiency",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def LeadingEdgeSuctionEfficiency(self) -> float:
        """The ability of the wing's leading edge to ingest turbulent airflow and thereby reduce induced drag."""
        return self._intf.get_property(IAgAvtrAdvFixedWingSupersonicAero._metadata, IAgAvtrAdvFixedWingSupersonicAero._get_LeadingEdgeSuctionEfficiency_metadata)

    _set_LeadingEdgeSuctionEfficiency_metadata = { "name" : "LeadingEdgeSuctionEfficiency",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @LeadingEdgeSuctionEfficiency.setter
    def LeadingEdgeSuctionEfficiency(self, newVal:float) -> None:
        """The ability of the wing's leading edge to ingest turbulent airflow and thereby reduce induced drag."""
        return self._intf.set_property(IAgAvtrAdvFixedWingSupersonicAero._metadata, IAgAvtrAdvFixedWingSupersonicAero._set_LeadingEdgeSuctionEfficiency_metadata, newVal)


agcls.AgClassCatalog.add_catalog_entry("{8864671c-5df8-40d1-95db-a2f92c6016ea}", IAgAvtrAdvFixedWingSupersonicAero)
agcls.AgTypeNameMap["IAgAvtrAdvFixedWingSupersonicAero"] = IAgAvtrAdvFixedWingSupersonicAero

class IAgAvtrAdvFixedWingGeometryBasic(object):
    """Interface used to access the options for a basic geometry wing in the advanced fixed wing tool."""
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{56a5685f-3271-4635-9989-24663bd35e0d}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_AspectRatio" : 1,
                             "SetAspectRatio" : 2,
                             "get_WingSweep" : 3,
                             "set_WingSweep" : 4, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrAdvFixedWingGeometryBasic._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrAdvFixedWingGeometryBasic from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrAdvFixedWingGeometryBasic.__dict__ and type(IAgAvtrAdvFixedWingGeometryBasic.__dict__[attrname]) == property:
            return IAgAvtrAdvFixedWingGeometryBasic.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrAdvFixedWingGeometryBasic.")
    
    _get_AspectRatio_metadata = { "name" : "AspectRatio",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def AspectRatio(self) -> float:
        """The wing sweep of the aircraft."""
        return self._intf.get_property(IAgAvtrAdvFixedWingGeometryBasic._metadata, IAgAvtrAdvFixedWingGeometryBasic._get_AspectRatio_metadata)

    _SetAspectRatio_metadata = { "name" : "SetAspectRatio",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    def SetAspectRatio(self, aspectRatio:float) -> None:
        """The wing sweep of the aircraft."""
        return self._intf.invoke(IAgAvtrAdvFixedWingGeometryBasic._metadata, IAgAvtrAdvFixedWingGeometryBasic._SetAspectRatio_metadata, aspectRatio)

    _get_WingSweep_metadata = { "name" : "WingSweep",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def WingSweep(self) -> typing.Any:
        """The wing sweep of the aircraft."""
        return self._intf.get_property(IAgAvtrAdvFixedWingGeometryBasic._metadata, IAgAvtrAdvFixedWingGeometryBasic._get_WingSweep_metadata)

    _set_WingSweep_metadata = { "name" : "WingSweep",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @WingSweep.setter
    def WingSweep(self, newVal:typing.Any) -> None:
        """The wing sweep of the aircraft."""
        return self._intf.set_property(IAgAvtrAdvFixedWingGeometryBasic._metadata, IAgAvtrAdvFixedWingGeometryBasic._set_WingSweep_metadata, newVal)


agcls.AgClassCatalog.add_catalog_entry("{56a5685f-3271-4635-9989-24663bd35e0d}", IAgAvtrAdvFixedWingGeometryBasic)
agcls.AgTypeNameMap["IAgAvtrAdvFixedWingGeometryBasic"] = IAgAvtrAdvFixedWingGeometryBasic

class IAgAvtrAdvFixedWingGeometryVariable(object):
    """Interface used to access the options for a variable geometry wing in the advanced fixed wing tool."""
    _num_methods = 10
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{e6f7e882-f360-4744-858a-7ea1eb2104c6}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_AspectRatio" : 1,
                             "SetAspectRatio" : 2,
                             "get_StartSweepMach" : 3,
                             "set_StartSweepMach" : 4,
                             "get_StopSweepMach" : 5,
                             "set_StopSweepMach" : 6,
                             "get_MinSweepAngle" : 7,
                             "set_MinSweepAngle" : 8,
                             "get_MaxSweepAngle" : 9,
                             "set_MaxSweepAngle" : 10, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrAdvFixedWingGeometryVariable._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrAdvFixedWingGeometryVariable from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrAdvFixedWingGeometryVariable.__dict__ and type(IAgAvtrAdvFixedWingGeometryVariable.__dict__[attrname]) == property:
            return IAgAvtrAdvFixedWingGeometryVariable.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrAdvFixedWingGeometryVariable.")
    
    _get_AspectRatio_metadata = { "name" : "AspectRatio",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def AspectRatio(self) -> float:
        """The wing sweep of the aircraft."""
        return self._intf.get_property(IAgAvtrAdvFixedWingGeometryVariable._metadata, IAgAvtrAdvFixedWingGeometryVariable._get_AspectRatio_metadata)

    _SetAspectRatio_metadata = { "name" : "SetAspectRatio",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    def SetAspectRatio(self, aspectRatio:float) -> None:
        """The wing sweep of the aircraft."""
        return self._intf.invoke(IAgAvtrAdvFixedWingGeometryVariable._metadata, IAgAvtrAdvFixedWingGeometryVariable._SetAspectRatio_metadata, aspectRatio)

    _get_StartSweepMach_metadata = { "name" : "StartSweepMach",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def StartSweepMach(self) -> float:
        """The mach number at which the wings start to sweep from the min sweep angle."""
        return self._intf.get_property(IAgAvtrAdvFixedWingGeometryVariable._metadata, IAgAvtrAdvFixedWingGeometryVariable._get_StartSweepMach_metadata)

    _set_StartSweepMach_metadata = { "name" : "StartSweepMach",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @StartSweepMach.setter
    def StartSweepMach(self, newVal:float) -> None:
        """The mach number at which the wings start to sweep from the min sweep angle."""
        return self._intf.set_property(IAgAvtrAdvFixedWingGeometryVariable._metadata, IAgAvtrAdvFixedWingGeometryVariable._set_StartSweepMach_metadata, newVal)

    _get_StopSweepMach_metadata = { "name" : "StopSweepMach",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def StopSweepMach(self) -> float:
        """The mach number at which the wings are swept to the max sweep angle."""
        return self._intf.get_property(IAgAvtrAdvFixedWingGeometryVariable._metadata, IAgAvtrAdvFixedWingGeometryVariable._get_StopSweepMach_metadata)

    _set_StopSweepMach_metadata = { "name" : "StopSweepMach",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @StopSweepMach.setter
    def StopSweepMach(self, newVal:float) -> None:
        """The mach number at which the wings are swept to the max sweep angle."""
        return self._intf.set_property(IAgAvtrAdvFixedWingGeometryVariable._metadata, IAgAvtrAdvFixedWingGeometryVariable._set_StopSweepMach_metadata, newVal)

    _get_MinSweepAngle_metadata = { "name" : "MinSweepAngle",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def MinSweepAngle(self) -> typing.Any:
        """The minimum sweep angle of the wings."""
        return self._intf.get_property(IAgAvtrAdvFixedWingGeometryVariable._metadata, IAgAvtrAdvFixedWingGeometryVariable._get_MinSweepAngle_metadata)

    _set_MinSweepAngle_metadata = { "name" : "MinSweepAngle",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @MinSweepAngle.setter
    def MinSweepAngle(self, newVal:typing.Any) -> None:
        """The minimum sweep angle of the wings."""
        return self._intf.set_property(IAgAvtrAdvFixedWingGeometryVariable._metadata, IAgAvtrAdvFixedWingGeometryVariable._set_MinSweepAngle_metadata, newVal)

    _get_MaxSweepAngle_metadata = { "name" : "MaxSweepAngle",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def MaxSweepAngle(self) -> typing.Any:
        """The maximum sweep angle of the wings."""
        return self._intf.get_property(IAgAvtrAdvFixedWingGeometryVariable._metadata, IAgAvtrAdvFixedWingGeometryVariable._get_MaxSweepAngle_metadata)

    _set_MaxSweepAngle_metadata = { "name" : "MaxSweepAngle",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @MaxSweepAngle.setter
    def MaxSweepAngle(self, newVal:typing.Any) -> None:
        """The maximum sweep angle of the wings."""
        return self._intf.set_property(IAgAvtrAdvFixedWingGeometryVariable._metadata, IAgAvtrAdvFixedWingGeometryVariable._set_MaxSweepAngle_metadata, newVal)


agcls.AgClassCatalog.add_catalog_entry("{e6f7e882-f360-4744-858a-7ea1eb2104c6}", IAgAvtrAdvFixedWingGeometryVariable)
agcls.AgTypeNameMap["IAgAvtrAdvFixedWingGeometryVariable"] = IAgAvtrAdvFixedWingGeometryVariable

class IAgAvtrAdvFixedWingElectricPowerplant(object):
    """Interface used to access the options for the Electric powerplant strategy in the advanced fixed wing tool."""
    _num_methods = 6
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{285ba7fc-1c89-49e1-983b-bf16ce641584}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_MaxPower" : 1,
                             "set_MaxPower" : 2,
                             "get_PropellerCount" : 3,
                             "set_PropellerCount" : 4,
                             "get_PropellerDiameter" : 5,
                             "set_PropellerDiameter" : 6, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrAdvFixedWingElectricPowerplant._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrAdvFixedWingElectricPowerplant from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrAdvFixedWingElectricPowerplant.__dict__ and type(IAgAvtrAdvFixedWingElectricPowerplant.__dict__[attrname]) == property:
            return IAgAvtrAdvFixedWingElectricPowerplant.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrAdvFixedWingElectricPowerplant.")
    
    _get_MaxPower_metadata = { "name" : "MaxPower",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def MaxPower(self) -> float:
        """The maximum power of the engine."""
        return self._intf.get_property(IAgAvtrAdvFixedWingElectricPowerplant._metadata, IAgAvtrAdvFixedWingElectricPowerplant._get_MaxPower_metadata)

    _set_MaxPower_metadata = { "name" : "MaxPower",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @MaxPower.setter
    def MaxPower(self, newVal:float) -> None:
        """The maximum power of the engine."""
        return self._intf.set_property(IAgAvtrAdvFixedWingElectricPowerplant._metadata, IAgAvtrAdvFixedWingElectricPowerplant._set_MaxPower_metadata, newVal)

    _get_PropellerCount_metadata = { "name" : "PropellerCount",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.LONG_arg,) }
    @property
    def PropellerCount(self) -> int:
        """The number of propellers."""
        return self._intf.get_property(IAgAvtrAdvFixedWingElectricPowerplant._metadata, IAgAvtrAdvFixedWingElectricPowerplant._get_PropellerCount_metadata)

    _set_PropellerCount_metadata = { "name" : "PropellerCount",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.LONG_arg,) }
    @PropellerCount.setter
    def PropellerCount(self, newVal:int) -> None:
        """The number of propellers."""
        return self._intf.set_property(IAgAvtrAdvFixedWingElectricPowerplant._metadata, IAgAvtrAdvFixedWingElectricPowerplant._set_PropellerCount_metadata, newVal)

    _get_PropellerDiameter_metadata = { "name" : "PropellerDiameter",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def PropellerDiameter(self) -> float:
        """The propeller diameter."""
        return self._intf.get_property(IAgAvtrAdvFixedWingElectricPowerplant._metadata, IAgAvtrAdvFixedWingElectricPowerplant._get_PropellerDiameter_metadata)

    _set_PropellerDiameter_metadata = { "name" : "PropellerDiameter",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @PropellerDiameter.setter
    def PropellerDiameter(self, newVal:float) -> None:
        """The propeller diameter."""
        return self._intf.set_property(IAgAvtrAdvFixedWingElectricPowerplant._metadata, IAgAvtrAdvFixedWingElectricPowerplant._set_PropellerDiameter_metadata, newVal)


agcls.AgClassCatalog.add_catalog_entry("{285ba7fc-1c89-49e1-983b-bf16ce641584}", IAgAvtrAdvFixedWingElectricPowerplant)
agcls.AgTypeNameMap["IAgAvtrAdvFixedWingElectricPowerplant"] = IAgAvtrAdvFixedWingElectricPowerplant

class IAgAvtrAdvFixedWingExternalProp(object):
    """Interface used to access the options for the External Prop File powerplant strategy in the advanced fixed wing tool."""
    _num_methods = 3
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{a886a5d9-63f4-455c-9cda-bce9c81d941d}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_Filepath" : 1,
                             "SetFilepath" : 2,
                             "get_IsValid" : 3, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrAdvFixedWingExternalProp._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrAdvFixedWingExternalProp from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrAdvFixedWingExternalProp.__dict__ and type(IAgAvtrAdvFixedWingExternalProp.__dict__[attrname]) == property:
            return IAgAvtrAdvFixedWingExternalProp.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrAdvFixedWingExternalProp.")
    
    _get_Filepath_metadata = { "name" : "Filepath",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def Filepath(self) -> str:
        """The filepath for the external aero file."""
        return self._intf.get_property(IAgAvtrAdvFixedWingExternalProp._metadata, IAgAvtrAdvFixedWingExternalProp._get_Filepath_metadata)

    _SetFilepath_metadata = { "name" : "SetFilepath",
            "arg_types" : (agcom.BSTR, POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.BSTR_arg,) }
    def SetFilepath(self, filepath:str) -> str:
        """Set the filepath for the external aero file."""
        return self._intf.invoke(IAgAvtrAdvFixedWingExternalProp._metadata, IAgAvtrAdvFixedWingExternalProp._SetFilepath_metadata, filepath, out_arg())

    _get_IsValid_metadata = { "name" : "IsValid",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def IsValid(self) -> bool:
        """Check whether the filepath is valid."""
        return self._intf.get_property(IAgAvtrAdvFixedWingExternalProp._metadata, IAgAvtrAdvFixedWingExternalProp._get_IsValid_metadata)


agcls.AgClassCatalog.add_catalog_entry("{a886a5d9-63f4-455c-9cda-bce9c81d941d}", IAgAvtrAdvFixedWingExternalProp)
agcls.AgTypeNameMap["IAgAvtrAdvFixedWingExternalProp"] = IAgAvtrAdvFixedWingExternalProp

class IAgAvtrAdvFixedWingPistonPowerplant(object):
    """Interface used to access the options for the Piston powerplant strategy in the advanced fixed wing tool."""
    _num_methods = 10
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{891f9708-b367-447d-9e25-bb8fb24d6c83}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_MaxSeaLevelStaticPower" : 1,
                             "set_MaxSeaLevelStaticPower" : 2,
                             "get_CriticalAltitude" : 3,
                             "set_CriticalAltitude" : 4,
                             "get_PropellerCount" : 5,
                             "set_PropellerCount" : 6,
                             "get_PropellerDiameter" : 7,
                             "set_PropellerDiameter" : 8,
                             "get_FuelFlow" : 9,
                             "set_FuelFlow" : 10, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrAdvFixedWingPistonPowerplant._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrAdvFixedWingPistonPowerplant from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrAdvFixedWingPistonPowerplant.__dict__ and type(IAgAvtrAdvFixedWingPistonPowerplant.__dict__[attrname]) == property:
            return IAgAvtrAdvFixedWingPistonPowerplant.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrAdvFixedWingPistonPowerplant.")
    
    _get_MaxSeaLevelStaticPower_metadata = { "name" : "MaxSeaLevelStaticPower",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def MaxSeaLevelStaticPower(self) -> float:
        """The maximum static power of the engine at sea level."""
        return self._intf.get_property(IAgAvtrAdvFixedWingPistonPowerplant._metadata, IAgAvtrAdvFixedWingPistonPowerplant._get_MaxSeaLevelStaticPower_metadata)

    _set_MaxSeaLevelStaticPower_metadata = { "name" : "MaxSeaLevelStaticPower",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @MaxSeaLevelStaticPower.setter
    def MaxSeaLevelStaticPower(self, newVal:float) -> None:
        """The maximum static power of the engine at sea level."""
        return self._intf.set_property(IAgAvtrAdvFixedWingPistonPowerplant._metadata, IAgAvtrAdvFixedWingPistonPowerplant._set_MaxSeaLevelStaticPower_metadata, newVal)

    _get_CriticalAltitude_metadata = { "name" : "CriticalAltitude",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def CriticalAltitude(self) -> float:
        """The engine's critical altitude."""
        return self._intf.get_property(IAgAvtrAdvFixedWingPistonPowerplant._metadata, IAgAvtrAdvFixedWingPistonPowerplant._get_CriticalAltitude_metadata)

    _set_CriticalAltitude_metadata = { "name" : "CriticalAltitude",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @CriticalAltitude.setter
    def CriticalAltitude(self, newVal:float) -> None:
        """The engine's critical altitude."""
        return self._intf.set_property(IAgAvtrAdvFixedWingPistonPowerplant._metadata, IAgAvtrAdvFixedWingPistonPowerplant._set_CriticalAltitude_metadata, newVal)

    _get_PropellerCount_metadata = { "name" : "PropellerCount",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.LONG_arg,) }
    @property
    def PropellerCount(self) -> int:
        """The number of propellers."""
        return self._intf.get_property(IAgAvtrAdvFixedWingPistonPowerplant._metadata, IAgAvtrAdvFixedWingPistonPowerplant._get_PropellerCount_metadata)

    _set_PropellerCount_metadata = { "name" : "PropellerCount",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.LONG_arg,) }
    @PropellerCount.setter
    def PropellerCount(self, newVal:int) -> None:
        """The number of propellers."""
        return self._intf.set_property(IAgAvtrAdvFixedWingPistonPowerplant._metadata, IAgAvtrAdvFixedWingPistonPowerplant._set_PropellerCount_metadata, newVal)

    _get_PropellerDiameter_metadata = { "name" : "PropellerDiameter",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def PropellerDiameter(self) -> float:
        """The propeller diameter."""
        return self._intf.get_property(IAgAvtrAdvFixedWingPistonPowerplant._metadata, IAgAvtrAdvFixedWingPistonPowerplant._get_PropellerDiameter_metadata)

    _set_PropellerDiameter_metadata = { "name" : "PropellerDiameter",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @PropellerDiameter.setter
    def PropellerDiameter(self, newVal:float) -> None:
        """The propeller diameter."""
        return self._intf.set_property(IAgAvtrAdvFixedWingPistonPowerplant._metadata, IAgAvtrAdvFixedWingPistonPowerplant._set_PropellerDiameter_metadata, newVal)

    _get_FuelFlow_metadata = { "name" : "FuelFlow",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def FuelFlow(self) -> float:
        """The engine's fuel flow at max power."""
        return self._intf.get_property(IAgAvtrAdvFixedWingPistonPowerplant._metadata, IAgAvtrAdvFixedWingPistonPowerplant._get_FuelFlow_metadata)

    _set_FuelFlow_metadata = { "name" : "FuelFlow",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @FuelFlow.setter
    def FuelFlow(self, newVal:float) -> None:
        """The engine's fuel flow at max power."""
        return self._intf.set_property(IAgAvtrAdvFixedWingPistonPowerplant._metadata, IAgAvtrAdvFixedWingPistonPowerplant._set_FuelFlow_metadata, newVal)


agcls.AgClassCatalog.add_catalog_entry("{891f9708-b367-447d-9e25-bb8fb24d6c83}", IAgAvtrAdvFixedWingPistonPowerplant)
agcls.AgTypeNameMap["IAgAvtrAdvFixedWingPistonPowerplant"] = IAgAvtrAdvFixedWingPistonPowerplant

class IAgAvtrAdvFixedWingTurbopropPowerplant(object):
    """Interface used to access the options for the Turboprop powerplant strategy in the advanced fixed wing tool."""
    _num_methods = 8
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{04fd63b4-761a-49b4-8a9c-c1610f676993}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_MaxSeaLevelStaticPower" : 1,
                             "set_MaxSeaLevelStaticPower" : 2,
                             "get_PropellerCount" : 3,
                             "set_PropellerCount" : 4,
                             "get_PropellerDiameter" : 5,
                             "set_PropellerDiameter" : 6,
                             "get_FuelFlow" : 7,
                             "set_FuelFlow" : 8, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrAdvFixedWingTurbopropPowerplant._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrAdvFixedWingTurbopropPowerplant from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrAdvFixedWingTurbopropPowerplant.__dict__ and type(IAgAvtrAdvFixedWingTurbopropPowerplant.__dict__[attrname]) == property:
            return IAgAvtrAdvFixedWingTurbopropPowerplant.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrAdvFixedWingTurbopropPowerplant.")
    
    _get_MaxSeaLevelStaticPower_metadata = { "name" : "MaxSeaLevelStaticPower",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def MaxSeaLevelStaticPower(self) -> float:
        """The maximum static power of the engine at sea level."""
        return self._intf.get_property(IAgAvtrAdvFixedWingTurbopropPowerplant._metadata, IAgAvtrAdvFixedWingTurbopropPowerplant._get_MaxSeaLevelStaticPower_metadata)

    _set_MaxSeaLevelStaticPower_metadata = { "name" : "MaxSeaLevelStaticPower",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @MaxSeaLevelStaticPower.setter
    def MaxSeaLevelStaticPower(self, newVal:float) -> None:
        """The maximum static power of the engine at sea level."""
        return self._intf.set_property(IAgAvtrAdvFixedWingTurbopropPowerplant._metadata, IAgAvtrAdvFixedWingTurbopropPowerplant._set_MaxSeaLevelStaticPower_metadata, newVal)

    _get_PropellerCount_metadata = { "name" : "PropellerCount",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.LONG_arg,) }
    @property
    def PropellerCount(self) -> int:
        """The number of propellers."""
        return self._intf.get_property(IAgAvtrAdvFixedWingTurbopropPowerplant._metadata, IAgAvtrAdvFixedWingTurbopropPowerplant._get_PropellerCount_metadata)

    _set_PropellerCount_metadata = { "name" : "PropellerCount",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.LONG_arg,) }
    @PropellerCount.setter
    def PropellerCount(self, newVal:int) -> None:
        """The number of propellers."""
        return self._intf.set_property(IAgAvtrAdvFixedWingTurbopropPowerplant._metadata, IAgAvtrAdvFixedWingTurbopropPowerplant._set_PropellerCount_metadata, newVal)

    _get_PropellerDiameter_metadata = { "name" : "PropellerDiameter",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def PropellerDiameter(self) -> float:
        """The propeller diameter."""
        return self._intf.get_property(IAgAvtrAdvFixedWingTurbopropPowerplant._metadata, IAgAvtrAdvFixedWingTurbopropPowerplant._get_PropellerDiameter_metadata)

    _set_PropellerDiameter_metadata = { "name" : "PropellerDiameter",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @PropellerDiameter.setter
    def PropellerDiameter(self, newVal:float) -> None:
        """The propeller diameter."""
        return self._intf.set_property(IAgAvtrAdvFixedWingTurbopropPowerplant._metadata, IAgAvtrAdvFixedWingTurbopropPowerplant._set_PropellerDiameter_metadata, newVal)

    _get_FuelFlow_metadata = { "name" : "FuelFlow",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def FuelFlow(self) -> float:
        """The engine's fuel flow at max power."""
        return self._intf.get_property(IAgAvtrAdvFixedWingTurbopropPowerplant._metadata, IAgAvtrAdvFixedWingTurbopropPowerplant._get_FuelFlow_metadata)

    _set_FuelFlow_metadata = { "name" : "FuelFlow",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @FuelFlow.setter
    def FuelFlow(self, newVal:float) -> None:
        """The engine's fuel flow at max power."""
        return self._intf.set_property(IAgAvtrAdvFixedWingTurbopropPowerplant._metadata, IAgAvtrAdvFixedWingTurbopropPowerplant._set_FuelFlow_metadata, newVal)


agcls.AgClassCatalog.add_catalog_entry("{04fd63b4-761a-49b4-8a9c-c1610f676993}", IAgAvtrAdvFixedWingTurbopropPowerplant)
agcls.AgTypeNameMap["IAgAvtrAdvFixedWingTurbopropPowerplant"] = IAgAvtrAdvFixedWingTurbopropPowerplant

class IAgAvtrAdvFixedWingEmpiricalJetEngine(object):
    """Interface used to access the options for the Sub/Super/Hypersonic powerplant strategy in the advanced fixed wing tool."""
    _num_methods = 8
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{f8fa49f0-f901-4b85-ac60-0712141db32c}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_MaxSeaLevelStaticThrust" : 1,
                             "set_MaxSeaLevelStaticThrust" : 2,
                             "get_DesignPointAltitude" : 3,
                             "set_DesignPointAltitude" : 4,
                             "get_DesignPointMachNumber" : 5,
                             "set_DesignPointMachNumber" : 6,
                             "get_FuelFlow" : 7,
                             "set_FuelFlow" : 8, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrAdvFixedWingEmpiricalJetEngine._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrAdvFixedWingEmpiricalJetEngine from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrAdvFixedWingEmpiricalJetEngine.__dict__ and type(IAgAvtrAdvFixedWingEmpiricalJetEngine.__dict__[attrname]) == property:
            return IAgAvtrAdvFixedWingEmpiricalJetEngine.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrAdvFixedWingEmpiricalJetEngine.")
    
    _get_MaxSeaLevelStaticThrust_metadata = { "name" : "MaxSeaLevelStaticThrust",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def MaxSeaLevelStaticThrust(self) -> float:
        """The maximum static thrust of the engine at sea level."""
        return self._intf.get_property(IAgAvtrAdvFixedWingEmpiricalJetEngine._metadata, IAgAvtrAdvFixedWingEmpiricalJetEngine._get_MaxSeaLevelStaticThrust_metadata)

    _set_MaxSeaLevelStaticThrust_metadata = { "name" : "MaxSeaLevelStaticThrust",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @MaxSeaLevelStaticThrust.setter
    def MaxSeaLevelStaticThrust(self, newVal:float) -> None:
        """The maximum static thrust of the engine at sea level."""
        return self._intf.set_property(IAgAvtrAdvFixedWingEmpiricalJetEngine._metadata, IAgAvtrAdvFixedWingEmpiricalJetEngine._set_MaxSeaLevelStaticThrust_metadata, newVal)

    _get_DesignPointAltitude_metadata = { "name" : "DesignPointAltitude",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def DesignPointAltitude(self) -> float:
        """The altitude design point of the engine."""
        return self._intf.get_property(IAgAvtrAdvFixedWingEmpiricalJetEngine._metadata, IAgAvtrAdvFixedWingEmpiricalJetEngine._get_DesignPointAltitude_metadata)

    _set_DesignPointAltitude_metadata = { "name" : "DesignPointAltitude",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @DesignPointAltitude.setter
    def DesignPointAltitude(self, newVal:float) -> None:
        """The altitude design point of the engine."""
        return self._intf.set_property(IAgAvtrAdvFixedWingEmpiricalJetEngine._metadata, IAgAvtrAdvFixedWingEmpiricalJetEngine._set_DesignPointAltitude_metadata, newVal)

    _get_DesignPointMachNumber_metadata = { "name" : "DesignPointMachNumber",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def DesignPointMachNumber(self) -> float:
        """The mach number design point of the engine."""
        return self._intf.get_property(IAgAvtrAdvFixedWingEmpiricalJetEngine._metadata, IAgAvtrAdvFixedWingEmpiricalJetEngine._get_DesignPointMachNumber_metadata)

    _set_DesignPointMachNumber_metadata = { "name" : "DesignPointMachNumber",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @DesignPointMachNumber.setter
    def DesignPointMachNumber(self, newVal:float) -> None:
        """The mach number design point of the engine."""
        return self._intf.set_property(IAgAvtrAdvFixedWingEmpiricalJetEngine._metadata, IAgAvtrAdvFixedWingEmpiricalJetEngine._set_DesignPointMachNumber_metadata, newVal)

    _get_FuelFlow_metadata = { "name" : "FuelFlow",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def FuelFlow(self) -> float:
        """The engine's fuel flow at max power."""
        return self._intf.get_property(IAgAvtrAdvFixedWingEmpiricalJetEngine._metadata, IAgAvtrAdvFixedWingEmpiricalJetEngine._get_FuelFlow_metadata)

    _set_FuelFlow_metadata = { "name" : "FuelFlow",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @FuelFlow.setter
    def FuelFlow(self, newVal:float) -> None:
        """The engine's fuel flow at max power."""
        return self._intf.set_property(IAgAvtrAdvFixedWingEmpiricalJetEngine._metadata, IAgAvtrAdvFixedWingEmpiricalJetEngine._set_FuelFlow_metadata, newVal)


agcls.AgClassCatalog.add_catalog_entry("{f8fa49f0-f901-4b85-ac60-0712141db32c}", IAgAvtrAdvFixedWingEmpiricalJetEngine)
agcls.AgTypeNameMap["IAgAvtrAdvFixedWingEmpiricalJetEngine"] = IAgAvtrAdvFixedWingEmpiricalJetEngine

class IAgAvtrAdvFixedWingTurbojetBasicABProp(object):
    """Interface used to access the options for the Turbojet - Basic w/AB (Thermodynamic) powerplant strategy in the advanced fixed wing tool."""
    _num_methods = 25
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{7ff41deb-7c10-42ac-8805-0b251e250018}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_CanUseAfterburner" : 1,
                             "set_CanUseAfterburner" : 2,
                             "get_DesignAltitude" : 3,
                             "set_DesignAltitude" : 4,
                             "get_DesignMach" : 5,
                             "set_DesignMach" : 6,
                             "get_DesignThrust" : 7,
                             "set_DesignThrust" : 8,
                             "get_AfterburnerOn" : 9,
                             "set_AfterburnerOn" : 10,
                             "get_MaxCompressionTemp" : 11,
                             "set_MaxCompressionTemp" : 12,
                             "get_MaxBurnerTemp" : 13,
                             "set_MaxBurnerTemp" : 14,
                             "get_MaxAfterburnerTemp" : 15,
                             "set_MaxAfterburnerTemp" : 16,
                             "get_HPCPressureRatio" : 17,
                             "set_HPCPressureRatio" : 18,
                             "get_LPCPressureRatio" : 19,
                             "set_LPCPressureRatio" : 20,
                             "get_EfficienciesAndLosses" : 21,
                             "get_FuelType" : 22,
                             "set_FuelType" : 23,
                             "get_FuelModeAsAFPROP" : 24,
                             "get_FuelModeAsCEA" : 25, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrAdvFixedWingTurbojetBasicABProp._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrAdvFixedWingTurbojetBasicABProp from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrAdvFixedWingTurbojetBasicABProp.__dict__ and type(IAgAvtrAdvFixedWingTurbojetBasicABProp.__dict__[attrname]) == property:
            return IAgAvtrAdvFixedWingTurbojetBasicABProp.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrAdvFixedWingTurbojetBasicABProp.")
    
    _get_CanUseAfterburner_metadata = { "name" : "CanUseAfterburner",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def CanUseAfterburner(self) -> bool:
        """Opt whether the engine has an afterburner."""
        return self._intf.get_property(IAgAvtrAdvFixedWingTurbojetBasicABProp._metadata, IAgAvtrAdvFixedWingTurbojetBasicABProp._get_CanUseAfterburner_metadata)

    _set_CanUseAfterburner_metadata = { "name" : "CanUseAfterburner",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @CanUseAfterburner.setter
    def CanUseAfterburner(self, newVal:bool) -> None:
        """Opt whether the engine has an afterburner."""
        return self._intf.set_property(IAgAvtrAdvFixedWingTurbojetBasicABProp._metadata, IAgAvtrAdvFixedWingTurbojetBasicABProp._set_CanUseAfterburner_metadata, newVal)

    _get_DesignAltitude_metadata = { "name" : "DesignAltitude",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def DesignAltitude(self) -> float:
        """The altitude design point of the engine."""
        return self._intf.get_property(IAgAvtrAdvFixedWingTurbojetBasicABProp._metadata, IAgAvtrAdvFixedWingTurbojetBasicABProp._get_DesignAltitude_metadata)

    _set_DesignAltitude_metadata = { "name" : "DesignAltitude",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @DesignAltitude.setter
    def DesignAltitude(self, newVal:float) -> None:
        """The altitude design point of the engine."""
        return self._intf.set_property(IAgAvtrAdvFixedWingTurbojetBasicABProp._metadata, IAgAvtrAdvFixedWingTurbojetBasicABProp._set_DesignAltitude_metadata, newVal)

    _get_DesignMach_metadata = { "name" : "DesignMach",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def DesignMach(self) -> float:
        """The mach number design point of the engine."""
        return self._intf.get_property(IAgAvtrAdvFixedWingTurbojetBasicABProp._metadata, IAgAvtrAdvFixedWingTurbojetBasicABProp._get_DesignMach_metadata)

    _set_DesignMach_metadata = { "name" : "DesignMach",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @DesignMach.setter
    def DesignMach(self, newVal:float) -> None:
        """The mach number design point of the engine."""
        return self._intf.set_property(IAgAvtrAdvFixedWingTurbojetBasicABProp._metadata, IAgAvtrAdvFixedWingTurbojetBasicABProp._set_DesignMach_metadata, newVal)

    _get_DesignThrust_metadata = { "name" : "DesignThrust",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def DesignThrust(self) -> float:
        """The thrust design point of the engine."""
        return self._intf.get_property(IAgAvtrAdvFixedWingTurbojetBasicABProp._metadata, IAgAvtrAdvFixedWingTurbojetBasicABProp._get_DesignThrust_metadata)

    _set_DesignThrust_metadata = { "name" : "DesignThrust",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @DesignThrust.setter
    def DesignThrust(self, newVal:float) -> None:
        """The thrust design point of the engine."""
        return self._intf.set_property(IAgAvtrAdvFixedWingTurbojetBasicABProp._metadata, IAgAvtrAdvFixedWingTurbojetBasicABProp._set_DesignThrust_metadata, newVal)

    _get_AfterburnerOn_metadata = { "name" : "AfterburnerOn",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def AfterburnerOn(self) -> bool:
        """Opt whether to specify the design point with the afterburner on. """
        return self._intf.get_property(IAgAvtrAdvFixedWingTurbojetBasicABProp._metadata, IAgAvtrAdvFixedWingTurbojetBasicABProp._get_AfterburnerOn_metadata)

    _set_AfterburnerOn_metadata = { "name" : "AfterburnerOn",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @AfterburnerOn.setter
    def AfterburnerOn(self, newVal:bool) -> None:
        """Opt whether to specify the design point with the afterburner on."""
        return self._intf.set_property(IAgAvtrAdvFixedWingTurbojetBasicABProp._metadata, IAgAvtrAdvFixedWingTurbojetBasicABProp._set_AfterburnerOn_metadata, newVal)

    _get_MaxCompressionTemp_metadata = { "name" : "MaxCompressionTemp",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def MaxCompressionTemp(self) -> float:
        """The maximum temperature at the compressor stage."""
        return self._intf.get_property(IAgAvtrAdvFixedWingTurbojetBasicABProp._metadata, IAgAvtrAdvFixedWingTurbojetBasicABProp._get_MaxCompressionTemp_metadata)

    _set_MaxCompressionTemp_metadata = { "name" : "MaxCompressionTemp",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @MaxCompressionTemp.setter
    def MaxCompressionTemp(self, newVal:float) -> None:
        """The maximum temperature at the compressor stage."""
        return self._intf.set_property(IAgAvtrAdvFixedWingTurbojetBasicABProp._metadata, IAgAvtrAdvFixedWingTurbojetBasicABProp._set_MaxCompressionTemp_metadata, newVal)

    _get_MaxBurnerTemp_metadata = { "name" : "MaxBurnerTemp",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def MaxBurnerTemp(self) -> float:
        """The maximum temperature at the combustion stage."""
        return self._intf.get_property(IAgAvtrAdvFixedWingTurbojetBasicABProp._metadata, IAgAvtrAdvFixedWingTurbojetBasicABProp._get_MaxBurnerTemp_metadata)

    _set_MaxBurnerTemp_metadata = { "name" : "MaxBurnerTemp",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @MaxBurnerTemp.setter
    def MaxBurnerTemp(self, newVal:float) -> None:
        """The maximum temperature at the combustion stage."""
        return self._intf.set_property(IAgAvtrAdvFixedWingTurbojetBasicABProp._metadata, IAgAvtrAdvFixedWingTurbojetBasicABProp._set_MaxBurnerTemp_metadata, newVal)

    _get_MaxAfterburnerTemp_metadata = { "name" : "MaxAfterburnerTemp",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def MaxAfterburnerTemp(self) -> float:
        """The maximum temperature at the afterburner."""
        return self._intf.get_property(IAgAvtrAdvFixedWingTurbojetBasicABProp._metadata, IAgAvtrAdvFixedWingTurbojetBasicABProp._get_MaxAfterburnerTemp_metadata)

    _set_MaxAfterburnerTemp_metadata = { "name" : "MaxAfterburnerTemp",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @MaxAfterburnerTemp.setter
    def MaxAfterburnerTemp(self, newVal:float) -> None:
        """The maximum temperature at the afterburner."""
        return self._intf.set_property(IAgAvtrAdvFixedWingTurbojetBasicABProp._metadata, IAgAvtrAdvFixedWingTurbojetBasicABProp._set_MaxAfterburnerTemp_metadata, newVal)

    _get_HPCPressureRatio_metadata = { "name" : "HPCPressureRatio",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def HPCPressureRatio(self) -> float:
        """The pressure ratio of the high-pressure compressor."""
        return self._intf.get_property(IAgAvtrAdvFixedWingTurbojetBasicABProp._metadata, IAgAvtrAdvFixedWingTurbojetBasicABProp._get_HPCPressureRatio_metadata)

    _set_HPCPressureRatio_metadata = { "name" : "HPCPressureRatio",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @HPCPressureRatio.setter
    def HPCPressureRatio(self, newVal:float) -> None:
        """The pressure ratio of the high-pressure compressor."""
        return self._intf.set_property(IAgAvtrAdvFixedWingTurbojetBasicABProp._metadata, IAgAvtrAdvFixedWingTurbojetBasicABProp._set_HPCPressureRatio_metadata, newVal)

    _get_LPCPressureRatio_metadata = { "name" : "LPCPressureRatio",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def LPCPressureRatio(self) -> float:
        """The pressure ratio of the low-pressure compressor."""
        return self._intf.get_property(IAgAvtrAdvFixedWingTurbojetBasicABProp._metadata, IAgAvtrAdvFixedWingTurbojetBasicABProp._get_LPCPressureRatio_metadata)

    _set_LPCPressureRatio_metadata = { "name" : "LPCPressureRatio",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @LPCPressureRatio.setter
    def LPCPressureRatio(self, newVal:float) -> None:
        """The pressure ratio of the low-pressure compressor."""
        return self._intf.set_property(IAgAvtrAdvFixedWingTurbojetBasicABProp._metadata, IAgAvtrAdvFixedWingTurbojetBasicABProp._set_LPCPressureRatio_metadata, newVal)

    _get_EfficienciesAndLosses_metadata = { "name" : "EfficienciesAndLosses",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def EfficienciesAndLosses(self) -> "IAgAvtrPropulsionEfficiencies":
        """The jet engine's propulsion efficiencies and losses."""
        return self._intf.get_property(IAgAvtrAdvFixedWingTurbojetBasicABProp._metadata, IAgAvtrAdvFixedWingTurbojetBasicABProp._get_EfficienciesAndLosses_metadata)

    _get_FuelType_metadata = { "name" : "FuelType",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrJetFuelType),) }
    @property
    def FuelType(self) -> "AgEAvtrJetFuelType":
        """The jet engine's fuel type."""
        return self._intf.get_property(IAgAvtrAdvFixedWingTurbojetBasicABProp._metadata, IAgAvtrAdvFixedWingTurbojetBasicABProp._get_FuelType_metadata)

    _set_FuelType_metadata = { "name" : "FuelType",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrJetFuelType),) }
    @FuelType.setter
    def FuelType(self, newVal:"AgEAvtrJetFuelType") -> None:
        """The jet engine's fuel type."""
        return self._intf.set_property(IAgAvtrAdvFixedWingTurbojetBasicABProp._metadata, IAgAvtrAdvFixedWingTurbojetBasicABProp._set_FuelType_metadata, newVal)

    _get_FuelModeAsAFPROP_metadata = { "name" : "FuelModeAsAFPROP",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def FuelModeAsAFPROP(self) -> "IAgAvtrFuelModelKeroseneAFPROP":
        """Get the interface for a Kerosene - AFPROP fuel mode."""
        return self._intf.get_property(IAgAvtrAdvFixedWingTurbojetBasicABProp._metadata, IAgAvtrAdvFixedWingTurbojetBasicABProp._get_FuelModeAsAFPROP_metadata)

    _get_FuelModeAsCEA_metadata = { "name" : "FuelModeAsCEA",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def FuelModeAsCEA(self) -> "IAgAvtrFuelModelKeroseneCEA":
        """Get the interface for a Kerosene - CEA fuel mode."""
        return self._intf.get_property(IAgAvtrAdvFixedWingTurbojetBasicABProp._metadata, IAgAvtrAdvFixedWingTurbojetBasicABProp._get_FuelModeAsCEA_metadata)


agcls.AgClassCatalog.add_catalog_entry("{7ff41deb-7c10-42ac-8805-0b251e250018}", IAgAvtrAdvFixedWingTurbojetBasicABProp)
agcls.AgTypeNameMap["IAgAvtrAdvFixedWingTurbojetBasicABProp"] = IAgAvtrAdvFixedWingTurbojetBasicABProp

class IAgAvtrAdvFixedWingTurbofanBasicABProp(object):
    """Interface used to access the options for the Turbofan - Basic w/AB (Thermodynamic) powerplant strategy in the advanced fixed wing tool."""
    _num_methods = 27
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{f26a8761-895c-47b1-9836-9278313cf45d}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_CanUseAfterburner" : 1,
                             "set_CanUseAfterburner" : 2,
                             "get_DesignAltitude" : 3,
                             "set_DesignAltitude" : 4,
                             "get_DesignMach" : 5,
                             "set_DesignMach" : 6,
                             "get_DesignThrust" : 7,
                             "set_DesignThrust" : 8,
                             "get_AfterburnerOn" : 9,
                             "set_AfterburnerOn" : 10,
                             "get_MaxCompressionTemp" : 11,
                             "set_MaxCompressionTemp" : 12,
                             "get_MaxBurnerTemp" : 13,
                             "set_MaxBurnerTemp" : 14,
                             "get_MaxAfterburnerTemp" : 15,
                             "set_MaxAfterburnerTemp" : 16,
                             "get_HPCPressureRatio" : 17,
                             "set_HPCPressureRatio" : 18,
                             "get_LPCPressureRatio" : 19,
                             "set_LPCPressureRatio" : 20,
                             "get_FanPressureRatio" : 21,
                             "set_FanPressureRatio" : 22,
                             "get_EfficienciesAndLosses" : 23,
                             "get_FuelType" : 24,
                             "set_FuelType" : 25,
                             "get_FuelModeAsAFPROP" : 26,
                             "get_FuelModeAsCEA" : 27, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrAdvFixedWingTurbofanBasicABProp._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrAdvFixedWingTurbofanBasicABProp from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrAdvFixedWingTurbofanBasicABProp.__dict__ and type(IAgAvtrAdvFixedWingTurbofanBasicABProp.__dict__[attrname]) == property:
            return IAgAvtrAdvFixedWingTurbofanBasicABProp.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrAdvFixedWingTurbofanBasicABProp.")
    
    _get_CanUseAfterburner_metadata = { "name" : "CanUseAfterburner",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def CanUseAfterburner(self) -> bool:
        """Opt whether the engine has an afterburner."""
        return self._intf.get_property(IAgAvtrAdvFixedWingTurbofanBasicABProp._metadata, IAgAvtrAdvFixedWingTurbofanBasicABProp._get_CanUseAfterburner_metadata)

    _set_CanUseAfterburner_metadata = { "name" : "CanUseAfterburner",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @CanUseAfterburner.setter
    def CanUseAfterburner(self, newVal:bool) -> None:
        """Opt whether the engine has an afterburner."""
        return self._intf.set_property(IAgAvtrAdvFixedWingTurbofanBasicABProp._metadata, IAgAvtrAdvFixedWingTurbofanBasicABProp._set_CanUseAfterburner_metadata, newVal)

    _get_DesignAltitude_metadata = { "name" : "DesignAltitude",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def DesignAltitude(self) -> float:
        """The altitude design point of the engine."""
        return self._intf.get_property(IAgAvtrAdvFixedWingTurbofanBasicABProp._metadata, IAgAvtrAdvFixedWingTurbofanBasicABProp._get_DesignAltitude_metadata)

    _set_DesignAltitude_metadata = { "name" : "DesignAltitude",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @DesignAltitude.setter
    def DesignAltitude(self, newVal:float) -> None:
        """The altitude design point of the engine."""
        return self._intf.set_property(IAgAvtrAdvFixedWingTurbofanBasicABProp._metadata, IAgAvtrAdvFixedWingTurbofanBasicABProp._set_DesignAltitude_metadata, newVal)

    _get_DesignMach_metadata = { "name" : "DesignMach",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def DesignMach(self) -> float:
        """The mach number design point of the engine."""
        return self._intf.get_property(IAgAvtrAdvFixedWingTurbofanBasicABProp._metadata, IAgAvtrAdvFixedWingTurbofanBasicABProp._get_DesignMach_metadata)

    _set_DesignMach_metadata = { "name" : "DesignMach",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @DesignMach.setter
    def DesignMach(self, newVal:float) -> None:
        """The mach number design point of the engine."""
        return self._intf.set_property(IAgAvtrAdvFixedWingTurbofanBasicABProp._metadata, IAgAvtrAdvFixedWingTurbofanBasicABProp._set_DesignMach_metadata, newVal)

    _get_DesignThrust_metadata = { "name" : "DesignThrust",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def DesignThrust(self) -> float:
        """The thrust design point of the engine."""
        return self._intf.get_property(IAgAvtrAdvFixedWingTurbofanBasicABProp._metadata, IAgAvtrAdvFixedWingTurbofanBasicABProp._get_DesignThrust_metadata)

    _set_DesignThrust_metadata = { "name" : "DesignThrust",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @DesignThrust.setter
    def DesignThrust(self, newVal:float) -> None:
        """The thrust design point of the engine."""
        return self._intf.set_property(IAgAvtrAdvFixedWingTurbofanBasicABProp._metadata, IAgAvtrAdvFixedWingTurbofanBasicABProp._set_DesignThrust_metadata, newVal)

    _get_AfterburnerOn_metadata = { "name" : "AfterburnerOn",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def AfterburnerOn(self) -> bool:
        """Opt whether to specify the design point with the afterburner on. """
        return self._intf.get_property(IAgAvtrAdvFixedWingTurbofanBasicABProp._metadata, IAgAvtrAdvFixedWingTurbofanBasicABProp._get_AfterburnerOn_metadata)

    _set_AfterburnerOn_metadata = { "name" : "AfterburnerOn",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @AfterburnerOn.setter
    def AfterburnerOn(self, newVal:bool) -> None:
        """Opt whether to specify the design point with the afterburner on."""
        return self._intf.set_property(IAgAvtrAdvFixedWingTurbofanBasicABProp._metadata, IAgAvtrAdvFixedWingTurbofanBasicABProp._set_AfterburnerOn_metadata, newVal)

    _get_MaxCompressionTemp_metadata = { "name" : "MaxCompressionTemp",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def MaxCompressionTemp(self) -> float:
        """The maximum temperature at the compressor stage."""
        return self._intf.get_property(IAgAvtrAdvFixedWingTurbofanBasicABProp._metadata, IAgAvtrAdvFixedWingTurbofanBasicABProp._get_MaxCompressionTemp_metadata)

    _set_MaxCompressionTemp_metadata = { "name" : "MaxCompressionTemp",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @MaxCompressionTemp.setter
    def MaxCompressionTemp(self, newVal:float) -> None:
        """The maximum temperature at the compressor stage."""
        return self._intf.set_property(IAgAvtrAdvFixedWingTurbofanBasicABProp._metadata, IAgAvtrAdvFixedWingTurbofanBasicABProp._set_MaxCompressionTemp_metadata, newVal)

    _get_MaxBurnerTemp_metadata = { "name" : "MaxBurnerTemp",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def MaxBurnerTemp(self) -> float:
        """The maximum temperature at the combustion stage."""
        return self._intf.get_property(IAgAvtrAdvFixedWingTurbofanBasicABProp._metadata, IAgAvtrAdvFixedWingTurbofanBasicABProp._get_MaxBurnerTemp_metadata)

    _set_MaxBurnerTemp_metadata = { "name" : "MaxBurnerTemp",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @MaxBurnerTemp.setter
    def MaxBurnerTemp(self, newVal:float) -> None:
        """The maximum temperature at the combustion stage."""
        return self._intf.set_property(IAgAvtrAdvFixedWingTurbofanBasicABProp._metadata, IAgAvtrAdvFixedWingTurbofanBasicABProp._set_MaxBurnerTemp_metadata, newVal)

    _get_MaxAfterburnerTemp_metadata = { "name" : "MaxAfterburnerTemp",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def MaxAfterburnerTemp(self) -> float:
        """The maximum temperature at the afterburner."""
        return self._intf.get_property(IAgAvtrAdvFixedWingTurbofanBasicABProp._metadata, IAgAvtrAdvFixedWingTurbofanBasicABProp._get_MaxAfterburnerTemp_metadata)

    _set_MaxAfterburnerTemp_metadata = { "name" : "MaxAfterburnerTemp",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @MaxAfterburnerTemp.setter
    def MaxAfterburnerTemp(self, newVal:float) -> None:
        """The maximum temperature at the afterburner."""
        return self._intf.set_property(IAgAvtrAdvFixedWingTurbofanBasicABProp._metadata, IAgAvtrAdvFixedWingTurbofanBasicABProp._set_MaxAfterburnerTemp_metadata, newVal)

    _get_HPCPressureRatio_metadata = { "name" : "HPCPressureRatio",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def HPCPressureRatio(self) -> float:
        """The pressure ratio of the high-pressure compressor."""
        return self._intf.get_property(IAgAvtrAdvFixedWingTurbofanBasicABProp._metadata, IAgAvtrAdvFixedWingTurbofanBasicABProp._get_HPCPressureRatio_metadata)

    _set_HPCPressureRatio_metadata = { "name" : "HPCPressureRatio",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @HPCPressureRatio.setter
    def HPCPressureRatio(self, newVal:float) -> None:
        """The pressure ratio of the high-pressure compressor."""
        return self._intf.set_property(IAgAvtrAdvFixedWingTurbofanBasicABProp._metadata, IAgAvtrAdvFixedWingTurbofanBasicABProp._set_HPCPressureRatio_metadata, newVal)

    _get_LPCPressureRatio_metadata = { "name" : "LPCPressureRatio",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def LPCPressureRatio(self) -> float:
        """The pressure ratio of the low-pressure compressor."""
        return self._intf.get_property(IAgAvtrAdvFixedWingTurbofanBasicABProp._metadata, IAgAvtrAdvFixedWingTurbofanBasicABProp._get_LPCPressureRatio_metadata)

    _set_LPCPressureRatio_metadata = { "name" : "LPCPressureRatio",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @LPCPressureRatio.setter
    def LPCPressureRatio(self, newVal:float) -> None:
        """The pressure ratio of the low-pressure compressor."""
        return self._intf.set_property(IAgAvtrAdvFixedWingTurbofanBasicABProp._metadata, IAgAvtrAdvFixedWingTurbofanBasicABProp._set_LPCPressureRatio_metadata, newVal)

    _get_FanPressureRatio_metadata = { "name" : "FanPressureRatio",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def FanPressureRatio(self) -> float:
        """The pressure ratio of the fan."""
        return self._intf.get_property(IAgAvtrAdvFixedWingTurbofanBasicABProp._metadata, IAgAvtrAdvFixedWingTurbofanBasicABProp._get_FanPressureRatio_metadata)

    _set_FanPressureRatio_metadata = { "name" : "FanPressureRatio",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @FanPressureRatio.setter
    def FanPressureRatio(self, newVal:float) -> None:
        """The pressure ratio of the fan."""
        return self._intf.set_property(IAgAvtrAdvFixedWingTurbofanBasicABProp._metadata, IAgAvtrAdvFixedWingTurbofanBasicABProp._set_FanPressureRatio_metadata, newVal)

    _get_EfficienciesAndLosses_metadata = { "name" : "EfficienciesAndLosses",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def EfficienciesAndLosses(self) -> "IAgAvtrPropulsionEfficiencies":
        """The jet engine's propulsion efficiencies and losses."""
        return self._intf.get_property(IAgAvtrAdvFixedWingTurbofanBasicABProp._metadata, IAgAvtrAdvFixedWingTurbofanBasicABProp._get_EfficienciesAndLosses_metadata)

    _get_FuelType_metadata = { "name" : "FuelType",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrJetFuelType),) }
    @property
    def FuelType(self) -> "AgEAvtrJetFuelType":
        """The jet engine's fuel type."""
        return self._intf.get_property(IAgAvtrAdvFixedWingTurbofanBasicABProp._metadata, IAgAvtrAdvFixedWingTurbofanBasicABProp._get_FuelType_metadata)

    _set_FuelType_metadata = { "name" : "FuelType",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrJetFuelType),) }
    @FuelType.setter
    def FuelType(self, newVal:"AgEAvtrJetFuelType") -> None:
        """The jet engine's fuel type."""
        return self._intf.set_property(IAgAvtrAdvFixedWingTurbofanBasicABProp._metadata, IAgAvtrAdvFixedWingTurbofanBasicABProp._set_FuelType_metadata, newVal)

    _get_FuelModeAsAFPROP_metadata = { "name" : "FuelModeAsAFPROP",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def FuelModeAsAFPROP(self) -> "IAgAvtrFuelModelKeroseneAFPROP":
        """Get the interface for a Kerosene - AFPROP fuel mode."""
        return self._intf.get_property(IAgAvtrAdvFixedWingTurbofanBasicABProp._metadata, IAgAvtrAdvFixedWingTurbofanBasicABProp._get_FuelModeAsAFPROP_metadata)

    _get_FuelModeAsCEA_metadata = { "name" : "FuelModeAsCEA",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def FuelModeAsCEA(self) -> "IAgAvtrFuelModelKeroseneCEA":
        """Get the interface for a Kerosene - CEA fuel mode."""
        return self._intf.get_property(IAgAvtrAdvFixedWingTurbofanBasicABProp._metadata, IAgAvtrAdvFixedWingTurbofanBasicABProp._get_FuelModeAsCEA_metadata)


agcls.AgClassCatalog.add_catalog_entry("{f26a8761-895c-47b1-9836-9278313cf45d}", IAgAvtrAdvFixedWingTurbofanBasicABProp)
agcls.AgTypeNameMap["IAgAvtrAdvFixedWingTurbofanBasicABProp"] = IAgAvtrAdvFixedWingTurbofanBasicABProp

class IAgAvtrVehicle(object):
    """Interface for a vehicle in Aviator."""
    _num_methods = 1
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{9be54cfc-ba13-4a27-a829-2e10e04f2beb}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "GetAsCatalogItem" : 1, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrVehicle._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrVehicle from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrVehicle.__dict__ and type(IAgAvtrVehicle.__dict__[attrname]) == property:
            return IAgAvtrVehicle.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrVehicle.")
    
    _GetAsCatalogItem_metadata = { "name" : "GetAsCatalogItem",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    def GetAsCatalogItem(self) -> "IAgAvtrCatalogItem":
        """Get the catalog item interface for this object."""
        return self._intf.invoke(IAgAvtrVehicle._metadata, IAgAvtrVehicle._GetAsCatalogItem_metadata, out_arg())


agcls.AgClassCatalog.add_catalog_entry("{9be54cfc-ba13-4a27-a829-2e10e04f2beb}", IAgAvtrVehicle)
agcls.AgTypeNameMap["IAgAvtrVehicle"] = IAgAvtrVehicle

class IAgAvtrMissile(object):
    """Interface used to access the missile options in the Aviator catalog."""
    _num_methods = 47
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{80168c56-998d-45e3-9a93-e0511478a44b}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_MaxLoadFactor" : 1,
                             "set_MaxLoadFactor" : 2,
                             "get_ManeuverMode" : 3,
                             "set_ManeuverMode" : 4,
                             "get_ManeuverModeHelper" : 5,
                             "get_AttitudeTransitions" : 6,
                             "get_IgnoreFPAForClimbDescentTransitions" : 7,
                             "set_IgnoreFPAForClimbDescentTransitions" : 8,
                             "get_ClimbAirspeed" : 9,
                             "get_ClimbAirspeedType" : 10,
                             "SetClimbAirspeed" : 11,
                             "get_ClimbMaxFPA" : 12,
                             "set_ClimbMaxFPA" : 13,
                             "get_ClimbMinFPA" : 14,
                             "set_ClimbMinFPA" : 15,
                             "get_ClimbFailOnInsufficientPerformance" : 16,
                             "set_ClimbFailOnInsufficientPerformance" : 17,
                             "get_CruiseMaxAirspeed" : 18,
                             "get_CruiseMaxAirspeedType" : 19,
                             "SetCruiseMaxAirspeed" : 20,
                             "get_CruiseDefaultAltitude" : 21,
                             "set_CruiseDefaultAltitude" : 22,
                             "get_DescentAirspeed" : 23,
                             "get_DescentAirspeedType" : 24,
                             "SetDescentAirspeed" : 25,
                             "get_DescentMaxFPA" : 26,
                             "set_DescentMaxFPA" : 27,
                             "get_DescentMinFPA" : 28,
                             "set_DescentMinFPA" : 29,
                             "get_DescentFailOnInsufficientPerformance" : 30,
                             "set_DescentFailOnInsufficientPerformance" : 31,
                             "get_UseTotalTempLimit" : 32,
                             "set_UseTotalTempLimit" : 33,
                             "get_TotalTempLimit" : 34,
                             "set_TotalTempLimit" : 35,
                             "get_UseMachLimit" : 36,
                             "set_UseMachLimit" : 37,
                             "get_MachLimit" : 38,
                             "set_MachLimit" : 39,
                             "get_UseEASLimit" : 40,
                             "set_UseEASLimit" : 41,
                             "get_EASLimit" : 42,
                             "set_EASLimit" : 43,
                             "get_DefaultConfiguration" : 44,
                             "get_Aerodynamics" : 45,
                             "get_Propulsion" : 46,
                             "GetAsCatalogItem" : 47, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrMissile._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrMissile from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrMissile.__dict__ and type(IAgAvtrMissile.__dict__[attrname]) == property:
            return IAgAvtrMissile.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrMissile.")
    
    _get_MaxLoadFactor_metadata = { "name" : "MaxLoadFactor",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def MaxLoadFactor(self) -> float:
        """The maximum load factor that the missile can withstand while maneuvering."""
        return self._intf.get_property(IAgAvtrMissile._metadata, IAgAvtrMissile._get_MaxLoadFactor_metadata)

    _set_MaxLoadFactor_metadata = { "name" : "MaxLoadFactor",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @MaxLoadFactor.setter
    def MaxLoadFactor(self, pVal:float) -> None:
        """The maximum load factor that the missile can withstand while maneuvering."""
        return self._intf.set_property(IAgAvtrMissile._metadata, IAgAvtrMissile._set_MaxLoadFactor_metadata, pVal)

    _get_ManeuverMode_metadata = { "name" : "ManeuverMode",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrAccelManeuverMode),) }
    @property
    def ManeuverMode(self) -> "AgEAvtrAccelManeuverMode":
        """The mode that the missile will adhere to the specified load factor. Scale by atmospheric density will cause the missile to consider dynamic pressure when calculating turn radius."""
        return self._intf.get_property(IAgAvtrMissile._metadata, IAgAvtrMissile._get_ManeuverMode_metadata)

    _set_ManeuverMode_metadata = { "name" : "ManeuverMode",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrAccelManeuverMode),) }
    @ManeuverMode.setter
    def ManeuverMode(self, newVal:"AgEAvtrAccelManeuverMode") -> None:
        """The mode that the missile will adhere to the specified load factor. Scale by atmospheric density will cause the missile to consider dynamic pressure when calculating turn radius."""
        return self._intf.set_property(IAgAvtrMissile._metadata, IAgAvtrMissile._set_ManeuverMode_metadata, newVal)

    _get_ManeuverModeHelper_metadata = { "name" : "ManeuverModeHelper",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def ManeuverModeHelper(self) -> "IAgAvtrAeroPropManeuverModeHelper":
        """Get the interface for the Aero/Prop Maneuver Mode helper. The maneuver mode must be set to Aero/Prop to access this interface."""
        return self._intf.get_property(IAgAvtrMissile._metadata, IAgAvtrMissile._get_ManeuverModeHelper_metadata)

    _get_AttitudeTransitions_metadata = { "name" : "AttitudeTransitions",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def AttitudeTransitions(self) -> "IAgAvtrAttitudeTransitions":
        """Get the attitude transitions interface."""
        return self._intf.get_property(IAgAvtrMissile._metadata, IAgAvtrMissile._get_AttitudeTransitions_metadata)

    _get_IgnoreFPAForClimbDescentTransitions_metadata = { "name" : "IgnoreFPAForClimbDescentTransitions",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def IgnoreFPAForClimbDescentTransitions(self) -> bool:
        """Opt whether to ignore the flight path angle limits for climb and descent transitions."""
        return self._intf.get_property(IAgAvtrMissile._metadata, IAgAvtrMissile._get_IgnoreFPAForClimbDescentTransitions_metadata)

    _set_IgnoreFPAForClimbDescentTransitions_metadata = { "name" : "IgnoreFPAForClimbDescentTransitions",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @IgnoreFPAForClimbDescentTransitions.setter
    def IgnoreFPAForClimbDescentTransitions(self, pVal:bool) -> None:
        """Opt whether to ignore the flight path angle limits for climb and descent transitions."""
        return self._intf.set_property(IAgAvtrMissile._metadata, IAgAvtrMissile._set_IgnoreFPAForClimbDescentTransitions_metadata, pVal)

    _get_ClimbAirspeed_metadata = { "name" : "ClimbAirspeed",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def ClimbAirspeed(self) -> float:
        """The standard airspeed of the missile while climbing."""
        return self._intf.get_property(IAgAvtrMissile._metadata, IAgAvtrMissile._get_ClimbAirspeed_metadata)

    _get_ClimbAirspeedType_metadata = { "name" : "ClimbAirspeedType",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrAirspeedType),) }
    @property
    def ClimbAirspeedType(self) -> "AgEAvtrAirspeedType":
        """The climb airspeed type."""
        return self._intf.get_property(IAgAvtrMissile._metadata, IAgAvtrMissile._get_ClimbAirspeedType_metadata)

    _SetClimbAirspeed_metadata = { "name" : "SetClimbAirspeed",
            "arg_types" : (agcom.LONG, agcom.DOUBLE,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrAirspeedType), agmarshall.DOUBLE_arg,) }
    def SetClimbAirspeed(self, airspeedType:"AgEAvtrAirspeedType", aispeed:float) -> None:
        """Set the missile's climb airspeed and airspeed type."""
        return self._intf.invoke(IAgAvtrMissile._metadata, IAgAvtrMissile._SetClimbAirspeed_metadata, airspeedType, aispeed)

    _get_ClimbMaxFPA_metadata = { "name" : "ClimbMaxFPA",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def ClimbMaxFPA(self) -> typing.Any:
        """The maximum flight path angle of the missile's flight path while climbing."""
        return self._intf.get_property(IAgAvtrMissile._metadata, IAgAvtrMissile._get_ClimbMaxFPA_metadata)

    _set_ClimbMaxFPA_metadata = { "name" : "ClimbMaxFPA",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @ClimbMaxFPA.setter
    def ClimbMaxFPA(self, pVal:typing.Any) -> None:
        """The maximum flight path angle of the missile's flight path while climbing."""
        return self._intf.set_property(IAgAvtrMissile._metadata, IAgAvtrMissile._set_ClimbMaxFPA_metadata, pVal)

    _get_ClimbMinFPA_metadata = { "name" : "ClimbMinFPA",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def ClimbMinFPA(self) -> typing.Any:
        """The minimum flight path angle of the missile's flight path while climbing."""
        return self._intf.get_property(IAgAvtrMissile._metadata, IAgAvtrMissile._get_ClimbMinFPA_metadata)

    _set_ClimbMinFPA_metadata = { "name" : "ClimbMinFPA",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @ClimbMinFPA.setter
    def ClimbMinFPA(self, pVal:typing.Any) -> None:
        """The minimum flight path angle of the missile's flight path while climbing."""
        return self._intf.set_property(IAgAvtrMissile._metadata, IAgAvtrMissile._set_ClimbMinFPA_metadata, pVal)

    _get_ClimbFailOnInsufficientPerformance_metadata = { "name" : "ClimbFailOnInsufficientPerformance",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def ClimbFailOnInsufficientPerformance(self) -> bool:
        """Opt whether to fail while climbing if there is insufficient specific excess power."""
        return self._intf.get_property(IAgAvtrMissile._metadata, IAgAvtrMissile._get_ClimbFailOnInsufficientPerformance_metadata)

    _set_ClimbFailOnInsufficientPerformance_metadata = { "name" : "ClimbFailOnInsufficientPerformance",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @ClimbFailOnInsufficientPerformance.setter
    def ClimbFailOnInsufficientPerformance(self, pVal:bool) -> None:
        """Opt whether to fail while climbing if there is insufficient specific excess power."""
        return self._intf.set_property(IAgAvtrMissile._metadata, IAgAvtrMissile._set_ClimbFailOnInsufficientPerformance_metadata, pVal)

    _get_CruiseMaxAirspeed_metadata = { "name" : "CruiseMaxAirspeed",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def CruiseMaxAirspeed(self) -> float:
        """The maximum airspeed of the missile while cruising."""
        return self._intf.get_property(IAgAvtrMissile._metadata, IAgAvtrMissile._get_CruiseMaxAirspeed_metadata)

    _get_CruiseMaxAirspeedType_metadata = { "name" : "CruiseMaxAirspeedType",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrAirspeedType),) }
    @property
    def CruiseMaxAirspeedType(self) -> "AgEAvtrAirspeedType":
        """The cruise airspeed type."""
        return self._intf.get_property(IAgAvtrMissile._metadata, IAgAvtrMissile._get_CruiseMaxAirspeedType_metadata)

    _SetCruiseMaxAirspeed_metadata = { "name" : "SetCruiseMaxAirspeed",
            "arg_types" : (agcom.LONG, agcom.DOUBLE,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrAirspeedType), agmarshall.DOUBLE_arg,) }
    def SetCruiseMaxAirspeed(self, airspeedType:"AgEAvtrAirspeedType", aispeed:float) -> None:
        """Set the missile's max cruise airspeed and airspeed type."""
        return self._intf.invoke(IAgAvtrMissile._metadata, IAgAvtrMissile._SetCruiseMaxAirspeed_metadata, airspeedType, aispeed)

    _get_CruiseDefaultAltitude_metadata = { "name" : "CruiseDefaultAltitude",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def CruiseDefaultAltitude(self) -> float:
        """The missile's default cruising altitude."""
        return self._intf.get_property(IAgAvtrMissile._metadata, IAgAvtrMissile._get_CruiseDefaultAltitude_metadata)

    _set_CruiseDefaultAltitude_metadata = { "name" : "CruiseDefaultAltitude",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @CruiseDefaultAltitude.setter
    def CruiseDefaultAltitude(self, pVal:float) -> None:
        """The missile's default cruising altitude."""
        return self._intf.set_property(IAgAvtrMissile._metadata, IAgAvtrMissile._set_CruiseDefaultAltitude_metadata, pVal)

    _get_DescentAirspeed_metadata = { "name" : "DescentAirspeed",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def DescentAirspeed(self) -> float:
        """The standard airspeed of the missile while descending."""
        return self._intf.get_property(IAgAvtrMissile._metadata, IAgAvtrMissile._get_DescentAirspeed_metadata)

    _get_DescentAirspeedType_metadata = { "name" : "DescentAirspeedType",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrAirspeedType),) }
    @property
    def DescentAirspeedType(self) -> "AgEAvtrAirspeedType":
        """The descent airspeed type."""
        return self._intf.get_property(IAgAvtrMissile._metadata, IAgAvtrMissile._get_DescentAirspeedType_metadata)

    _SetDescentAirspeed_metadata = { "name" : "SetDescentAirspeed",
            "arg_types" : (agcom.LONG, agcom.DOUBLE,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrAirspeedType), agmarshall.DOUBLE_arg,) }
    def SetDescentAirspeed(self, airspeedType:"AgEAvtrAirspeedType", aispeed:float) -> None:
        """Set the missile's descent airspeed and airspeed type."""
        return self._intf.invoke(IAgAvtrMissile._metadata, IAgAvtrMissile._SetDescentAirspeed_metadata, airspeedType, aispeed)

    _get_DescentMaxFPA_metadata = { "name" : "DescentMaxFPA",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def DescentMaxFPA(self) -> typing.Any:
        """The maximum flight path angle of the missile's flight path while descending."""
        return self._intf.get_property(IAgAvtrMissile._metadata, IAgAvtrMissile._get_DescentMaxFPA_metadata)

    _set_DescentMaxFPA_metadata = { "name" : "DescentMaxFPA",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @DescentMaxFPA.setter
    def DescentMaxFPA(self, pVal:typing.Any) -> None:
        """The maximum flight path angle of the missile's flight path while descending."""
        return self._intf.set_property(IAgAvtrMissile._metadata, IAgAvtrMissile._set_DescentMaxFPA_metadata, pVal)

    _get_DescentMinFPA_metadata = { "name" : "DescentMinFPA",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def DescentMinFPA(self) -> typing.Any:
        """The minimum flight path angle of the missile's flight path while descending."""
        return self._intf.get_property(IAgAvtrMissile._metadata, IAgAvtrMissile._get_DescentMinFPA_metadata)

    _set_DescentMinFPA_metadata = { "name" : "DescentMinFPA",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @DescentMinFPA.setter
    def DescentMinFPA(self, pVal:typing.Any) -> None:
        """The minimum flight path angle of the missile's flight path while descending."""
        return self._intf.set_property(IAgAvtrMissile._metadata, IAgAvtrMissile._set_DescentMinFPA_metadata, pVal)

    _get_DescentFailOnInsufficientPerformance_metadata = { "name" : "DescentFailOnInsufficientPerformance",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def DescentFailOnInsufficientPerformance(self) -> bool:
        """Opt whether to fail while descending if there is insufficient specific excess power."""
        return self._intf.get_property(IAgAvtrMissile._metadata, IAgAvtrMissile._get_DescentFailOnInsufficientPerformance_metadata)

    _set_DescentFailOnInsufficientPerformance_metadata = { "name" : "DescentFailOnInsufficientPerformance",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @DescentFailOnInsufficientPerformance.setter
    def DescentFailOnInsufficientPerformance(self, pVal:bool) -> None:
        """Opt whether to fail while descending if there is insufficient specific excess power."""
        return self._intf.set_property(IAgAvtrMissile._metadata, IAgAvtrMissile._set_DescentFailOnInsufficientPerformance_metadata, pVal)

    _get_UseTotalTempLimit_metadata = { "name" : "UseTotalTempLimit",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def UseTotalTempLimit(self) -> bool:
        """Opt whether to limit the speed of the missile so the specified temperature is not exceeded."""
        return self._intf.get_property(IAgAvtrMissile._metadata, IAgAvtrMissile._get_UseTotalTempLimit_metadata)

    _set_UseTotalTempLimit_metadata = { "name" : "UseTotalTempLimit",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @UseTotalTempLimit.setter
    def UseTotalTempLimit(self, pVal:bool) -> None:
        """Opt whether to limit the speed of the missile so the specified temperature is not exceeded."""
        return self._intf.set_property(IAgAvtrMissile._metadata, IAgAvtrMissile._set_UseTotalTempLimit_metadata, pVal)

    _get_TotalTempLimit_metadata = { "name" : "TotalTempLimit",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def TotalTempLimit(self) -> float:
        """The maximum total temperature limit of the missile."""
        return self._intf.get_property(IAgAvtrMissile._metadata, IAgAvtrMissile._get_TotalTempLimit_metadata)

    _set_TotalTempLimit_metadata = { "name" : "TotalTempLimit",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @TotalTempLimit.setter
    def TotalTempLimit(self, pVal:float) -> None:
        """The maximum total temperature limit of the missile."""
        return self._intf.set_property(IAgAvtrMissile._metadata, IAgAvtrMissile._set_TotalTempLimit_metadata, pVal)

    _get_UseMachLimit_metadata = { "name" : "UseMachLimit",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def UseMachLimit(self) -> bool:
        """Opt whether to limit the speed of the missile so the specified mach number is not exceeded."""
        return self._intf.get_property(IAgAvtrMissile._metadata, IAgAvtrMissile._get_UseMachLimit_metadata)

    _set_UseMachLimit_metadata = { "name" : "UseMachLimit",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @UseMachLimit.setter
    def UseMachLimit(self, pVal:bool) -> None:
        """Opt whether to limit the speed of the missile so the specified mach number is not exceeded."""
        return self._intf.set_property(IAgAvtrMissile._metadata, IAgAvtrMissile._set_UseMachLimit_metadata, pVal)

    _get_MachLimit_metadata = { "name" : "MachLimit",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def MachLimit(self) -> float:
        """The maximum allowable mach number."""
        return self._intf.get_property(IAgAvtrMissile._metadata, IAgAvtrMissile._get_MachLimit_metadata)

    _set_MachLimit_metadata = { "name" : "MachLimit",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @MachLimit.setter
    def MachLimit(self, pVal:float) -> None:
        """The maximum allowable mach number."""
        return self._intf.set_property(IAgAvtrMissile._metadata, IAgAvtrMissile._set_MachLimit_metadata, pVal)

    _get_UseEASLimit_metadata = { "name" : "UseEASLimit",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def UseEASLimit(self) -> bool:
        """Opt whether to limit the speed of the missile so the specified Equivalent Airspeed is not exceeded."""
        return self._intf.get_property(IAgAvtrMissile._metadata, IAgAvtrMissile._get_UseEASLimit_metadata)

    _set_UseEASLimit_metadata = { "name" : "UseEASLimit",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @UseEASLimit.setter
    def UseEASLimit(self, pVal:bool) -> None:
        """Opt whether to limit the speed of the missile so the specified Equivalent Airspeed is not exceeded."""
        return self._intf.set_property(IAgAvtrMissile._metadata, IAgAvtrMissile._set_UseEASLimit_metadata, pVal)

    _get_EASLimit_metadata = { "name" : "EASLimit",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def EASLimit(self) -> float:
        """The maximum allowable Equivalent Airspeed."""
        return self._intf.get_property(IAgAvtrMissile._metadata, IAgAvtrMissile._get_EASLimit_metadata)

    _set_EASLimit_metadata = { "name" : "EASLimit",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @EASLimit.setter
    def EASLimit(self, pVal:float) -> None:
        """The maximum allowable Equivalent Airspeed."""
        return self._intf.set_property(IAgAvtrMissile._metadata, IAgAvtrMissile._set_EASLimit_metadata, pVal)

    _get_DefaultConfiguration_metadata = { "name" : "DefaultConfiguration",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def DefaultConfiguration(self) -> "IAgAvtrConfiguration":
        """The aircraft's default configuration as saved in the catalog."""
        return self._intf.get_property(IAgAvtrMissile._metadata, IAgAvtrMissile._get_DefaultConfiguration_metadata)

    _get_Aerodynamics_metadata = { "name" : "Aerodynamics",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def Aerodynamics(self) -> "IAgAvtrMissileAero":
        """Get the aerodynamics interface."""
        return self._intf.get_property(IAgAvtrMissile._metadata, IAgAvtrMissile._get_Aerodynamics_metadata)

    _get_Propulsion_metadata = { "name" : "Propulsion",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def Propulsion(self) -> "IAgAvtrMissileProp":
        """Get the propulsion interface."""
        return self._intf.get_property(IAgAvtrMissile._metadata, IAgAvtrMissile._get_Propulsion_metadata)

    _GetAsCatalogItem_metadata = { "name" : "GetAsCatalogItem",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    def GetAsCatalogItem(self) -> "IAgAvtrCatalogItem":
        """Get the catalog item interface for this object."""
        return self._intf.invoke(IAgAvtrMissile._metadata, IAgAvtrMissile._GetAsCatalogItem_metadata, out_arg())


agcls.AgClassCatalog.add_catalog_entry("{80168c56-998d-45e3-9a93-e0511478a44b}", IAgAvtrMissile)
agcls.AgTypeNameMap["IAgAvtrMissile"] = IAgAvtrMissile

class IAgAvtrMissileAero(object):
    """Interface used to access the aerodynamics options for a missile."""
    _num_methods = 5
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{b7e5c31a-5fbd-4a71-b99b-48707d6af556}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_AeroStrategy" : 1,
                             "set_AeroStrategy" : 2,
                             "get_ModeAsSimple" : 3,
                             "get_ModeAsExternal" : 4,
                             "get_ModeAsAdvanced" : 5, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrMissileAero._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrMissileAero from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrMissileAero.__dict__ and type(IAgAvtrMissileAero.__dict__[attrname]) == property:
            return IAgAvtrMissileAero.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrMissileAero.")
    
    _get_AeroStrategy_metadata = { "name" : "AeroStrategy",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrMissileAeroStrategy),) }
    @property
    def AeroStrategy(self) -> "AgEAvtrMissileAeroStrategy":
        """The aerodynamic strategy type."""
        return self._intf.get_property(IAgAvtrMissileAero._metadata, IAgAvtrMissileAero._get_AeroStrategy_metadata)

    _set_AeroStrategy_metadata = { "name" : "AeroStrategy",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrMissileAeroStrategy),) }
    @AeroStrategy.setter
    def AeroStrategy(self, newVal:"AgEAvtrMissileAeroStrategy") -> None:
        """The aerodynamic strategy type."""
        return self._intf.set_property(IAgAvtrMissileAero._metadata, IAgAvtrMissileAero._set_AeroStrategy_metadata, newVal)

    _get_ModeAsSimple_metadata = { "name" : "ModeAsSimple",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def ModeAsSimple(self) -> "IAgAvtrMissileSimpleAero":
        """Get the interface for a simple aerodynamics strategy."""
        return self._intf.get_property(IAgAvtrMissileAero._metadata, IAgAvtrMissileAero._get_ModeAsSimple_metadata)

    _get_ModeAsExternal_metadata = { "name" : "ModeAsExternal",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def ModeAsExternal(self) -> "IAgAvtrMissileExternalAero":
        """Get the interface for an external file aerodynamics strategy."""
        return self._intf.get_property(IAgAvtrMissileAero._metadata, IAgAvtrMissileAero._get_ModeAsExternal_metadata)

    _get_ModeAsAdvanced_metadata = { "name" : "ModeAsAdvanced",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def ModeAsAdvanced(self) -> "IAgAvtrMissileAdvancedAero":
        """Get the interface for an advanced aerodynamics strategy."""
        return self._intf.get_property(IAgAvtrMissileAero._metadata, IAgAvtrMissileAero._get_ModeAsAdvanced_metadata)


agcls.AgClassCatalog.add_catalog_entry("{b7e5c31a-5fbd-4a71-b99b-48707d6af556}", IAgAvtrMissileAero)
agcls.AgTypeNameMap["IAgAvtrMissileAero"] = IAgAvtrMissileAero

class IAgAvtrMissileProp(object):
    """Interface used to access the Propulsion options for a missile."""
    _num_methods = 7
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{3a29d5aa-b4f4-4431-9857-1d61bd3250cb}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_PropStrategy" : 1,
                             "set_PropStrategy" : 2,
                             "get_ModeAsSimple" : 3,
                             "get_ModeAsExternal" : 4,
                             "get_ModeAsRamjet" : 5,
                             "get_ModeAsTurbojet" : 6,
                             "get_ModeAsRocket" : 7, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrMissileProp._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrMissileProp from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrMissileProp.__dict__ and type(IAgAvtrMissileProp.__dict__[attrname]) == property:
            return IAgAvtrMissileProp.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrMissileProp.")
    
    _get_PropStrategy_metadata = { "name" : "PropStrategy",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrMissilePropStrategy),) }
    @property
    def PropStrategy(self) -> "AgEAvtrMissilePropStrategy":
        """The propulsion strategy type."""
        return self._intf.get_property(IAgAvtrMissileProp._metadata, IAgAvtrMissileProp._get_PropStrategy_metadata)

    _set_PropStrategy_metadata = { "name" : "PropStrategy",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrMissilePropStrategy),) }
    @PropStrategy.setter
    def PropStrategy(self, newVal:"AgEAvtrMissilePropStrategy") -> None:
        """The propulsion strategy type."""
        return self._intf.set_property(IAgAvtrMissileProp._metadata, IAgAvtrMissileProp._set_PropStrategy_metadata, newVal)

    _get_ModeAsSimple_metadata = { "name" : "ModeAsSimple",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def ModeAsSimple(self) -> "IAgAvtrMissileSimpleProp":
        """Get the interface for a simple propulsion strategy."""
        return self._intf.get_property(IAgAvtrMissileProp._metadata, IAgAvtrMissileProp._get_ModeAsSimple_metadata)

    _get_ModeAsExternal_metadata = { "name" : "ModeAsExternal",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def ModeAsExternal(self) -> "IAgAvtrMissileExternalProp":
        """Get the interface for an external file propulsion strategy."""
        return self._intf.get_property(IAgAvtrMissileProp._metadata, IAgAvtrMissileProp._get_ModeAsExternal_metadata)

    _get_ModeAsRamjet_metadata = { "name" : "ModeAsRamjet",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def ModeAsRamjet(self) -> "IAgAvtrMissileRamjetProp":
        """Get the interface for an Ramjet propulsion strategy."""
        return self._intf.get_property(IAgAvtrMissileProp._metadata, IAgAvtrMissileProp._get_ModeAsRamjet_metadata)

    _get_ModeAsTurbojet_metadata = { "name" : "ModeAsTurbojet",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def ModeAsTurbojet(self) -> "IAgAvtrMissileTurbojetProp":
        """Get the interface for an Turbojet propulsion strategy."""
        return self._intf.get_property(IAgAvtrMissileProp._metadata, IAgAvtrMissileProp._get_ModeAsTurbojet_metadata)

    _get_ModeAsRocket_metadata = { "name" : "ModeAsRocket",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def ModeAsRocket(self) -> "IAgAvtrMissileRocketProp":
        """Get the interface for an Rocket propulsion strategy."""
        return self._intf.get_property(IAgAvtrMissileProp._metadata, IAgAvtrMissileProp._get_ModeAsRocket_metadata)


agcls.AgClassCatalog.add_catalog_entry("{3a29d5aa-b4f4-4431-9857-1d61bd3250cb}", IAgAvtrMissileProp)
agcls.AgTypeNameMap["IAgAvtrMissileProp"] = IAgAvtrMissileProp

class IAgAvtrMissileSimpleAero(object):
    """Interface used to access the Simple aerodynamics options for a missile."""
    _num_methods = 9
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{e189fccd-ff74-40ee-9181-ed655a619480}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_SRef" : 1,
                             "set_SRef" : 2,
                             "get_ClMax" : 3,
                             "set_ClMax" : 4,
                             "get_Cd" : 5,
                             "set_Cd" : 6,
                             "get_CalculateAOA" : 7,
                             "get_MaxAOA" : 8,
                             "SetMaxAOA" : 9, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrMissileSimpleAero._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrMissileSimpleAero from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrMissileSimpleAero.__dict__ and type(IAgAvtrMissileSimpleAero.__dict__[attrname]) == property:
            return IAgAvtrMissileSimpleAero.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrMissileSimpleAero.")
    
    _get_SRef_metadata = { "name" : "SRef",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def SRef(self) -> float:
        """The area of the lifting surface of the missile."""
        return self._intf.get_property(IAgAvtrMissileSimpleAero._metadata, IAgAvtrMissileSimpleAero._get_SRef_metadata)

    _set_SRef_metadata = { "name" : "SRef",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @SRef.setter
    def SRef(self, newVal:float) -> None:
        """The area of the lifting surface of the missile."""
        return self._intf.set_property(IAgAvtrMissileSimpleAero._metadata, IAgAvtrMissileSimpleAero._set_SRef_metadata, newVal)

    _get_ClMax_metadata = { "name" : "ClMax",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def ClMax(self) -> float:
        """The max coefficient of lift."""
        return self._intf.get_property(IAgAvtrMissileSimpleAero._metadata, IAgAvtrMissileSimpleAero._get_ClMax_metadata)

    _set_ClMax_metadata = { "name" : "ClMax",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @ClMax.setter
    def ClMax(self, newVal:float) -> None:
        """The max coefficient of lift."""
        return self._intf.set_property(IAgAvtrMissileSimpleAero._metadata, IAgAvtrMissileSimpleAero._set_ClMax_metadata, newVal)

    _get_Cd_metadata = { "name" : "Cd",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def Cd(self) -> float:
        """The coefficient of drag."""
        return self._intf.get_property(IAgAvtrMissileSimpleAero._metadata, IAgAvtrMissileSimpleAero._get_Cd_metadata)

    _set_Cd_metadata = { "name" : "Cd",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @Cd.setter
    def Cd(self, newVal:float) -> None:
        """The coefficient of drag."""
        return self._intf.set_property(IAgAvtrMissileSimpleAero._metadata, IAgAvtrMissileSimpleAero._set_Cd_metadata, newVal)

    _get_CalculateAOA_metadata = { "name" : "CalculateAOA",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def CalculateAOA(self) -> bool:
        """Opt to allow Aviator to calculate the Angle of Attack. Otherwise, the value will be 0 by default."""
        return self._intf.get_property(IAgAvtrMissileSimpleAero._metadata, IAgAvtrMissileSimpleAero._get_CalculateAOA_metadata)

    _get_MaxAOA_metadata = { "name" : "MaxAOA",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def MaxAOA(self) -> typing.Any:
        """The missile's maximum angle of attack."""
        return self._intf.get_property(IAgAvtrMissileSimpleAero._metadata, IAgAvtrMissileSimpleAero._get_MaxAOA_metadata)

    _SetMaxAOA_metadata = { "name" : "SetMaxAOA",
            "arg_types" : (agcom.VARIANT_BOOL, agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg, agmarshall.VARIANT_arg,) }
    def SetMaxAOA(self, calculateAoA:bool, maxAoA:typing.Any) -> None:
        """Set whether to calculate the Angle of Attack and the corresponding value."""
        return self._intf.invoke(IAgAvtrMissileSimpleAero._metadata, IAgAvtrMissileSimpleAero._SetMaxAOA_metadata, calculateAoA, maxAoA)


agcls.AgClassCatalog.add_catalog_entry("{e189fccd-ff74-40ee-9181-ed655a619480}", IAgAvtrMissileSimpleAero)
agcls.AgTypeNameMap["IAgAvtrMissileSimpleAero"] = IAgAvtrMissileSimpleAero

class IAgAvtrMissileSimpleProp(object):
    """Interface used to access the Simple propulsion options for a missile."""
    _num_methods = 6
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{410fb08c-ae20-4f74-9b91-9035b813b146}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_MaxThrust" : 1,
                             "set_MaxThrust" : 2,
                             "get_FuelFlow" : 3,
                             "set_FuelFlow" : 4,
                             "get_NoThrustWhenNoFuel" : 5,
                             "set_NoThrustWhenNoFuel" : 6, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrMissileSimpleProp._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrMissileSimpleProp from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrMissileSimpleProp.__dict__ and type(IAgAvtrMissileSimpleProp.__dict__[attrname]) == property:
            return IAgAvtrMissileSimpleProp.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrMissileSimpleProp.")
    
    _get_MaxThrust_metadata = { "name" : "MaxThrust",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def MaxThrust(self) -> float:
        """The maximum thrust of the missile."""
        return self._intf.get_property(IAgAvtrMissileSimpleProp._metadata, IAgAvtrMissileSimpleProp._get_MaxThrust_metadata)

    _set_MaxThrust_metadata = { "name" : "MaxThrust",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @MaxThrust.setter
    def MaxThrust(self, pVal:float) -> None:
        """The maximum thrust of the missile."""
        return self._intf.set_property(IAgAvtrMissileSimpleProp._metadata, IAgAvtrMissileSimpleProp._set_MaxThrust_metadata, pVal)

    _get_FuelFlow_metadata = { "name" : "FuelFlow",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def FuelFlow(self) -> float:
        """The fuel flow at max thrust."""
        return self._intf.get_property(IAgAvtrMissileSimpleProp._metadata, IAgAvtrMissileSimpleProp._get_FuelFlow_metadata)

    _set_FuelFlow_metadata = { "name" : "FuelFlow",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @FuelFlow.setter
    def FuelFlow(self, pVal:float) -> None:
        """The fuel flow at max thrust."""
        return self._intf.set_property(IAgAvtrMissileSimpleProp._metadata, IAgAvtrMissileSimpleProp._set_FuelFlow_metadata, pVal)

    _get_NoThrustWhenNoFuel_metadata = { "name" : "NoThrustWhenNoFuel",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def NoThrustWhenNoFuel(self) -> bool:
        """Opt to have no thrust if the fuel is empty."""
        return self._intf.get_property(IAgAvtrMissileSimpleProp._metadata, IAgAvtrMissileSimpleProp._get_NoThrustWhenNoFuel_metadata)

    _set_NoThrustWhenNoFuel_metadata = { "name" : "NoThrustWhenNoFuel",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @NoThrustWhenNoFuel.setter
    def NoThrustWhenNoFuel(self, pVal:bool) -> None:
        """Opt to have no thrust if the fuel is empty."""
        return self._intf.set_property(IAgAvtrMissileSimpleProp._metadata, IAgAvtrMissileSimpleProp._set_NoThrustWhenNoFuel_metadata, pVal)


agcls.AgClassCatalog.add_catalog_entry("{410fb08c-ae20-4f74-9b91-9035b813b146}", IAgAvtrMissileSimpleProp)
agcls.AgTypeNameMap["IAgAvtrMissileSimpleProp"] = IAgAvtrMissileSimpleProp

class IAgAvtrMissileExternalAero(object):
    """Interface used to access the External aerodynamics options for a missile."""
    _num_methods = 7
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{fed723ce-0c02-41bb-8e61-d602b3543049}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_Filepath" : 1,
                             "SetFilepath" : 2,
                             "Reload" : 3,
                             "get_RefArea" : 4,
                             "set_RefArea" : 5,
                             "get_CanSetRefArea" : 6,
                             "get_IsValid" : 7, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrMissileExternalAero._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrMissileExternalAero from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrMissileExternalAero.__dict__ and type(IAgAvtrMissileExternalAero.__dict__[attrname]) == property:
            return IAgAvtrMissileExternalAero.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrMissileExternalAero.")
    
    _get_Filepath_metadata = { "name" : "Filepath",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def Filepath(self) -> str:
        """The filepath for the external aero file."""
        return self._intf.get_property(IAgAvtrMissileExternalAero._metadata, IAgAvtrMissileExternalAero._get_Filepath_metadata)

    _SetFilepath_metadata = { "name" : "SetFilepath",
            "arg_types" : (agcom.BSTR, POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.BSTR_arg,) }
    def SetFilepath(self, filepath:str) -> str:
        """Set the filepath for the external aero file."""
        return self._intf.invoke(IAgAvtrMissileExternalAero._metadata, IAgAvtrMissileExternalAero._SetFilepath_metadata, filepath, out_arg())

    _Reload_metadata = { "name" : "Reload",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    def Reload(self) -> str:
        """Reload the external aero file."""
        return self._intf.invoke(IAgAvtrMissileExternalAero._metadata, IAgAvtrMissileExternalAero._Reload_metadata, out_arg())

    _get_RefArea_metadata = { "name" : "RefArea",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def RefArea(self) -> float:
        """The area of the lifting surface of the missile."""
        return self._intf.get_property(IAgAvtrMissileExternalAero._metadata, IAgAvtrMissileExternalAero._get_RefArea_metadata)

    _set_RefArea_metadata = { "name" : "RefArea",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @RefArea.setter
    def RefArea(self, pVal:float) -> None:
        """The area of the lifting surface of the missile."""
        return self._intf.set_property(IAgAvtrMissileExternalAero._metadata, IAgAvtrMissileExternalAero._set_RefArea_metadata, pVal)

    _get_CanSetRefArea_metadata = { "name" : "CanSetRefArea",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def CanSetRefArea(self) -> bool:
        """Check whether you can set the reference area or whether it is specified in the file."""
        return self._intf.get_property(IAgAvtrMissileExternalAero._metadata, IAgAvtrMissileExternalAero._get_CanSetRefArea_metadata)

    _get_IsValid_metadata = { "name" : "IsValid",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def IsValid(self) -> bool:
        """Check whether the filepath is valid."""
        return self._intf.get_property(IAgAvtrMissileExternalAero._metadata, IAgAvtrMissileExternalAero._get_IsValid_metadata)


agcls.AgClassCatalog.add_catalog_entry("{fed723ce-0c02-41bb-8e61-d602b3543049}", IAgAvtrMissileExternalAero)
agcls.AgTypeNameMap["IAgAvtrMissileExternalAero"] = IAgAvtrMissileExternalAero

class IAgAvtrMissileExternalProp(object):
    """Interface used to access the External Prop file options for a missile."""
    _num_methods = 6
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{14bcb2f5-2893-4743-9e3c-1b9c52505e0c}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_Filepath" : 1,
                             "SetFilepath" : 2,
                             "Reload" : 3,
                             "get_NoThrustWhenNoFuel" : 4,
                             "set_NoThrustWhenNoFuel" : 5,
                             "get_IsValid" : 6, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrMissileExternalProp._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrMissileExternalProp from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrMissileExternalProp.__dict__ and type(IAgAvtrMissileExternalProp.__dict__[attrname]) == property:
            return IAgAvtrMissileExternalProp.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrMissileExternalProp.")
    
    _get_Filepath_metadata = { "name" : "Filepath",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def Filepath(self) -> str:
        """The filepath for the external prop file."""
        return self._intf.get_property(IAgAvtrMissileExternalProp._metadata, IAgAvtrMissileExternalProp._get_Filepath_metadata)

    _SetFilepath_metadata = { "name" : "SetFilepath",
            "arg_types" : (agcom.BSTR, POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.BSTR_arg,) }
    def SetFilepath(self, filepath:str) -> str:
        """Set the filepath for the external prop file."""
        return self._intf.invoke(IAgAvtrMissileExternalProp._metadata, IAgAvtrMissileExternalProp._SetFilepath_metadata, filepath, out_arg())

    _Reload_metadata = { "name" : "Reload",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    def Reload(self) -> str:
        """Reload the external prop file."""
        return self._intf.invoke(IAgAvtrMissileExternalProp._metadata, IAgAvtrMissileExternalProp._Reload_metadata, out_arg())

    _get_NoThrustWhenNoFuel_metadata = { "name" : "NoThrustWhenNoFuel",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def NoThrustWhenNoFuel(self) -> bool:
        """Opt to have no thrust if the fuel is empty."""
        return self._intf.get_property(IAgAvtrMissileExternalProp._metadata, IAgAvtrMissileExternalProp._get_NoThrustWhenNoFuel_metadata)

    _set_NoThrustWhenNoFuel_metadata = { "name" : "NoThrustWhenNoFuel",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @NoThrustWhenNoFuel.setter
    def NoThrustWhenNoFuel(self, pVal:bool) -> None:
        """Opt to have no thrust if the fuel is empty."""
        return self._intf.set_property(IAgAvtrMissileExternalProp._metadata, IAgAvtrMissileExternalProp._set_NoThrustWhenNoFuel_metadata, pVal)

    _get_IsValid_metadata = { "name" : "IsValid",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def IsValid(self) -> bool:
        """Check whether the filepath is valid."""
        return self._intf.get_property(IAgAvtrMissileExternalProp._metadata, IAgAvtrMissileExternalProp._get_IsValid_metadata)


agcls.AgClassCatalog.add_catalog_entry("{14bcb2f5-2893-4743-9e3c-1b9c52505e0c}", IAgAvtrMissileExternalProp)
agcls.AgTypeNameMap["IAgAvtrMissileExternalProp"] = IAgAvtrMissileExternalProp

class IAgAvtrMissileAdvancedAero(object):
    """Interface used to access the Advanced aerodynamics options for a missile."""
    _num_methods = 48
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{a26fe490-218c-44e4-95ab-69c20d3d6629}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_BodyWidth" : 1,
                             "set_BodyWidth" : 2,
                             "get_BodyHeight" : 3,
                             "set_BodyHeight" : 4,
                             "get_BodyLength" : 5,
                             "set_BodyLength" : 6,
                             "get_NoseLength" : 7,
                             "set_NoseLength" : 8,
                             "get_NoseTipDiameter" : 9,
                             "set_NoseTipDiameter" : 10,
                             "get_NozzleDiameter" : 11,
                             "set_NozzleDiameter" : 12,
                             "get_MaxAOA" : 13,
                             "set_MaxAOA" : 14,
                             "get_MinMach" : 15,
                             "set_MinMach" : 16,
                             "get_WingCount" : 17,
                             "set_WingCount" : 18,
                             "get_WingSpan" : 19,
                             "set_WingSpan" : 20,
                             "get_WingSurfaceArea" : 21,
                             "set_WingSurfaceArea" : 22,
                             "get_WingLeadingEdgeSweepAngle" : 23,
                             "set_WingLeadingEdgeSweepAngle" : 24,
                             "get_WingLeadingEdgeSectionAngle" : 25,
                             "set_WingLeadingEdgeSectionAngle" : 26,
                             "get_WingMeanAeroChordLength" : 27,
                             "set_WingMeanAeroChordLength" : 28,
                             "get_WingMaxThicknessAlongMAC" : 29,
                             "set_WingMaxThicknessAlongMAC" : 30,
                             "get_WingLiftFraction" : 31,
                             "set_WingLiftFraction" : 32,
                             "get_TailCount" : 33,
                             "set_TailCount" : 34,
                             "get_TailSpan" : 35,
                             "set_TailSpan" : 36,
                             "get_TailSurfaceArea" : 37,
                             "set_TailSurfaceArea" : 38,
                             "get_TailLeadingEdgeSweepAngle" : 39,
                             "set_TailLeadingEdgeSweepAngle" : 40,
                             "get_TailLeadingEdgeSectionAngle" : 41,
                             "set_TailLeadingEdgeSectionAngle" : 42,
                             "get_TailMeanAeroChordLength" : 43,
                             "set_TailMeanAeroChordLength" : 44,
                             "get_TailMaxThicknessAlongMAC" : 45,
                             "set_TailMaxThicknessAlongMAC" : 46,
                             "get_TailLiftFraction" : 47,
                             "set_TailLiftFraction" : 48, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrMissileAdvancedAero._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrMissileAdvancedAero from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrMissileAdvancedAero.__dict__ and type(IAgAvtrMissileAdvancedAero.__dict__[attrname]) == property:
            return IAgAvtrMissileAdvancedAero.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrMissileAdvancedAero.")
    
    _get_BodyWidth_metadata = { "name" : "BodyWidth",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def BodyWidth(self) -> float:
        """The missile body's width."""
        return self._intf.get_property(IAgAvtrMissileAdvancedAero._metadata, IAgAvtrMissileAdvancedAero._get_BodyWidth_metadata)

    _set_BodyWidth_metadata = { "name" : "BodyWidth",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @BodyWidth.setter
    def BodyWidth(self, newVal:float) -> None:
        """The missile body's width."""
        return self._intf.set_property(IAgAvtrMissileAdvancedAero._metadata, IAgAvtrMissileAdvancedAero._set_BodyWidth_metadata, newVal)

    _get_BodyHeight_metadata = { "name" : "BodyHeight",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def BodyHeight(self) -> float:
        """The missile body's height."""
        return self._intf.get_property(IAgAvtrMissileAdvancedAero._metadata, IAgAvtrMissileAdvancedAero._get_BodyHeight_metadata)

    _set_BodyHeight_metadata = { "name" : "BodyHeight",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @BodyHeight.setter
    def BodyHeight(self, newVal:float) -> None:
        """The missile body's height."""
        return self._intf.set_property(IAgAvtrMissileAdvancedAero._metadata, IAgAvtrMissileAdvancedAero._set_BodyHeight_metadata, newVal)

    _get_BodyLength_metadata = { "name" : "BodyLength",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def BodyLength(self) -> float:
        """The missile body's length."""
        return self._intf.get_property(IAgAvtrMissileAdvancedAero._metadata, IAgAvtrMissileAdvancedAero._get_BodyLength_metadata)

    _set_BodyLength_metadata = { "name" : "BodyLength",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @BodyLength.setter
    def BodyLength(self, newVal:float) -> None:
        """The missile body's length."""
        return self._intf.set_property(IAgAvtrMissileAdvancedAero._metadata, IAgAvtrMissileAdvancedAero._set_BodyLength_metadata, newVal)

    _get_NoseLength_metadata = { "name" : "NoseLength",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def NoseLength(self) -> float:
        """The missile nose's length."""
        return self._intf.get_property(IAgAvtrMissileAdvancedAero._metadata, IAgAvtrMissileAdvancedAero._get_NoseLength_metadata)

    _set_NoseLength_metadata = { "name" : "NoseLength",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @NoseLength.setter
    def NoseLength(self, newVal:float) -> None:
        """The missile nose's length."""
        return self._intf.set_property(IAgAvtrMissileAdvancedAero._metadata, IAgAvtrMissileAdvancedAero._set_NoseLength_metadata, newVal)

    _get_NoseTipDiameter_metadata = { "name" : "NoseTipDiameter",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def NoseTipDiameter(self) -> float:
        """The missile nose's diameter at the tip."""
        return self._intf.get_property(IAgAvtrMissileAdvancedAero._metadata, IAgAvtrMissileAdvancedAero._get_NoseTipDiameter_metadata)

    _set_NoseTipDiameter_metadata = { "name" : "NoseTipDiameter",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @NoseTipDiameter.setter
    def NoseTipDiameter(self, newVal:float) -> None:
        """The missile nose's diameter at the tip."""
        return self._intf.set_property(IAgAvtrMissileAdvancedAero._metadata, IAgAvtrMissileAdvancedAero._set_NoseTipDiameter_metadata, newVal)

    _get_NozzleDiameter_metadata = { "name" : "NozzleDiameter",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def NozzleDiameter(self) -> float:
        """The diameter of the missile's nozzle."""
        return self._intf.get_property(IAgAvtrMissileAdvancedAero._metadata, IAgAvtrMissileAdvancedAero._get_NozzleDiameter_metadata)

    _set_NozzleDiameter_metadata = { "name" : "NozzleDiameter",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @NozzleDiameter.setter
    def NozzleDiameter(self, newVal:float) -> None:
        """The diameter of the missile's nozzle."""
        return self._intf.set_property(IAgAvtrMissileAdvancedAero._metadata, IAgAvtrMissileAdvancedAero._set_NozzleDiameter_metadata, newVal)

    _get_MaxAOA_metadata = { "name" : "MaxAOA",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def MaxAOA(self) -> typing.Any:
        """The missile's maximum angle of attack."""
        return self._intf.get_property(IAgAvtrMissileAdvancedAero._metadata, IAgAvtrMissileAdvancedAero._get_MaxAOA_metadata)

    _set_MaxAOA_metadata = { "name" : "MaxAOA",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @MaxAOA.setter
    def MaxAOA(self, newVal:typing.Any) -> None:
        """The missile's maximum angle of attack."""
        return self._intf.set_property(IAgAvtrMissileAdvancedAero._metadata, IAgAvtrMissileAdvancedAero._set_MaxAOA_metadata, newVal)

    _get_MinMach_metadata = { "name" : "MinMach",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def MinMach(self) -> float:
        """The minimum mach number of the missile."""
        return self._intf.get_property(IAgAvtrMissileAdvancedAero._metadata, IAgAvtrMissileAdvancedAero._get_MinMach_metadata)

    _set_MinMach_metadata = { "name" : "MinMach",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @MinMach.setter
    def MinMach(self, newVal:float) -> None:
        """The minimum mach number of the missile."""
        return self._intf.set_property(IAgAvtrMissileAdvancedAero._metadata, IAgAvtrMissileAdvancedAero._set_MinMach_metadata, newVal)

    _get_WingCount_metadata = { "name" : "WingCount",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.LONG_arg,) }
    @property
    def WingCount(self) -> int:
        """The number of wings on the missile."""
        return self._intf.get_property(IAgAvtrMissileAdvancedAero._metadata, IAgAvtrMissileAdvancedAero._get_WingCount_metadata)

    _set_WingCount_metadata = { "name" : "WingCount",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.LONG_arg,) }
    @WingCount.setter
    def WingCount(self, newVal:int) -> None:
        """The number of wings on the missile."""
        return self._intf.set_property(IAgAvtrMissileAdvancedAero._metadata, IAgAvtrMissileAdvancedAero._set_WingCount_metadata, newVal)

    _get_WingSpan_metadata = { "name" : "WingSpan",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def WingSpan(self) -> float:
        """The span of one of the missile's wings."""
        return self._intf.get_property(IAgAvtrMissileAdvancedAero._metadata, IAgAvtrMissileAdvancedAero._get_WingSpan_metadata)

    _set_WingSpan_metadata = { "name" : "WingSpan",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @WingSpan.setter
    def WingSpan(self, newVal:float) -> None:
        """The span of one of the missile's wings."""
        return self._intf.set_property(IAgAvtrMissileAdvancedAero._metadata, IAgAvtrMissileAdvancedAero._set_WingSpan_metadata, newVal)

    _get_WingSurfaceArea_metadata = { "name" : "WingSurfaceArea",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def WingSurfaceArea(self) -> float:
        """The area of one of the missile's wings."""
        return self._intf.get_property(IAgAvtrMissileAdvancedAero._metadata, IAgAvtrMissileAdvancedAero._get_WingSurfaceArea_metadata)

    _set_WingSurfaceArea_metadata = { "name" : "WingSurfaceArea",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @WingSurfaceArea.setter
    def WingSurfaceArea(self, newVal:float) -> None:
        """The area of one of the missile's wings."""
        return self._intf.set_property(IAgAvtrMissileAdvancedAero._metadata, IAgAvtrMissileAdvancedAero._set_WingSurfaceArea_metadata, newVal)

    _get_WingLeadingEdgeSweepAngle_metadata = { "name" : "WingLeadingEdgeSweepAngle",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def WingLeadingEdgeSweepAngle(self) -> typing.Any:
        """The leading edge weep angle of the wings."""
        return self._intf.get_property(IAgAvtrMissileAdvancedAero._metadata, IAgAvtrMissileAdvancedAero._get_WingLeadingEdgeSweepAngle_metadata)

    _set_WingLeadingEdgeSweepAngle_metadata = { "name" : "WingLeadingEdgeSweepAngle",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @WingLeadingEdgeSweepAngle.setter
    def WingLeadingEdgeSweepAngle(self, newVal:typing.Any) -> None:
        """The leading edge weep angle of the wings."""
        return self._intf.set_property(IAgAvtrMissileAdvancedAero._metadata, IAgAvtrMissileAdvancedAero._set_WingLeadingEdgeSweepAngle_metadata, newVal)

    _get_WingLeadingEdgeSectionAngle_metadata = { "name" : "WingLeadingEdgeSectionAngle",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def WingLeadingEdgeSectionAngle(self) -> typing.Any:
        """The leading edge section angle of the wings."""
        return self._intf.get_property(IAgAvtrMissileAdvancedAero._metadata, IAgAvtrMissileAdvancedAero._get_WingLeadingEdgeSectionAngle_metadata)

    _set_WingLeadingEdgeSectionAngle_metadata = { "name" : "WingLeadingEdgeSectionAngle",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @WingLeadingEdgeSectionAngle.setter
    def WingLeadingEdgeSectionAngle(self, newVal:typing.Any) -> None:
        """The leading edge section angle of the wings."""
        return self._intf.set_property(IAgAvtrMissileAdvancedAero._metadata, IAgAvtrMissileAdvancedAero._set_WingLeadingEdgeSectionAngle_metadata, newVal)

    _get_WingMeanAeroChordLength_metadata = { "name" : "WingMeanAeroChordLength",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def WingMeanAeroChordLength(self) -> float:
        """The mean chord length of one of the missile's wings."""
        return self._intf.get_property(IAgAvtrMissileAdvancedAero._metadata, IAgAvtrMissileAdvancedAero._get_WingMeanAeroChordLength_metadata)

    _set_WingMeanAeroChordLength_metadata = { "name" : "WingMeanAeroChordLength",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @WingMeanAeroChordLength.setter
    def WingMeanAeroChordLength(self, newVal:float) -> None:
        """The mean chord length of one of the missile's wings."""
        return self._intf.set_property(IAgAvtrMissileAdvancedAero._metadata, IAgAvtrMissileAdvancedAero._set_WingMeanAeroChordLength_metadata, newVal)

    _get_WingMaxThicknessAlongMAC_metadata = { "name" : "WingMaxThicknessAlongMAC",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def WingMaxThicknessAlongMAC(self) -> float:
        """The max thickness of the wing along the mean aerodynamic chord."""
        return self._intf.get_property(IAgAvtrMissileAdvancedAero._metadata, IAgAvtrMissileAdvancedAero._get_WingMaxThicknessAlongMAC_metadata)

    _set_WingMaxThicknessAlongMAC_metadata = { "name" : "WingMaxThicknessAlongMAC",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @WingMaxThicknessAlongMAC.setter
    def WingMaxThicknessAlongMAC(self, newVal:float) -> None:
        """The max thickness of the wing along the mean aerodynamic chord."""
        return self._intf.set_property(IAgAvtrMissileAdvancedAero._metadata, IAgAvtrMissileAdvancedAero._set_WingMaxThicknessAlongMAC_metadata, newVal)

    _get_WingLiftFraction_metadata = { "name" : "WingLiftFraction",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def WingLiftFraction(self) -> float:
        """The lift fraction of the wing."""
        return self._intf.get_property(IAgAvtrMissileAdvancedAero._metadata, IAgAvtrMissileAdvancedAero._get_WingLiftFraction_metadata)

    _set_WingLiftFraction_metadata = { "name" : "WingLiftFraction",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @WingLiftFraction.setter
    def WingLiftFraction(self, newVal:float) -> None:
        """The lift fraction of the wing."""
        return self._intf.set_property(IAgAvtrMissileAdvancedAero._metadata, IAgAvtrMissileAdvancedAero._set_WingLiftFraction_metadata, newVal)

    _get_TailCount_metadata = { "name" : "TailCount",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.LONG_arg,) }
    @property
    def TailCount(self) -> int:
        """The number of tails on the missile."""
        return self._intf.get_property(IAgAvtrMissileAdvancedAero._metadata, IAgAvtrMissileAdvancedAero._get_TailCount_metadata)

    _set_TailCount_metadata = { "name" : "TailCount",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.LONG_arg,) }
    @TailCount.setter
    def TailCount(self, newVal:int) -> None:
        """The number of tails on the missile."""
        return self._intf.set_property(IAgAvtrMissileAdvancedAero._metadata, IAgAvtrMissileAdvancedAero._set_TailCount_metadata, newVal)

    _get_TailSpan_metadata = { "name" : "TailSpan",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def TailSpan(self) -> float:
        """The span of one of the missile's tails."""
        return self._intf.get_property(IAgAvtrMissileAdvancedAero._metadata, IAgAvtrMissileAdvancedAero._get_TailSpan_metadata)

    _set_TailSpan_metadata = { "name" : "TailSpan",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @TailSpan.setter
    def TailSpan(self, newVal:float) -> None:
        """The span of one of the missile's tails."""
        return self._intf.set_property(IAgAvtrMissileAdvancedAero._metadata, IAgAvtrMissileAdvancedAero._set_TailSpan_metadata, newVal)

    _get_TailSurfaceArea_metadata = { "name" : "TailSurfaceArea",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def TailSurfaceArea(self) -> float:
        """The area of one of the missile's tails."""
        return self._intf.get_property(IAgAvtrMissileAdvancedAero._metadata, IAgAvtrMissileAdvancedAero._get_TailSurfaceArea_metadata)

    _set_TailSurfaceArea_metadata = { "name" : "TailSurfaceArea",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @TailSurfaceArea.setter
    def TailSurfaceArea(self, newVal:float) -> None:
        """The area of one of the missile's tails."""
        return self._intf.set_property(IAgAvtrMissileAdvancedAero._metadata, IAgAvtrMissileAdvancedAero._set_TailSurfaceArea_metadata, newVal)

    _get_TailLeadingEdgeSweepAngle_metadata = { "name" : "TailLeadingEdgeSweepAngle",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def TailLeadingEdgeSweepAngle(self) -> typing.Any:
        """The leading edge weep angle of the tails."""
        return self._intf.get_property(IAgAvtrMissileAdvancedAero._metadata, IAgAvtrMissileAdvancedAero._get_TailLeadingEdgeSweepAngle_metadata)

    _set_TailLeadingEdgeSweepAngle_metadata = { "name" : "TailLeadingEdgeSweepAngle",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @TailLeadingEdgeSweepAngle.setter
    def TailLeadingEdgeSweepAngle(self, newVal:typing.Any) -> None:
        """The leading edge weep angle of the tails."""
        return self._intf.set_property(IAgAvtrMissileAdvancedAero._metadata, IAgAvtrMissileAdvancedAero._set_TailLeadingEdgeSweepAngle_metadata, newVal)

    _get_TailLeadingEdgeSectionAngle_metadata = { "name" : "TailLeadingEdgeSectionAngle",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def TailLeadingEdgeSectionAngle(self) -> typing.Any:
        """The leading edge section angle of the tails."""
        return self._intf.get_property(IAgAvtrMissileAdvancedAero._metadata, IAgAvtrMissileAdvancedAero._get_TailLeadingEdgeSectionAngle_metadata)

    _set_TailLeadingEdgeSectionAngle_metadata = { "name" : "TailLeadingEdgeSectionAngle",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @TailLeadingEdgeSectionAngle.setter
    def TailLeadingEdgeSectionAngle(self, newVal:typing.Any) -> None:
        """The leading edge section angle of the tails."""
        return self._intf.set_property(IAgAvtrMissileAdvancedAero._metadata, IAgAvtrMissileAdvancedAero._set_TailLeadingEdgeSectionAngle_metadata, newVal)

    _get_TailMeanAeroChordLength_metadata = { "name" : "TailMeanAeroChordLength",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def TailMeanAeroChordLength(self) -> float:
        """The mean chord length of one of the missile's tails."""
        return self._intf.get_property(IAgAvtrMissileAdvancedAero._metadata, IAgAvtrMissileAdvancedAero._get_TailMeanAeroChordLength_metadata)

    _set_TailMeanAeroChordLength_metadata = { "name" : "TailMeanAeroChordLength",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @TailMeanAeroChordLength.setter
    def TailMeanAeroChordLength(self, newVal:float) -> None:
        """The mean chord length of one of the missile's tails."""
        return self._intf.set_property(IAgAvtrMissileAdvancedAero._metadata, IAgAvtrMissileAdvancedAero._set_TailMeanAeroChordLength_metadata, newVal)

    _get_TailMaxThicknessAlongMAC_metadata = { "name" : "TailMaxThicknessAlongMAC",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def TailMaxThicknessAlongMAC(self) -> float:
        """The max thickness of the tail along the mean aerodynamic chord."""
        return self._intf.get_property(IAgAvtrMissileAdvancedAero._metadata, IAgAvtrMissileAdvancedAero._get_TailMaxThicknessAlongMAC_metadata)

    _set_TailMaxThicknessAlongMAC_metadata = { "name" : "TailMaxThicknessAlongMAC",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @TailMaxThicknessAlongMAC.setter
    def TailMaxThicknessAlongMAC(self, newVal:float) -> None:
        """The max thickness of the tail along the mean aerodynamic chord."""
        return self._intf.set_property(IAgAvtrMissileAdvancedAero._metadata, IAgAvtrMissileAdvancedAero._set_TailMaxThicknessAlongMAC_metadata, newVal)

    _get_TailLiftFraction_metadata = { "name" : "TailLiftFraction",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def TailLiftFraction(self) -> float:
        """The lift fraction of the tail."""
        return self._intf.get_property(IAgAvtrMissileAdvancedAero._metadata, IAgAvtrMissileAdvancedAero._get_TailLiftFraction_metadata)

    _set_TailLiftFraction_metadata = { "name" : "TailLiftFraction",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @TailLiftFraction.setter
    def TailLiftFraction(self, newVal:float) -> None:
        """The lift fraction of the tail."""
        return self._intf.set_property(IAgAvtrMissileAdvancedAero._metadata, IAgAvtrMissileAdvancedAero._set_TailLiftFraction_metadata, newVal)


agcls.AgClassCatalog.add_catalog_entry("{a26fe490-218c-44e4-95ab-69c20d3d6629}", IAgAvtrMissileAdvancedAero)
agcls.AgTypeNameMap["IAgAvtrMissileAdvancedAero"] = IAgAvtrMissileAdvancedAero

class IAgAvtrMissileRamjetProp(object):
    """Interface used to access the Ramjet propulsion options for a missile."""
    _num_methods = 22
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{a0a4fb0a-67cb-44bd-b0e9-2362cfedbb0e}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_DesignMach" : 1,
                             "set_DesignMach" : 2,
                             "get_DesignAltitude" : 3,
                             "set_DesignAltitude" : 4,
                             "get_DesignThrust" : 5,
                             "set_DesignThrust" : 6,
                             "get_EngineTemp" : 7,
                             "set_EngineTemp" : 8,
                             "get_FuelHeatingValue" : 9,
                             "set_FuelHeatingValue" : 10,
                             "get_InletPressureRatio" : 11,
                             "set_InletPressureRatio" : 12,
                             "get_BurnerPressureRatio" : 13,
                             "set_BurnerPressureRatio" : 14,
                             "get_NozzlePressureRatio" : 15,
                             "set_NozzlePressureRatio" : 16,
                             "get_P0overP9" : 17,
                             "set_P0overP9" : 18,
                             "get_BurnerEfficiency" : 19,
                             "set_BurnerEfficiency" : 20,
                             "get_NoThrustWhenNoFuel" : 21,
                             "set_NoThrustWhenNoFuel" : 22, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrMissileRamjetProp._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrMissileRamjetProp from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrMissileRamjetProp.__dict__ and type(IAgAvtrMissileRamjetProp.__dict__[attrname]) == property:
            return IAgAvtrMissileRamjetProp.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrMissileRamjetProp.")
    
    _get_DesignMach_metadata = { "name" : "DesignMach",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def DesignMach(self) -> float:
        """The mach number design point of the engine."""
        return self._intf.get_property(IAgAvtrMissileRamjetProp._metadata, IAgAvtrMissileRamjetProp._get_DesignMach_metadata)

    _set_DesignMach_metadata = { "name" : "DesignMach",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @DesignMach.setter
    def DesignMach(self, newVal:float) -> None:
        """The mach number design point of the engine."""
        return self._intf.set_property(IAgAvtrMissileRamjetProp._metadata, IAgAvtrMissileRamjetProp._set_DesignMach_metadata, newVal)

    _get_DesignAltitude_metadata = { "name" : "DesignAltitude",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def DesignAltitude(self) -> float:
        """The altitude design point of the engine."""
        return self._intf.get_property(IAgAvtrMissileRamjetProp._metadata, IAgAvtrMissileRamjetProp._get_DesignAltitude_metadata)

    _set_DesignAltitude_metadata = { "name" : "DesignAltitude",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @DesignAltitude.setter
    def DesignAltitude(self, newVal:float) -> None:
        """The altitude design point of the engine."""
        return self._intf.set_property(IAgAvtrMissileRamjetProp._metadata, IAgAvtrMissileRamjetProp._set_DesignAltitude_metadata, newVal)

    _get_DesignThrust_metadata = { "name" : "DesignThrust",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def DesignThrust(self) -> float:
        """The thrust design point of the engine."""
        return self._intf.get_property(IAgAvtrMissileRamjetProp._metadata, IAgAvtrMissileRamjetProp._get_DesignThrust_metadata)

    _set_DesignThrust_metadata = { "name" : "DesignThrust",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @DesignThrust.setter
    def DesignThrust(self, newVal:float) -> None:
        """The thrust design point of the engine."""
        return self._intf.set_property(IAgAvtrMissileRamjetProp._metadata, IAgAvtrMissileRamjetProp._set_DesignThrust_metadata, newVal)

    _get_EngineTemp_metadata = { "name" : "EngineTemp",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def EngineTemp(self) -> float:
        """The maximum temperature that the engine material can support."""
        return self._intf.get_property(IAgAvtrMissileRamjetProp._metadata, IAgAvtrMissileRamjetProp._get_EngineTemp_metadata)

    _set_EngineTemp_metadata = { "name" : "EngineTemp",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @EngineTemp.setter
    def EngineTemp(self, newVal:float) -> None:
        """The maximum temperature that the engine material can support."""
        return self._intf.set_property(IAgAvtrMissileRamjetProp._metadata, IAgAvtrMissileRamjetProp._set_EngineTemp_metadata, newVal)

    _get_FuelHeatingValue_metadata = { "name" : "FuelHeatingValue",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def FuelHeatingValue(self) -> float:
        """The heating value of the fuel."""
        return self._intf.get_property(IAgAvtrMissileRamjetProp._metadata, IAgAvtrMissileRamjetProp._get_FuelHeatingValue_metadata)

    _set_FuelHeatingValue_metadata = { "name" : "FuelHeatingValue",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @FuelHeatingValue.setter
    def FuelHeatingValue(self, newVal:float) -> None:
        """The heating value of the fuel."""
        return self._intf.set_property(IAgAvtrMissileRamjetProp._metadata, IAgAvtrMissileRamjetProp._set_FuelHeatingValue_metadata, newVal)

    _get_InletPressureRatio_metadata = { "name" : "InletPressureRatio",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def InletPressureRatio(self) -> float:
        """The pressure ratio from the inlet exit to the entrance."""
        return self._intf.get_property(IAgAvtrMissileRamjetProp._metadata, IAgAvtrMissileRamjetProp._get_InletPressureRatio_metadata)

    _set_InletPressureRatio_metadata = { "name" : "InletPressureRatio",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @InletPressureRatio.setter
    def InletPressureRatio(self, newVal:float) -> None:
        """The pressure ratio from the inlet exit to the entrance."""
        return self._intf.set_property(IAgAvtrMissileRamjetProp._metadata, IAgAvtrMissileRamjetProp._set_InletPressureRatio_metadata, newVal)

    _get_BurnerPressureRatio_metadata = { "name" : "BurnerPressureRatio",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def BurnerPressureRatio(self) -> float:
        """The pressure ratio from the burner exit to the entrance."""
        return self._intf.get_property(IAgAvtrMissileRamjetProp._metadata, IAgAvtrMissileRamjetProp._get_BurnerPressureRatio_metadata)

    _set_BurnerPressureRatio_metadata = { "name" : "BurnerPressureRatio",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @BurnerPressureRatio.setter
    def BurnerPressureRatio(self, newVal:float) -> None:
        """The pressure ratio from the burner exit to the entrance."""
        return self._intf.set_property(IAgAvtrMissileRamjetProp._metadata, IAgAvtrMissileRamjetProp._set_BurnerPressureRatio_metadata, newVal)

    _get_NozzlePressureRatio_metadata = { "name" : "NozzlePressureRatio",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def NozzlePressureRatio(self) -> float:
        """The pressure ratio from the nozzle exit to the entrance."""
        return self._intf.get_property(IAgAvtrMissileRamjetProp._metadata, IAgAvtrMissileRamjetProp._get_NozzlePressureRatio_metadata)

    _set_NozzlePressureRatio_metadata = { "name" : "NozzlePressureRatio",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @NozzlePressureRatio.setter
    def NozzlePressureRatio(self, newVal:float) -> None:
        """The pressure ratio from the nozzle exit to the entrance."""
        return self._intf.set_property(IAgAvtrMissileRamjetProp._metadata, IAgAvtrMissileRamjetProp._set_NozzlePressureRatio_metadata, newVal)

    _get_P0overP9_metadata = { "name" : "P0overP9",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def P0overP9(self) -> float:
        """The pressure ratio from ambient conditions to the engine exit."""
        return self._intf.get_property(IAgAvtrMissileRamjetProp._metadata, IAgAvtrMissileRamjetProp._get_P0overP9_metadata)

    _set_P0overP9_metadata = { "name" : "P0overP9",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @P0overP9.setter
    def P0overP9(self, newVal:float) -> None:
        """The pressure ratio from ambient conditions to the engine exit."""
        return self._intf.set_property(IAgAvtrMissileRamjetProp._metadata, IAgAvtrMissileRamjetProp._set_P0overP9_metadata, newVal)

    _get_BurnerEfficiency_metadata = { "name" : "BurnerEfficiency",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def BurnerEfficiency(self) -> float:
        """The efficiency of the burner."""
        return self._intf.get_property(IAgAvtrMissileRamjetProp._metadata, IAgAvtrMissileRamjetProp._get_BurnerEfficiency_metadata)

    _set_BurnerEfficiency_metadata = { "name" : "BurnerEfficiency",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @BurnerEfficiency.setter
    def BurnerEfficiency(self, newVal:float) -> None:
        """The efficiency of the burner."""
        return self._intf.set_property(IAgAvtrMissileRamjetProp._metadata, IAgAvtrMissileRamjetProp._set_BurnerEfficiency_metadata, newVal)

    _get_NoThrustWhenNoFuel_metadata = { "name" : "NoThrustWhenNoFuel",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def NoThrustWhenNoFuel(self) -> bool:
        """Opt to have no thrust if the fuel is empty."""
        return self._intf.get_property(IAgAvtrMissileRamjetProp._metadata, IAgAvtrMissileRamjetProp._get_NoThrustWhenNoFuel_metadata)

    _set_NoThrustWhenNoFuel_metadata = { "name" : "NoThrustWhenNoFuel",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @NoThrustWhenNoFuel.setter
    def NoThrustWhenNoFuel(self, pVal:bool) -> None:
        """Opt to have no thrust if the fuel is empty."""
        return self._intf.set_property(IAgAvtrMissileRamjetProp._metadata, IAgAvtrMissileRamjetProp._set_NoThrustWhenNoFuel_metadata, pVal)


agcls.AgClassCatalog.add_catalog_entry("{a0a4fb0a-67cb-44bd-b0e9-2362cfedbb0e}", IAgAvtrMissileRamjetProp)
agcls.AgTypeNameMap["IAgAvtrMissileRamjetProp"] = IAgAvtrMissileRamjetProp

class IAgAvtrMissileRocketProp(object):
    """Interface used to access the Rocket propulsion options for a missile."""
    _num_methods = 18
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{4aa12da8-8ff9-40f4-bbf7-1e09aa7f04f8}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_NozzleExpansionRatio" : 1,
                             "set_NozzleExpansionRatio" : 2,
                             "get_NozzleExitDiameter" : 3,
                             "set_NozzleExitDiameter" : 4,
                             "get_CombustionChamberPressure" : 5,
                             "set_CombustionChamberPressure" : 6,
                             "get_PropellantSpecificHeatRatio" : 7,
                             "set_PropellantSpecificHeatRatio" : 8,
                             "get_PropellantCharacteristicVelocity" : 9,
                             "set_PropellantCharacteristicVelocity" : 10,
                             "get_UseBoostSustainMode" : 11,
                             "set_UseBoostSustainMode" : 12,
                             "get_BoostFuelFraction" : 13,
                             "set_BoostFuelFraction" : 14,
                             "get_BoostChamberPressure" : 15,
                             "set_BoostChamberPressure" : 16,
                             "get_NoThrustWhenNoFuel" : 17,
                             "set_NoThrustWhenNoFuel" : 18, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrMissileRocketProp._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrMissileRocketProp from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrMissileRocketProp.__dict__ and type(IAgAvtrMissileRocketProp.__dict__[attrname]) == property:
            return IAgAvtrMissileRocketProp.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrMissileRocketProp.")
    
    _get_NozzleExpansionRatio_metadata = { "name" : "NozzleExpansionRatio",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def NozzleExpansionRatio(self) -> float:
        """The exit area divided by the throat area."""
        return self._intf.get_property(IAgAvtrMissileRocketProp._metadata, IAgAvtrMissileRocketProp._get_NozzleExpansionRatio_metadata)

    _set_NozzleExpansionRatio_metadata = { "name" : "NozzleExpansionRatio",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @NozzleExpansionRatio.setter
    def NozzleExpansionRatio(self, newVal:float) -> None:
        """The exit area divided by the throat area."""
        return self._intf.set_property(IAgAvtrMissileRocketProp._metadata, IAgAvtrMissileRocketProp._set_NozzleExpansionRatio_metadata, newVal)

    _get_NozzleExitDiameter_metadata = { "name" : "NozzleExitDiameter",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def NozzleExitDiameter(self) -> float:
        """The diameter of the nozzle exit."""
        return self._intf.get_property(IAgAvtrMissileRocketProp._metadata, IAgAvtrMissileRocketProp._get_NozzleExitDiameter_metadata)

    _set_NozzleExitDiameter_metadata = { "name" : "NozzleExitDiameter",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @NozzleExitDiameter.setter
    def NozzleExitDiameter(self, newVal:float) -> None:
        """The diameter of the nozzle exit."""
        return self._intf.set_property(IAgAvtrMissileRocketProp._metadata, IAgAvtrMissileRocketProp._set_NozzleExitDiameter_metadata, newVal)

    _get_CombustionChamberPressure_metadata = { "name" : "CombustionChamberPressure",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def CombustionChamberPressure(self) -> float:
        """The pressure in the combustion chamber."""
        return self._intf.get_property(IAgAvtrMissileRocketProp._metadata, IAgAvtrMissileRocketProp._get_CombustionChamberPressure_metadata)

    _set_CombustionChamberPressure_metadata = { "name" : "CombustionChamberPressure",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @CombustionChamberPressure.setter
    def CombustionChamberPressure(self, newVal:float) -> None:
        """The pressure in the combustion chamber."""
        return self._intf.set_property(IAgAvtrMissileRocketProp._metadata, IAgAvtrMissileRocketProp._set_CombustionChamberPressure_metadata, newVal)

    _get_PropellantSpecificHeatRatio_metadata = { "name" : "PropellantSpecificHeatRatio",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def PropellantSpecificHeatRatio(self) -> float:
        """The ratio of the propellant's constant-pressure specific heat to the constant volume specific heat."""
        return self._intf.get_property(IAgAvtrMissileRocketProp._metadata, IAgAvtrMissileRocketProp._get_PropellantSpecificHeatRatio_metadata)

    _set_PropellantSpecificHeatRatio_metadata = { "name" : "PropellantSpecificHeatRatio",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @PropellantSpecificHeatRatio.setter
    def PropellantSpecificHeatRatio(self, newVal:float) -> None:
        """The ratio of the propellant's constant-pressure specific heat to the constant volume specific heat."""
        return self._intf.set_property(IAgAvtrMissileRocketProp._metadata, IAgAvtrMissileRocketProp._set_PropellantSpecificHeatRatio_metadata, newVal)

    _get_PropellantCharacteristicVelocity_metadata = { "name" : "PropellantCharacteristicVelocity",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def PropellantCharacteristicVelocity(self) -> float:
        """The propellant's characteristic velocity (Chamber Pressure * Throat Area / Mass Flow Rate of the engine)."""
        return self._intf.get_property(IAgAvtrMissileRocketProp._metadata, IAgAvtrMissileRocketProp._get_PropellantCharacteristicVelocity_metadata)

    _set_PropellantCharacteristicVelocity_metadata = { "name" : "PropellantCharacteristicVelocity",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @PropellantCharacteristicVelocity.setter
    def PropellantCharacteristicVelocity(self, newVal:float) -> None:
        """The propellant's characteristic velocity (Chamber Pressure * Throat Area / Mass Flow Rate of the engine)."""
        return self._intf.set_property(IAgAvtrMissileRocketProp._metadata, IAgAvtrMissileRocketProp._set_PropellantCharacteristicVelocity_metadata, newVal)

    _get_UseBoostSustainMode_metadata = { "name" : "UseBoostSustainMode",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def UseBoostSustainMode(self) -> bool:
        """Opt for the engine to use a boost phase to achieve a target velocity and then transition to a sustenance phase."""
        return self._intf.get_property(IAgAvtrMissileRocketProp._metadata, IAgAvtrMissileRocketProp._get_UseBoostSustainMode_metadata)

    _set_UseBoostSustainMode_metadata = { "name" : "UseBoostSustainMode",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @UseBoostSustainMode.setter
    def UseBoostSustainMode(self, newVal:bool) -> None:
        """Opt for the engine to use a boost phase to achieve a target velocity and then transition to a sustenance phase."""
        return self._intf.set_property(IAgAvtrMissileRocketProp._metadata, IAgAvtrMissileRocketProp._set_UseBoostSustainMode_metadata, newVal)

    _get_BoostFuelFraction_metadata = { "name" : "BoostFuelFraction",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def BoostFuelFraction(self) -> float:
        """The amount of fuel that is consumed during the boost phase."""
        return self._intf.get_property(IAgAvtrMissileRocketProp._metadata, IAgAvtrMissileRocketProp._get_BoostFuelFraction_metadata)

    _set_BoostFuelFraction_metadata = { "name" : "BoostFuelFraction",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @BoostFuelFraction.setter
    def BoostFuelFraction(self, newVal:float) -> None:
        """The amount of fuel that is consumed during the boost phase."""
        return self._intf.set_property(IAgAvtrMissileRocketProp._metadata, IAgAvtrMissileRocketProp._set_BoostFuelFraction_metadata, newVal)

    _get_BoostChamberPressure_metadata = { "name" : "BoostChamberPressure",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def BoostChamberPressure(self) -> float:
        """The combustion chamber pressure during the boost phase."""
        return self._intf.get_property(IAgAvtrMissileRocketProp._metadata, IAgAvtrMissileRocketProp._get_BoostChamberPressure_metadata)

    _set_BoostChamberPressure_metadata = { "name" : "BoostChamberPressure",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @BoostChamberPressure.setter
    def BoostChamberPressure(self, newVal:float) -> None:
        """The combustion chamber pressure during the boost phase."""
        return self._intf.set_property(IAgAvtrMissileRocketProp._metadata, IAgAvtrMissileRocketProp._set_BoostChamberPressure_metadata, newVal)

    _get_NoThrustWhenNoFuel_metadata = { "name" : "NoThrustWhenNoFuel",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def NoThrustWhenNoFuel(self) -> bool:
        """Opt to have no thrust if the fuel is empty."""
        return self._intf.get_property(IAgAvtrMissileRocketProp._metadata, IAgAvtrMissileRocketProp._get_NoThrustWhenNoFuel_metadata)

    _set_NoThrustWhenNoFuel_metadata = { "name" : "NoThrustWhenNoFuel",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @NoThrustWhenNoFuel.setter
    def NoThrustWhenNoFuel(self, pVal:bool) -> None:
        """Opt to have no thrust if the fuel is empty."""
        return self._intf.set_property(IAgAvtrMissileRocketProp._metadata, IAgAvtrMissileRocketProp._set_NoThrustWhenNoFuel_metadata, pVal)


agcls.AgClassCatalog.add_catalog_entry("{4aa12da8-8ff9-40f4-bbf7-1e09aa7f04f8}", IAgAvtrMissileRocketProp)
agcls.AgTypeNameMap["IAgAvtrMissileRocketProp"] = IAgAvtrMissileRocketProp

class IAgAvtrMissileTurbojetProp(object):
    """Interface used to access the Turbojet propulsion options for a missile."""
    _num_methods = 30
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{7d849783-6cbc-442e-aec8-4137fb673619}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_DesignMach" : 1,
                             "set_DesignMach" : 2,
                             "get_DesignAltitude" : 3,
                             "set_DesignAltitude" : 4,
                             "get_DesignThrust" : 5,
                             "set_DesignThrust" : 6,
                             "get_TurbineTemp" : 7,
                             "set_TurbineTemp" : 8,
                             "get_CompressorPressureRatio" : 9,
                             "set_CompressorPressureRatio" : 10,
                             "get_FuelHeatingValue" : 11,
                             "set_FuelHeatingValue" : 12,
                             "get_InletSubsonicPressureRatio" : 13,
                             "set_InletSubsonicPressureRatio" : 14,
                             "get_BurnerPressureRatio" : 15,
                             "set_BurnerPressureRatio" : 16,
                             "get_NozzlePressureRatio" : 17,
                             "set_NozzlePressureRatio" : 18,
                             "get_P0overP9" : 19,
                             "set_P0overP9" : 20,
                             "get_CompressorEfficiency" : 21,
                             "set_CompressorEfficiency" : 22,
                             "get_TurbineEfficiency" : 23,
                             "set_TurbineEfficiency" : 24,
                             "get_BurnerEfficiency" : 25,
                             "set_BurnerEfficiency" : 26,
                             "get_MechanicalEfficiency" : 27,
                             "set_MechanicalEfficiency" : 28,
                             "get_NoThrustWhenNoFuel" : 29,
                             "set_NoThrustWhenNoFuel" : 30, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrMissileTurbojetProp._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrMissileTurbojetProp from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrMissileTurbojetProp.__dict__ and type(IAgAvtrMissileTurbojetProp.__dict__[attrname]) == property:
            return IAgAvtrMissileTurbojetProp.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrMissileTurbojetProp.")
    
    _get_DesignMach_metadata = { "name" : "DesignMach",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def DesignMach(self) -> float:
        """The mach number design point of the engine."""
        return self._intf.get_property(IAgAvtrMissileTurbojetProp._metadata, IAgAvtrMissileTurbojetProp._get_DesignMach_metadata)

    _set_DesignMach_metadata = { "name" : "DesignMach",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @DesignMach.setter
    def DesignMach(self, newVal:float) -> None:
        """The mach number design point of the engine."""
        return self._intf.set_property(IAgAvtrMissileTurbojetProp._metadata, IAgAvtrMissileTurbojetProp._set_DesignMach_metadata, newVal)

    _get_DesignAltitude_metadata = { "name" : "DesignAltitude",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def DesignAltitude(self) -> float:
        """The altitude design point of the engine."""
        return self._intf.get_property(IAgAvtrMissileTurbojetProp._metadata, IAgAvtrMissileTurbojetProp._get_DesignAltitude_metadata)

    _set_DesignAltitude_metadata = { "name" : "DesignAltitude",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @DesignAltitude.setter
    def DesignAltitude(self, newVal:float) -> None:
        """The altitude design point of the engine."""
        return self._intf.set_property(IAgAvtrMissileTurbojetProp._metadata, IAgAvtrMissileTurbojetProp._set_DesignAltitude_metadata, newVal)

    _get_DesignThrust_metadata = { "name" : "DesignThrust",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def DesignThrust(self) -> float:
        """The thrust design point of the engine."""
        return self._intf.get_property(IAgAvtrMissileTurbojetProp._metadata, IAgAvtrMissileTurbojetProp._get_DesignThrust_metadata)

    _set_DesignThrust_metadata = { "name" : "DesignThrust",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @DesignThrust.setter
    def DesignThrust(self, newVal:float) -> None:
        """The thrust design point of the engine."""
        return self._intf.set_property(IAgAvtrMissileTurbojetProp._metadata, IAgAvtrMissileTurbojetProp._set_DesignThrust_metadata, newVal)

    _get_TurbineTemp_metadata = { "name" : "TurbineTemp",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def TurbineTemp(self) -> float:
        """The maximum temperature that the turbine material can support."""
        return self._intf.get_property(IAgAvtrMissileTurbojetProp._metadata, IAgAvtrMissileTurbojetProp._get_TurbineTemp_metadata)

    _set_TurbineTemp_metadata = { "name" : "TurbineTemp",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @TurbineTemp.setter
    def TurbineTemp(self, newVal:float) -> None:
        """The maximum temperature that the turbine material can support."""
        return self._intf.set_property(IAgAvtrMissileTurbojetProp._metadata, IAgAvtrMissileTurbojetProp._set_TurbineTemp_metadata, newVal)

    _get_CompressorPressureRatio_metadata = { "name" : "CompressorPressureRatio",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def CompressorPressureRatio(self) -> float:
        """The maximum compressor pressure ratio."""
        return self._intf.get_property(IAgAvtrMissileTurbojetProp._metadata, IAgAvtrMissileTurbojetProp._get_CompressorPressureRatio_metadata)

    _set_CompressorPressureRatio_metadata = { "name" : "CompressorPressureRatio",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @CompressorPressureRatio.setter
    def CompressorPressureRatio(self, newVal:float) -> None:
        """The maximum compressor pressure ratio."""
        return self._intf.set_property(IAgAvtrMissileTurbojetProp._metadata, IAgAvtrMissileTurbojetProp._set_CompressorPressureRatio_metadata, newVal)

    _get_FuelHeatingValue_metadata = { "name" : "FuelHeatingValue",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def FuelHeatingValue(self) -> float:
        """The heating value of the fuel."""
        return self._intf.get_property(IAgAvtrMissileTurbojetProp._metadata, IAgAvtrMissileTurbojetProp._get_FuelHeatingValue_metadata)

    _set_FuelHeatingValue_metadata = { "name" : "FuelHeatingValue",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @FuelHeatingValue.setter
    def FuelHeatingValue(self, newVal:float) -> None:
        """The heating value of the fuel."""
        return self._intf.set_property(IAgAvtrMissileTurbojetProp._metadata, IAgAvtrMissileTurbojetProp._set_FuelHeatingValue_metadata, newVal)

    _get_InletSubsonicPressureRatio_metadata = { "name" : "InletSubsonicPressureRatio",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def InletSubsonicPressureRatio(self) -> float:
        """The subsonic pressure ratio from the inlet exit to the entrance."""
        return self._intf.get_property(IAgAvtrMissileTurbojetProp._metadata, IAgAvtrMissileTurbojetProp._get_InletSubsonicPressureRatio_metadata)

    _set_InletSubsonicPressureRatio_metadata = { "name" : "InletSubsonicPressureRatio",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @InletSubsonicPressureRatio.setter
    def InletSubsonicPressureRatio(self, newVal:float) -> None:
        """The subsonic pressure ratio from the inlet exit to the entrance."""
        return self._intf.set_property(IAgAvtrMissileTurbojetProp._metadata, IAgAvtrMissileTurbojetProp._set_InletSubsonicPressureRatio_metadata, newVal)

    _get_BurnerPressureRatio_metadata = { "name" : "BurnerPressureRatio",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def BurnerPressureRatio(self) -> float:
        """The pressure ratio from the burner exit to the entrance."""
        return self._intf.get_property(IAgAvtrMissileTurbojetProp._metadata, IAgAvtrMissileTurbojetProp._get_BurnerPressureRatio_metadata)

    _set_BurnerPressureRatio_metadata = { "name" : "BurnerPressureRatio",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @BurnerPressureRatio.setter
    def BurnerPressureRatio(self, newVal:float) -> None:
        """The pressure ratio from the burner exit to the entrance."""
        return self._intf.set_property(IAgAvtrMissileTurbojetProp._metadata, IAgAvtrMissileTurbojetProp._set_BurnerPressureRatio_metadata, newVal)

    _get_NozzlePressureRatio_metadata = { "name" : "NozzlePressureRatio",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def NozzlePressureRatio(self) -> float:
        """The pressure ratio from the nozzle exit to the entrance."""
        return self._intf.get_property(IAgAvtrMissileTurbojetProp._metadata, IAgAvtrMissileTurbojetProp._get_NozzlePressureRatio_metadata)

    _set_NozzlePressureRatio_metadata = { "name" : "NozzlePressureRatio",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @NozzlePressureRatio.setter
    def NozzlePressureRatio(self, newVal:float) -> None:
        """The pressure ratio from the nozzle exit to the entrance."""
        return self._intf.set_property(IAgAvtrMissileTurbojetProp._metadata, IAgAvtrMissileTurbojetProp._set_NozzlePressureRatio_metadata, newVal)

    _get_P0overP9_metadata = { "name" : "P0overP9",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def P0overP9(self) -> float:
        """The pressure ratio from ambient conditions to the engine exit."""
        return self._intf.get_property(IAgAvtrMissileTurbojetProp._metadata, IAgAvtrMissileTurbojetProp._get_P0overP9_metadata)

    _set_P0overP9_metadata = { "name" : "P0overP9",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @P0overP9.setter
    def P0overP9(self, newVal:float) -> None:
        """The pressure ratio from ambient conditions to the engine exit."""
        return self._intf.set_property(IAgAvtrMissileTurbojetProp._metadata, IAgAvtrMissileTurbojetProp._set_P0overP9_metadata, newVal)

    _get_CompressorEfficiency_metadata = { "name" : "CompressorEfficiency",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def CompressorEfficiency(self) -> float:
        """The efficiency of the compressor."""
        return self._intf.get_property(IAgAvtrMissileTurbojetProp._metadata, IAgAvtrMissileTurbojetProp._get_CompressorEfficiency_metadata)

    _set_CompressorEfficiency_metadata = { "name" : "CompressorEfficiency",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @CompressorEfficiency.setter
    def CompressorEfficiency(self, newVal:float) -> None:
        """The efficiency of the compressor."""
        return self._intf.set_property(IAgAvtrMissileTurbojetProp._metadata, IAgAvtrMissileTurbojetProp._set_CompressorEfficiency_metadata, newVal)

    _get_TurbineEfficiency_metadata = { "name" : "TurbineEfficiency",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def TurbineEfficiency(self) -> float:
        """The efficiency of the turbine."""
        return self._intf.get_property(IAgAvtrMissileTurbojetProp._metadata, IAgAvtrMissileTurbojetProp._get_TurbineEfficiency_metadata)

    _set_TurbineEfficiency_metadata = { "name" : "TurbineEfficiency",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @TurbineEfficiency.setter
    def TurbineEfficiency(self, newVal:float) -> None:
        """The efficiency of the turbine."""
        return self._intf.set_property(IAgAvtrMissileTurbojetProp._metadata, IAgAvtrMissileTurbojetProp._set_TurbineEfficiency_metadata, newVal)

    _get_BurnerEfficiency_metadata = { "name" : "BurnerEfficiency",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def BurnerEfficiency(self) -> float:
        """The efficiency of the burner."""
        return self._intf.get_property(IAgAvtrMissileTurbojetProp._metadata, IAgAvtrMissileTurbojetProp._get_BurnerEfficiency_metadata)

    _set_BurnerEfficiency_metadata = { "name" : "BurnerEfficiency",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @BurnerEfficiency.setter
    def BurnerEfficiency(self, newVal:float) -> None:
        """The efficiency of the burner."""
        return self._intf.set_property(IAgAvtrMissileTurbojetProp._metadata, IAgAvtrMissileTurbojetProp._set_BurnerEfficiency_metadata, newVal)

    _get_MechanicalEfficiency_metadata = { "name" : "MechanicalEfficiency",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def MechanicalEfficiency(self) -> float:
        """The mechanical efficiency of the engine."""
        return self._intf.get_property(IAgAvtrMissileTurbojetProp._metadata, IAgAvtrMissileTurbojetProp._get_MechanicalEfficiency_metadata)

    _set_MechanicalEfficiency_metadata = { "name" : "MechanicalEfficiency",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @MechanicalEfficiency.setter
    def MechanicalEfficiency(self, newVal:float) -> None:
        """The mechanical efficiency of the engine."""
        return self._intf.set_property(IAgAvtrMissileTurbojetProp._metadata, IAgAvtrMissileTurbojetProp._set_MechanicalEfficiency_metadata, newVal)

    _get_NoThrustWhenNoFuel_metadata = { "name" : "NoThrustWhenNoFuel",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def NoThrustWhenNoFuel(self) -> bool:
        """Opt to have no thrust if the fuel is empty."""
        return self._intf.get_property(IAgAvtrMissileTurbojetProp._metadata, IAgAvtrMissileTurbojetProp._get_NoThrustWhenNoFuel_metadata)

    _set_NoThrustWhenNoFuel_metadata = { "name" : "NoThrustWhenNoFuel",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @NoThrustWhenNoFuel.setter
    def NoThrustWhenNoFuel(self, pVal:bool) -> None:
        """Opt to have no thrust if the fuel is empty."""
        return self._intf.set_property(IAgAvtrMissileTurbojetProp._metadata, IAgAvtrMissileTurbojetProp._set_NoThrustWhenNoFuel_metadata, pVal)


agcls.AgClassCatalog.add_catalog_entry("{7d849783-6cbc-442e-aec8-4137fb673619}", IAgAvtrMissileTurbojetProp)
agcls.AgTypeNameMap["IAgAvtrMissileTurbojetProp"] = IAgAvtrMissileTurbojetProp

class IAgAvtrRotorcraft(object):
    """Interface used to access the rotorcraft options in the Aviator catalog."""
    _num_methods = 44
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{34b21f79-51d4-4687-8d0f-9ae1d8ac063c}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_MaxAltitude" : 1,
                             "set_MaxAltitude" : 2,
                             "get_DefaultCruiseAltitude" : 3,
                             "set_DefaultCruiseAltitude" : 4,
                             "get_DescentRateFactor" : 5,
                             "set_DescentRateFactor" : 6,
                             "get_MaxClimbAngle" : 7,
                             "set_MaxClimbAngle" : 8,
                             "get_ClimbAtCruiseAirspeed" : 9,
                             "set_ClimbAtCruiseAirspeed" : 10,
                             "get_MaxDescentAngle" : 11,
                             "set_MaxDescentAngle" : 12,
                             "get_MinDescentRate" : 13,
                             "set_MinDescentRate" : 14,
                             "get_MaxLoadFactor" : 15,
                             "set_MaxLoadFactor" : 16,
                             "get_RollRate" : 17,
                             "set_RollRate" : 18,
                             "get_PitchRate" : 19,
                             "set_PitchRate" : 20,
                             "get_YawRate" : 21,
                             "set_YawRate" : 22,
                             "get_YawRateDot" : 23,
                             "set_YawRateDot" : 24,
                             "get_MaxTransitionPitchAngle" : 25,
                             "set_MaxTransitionPitchAngle" : 26,
                             "get_TFMaxFlightPathAngle" : 27,
                             "set_TFMaxFlightPathAngle" : 28,
                             "get_TFTerrainWindow" : 29,
                             "set_TFTerrainWindow" : 30,
                             "get_ComputeDeltaAlt" : 31,
                             "set_ComputeDeltaAlt" : 32,
                             "get_MaxSafeAirspeed" : 33,
                             "get_MaxSafeAirspeedType" : 34,
                             "SetMaxSafeAirspeed" : 35,
                             "get_MaxSafeTranslationSpeed" : 36,
                             "get_MaxSafeTranslationSpeedType" : 37,
                             "SetMaxSafeTranslationSpeed" : 38,
                             "get_IgnoreFPAForClimbDescentTransitions" : 39,
                             "set_IgnoreFPAForClimbDescentTransitions" : 40,
                             "get_DefaultConfiguration" : 41,
                             "get_Aerodynamics" : 42,
                             "get_Propulsion" : 43,
                             "GetAsCatalogItem" : 44, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrRotorcraft._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrRotorcraft from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrRotorcraft.__dict__ and type(IAgAvtrRotorcraft.__dict__[attrname]) == property:
            return IAgAvtrRotorcraft.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrRotorcraft.")
    
    _get_MaxAltitude_metadata = { "name" : "MaxAltitude",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def MaxAltitude(self) -> float:
        """The maximum altitude at which the rotorcraft is capable of operating."""
        return self._intf.get_property(IAgAvtrRotorcraft._metadata, IAgAvtrRotorcraft._get_MaxAltitude_metadata)

    _set_MaxAltitude_metadata = { "name" : "MaxAltitude",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @MaxAltitude.setter
    def MaxAltitude(self, newVal:float) -> None:
        """The maximum altitude at which the rotorcraft is capable of operating."""
        return self._intf.set_property(IAgAvtrRotorcraft._metadata, IAgAvtrRotorcraft._set_MaxAltitude_metadata, newVal)

    _get_DefaultCruiseAltitude_metadata = { "name" : "DefaultCruiseAltitude",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def DefaultCruiseAltitude(self) -> float:
        """The rotorcraft's default cruising altitude."""
        return self._intf.get_property(IAgAvtrRotorcraft._metadata, IAgAvtrRotorcraft._get_DefaultCruiseAltitude_metadata)

    _set_DefaultCruiseAltitude_metadata = { "name" : "DefaultCruiseAltitude",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @DefaultCruiseAltitude.setter
    def DefaultCruiseAltitude(self, newVal:float) -> None:
        """The rotorcraft's default cruising altitude."""
        return self._intf.set_property(IAgAvtrRotorcraft._metadata, IAgAvtrRotorcraft._set_DefaultCruiseAltitude_metadata, newVal)

    _get_DescentRateFactor_metadata = { "name" : "DescentRateFactor",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def DescentRateFactor(self) -> float:
        """The descent rate of the rotorcraft as a factor multiplied by the altitude change rate calculated at zero throttle."""
        return self._intf.get_property(IAgAvtrRotorcraft._metadata, IAgAvtrRotorcraft._get_DescentRateFactor_metadata)

    _set_DescentRateFactor_metadata = { "name" : "DescentRateFactor",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @DescentRateFactor.setter
    def DescentRateFactor(self, newVal:float) -> None:
        """The descent rate of the rotorcraft as a factor multiplied by the altitude change rate calculated at zero throttle."""
        return self._intf.set_property(IAgAvtrRotorcraft._metadata, IAgAvtrRotorcraft._set_DescentRateFactor_metadata, newVal)

    _get_MaxClimbAngle_metadata = { "name" : "MaxClimbAngle",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def MaxClimbAngle(self) -> typing.Any:
        """The maximum pitch angle of the rotorcraft's flight path while climbing."""
        return self._intf.get_property(IAgAvtrRotorcraft._metadata, IAgAvtrRotorcraft._get_MaxClimbAngle_metadata)

    _set_MaxClimbAngle_metadata = { "name" : "MaxClimbAngle",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @MaxClimbAngle.setter
    def MaxClimbAngle(self, newVal:typing.Any) -> None:
        """The maximum pitch angle of the rotorcraft's flight path while climbing."""
        return self._intf.set_property(IAgAvtrRotorcraft._metadata, IAgAvtrRotorcraft._set_MaxClimbAngle_metadata, newVal)

    _get_ClimbAtCruiseAirspeed_metadata = { "name" : "ClimbAtCruiseAirspeed",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def ClimbAtCruiseAirspeed(self) -> bool:
        """Select to define the climbing airspeed of the rotorcraft using the cruise airspeed of the current procedure."""
        return self._intf.get_property(IAgAvtrRotorcraft._metadata, IAgAvtrRotorcraft._get_ClimbAtCruiseAirspeed_metadata)

    _set_ClimbAtCruiseAirspeed_metadata = { "name" : "ClimbAtCruiseAirspeed",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @ClimbAtCruiseAirspeed.setter
    def ClimbAtCruiseAirspeed(self, newVal:bool) -> None:
        """Select to define the climbing airspeed of the rotorcraft using the cruise airspeed of the current procedure."""
        return self._intf.set_property(IAgAvtrRotorcraft._metadata, IAgAvtrRotorcraft._set_ClimbAtCruiseAirspeed_metadata, newVal)

    _get_MaxDescentAngle_metadata = { "name" : "MaxDescentAngle",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def MaxDescentAngle(self) -> typing.Any:
        """The maximum pitch angle of the rotorcraft's flight path while descending."""
        return self._intf.get_property(IAgAvtrRotorcraft._metadata, IAgAvtrRotorcraft._get_MaxDescentAngle_metadata)

    _set_MaxDescentAngle_metadata = { "name" : "MaxDescentAngle",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @MaxDescentAngle.setter
    def MaxDescentAngle(self, newVal:typing.Any) -> None:
        """The maximum pitch angle of the rotorcraft's flight path while descending."""
        return self._intf.set_property(IAgAvtrRotorcraft._metadata, IAgAvtrRotorcraft._set_MaxDescentAngle_metadata, newVal)

    _get_MinDescentRate_metadata = { "name" : "MinDescentRate",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def MinDescentRate(self) -> float:
        """The minimum rate at which the aircraft will descend once established in a steady descent."""
        return self._intf.get_property(IAgAvtrRotorcraft._metadata, IAgAvtrRotorcraft._get_MinDescentRate_metadata)

    _set_MinDescentRate_metadata = { "name" : "MinDescentRate",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @MinDescentRate.setter
    def MinDescentRate(self, newVal:float) -> None:
        """The minimum rate at which the aircraft will descend once established in a steady descent."""
        return self._intf.set_property(IAgAvtrRotorcraft._metadata, IAgAvtrRotorcraft._set_MinDescentRate_metadata, newVal)

    _get_MaxLoadFactor_metadata = { "name" : "MaxLoadFactor",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def MaxLoadFactor(self) -> float:
        """The maximum load factor that the aircraft can bear while maneuvering in formation."""
        return self._intf.get_property(IAgAvtrRotorcraft._metadata, IAgAvtrRotorcraft._get_MaxLoadFactor_metadata)

    _set_MaxLoadFactor_metadata = { "name" : "MaxLoadFactor",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @MaxLoadFactor.setter
    def MaxLoadFactor(self, newVal:float) -> None:
        """The maximum load factor that the aircraft can bear while maneuvering in formation."""
        return self._intf.set_property(IAgAvtrRotorcraft._metadata, IAgAvtrRotorcraft._set_MaxLoadFactor_metadata, newVal)

    _get_RollRate_metadata = { "name" : "RollRate",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def RollRate(self) -> typing.Any:
        """The standard roll rate of the rotorcraft in a turn."""
        return self._intf.get_property(IAgAvtrRotorcraft._metadata, IAgAvtrRotorcraft._get_RollRate_metadata)

    _set_RollRate_metadata = { "name" : "RollRate",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @RollRate.setter
    def RollRate(self, newVal:typing.Any) -> None:
        """The standard roll rate of the rotorcraft in a turn."""
        return self._intf.set_property(IAgAvtrRotorcraft._metadata, IAgAvtrRotorcraft._set_RollRate_metadata, newVal)

    _get_PitchRate_metadata = { "name" : "PitchRate",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def PitchRate(self) -> typing.Any:
        """The pitch rate when transitioning between attitude modes or procedures."""
        return self._intf.get_property(IAgAvtrRotorcraft._metadata, IAgAvtrRotorcraft._get_PitchRate_metadata)

    _set_PitchRate_metadata = { "name" : "PitchRate",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @PitchRate.setter
    def PitchRate(self, newVal:typing.Any) -> None:
        """The pitch rate when transitioning between attitude modes or procedures."""
        return self._intf.set_property(IAgAvtrRotorcraft._metadata, IAgAvtrRotorcraft._set_PitchRate_metadata, newVal)

    _get_YawRate_metadata = { "name" : "YawRate",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def YawRate(self) -> typing.Any:
        """The yaw rate when transitioning between attitude modes."""
        return self._intf.get_property(IAgAvtrRotorcraft._metadata, IAgAvtrRotorcraft._get_YawRate_metadata)

    _set_YawRate_metadata = { "name" : "YawRate",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @YawRate.setter
    def YawRate(self, newVal:typing.Any) -> None:
        """The yaw rate when transitioning between attitude modes."""
        return self._intf.set_property(IAgAvtrRotorcraft._metadata, IAgAvtrRotorcraft._set_YawRate_metadata, newVal)

    _get_YawRateDot_metadata = { "name" : "YawRateDot",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def YawRateDot(self) -> typing.Any:
        """The rate of change of the yaw rate."""
        return self._intf.get_property(IAgAvtrRotorcraft._metadata, IAgAvtrRotorcraft._get_YawRateDot_metadata)

    _set_YawRateDot_metadata = { "name" : "YawRateDot",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @YawRateDot.setter
    def YawRateDot(self, newVal:typing.Any) -> None:
        """The rate of change of the yaw rate."""
        return self._intf.set_property(IAgAvtrRotorcraft._metadata, IAgAvtrRotorcraft._set_YawRateDot_metadata, newVal)

    _get_MaxTransitionPitchAngle_metadata = { "name" : "MaxTransitionPitchAngle",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def MaxTransitionPitchAngle(self) -> typing.Any:
        """The maximum pitch angle of the flight path when transitioning between forward flight and hovering."""
        return self._intf.get_property(IAgAvtrRotorcraft._metadata, IAgAvtrRotorcraft._get_MaxTransitionPitchAngle_metadata)

    _set_MaxTransitionPitchAngle_metadata = { "name" : "MaxTransitionPitchAngle",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @MaxTransitionPitchAngle.setter
    def MaxTransitionPitchAngle(self, newVal:typing.Any) -> None:
        """The maximum pitch angle of the flight path when transitioning between forward flight and hovering."""
        return self._intf.set_property(IAgAvtrRotorcraft._metadata, IAgAvtrRotorcraft._set_MaxTransitionPitchAngle_metadata, newVal)

    _get_TFMaxFlightPathAngle_metadata = { "name" : "TFMaxFlightPathAngle",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def TFMaxFlightPathAngle(self) -> typing.Any:
        """The maximum pitch angle of the flight path when the rotorcraft is engaged in terrain following flight."""
        return self._intf.get_property(IAgAvtrRotorcraft._metadata, IAgAvtrRotorcraft._get_TFMaxFlightPathAngle_metadata)

    _set_TFMaxFlightPathAngle_metadata = { "name" : "TFMaxFlightPathAngle",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @TFMaxFlightPathAngle.setter
    def TFMaxFlightPathAngle(self, newVal:typing.Any) -> None:
        """The maximum pitch angle of the flight path when the rotorcraft is engaged in terrain following flight."""
        return self._intf.set_property(IAgAvtrRotorcraft._metadata, IAgAvtrRotorcraft._set_TFMaxFlightPathAngle_metadata, newVal)

    _get_TFTerrainWindow_metadata = { "name" : "TFTerrainWindow",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def TFTerrainWindow(self) -> float:
        """The time interval over which terrain points are sampled when the rotorcraft is engaged in terrain following flight."""
        return self._intf.get_property(IAgAvtrRotorcraft._metadata, IAgAvtrRotorcraft._get_TFTerrainWindow_metadata)

    _set_TFTerrainWindow_metadata = { "name" : "TFTerrainWindow",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @TFTerrainWindow.setter
    def TFTerrainWindow(self, newVal:float) -> None:
        """The time interval over which terrain points are sampled when the rotorcraft is engaged in terrain following flight."""
        return self._intf.set_property(IAgAvtrRotorcraft._metadata, IAgAvtrRotorcraft._set_TFTerrainWindow_metadata, newVal)

    _get_ComputeDeltaAlt_metadata = { "name" : "ComputeDeltaAlt",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def ComputeDeltaAlt(self) -> float:
        """The maximum change in altitude in a computed segment before the data is sampled again."""
        return self._intf.get_property(IAgAvtrRotorcraft._metadata, IAgAvtrRotorcraft._get_ComputeDeltaAlt_metadata)

    _set_ComputeDeltaAlt_metadata = { "name" : "ComputeDeltaAlt",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @ComputeDeltaAlt.setter
    def ComputeDeltaAlt(self, newVal:float) -> None:
        """The maximum change in altitude in a computed segment before the data is sampled again."""
        return self._intf.set_property(IAgAvtrRotorcraft._metadata, IAgAvtrRotorcraft._set_ComputeDeltaAlt_metadata, newVal)

    _get_MaxSafeAirspeed_metadata = { "name" : "MaxSafeAirspeed",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def MaxSafeAirspeed(self) -> float:
        """The maximum cruising airspeed of the rotorcraft."""
        return self._intf.get_property(IAgAvtrRotorcraft._metadata, IAgAvtrRotorcraft._get_MaxSafeAirspeed_metadata)

    _get_MaxSafeAirspeedType_metadata = { "name" : "MaxSafeAirspeedType",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrAirspeedType),) }
    @property
    def MaxSafeAirspeedType(self) -> "AgEAvtrAirspeedType":
        """The maximum safe airspeed type."""
        return self._intf.get_property(IAgAvtrRotorcraft._metadata, IAgAvtrRotorcraft._get_MaxSafeAirspeedType_metadata)

    _SetMaxSafeAirspeed_metadata = { "name" : "SetMaxSafeAirspeed",
            "arg_types" : (agcom.LONG, agcom.DOUBLE,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrAirspeedType), agmarshall.DOUBLE_arg,) }
    def SetMaxSafeAirspeed(self, airspeedType:"AgEAvtrAirspeedType", airspeed:float) -> None:
        """Set the maximum safe airspeed and airspeed type."""
        return self._intf.invoke(IAgAvtrRotorcraft._metadata, IAgAvtrRotorcraft._SetMaxSafeAirspeed_metadata, airspeedType, airspeed)

    _get_MaxSafeTranslationSpeed_metadata = { "name" : "MaxSafeTranslationSpeed",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def MaxSafeTranslationSpeed(self) -> float:
        """The maximum translation speed of the rotorcraft."""
        return self._intf.get_property(IAgAvtrRotorcraft._metadata, IAgAvtrRotorcraft._get_MaxSafeTranslationSpeed_metadata)

    _get_MaxSafeTranslationSpeedType_metadata = { "name" : "MaxSafeTranslationSpeedType",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrAirspeedType),) }
    @property
    def MaxSafeTranslationSpeedType(self) -> "AgEAvtrAirspeedType":
        """The maximum safe translation speed type."""
        return self._intf.get_property(IAgAvtrRotorcraft._metadata, IAgAvtrRotorcraft._get_MaxSafeTranslationSpeedType_metadata)

    _SetMaxSafeTranslationSpeed_metadata = { "name" : "SetMaxSafeTranslationSpeed",
            "arg_types" : (agcom.LONG, agcom.DOUBLE,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrAirspeedType), agmarshall.DOUBLE_arg,) }
    def SetMaxSafeTranslationSpeed(self, airspeedType:"AgEAvtrAirspeedType", airspeed:float) -> None:
        """Set the maximum safe translation airspeed and airspeed type."""
        return self._intf.invoke(IAgAvtrRotorcraft._metadata, IAgAvtrRotorcraft._SetMaxSafeTranslationSpeed_metadata, airspeedType, airspeed)

    _get_IgnoreFPAForClimbDescentTransitions_metadata = { "name" : "IgnoreFPAForClimbDescentTransitions",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def IgnoreFPAForClimbDescentTransitions(self) -> bool:
        """Opt to ignore load factor limits when pushing over or pulling up."""
        return self._intf.get_property(IAgAvtrRotorcraft._metadata, IAgAvtrRotorcraft._get_IgnoreFPAForClimbDescentTransitions_metadata)

    _set_IgnoreFPAForClimbDescentTransitions_metadata = { "name" : "IgnoreFPAForClimbDescentTransitions",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @IgnoreFPAForClimbDescentTransitions.setter
    def IgnoreFPAForClimbDescentTransitions(self, newVal:bool) -> None:
        """Opt to ignore load factor limits when pushing over or pulling up."""
        return self._intf.set_property(IAgAvtrRotorcraft._metadata, IAgAvtrRotorcraft._set_IgnoreFPAForClimbDescentTransitions_metadata, newVal)

    _get_DefaultConfiguration_metadata = { "name" : "DefaultConfiguration",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def DefaultConfiguration(self) -> "IAgAvtrConfiguration":
        """The aircraft's default configuration as saved in the catalog."""
        return self._intf.get_property(IAgAvtrRotorcraft._metadata, IAgAvtrRotorcraft._get_DefaultConfiguration_metadata)

    _get_Aerodynamics_metadata = { "name" : "Aerodynamics",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def Aerodynamics(self) -> "IAgAvtrRotorcraftAero":
        """Get the aerodynamics interface."""
        return self._intf.get_property(IAgAvtrRotorcraft._metadata, IAgAvtrRotorcraft._get_Aerodynamics_metadata)

    _get_Propulsion_metadata = { "name" : "Propulsion",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def Propulsion(self) -> "IAgAvtrRotorcraftProp":
        """Get the propulsion interface."""
        return self._intf.get_property(IAgAvtrRotorcraft._metadata, IAgAvtrRotorcraft._get_Propulsion_metadata)

    _GetAsCatalogItem_metadata = { "name" : "GetAsCatalogItem",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    def GetAsCatalogItem(self) -> "IAgAvtrCatalogItem":
        """Get the catalog item interface for this object."""
        return self._intf.invoke(IAgAvtrRotorcraft._metadata, IAgAvtrRotorcraft._GetAsCatalogItem_metadata, out_arg())


agcls.AgClassCatalog.add_catalog_entry("{34b21f79-51d4-4687-8d0f-9ae1d8ac063c}", IAgAvtrRotorcraft)
agcls.AgTypeNameMap["IAgAvtrRotorcraft"] = IAgAvtrRotorcraft

class IAgAvtrRotorcraftAero(object):
    """Interface used to access the aerodynamics options for a rotorcraft."""
    _num_methods = 22
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{76dc620d-2f8f-49ce-b043-7f502815bcb3}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_RotorCount" : 1,
                             "set_RotorCount" : 2,
                             "get_RotorDiameter" : 3,
                             "set_RotorDiameter" : 4,
                             "get_BladesPerRotor" : 5,
                             "set_BladesPerRotor" : 6,
                             "get_BladeChord" : 7,
                             "set_BladeChord" : 8,
                             "get_RotorTipMach" : 9,
                             "set_RotorTipMach" : 10,
                             "get_FuselageFlatPlateArea" : 11,
                             "set_FuselageFlatPlateArea" : 12,
                             "get_TailRotorOffset" : 13,
                             "set_TailRotorOffset" : 14,
                             "get_TailRotorDiameter" : 15,
                             "set_TailRotorDiameter" : 16,
                             "get_BladeProfileDragCD0" : 17,
                             "set_BladeProfileDragCD0" : 18,
                             "get_BladeProfileDragK" : 19,
                             "set_BladeProfileDragK" : 20,
                             "get_InducedPowerCorrectionFactor" : 21,
                             "set_InducedPowerCorrectionFactor" : 22, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrRotorcraftAero._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrRotorcraftAero from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrRotorcraftAero.__dict__ and type(IAgAvtrRotorcraftAero.__dict__[attrname]) == property:
            return IAgAvtrRotorcraftAero.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrRotorcraftAero.")
    
    _get_RotorCount_metadata = { "name" : "RotorCount",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.LONG_arg,) }
    @property
    def RotorCount(self) -> int:
        """The number of rotors."""
        return self._intf.get_property(IAgAvtrRotorcraftAero._metadata, IAgAvtrRotorcraftAero._get_RotorCount_metadata)

    _set_RotorCount_metadata = { "name" : "RotorCount",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.LONG_arg,) }
    @RotorCount.setter
    def RotorCount(self, newVal:int) -> None:
        """The number of rotors."""
        return self._intf.set_property(IAgAvtrRotorcraftAero._metadata, IAgAvtrRotorcraftAero._set_RotorCount_metadata, newVal)

    _get_RotorDiameter_metadata = { "name" : "RotorDiameter",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def RotorDiameter(self) -> float:
        """The diameter of the rotor."""
        return self._intf.get_property(IAgAvtrRotorcraftAero._metadata, IAgAvtrRotorcraftAero._get_RotorDiameter_metadata)

    _set_RotorDiameter_metadata = { "name" : "RotorDiameter",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @RotorDiameter.setter
    def RotorDiameter(self, newVal:float) -> None:
        """The diameter of the rotor."""
        return self._intf.set_property(IAgAvtrRotorcraftAero._metadata, IAgAvtrRotorcraftAero._set_RotorDiameter_metadata, newVal)

    _get_BladesPerRotor_metadata = { "name" : "BladesPerRotor",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.LONG_arg,) }
    @property
    def BladesPerRotor(self) -> int:
        """The number of blades on each rotor."""
        return self._intf.get_property(IAgAvtrRotorcraftAero._metadata, IAgAvtrRotorcraftAero._get_BladesPerRotor_metadata)

    _set_BladesPerRotor_metadata = { "name" : "BladesPerRotor",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.LONG_arg,) }
    @BladesPerRotor.setter
    def BladesPerRotor(self, newVal:int) -> None:
        """The number of blades on each rotor."""
        return self._intf.set_property(IAgAvtrRotorcraftAero._metadata, IAgAvtrRotorcraftAero._set_BladesPerRotor_metadata, newVal)

    _get_BladeChord_metadata = { "name" : "BladeChord",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def BladeChord(self) -> float:
        """The chord length of the blade."""
        return self._intf.get_property(IAgAvtrRotorcraftAero._metadata, IAgAvtrRotorcraftAero._get_BladeChord_metadata)

    _set_BladeChord_metadata = { "name" : "BladeChord",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @BladeChord.setter
    def BladeChord(self, newVal:float) -> None:
        """The chord length of the blade."""
        return self._intf.set_property(IAgAvtrRotorcraftAero._metadata, IAgAvtrRotorcraftAero._set_BladeChord_metadata, newVal)

    _get_RotorTipMach_metadata = { "name" : "RotorTipMach",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def RotorTipMach(self) -> float:
        """The Mach number of the advancing blade tip."""
        return self._intf.get_property(IAgAvtrRotorcraftAero._metadata, IAgAvtrRotorcraftAero._get_RotorTipMach_metadata)

    _set_RotorTipMach_metadata = { "name" : "RotorTipMach",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @RotorTipMach.setter
    def RotorTipMach(self, newVal:float) -> None:
        """The Mach number of the advancing blade tip."""
        return self._intf.set_property(IAgAvtrRotorcraftAero._metadata, IAgAvtrRotorcraftAero._set_RotorTipMach_metadata, newVal)

    _get_FuselageFlatPlateArea_metadata = { "name" : "FuselageFlatPlateArea",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def FuselageFlatPlateArea(self) -> float:
        """The flat plate area for the fuselage."""
        return self._intf.get_property(IAgAvtrRotorcraftAero._metadata, IAgAvtrRotorcraftAero._get_FuselageFlatPlateArea_metadata)

    _set_FuselageFlatPlateArea_metadata = { "name" : "FuselageFlatPlateArea",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @FuselageFlatPlateArea.setter
    def FuselageFlatPlateArea(self, newVal:float) -> None:
        """The flat plate area for the fuselage."""
        return self._intf.set_property(IAgAvtrRotorcraftAero._metadata, IAgAvtrRotorcraftAero._set_FuselageFlatPlateArea_metadata, newVal)

    _get_TailRotorOffset_metadata = { "name" : "TailRotorOffset",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def TailRotorOffset(self) -> float:
        """The offset of the tail rotor."""
        return self._intf.get_property(IAgAvtrRotorcraftAero._metadata, IAgAvtrRotorcraftAero._get_TailRotorOffset_metadata)

    _set_TailRotorOffset_metadata = { "name" : "TailRotorOffset",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @TailRotorOffset.setter
    def TailRotorOffset(self, newVal:float) -> None:
        """The offset of the tail rotor."""
        return self._intf.set_property(IAgAvtrRotorcraftAero._metadata, IAgAvtrRotorcraftAero._set_TailRotorOffset_metadata, newVal)

    _get_TailRotorDiameter_metadata = { "name" : "TailRotorDiameter",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def TailRotorDiameter(self) -> float:
        """The diameter of the tail rotor."""
        return self._intf.get_property(IAgAvtrRotorcraftAero._metadata, IAgAvtrRotorcraftAero._get_TailRotorDiameter_metadata)

    _set_TailRotorDiameter_metadata = { "name" : "TailRotorDiameter",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @TailRotorDiameter.setter
    def TailRotorDiameter(self, newVal:float) -> None:
        """The diameter of the tail rotor."""
        return self._intf.set_property(IAgAvtrRotorcraftAero._metadata, IAgAvtrRotorcraftAero._set_TailRotorDiameter_metadata, newVal)

    _get_BladeProfileDragCD0_metadata = { "name" : "BladeProfileDragCD0",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def BladeProfileDragCD0(self) -> float:
        """The drag coefficient when the rotor disc does not generate any lift."""
        return self._intf.get_property(IAgAvtrRotorcraftAero._metadata, IAgAvtrRotorcraftAero._get_BladeProfileDragCD0_metadata)

    _set_BladeProfileDragCD0_metadata = { "name" : "BladeProfileDragCD0",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @BladeProfileDragCD0.setter
    def BladeProfileDragCD0(self, newVal:float) -> None:
        """The drag coefficient when the rotor disc does not generate any lift."""
        return self._intf.set_property(IAgAvtrRotorcraftAero._metadata, IAgAvtrRotorcraftAero._set_BladeProfileDragCD0_metadata, newVal)

    _get_BladeProfileDragK_metadata = { "name" : "BladeProfileDragK",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def BladeProfileDragK(self) -> float:
        """The induced drag coefficient, which accounts for how lift generation impacts drag."""
        return self._intf.get_property(IAgAvtrRotorcraftAero._metadata, IAgAvtrRotorcraftAero._get_BladeProfileDragK_metadata)

    _set_BladeProfileDragK_metadata = { "name" : "BladeProfileDragK",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @BladeProfileDragK.setter
    def BladeProfileDragK(self, newVal:float) -> None:
        """The induced drag coefficient, which accounts for how lift generation impacts drag."""
        return self._intf.set_property(IAgAvtrRotorcraftAero._metadata, IAgAvtrRotorcraftAero._set_BladeProfileDragK_metadata, newVal)

    _get_InducedPowerCorrectionFactor_metadata = { "name" : "InducedPowerCorrectionFactor",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def InducedPowerCorrectionFactor(self) -> float:
        """The slop factor that accounts for losses."""
        return self._intf.get_property(IAgAvtrRotorcraftAero._metadata, IAgAvtrRotorcraftAero._get_InducedPowerCorrectionFactor_metadata)

    _set_InducedPowerCorrectionFactor_metadata = { "name" : "InducedPowerCorrectionFactor",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @InducedPowerCorrectionFactor.setter
    def InducedPowerCorrectionFactor(self, newVal:float) -> None:
        """The slop factor that accounts for losses."""
        return self._intf.set_property(IAgAvtrRotorcraftAero._metadata, IAgAvtrRotorcraftAero._set_InducedPowerCorrectionFactor_metadata, newVal)


agcls.AgClassCatalog.add_catalog_entry("{76dc620d-2f8f-49ce-b043-7f502815bcb3}", IAgAvtrRotorcraftAero)
agcls.AgTypeNameMap["IAgAvtrRotorcraftAero"] = IAgAvtrRotorcraftAero

class IAgAvtrRotorcraftProp(object):
    """Interface used to access the Propulsion options for a rotorcraft."""
    _num_methods = 6
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{83f50978-efae-48fd-b5e7-df4f1a487aac}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_PowerplantType" : 1,
                             "set_PowerplantType" : 2,
                             "get_MaxSLPower" : 3,
                             "set_MaxSLPower" : 4,
                             "get_MaxSLFuelFlow" : 5,
                             "set_MaxSLFuelFlow" : 6, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrRotorcraftProp._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrRotorcraftProp from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrRotorcraftProp.__dict__ and type(IAgAvtrRotorcraftProp.__dict__[attrname]) == property:
            return IAgAvtrRotorcraftProp.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrRotorcraftProp.")
    
    _get_PowerplantType_metadata = { "name" : "PowerplantType",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrRotorcraftPowerplantType),) }
    @property
    def PowerplantType(self) -> "AgEAvtrRotorcraftPowerplantType":
        """The rotorcraft's powerplant type."""
        return self._intf.get_property(IAgAvtrRotorcraftProp._metadata, IAgAvtrRotorcraftProp._get_PowerplantType_metadata)

    _set_PowerplantType_metadata = { "name" : "PowerplantType",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrRotorcraftPowerplantType),) }
    @PowerplantType.setter
    def PowerplantType(self, newVal:"AgEAvtrRotorcraftPowerplantType") -> None:
        """The rotorcraft's powerplant type."""
        return self._intf.set_property(IAgAvtrRotorcraftProp._metadata, IAgAvtrRotorcraftProp._set_PowerplantType_metadata, newVal)

    _get_MaxSLPower_metadata = { "name" : "MaxSLPower",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def MaxSLPower(self) -> float:
        """The maximum power at sea level."""
        return self._intf.get_property(IAgAvtrRotorcraftProp._metadata, IAgAvtrRotorcraftProp._get_MaxSLPower_metadata)

    _set_MaxSLPower_metadata = { "name" : "MaxSLPower",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @MaxSLPower.setter
    def MaxSLPower(self, newVal:float) -> None:
        """The maximum power at sea level."""
        return self._intf.set_property(IAgAvtrRotorcraftProp._metadata, IAgAvtrRotorcraftProp._set_MaxSLPower_metadata, newVal)

    _get_MaxSLFuelFlow_metadata = { "name" : "MaxSLFuelFlow",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def MaxSLFuelFlow(self) -> float:
        """The maximum fuel flow at sea level."""
        return self._intf.get_property(IAgAvtrRotorcraftProp._metadata, IAgAvtrRotorcraftProp._get_MaxSLFuelFlow_metadata)

    _set_MaxSLFuelFlow_metadata = { "name" : "MaxSLFuelFlow",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @MaxSLFuelFlow.setter
    def MaxSLFuelFlow(self, newVal:float) -> None:
        """The maximum fuel flow at sea level."""
        return self._intf.set_property(IAgAvtrRotorcraftProp._metadata, IAgAvtrRotorcraftProp._set_MaxSLFuelFlow_metadata, newVal)


agcls.AgClassCatalog.add_catalog_entry("{83f50978-efae-48fd-b5e7-df4f1a487aac}", IAgAvtrRotorcraftProp)
agcls.AgTypeNameMap["IAgAvtrRotorcraftProp"] = IAgAvtrRotorcraftProp

class IAgAvtrUserRunwaySource(object):
    """Interface used to access the user runways in the Aviator catalog."""
    _num_methods = 3
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{684e58b2-17da-40e6-ab75-00f965dc947c}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "GetUserRunway" : 1,
                             "AddUserRunway" : 2,
                             "GetAsCatalogSource" : 3, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrUserRunwaySource._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrUserRunwaySource from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrUserRunwaySource.__dict__ and type(IAgAvtrUserRunwaySource.__dict__[attrname]) == property:
            return IAgAvtrUserRunwaySource.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrUserRunwaySource.")
    
    _GetUserRunway_metadata = { "name" : "GetUserRunway",
            "arg_types" : (agcom.BSTR, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.AgInterface_out_arg,) }
    def GetUserRunway(self, name:str) -> "IAgAvtrUserRunway":
        """Gets the user runway with the given name."""
        return self._intf.invoke(IAgAvtrUserRunwaySource._metadata, IAgAvtrUserRunwaySource._GetUserRunway_metadata, name, out_arg())

    _AddUserRunway_metadata = { "name" : "AddUserRunway",
            "arg_types" : (agcom.BSTR, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.AgInterface_out_arg,) }
    def AddUserRunway(self, name:str) -> "IAgAvtrUserRunway":
        """Creates a new user runway with the given name."""
        return self._intf.invoke(IAgAvtrUserRunwaySource._metadata, IAgAvtrUserRunwaySource._AddUserRunway_metadata, name, out_arg())

    _GetAsCatalogSource_metadata = { "name" : "GetAsCatalogSource",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    def GetAsCatalogSource(self) -> "IAgAvtrCatalogSource":
        """Get the catalog source interface for this object."""
        return self._intf.invoke(IAgAvtrUserRunwaySource._metadata, IAgAvtrUserRunwaySource._GetAsCatalogSource_metadata, out_arg())


agcls.AgClassCatalog.add_catalog_entry("{684e58b2-17da-40e6-ab75-00f965dc947c}", IAgAvtrUserRunwaySource)
agcls.AgTypeNameMap["IAgAvtrUserRunwaySource"] = IAgAvtrUserRunwaySource

class IAgAvtrUserRunway(object):
    """Interface used to access a user runway in the Aviator catalog."""
    _num_methods = 18
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{74B0531F-504B-42E6-A8AF-7A6B891A88F8}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "GetAsCatalogItem" : 1,
                             "get_Altitude" : 2,
                             "set_Altitude" : 3,
                             "GetTerrainAlt" : 4,
                             "get_Latitude" : 5,
                             "set_Latitude" : 6,
                             "get_Longitude" : 7,
                             "set_Longitude" : 8,
                             "get_Length" : 9,
                             "set_Length" : 10,
                             "get_LowEndHeading" : 11,
                             "set_LowEndHeading" : 12,
                             "get_HighEndHeading" : 13,
                             "set_HighEndHeading" : 14,
                             "get_IsMagnetic" : 15,
                             "set_IsMagnetic" : 16,
                             "CopySite" : 17,
                             "PasteSite" : 18, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrUserRunway._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrUserRunway from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrUserRunway.__dict__ and type(IAgAvtrUserRunway.__dict__[attrname]) == property:
            return IAgAvtrUserRunway.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrUserRunway.")
    
    _GetAsCatalogItem_metadata = { "name" : "GetAsCatalogItem",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    def GetAsCatalogItem(self) -> "IAgAvtrCatalogItem":
        """Get the catalog item interface for this object."""
        return self._intf.invoke(IAgAvtrUserRunway._metadata, IAgAvtrUserRunway._GetAsCatalogItem_metadata, out_arg())

    _get_Altitude_metadata = { "name" : "Altitude",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def Altitude(self) -> float:
        """The runway altitude."""
        return self._intf.get_property(IAgAvtrUserRunway._metadata, IAgAvtrUserRunway._get_Altitude_metadata)

    _set_Altitude_metadata = { "name" : "Altitude",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @Altitude.setter
    def Altitude(self, newVal:float) -> None:
        """The runway altitude."""
        return self._intf.set_property(IAgAvtrUserRunway._metadata, IAgAvtrUserRunway._set_Altitude_metadata, newVal)

    _GetTerrainAlt_metadata = { "name" : "GetTerrainAlt",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    def GetTerrainAlt(self) -> float:
        """Set the runway altitude to the terrain altitude."""
        return self._intf.invoke(IAgAvtrUserRunway._metadata, IAgAvtrUserRunway._GetTerrainAlt_metadata, out_arg())

    _get_Latitude_metadata = { "name" : "Latitude",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def Latitude(self) -> typing.Any:
        """The runway latitude."""
        return self._intf.get_property(IAgAvtrUserRunway._metadata, IAgAvtrUserRunway._get_Latitude_metadata)

    _set_Latitude_metadata = { "name" : "Latitude",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @Latitude.setter
    def Latitude(self, newVal:typing.Any) -> None:
        """The runway latitude."""
        return self._intf.set_property(IAgAvtrUserRunway._metadata, IAgAvtrUserRunway._set_Latitude_metadata, newVal)

    _get_Longitude_metadata = { "name" : "Longitude",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def Longitude(self) -> typing.Any:
        """The runway longitude."""
        return self._intf.get_property(IAgAvtrUserRunway._metadata, IAgAvtrUserRunway._get_Longitude_metadata)

    _set_Longitude_metadata = { "name" : "Longitude",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @Longitude.setter
    def Longitude(self, newVal:typing.Any) -> None:
        """The runway longitude."""
        return self._intf.set_property(IAgAvtrUserRunway._metadata, IAgAvtrUserRunway._set_Longitude_metadata, newVal)

    _get_Length_metadata = { "name" : "Length",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def Length(self) -> float:
        """The length of the runway"""
        return self._intf.get_property(IAgAvtrUserRunway._metadata, IAgAvtrUserRunway._get_Length_metadata)

    _set_Length_metadata = { "name" : "Length",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @Length.setter
    def Length(self, newVal:float) -> None:
        """The length of the runway"""
        return self._intf.set_property(IAgAvtrUserRunway._metadata, IAgAvtrUserRunway._set_Length_metadata, newVal)

    _get_LowEndHeading_metadata = { "name" : "LowEndHeading",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def LowEndHeading(self) -> typing.Any:
        """The low end heading of the runway."""
        return self._intf.get_property(IAgAvtrUserRunway._metadata, IAgAvtrUserRunway._get_LowEndHeading_metadata)

    _set_LowEndHeading_metadata = { "name" : "LowEndHeading",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @LowEndHeading.setter
    def LowEndHeading(self, newVal:typing.Any) -> None:
        """The low end heading of the runway."""
        return self._intf.set_property(IAgAvtrUserRunway._metadata, IAgAvtrUserRunway._set_LowEndHeading_metadata, newVal)

    _get_HighEndHeading_metadata = { "name" : "HighEndHeading",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def HighEndHeading(self) -> typing.Any:
        """The high end heading of the runway."""
        return self._intf.get_property(IAgAvtrUserRunway._metadata, IAgAvtrUserRunway._get_HighEndHeading_metadata)

    _set_HighEndHeading_metadata = { "name" : "HighEndHeading",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @HighEndHeading.setter
    def HighEndHeading(self, newVal:typing.Any) -> None:
        """The high end heading of the runway."""
        return self._intf.set_property(IAgAvtrUserRunway._metadata, IAgAvtrUserRunway._set_HighEndHeading_metadata, newVal)

    _get_IsMagnetic_metadata = { "name" : "IsMagnetic",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def IsMagnetic(self) -> bool:
        """Opt whether to use a magnetic heading for the runway heading."""
        return self._intf.get_property(IAgAvtrUserRunway._metadata, IAgAvtrUserRunway._get_IsMagnetic_metadata)

    _set_IsMagnetic_metadata = { "name" : "IsMagnetic",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @IsMagnetic.setter
    def IsMagnetic(self, newVal:bool) -> None:
        """Opt whether to use a magnetic heading for the runway heading."""
        return self._intf.set_property(IAgAvtrUserRunway._metadata, IAgAvtrUserRunway._set_IsMagnetic_metadata, newVal)

    _CopySite_metadata = { "name" : "CopySite",
            "arg_types" : (),
            "marshallers" : () }
    def CopySite(self) -> None:
        """Copy the site to the clipboard."""
        return self._intf.invoke(IAgAvtrUserRunway._metadata, IAgAvtrUserRunway._CopySite_metadata, )

    _PasteSite_metadata = { "name" : "PasteSite",
            "arg_types" : (),
            "marshallers" : () }
    def PasteSite(self) -> None:
        """Paste the site to the clipboard."""
        return self._intf.invoke(IAgAvtrUserRunway._metadata, IAgAvtrUserRunway._PasteSite_metadata, )


agcls.AgClassCatalog.add_catalog_entry("{74B0531F-504B-42E6-A8AF-7A6B891A88F8}", IAgAvtrUserRunway)
agcls.AgTypeNameMap["IAgAvtrUserRunway"] = IAgAvtrUserRunway

class IAgAvtrARINC424Item(object):
    """Interface used to access the options for an ARINC424 Item found in the Aviator catalog."""
    _num_methods = 5
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{ec9a6d30-e195-49d8-a5fd-635114490f7c}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "GetAsCatalogItem" : 1,
                             "GetValue" : 2,
                             "GetAllFields" : 3,
                             "GetAllFieldsAndValues" : 4,
                             "CopySite" : 5, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrARINC424Item._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrARINC424Item from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrARINC424Item.__dict__ and type(IAgAvtrARINC424Item.__dict__[attrname]) == property:
            return IAgAvtrARINC424Item.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrARINC424Item.")
    
    _GetAsCatalogItem_metadata = { "name" : "GetAsCatalogItem",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    def GetAsCatalogItem(self) -> "IAgAvtrCatalogItem":
        """Get the catalog item interface for this object."""
        return self._intf.invoke(IAgAvtrARINC424Item._metadata, IAgAvtrARINC424Item._GetAsCatalogItem_metadata, out_arg())

    _GetValue_metadata = { "name" : "GetValue",
            "arg_types" : (agcom.BSTR, POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.VARIANT_arg,) }
    def GetValue(self, fieldName:str) -> typing.Any:
        """Get the value of the field with the given name."""
        return self._intf.invoke(IAgAvtrARINC424Item._metadata, IAgAvtrARINC424Item._GetValue_metadata, fieldName, out_arg())

    _GetAllFields_metadata = { "name" : "GetAllFields",
            "arg_types" : (POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg,) }
    def GetAllFields(self) -> list:
        """Get all the field names."""
        return self._intf.invoke(IAgAvtrARINC424Item._metadata, IAgAvtrARINC424Item._GetAllFields_metadata, out_arg())

    _GetAllFieldsAndValues_metadata = { "name" : "GetAllFieldsAndValues",
            "arg_types" : (POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg,) }
    def GetAllFieldsAndValues(self) -> list:
        """Get all the field names along with the corresponding value."""
        return self._intf.invoke(IAgAvtrARINC424Item._metadata, IAgAvtrARINC424Item._GetAllFieldsAndValues_metadata, out_arg())

    _CopySite_metadata = { "name" : "CopySite",
            "arg_types" : (),
            "marshallers" : () }
    def CopySite(self) -> None:
        """Copy the site to the clipboard."""
        return self._intf.invoke(IAgAvtrARINC424Item._metadata, IAgAvtrARINC424Item._CopySite_metadata, )


agcls.AgClassCatalog.add_catalog_entry("{ec9a6d30-e195-49d8-a5fd-635114490f7c}", IAgAvtrARINC424Item)
agcls.AgTypeNameMap["IAgAvtrARINC424Item"] = IAgAvtrARINC424Item

class IAgAvtrARINC424Source(object):
    """Interface used to access the options for any ARINC424 source in the Aviator catalog."""
    _num_methods = 8
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{949959c7-31af-48e3-9267-27acdcbedc5e}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "GetARINC424Item" : 1,
                             "get_UseMasterDataFile" : 2,
                             "set_UseMasterDataFile" : 3,
                             "get_MasterDataFilepath" : 4,
                             "set_MasterDataFilepath" : 5,
                             "get_OverrideDataFilepath" : 6,
                             "set_OverrideDataFilepath" : 7,
                             "GetAsCatalogSource" : 8, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrARINC424Source._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrARINC424Source from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrARINC424Source.__dict__ and type(IAgAvtrARINC424Source.__dict__[attrname]) == property:
            return IAgAvtrARINC424Source.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrARINC424Source.")
    
    _GetARINC424Item_metadata = { "name" : "GetARINC424Item",
            "arg_types" : (agcom.BSTR, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.AgInterface_out_arg,) }
    def GetARINC424Item(self, name:str) -> "IAgAvtrARINC424Item":
        """Gets the ARINC-424 item with the given name."""
        return self._intf.invoke(IAgAvtrARINC424Source._metadata, IAgAvtrARINC424Source._GetARINC424Item_metadata, name, out_arg())

    _get_UseMasterDataFile_metadata = { "name" : "UseMasterDataFile",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def UseMasterDataFile(self) -> bool:
        """Opt whether to use the master data file."""
        return self._intf.get_property(IAgAvtrARINC424Source._metadata, IAgAvtrARINC424Source._get_UseMasterDataFile_metadata)

    _set_UseMasterDataFile_metadata = { "name" : "UseMasterDataFile",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @UseMasterDataFile.setter
    def UseMasterDataFile(self, newVal:bool) -> None:
        """Opt whether to use the master data file."""
        return self._intf.set_property(IAgAvtrARINC424Source._metadata, IAgAvtrARINC424Source._set_UseMasterDataFile_metadata, newVal)

    _get_MasterDataFilepath_metadata = { "name" : "MasterDataFilepath",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def MasterDataFilepath(self) -> str:
        """The master data file path."""
        return self._intf.get_property(IAgAvtrARINC424Source._metadata, IAgAvtrARINC424Source._get_MasterDataFilepath_metadata)

    _set_MasterDataFilepath_metadata = { "name" : "MasterDataFilepath",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @MasterDataFilepath.setter
    def MasterDataFilepath(self, newVal:str) -> None:
        """The master data file path."""
        return self._intf.set_property(IAgAvtrARINC424Source._metadata, IAgAvtrARINC424Source._set_MasterDataFilepath_metadata, newVal)

    _get_OverrideDataFilepath_metadata = { "name" : "OverrideDataFilepath",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def OverrideDataFilepath(self) -> str:
        """The file path to the data overriding the mader data file."""
        return self._intf.get_property(IAgAvtrARINC424Source._metadata, IAgAvtrARINC424Source._get_OverrideDataFilepath_metadata)

    _set_OverrideDataFilepath_metadata = { "name" : "OverrideDataFilepath",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @OverrideDataFilepath.setter
    def OverrideDataFilepath(self, newVal:str) -> None:
        """The file path to the data overriding the mader data file."""
        return self._intf.set_property(IAgAvtrARINC424Source._metadata, IAgAvtrARINC424Source._set_OverrideDataFilepath_metadata, newVal)

    _GetAsCatalogSource_metadata = { "name" : "GetAsCatalogSource",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    def GetAsCatalogSource(self) -> "IAgAvtrCatalogSource":
        """Get the catalog source interface for this object."""
        return self._intf.invoke(IAgAvtrARINC424Source._metadata, IAgAvtrARINC424Source._GetAsCatalogSource_metadata, out_arg())


agcls.AgClassCatalog.add_catalog_entry("{949959c7-31af-48e3-9267-27acdcbedc5e}", IAgAvtrARINC424Source)
agcls.AgTypeNameMap["IAgAvtrARINC424Source"] = IAgAvtrARINC424Source

class IAgAvtrDAFIFSource(object):
    """Interface used to access the options for any DAFIF source in the Aviator catalog."""
    _num_methods = 7
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{a5045bd9-f91e-4213-b4f3-0b7a3acce45c}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "GetDAFIFItem" : 1,
                             "get_DataPath" : 2,
                             "set_DataPath" : 3,
                             "get_EffectiveDate" : 4,
                             "get_ExpirationDate" : 5,
                             "get_SpecRevision" : 6,
                             "GetAsCatalogSource" : 7, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrDAFIFSource._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrDAFIFSource from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrDAFIFSource.__dict__ and type(IAgAvtrDAFIFSource.__dict__[attrname]) == property:
            return IAgAvtrDAFIFSource.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrDAFIFSource.")
    
    _GetDAFIFItem_metadata = { "name" : "GetDAFIFItem",
            "arg_types" : (agcom.BSTR, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.AgInterface_out_arg,) }
    def GetDAFIFItem(self, name:str) -> "IAgAvtrDAFIFItem":
        """Get the DAFIF item with the given name."""
        return self._intf.invoke(IAgAvtrDAFIFSource._metadata, IAgAvtrDAFIFSource._GetDAFIFItem_metadata, name, out_arg())

    _get_DataPath_metadata = { "name" : "DataPath",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def DataPath(self) -> str:
        """The DAFIF data path."""
        return self._intf.get_property(IAgAvtrDAFIFSource._metadata, IAgAvtrDAFIFSource._get_DataPath_metadata)

    _set_DataPath_metadata = { "name" : "DataPath",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @DataPath.setter
    def DataPath(self, newVal:str) -> None:
        """The DAFIF data path."""
        return self._intf.set_property(IAgAvtrDAFIFSource._metadata, IAgAvtrDAFIFSource._set_DataPath_metadata, newVal)

    _get_EffectiveDate_metadata = { "name" : "EffectiveDate",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def EffectiveDate(self) -> str:
        """The effective date of the DAFIF catalog."""
        return self._intf.get_property(IAgAvtrDAFIFSource._metadata, IAgAvtrDAFIFSource._get_EffectiveDate_metadata)

    _get_ExpirationDate_metadata = { "name" : "ExpirationDate",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def ExpirationDate(self) -> str:
        """The expiration date of the DAFIF catalog."""
        return self._intf.get_property(IAgAvtrDAFIFSource._metadata, IAgAvtrDAFIFSource._get_ExpirationDate_metadata)

    _get_SpecRevision_metadata = { "name" : "SpecRevision",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def SpecRevision(self) -> str:
        """The DAFIF edition."""
        return self._intf.get_property(IAgAvtrDAFIFSource._metadata, IAgAvtrDAFIFSource._get_SpecRevision_metadata)

    _GetAsCatalogSource_metadata = { "name" : "GetAsCatalogSource",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    def GetAsCatalogSource(self) -> "IAgAvtrCatalogSource":
        """Get the catalog source interface for this object."""
        return self._intf.invoke(IAgAvtrDAFIFSource._metadata, IAgAvtrDAFIFSource._GetAsCatalogSource_metadata, out_arg())


agcls.AgClassCatalog.add_catalog_entry("{a5045bd9-f91e-4213-b4f3-0b7a3acce45c}", IAgAvtrDAFIFSource)
agcls.AgTypeNameMap["IAgAvtrDAFIFSource"] = IAgAvtrDAFIFSource

class IAgAvtrUserVTOLPoint(object):
    """Interface used to access a user VTOL Point in the Aviator catalog."""
    _num_methods = 10
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{10055426-0046-406c-85db-b418e7b0810e}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_Altitude" : 1,
                             "set_Altitude" : 2,
                             "GetTerrainAlt" : 3,
                             "get_Latitude" : 4,
                             "set_Latitude" : 5,
                             "get_Longitude" : 6,
                             "set_Longitude" : 7,
                             "CopySite" : 8,
                             "PasteSite" : 9,
                             "GetAsCatalogItem" : 10, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrUserVTOLPoint._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrUserVTOLPoint from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrUserVTOLPoint.__dict__ and type(IAgAvtrUserVTOLPoint.__dict__[attrname]) == property:
            return IAgAvtrUserVTOLPoint.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrUserVTOLPoint.")
    
    _get_Altitude_metadata = { "name" : "Altitude",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def Altitude(self) -> float:
        """The VTOL Point altitude."""
        return self._intf.get_property(IAgAvtrUserVTOLPoint._metadata, IAgAvtrUserVTOLPoint._get_Altitude_metadata)

    _set_Altitude_metadata = { "name" : "Altitude",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @Altitude.setter
    def Altitude(self, newVal:float) -> None:
        """The VTOL Point altitude."""
        return self._intf.set_property(IAgAvtrUserVTOLPoint._metadata, IAgAvtrUserVTOLPoint._set_Altitude_metadata, newVal)

    _GetTerrainAlt_metadata = { "name" : "GetTerrainAlt",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    def GetTerrainAlt(self) -> float:
        """Set the VTOL Point altitude to the terrain altitude."""
        return self._intf.invoke(IAgAvtrUserVTOLPoint._metadata, IAgAvtrUserVTOLPoint._GetTerrainAlt_metadata, out_arg())

    _get_Latitude_metadata = { "name" : "Latitude",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def Latitude(self) -> typing.Any:
        """The VTOL Point latitude."""
        return self._intf.get_property(IAgAvtrUserVTOLPoint._metadata, IAgAvtrUserVTOLPoint._get_Latitude_metadata)

    _set_Latitude_metadata = { "name" : "Latitude",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @Latitude.setter
    def Latitude(self, newVal:typing.Any) -> None:
        """The VTOL Point latitude."""
        return self._intf.set_property(IAgAvtrUserVTOLPoint._metadata, IAgAvtrUserVTOLPoint._set_Latitude_metadata, newVal)

    _get_Longitude_metadata = { "name" : "Longitude",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def Longitude(self) -> typing.Any:
        """The VTOL Point longitude."""
        return self._intf.get_property(IAgAvtrUserVTOLPoint._metadata, IAgAvtrUserVTOLPoint._get_Longitude_metadata)

    _set_Longitude_metadata = { "name" : "Longitude",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @Longitude.setter
    def Longitude(self, newVal:typing.Any) -> None:
        """The VTOL Point longitude."""
        return self._intf.set_property(IAgAvtrUserVTOLPoint._metadata, IAgAvtrUserVTOLPoint._set_Longitude_metadata, newVal)

    _CopySite_metadata = { "name" : "CopySite",
            "arg_types" : (),
            "marshallers" : () }
    def CopySite(self) -> None:
        """Copy the site to the clipboard."""
        return self._intf.invoke(IAgAvtrUserVTOLPoint._metadata, IAgAvtrUserVTOLPoint._CopySite_metadata, )

    _PasteSite_metadata = { "name" : "PasteSite",
            "arg_types" : (),
            "marshallers" : () }
    def PasteSite(self) -> None:
        """Paste the site to the clipboard."""
        return self._intf.invoke(IAgAvtrUserVTOLPoint._metadata, IAgAvtrUserVTOLPoint._PasteSite_metadata, )

    _GetAsCatalogItem_metadata = { "name" : "GetAsCatalogItem",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    def GetAsCatalogItem(self) -> "IAgAvtrCatalogItem":
        """Get the catalog item interface for this object."""
        return self._intf.invoke(IAgAvtrUserVTOLPoint._metadata, IAgAvtrUserVTOLPoint._GetAsCatalogItem_metadata, out_arg())


agcls.AgClassCatalog.add_catalog_entry("{10055426-0046-406c-85db-b418e7b0810e}", IAgAvtrUserVTOLPoint)
agcls.AgTypeNameMap["IAgAvtrUserVTOLPoint"] = IAgAvtrUserVTOLPoint

class IAgAvtrUserVTOLPointSource(object):
    """Interface used to access the user VTOL Points in the Aviator catalog."""
    _num_methods = 3
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{f5a61b9c-b511-4cf4-b1ee-058153530c70}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "GetUserVTOLPoint" : 1,
                             "AddUserVTOLPoint" : 2,
                             "GetAsCatalogSource" : 3, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrUserVTOLPointSource._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrUserVTOLPointSource from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrUserVTOLPointSource.__dict__ and type(IAgAvtrUserVTOLPointSource.__dict__[attrname]) == property:
            return IAgAvtrUserVTOLPointSource.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrUserVTOLPointSource.")
    
    _GetUserVTOLPoint_metadata = { "name" : "GetUserVTOLPoint",
            "arg_types" : (agcom.BSTR, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.AgInterface_out_arg,) }
    def GetUserVTOLPoint(self, name:str) -> "IAgAvtrUserVTOLPoint":
        """Gets the user VTOL Point with the given name."""
        return self._intf.invoke(IAgAvtrUserVTOLPointSource._metadata, IAgAvtrUserVTOLPointSource._GetUserVTOLPoint_metadata, name, out_arg())

    _AddUserVTOLPoint_metadata = { "name" : "AddUserVTOLPoint",
            "arg_types" : (agcom.BSTR, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.AgInterface_out_arg,) }
    def AddUserVTOLPoint(self, name:str) -> "IAgAvtrUserVTOLPoint":
        """Creates a new user VTOL Point with the given name."""
        return self._intf.invoke(IAgAvtrUserVTOLPointSource._metadata, IAgAvtrUserVTOLPointSource._AddUserVTOLPoint_metadata, name, out_arg())

    _GetAsCatalogSource_metadata = { "name" : "GetAsCatalogSource",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    def GetAsCatalogSource(self) -> "IAgAvtrCatalogSource":
        """Get the catalog source interface for this object."""
        return self._intf.invoke(IAgAvtrUserVTOLPointSource._metadata, IAgAvtrUserVTOLPointSource._GetAsCatalogSource_metadata, out_arg())


agcls.AgClassCatalog.add_catalog_entry("{f5a61b9c-b511-4cf4-b1ee-058153530c70}", IAgAvtrUserVTOLPointSource)
agcls.AgTypeNameMap["IAgAvtrUserVTOLPointSource"] = IAgAvtrUserVTOLPointSource

class IAgAvtrUserWaypoint(object):
    """Interface used to access a user waypoint in the Aviator catalog."""
    _num_methods = 7
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{2b18b860-070a-41cf-803c-c14d7f87ee8c}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_Latitude" : 1,
                             "set_Latitude" : 2,
                             "get_Longitude" : 3,
                             "set_Longitude" : 4,
                             "CopySite" : 5,
                             "PasteSite" : 6,
                             "GetAsCatalogItem" : 7, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrUserWaypoint._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrUserWaypoint from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrUserWaypoint.__dict__ and type(IAgAvtrUserWaypoint.__dict__[attrname]) == property:
            return IAgAvtrUserWaypoint.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrUserWaypoint.")
    
    _get_Latitude_metadata = { "name" : "Latitude",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def Latitude(self) -> typing.Any:
        """The waypoint latitude."""
        return self._intf.get_property(IAgAvtrUserWaypoint._metadata, IAgAvtrUserWaypoint._get_Latitude_metadata)

    _set_Latitude_metadata = { "name" : "Latitude",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @Latitude.setter
    def Latitude(self, newVal:typing.Any) -> None:
        """The waypoint latitude."""
        return self._intf.set_property(IAgAvtrUserWaypoint._metadata, IAgAvtrUserWaypoint._set_Latitude_metadata, newVal)

    _get_Longitude_metadata = { "name" : "Longitude",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def Longitude(self) -> typing.Any:
        """The waypoint longitude."""
        return self._intf.get_property(IAgAvtrUserWaypoint._metadata, IAgAvtrUserWaypoint._get_Longitude_metadata)

    _set_Longitude_metadata = { "name" : "Longitude",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @Longitude.setter
    def Longitude(self, newVal:typing.Any) -> None:
        """The waypoint longitude."""
        return self._intf.set_property(IAgAvtrUserWaypoint._metadata, IAgAvtrUserWaypoint._set_Longitude_metadata, newVal)

    _CopySite_metadata = { "name" : "CopySite",
            "arg_types" : (),
            "marshallers" : () }
    def CopySite(self) -> None:
        """Copy the site to the clipboard."""
        return self._intf.invoke(IAgAvtrUserWaypoint._metadata, IAgAvtrUserWaypoint._CopySite_metadata, )

    _PasteSite_metadata = { "name" : "PasteSite",
            "arg_types" : (),
            "marshallers" : () }
    def PasteSite(self) -> None:
        """Paste the site to the clipboard."""
        return self._intf.invoke(IAgAvtrUserWaypoint._metadata, IAgAvtrUserWaypoint._PasteSite_metadata, )

    _GetAsCatalogItem_metadata = { "name" : "GetAsCatalogItem",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    def GetAsCatalogItem(self) -> "IAgAvtrCatalogItem":
        """Get the catalog item interface for this object."""
        return self._intf.invoke(IAgAvtrUserWaypoint._metadata, IAgAvtrUserWaypoint._GetAsCatalogItem_metadata, out_arg())


agcls.AgClassCatalog.add_catalog_entry("{2b18b860-070a-41cf-803c-c14d7f87ee8c}", IAgAvtrUserWaypoint)
agcls.AgTypeNameMap["IAgAvtrUserWaypoint"] = IAgAvtrUserWaypoint

class IAgAvtrUserWaypointSource(object):
    """Interface used to access the user waypoints in the Aviator catalog."""
    _num_methods = 3
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{381b23fb-f3b9-4944-996a-efdd9dde16d8}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "GetUserWaypoint" : 1,
                             "AddUserWaypoint" : 2,
                             "GetAsCatalogSource" : 3, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrUserWaypointSource._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrUserWaypointSource from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrUserWaypointSource.__dict__ and type(IAgAvtrUserWaypointSource.__dict__[attrname]) == property:
            return IAgAvtrUserWaypointSource.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrUserWaypointSource.")
    
    _GetUserWaypoint_metadata = { "name" : "GetUserWaypoint",
            "arg_types" : (agcom.BSTR, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.AgInterface_out_arg,) }
    def GetUserWaypoint(self, name:str) -> "IAgAvtrUserWaypoint":
        """Gets the user waypoint with the given name."""
        return self._intf.invoke(IAgAvtrUserWaypointSource._metadata, IAgAvtrUserWaypointSource._GetUserWaypoint_metadata, name, out_arg())

    _AddUserWaypoint_metadata = { "name" : "AddUserWaypoint",
            "arg_types" : (agcom.BSTR, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.AgInterface_out_arg,) }
    def AddUserWaypoint(self, name:str) -> "IAgAvtrUserWaypoint":
        """Creates a new user waypoint with the given name."""
        return self._intf.invoke(IAgAvtrUserWaypointSource._metadata, IAgAvtrUserWaypointSource._AddUserWaypoint_metadata, name, out_arg())

    _GetAsCatalogSource_metadata = { "name" : "GetAsCatalogSource",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    def GetAsCatalogSource(self) -> "IAgAvtrCatalogSource":
        """Get the catalog source interface for this object."""
        return self._intf.invoke(IAgAvtrUserWaypointSource._metadata, IAgAvtrUserWaypointSource._GetAsCatalogSource_metadata, out_arg())


agcls.AgClassCatalog.add_catalog_entry("{381b23fb-f3b9-4944-996a-efdd9dde16d8}", IAgAvtrUserWaypointSource)
agcls.AgTypeNameMap["IAgAvtrUserWaypointSource"] = IAgAvtrUserWaypointSource

class IAgAvtrPropulsionEfficiencies(object):
    """Interface used to access the options for the Efficiencies and Losses of a jet engine powerplant in the advanced fixed wing tool."""
    _num_methods = 8
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{ff3eeabb-ada1-40dd-99ce-acacb6c390f2}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_TechnologyLevel" : 1,
                             "set_TechnologyLevel" : 2,
                             "get_IntakeType" : 3,
                             "set_IntakeType" : 4,
                             "get_TurbineType" : 5,
                             "set_TurbineType" : 6,
                             "get_ExhaustNozzleType" : 7,
                             "set_ExhaustNozzleType" : 8, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrPropulsionEfficiencies._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrPropulsionEfficiencies from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrPropulsionEfficiencies.__dict__ and type(IAgAvtrPropulsionEfficiencies.__dict__[attrname]) == property:
            return IAgAvtrPropulsionEfficiencies.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrPropulsionEfficiencies.")
    
    _get_TechnologyLevel_metadata = { "name" : "TechnologyLevel",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrJetEngineTechnologyLevel),) }
    @property
    def TechnologyLevel(self) -> "AgEAvtrJetEngineTechnologyLevel":
        """The technology level of the jet engine."""
        return self._intf.get_property(IAgAvtrPropulsionEfficiencies._metadata, IAgAvtrPropulsionEfficiencies._get_TechnologyLevel_metadata)

    _set_TechnologyLevel_metadata = { "name" : "TechnologyLevel",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrJetEngineTechnologyLevel),) }
    @TechnologyLevel.setter
    def TechnologyLevel(self, newVal:"AgEAvtrJetEngineTechnologyLevel") -> None:
        """The technology level of the jet engine."""
        return self._intf.set_property(IAgAvtrPropulsionEfficiencies._metadata, IAgAvtrPropulsionEfficiencies._set_TechnologyLevel_metadata, newVal)

    _get_IntakeType_metadata = { "name" : "IntakeType",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrJetEngineIntakeType),) }
    @property
    def IntakeType(self) -> "AgEAvtrJetEngineIntakeType":
        """The jet engine intake type."""
        return self._intf.get_property(IAgAvtrPropulsionEfficiencies._metadata, IAgAvtrPropulsionEfficiencies._get_IntakeType_metadata)

    _set_IntakeType_metadata = { "name" : "IntakeType",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrJetEngineIntakeType),) }
    @IntakeType.setter
    def IntakeType(self, newVal:"AgEAvtrJetEngineIntakeType") -> None:
        """The jet engine intake type."""
        return self._intf.set_property(IAgAvtrPropulsionEfficiencies._metadata, IAgAvtrPropulsionEfficiencies._set_IntakeType_metadata, newVal)

    _get_TurbineType_metadata = { "name" : "TurbineType",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrJetEngineTurbineType),) }
    @property
    def TurbineType(self) -> "AgEAvtrJetEngineTurbineType":
        """The jet engine turbine type."""
        return self._intf.get_property(IAgAvtrPropulsionEfficiencies._metadata, IAgAvtrPropulsionEfficiencies._get_TurbineType_metadata)

    _set_TurbineType_metadata = { "name" : "TurbineType",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrJetEngineTurbineType),) }
    @TurbineType.setter
    def TurbineType(self, newVal:"AgEAvtrJetEngineTurbineType") -> None:
        """The jet engine turbine type."""
        return self._intf.set_property(IAgAvtrPropulsionEfficiencies._metadata, IAgAvtrPropulsionEfficiencies._set_TurbineType_metadata, newVal)

    _get_ExhaustNozzleType_metadata = { "name" : "ExhaustNozzleType",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrJetEngineExhaustNozzleType),) }
    @property
    def ExhaustNozzleType(self) -> "AgEAvtrJetEngineExhaustNozzleType":
        """The jet engine exhaust nozzle type."""
        return self._intf.get_property(IAgAvtrPropulsionEfficiencies._metadata, IAgAvtrPropulsionEfficiencies._get_ExhaustNozzleType_metadata)

    _set_ExhaustNozzleType_metadata = { "name" : "ExhaustNozzleType",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrJetEngineExhaustNozzleType),) }
    @ExhaustNozzleType.setter
    def ExhaustNozzleType(self, newVal:"AgEAvtrJetEngineExhaustNozzleType") -> None:
        """The jet engine exhaust nozzle type."""
        return self._intf.set_property(IAgAvtrPropulsionEfficiencies._metadata, IAgAvtrPropulsionEfficiencies._set_ExhaustNozzleType_metadata, newVal)


agcls.AgClassCatalog.add_catalog_entry("{ff3eeabb-ada1-40dd-99ce-acacb6c390f2}", IAgAvtrPropulsionEfficiencies)
agcls.AgTypeNameMap["IAgAvtrPropulsionEfficiencies"] = IAgAvtrPropulsionEfficiencies

class IAgAvtrFuelModelKeroseneAFPROP(object):
    """Interface used to access the options for Kerosense - CEA fuel for a thermodynamic a jet engine model."""
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{f32e5943-6656-4ef2-983b-e80105acf859}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_Subtype" : 1,
                             "set_Subtype" : 2,
                             "get_SpecificEnergy" : 3,
                             "set_SpecificEnergy" : 4, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrFuelModelKeroseneAFPROP._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrFuelModelKeroseneAFPROP from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrFuelModelKeroseneAFPROP.__dict__ and type(IAgAvtrFuelModelKeroseneAFPROP.__dict__[attrname]) == property:
            return IAgAvtrFuelModelKeroseneAFPROP.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrFuelModelKeroseneAFPROP.")
    
    _get_Subtype_metadata = { "name" : "Subtype",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrAFPROPFuelType),) }
    @property
    def Subtype(self) -> "AgEAvtrAFPROPFuelType":
        """The fuel subtype."""
        return self._intf.get_property(IAgAvtrFuelModelKeroseneAFPROP._metadata, IAgAvtrFuelModelKeroseneAFPROP._get_Subtype_metadata)

    _set_Subtype_metadata = { "name" : "Subtype",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrAFPROPFuelType),) }
    @Subtype.setter
    def Subtype(self, newVal:"AgEAvtrAFPROPFuelType") -> None:
        """The fuel subtype."""
        return self._intf.set_property(IAgAvtrFuelModelKeroseneAFPROP._metadata, IAgAvtrFuelModelKeroseneAFPROP._set_Subtype_metadata, newVal)

    _get_SpecificEnergy_metadata = { "name" : "SpecificEnergy",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def SpecificEnergy(self) -> float:
        """The specific energy of the jet fuel."""
        return self._intf.get_property(IAgAvtrFuelModelKeroseneAFPROP._metadata, IAgAvtrFuelModelKeroseneAFPROP._get_SpecificEnergy_metadata)

    _set_SpecificEnergy_metadata = { "name" : "SpecificEnergy",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @SpecificEnergy.setter
    def SpecificEnergy(self, newVal:float) -> None:
        """The specific energy of the jet fuel."""
        return self._intf.set_property(IAgAvtrFuelModelKeroseneAFPROP._metadata, IAgAvtrFuelModelKeroseneAFPROP._set_SpecificEnergy_metadata, newVal)


agcls.AgClassCatalog.add_catalog_entry("{f32e5943-6656-4ef2-983b-e80105acf859}", IAgAvtrFuelModelKeroseneAFPROP)
agcls.AgTypeNameMap["IAgAvtrFuelModelKeroseneAFPROP"] = IAgAvtrFuelModelKeroseneAFPROP

class IAgAvtrFuelModelKeroseneCEA(object):
    """Interface used to access the options for Kerosense - CEA fuel for a thermodynamic a jet engine model."""
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{52d8882c-bc92-469c-ae5b-2ac105b2f88b}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_Subtype" : 1,
                             "set_Subtype" : 2,
                             "get_SpecificEnergy" : 3,
                             "set_SpecificEnergy" : 4, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrFuelModelKeroseneCEA._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrFuelModelKeroseneCEA from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrFuelModelKeroseneCEA.__dict__ and type(IAgAvtrFuelModelKeroseneCEA.__dict__[attrname]) == property:
            return IAgAvtrFuelModelKeroseneCEA.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrFuelModelKeroseneCEA.")
    
    _get_Subtype_metadata = { "name" : "Subtype",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrCEAFuelType),) }
    @property
    def Subtype(self) -> "AgEAvtrCEAFuelType":
        """The fuel subtype."""
        return self._intf.get_property(IAgAvtrFuelModelKeroseneCEA._metadata, IAgAvtrFuelModelKeroseneCEA._get_Subtype_metadata)

    _set_Subtype_metadata = { "name" : "Subtype",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrCEAFuelType),) }
    @Subtype.setter
    def Subtype(self, newVal:"AgEAvtrCEAFuelType") -> None:
        """The fuel subtype."""
        return self._intf.set_property(IAgAvtrFuelModelKeroseneCEA._metadata, IAgAvtrFuelModelKeroseneCEA._set_Subtype_metadata, newVal)

    _get_SpecificEnergy_metadata = { "name" : "SpecificEnergy",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def SpecificEnergy(self) -> float:
        """The specific energy of the jet fuel."""
        return self._intf.get_property(IAgAvtrFuelModelKeroseneCEA._metadata, IAgAvtrFuelModelKeroseneCEA._get_SpecificEnergy_metadata)

    _set_SpecificEnergy_metadata = { "name" : "SpecificEnergy",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @SpecificEnergy.setter
    def SpecificEnergy(self, newVal:float) -> None:
        """The specific energy of the jet fuel."""
        return self._intf.set_property(IAgAvtrFuelModelKeroseneCEA._metadata, IAgAvtrFuelModelKeroseneCEA._set_SpecificEnergy_metadata, newVal)


agcls.AgClassCatalog.add_catalog_entry("{52d8882c-bc92-469c-ae5b-2ac105b2f88b}", IAgAvtrFuelModelKeroseneCEA)
agcls.AgTypeNameMap["IAgAvtrFuelModelKeroseneCEA"] = IAgAvtrFuelModelKeroseneCEA

class IAgAvtrAdvFixedWingRamjetBasic(object):
    """Interface used to access the options for a basic Ramjet mode."""
    _num_methods = 15
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{9533600c-479f-42f8-b14d-a56199f9f64f}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_DesignAltitude" : 1,
                             "set_DesignAltitude" : 2,
                             "get_DesignMach" : 3,
                             "set_DesignMach" : 4,
                             "get_DesignThrust" : 5,
                             "set_DesignThrust" : 6,
                             "get_MaxCompressionTemp" : 7,
                             "set_MaxCompressionTemp" : 8,
                             "get_MaxBurnerTemp" : 9,
                             "set_MaxBurnerTemp" : 10,
                             "get_FuelType" : 11,
                             "set_FuelType" : 12,
                             "get_FuelModeAsAFPROP" : 13,
                             "get_FuelModeAsCEA" : 14,
                             "get_EfficienciesAndLosses" : 15, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrAdvFixedWingRamjetBasic._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrAdvFixedWingRamjetBasic from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrAdvFixedWingRamjetBasic.__dict__ and type(IAgAvtrAdvFixedWingRamjetBasic.__dict__[attrname]) == property:
            return IAgAvtrAdvFixedWingRamjetBasic.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrAdvFixedWingRamjetBasic.")
    
    _get_DesignAltitude_metadata = { "name" : "DesignAltitude",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def DesignAltitude(self) -> float:
        """The altitude design point of the engine."""
        return self._intf.get_property(IAgAvtrAdvFixedWingRamjetBasic._metadata, IAgAvtrAdvFixedWingRamjetBasic._get_DesignAltitude_metadata)

    _set_DesignAltitude_metadata = { "name" : "DesignAltitude",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @DesignAltitude.setter
    def DesignAltitude(self, newVal:float) -> None:
        """The altitude design point of the engine."""
        return self._intf.set_property(IAgAvtrAdvFixedWingRamjetBasic._metadata, IAgAvtrAdvFixedWingRamjetBasic._set_DesignAltitude_metadata, newVal)

    _get_DesignMach_metadata = { "name" : "DesignMach",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def DesignMach(self) -> float:
        """The mach number design point of the engine."""
        return self._intf.get_property(IAgAvtrAdvFixedWingRamjetBasic._metadata, IAgAvtrAdvFixedWingRamjetBasic._get_DesignMach_metadata)

    _set_DesignMach_metadata = { "name" : "DesignMach",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @DesignMach.setter
    def DesignMach(self, newVal:float) -> None:
        """The mach number design point of the engine."""
        return self._intf.set_property(IAgAvtrAdvFixedWingRamjetBasic._metadata, IAgAvtrAdvFixedWingRamjetBasic._set_DesignMach_metadata, newVal)

    _get_DesignThrust_metadata = { "name" : "DesignThrust",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def DesignThrust(self) -> float:
        """The thrust design point of the engine."""
        return self._intf.get_property(IAgAvtrAdvFixedWingRamjetBasic._metadata, IAgAvtrAdvFixedWingRamjetBasic._get_DesignThrust_metadata)

    _set_DesignThrust_metadata = { "name" : "DesignThrust",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @DesignThrust.setter
    def DesignThrust(self, newVal:float) -> None:
        """The thrust design point of the engine."""
        return self._intf.set_property(IAgAvtrAdvFixedWingRamjetBasic._metadata, IAgAvtrAdvFixedWingRamjetBasic._set_DesignThrust_metadata, newVal)

    _get_MaxCompressionTemp_metadata = { "name" : "MaxCompressionTemp",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def MaxCompressionTemp(self) -> float:
        """The maximum temperature at the compressor stage."""
        return self._intf.get_property(IAgAvtrAdvFixedWingRamjetBasic._metadata, IAgAvtrAdvFixedWingRamjetBasic._get_MaxCompressionTemp_metadata)

    _set_MaxCompressionTemp_metadata = { "name" : "MaxCompressionTemp",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @MaxCompressionTemp.setter
    def MaxCompressionTemp(self, newVal:float) -> None:
        """The maximum temperature at the compressor stage."""
        return self._intf.set_property(IAgAvtrAdvFixedWingRamjetBasic._metadata, IAgAvtrAdvFixedWingRamjetBasic._set_MaxCompressionTemp_metadata, newVal)

    _get_MaxBurnerTemp_metadata = { "name" : "MaxBurnerTemp",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def MaxBurnerTemp(self) -> float:
        """The maximum temperature at the combustion stage."""
        return self._intf.get_property(IAgAvtrAdvFixedWingRamjetBasic._metadata, IAgAvtrAdvFixedWingRamjetBasic._get_MaxBurnerTemp_metadata)

    _set_MaxBurnerTemp_metadata = { "name" : "MaxBurnerTemp",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @MaxBurnerTemp.setter
    def MaxBurnerTemp(self, newVal:float) -> None:
        """The maximum temperature at the combustion stage."""
        return self._intf.set_property(IAgAvtrAdvFixedWingRamjetBasic._metadata, IAgAvtrAdvFixedWingRamjetBasic._set_MaxBurnerTemp_metadata, newVal)

    _get_FuelType_metadata = { "name" : "FuelType",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrJetFuelType),) }
    @property
    def FuelType(self) -> "AgEAvtrJetFuelType":
        """The jet engine's fuel type."""
        return self._intf.get_property(IAgAvtrAdvFixedWingRamjetBasic._metadata, IAgAvtrAdvFixedWingRamjetBasic._get_FuelType_metadata)

    _set_FuelType_metadata = { "name" : "FuelType",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrJetFuelType),) }
    @FuelType.setter
    def FuelType(self, newVal:"AgEAvtrJetFuelType") -> None:
        """The jet engine's fuel type."""
        return self._intf.set_property(IAgAvtrAdvFixedWingRamjetBasic._metadata, IAgAvtrAdvFixedWingRamjetBasic._set_FuelType_metadata, newVal)

    _get_FuelModeAsAFPROP_metadata = { "name" : "FuelModeAsAFPROP",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def FuelModeAsAFPROP(self) -> "IAgAvtrFuelModelKeroseneAFPROP":
        """Get the interface for a Kerosene - AFPROP fuel mode."""
        return self._intf.get_property(IAgAvtrAdvFixedWingRamjetBasic._metadata, IAgAvtrAdvFixedWingRamjetBasic._get_FuelModeAsAFPROP_metadata)

    _get_FuelModeAsCEA_metadata = { "name" : "FuelModeAsCEA",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def FuelModeAsCEA(self) -> "IAgAvtrFuelModelKeroseneCEA":
        """Get the interface for a Kerosene - CEA fuel mode."""
        return self._intf.get_property(IAgAvtrAdvFixedWingRamjetBasic._metadata, IAgAvtrAdvFixedWingRamjetBasic._get_FuelModeAsCEA_metadata)

    _get_EfficienciesAndLosses_metadata = { "name" : "EfficienciesAndLosses",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def EfficienciesAndLosses(self) -> "IAgAvtrPropulsionEfficiencies":
        """The jet engine's propulsion efficiencies and losses."""
        return self._intf.get_property(IAgAvtrAdvFixedWingRamjetBasic._metadata, IAgAvtrAdvFixedWingRamjetBasic._get_EfficienciesAndLosses_metadata)


agcls.AgClassCatalog.add_catalog_entry("{9533600c-479f-42f8-b14d-a56199f9f64f}", IAgAvtrAdvFixedWingRamjetBasic)
agcls.AgTypeNameMap["IAgAvtrAdvFixedWingRamjetBasic"] = IAgAvtrAdvFixedWingRamjetBasic

class IAgAvtrAdvFixedWingScramjetBasic(object):
    """Interface used to access the options for a basic Scramjet mode."""
    _num_methods = 15
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{24585a26-2d65-4fa8-850d-d19e5f7d190d}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_DesignAltitude" : 1,
                             "set_DesignAltitude" : 2,
                             "get_DesignMach" : 3,
                             "set_DesignMach" : 4,
                             "get_DesignThrust" : 5,
                             "set_DesignThrust" : 6,
                             "get_MaxCompressionTemp" : 7,
                             "set_MaxCompressionTemp" : 8,
                             "get_MaxBurnerTemp" : 9,
                             "set_MaxBurnerTemp" : 10,
                             "get_FuelType" : 11,
                             "set_FuelType" : 12,
                             "get_FuelModeAsAFPROP" : 13,
                             "get_FuelModeAsCEA" : 14,
                             "get_EfficienciesAndLosses" : 15, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrAdvFixedWingScramjetBasic._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrAdvFixedWingScramjetBasic from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrAdvFixedWingScramjetBasic.__dict__ and type(IAgAvtrAdvFixedWingScramjetBasic.__dict__[attrname]) == property:
            return IAgAvtrAdvFixedWingScramjetBasic.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrAdvFixedWingScramjetBasic.")
    
    _get_DesignAltitude_metadata = { "name" : "DesignAltitude",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def DesignAltitude(self) -> float:
        """The altitude design point of the engine."""
        return self._intf.get_property(IAgAvtrAdvFixedWingScramjetBasic._metadata, IAgAvtrAdvFixedWingScramjetBasic._get_DesignAltitude_metadata)

    _set_DesignAltitude_metadata = { "name" : "DesignAltitude",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @DesignAltitude.setter
    def DesignAltitude(self, newVal:float) -> None:
        """The altitude design point of the engine."""
        return self._intf.set_property(IAgAvtrAdvFixedWingScramjetBasic._metadata, IAgAvtrAdvFixedWingScramjetBasic._set_DesignAltitude_metadata, newVal)

    _get_DesignMach_metadata = { "name" : "DesignMach",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def DesignMach(self) -> float:
        """The mach number design point of the engine."""
        return self._intf.get_property(IAgAvtrAdvFixedWingScramjetBasic._metadata, IAgAvtrAdvFixedWingScramjetBasic._get_DesignMach_metadata)

    _set_DesignMach_metadata = { "name" : "DesignMach",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @DesignMach.setter
    def DesignMach(self, newVal:float) -> None:
        """The mach number design point of the engine."""
        return self._intf.set_property(IAgAvtrAdvFixedWingScramjetBasic._metadata, IAgAvtrAdvFixedWingScramjetBasic._set_DesignMach_metadata, newVal)

    _get_DesignThrust_metadata = { "name" : "DesignThrust",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def DesignThrust(self) -> float:
        """The thrust design point of the engine."""
        return self._intf.get_property(IAgAvtrAdvFixedWingScramjetBasic._metadata, IAgAvtrAdvFixedWingScramjetBasic._get_DesignThrust_metadata)

    _set_DesignThrust_metadata = { "name" : "DesignThrust",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @DesignThrust.setter
    def DesignThrust(self, newVal:float) -> None:
        """The thrust design point of the engine."""
        return self._intf.set_property(IAgAvtrAdvFixedWingScramjetBasic._metadata, IAgAvtrAdvFixedWingScramjetBasic._set_DesignThrust_metadata, newVal)

    _get_MaxCompressionTemp_metadata = { "name" : "MaxCompressionTemp",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def MaxCompressionTemp(self) -> float:
        """The maximum temperature at the compressor stage."""
        return self._intf.get_property(IAgAvtrAdvFixedWingScramjetBasic._metadata, IAgAvtrAdvFixedWingScramjetBasic._get_MaxCompressionTemp_metadata)

    _set_MaxCompressionTemp_metadata = { "name" : "MaxCompressionTemp",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @MaxCompressionTemp.setter
    def MaxCompressionTemp(self, newVal:float) -> None:
        """The maximum temperature at the compressor stage."""
        return self._intf.set_property(IAgAvtrAdvFixedWingScramjetBasic._metadata, IAgAvtrAdvFixedWingScramjetBasic._set_MaxCompressionTemp_metadata, newVal)

    _get_MaxBurnerTemp_metadata = { "name" : "MaxBurnerTemp",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def MaxBurnerTemp(self) -> float:
        """The maximum temperature at the combustion stage."""
        return self._intf.get_property(IAgAvtrAdvFixedWingScramjetBasic._metadata, IAgAvtrAdvFixedWingScramjetBasic._get_MaxBurnerTemp_metadata)

    _set_MaxBurnerTemp_metadata = { "name" : "MaxBurnerTemp",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @MaxBurnerTemp.setter
    def MaxBurnerTemp(self, newVal:float) -> None:
        """The maximum temperature at the combustion stage."""
        return self._intf.set_property(IAgAvtrAdvFixedWingScramjetBasic._metadata, IAgAvtrAdvFixedWingScramjetBasic._set_MaxBurnerTemp_metadata, newVal)

    _get_FuelType_metadata = { "name" : "FuelType",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrJetFuelType),) }
    @property
    def FuelType(self) -> "AgEAvtrJetFuelType":
        """The jet engine's fuel type."""
        return self._intf.get_property(IAgAvtrAdvFixedWingScramjetBasic._metadata, IAgAvtrAdvFixedWingScramjetBasic._get_FuelType_metadata)

    _set_FuelType_metadata = { "name" : "FuelType",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrJetFuelType),) }
    @FuelType.setter
    def FuelType(self, newVal:"AgEAvtrJetFuelType") -> None:
        """The jet engine's fuel type."""
        return self._intf.set_property(IAgAvtrAdvFixedWingScramjetBasic._metadata, IAgAvtrAdvFixedWingScramjetBasic._set_FuelType_metadata, newVal)

    _get_FuelModeAsAFPROP_metadata = { "name" : "FuelModeAsAFPROP",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def FuelModeAsAFPROP(self) -> "IAgAvtrFuelModelKeroseneAFPROP":
        """Get the interface for a Kerosene - AFPROP fuel mode."""
        return self._intf.get_property(IAgAvtrAdvFixedWingScramjetBasic._metadata, IAgAvtrAdvFixedWingScramjetBasic._get_FuelModeAsAFPROP_metadata)

    _get_FuelModeAsCEA_metadata = { "name" : "FuelModeAsCEA",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def FuelModeAsCEA(self) -> "IAgAvtrFuelModelKeroseneCEA":
        """Get the interface for a Kerosene - CEA fuel mode."""
        return self._intf.get_property(IAgAvtrAdvFixedWingScramjetBasic._metadata, IAgAvtrAdvFixedWingScramjetBasic._get_FuelModeAsCEA_metadata)

    _get_EfficienciesAndLosses_metadata = { "name" : "EfficienciesAndLosses",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def EfficienciesAndLosses(self) -> "IAgAvtrPropulsionEfficiencies":
        """The jet engine's propulsion efficiencies and losses."""
        return self._intf.get_property(IAgAvtrAdvFixedWingScramjetBasic._metadata, IAgAvtrAdvFixedWingScramjetBasic._get_EfficienciesAndLosses_metadata)


agcls.AgClassCatalog.add_catalog_entry("{24585a26-2d65-4fa8-850d-d19e5f7d190d}", IAgAvtrAdvFixedWingScramjetBasic)
agcls.AgTypeNameMap["IAgAvtrAdvFixedWingScramjetBasic"] = IAgAvtrAdvFixedWingScramjetBasic

class IAgAvtrRefuelDumpProperties(object):
    """Interface used to access the refuel/dump properties for the current procedure."""
    _num_methods = 10
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{8C37F92D-E841-456E-8E12-A09C84D5EFF5}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_RefuelDumpMode" : 1,
                             "get_RefuelDumpModeValue" : 2,
                             "SetRefuelDumpMode" : 3,
                             "get_RefuelDumpRate" : 4,
                             "set_RefuelDumpRate" : 5,
                             "get_RefuelDumpTimeOffset" : 6,
                             "set_RefuelDumpTimeOffset" : 7,
                             "get_CanUseEndOfEnrouteSegmentAsEpoch" : 8,
                             "get_UseEndOfEnrouteSegmentAsEpoch" : 9,
                             "set_UseEndOfEnrouteSegmentAsEpoch" : 10, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrRefuelDumpProperties._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrRefuelDumpProperties from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrRefuelDumpProperties.__dict__ and type(IAgAvtrRefuelDumpProperties.__dict__[attrname]) == property:
            return IAgAvtrRefuelDumpProperties.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrRefuelDumpProperties.")
    
    _get_RefuelDumpMode_metadata = { "name" : "RefuelDumpMode",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrRefuelDumpMode),) }
    @property
    def RefuelDumpMode(self) -> "AgEAvtrRefuelDumpMode":
        """Get the RefuelDumpMode"""
        return self._intf.get_property(IAgAvtrRefuelDumpProperties._metadata, IAgAvtrRefuelDumpProperties._get_RefuelDumpMode_metadata)

    _get_RefuelDumpModeValue_metadata = { "name" : "RefuelDumpModeValue",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def RefuelDumpModeValue(self) -> float:
        """Get the RefuelDumpModeValue if applicable"""
        return self._intf.get_property(IAgAvtrRefuelDumpProperties._metadata, IAgAvtrRefuelDumpProperties._get_RefuelDumpModeValue_metadata)

    _SetRefuelDumpMode_metadata = { "name" : "SetRefuelDumpMode",
            "arg_types" : (agcom.LONG, agcom.DOUBLE,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrRefuelDumpMode), agmarshall.DOUBLE_arg,) }
    def SetRefuelDumpMode(self, mode:"AgEAvtrRefuelDumpMode", value:float) -> None:
        """Set RefuelDumpMode and RefuelDumpModeValue if applicable"""
        return self._intf.invoke(IAgAvtrRefuelDumpProperties._metadata, IAgAvtrRefuelDumpProperties._SetRefuelDumpMode_metadata, mode, value)

    _get_RefuelDumpRate_metadata = { "name" : "RefuelDumpRate",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def RefuelDumpRate(self) -> float:
        """Get the RefuelDump rate"""
        return self._intf.get_property(IAgAvtrRefuelDumpProperties._metadata, IAgAvtrRefuelDumpProperties._get_RefuelDumpRate_metadata)

    _set_RefuelDumpRate_metadata = { "name" : "RefuelDumpRate",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @RefuelDumpRate.setter
    def RefuelDumpRate(self, newVal:float) -> None:
        """Set the RefuelDump rate"""
        return self._intf.set_property(IAgAvtrRefuelDumpProperties._metadata, IAgAvtrRefuelDumpProperties._set_RefuelDumpRate_metadata, newVal)

    _get_RefuelDumpTimeOffset_metadata = { "name" : "RefuelDumpTimeOffset",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def RefuelDumpTimeOffset(self) -> float:
        """Get the RefuelDump time offset"""
        return self._intf.get_property(IAgAvtrRefuelDumpProperties._metadata, IAgAvtrRefuelDumpProperties._get_RefuelDumpTimeOffset_metadata)

    _set_RefuelDumpTimeOffset_metadata = { "name" : "RefuelDumpTimeOffset",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @RefuelDumpTimeOffset.setter
    def RefuelDumpTimeOffset(self, newVal:float) -> None:
        """Set the RefuelDump time offset"""
        return self._intf.set_property(IAgAvtrRefuelDumpProperties._metadata, IAgAvtrRefuelDumpProperties._set_RefuelDumpTimeOffset_metadata, newVal)

    _get_CanUseEndOfEnrouteSegmentAsEpoch_metadata = { "name" : "CanUseEndOfEnrouteSegmentAsEpoch",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def CanUseEndOfEnrouteSegmentAsEpoch(self) -> bool:
        """Can use end of enroute segment as the epoch"""
        return self._intf.get_property(IAgAvtrRefuelDumpProperties._metadata, IAgAvtrRefuelDumpProperties._get_CanUseEndOfEnrouteSegmentAsEpoch_metadata)

    _get_UseEndOfEnrouteSegmentAsEpoch_metadata = { "name" : "UseEndOfEnrouteSegmentAsEpoch",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def UseEndOfEnrouteSegmentAsEpoch(self) -> bool:
        """Use end of enroute segment as the epoch"""
        return self._intf.get_property(IAgAvtrRefuelDumpProperties._metadata, IAgAvtrRefuelDumpProperties._get_UseEndOfEnrouteSegmentAsEpoch_metadata)

    _set_UseEndOfEnrouteSegmentAsEpoch_metadata = { "name" : "UseEndOfEnrouteSegmentAsEpoch",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @UseEndOfEnrouteSegmentAsEpoch.setter
    def UseEndOfEnrouteSegmentAsEpoch(self, newVal:bool) -> None:
        """Use end of enroute segment as the epoch"""
        return self._intf.set_property(IAgAvtrRefuelDumpProperties._metadata, IAgAvtrRefuelDumpProperties._set_UseEndOfEnrouteSegmentAsEpoch_metadata, newVal)


agcls.AgClassCatalog.add_catalog_entry("{8C37F92D-E841-456E-8E12-A09C84D5EFF5}", IAgAvtrRefuelDumpProperties)
agcls.AgTypeNameMap["IAgAvtrRefuelDumpProperties"] = IAgAvtrRefuelDumpProperties

class IAgAvtrProcedureFastTimeOptions(object):
    """Interface used to access the fast time options (without error or constraint checks) for the current procedure. Use this interface to set an Interrupt Time or Fixed Duration for a procedure."""
    _num_methods = 5
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{776EACCB-1B06-4CB2-A915-01B3B2E15E10}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_StartTime" : 1,
                             "SetStartTime" : 2,
                             "SetInterruptTime" : 3,
                             "get_StopTime" : 4,
                             "SetStopTime" : 5, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrProcedureFastTimeOptions._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrProcedureFastTimeOptions from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrProcedureFastTimeOptions.__dict__ and type(IAgAvtrProcedureFastTimeOptions.__dict__[attrname]) == property:
            return IAgAvtrProcedureFastTimeOptions.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrProcedureFastTimeOptions.")
    
    _get_StartTime_metadata = { "name" : "StartTime",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def StartTime(self) -> typing.Any:
        """Start time for the procedure."""
        return self._intf.get_property(IAgAvtrProcedureFastTimeOptions._metadata, IAgAvtrProcedureFastTimeOptions._get_StartTime_metadata)

    _SetStartTime_metadata = { "name" : "SetStartTime",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    def SetStartTime(self, time:typing.Any) -> None:
        """Set the start time for the procedure."""
        return self._intf.invoke(IAgAvtrProcedureFastTimeOptions._metadata, IAgAvtrProcedureFastTimeOptions._SetStartTime_metadata, time)

    _SetInterruptTime_metadata = { "name" : "SetInterruptTime",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    def SetInterruptTime(self, time:typing.Any) -> None:
        """Set the interrupt time for the procedure."""
        return self._intf.invoke(IAgAvtrProcedureFastTimeOptions._metadata, IAgAvtrProcedureFastTimeOptions._SetInterruptTime_metadata, time)

    _get_StopTime_metadata = { "name" : "StopTime",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def StopTime(self) -> typing.Any:
        """Stop time for the procedure."""
        return self._intf.get_property(IAgAvtrProcedureFastTimeOptions._metadata, IAgAvtrProcedureFastTimeOptions._get_StopTime_metadata)

    _SetStopTime_metadata = { "name" : "SetStopTime",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    def SetStopTime(self, time:typing.Any) -> None:
        """Set the stop time for the procedure."""
        return self._intf.invoke(IAgAvtrProcedureFastTimeOptions._metadata, IAgAvtrProcedureFastTimeOptions._SetStopTime_metadata, time)


agcls.AgClassCatalog.add_catalog_entry("{776EACCB-1B06-4CB2-A915-01B3B2E15E10}", IAgAvtrProcedureFastTimeOptions)
agcls.AgTypeNameMap["IAgAvtrProcedureFastTimeOptions"] = IAgAvtrProcedureFastTimeOptions

class IAgAvtrAtmosphereModelBasic(object):
    """Interface used to access the basic atmosphere model."""
    _num_methods = 11
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{c39ccd9f-0996-4325-95bf-4b0af8d47b2f}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_Name" : 1,
                             "set_Name" : 2,
                             "get_BasicModelType" : 3,
                             "set_BasicModelType" : 4,
                             "get_UseNonStandardAtmosphere" : 5,
                             "set_UseNonStandardAtmosphere" : 6,
                             "get_Temperature" : 7,
                             "set_Temperature" : 8,
                             "get_Pressure" : 9,
                             "set_Pressure" : 10,
                             "get_DensityAlt" : 11, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrAtmosphereModelBasic._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrAtmosphereModelBasic from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrAtmosphereModelBasic.__dict__ and type(IAgAvtrAtmosphereModelBasic.__dict__[attrname]) == property:
            return IAgAvtrAtmosphereModelBasic.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrAtmosphereModelBasic.")
    
    _get_Name_metadata = { "name" : "Name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def Name(self) -> str:
        """The name of the atmosphere model."""
        return self._intf.get_property(IAgAvtrAtmosphereModelBasic._metadata, IAgAvtrAtmosphereModelBasic._get_Name_metadata)

    _set_Name_metadata = { "name" : "Name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @Name.setter
    def Name(self, newVal:str) -> None:
        """The name of the atmospheremodel."""
        return self._intf.set_property(IAgAvtrAtmosphereModelBasic._metadata, IAgAvtrAtmosphereModelBasic._set_Name_metadata, newVal)

    _get_BasicModelType_metadata = { "name" : "BasicModelType",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrAtmosphereModel),) }
    @property
    def BasicModelType(self) -> "AgEAvtrAtmosphereModel":
        """The type of basic atmosphere."""
        return self._intf.get_property(IAgAvtrAtmosphereModelBasic._metadata, IAgAvtrAtmosphereModelBasic._get_BasicModelType_metadata)

    _set_BasicModelType_metadata = { "name" : "BasicModelType",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrAtmosphereModel),) }
    @BasicModelType.setter
    def BasicModelType(self, newVal:"AgEAvtrAtmosphereModel") -> None:
        """The type of basic atmosphere."""
        return self._intf.set_property(IAgAvtrAtmosphereModelBasic._metadata, IAgAvtrAtmosphereModelBasic._set_BasicModelType_metadata, newVal)

    _get_UseNonStandardAtmosphere_metadata = { "name" : "UseNonStandardAtmosphere",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def UseNonStandardAtmosphere(self) -> bool:
        """Opt whether to use non standard atmosphere conditions."""
        return self._intf.get_property(IAgAvtrAtmosphereModelBasic._metadata, IAgAvtrAtmosphereModelBasic._get_UseNonStandardAtmosphere_metadata)

    _set_UseNonStandardAtmosphere_metadata = { "name" : "UseNonStandardAtmosphere",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @UseNonStandardAtmosphere.setter
    def UseNonStandardAtmosphere(self, newVal:bool) -> None:
        """Opt whether to use non standard atmosphere conditions."""
        return self._intf.set_property(IAgAvtrAtmosphereModelBasic._metadata, IAgAvtrAtmosphereModelBasic._set_UseNonStandardAtmosphere_metadata, newVal)

    _get_Temperature_metadata = { "name" : "Temperature",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def Temperature(self) -> float:
        """The sea-level temperature."""
        return self._intf.get_property(IAgAvtrAtmosphereModelBasic._metadata, IAgAvtrAtmosphereModelBasic._get_Temperature_metadata)

    _set_Temperature_metadata = { "name" : "Temperature",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @Temperature.setter
    def Temperature(self, newVal:float) -> None:
        """The sea-level temperature."""
        return self._intf.set_property(IAgAvtrAtmosphereModelBasic._metadata, IAgAvtrAtmosphereModelBasic._set_Temperature_metadata, newVal)

    _get_Pressure_metadata = { "name" : "Pressure",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def Pressure(self) -> float:
        """The sea-level pressure."""
        return self._intf.get_property(IAgAvtrAtmosphereModelBasic._metadata, IAgAvtrAtmosphereModelBasic._get_Pressure_metadata)

    _set_Pressure_metadata = { "name" : "Pressure",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @Pressure.setter
    def Pressure(self, newVal:float) -> None:
        """The sea-level pressure."""
        return self._intf.set_property(IAgAvtrAtmosphereModelBasic._metadata, IAgAvtrAtmosphereModelBasic._set_Pressure_metadata, newVal)

    _get_DensityAlt_metadata = { "name" : "DensityAlt",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def DensityAlt(self) -> float:
        """The sea-level density altitude."""
        return self._intf.get_property(IAgAvtrAtmosphereModelBasic._metadata, IAgAvtrAtmosphereModelBasic._get_DensityAlt_metadata)


agcls.AgClassCatalog.add_catalog_entry("{c39ccd9f-0996-4325-95bf-4b0af8d47b2f}", IAgAvtrAtmosphereModelBasic)
agcls.AgTypeNameMap["IAgAvtrAtmosphereModelBasic"] = IAgAvtrAtmosphereModelBasic

class IAgAvtrAtmosphereModel(object):
    """Interface used to access the atmosphere model for a mission, scenario, or procedure."""
    _num_methods = 7
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{1f18b697-794a-4001-a3ee-ccfb21c27e44}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_AtmosphereModelTypeString" : 1,
                             "set_AtmosphereModelTypeString" : 2,
                             "get_AtmosphereModelSource" : 3,
                             "set_AtmosphereModelSource" : 4,
                             "get_ModeAsBasic" : 5,
                             "Copy" : 6,
                             "Paste" : 7, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrAtmosphereModel._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrAtmosphereModel from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrAtmosphereModel.__dict__ and type(IAgAvtrAtmosphereModel.__dict__[attrname]) == property:
            return IAgAvtrAtmosphereModel.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrAtmosphereModel.")
    
    _get_AtmosphereModelTypeString_metadata = { "name" : "AtmosphereModelTypeString",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def AtmosphereModelTypeString(self) -> str:
        """The atmosphere model type as a string value."""
        return self._intf.get_property(IAgAvtrAtmosphereModel._metadata, IAgAvtrAtmosphereModel._get_AtmosphereModelTypeString_metadata)

    _set_AtmosphereModelTypeString_metadata = { "name" : "AtmosphereModelTypeString",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @AtmosphereModelTypeString.setter
    def AtmosphereModelTypeString(self, pVal:str) -> None:
        """The atmosphere model type as a string value."""
        return self._intf.set_property(IAgAvtrAtmosphereModel._metadata, IAgAvtrAtmosphereModel._set_AtmosphereModelTypeString_metadata, pVal)

    _get_AtmosphereModelSource_metadata = { "name" : "AtmosphereModelSource",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrWindAtmosModelSource),) }
    @property
    def AtmosphereModelSource(self) -> "AgEAvtrWindAtmosModelSource":
        """The atmosphere model source."""
        return self._intf.get_property(IAgAvtrAtmosphereModel._metadata, IAgAvtrAtmosphereModel._get_AtmosphereModelSource_metadata)

    _set_AtmosphereModelSource_metadata = { "name" : "AtmosphereModelSource",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrWindAtmosModelSource),) }
    @AtmosphereModelSource.setter
    def AtmosphereModelSource(self, pVal:"AgEAvtrWindAtmosModelSource") -> None:
        """The atmosphere model source."""
        return self._intf.set_property(IAgAvtrAtmosphereModel._metadata, IAgAvtrAtmosphereModel._set_AtmosphereModelSource_metadata, pVal)

    _get_ModeAsBasic_metadata = { "name" : "ModeAsBasic",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def ModeAsBasic(self) -> "IAgAvtrAtmosphereModelBasic":
        """Get the options for a Basic Atmosphere model."""
        return self._intf.get_property(IAgAvtrAtmosphereModel._metadata, IAgAvtrAtmosphereModel._get_ModeAsBasic_metadata)

    _Copy_metadata = { "name" : "Copy",
            "arg_types" : (),
            "marshallers" : () }
    def Copy(self) -> None:
        """Copy the atmosphere model."""
        return self._intf.invoke(IAgAvtrAtmosphereModel._metadata, IAgAvtrAtmosphereModel._Copy_metadata, )

    _Paste_metadata = { "name" : "Paste",
            "arg_types" : (),
            "marshallers" : () }
    def Paste(self) -> None:
        """Paste the atmosphere model."""
        return self._intf.invoke(IAgAvtrAtmosphereModel._metadata, IAgAvtrAtmosphereModel._Paste_metadata, )


agcls.AgClassCatalog.add_catalog_entry("{1f18b697-794a-4001-a3ee-ccfb21c27e44}", IAgAvtrAtmosphereModel)
agcls.AgTypeNameMap["IAgAvtrAtmosphereModel"] = IAgAvtrAtmosphereModel

class IAgAvtrADDSMessageCollection(object):
    """Interface used to access the collection of messages from the NOAA ADDS forecast."""
    _num_methods = 5
    _vtable_offset = IDispatch._vtable_offset + IDispatch._num_methods
    _metadata = {
        "uuid" : "{fecb8f81-541f-4e86-8f34-ed7570047450}",
        "vtable_reference" : IDispatch._vtable_offset + IDispatch._num_methods - 1,
        "method_offsets" : { "get_Count" : 1,
                             "Item" : 2,
                             "get__NewEnum" : 3,
                             "RemoveMessage" : 4,
                             "ClearMessages" : 5, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrADDSMessageCollection._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrADDSMessageCollection from source object.")
        self.__dict__["_enumerator"] = None
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrADDSMessageCollection.__dict__ and type(IAgAvtrADDSMessageCollection.__dict__[attrname]) == property:
            return IAgAvtrADDSMessageCollection.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrADDSMessageCollection.")
    def __iter__(self):
        self.__dict__["_enumerator"] = self._NewEnum
        self._enumerator.reset()
        return self
    def __next__(self) -> "IAgAvtrADDSMessage":
        if self._enumerator is None:
            raise StopIteration
        nextval = self._enumerator.next()
        if nextval is None:
            raise StopIteration
        return nextval
    
    _get_Count_metadata = { "name" : "Count",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.LONG_arg,) }
    @property
    def Count(self) -> int:
        """Returns the number of elements in a collection."""
        return self._intf.get_property(IAgAvtrADDSMessageCollection._metadata, IAgAvtrADDSMessageCollection._get_Count_metadata)

    _Item_metadata = { "name" : "Item",
            "arg_types" : (agcom.LONG, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.LONG_arg, agmarshall.AgInterface_out_arg,) }
    def Item(self, index:int) -> "IAgAvtrADDSMessage":
        """Given an index, returns an element in the collection."""
        return self._intf.invoke(IAgAvtrADDSMessageCollection._metadata, IAgAvtrADDSMessageCollection._Item_metadata, index, out_arg())

    _get__NewEnum_metadata = { "name" : "_NewEnum",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.IEnumVARIANT_arg,) }
    @property
    def _NewEnum(self) -> enumerator_proxy:
        """Returns an enumerator that can iterate through the collection."""
        return self._intf.get_property(IAgAvtrADDSMessageCollection._metadata, IAgAvtrADDSMessageCollection._get__NewEnum_metadata)

    _RemoveMessage_metadata = { "name" : "RemoveMessage",
            "arg_types" : (agcom.PVOID,),
            "marshallers" : (agmarshall.AgInterface_in_arg("IAgAvtrADDSMessage"),) }
    def RemoveMessage(self, message:"IAgAvtrADDSMessage") -> None:
        """Remove this message from the forecast."""
        return self._intf.invoke(IAgAvtrADDSMessageCollection._metadata, IAgAvtrADDSMessageCollection._RemoveMessage_metadata, message)

    _ClearMessages_metadata = { "name" : "ClearMessages",
            "arg_types" : (),
            "marshallers" : () }
    def ClearMessages(self) -> None:
        """Clears all of the messages in the collection."""
        return self._intf.invoke(IAgAvtrADDSMessageCollection._metadata, IAgAvtrADDSMessageCollection._ClearMessages_metadata, )

    __getitem__ = Item



agcls.AgClassCatalog.add_catalog_entry("{fecb8f81-541f-4e86-8f34-ed7570047450}", IAgAvtrADDSMessageCollection)
agcls.AgTypeNameMap["IAgAvtrADDSMessageCollection"] = IAgAvtrADDSMessageCollection

class IAgAvtrWindModelADDS(object):
    """Interface used to access the options for a NOAA ADDS wind model."""
    _num_methods = 14
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{56b53131-0902-4469-9acc-75b68ed298d4}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_Name" : 1,
                             "set_Name" : 2,
                             "get_BlendTime" : 3,
                             "set_BlendTime" : 4,
                             "get_MsgInterpolationType" : 5,
                             "set_MsgInterpolationType" : 6,
                             "get_MsgExtrapolationType" : 7,
                             "set_MsgExtrapolationType" : 8,
                             "get_MissingMsgType" : 9,
                             "set_MissingMsgType" : 10,
                             "get_InterpBlendTime" : 11,
                             "set_InterpBlendTime" : 12,
                             "AddCurrentForecast" : 13,
                             "get_Messages" : 14, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrWindModelADDS._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrWindModelADDS from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrWindModelADDS.__dict__ and type(IAgAvtrWindModelADDS.__dict__[attrname]) == property:
            return IAgAvtrWindModelADDS.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrWindModelADDS.")
    
    _get_Name_metadata = { "name" : "Name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def Name(self) -> str:
        """The name of the wind model."""
        return self._intf.get_property(IAgAvtrWindModelADDS._metadata, IAgAvtrWindModelADDS._get_Name_metadata)

    _set_Name_metadata = { "name" : "Name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @Name.setter
    def Name(self, newVal:str) -> None:
        """The name of the wind model."""
        return self._intf.set_property(IAgAvtrWindModelADDS._metadata, IAgAvtrWindModelADDS._set_Name_metadata, newVal)

    _get_BlendTime_metadata = { "name" : "BlendTime",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def BlendTime(self) -> float:
        """The blend time to transition from the previous wind model if one exists."""
        return self._intf.get_property(IAgAvtrWindModelADDS._metadata, IAgAvtrWindModelADDS._get_BlendTime_metadata)

    _set_BlendTime_metadata = { "name" : "BlendTime",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @BlendTime.setter
    def BlendTime(self, newVal:float) -> None:
        """The blend time to transition from the previous wind model if one exists."""
        return self._intf.set_property(IAgAvtrWindModelADDS._metadata, IAgAvtrWindModelADDS._set_BlendTime_metadata, newVal)

    _get_MsgInterpolationType_metadata = { "name" : "MsgInterpolationType",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrADDSMsgInterpType),) }
    @property
    def MsgInterpolationType(self) -> "AgEAvtrADDSMsgInterpType":
        """The message interpolation type."""
        return self._intf.get_property(IAgAvtrWindModelADDS._metadata, IAgAvtrWindModelADDS._get_MsgInterpolationType_metadata)

    _set_MsgInterpolationType_metadata = { "name" : "MsgInterpolationType",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrADDSMsgInterpType),) }
    @MsgInterpolationType.setter
    def MsgInterpolationType(self, newVal:"AgEAvtrADDSMsgInterpType") -> None:
        """The message interpolation type."""
        return self._intf.set_property(IAgAvtrWindModelADDS._metadata, IAgAvtrWindModelADDS._set_MsgInterpolationType_metadata, newVal)

    _get_MsgExtrapolationType_metadata = { "name" : "MsgExtrapolationType",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrADDSMsgExtrapType),) }
    @property
    def MsgExtrapolationType(self) -> "AgEAvtrADDSMsgExtrapType":
        """The message extrapolation type."""
        return self._intf.get_property(IAgAvtrWindModelADDS._metadata, IAgAvtrWindModelADDS._get_MsgExtrapolationType_metadata)

    _set_MsgExtrapolationType_metadata = { "name" : "MsgExtrapolationType",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrADDSMsgExtrapType),) }
    @MsgExtrapolationType.setter
    def MsgExtrapolationType(self, newVal:"AgEAvtrADDSMsgExtrapType") -> None:
        """The message extrapolation type."""
        return self._intf.set_property(IAgAvtrWindModelADDS._metadata, IAgAvtrWindModelADDS._set_MsgExtrapolationType_metadata, newVal)

    _get_MissingMsgType_metadata = { "name" : "MissingMsgType",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrADDSMissingMsgType),) }
    @property
    def MissingMsgType(self) -> "AgEAvtrADDSMissingMsgType":
        """The missing message type."""
        return self._intf.get_property(IAgAvtrWindModelADDS._metadata, IAgAvtrWindModelADDS._get_MissingMsgType_metadata)

    _set_MissingMsgType_metadata = { "name" : "MissingMsgType",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrADDSMissingMsgType),) }
    @MissingMsgType.setter
    def MissingMsgType(self, newVal:"AgEAvtrADDSMissingMsgType") -> None:
        """The missing message type."""
        return self._intf.set_property(IAgAvtrWindModelADDS._metadata, IAgAvtrWindModelADDS._set_MissingMsgType_metadata, newVal)

    _get_InterpBlendTime_metadata = { "name" : "InterpBlendTime",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def InterpBlendTime(self) -> float:
        """The blend time to transition from the previous wind condition."""
        return self._intf.get_property(IAgAvtrWindModelADDS._metadata, IAgAvtrWindModelADDS._get_InterpBlendTime_metadata)

    _set_InterpBlendTime_metadata = { "name" : "InterpBlendTime",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @InterpBlendTime.setter
    def InterpBlendTime(self, newVal:float) -> None:
        """The blend time to transition from the previous wind condition."""
        return self._intf.set_property(IAgAvtrWindModelADDS._metadata, IAgAvtrWindModelADDS._set_InterpBlendTime_metadata, newVal)

    _AddCurrentForecast_metadata = { "name" : "AddCurrentForecast",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    def AddCurrentForecast(self) -> str:
        """Add the current forecast from the ADDS service."""
        return self._intf.invoke(IAgAvtrWindModelADDS._metadata, IAgAvtrWindModelADDS._AddCurrentForecast_metadata, out_arg())

    _get_Messages_metadata = { "name" : "Messages",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def Messages(self) -> "IAgAvtrADDSMessageCollection":
        """Get the messages from the current forecast."""
        return self._intf.get_property(IAgAvtrWindModelADDS._metadata, IAgAvtrWindModelADDS._get_Messages_metadata)


agcls.AgClassCatalog.add_catalog_entry("{56b53131-0902-4469-9acc-75b68ed298d4}", IAgAvtrWindModelADDS)
agcls.AgTypeNameMap["IAgAvtrWindModelADDS"] = IAgAvtrWindModelADDS

class IAgAvtrWindModelConstant(object):
    """Interface used to access the options for a Constant Bearing/Speed wind model."""
    _num_methods = 8
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{d40dcd05-eccc-4264-8b84-39be36b58406}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_Name" : 1,
                             "set_Name" : 2,
                             "get_BlendTime" : 3,
                             "set_BlendTime" : 4,
                             "get_WindSpeed" : 5,
                             "set_WindSpeed" : 6,
                             "get_WindBearing" : 7,
                             "set_WindBearing" : 8, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrWindModelConstant._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrWindModelConstant from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrWindModelConstant.__dict__ and type(IAgAvtrWindModelConstant.__dict__[attrname]) == property:
            return IAgAvtrWindModelConstant.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrWindModelConstant.")
    
    _get_Name_metadata = { "name" : "Name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def Name(self) -> str:
        """The name of the wind model."""
        return self._intf.get_property(IAgAvtrWindModelConstant._metadata, IAgAvtrWindModelConstant._get_Name_metadata)

    _set_Name_metadata = { "name" : "Name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @Name.setter
    def Name(self, newVal:str) -> None:
        """The name of the wind model."""
        return self._intf.set_property(IAgAvtrWindModelConstant._metadata, IAgAvtrWindModelConstant._set_Name_metadata, newVal)

    _get_BlendTime_metadata = { "name" : "BlendTime",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def BlendTime(self) -> float:
        """The blend time to transition from the previous wind model if one exists."""
        return self._intf.get_property(IAgAvtrWindModelConstant._metadata, IAgAvtrWindModelConstant._get_BlendTime_metadata)

    _set_BlendTime_metadata = { "name" : "BlendTime",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @BlendTime.setter
    def BlendTime(self, newVal:float) -> None:
        """The blend time to transition from the previous wind model if one exists."""
        return self._intf.set_property(IAgAvtrWindModelConstant._metadata, IAgAvtrWindModelConstant._set_BlendTime_metadata, newVal)

    _get_WindSpeed_metadata = { "name" : "WindSpeed",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def WindSpeed(self) -> float:
        """The constant wind speed."""
        return self._intf.get_property(IAgAvtrWindModelConstant._metadata, IAgAvtrWindModelConstant._get_WindSpeed_metadata)

    _set_WindSpeed_metadata = { "name" : "WindSpeed",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @WindSpeed.setter
    def WindSpeed(self, newVal:float) -> None:
        """The constant wind speed."""
        return self._intf.set_property(IAgAvtrWindModelConstant._metadata, IAgAvtrWindModelConstant._set_WindSpeed_metadata, newVal)

    _get_WindBearing_metadata = { "name" : "WindBearing",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def WindBearing(self) -> typing.Any:
        """The wind's true bearing."""
        return self._intf.get_property(IAgAvtrWindModelConstant._metadata, IAgAvtrWindModelConstant._get_WindBearing_metadata)

    _set_WindBearing_metadata = { "name" : "WindBearing",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @WindBearing.setter
    def WindBearing(self, newVal:typing.Any) -> None:
        """The wind's true bearing."""
        return self._intf.set_property(IAgAvtrWindModelConstant._metadata, IAgAvtrWindModelConstant._set_WindBearing_metadata, newVal)


agcls.AgClassCatalog.add_catalog_entry("{d40dcd05-eccc-4264-8b84-39be36b58406}", IAgAvtrWindModelConstant)
agcls.AgTypeNameMap["IAgAvtrWindModelConstant"] = IAgAvtrWindModelConstant

class IAgAvtrStation(object):
    """Interface used to access a station for an Aviator aircraft."""
    _num_methods = 0
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{ac0b6aed-ff8d-4f69-ba75-d31e2285b436}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : {  }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrStation._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrStation from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrStation.__dict__ and type(IAgAvtrStation.__dict__[attrname]) == property:
            return IAgAvtrStation.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrStation.")
    

agcls.AgClassCatalog.add_catalog_entry("{ac0b6aed-ff8d-4f69-ba75-d31e2285b436}", IAgAvtrStation)
agcls.AgTypeNameMap["IAgAvtrStation"] = IAgAvtrStation

class IAgAvtrStationCollection(object):
    """Interface used to access the list of stations for an Aviator aircraft."""
    _num_methods = 11
    _vtable_offset = IDispatch._vtable_offset + IDispatch._num_methods
    _metadata = {
        "uuid" : "{c4e09526-9742-4f58-9943-b176e5192b24}",
        "vtable_reference" : IDispatch._vtable_offset + IDispatch._num_methods - 1,
        "method_offsets" : { "get_Count" : 1,
                             "Item" : 2,
                             "get__NewEnum" : 3,
                             "GetInternalFuelTankByName" : 4,
                             "AddInternalFuelTank" : 5,
                             "GetPayloadStationByName" : 6,
                             "AddPayloadStation" : 7,
                             "ContainsStation" : 8,
                             "RemoveStationByName" : 9,
                             "RemoveAtIndex" : 10,
                             "get_StationNames" : 11, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrStationCollection._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrStationCollection from source object.")
        self.__dict__["_enumerator"] = None
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrStationCollection.__dict__ and type(IAgAvtrStationCollection.__dict__[attrname]) == property:
            return IAgAvtrStationCollection.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrStationCollection.")
    def __iter__(self):
        self.__dict__["_enumerator"] = self._NewEnum
        self._enumerator.reset()
        return self
    def __next__(self) -> "IAgAvtrStation":
        if self._enumerator is None:
            raise StopIteration
        nextval = self._enumerator.next()
        if nextval is None:
            raise StopIteration
        return nextval
    
    _get_Count_metadata = { "name" : "Count",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.LONG_arg,) }
    @property
    def Count(self) -> int:
        """Returns the number of elements in a collection."""
        return self._intf.get_property(IAgAvtrStationCollection._metadata, IAgAvtrStationCollection._get_Count_metadata)

    _Item_metadata = { "name" : "Item",
            "arg_types" : (agcom.LONG, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.LONG_arg, agmarshall.AgInterface_out_arg,) }
    def Item(self, index:int) -> "IAgAvtrStation":
        """Given an index, returns an element in the collection."""
        return self._intf.invoke(IAgAvtrStationCollection._metadata, IAgAvtrStationCollection._Item_metadata, index, out_arg())

    _get__NewEnum_metadata = { "name" : "_NewEnum",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.IEnumVARIANT_arg,) }
    @property
    def _NewEnum(self) -> enumerator_proxy:
        """Returns an enumerator that can iterate through the collection."""
        return self._intf.get_property(IAgAvtrStationCollection._metadata, IAgAvtrStationCollection._get__NewEnum_metadata)

    _GetInternalFuelTankByName_metadata = { "name" : "GetInternalFuelTankByName",
            "arg_types" : (agcom.BSTR, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.AgInterface_out_arg,) }
    def GetInternalFuelTankByName(self, name:str) -> "IAgAvtrFuelTankInternal":
        """Get the internal fuel tank with the given name."""
        return self._intf.invoke(IAgAvtrStationCollection._metadata, IAgAvtrStationCollection._GetInternalFuelTankByName_metadata, name, out_arg())

    _AddInternalFuelTank_metadata = { "name" : "AddInternalFuelTank",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    def AddInternalFuelTank(self) -> "IAgAvtrFuelTankInternal":
        """Add an internal fuel tank"""
        return self._intf.invoke(IAgAvtrStationCollection._metadata, IAgAvtrStationCollection._AddInternalFuelTank_metadata, out_arg())

    _GetPayloadStationByName_metadata = { "name" : "GetPayloadStationByName",
            "arg_types" : (agcom.BSTR, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.AgInterface_out_arg,) }
    def GetPayloadStationByName(self, name:str) -> "IAgAvtrPayloadStation":
        """Get the payload station with the given name."""
        return self._intf.invoke(IAgAvtrStationCollection._metadata, IAgAvtrStationCollection._GetPayloadStationByName_metadata, name, out_arg())

    _AddPayloadStation_metadata = { "name" : "AddPayloadStation",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    def AddPayloadStation(self) -> "IAgAvtrPayloadStation":
        """Add a payload station"""
        return self._intf.invoke(IAgAvtrStationCollection._metadata, IAgAvtrStationCollection._AddPayloadStation_metadata, out_arg())

    _ContainsStation_metadata = { "name" : "ContainsStation",
            "arg_types" : (agcom.BSTR, POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.VARIANT_BOOL_arg,) }
    def ContainsStation(self, name:str) -> bool:
        """Get whether the station list contains an item with the given name."""
        return self._intf.invoke(IAgAvtrStationCollection._metadata, IAgAvtrStationCollection._ContainsStation_metadata, name, out_arg())

    _RemoveStationByName_metadata = { "name" : "RemoveStationByName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    def RemoveStationByName(self, name:str) -> None:
        """Remove an station by name."""
        return self._intf.invoke(IAgAvtrStationCollection._metadata, IAgAvtrStationCollection._RemoveStationByName_metadata, name)

    _RemoveAtIndex_metadata = { "name" : "RemoveAtIndex",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.LONG_arg,) }
    def RemoveAtIndex(self, index:int) -> None:
        """Remove procedure at the given index."""
        return self._intf.invoke(IAgAvtrStationCollection._metadata, IAgAvtrStationCollection._RemoveAtIndex_metadata, index)

    _get_StationNames_metadata = { "name" : "StationNames",
            "arg_types" : (POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg,) }
    @property
    def StationNames(self) -> list:
        """Returns the station names."""
        return self._intf.get_property(IAgAvtrStationCollection._metadata, IAgAvtrStationCollection._get_StationNames_metadata)

    __getitem__ = Item



agcls.AgClassCatalog.add_catalog_entry("{c4e09526-9742-4f58-9943-b176e5192b24}", IAgAvtrStationCollection)
agcls.AgTypeNameMap["IAgAvtrStationCollection"] = IAgAvtrStationCollection

class IAgAvtrConfiguration(object):
    """Interface used to change an aircraft's configuration for an Aviator mission."""
    _num_methods = 21
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{33bb7422-861d-4949-a165-cb4a416c400b}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_EmptyWeight" : 1,
                             "set_EmptyWeight" : 2,
                             "get_MaxLandingWeight" : 3,
                             "set_MaxLandingWeight" : 4,
                             "get_BaseDragIndex" : 5,
                             "set_BaseDragIndex" : 6,
                             "get_EmptyCGX" : 7,
                             "get_EmptyCGY" : 8,
                             "get_EmptyCGZ" : 9,
                             "SetEmptyCG" : 10,
                             "get_TotalWeight" : 11,
                             "get_TotalWeightMaxFuel" : 12,
                             "get_TotalDragIndex" : 13,
                             "get_TotalCGX" : 14,
                             "get_TotalCGY" : 15,
                             "get_TotalCGZ" : 16,
                             "PasteConfiguration" : 17,
                             "GetStations" : 18,
                             "get_TotalCapacity" : 19,
                             "get_InitialFuelState" : 20,
                             "Save" : 21, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrConfiguration._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrConfiguration from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrConfiguration.__dict__ and type(IAgAvtrConfiguration.__dict__[attrname]) == property:
            return IAgAvtrConfiguration.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrConfiguration.")
    
    _get_EmptyWeight_metadata = { "name" : "EmptyWeight",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def EmptyWeight(self) -> float:
        """The empty weight of the aircraft."""
        return self._intf.get_property(IAgAvtrConfiguration._metadata, IAgAvtrConfiguration._get_EmptyWeight_metadata)

    _set_EmptyWeight_metadata = { "name" : "EmptyWeight",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @EmptyWeight.setter
    def EmptyWeight(self, newVal:float) -> None:
        """The empty weight of the aircraft."""
        return self._intf.set_property(IAgAvtrConfiguration._metadata, IAgAvtrConfiguration._set_EmptyWeight_metadata, newVal)

    _get_MaxLandingWeight_metadata = { "name" : "MaxLandingWeight",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def MaxLandingWeight(self) -> float:
        """The max landing weight of the aircraft."""
        return self._intf.get_property(IAgAvtrConfiguration._metadata, IAgAvtrConfiguration._get_MaxLandingWeight_metadata)

    _set_MaxLandingWeight_metadata = { "name" : "MaxLandingWeight",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @MaxLandingWeight.setter
    def MaxLandingWeight(self, newVal:float) -> None:
        """The max landing weight of the aircraft."""
        return self._intf.set_property(IAgAvtrConfiguration._metadata, IAgAvtrConfiguration._set_MaxLandingWeight_metadata, newVal)

    _get_BaseDragIndex_metadata = { "name" : "BaseDragIndex",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def BaseDragIndex(self) -> float:
        """The base drag index of the aircraft."""
        return self._intf.get_property(IAgAvtrConfiguration._metadata, IAgAvtrConfiguration._get_BaseDragIndex_metadata)

    _set_BaseDragIndex_metadata = { "name" : "BaseDragIndex",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @BaseDragIndex.setter
    def BaseDragIndex(self, newVal:float) -> None:
        """The base drag index of the aircraft."""
        return self._intf.set_property(IAgAvtrConfiguration._metadata, IAgAvtrConfiguration._set_BaseDragIndex_metadata, newVal)

    _get_EmptyCGX_metadata = { "name" : "EmptyCGX",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def EmptyCGX(self) -> float:
        """The X value of the aircraft's Empty CG position."""
        return self._intf.get_property(IAgAvtrConfiguration._metadata, IAgAvtrConfiguration._get_EmptyCGX_metadata)

    _get_EmptyCGY_metadata = { "name" : "EmptyCGY",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def EmptyCGY(self) -> float:
        """The Y value of the aircraft's Empty CG position."""
        return self._intf.get_property(IAgAvtrConfiguration._metadata, IAgAvtrConfiguration._get_EmptyCGY_metadata)

    _get_EmptyCGZ_metadata = { "name" : "EmptyCGZ",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def EmptyCGZ(self) -> float:
        """The Z value of the aircraft's Empty CG position."""
        return self._intf.get_property(IAgAvtrConfiguration._metadata, IAgAvtrConfiguration._get_EmptyCGZ_metadata)

    _SetEmptyCG_metadata = { "name" : "SetEmptyCG",
            "arg_types" : (agcom.DOUBLE, agcom.DOUBLE, agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg,) }
    def SetEmptyCG(self, x:float, y:float, z:float) -> None:
        """Set the aircraft's Empty CG position."""
        return self._intf.invoke(IAgAvtrConfiguration._metadata, IAgAvtrConfiguration._SetEmptyCG_metadata, x, y, z)

    _get_TotalWeight_metadata = { "name" : "TotalWeight",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def TotalWeight(self) -> float:
        """The total weight of the aircraft."""
        return self._intf.get_property(IAgAvtrConfiguration._metadata, IAgAvtrConfiguration._get_TotalWeight_metadata)

    _get_TotalWeightMaxFuel_metadata = { "name" : "TotalWeightMaxFuel",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def TotalWeightMaxFuel(self) -> float:
        """The total weight of the aircraft with all fuel tanks full."""
        return self._intf.get_property(IAgAvtrConfiguration._metadata, IAgAvtrConfiguration._get_TotalWeightMaxFuel_metadata)

    _get_TotalDragIndex_metadata = { "name" : "TotalDragIndex",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def TotalDragIndex(self) -> float:
        """The total drag index of the aircraft."""
        return self._intf.get_property(IAgAvtrConfiguration._metadata, IAgAvtrConfiguration._get_TotalDragIndex_metadata)

    _get_TotalCGX_metadata = { "name" : "TotalCGX",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def TotalCGX(self) -> float:
        """The X value of the aircraft's Total CG position."""
        return self._intf.get_property(IAgAvtrConfiguration._metadata, IAgAvtrConfiguration._get_TotalCGX_metadata)

    _get_TotalCGY_metadata = { "name" : "TotalCGY",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def TotalCGY(self) -> float:
        """The Y value of the aircraft's Total CG position."""
        return self._intf.get_property(IAgAvtrConfiguration._metadata, IAgAvtrConfiguration._get_TotalCGY_metadata)

    _get_TotalCGZ_metadata = { "name" : "TotalCGZ",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def TotalCGZ(self) -> float:
        """The Z value of the aircraft's Total CG position."""
        return self._intf.get_property(IAgAvtrConfiguration._metadata, IAgAvtrConfiguration._get_TotalCGZ_metadata)

    _PasteConfiguration_metadata = { "name" : "PasteConfiguration",
            "arg_types" : (agcom.PVOID,),
            "marshallers" : (agmarshall.AgInterface_in_arg("IAgAvtrConfiguration"),) }
    def PasteConfiguration(self, otherConfiguration:"IAgAvtrConfiguration") -> None:
        """Paste the aircraft's configuration."""
        return self._intf.invoke(IAgAvtrConfiguration._metadata, IAgAvtrConfiguration._PasteConfiguration_metadata, otherConfiguration)

    _GetStations_metadata = { "name" : "GetStations",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    def GetStations(self) -> "IAgAvtrStationCollection":
        """Get a collection of the aircraft's payload stations."""
        return self._intf.invoke(IAgAvtrConfiguration._metadata, IAgAvtrConfiguration._GetStations_metadata, out_arg())

    _get_TotalCapacity_metadata = { "name" : "TotalCapacity",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def TotalCapacity(self) -> float:
        """The total fuel capacity of the aircraft."""
        return self._intf.get_property(IAgAvtrConfiguration._metadata, IAgAvtrConfiguration._get_TotalCapacity_metadata)

    _get_InitialFuelState_metadata = { "name" : "InitialFuelState",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def InitialFuelState(self) -> float:
        """The initial fuel state of the aircraft."""
        return self._intf.get_property(IAgAvtrConfiguration._metadata, IAgAvtrConfiguration._get_InitialFuelState_metadata)

    _Save_metadata = { "name" : "Save",
            "arg_types" : (),
            "marshallers" : () }
    def Save(self) -> None:
        """Save."""
        return self._intf.invoke(IAgAvtrConfiguration._metadata, IAgAvtrConfiguration._Save_metadata, )


agcls.AgClassCatalog.add_catalog_entry("{33bb7422-861d-4949-a165-cb4a416c400b}", IAgAvtrConfiguration)
agcls.AgTypeNameMap["IAgAvtrConfiguration"] = IAgAvtrConfiguration

class IAgAvtrCatalogSource(object):
    """Interface used to access options for a source in the Aviator Catalog. Examples of sources include User Aircraft Models, ARINC424runways, User Runways, etc."""
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{ea6e896f-5c4d-4614-9835-4a9f598e52b3}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_ChildNames" : 1,
                             "Contains" : 2,
                             "RemoveChild" : 3,
                             "Save" : 4, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrCatalogSource._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrCatalogSource from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrCatalogSource.__dict__ and type(IAgAvtrCatalogSource.__dict__[attrname]) == property:
            return IAgAvtrCatalogSource.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrCatalogSource.")
    
    _get_ChildNames_metadata = { "name" : "ChildNames",
            "arg_types" : (POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg,) }
    @property
    def ChildNames(self) -> list:
        """Returns the child names."""
        return self._intf.get_property(IAgAvtrCatalogSource._metadata, IAgAvtrCatalogSource._get_ChildNames_metadata)

    _Contains_metadata = { "name" : "Contains",
            "arg_types" : (agcom.BSTR, POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.VARIANT_BOOL_arg,) }
    def Contains(self, aircraftName:str) -> bool:
        """Checks whether the catalog source contains the catalog item with the given name."""
        return self._intf.invoke(IAgAvtrCatalogSource._metadata, IAgAvtrCatalogSource._Contains_metadata, aircraftName, out_arg())

    _RemoveChild_metadata = { "name" : "RemoveChild",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    def RemoveChild(self, childName:str) -> None:
        """Removes the child with the given name."""
        return self._intf.invoke(IAgAvtrCatalogSource._metadata, IAgAvtrCatalogSource._RemoveChild_metadata, childName)

    _Save_metadata = { "name" : "Save",
            "arg_types" : (),
            "marshallers" : () }
    def Save(self) -> None:
        """Saves the catalog item."""
        return self._intf.invoke(IAgAvtrCatalogSource._metadata, IAgAvtrCatalogSource._Save_metadata, )


agcls.AgClassCatalog.add_catalog_entry("{ea6e896f-5c4d-4614-9835-4a9f598e52b3}", IAgAvtrCatalogSource)
agcls.AgTypeNameMap["IAgAvtrCatalogSource"] = IAgAvtrCatalogSource

class IAgAvtrAircraftModels(object):
    """Interface for the User Aircraft Models in the Aviator Catalog."""
    _num_methods = 3
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{7fffbf9b-1624-4cc9-ba50-ad078c509123}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "GetAircraft" : 1,
                             "AddAircraft" : 2,
                             "GetAsCatalogSource" : 3, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrAircraftModels._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrAircraftModels from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrAircraftModels.__dict__ and type(IAgAvtrAircraftModels.__dict__[attrname]) == property:
            return IAgAvtrAircraftModels.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrAircraftModels.")
    
    _GetAircraft_metadata = { "name" : "GetAircraft",
            "arg_types" : (agcom.BSTR, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.AgInterface_out_arg,) }
    def GetAircraft(self, aircraftName:str) -> "IAgAvtrAircraft":
        """Gets the aircraft with the given name."""
        return self._intf.invoke(IAgAvtrAircraftModels._metadata, IAgAvtrAircraftModels._GetAircraft_metadata, aircraftName, out_arg())

    _AddAircraft_metadata = { "name" : "AddAircraft",
            "arg_types" : (agcom.BSTR, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.AgInterface_out_arg,) }
    def AddAircraft(self, aircraftName:str) -> "IAgAvtrAircraft":
        """Creates a new aircraft with the given name."""
        return self._intf.invoke(IAgAvtrAircraftModels._metadata, IAgAvtrAircraftModels._AddAircraft_metadata, aircraftName, out_arg())

    _GetAsCatalogSource_metadata = { "name" : "GetAsCatalogSource",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    def GetAsCatalogSource(self) -> "IAgAvtrCatalogSource":
        """Get the catalog source interface for this object."""
        return self._intf.invoke(IAgAvtrAircraftModels._metadata, IAgAvtrAircraftModels._GetAsCatalogSource_metadata, out_arg())


agcls.AgClassCatalog.add_catalog_entry("{7fffbf9b-1624-4cc9-ba50-ad078c509123}", IAgAvtrAircraftModels)
agcls.AgTypeNameMap["IAgAvtrAircraftModels"] = IAgAvtrAircraftModels

class IAgAvtrMissileModels(object):
    """Interface for the User Missile Models in the Aviator Catalog."""
    _num_methods = 3
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{7d284b91-7746-4fb4-bb96-a115192c18b6}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "GetMissile" : 1,
                             "AddMissile" : 2,
                             "GetAsCatalogSource" : 3, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrMissileModels._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrMissileModels from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrMissileModels.__dict__ and type(IAgAvtrMissileModels.__dict__[attrname]) == property:
            return IAgAvtrMissileModels.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrMissileModels.")
    
    _GetMissile_metadata = { "name" : "GetMissile",
            "arg_types" : (agcom.BSTR, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.AgInterface_out_arg,) }
    def GetMissile(self, name:str) -> "IAgAvtrMissile":
        """Gets the missile with the given name."""
        return self._intf.invoke(IAgAvtrMissileModels._metadata, IAgAvtrMissileModels._GetMissile_metadata, name, out_arg())

    _AddMissile_metadata = { "name" : "AddMissile",
            "arg_types" : (agcom.BSTR, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.AgInterface_out_arg,) }
    def AddMissile(self, name:str) -> "IAgAvtrMissile":
        """Creates a new missile with the given name."""
        return self._intf.invoke(IAgAvtrMissileModels._metadata, IAgAvtrMissileModels._AddMissile_metadata, name, out_arg())

    _GetAsCatalogSource_metadata = { "name" : "GetAsCatalogSource",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    def GetAsCatalogSource(self) -> "IAgAvtrCatalogSource":
        """Get the catalog source interface for this object."""
        return self._intf.invoke(IAgAvtrMissileModels._metadata, IAgAvtrMissileModels._GetAsCatalogSource_metadata, out_arg())


agcls.AgClassCatalog.add_catalog_entry("{7d284b91-7746-4fb4-bb96-a115192c18b6}", IAgAvtrMissileModels)
agcls.AgTypeNameMap["IAgAvtrMissileModels"] = IAgAvtrMissileModels

class IAgAvtrRotorcraftModels(object):
    """Interface for the User Rotorcraft Models in the Aviator Catalog."""
    _num_methods = 3
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{60605557-ec23-4435-a778-d524335f9244}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "GetRotorcraft" : 1,
                             "AddRotorcraft" : 2,
                             "GetAsCatalogSource" : 3, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrRotorcraftModels._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrRotorcraftModels from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrRotorcraftModels.__dict__ and type(IAgAvtrRotorcraftModels.__dict__[attrname]) == property:
            return IAgAvtrRotorcraftModels.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrRotorcraftModels.")
    
    _GetRotorcraft_metadata = { "name" : "GetRotorcraft",
            "arg_types" : (agcom.BSTR, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.AgInterface_out_arg,) }
    def GetRotorcraft(self, name:str) -> "IAgAvtrRotorcraft":
        """Gets the rotorcraft with the given name."""
        return self._intf.invoke(IAgAvtrRotorcraftModels._metadata, IAgAvtrRotorcraftModels._GetRotorcraft_metadata, name, out_arg())

    _AddRotorcraft_metadata = { "name" : "AddRotorcraft",
            "arg_types" : (agcom.BSTR, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.AgInterface_out_arg,) }
    def AddRotorcraft(self, name:str) -> "IAgAvtrRotorcraft":
        """Creates a new rotorcraft with the given name."""
        return self._intf.invoke(IAgAvtrRotorcraftModels._metadata, IAgAvtrRotorcraftModels._AddRotorcraft_metadata, name, out_arg())

    _GetAsCatalogSource_metadata = { "name" : "GetAsCatalogSource",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    def GetAsCatalogSource(self) -> "IAgAvtrCatalogSource":
        """Get the catalog source interface for this object."""
        return self._intf.invoke(IAgAvtrRotorcraftModels._metadata, IAgAvtrRotorcraftModels._GetAsCatalogSource_metadata, out_arg())


agcls.AgClassCatalog.add_catalog_entry("{60605557-ec23-4435-a778-d524335f9244}", IAgAvtrRotorcraftModels)
agcls.AgTypeNameMap["IAgAvtrRotorcraftModels"] = IAgAvtrRotorcraftModels

class IAgAvtrBasicFixedWingLiftHelper(object):
    """Interface used to access Lift Coefficient Helper in the Basic Fixed Wing Aerodynamics interface for the Basic Acceleration Model of an aircraft."""
    _num_methods = 0
    _vtable_offset = IDispatch._vtable_offset + IDispatch._num_methods
    _metadata = {
        "uuid" : "{6c9d7ac9-cf16-4110-87e4-080c83a44322}",
        "vtable_reference" : IDispatch._vtable_offset + IDispatch._num_methods - 1,
        "method_offsets" : {  }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrBasicFixedWingLiftHelper._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrBasicFixedWingLiftHelper from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrBasicFixedWingLiftHelper.__dict__ and type(IAgAvtrBasicFixedWingLiftHelper.__dict__[attrname]) == property:
            return IAgAvtrBasicFixedWingLiftHelper.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrBasicFixedWingLiftHelper.")
    

agcls.AgClassCatalog.add_catalog_entry("{6c9d7ac9-cf16-4110-87e4-080c83a44322}", IAgAvtrBasicFixedWingLiftHelper)
agcls.AgTypeNameMap["IAgAvtrBasicFixedWingLiftHelper"] = IAgAvtrBasicFixedWingLiftHelper

class IAgAvtrAircraftBasicFixedWingAero(object):
    """Interface used to access Basic Fixed Wing Aerodynamics interface for the Basic Acceleration Model of an aircraft."""
    _num_methods = 32
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{cdf3e057-6192-4817-a72b-8f3cba8b38e5}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_ForwardFlightReferenceArea" : 1,
                             "set_ForwardFlightReferenceArea" : 2,
                             "get_ForwardFlightUseCompressibleFlow" : 3,
                             "set_ForwardFlightUseCompressibleFlow" : 4,
                             "get_ForwardFlightCl0" : 5,
                             "set_ForwardFlightCl0" : 6,
                             "get_ForwardFlightClAlpha" : 7,
                             "set_ForwardFlightClAlpha" : 8,
                             "get_ForwardFlightMinAOA" : 9,
                             "set_ForwardFlightMinAOA" : 10,
                             "get_ForwardFlightMaxAOA" : 11,
                             "set_ForwardFlightMaxAOA" : 12,
                             "get_ForwardFlightCd0" : 13,
                             "set_ForwardFlightCd0" : 14,
                             "get_ForwardFlightK" : 15,
                             "set_ForwardFlightK" : 16,
                             "get_TakeoffLandingReferenceArea" : 17,
                             "set_TakeoffLandingReferenceArea" : 18,
                             "get_TakeoffLandingUseCompressibleFlow" : 19,
                             "set_TakeoffLandingUseCompressibleFlow" : 20,
                             "get_TakeoffLandingCl0" : 21,
                             "set_TakeoffLandingCl0" : 22,
                             "get_TakeoffLandingClAlpha" : 23,
                             "set_TakeoffLandingClAlpha" : 24,
                             "get_TakeoffLandingMinAOA" : 25,
                             "set_TakeoffLandingMinAOA" : 26,
                             "get_TakeoffLandingMaxAOA" : 27,
                             "set_TakeoffLandingMaxAOA" : 28,
                             "get_TakeoffLandingCd0" : 29,
                             "set_TakeoffLandingCd0" : 30,
                             "get_TakeoffLandingK" : 31,
                             "set_TakeoffLandingK" : 32, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrAircraftBasicFixedWingAero._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrAircraftBasicFixedWingAero from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrAircraftBasicFixedWingAero.__dict__ and type(IAgAvtrAircraftBasicFixedWingAero.__dict__[attrname]) == property:
            return IAgAvtrAircraftBasicFixedWingAero.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrAircraftBasicFixedWingAero.")
    
    _get_ForwardFlightReferenceArea_metadata = { "name" : "ForwardFlightReferenceArea",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def ForwardFlightReferenceArea(self) -> float:
        """The area of the lifting surface of the aircraft."""
        return self._intf.get_property(IAgAvtrAircraftBasicFixedWingAero._metadata, IAgAvtrAircraftBasicFixedWingAero._get_ForwardFlightReferenceArea_metadata)

    _set_ForwardFlightReferenceArea_metadata = { "name" : "ForwardFlightReferenceArea",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @ForwardFlightReferenceArea.setter
    def ForwardFlightReferenceArea(self, pVal:float) -> None:
        """The area of the lifting surface of the aircraft."""
        return self._intf.set_property(IAgAvtrAircraftBasicFixedWingAero._metadata, IAgAvtrAircraftBasicFixedWingAero._set_ForwardFlightReferenceArea_metadata, pVal)

    _get_ForwardFlightUseCompressibleFlow_metadata = { "name" : "ForwardFlightUseCompressibleFlow",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def ForwardFlightUseCompressibleFlow(self) -> bool:
        """Opt to define the aerodynamic parameters for forward flight with respect to supersonic flight conditions."""
        return self._intf.get_property(IAgAvtrAircraftBasicFixedWingAero._metadata, IAgAvtrAircraftBasicFixedWingAero._get_ForwardFlightUseCompressibleFlow_metadata)

    _set_ForwardFlightUseCompressibleFlow_metadata = { "name" : "ForwardFlightUseCompressibleFlow",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @ForwardFlightUseCompressibleFlow.setter
    def ForwardFlightUseCompressibleFlow(self, newVal:bool) -> None:
        """Opt to define the aerodynamic parameters for forward flight with respect to supersonic flight conditions."""
        return self._intf.set_property(IAgAvtrAircraftBasicFixedWingAero._metadata, IAgAvtrAircraftBasicFixedWingAero._set_ForwardFlightUseCompressibleFlow_metadata, newVal)

    _get_ForwardFlightCl0_metadata = { "name" : "ForwardFlightCl0",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def ForwardFlightCl0(self) -> float:
        """The coefficient of lift at zero angle of attack."""
        return self._intf.get_property(IAgAvtrAircraftBasicFixedWingAero._metadata, IAgAvtrAircraftBasicFixedWingAero._get_ForwardFlightCl0_metadata)

    _set_ForwardFlightCl0_metadata = { "name" : "ForwardFlightCl0",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @ForwardFlightCl0.setter
    def ForwardFlightCl0(self, newVal:float) -> None:
        """The coefficient of lift at zero angle of attack."""
        return self._intf.set_property(IAgAvtrAircraftBasicFixedWingAero._metadata, IAgAvtrAircraftBasicFixedWingAero._set_ForwardFlightCl0_metadata, newVal)

    _get_ForwardFlightClAlpha_metadata = { "name" : "ForwardFlightClAlpha",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def ForwardFlightClAlpha(self) -> float:
        """The slope of the coefficient of lift curve."""
        return self._intf.get_property(IAgAvtrAircraftBasicFixedWingAero._metadata, IAgAvtrAircraftBasicFixedWingAero._get_ForwardFlightClAlpha_metadata)

    _set_ForwardFlightClAlpha_metadata = { "name" : "ForwardFlightClAlpha",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @ForwardFlightClAlpha.setter
    def ForwardFlightClAlpha(self, newVal:float) -> None:
        """The slope of the coefficient of lift curve."""
        return self._intf.set_property(IAgAvtrAircraftBasicFixedWingAero._metadata, IAgAvtrAircraftBasicFixedWingAero._set_ForwardFlightClAlpha_metadata, newVal)

    _get_ForwardFlightMinAOA_metadata = { "name" : "ForwardFlightMinAOA",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def ForwardFlightMinAOA(self) -> typing.Any:
        """The minimum angle of attack possible."""
        return self._intf.get_property(IAgAvtrAircraftBasicFixedWingAero._metadata, IAgAvtrAircraftBasicFixedWingAero._get_ForwardFlightMinAOA_metadata)

    _set_ForwardFlightMinAOA_metadata = { "name" : "ForwardFlightMinAOA",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @ForwardFlightMinAOA.setter
    def ForwardFlightMinAOA(self, newVal:typing.Any) -> None:
        """The minimum angle of attack possible."""
        return self._intf.set_property(IAgAvtrAircraftBasicFixedWingAero._metadata, IAgAvtrAircraftBasicFixedWingAero._set_ForwardFlightMinAOA_metadata, newVal)

    _get_ForwardFlightMaxAOA_metadata = { "name" : "ForwardFlightMaxAOA",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def ForwardFlightMaxAOA(self) -> typing.Any:
        """The maximum angle of attack possible."""
        return self._intf.get_property(IAgAvtrAircraftBasicFixedWingAero._metadata, IAgAvtrAircraftBasicFixedWingAero._get_ForwardFlightMaxAOA_metadata)

    _set_ForwardFlightMaxAOA_metadata = { "name" : "ForwardFlightMaxAOA",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @ForwardFlightMaxAOA.setter
    def ForwardFlightMaxAOA(self, newVal:typing.Any) -> None:
        """The maximum angle of attack possible."""
        return self._intf.set_property(IAgAvtrAircraftBasicFixedWingAero._metadata, IAgAvtrAircraftBasicFixedWingAero._set_ForwardFlightMaxAOA_metadata, newVal)

    _get_ForwardFlightCd0_metadata = { "name" : "ForwardFlightCd0",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def ForwardFlightCd0(self) -> float:
        """The coefficient of drag of the lifting surface at zero angle of attack."""
        return self._intf.get_property(IAgAvtrAircraftBasicFixedWingAero._metadata, IAgAvtrAircraftBasicFixedWingAero._get_ForwardFlightCd0_metadata)

    _set_ForwardFlightCd0_metadata = { "name" : "ForwardFlightCd0",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @ForwardFlightCd0.setter
    def ForwardFlightCd0(self, newVal:float) -> None:
        """The coefficient of drag of the lifting surface at zero angle of attack."""
        return self._intf.set_property(IAgAvtrAircraftBasicFixedWingAero._metadata, IAgAvtrAircraftBasicFixedWingAero._set_ForwardFlightCd0_metadata, newVal)

    _get_ForwardFlightK_metadata = { "name" : "ForwardFlightK",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def ForwardFlightK(self) -> float:
        """The coefficient of induced drag."""
        return self._intf.get_property(IAgAvtrAircraftBasicFixedWingAero._metadata, IAgAvtrAircraftBasicFixedWingAero._get_ForwardFlightK_metadata)

    _set_ForwardFlightK_metadata = { "name" : "ForwardFlightK",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @ForwardFlightK.setter
    def ForwardFlightK(self, newVal:float) -> None:
        """The coefficient of induced drag."""
        return self._intf.set_property(IAgAvtrAircraftBasicFixedWingAero._metadata, IAgAvtrAircraftBasicFixedWingAero._set_ForwardFlightK_metadata, newVal)

    _get_TakeoffLandingReferenceArea_metadata = { "name" : "TakeoffLandingReferenceArea",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def TakeoffLandingReferenceArea(self) -> float:
        """The area of the lifting surface of the aircraft."""
        return self._intf.get_property(IAgAvtrAircraftBasicFixedWingAero._metadata, IAgAvtrAircraftBasicFixedWingAero._get_TakeoffLandingReferenceArea_metadata)

    _set_TakeoffLandingReferenceArea_metadata = { "name" : "TakeoffLandingReferenceArea",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @TakeoffLandingReferenceArea.setter
    def TakeoffLandingReferenceArea(self, pVal:float) -> None:
        """The area of the lifting surface of the aircraft."""
        return self._intf.set_property(IAgAvtrAircraftBasicFixedWingAero._metadata, IAgAvtrAircraftBasicFixedWingAero._set_TakeoffLandingReferenceArea_metadata, pVal)

    _get_TakeoffLandingUseCompressibleFlow_metadata = { "name" : "TakeoffLandingUseCompressibleFlow",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def TakeoffLandingUseCompressibleFlow(self) -> bool:
        """Opt to define the aerodynamic parameters for takeoff and landing with respect to supersonic flight conditions."""
        return self._intf.get_property(IAgAvtrAircraftBasicFixedWingAero._metadata, IAgAvtrAircraftBasicFixedWingAero._get_TakeoffLandingUseCompressibleFlow_metadata)

    _set_TakeoffLandingUseCompressibleFlow_metadata = { "name" : "TakeoffLandingUseCompressibleFlow",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @TakeoffLandingUseCompressibleFlow.setter
    def TakeoffLandingUseCompressibleFlow(self, newVal:bool) -> None:
        """Opt to define the aerodynamic parameters for takeoff and landing with respect to supersonic flight conditions."""
        return self._intf.set_property(IAgAvtrAircraftBasicFixedWingAero._metadata, IAgAvtrAircraftBasicFixedWingAero._set_TakeoffLandingUseCompressibleFlow_metadata, newVal)

    _get_TakeoffLandingCl0_metadata = { "name" : "TakeoffLandingCl0",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def TakeoffLandingCl0(self) -> float:
        """The coefficient of lift at zero angle of attack."""
        return self._intf.get_property(IAgAvtrAircraftBasicFixedWingAero._metadata, IAgAvtrAircraftBasicFixedWingAero._get_TakeoffLandingCl0_metadata)

    _set_TakeoffLandingCl0_metadata = { "name" : "TakeoffLandingCl0",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @TakeoffLandingCl0.setter
    def TakeoffLandingCl0(self, newVal:float) -> None:
        """The coefficient of lift at zero angle of attack."""
        return self._intf.set_property(IAgAvtrAircraftBasicFixedWingAero._metadata, IAgAvtrAircraftBasicFixedWingAero._set_TakeoffLandingCl0_metadata, newVal)

    _get_TakeoffLandingClAlpha_metadata = { "name" : "TakeoffLandingClAlpha",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def TakeoffLandingClAlpha(self) -> float:
        """The slope of the coefficient of lift curve."""
        return self._intf.get_property(IAgAvtrAircraftBasicFixedWingAero._metadata, IAgAvtrAircraftBasicFixedWingAero._get_TakeoffLandingClAlpha_metadata)

    _set_TakeoffLandingClAlpha_metadata = { "name" : "TakeoffLandingClAlpha",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @TakeoffLandingClAlpha.setter
    def TakeoffLandingClAlpha(self, newVal:float) -> None:
        """The slope of the coefficient of lift curve."""
        return self._intf.set_property(IAgAvtrAircraftBasicFixedWingAero._metadata, IAgAvtrAircraftBasicFixedWingAero._set_TakeoffLandingClAlpha_metadata, newVal)

    _get_TakeoffLandingMinAOA_metadata = { "name" : "TakeoffLandingMinAOA",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def TakeoffLandingMinAOA(self) -> typing.Any:
        """The minimum angle of attack possible."""
        return self._intf.get_property(IAgAvtrAircraftBasicFixedWingAero._metadata, IAgAvtrAircraftBasicFixedWingAero._get_TakeoffLandingMinAOA_metadata)

    _set_TakeoffLandingMinAOA_metadata = { "name" : "TakeoffLandingMinAOA",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @TakeoffLandingMinAOA.setter
    def TakeoffLandingMinAOA(self, newVal:typing.Any) -> None:
        """The minimum angle of attack possible."""
        return self._intf.set_property(IAgAvtrAircraftBasicFixedWingAero._metadata, IAgAvtrAircraftBasicFixedWingAero._set_TakeoffLandingMinAOA_metadata, newVal)

    _get_TakeoffLandingMaxAOA_metadata = { "name" : "TakeoffLandingMaxAOA",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def TakeoffLandingMaxAOA(self) -> typing.Any:
        """The maximum angle of attack possible."""
        return self._intf.get_property(IAgAvtrAircraftBasicFixedWingAero._metadata, IAgAvtrAircraftBasicFixedWingAero._get_TakeoffLandingMaxAOA_metadata)

    _set_TakeoffLandingMaxAOA_metadata = { "name" : "TakeoffLandingMaxAOA",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @TakeoffLandingMaxAOA.setter
    def TakeoffLandingMaxAOA(self, newVal:typing.Any) -> None:
        """The maximum angle of attack possible."""
        return self._intf.set_property(IAgAvtrAircraftBasicFixedWingAero._metadata, IAgAvtrAircraftBasicFixedWingAero._set_TakeoffLandingMaxAOA_metadata, newVal)

    _get_TakeoffLandingCd0_metadata = { "name" : "TakeoffLandingCd0",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def TakeoffLandingCd0(self) -> float:
        """The coefficient of drag of the lifting surface at zero angle of attack."""
        return self._intf.get_property(IAgAvtrAircraftBasicFixedWingAero._metadata, IAgAvtrAircraftBasicFixedWingAero._get_TakeoffLandingCd0_metadata)

    _set_TakeoffLandingCd0_metadata = { "name" : "TakeoffLandingCd0",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @TakeoffLandingCd0.setter
    def TakeoffLandingCd0(self, newVal:float) -> None:
        """The coefficient of drag of the lifting surface at zero angle of attack."""
        return self._intf.set_property(IAgAvtrAircraftBasicFixedWingAero._metadata, IAgAvtrAircraftBasicFixedWingAero._set_TakeoffLandingCd0_metadata, newVal)

    _get_TakeoffLandingK_metadata = { "name" : "TakeoffLandingK",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def TakeoffLandingK(self) -> float:
        """The coefficient of induced drag."""
        return self._intf.get_property(IAgAvtrAircraftBasicFixedWingAero._metadata, IAgAvtrAircraftBasicFixedWingAero._get_TakeoffLandingK_metadata)

    _set_TakeoffLandingK_metadata = { "name" : "TakeoffLandingK",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @TakeoffLandingK.setter
    def TakeoffLandingK(self, newVal:float) -> None:
        """The coefficient of induced drag."""
        return self._intf.set_property(IAgAvtrAircraftBasicFixedWingAero._metadata, IAgAvtrAircraftBasicFixedWingAero._set_TakeoffLandingK_metadata, newVal)


agcls.AgClassCatalog.add_catalog_entry("{cdf3e057-6192-4817-a72b-8f3cba8b38e5}", IAgAvtrAircraftBasicFixedWingAero)
agcls.AgTypeNameMap["IAgAvtrAircraftBasicFixedWingAero"] = IAgAvtrAircraftBasicFixedWingAero

class IAgAvtrAircraftAero(object):
    """Interface used to access the Aerodynamics options for the Basic Acceleration Model of an aircraft."""
    _num_methods = 10
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{cade76fa-36f7-4711-affc-77d00899be77}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_AeroStrategy" : 1,
                             "set_AeroStrategy" : 2,
                             "get_ModeAsSimple" : 3,
                             "get_ModeAsBasicFixedWing" : 4,
                             "get_ModeAsExternal" : 5,
                             "get_ModeAsAdvancedMissile" : 6,
                             "get_LiftFactor" : 7,
                             "set_LiftFactor" : 8,
                             "get_DragFactor" : 9,
                             "set_DragFactor" : 10, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrAircraftAero._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrAircraftAero from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrAircraftAero.__dict__ and type(IAgAvtrAircraftAero.__dict__[attrname]) == property:
            return IAgAvtrAircraftAero.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrAircraftAero.")
    
    _get_AeroStrategy_metadata = { "name" : "AeroStrategy",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrAircraftAeroStrategy),) }
    @property
    def AeroStrategy(self) -> "AgEAvtrAircraftAeroStrategy":
        """The aerodynamic strategy type."""
        return self._intf.get_property(IAgAvtrAircraftAero._metadata, IAgAvtrAircraftAero._get_AeroStrategy_metadata)

    _set_AeroStrategy_metadata = { "name" : "AeroStrategy",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrAircraftAeroStrategy),) }
    @AeroStrategy.setter
    def AeroStrategy(self, newVal:"AgEAvtrAircraftAeroStrategy") -> None:
        """The aerodynamic strategy type."""
        return self._intf.set_property(IAgAvtrAircraftAero._metadata, IAgAvtrAircraftAero._set_AeroStrategy_metadata, newVal)

    _get_ModeAsSimple_metadata = { "name" : "ModeAsSimple",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def ModeAsSimple(self) -> "IAgAvtrAircraftSimpleAero":
        """Get the interface for a simple aerodynamics strategy."""
        return self._intf.get_property(IAgAvtrAircraftAero._metadata, IAgAvtrAircraftAero._get_ModeAsSimple_metadata)

    _get_ModeAsBasicFixedWing_metadata = { "name" : "ModeAsBasicFixedWing",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def ModeAsBasicFixedWing(self) -> "IAgAvtrAircraftBasicFixedWingAero":
        """Get the interface for a basic fixed wing aerodynamics strategy."""
        return self._intf.get_property(IAgAvtrAircraftAero._metadata, IAgAvtrAircraftAero._get_ModeAsBasicFixedWing_metadata)

    _get_ModeAsExternal_metadata = { "name" : "ModeAsExternal",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def ModeAsExternal(self) -> "IAgAvtrAircraftExternalAero":
        """Get the interface for an external file aerodynamics strategy."""
        return self._intf.get_property(IAgAvtrAircraftAero._metadata, IAgAvtrAircraftAero._get_ModeAsExternal_metadata)

    _get_ModeAsAdvancedMissile_metadata = { "name" : "ModeAsAdvancedMissile",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def ModeAsAdvancedMissile(self) -> "IAgAvtrMissileAdvancedAero":
        """Get the interface for an advanced missile aerodynamics strategy."""
        return self._intf.get_property(IAgAvtrAircraftAero._metadata, IAgAvtrAircraftAero._get_ModeAsAdvancedMissile_metadata)

    _get_LiftFactor_metadata = { "name" : "LiftFactor",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def LiftFactor(self) -> float:
        """A scalar value applied to the lift for parametric analysis."""
        return self._intf.get_property(IAgAvtrAircraftAero._metadata, IAgAvtrAircraftAero._get_LiftFactor_metadata)

    _set_LiftFactor_metadata = { "name" : "LiftFactor",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @LiftFactor.setter
    def LiftFactor(self, newVal:float) -> None:
        """A scalar value applied to the lift for parametric analysis."""
        return self._intf.set_property(IAgAvtrAircraftAero._metadata, IAgAvtrAircraftAero._set_LiftFactor_metadata, newVal)

    _get_DragFactor_metadata = { "name" : "DragFactor",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def DragFactor(self) -> float:
        """A scalar value applied to the drag for parametric analysis."""
        return self._intf.get_property(IAgAvtrAircraftAero._metadata, IAgAvtrAircraftAero._get_DragFactor_metadata)

    _set_DragFactor_metadata = { "name" : "DragFactor",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @DragFactor.setter
    def DragFactor(self, newVal:float) -> None:
        """A scalar value applied to the drag for parametric analysis."""
        return self._intf.set_property(IAgAvtrAircraftAero._metadata, IAgAvtrAircraftAero._set_DragFactor_metadata, newVal)


agcls.AgClassCatalog.add_catalog_entry("{cade76fa-36f7-4711-affc-77d00899be77}", IAgAvtrAircraftAero)
agcls.AgTypeNameMap["IAgAvtrAircraftAero"] = IAgAvtrAircraftAero

class IAgAvtrAircraftProp(object):
    """Interface used to access the propulsion options for the Basic Acceleration Model of an aircraft."""
    _num_methods = 12
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{f2c9e37e-da9b-4210-94d6-b90c90d1a696}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_PropStrategy" : 1,
                             "set_PropStrategy" : 2,
                             "get_ModeAsSimple" : 3,
                             "get_ModeAsBasicFixedWing" : 4,
                             "get_ModeAsExternal" : 5,
                             "get_LiftFactor" : 6,
                             "set_LiftFactor" : 7,
                             "get_DragFactor" : 8,
                             "set_DragFactor" : 9,
                             "get_ModeAsRamjet" : 10,
                             "get_ModeAsTurbojet" : 11,
                             "get_ModeAsRocket" : 12, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrAircraftProp._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrAircraftProp from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrAircraftProp.__dict__ and type(IAgAvtrAircraftProp.__dict__[attrname]) == property:
            return IAgAvtrAircraftProp.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrAircraftProp.")
    
    _get_PropStrategy_metadata = { "name" : "PropStrategy",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrAircraftPropStrategy),) }
    @property
    def PropStrategy(self) -> "AgEAvtrAircraftPropStrategy":
        """The propulsion strategy type."""
        return self._intf.get_property(IAgAvtrAircraftProp._metadata, IAgAvtrAircraftProp._get_PropStrategy_metadata)

    _set_PropStrategy_metadata = { "name" : "PropStrategy",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrAircraftPropStrategy),) }
    @PropStrategy.setter
    def PropStrategy(self, newVal:"AgEAvtrAircraftPropStrategy") -> None:
        """The propulsion strategy type."""
        return self._intf.set_property(IAgAvtrAircraftProp._metadata, IAgAvtrAircraftProp._set_PropStrategy_metadata, newVal)

    _get_ModeAsSimple_metadata = { "name" : "ModeAsSimple",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def ModeAsSimple(self) -> "IAgAvtrAircraftSimpleProp":
        """Get the interface for a simple propulsion strategy."""
        return self._intf.get_property(IAgAvtrAircraftProp._metadata, IAgAvtrAircraftProp._get_ModeAsSimple_metadata)

    _get_ModeAsBasicFixedWing_metadata = { "name" : "ModeAsBasicFixedWing",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def ModeAsBasicFixedWing(self) -> "IAgAvtrAircraftBasicFixedWingProp":
        """Get the interface for a basic fixed wing propulsion strategy."""
        return self._intf.get_property(IAgAvtrAircraftProp._metadata, IAgAvtrAircraftProp._get_ModeAsBasicFixedWing_metadata)

    _get_ModeAsExternal_metadata = { "name" : "ModeAsExternal",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def ModeAsExternal(self) -> "IAgAvtrAircraftExternalProp":
        """Get the interface for an external file propulsion strategy."""
        return self._intf.get_property(IAgAvtrAircraftProp._metadata, IAgAvtrAircraftProp._get_ModeAsExternal_metadata)

    _get_LiftFactor_metadata = { "name" : "LiftFactor",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def LiftFactor(self) -> float:
        """A scalar value applied to the lift for parametric analysis."""
        return self._intf.get_property(IAgAvtrAircraftProp._metadata, IAgAvtrAircraftProp._get_LiftFactor_metadata)

    _set_LiftFactor_metadata = { "name" : "LiftFactor",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @LiftFactor.setter
    def LiftFactor(self, newVal:float) -> None:
        """A scalar value applied to the lift for parametric analysis."""
        return self._intf.set_property(IAgAvtrAircraftProp._metadata, IAgAvtrAircraftProp._set_LiftFactor_metadata, newVal)

    _get_DragFactor_metadata = { "name" : "DragFactor",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def DragFactor(self) -> float:
        """A scalar value applied to the drag for parametric analysis."""
        return self._intf.get_property(IAgAvtrAircraftProp._metadata, IAgAvtrAircraftProp._get_DragFactor_metadata)

    _set_DragFactor_metadata = { "name" : "DragFactor",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @DragFactor.setter
    def DragFactor(self, newVal:float) -> None:
        """A scalar value applied to the drag for parametric analysis."""
        return self._intf.set_property(IAgAvtrAircraftProp._metadata, IAgAvtrAircraftProp._set_DragFactor_metadata, newVal)

    _get_ModeAsRamjet_metadata = { "name" : "ModeAsRamjet",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def ModeAsRamjet(self) -> "IAgAvtrMissileRamjetProp":
        """Get the interface for a Ramjet propulsion strategy."""
        return self._intf.get_property(IAgAvtrAircraftProp._metadata, IAgAvtrAircraftProp._get_ModeAsRamjet_metadata)

    _get_ModeAsTurbojet_metadata = { "name" : "ModeAsTurbojet",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def ModeAsTurbojet(self) -> "IAgAvtrMissileTurbojetProp":
        """Get the interface for a Turbojet propulsion strategy."""
        return self._intf.get_property(IAgAvtrAircraftProp._metadata, IAgAvtrAircraftProp._get_ModeAsTurbojet_metadata)

    _get_ModeAsRocket_metadata = { "name" : "ModeAsRocket",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def ModeAsRocket(self) -> "IAgAvtrMissileRocketProp":
        """Get the interface for a Rocket propulsion strategy."""
        return self._intf.get_property(IAgAvtrAircraftProp._metadata, IAgAvtrAircraftProp._get_ModeAsRocket_metadata)


agcls.AgClassCatalog.add_catalog_entry("{f2c9e37e-da9b-4210-94d6-b90c90d1a696}", IAgAvtrAircraftProp)
agcls.AgTypeNameMap["IAgAvtrAircraftProp"] = IAgAvtrAircraftProp

class IAgAvtrAircraftAccelerationMode(object):
    """Interface used to set the Acceleration Mode for the Advanced Acceleration Model of an aircraft."""
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{ed792861-7946-4e82-bf56-24fd86d3fdb2}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_AccelMode" : 1,
                             "set_AccelMode" : 2,
                             "get_AccelG" : 3,
                             "set_AccelG" : 4, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrAircraftAccelerationMode._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrAircraftAccelerationMode from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrAircraftAccelerationMode.__dict__ and type(IAgAvtrAircraftAccelerationMode.__dict__[attrname]) == property:
            return IAgAvtrAircraftAccelerationMode.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrAircraftAccelerationMode.")
    
    _get_AccelMode_metadata = { "name" : "AccelMode",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrAccelerationAdvAccelMode),) }
    @property
    def AccelMode(self) -> "AgEAvtrAccelerationAdvAccelMode":
        """Opt whether to override the acceleration or deceleration of the aircraft."""
        return self._intf.get_property(IAgAvtrAircraftAccelerationMode._metadata, IAgAvtrAircraftAccelerationMode._get_AccelMode_metadata)

    _set_AccelMode_metadata = { "name" : "AccelMode",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrAccelerationAdvAccelMode),) }
    @AccelMode.setter
    def AccelMode(self, newVal:"AgEAvtrAccelerationAdvAccelMode") -> None:
        """Opt whether to override the acceleration or deceleration of the aircraft."""
        return self._intf.set_property(IAgAvtrAircraftAccelerationMode._metadata, IAgAvtrAircraftAccelerationMode._set_AccelMode_metadata, newVal)

    _get_AccelG_metadata = { "name" : "AccelG",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def AccelG(self) -> float:
        """The rate of acceleration or deceleration of the aircraft if the accleeration mode is set to override."""
        return self._intf.get_property(IAgAvtrAircraftAccelerationMode._metadata, IAgAvtrAircraftAccelerationMode._get_AccelG_metadata)

    _set_AccelG_metadata = { "name" : "AccelG",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @AccelG.setter
    def AccelG(self, newVal:float) -> None:
        """The rate of acceleration or deceleration of the aircraft if the accleeration mode is set to override."""
        return self._intf.set_property(IAgAvtrAircraftAccelerationMode._metadata, IAgAvtrAircraftAccelerationMode._set_AccelG_metadata, newVal)


agcls.AgClassCatalog.add_catalog_entry("{ed792861-7946-4e82-bf56-24fd86d3fdb2}", IAgAvtrAircraftAccelerationMode)
agcls.AgTypeNameMap["IAgAvtrAircraftAccelerationMode"] = IAgAvtrAircraftAccelerationMode

class IAgAvtrAircraftAdvAccelerationModel(object):
    """Interface used to access the Advanced Acceleration Model options of an aircraft."""
    _num_methods = 5
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{bb08fcaa-8e26-49be-bde2-9bbe5408c1fa}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_LevelTurns" : 1,
                             "get_AttitudeTransitions" : 2,
                             "get_ClimbAndDescentTransitions" : 3,
                             "get_AccelerationMode" : 4,
                             "GetAsCatalogItem" : 5, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrAircraftAdvAccelerationModel._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrAircraftAdvAccelerationModel from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrAircraftAdvAccelerationModel.__dict__ and type(IAgAvtrAircraftAdvAccelerationModel.__dict__[attrname]) == property:
            return IAgAvtrAircraftAdvAccelerationModel.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrAircraftAdvAccelerationModel.")
    
    _get_LevelTurns_metadata = { "name" : "LevelTurns",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def LevelTurns(self) -> "IAgAvtrLevelTurns":
        """Get the level turns interface."""
        return self._intf.get_property(IAgAvtrAircraftAdvAccelerationModel._metadata, IAgAvtrAircraftAdvAccelerationModel._get_LevelTurns_metadata)

    _get_AttitudeTransitions_metadata = { "name" : "AttitudeTransitions",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def AttitudeTransitions(self) -> "IAgAvtrAttitudeTransitions":
        """Get the attitude transitions interface."""
        return self._intf.get_property(IAgAvtrAircraftAdvAccelerationModel._metadata, IAgAvtrAircraftAdvAccelerationModel._get_AttitudeTransitions_metadata)

    _get_ClimbAndDescentTransitions_metadata = { "name" : "ClimbAndDescentTransitions",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def ClimbAndDescentTransitions(self) -> "IAgAvtrClimbAndDescentTransitions":
        """Get the climb and descent transitions interface."""
        return self._intf.get_property(IAgAvtrAircraftAdvAccelerationModel._metadata, IAgAvtrAircraftAdvAccelerationModel._get_ClimbAndDescentTransitions_metadata)

    _get_AccelerationMode_metadata = { "name" : "AccelerationMode",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def AccelerationMode(self) -> "IAgAvtrAircraftAccelerationMode":
        """Get the acceleration mode interface."""
        return self._intf.get_property(IAgAvtrAircraftAdvAccelerationModel._metadata, IAgAvtrAircraftAdvAccelerationModel._get_AccelerationMode_metadata)

    _GetAsCatalogItem_metadata = { "name" : "GetAsCatalogItem",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    def GetAsCatalogItem(self) -> "IAgAvtrCatalogItem":
        """Get the catalog item interface for this object."""
        return self._intf.invoke(IAgAvtrAircraftAdvAccelerationModel._metadata, IAgAvtrAircraftAdvAccelerationModel._GetAsCatalogItem_metadata, out_arg())


agcls.AgClassCatalog.add_catalog_entry("{bb08fcaa-8e26-49be-bde2-9bbe5408c1fa}", IAgAvtrAircraftAdvAccelerationModel)
agcls.AgTypeNameMap["IAgAvtrAircraftAdvAccelerationModel"] = IAgAvtrAircraftAdvAccelerationModel

class IAgAvtrAeroPropManeuverModeHelper(object):
    """Interface used to access the The calculation mode for the Aero/Prop maneuver mode helper. Helper found in the Basic Acceleration Model of an aircraft."""
    _num_methods = 19
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{52d6c08d-32e5-49f1-bda0-96469ed01a6f}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_Mode" : 1,
                             "set_Mode" : 2,
                             "get_FlightMode" : 3,
                             "set_FlightMode" : 4,
                             "get_UseAfterburner" : 5,
                             "set_UseAfterburner" : 6,
                             "get_RefWeight" : 7,
                             "set_RefWeight" : 8,
                             "get_RefAltitude" : 9,
                             "set_RefAltitude" : 10,
                             "get_RefAirspeed" : 11,
                             "get_RefAirspeedType" : 12,
                             "SetRefAirspeed" : 13,
                             "get_RefLoadFactor" : 14,
                             "set_RefLoadFactor" : 15,
                             "get_EstimatedPs" : 16,
                             "get_ControlAuthority" : 17,
                             "set_ControlAuthority" : 18,
                             "get_StatusMsg" : 19, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrAeroPropManeuverModeHelper._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrAeroPropManeuverModeHelper from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrAeroPropManeuverModeHelper.__dict__ and type(IAgAvtrAeroPropManeuverModeHelper.__dict__[attrname]) == property:
            return IAgAvtrAeroPropManeuverModeHelper.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrAeroPropManeuverModeHelper.")
    
    _get_Mode_metadata = { "name" : "Mode",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrAccelManeuverAeroPropMode),) }
    @property
    def Mode(self) -> "AgEAvtrAccelManeuverAeroPropMode":
        """The calculation mode for the Aero/Prop maneuver mode helper."""
        return self._intf.get_property(IAgAvtrAeroPropManeuverModeHelper._metadata, IAgAvtrAeroPropManeuverModeHelper._get_Mode_metadata)

    _set_Mode_metadata = { "name" : "Mode",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrAccelManeuverAeroPropMode),) }
    @Mode.setter
    def Mode(self, newVal:"AgEAvtrAccelManeuverAeroPropMode") -> None:
        """The calculation mode for the Aero/Prop maneuver mode helper."""
        return self._intf.set_property(IAgAvtrAeroPropManeuverModeHelper._metadata, IAgAvtrAeroPropManeuverModeHelper._set_Mode_metadata, newVal)

    _get_FlightMode_metadata = { "name" : "FlightMode",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrAeroPropFlightMode),) }
    @property
    def FlightMode(self) -> "AgEAvtrAeroPropFlightMode":
        """The performance flight mode."""
        return self._intf.get_property(IAgAvtrAeroPropManeuverModeHelper._metadata, IAgAvtrAeroPropManeuverModeHelper._get_FlightMode_metadata)

    _set_FlightMode_metadata = { "name" : "FlightMode",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrAeroPropFlightMode),) }
    @FlightMode.setter
    def FlightMode(self, newVal:"AgEAvtrAeroPropFlightMode") -> None:
        """The performance flight mode."""
        return self._intf.set_property(IAgAvtrAeroPropManeuverModeHelper._metadata, IAgAvtrAeroPropManeuverModeHelper._set_FlightMode_metadata, newVal)

    _get_UseAfterburner_metadata = { "name" : "UseAfterburner",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def UseAfterburner(self) -> bool:
        """Opt whether to use the afterburner if it is possible."""
        return self._intf.get_property(IAgAvtrAeroPropManeuverModeHelper._metadata, IAgAvtrAeroPropManeuverModeHelper._get_UseAfterburner_metadata)

    _set_UseAfterburner_metadata = { "name" : "UseAfterburner",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @UseAfterburner.setter
    def UseAfterburner(self, newVal:bool) -> None:
        """Opt whether to use the afterburner if it is possible."""
        return self._intf.set_property(IAgAvtrAeroPropManeuverModeHelper._metadata, IAgAvtrAeroPropManeuverModeHelper._set_UseAfterburner_metadata, newVal)

    _get_RefWeight_metadata = { "name" : "RefWeight",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def RefWeight(self) -> float:
        """The reference weight."""
        return self._intf.get_property(IAgAvtrAeroPropManeuverModeHelper._metadata, IAgAvtrAeroPropManeuverModeHelper._get_RefWeight_metadata)

    _set_RefWeight_metadata = { "name" : "RefWeight",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @RefWeight.setter
    def RefWeight(self, newVal:float) -> None:
        """The reference weight."""
        return self._intf.set_property(IAgAvtrAeroPropManeuverModeHelper._metadata, IAgAvtrAeroPropManeuverModeHelper._set_RefWeight_metadata, newVal)

    _get_RefAltitude_metadata = { "name" : "RefAltitude",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def RefAltitude(self) -> float:
        """The reference altitude."""
        return self._intf.get_property(IAgAvtrAeroPropManeuverModeHelper._metadata, IAgAvtrAeroPropManeuverModeHelper._get_RefAltitude_metadata)

    _set_RefAltitude_metadata = { "name" : "RefAltitude",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @RefAltitude.setter
    def RefAltitude(self, newVal:float) -> None:
        """The reference altitude."""
        return self._intf.set_property(IAgAvtrAeroPropManeuverModeHelper._metadata, IAgAvtrAeroPropManeuverModeHelper._set_RefAltitude_metadata, newVal)

    _get_RefAirspeed_metadata = { "name" : "RefAirspeed",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def RefAirspeed(self) -> float:
        """The reference airspeed."""
        return self._intf.get_property(IAgAvtrAeroPropManeuverModeHelper._metadata, IAgAvtrAeroPropManeuverModeHelper._get_RefAirspeed_metadata)

    _get_RefAirspeedType_metadata = { "name" : "RefAirspeedType",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrAirspeedType),) }
    @property
    def RefAirspeedType(self) -> "AgEAvtrAirspeedType":
        """The reference airspeed type."""
        return self._intf.get_property(IAgAvtrAeroPropManeuverModeHelper._metadata, IAgAvtrAeroPropManeuverModeHelper._get_RefAirspeedType_metadata)

    _SetRefAirspeed_metadata = { "name" : "SetRefAirspeed",
            "arg_types" : (agcom.LONG, agcom.DOUBLE,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrAirspeedType), agmarshall.DOUBLE_arg,) }
    def SetRefAirspeed(self, airspeedType:"AgEAvtrAirspeedType", airspeed:float) -> None:
        """Set the reference airspeed and reference airspeed type."""
        return self._intf.invoke(IAgAvtrAeroPropManeuverModeHelper._metadata, IAgAvtrAeroPropManeuverModeHelper._SetRefAirspeed_metadata, airspeedType, airspeed)

    _get_RefLoadFactor_metadata = { "name" : "RefLoadFactor",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def RefLoadFactor(self) -> float:
        """The reference load factor."""
        return self._intf.get_property(IAgAvtrAeroPropManeuverModeHelper._metadata, IAgAvtrAeroPropManeuverModeHelper._get_RefLoadFactor_metadata)

    _set_RefLoadFactor_metadata = { "name" : "RefLoadFactor",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @RefLoadFactor.setter
    def RefLoadFactor(self, newVal:float) -> None:
        """The reference load factor."""
        return self._intf.set_property(IAgAvtrAeroPropManeuverModeHelper._metadata, IAgAvtrAeroPropManeuverModeHelper._set_RefLoadFactor_metadata, newVal)

    _get_EstimatedPs_metadata = { "name" : "EstimatedPs",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def EstimatedPs(self) -> float:
        """The estimated specific excess power."""
        return self._intf.get_property(IAgAvtrAeroPropManeuverModeHelper._metadata, IAgAvtrAeroPropManeuverModeHelper._get_EstimatedPs_metadata)

    _get_ControlAuthority_metadata = { "name" : "ControlAuthority",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def ControlAuthority(self) -> float:
        """The control authority of how much to factor a turn over push/pull."""
        return self._intf.get_property(IAgAvtrAeroPropManeuverModeHelper._metadata, IAgAvtrAeroPropManeuverModeHelper._get_ControlAuthority_metadata)

    _set_ControlAuthority_metadata = { "name" : "ControlAuthority",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @ControlAuthority.setter
    def ControlAuthority(self, newVal:float) -> None:
        """The control authority of how much to factor a turn over push/pull."""
        return self._intf.set_property(IAgAvtrAeroPropManeuverModeHelper._metadata, IAgAvtrAeroPropManeuverModeHelper._set_ControlAuthority_metadata, newVal)

    _get_StatusMsg_metadata = { "name" : "StatusMsg",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def StatusMsg(self) -> str:
        """Get the status message in the message window."""
        return self._intf.get_property(IAgAvtrAeroPropManeuverModeHelper._metadata, IAgAvtrAeroPropManeuverModeHelper._get_StatusMsg_metadata)


agcls.AgClassCatalog.add_catalog_entry("{52d6c08d-32e5-49f1-bda0-96469ed01a6f}", IAgAvtrAeroPropManeuverModeHelper)
agcls.AgTypeNameMap["IAgAvtrAeroPropManeuverModeHelper"] = IAgAvtrAeroPropManeuverModeHelper

class IAgAvtrCatalogRunway(object):
    """Interface used to access a runway in the Aviator catalog."""
    _num_methods = 0
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{120d6778-93cd-4d78-a63f-c3fb3ca55eb6}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : {  }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrCatalogRunway._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrCatalogRunway from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrCatalogRunway.__dict__ and type(IAgAvtrCatalogRunway.__dict__[attrname]) == property:
            return IAgAvtrCatalogRunway.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrCatalogRunway.")
    

agcls.AgClassCatalog.add_catalog_entry("{120d6778-93cd-4d78-a63f-c3fb3ca55eb6}", IAgAvtrCatalogRunway)
agcls.AgTypeNameMap["IAgAvtrCatalogRunway"] = IAgAvtrCatalogRunway

class IAgAvtrCatalogAirport(object):
    """Interface used to access a airport in the Aviator catalog."""
    _num_methods = 0
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{aed7cf8c-257e-4c91-b829-0d3489bd7bef}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : {  }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrCatalogAirport._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrCatalogAirport from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrCatalogAirport.__dict__ and type(IAgAvtrCatalogAirport.__dict__[attrname]) == property:
            return IAgAvtrCatalogAirport.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrCatalogAirport.")
    

agcls.AgClassCatalog.add_catalog_entry("{aed7cf8c-257e-4c91-b829-0d3489bd7bef}", IAgAvtrCatalogAirport)
agcls.AgTypeNameMap["IAgAvtrCatalogAirport"] = IAgAvtrCatalogAirport

class IAgAvtrCatalogNavaid(object):
    """Interface used to access a navaid in the Aviator catalog."""
    _num_methods = 0
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{a019db80-a2e3-49bd-9bb0-09d1af40ca00}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : {  }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrCatalogNavaid._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrCatalogNavaid from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrCatalogNavaid.__dict__ and type(IAgAvtrCatalogNavaid.__dict__[attrname]) == property:
            return IAgAvtrCatalogNavaid.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrCatalogNavaid.")
    

agcls.AgClassCatalog.add_catalog_entry("{a019db80-a2e3-49bd-9bb0-09d1af40ca00}", IAgAvtrCatalogNavaid)
agcls.AgTypeNameMap["IAgAvtrCatalogNavaid"] = IAgAvtrCatalogNavaid

class IAgAvtrCatalogVTOLPoint(object):
    """Interface used to access a VTOL Point in the Aviator catalog."""
    _num_methods = 0
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{f4818560-bc87-4fa4-84bc-33d25a14eac5}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : {  }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrCatalogVTOLPoint._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrCatalogVTOLPoint from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrCatalogVTOLPoint.__dict__ and type(IAgAvtrCatalogVTOLPoint.__dict__[attrname]) == property:
            return IAgAvtrCatalogVTOLPoint.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrCatalogVTOLPoint.")
    

agcls.AgClassCatalog.add_catalog_entry("{f4818560-bc87-4fa4-84bc-33d25a14eac5}", IAgAvtrCatalogVTOLPoint)
agcls.AgTypeNameMap["IAgAvtrCatalogVTOLPoint"] = IAgAvtrCatalogVTOLPoint

class IAgAvtrCatalogWaypoint(object):
    """Interface used to access a waypoint in the Aviator catalog."""
    _num_methods = 0
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{a3a67fca-89f4-4cc8-9ef0-194707369ef9}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : {  }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrCatalogWaypoint._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrCatalogWaypoint from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrCatalogWaypoint.__dict__ and type(IAgAvtrCatalogWaypoint.__dict__[attrname]) == property:
            return IAgAvtrCatalogWaypoint.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrCatalogWaypoint.")
    

agcls.AgClassCatalog.add_catalog_entry("{a3a67fca-89f4-4cc8-9ef0-194707369ef9}", IAgAvtrCatalogWaypoint)
agcls.AgTypeNameMap["IAgAvtrCatalogWaypoint"] = IAgAvtrCatalogWaypoint

class IAgAvtrARINC424Airport(object):
    """This interface is deprecated. Use IAgAvtrARINC424Item instead."""
    _num_methods = 1
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{38a8e2de-6ca0-42b4-a5c9-9a2ae40ac0d7}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "GetAsCatalogItem" : 1, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrARINC424Airport._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrARINC424Airport from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrARINC424Airport.__dict__ and type(IAgAvtrARINC424Airport.__dict__[attrname]) == property:
            return IAgAvtrARINC424Airport.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrARINC424Airport.")
    
    _GetAsCatalogItem_metadata = { "name" : "GetAsCatalogItem",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    def GetAsCatalogItem(self) -> "IAgAvtrCatalogItem":
        """Get the catalog item interface for this object."""
        return self._intf.invoke(IAgAvtrARINC424Airport._metadata, IAgAvtrARINC424Airport._GetAsCatalogItem_metadata, out_arg())


agcls.AgClassCatalog.add_catalog_entry("{38a8e2de-6ca0-42b4-a5c9-9a2ae40ac0d7}", IAgAvtrARINC424Airport)
agcls.AgTypeNameMap["IAgAvtrARINC424Airport"] = IAgAvtrARINC424Airport

class IAgAvtrDAFIFItem(object):
    """Interface used to access the options for an DAFIF Item found in the Aviator catalog."""
    _num_methods = 5
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{5725c989-94a3-47c9-8115-6d5b88b992aa}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "GetValue" : 1,
                             "GetAllFields" : 2,
                             "GetAllFieldsAndValues" : 3,
                             "CopySite" : 4,
                             "GetAsCatalogItem" : 5, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrDAFIFItem._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrDAFIFItem from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrDAFIFItem.__dict__ and type(IAgAvtrDAFIFItem.__dict__[attrname]) == property:
            return IAgAvtrDAFIFItem.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrDAFIFItem.")
    
    _GetValue_metadata = { "name" : "GetValue",
            "arg_types" : (agcom.BSTR, POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.VARIANT_arg,) }
    def GetValue(self, fieldName:str) -> typing.Any:
        """Get the value of the field with the given name."""
        return self._intf.invoke(IAgAvtrDAFIFItem._metadata, IAgAvtrDAFIFItem._GetValue_metadata, fieldName, out_arg())

    _GetAllFields_metadata = { "name" : "GetAllFields",
            "arg_types" : (POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg,) }
    def GetAllFields(self) -> list:
        """Get all the field names."""
        return self._intf.invoke(IAgAvtrDAFIFItem._metadata, IAgAvtrDAFIFItem._GetAllFields_metadata, out_arg())

    _GetAllFieldsAndValues_metadata = { "name" : "GetAllFieldsAndValues",
            "arg_types" : (POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg,) }
    def GetAllFieldsAndValues(self) -> list:
        """Get all the field names along with the corresponding value."""
        return self._intf.invoke(IAgAvtrDAFIFItem._metadata, IAgAvtrDAFIFItem._GetAllFieldsAndValues_metadata, out_arg())

    _CopySite_metadata = { "name" : "CopySite",
            "arg_types" : (),
            "marshallers" : () }
    def CopySite(self) -> None:
        """Copy the site to the clipboard."""
        return self._intf.invoke(IAgAvtrDAFIFItem._metadata, IAgAvtrDAFIFItem._CopySite_metadata, )

    _GetAsCatalogItem_metadata = { "name" : "GetAsCatalogItem",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    def GetAsCatalogItem(self) -> "IAgAvtrCatalogItem":
        """Get the catalog item interface for this object."""
        return self._intf.invoke(IAgAvtrDAFIFItem._metadata, IAgAvtrDAFIFItem._GetAsCatalogItem_metadata, out_arg())


agcls.AgClassCatalog.add_catalog_entry("{5725c989-94a3-47c9-8115-6d5b88b992aa}", IAgAvtrDAFIFItem)
agcls.AgTypeNameMap["IAgAvtrDAFIFItem"] = IAgAvtrDAFIFItem

class IAgAvtrARINC424Runway(object):
    """This interface is deprecated. Use IAgAvtrARINC424Item instead."""
    _num_methods = 1
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{fafcfc3b-d259-498d-9000-8ec380048afa}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "GetAsCatalogItem" : 1, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrARINC424Runway._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrARINC424Runway from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrARINC424Runway.__dict__ and type(IAgAvtrARINC424Runway.__dict__[attrname]) == property:
            return IAgAvtrARINC424Runway.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrARINC424Runway.")
    
    _GetAsCatalogItem_metadata = { "name" : "GetAsCatalogItem",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    def GetAsCatalogItem(self) -> "IAgAvtrCatalogItem":
        """Get the catalog item interface for this object."""
        return self._intf.invoke(IAgAvtrARINC424Runway._metadata, IAgAvtrARINC424Runway._GetAsCatalogItem_metadata, out_arg())


agcls.AgClassCatalog.add_catalog_entry("{fafcfc3b-d259-498d-9000-8ec380048afa}", IAgAvtrARINC424Runway)
agcls.AgTypeNameMap["IAgAvtrARINC424Runway"] = IAgAvtrARINC424Runway

class IAgAvtrAirportCategory(object):
    """Interface used to access the airports in the Aviator catalog."""
    _num_methods = 1
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{b1430df6-bb64-4173-af26-0b8c42724d29}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_ARINC424Airports" : 1, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrAirportCategory._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrAirportCategory from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrAirportCategory.__dict__ and type(IAgAvtrAirportCategory.__dict__[attrname]) == property:
            return IAgAvtrAirportCategory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrAirportCategory.")
    
    _get_ARINC424Airports_metadata = { "name" : "ARINC424Airports",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def ARINC424Airports(self) -> "IAgAvtrARINC424Source":
        """Get the ARINC-424 airports."""
        return self._intf.get_property(IAgAvtrAirportCategory._metadata, IAgAvtrAirportCategory._get_ARINC424Airports_metadata)


agcls.AgClassCatalog.add_catalog_entry("{b1430df6-bb64-4173-af26-0b8c42724d29}", IAgAvtrAirportCategory)
agcls.AgTypeNameMap["IAgAvtrAirportCategory"] = IAgAvtrAirportCategory

class IAgAvtrNavaidCategory(object):
    """Interface used to access the navaids in the Aviator catalog."""
    _num_methods = 1
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{5b17c73b-f045-4228-bd66-9b0ed6eb40a1}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_ARINC424Navaids" : 1, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrNavaidCategory._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrNavaidCategory from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrNavaidCategory.__dict__ and type(IAgAvtrNavaidCategory.__dict__[attrname]) == property:
            return IAgAvtrNavaidCategory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrNavaidCategory.")
    
    _get_ARINC424Navaids_metadata = { "name" : "ARINC424Navaids",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def ARINC424Navaids(self) -> "IAgAvtrARINC424Source":
        """Get the ARINC-424 navaids."""
        return self._intf.get_property(IAgAvtrNavaidCategory._metadata, IAgAvtrNavaidCategory._get_ARINC424Navaids_metadata)


agcls.AgClassCatalog.add_catalog_entry("{5b17c73b-f045-4228-bd66-9b0ed6eb40a1}", IAgAvtrNavaidCategory)
agcls.AgTypeNameMap["IAgAvtrNavaidCategory"] = IAgAvtrNavaidCategory

class IAgAvtrVTOLPointCategory(object):
    """Interface used to access the VTOL Points in the Aviator catalog."""
    _num_methods = 3
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{1753d173-fd39-4755-932f-88a091f1ac63}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_UserVTOLPoints" : 1,
                             "get_ARINC424Helipads" : 2,
                             "get_DAFIFHelipads" : 3, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrVTOLPointCategory._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrVTOLPointCategory from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrVTOLPointCategory.__dict__ and type(IAgAvtrVTOLPointCategory.__dict__[attrname]) == property:
            return IAgAvtrVTOLPointCategory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrVTOLPointCategory.")
    
    _get_UserVTOLPoints_metadata = { "name" : "UserVTOLPoints",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def UserVTOLPoints(self) -> "IAgAvtrUserVTOLPointSource":
        """Get the User VTOL Points."""
        return self._intf.get_property(IAgAvtrVTOLPointCategory._metadata, IAgAvtrVTOLPointCategory._get_UserVTOLPoints_metadata)

    _get_ARINC424Helipads_metadata = { "name" : "ARINC424Helipads",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def ARINC424Helipads(self) -> "IAgAvtrARINC424Source":
        """Get the ARINC-424 helipads."""
        return self._intf.get_property(IAgAvtrVTOLPointCategory._metadata, IAgAvtrVTOLPointCategory._get_ARINC424Helipads_metadata)

    _get_DAFIFHelipads_metadata = { "name" : "DAFIFHelipads",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def DAFIFHelipads(self) -> "IAgAvtrDAFIFSource":
        """Get the DAFIF helipads."""
        return self._intf.get_property(IAgAvtrVTOLPointCategory._metadata, IAgAvtrVTOLPointCategory._get_DAFIFHelipads_metadata)


agcls.AgClassCatalog.add_catalog_entry("{1753d173-fd39-4755-932f-88a091f1ac63}", IAgAvtrVTOLPointCategory)
agcls.AgTypeNameMap["IAgAvtrVTOLPointCategory"] = IAgAvtrVTOLPointCategory

class IAgAvtrWaypointCategory(object):
    """Interface used to access the waypoints in the Aviator catalog."""
    _num_methods = 11
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{3bdd04fa-d1ac-42ea-9978-f3a9c6718899}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_UserWaypoints" : 1,
                             "get_UserRunways" : 2,
                             "get_UserVTOLPoints" : 3,
                             "get_ARINC424Airports" : 4,
                             "get_ARINC424Helipads" : 5,
                             "get_ARINC424Navaids" : 6,
                             "get_ARINC424Runways" : 7,
                             "get_ARINC424Waypoints" : 8,
                             "get_DAFIFHelipads" : 9,
                             "get_DAFIFRunways" : 10,
                             "get_DAFIFWaypoints" : 11, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrWaypointCategory._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrWaypointCategory from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrWaypointCategory.__dict__ and type(IAgAvtrWaypointCategory.__dict__[attrname]) == property:
            return IAgAvtrWaypointCategory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrWaypointCategory.")
    
    _get_UserWaypoints_metadata = { "name" : "UserWaypoints",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def UserWaypoints(self) -> "IAgAvtrUserWaypointSource":
        """Get the User Waypoints."""
        return self._intf.get_property(IAgAvtrWaypointCategory._metadata, IAgAvtrWaypointCategory._get_UserWaypoints_metadata)

    _get_UserRunways_metadata = { "name" : "UserRunways",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def UserRunways(self) -> "IAgAvtrUserRunwaySource":
        """Get the User Runways."""
        return self._intf.get_property(IAgAvtrWaypointCategory._metadata, IAgAvtrWaypointCategory._get_UserRunways_metadata)

    _get_UserVTOLPoints_metadata = { "name" : "UserVTOLPoints",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def UserVTOLPoints(self) -> "IAgAvtrUserVTOLPointSource":
        """Get the User VTOL Points."""
        return self._intf.get_property(IAgAvtrWaypointCategory._metadata, IAgAvtrWaypointCategory._get_UserVTOLPoints_metadata)

    _get_ARINC424Airports_metadata = { "name" : "ARINC424Airports",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def ARINC424Airports(self) -> "IAgAvtrARINC424Source":
        """Get the ARINC-424 airports."""
        return self._intf.get_property(IAgAvtrWaypointCategory._metadata, IAgAvtrWaypointCategory._get_ARINC424Airports_metadata)

    _get_ARINC424Helipads_metadata = { "name" : "ARINC424Helipads",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def ARINC424Helipads(self) -> "IAgAvtrARINC424Source":
        """Get the ARINC-424 helipads."""
        return self._intf.get_property(IAgAvtrWaypointCategory._metadata, IAgAvtrWaypointCategory._get_ARINC424Helipads_metadata)

    _get_ARINC424Navaids_metadata = { "name" : "ARINC424Navaids",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def ARINC424Navaids(self) -> "IAgAvtrARINC424Source":
        """Get the ARINC-424 navaids."""
        return self._intf.get_property(IAgAvtrWaypointCategory._metadata, IAgAvtrWaypointCategory._get_ARINC424Navaids_metadata)

    _get_ARINC424Runways_metadata = { "name" : "ARINC424Runways",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def ARINC424Runways(self) -> "IAgAvtrARINC424Source":
        """Get the ARINC-424 runways."""
        return self._intf.get_property(IAgAvtrWaypointCategory._metadata, IAgAvtrWaypointCategory._get_ARINC424Runways_metadata)

    _get_ARINC424Waypoints_metadata = { "name" : "ARINC424Waypoints",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def ARINC424Waypoints(self) -> "IAgAvtrARINC424Source":
        """Get the ARINC-424 waypoints."""
        return self._intf.get_property(IAgAvtrWaypointCategory._metadata, IAgAvtrWaypointCategory._get_ARINC424Waypoints_metadata)

    _get_DAFIFHelipads_metadata = { "name" : "DAFIFHelipads",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def DAFIFHelipads(self) -> "IAgAvtrDAFIFSource":
        """Get the DAFIF helipads."""
        return self._intf.get_property(IAgAvtrWaypointCategory._metadata, IAgAvtrWaypointCategory._get_DAFIFHelipads_metadata)

    _get_DAFIFRunways_metadata = { "name" : "DAFIFRunways",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def DAFIFRunways(self) -> "IAgAvtrDAFIFSource":
        """Get the DAFIF runways."""
        return self._intf.get_property(IAgAvtrWaypointCategory._metadata, IAgAvtrWaypointCategory._get_DAFIFRunways_metadata)

    _get_DAFIFWaypoints_metadata = { "name" : "DAFIFWaypoints",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def DAFIFWaypoints(self) -> "IAgAvtrDAFIFSource":
        """Get the DAFIF waypoints."""
        return self._intf.get_property(IAgAvtrWaypointCategory._metadata, IAgAvtrWaypointCategory._get_DAFIFWaypoints_metadata)


agcls.AgClassCatalog.add_catalog_entry("{3bdd04fa-d1ac-42ea-9978-f3a9c6718899}", IAgAvtrWaypointCategory)
agcls.AgTypeNameMap["IAgAvtrWaypointCategory"] = IAgAvtrWaypointCategory

class IAgAvtrAircraftClimb(object):
    """Interface used to access the climb options for an aircraft in the Aviator catalog."""
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{66bca11a-e1e6-490a-8127-3aeb9e2f1aab}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "GetBuiltInModel" : 1,
                             "GetBasicClimbByName" : 2,
                             "GetAdvClimbByName" : 3,
                             "GetAsCatalogItem" : 4, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrAircraftClimb._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrAircraftClimb from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrAircraftClimb.__dict__ and type(IAgAvtrAircraftClimb.__dict__[attrname]) == property:
            return IAgAvtrAircraftClimb.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrAircraftClimb.")
    
    _GetBuiltInModel_metadata = { "name" : "GetBuiltInModel",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    def GetBuiltInModel(self) -> "IAgAvtrAircraftBasicClimbModel":
        """Get the built-in model."""
        return self._intf.invoke(IAgAvtrAircraftClimb._metadata, IAgAvtrAircraftClimb._GetBuiltInModel_metadata, out_arg())

    _GetBasicClimbByName_metadata = { "name" : "GetBasicClimbByName",
            "arg_types" : (agcom.BSTR, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.AgInterface_out_arg,) }
    def GetBasicClimbByName(self, name:str) -> "IAgAvtrAircraftBasicClimbModel":
        """Gets the basic climb model with the given name."""
        return self._intf.invoke(IAgAvtrAircraftClimb._metadata, IAgAvtrAircraftClimb._GetBasicClimbByName_metadata, name, out_arg())

    _GetAdvClimbByName_metadata = { "name" : "GetAdvClimbByName",
            "arg_types" : (agcom.BSTR, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.AgInterface_out_arg,) }
    def GetAdvClimbByName(self, name:str) -> "IAgAvtrAircraftAdvClimbModel":
        """Gets the advanced climb model with the given name."""
        return self._intf.invoke(IAgAvtrAircraftClimb._metadata, IAgAvtrAircraftClimb._GetAdvClimbByName_metadata, name, out_arg())

    _GetAsCatalogItem_metadata = { "name" : "GetAsCatalogItem",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    def GetAsCatalogItem(self) -> "IAgAvtrCatalogItem":
        """Get the catalog item interface for this object."""
        return self._intf.invoke(IAgAvtrAircraftClimb._metadata, IAgAvtrAircraftClimb._GetAsCatalogItem_metadata, out_arg())


agcls.AgClassCatalog.add_catalog_entry("{66bca11a-e1e6-490a-8127-3aeb9e2f1aab}", IAgAvtrAircraftClimb)
agcls.AgTypeNameMap["IAgAvtrAircraftClimb"] = IAgAvtrAircraftClimb

class IAgAvtrAircraftCruise(object):
    """Interface used to access the cruise options for an aircraft in the Aviator catalog."""
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{b67511c7-87c1-472c-89a5-59da8c09f07c}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "GetBuiltInModel" : 1,
                             "GetBasicCruiseByName" : 2,
                             "GetAdvCruiseByName" : 3,
                             "GetAsCatalogItem" : 4, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrAircraftCruise._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrAircraftCruise from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrAircraftCruise.__dict__ and type(IAgAvtrAircraftCruise.__dict__[attrname]) == property:
            return IAgAvtrAircraftCruise.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrAircraftCruise.")
    
    _GetBuiltInModel_metadata = { "name" : "GetBuiltInModel",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    def GetBuiltInModel(self) -> "IAgAvtrAircraftBasicCruiseModel":
        """Get the built-in model."""
        return self._intf.invoke(IAgAvtrAircraftCruise._metadata, IAgAvtrAircraftCruise._GetBuiltInModel_metadata, out_arg())

    _GetBasicCruiseByName_metadata = { "name" : "GetBasicCruiseByName",
            "arg_types" : (agcom.BSTR, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.AgInterface_out_arg,) }
    def GetBasicCruiseByName(self, name:str) -> "IAgAvtrAircraftBasicCruiseModel":
        """Gets the basic cruise model with the given name."""
        return self._intf.invoke(IAgAvtrAircraftCruise._metadata, IAgAvtrAircraftCruise._GetBasicCruiseByName_metadata, name, out_arg())

    _GetAdvCruiseByName_metadata = { "name" : "GetAdvCruiseByName",
            "arg_types" : (agcom.BSTR, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.AgInterface_out_arg,) }
    def GetAdvCruiseByName(self, name:str) -> "IAgAvtrAircraftAdvCruiseModel":
        """Gets the advanced cruise model with the given name."""
        return self._intf.invoke(IAgAvtrAircraftCruise._metadata, IAgAvtrAircraftCruise._GetAdvCruiseByName_metadata, name, out_arg())

    _GetAsCatalogItem_metadata = { "name" : "GetAsCatalogItem",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    def GetAsCatalogItem(self) -> "IAgAvtrCatalogItem":
        """Get the catalog item interface for this object."""
        return self._intf.invoke(IAgAvtrAircraftCruise._metadata, IAgAvtrAircraftCruise._GetAsCatalogItem_metadata, out_arg())


agcls.AgClassCatalog.add_catalog_entry("{b67511c7-87c1-472c-89a5-59da8c09f07c}", IAgAvtrAircraftCruise)
agcls.AgTypeNameMap["IAgAvtrAircraftCruise"] = IAgAvtrAircraftCruise

class IAgAvtrAircraftDescent(object):
    """Interface used to access the descent options for an aircraft in the Aviator catalog."""
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{568db25b-e93e-4982-9131-82e1527ab875}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "GetBuiltInModel" : 1,
                             "GetBasicDescentByName" : 2,
                             "GetAdvDescentByName" : 3,
                             "GetAsCatalogItem" : 4, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrAircraftDescent._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrAircraftDescent from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrAircraftDescent.__dict__ and type(IAgAvtrAircraftDescent.__dict__[attrname]) == property:
            return IAgAvtrAircraftDescent.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrAircraftDescent.")
    
    _GetBuiltInModel_metadata = { "name" : "GetBuiltInModel",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    def GetBuiltInModel(self) -> "IAgAvtrAircraftBasicDescentModel":
        """Get the built-in model."""
        return self._intf.invoke(IAgAvtrAircraftDescent._metadata, IAgAvtrAircraftDescent._GetBuiltInModel_metadata, out_arg())

    _GetBasicDescentByName_metadata = { "name" : "GetBasicDescentByName",
            "arg_types" : (agcom.BSTR, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.AgInterface_out_arg,) }
    def GetBasicDescentByName(self, name:str) -> "IAgAvtrAircraftBasicDescentModel":
        """Gets the basic descent model with the given name."""
        return self._intf.invoke(IAgAvtrAircraftDescent._metadata, IAgAvtrAircraftDescent._GetBasicDescentByName_metadata, name, out_arg())

    _GetAdvDescentByName_metadata = { "name" : "GetAdvDescentByName",
            "arg_types" : (agcom.BSTR, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.AgInterface_out_arg,) }
    def GetAdvDescentByName(self, name:str) -> "IAgAvtrAircraftAdvDescentModel":
        """Gets the advanced descent model with the given name."""
        return self._intf.invoke(IAgAvtrAircraftDescent._metadata, IAgAvtrAircraftDescent._GetAdvDescentByName_metadata, name, out_arg())

    _GetAsCatalogItem_metadata = { "name" : "GetAsCatalogItem",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    def GetAsCatalogItem(self) -> "IAgAvtrCatalogItem":
        """Get the catalog item interface for this object."""
        return self._intf.invoke(IAgAvtrAircraftDescent._metadata, IAgAvtrAircraftDescent._GetAsCatalogItem_metadata, out_arg())


agcls.AgClassCatalog.add_catalog_entry("{568db25b-e93e-4982-9131-82e1527ab875}", IAgAvtrAircraftDescent)
agcls.AgTypeNameMap["IAgAvtrAircraftDescent"] = IAgAvtrAircraftDescent

class IAgAvtrAircraftLanding(object):
    """Interface used to access the landing options for an aircraft in the Aviator catalog."""
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{4a0055a5-4224-42c3-b113-704c110093e8}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "GetBuiltInModel" : 1,
                             "GetBasicLandingByName" : 2,
                             "GetAdvLandingByName" : 3,
                             "GetAsCatalogItem" : 4, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrAircraftLanding._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrAircraftLanding from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrAircraftLanding.__dict__ and type(IAgAvtrAircraftLanding.__dict__[attrname]) == property:
            return IAgAvtrAircraftLanding.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrAircraftLanding.")
    
    _GetBuiltInModel_metadata = { "name" : "GetBuiltInModel",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    def GetBuiltInModel(self) -> "IAgAvtrAircraftBasicLandingModel":
        """Get the built-in model."""
        return self._intf.invoke(IAgAvtrAircraftLanding._metadata, IAgAvtrAircraftLanding._GetBuiltInModel_metadata, out_arg())

    _GetBasicLandingByName_metadata = { "name" : "GetBasicLandingByName",
            "arg_types" : (agcom.BSTR, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.AgInterface_out_arg,) }
    def GetBasicLandingByName(self, name:str) -> "IAgAvtrAircraftBasicLandingModel":
        """Gets the basic Landing model with the given name."""
        return self._intf.invoke(IAgAvtrAircraftLanding._metadata, IAgAvtrAircraftLanding._GetBasicLandingByName_metadata, name, out_arg())

    _GetAdvLandingByName_metadata = { "name" : "GetAdvLandingByName",
            "arg_types" : (agcom.BSTR, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.AgInterface_out_arg,) }
    def GetAdvLandingByName(self, name:str) -> "IAgAvtrAircraftAdvLandingModel":
        """Gets the advanced Landing model with the given name."""
        return self._intf.invoke(IAgAvtrAircraftLanding._metadata, IAgAvtrAircraftLanding._GetAdvLandingByName_metadata, name, out_arg())

    _GetAsCatalogItem_metadata = { "name" : "GetAsCatalogItem",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    def GetAsCatalogItem(self) -> "IAgAvtrCatalogItem":
        """Get the catalog item interface for this object."""
        return self._intf.invoke(IAgAvtrAircraftLanding._metadata, IAgAvtrAircraftLanding._GetAsCatalogItem_metadata, out_arg())


agcls.AgClassCatalog.add_catalog_entry("{4a0055a5-4224-42c3-b113-704c110093e8}", IAgAvtrAircraftLanding)
agcls.AgTypeNameMap["IAgAvtrAircraftLanding"] = IAgAvtrAircraftLanding

class IAgAvtrAircraftTakeoff(object):
    """Interface used to access the takeoff options for an aircraft in the Aviator catalog."""
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{0a5a6393-8473-4f08-8501-9ca2a66494f4}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "GetBuiltInModel" : 1,
                             "GetBasicTakeoffByName" : 2,
                             "GetAdvTakeoffByName" : 3,
                             "GetAsCatalogItem" : 4, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrAircraftTakeoff._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrAircraftTakeoff from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrAircraftTakeoff.__dict__ and type(IAgAvtrAircraftTakeoff.__dict__[attrname]) == property:
            return IAgAvtrAircraftTakeoff.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrAircraftTakeoff.")
    
    _GetBuiltInModel_metadata = { "name" : "GetBuiltInModel",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    def GetBuiltInModel(self) -> "IAgAvtrAircraftBasicTakeoffModel":
        """Get the built-in model."""
        return self._intf.invoke(IAgAvtrAircraftTakeoff._metadata, IAgAvtrAircraftTakeoff._GetBuiltInModel_metadata, out_arg())

    _GetBasicTakeoffByName_metadata = { "name" : "GetBasicTakeoffByName",
            "arg_types" : (agcom.BSTR, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.AgInterface_out_arg,) }
    def GetBasicTakeoffByName(self, name:str) -> "IAgAvtrAircraftBasicTakeoffModel":
        """Gets the basic Takeoff model with the given name."""
        return self._intf.invoke(IAgAvtrAircraftTakeoff._metadata, IAgAvtrAircraftTakeoff._GetBasicTakeoffByName_metadata, name, out_arg())

    _GetAdvTakeoffByName_metadata = { "name" : "GetAdvTakeoffByName",
            "arg_types" : (agcom.BSTR, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.AgInterface_out_arg,) }
    def GetAdvTakeoffByName(self, name:str) -> "IAgAvtrAircraftAdvTakeoffModel":
        """Gets the advanced Takeoff model with the given name."""
        return self._intf.invoke(IAgAvtrAircraftTakeoff._metadata, IAgAvtrAircraftTakeoff._GetAdvTakeoffByName_metadata, name, out_arg())

    _GetAsCatalogItem_metadata = { "name" : "GetAsCatalogItem",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    def GetAsCatalogItem(self) -> "IAgAvtrCatalogItem":
        """Get the catalog item interface for this object."""
        return self._intf.invoke(IAgAvtrAircraftTakeoff._metadata, IAgAvtrAircraftTakeoff._GetAsCatalogItem_metadata, out_arg())


agcls.AgClassCatalog.add_catalog_entry("{0a5a6393-8473-4f08-8501-9ca2a66494f4}", IAgAvtrAircraftTakeoff)
agcls.AgTypeNameMap["IAgAvtrAircraftTakeoff"] = IAgAvtrAircraftTakeoff

class IAgAvtrAircraftAcceleration(object):
    """Interface used to access the acceleration options for an aircraft in the Aviator catalog."""
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{f40c1168-8650-4aad-9790-192041602734}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "GetBuiltInModel" : 1,
                             "GetBasicAccelerationByName" : 2,
                             "GetAdvAccelerationByName" : 3,
                             "GetAsCatalogItem" : 4, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrAircraftAcceleration._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrAircraftAcceleration from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrAircraftAcceleration.__dict__ and type(IAgAvtrAircraftAcceleration.__dict__[attrname]) == property:
            return IAgAvtrAircraftAcceleration.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrAircraftAcceleration.")
    
    _GetBuiltInModel_metadata = { "name" : "GetBuiltInModel",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    def GetBuiltInModel(self) -> "IAgAvtrAircraftBasicAccelerationModel":
        """Get the built-in model."""
        return self._intf.invoke(IAgAvtrAircraftAcceleration._metadata, IAgAvtrAircraftAcceleration._GetBuiltInModel_metadata, out_arg())

    _GetBasicAccelerationByName_metadata = { "name" : "GetBasicAccelerationByName",
            "arg_types" : (agcom.BSTR, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.AgInterface_out_arg,) }
    def GetBasicAccelerationByName(self, name:str) -> "IAgAvtrAircraftBasicAccelerationModel":
        """Get the basic acceleration model with the given name."""
        return self._intf.invoke(IAgAvtrAircraftAcceleration._metadata, IAgAvtrAircraftAcceleration._GetBasicAccelerationByName_metadata, name, out_arg())

    _GetAdvAccelerationByName_metadata = { "name" : "GetAdvAccelerationByName",
            "arg_types" : (agcom.BSTR, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.AgInterface_out_arg,) }
    def GetAdvAccelerationByName(self, name:str) -> "IAgAvtrAircraftAdvAccelerationModel":
        """Get the advanced acceleration model with the given name."""
        return self._intf.invoke(IAgAvtrAircraftAcceleration._metadata, IAgAvtrAircraftAcceleration._GetAdvAccelerationByName_metadata, name, out_arg())

    _GetAsCatalogItem_metadata = { "name" : "GetAsCatalogItem",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    def GetAsCatalogItem(self) -> "IAgAvtrCatalogItem":
        """Get the catalog item interface for this object."""
        return self._intf.invoke(IAgAvtrAircraftAcceleration._metadata, IAgAvtrAircraftAcceleration._GetAsCatalogItem_metadata, out_arg())


agcls.AgClassCatalog.add_catalog_entry("{f40c1168-8650-4aad-9790-192041602734}", IAgAvtrAircraftAcceleration)
agcls.AgTypeNameMap["IAgAvtrAircraftAcceleration"] = IAgAvtrAircraftAcceleration

class IAgAvtrCatalog(object):
    """Interface used to access the Aviator catalog."""
    _num_methods = 6
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{a9756132-0cd0-438d-bc8c-77fb748cebbd}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_AircraftCategory" : 1,
                             "get_RunwayCategory" : 2,
                             "get_AirportCategory" : 3,
                             "get_NavaidCategory" : 4,
                             "get_VTOLPointCategory" : 5,
                             "get_WaypointCategory" : 6, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrCatalog._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrCatalog from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrCatalog.__dict__ and type(IAgAvtrCatalog.__dict__[attrname]) == property:
            return IAgAvtrCatalog.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrCatalog.")
    
    _get_AircraftCategory_metadata = { "name" : "AircraftCategory",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def AircraftCategory(self) -> "IAgAvtrAircraftCategory":
        """Get the aircraft category."""
        return self._intf.get_property(IAgAvtrCatalog._metadata, IAgAvtrCatalog._get_AircraftCategory_metadata)

    _get_RunwayCategory_metadata = { "name" : "RunwayCategory",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def RunwayCategory(self) -> "IAgAvtrRunwayCategory":
        """Get the runway category."""
        return self._intf.get_property(IAgAvtrCatalog._metadata, IAgAvtrCatalog._get_RunwayCategory_metadata)

    _get_AirportCategory_metadata = { "name" : "AirportCategory",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def AirportCategory(self) -> "IAgAvtrAirportCategory":
        """Get the airport category."""
        return self._intf.get_property(IAgAvtrCatalog._metadata, IAgAvtrCatalog._get_AirportCategory_metadata)

    _get_NavaidCategory_metadata = { "name" : "NavaidCategory",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def NavaidCategory(self) -> "IAgAvtrNavaidCategory":
        """Get the navaid category."""
        return self._intf.get_property(IAgAvtrCatalog._metadata, IAgAvtrCatalog._get_NavaidCategory_metadata)

    _get_VTOLPointCategory_metadata = { "name" : "VTOLPointCategory",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def VTOLPointCategory(self) -> "IAgAvtrVTOLPointCategory":
        """Get the vtol point category."""
        return self._intf.get_property(IAgAvtrCatalog._metadata, IAgAvtrCatalog._get_VTOLPointCategory_metadata)

    _get_WaypointCategory_metadata = { "name" : "WaypointCategory",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def WaypointCategory(self) -> "IAgAvtrWaypointCategory":
        """Get the waypoint category."""
        return self._intf.get_property(IAgAvtrCatalog._metadata, IAgAvtrCatalog._get_WaypointCategory_metadata)


agcls.AgClassCatalog.add_catalog_entry("{a9756132-0cd0-438d-bc8c-77fb748cebbd}", IAgAvtrCatalog)
agcls.AgTypeNameMap["IAgAvtrCatalog"] = IAgAvtrCatalog

class IAgAvtrProcedureTimeOptions(object):
    """Interface used to access the time options for the current procedure. Use this interface to set an Interrupt Time or Fixed Duration for a procedure."""
    _num_methods = 15
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{19d372f4-0dce-4b60-8517-cbdfc1e5939c}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_StartTimeEnabled" : 1,
                             "get_UseStartTime" : 2,
                             "set_UseStartTime" : 3,
                             "get_StartTime" : 4,
                             "SetStartTime" : 5,
                             "get_InterruptTimeEnabled" : 6,
                             "get_UseInterruptTime" : 7,
                             "set_UseInterruptTime" : 8,
                             "get_InterruptTime" : 9,
                             "SetInterruptTime" : 10,
                             "get_StopTimeEnabled" : 11,
                             "get_UseStopTime" : 12,
                             "set_UseStopTime" : 13,
                             "get_StopTime" : 14,
                             "SetStopTime" : 15, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrProcedureTimeOptions._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrProcedureTimeOptions from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrProcedureTimeOptions.__dict__ and type(IAgAvtrProcedureTimeOptions.__dict__[attrname]) == property:
            return IAgAvtrProcedureTimeOptions.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrProcedureTimeOptions.")
    
    _get_StartTimeEnabled_metadata = { "name" : "StartTimeEnabled",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def StartTimeEnabled(self) -> bool:
        """Check to see if the start time is enabled for this procedure."""
        return self._intf.get_property(IAgAvtrProcedureTimeOptions._metadata, IAgAvtrProcedureTimeOptions._get_StartTimeEnabled_metadata)

    _get_UseStartTime_metadata = { "name" : "UseStartTime",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def UseStartTime(self) -> bool:
        """Opt whether to set a start time for the procedure."""
        return self._intf.get_property(IAgAvtrProcedureTimeOptions._metadata, IAgAvtrProcedureTimeOptions._get_UseStartTime_metadata)

    _set_UseStartTime_metadata = { "name" : "UseStartTime",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @UseStartTime.setter
    def UseStartTime(self, newVal:bool) -> None:
        """Opt whether to set a start time for the procedure."""
        return self._intf.set_property(IAgAvtrProcedureTimeOptions._metadata, IAgAvtrProcedureTimeOptions._set_UseStartTime_metadata, newVal)

    _get_StartTime_metadata = { "name" : "StartTime",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def StartTime(self) -> typing.Any:
        """Start time for the procedure."""
        return self._intf.get_property(IAgAvtrProcedureTimeOptions._metadata, IAgAvtrProcedureTimeOptions._get_StartTime_metadata)

    _SetStartTime_metadata = { "name" : "SetStartTime",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    def SetStartTime(self, time:typing.Any) -> None:
        """Set the start time for the procedure."""
        return self._intf.invoke(IAgAvtrProcedureTimeOptions._metadata, IAgAvtrProcedureTimeOptions._SetStartTime_metadata, time)

    _get_InterruptTimeEnabled_metadata = { "name" : "InterruptTimeEnabled",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def InterruptTimeEnabled(self) -> bool:
        """Check to see if the interrupt time is enabled for this procedure."""
        return self._intf.get_property(IAgAvtrProcedureTimeOptions._metadata, IAgAvtrProcedureTimeOptions._get_InterruptTimeEnabled_metadata)

    _get_UseInterruptTime_metadata = { "name" : "UseInterruptTime",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def UseInterruptTime(self) -> bool:
        """Opt whether to set an interrupt time for the procedure."""
        return self._intf.get_property(IAgAvtrProcedureTimeOptions._metadata, IAgAvtrProcedureTimeOptions._get_UseInterruptTime_metadata)

    _set_UseInterruptTime_metadata = { "name" : "UseInterruptTime",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @UseInterruptTime.setter
    def UseInterruptTime(self, newVal:bool) -> None:
        """Opt whether to set an interrupt time for the procedure."""
        return self._intf.set_property(IAgAvtrProcedureTimeOptions._metadata, IAgAvtrProcedureTimeOptions._set_UseInterruptTime_metadata, newVal)

    _get_InterruptTime_metadata = { "name" : "InterruptTime",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def InterruptTime(self) -> typing.Any:
        """Interrupt time for the procedure."""
        return self._intf.get_property(IAgAvtrProcedureTimeOptions._metadata, IAgAvtrProcedureTimeOptions._get_InterruptTime_metadata)

    _SetInterruptTime_metadata = { "name" : "SetInterruptTime",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    def SetInterruptTime(self, time:typing.Any) -> None:
        """Set the interrupt time for the procedure."""
        return self._intf.invoke(IAgAvtrProcedureTimeOptions._metadata, IAgAvtrProcedureTimeOptions._SetInterruptTime_metadata, time)

    _get_StopTimeEnabled_metadata = { "name" : "StopTimeEnabled",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def StopTimeEnabled(self) -> bool:
        """Check to see if the stop time is enabled for this procedure."""
        return self._intf.get_property(IAgAvtrProcedureTimeOptions._metadata, IAgAvtrProcedureTimeOptions._get_StopTimeEnabled_metadata)

    _get_UseStopTime_metadata = { "name" : "UseStopTime",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def UseStopTime(self) -> bool:
        """Opt whether to set a stop  time for the procedure."""
        return self._intf.get_property(IAgAvtrProcedureTimeOptions._metadata, IAgAvtrProcedureTimeOptions._get_UseStopTime_metadata)

    _set_UseStopTime_metadata = { "name" : "UseStopTime",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @UseStopTime.setter
    def UseStopTime(self, newVal:bool) -> None:
        """Opt whether to set a stop time for the procedure."""
        return self._intf.set_property(IAgAvtrProcedureTimeOptions._metadata, IAgAvtrProcedureTimeOptions._set_UseStopTime_metadata, newVal)

    _get_StopTime_metadata = { "name" : "StopTime",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def StopTime(self) -> typing.Any:
        """Stop time for the procedure."""
        return self._intf.get_property(IAgAvtrProcedureTimeOptions._metadata, IAgAvtrProcedureTimeOptions._get_StopTime_metadata)

    _SetStopTime_metadata = { "name" : "SetStopTime",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    def SetStopTime(self, time:typing.Any) -> None:
        """Set the stop time for the procedure."""
        return self._intf.invoke(IAgAvtrProcedureTimeOptions._metadata, IAgAvtrProcedureTimeOptions._SetStopTime_metadata, time)


agcls.AgClassCatalog.add_catalog_entry("{19d372f4-0dce-4b60-8517-cbdfc1e5939c}", IAgAvtrProcedureTimeOptions)
agcls.AgTypeNameMap["IAgAvtrProcedureTimeOptions"] = IAgAvtrProcedureTimeOptions

class IAgAvtrCalculationOptions(object):
    """Interface used to access the calculation options for a procedure or phase."""
    _num_methods = 14
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{B398DB5E-FA44-446B-B1AE-31761CB12D50}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_MaxRelMotionFactor" : 1,
                             "set_MaxRelMotionFactor" : 2,
                             "get_StateCacheTimeInterval" : 3,
                             "set_StateCacheTimeInterval" : 4,
                             "get_TimeResolution" : 5,
                             "set_TimeResolution" : 6,
                             "get_MaxIterations" : 7,
                             "set_MaxIterations" : 8,
                             "get_MaxBadSteps" : 9,
                             "set_MaxBadSteps" : 10,
                             "get_IntegratorType" : 11,
                             "set_IntegratorType" : 12,
                             "get_IntegratorTypeString" : 13,
                             "set_IntegratorTypeString" : 14, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrCalculationOptions._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrCalculationOptions from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrCalculationOptions.__dict__ and type(IAgAvtrCalculationOptions.__dict__[attrname]) == property:
            return IAgAvtrCalculationOptions.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrCalculationOptions.")
    
    _get_MaxRelMotionFactor_metadata = { "name" : "MaxRelMotionFactor",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def MaxRelMotionFactor(self) -> float:
        """The maximum motion allowed between sampling points."""
        return self._intf.get_property(IAgAvtrCalculationOptions._metadata, IAgAvtrCalculationOptions._get_MaxRelMotionFactor_metadata)

    _set_MaxRelMotionFactor_metadata = { "name" : "MaxRelMotionFactor",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @MaxRelMotionFactor.setter
    def MaxRelMotionFactor(self, newVal:float) -> None:
        """The maximum motion allowed between sampling points."""
        return self._intf.set_property(IAgAvtrCalculationOptions._metadata, IAgAvtrCalculationOptions._set_MaxRelMotionFactor_metadata, newVal)

    _get_StateCacheTimeInterval_metadata = { "name" : "StateCacheTimeInterval",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def StateCacheTimeInterval(self) -> float:
        """The time interval used to store the state information."""
        return self._intf.get_property(IAgAvtrCalculationOptions._metadata, IAgAvtrCalculationOptions._get_StateCacheTimeInterval_metadata)

    _set_StateCacheTimeInterval_metadata = { "name" : "StateCacheTimeInterval",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @StateCacheTimeInterval.setter
    def StateCacheTimeInterval(self, newVal:float) -> None:
        """The time interval used to store the state information."""
        return self._intf.set_property(IAgAvtrCalculationOptions._metadata, IAgAvtrCalculationOptions._set_StateCacheTimeInterval_metadata, newVal)

    _get_TimeResolution_metadata = { "name" : "TimeResolution",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def TimeResolution(self) -> float:
        """The tolerance for resolving time calculations."""
        return self._intf.get_property(IAgAvtrCalculationOptions._metadata, IAgAvtrCalculationOptions._get_TimeResolution_metadata)

    _set_TimeResolution_metadata = { "name" : "TimeResolution",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @TimeResolution.setter
    def TimeResolution(self, newVal:float) -> None:
        """The tolerance for resolving time calculations."""
        return self._intf.set_property(IAgAvtrCalculationOptions._metadata, IAgAvtrCalculationOptions._set_TimeResolution_metadata, newVal)

    _get_MaxIterations_metadata = { "name" : "MaxIterations",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.LONG_arg,) }
    @property
    def MaxIterations(self) -> int:
        """The maximum number of iterations per time step Aviator will attempt."""
        return self._intf.get_property(IAgAvtrCalculationOptions._metadata, IAgAvtrCalculationOptions._get_MaxIterations_metadata)

    _set_MaxIterations_metadata = { "name" : "MaxIterations",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.LONG_arg,) }
    @MaxIterations.setter
    def MaxIterations(self, newVal:int) -> None:
        """The maximum number of iterations per time step Aviator will attempt."""
        return self._intf.set_property(IAgAvtrCalculationOptions._metadata, IAgAvtrCalculationOptions._set_MaxIterations_metadata, newVal)

    _get_MaxBadSteps_metadata = { "name" : "MaxBadSteps",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.LONG_arg,) }
    @property
    def MaxBadSteps(self) -> int:
        """The maximum number of bad steps Aviator will allow before ceasing calculation."""
        return self._intf.get_property(IAgAvtrCalculationOptions._metadata, IAgAvtrCalculationOptions._get_MaxBadSteps_metadata)

    _set_MaxBadSteps_metadata = { "name" : "MaxBadSteps",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.LONG_arg,) }
    @MaxBadSteps.setter
    def MaxBadSteps(self, newVal:int) -> None:
        """The maximum number of bad steps Aviator will allow before ceasing calculation."""
        return self._intf.set_property(IAgAvtrCalculationOptions._metadata, IAgAvtrCalculationOptions._set_MaxBadSteps_metadata, newVal)

    _get_IntegratorType_metadata = { "name" : "IntegratorType",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrNumericalIntegrator),) }
    @property
    def IntegratorType(self) -> "AgEAvtrNumericalIntegrator":
        """The integrator type."""
        return self._intf.get_property(IAgAvtrCalculationOptions._metadata, IAgAvtrCalculationOptions._get_IntegratorType_metadata)

    _set_IntegratorType_metadata = { "name" : "IntegratorType",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrNumericalIntegrator),) }
    @IntegratorType.setter
    def IntegratorType(self, pVal:"AgEAvtrNumericalIntegrator") -> None:
        """The integrator type."""
        return self._intf.set_property(IAgAvtrCalculationOptions._metadata, IAgAvtrCalculationOptions._set_IntegratorType_metadata, pVal)

    _get_IntegratorTypeString_metadata = { "name" : "IntegratorTypeString",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def IntegratorTypeString(self) -> str:
        """The integrator type as a string value. Use this for custom integrators."""
        return self._intf.get_property(IAgAvtrCalculationOptions._metadata, IAgAvtrCalculationOptions._get_IntegratorTypeString_metadata)

    _set_IntegratorTypeString_metadata = { "name" : "IntegratorTypeString",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @IntegratorTypeString.setter
    def IntegratorTypeString(self, pVal:str) -> None:
        """The integrator type as a string value. Use this for custom integrators."""
        return self._intf.set_property(IAgAvtrCalculationOptions._metadata, IAgAvtrCalculationOptions._set_IntegratorTypeString_metadata, pVal)


agcls.AgClassCatalog.add_catalog_entry("{B398DB5E-FA44-446B-B1AE-31761CB12D50}", IAgAvtrCalculationOptions)
agcls.AgTypeNameMap["IAgAvtrCalculationOptions"] = IAgAvtrCalculationOptions

class IAgAvtrNavigationOptions(object):
    """Interface used to access the navigation options for an Aviator procedure."""
    _num_methods = 10
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{d0b367a7-0df0-454b-b059-e27f55a04730}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_NavMode" : 1,
                             "set_NavMode" : 2,
                             "get_ArriveOnCourse" : 3,
                             "set_ArriveOnCourse" : 4,
                             "get_UseMagneticHeading" : 5,
                             "set_UseMagneticHeading" : 6,
                             "get_EnrouteFirstTurn" : 7,
                             "set_EnrouteFirstTurn" : 8,
                             "get_EnrouteSecondTurn" : 9,
                             "set_EnrouteSecondTurn" : 10, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrNavigationOptions._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrNavigationOptions from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrNavigationOptions.__dict__ and type(IAgAvtrNavigationOptions.__dict__[attrname]) == property:
            return IAgAvtrNavigationOptions.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrNavigationOptions.")
    
    _get_NavMode_metadata = { "name" : "NavMode",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrPointToPointMode),) }
    @property
    def NavMode(self) -> "AgEAvtrPointToPointMode":
        """The navigation mode."""
        return self._intf.get_property(IAgAvtrNavigationOptions._metadata, IAgAvtrNavigationOptions._get_NavMode_metadata)

    _set_NavMode_metadata = { "name" : "NavMode",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrPointToPointMode),) }
    @NavMode.setter
    def NavMode(self, newVal:"AgEAvtrPointToPointMode") -> None:
        """The navigation mode."""
        return self._intf.set_property(IAgAvtrNavigationOptions._metadata, IAgAvtrNavigationOptions._set_NavMode_metadata, newVal)

    _get_ArriveOnCourse_metadata = { "name" : "ArriveOnCourse",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def ArriveOnCourse(self) -> typing.Any:
        """The aircraft will start or arrive at the procedure site with the specified course. The nav mode must be set to Arrive on Course to set this value."""
        return self._intf.get_property(IAgAvtrNavigationOptions._metadata, IAgAvtrNavigationOptions._get_ArriveOnCourse_metadata)

    _set_ArriveOnCourse_metadata = { "name" : "ArriveOnCourse",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @ArriveOnCourse.setter
    def ArriveOnCourse(self, newVal:typing.Any) -> None:
        """The aircraft will start or arrive at the procedure site with the specified course. The nav mode must be set to Arrive on Course to set this value."""
        return self._intf.set_property(IAgAvtrNavigationOptions._metadata, IAgAvtrNavigationOptions._set_ArriveOnCourse_metadata, newVal)

    _get_UseMagneticHeading_metadata = { "name" : "UseMagneticHeading",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def UseMagneticHeading(self) -> bool:
        """Opt whether to use a magnetic heading to arrive on course. The nav mode must be set to Arrive on Course to set this value."""
        return self._intf.get_property(IAgAvtrNavigationOptions._metadata, IAgAvtrNavigationOptions._get_UseMagneticHeading_metadata)

    _set_UseMagneticHeading_metadata = { "name" : "UseMagneticHeading",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @UseMagneticHeading.setter
    def UseMagneticHeading(self, newVal:bool) -> None:
        """Opt whether to use a magnetic heading to arrive on course. The nav mode must be set to Arrive on Course to set this value."""
        return self._intf.set_property(IAgAvtrNavigationOptions._metadata, IAgAvtrNavigationOptions._set_UseMagneticHeading_metadata, newVal)

    _get_EnrouteFirstTurn_metadata = { "name" : "EnrouteFirstTurn",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrNavigatorTurnDir),) }
    @property
    def EnrouteFirstTurn(self) -> "AgEAvtrNavigatorTurnDir":
        """Option for the first turn."""
        return self._intf.get_property(IAgAvtrNavigationOptions._metadata, IAgAvtrNavigationOptions._get_EnrouteFirstTurn_metadata)

    _set_EnrouteFirstTurn_metadata = { "name" : "EnrouteFirstTurn",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrNavigatorTurnDir),) }
    @EnrouteFirstTurn.setter
    def EnrouteFirstTurn(self, newVal:"AgEAvtrNavigatorTurnDir") -> None:
        """Option for the first turn."""
        return self._intf.set_property(IAgAvtrNavigationOptions._metadata, IAgAvtrNavigationOptions._set_EnrouteFirstTurn_metadata, newVal)

    _get_EnrouteSecondTurn_metadata = { "name" : "EnrouteSecondTurn",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrNavigatorTurnDir),) }
    @property
    def EnrouteSecondTurn(self) -> "AgEAvtrNavigatorTurnDir":
        """Option for the second turn."""
        return self._intf.get_property(IAgAvtrNavigationOptions._metadata, IAgAvtrNavigationOptions._get_EnrouteSecondTurn_metadata)

    _set_EnrouteSecondTurn_metadata = { "name" : "EnrouteSecondTurn",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrNavigatorTurnDir),) }
    @EnrouteSecondTurn.setter
    def EnrouteSecondTurn(self, newVal:"AgEAvtrNavigatorTurnDir") -> None:
        """Option for the second turn."""
        return self._intf.set_property(IAgAvtrNavigationOptions._metadata, IAgAvtrNavigationOptions._set_EnrouteSecondTurn_metadata, newVal)


agcls.AgClassCatalog.add_catalog_entry("{d0b367a7-0df0-454b-b059-e27f55a04730}", IAgAvtrNavigationOptions)
agcls.AgTypeNameMap["IAgAvtrNavigationOptions"] = IAgAvtrNavigationOptions

class IAgAvtrAltitudeMSLAndLevelOffOptions(object):
    """Interface used to access the altitude MSL and Level off options for an Aviator procedure."""
    _num_methods = 8
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{c7939666-f5a2-44fa-9a4b-9e2d84e93aa5}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_UseDefaultCruiseAltitude" : 1,
                             "set_UseDefaultCruiseAltitude" : 2,
                             "get_MSLAltitude" : 3,
                             "set_MSLAltitude" : 4,
                             "get_MustLevelOff" : 5,
                             "set_MustLevelOff" : 6,
                             "get_LevelOffMode" : 7,
                             "set_LevelOffMode" : 8, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrAltitudeMSLAndLevelOffOptions._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrAltitudeMSLAndLevelOffOptions from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrAltitudeMSLAndLevelOffOptions.__dict__ and type(IAgAvtrAltitudeMSLAndLevelOffOptions.__dict__[attrname]) == property:
            return IAgAvtrAltitudeMSLAndLevelOffOptions.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrAltitudeMSLAndLevelOffOptions.")
    
    _get_UseDefaultCruiseAltitude_metadata = { "name" : "UseDefaultCruiseAltitude",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def UseDefaultCruiseAltitude(self) -> bool:
        """Opt whether to use the default cruise altitude."""
        return self._intf.get_property(IAgAvtrAltitudeMSLAndLevelOffOptions._metadata, IAgAvtrAltitudeMSLAndLevelOffOptions._get_UseDefaultCruiseAltitude_metadata)

    _set_UseDefaultCruiseAltitude_metadata = { "name" : "UseDefaultCruiseAltitude",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @UseDefaultCruiseAltitude.setter
    def UseDefaultCruiseAltitude(self, newVal:bool) -> None:
        """Opt whether to use the default cruise altitude."""
        return self._intf.set_property(IAgAvtrAltitudeMSLAndLevelOffOptions._metadata, IAgAvtrAltitudeMSLAndLevelOffOptions._set_UseDefaultCruiseAltitude_metadata, newVal)

    _get_MSLAltitude_metadata = { "name" : "MSLAltitude",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def MSLAltitude(self) -> float:
        """The MSL altitude. Can only be used when the option to use the default cruise altitude is off."""
        return self._intf.get_property(IAgAvtrAltitudeMSLAndLevelOffOptions._metadata, IAgAvtrAltitudeMSLAndLevelOffOptions._get_MSLAltitude_metadata)

    _set_MSLAltitude_metadata = { "name" : "MSLAltitude",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @MSLAltitude.setter
    def MSLAltitude(self, newVal:float) -> None:
        """Set the MSLAltitude"""
        return self._intf.set_property(IAgAvtrAltitudeMSLAndLevelOffOptions._metadata, IAgAvtrAltitudeMSLAndLevelOffOptions._set_MSLAltitude_metadata, newVal)

    _get_MustLevelOff_metadata = { "name" : "MustLevelOff",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def MustLevelOff(self) -> bool:
        """Opt whether the procedure must level off."""
        return self._intf.get_property(IAgAvtrAltitudeMSLAndLevelOffOptions._metadata, IAgAvtrAltitudeMSLAndLevelOffOptions._get_MustLevelOff_metadata)

    _set_MustLevelOff_metadata = { "name" : "MustLevelOff",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @MustLevelOff.setter
    def MustLevelOff(self, newVal:bool) -> None:
        """Opt whether the procedure must level off."""
        return self._intf.set_property(IAgAvtrAltitudeMSLAndLevelOffOptions._metadata, IAgAvtrAltitudeMSLAndLevelOffOptions._set_MustLevelOff_metadata, newVal)

    _get_LevelOffMode_metadata = { "name" : "LevelOffMode",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrAltitudeConstraintManeuverMode),) }
    @property
    def LevelOffMode(self) -> "AgEAvtrAltitudeConstraintManeuverMode":
        """The level off mode. This is only used when the must level off option is on."""
        return self._intf.get_property(IAgAvtrAltitudeMSLAndLevelOffOptions._metadata, IAgAvtrAltitudeMSLAndLevelOffOptions._get_LevelOffMode_metadata)

    _set_LevelOffMode_metadata = { "name" : "LevelOffMode",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrAltitudeConstraintManeuverMode),) }
    @LevelOffMode.setter
    def LevelOffMode(self, newVal:"AgEAvtrAltitudeConstraintManeuverMode") -> None:
        """The level off mode. This is only used when the must level off option is on."""
        return self._intf.set_property(IAgAvtrAltitudeMSLAndLevelOffOptions._metadata, IAgAvtrAltitudeMSLAndLevelOffOptions._set_LevelOffMode_metadata, newVal)


agcls.AgClassCatalog.add_catalog_entry("{c7939666-f5a2-44fa-9a4b-9e2d84e93aa5}", IAgAvtrAltitudeMSLAndLevelOffOptions)
agcls.AgTypeNameMap["IAgAvtrAltitudeMSLAndLevelOffOptions"] = IAgAvtrAltitudeMSLAndLevelOffOptions

class IAgAvtrAltitudeMSLOptions(object):
    """Interface used to access the altitude MSL options for an Aviator procedure."""
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{bde058f8-a355-4a4f-9884-7e2961b212e7}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_UseDefaultCruiseAltitude" : 1,
                             "set_UseDefaultCruiseAltitude" : 2,
                             "get_MSLAltitude" : 3,
                             "set_MSLAltitude" : 4, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrAltitudeMSLOptions._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrAltitudeMSLOptions from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrAltitudeMSLOptions.__dict__ and type(IAgAvtrAltitudeMSLOptions.__dict__[attrname]) == property:
            return IAgAvtrAltitudeMSLOptions.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrAltitudeMSLOptions.")
    
    _get_UseDefaultCruiseAltitude_metadata = { "name" : "UseDefaultCruiseAltitude",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def UseDefaultCruiseAltitude(self) -> bool:
        """Opt whether to use the default cruise altitude."""
        return self._intf.get_property(IAgAvtrAltitudeMSLOptions._metadata, IAgAvtrAltitudeMSLOptions._get_UseDefaultCruiseAltitude_metadata)

    _set_UseDefaultCruiseAltitude_metadata = { "name" : "UseDefaultCruiseAltitude",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @UseDefaultCruiseAltitude.setter
    def UseDefaultCruiseAltitude(self, newVal:bool) -> None:
        """Opt whether to use the default cruise altitude."""
        return self._intf.set_property(IAgAvtrAltitudeMSLOptions._metadata, IAgAvtrAltitudeMSLOptions._set_UseDefaultCruiseAltitude_metadata, newVal)

    _get_MSLAltitude_metadata = { "name" : "MSLAltitude",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def MSLAltitude(self) -> float:
        """The MSL altitude. Can only be used when the option to use the default cruise altitude is off."""
        return self._intf.get_property(IAgAvtrAltitudeMSLOptions._metadata, IAgAvtrAltitudeMSLOptions._get_MSLAltitude_metadata)

    _set_MSLAltitude_metadata = { "name" : "MSLAltitude",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @MSLAltitude.setter
    def MSLAltitude(self, newVal:float) -> None:
        """Set the MSLAltitude"""
        return self._intf.set_property(IAgAvtrAltitudeMSLOptions._metadata, IAgAvtrAltitudeMSLOptions._set_MSLAltitude_metadata, newVal)


agcls.AgClassCatalog.add_catalog_entry("{bde058f8-a355-4a4f-9884-7e2961b212e7}", IAgAvtrAltitudeMSLOptions)
agcls.AgTypeNameMap["IAgAvtrAltitudeMSLOptions"] = IAgAvtrAltitudeMSLOptions

class IAgAvtrAltitudeOptions(object):
    """Interface used to access the altitude options for an Aviator procedure."""
    _num_methods = 6
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{be4fccc8-7fe4-443b-9dc9-c337369c4560}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_UseDefaultCruiseAltitude" : 1,
                             "set_UseDefaultCruiseAltitude" : 2,
                             "get_AltitudeReference" : 3,
                             "set_AltitudeReference" : 4,
                             "get_Altitude" : 5,
                             "set_Altitude" : 6, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrAltitudeOptions._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrAltitudeOptions from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrAltitudeOptions.__dict__ and type(IAgAvtrAltitudeOptions.__dict__[attrname]) == property:
            return IAgAvtrAltitudeOptions.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrAltitudeOptions.")
    
    _get_UseDefaultCruiseAltitude_metadata = { "name" : "UseDefaultCruiseAltitude",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def UseDefaultCruiseAltitude(self) -> bool:
        """Opt whether to use the default cruise altitude."""
        return self._intf.get_property(IAgAvtrAltitudeOptions._metadata, IAgAvtrAltitudeOptions._get_UseDefaultCruiseAltitude_metadata)

    _set_UseDefaultCruiseAltitude_metadata = { "name" : "UseDefaultCruiseAltitude",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @UseDefaultCruiseAltitude.setter
    def UseDefaultCruiseAltitude(self, newVal:bool) -> None:
        """Opt whether to use the default cruise altitude."""
        return self._intf.set_property(IAgAvtrAltitudeOptions._metadata, IAgAvtrAltitudeOptions._set_UseDefaultCruiseAltitude_metadata, newVal)

    _get_AltitudeReference_metadata = { "name" : "AltitudeReference",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrAGLMSL),) }
    @property
    def AltitudeReference(self) -> "AgEAvtrAGLMSL":
        """The altitude reference."""
        return self._intf.get_property(IAgAvtrAltitudeOptions._metadata, IAgAvtrAltitudeOptions._get_AltitudeReference_metadata)

    _set_AltitudeReference_metadata = { "name" : "AltitudeReference",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrAGLMSL),) }
    @AltitudeReference.setter
    def AltitudeReference(self, newVal:"AgEAvtrAGLMSL") -> None:
        """The altitude reference."""
        return self._intf.set_property(IAgAvtrAltitudeOptions._metadata, IAgAvtrAltitudeOptions._set_AltitudeReference_metadata, newVal)

    _get_Altitude_metadata = { "name" : "Altitude",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def Altitude(self) -> float:
        """The altitude for the procedure."""
        return self._intf.get_property(IAgAvtrAltitudeOptions._metadata, IAgAvtrAltitudeOptions._get_Altitude_metadata)

    _set_Altitude_metadata = { "name" : "Altitude",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @Altitude.setter
    def Altitude(self, newVal:float) -> None:
        """The altitude for the procedure."""
        return self._intf.set_property(IAgAvtrAltitudeOptions._metadata, IAgAvtrAltitudeOptions._set_Altitude_metadata, newVal)


agcls.AgClassCatalog.add_catalog_entry("{be4fccc8-7fe4-443b-9dc9-c337369c4560}", IAgAvtrAltitudeOptions)
agcls.AgTypeNameMap["IAgAvtrAltitudeOptions"] = IAgAvtrAltitudeOptions

class IAgAvtrHoverAltitudeOptions(object):
    """Interface used to access the altitude options for VTOL procedure."""
    _num_methods = 6
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{61d092fc-5b7c-4056-9f82-ac024ea4d4bd}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_AltitudeReference" : 1,
                             "set_AltitudeReference" : 2,
                             "get_Altitude" : 3,
                             "set_Altitude" : 4,
                             "get_FinalAltitudeRate" : 5,
                             "set_FinalAltitudeRate" : 6, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrHoverAltitudeOptions._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrHoverAltitudeOptions from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrHoverAltitudeOptions.__dict__ and type(IAgAvtrHoverAltitudeOptions.__dict__[attrname]) == property:
            return IAgAvtrHoverAltitudeOptions.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrHoverAltitudeOptions.")
    
    _get_AltitudeReference_metadata = { "name" : "AltitudeReference",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrAGLMSL),) }
    @property
    def AltitudeReference(self) -> "AgEAvtrAGLMSL":
        """The altitude reference."""
        return self._intf.get_property(IAgAvtrHoverAltitudeOptions._metadata, IAgAvtrHoverAltitudeOptions._get_AltitudeReference_metadata)

    _set_AltitudeReference_metadata = { "name" : "AltitudeReference",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrAGLMSL),) }
    @AltitudeReference.setter
    def AltitudeReference(self, newVal:"AgEAvtrAGLMSL") -> None:
        """The altitude reference."""
        return self._intf.set_property(IAgAvtrHoverAltitudeOptions._metadata, IAgAvtrHoverAltitudeOptions._set_AltitudeReference_metadata, newVal)

    _get_Altitude_metadata = { "name" : "Altitude",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def Altitude(self) -> float:
        """The altitude for the procedure."""
        return self._intf.get_property(IAgAvtrHoverAltitudeOptions._metadata, IAgAvtrHoverAltitudeOptions._get_Altitude_metadata)

    _set_Altitude_metadata = { "name" : "Altitude",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @Altitude.setter
    def Altitude(self, newVal:float) -> None:
        """The altitude for the procedure."""
        return self._intf.set_property(IAgAvtrHoverAltitudeOptions._metadata, IAgAvtrHoverAltitudeOptions._set_Altitude_metadata, newVal)

    _get_FinalAltitudeRate_metadata = { "name" : "FinalAltitudeRate",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrVTOLRateMode),) }
    @property
    def FinalAltitudeRate(self) -> "AgEAvtrVTOLRateMode":
        """The altitude rate of the aircraft at the end of the procedure."""
        return self._intf.get_property(IAgAvtrHoverAltitudeOptions._metadata, IAgAvtrHoverAltitudeOptions._get_FinalAltitudeRate_metadata)

    _set_FinalAltitudeRate_metadata = { "name" : "FinalAltitudeRate",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrVTOLRateMode),) }
    @FinalAltitudeRate.setter
    def FinalAltitudeRate(self, newVal:"AgEAvtrVTOLRateMode") -> None:
        """The altitude rate of the aircraft at the end of the procedure."""
        return self._intf.set_property(IAgAvtrHoverAltitudeOptions._metadata, IAgAvtrHoverAltitudeOptions._set_FinalAltitudeRate_metadata, newVal)


agcls.AgClassCatalog.add_catalog_entry("{61d092fc-5b7c-4056-9f82-ac024ea4d4bd}", IAgAvtrHoverAltitudeOptions)
agcls.AgTypeNameMap["IAgAvtrHoverAltitudeOptions"] = IAgAvtrHoverAltitudeOptions

class IAgAvtrArcAltitudeOptions(object):
    """Interface used to access the altitude options for an Arc procedure."""
    _num_methods = 6
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{5aa7a535-fbc0-49b5-99e7-c93309863a6d}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_UseDefaultCruiseAltitude" : 1,
                             "set_UseDefaultCruiseAltitude" : 2,
                             "get_StartArcAltitude" : 3,
                             "set_StartArcAltitude" : 4,
                             "get_StopArcAltitude" : 5,
                             "set_StopArcAltitude" : 6, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrArcAltitudeOptions._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrArcAltitudeOptions from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrArcAltitudeOptions.__dict__ and type(IAgAvtrArcAltitudeOptions.__dict__[attrname]) == property:
            return IAgAvtrArcAltitudeOptions.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrArcAltitudeOptions.")
    
    _get_UseDefaultCruiseAltitude_metadata = { "name" : "UseDefaultCruiseAltitude",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def UseDefaultCruiseAltitude(self) -> bool:
        """Opt whether to use the default cruise altitude."""
        return self._intf.get_property(IAgAvtrArcAltitudeOptions._metadata, IAgAvtrArcAltitudeOptions._get_UseDefaultCruiseAltitude_metadata)

    _set_UseDefaultCruiseAltitude_metadata = { "name" : "UseDefaultCruiseAltitude",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @UseDefaultCruiseAltitude.setter
    def UseDefaultCruiseAltitude(self, newVal:bool) -> None:
        """Opt whether to use the default cruise altitude."""
        return self._intf.set_property(IAgAvtrArcAltitudeOptions._metadata, IAgAvtrArcAltitudeOptions._set_UseDefaultCruiseAltitude_metadata, newVal)

    _get_StartArcAltitude_metadata = { "name" : "StartArcAltitude",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def StartArcAltitude(self) -> float:
        """The altitude at the beginning of the arc."""
        return self._intf.get_property(IAgAvtrArcAltitudeOptions._metadata, IAgAvtrArcAltitudeOptions._get_StartArcAltitude_metadata)

    _set_StartArcAltitude_metadata = { "name" : "StartArcAltitude",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @StartArcAltitude.setter
    def StartArcAltitude(self, newVal:float) -> None:
        """The altitude at the beginning of the arc."""
        return self._intf.set_property(IAgAvtrArcAltitudeOptions._metadata, IAgAvtrArcAltitudeOptions._set_StartArcAltitude_metadata, newVal)

    _get_StopArcAltitude_metadata = { "name" : "StopArcAltitude",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def StopArcAltitude(self) -> float:
        """The altitude at the end of the arc."""
        return self._intf.get_property(IAgAvtrArcAltitudeOptions._metadata, IAgAvtrArcAltitudeOptions._get_StopArcAltitude_metadata)

    _set_StopArcAltitude_metadata = { "name" : "StopArcAltitude",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @StopArcAltitude.setter
    def StopArcAltitude(self, newVal:float) -> None:
        """The altitude at the end of the arc."""
        return self._intf.set_property(IAgAvtrArcAltitudeOptions._metadata, IAgAvtrArcAltitudeOptions._set_StopArcAltitude_metadata, newVal)


agcls.AgClassCatalog.add_catalog_entry("{5aa7a535-fbc0-49b5-99e7-c93309863a6d}", IAgAvtrArcAltitudeOptions)
agcls.AgTypeNameMap["IAgAvtrArcAltitudeOptions"] = IAgAvtrArcAltitudeOptions

class IAgAvtrArcAltitudeAndDelayOptions(object):
    """Interface used to access the altitude options for an Arc procedure."""
    _num_methods = 8
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{826dc7a9-7fad-46a9-8587-7b879ea6d53e}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_UseDefaultCruiseAltitude" : 1,
                             "set_UseDefaultCruiseAltitude" : 2,
                             "get_DelayArcClimbDescents" : 3,
                             "set_DelayArcClimbDescents" : 4,
                             "get_StartArcAltitude" : 5,
                             "set_StartArcAltitude" : 6,
                             "get_StopArcAltitude" : 7,
                             "set_StopArcAltitude" : 8, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrArcAltitudeAndDelayOptions._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrArcAltitudeAndDelayOptions from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrArcAltitudeAndDelayOptions.__dict__ and type(IAgAvtrArcAltitudeAndDelayOptions.__dict__[attrname]) == property:
            return IAgAvtrArcAltitudeAndDelayOptions.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrArcAltitudeAndDelayOptions.")
    
    _get_UseDefaultCruiseAltitude_metadata = { "name" : "UseDefaultCruiseAltitude",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def UseDefaultCruiseAltitude(self) -> bool:
        """Opt whether to use the default cruise altitude."""
        return self._intf.get_property(IAgAvtrArcAltitudeAndDelayOptions._metadata, IAgAvtrArcAltitudeAndDelayOptions._get_UseDefaultCruiseAltitude_metadata)

    _set_UseDefaultCruiseAltitude_metadata = { "name" : "UseDefaultCruiseAltitude",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @UseDefaultCruiseAltitude.setter
    def UseDefaultCruiseAltitude(self, newVal:bool) -> None:
        """Opt whether to use the default cruise altitude."""
        return self._intf.set_property(IAgAvtrArcAltitudeAndDelayOptions._metadata, IAgAvtrArcAltitudeAndDelayOptions._set_UseDefaultCruiseAltitude_metadata, newVal)

    _get_DelayArcClimbDescents_metadata = { "name" : "DelayArcClimbDescents",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def DelayArcClimbDescents(self) -> bool:
        """Delay the climb/descend such that the stop arc altitude will be achieved by the end of the procedure."""
        return self._intf.get_property(IAgAvtrArcAltitudeAndDelayOptions._metadata, IAgAvtrArcAltitudeAndDelayOptions._get_DelayArcClimbDescents_metadata)

    _set_DelayArcClimbDescents_metadata = { "name" : "DelayArcClimbDescents",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @DelayArcClimbDescents.setter
    def DelayArcClimbDescents(self, newVal:bool) -> None:
        """Delay the climb/descend such that the stop arc altitude will be achieved by the end of the procedure."""
        return self._intf.set_property(IAgAvtrArcAltitudeAndDelayOptions._metadata, IAgAvtrArcAltitudeAndDelayOptions._set_DelayArcClimbDescents_metadata, newVal)

    _get_StartArcAltitude_metadata = { "name" : "StartArcAltitude",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def StartArcAltitude(self) -> float:
        """The altitude at the beginning of the arc."""
        return self._intf.get_property(IAgAvtrArcAltitudeAndDelayOptions._metadata, IAgAvtrArcAltitudeAndDelayOptions._get_StartArcAltitude_metadata)

    _set_StartArcAltitude_metadata = { "name" : "StartArcAltitude",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @StartArcAltitude.setter
    def StartArcAltitude(self, newVal:float) -> None:
        """The altitude at the beginning of the arc."""
        return self._intf.set_property(IAgAvtrArcAltitudeAndDelayOptions._metadata, IAgAvtrArcAltitudeAndDelayOptions._set_StartArcAltitude_metadata, newVal)

    _get_StopArcAltitude_metadata = { "name" : "StopArcAltitude",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def StopArcAltitude(self) -> float:
        """The altitude at the end of the arc."""
        return self._intf.get_property(IAgAvtrArcAltitudeAndDelayOptions._metadata, IAgAvtrArcAltitudeAndDelayOptions._get_StopArcAltitude_metadata)

    _set_StopArcAltitude_metadata = { "name" : "StopArcAltitude",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @StopArcAltitude.setter
    def StopArcAltitude(self, newVal:float) -> None:
        """The altitude at the end of the arc."""
        return self._intf.set_property(IAgAvtrArcAltitudeAndDelayOptions._metadata, IAgAvtrArcAltitudeAndDelayOptions._set_StopArcAltitude_metadata, newVal)


agcls.AgClassCatalog.add_catalog_entry("{826dc7a9-7fad-46a9-8587-7b879ea6d53e}", IAgAvtrArcAltitudeAndDelayOptions)
agcls.AgTypeNameMap["IAgAvtrArcAltitudeAndDelayOptions"] = IAgAvtrArcAltitudeAndDelayOptions

class IAgAvtrArcOptions(object):
    """Interface used to access the arc options for a procedure."""
    _num_methods = 14
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{436c4ca7-5994-43bf-a975-a9c29c328ec0}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_TurnDirection" : 1,
                             "set_TurnDirection" : 2,
                             "get_StartBearing" : 3,
                             "set_StartBearing" : 4,
                             "get_UseMagneticHeading" : 5,
                             "set_UseMagneticHeading" : 6,
                             "get_Radius" : 7,
                             "set_Radius" : 8,
                             "get_TurnAngle" : 9,
                             "set_TurnAngle" : 10,
                             "get_JoinArc" : 11,
                             "set_JoinArc" : 12,
                             "get_ExitArc" : 13,
                             "set_ExitArc" : 14, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrArcOptions._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrArcOptions from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrArcOptions.__dict__ and type(IAgAvtrArcOptions.__dict__[attrname]) == property:
            return IAgAvtrArcOptions.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrArcOptions.")
    
    _get_TurnDirection_metadata = { "name" : "TurnDirection",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrTurnDirection),) }
    @property
    def TurnDirection(self) -> "AgEAvtrTurnDirection":
        """The turn direction to the arc."""
        return self._intf.get_property(IAgAvtrArcOptions._metadata, IAgAvtrArcOptions._get_TurnDirection_metadata)

    _set_TurnDirection_metadata = { "name" : "TurnDirection",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrTurnDirection),) }
    @TurnDirection.setter
    def TurnDirection(self, newVal:"AgEAvtrTurnDirection") -> None:
        """The turn direction to the arc."""
        return self._intf.set_property(IAgAvtrArcOptions._metadata, IAgAvtrArcOptions._set_TurnDirection_metadata, newVal)

    _get_StartBearing_metadata = { "name" : "StartBearing",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def StartBearing(self) -> typing.Any:
        """The bearing from the site to the arc."""
        return self._intf.get_property(IAgAvtrArcOptions._metadata, IAgAvtrArcOptions._get_StartBearing_metadata)

    _set_StartBearing_metadata = { "name" : "StartBearing",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @StartBearing.setter
    def StartBearing(self, newVal:typing.Any) -> None:
        """The bearing from the site to the arc."""
        return self._intf.set_property(IAgAvtrArcOptions._metadata, IAgAvtrArcOptions._set_StartBearing_metadata, newVal)

    _get_UseMagneticHeading_metadata = { "name" : "UseMagneticHeading",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def UseMagneticHeading(self) -> bool:
        """The option to use a magnetic heading for the start bearing."""
        return self._intf.get_property(IAgAvtrArcOptions._metadata, IAgAvtrArcOptions._get_UseMagneticHeading_metadata)

    _set_UseMagneticHeading_metadata = { "name" : "UseMagneticHeading",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @UseMagneticHeading.setter
    def UseMagneticHeading(self, newVal:bool) -> None:
        """The option to use a magnetic heading for the start bearing."""
        return self._intf.set_property(IAgAvtrArcOptions._metadata, IAgAvtrArcOptions._set_UseMagneticHeading_metadata, newVal)

    _get_Radius_metadata = { "name" : "Radius",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def Radius(self) -> float:
        """The radius of the arc."""
        return self._intf.get_property(IAgAvtrArcOptions._metadata, IAgAvtrArcOptions._get_Radius_metadata)

    _set_Radius_metadata = { "name" : "Radius",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @Radius.setter
    def Radius(self, newVal:float) -> None:
        """The radius of the arc."""
        return self._intf.set_property(IAgAvtrArcOptions._metadata, IAgAvtrArcOptions._set_Radius_metadata, newVal)

    _get_TurnAngle_metadata = { "name" : "TurnAngle",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def TurnAngle(self) -> typing.Any:
        """The length of the arc the aircraft will fly."""
        return self._intf.get_property(IAgAvtrArcOptions._metadata, IAgAvtrArcOptions._get_TurnAngle_metadata)

    _set_TurnAngle_metadata = { "name" : "TurnAngle",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @TurnAngle.setter
    def TurnAngle(self, newVal:typing.Any) -> None:
        """The length of the arc the aircraft will fly."""
        return self._intf.set_property(IAgAvtrArcOptions._metadata, IAgAvtrArcOptions._set_TurnAngle_metadata, newVal)

    _get_JoinArc_metadata = { "name" : "JoinArc",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrJoinExitArcMethod),) }
    @property
    def JoinArc(self) -> "AgEAvtrJoinExitArcMethod":
        """The method to join the arc."""
        return self._intf.get_property(IAgAvtrArcOptions._metadata, IAgAvtrArcOptions._get_JoinArc_metadata)

    _set_JoinArc_metadata = { "name" : "JoinArc",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrJoinExitArcMethod),) }
    @JoinArc.setter
    def JoinArc(self, newVal:"AgEAvtrJoinExitArcMethod") -> None:
        """The method to join the arc."""
        return self._intf.set_property(IAgAvtrArcOptions._metadata, IAgAvtrArcOptions._set_JoinArc_metadata, newVal)

    _get_ExitArc_metadata = { "name" : "ExitArc",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrJoinExitArcMethod),) }
    @property
    def ExitArc(self) -> "AgEAvtrJoinExitArcMethod":
        """The method to exit the arc."""
        return self._intf.get_property(IAgAvtrArcOptions._metadata, IAgAvtrArcOptions._get_ExitArc_metadata)

    _set_ExitArc_metadata = { "name" : "ExitArc",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrJoinExitArcMethod),) }
    @ExitArc.setter
    def ExitArc(self, newVal:"AgEAvtrJoinExitArcMethod") -> None:
        """The method to exit the arc."""
        return self._intf.set_property(IAgAvtrArcOptions._metadata, IAgAvtrArcOptions._set_ExitArc_metadata, newVal)


agcls.AgClassCatalog.add_catalog_entry("{436c4ca7-5994-43bf-a975-a9c29c328ec0}", IAgAvtrArcOptions)
agcls.AgTypeNameMap["IAgAvtrArcOptions"] = IAgAvtrArcOptions

class IAgAvtrVerticalPlaneOptions(object):
    """Interface used to access the Vertical Plane options for an Aviator procedure."""
    _num_methods = 6
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{2f4e9933-f0e0-4c9c-96ad-7b210faf7a05}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_MinEnrouteFlightPathAngle" : 1,
                             "set_MinEnrouteFlightPathAngle" : 2,
                             "get_MaxEnrouteFlightPathAngle" : 3,
                             "set_MaxEnrouteFlightPathAngle" : 4,
                             "get_MaxVertPlaneRadiusFactor" : 5,
                             "set_MaxVertPlaneRadiusFactor" : 6, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrVerticalPlaneOptions._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrVerticalPlaneOptions from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrVerticalPlaneOptions.__dict__ and type(IAgAvtrVerticalPlaneOptions.__dict__[attrname]) == property:
            return IAgAvtrVerticalPlaneOptions.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrVerticalPlaneOptions.")
    
    _get_MinEnrouteFlightPathAngle_metadata = { "name" : "MinEnrouteFlightPathAngle",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def MinEnrouteFlightPathAngle(self) -> typing.Any:
        """The minimum pitch angle of the flight path during enroute segments of the procedure."""
        return self._intf.get_property(IAgAvtrVerticalPlaneOptions._metadata, IAgAvtrVerticalPlaneOptions._get_MinEnrouteFlightPathAngle_metadata)

    _set_MinEnrouteFlightPathAngle_metadata = { "name" : "MinEnrouteFlightPathAngle",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @MinEnrouteFlightPathAngle.setter
    def MinEnrouteFlightPathAngle(self, newVal:typing.Any) -> None:
        """The minimum pitch angle of the flight path during enroute segments of the procedure."""
        return self._intf.set_property(IAgAvtrVerticalPlaneOptions._metadata, IAgAvtrVerticalPlaneOptions._set_MinEnrouteFlightPathAngle_metadata, newVal)

    _get_MaxEnrouteFlightPathAngle_metadata = { "name" : "MaxEnrouteFlightPathAngle",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def MaxEnrouteFlightPathAngle(self) -> typing.Any:
        """The maximum pitch angle of the flight path during enroute segments of the procedure."""
        return self._intf.get_property(IAgAvtrVerticalPlaneOptions._metadata, IAgAvtrVerticalPlaneOptions._get_MaxEnrouteFlightPathAngle_metadata)

    _set_MaxEnrouteFlightPathAngle_metadata = { "name" : "MaxEnrouteFlightPathAngle",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @MaxEnrouteFlightPathAngle.setter
    def MaxEnrouteFlightPathAngle(self, newVal:typing.Any) -> None:
        """The maximum pitch angle of the flight path during enroute segments of the procedure."""
        return self._intf.set_property(IAgAvtrVerticalPlaneOptions._metadata, IAgAvtrVerticalPlaneOptions._set_MaxEnrouteFlightPathAngle_metadata, newVal)

    _get_MaxVertPlaneRadiusFactor_metadata = { "name" : "MaxVertPlaneRadiusFactor",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def MaxVertPlaneRadiusFactor(self) -> float:
        """The maximum amount the radius of vertical curve will be increased to minimize the flight path angle required to complete it."""
        return self._intf.get_property(IAgAvtrVerticalPlaneOptions._metadata, IAgAvtrVerticalPlaneOptions._get_MaxVertPlaneRadiusFactor_metadata)

    _set_MaxVertPlaneRadiusFactor_metadata = { "name" : "MaxVertPlaneRadiusFactor",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @MaxVertPlaneRadiusFactor.setter
    def MaxVertPlaneRadiusFactor(self, newVal:float) -> None:
        """The maximum amount the radius of vertical curve will be increased to minimize the flight path angle required to complete it."""
        return self._intf.set_property(IAgAvtrVerticalPlaneOptions._metadata, IAgAvtrVerticalPlaneOptions._set_MaxVertPlaneRadiusFactor_metadata, newVal)


agcls.AgClassCatalog.add_catalog_entry("{2f4e9933-f0e0-4c9c-96ad-7b210faf7a05}", IAgAvtrVerticalPlaneOptions)
agcls.AgTypeNameMap["IAgAvtrVerticalPlaneOptions"] = IAgAvtrVerticalPlaneOptions

class IAgAvtrVerticalPlaneAndFlightPathOptions(object):
    """Interface used to access the Vertical Plane and Final Flight Path Angle options for an Aviator procedure."""
    _num_methods = 8
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{4a177d89-4a7d-4388-a5db-05a9b35ebece}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_FinalFlightPathAngle" : 1,
                             "set_FinalFlightPathAngle" : 2,
                             "get_MinEnrouteFlightPathAngle" : 3,
                             "set_MinEnrouteFlightPathAngle" : 4,
                             "get_MaxEnrouteFlightPathAngle" : 5,
                             "set_MaxEnrouteFlightPathAngle" : 6,
                             "get_MaxVertPlaneRadiusFactor" : 7,
                             "set_MaxVertPlaneRadiusFactor" : 8, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrVerticalPlaneAndFlightPathOptions._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrVerticalPlaneAndFlightPathOptions from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrVerticalPlaneAndFlightPathOptions.__dict__ and type(IAgAvtrVerticalPlaneAndFlightPathOptions.__dict__[attrname]) == property:
            return IAgAvtrVerticalPlaneAndFlightPathOptions.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrVerticalPlaneAndFlightPathOptions.")
    
    _get_FinalFlightPathAngle_metadata = { "name" : "FinalFlightPathAngle",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def FinalFlightPathAngle(self) -> typing.Any:
        """The pitch angle of the flight path at the end of the procedure."""
        return self._intf.get_property(IAgAvtrVerticalPlaneAndFlightPathOptions._metadata, IAgAvtrVerticalPlaneAndFlightPathOptions._get_FinalFlightPathAngle_metadata)

    _set_FinalFlightPathAngle_metadata = { "name" : "FinalFlightPathAngle",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @FinalFlightPathAngle.setter
    def FinalFlightPathAngle(self, newVal:typing.Any) -> None:
        """The pitch angle of the flight path at the end of the procedure."""
        return self._intf.set_property(IAgAvtrVerticalPlaneAndFlightPathOptions._metadata, IAgAvtrVerticalPlaneAndFlightPathOptions._set_FinalFlightPathAngle_metadata, newVal)

    _get_MinEnrouteFlightPathAngle_metadata = { "name" : "MinEnrouteFlightPathAngle",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def MinEnrouteFlightPathAngle(self) -> typing.Any:
        """The minimum pitch angle of the flight path during enroute segments of the procedure."""
        return self._intf.get_property(IAgAvtrVerticalPlaneAndFlightPathOptions._metadata, IAgAvtrVerticalPlaneAndFlightPathOptions._get_MinEnrouteFlightPathAngle_metadata)

    _set_MinEnrouteFlightPathAngle_metadata = { "name" : "MinEnrouteFlightPathAngle",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @MinEnrouteFlightPathAngle.setter
    def MinEnrouteFlightPathAngle(self, newVal:typing.Any) -> None:
        """The minimum pitch angle of the flight path during enroute segments of the procedure."""
        return self._intf.set_property(IAgAvtrVerticalPlaneAndFlightPathOptions._metadata, IAgAvtrVerticalPlaneAndFlightPathOptions._set_MinEnrouteFlightPathAngle_metadata, newVal)

    _get_MaxEnrouteFlightPathAngle_metadata = { "name" : "MaxEnrouteFlightPathAngle",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def MaxEnrouteFlightPathAngle(self) -> typing.Any:
        """The maximum pitch angle of the flight path during enroute segments of the procedure."""
        return self._intf.get_property(IAgAvtrVerticalPlaneAndFlightPathOptions._metadata, IAgAvtrVerticalPlaneAndFlightPathOptions._get_MaxEnrouteFlightPathAngle_metadata)

    _set_MaxEnrouteFlightPathAngle_metadata = { "name" : "MaxEnrouteFlightPathAngle",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @MaxEnrouteFlightPathAngle.setter
    def MaxEnrouteFlightPathAngle(self, newVal:typing.Any) -> None:
        """The maximum pitch angle of the flight path during enroute segments of the procedure."""
        return self._intf.set_property(IAgAvtrVerticalPlaneAndFlightPathOptions._metadata, IAgAvtrVerticalPlaneAndFlightPathOptions._set_MaxEnrouteFlightPathAngle_metadata, newVal)

    _get_MaxVertPlaneRadiusFactor_metadata = { "name" : "MaxVertPlaneRadiusFactor",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def MaxVertPlaneRadiusFactor(self) -> float:
        """The maximum amount the radius of vertical curve will be increased to minimize the flight path angle required to complete it."""
        return self._intf.get_property(IAgAvtrVerticalPlaneAndFlightPathOptions._metadata, IAgAvtrVerticalPlaneAndFlightPathOptions._get_MaxVertPlaneRadiusFactor_metadata)

    _set_MaxVertPlaneRadiusFactor_metadata = { "name" : "MaxVertPlaneRadiusFactor",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @MaxVertPlaneRadiusFactor.setter
    def MaxVertPlaneRadiusFactor(self, newVal:float) -> None:
        """The maximum amount the radius of vertical curve will be increased to minimize the flight path angle required to complete it."""
        return self._intf.set_property(IAgAvtrVerticalPlaneAndFlightPathOptions._metadata, IAgAvtrVerticalPlaneAndFlightPathOptions._set_MaxVertPlaneRadiusFactor_metadata, newVal)


agcls.AgClassCatalog.add_catalog_entry("{4a177d89-4a7d-4388-a5db-05a9b35ebece}", IAgAvtrVerticalPlaneAndFlightPathOptions)
agcls.AgTypeNameMap["IAgAvtrVerticalPlaneAndFlightPathOptions"] = IAgAvtrVerticalPlaneAndFlightPathOptions

class IAgAvtrArcVerticalPlaneOptions(object):
    """Interface used to access the Vertical Plane options for an arc procedure."""
    _num_methods = 10
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{402feacd-0f43-4af6-8c56-9aa61240e2b0}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_StartArcFlightPathAngle" : 1,
                             "set_StartArcFlightPathAngle" : 2,
                             "get_StopArcFlightPathAngle" : 3,
                             "set_StopArcFlightPathAngle" : 4,
                             "get_MinEnrouteFlightPathAngle" : 5,
                             "set_MinEnrouteFlightPathAngle" : 6,
                             "get_MaxEnrouteFlightPathAngle" : 7,
                             "set_MaxEnrouteFlightPathAngle" : 8,
                             "get_MaxVertPlaneRadiusFactor" : 9,
                             "set_MaxVertPlaneRadiusFactor" : 10, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrArcVerticalPlaneOptions._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrArcVerticalPlaneOptions from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrArcVerticalPlaneOptions.__dict__ and type(IAgAvtrArcVerticalPlaneOptions.__dict__[attrname]) == property:
            return IAgAvtrArcVerticalPlaneOptions.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrArcVerticalPlaneOptions.")
    
    _get_StartArcFlightPathAngle_metadata = { "name" : "StartArcFlightPathAngle",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def StartArcFlightPathAngle(self) -> typing.Any:
        """The pitch angle of the flight path at the start of the arc."""
        return self._intf.get_property(IAgAvtrArcVerticalPlaneOptions._metadata, IAgAvtrArcVerticalPlaneOptions._get_StartArcFlightPathAngle_metadata)

    _set_StartArcFlightPathAngle_metadata = { "name" : "StartArcFlightPathAngle",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @StartArcFlightPathAngle.setter
    def StartArcFlightPathAngle(self, newVal:typing.Any) -> None:
        """The pitch angle of the flight path at the start of the arc."""
        return self._intf.set_property(IAgAvtrArcVerticalPlaneOptions._metadata, IAgAvtrArcVerticalPlaneOptions._set_StartArcFlightPathAngle_metadata, newVal)

    _get_StopArcFlightPathAngle_metadata = { "name" : "StopArcFlightPathAngle",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def StopArcFlightPathAngle(self) -> typing.Any:
        """The pitch angle of the flight path at the end of the arc."""
        return self._intf.get_property(IAgAvtrArcVerticalPlaneOptions._metadata, IAgAvtrArcVerticalPlaneOptions._get_StopArcFlightPathAngle_metadata)

    _set_StopArcFlightPathAngle_metadata = { "name" : "StopArcFlightPathAngle",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @StopArcFlightPathAngle.setter
    def StopArcFlightPathAngle(self, newVal:typing.Any) -> None:
        """The pitch angle of the flight path at the end of the arc."""
        return self._intf.set_property(IAgAvtrArcVerticalPlaneOptions._metadata, IAgAvtrArcVerticalPlaneOptions._set_StopArcFlightPathAngle_metadata, newVal)

    _get_MinEnrouteFlightPathAngle_metadata = { "name" : "MinEnrouteFlightPathAngle",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def MinEnrouteFlightPathAngle(self) -> typing.Any:
        """The minimum pitch angle of the flight path during enroute segments of the procedure."""
        return self._intf.get_property(IAgAvtrArcVerticalPlaneOptions._metadata, IAgAvtrArcVerticalPlaneOptions._get_MinEnrouteFlightPathAngle_metadata)

    _set_MinEnrouteFlightPathAngle_metadata = { "name" : "MinEnrouteFlightPathAngle",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @MinEnrouteFlightPathAngle.setter
    def MinEnrouteFlightPathAngle(self, newVal:typing.Any) -> None:
        """The minimum pitch angle of the flight path during enroute segments of the procedure."""
        return self._intf.set_property(IAgAvtrArcVerticalPlaneOptions._metadata, IAgAvtrArcVerticalPlaneOptions._set_MinEnrouteFlightPathAngle_metadata, newVal)

    _get_MaxEnrouteFlightPathAngle_metadata = { "name" : "MaxEnrouteFlightPathAngle",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def MaxEnrouteFlightPathAngle(self) -> typing.Any:
        """The maximum pitch angle of the flight path during enroute segments of the procedure."""
        return self._intf.get_property(IAgAvtrArcVerticalPlaneOptions._metadata, IAgAvtrArcVerticalPlaneOptions._get_MaxEnrouteFlightPathAngle_metadata)

    _set_MaxEnrouteFlightPathAngle_metadata = { "name" : "MaxEnrouteFlightPathAngle",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @MaxEnrouteFlightPathAngle.setter
    def MaxEnrouteFlightPathAngle(self, newVal:typing.Any) -> None:
        """The maximum pitch angle of the flight path during enroute segments of the procedure."""
        return self._intf.set_property(IAgAvtrArcVerticalPlaneOptions._metadata, IAgAvtrArcVerticalPlaneOptions._set_MaxEnrouteFlightPathAngle_metadata, newVal)

    _get_MaxVertPlaneRadiusFactor_metadata = { "name" : "MaxVertPlaneRadiusFactor",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def MaxVertPlaneRadiusFactor(self) -> float:
        """The maximum amount the radius of vertical curve will be increased to minimize the flight path angle required to complete it."""
        return self._intf.get_property(IAgAvtrArcVerticalPlaneOptions._metadata, IAgAvtrArcVerticalPlaneOptions._get_MaxVertPlaneRadiusFactor_metadata)

    _set_MaxVertPlaneRadiusFactor_metadata = { "name" : "MaxVertPlaneRadiusFactor",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @MaxVertPlaneRadiusFactor.setter
    def MaxVertPlaneRadiusFactor(self, newVal:float) -> None:
        """The maximum amount the radius of vertical curve will be increased to minimize the flight path angle required to complete it."""
        return self._intf.set_property(IAgAvtrArcVerticalPlaneOptions._metadata, IAgAvtrArcVerticalPlaneOptions._set_MaxVertPlaneRadiusFactor_metadata, newVal)


agcls.AgClassCatalog.add_catalog_entry("{402feacd-0f43-4af6-8c56-9aa61240e2b0}", IAgAvtrArcVerticalPlaneOptions)
agcls.AgTypeNameMap["IAgAvtrArcVerticalPlaneOptions"] = IAgAvtrArcVerticalPlaneOptions

class IAgAvtrEnrouteOptions(object):
    """Interface used to access the Enroute options for an Aviator procedure."""
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{cd8774fa-5dd0-4ac6-8292-0914fa1cff61}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_UseMaxSpeedTurns" : 1,
                             "set_UseMaxSpeedTurns" : 2,
                             "get_MaxTurnRadiusFactor" : 3,
                             "set_MaxTurnRadiusFactor" : 4, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrEnrouteOptions._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrEnrouteOptions from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrEnrouteOptions.__dict__ and type(IAgAvtrEnrouteOptions.__dict__[attrname]) == property:
            return IAgAvtrEnrouteOptions.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrEnrouteOptions.")
    
    _get_UseMaxSpeedTurns_metadata = { "name" : "UseMaxSpeedTurns",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def UseMaxSpeedTurns(self) -> bool:
        """Opt whether to use the max speed turns."""
        return self._intf.get_property(IAgAvtrEnrouteOptions._metadata, IAgAvtrEnrouteOptions._get_UseMaxSpeedTurns_metadata)

    _set_UseMaxSpeedTurns_metadata = { "name" : "UseMaxSpeedTurns",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @UseMaxSpeedTurns.setter
    def UseMaxSpeedTurns(self, newVal:bool) -> None:
        """Opt whether to use the max speed turns."""
        return self._intf.set_property(IAgAvtrEnrouteOptions._metadata, IAgAvtrEnrouteOptions._set_UseMaxSpeedTurns_metadata, newVal)

    _get_MaxTurnRadiusFactor_metadata = { "name" : "MaxTurnRadiusFactor",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def MaxTurnRadiusFactor(self) -> float:
        """The maximum turn radius factor."""
        return self._intf.get_property(IAgAvtrEnrouteOptions._metadata, IAgAvtrEnrouteOptions._get_MaxTurnRadiusFactor_metadata)

    _set_MaxTurnRadiusFactor_metadata = { "name" : "MaxTurnRadiusFactor",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @MaxTurnRadiusFactor.setter
    def MaxTurnRadiusFactor(self, newVal:float) -> None:
        """The maximum turn radius factor."""
        return self._intf.set_property(IAgAvtrEnrouteOptions._metadata, IAgAvtrEnrouteOptions._set_MaxTurnRadiusFactor_metadata, newVal)


agcls.AgClassCatalog.add_catalog_entry("{cd8774fa-5dd0-4ac6-8292-0914fa1cff61}", IAgAvtrEnrouteOptions)
agcls.AgTypeNameMap["IAgAvtrEnrouteOptions"] = IAgAvtrEnrouteOptions

class IAgAvtrEnrouteAndDelayOptions(object):
    """Interface used to access the Enroute options for an Aviator procedure."""
    _num_methods = 6
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{cabcbefb-211d-4657-a9eb-fec703b42b11}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_DelayEnrouteClimbDescents" : 1,
                             "set_DelayEnrouteClimbDescents" : 2,
                             "get_UseMaxSpeedTurns" : 3,
                             "set_UseMaxSpeedTurns" : 4,
                             "get_MaxTurnRadiusFactor" : 5,
                             "set_MaxTurnRadiusFactor" : 6, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrEnrouteAndDelayOptions._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrEnrouteAndDelayOptions from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrEnrouteAndDelayOptions.__dict__ and type(IAgAvtrEnrouteAndDelayOptions.__dict__[attrname]) == property:
            return IAgAvtrEnrouteAndDelayOptions.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrEnrouteAndDelayOptions.")
    
    _get_DelayEnrouteClimbDescents_metadata = { "name" : "DelayEnrouteClimbDescents",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def DelayEnrouteClimbDescents(self) -> bool:
        """Opt whether to delay the enroute climb or descent."""
        return self._intf.get_property(IAgAvtrEnrouteAndDelayOptions._metadata, IAgAvtrEnrouteAndDelayOptions._get_DelayEnrouteClimbDescents_metadata)

    _set_DelayEnrouteClimbDescents_metadata = { "name" : "DelayEnrouteClimbDescents",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @DelayEnrouteClimbDescents.setter
    def DelayEnrouteClimbDescents(self, newVal:bool) -> None:
        """Opt whether to delay the enroute climb or descent."""
        return self._intf.set_property(IAgAvtrEnrouteAndDelayOptions._metadata, IAgAvtrEnrouteAndDelayOptions._set_DelayEnrouteClimbDescents_metadata, newVal)

    _get_UseMaxSpeedTurns_metadata = { "name" : "UseMaxSpeedTurns",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def UseMaxSpeedTurns(self) -> bool:
        """Opt whether to use the max speed turns."""
        return self._intf.get_property(IAgAvtrEnrouteAndDelayOptions._metadata, IAgAvtrEnrouteAndDelayOptions._get_UseMaxSpeedTurns_metadata)

    _set_UseMaxSpeedTurns_metadata = { "name" : "UseMaxSpeedTurns",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @UseMaxSpeedTurns.setter
    def UseMaxSpeedTurns(self, newVal:bool) -> None:
        """Opt whether to use the max speed turns."""
        return self._intf.set_property(IAgAvtrEnrouteAndDelayOptions._metadata, IAgAvtrEnrouteAndDelayOptions._set_UseMaxSpeedTurns_metadata, newVal)

    _get_MaxTurnRadiusFactor_metadata = { "name" : "MaxTurnRadiusFactor",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def MaxTurnRadiusFactor(self) -> float:
        """The maximum turn radius factor."""
        return self._intf.get_property(IAgAvtrEnrouteAndDelayOptions._metadata, IAgAvtrEnrouteAndDelayOptions._get_MaxTurnRadiusFactor_metadata)

    _set_MaxTurnRadiusFactor_metadata = { "name" : "MaxTurnRadiusFactor",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @MaxTurnRadiusFactor.setter
    def MaxTurnRadiusFactor(self, newVal:float) -> None:
        """The maximum turn radius factor."""
        return self._intf.set_property(IAgAvtrEnrouteAndDelayOptions._metadata, IAgAvtrEnrouteAndDelayOptions._set_MaxTurnRadiusFactor_metadata, newVal)


agcls.AgClassCatalog.add_catalog_entry("{cabcbefb-211d-4657-a9eb-fec703b42b11}", IAgAvtrEnrouteAndDelayOptions)
agcls.AgTypeNameMap["IAgAvtrEnrouteAndDelayOptions"] = IAgAvtrEnrouteAndDelayOptions

class IAgAvtrEnrouteTurnDirectionOptions(object):
    """Interface used to access the Enroute Turn Direction options for an Aviator procedure."""
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{cfb34c54-d768-42f8-a7bc-1a079bdea24e}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_EnrouteFirstTurn" : 1,
                             "set_EnrouteFirstTurn" : 2,
                             "get_EnrouteSecondTurn" : 3,
                             "set_EnrouteSecondTurn" : 4, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrEnrouteTurnDirectionOptions._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrEnrouteTurnDirectionOptions from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrEnrouteTurnDirectionOptions.__dict__ and type(IAgAvtrEnrouteTurnDirectionOptions.__dict__[attrname]) == property:
            return IAgAvtrEnrouteTurnDirectionOptions.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrEnrouteTurnDirectionOptions.")
    
    _get_EnrouteFirstTurn_metadata = { "name" : "EnrouteFirstTurn",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrNavigatorTurnDir),) }
    @property
    def EnrouteFirstTurn(self) -> "AgEAvtrNavigatorTurnDir":
        """Option for the first turn."""
        return self._intf.get_property(IAgAvtrEnrouteTurnDirectionOptions._metadata, IAgAvtrEnrouteTurnDirectionOptions._get_EnrouteFirstTurn_metadata)

    _set_EnrouteFirstTurn_metadata = { "name" : "EnrouteFirstTurn",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrNavigatorTurnDir),) }
    @EnrouteFirstTurn.setter
    def EnrouteFirstTurn(self, newVal:"AgEAvtrNavigatorTurnDir") -> None:
        """Option for the first turn."""
        return self._intf.set_property(IAgAvtrEnrouteTurnDirectionOptions._metadata, IAgAvtrEnrouteTurnDirectionOptions._set_EnrouteFirstTurn_metadata, newVal)

    _get_EnrouteSecondTurn_metadata = { "name" : "EnrouteSecondTurn",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrNavigatorTurnDir),) }
    @property
    def EnrouteSecondTurn(self) -> "AgEAvtrNavigatorTurnDir":
        """Option for the second turn."""
        return self._intf.get_property(IAgAvtrEnrouteTurnDirectionOptions._metadata, IAgAvtrEnrouteTurnDirectionOptions._get_EnrouteSecondTurn_metadata)

    _set_EnrouteSecondTurn_metadata = { "name" : "EnrouteSecondTurn",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrNavigatorTurnDir),) }
    @EnrouteSecondTurn.setter
    def EnrouteSecondTurn(self, newVal:"AgEAvtrNavigatorTurnDir") -> None:
        """Option for the second turn."""
        return self._intf.set_property(IAgAvtrEnrouteTurnDirectionOptions._metadata, IAgAvtrEnrouteTurnDirectionOptions._set_EnrouteSecondTurn_metadata, newVal)


agcls.AgClassCatalog.add_catalog_entry("{cfb34c54-d768-42f8-a7bc-1a079bdea24e}", IAgAvtrEnrouteTurnDirectionOptions)
agcls.AgTypeNameMap["IAgAvtrEnrouteTurnDirectionOptions"] = IAgAvtrEnrouteTurnDirectionOptions

class IAgAvtrCruiseAirspeedOptions(object):
    """Interface used to access the Cruise Airspeed options for an Aviator procedure."""
    _num_methods = 5
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{8c88b752-5739-4244-9db7-9fd404b3c0c6}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_CruiseSpeedType" : 1,
                             "set_CruiseSpeedType" : 2,
                             "get_OtherAirspeedType" : 3,
                             "get_OtherAirspeed" : 4,
                             "SetOtherAirspeed" : 5, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrCruiseAirspeedOptions._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrCruiseAirspeedOptions from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrCruiseAirspeedOptions.__dict__ and type(IAgAvtrCruiseAirspeedOptions.__dict__[attrname]) == property:
            return IAgAvtrCruiseAirspeedOptions.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrCruiseAirspeedOptions.")
    
    _get_CruiseSpeedType_metadata = { "name" : "CruiseSpeedType",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrCruiseSpeed),) }
    @property
    def CruiseSpeedType(self) -> "AgEAvtrCruiseSpeed":
        """The method for determining the aircraft's airspeed."""
        return self._intf.get_property(IAgAvtrCruiseAirspeedOptions._metadata, IAgAvtrCruiseAirspeedOptions._get_CruiseSpeedType_metadata)

    _set_CruiseSpeedType_metadata = { "name" : "CruiseSpeedType",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrCruiseSpeed),) }
    @CruiseSpeedType.setter
    def CruiseSpeedType(self, newVal:"AgEAvtrCruiseSpeed") -> None:
        """The method for determining the aircraft's airspeed."""
        return self._intf.set_property(IAgAvtrCruiseAirspeedOptions._metadata, IAgAvtrCruiseAirspeedOptions._set_CruiseSpeedType_metadata, newVal)

    _get_OtherAirspeedType_metadata = { "name" : "OtherAirspeedType",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrAirspeedType),) }
    @property
    def OtherAirspeedType(self) -> "AgEAvtrAirspeedType":
        """The airspeed type for the other airspeed option."""
        return self._intf.get_property(IAgAvtrCruiseAirspeedOptions._metadata, IAgAvtrCruiseAirspeedOptions._get_OtherAirspeedType_metadata)

    _get_OtherAirspeed_metadata = { "name" : "OtherAirspeed",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def OtherAirspeed(self) -> float:
        """The airspeed for the other airspeed option."""
        return self._intf.get_property(IAgAvtrCruiseAirspeedOptions._metadata, IAgAvtrCruiseAirspeedOptions._get_OtherAirspeed_metadata)

    _SetOtherAirspeed_metadata = { "name" : "SetOtherAirspeed",
            "arg_types" : (agcom.LONG, agcom.DOUBLE,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrAirspeedType), agmarshall.DOUBLE_arg,) }
    def SetOtherAirspeed(self, airspeedType:"AgEAvtrAirspeedType", airspeed:float) -> None:
        """Set the cruise airspeed. This option is only enabled if the cruise speed type is set to other."""
        return self._intf.invoke(IAgAvtrCruiseAirspeedOptions._metadata, IAgAvtrCruiseAirspeedOptions._SetOtherAirspeed_metadata, airspeedType, airspeed)


agcls.AgClassCatalog.add_catalog_entry("{8c88b752-5739-4244-9db7-9fd404b3c0c6}", IAgAvtrCruiseAirspeedOptions)
agcls.AgTypeNameMap["IAgAvtrCruiseAirspeedOptions"] = IAgAvtrCruiseAirspeedOptions

class IAgAvtrCruiseAirspeedProfile(object):
    """Interface used to access the Cruise Profile options for an Aviator procedure"""
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{fc8fb409-7067-4474-9c5e-4a77ac894426}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_FlyCruiseAirspeedProfile" : 1,
                             "set_FlyCruiseAirspeedProfile" : 2, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrCruiseAirspeedProfile._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrCruiseAirspeedProfile from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrCruiseAirspeedProfile.__dict__ and type(IAgAvtrCruiseAirspeedProfile.__dict__[attrname]) == property:
            return IAgAvtrCruiseAirspeedProfile.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrCruiseAirspeedProfile.")
    
    _get_FlyCruiseAirspeedProfile_metadata = { "name" : "FlyCruiseAirspeedProfile",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def FlyCruiseAirspeedProfile(self) -> bool:
        """Opt whether the aircraft immediately adopts the selected cruise airspeed or gradually begins accelerating/decelerating in the previous procedure."""
        return self._intf.get_property(IAgAvtrCruiseAirspeedProfile._metadata, IAgAvtrCruiseAirspeedProfile._get_FlyCruiseAirspeedProfile_metadata)

    _set_FlyCruiseAirspeedProfile_metadata = { "name" : "FlyCruiseAirspeedProfile",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @FlyCruiseAirspeedProfile.setter
    def FlyCruiseAirspeedProfile(self, newVal:bool) -> None:
        """Opt whether the aircraft immediately adopts the selected cruise airspeed or gradually begins accelerating/decelerating in the previous procedure."""
        return self._intf.set_property(IAgAvtrCruiseAirspeedProfile._metadata, IAgAvtrCruiseAirspeedProfile._set_FlyCruiseAirspeedProfile_metadata, newVal)


agcls.AgClassCatalog.add_catalog_entry("{fc8fb409-7067-4474-9c5e-4a77ac894426}", IAgAvtrCruiseAirspeedProfile)
agcls.AgTypeNameMap["IAgAvtrCruiseAirspeedProfile"] = IAgAvtrCruiseAirspeedProfile

class IAgAvtrCruiseAirspeedAndProfileOptions(object):
    """Interface used to access the cruise airspeed options that also include a profile field."""
    _num_methods = 7
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{639730b3-bc2b-4615-afd6-8184af1fb948}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_CruiseSpeedType" : 1,
                             "set_CruiseSpeedType" : 2,
                             "get_OtherAirspeedType" : 3,
                             "get_OtherAirspeed" : 4,
                             "SetOtherAirspeed" : 5,
                             "get_FlyCruiseAirspeedProfile" : 6,
                             "set_FlyCruiseAirspeedProfile" : 7, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrCruiseAirspeedAndProfileOptions._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrCruiseAirspeedAndProfileOptions from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrCruiseAirspeedAndProfileOptions.__dict__ and type(IAgAvtrCruiseAirspeedAndProfileOptions.__dict__[attrname]) == property:
            return IAgAvtrCruiseAirspeedAndProfileOptions.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrCruiseAirspeedAndProfileOptions.")
    
    _get_CruiseSpeedType_metadata = { "name" : "CruiseSpeedType",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrCruiseSpeed),) }
    @property
    def CruiseSpeedType(self) -> "AgEAvtrCruiseSpeed":
        """The method for determining the aircraft's airspeed."""
        return self._intf.get_property(IAgAvtrCruiseAirspeedAndProfileOptions._metadata, IAgAvtrCruiseAirspeedAndProfileOptions._get_CruiseSpeedType_metadata)

    _set_CruiseSpeedType_metadata = { "name" : "CruiseSpeedType",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrCruiseSpeed),) }
    @CruiseSpeedType.setter
    def CruiseSpeedType(self, newVal:"AgEAvtrCruiseSpeed") -> None:
        """The method for determining the aircraft's airspeed."""
        return self._intf.set_property(IAgAvtrCruiseAirspeedAndProfileOptions._metadata, IAgAvtrCruiseAirspeedAndProfileOptions._set_CruiseSpeedType_metadata, newVal)

    _get_OtherAirspeedType_metadata = { "name" : "OtherAirspeedType",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrAirspeedType),) }
    @property
    def OtherAirspeedType(self) -> "AgEAvtrAirspeedType":
        """The airspeed type for the other airspeed option."""
        return self._intf.get_property(IAgAvtrCruiseAirspeedAndProfileOptions._metadata, IAgAvtrCruiseAirspeedAndProfileOptions._get_OtherAirspeedType_metadata)

    _get_OtherAirspeed_metadata = { "name" : "OtherAirspeed",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def OtherAirspeed(self) -> float:
        """The airspeed for the other airspeed option."""
        return self._intf.get_property(IAgAvtrCruiseAirspeedAndProfileOptions._metadata, IAgAvtrCruiseAirspeedAndProfileOptions._get_OtherAirspeed_metadata)

    _SetOtherAirspeed_metadata = { "name" : "SetOtherAirspeed",
            "arg_types" : (agcom.LONG, agcom.DOUBLE,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrAirspeedType), agmarshall.DOUBLE_arg,) }
    def SetOtherAirspeed(self, airspeedType:"AgEAvtrAirspeedType", airspeed:float) -> None:
        """Set the cruise airspeed. This option is only enabled if the cruise speed type is set to other."""
        return self._intf.invoke(IAgAvtrCruiseAirspeedAndProfileOptions._metadata, IAgAvtrCruiseAirspeedAndProfileOptions._SetOtherAirspeed_metadata, airspeedType, airspeed)

    _get_FlyCruiseAirspeedProfile_metadata = { "name" : "FlyCruiseAirspeedProfile",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def FlyCruiseAirspeedProfile(self) -> bool:
        """Opt whether the aircraft immediately adopts the selected cruise airspeed or gradually begins accelerating/decelerating in the previous procedure."""
        return self._intf.get_property(IAgAvtrCruiseAirspeedAndProfileOptions._metadata, IAgAvtrCruiseAirspeedAndProfileOptions._get_FlyCruiseAirspeedProfile_metadata)

    _set_FlyCruiseAirspeedProfile_metadata = { "name" : "FlyCruiseAirspeedProfile",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @FlyCruiseAirspeedProfile.setter
    def FlyCruiseAirspeedProfile(self, newVal:bool) -> None:
        """Opt whether the aircraft immediately adopts the selected cruise airspeed or gradually begins accelerating/decelerating in the previous procedure."""
        return self._intf.set_property(IAgAvtrCruiseAirspeedAndProfileOptions._metadata, IAgAvtrCruiseAirspeedAndProfileOptions._set_FlyCruiseAirspeedProfile_metadata, newVal)


agcls.AgClassCatalog.add_catalog_entry("{639730b3-bc2b-4615-afd6-8184af1fb948}", IAgAvtrCruiseAirspeedAndProfileOptions)
agcls.AgTypeNameMap["IAgAvtrCruiseAirspeedAndProfileOptions"] = IAgAvtrCruiseAirspeedAndProfileOptions

class IAgAvtrAutomationStrategyFactory(object):
    """Interface used to send connect commands to Aviator objects."""
    _num_methods = 1
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{310e51d5-81bf-4fc5-8260-b2eb2de0e1ed}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "ConstructStrategy" : 1, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrAutomationStrategyFactory._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrAutomationStrategyFactory from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrAutomationStrategyFactory.__dict__ and type(IAgAvtrAutomationStrategyFactory.__dict__[attrname]) == property:
            return IAgAvtrAutomationStrategyFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrAutomationStrategyFactory.")
    
    _ConstructStrategy_metadata = { "name" : "ConstructStrategy",
            "arg_types" : (agcom.PVOID, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_in_arg("IUnknown"), agmarshall.AgInterface_out_arg,) }
    def ConstructStrategy(self, pUnk:"IUnknown") -> "IAgAvtrBasicManeuverStrategy":
        """Construct the strategy."""
        return self._intf.invoke(IAgAvtrAutomationStrategyFactory._metadata, IAgAvtrAutomationStrategyFactory._ConstructStrategy_metadata, pUnk, out_arg())


agcls.AgClassCatalog.add_catalog_entry("{310e51d5-81bf-4fc5-8260-b2eb2de0e1ed}", IAgAvtrAutomationStrategyFactory)
agcls.AgTypeNameMap["IAgAvtrAutomationStrategyFactory"] = IAgAvtrAutomationStrategyFactory

class IAgAvtrConnect(object):
    """Interface used to send connect commands to Aviator objects."""
    _num_methods = 1
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{beb8d5ff-ae82-49d9-bff6-aa88fa3125ed}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "ExecuteCommand" : 1, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrConnect._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrConnect from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrConnect.__dict__ and type(IAgAvtrConnect.__dict__[attrname]) == property:
            return IAgAvtrConnect.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrConnect.")
    
    _ExecuteCommand_metadata = { "name" : "ExecuteCommand",
            "arg_types" : (agcom.BSTR, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.AgInterface_out_arg,) }
    def ExecuteCommand(self, command:str) -> typing.Any:
        """Send a connect command to an Aviator object."""
        return self._intf.invoke(IAgAvtrConnect._metadata, IAgAvtrConnect._ExecuteCommand_metadata, command, out_arg())


agcls.AgClassCatalog.add_catalog_entry("{beb8d5ff-ae82-49d9-bff6-aa88fa3125ed}", IAgAvtrConnect)
agcls.AgTypeNameMap["IAgAvtrConnect"] = IAgAvtrConnect

class IAgAvtrRunwayHeadingOptions(object):
    """Interface for the Runway Heading Options found in a Takeoff or Landing procedure."""
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{8e456b0d-eb7a-423c-acc3-467bc13b6375}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_RunwayMode" : 1,
                             "set_RunwayMode" : 2, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrRunwayHeadingOptions._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrRunwayHeadingOptions from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrRunwayHeadingOptions.__dict__ and type(IAgAvtrRunwayHeadingOptions.__dict__[attrname]) == property:
            return IAgAvtrRunwayHeadingOptions.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrRunwayHeadingOptions.")
    
    _get_RunwayMode_metadata = { "name" : "RunwayMode",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrRunwayHighLowEnd),) }
    @property
    def RunwayMode(self) -> "AgEAvtrRunwayHighLowEnd":
        """The runway heading that the aircraft will use."""
        return self._intf.get_property(IAgAvtrRunwayHeadingOptions._metadata, IAgAvtrRunwayHeadingOptions._get_RunwayMode_metadata)

    _set_RunwayMode_metadata = { "name" : "RunwayMode",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrRunwayHighLowEnd),) }
    @RunwayMode.setter
    def RunwayMode(self, newVal:"AgEAvtrRunwayHighLowEnd") -> None:
        """The runway heading that the aircraft will use."""
        return self._intf.set_property(IAgAvtrRunwayHeadingOptions._metadata, IAgAvtrRunwayHeadingOptions._set_RunwayMode_metadata, newVal)


agcls.AgClassCatalog.add_catalog_entry("{8e456b0d-eb7a-423c-acc3-467bc13b6375}", IAgAvtrRunwayHeadingOptions)
agcls.AgTypeNameMap["IAgAvtrRunwayHeadingOptions"] = IAgAvtrRunwayHeadingOptions

class IAgAvtrProcedure(object):
    """Interface used to access the options for a procedure. Use this interface to get the Site and Get the time options for the current procedure."""
    _num_methods = 10
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{df1aaedb-6f1c-4a50-9fdb-9fda3d56d3db}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_Name" : 1,
                             "set_Name" : 2,
                             "get_Site" : 3,
                             "get_TimeOptions" : 4,
                             "get_WindModel" : 5,
                             "get_AtmosphereModel" : 6,
                             "get_CalculationOptions" : 7,
                             "get_RefuelDumpIsSupported" : 8,
                             "get_RefuelDumpProperties" : 9,
                             "get_FastTimeOptions" : 10, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrProcedure._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrProcedure from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrProcedure.__dict__ and type(IAgAvtrProcedure.__dict__[attrname]) == property:
            return IAgAvtrProcedure.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrProcedure.")
    
    _get_Name_metadata = { "name" : "Name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def Name(self) -> str:
        """The name of the procedure."""
        return self._intf.get_property(IAgAvtrProcedure._metadata, IAgAvtrProcedure._get_Name_metadata)

    _set_Name_metadata = { "name" : "Name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @Name.setter
    def Name(self, newVal:str) -> None:
        """The name of the procedure."""
        return self._intf.set_property(IAgAvtrProcedure._metadata, IAgAvtrProcedure._set_Name_metadata, newVal)

    _get_Site_metadata = { "name" : "Site",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def Site(self) -> "IAgAvtrSite":
        """Get the site of the current procedure."""
        return self._intf.get_property(IAgAvtrProcedure._metadata, IAgAvtrProcedure._get_Site_metadata)

    _get_TimeOptions_metadata = { "name" : "TimeOptions",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def TimeOptions(self) -> "IAgAvtrProcedureTimeOptions":
        """Get the time options for the current procedure."""
        return self._intf.get_property(IAgAvtrProcedure._metadata, IAgAvtrProcedure._get_TimeOptions_metadata)

    _get_WindModel_metadata = { "name" : "WindModel",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def WindModel(self) -> "IAgAvtrWindModel":
        """Get the wind model for the current procedure."""
        return self._intf.get_property(IAgAvtrProcedure._metadata, IAgAvtrProcedure._get_WindModel_metadata)

    _get_AtmosphereModel_metadata = { "name" : "AtmosphereModel",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def AtmosphereModel(self) -> "IAgAvtrAtmosphereModel":
        """Get the mission atmosphere model."""
        return self._intf.get_property(IAgAvtrProcedure._metadata, IAgAvtrProcedure._get_AtmosphereModel_metadata)

    _get_CalculationOptions_metadata = { "name" : "CalculationOptions",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def CalculationOptions(self) -> "IAgAvtrCalculationOptions":
        """Get the calculation options for the current procedure."""
        return self._intf.get_property(IAgAvtrProcedure._metadata, IAgAvtrProcedure._get_CalculationOptions_metadata)

    _get_RefuelDumpIsSupported_metadata = { "name" : "RefuelDumpIsSupported",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def RefuelDumpIsSupported(self) -> bool:
        """Refuel/dump is supported for the current procedure."""
        return self._intf.get_property(IAgAvtrProcedure._metadata, IAgAvtrProcedure._get_RefuelDumpIsSupported_metadata)

    _get_RefuelDumpProperties_metadata = { "name" : "RefuelDumpProperties",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def RefuelDumpProperties(self) -> "IAgAvtrRefuelDumpProperties":
        """Get the refuel/dump properties for the current procedure."""
        return self._intf.get_property(IAgAvtrProcedure._metadata, IAgAvtrProcedure._get_RefuelDumpProperties_metadata)

    _get_FastTimeOptions_metadata = { "name" : "FastTimeOptions",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def FastTimeOptions(self) -> "IAgAvtrProcedureFastTimeOptions":
        """Get the fast time options (without validation or constraints) for the current procedure."""
        return self._intf.get_property(IAgAvtrProcedure._metadata, IAgAvtrProcedure._get_FastTimeOptions_metadata)


agcls.AgClassCatalog.add_catalog_entry("{df1aaedb-6f1c-4a50-9fdb-9fda3d56d3db}", IAgAvtrProcedure)
agcls.AgTypeNameMap["IAgAvtrProcedure"] = IAgAvtrProcedure

class IAgAvtrProcedureCollection(object):
    """Interface used to access the collection of procedures for a given phase in a mission. Use this interface to Get, Add, or Remove a procedure."""
    _num_methods = 9
    _vtable_offset = IDispatch._vtable_offset + IDispatch._num_methods
    _metadata = {
        "uuid" : "{27c58de8-b8f8-40d6-ae6d-4e31cbbd8a43}",
        "vtable_reference" : IDispatch._vtable_offset + IDispatch._num_methods - 1,
        "method_offsets" : { "get_Count" : 1,
                             "Item" : 2,
                             "get__NewEnum" : 3,
                             "Add" : 4,
                             "AddAtIndex" : 5,
                             "Remove" : 6,
                             "RemoveAtIndex" : 7,
                             "EnableAutoPropagate" : 8,
                             "DisableAutoPropagate" : 9, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrProcedureCollection._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrProcedureCollection from source object.")
        self.__dict__["_enumerator"] = None
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrProcedureCollection.__dict__ and type(IAgAvtrProcedureCollection.__dict__[attrname]) == property:
            return IAgAvtrProcedureCollection.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrProcedureCollection.")
    def __iter__(self):
        self.__dict__["_enumerator"] = self._NewEnum
        self._enumerator.reset()
        return self
    def __next__(self) -> "IAgAvtrProcedure":
        if self._enumerator is None:
            raise StopIteration
        nextval = self._enumerator.next()
        if nextval is None:
            raise StopIteration
        return nextval
    
    _get_Count_metadata = { "name" : "Count",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.LONG_arg,) }
    @property
    def Count(self) -> int:
        """Returns the number of elements in a collection."""
        return self._intf.get_property(IAgAvtrProcedureCollection._metadata, IAgAvtrProcedureCollection._get_Count_metadata)

    _Item_metadata = { "name" : "Item",
            "arg_types" : (agcom.LONG, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.LONG_arg, agmarshall.AgInterface_out_arg,) }
    def Item(self, index:int) -> "IAgAvtrProcedure":
        """Given an index, returns an element in the collection."""
        return self._intf.invoke(IAgAvtrProcedureCollection._metadata, IAgAvtrProcedureCollection._Item_metadata, index, out_arg())

    _get__NewEnum_metadata = { "name" : "_NewEnum",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.IEnumVARIANT_arg,) }
    @property
    def _NewEnum(self) -> enumerator_proxy:
        """Returns an enumerator that can iterate through the collection."""
        return self._intf.get_property(IAgAvtrProcedureCollection._metadata, IAgAvtrProcedureCollection._get__NewEnum_metadata)

    _Add_metadata = { "name" : "Add",
            "arg_types" : (agcom.LONG, agcom.LONG, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrSiteType), agmarshall.AgEnum_arg(AgEAvtrProcedureType), agmarshall.AgInterface_out_arg,) }
    def Add(self, siteType:"AgEAvtrSiteType", procedureType:"AgEAvtrProcedureType") -> "IAgAvtrProcedure":
        """Adds a procedure with the specified site at the end of the current phase."""
        return self._intf.invoke(IAgAvtrProcedureCollection._metadata, IAgAvtrProcedureCollection._Add_metadata, siteType, procedureType, out_arg())

    _AddAtIndex_metadata = { "name" : "AddAtIndex",
            "arg_types" : (agcom.LONG, agcom.LONG, agcom.LONG, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.LONG_arg, agmarshall.AgEnum_arg(AgEAvtrSiteType), agmarshall.AgEnum_arg(AgEAvtrProcedureType), agmarshall.AgInterface_out_arg,) }
    def AddAtIndex(self, index:int, siteType:"AgEAvtrSiteType", procedureType:"AgEAvtrProcedureType") -> "IAgAvtrProcedure":
        """Adds a procedure with the specified site at the given index."""
        return self._intf.invoke(IAgAvtrProcedureCollection._metadata, IAgAvtrProcedureCollection._AddAtIndex_metadata, index, siteType, procedureType, out_arg())

    _Remove_metadata = { "name" : "Remove",
            "arg_types" : (agcom.PVOID,),
            "marshallers" : (agmarshall.AgInterface_in_arg("IAgAvtrProcedure"),) }
    def Remove(self, procedure:"IAgAvtrProcedure") -> None:
        """Remove given procedure."""
        return self._intf.invoke(IAgAvtrProcedureCollection._metadata, IAgAvtrProcedureCollection._Remove_metadata, procedure)

    _RemoveAtIndex_metadata = { "name" : "RemoveAtIndex",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.LONG_arg,) }
    def RemoveAtIndex(self, index:int) -> None:
        """Remove procedure at the given index."""
        return self._intf.invoke(IAgAvtrProcedureCollection._metadata, IAgAvtrProcedureCollection._RemoveAtIndex_metadata, index)

    _EnableAutoPropagate_metadata = { "name" : "EnableAutoPropagate",
            "arg_types" : (),
            "marshallers" : () }
    def EnableAutoPropagate(self) -> None:
        """Enable automatically propagating the mission. Aviator will automatically propagate before adding a procedure, ensuring a valid initial state for the new procedure."""
        return self._intf.invoke(IAgAvtrProcedureCollection._metadata, IAgAvtrProcedureCollection._EnableAutoPropagate_metadata, )

    _DisableAutoPropagate_metadata = { "name" : "DisableAutoPropagate",
            "arg_types" : (),
            "marshallers" : () }
    def DisableAutoPropagate(self) -> None:
        """Disable automatically propagating the mission. Use with caution. Aviator will not automatically propagate before adding new procedures."""
        return self._intf.invoke(IAgAvtrProcedureCollection._metadata, IAgAvtrProcedureCollection._DisableAutoPropagate_metadata, )

    __getitem__ = Item



agcls.AgClassCatalog.add_catalog_entry("{27c58de8-b8f8-40d6-ae6d-4e31cbbd8a43}", IAgAvtrProcedureCollection)
agcls.AgTypeNameMap["IAgAvtrProcedureCollection"] = IAgAvtrProcedureCollection

class IAgAvtrPhase(object):
    """Interface used to access the phase options for a mission."""
    _num_methods = 7
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{1979f1b5-fe60-464b-af70-eb47fd5c096b}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_Procedures" : 1,
                             "get_Name" : 2,
                             "set_Name" : 3,
                             "GetPerformanceModelByType" : 4,
                             "SetDefaultPerfModels" : 5,
                             "CopyPerformanceModels" : 6,
                             "PastePerformanceModels" : 7, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrPhase._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrPhase from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrPhase.__dict__ and type(IAgAvtrPhase.__dict__[attrname]) == property:
            return IAgAvtrPhase.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrPhase.")
    
    _get_Procedures_metadata = { "name" : "Procedures",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def Procedures(self) -> "IAgAvtrProcedureCollection":
        """Returns the procedure collection."""
        return self._intf.get_property(IAgAvtrPhase._metadata, IAgAvtrPhase._get_Procedures_metadata)

    _get_Name_metadata = { "name" : "Name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def Name(self) -> str:
        """The name of the phase."""
        return self._intf.get_property(IAgAvtrPhase._metadata, IAgAvtrPhase._get_Name_metadata)

    _set_Name_metadata = { "name" : "Name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @Name.setter
    def Name(self, newVal:str) -> None:
        """The name of the phase."""
        return self._intf.set_property(IAgAvtrPhase._metadata, IAgAvtrPhase._set_Name_metadata, newVal)

    _GetPerformanceModelByType_metadata = { "name" : "GetPerformanceModelByType",
            "arg_types" : (agcom.BSTR, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.AgInterface_out_arg,) }
    def GetPerformanceModelByType(self, type:str) -> "IAgAvtrPerformanceModelOptions":
        """Get the active performance model for the given category type."""
        return self._intf.invoke(IAgAvtrPhase._metadata, IAgAvtrPhase._GetPerformanceModelByType_metadata, type, out_arg())

    _SetDefaultPerfModels_metadata = { "name" : "SetDefaultPerfModels",
            "arg_types" : (),
            "marshallers" : () }
    def SetDefaultPerfModels(self) -> None:
        """Set the phase to use the default performance models of the aircraft."""
        return self._intf.invoke(IAgAvtrPhase._metadata, IAgAvtrPhase._SetDefaultPerfModels_metadata, )

    _CopyPerformanceModels_metadata = { "name" : "CopyPerformanceModels",
            "arg_types" : (),
            "marshallers" : () }
    def CopyPerformanceModels(self) -> None:
        """Create a copy of the active performance models for the current phase."""
        return self._intf.invoke(IAgAvtrPhase._metadata, IAgAvtrPhase._CopyPerformanceModels_metadata, )

    _PastePerformanceModels_metadata = { "name" : "PastePerformanceModels",
            "arg_types" : (),
            "marshallers" : () }
    def PastePerformanceModels(self) -> None:
        """Paste the performance models."""
        return self._intf.invoke(IAgAvtrPhase._metadata, IAgAvtrPhase._PastePerformanceModels_metadata, )


agcls.AgClassCatalog.add_catalog_entry("{1979f1b5-fe60-464b-af70-eb47fd5c096b}", IAgAvtrPhase)
agcls.AgTypeNameMap["IAgAvtrPhase"] = IAgAvtrPhase

class IAgAvtrPhaseCollection(object):
    """Interface used to access the collection of phases for a mission."""
    _num_methods = 7
    _vtable_offset = IDispatch._vtable_offset + IDispatch._num_methods
    _metadata = {
        "uuid" : "{d7309dde-9887-48e6-9a10-dfadfaa3c48b}",
        "vtable_reference" : IDispatch._vtable_offset + IDispatch._num_methods - 1,
        "method_offsets" : { "get_Count" : 1,
                             "Item" : 2,
                             "get__NewEnum" : 3,
                             "Add" : 4,
                             "AddAtIndex" : 5,
                             "Remove" : 6,
                             "RemoveAtIndex" : 7, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrPhaseCollection._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrPhaseCollection from source object.")
        self.__dict__["_enumerator"] = None
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrPhaseCollection.__dict__ and type(IAgAvtrPhaseCollection.__dict__[attrname]) == property:
            return IAgAvtrPhaseCollection.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrPhaseCollection.")
    def __iter__(self):
        self.__dict__["_enumerator"] = self._NewEnum
        self._enumerator.reset()
        return self
    def __next__(self) -> "IAgAvtrPhase":
        if self._enumerator is None:
            raise StopIteration
        nextval = self._enumerator.next()
        if nextval is None:
            raise StopIteration
        return nextval
    
    _get_Count_metadata = { "name" : "Count",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.LONG_arg,) }
    @property
    def Count(self) -> int:
        """Returns the number of elements in a collection."""
        return self._intf.get_property(IAgAvtrPhaseCollection._metadata, IAgAvtrPhaseCollection._get_Count_metadata)

    _Item_metadata = { "name" : "Item",
            "arg_types" : (agcom.LONG, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.LONG_arg, agmarshall.AgInterface_out_arg,) }
    def Item(self, index:int) -> "IAgAvtrPhase":
        """Given an index, returns an element in the collection."""
        return self._intf.invoke(IAgAvtrPhaseCollection._metadata, IAgAvtrPhaseCollection._Item_metadata, index, out_arg())

    _get__NewEnum_metadata = { "name" : "_NewEnum",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.IEnumVARIANT_arg,) }
    @property
    def _NewEnum(self) -> enumerator_proxy:
        """Returns an enumerator that can iterate through the collection."""
        return self._intf.get_property(IAgAvtrPhaseCollection._metadata, IAgAvtrPhaseCollection._get__NewEnum_metadata)

    _Add_metadata = { "name" : "Add",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    def Add(self) -> "IAgAvtrPhase":
        """Adds a phase at the end of the mission."""
        return self._intf.invoke(IAgAvtrPhaseCollection._metadata, IAgAvtrPhaseCollection._Add_metadata, out_arg())

    _AddAtIndex_metadata = { "name" : "AddAtIndex",
            "arg_types" : (agcom.LONG, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.LONG_arg, agmarshall.AgInterface_out_arg,) }
    def AddAtIndex(self, index:int) -> "IAgAvtrPhase":
        """Adds a phase at the given index."""
        return self._intf.invoke(IAgAvtrPhaseCollection._metadata, IAgAvtrPhaseCollection._AddAtIndex_metadata, index, out_arg())

    _Remove_metadata = { "name" : "Remove",
            "arg_types" : (agcom.PVOID,),
            "marshallers" : (agmarshall.AgInterface_in_arg("IAgAvtrPhase"),) }
    def Remove(self, phase:"IAgAvtrPhase") -> None:
        """Remove given phase."""
        return self._intf.invoke(IAgAvtrPhaseCollection._metadata, IAgAvtrPhaseCollection._Remove_metadata, phase)

    _RemoveAtIndex_metadata = { "name" : "RemoveAtIndex",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.LONG_arg,) }
    def RemoveAtIndex(self, index:int) -> None:
        """Remove phase at the given index."""
        return self._intf.invoke(IAgAvtrPhaseCollection._metadata, IAgAvtrPhaseCollection._RemoveAtIndex_metadata, index)

    __getitem__ = Item



agcls.AgClassCatalog.add_catalog_entry("{d7309dde-9887-48e6-9a10-dfadfaa3c48b}", IAgAvtrPhaseCollection)
agcls.AgTypeNameMap["IAgAvtrPhaseCollection"] = IAgAvtrPhaseCollection

class IAgAvtrMission(object):
    """Interface for the mission of an aircraft using the Aviator propagator."""
    _num_methods = 8
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{e4467d52-6a09-47b2-943c-7e24ae375f6b}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_Phases" : 1,
                             "get_Vehicle" : 2,
                             "set_Vehicle" : 3,
                             "get_Configuration" : 4,
                             "get_WindModel" : 5,
                             "get_AtmosphereModel" : 6,
                             "get_IsValid" : 7,
                             "GetFirstInvalidProcedure" : 8, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrMission._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrMission from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrMission.__dict__ and type(IAgAvtrMission.__dict__[attrname]) == property:
            return IAgAvtrMission.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrMission.")
    
    _get_Phases_metadata = { "name" : "Phases",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def Phases(self) -> "IAgAvtrPhaseCollection":
        """Get the mission phases."""
        return self._intf.get_property(IAgAvtrMission._metadata, IAgAvtrMission._get_Phases_metadata)

    _get_Vehicle_metadata = { "name" : "Vehicle",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def Vehicle(self) -> "IAgAvtrVehicle":
        """The vehicle used in the mission."""
        return self._intf.get_property(IAgAvtrMission._metadata, IAgAvtrMission._get_Vehicle_metadata)

    _set_Vehicle_metadata = { "name" : "Vehicle",
            "arg_types" : (agcom.PVOID,),
            "marshallers" : (agmarshall.AgInterface_in_arg("IAgAvtrVehicle"),) }
    @Vehicle.setter
    def Vehicle(self, pAvtrVehicle:"IAgAvtrVehicle") -> None:
        """The vehicle used in the mission."""
        return self._intf.set_property(IAgAvtrMission._metadata, IAgAvtrMission._set_Vehicle_metadata, pAvtrVehicle)

    _get_Configuration_metadata = { "name" : "Configuration",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def Configuration(self) -> "IAgAvtrConfiguration":
        """The aircraft's configuration for the mission."""
        return self._intf.get_property(IAgAvtrMission._metadata, IAgAvtrMission._get_Configuration_metadata)

    _get_WindModel_metadata = { "name" : "WindModel",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def WindModel(self) -> "IAgAvtrWindModel":
        """Get the mission wind model."""
        return self._intf.get_property(IAgAvtrMission._metadata, IAgAvtrMission._get_WindModel_metadata)

    _get_AtmosphereModel_metadata = { "name" : "AtmosphereModel",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def AtmosphereModel(self) -> "IAgAvtrAtmosphereModel":
        """Get the mission atmosphere model."""
        return self._intf.get_property(IAgAvtrMission._metadata, IAgAvtrMission._get_AtmosphereModel_metadata)

    _get_IsValid_metadata = { "name" : "IsValid",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def IsValid(self) -> bool:
        """Check whether the mission is valid. Calling this property will propagate the mission."""
        return self._intf.get_property(IAgAvtrMission._metadata, IAgAvtrMission._get_IsValid_metadata)

    _GetFirstInvalidProcedure_metadata = { "name" : "GetFirstInvalidProcedure",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    def GetFirstInvalidProcedure(self) -> "IAgAvtrProcedure":
        """Get the first invalid procedure in the mission. Calling this method will propagate the mission."""
        return self._intf.invoke(IAgAvtrMission._metadata, IAgAvtrMission._GetFirstInvalidProcedure_metadata, out_arg())


agcls.AgClassCatalog.add_catalog_entry("{e4467d52-6a09-47b2-943c-7e24ae375f6b}", IAgAvtrMission)
agcls.AgTypeNameMap["IAgAvtrMission"] = IAgAvtrMission

class IAgAvtrPropagator(object):
    """Interface used to access the Aviator interface for an aircraft. Use this interface to get the mission or Aviator catalog."""
    _num_methods = 5
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{f7e3993a-52ed-4e91-8655-79063c0a3e94}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_AvtrMission" : 1,
                             "Propagate" : 2,
                             "get_AutoRecalculate" : 3,
                             "set_AutoRecalculate" : 4,
                             "get_AvtrCatalog" : 5, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrPropagator._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrPropagator from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrPropagator.__dict__ and type(IAgAvtrPropagator.__dict__[attrname]) == property:
            return IAgAvtrPropagator.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrPropagator.")
    
    _get_AvtrMission_metadata = { "name" : "AvtrMission",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def AvtrMission(self) -> "IAgAvtrMission":
        """The Aviator mission."""
        return self._intf.get_property(IAgAvtrPropagator._metadata, IAgAvtrPropagator._get_AvtrMission_metadata)

    _Propagate_metadata = { "name" : "Propagate",
            "arg_types" : (),
            "marshallers" : () }
    def Propagate(self) -> None:
        """Applies All Change."""
        return self._intf.invoke(IAgAvtrPropagator._metadata, IAgAvtrPropagator._Propagate_metadata, )

    _get_AutoRecalculate_metadata = { "name" : "AutoRecalculate",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def AutoRecalculate(self) -> bool:
        """Opt whether to have the propagator auto recalculate."""
        return self._intf.get_property(IAgAvtrPropagator._metadata, IAgAvtrPropagator._get_AutoRecalculate_metadata)

    _set_AutoRecalculate_metadata = { "name" : "AutoRecalculate",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @AutoRecalculate.setter
    def AutoRecalculate(self, vbAutoRecalc:bool) -> None:
        """Opt whether to have the propagator auto recalculate."""
        return self._intf.set_property(IAgAvtrPropagator._metadata, IAgAvtrPropagator._set_AutoRecalculate_metadata, vbAutoRecalc)

    _get_AvtrCatalog_metadata = { "name" : "AvtrCatalog",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def AvtrCatalog(self) -> "IAgAvtrCatalog":
        """The Aviator catalog."""
        return self._intf.get_property(IAgAvtrPropagator._metadata, IAgAvtrPropagator._get_AvtrCatalog_metadata)


agcls.AgClassCatalog.add_catalog_entry("{f7e3993a-52ed-4e91-8655-79063c0a3e94}", IAgAvtrPropagator)
agcls.AgTypeNameMap["IAgAvtrPropagator"] = IAgAvtrPropagator

class IAgAvtrPerformanceModel(object):
    """Interface for a performance model of an Aviator vehicle."""
    _num_methods = 0
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{8fb55502-c401-4188-adc9-7a889fdbe996}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : {  }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrPerformanceModel._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrPerformanceModel from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrPerformanceModel.__dict__ and type(IAgAvtrPerformanceModel.__dict__[attrname]) == property:
            return IAgAvtrPerformanceModel.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrPerformanceModel.")
    

agcls.AgClassCatalog.add_catalog_entry("{8fb55502-c401-4188-adc9-7a889fdbe996}", IAgAvtrPerformanceModel)
agcls.AgTypeNameMap["IAgAvtrPerformanceModel"] = IAgAvtrPerformanceModel

class IAgAvtrAdvFixedWingGeometry(object):
    """Interface used to access the options for the wing geometry in the advanced fixed wing tool."""
    _num_methods = 0
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{d3b3af6e-7b5a-4491-aaca-c05eb901afa0}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : {  }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrAdvFixedWingGeometry._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrAdvFixedWingGeometry from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrAdvFixedWingGeometry.__dict__ and type(IAgAvtrAdvFixedWingGeometry.__dict__[attrname]) == property:
            return IAgAvtrAdvFixedWingGeometry.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrAdvFixedWingGeometry.")
    

agcls.AgClassCatalog.add_catalog_entry("{d3b3af6e-7b5a-4491-aaca-c05eb901afa0}", IAgAvtrAdvFixedWingGeometry)
agcls.AgTypeNameMap["IAgAvtrAdvFixedWingGeometry"] = IAgAvtrAdvFixedWingGeometry

class IAgAvtrAdvFixedWingTurbofanBasicABPowerplant(object):
    """This interface is deprecated. Use IAgAvtrAdvFixedWingTurbofanBasicABProp instead."""
    _num_methods = 0
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{9bc7e978-48ec-487d-8460-014c8fe376bd}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : {  }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrAdvFixedWingTurbofanBasicABPowerplant._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrAdvFixedWingTurbofanBasicABPowerplant from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrAdvFixedWingTurbofanBasicABPowerplant.__dict__ and type(IAgAvtrAdvFixedWingTurbofanBasicABPowerplant.__dict__[attrname]) == property:
            return IAgAvtrAdvFixedWingTurbofanBasicABPowerplant.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrAdvFixedWingTurbofanBasicABPowerplant.")
    

agcls.AgClassCatalog.add_catalog_entry("{9bc7e978-48ec-487d-8460-014c8fe376bd}", IAgAvtrAdvFixedWingTurbofanBasicABPowerplant)
agcls.AgTypeNameMap["IAgAvtrAdvFixedWingTurbofanBasicABPowerplant"] = IAgAvtrAdvFixedWingTurbofanBasicABPowerplant

class IAgAvtrAdvFixedWingTurbojetBasicABPowerplant(object):
    """This interface is deprecated. Use IAgAvtrAdvFixedWingTurbojetBasicABProp instead."""
    _num_methods = 0
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{552db5f4-fe5d-4709-80b4-7ba074c673ff}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : {  }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrAdvFixedWingTurbojetBasicABPowerplant._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrAdvFixedWingTurbojetBasicABPowerplant from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrAdvFixedWingTurbojetBasicABPowerplant.__dict__ and type(IAgAvtrAdvFixedWingTurbojetBasicABPowerplant.__dict__[attrname]) == property:
            return IAgAvtrAdvFixedWingTurbojetBasicABPowerplant.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrAdvFixedWingTurbojetBasicABPowerplant.")
    

agcls.AgClassCatalog.add_catalog_entry("{552db5f4-fe5d-4709-80b4-7ba074c673ff}", IAgAvtrAdvFixedWingTurbojetBasicABPowerplant)
agcls.AgTypeNameMap["IAgAvtrAdvFixedWingTurbojetBasicABPowerplant"] = IAgAvtrAdvFixedWingTurbojetBasicABPowerplant

class IAgAvtrAdvFixedWingPowerplant(object):
    """Interface for a powerplant strategy in the advanced fixed wing tool."""
    _num_methods = 0
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{79824361-d702-4f4b-81ac-001876fb51ef}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : {  }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrAdvFixedWingPowerplant._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrAdvFixedWingPowerplant from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrAdvFixedWingPowerplant.__dict__ and type(IAgAvtrAdvFixedWingPowerplant.__dict__[attrname]) == property:
            return IAgAvtrAdvFixedWingPowerplant.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrAdvFixedWingPowerplant.")
    

agcls.AgClassCatalog.add_catalog_entry("{79824361-d702-4f4b-81ac-001876fb51ef}", IAgAvtrAdvFixedWingPowerplant)
agcls.AgTypeNameMap["IAgAvtrAdvFixedWingPowerplant"] = IAgAvtrAdvFixedWingPowerplant

class IAgAvtrSiteUnknown(object):
    """Interface of an unknown site."""
    _num_methods = 0
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{0921dbaf-ee11-4460-8355-01fc207a6803}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : {  }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrSiteUnknown._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrSiteUnknown from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrSiteUnknown.__dict__ and type(IAgAvtrSiteUnknown.__dict__[attrname]) == property:
            return IAgAvtrSiteUnknown.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrSiteUnknown.")
    

agcls.AgClassCatalog.add_catalog_entry("{0921dbaf-ee11-4460-8355-01fc207a6803}", IAgAvtrSiteUnknown)
agcls.AgTypeNameMap["IAgAvtrSiteUnknown"] = IAgAvtrSiteUnknown

class IAgAvtrAircraftTerrainFollowModel(object):
    """Interface used to access the options for a TerrainFollow performance model of an aircraft."""
    _num_methods = 31
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{34e47cb6-b418-468b-b5bf-df98428b7691}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_AirspeedType" : 1,
                             "set_AirspeedType" : 2,
                             "get_UseAeroPropFuel" : 3,
                             "set_UseAeroPropFuel" : 4,
                             "get_ScaleFuelFlowByNonStdDensity" : 5,
                             "set_ScaleFuelFlowByNonStdDensity" : 6,
                             "get_MinAirspeed" : 7,
                             "set_MinAirspeed" : 8,
                             "get_MaxEnduranceAirspeed" : 9,
                             "set_MaxEnduranceAirspeed" : 10,
                             "get_MaxRangeAirspeed" : 11,
                             "set_MaxRangeAirspeed" : 12,
                             "get_MaxAirspeed" : 13,
                             "set_MaxAirspeed" : 14,
                             "get_MaxPerfAirspeed" : 15,
                             "set_MaxPerfAirspeed" : 16,
                             "get_MinAirspeedFuelFlow" : 17,
                             "set_MinAirspeedFuelFlow" : 18,
                             "get_MaxEnduranceFuelFlow" : 19,
                             "set_MaxEnduranceFuelFlow" : 20,
                             "get_MaxRangeFuelFlow" : 21,
                             "set_MaxRangeFuelFlow" : 22,
                             "get_MaxAirspeedFuelFlow" : 23,
                             "set_MaxAirspeedFuelFlow" : 24,
                             "get_MaxPerfAirspeedFuelFlow" : 25,
                             "set_MaxPerfAirspeedFuelFlow" : 26,
                             "get_MaxPitchAngle" : 27,
                             "set_MaxPitchAngle" : 28,
                             "get_TerrainWindow" : 29,
                             "set_TerrainWindow" : 30,
                             "get_MaxLoadFactor" : 31, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrAircraftTerrainFollowModel._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrAircraftTerrainFollowModel from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrAircraftTerrainFollowModel.__dict__ and type(IAgAvtrAircraftTerrainFollowModel.__dict__[attrname]) == property:
            return IAgAvtrAircraftTerrainFollowModel.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrAircraftTerrainFollowModel.")
    
    _get_AirspeedType_metadata = { "name" : "AirspeedType",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrAirspeedType),) }
    @property
    def AirspeedType(self) -> "AgEAvtrAirspeedType":
        """The airspeed type."""
        return self._intf.get_property(IAgAvtrAircraftTerrainFollowModel._metadata, IAgAvtrAircraftTerrainFollowModel._get_AirspeedType_metadata)

    _set_AirspeedType_metadata = { "name" : "AirspeedType",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrAirspeedType),) }
    @AirspeedType.setter
    def AirspeedType(self, newVal:"AgEAvtrAirspeedType") -> None:
        """The airspeed type."""
        return self._intf.set_property(IAgAvtrAircraftTerrainFollowModel._metadata, IAgAvtrAircraftTerrainFollowModel._set_AirspeedType_metadata, newVal)

    _get_UseAeroPropFuel_metadata = { "name" : "UseAeroPropFuel",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def UseAeroPropFuel(self) -> bool:
        """Opt to use the fuel flow calculated by the acceleration performance model."""
        return self._intf.get_property(IAgAvtrAircraftTerrainFollowModel._metadata, IAgAvtrAircraftTerrainFollowModel._get_UseAeroPropFuel_metadata)

    _set_UseAeroPropFuel_metadata = { "name" : "UseAeroPropFuel",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @UseAeroPropFuel.setter
    def UseAeroPropFuel(self, newVal:bool) -> None:
        """Opt to use the fuel flow calculated by the acceleration performance model."""
        return self._intf.set_property(IAgAvtrAircraftTerrainFollowModel._metadata, IAgAvtrAircraftTerrainFollowModel._set_UseAeroPropFuel_metadata, newVal)

    _get_ScaleFuelFlowByNonStdDensity_metadata = { "name" : "ScaleFuelFlowByNonStdDensity",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def ScaleFuelFlowByNonStdDensity(self) -> bool:
        """Opt to scale the fuel flow by the aircraft's actual altitude."""
        return self._intf.get_property(IAgAvtrAircraftTerrainFollowModel._metadata, IAgAvtrAircraftTerrainFollowModel._get_ScaleFuelFlowByNonStdDensity_metadata)

    _set_ScaleFuelFlowByNonStdDensity_metadata = { "name" : "ScaleFuelFlowByNonStdDensity",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @ScaleFuelFlowByNonStdDensity.setter
    def ScaleFuelFlowByNonStdDensity(self, newVal:bool) -> None:
        """Opt to scale the fuel flow by the aircraft's actual altitude."""
        return self._intf.set_property(IAgAvtrAircraftTerrainFollowModel._metadata, IAgAvtrAircraftTerrainFollowModel._set_ScaleFuelFlowByNonStdDensity_metadata, newVal)

    _get_MinAirspeed_metadata = { "name" : "MinAirspeed",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def MinAirspeed(self) -> float:
        """The minimum airspeed."""
        return self._intf.get_property(IAgAvtrAircraftTerrainFollowModel._metadata, IAgAvtrAircraftTerrainFollowModel._get_MinAirspeed_metadata)

    _set_MinAirspeed_metadata = { "name" : "MinAirspeed",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @MinAirspeed.setter
    def MinAirspeed(self, newVal:float) -> None:
        """The minimum airspeed."""
        return self._intf.set_property(IAgAvtrAircraftTerrainFollowModel._metadata, IAgAvtrAircraftTerrainFollowModel._set_MinAirspeed_metadata, newVal)

    _get_MaxEnduranceAirspeed_metadata = { "name" : "MaxEnduranceAirspeed",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def MaxEnduranceAirspeed(self) -> float:
        """The airspeed that will provide the maximum flying time for the aircraft."""
        return self._intf.get_property(IAgAvtrAircraftTerrainFollowModel._metadata, IAgAvtrAircraftTerrainFollowModel._get_MaxEnduranceAirspeed_metadata)

    _set_MaxEnduranceAirspeed_metadata = { "name" : "MaxEnduranceAirspeed",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @MaxEnduranceAirspeed.setter
    def MaxEnduranceAirspeed(self, newVal:float) -> None:
        """The airspeed that will provide the maximum flying time for the aircraft."""
        return self._intf.set_property(IAgAvtrAircraftTerrainFollowModel._metadata, IAgAvtrAircraftTerrainFollowModel._set_MaxEnduranceAirspeed_metadata, newVal)

    _get_MaxRangeAirspeed_metadata = { "name" : "MaxRangeAirspeed",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def MaxRangeAirspeed(self) -> float:
        """The maximum range airspeed."""
        return self._intf.get_property(IAgAvtrAircraftTerrainFollowModel._metadata, IAgAvtrAircraftTerrainFollowModel._get_MaxRangeAirspeed_metadata)

    _set_MaxRangeAirspeed_metadata = { "name" : "MaxRangeAirspeed",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @MaxRangeAirspeed.setter
    def MaxRangeAirspeed(self, newVal:float) -> None:
        """The maximum range airspeed."""
        return self._intf.set_property(IAgAvtrAircraftTerrainFollowModel._metadata, IAgAvtrAircraftTerrainFollowModel._set_MaxRangeAirspeed_metadata, newVal)

    _get_MaxAirspeed_metadata = { "name" : "MaxAirspeed",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def MaxAirspeed(self) -> float:
        """The maximum airspeed."""
        return self._intf.get_property(IAgAvtrAircraftTerrainFollowModel._metadata, IAgAvtrAircraftTerrainFollowModel._get_MaxAirspeed_metadata)

    _set_MaxAirspeed_metadata = { "name" : "MaxAirspeed",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @MaxAirspeed.setter
    def MaxAirspeed(self, newVal:float) -> None:
        """The maximum airspeed."""
        return self._intf.set_property(IAgAvtrAircraftTerrainFollowModel._metadata, IAgAvtrAircraftTerrainFollowModel._set_MaxAirspeed_metadata, newVal)

    _get_MaxPerfAirspeed_metadata = { "name" : "MaxPerfAirspeed",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def MaxPerfAirspeed(self) -> float:
        """A custom performance airspeed that can be used to model specific flight conditions."""
        return self._intf.get_property(IAgAvtrAircraftTerrainFollowModel._metadata, IAgAvtrAircraftTerrainFollowModel._get_MaxPerfAirspeed_metadata)

    _set_MaxPerfAirspeed_metadata = { "name" : "MaxPerfAirspeed",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @MaxPerfAirspeed.setter
    def MaxPerfAirspeed(self, newVal:float) -> None:
        """A custom performance airspeed that can be used to model specific flight conditions."""
        return self._intf.set_property(IAgAvtrAircraftTerrainFollowModel._metadata, IAgAvtrAircraftTerrainFollowModel._set_MaxPerfAirspeed_metadata, newVal)

    _get_MinAirspeedFuelFlow_metadata = { "name" : "MinAirspeedFuelFlow",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def MinAirspeedFuelFlow(self) -> float:
        """The fuel flow for the minimum airspeed."""
        return self._intf.get_property(IAgAvtrAircraftTerrainFollowModel._metadata, IAgAvtrAircraftTerrainFollowModel._get_MinAirspeedFuelFlow_metadata)

    _set_MinAirspeedFuelFlow_metadata = { "name" : "MinAirspeedFuelFlow",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @MinAirspeedFuelFlow.setter
    def MinAirspeedFuelFlow(self, newVal:float) -> None:
        """The fuel flow for the minimum airspeed."""
        return self._intf.set_property(IAgAvtrAircraftTerrainFollowModel._metadata, IAgAvtrAircraftTerrainFollowModel._set_MinAirspeedFuelFlow_metadata, newVal)

    _get_MaxEnduranceFuelFlow_metadata = { "name" : "MaxEnduranceFuelFlow",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def MaxEnduranceFuelFlow(self) -> float:
        """The fuel flow for the maximum endurance airspeed."""
        return self._intf.get_property(IAgAvtrAircraftTerrainFollowModel._metadata, IAgAvtrAircraftTerrainFollowModel._get_MaxEnduranceFuelFlow_metadata)

    _set_MaxEnduranceFuelFlow_metadata = { "name" : "MaxEnduranceFuelFlow",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @MaxEnduranceFuelFlow.setter
    def MaxEnduranceFuelFlow(self, newVal:float) -> None:
        """The fuel flow for the maximum endurance airspeed."""
        return self._intf.set_property(IAgAvtrAircraftTerrainFollowModel._metadata, IAgAvtrAircraftTerrainFollowModel._set_MaxEnduranceFuelFlow_metadata, newVal)

    _get_MaxRangeFuelFlow_metadata = { "name" : "MaxRangeFuelFlow",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def MaxRangeFuelFlow(self) -> float:
        """The fuel flow for the maximum range airspeed."""
        return self._intf.get_property(IAgAvtrAircraftTerrainFollowModel._metadata, IAgAvtrAircraftTerrainFollowModel._get_MaxRangeFuelFlow_metadata)

    _set_MaxRangeFuelFlow_metadata = { "name" : "MaxRangeFuelFlow",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @MaxRangeFuelFlow.setter
    def MaxRangeFuelFlow(self, newVal:float) -> None:
        """The fuel flow for the maximum range airspeed."""
        return self._intf.set_property(IAgAvtrAircraftTerrainFollowModel._metadata, IAgAvtrAircraftTerrainFollowModel._set_MaxRangeFuelFlow_metadata, newVal)

    _get_MaxAirspeedFuelFlow_metadata = { "name" : "MaxAirspeedFuelFlow",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def MaxAirspeedFuelFlow(self) -> float:
        """The fuel flow for the maximum airspeed."""
        return self._intf.get_property(IAgAvtrAircraftTerrainFollowModel._metadata, IAgAvtrAircraftTerrainFollowModel._get_MaxAirspeedFuelFlow_metadata)

    _set_MaxAirspeedFuelFlow_metadata = { "name" : "MaxAirspeedFuelFlow",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @MaxAirspeedFuelFlow.setter
    def MaxAirspeedFuelFlow(self, newVal:float) -> None:
        """The fuel flow for the maximum airspeed."""
        return self._intf.set_property(IAgAvtrAircraftTerrainFollowModel._metadata, IAgAvtrAircraftTerrainFollowModel._set_MaxAirspeedFuelFlow_metadata, newVal)

    _get_MaxPerfAirspeedFuelFlow_metadata = { "name" : "MaxPerfAirspeedFuelFlow",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def MaxPerfAirspeedFuelFlow(self) -> float:
        """The fuel flow for the maximum performance airspeed."""
        return self._intf.get_property(IAgAvtrAircraftTerrainFollowModel._metadata, IAgAvtrAircraftTerrainFollowModel._get_MaxPerfAirspeedFuelFlow_metadata)

    _set_MaxPerfAirspeedFuelFlow_metadata = { "name" : "MaxPerfAirspeedFuelFlow",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @MaxPerfAirspeedFuelFlow.setter
    def MaxPerfAirspeedFuelFlow(self, newVal:float) -> None:
        """The fuel flow for the maximum performance airspeed."""
        return self._intf.set_property(IAgAvtrAircraftTerrainFollowModel._metadata, IAgAvtrAircraftTerrainFollowModel._set_MaxPerfAirspeedFuelFlow_metadata, newVal)

    _get_MaxPitchAngle_metadata = { "name" : "MaxPitchAngle",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def MaxPitchAngle(self) -> typing.Any:
        """The maximum pitch angle the aircraft will be allowed to use."""
        return self._intf.get_property(IAgAvtrAircraftTerrainFollowModel._metadata, IAgAvtrAircraftTerrainFollowModel._get_MaxPitchAngle_metadata)

    _set_MaxPitchAngle_metadata = { "name" : "MaxPitchAngle",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @MaxPitchAngle.setter
    def MaxPitchAngle(self, newVal:typing.Any) -> None:
        """The maximum pitch angle the aircraft will be allowed to use."""
        return self._intf.set_property(IAgAvtrAircraftTerrainFollowModel._metadata, IAgAvtrAircraftTerrainFollowModel._set_MaxPitchAngle_metadata, newVal)

    _get_TerrainWindow_metadata = { "name" : "TerrainWindow",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def TerrainWindow(self) -> float:
        """The time interval over which terrain points are sampled."""
        return self._intf.get_property(IAgAvtrAircraftTerrainFollowModel._metadata, IAgAvtrAircraftTerrainFollowModel._get_TerrainWindow_metadata)

    _set_TerrainWindow_metadata = { "name" : "TerrainWindow",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @TerrainWindow.setter
    def TerrainWindow(self, newVal:float) -> None:
        """The time interval over which terrain points are sampled."""
        return self._intf.set_property(IAgAvtrAircraftTerrainFollowModel._metadata, IAgAvtrAircraftTerrainFollowModel._set_TerrainWindow_metadata, newVal)

    _get_MaxLoadFactor_metadata = { "name" : "MaxLoadFactor",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def MaxLoadFactor(self) -> float:
        """The maximum load factor - during straight and level flight - that the aircraft can bear."""
        return self._intf.get_property(IAgAvtrAircraftTerrainFollowModel._metadata, IAgAvtrAircraftTerrainFollowModel._get_MaxLoadFactor_metadata)


agcls.AgClassCatalog.add_catalog_entry("{34e47cb6-b418-468b-b5bf-df98428b7691}", IAgAvtrAircraftTerrainFollowModel)
agcls.AgTypeNameMap["IAgAvtrAircraftTerrainFollowModel"] = IAgAvtrAircraftTerrainFollowModel

class IAgAvtrBasicManeuverTargetPosVel(object):
    """Interface used to access target position and velocity strategies for basic maneuvers."""
    _num_methods = 8
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{F86E4ECC-DBF4-4D49-B2CC-11C71022C1A5}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_TargetPosVelType" : 1,
                             "set_TargetPosVelType" : 2,
                             "get_TargetPosVelTypeString" : 3,
                             "set_TargetPosVelTypeString" : 4,
                             "get_ModeAsNoisyBrgRng" : 5,
                             "get_ModeAsNoisySurfTgt" : 6,
                             "ApplyPosVel" : 7,
                             "CancelPosVel" : 8, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrBasicManeuverTargetPosVel._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrBasicManeuverTargetPosVel from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrBasicManeuverTargetPosVel.__dict__ and type(IAgAvtrBasicManeuverTargetPosVel.__dict__[attrname]) == property:
            return IAgAvtrBasicManeuverTargetPosVel.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrBasicManeuverTargetPosVel.")
    
    _get_TargetPosVelType_metadata = { "name" : "TargetPosVelType",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrTargetPosVelType),) }
    @property
    def TargetPosVelType(self) -> "AgEAvtrTargetPosVelType":
        """The target pos vel type."""
        return self._intf.get_property(IAgAvtrBasicManeuverTargetPosVel._metadata, IAgAvtrBasicManeuverTargetPosVel._get_TargetPosVelType_metadata)

    _set_TargetPosVelType_metadata = { "name" : "TargetPosVelType",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrTargetPosVelType),) }
    @TargetPosVelType.setter
    def TargetPosVelType(self, pVal:"AgEAvtrTargetPosVelType") -> None:
        """The target pos vel type."""
        return self._intf.set_property(IAgAvtrBasicManeuverTargetPosVel._metadata, IAgAvtrBasicManeuverTargetPosVel._set_TargetPosVelType_metadata, pVal)

    _get_TargetPosVelTypeString_metadata = { "name" : "TargetPosVelTypeString",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def TargetPosVelTypeString(self) -> str:
        """The target pos vel as a string value. Use this for custom models."""
        return self._intf.get_property(IAgAvtrBasicManeuverTargetPosVel._metadata, IAgAvtrBasicManeuverTargetPosVel._get_TargetPosVelTypeString_metadata)

    _set_TargetPosVelTypeString_metadata = { "name" : "TargetPosVelTypeString",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @TargetPosVelTypeString.setter
    def TargetPosVelTypeString(self, pVal:str) -> None:
        """The target pos vel as a string value. Use this for custom models."""
        return self._intf.set_property(IAgAvtrBasicManeuverTargetPosVel._metadata, IAgAvtrBasicManeuverTargetPosVel._set_TargetPosVelTypeString_metadata, pVal)

    _get_ModeAsNoisyBrgRng_metadata = { "name" : "ModeAsNoisyBrgRng",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def ModeAsNoisyBrgRng(self) -> "IAgAvtrBasicManeuverTargetPosVelNoisyBrgRng":
        """Get the options for a noisy bearing range velocity strategy."""
        return self._intf.get_property(IAgAvtrBasicManeuverTargetPosVel._metadata, IAgAvtrBasicManeuverTargetPosVel._get_ModeAsNoisyBrgRng_metadata)

    _get_ModeAsNoisySurfTgt_metadata = { "name" : "ModeAsNoisySurfTgt",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def ModeAsNoisySurfTgt(self) -> "IAgAvtrBasicManeuverTargetPosVelNoisySurfTgt":
        """Get the options for a noisy surface target position velocity strategy."""
        return self._intf.get_property(IAgAvtrBasicManeuverTargetPosVel._metadata, IAgAvtrBasicManeuverTargetPosVel._get_ModeAsNoisySurfTgt_metadata)

    _ApplyPosVel_metadata = { "name" : "ApplyPosVel",
            "arg_types" : (),
            "marshallers" : () }
    def ApplyPosVel(self) -> None:
        """Apply the current position velocity strategy."""
        return self._intf.invoke(IAgAvtrBasicManeuverTargetPosVel._metadata, IAgAvtrBasicManeuverTargetPosVel._ApplyPosVel_metadata, )

    _CancelPosVel_metadata = { "name" : "CancelPosVel",
            "arg_types" : (),
            "marshallers" : () }
    def CancelPosVel(self) -> None:
        """Cancel the current position velocity strategy."""
        return self._intf.invoke(IAgAvtrBasicManeuverTargetPosVel._metadata, IAgAvtrBasicManeuverTargetPosVel._CancelPosVel_metadata, )


agcls.AgClassCatalog.add_catalog_entry("{F86E4ECC-DBF4-4D49-B2CC-11C71022C1A5}", IAgAvtrBasicManeuverTargetPosVel)
agcls.AgTypeNameMap["IAgAvtrBasicManeuverTargetPosVel"] = IAgAvtrBasicManeuverTargetPosVel

class IAgAvtrPropulsionThrust(object):
    """Interface used to access propulsion thrust for basic maneuver strategies."""
    _num_methods = 18
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{fea63cff-6fa0-406e-ad12-8b17617cb34d}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_UseConstantThrust" : 1,
                             "set_UseConstantThrust" : 2,
                             "get_ConstantThrust" : 3,
                             "set_ConstantThrust" : 4,
                             "get_BoostThrust" : 5,
                             "set_BoostThrust" : 6,
                             "get_BoostThrustTimeLimit" : 7,
                             "set_BoostThrustTimeLimit" : 8,
                             "get_SustainThrust" : 9,
                             "set_SustainThrust" : 10,
                             "get_SustainThrustTimeLimit" : 11,
                             "set_SustainThrustTimeLimit" : 12,
                             "get_MinAirspeedType" : 13,
                             "get_MinAirspeed" : 14,
                             "SetMinAirspeed" : 15,
                             "get_MaxAirspeedType" : 16,
                             "get_MaxAirspeed" : 17,
                             "SetMaxAirspeed" : 18, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrPropulsionThrust._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrPropulsionThrust from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrPropulsionThrust.__dict__ and type(IAgAvtrPropulsionThrust.__dict__[attrname]) == property:
            return IAgAvtrPropulsionThrust.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrPropulsionThrust.")
    
    _get_UseConstantThrust_metadata = { "name" : "UseConstantThrust",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def UseConstantThrust(self) -> bool:
        """The option to use a constant thrust for a thrust model."""
        return self._intf.get_property(IAgAvtrPropulsionThrust._metadata, IAgAvtrPropulsionThrust._get_UseConstantThrust_metadata)

    _set_UseConstantThrust_metadata = { "name" : "UseConstantThrust",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @UseConstantThrust.setter
    def UseConstantThrust(self, newVal:bool) -> None:
        """The option to use a constant thrust for a thrust model."""
        return self._intf.set_property(IAgAvtrPropulsionThrust._metadata, IAgAvtrPropulsionThrust._set_UseConstantThrust_metadata, newVal)

    _get_ConstantThrust_metadata = { "name" : "ConstantThrust",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def ConstantThrust(self) -> float:
        """The constant thrust value for a thrust model set to Constant Thrust mode."""
        return self._intf.get_property(IAgAvtrPropulsionThrust._metadata, IAgAvtrPropulsionThrust._get_ConstantThrust_metadata)

    _set_ConstantThrust_metadata = { "name" : "ConstantThrust",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @ConstantThrust.setter
    def ConstantThrust(self, newVal:float) -> None:
        """The constant thrust value for a thrust model set to Constant Thrust mode."""
        return self._intf.set_property(IAgAvtrPropulsionThrust._metadata, IAgAvtrPropulsionThrust._set_ConstantThrust_metadata, newVal)

    _get_BoostThrust_metadata = { "name" : "BoostThrust",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def BoostThrust(self) -> float:
        """The boost thrust value for a thrust model set to Boost/Sustain Thrust mode."""
        return self._intf.get_property(IAgAvtrPropulsionThrust._metadata, IAgAvtrPropulsionThrust._get_BoostThrust_metadata)

    _set_BoostThrust_metadata = { "name" : "BoostThrust",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @BoostThrust.setter
    def BoostThrust(self, newVal:float) -> None:
        """The boost thrust value for a thrust model set to Boost/Sustain Thrust mode."""
        return self._intf.set_property(IAgAvtrPropulsionThrust._metadata, IAgAvtrPropulsionThrust._set_BoostThrust_metadata, newVal)

    _get_BoostThrustTimeLimit_metadata = { "name" : "BoostThrustTimeLimit",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def BoostThrustTimeLimit(self) -> float:
        """The boost thrust time limit for a thrust model set to Boost/Sustain Thrust mode."""
        return self._intf.get_property(IAgAvtrPropulsionThrust._metadata, IAgAvtrPropulsionThrust._get_BoostThrustTimeLimit_metadata)

    _set_BoostThrustTimeLimit_metadata = { "name" : "BoostThrustTimeLimit",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @BoostThrustTimeLimit.setter
    def BoostThrustTimeLimit(self, newVal:float) -> None:
        """The boost thrust time limit for a thrust model set to Boost/Sustain Thrust mode."""
        return self._intf.set_property(IAgAvtrPropulsionThrust._metadata, IAgAvtrPropulsionThrust._set_BoostThrustTimeLimit_metadata, newVal)

    _get_SustainThrust_metadata = { "name" : "SustainThrust",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def SustainThrust(self) -> float:
        """The sustain thrust value for a thrust model set to Boost/Sustain Thrust mode."""
        return self._intf.get_property(IAgAvtrPropulsionThrust._metadata, IAgAvtrPropulsionThrust._get_SustainThrust_metadata)

    _set_SustainThrust_metadata = { "name" : "SustainThrust",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @SustainThrust.setter
    def SustainThrust(self, newVal:float) -> None:
        """The sustain thrust value for a thrust model set to Boost/Sustain Thrust mode."""
        return self._intf.set_property(IAgAvtrPropulsionThrust._metadata, IAgAvtrPropulsionThrust._set_SustainThrust_metadata, newVal)

    _get_SustainThrustTimeLimit_metadata = { "name" : "SustainThrustTimeLimit",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def SustainThrustTimeLimit(self) -> float:
        """The sustain thrust time limit for a thrust model set to Boost/Sustain Thrust mode."""
        return self._intf.get_property(IAgAvtrPropulsionThrust._metadata, IAgAvtrPropulsionThrust._get_SustainThrustTimeLimit_metadata)

    _set_SustainThrustTimeLimit_metadata = { "name" : "SustainThrustTimeLimit",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @SustainThrustTimeLimit.setter
    def SustainThrustTimeLimit(self, newVal:float) -> None:
        """The sustain thrust time limit for a thrust model set to Boost/Sustain Thrust mode."""
        return self._intf.set_property(IAgAvtrPropulsionThrust._metadata, IAgAvtrPropulsionThrust._set_SustainThrustTimeLimit_metadata, newVal)

    _get_MinAirspeedType_metadata = { "name" : "MinAirspeedType",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrAirspeedType),) }
    @property
    def MinAirspeedType(self) -> "AgEAvtrAirspeedType":
        """The min airspeed type for a thrust model."""
        return self._intf.get_property(IAgAvtrPropulsionThrust._metadata, IAgAvtrPropulsionThrust._get_MinAirspeedType_metadata)

    _get_MinAirspeed_metadata = { "name" : "MinAirspeed",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def MinAirspeed(self) -> float:
        """The min airspeed for a thrust model."""
        return self._intf.get_property(IAgAvtrPropulsionThrust._metadata, IAgAvtrPropulsionThrust._get_MinAirspeed_metadata)

    _SetMinAirspeed_metadata = { "name" : "SetMinAirspeed",
            "arg_types" : (agcom.LONG, agcom.DOUBLE,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrAirspeedType), agmarshall.DOUBLE_arg,) }
    def SetMinAirspeed(self, airspeedType:"AgEAvtrAirspeedType", airspeed:float) -> None:
        """Set the min airspeed type and value for a thrust model."""
        return self._intf.invoke(IAgAvtrPropulsionThrust._metadata, IAgAvtrPropulsionThrust._SetMinAirspeed_metadata, airspeedType, airspeed)

    _get_MaxAirspeedType_metadata = { "name" : "MaxAirspeedType",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrAirspeedType),) }
    @property
    def MaxAirspeedType(self) -> "AgEAvtrAirspeedType":
        """The max airspeed type for a thrust model."""
        return self._intf.get_property(IAgAvtrPropulsionThrust._metadata, IAgAvtrPropulsionThrust._get_MaxAirspeedType_metadata)

    _get_MaxAirspeed_metadata = { "name" : "MaxAirspeed",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def MaxAirspeed(self) -> float:
        """The max airspeed for a thrust model."""
        return self._intf.get_property(IAgAvtrPropulsionThrust._metadata, IAgAvtrPropulsionThrust._get_MaxAirspeed_metadata)

    _SetMaxAirspeed_metadata = { "name" : "SetMaxAirspeed",
            "arg_types" : (agcom.LONG, agcom.DOUBLE,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrAirspeedType), agmarshall.DOUBLE_arg,) }
    def SetMaxAirspeed(self, airspeedType:"AgEAvtrAirspeedType", airspeed:float) -> None:
        """Set the max airspeed type and value for a thrust model."""
        return self._intf.invoke(IAgAvtrPropulsionThrust._metadata, IAgAvtrPropulsionThrust._SetMaxAirspeed_metadata, airspeedType, airspeed)


agcls.AgClassCatalog.add_catalog_entry("{fea63cff-6fa0-406e-ad12-8b17617cb34d}", IAgAvtrPropulsionThrust)
agcls.AgTypeNameMap["IAgAvtrPropulsionThrust"] = IAgAvtrPropulsionThrust

class IAgAvtrBasicManeuverAirspeedOptions(object):
    """Interface used to access airspeed options for basic maneuver strategies."""
    _num_methods = 35
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{9c4162c8-e759-4bd7-abfa-05bf5dbe816c}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_AirspeedMode" : 1,
                             "set_AirspeedMode" : 2,
                             "get_MinSpeedLimits" : 3,
                             "set_MinSpeedLimits" : 4,
                             "get_MaxSpeedLimits" : 5,
                             "set_MaxSpeedLimits" : 6,
                             "get_MaintainAirspeedType" : 7,
                             "set_MaintainAirspeedType" : 8,
                             "get_SpecifiedAirspeedType" : 9,
                             "set_SpecifiedAirspeedType" : 10,
                             "get_SpecifiedAccelDecelMode" : 11,
                             "set_SpecifiedAccelDecelMode" : 12,
                             "get_SpecifiedAirspeed" : 13,
                             "set_SpecifiedAirspeed" : 14,
                             "get_SpecifiedAccelDecelG" : 15,
                             "set_SpecifiedAccelDecelG" : 16,
                             "get_AccelG" : 17,
                             "set_AccelG" : 18,
                             "get_DecelG" : 19,
                             "set_DecelG" : 20,
                             "get_AccelMode" : 21,
                             "set_AccelMode" : 22,
                             "get_DecelMode" : 23,
                             "set_DecelMode" : 24,
                             "get_Throttle" : 25,
                             "set_Throttle" : 26,
                             "get_InterpolateInitG" : 27,
                             "set_InterpolateInitG" : 28,
                             "get_InterpolateEndG" : 29,
                             "set_InterpolateEndG" : 30,
                             "get_InterpolateEndTime" : 31,
                             "set_InterpolateEndTime" : 32,
                             "get_InterpolateStopAtEndTime" : 33,
                             "set_InterpolateStopAtEndTime" : 34,
                             "get_Thrust" : 35, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrBasicManeuverAirspeedOptions._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrBasicManeuverAirspeedOptions from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrBasicManeuverAirspeedOptions.__dict__ and type(IAgAvtrBasicManeuverAirspeedOptions.__dict__[attrname]) == property:
            return IAgAvtrBasicManeuverAirspeedOptions.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrBasicManeuverAirspeedOptions.")
    
    _get_AirspeedMode_metadata = { "name" : "AirspeedMode",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrBasicManeuverAirspeedMode),) }
    @property
    def AirspeedMode(self) -> "AgEAvtrBasicManeuverAirspeedMode":
        """The active airspeed mode."""
        return self._intf.get_property(IAgAvtrBasicManeuverAirspeedOptions._metadata, IAgAvtrBasicManeuverAirspeedOptions._get_AirspeedMode_metadata)

    _set_AirspeedMode_metadata = { "name" : "AirspeedMode",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrBasicManeuverAirspeedMode),) }
    @AirspeedMode.setter
    def AirspeedMode(self, newVal:"AgEAvtrBasicManeuverAirspeedMode") -> None:
        """The active airspeed mode."""
        return self._intf.set_property(IAgAvtrBasicManeuverAirspeedOptions._metadata, IAgAvtrBasicManeuverAirspeedOptions._set_AirspeedMode_metadata, newVal)

    _get_MinSpeedLimits_metadata = { "name" : "MinSpeedLimits",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrBasicManeuverStrategyAirspeedPerfLimits),) }
    @property
    def MinSpeedLimits(self) -> "AgEAvtrBasicManeuverStrategyAirspeedPerfLimits":
        """The minimum speed limit type to enforce."""
        return self._intf.get_property(IAgAvtrBasicManeuverAirspeedOptions._metadata, IAgAvtrBasicManeuverAirspeedOptions._get_MinSpeedLimits_metadata)

    _set_MinSpeedLimits_metadata = { "name" : "MinSpeedLimits",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrBasicManeuverStrategyAirspeedPerfLimits),) }
    @MinSpeedLimits.setter
    def MinSpeedLimits(self, newVal:"AgEAvtrBasicManeuverStrategyAirspeedPerfLimits") -> None:
        """The minimum speed limit type to enforce."""
        return self._intf.set_property(IAgAvtrBasicManeuverAirspeedOptions._metadata, IAgAvtrBasicManeuverAirspeedOptions._set_MinSpeedLimits_metadata, newVal)

    _get_MaxSpeedLimits_metadata = { "name" : "MaxSpeedLimits",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrBasicManeuverStrategyAirspeedPerfLimits),) }
    @property
    def MaxSpeedLimits(self) -> "AgEAvtrBasicManeuverStrategyAirspeedPerfLimits":
        """The maximum speed limit type to enforce."""
        return self._intf.get_property(IAgAvtrBasicManeuverAirspeedOptions._metadata, IAgAvtrBasicManeuverAirspeedOptions._get_MaxSpeedLimits_metadata)

    _set_MaxSpeedLimits_metadata = { "name" : "MaxSpeedLimits",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrBasicManeuverStrategyAirspeedPerfLimits),) }
    @MaxSpeedLimits.setter
    def MaxSpeedLimits(self, newVal:"AgEAvtrBasicManeuverStrategyAirspeedPerfLimits") -> None:
        """The maximum speed limit type to enforce."""
        return self._intf.set_property(IAgAvtrBasicManeuverAirspeedOptions._metadata, IAgAvtrBasicManeuverAirspeedOptions._set_MaxSpeedLimits_metadata, newVal)

    _get_MaintainAirspeedType_metadata = { "name" : "MaintainAirspeedType",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrAirspeedType),) }
    @property
    def MaintainAirspeedType(self) -> "AgEAvtrAirspeedType":
        """The airspeed type option in the Maintain Current Airspeed mode."""
        return self._intf.get_property(IAgAvtrBasicManeuverAirspeedOptions._metadata, IAgAvtrBasicManeuverAirspeedOptions._get_MaintainAirspeedType_metadata)

    _set_MaintainAirspeedType_metadata = { "name" : "MaintainAirspeedType",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrAirspeedType),) }
    @MaintainAirspeedType.setter
    def MaintainAirspeedType(self, newVal:"AgEAvtrAirspeedType") -> None:
        """The airspeed type option in the Maintain Current Airspeed mode."""
        return self._intf.set_property(IAgAvtrBasicManeuverAirspeedOptions._metadata, IAgAvtrBasicManeuverAirspeedOptions._set_MaintainAirspeedType_metadata, newVal)

    _get_SpecifiedAirspeedType_metadata = { "name" : "SpecifiedAirspeedType",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrAirspeedType),) }
    @property
    def SpecifiedAirspeedType(self) -> "AgEAvtrAirspeedType":
        """The airspeed type option in the Maintain Specified Airspeed mode."""
        return self._intf.get_property(IAgAvtrBasicManeuverAirspeedOptions._metadata, IAgAvtrBasicManeuverAirspeedOptions._get_SpecifiedAirspeedType_metadata)

    _set_SpecifiedAirspeedType_metadata = { "name" : "SpecifiedAirspeedType",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrAirspeedType),) }
    @SpecifiedAirspeedType.setter
    def SpecifiedAirspeedType(self, newVal:"AgEAvtrAirspeedType") -> None:
        """The airspeed type option in the Maintain Specified Airspeed mode."""
        return self._intf.set_property(IAgAvtrBasicManeuverAirspeedOptions._metadata, IAgAvtrBasicManeuverAirspeedOptions._set_SpecifiedAirspeedType_metadata, newVal)

    _get_SpecifiedAccelDecelMode_metadata = { "name" : "SpecifiedAccelDecelMode",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrPerfModelOverride),) }
    @property
    def SpecifiedAccelDecelMode(self) -> "AgEAvtrPerfModelOverride":
        """The accel/decel mode for the Maintain Specified Airspeed mode."""
        return self._intf.get_property(IAgAvtrBasicManeuverAirspeedOptions._metadata, IAgAvtrBasicManeuverAirspeedOptions._get_SpecifiedAccelDecelMode_metadata)

    _set_SpecifiedAccelDecelMode_metadata = { "name" : "SpecifiedAccelDecelMode",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrPerfModelOverride),) }
    @SpecifiedAccelDecelMode.setter
    def SpecifiedAccelDecelMode(self, newVal:"AgEAvtrPerfModelOverride") -> None:
        """The accel/decel mode for the Maintain Specified Airspeed mode."""
        return self._intf.set_property(IAgAvtrBasicManeuverAirspeedOptions._metadata, IAgAvtrBasicManeuverAirspeedOptions._set_SpecifiedAccelDecelMode_metadata, newVal)

    _get_SpecifiedAirspeed_metadata = { "name" : "SpecifiedAirspeed",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def SpecifiedAirspeed(self) -> float:
        """The airspeed for the Maintain Specified Airspeed mode."""
        return self._intf.get_property(IAgAvtrBasicManeuverAirspeedOptions._metadata, IAgAvtrBasicManeuverAirspeedOptions._get_SpecifiedAirspeed_metadata)

    _set_SpecifiedAirspeed_metadata = { "name" : "SpecifiedAirspeed",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @SpecifiedAirspeed.setter
    def SpecifiedAirspeed(self, newVal:float) -> None:
        """The airspeed for the Maintain Specified Airspeed mode."""
        return self._intf.set_property(IAgAvtrBasicManeuverAirspeedOptions._metadata, IAgAvtrBasicManeuverAirspeedOptions._set_SpecifiedAirspeed_metadata, newVal)

    _get_SpecifiedAccelDecelG_metadata = { "name" : "SpecifiedAccelDecelG",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def SpecifiedAccelDecelG(self) -> float:
        """The accel/decel G for the Maintain Specified Airspeed mode."""
        return self._intf.get_property(IAgAvtrBasicManeuverAirspeedOptions._metadata, IAgAvtrBasicManeuverAirspeedOptions._get_SpecifiedAccelDecelG_metadata)

    _set_SpecifiedAccelDecelG_metadata = { "name" : "SpecifiedAccelDecelG",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @SpecifiedAccelDecelG.setter
    def SpecifiedAccelDecelG(self, newVal:float) -> None:
        """The accel/decel G for the Maintain Specified Airspeed mode."""
        return self._intf.set_property(IAgAvtrBasicManeuverAirspeedOptions._metadata, IAgAvtrBasicManeuverAirspeedOptions._set_SpecifiedAccelDecelG_metadata, newVal)

    _get_AccelG_metadata = { "name" : "AccelG",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def AccelG(self) -> float:
        """The accel G for the Accelerate at mode."""
        return self._intf.get_property(IAgAvtrBasicManeuverAirspeedOptions._metadata, IAgAvtrBasicManeuverAirspeedOptions._get_AccelG_metadata)

    _set_AccelG_metadata = { "name" : "AccelG",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @AccelG.setter
    def AccelG(self, newVal:float) -> None:
        """The accel G for the Accelerate at mode."""
        return self._intf.set_property(IAgAvtrBasicManeuverAirspeedOptions._metadata, IAgAvtrBasicManeuverAirspeedOptions._set_AccelG_metadata, newVal)

    _get_DecelG_metadata = { "name" : "DecelG",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def DecelG(self) -> float:
        """The decel G for the Decelerate at mode."""
        return self._intf.get_property(IAgAvtrBasicManeuverAirspeedOptions._metadata, IAgAvtrBasicManeuverAirspeedOptions._get_DecelG_metadata)

    _set_DecelG_metadata = { "name" : "DecelG",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @DecelG.setter
    def DecelG(self, newVal:float) -> None:
        """The decel G for the Decelerate at mode."""
        return self._intf.set_property(IAgAvtrBasicManeuverAirspeedOptions._metadata, IAgAvtrBasicManeuverAirspeedOptions._set_DecelG_metadata, newVal)

    _get_AccelMode_metadata = { "name" : "AccelMode",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrPerfModelOverride),) }
    @property
    def AccelMode(self) -> "AgEAvtrPerfModelOverride":
        """The accel mode for the Accelerate at mode."""
        return self._intf.get_property(IAgAvtrBasicManeuverAirspeedOptions._metadata, IAgAvtrBasicManeuverAirspeedOptions._get_AccelMode_metadata)

    _set_AccelMode_metadata = { "name" : "AccelMode",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrPerfModelOverride),) }
    @AccelMode.setter
    def AccelMode(self, newVal:"AgEAvtrPerfModelOverride") -> None:
        """The accel mode for the Accelerate at mode."""
        return self._intf.set_property(IAgAvtrBasicManeuverAirspeedOptions._metadata, IAgAvtrBasicManeuverAirspeedOptions._set_AccelMode_metadata, newVal)

    _get_DecelMode_metadata = { "name" : "DecelMode",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrPerfModelOverride),) }
    @property
    def DecelMode(self) -> "AgEAvtrPerfModelOverride":
        """The accel mode for the Decelerate at mode."""
        return self._intf.get_property(IAgAvtrBasicManeuverAirspeedOptions._metadata, IAgAvtrBasicManeuverAirspeedOptions._get_DecelMode_metadata)

    _set_DecelMode_metadata = { "name" : "DecelMode",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrPerfModelOverride),) }
    @DecelMode.setter
    def DecelMode(self, newVal:"AgEAvtrPerfModelOverride") -> None:
        """The accel mode for the Decelerate at mode."""
        return self._intf.set_property(IAgAvtrBasicManeuverAirspeedOptions._metadata, IAgAvtrBasicManeuverAirspeedOptions._set_DecelMode_metadata, newVal)

    _get_Throttle_metadata = { "name" : "Throttle",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def Throttle(self) -> float:
        """The throttle setting for the Accel/Decel using Aero/Propulsion at mode."""
        return self._intf.get_property(IAgAvtrBasicManeuverAirspeedOptions._metadata, IAgAvtrBasicManeuverAirspeedOptions._get_Throttle_metadata)

    _set_Throttle_metadata = { "name" : "Throttle",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @Throttle.setter
    def Throttle(self, newVal:float) -> None:
        """The throttle setting for the Accel/Decel using Aero/Propulsion at mode."""
        return self._intf.set_property(IAgAvtrBasicManeuverAirspeedOptions._metadata, IAgAvtrBasicManeuverAirspeedOptions._set_Throttle_metadata, newVal)

    _get_InterpolateInitG_metadata = { "name" : "InterpolateInitG",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def InterpolateInitG(self) -> float:
        """The initial G for the Interpolate Accel/Decel over Interval mode."""
        return self._intf.get_property(IAgAvtrBasicManeuverAirspeedOptions._metadata, IAgAvtrBasicManeuverAirspeedOptions._get_InterpolateInitG_metadata)

    _set_InterpolateInitG_metadata = { "name" : "InterpolateInitG",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @InterpolateInitG.setter
    def InterpolateInitG(self, newVal:float) -> None:
        """The initial G for the Interpolate Accel/Decel over Interval mode."""
        return self._intf.set_property(IAgAvtrBasicManeuverAirspeedOptions._metadata, IAgAvtrBasicManeuverAirspeedOptions._set_InterpolateInitG_metadata, newVal)

    _get_InterpolateEndG_metadata = { "name" : "InterpolateEndG",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def InterpolateEndG(self) -> float:
        """The end G for the Interpolate Accel/Decel over Interval mode."""
        return self._intf.get_property(IAgAvtrBasicManeuverAirspeedOptions._metadata, IAgAvtrBasicManeuverAirspeedOptions._get_InterpolateEndG_metadata)

    _set_InterpolateEndG_metadata = { "name" : "InterpolateEndG",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @InterpolateEndG.setter
    def InterpolateEndG(self, newVal:float) -> None:
        """The end G for the Interpolate Accel/Decel over Interval mode."""
        return self._intf.set_property(IAgAvtrBasicManeuverAirspeedOptions._metadata, IAgAvtrBasicManeuverAirspeedOptions._set_InterpolateEndG_metadata, newVal)

    _get_InterpolateEndTime_metadata = { "name" : "InterpolateEndTime",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def InterpolateEndTime(self) -> float:
        """The end time for the Interpolate Accel/Decel over Interval mode."""
        return self._intf.get_property(IAgAvtrBasicManeuverAirspeedOptions._metadata, IAgAvtrBasicManeuverAirspeedOptions._get_InterpolateEndTime_metadata)

    _set_InterpolateEndTime_metadata = { "name" : "InterpolateEndTime",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @InterpolateEndTime.setter
    def InterpolateEndTime(self, newVal:float) -> None:
        """The end time for the Interpolate Accel/Decel over Interval mode."""
        return self._intf.set_property(IAgAvtrBasicManeuverAirspeedOptions._metadata, IAgAvtrBasicManeuverAirspeedOptions._set_InterpolateEndTime_metadata, newVal)

    _get_InterpolateStopAtEndTime_metadata = { "name" : "InterpolateStopAtEndTime",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def InterpolateStopAtEndTime(self) -> bool:
        """The option to stop at the end time for the Interpolate Accel/Decel over Interval mode."""
        return self._intf.get_property(IAgAvtrBasicManeuverAirspeedOptions._metadata, IAgAvtrBasicManeuverAirspeedOptions._get_InterpolateStopAtEndTime_metadata)

    _set_InterpolateStopAtEndTime_metadata = { "name" : "InterpolateStopAtEndTime",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @InterpolateStopAtEndTime.setter
    def InterpolateStopAtEndTime(self, newVal:bool) -> None:
        """The option to stop at the end time for the Interpolate Accel/Decel over Interval mode."""
        return self._intf.set_property(IAgAvtrBasicManeuverAirspeedOptions._metadata, IAgAvtrBasicManeuverAirspeedOptions._set_InterpolateStopAtEndTime_metadata, newVal)

    _get_Thrust_metadata = { "name" : "Thrust",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def Thrust(self) -> "IAgAvtrPropulsionThrust":
        """Get the thrust options for the Specify Thrust mode."""
        return self._intf.get_property(IAgAvtrBasicManeuverAirspeedOptions._metadata, IAgAvtrBasicManeuverAirspeedOptions._get_Thrust_metadata)


agcls.AgClassCatalog.add_catalog_entry("{9c4162c8-e759-4bd7-abfa-05bf5dbe816c}", IAgAvtrBasicManeuverAirspeedOptions)
agcls.AgTypeNameMap["IAgAvtrBasicManeuverAirspeedOptions"] = IAgAvtrBasicManeuverAirspeedOptions

class IAgAvtrBasicManeuverStrategyAileronRoll(object):
    """Interface used to access options for a Aileron Roll Strategy of a Basic Maneuver Procedure."""
    _num_methods = 15
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{75e11578-6c8f-4875-8b72-e678d80510d7}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_FlightPathOption" : 1,
                             "set_FlightPathOption" : 2,
                             "get_ActiveMode" : 3,
                             "set_ActiveMode" : 4,
                             "get_ActiveTurnDirection" : 5,
                             "set_ActiveTurnDirection" : 6,
                             "get_ActiveAngle" : 7,
                             "set_ActiveAngle" : 8,
                             "get_RollOrientation" : 9,
                             "set_RollOrientation" : 10,
                             "get_RollRateMode" : 11,
                             "set_RollRateMode" : 12,
                             "get_OverrideRollRate" : 13,
                             "set_OverrideRollRate" : 14,
                             "get_AirspeedOptions" : 15, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrBasicManeuverStrategyAileronRoll._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrBasicManeuverStrategyAileronRoll from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrBasicManeuverStrategyAileronRoll.__dict__ and type(IAgAvtrBasicManeuverStrategyAileronRoll.__dict__[attrname]) == property:
            return IAgAvtrBasicManeuverStrategyAileronRoll.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrBasicManeuverStrategyAileronRoll.")
    
    _get_FlightPathOption_metadata = { "name" : "FlightPathOption",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrAileronRollFlightPath),) }
    @property
    def FlightPathOption(self) -> "AgEAvtrAileronRollFlightPath":
        """The flight path option."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyAileronRoll._metadata, IAgAvtrBasicManeuverStrategyAileronRoll._get_FlightPathOption_metadata)

    _set_FlightPathOption_metadata = { "name" : "FlightPathOption",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrAileronRollFlightPath),) }
    @FlightPathOption.setter
    def FlightPathOption(self, newVal:"AgEAvtrAileronRollFlightPath") -> None:
        """The flight path option."""
        return self._intf.set_property(IAgAvtrBasicManeuverStrategyAileronRoll._metadata, IAgAvtrBasicManeuverStrategyAileronRoll._set_FlightPathOption_metadata, newVal)

    _get_ActiveMode_metadata = { "name" : "ActiveMode",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrAileronRollMode),) }
    @property
    def ActiveMode(self) -> "AgEAvtrAileronRollMode":
        """The aileron roll mode."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyAileronRoll._metadata, IAgAvtrBasicManeuverStrategyAileronRoll._get_ActiveMode_metadata)

    _set_ActiveMode_metadata = { "name" : "ActiveMode",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrAileronRollMode),) }
    @ActiveMode.setter
    def ActiveMode(self, newVal:"AgEAvtrAileronRollMode") -> None:
        """The aileron roll mode."""
        return self._intf.set_property(IAgAvtrBasicManeuverStrategyAileronRoll._metadata, IAgAvtrBasicManeuverStrategyAileronRoll._set_ActiveMode_metadata, newVal)

    _get_ActiveTurnDirection_metadata = { "name" : "ActiveTurnDirection",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrRollLeftRight),) }
    @property
    def ActiveTurnDirection(self) -> "AgEAvtrRollLeftRight":
        """The roll turn direction for the active roll mode."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyAileronRoll._metadata, IAgAvtrBasicManeuverStrategyAileronRoll._get_ActiveTurnDirection_metadata)

    _set_ActiveTurnDirection_metadata = { "name" : "ActiveTurnDirection",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrRollLeftRight),) }
    @ActiveTurnDirection.setter
    def ActiveTurnDirection(self, newVal:"AgEAvtrRollLeftRight") -> None:
        """The roll turn direction for the active roll mode."""
        return self._intf.set_property(IAgAvtrBasicManeuverStrategyAileronRoll._metadata, IAgAvtrBasicManeuverStrategyAileronRoll._set_ActiveTurnDirection_metadata, newVal)

    _get_ActiveAngle_metadata = { "name" : "ActiveAngle",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def ActiveAngle(self) -> typing.Any:
        """The roll angle for the active roll mode."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyAileronRoll._metadata, IAgAvtrBasicManeuverStrategyAileronRoll._get_ActiveAngle_metadata)

    _set_ActiveAngle_metadata = { "name" : "ActiveAngle",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @ActiveAngle.setter
    def ActiveAngle(self, newVal:typing.Any) -> None:
        """The roll angle for the active roll mode."""
        return self._intf.set_property(IAgAvtrBasicManeuverStrategyAileronRoll._metadata, IAgAvtrBasicManeuverStrategyAileronRoll._set_ActiveAngle_metadata, newVal)

    _get_RollOrientation_metadata = { "name" : "RollOrientation",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrRollUprightInverted),) }
    @property
    def RollOrientation(self) -> "AgEAvtrRollUprightInverted":
        """The orientation to roll to for the roll to orientation mode."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyAileronRoll._metadata, IAgAvtrBasicManeuverStrategyAileronRoll._get_RollOrientation_metadata)

    _set_RollOrientation_metadata = { "name" : "RollOrientation",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrRollUprightInverted),) }
    @RollOrientation.setter
    def RollOrientation(self, newVal:"AgEAvtrRollUprightInverted") -> None:
        """The orientation to roll to for the roll to orientation mode."""
        return self._intf.set_property(IAgAvtrBasicManeuverStrategyAileronRoll._metadata, IAgAvtrBasicManeuverStrategyAileronRoll._set_RollOrientation_metadata, newVal)

    _get_RollRateMode_metadata = { "name" : "RollRateMode",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrPerfModelOverride),) }
    @property
    def RollRateMode(self) -> "AgEAvtrPerfModelOverride":
        """The roll rate mode for the aileron roll."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyAileronRoll._metadata, IAgAvtrBasicManeuverStrategyAileronRoll._get_RollRateMode_metadata)

    _set_RollRateMode_metadata = { "name" : "RollRateMode",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrPerfModelOverride),) }
    @RollRateMode.setter
    def RollRateMode(self, newVal:"AgEAvtrPerfModelOverride") -> None:
        """The roll rate mode for the aileron roll."""
        return self._intf.set_property(IAgAvtrBasicManeuverStrategyAileronRoll._metadata, IAgAvtrBasicManeuverStrategyAileronRoll._set_RollRateMode_metadata, newVal)

    _get_OverrideRollRate_metadata = { "name" : "OverrideRollRate",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def OverrideRollRate(self) -> typing.Any:
        """The roll rate override value for the aileron roll turn. The roll rate mode must be set to override to access this property."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyAileronRoll._metadata, IAgAvtrBasicManeuverStrategyAileronRoll._get_OverrideRollRate_metadata)

    _set_OverrideRollRate_metadata = { "name" : "OverrideRollRate",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @OverrideRollRate.setter
    def OverrideRollRate(self, newVal:typing.Any) -> None:
        """The roll rate override value for the aileron roll turn. The roll rate mode must be set to override to access this property."""
        return self._intf.set_property(IAgAvtrBasicManeuverStrategyAileronRoll._metadata, IAgAvtrBasicManeuverStrategyAileronRoll._set_OverrideRollRate_metadata, newVal)

    _get_AirspeedOptions_metadata = { "name" : "AirspeedOptions",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def AirspeedOptions(self) -> "IAgAvtrBasicManeuverAirspeedOptions":
        """Get the airspeed options."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyAileronRoll._metadata, IAgAvtrBasicManeuverStrategyAileronRoll._get_AirspeedOptions_metadata)


agcls.AgClassCatalog.add_catalog_entry("{75e11578-6c8f-4875-8b72-e678d80510d7}", IAgAvtrBasicManeuverStrategyAileronRoll)
agcls.AgTypeNameMap["IAgAvtrBasicManeuverStrategyAileronRoll"] = IAgAvtrBasicManeuverStrategyAileronRoll

class IAgAvtrBasicManeuverStrategyAutopilotNav(object):
    """Interface used to access options for the Autopilot - Horizontal Plane Strategy of a Basic Maneuver Procedure."""
    _num_methods = 15
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{80382b4b-412a-4c57-8685-7d88a0100cb6}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_ActiveMode" : 1,
                             "set_ActiveMode" : 2,
                             "get_ActiveHeadingCourseValue" : 3,
                             "set_ActiveHeadingCourseValue" : 4,
                             "get_DampingRatio" : 5,
                             "set_DampingRatio" : 6,
                             "get_ControlLimitMode" : 7,
                             "get_ControlLimitTurnRadius" : 8,
                             "get_ControlLimitTurnRate" : 9,
                             "get_ControlLimitHorizAccel" : 10,
                             "SetControlLimit" : 11,
                             "get_CompensateForCoriolisAccel" : 12,
                             "set_CompensateForCoriolisAccel" : 13,
                             "get_StopWhenConditionsMet" : 14,
                             "set_StopWhenConditionsMet" : 15, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrBasicManeuverStrategyAutopilotNav._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrBasicManeuverStrategyAutopilotNav from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrBasicManeuverStrategyAutopilotNav.__dict__ and type(IAgAvtrBasicManeuverStrategyAutopilotNav.__dict__[attrname]) == property:
            return IAgAvtrBasicManeuverStrategyAutopilotNav.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrBasicManeuverStrategyAutopilotNav.")
    
    _get_ActiveMode_metadata = { "name" : "ActiveMode",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrAutopilotHorizPlaneMode),) }
    @property
    def ActiveMode(self) -> "AgEAvtrAutopilotHorizPlaneMode":
        """The autopilot - horizontal plane mode."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyAutopilotNav._metadata, IAgAvtrBasicManeuverStrategyAutopilotNav._get_ActiveMode_metadata)

    _set_ActiveMode_metadata = { "name" : "ActiveMode",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrAutopilotHorizPlaneMode),) }
    @ActiveMode.setter
    def ActiveMode(self, newVal:"AgEAvtrAutopilotHorizPlaneMode") -> None:
        """The autopilot - horizontal plane mode."""
        return self._intf.set_property(IAgAvtrBasicManeuverStrategyAutopilotNav._metadata, IAgAvtrBasicManeuverStrategyAutopilotNav._set_ActiveMode_metadata, newVal)

    _get_ActiveHeadingCourseValue_metadata = { "name" : "ActiveHeadingCourseValue",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def ActiveHeadingCourseValue(self) -> typing.Any:
        """The heading/course angle or rate for the active mode."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyAutopilotNav._metadata, IAgAvtrBasicManeuverStrategyAutopilotNav._get_ActiveHeadingCourseValue_metadata)

    _set_ActiveHeadingCourseValue_metadata = { "name" : "ActiveHeadingCourseValue",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @ActiveHeadingCourseValue.setter
    def ActiveHeadingCourseValue(self, newVal:typing.Any) -> None:
        """The heading/course angle or rate for the active mode."""
        return self._intf.set_property(IAgAvtrBasicManeuverStrategyAutopilotNav._metadata, IAgAvtrBasicManeuverStrategyAutopilotNav._set_ActiveHeadingCourseValue_metadata, newVal)

    _get_DampingRatio_metadata = { "name" : "DampingRatio",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def DampingRatio(self) -> float:
        """The damping ratio of the control law."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyAutopilotNav._metadata, IAgAvtrBasicManeuverStrategyAutopilotNav._get_DampingRatio_metadata)

    _set_DampingRatio_metadata = { "name" : "DampingRatio",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @DampingRatio.setter
    def DampingRatio(self, newVal:float) -> None:
        """The damping ratio of the control law."""
        return self._intf.set_property(IAgAvtrBasicManeuverStrategyAutopilotNav._metadata, IAgAvtrBasicManeuverStrategyAutopilotNav._set_DampingRatio_metadata, newVal)

    _get_ControlLimitMode_metadata = { "name" : "ControlLimitMode",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrBasicManeuverStrategyNavControlLimit),) }
    @property
    def ControlLimitMode(self) -> "AgEAvtrBasicManeuverStrategyNavControlLimit":
        """Get the method to define the control limits of the aircraft during the maneuver."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyAutopilotNav._metadata, IAgAvtrBasicManeuverStrategyAutopilotNav._get_ControlLimitMode_metadata)

    _get_ControlLimitTurnRadius_metadata = { "name" : "ControlLimitTurnRadius",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def ControlLimitTurnRadius(self) -> float:
        """The specified turn radius for a control limit mode of specify min turn radius."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyAutopilotNav._metadata, IAgAvtrBasicManeuverStrategyAutopilotNav._get_ControlLimitTurnRadius_metadata)

    _get_ControlLimitTurnRate_metadata = { "name" : "ControlLimitTurnRate",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def ControlLimitTurnRate(self) -> typing.Any:
        """The specified turn rate for a control limit mode of specify max turn rate."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyAutopilotNav._metadata, IAgAvtrBasicManeuverStrategyAutopilotNav._get_ControlLimitTurnRate_metadata)

    _get_ControlLimitHorizAccel_metadata = { "name" : "ControlLimitHorizAccel",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def ControlLimitHorizAccel(self) -> float:
        """The specified horizontal acceleration for a control limit mode of specify max horiz accel."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyAutopilotNav._metadata, IAgAvtrBasicManeuverStrategyAutopilotNav._get_ControlLimitHorizAccel_metadata)

    _SetControlLimit_metadata = { "name" : "SetControlLimit",
            "arg_types" : (agcom.LONG, agcom.DOUBLE,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrBasicManeuverStrategyNavControlLimit), agmarshall.DOUBLE_arg,) }
    def SetControlLimit(self, controlLimitMode:"AgEAvtrBasicManeuverStrategyNavControlLimit", controlLimitValue:float) -> None:
        """Set the method and corresponding value to define the control limits of the aircraft during the maneuver."""
        return self._intf.invoke(IAgAvtrBasicManeuverStrategyAutopilotNav._metadata, IAgAvtrBasicManeuverStrategyAutopilotNav._SetControlLimit_metadata, controlLimitMode, controlLimitValue)

    _get_CompensateForCoriolisAccel_metadata = { "name" : "CompensateForCoriolisAccel",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def CompensateForCoriolisAccel(self) -> bool:
        """The option to compensate for the acceleration due to the Coriolis effect."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyAutopilotNav._metadata, IAgAvtrBasicManeuverStrategyAutopilotNav._get_CompensateForCoriolisAccel_metadata)

    _set_CompensateForCoriolisAccel_metadata = { "name" : "CompensateForCoriolisAccel",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @CompensateForCoriolisAccel.setter
    def CompensateForCoriolisAccel(self, newVal:bool) -> None:
        return self._intf.set_property(IAgAvtrBasicManeuverStrategyAutopilotNav._metadata, IAgAvtrBasicManeuverStrategyAutopilotNav._set_CompensateForCoriolisAccel_metadata, newVal)

    _get_StopWhenConditionsMet_metadata = { "name" : "StopWhenConditionsMet",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def StopWhenConditionsMet(self) -> bool:
        """Stop when conditions are met"""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyAutopilotNav._metadata, IAgAvtrBasicManeuverStrategyAutopilotNav._get_StopWhenConditionsMet_metadata)

    _set_StopWhenConditionsMet_metadata = { "name" : "StopWhenConditionsMet",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @StopWhenConditionsMet.setter
    def StopWhenConditionsMet(self, newVal:bool) -> None:
        """Stop when conditions are met"""
        return self._intf.set_property(IAgAvtrBasicManeuverStrategyAutopilotNav._metadata, IAgAvtrBasicManeuverStrategyAutopilotNav._set_StopWhenConditionsMet_metadata, newVal)


agcls.AgClassCatalog.add_catalog_entry("{80382b4b-412a-4c57-8685-7d88a0100cb6}", IAgAvtrBasicManeuverStrategyAutopilotNav)
agcls.AgTypeNameMap["IAgAvtrBasicManeuverStrategyAutopilotNav"] = IAgAvtrBasicManeuverStrategyAutopilotNav

class IAgAvtrBasicManeuverStrategyAutopilotProf(object):
    """Interface used to access options for the Autopilot - Vertical Plane Strategy of a Basic Maneuver Procedure."""
    _num_methods = 29
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{762406eb-338d-40c1-9ba5-44c38fb65456}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_AltitudeMode" : 1,
                             "set_AltitudeMode" : 2,
                             "get_AbsoluteAltitude" : 3,
                             "set_AbsoluteAltitude" : 4,
                             "get_RelativeAltitudeChange" : 5,
                             "set_RelativeAltitudeChange" : 6,
                             "get_AltitudeRate" : 7,
                             "set_AltitudeRate" : 8,
                             "get_FPA" : 9,
                             "set_FPA" : 10,
                             "get_AltitudeControlMode" : 11,
                             "set_AltitudeControlMode" : 12,
                             "get_ControlAltitudeRateValue" : 13,
                             "set_ControlAltitudeRateValue" : 14,
                             "get_ControlFPAValue" : 15,
                             "set_ControlFPAValue" : 16,
                             "get_ControlLimitMode" : 17,
                             "set_ControlLimitMode" : 18,
                             "get_MaxPitchRate" : 19,
                             "set_MaxPitchRate" : 20,
                             "get_FlyBallistic" : 21,
                             "set_FlyBallistic" : 22,
                             "get_DampingRatio" : 23,
                             "set_DampingRatio" : 24,
                             "get_AirspeedOptions" : 25,
                             "get_CompensateForCoriolisAccel" : 26,
                             "set_CompensateForCoriolisAccel" : 27,
                             "get_StopWhenConditionsMet" : 28,
                             "set_StopWhenConditionsMet" : 29, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrBasicManeuverStrategyAutopilotProf._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrBasicManeuverStrategyAutopilotProf from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrBasicManeuverStrategyAutopilotProf.__dict__ and type(IAgAvtrBasicManeuverStrategyAutopilotProf.__dict__[attrname]) == property:
            return IAgAvtrBasicManeuverStrategyAutopilotProf.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrBasicManeuverStrategyAutopilotProf.")
    
    _get_AltitudeMode_metadata = { "name" : "AltitudeMode",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrAutopilotAltitudeMode),) }
    @property
    def AltitudeMode(self) -> "AgEAvtrAutopilotAltitudeMode":
        """The altitude mode of the autopilot - vertical plane strategy."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyAutopilotProf._metadata, IAgAvtrBasicManeuverStrategyAutopilotProf._get_AltitudeMode_metadata)

    _set_AltitudeMode_metadata = { "name" : "AltitudeMode",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrAutopilotAltitudeMode),) }
    @AltitudeMode.setter
    def AltitudeMode(self, newVal:"AgEAvtrAutopilotAltitudeMode") -> None:
        """The altitude mode of the autopilot - vertical plane strategy."""
        return self._intf.set_property(IAgAvtrBasicManeuverStrategyAutopilotProf._metadata, IAgAvtrBasicManeuverStrategyAutopilotProf._set_AltitudeMode_metadata, newVal)

    _get_AbsoluteAltitude_metadata = { "name" : "AbsoluteAltitude",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def AbsoluteAltitude(self) -> float:
        """The absolute altitude for the specify altitude mode."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyAutopilotProf._metadata, IAgAvtrBasicManeuverStrategyAutopilotProf._get_AbsoluteAltitude_metadata)

    _set_AbsoluteAltitude_metadata = { "name" : "AbsoluteAltitude",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @AbsoluteAltitude.setter
    def AbsoluteAltitude(self, newVal:float) -> None:
        """The absolute altitude for the specify altitude mode."""
        return self._intf.set_property(IAgAvtrBasicManeuverStrategyAutopilotProf._metadata, IAgAvtrBasicManeuverStrategyAutopilotProf._set_AbsoluteAltitude_metadata, newVal)

    _get_RelativeAltitudeChange_metadata = { "name" : "RelativeAltitudeChange",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def RelativeAltitudeChange(self) -> float:
        """The relative altitude change for the specify altitude change mode."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyAutopilotProf._metadata, IAgAvtrBasicManeuverStrategyAutopilotProf._get_RelativeAltitudeChange_metadata)

    _set_RelativeAltitudeChange_metadata = { "name" : "RelativeAltitudeChange",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @RelativeAltitudeChange.setter
    def RelativeAltitudeChange(self, newVal:float) -> None:
        """The relative altitude change for the specify altitude change mode."""
        return self._intf.set_property(IAgAvtrBasicManeuverStrategyAutopilotProf._metadata, IAgAvtrBasicManeuverStrategyAutopilotProf._set_RelativeAltitudeChange_metadata, newVal)

    _get_AltitudeRate_metadata = { "name" : "AltitudeRate",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def AltitudeRate(self) -> float:
        """The altitude rate for the specify altitude rate mode."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyAutopilotProf._metadata, IAgAvtrBasicManeuverStrategyAutopilotProf._get_AltitudeRate_metadata)

    _set_AltitudeRate_metadata = { "name" : "AltitudeRate",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @AltitudeRate.setter
    def AltitudeRate(self, newVal:float) -> None:
        """The altitude rate for the specify altitude rate mode."""
        return self._intf.set_property(IAgAvtrBasicManeuverStrategyAutopilotProf._metadata, IAgAvtrBasicManeuverStrategyAutopilotProf._set_AltitudeRate_metadata, newVal)

    _get_FPA_metadata = { "name" : "FPA",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def FPA(self) -> typing.Any:
        """The flight path angle for the specify wind frame flight path angle mode."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyAutopilotProf._metadata, IAgAvtrBasicManeuverStrategyAutopilotProf._get_FPA_metadata)

    _set_FPA_metadata = { "name" : "FPA",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @FPA.setter
    def FPA(self, newVal:typing.Any) -> None:
        """The flight path angle for the specify wind frame flight path angle mode."""
        return self._intf.set_property(IAgAvtrBasicManeuverStrategyAutopilotProf._metadata, IAgAvtrBasicManeuverStrategyAutopilotProf._set_FPA_metadata, newVal)

    _get_AltitudeControlMode_metadata = { "name" : "AltitudeControlMode",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrAutopilotAltitudeControlMode),) }
    @property
    def AltitudeControlMode(self) -> "AgEAvtrAutopilotAltitudeControlMode":
        """The altitude control mode for the hold initial altitude, specify altitude, and specify altitude change modes."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyAutopilotProf._metadata, IAgAvtrBasicManeuverStrategyAutopilotProf._get_AltitudeControlMode_metadata)

    _set_AltitudeControlMode_metadata = { "name" : "AltitudeControlMode",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrAutopilotAltitudeControlMode),) }
    @AltitudeControlMode.setter
    def AltitudeControlMode(self, newVal:"AgEAvtrAutopilotAltitudeControlMode") -> None:
        """The altitude control mode for the hold initial altitude, specify altitude, and specify altitude change modes."""
        return self._intf.set_property(IAgAvtrBasicManeuverStrategyAutopilotProf._metadata, IAgAvtrBasicManeuverStrategyAutopilotProf._set_AltitudeControlMode_metadata, newVal)

    _get_ControlAltitudeRateValue_metadata = { "name" : "ControlAltitudeRateValue",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def ControlAltitudeRateValue(self) -> float:
        """The altitude rate control value for the hold initial altitude, specify altitude, and specify altitude change modes."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyAutopilotProf._metadata, IAgAvtrBasicManeuverStrategyAutopilotProf._get_ControlAltitudeRateValue_metadata)

    _set_ControlAltitudeRateValue_metadata = { "name" : "ControlAltitudeRateValue",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @ControlAltitudeRateValue.setter
    def ControlAltitudeRateValue(self, newVal:float) -> None:
        """The altitude rate control value for the hold initial altitude, specify altitude, and specify altitude change modes."""
        return self._intf.set_property(IAgAvtrBasicManeuverStrategyAutopilotProf._metadata, IAgAvtrBasicManeuverStrategyAutopilotProf._set_ControlAltitudeRateValue_metadata, newVal)

    _get_ControlFPAValue_metadata = { "name" : "ControlFPAValue",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def ControlFPAValue(self) -> typing.Any:
        """The control flight path angle value for the hold initial altitude, specify altitude, and specify altitude change modes."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyAutopilotProf._metadata, IAgAvtrBasicManeuverStrategyAutopilotProf._get_ControlFPAValue_metadata)

    _set_ControlFPAValue_metadata = { "name" : "ControlFPAValue",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @ControlFPAValue.setter
    def ControlFPAValue(self, newVal:typing.Any) -> None:
        """The control flight path angle value for the hold initial altitude, specify altitude, and specify altitude change modes."""
        return self._intf.set_property(IAgAvtrBasicManeuverStrategyAutopilotProf._metadata, IAgAvtrBasicManeuverStrategyAutopilotProf._set_ControlFPAValue_metadata, newVal)

    _get_ControlLimitMode_metadata = { "name" : "ControlLimitMode",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrPerfModelOverride),) }
    @property
    def ControlLimitMode(self) -> "AgEAvtrPerfModelOverride":
        """The control limits mode."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyAutopilotProf._metadata, IAgAvtrBasicManeuverStrategyAutopilotProf._get_ControlLimitMode_metadata)

    _set_ControlLimitMode_metadata = { "name" : "ControlLimitMode",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrPerfModelOverride),) }
    @ControlLimitMode.setter
    def ControlLimitMode(self, newVal:"AgEAvtrPerfModelOverride") -> None:
        """The control limits mode."""
        return self._intf.set_property(IAgAvtrBasicManeuverStrategyAutopilotProf._metadata, IAgAvtrBasicManeuverStrategyAutopilotProf._set_ControlLimitMode_metadata, newVal)

    _get_MaxPitchRate_metadata = { "name" : "MaxPitchRate",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def MaxPitchRate(self) -> typing.Any:
        """The max pitch rate for the control limits."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyAutopilotProf._metadata, IAgAvtrBasicManeuverStrategyAutopilotProf._get_MaxPitchRate_metadata)

    _set_MaxPitchRate_metadata = { "name" : "MaxPitchRate",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @MaxPitchRate.setter
    def MaxPitchRate(self, newVal:typing.Any) -> None:
        """The max pitch rate for the control limits."""
        return self._intf.set_property(IAgAvtrBasicManeuverStrategyAutopilotProf._metadata, IAgAvtrBasicManeuverStrategyAutopilotProf._set_MaxPitchRate_metadata, newVal)

    _get_FlyBallistic_metadata = { "name" : "FlyBallistic",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def FlyBallistic(self) -> bool:
        """The option to fly a ballistic trajectory when the performance is insufficient."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyAutopilotProf._metadata, IAgAvtrBasicManeuverStrategyAutopilotProf._get_FlyBallistic_metadata)

    _set_FlyBallistic_metadata = { "name" : "FlyBallistic",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @FlyBallistic.setter
    def FlyBallistic(self, newVal:bool) -> None:
        """The option to fly a ballistic trajectory when the performance is insufficient."""
        return self._intf.set_property(IAgAvtrBasicManeuverStrategyAutopilotProf._metadata, IAgAvtrBasicManeuverStrategyAutopilotProf._set_FlyBallistic_metadata, newVal)

    _get_DampingRatio_metadata = { "name" : "DampingRatio",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def DampingRatio(self) -> float:
        """The damping ratio of the control law."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyAutopilotProf._metadata, IAgAvtrBasicManeuverStrategyAutopilotProf._get_DampingRatio_metadata)

    _set_DampingRatio_metadata = { "name" : "DampingRatio",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @DampingRatio.setter
    def DampingRatio(self, newVal:float) -> None:
        """The damping ratio of the control law."""
        return self._intf.set_property(IAgAvtrBasicManeuverStrategyAutopilotProf._metadata, IAgAvtrBasicManeuverStrategyAutopilotProf._set_DampingRatio_metadata, newVal)

    _get_AirspeedOptions_metadata = { "name" : "AirspeedOptions",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def AirspeedOptions(self) -> "IAgAvtrBasicManeuverAirspeedOptions":
        """Get the airspeed options."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyAutopilotProf._metadata, IAgAvtrBasicManeuverStrategyAutopilotProf._get_AirspeedOptions_metadata)

    _get_CompensateForCoriolisAccel_metadata = { "name" : "CompensateForCoriolisAccel",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def CompensateForCoriolisAccel(self) -> bool:
        """The option to compensate for the acceleration due to the Coriolis effect."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyAutopilotProf._metadata, IAgAvtrBasicManeuverStrategyAutopilotProf._get_CompensateForCoriolisAccel_metadata)

    _set_CompensateForCoriolisAccel_metadata = { "name" : "CompensateForCoriolisAccel",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @CompensateForCoriolisAccel.setter
    def CompensateForCoriolisAccel(self, newVal:bool) -> None:
        return self._intf.set_property(IAgAvtrBasicManeuverStrategyAutopilotProf._metadata, IAgAvtrBasicManeuverStrategyAutopilotProf._set_CompensateForCoriolisAccel_metadata, newVal)

    _get_StopWhenConditionsMet_metadata = { "name" : "StopWhenConditionsMet",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def StopWhenConditionsMet(self) -> bool:
        """Stop when conditions are met"""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyAutopilotProf._metadata, IAgAvtrBasicManeuverStrategyAutopilotProf._get_StopWhenConditionsMet_metadata)

    _set_StopWhenConditionsMet_metadata = { "name" : "StopWhenConditionsMet",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @StopWhenConditionsMet.setter
    def StopWhenConditionsMet(self, newVal:bool) -> None:
        """Stop when conditions are met"""
        return self._intf.set_property(IAgAvtrBasicManeuverStrategyAutopilotProf._metadata, IAgAvtrBasicManeuverStrategyAutopilotProf._set_StopWhenConditionsMet_metadata, newVal)


agcls.AgClassCatalog.add_catalog_entry("{762406eb-338d-40c1-9ba5-44c38fb65456}", IAgAvtrBasicManeuverStrategyAutopilotProf)
agcls.AgTypeNameMap["IAgAvtrBasicManeuverStrategyAutopilotProf"] = IAgAvtrBasicManeuverStrategyAutopilotProf

class IAgAvtrBasicManeuverStrategyBarrelRoll(object):
    """Interface used to access options for a Barrel Roll Strategy of a Basic Maneuver Procedure."""
    _num_methods = 16
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{7709326e-8835-4118-bf07-714c5983ec58}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_HelixAngle" : 1,
                             "set_HelixAngle" : 2,
                             "get_HelixAngleMode" : 3,
                             "set_HelixAngleMode" : 4,
                             "get_TopLoadFactor" : 5,
                             "set_TopLoadFactor" : 6,
                             "get_BottomLoadFactor" : 7,
                             "set_BottomLoadFactor" : 8,
                             "get_TorsionAngle" : 9,
                             "set_TorsionAngle" : 10,
                             "get_HoldInitTAS" : 11,
                             "set_HoldInitTAS" : 12,
                             "get_AirspeedType" : 13,
                             "get_TopAirspeed" : 14,
                             "get_BottomAirspeed" : 15,
                             "SetAirspeeds" : 16, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrBasicManeuverStrategyBarrelRoll._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrBasicManeuverStrategyBarrelRoll from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrBasicManeuverStrategyBarrelRoll.__dict__ and type(IAgAvtrBasicManeuverStrategyBarrelRoll.__dict__[attrname]) == property:
            return IAgAvtrBasicManeuverStrategyBarrelRoll.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrBasicManeuverStrategyBarrelRoll.")
    
    _get_HelixAngle_metadata = { "name" : "HelixAngle",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def HelixAngle(self) -> typing.Any:
        """The helix angle for the barrel roll. The angle that the aircraft travels around the velocity vector."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyBarrelRoll._metadata, IAgAvtrBasicManeuverStrategyBarrelRoll._get_HelixAngle_metadata)

    _set_HelixAngle_metadata = { "name" : "HelixAngle",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @HelixAngle.setter
    def HelixAngle(self, newVal:typing.Any) -> None:
        """The helix angle for the barrel roll. The angle that the aircraft travels around the velocity vector."""
        return self._intf.set_property(IAgAvtrBasicManeuverStrategyBarrelRoll._metadata, IAgAvtrBasicManeuverStrategyBarrelRoll._set_HelixAngle_metadata, newVal)

    _get_HelixAngleMode_metadata = { "name" : "HelixAngleMode",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrAngleMode),) }
    @property
    def HelixAngleMode(self) -> "AgEAvtrAngleMode":
        """The helix angle mode for the barrel roll."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyBarrelRoll._metadata, IAgAvtrBasicManeuverStrategyBarrelRoll._get_HelixAngleMode_metadata)

    _set_HelixAngleMode_metadata = { "name" : "HelixAngleMode",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrAngleMode),) }
    @HelixAngleMode.setter
    def HelixAngleMode(self, newVal:"AgEAvtrAngleMode") -> None:
        """The helix angle mode for the barrel roll."""
        return self._intf.set_property(IAgAvtrBasicManeuverStrategyBarrelRoll._metadata, IAgAvtrBasicManeuverStrategyBarrelRoll._set_HelixAngleMode_metadata, newVal)

    _get_TopLoadFactor_metadata = { "name" : "TopLoadFactor",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def TopLoadFactor(self) -> float:
        """The load factor at the top of the loop."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyBarrelRoll._metadata, IAgAvtrBasicManeuverStrategyBarrelRoll._get_TopLoadFactor_metadata)

    _set_TopLoadFactor_metadata = { "name" : "TopLoadFactor",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @TopLoadFactor.setter
    def TopLoadFactor(self, newVal:float) -> None:
        """The load factor at the top of the loop."""
        return self._intf.set_property(IAgAvtrBasicManeuverStrategyBarrelRoll._metadata, IAgAvtrBasicManeuverStrategyBarrelRoll._set_TopLoadFactor_metadata, newVal)

    _get_BottomLoadFactor_metadata = { "name" : "BottomLoadFactor",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def BottomLoadFactor(self) -> float:
        """The load factor at the bottom of the loop."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyBarrelRoll._metadata, IAgAvtrBasicManeuverStrategyBarrelRoll._get_BottomLoadFactor_metadata)

    _set_BottomLoadFactor_metadata = { "name" : "BottomLoadFactor",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @BottomLoadFactor.setter
    def BottomLoadFactor(self, newVal:float) -> None:
        """The load factor at the bottom of the loop."""
        return self._intf.set_property(IAgAvtrBasicManeuverStrategyBarrelRoll._metadata, IAgAvtrBasicManeuverStrategyBarrelRoll._set_BottomLoadFactor_metadata, newVal)

    _get_TorsionAngle_metadata = { "name" : "TorsionAngle",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def TorsionAngle(self) -> typing.Any:
        """The torsion angle for the barrel roll. The angle of the turn from the aircraft's velocity vector."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyBarrelRoll._metadata, IAgAvtrBasicManeuverStrategyBarrelRoll._get_TorsionAngle_metadata)

    _set_TorsionAngle_metadata = { "name" : "TorsionAngle",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @TorsionAngle.setter
    def TorsionAngle(self, newVal:typing.Any) -> None:
        """The torsion angle for the barrel roll. The angle of the turn from the aircraft's velocity vector."""
        return self._intf.set_property(IAgAvtrBasicManeuverStrategyBarrelRoll._metadata, IAgAvtrBasicManeuverStrategyBarrelRoll._set_TorsionAngle_metadata, newVal)

    _get_HoldInitTAS_metadata = { "name" : "HoldInitTAS",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def HoldInitTAS(self) -> bool:
        """The option to hold the initial true airspeed."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyBarrelRoll._metadata, IAgAvtrBasicManeuverStrategyBarrelRoll._get_HoldInitTAS_metadata)

    _set_HoldInitTAS_metadata = { "name" : "HoldInitTAS",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @HoldInitTAS.setter
    def HoldInitTAS(self, newVal:bool) -> None:
        """The option to hold the initial true airspeed."""
        return self._intf.set_property(IAgAvtrBasicManeuverStrategyBarrelRoll._metadata, IAgAvtrBasicManeuverStrategyBarrelRoll._set_HoldInitTAS_metadata, newVal)

    _get_AirspeedType_metadata = { "name" : "AirspeedType",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrAirspeedType),) }
    @property
    def AirspeedType(self) -> "AgEAvtrAirspeedType":
        """The airspeed type."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyBarrelRoll._metadata, IAgAvtrBasicManeuverStrategyBarrelRoll._get_AirspeedType_metadata)

    _get_TopAirspeed_metadata = { "name" : "TopAirspeed",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def TopAirspeed(self) -> float:
        """The speed at the top of the loop."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyBarrelRoll._metadata, IAgAvtrBasicManeuverStrategyBarrelRoll._get_TopAirspeed_metadata)

    _get_BottomAirspeed_metadata = { "name" : "BottomAirspeed",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def BottomAirspeed(self) -> float:
        """The speed at the bottom of the loop."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyBarrelRoll._metadata, IAgAvtrBasicManeuverStrategyBarrelRoll._get_BottomAirspeed_metadata)

    _SetAirspeeds_metadata = { "name" : "SetAirspeeds",
            "arg_types" : (agcom.LONG, agcom.DOUBLE, agcom.DOUBLE,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrAirspeedType), agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg,) }
    def SetAirspeeds(self, airspeedType:"AgEAvtrAirspeedType", topAirspeed:float, bottomAirspeed:float) -> None:
        """Set the speeds at the top and bottom of the loop."""
        return self._intf.invoke(IAgAvtrBasicManeuverStrategyBarrelRoll._metadata, IAgAvtrBasicManeuverStrategyBarrelRoll._SetAirspeeds_metadata, airspeedType, topAirspeed, bottomAirspeed)


agcls.AgClassCatalog.add_catalog_entry("{7709326e-8835-4118-bf07-714c5983ec58}", IAgAvtrBasicManeuverStrategyBarrelRoll)
agcls.AgTypeNameMap["IAgAvtrBasicManeuverStrategyBarrelRoll"] = IAgAvtrBasicManeuverStrategyBarrelRoll

class IAgAvtrBasicManeuverStrategyLoop(object):
    """Interface used to access options for a Loop Strategy of a Basic Maneuver Procedure."""
    _num_methods = 14
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{812dd3a8-77ec-44eb-8a7d-e51b6e9e4942}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_LoopAngle" : 1,
                             "set_LoopAngle" : 2,
                             "get_LoopAngleMode" : 3,
                             "set_LoopAngleMode" : 4,
                             "get_TopLoadFactor" : 5,
                             "set_TopLoadFactor" : 6,
                             "get_BottomLoadFactor" : 7,
                             "set_BottomLoadFactor" : 8,
                             "get_HoldInitTAS" : 9,
                             "set_HoldInitTAS" : 10,
                             "get_AirspeedType" : 11,
                             "get_TopAirspeed" : 12,
                             "get_BottomAirspeed" : 13,
                             "SetAirspeeds" : 14, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrBasicManeuverStrategyLoop._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrBasicManeuverStrategyLoop from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrBasicManeuverStrategyLoop.__dict__ and type(IAgAvtrBasicManeuverStrategyLoop.__dict__[attrname]) == property:
            return IAgAvtrBasicManeuverStrategyLoop.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrBasicManeuverStrategyLoop.")
    
    _get_LoopAngle_metadata = { "name" : "LoopAngle",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def LoopAngle(self) -> typing.Any:
        """The loop angle for maneuver. The total change in pitch angle the aircraft flies."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyLoop._metadata, IAgAvtrBasicManeuverStrategyLoop._get_LoopAngle_metadata)

    _set_LoopAngle_metadata = { "name" : "LoopAngle",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @LoopAngle.setter
    def LoopAngle(self, newVal:typing.Any) -> None:
        """The loop angle for maneuver. The total change in pitch angle the aircraft flies."""
        return self._intf.set_property(IAgAvtrBasicManeuverStrategyLoop._metadata, IAgAvtrBasicManeuverStrategyLoop._set_LoopAngle_metadata, newVal)

    _get_LoopAngleMode_metadata = { "name" : "LoopAngleMode",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrAngleMode),) }
    @property
    def LoopAngleMode(self) -> "AgEAvtrAngleMode":
        """The loop angle mode for the maneuver."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyLoop._metadata, IAgAvtrBasicManeuverStrategyLoop._get_LoopAngleMode_metadata)

    _set_LoopAngleMode_metadata = { "name" : "LoopAngleMode",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrAngleMode),) }
    @LoopAngleMode.setter
    def LoopAngleMode(self, newVal:"AgEAvtrAngleMode") -> None:
        """The loop angle mode for the maneuver."""
        return self._intf.set_property(IAgAvtrBasicManeuverStrategyLoop._metadata, IAgAvtrBasicManeuverStrategyLoop._set_LoopAngleMode_metadata, newVal)

    _get_TopLoadFactor_metadata = { "name" : "TopLoadFactor",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def TopLoadFactor(self) -> float:
        """The load factor at the top of the loop."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyLoop._metadata, IAgAvtrBasicManeuverStrategyLoop._get_TopLoadFactor_metadata)

    _set_TopLoadFactor_metadata = { "name" : "TopLoadFactor",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @TopLoadFactor.setter
    def TopLoadFactor(self, newVal:float) -> None:
        """The load factor at the top of the loop."""
        return self._intf.set_property(IAgAvtrBasicManeuverStrategyLoop._metadata, IAgAvtrBasicManeuverStrategyLoop._set_TopLoadFactor_metadata, newVal)

    _get_BottomLoadFactor_metadata = { "name" : "BottomLoadFactor",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def BottomLoadFactor(self) -> float:
        """The load factor at the bottom of the loop."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyLoop._metadata, IAgAvtrBasicManeuverStrategyLoop._get_BottomLoadFactor_metadata)

    _set_BottomLoadFactor_metadata = { "name" : "BottomLoadFactor",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @BottomLoadFactor.setter
    def BottomLoadFactor(self, newVal:float) -> None:
        """The load factor at the bottom of the loop."""
        return self._intf.set_property(IAgAvtrBasicManeuverStrategyLoop._metadata, IAgAvtrBasicManeuverStrategyLoop._set_BottomLoadFactor_metadata, newVal)

    _get_HoldInitTAS_metadata = { "name" : "HoldInitTAS",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def HoldInitTAS(self) -> bool:
        """The option to hold the initial true airspeed."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyLoop._metadata, IAgAvtrBasicManeuverStrategyLoop._get_HoldInitTAS_metadata)

    _set_HoldInitTAS_metadata = { "name" : "HoldInitTAS",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @HoldInitTAS.setter
    def HoldInitTAS(self, newVal:bool) -> None:
        """The option to hold the initial true airspeed."""
        return self._intf.set_property(IAgAvtrBasicManeuverStrategyLoop._metadata, IAgAvtrBasicManeuverStrategyLoop._set_HoldInitTAS_metadata, newVal)

    _get_AirspeedType_metadata = { "name" : "AirspeedType",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrAirspeedType),) }
    @property
    def AirspeedType(self) -> "AgEAvtrAirspeedType":
        """The airspeed type."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyLoop._metadata, IAgAvtrBasicManeuverStrategyLoop._get_AirspeedType_metadata)

    _get_TopAirspeed_metadata = { "name" : "TopAirspeed",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def TopAirspeed(self) -> float:
        """The speed at the top of the loop."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyLoop._metadata, IAgAvtrBasicManeuverStrategyLoop._get_TopAirspeed_metadata)

    _get_BottomAirspeed_metadata = { "name" : "BottomAirspeed",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def BottomAirspeed(self) -> float:
        """The speed at the bottom of the loop."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyLoop._metadata, IAgAvtrBasicManeuverStrategyLoop._get_BottomAirspeed_metadata)

    _SetAirspeeds_metadata = { "name" : "SetAirspeeds",
            "arg_types" : (agcom.LONG, agcom.DOUBLE, agcom.DOUBLE,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrAirspeedType), agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg,) }
    def SetAirspeeds(self, airspeedType:"AgEAvtrAirspeedType", topAirspeed:float, bottomAirspeed:float) -> None:
        """Set the speeds at the top and bottom of the loop."""
        return self._intf.invoke(IAgAvtrBasicManeuverStrategyLoop._metadata, IAgAvtrBasicManeuverStrategyLoop._SetAirspeeds_metadata, airspeedType, topAirspeed, bottomAirspeed)


agcls.AgClassCatalog.add_catalog_entry("{812dd3a8-77ec-44eb-8a7d-e51b6e9e4942}", IAgAvtrBasicManeuverStrategyLoop)
agcls.AgTypeNameMap["IAgAvtrBasicManeuverStrategyLoop"] = IAgAvtrBasicManeuverStrategyLoop

class IAgAvtrBasicManeuverStrategyLTAHover(object):
    """Interface used to access options for a Lighter than Air Hover Strategy of a Basic Maneuver Procedure."""
    _num_methods = 24
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{d3684b67-cb9c-4b8a-a774-226363c4f090}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_HeadingMode" : 1,
                             "set_HeadingMode" : 2,
                             "get_RelativeHeading" : 3,
                             "set_RelativeHeading" : 4,
                             "get_AbsoluteHeading" : 5,
                             "set_AbsoluteHeading" : 6,
                             "get_UseMagneticHeading" : 7,
                             "set_UseMagneticHeading" : 8,
                             "get_HeadingRate" : 9,
                             "set_HeadingRate" : 10,
                             "get_AltitudeMode" : 11,
                             "set_AltitudeMode" : 12,
                             "get_AbsoluteAltitude" : 13,
                             "set_AbsoluteAltitude" : 14,
                             "get_RelativeAltitudeChange" : 15,
                             "set_RelativeAltitudeChange" : 16,
                             "get_ControlAltRate" : 17,
                             "set_ControlAltRate" : 18,
                             "get_AltitudeRate" : 19,
                             "set_AltitudeRate" : 20,
                             "get_ParachuteArea" : 21,
                             "set_ParachuteArea" : 22,
                             "get_ParachuteCd" : 23,
                             "set_ParachuteCd" : 24, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrBasicManeuverStrategyLTAHover._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrBasicManeuverStrategyLTAHover from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrBasicManeuverStrategyLTAHover.__dict__ and type(IAgAvtrBasicManeuverStrategyLTAHover.__dict__[attrname]) == property:
            return IAgAvtrBasicManeuverStrategyLTAHover.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrBasicManeuverStrategyLTAHover.")
    
    _get_HeadingMode_metadata = { "name" : "HeadingMode",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrHoverHeadingMode),) }
    @property
    def HeadingMode(self) -> "AgEAvtrHoverHeadingMode":
        """The heading mode for the lighter than air hover."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyLTAHover._metadata, IAgAvtrBasicManeuverStrategyLTAHover._get_HeadingMode_metadata)

    _set_HeadingMode_metadata = { "name" : "HeadingMode",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrHoverHeadingMode),) }
    @HeadingMode.setter
    def HeadingMode(self, newVal:"AgEAvtrHoverHeadingMode") -> None:
        """The heading mode for the lighter than air hover."""
        return self._intf.set_property(IAgAvtrBasicManeuverStrategyLTAHover._metadata, IAgAvtrBasicManeuverStrategyLTAHover._set_HeadingMode_metadata, newVal)

    _get_RelativeHeading_metadata = { "name" : "RelativeHeading",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def RelativeHeading(self) -> typing.Any:
        """The relative heading for the relative to start heading mode."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyLTAHover._metadata, IAgAvtrBasicManeuverStrategyLTAHover._get_RelativeHeading_metadata)

    _set_RelativeHeading_metadata = { "name" : "RelativeHeading",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @RelativeHeading.setter
    def RelativeHeading(self, newVal:typing.Any) -> None:
        """The relative heading for the relative to start heading mode."""
        return self._intf.set_property(IAgAvtrBasicManeuverStrategyLTAHover._metadata, IAgAvtrBasicManeuverStrategyLTAHover._set_RelativeHeading_metadata, newVal)

    _get_AbsoluteHeading_metadata = { "name" : "AbsoluteHeading",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def AbsoluteHeading(self) -> typing.Any:
        """The absolute heading for the absolute heading mode."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyLTAHover._metadata, IAgAvtrBasicManeuverStrategyLTAHover._get_AbsoluteHeading_metadata)

    _set_AbsoluteHeading_metadata = { "name" : "AbsoluteHeading",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @AbsoluteHeading.setter
    def AbsoluteHeading(self, newVal:typing.Any) -> None:
        """The absolute heading for the absolute heading mode."""
        return self._intf.set_property(IAgAvtrBasicManeuverStrategyLTAHover._metadata, IAgAvtrBasicManeuverStrategyLTAHover._set_AbsoluteHeading_metadata, newVal)

    _get_UseMagneticHeading_metadata = { "name" : "UseMagneticHeading",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def UseMagneticHeading(self) -> bool:
        """The option to use a magentic heading for the absolute heading mode."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyLTAHover._metadata, IAgAvtrBasicManeuverStrategyLTAHover._get_UseMagneticHeading_metadata)

    _set_UseMagneticHeading_metadata = { "name" : "UseMagneticHeading",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @UseMagneticHeading.setter
    def UseMagneticHeading(self, newVal:bool) -> None:
        """The option to use a magentic heading for the absolute heading mode."""
        return self._intf.set_property(IAgAvtrBasicManeuverStrategyLTAHover._metadata, IAgAvtrBasicManeuverStrategyLTAHover._set_UseMagneticHeading_metadata, newVal)

    _get_HeadingRate_metadata = { "name" : "HeadingRate",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def HeadingRate(self) -> typing.Any:
        """The maximum heading rate."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyLTAHover._metadata, IAgAvtrBasicManeuverStrategyLTAHover._get_HeadingRate_metadata)

    _set_HeadingRate_metadata = { "name" : "HeadingRate",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @HeadingRate.setter
    def HeadingRate(self, newVal:typing.Any) -> None:
        """The maximum heading rate."""
        return self._intf.set_property(IAgAvtrBasicManeuverStrategyLTAHover._metadata, IAgAvtrBasicManeuverStrategyLTAHover._set_HeadingRate_metadata, newVal)

    _get_AltitudeMode_metadata = { "name" : "AltitudeMode",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrHoverAltitudeMode),) }
    @property
    def AltitudeMode(self) -> "AgEAvtrHoverAltitudeMode":
        """The altitude mode for the lighter than air hover."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyLTAHover._metadata, IAgAvtrBasicManeuverStrategyLTAHover._get_AltitudeMode_metadata)

    _set_AltitudeMode_metadata = { "name" : "AltitudeMode",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrHoverAltitudeMode),) }
    @AltitudeMode.setter
    def AltitudeMode(self, newVal:"AgEAvtrHoverAltitudeMode") -> None:
        """The altitude mode for the lighter than air hover."""
        return self._intf.set_property(IAgAvtrBasicManeuverStrategyLTAHover._metadata, IAgAvtrBasicManeuverStrategyLTAHover._set_AltitudeMode_metadata, newVal)

    _get_AbsoluteAltitude_metadata = { "name" : "AbsoluteAltitude",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def AbsoluteAltitude(self) -> float:
        """The absolute altitude for the Specify Altitude mode."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyLTAHover._metadata, IAgAvtrBasicManeuverStrategyLTAHover._get_AbsoluteAltitude_metadata)

    _set_AbsoluteAltitude_metadata = { "name" : "AbsoluteAltitude",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @AbsoluteAltitude.setter
    def AbsoluteAltitude(self, newVal:float) -> None:
        """The absolute altitude for the Specify Altitude mode."""
        return self._intf.set_property(IAgAvtrBasicManeuverStrategyLTAHover._metadata, IAgAvtrBasicManeuverStrategyLTAHover._set_AbsoluteAltitude_metadata, newVal)

    _get_RelativeAltitudeChange_metadata = { "name" : "RelativeAltitudeChange",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def RelativeAltitudeChange(self) -> float:
        """The relative altitude change for the Specify Altitude Change mode."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyLTAHover._metadata, IAgAvtrBasicManeuverStrategyLTAHover._get_RelativeAltitudeChange_metadata)

    _set_RelativeAltitudeChange_metadata = { "name" : "RelativeAltitudeChange",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @RelativeAltitudeChange.setter
    def RelativeAltitudeChange(self, newVal:float) -> None:
        """The relative altitude change for the Specify Altitude Change mode."""
        return self._intf.set_property(IAgAvtrBasicManeuverStrategyLTAHover._metadata, IAgAvtrBasicManeuverStrategyLTAHover._set_RelativeAltitudeChange_metadata, newVal)

    _get_ControlAltRate_metadata = { "name" : "ControlAltRate",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def ControlAltRate(self) -> float:
        """The controlled altitude rate for the Specify Altitude or Specify Altitude Change mode."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyLTAHover._metadata, IAgAvtrBasicManeuverStrategyLTAHover._get_ControlAltRate_metadata)

    _set_ControlAltRate_metadata = { "name" : "ControlAltRate",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @ControlAltRate.setter
    def ControlAltRate(self, newVal:float) -> None:
        """The controlled altitude rate for the Specify Altitude or Specify Altitude Change mode."""
        return self._intf.set_property(IAgAvtrBasicManeuverStrategyLTAHover._metadata, IAgAvtrBasicManeuverStrategyLTAHover._set_ControlAltRate_metadata, newVal)

    _get_AltitudeRate_metadata = { "name" : "AltitudeRate",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def AltitudeRate(self) -> float:
        """The altitude rate for the Specify Altitude Rate mode."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyLTAHover._metadata, IAgAvtrBasicManeuverStrategyLTAHover._get_AltitudeRate_metadata)

    _set_AltitudeRate_metadata = { "name" : "AltitudeRate",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @AltitudeRate.setter
    def AltitudeRate(self, newVal:float) -> None:
        """The altitude rate for the Specify Altitude Rate mode."""
        return self._intf.set_property(IAgAvtrBasicManeuverStrategyLTAHover._metadata, IAgAvtrBasicManeuverStrategyLTAHover._set_AltitudeRate_metadata, newVal)

    _get_ParachuteArea_metadata = { "name" : "ParachuteArea",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def ParachuteArea(self) -> float:
        """The parachute area for the Parachute mode."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyLTAHover._metadata, IAgAvtrBasicManeuverStrategyLTAHover._get_ParachuteArea_metadata)

    _set_ParachuteArea_metadata = { "name" : "ParachuteArea",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @ParachuteArea.setter
    def ParachuteArea(self, newVal:float) -> None:
        """The parachute area for the Parachute mode."""
        return self._intf.set_property(IAgAvtrBasicManeuverStrategyLTAHover._metadata, IAgAvtrBasicManeuverStrategyLTAHover._set_ParachuteArea_metadata, newVal)

    _get_ParachuteCd_metadata = { "name" : "ParachuteCd",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def ParachuteCd(self) -> float:
        """The parachute drag coefficient for the Parachute mode."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyLTAHover._metadata, IAgAvtrBasicManeuverStrategyLTAHover._get_ParachuteCd_metadata)

    _set_ParachuteCd_metadata = { "name" : "ParachuteCd",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @ParachuteCd.setter
    def ParachuteCd(self, newVal:float) -> None:
        """The parachute drag coefficient for the Parachute mode."""
        return self._intf.set_property(IAgAvtrBasicManeuverStrategyLTAHover._metadata, IAgAvtrBasicManeuverStrategyLTAHover._set_ParachuteCd_metadata, newVal)


agcls.AgClassCatalog.add_catalog_entry("{d3684b67-cb9c-4b8a-a774-226363c4f090}", IAgAvtrBasicManeuverStrategyLTAHover)
agcls.AgTypeNameMap["IAgAvtrBasicManeuverStrategyLTAHover"] = IAgAvtrBasicManeuverStrategyLTAHover

class IAgAvtrBasicManeuverStrategyFlyAOA(object):
    """Interface used to access options for a Fly AOA Strategy of a Basic Maneuver Procedure."""
    _num_methods = 17
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{aac777b5-967c-4e54-b09a-2ec30898fc53}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_TurnDirection" : 1,
                             "set_TurnDirection" : 2,
                             "get_RollRateMode" : 3,
                             "set_RollRateMode" : 4,
                             "get_OverrideRollRate" : 5,
                             "set_OverrideRollRate" : 6,
                             "get_RollRateDot" : 7,
                             "set_RollRateDot" : 8,
                             "get_ControlRollAngle" : 9,
                             "set_ControlRollAngle" : 10,
                             "get_RollAngle" : 11,
                             "set_RollAngle" : 12,
                             "get_StopOnRollAngle" : 13,
                             "set_StopOnRollAngle" : 14,
                             "get_AOA" : 15,
                             "set_AOA" : 16,
                             "get_AirspeedOptions" : 17, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrBasicManeuverStrategyFlyAOA._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrBasicManeuverStrategyFlyAOA from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrBasicManeuverStrategyFlyAOA.__dict__ and type(IAgAvtrBasicManeuverStrategyFlyAOA.__dict__[attrname]) == property:
            return IAgAvtrBasicManeuverStrategyFlyAOA.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrBasicManeuverStrategyFlyAOA.")
    
    _get_TurnDirection_metadata = { "name" : "TurnDirection",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrFlyAOALeftRight),) }
    @property
    def TurnDirection(self) -> "AgEAvtrFlyAOALeftRight":
        """The roll turn direction for a Fly AOA basic maneuver strategy."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyFlyAOA._metadata, IAgAvtrBasicManeuverStrategyFlyAOA._get_TurnDirection_metadata)

    _set_TurnDirection_metadata = { "name" : "TurnDirection",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrFlyAOALeftRight),) }
    @TurnDirection.setter
    def TurnDirection(self, newVal:"AgEAvtrFlyAOALeftRight") -> None:
        """The roll turn direction for a Fly AOA basic maneuver strategy."""
        return self._intf.set_property(IAgAvtrBasicManeuverStrategyFlyAOA._metadata, IAgAvtrBasicManeuverStrategyFlyAOA._set_TurnDirection_metadata, newVal)

    _get_RollRateMode_metadata = { "name" : "RollRateMode",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrPerfModelOverride),) }
    @property
    def RollRateMode(self) -> "AgEAvtrPerfModelOverride":
        """The roll rate mode for a Fly AOA basic maneuver strategy."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyFlyAOA._metadata, IAgAvtrBasicManeuverStrategyFlyAOA._get_RollRateMode_metadata)

    _set_RollRateMode_metadata = { "name" : "RollRateMode",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrPerfModelOverride),) }
    @RollRateMode.setter
    def RollRateMode(self, newVal:"AgEAvtrPerfModelOverride") -> None:
        """The roll rate mode for a Fly AOA basic maneuver strategy."""
        return self._intf.set_property(IAgAvtrBasicManeuverStrategyFlyAOA._metadata, IAgAvtrBasicManeuverStrategyFlyAOA._set_RollRateMode_metadata, newVal)

    _get_OverrideRollRate_metadata = { "name" : "OverrideRollRate",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def OverrideRollRate(self) -> typing.Any:
        """The roll rate override value for the Fly AOA basic maneuver strategy. The roll rate mode must be set to override to access this property."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyFlyAOA._metadata, IAgAvtrBasicManeuverStrategyFlyAOA._get_OverrideRollRate_metadata)

    _set_OverrideRollRate_metadata = { "name" : "OverrideRollRate",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @OverrideRollRate.setter
    def OverrideRollRate(self, newVal:typing.Any) -> None:
        """The roll rate override value for the Fly AOA basic maneuver strategy. The roll rate mode must be set to override to access this property."""
        return self._intf.set_property(IAgAvtrBasicManeuverStrategyFlyAOA._metadata, IAgAvtrBasicManeuverStrategyFlyAOA._set_OverrideRollRate_metadata, newVal)

    _get_RollRateDot_metadata = { "name" : "RollRateDot",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def RollRateDot(self) -> typing.Any:
        """The rate of change of the roll rate."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyFlyAOA._metadata, IAgAvtrBasicManeuverStrategyFlyAOA._get_RollRateDot_metadata)

    _set_RollRateDot_metadata = { "name" : "RollRateDot",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @RollRateDot.setter
    def RollRateDot(self, newVal:typing.Any) -> None:
        """The rate of change of the roll rate."""
        return self._intf.set_property(IAgAvtrBasicManeuverStrategyFlyAOA._metadata, IAgAvtrBasicManeuverStrategyFlyAOA._set_RollRateDot_metadata, newVal)

    _get_ControlRollAngle_metadata = { "name" : "ControlRollAngle",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def ControlRollAngle(self) -> bool:
        """The option to define a goal value for the aircraft's roll angle."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyFlyAOA._metadata, IAgAvtrBasicManeuverStrategyFlyAOA._get_ControlRollAngle_metadata)

    _set_ControlRollAngle_metadata = { "name" : "ControlRollAngle",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @ControlRollAngle.setter
    def ControlRollAngle(self, newVal:bool) -> None:
        """The option to define a goal value for the aircraft's roll angle."""
        return self._intf.set_property(IAgAvtrBasicManeuverStrategyFlyAOA._metadata, IAgAvtrBasicManeuverStrategyFlyAOA._set_ControlRollAngle_metadata, newVal)

    _get_RollAngle_metadata = { "name" : "RollAngle",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def RollAngle(self) -> typing.Any:
        """The goal value for the roll angle."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyFlyAOA._metadata, IAgAvtrBasicManeuverStrategyFlyAOA._get_RollAngle_metadata)

    _set_RollAngle_metadata = { "name" : "RollAngle",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @RollAngle.setter
    def RollAngle(self, newVal:typing.Any) -> None:
        """The goal value for the roll angle."""
        return self._intf.set_property(IAgAvtrBasicManeuverStrategyFlyAOA._metadata, IAgAvtrBasicManeuverStrategyFlyAOA._set_RollAngle_metadata, newVal)

    _get_StopOnRollAngle_metadata = { "name" : "StopOnRollAngle",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def StopOnRollAngle(self) -> bool:
        """The option to stop the maneuver if the specified roll angle is achieved."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyFlyAOA._metadata, IAgAvtrBasicManeuverStrategyFlyAOA._get_StopOnRollAngle_metadata)

    _set_StopOnRollAngle_metadata = { "name" : "StopOnRollAngle",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @StopOnRollAngle.setter
    def StopOnRollAngle(self, newVal:bool) -> None:
        """The option to stop the maneuver if the specified roll angle is achieved."""
        return self._intf.set_property(IAgAvtrBasicManeuverStrategyFlyAOA._metadata, IAgAvtrBasicManeuverStrategyFlyAOA._set_StopOnRollAngle_metadata, newVal)

    _get_AOA_metadata = { "name" : "AOA",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def AOA(self) -> typing.Any:
        """The angle of attack."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyFlyAOA._metadata, IAgAvtrBasicManeuverStrategyFlyAOA._get_AOA_metadata)

    _set_AOA_metadata = { "name" : "AOA",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @AOA.setter
    def AOA(self, newVal:typing.Any) -> None:
        """The angle of attack."""
        return self._intf.set_property(IAgAvtrBasicManeuverStrategyFlyAOA._metadata, IAgAvtrBasicManeuverStrategyFlyAOA._set_AOA_metadata, newVal)

    _get_AirspeedOptions_metadata = { "name" : "AirspeedOptions",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def AirspeedOptions(self) -> "IAgAvtrBasicManeuverAirspeedOptions":
        """Get the airspeed options."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyFlyAOA._metadata, IAgAvtrBasicManeuverStrategyFlyAOA._get_AirspeedOptions_metadata)


agcls.AgClassCatalog.add_catalog_entry("{aac777b5-967c-4e54-b09a-2ec30898fc53}", IAgAvtrBasicManeuverStrategyFlyAOA)
agcls.AgTypeNameMap["IAgAvtrBasicManeuverStrategyFlyAOA"] = IAgAvtrBasicManeuverStrategyFlyAOA

class IAgAvtrBasicManeuverStrategyPull(object):
    """Interface used to access options for a Pull Strategy of a Basic Maneuver Procedure."""
    _num_methods = 9
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{53ecb06b-3d2f-4e3b-b179-95686a71c7e1}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_ActiveMode" : 1,
                             "set_ActiveMode" : 2,
                             "get_ActiveAngle" : 3,
                             "set_ActiveAngle" : 4,
                             "get_PullGMode" : 5,
                             "set_PullGMode" : 6,
                             "get_OverridePullG" : 7,
                             "set_OverridePullG" : 8,
                             "get_AirspeedOptions" : 9, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrBasicManeuverStrategyPull._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrBasicManeuverStrategyPull from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrBasicManeuverStrategyPull.__dict__ and type(IAgAvtrBasicManeuverStrategyPull.__dict__[attrname]) == property:
            return IAgAvtrBasicManeuverStrategyPull.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrBasicManeuverStrategyPull.")
    
    _get_ActiveMode_metadata = { "name" : "ActiveMode",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrPullMode),) }
    @property
    def ActiveMode(self) -> "AgEAvtrPullMode":
        """The pull mode for the pull basic maneuver strategy."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyPull._metadata, IAgAvtrBasicManeuverStrategyPull._get_ActiveMode_metadata)

    _set_ActiveMode_metadata = { "name" : "ActiveMode",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrPullMode),) }
    @ActiveMode.setter
    def ActiveMode(self, newVal:"AgEAvtrPullMode") -> None:
        """The pull mode for the pull basic maneuver strategy."""
        return self._intf.set_property(IAgAvtrBasicManeuverStrategyPull._metadata, IAgAvtrBasicManeuverStrategyPull._set_ActiveMode_metadata, newVal)

    _get_ActiveAngle_metadata = { "name" : "ActiveAngle",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def ActiveAngle(self) -> typing.Any:
        """The pull angle for the active mode."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyPull._metadata, IAgAvtrBasicManeuverStrategyPull._get_ActiveAngle_metadata)

    _set_ActiveAngle_metadata = { "name" : "ActiveAngle",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @ActiveAngle.setter
    def ActiveAngle(self, newVal:typing.Any) -> None:
        """The roll angle for the active mode."""
        return self._intf.set_property(IAgAvtrBasicManeuverStrategyPull._metadata, IAgAvtrBasicManeuverStrategyPull._set_ActiveAngle_metadata, newVal)

    _get_PullGMode_metadata = { "name" : "PullGMode",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrPerfModelOverride),) }
    @property
    def PullGMode(self) -> "AgEAvtrPerfModelOverride":
        """The pull G mode for a pull basic maneuver strategy."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyPull._metadata, IAgAvtrBasicManeuverStrategyPull._get_PullGMode_metadata)

    _set_PullGMode_metadata = { "name" : "PullGMode",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrPerfModelOverride),) }
    @PullGMode.setter
    def PullGMode(self, newVal:"AgEAvtrPerfModelOverride") -> None:
        """The pull G mode for a pull basic maneuver strategy."""
        return self._intf.set_property(IAgAvtrBasicManeuverStrategyPull._metadata, IAgAvtrBasicManeuverStrategyPull._set_PullGMode_metadata, newVal)

    _get_OverridePullG_metadata = { "name" : "OverridePullG",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def OverridePullG(self) -> float:
        """The pull G override value. The pull G mode must be set to override to access this property."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyPull._metadata, IAgAvtrBasicManeuverStrategyPull._get_OverridePullG_metadata)

    _set_OverridePullG_metadata = { "name" : "OverridePullG",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @OverridePullG.setter
    def OverridePullG(self, newVal:float) -> None:
        """The pull G override value. The pull G mode must be set to override to access this property."""
        return self._intf.set_property(IAgAvtrBasicManeuverStrategyPull._metadata, IAgAvtrBasicManeuverStrategyPull._set_OverridePullG_metadata, newVal)

    _get_AirspeedOptions_metadata = { "name" : "AirspeedOptions",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def AirspeedOptions(self) -> "IAgAvtrBasicManeuverAirspeedOptions":
        """Get the airspeed options."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyPull._metadata, IAgAvtrBasicManeuverStrategyPull._get_AirspeedOptions_metadata)


agcls.AgClassCatalog.add_catalog_entry("{53ecb06b-3d2f-4e3b-b179-95686a71c7e1}", IAgAvtrBasicManeuverStrategyPull)
agcls.AgTypeNameMap["IAgAvtrBasicManeuverStrategyPull"] = IAgAvtrBasicManeuverStrategyPull

class IAgAvtrBasicManeuverStrategyRollingPull(object):
    """Interface used to access options for a Rolling Pull Strategy of a Basic Maneuver Procedure."""
    _num_methods = 17
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{1481380c-fbad-46f2-bab0-8bba39fb3edc}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_ActiveMode" : 1,
                             "set_ActiveMode" : 2,
                             "get_TurnDirection" : 3,
                             "set_TurnDirection" : 4,
                             "get_Angle" : 5,
                             "set_Angle" : 6,
                             "get_RollOrientation" : 7,
                             "set_RollOrientation" : 8,
                             "get_RollRateMode" : 9,
                             "set_RollRateMode" : 10,
                             "get_OverrideRollRate" : 11,
                             "set_OverrideRollRate" : 12,
                             "get_PullGMode" : 13,
                             "set_PullGMode" : 14,
                             "get_OverridePullG" : 15,
                             "set_OverridePullG" : 16,
                             "get_AirspeedOptions" : 17, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrBasicManeuverStrategyRollingPull._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrBasicManeuverStrategyRollingPull from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrBasicManeuverStrategyRollingPull.__dict__ and type(IAgAvtrBasicManeuverStrategyRollingPull.__dict__[attrname]) == property:
            return IAgAvtrBasicManeuverStrategyRollingPull.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrBasicManeuverStrategyRollingPull.")
    
    _get_ActiveMode_metadata = { "name" : "ActiveMode",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrRollingPullMode),) }
    @property
    def ActiveMode(self) -> "AgEAvtrRollingPullMode":
        """The active mode for the rolling pull basic maneuver strategy."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyRollingPull._metadata, IAgAvtrBasicManeuverStrategyRollingPull._get_ActiveMode_metadata)

    _set_ActiveMode_metadata = { "name" : "ActiveMode",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrRollingPullMode),) }
    @ActiveMode.setter
    def ActiveMode(self, newVal:"AgEAvtrRollingPullMode") -> None:
        """The active mode for the rolling pull basic maneuver strategy."""
        return self._intf.set_property(IAgAvtrBasicManeuverStrategyRollingPull._metadata, IAgAvtrBasicManeuverStrategyRollingPull._set_ActiveMode_metadata, newVal)

    _get_TurnDirection_metadata = { "name" : "TurnDirection",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrRollLeftRight),) }
    @property
    def TurnDirection(self) -> "AgEAvtrRollLeftRight":
        """The turn direction for the active mode."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyRollingPull._metadata, IAgAvtrBasicManeuverStrategyRollingPull._get_TurnDirection_metadata)

    _set_TurnDirection_metadata = { "name" : "TurnDirection",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrRollLeftRight),) }
    @TurnDirection.setter
    def TurnDirection(self, newVal:"AgEAvtrRollLeftRight") -> None:
        """The turn direction for the active mode."""
        return self._intf.set_property(IAgAvtrBasicManeuverStrategyRollingPull._metadata, IAgAvtrBasicManeuverStrategyRollingPull._set_TurnDirection_metadata, newVal)

    _get_Angle_metadata = { "name" : "Angle",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def Angle(self) -> typing.Any:
        """The angle value for the active mode."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyRollingPull._metadata, IAgAvtrBasicManeuverStrategyRollingPull._get_Angle_metadata)

    _set_Angle_metadata = { "name" : "Angle",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @Angle.setter
    def Angle(self, newVal:typing.Any) -> None:
        """The angle value for the active mode"""
        return self._intf.set_property(IAgAvtrBasicManeuverStrategyRollingPull._metadata, IAgAvtrBasicManeuverStrategyRollingPull._set_Angle_metadata, newVal)

    _get_RollOrientation_metadata = { "name" : "RollOrientation",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrRollUprightInverted),) }
    @property
    def RollOrientation(self) -> "AgEAvtrRollUprightInverted":
        """The orientation to roll to for the roll to orientation mode."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyRollingPull._metadata, IAgAvtrBasicManeuverStrategyRollingPull._get_RollOrientation_metadata)

    _set_RollOrientation_metadata = { "name" : "RollOrientation",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrRollUprightInverted),) }
    @RollOrientation.setter
    def RollOrientation(self, newVal:"AgEAvtrRollUprightInverted") -> None:
        """The orientation to roll to for the roll to orientation mode."""
        return self._intf.set_property(IAgAvtrBasicManeuverStrategyRollingPull._metadata, IAgAvtrBasicManeuverStrategyRollingPull._set_RollOrientation_metadata, newVal)

    _get_RollRateMode_metadata = { "name" : "RollRateMode",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrPerfModelOverride),) }
    @property
    def RollRateMode(self) -> "AgEAvtrPerfModelOverride":
        """The roll rate mode for the rolling pull."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyRollingPull._metadata, IAgAvtrBasicManeuverStrategyRollingPull._get_RollRateMode_metadata)

    _set_RollRateMode_metadata = { "name" : "RollRateMode",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrPerfModelOverride),) }
    @RollRateMode.setter
    def RollRateMode(self, newVal:"AgEAvtrPerfModelOverride") -> None:
        """The roll rate mode for the rolling pull."""
        return self._intf.set_property(IAgAvtrBasicManeuverStrategyRollingPull._metadata, IAgAvtrBasicManeuverStrategyRollingPull._set_RollRateMode_metadata, newVal)

    _get_OverrideRollRate_metadata = { "name" : "OverrideRollRate",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def OverrideRollRate(self) -> typing.Any:
        """The roll rate override value. The roll rate mode must be set to override to access this property."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyRollingPull._metadata, IAgAvtrBasicManeuverStrategyRollingPull._get_OverrideRollRate_metadata)

    _set_OverrideRollRate_metadata = { "name" : "OverrideRollRate",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @OverrideRollRate.setter
    def OverrideRollRate(self, newVal:typing.Any) -> None:
        """The roll rate override. The roll rate mode must be set to override to access this property."""
        return self._intf.set_property(IAgAvtrBasicManeuverStrategyRollingPull._metadata, IAgAvtrBasicManeuverStrategyRollingPull._set_OverrideRollRate_metadata, newVal)

    _get_PullGMode_metadata = { "name" : "PullGMode",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrPerfModelOverride),) }
    @property
    def PullGMode(self) -> "AgEAvtrPerfModelOverride":
        """The pull G mode for a rolling pull."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyRollingPull._metadata, IAgAvtrBasicManeuverStrategyRollingPull._get_PullGMode_metadata)

    _set_PullGMode_metadata = { "name" : "PullGMode",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrPerfModelOverride),) }
    @PullGMode.setter
    def PullGMode(self, newVal:"AgEAvtrPerfModelOverride") -> None:
        """The pull G mode for a rolling pull."""
        return self._intf.set_property(IAgAvtrBasicManeuverStrategyRollingPull._metadata, IAgAvtrBasicManeuverStrategyRollingPull._set_PullGMode_metadata, newVal)

    _get_OverridePullG_metadata = { "name" : "OverridePullG",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def OverridePullG(self) -> float:
        """The pull G override value. The pull G mode must be set to override to access this property."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyRollingPull._metadata, IAgAvtrBasicManeuverStrategyRollingPull._get_OverridePullG_metadata)

    _set_OverridePullG_metadata = { "name" : "OverridePullG",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @OverridePullG.setter
    def OverridePullG(self, newVal:float) -> None:
        """The pull G override value. The pull G mode must be set to override to access this property."""
        return self._intf.set_property(IAgAvtrBasicManeuverStrategyRollingPull._metadata, IAgAvtrBasicManeuverStrategyRollingPull._set_OverridePullG_metadata, newVal)

    _get_AirspeedOptions_metadata = { "name" : "AirspeedOptions",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def AirspeedOptions(self) -> "IAgAvtrBasicManeuverAirspeedOptions":
        """Get the airspeed options."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyRollingPull._metadata, IAgAvtrBasicManeuverStrategyRollingPull._get_AirspeedOptions_metadata)


agcls.AgClassCatalog.add_catalog_entry("{1481380c-fbad-46f2-bab0-8bba39fb3edc}", IAgAvtrBasicManeuverStrategyRollingPull)
agcls.AgTypeNameMap["IAgAvtrBasicManeuverStrategyRollingPull"] = IAgAvtrBasicManeuverStrategyRollingPull

class IAgAvtrBasicManeuverStrategySmoothAccel(object):
    """Interface used to access options for a Smooth Accel Strategy of a Basic Maneuver Procedure."""
    _num_methods = 29
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{b7dbc9ce-b749-4d60-bea1-d6f88415bc6e}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_TurnDirection" : 1,
                             "set_TurnDirection" : 2,
                             "get_RollRateMode" : 3,
                             "set_RollRateMode" : 4,
                             "get_OverrideRollRate" : 5,
                             "set_OverrideRollRate" : 6,
                             "get_RollRateDot" : 7,
                             "set_RollRateDot" : 8,
                             "get_ControlRollAngle" : 9,
                             "set_ControlRollAngle" : 10,
                             "get_RollAngle" : 11,
                             "set_RollAngle" : 12,
                             "get_LoadFactorMode" : 13,
                             "set_LoadFactorMode" : 14,
                             "get_OverrideLoadFactor" : 15,
                             "set_OverrideLoadFactor" : 16,
                             "get_LoadFactorDot" : 17,
                             "set_LoadFactorDot" : 18,
                             "get_ControlPitchAngle" : 19,
                             "set_ControlPitchAngle" : 20,
                             "get_PitchAngle" : 21,
                             "set_PitchAngle" : 22,
                             "get_StopConditions" : 23,
                             "set_StopConditions" : 24,
                             "get_StopOnRollAngle" : 25,
                             "set_StopOnRollAngle" : 26,
                             "get_StopOnPitchAngle" : 27,
                             "set_StopOnPitchAngle" : 28,
                             "get_AirspeedOptions" : 29, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrBasicManeuverStrategySmoothAccel._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrBasicManeuverStrategySmoothAccel from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrBasicManeuverStrategySmoothAccel.__dict__ and type(IAgAvtrBasicManeuverStrategySmoothAccel.__dict__[attrname]) == property:
            return IAgAvtrBasicManeuverStrategySmoothAccel.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrBasicManeuverStrategySmoothAccel.")
    
    _get_TurnDirection_metadata = { "name" : "TurnDirection",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrSmoothAccelLeftRight),) }
    @property
    def TurnDirection(self) -> "AgEAvtrSmoothAccelLeftRight":
        """The roll turn direction for a Smooth Accel basic maneuver strategy."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategySmoothAccel._metadata, IAgAvtrBasicManeuverStrategySmoothAccel._get_TurnDirection_metadata)

    _set_TurnDirection_metadata = { "name" : "TurnDirection",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrSmoothAccelLeftRight),) }
    @TurnDirection.setter
    def TurnDirection(self, newVal:"AgEAvtrSmoothAccelLeftRight") -> None:
        """The roll turn direction for a Smooth Accel  basic maneuver strategy."""
        return self._intf.set_property(IAgAvtrBasicManeuverStrategySmoothAccel._metadata, IAgAvtrBasicManeuverStrategySmoothAccel._set_TurnDirection_metadata, newVal)

    _get_RollRateMode_metadata = { "name" : "RollRateMode",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrPerfModelOverride),) }
    @property
    def RollRateMode(self) -> "AgEAvtrPerfModelOverride":
        """The roll rate mode for a Smooth Accel basic maneuver strategy."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategySmoothAccel._metadata, IAgAvtrBasicManeuverStrategySmoothAccel._get_RollRateMode_metadata)

    _set_RollRateMode_metadata = { "name" : "RollRateMode",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrPerfModelOverride),) }
    @RollRateMode.setter
    def RollRateMode(self, newVal:"AgEAvtrPerfModelOverride") -> None:
        """The roll rate mode for a Smooth Accel basic maneuver strategy."""
        return self._intf.set_property(IAgAvtrBasicManeuverStrategySmoothAccel._metadata, IAgAvtrBasicManeuverStrategySmoothAccel._set_RollRateMode_metadata, newVal)

    _get_OverrideRollRate_metadata = { "name" : "OverrideRollRate",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def OverrideRollRate(self) -> typing.Any:
        """The roll rate override value for the Smooth Accel basic maneuver strategy. The roll rate mode must be set to override to access this property."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategySmoothAccel._metadata, IAgAvtrBasicManeuverStrategySmoothAccel._get_OverrideRollRate_metadata)

    _set_OverrideRollRate_metadata = { "name" : "OverrideRollRate",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @OverrideRollRate.setter
    def OverrideRollRate(self, newVal:typing.Any) -> None:
        """The roll rate override value for the Smooth Accel basic maneuver strategy. The roll rate mode must be set to override to access this property."""
        return self._intf.set_property(IAgAvtrBasicManeuverStrategySmoothAccel._metadata, IAgAvtrBasicManeuverStrategySmoothAccel._set_OverrideRollRate_metadata, newVal)

    _get_RollRateDot_metadata = { "name" : "RollRateDot",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def RollRateDot(self) -> typing.Any:
        """The rate of change of the roll rate."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategySmoothAccel._metadata, IAgAvtrBasicManeuverStrategySmoothAccel._get_RollRateDot_metadata)

    _set_RollRateDot_metadata = { "name" : "RollRateDot",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @RollRateDot.setter
    def RollRateDot(self, newVal:typing.Any) -> None:
        """The rate of change of the roll rate."""
        return self._intf.set_property(IAgAvtrBasicManeuverStrategySmoothAccel._metadata, IAgAvtrBasicManeuverStrategySmoothAccel._set_RollRateDot_metadata, newVal)

    _get_ControlRollAngle_metadata = { "name" : "ControlRollAngle",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def ControlRollAngle(self) -> bool:
        """The option to define a goal value for the aircraft's roll angle."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategySmoothAccel._metadata, IAgAvtrBasicManeuverStrategySmoothAccel._get_ControlRollAngle_metadata)

    _set_ControlRollAngle_metadata = { "name" : "ControlRollAngle",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @ControlRollAngle.setter
    def ControlRollAngle(self, newVal:bool) -> None:
        """The option to define a goal value for the aircraft's roll angle."""
        return self._intf.set_property(IAgAvtrBasicManeuverStrategySmoothAccel._metadata, IAgAvtrBasicManeuverStrategySmoothAccel._set_ControlRollAngle_metadata, newVal)

    _get_RollAngle_metadata = { "name" : "RollAngle",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def RollAngle(self) -> typing.Any:
        """The goal value for the roll angle."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategySmoothAccel._metadata, IAgAvtrBasicManeuverStrategySmoothAccel._get_RollAngle_metadata)

    _set_RollAngle_metadata = { "name" : "RollAngle",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @RollAngle.setter
    def RollAngle(self, newVal:typing.Any) -> None:
        """The goal value for the roll angle."""
        return self._intf.set_property(IAgAvtrBasicManeuverStrategySmoothAccel._metadata, IAgAvtrBasicManeuverStrategySmoothAccel._set_RollAngle_metadata, newVal)

    _get_LoadFactorMode_metadata = { "name" : "LoadFactorMode",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrPerfModelOverride),) }
    @property
    def LoadFactorMode(self) -> "AgEAvtrPerfModelOverride":
        """The load factor mode for the Smooth Accel basic maneuver strategy."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategySmoothAccel._metadata, IAgAvtrBasicManeuverStrategySmoothAccel._get_LoadFactorMode_metadata)

    _set_LoadFactorMode_metadata = { "name" : "LoadFactorMode",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrPerfModelOverride),) }
    @LoadFactorMode.setter
    def LoadFactorMode(self, newVal:"AgEAvtrPerfModelOverride") -> None:
        """The load factormode for the Smooth Accel basic maneuver strategy."""
        return self._intf.set_property(IAgAvtrBasicManeuverStrategySmoothAccel._metadata, IAgAvtrBasicManeuverStrategySmoothAccel._set_LoadFactorMode_metadata, newVal)

    _get_OverrideLoadFactor_metadata = { "name" : "OverrideLoadFactor",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def OverrideLoadFactor(self) -> float:
        """The load factor override value for the smooth accel. The load factor mode must be set to override to access this property."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategySmoothAccel._metadata, IAgAvtrBasicManeuverStrategySmoothAccel._get_OverrideLoadFactor_metadata)

    _set_OverrideLoadFactor_metadata = { "name" : "OverrideLoadFactor",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @OverrideLoadFactor.setter
    def OverrideLoadFactor(self, newVal:float) -> None:
        """The load factor override value for the smooth accel. The load factor mode must be set to override to access this property."""
        return self._intf.set_property(IAgAvtrBasicManeuverStrategySmoothAccel._metadata, IAgAvtrBasicManeuverStrategySmoothAccel._set_OverrideLoadFactor_metadata, newVal)

    _get_LoadFactorDot_metadata = { "name" : "LoadFactorDot",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def LoadFactorDot(self) -> float:
        """The rate of change of the load factor."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategySmoothAccel._metadata, IAgAvtrBasicManeuverStrategySmoothAccel._get_LoadFactorDot_metadata)

    _set_LoadFactorDot_metadata = { "name" : "LoadFactorDot",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @LoadFactorDot.setter
    def LoadFactorDot(self, newVal:float) -> None:
        """The rate of change of the load factor."""
        return self._intf.set_property(IAgAvtrBasicManeuverStrategySmoothAccel._metadata, IAgAvtrBasicManeuverStrategySmoothAccel._set_LoadFactorDot_metadata, newVal)

    _get_ControlPitchAngle_metadata = { "name" : "ControlPitchAngle",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def ControlPitchAngle(self) -> bool:
        """The option to define a goal value for the aircraft's pitch angle."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategySmoothAccel._metadata, IAgAvtrBasicManeuverStrategySmoothAccel._get_ControlPitchAngle_metadata)

    _set_ControlPitchAngle_metadata = { "name" : "ControlPitchAngle",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @ControlPitchAngle.setter
    def ControlPitchAngle(self, newVal:bool) -> None:
        """The option to define a goal value for the aircraft's pitch angle."""
        return self._intf.set_property(IAgAvtrBasicManeuverStrategySmoothAccel._metadata, IAgAvtrBasicManeuverStrategySmoothAccel._set_ControlPitchAngle_metadata, newVal)

    _get_PitchAngle_metadata = { "name" : "PitchAngle",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def PitchAngle(self) -> typing.Any:
        """The goal value for the pitch angle."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategySmoothAccel._metadata, IAgAvtrBasicManeuverStrategySmoothAccel._get_PitchAngle_metadata)

    _set_PitchAngle_metadata = { "name" : "PitchAngle",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @PitchAngle.setter
    def PitchAngle(self, newVal:typing.Any) -> None:
        """The goal value for the pitch angle."""
        return self._intf.set_property(IAgAvtrBasicManeuverStrategySmoothAccel._metadata, IAgAvtrBasicManeuverStrategySmoothAccel._set_PitchAngle_metadata, newVal)

    _get_StopConditions_metadata = { "name" : "StopConditions",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrSmoothAccelStopConditions),) }
    @property
    def StopConditions(self) -> "AgEAvtrSmoothAccelStopConditions":
        """The stop condition for the Smooth Accel basic maneuver strategy."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategySmoothAccel._metadata, IAgAvtrBasicManeuverStrategySmoothAccel._get_StopConditions_metadata)

    _set_StopConditions_metadata = { "name" : "StopConditions",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrSmoothAccelStopConditions),) }
    @StopConditions.setter
    def StopConditions(self, newVal:"AgEAvtrSmoothAccelStopConditions") -> None:
        """The stop condition for the Smooth Accel  basic maneuver strategy."""
        return self._intf.set_property(IAgAvtrBasicManeuverStrategySmoothAccel._metadata, IAgAvtrBasicManeuverStrategySmoothAccel._set_StopConditions_metadata, newVal)

    _get_StopOnRollAngle_metadata = { "name" : "StopOnRollAngle",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def StopOnRollAngle(self) -> bool:
        """The option to stop the maneuver if the specified roll angle is achieved."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategySmoothAccel._metadata, IAgAvtrBasicManeuverStrategySmoothAccel._get_StopOnRollAngle_metadata)

    _set_StopOnRollAngle_metadata = { "name" : "StopOnRollAngle",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @StopOnRollAngle.setter
    def StopOnRollAngle(self, newVal:bool) -> None:
        """The option to stop the maneuver if the specified roll angle is achieved."""
        return self._intf.set_property(IAgAvtrBasicManeuverStrategySmoothAccel._metadata, IAgAvtrBasicManeuverStrategySmoothAccel._set_StopOnRollAngle_metadata, newVal)

    _get_StopOnPitchAngle_metadata = { "name" : "StopOnPitchAngle",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def StopOnPitchAngle(self) -> bool:
        """The option to stop the maneuver if the specified pitch angle is achieved."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategySmoothAccel._metadata, IAgAvtrBasicManeuverStrategySmoothAccel._get_StopOnPitchAngle_metadata)

    _set_StopOnPitchAngle_metadata = { "name" : "StopOnPitchAngle",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @StopOnPitchAngle.setter
    def StopOnPitchAngle(self, newVal:bool) -> None:
        """The option to stop the maneuver if the specified pitch angle is achieved."""
        return self._intf.set_property(IAgAvtrBasicManeuverStrategySmoothAccel._metadata, IAgAvtrBasicManeuverStrategySmoothAccel._set_StopOnPitchAngle_metadata, newVal)

    _get_AirspeedOptions_metadata = { "name" : "AirspeedOptions",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def AirspeedOptions(self) -> "IAgAvtrBasicManeuverAirspeedOptions":
        """Get the airspeed options."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategySmoothAccel._metadata, IAgAvtrBasicManeuverStrategySmoothAccel._get_AirspeedOptions_metadata)


agcls.AgClassCatalog.add_catalog_entry("{b7dbc9ce-b749-4d60-bea1-d6f88415bc6e}", IAgAvtrBasicManeuverStrategySmoothAccel)
agcls.AgTypeNameMap["IAgAvtrBasicManeuverStrategySmoothAccel"] = IAgAvtrBasicManeuverStrategySmoothAccel

class IAgAvtrBasicManeuverStrategySmoothTurn(object):
    """Interface used to access options for a Smooth Turn Strategy of a Basic Maneuver Procedure."""
    _num_methods = 19
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{888b4f4a-ffe2-4c3b-a8b0-5cdd45e4adcd}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_HeadingChange" : 1,
                             "set_HeadingChange" : 2,
                             "get_TurnMode" : 3,
                             "set_TurnMode" : 4,
                             "get_LoadFactorMode" : 5,
                             "set_LoadFactorMode" : 6,
                             "get_MaxLoadFactorRate" : 7,
                             "set_MaxLoadFactorRate" : 8,
                             "get_OverrideLoadFactor" : 9,
                             "set_OverrideLoadFactor" : 10,
                             "get_RollRateMode" : 11,
                             "set_RollRateMode" : 12,
                             "get_RollAngle" : 13,
                             "set_RollAngle" : 14,
                             "get_OverrideRollRate" : 15,
                             "set_OverrideRollRate" : 16,
                             "get_AirspeedOptions" : 17,
                             "get_FPAMode" : 18,
                             "set_FPAMode" : 19, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrBasicManeuverStrategySmoothTurn._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrBasicManeuverStrategySmoothTurn from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrBasicManeuverStrategySmoothTurn.__dict__ and type(IAgAvtrBasicManeuverStrategySmoothTurn.__dict__[attrname]) == property:
            return IAgAvtrBasicManeuverStrategySmoothTurn.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrBasicManeuverStrategySmoothTurn.")
    
    _get_HeadingChange_metadata = { "name" : "HeadingChange",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def HeadingChange(self) -> typing.Any:
        """The heading change for the smooth turn."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategySmoothTurn._metadata, IAgAvtrBasicManeuverStrategySmoothTurn._get_HeadingChange_metadata)

    _set_HeadingChange_metadata = { "name" : "HeadingChange",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @HeadingChange.setter
    def HeadingChange(self, newVal:typing.Any) -> None:
        """The heading change for the smooth turn."""
        return self._intf.set_property(IAgAvtrBasicManeuverStrategySmoothTurn._metadata, IAgAvtrBasicManeuverStrategySmoothTurn._set_HeadingChange_metadata, newVal)

    _get_TurnMode_metadata = { "name" : "TurnMode",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrSmoothTurnMode),) }
    @property
    def TurnMode(self) -> "AgEAvtrSmoothTurnMode":
        """The turn mode for the smooth turn."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategySmoothTurn._metadata, IAgAvtrBasicManeuverStrategySmoothTurn._get_TurnMode_metadata)

    _set_TurnMode_metadata = { "name" : "TurnMode",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrSmoothTurnMode),) }
    @TurnMode.setter
    def TurnMode(self, newVal:"AgEAvtrSmoothTurnMode") -> None:
        """The turn mode for the smooth turn."""
        return self._intf.set_property(IAgAvtrBasicManeuverStrategySmoothTurn._metadata, IAgAvtrBasicManeuverStrategySmoothTurn._set_TurnMode_metadata, newVal)

    _get_LoadFactorMode_metadata = { "name" : "LoadFactorMode",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrPerfModelOverride),) }
    @property
    def LoadFactorMode(self) -> "AgEAvtrPerfModelOverride":
        """The load factor mode for the smooth turn."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategySmoothTurn._metadata, IAgAvtrBasicManeuverStrategySmoothTurn._get_LoadFactorMode_metadata)

    _set_LoadFactorMode_metadata = { "name" : "LoadFactorMode",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrPerfModelOverride),) }
    @LoadFactorMode.setter
    def LoadFactorMode(self, newVal:"AgEAvtrPerfModelOverride") -> None:
        """The load factormode for the smooth turn."""
        return self._intf.set_property(IAgAvtrBasicManeuverStrategySmoothTurn._metadata, IAgAvtrBasicManeuverStrategySmoothTurn._set_LoadFactorMode_metadata, newVal)

    _get_MaxLoadFactorRate_metadata = { "name" : "MaxLoadFactorRate",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def MaxLoadFactorRate(self) -> float:
        """The max load factor rate for the smooth turn."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategySmoothTurn._metadata, IAgAvtrBasicManeuverStrategySmoothTurn._get_MaxLoadFactorRate_metadata)

    _set_MaxLoadFactorRate_metadata = { "name" : "MaxLoadFactorRate",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @MaxLoadFactorRate.setter
    def MaxLoadFactorRate(self, newVal:float) -> None:
        """The max load factor rate for the smooth turn."""
        return self._intf.set_property(IAgAvtrBasicManeuverStrategySmoothTurn._metadata, IAgAvtrBasicManeuverStrategySmoothTurn._set_MaxLoadFactorRate_metadata, newVal)

    _get_OverrideLoadFactor_metadata = { "name" : "OverrideLoadFactor",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def OverrideLoadFactor(self) -> float:
        """The max load factor override value for the smooth turn. The load factor mode must be set to override to access this property."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategySmoothTurn._metadata, IAgAvtrBasicManeuverStrategySmoothTurn._get_OverrideLoadFactor_metadata)

    _set_OverrideLoadFactor_metadata = { "name" : "OverrideLoadFactor",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @OverrideLoadFactor.setter
    def OverrideLoadFactor(self, newVal:float) -> None:
        """The max load factor override value for the smooth turn. The load factor mode must be set to override to access this property."""
        return self._intf.set_property(IAgAvtrBasicManeuverStrategySmoothTurn._metadata, IAgAvtrBasicManeuverStrategySmoothTurn._set_OverrideLoadFactor_metadata, newVal)

    _get_RollRateMode_metadata = { "name" : "RollRateMode",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrPerfModelOverride),) }
    @property
    def RollRateMode(self) -> "AgEAvtrPerfModelOverride":
        """The roll rate mode for the smooth turn."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategySmoothTurn._metadata, IAgAvtrBasicManeuverStrategySmoothTurn._get_RollRateMode_metadata)

    _set_RollRateMode_metadata = { "name" : "RollRateMode",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrPerfModelOverride),) }
    @RollRateMode.setter
    def RollRateMode(self, newVal:"AgEAvtrPerfModelOverride") -> None:
        """The roll rate mode for the smooth turn."""
        return self._intf.set_property(IAgAvtrBasicManeuverStrategySmoothTurn._metadata, IAgAvtrBasicManeuverStrategySmoothTurn._set_RollRateMode_metadata, newVal)

    _get_RollAngle_metadata = { "name" : "RollAngle",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def RollAngle(self) -> typing.Any:
        """The roll angle for the smooth turn."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategySmoothTurn._metadata, IAgAvtrBasicManeuverStrategySmoothTurn._get_RollAngle_metadata)

    _set_RollAngle_metadata = { "name" : "RollAngle",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @RollAngle.setter
    def RollAngle(self, newVal:typing.Any) -> None:
        """The roll angle for the smooth turn."""
        return self._intf.set_property(IAgAvtrBasicManeuverStrategySmoothTurn._metadata, IAgAvtrBasicManeuverStrategySmoothTurn._set_RollAngle_metadata, newVal)

    _get_OverrideRollRate_metadata = { "name" : "OverrideRollRate",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def OverrideRollRate(self) -> typing.Any:
        """The max roll rate override value for the smooth turn. The roll rate mode must be set to override to access this property."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategySmoothTurn._metadata, IAgAvtrBasicManeuverStrategySmoothTurn._get_OverrideRollRate_metadata)

    _set_OverrideRollRate_metadata = { "name" : "OverrideRollRate",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @OverrideRollRate.setter
    def OverrideRollRate(self, newVal:typing.Any) -> None:
        """The max roll rate override value for the smooth turn. The roll rate mode must be set to override to access this property."""
        return self._intf.set_property(IAgAvtrBasicManeuverStrategySmoothTurn._metadata, IAgAvtrBasicManeuverStrategySmoothTurn._set_OverrideRollRate_metadata, newVal)

    _get_AirspeedOptions_metadata = { "name" : "AirspeedOptions",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def AirspeedOptions(self) -> "IAgAvtrBasicManeuverAirspeedOptions":
        """Get the airspeed options."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategySmoothTurn._metadata, IAgAvtrBasicManeuverStrategySmoothTurn._get_AirspeedOptions_metadata)

    _get_FPAMode_metadata = { "name" : "FPAMode",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrSmoothTurnFPAMode),) }
    @property
    def FPAMode(self) -> "AgEAvtrSmoothTurnFPAMode":
        """The flight path angle mode."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategySmoothTurn._metadata, IAgAvtrBasicManeuverStrategySmoothTurn._get_FPAMode_metadata)

    _set_FPAMode_metadata = { "name" : "FPAMode",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrSmoothTurnFPAMode),) }
    @FPAMode.setter
    def FPAMode(self, newVal:"AgEAvtrSmoothTurnFPAMode") -> None:
        """The flight path angle mode."""
        return self._intf.set_property(IAgAvtrBasicManeuverStrategySmoothTurn._metadata, IAgAvtrBasicManeuverStrategySmoothTurn._set_FPAMode_metadata, newVal)


agcls.AgClassCatalog.add_catalog_entry("{888b4f4a-ffe2-4c3b-a8b0-5cdd45e4adcd}", IAgAvtrBasicManeuverStrategySmoothTurn)
agcls.AgTypeNameMap["IAgAvtrBasicManeuverStrategySmoothTurn"] = IAgAvtrBasicManeuverStrategySmoothTurn

class IAgAvtrBasicManeuverStrategySimpleTurn(object):
    """Interface used to access options for a Simple Turn Strategy of a Basic Maneuver Procedure."""
    _num_methods = 8
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{3bae3110-3f6a-4c3d-914d-8592f3886f66}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_ReferenceFrame" : 1,
                             "set_ReferenceFrame" : 2,
                             "get_TurnAngle" : 3,
                             "set_TurnAngle" : 4,
                             "get_TurnRadiusFactor" : 5,
                             "set_TurnRadiusFactor" : 6,
                             "get_CompensateForCoriolisAccel" : 7,
                             "set_CompensateForCoriolisAccel" : 8, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrBasicManeuverStrategySimpleTurn._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrBasicManeuverStrategySimpleTurn from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrBasicManeuverStrategySimpleTurn.__dict__ and type(IAgAvtrBasicManeuverStrategySimpleTurn.__dict__[attrname]) == property:
            return IAgAvtrBasicManeuverStrategySimpleTurn.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrBasicManeuverStrategySimpleTurn.")
    
    _get_ReferenceFrame_metadata = { "name" : "ReferenceFrame",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrBasicManeuverRefFrame),) }
    @property
    def ReferenceFrame(self) -> "AgEAvtrBasicManeuverRefFrame":
        """The reference frame for the simple turn."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategySimpleTurn._metadata, IAgAvtrBasicManeuverStrategySimpleTurn._get_ReferenceFrame_metadata)

    _set_ReferenceFrame_metadata = { "name" : "ReferenceFrame",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrBasicManeuverRefFrame),) }
    @ReferenceFrame.setter
    def ReferenceFrame(self, inVal:"AgEAvtrBasicManeuverRefFrame") -> None:
        """The reference frame for the simple turn."""
        return self._intf.set_property(IAgAvtrBasicManeuverStrategySimpleTurn._metadata, IAgAvtrBasicManeuverStrategySimpleTurn._set_ReferenceFrame_metadata, inVal)

    _get_TurnAngle_metadata = { "name" : "TurnAngle",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def TurnAngle(self) -> typing.Any:
        """The turn angle for the simple turn."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategySimpleTurn._metadata, IAgAvtrBasicManeuverStrategySimpleTurn._get_TurnAngle_metadata)

    _set_TurnAngle_metadata = { "name" : "TurnAngle",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @TurnAngle.setter
    def TurnAngle(self, newVal:typing.Any) -> None:
        """The turn angle for the simple turn."""
        return self._intf.set_property(IAgAvtrBasicManeuverStrategySimpleTurn._metadata, IAgAvtrBasicManeuverStrategySimpleTurn._set_TurnAngle_metadata, newVal)

    _get_TurnRadiusFactor_metadata = { "name" : "TurnRadiusFactor",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def TurnRadiusFactor(self) -> float:
        """The turn radius factor for the simple turn."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategySimpleTurn._metadata, IAgAvtrBasicManeuverStrategySimpleTurn._get_TurnRadiusFactor_metadata)

    _set_TurnRadiusFactor_metadata = { "name" : "TurnRadiusFactor",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @TurnRadiusFactor.setter
    def TurnRadiusFactor(self, newVal:float) -> None:
        """The turn radius factor for the simple turn."""
        return self._intf.set_property(IAgAvtrBasicManeuverStrategySimpleTurn._metadata, IAgAvtrBasicManeuverStrategySimpleTurn._set_TurnRadiusFactor_metadata, newVal)

    _get_CompensateForCoriolisAccel_metadata = { "name" : "CompensateForCoriolisAccel",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def CompensateForCoriolisAccel(self) -> bool:
        """The option to compensate for the acceleration due to the Coriolis effect."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategySimpleTurn._metadata, IAgAvtrBasicManeuverStrategySimpleTurn._get_CompensateForCoriolisAccel_metadata)

    _set_CompensateForCoriolisAccel_metadata = { "name" : "CompensateForCoriolisAccel",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @CompensateForCoriolisAccel.setter
    def CompensateForCoriolisAccel(self, newVal:bool) -> None:
        return self._intf.set_property(IAgAvtrBasicManeuverStrategySimpleTurn._metadata, IAgAvtrBasicManeuverStrategySimpleTurn._set_CompensateForCoriolisAccel_metadata, newVal)


agcls.AgClassCatalog.add_catalog_entry("{3bae3110-3f6a-4c3d-914d-8592f3886f66}", IAgAvtrBasicManeuverStrategySimpleTurn)
agcls.AgTypeNameMap["IAgAvtrBasicManeuverStrategySimpleTurn"] = IAgAvtrBasicManeuverStrategySimpleTurn

class IAgAvtrBasicManeuverStrategyIntercept(object):
    """Interface used to access options for an Intercept Strategy of a Basic Maneuver Procedure."""
    _num_methods = 34
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{ab1da5c8-fd9b-49bc-adfd-69754a5376f5}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_TargetName" : 1,
                             "set_TargetName" : 2,
                             "get_ValidTargetNames" : 3,
                             "get_TargetResolution" : 4,
                             "set_TargetResolution" : 5,
                             "get_UseStopTimeToGo" : 6,
                             "get_StopTimeToGo" : 7,
                             "SetStopTimeToGo" : 8,
                             "get_UseStopSlantRange" : 9,
                             "get_StopSlantRange" : 10,
                             "SetStopSlantRange" : 11,
                             "get_InterceptMode" : 12,
                             "set_InterceptMode" : 13,
                             "get_TargetAspect" : 14,
                             "set_TargetAspect" : 15,
                             "get_LateralSeparation" : 16,
                             "set_LateralSeparation" : 17,
                             "get_ManeuverFactor" : 18,
                             "set_ManeuverFactor" : 19,
                             "get_ControlLimitMode" : 20,
                             "get_ControlLimitTurnRadius" : 21,
                             "get_ControlLimitTurnRate" : 22,
                             "get_ControlLimitHorizAccel" : 23,
                             "SetControlLimit" : 24,
                             "get_ClosureMode" : 25,
                             "set_ClosureMode" : 26,
                             "get_HOBSMaxAngle" : 27,
                             "set_HOBSMaxAngle" : 28,
                             "get_HOBSAngleTol" : 29,
                             "set_HOBSAngleTol" : 30,
                             "get_CompensateForCoriolisAccel" : 31,
                             "set_CompensateForCoriolisAccel" : 32,
                             "get_PosVelStrategies" : 33,
                             "CancelTgtPosVel" : 34, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrBasicManeuverStrategyIntercept._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrBasicManeuverStrategyIntercept from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrBasicManeuverStrategyIntercept.__dict__ and type(IAgAvtrBasicManeuverStrategyIntercept.__dict__[attrname]) == property:
            return IAgAvtrBasicManeuverStrategyIntercept.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrBasicManeuverStrategyIntercept.")
    
    _get_TargetName_metadata = { "name" : "TargetName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def TargetName(self) -> str:
        """The target name."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyIntercept._metadata, IAgAvtrBasicManeuverStrategyIntercept._get_TargetName_metadata)

    _set_TargetName_metadata = { "name" : "TargetName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @TargetName.setter
    def TargetName(self, newVal:str) -> None:
        """The target name."""
        return self._intf.set_property(IAgAvtrBasicManeuverStrategyIntercept._metadata, IAgAvtrBasicManeuverStrategyIntercept._set_TargetName_metadata, newVal)

    _get_ValidTargetNames_metadata = { "name" : "ValidTargetNames",
            "arg_types" : (POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg,) }
    @property
    def ValidTargetNames(self) -> list:
        """Returns the valid target names."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyIntercept._metadata, IAgAvtrBasicManeuverStrategyIntercept._get_ValidTargetNames_metadata)

    _get_TargetResolution_metadata = { "name" : "TargetResolution",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def TargetResolution(self) -> float:
        """The target position/velocity sampling resolution."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyIntercept._metadata, IAgAvtrBasicManeuverStrategyIntercept._get_TargetResolution_metadata)

    _set_TargetResolution_metadata = { "name" : "TargetResolution",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @TargetResolution.setter
    def TargetResolution(self, newVal:float) -> None:
        """The target position/velocity sampling resolution."""
        return self._intf.set_property(IAgAvtrBasicManeuverStrategyIntercept._metadata, IAgAvtrBasicManeuverStrategyIntercept._set_TargetResolution_metadata, newVal)

    _get_UseStopTimeToGo_metadata = { "name" : "UseStopTimeToGo",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def UseStopTimeToGo(self) -> bool:
        """The option to specify a time to go stopping condition."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyIntercept._metadata, IAgAvtrBasicManeuverStrategyIntercept._get_UseStopTimeToGo_metadata)

    _get_StopTimeToGo_metadata = { "name" : "StopTimeToGo",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def StopTimeToGo(self) -> float:
        """The stop time from the target at which the maneuver will stop."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyIntercept._metadata, IAgAvtrBasicManeuverStrategyIntercept._get_StopTimeToGo_metadata)

    _SetStopTimeToGo_metadata = { "name" : "SetStopTimeToGo",
            "arg_types" : (agcom.VARIANT_BOOL, agcom.DOUBLE,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg, agmarshall.DOUBLE_arg,) }
    def SetStopTimeToGo(self, enable:bool, time:float) -> None:
        """Set the option to use the stop time from target stopping condition and set the according value."""
        return self._intf.invoke(IAgAvtrBasicManeuverStrategyIntercept._metadata, IAgAvtrBasicManeuverStrategyIntercept._SetStopTimeToGo_metadata, enable, time)

    _get_UseStopSlantRange_metadata = { "name" : "UseStopSlantRange",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def UseStopSlantRange(self) -> bool:
        """The option to specify a range from target stopping condition."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyIntercept._metadata, IAgAvtrBasicManeuverStrategyIntercept._get_UseStopSlantRange_metadata)

    _get_StopSlantRange_metadata = { "name" : "StopSlantRange",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def StopSlantRange(self) -> float:
        """The range from the target at which the maneuver will stop."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyIntercept._metadata, IAgAvtrBasicManeuverStrategyIntercept._get_StopSlantRange_metadata)

    _SetStopSlantRange_metadata = { "name" : "SetStopSlantRange",
            "arg_types" : (agcom.VARIANT_BOOL, agcom.DOUBLE,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg, agmarshall.DOUBLE_arg,) }
    def SetStopSlantRange(self, enable:bool, range:float) -> None:
        """Set the option to use the stop slant range stopping condition and set the according value."""
        return self._intf.invoke(IAgAvtrBasicManeuverStrategyIntercept._metadata, IAgAvtrBasicManeuverStrategyIntercept._SetStopSlantRange_metadata, enable, range)

    _get_InterceptMode_metadata = { "name" : "InterceptMode",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrInterceptMode),) }
    @property
    def InterceptMode(self) -> "AgEAvtrInterceptMode":
        """The intercept mode."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyIntercept._metadata, IAgAvtrBasicManeuverStrategyIntercept._get_InterceptMode_metadata)

    _set_InterceptMode_metadata = { "name" : "InterceptMode",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrInterceptMode),) }
    @InterceptMode.setter
    def InterceptMode(self, newVal:"AgEAvtrInterceptMode") -> None:
        """The intercept mode."""
        return self._intf.set_property(IAgAvtrBasicManeuverStrategyIntercept._metadata, IAgAvtrBasicManeuverStrategyIntercept._set_InterceptMode_metadata, newVal)

    _get_TargetAspect_metadata = { "name" : "TargetAspect",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def TargetAspect(self) -> typing.Any:
        """The angle relative to the target that the aircraft should maintain until intercept."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyIntercept._metadata, IAgAvtrBasicManeuverStrategyIntercept._get_TargetAspect_metadata)

    _set_TargetAspect_metadata = { "name" : "TargetAspect",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @TargetAspect.setter
    def TargetAspect(self, newVal:typing.Any) -> None:
        """The angle relative to the target that the aircraft should maintain until intercept."""
        return self._intf.set_property(IAgAvtrBasicManeuverStrategyIntercept._metadata, IAgAvtrBasicManeuverStrategyIntercept._set_TargetAspect_metadata, newVal)

    _get_LateralSeparation_metadata = { "name" : "LateralSeparation",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def LateralSeparation(self) -> float:
        """The distance from the target that the aircraft will guide to before intercepting."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyIntercept._metadata, IAgAvtrBasicManeuverStrategyIntercept._get_LateralSeparation_metadata)

    _set_LateralSeparation_metadata = { "name" : "LateralSeparation",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @LateralSeparation.setter
    def LateralSeparation(self, newVal:float) -> None:
        """The distance from the target that the aircraft will guide to before intercepting."""
        return self._intf.set_property(IAgAvtrBasicManeuverStrategyIntercept._metadata, IAgAvtrBasicManeuverStrategyIntercept._set_LateralSeparation_metadata, newVal)

    _get_ManeuverFactor_metadata = { "name" : "ManeuverFactor",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def ManeuverFactor(self) -> float:
        """A dimensionless factor that determines how tightly or gently the aircraft will maneuver."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyIntercept._metadata, IAgAvtrBasicManeuverStrategyIntercept._get_ManeuverFactor_metadata)

    _set_ManeuverFactor_metadata = { "name" : "ManeuverFactor",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @ManeuverFactor.setter
    def ManeuverFactor(self, newVal:float) -> None:
        """A dimensionless factor that determines how tightly or gently the aircraft will maneuver."""
        return self._intf.set_property(IAgAvtrBasicManeuverStrategyIntercept._metadata, IAgAvtrBasicManeuverStrategyIntercept._set_ManeuverFactor_metadata, newVal)

    _get_ControlLimitMode_metadata = { "name" : "ControlLimitMode",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrBasicManeuverStrategyNavControlLimit),) }
    @property
    def ControlLimitMode(self) -> "AgEAvtrBasicManeuverStrategyNavControlLimit":
        """Get the method to define the control limits of the aircraft during the maneuver."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyIntercept._metadata, IAgAvtrBasicManeuverStrategyIntercept._get_ControlLimitMode_metadata)

    _get_ControlLimitTurnRadius_metadata = { "name" : "ControlLimitTurnRadius",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def ControlLimitTurnRadius(self) -> float:
        """The specified turn radius for a control limit mode of specify min turn radius."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyIntercept._metadata, IAgAvtrBasicManeuverStrategyIntercept._get_ControlLimitTurnRadius_metadata)

    _get_ControlLimitTurnRate_metadata = { "name" : "ControlLimitTurnRate",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def ControlLimitTurnRate(self) -> typing.Any:
        """The specified turn rate for a control limit mode of specify max turn rate."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyIntercept._metadata, IAgAvtrBasicManeuverStrategyIntercept._get_ControlLimitTurnRate_metadata)

    _get_ControlLimitHorizAccel_metadata = { "name" : "ControlLimitHorizAccel",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def ControlLimitHorizAccel(self) -> float:
        """The specified horizontal acceleration for a control limit mode of specify max horiz accel."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyIntercept._metadata, IAgAvtrBasicManeuverStrategyIntercept._get_ControlLimitHorizAccel_metadata)

    _SetControlLimit_metadata = { "name" : "SetControlLimit",
            "arg_types" : (agcom.LONG, agcom.DOUBLE,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrBasicManeuverStrategyNavControlLimit), agmarshall.DOUBLE_arg,) }
    def SetControlLimit(self, controlLimitMode:"AgEAvtrBasicManeuverStrategyNavControlLimit", controlLimitValue:float) -> None:
        """Set the method and corresponding value to define the control limits of the aircraft during the maneuver."""
        return self._intf.invoke(IAgAvtrBasicManeuverStrategyIntercept._metadata, IAgAvtrBasicManeuverStrategyIntercept._SetControlLimit_metadata, controlLimitMode, controlLimitValue)

    _get_ClosureMode_metadata = { "name" : "ClosureMode",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrClosureMode),) }
    @property
    def ClosureMode(self) -> "AgEAvtrClosureMode":
        """The closure mode for the guidance strategy."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyIntercept._metadata, IAgAvtrBasicManeuverStrategyIntercept._get_ClosureMode_metadata)

    _set_ClosureMode_metadata = { "name" : "ClosureMode",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrClosureMode),) }
    @ClosureMode.setter
    def ClosureMode(self, newVal:"AgEAvtrClosureMode") -> None:
        """The closure mode for the guidance strategy."""
        return self._intf.set_property(IAgAvtrBasicManeuverStrategyIntercept._metadata, IAgAvtrBasicManeuverStrategyIntercept._set_ClosureMode_metadata, newVal)

    _get_HOBSMaxAngle_metadata = { "name" : "HOBSMaxAngle",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def HOBSMaxAngle(self) -> typing.Any:
        """The closure high off boresight max angle."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyIntercept._metadata, IAgAvtrBasicManeuverStrategyIntercept._get_HOBSMaxAngle_metadata)

    _set_HOBSMaxAngle_metadata = { "name" : "HOBSMaxAngle",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @HOBSMaxAngle.setter
    def HOBSMaxAngle(self, newVal:typing.Any) -> None:
        """The closure high off boresight max angle."""
        return self._intf.set_property(IAgAvtrBasicManeuverStrategyIntercept._metadata, IAgAvtrBasicManeuverStrategyIntercept._set_HOBSMaxAngle_metadata, newVal)

    _get_HOBSAngleTol_metadata = { "name" : "HOBSAngleTol",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def HOBSAngleTol(self) -> typing.Any:
        """The closure high off boresight angle tolerance."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyIntercept._metadata, IAgAvtrBasicManeuverStrategyIntercept._get_HOBSAngleTol_metadata)

    _set_HOBSAngleTol_metadata = { "name" : "HOBSAngleTol",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @HOBSAngleTol.setter
    def HOBSAngleTol(self, newVal:typing.Any) -> None:
        """The closure high off boresight angle tolerance."""
        return self._intf.set_property(IAgAvtrBasicManeuverStrategyIntercept._metadata, IAgAvtrBasicManeuverStrategyIntercept._set_HOBSAngleTol_metadata, newVal)

    _get_CompensateForCoriolisAccel_metadata = { "name" : "CompensateForCoriolisAccel",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def CompensateForCoriolisAccel(self) -> bool:
        """The option to compensate for the acceleration due to the Coriolis effect."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyIntercept._metadata, IAgAvtrBasicManeuverStrategyIntercept._get_CompensateForCoriolisAccel_metadata)

    _set_CompensateForCoriolisAccel_metadata = { "name" : "CompensateForCoriolisAccel",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @CompensateForCoriolisAccel.setter
    def CompensateForCoriolisAccel(self, newVal:bool) -> None:
        return self._intf.set_property(IAgAvtrBasicManeuverStrategyIntercept._metadata, IAgAvtrBasicManeuverStrategyIntercept._set_CompensateForCoriolisAccel_metadata, newVal)

    _get_PosVelStrategies_metadata = { "name" : "PosVelStrategies",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def PosVelStrategies(self) -> "IAgAvtrBasicManeuverTargetPosVel":
        """The position velocity strategies for Intercept."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyIntercept._metadata, IAgAvtrBasicManeuverStrategyIntercept._get_PosVelStrategies_metadata)

    _CancelTgtPosVel_metadata = { "name" : "CancelTgtPosVel",
            "arg_types" : (),
            "marshallers" : () }
    def CancelTgtPosVel(self) -> None:
        """Cancel the position velocity strategies for Intercept."""
        return self._intf.invoke(IAgAvtrBasicManeuverStrategyIntercept._metadata, IAgAvtrBasicManeuverStrategyIntercept._CancelTgtPosVel_metadata, )


agcls.AgClassCatalog.add_catalog_entry("{ab1da5c8-fd9b-49bc-adfd-69754a5376f5}", IAgAvtrBasicManeuverStrategyIntercept)
agcls.AgTypeNameMap["IAgAvtrBasicManeuverStrategyIntercept"] = IAgAvtrBasicManeuverStrategyIntercept

class IAgAvtrBasicManeuverStrategyRelativeBearing(object):
    """Interface used to access options for a Relative Bearing Strategy of a Basic Maneuver Procedure."""
    _num_methods = 18
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{2fefbc0f-5a8a-4388-9bb9-0376305315c8}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_TargetName" : 1,
                             "set_TargetName" : 2,
                             "get_ValidTargetNames" : 3,
                             "get_TargetResolution" : 4,
                             "set_TargetResolution" : 5,
                             "get_RelBearing" : 6,
                             "set_RelBearing" : 7,
                             "get_MinRange" : 8,
                             "set_MinRange" : 9,
                             "get_ControlLimitMode" : 10,
                             "get_ControlLimitTurnRadius" : 11,
                             "get_ControlLimitTurnRate" : 12,
                             "get_ControlLimitHorizAccel" : 13,
                             "SetControlLimit" : 14,
                             "get_CompensateForCoriolisAccel" : 15,
                             "set_CompensateForCoriolisAccel" : 16,
                             "get_PosVelStrategies" : 17,
                             "CancelTgtPosVel" : 18, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrBasicManeuverStrategyRelativeBearing._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrBasicManeuverStrategyRelativeBearing from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrBasicManeuverStrategyRelativeBearing.__dict__ and type(IAgAvtrBasicManeuverStrategyRelativeBearing.__dict__[attrname]) == property:
            return IAgAvtrBasicManeuverStrategyRelativeBearing.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrBasicManeuverStrategyRelativeBearing.")
    
    _get_TargetName_metadata = { "name" : "TargetName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def TargetName(self) -> str:
        """The target name."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyRelativeBearing._metadata, IAgAvtrBasicManeuverStrategyRelativeBearing._get_TargetName_metadata)

    _set_TargetName_metadata = { "name" : "TargetName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @TargetName.setter
    def TargetName(self, newVal:str) -> None:
        """The target name."""
        return self._intf.set_property(IAgAvtrBasicManeuverStrategyRelativeBearing._metadata, IAgAvtrBasicManeuverStrategyRelativeBearing._set_TargetName_metadata, newVal)

    _get_ValidTargetNames_metadata = { "name" : "ValidTargetNames",
            "arg_types" : (POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg,) }
    @property
    def ValidTargetNames(self) -> list:
        """Returns the valid target names."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyRelativeBearing._metadata, IAgAvtrBasicManeuverStrategyRelativeBearing._get_ValidTargetNames_metadata)

    _get_TargetResolution_metadata = { "name" : "TargetResolution",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def TargetResolution(self) -> float:
        """The target position/velocity sampling resolution."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyRelativeBearing._metadata, IAgAvtrBasicManeuverStrategyRelativeBearing._get_TargetResolution_metadata)

    _set_TargetResolution_metadata = { "name" : "TargetResolution",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @TargetResolution.setter
    def TargetResolution(self, newVal:float) -> None:
        """The target position/velocity sampling resolution."""
        return self._intf.set_property(IAgAvtrBasicManeuverStrategyRelativeBearing._metadata, IAgAvtrBasicManeuverStrategyRelativeBearing._set_TargetResolution_metadata, newVal)

    _get_RelBearing_metadata = { "name" : "RelBearing",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def RelBearing(self) -> typing.Any:
        """The relative bearing angle."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyRelativeBearing._metadata, IAgAvtrBasicManeuverStrategyRelativeBearing._get_RelBearing_metadata)

    _set_RelBearing_metadata = { "name" : "RelBearing",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @RelBearing.setter
    def RelBearing(self, newVal:typing.Any) -> None:
        """The relative bearing angle."""
        return self._intf.set_property(IAgAvtrBasicManeuverStrategyRelativeBearing._metadata, IAgAvtrBasicManeuverStrategyRelativeBearing._set_RelBearing_metadata, newVal)

    _get_MinRange_metadata = { "name" : "MinRange",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def MinRange(self) -> float:
        """The range from the target at which the aircraft will stop."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyRelativeBearing._metadata, IAgAvtrBasicManeuverStrategyRelativeBearing._get_MinRange_metadata)

    _set_MinRange_metadata = { "name" : "MinRange",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @MinRange.setter
    def MinRange(self, newVal:float) -> None:
        """The range from the target at which the aircraft will stop."""
        return self._intf.set_property(IAgAvtrBasicManeuverStrategyRelativeBearing._metadata, IAgAvtrBasicManeuverStrategyRelativeBearing._set_MinRange_metadata, newVal)

    _get_ControlLimitMode_metadata = { "name" : "ControlLimitMode",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrBasicManeuverStrategyNavControlLimit),) }
    @property
    def ControlLimitMode(self) -> "AgEAvtrBasicManeuverStrategyNavControlLimit":
        """Get the method to define the control limits of the aircraft during the maneuver."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyRelativeBearing._metadata, IAgAvtrBasicManeuverStrategyRelativeBearing._get_ControlLimitMode_metadata)

    _get_ControlLimitTurnRadius_metadata = { "name" : "ControlLimitTurnRadius",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def ControlLimitTurnRadius(self) -> float:
        """The specified turn radius for a control limit mode of specify min turn radius."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyRelativeBearing._metadata, IAgAvtrBasicManeuverStrategyRelativeBearing._get_ControlLimitTurnRadius_metadata)

    _get_ControlLimitTurnRate_metadata = { "name" : "ControlLimitTurnRate",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def ControlLimitTurnRate(self) -> typing.Any:
        """The specified turn rate for a control limit mode of specify max turn rate."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyRelativeBearing._metadata, IAgAvtrBasicManeuverStrategyRelativeBearing._get_ControlLimitTurnRate_metadata)

    _get_ControlLimitHorizAccel_metadata = { "name" : "ControlLimitHorizAccel",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def ControlLimitHorizAccel(self) -> float:
        """The specified horizontal acceleration for a control limit mode of specify max horiz accel."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyRelativeBearing._metadata, IAgAvtrBasicManeuverStrategyRelativeBearing._get_ControlLimitHorizAccel_metadata)

    _SetControlLimit_metadata = { "name" : "SetControlLimit",
            "arg_types" : (agcom.LONG, agcom.DOUBLE,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrBasicManeuverStrategyNavControlLimit), agmarshall.DOUBLE_arg,) }
    def SetControlLimit(self, controlLimitMode:"AgEAvtrBasicManeuverStrategyNavControlLimit", controlLimitValue:float) -> None:
        """Set the method and corresponding value to define the control limits of the aircraft during the maneuver."""
        return self._intf.invoke(IAgAvtrBasicManeuverStrategyRelativeBearing._metadata, IAgAvtrBasicManeuverStrategyRelativeBearing._SetControlLimit_metadata, controlLimitMode, controlLimitValue)

    _get_CompensateForCoriolisAccel_metadata = { "name" : "CompensateForCoriolisAccel",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def CompensateForCoriolisAccel(self) -> bool:
        """The option to compensate for the acceleration due to the Coriolis effect."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyRelativeBearing._metadata, IAgAvtrBasicManeuverStrategyRelativeBearing._get_CompensateForCoriolisAccel_metadata)

    _set_CompensateForCoriolisAccel_metadata = { "name" : "CompensateForCoriolisAccel",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @CompensateForCoriolisAccel.setter
    def CompensateForCoriolisAccel(self, newVal:bool) -> None:
        return self._intf.set_property(IAgAvtrBasicManeuverStrategyRelativeBearing._metadata, IAgAvtrBasicManeuverStrategyRelativeBearing._set_CompensateForCoriolisAccel_metadata, newVal)

    _get_PosVelStrategies_metadata = { "name" : "PosVelStrategies",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def PosVelStrategies(self) -> "IAgAvtrBasicManeuverTargetPosVel":
        """The position velocity strategies for Relative Bearing."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyRelativeBearing._metadata, IAgAvtrBasicManeuverStrategyRelativeBearing._get_PosVelStrategies_metadata)

    _CancelTgtPosVel_metadata = { "name" : "CancelTgtPosVel",
            "arg_types" : (),
            "marshallers" : () }
    def CancelTgtPosVel(self) -> None:
        """Cancel the position velocity strategies for Relative Bearing."""
        return self._intf.invoke(IAgAvtrBasicManeuverStrategyRelativeBearing._metadata, IAgAvtrBasicManeuverStrategyRelativeBearing._CancelTgtPosVel_metadata, )


agcls.AgClassCatalog.add_catalog_entry("{2fefbc0f-5a8a-4388-9bb9-0376305315c8}", IAgAvtrBasicManeuverStrategyRelativeBearing)
agcls.AgTypeNameMap["IAgAvtrBasicManeuverStrategyRelativeBearing"] = IAgAvtrBasicManeuverStrategyRelativeBearing

class IAgAvtrBasicManeuverStrategyRelativeCourse(object):
    """Interface used to access options for a Relative Course Strategy of a Basic Maneuver Procedure."""
    _num_methods = 34
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{3b0436c1-b6c4-4623-aeeb-db55f1fce56f}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_TargetName" : 1,
                             "set_TargetName" : 2,
                             "get_ValidTargetNames" : 3,
                             "get_TargetResolution" : 4,
                             "set_TargetResolution" : 5,
                             "get_UseRelativeCourse" : 6,
                             "set_UseRelativeCourse" : 7,
                             "get_Course" : 8,
                             "set_Course" : 9,
                             "get_InTrack" : 10,
                             "set_InTrack" : 11,
                             "get_CrossTrack" : 12,
                             "set_CrossTrack" : 13,
                             "get_ManeuverFactor" : 14,
                             "set_ManeuverFactor" : 15,
                             "get_UseApproachTurnMode" : 16,
                             "set_UseApproachTurnMode" : 17,
                             "get_ControlLimitMode" : 18,
                             "get_ControlLimitTurnRadius" : 19,
                             "get_ControlLimitTurnRate" : 20,
                             "get_ControlLimitHorizAccel" : 21,
                             "SetControlLimit" : 22,
                             "get_ClosureMode" : 23,
                             "set_ClosureMode" : 24,
                             "get_DownrangeOffset" : 25,
                             "set_DownrangeOffset" : 26,
                             "get_HOBSMaxAngle" : 27,
                             "set_HOBSMaxAngle" : 28,
                             "get_HOBSAngleTol" : 29,
                             "set_HOBSAngleTol" : 30,
                             "get_CompensateForCoriolisAccel" : 31,
                             "set_CompensateForCoriolisAccel" : 32,
                             "get_PosVelStrategies" : 33,
                             "CancelTgtPosVel" : 34, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrBasicManeuverStrategyRelativeCourse._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrBasicManeuverStrategyRelativeCourse from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrBasicManeuverStrategyRelativeCourse.__dict__ and type(IAgAvtrBasicManeuverStrategyRelativeCourse.__dict__[attrname]) == property:
            return IAgAvtrBasicManeuverStrategyRelativeCourse.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrBasicManeuverStrategyRelativeCourse.")
    
    _get_TargetName_metadata = { "name" : "TargetName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def TargetName(self) -> str:
        """The target name."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyRelativeCourse._metadata, IAgAvtrBasicManeuverStrategyRelativeCourse._get_TargetName_metadata)

    _set_TargetName_metadata = { "name" : "TargetName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @TargetName.setter
    def TargetName(self, newVal:str) -> None:
        """The target name."""
        return self._intf.set_property(IAgAvtrBasicManeuverStrategyRelativeCourse._metadata, IAgAvtrBasicManeuverStrategyRelativeCourse._set_TargetName_metadata, newVal)

    _get_ValidTargetNames_metadata = { "name" : "ValidTargetNames",
            "arg_types" : (POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg,) }
    @property
    def ValidTargetNames(self) -> list:
        """Returns the valid target names."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyRelativeCourse._metadata, IAgAvtrBasicManeuverStrategyRelativeCourse._get_ValidTargetNames_metadata)

    _get_TargetResolution_metadata = { "name" : "TargetResolution",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def TargetResolution(self) -> float:
        """The target position/velocity sampling resolution."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyRelativeCourse._metadata, IAgAvtrBasicManeuverStrategyRelativeCourse._get_TargetResolution_metadata)

    _set_TargetResolution_metadata = { "name" : "TargetResolution",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @TargetResolution.setter
    def TargetResolution(self, newVal:float) -> None:
        """The target position/velocity sampling resolution."""
        return self._intf.set_property(IAgAvtrBasicManeuverStrategyRelativeCourse._metadata, IAgAvtrBasicManeuverStrategyRelativeCourse._set_TargetResolution_metadata, newVal)

    _get_UseRelativeCourse_metadata = { "name" : "UseRelativeCourse",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def UseRelativeCourse(self) -> bool:
        """The option to specify a relative course as opposed to a true course."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyRelativeCourse._metadata, IAgAvtrBasicManeuverStrategyRelativeCourse._get_UseRelativeCourse_metadata)

    _set_UseRelativeCourse_metadata = { "name" : "UseRelativeCourse",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @UseRelativeCourse.setter
    def UseRelativeCourse(self, newVal:bool) -> None:
        """The option to specify a relative course as opposed to a true course."""
        return self._intf.set_property(IAgAvtrBasicManeuverStrategyRelativeCourse._metadata, IAgAvtrBasicManeuverStrategyRelativeCourse._set_UseRelativeCourse_metadata, newVal)

    _get_Course_metadata = { "name" : "Course",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def Course(self) -> typing.Any:
        """The course value."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyRelativeCourse._metadata, IAgAvtrBasicManeuverStrategyRelativeCourse._get_Course_metadata)

    _set_Course_metadata = { "name" : "Course",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @Course.setter
    def Course(self, newVal:typing.Any) -> None:
        """The course value."""
        return self._intf.set_property(IAgAvtrBasicManeuverStrategyRelativeCourse._metadata, IAgAvtrBasicManeuverStrategyRelativeCourse._set_Course_metadata, newVal)

    _get_InTrack_metadata = { "name" : "InTrack",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def InTrack(self) -> float:
        """The in track offset from the center of the target."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyRelativeCourse._metadata, IAgAvtrBasicManeuverStrategyRelativeCourse._get_InTrack_metadata)

    _set_InTrack_metadata = { "name" : "InTrack",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @InTrack.setter
    def InTrack(self, newVal:float) -> None:
        """The in track offset from the center of the target."""
        return self._intf.set_property(IAgAvtrBasicManeuverStrategyRelativeCourse._metadata, IAgAvtrBasicManeuverStrategyRelativeCourse._set_InTrack_metadata, newVal)

    _get_CrossTrack_metadata = { "name" : "CrossTrack",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def CrossTrack(self) -> float:
        """The cross track offset from the center of the target."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyRelativeCourse._metadata, IAgAvtrBasicManeuverStrategyRelativeCourse._get_CrossTrack_metadata)

    _set_CrossTrack_metadata = { "name" : "CrossTrack",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @CrossTrack.setter
    def CrossTrack(self, newVal:float) -> None:
        """The cross track offset from the center of the target."""
        return self._intf.set_property(IAgAvtrBasicManeuverStrategyRelativeCourse._metadata, IAgAvtrBasicManeuverStrategyRelativeCourse._set_CrossTrack_metadata, newVal)

    _get_ManeuverFactor_metadata = { "name" : "ManeuverFactor",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def ManeuverFactor(self) -> float:
        """A dimensionless factor that determines how tightly or gently the aircraft will maneuver."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyRelativeCourse._metadata, IAgAvtrBasicManeuverStrategyRelativeCourse._get_ManeuverFactor_metadata)

    _set_ManeuverFactor_metadata = { "name" : "ManeuverFactor",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @ManeuverFactor.setter
    def ManeuverFactor(self, newVal:float) -> None:
        """A dimensionless factor that determines how tightly or gently the aircraft will maneuver."""
        return self._intf.set_property(IAgAvtrBasicManeuverStrategyRelativeCourse._metadata, IAgAvtrBasicManeuverStrategyRelativeCourse._set_ManeuverFactor_metadata, newVal)

    _get_UseApproachTurnMode_metadata = { "name" : "UseApproachTurnMode",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def UseApproachTurnMode(self) -> bool:
        """The option to fly the base leg of the maneuver with a constant radius turn."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyRelativeCourse._metadata, IAgAvtrBasicManeuverStrategyRelativeCourse._get_UseApproachTurnMode_metadata)

    _set_UseApproachTurnMode_metadata = { "name" : "UseApproachTurnMode",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @UseApproachTurnMode.setter
    def UseApproachTurnMode(self, newVal:bool) -> None:
        """The option to fly the base leg of the maneuver with a constant radius turn."""
        return self._intf.set_property(IAgAvtrBasicManeuverStrategyRelativeCourse._metadata, IAgAvtrBasicManeuverStrategyRelativeCourse._set_UseApproachTurnMode_metadata, newVal)

    _get_ControlLimitMode_metadata = { "name" : "ControlLimitMode",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrBasicManeuverStrategyNavControlLimit),) }
    @property
    def ControlLimitMode(self) -> "AgEAvtrBasicManeuverStrategyNavControlLimit":
        """Get the method to define the control limits of the aircraft during the maneuver."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyRelativeCourse._metadata, IAgAvtrBasicManeuverStrategyRelativeCourse._get_ControlLimitMode_metadata)

    _get_ControlLimitTurnRadius_metadata = { "name" : "ControlLimitTurnRadius",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def ControlLimitTurnRadius(self) -> float:
        """The specified turn radius for a control limit mode of specify min turn radius."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyRelativeCourse._metadata, IAgAvtrBasicManeuverStrategyRelativeCourse._get_ControlLimitTurnRadius_metadata)

    _get_ControlLimitTurnRate_metadata = { "name" : "ControlLimitTurnRate",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def ControlLimitTurnRate(self) -> typing.Any:
        """The specified turn rate for a control limit mode of specify max turn rate."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyRelativeCourse._metadata, IAgAvtrBasicManeuverStrategyRelativeCourse._get_ControlLimitTurnRate_metadata)

    _get_ControlLimitHorizAccel_metadata = { "name" : "ControlLimitHorizAccel",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def ControlLimitHorizAccel(self) -> float:
        """The specified horizontal acceleration for a control limit mode of specify max horiz accel."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyRelativeCourse._metadata, IAgAvtrBasicManeuverStrategyRelativeCourse._get_ControlLimitHorizAccel_metadata)

    _SetControlLimit_metadata = { "name" : "SetControlLimit",
            "arg_types" : (agcom.LONG, agcom.DOUBLE,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrBasicManeuverStrategyNavControlLimit), agmarshall.DOUBLE_arg,) }
    def SetControlLimit(self, controlLimitMode:"AgEAvtrBasicManeuverStrategyNavControlLimit", controlLimitValue:float) -> None:
        """Set the method and corresponding value to define the control limits of the aircraft during the maneuver."""
        return self._intf.invoke(IAgAvtrBasicManeuverStrategyRelativeCourse._metadata, IAgAvtrBasicManeuverStrategyRelativeCourse._SetControlLimit_metadata, controlLimitMode, controlLimitValue)

    _get_ClosureMode_metadata = { "name" : "ClosureMode",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrClosureMode),) }
    @property
    def ClosureMode(self) -> "AgEAvtrClosureMode":
        """The closure mode for the guidance strategy."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyRelativeCourse._metadata, IAgAvtrBasicManeuverStrategyRelativeCourse._get_ClosureMode_metadata)

    _set_ClosureMode_metadata = { "name" : "ClosureMode",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrClosureMode),) }
    @ClosureMode.setter
    def ClosureMode(self, newVal:"AgEAvtrClosureMode") -> None:
        """The closure mode for the guidance strategy."""
        return self._intf.set_property(IAgAvtrBasicManeuverStrategyRelativeCourse._metadata, IAgAvtrBasicManeuverStrategyRelativeCourse._set_ClosureMode_metadata, newVal)

    _get_DownrangeOffset_metadata = { "name" : "DownrangeOffset",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def DownrangeOffset(self) -> float:
        """The downrange offset for the closure options."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyRelativeCourse._metadata, IAgAvtrBasicManeuverStrategyRelativeCourse._get_DownrangeOffset_metadata)

    _set_DownrangeOffset_metadata = { "name" : "DownrangeOffset",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @DownrangeOffset.setter
    def DownrangeOffset(self, newVal:float) -> None:
        """The downrange offset for the closure options."""
        return self._intf.set_property(IAgAvtrBasicManeuverStrategyRelativeCourse._metadata, IAgAvtrBasicManeuverStrategyRelativeCourse._set_DownrangeOffset_metadata, newVal)

    _get_HOBSMaxAngle_metadata = { "name" : "HOBSMaxAngle",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def HOBSMaxAngle(self) -> typing.Any:
        """The closure high off boresight max angle."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyRelativeCourse._metadata, IAgAvtrBasicManeuverStrategyRelativeCourse._get_HOBSMaxAngle_metadata)

    _set_HOBSMaxAngle_metadata = { "name" : "HOBSMaxAngle",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @HOBSMaxAngle.setter
    def HOBSMaxAngle(self, newVal:typing.Any) -> None:
        """The closure high off boresight max angle."""
        return self._intf.set_property(IAgAvtrBasicManeuverStrategyRelativeCourse._metadata, IAgAvtrBasicManeuverStrategyRelativeCourse._set_HOBSMaxAngle_metadata, newVal)

    _get_HOBSAngleTol_metadata = { "name" : "HOBSAngleTol",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def HOBSAngleTol(self) -> typing.Any:
        """The closure high off boresight angle tolerance."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyRelativeCourse._metadata, IAgAvtrBasicManeuverStrategyRelativeCourse._get_HOBSAngleTol_metadata)

    _set_HOBSAngleTol_metadata = { "name" : "HOBSAngleTol",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @HOBSAngleTol.setter
    def HOBSAngleTol(self, newVal:typing.Any) -> None:
        """The closure high off boresight angle tolerance."""
        return self._intf.set_property(IAgAvtrBasicManeuverStrategyRelativeCourse._metadata, IAgAvtrBasicManeuverStrategyRelativeCourse._set_HOBSAngleTol_metadata, newVal)

    _get_CompensateForCoriolisAccel_metadata = { "name" : "CompensateForCoriolisAccel",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def CompensateForCoriolisAccel(self) -> bool:
        """The option to compensate for the acceleration due to the Coriolis effect."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyRelativeCourse._metadata, IAgAvtrBasicManeuverStrategyRelativeCourse._get_CompensateForCoriolisAccel_metadata)

    _set_CompensateForCoriolisAccel_metadata = { "name" : "CompensateForCoriolisAccel",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @CompensateForCoriolisAccel.setter
    def CompensateForCoriolisAccel(self, newVal:bool) -> None:
        return self._intf.set_property(IAgAvtrBasicManeuverStrategyRelativeCourse._metadata, IAgAvtrBasicManeuverStrategyRelativeCourse._set_CompensateForCoriolisAccel_metadata, newVal)

    _get_PosVelStrategies_metadata = { "name" : "PosVelStrategies",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def PosVelStrategies(self) -> "IAgAvtrBasicManeuverTargetPosVel":
        """The position velocity strategies for Relative Course."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyRelativeCourse._metadata, IAgAvtrBasicManeuverStrategyRelativeCourse._get_PosVelStrategies_metadata)

    _CancelTgtPosVel_metadata = { "name" : "CancelTgtPosVel",
            "arg_types" : (),
            "marshallers" : () }
    def CancelTgtPosVel(self) -> None:
        """Cancel the position velocity strategies for Relative Course."""
        return self._intf.invoke(IAgAvtrBasicManeuverStrategyRelativeCourse._metadata, IAgAvtrBasicManeuverStrategyRelativeCourse._CancelTgtPosVel_metadata, )


agcls.AgClassCatalog.add_catalog_entry("{3b0436c1-b6c4-4623-aeeb-db55f1fce56f}", IAgAvtrBasicManeuverStrategyRelativeCourse)
agcls.AgTypeNameMap["IAgAvtrBasicManeuverStrategyRelativeCourse"] = IAgAvtrBasicManeuverStrategyRelativeCourse

class IAgAvtrBasicManeuverStrategyRendezvous(object):
    """Interface used to access options for a Rendezvous Formation Strategy of a Basic Maneuver Procedure."""
    _num_methods = 39
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{49b4a1d7-e2dd-4956-892e-e3d042b5c3ae}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_TargetName" : 1,
                             "set_TargetName" : 2,
                             "get_ValidTargetNames" : 3,
                             "get_TargetResolution" : 4,
                             "set_TargetResolution" : 5,
                             "get_UseCounterTurnLogic" : 6,
                             "set_UseCounterTurnLogic" : 7,
                             "get_EnableCollisionAvoidance" : 8,
                             "get_CPA" : 9,
                             "SetCPA" : 10,
                             "get_RelativeBearing" : 11,
                             "set_RelativeBearing" : 12,
                             "get_RelativeRange" : 13,
                             "set_RelativeRange" : 14,
                             "get_AltitudeSplit" : 15,
                             "set_AltitudeSplit" : 16,
                             "get_ManeuverFactor" : 17,
                             "set_ManeuverFactor" : 18,
                             "get_UsePerfModelLimits" : 19,
                             "set_UsePerfModelLimits" : 20,
                             "get_AltitudeRateControl" : 21,
                             "set_AltitudeRateControl" : 22,
                             "get_MinLoadFactorG" : 23,
                             "set_MinLoadFactorG" : 24,
                             "get_MaxLoadFactorG" : 25,
                             "set_MaxLoadFactorG" : 26,
                             "get_MaxSpeedAdvantage" : 27,
                             "set_MaxSpeedAdvantage" : 28,
                             "get_AirspeedControlMode" : 29,
                             "set_AirspeedControlMode" : 30,
                             "get_AccelDecelG" : 31,
                             "set_AccelDecelG" : 32,
                             "get_UseSeparateAirspeedControl" : 33,
                             "get_AirspeedFactor" : 34,
                             "SetAirspeedFactor" : 35,
                             "get_StopCondition" : 36,
                             "set_StopCondition" : 37,
                             "get_PosVelStrategies" : 38,
                             "CancelTgtPosVel" : 39, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrBasicManeuverStrategyRendezvous._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrBasicManeuverStrategyRendezvous from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrBasicManeuverStrategyRendezvous.__dict__ and type(IAgAvtrBasicManeuverStrategyRendezvous.__dict__[attrname]) == property:
            return IAgAvtrBasicManeuverStrategyRendezvous.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrBasicManeuverStrategyRendezvous.")
    
    _get_TargetName_metadata = { "name" : "TargetName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def TargetName(self) -> str:
        """The target name."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyRendezvous._metadata, IAgAvtrBasicManeuverStrategyRendezvous._get_TargetName_metadata)

    _set_TargetName_metadata = { "name" : "TargetName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @TargetName.setter
    def TargetName(self, newVal:str) -> None:
        """The target name."""
        return self._intf.set_property(IAgAvtrBasicManeuverStrategyRendezvous._metadata, IAgAvtrBasicManeuverStrategyRendezvous._set_TargetName_metadata, newVal)

    _get_ValidTargetNames_metadata = { "name" : "ValidTargetNames",
            "arg_types" : (POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg,) }
    @property
    def ValidTargetNames(self) -> list:
        """Returns the valid target names."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyRendezvous._metadata, IAgAvtrBasicManeuverStrategyRendezvous._get_ValidTargetNames_metadata)

    _get_TargetResolution_metadata = { "name" : "TargetResolution",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def TargetResolution(self) -> float:
        """The target position/velocity sampling resolution."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyRendezvous._metadata, IAgAvtrBasicManeuverStrategyRendezvous._get_TargetResolution_metadata)

    _set_TargetResolution_metadata = { "name" : "TargetResolution",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @TargetResolution.setter
    def TargetResolution(self, newVal:float) -> None:
        """The target position/velocity sampling resolution."""
        return self._intf.set_property(IAgAvtrBasicManeuverStrategyRendezvous._metadata, IAgAvtrBasicManeuverStrategyRendezvous._set_TargetResolution_metadata, newVal)

    _get_UseCounterTurnLogic_metadata = { "name" : "UseCounterTurnLogic",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def UseCounterTurnLogic(self) -> bool:
        """The option to improve performance when flying with a target on a straight and level flight path."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyRendezvous._metadata, IAgAvtrBasicManeuverStrategyRendezvous._get_UseCounterTurnLogic_metadata)

    _set_UseCounterTurnLogic_metadata = { "name" : "UseCounterTurnLogic",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @UseCounterTurnLogic.setter
    def UseCounterTurnLogic(self, newVal:bool) -> None:
        """The option to improve performance when flying with a target on a straight and level flight path."""
        return self._intf.set_property(IAgAvtrBasicManeuverStrategyRendezvous._metadata, IAgAvtrBasicManeuverStrategyRendezvous._set_UseCounterTurnLogic_metadata, newVal)

    _get_EnableCollisionAvoidance_metadata = { "name" : "EnableCollisionAvoidance",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def EnableCollisionAvoidance(self) -> bool:
        """The option to enable collision avoidance."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyRendezvous._metadata, IAgAvtrBasicManeuverStrategyRendezvous._get_EnableCollisionAvoidance_metadata)

    _get_CPA_metadata = { "name" : "CPA",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def CPA(self) -> float:
        """The minimum distance between this aircraft and the target aircraft."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyRendezvous._metadata, IAgAvtrBasicManeuverStrategyRendezvous._get_CPA_metadata)

    _SetCPA_metadata = { "name" : "SetCPA",
            "arg_types" : (agcom.VARIANT_BOOL, agcom.DOUBLE,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg, agmarshall.DOUBLE_arg,) }
    def SetCPA(self, enable:bool, cPA:float) -> None:
        """Set whether to enable collision avoidance and the corresponding minimum distance between this aircraft and the target aircraft."""
        return self._intf.invoke(IAgAvtrBasicManeuverStrategyRendezvous._metadata, IAgAvtrBasicManeuverStrategyRendezvous._SetCPA_metadata, enable, cPA)

    _get_RelativeBearing_metadata = { "name" : "RelativeBearing",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def RelativeBearing(self) -> typing.Any:
        """The bearing relative to the target the aircraft will achieve and maintain."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyRendezvous._metadata, IAgAvtrBasicManeuverStrategyRendezvous._get_RelativeBearing_metadata)

    _set_RelativeBearing_metadata = { "name" : "RelativeBearing",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @RelativeBearing.setter
    def RelativeBearing(self, newVal:typing.Any) -> None:
        """The bearing relative to the target the aircraft will achieve and maintain."""
        return self._intf.set_property(IAgAvtrBasicManeuverStrategyRendezvous._metadata, IAgAvtrBasicManeuverStrategyRendezvous._set_RelativeBearing_metadata, newVal)

    _get_RelativeRange_metadata = { "name" : "RelativeRange",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def RelativeRange(self) -> float:
        """The range to the target the aircraft will achieve and maintain."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyRendezvous._metadata, IAgAvtrBasicManeuverStrategyRendezvous._get_RelativeRange_metadata)

    _set_RelativeRange_metadata = { "name" : "RelativeRange",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @RelativeRange.setter
    def RelativeRange(self, newVal:float) -> None:
        """The range to the target the aircraft will achieve and maintain."""
        return self._intf.set_property(IAgAvtrBasicManeuverStrategyRendezvous._metadata, IAgAvtrBasicManeuverStrategyRendezvous._set_RelativeRange_metadata, newVal)

    _get_AltitudeSplit_metadata = { "name" : "AltitudeSplit",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def AltitudeSplit(self) -> float:
        """The altitude difference between the aircraft and target."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyRendezvous._metadata, IAgAvtrBasicManeuverStrategyRendezvous._get_AltitudeSplit_metadata)

    _set_AltitudeSplit_metadata = { "name" : "AltitudeSplit",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @AltitudeSplit.setter
    def AltitudeSplit(self, newVal:float) -> None:
        """The altitude difference between the aircraft and target."""
        return self._intf.set_property(IAgAvtrBasicManeuverStrategyRendezvous._metadata, IAgAvtrBasicManeuverStrategyRendezvous._set_AltitudeSplit_metadata, newVal)

    _get_ManeuverFactor_metadata = { "name" : "ManeuverFactor",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def ManeuverFactor(self) -> float:
        """A dimensionless factor that determines how tightly or gently the aircraft will maneuver."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyRendezvous._metadata, IAgAvtrBasicManeuverStrategyRendezvous._get_ManeuverFactor_metadata)

    _set_ManeuverFactor_metadata = { "name" : "ManeuverFactor",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @ManeuverFactor.setter
    def ManeuverFactor(self, newVal:float) -> None:
        """A dimensionless factor that determines how tightly or gently the aircraft will maneuver."""
        return self._intf.set_property(IAgAvtrBasicManeuverStrategyRendezvous._metadata, IAgAvtrBasicManeuverStrategyRendezvous._set_ManeuverFactor_metadata, newVal)

    _get_UsePerfModelLimits_metadata = { "name" : "UsePerfModelLimits",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def UsePerfModelLimits(self) -> bool:
        """The option to derive the control limits of the aircraft from the applicable performance model."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyRendezvous._metadata, IAgAvtrBasicManeuverStrategyRendezvous._get_UsePerfModelLimits_metadata)

    _set_UsePerfModelLimits_metadata = { "name" : "UsePerfModelLimits",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @UsePerfModelLimits.setter
    def UsePerfModelLimits(self, newVal:bool) -> None:
        """The option to derive the control limits of the aircraft from the applicable performance model."""
        return self._intf.set_property(IAgAvtrBasicManeuverStrategyRendezvous._metadata, IAgAvtrBasicManeuverStrategyRendezvous._set_UsePerfModelLimits_metadata, newVal)

    _get_AltitudeRateControl_metadata = { "name" : "AltitudeRateControl",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def AltitudeRateControl(self) -> float:
        """The rate at which the aircraft will change altitude to achieve or maintain the ALtitude Split."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyRendezvous._metadata, IAgAvtrBasicManeuverStrategyRendezvous._get_AltitudeRateControl_metadata)

    _set_AltitudeRateControl_metadata = { "name" : "AltitudeRateControl",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @AltitudeRateControl.setter
    def AltitudeRateControl(self, newVal:float) -> None:
        """The rate at which the aircraft will change altitude to achieve or maintain the ALtitude Split."""
        return self._intf.set_property(IAgAvtrBasicManeuverStrategyRendezvous._metadata, IAgAvtrBasicManeuverStrategyRendezvous._set_AltitudeRateControl_metadata, newVal)

    _get_MinLoadFactorG_metadata = { "name" : "MinLoadFactorG",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def MinLoadFactorG(self) -> float:
        """The minimum load factor the aircraft can bear while maneuvering in formation."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyRendezvous._metadata, IAgAvtrBasicManeuverStrategyRendezvous._get_MinLoadFactorG_metadata)

    _set_MinLoadFactorG_metadata = { "name" : "MinLoadFactorG",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @MinLoadFactorG.setter
    def MinLoadFactorG(self, newVal:float) -> None:
        """The minimum load factor the aircraft can bear while maneuvering in formation."""
        return self._intf.set_property(IAgAvtrBasicManeuverStrategyRendezvous._metadata, IAgAvtrBasicManeuverStrategyRendezvous._set_MinLoadFactorG_metadata, newVal)

    _get_MaxLoadFactorG_metadata = { "name" : "MaxLoadFactorG",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def MaxLoadFactorG(self) -> float:
        """The maximum load factor the aircraft can bear while maneuvering in formation."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyRendezvous._metadata, IAgAvtrBasicManeuverStrategyRendezvous._get_MaxLoadFactorG_metadata)

    _set_MaxLoadFactorG_metadata = { "name" : "MaxLoadFactorG",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @MaxLoadFactorG.setter
    def MaxLoadFactorG(self, newVal:float) -> None:
        """The maximum load factor the aircraft can bear while maneuvering in formation."""
        return self._intf.set_property(IAgAvtrBasicManeuverStrategyRendezvous._metadata, IAgAvtrBasicManeuverStrategyRendezvous._set_MaxLoadFactorG_metadata, newVal)

    _get_MaxSpeedAdvantage_metadata = { "name" : "MaxSpeedAdvantage",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def MaxSpeedAdvantage(self) -> float:
        """The limit to the airspeed difference between the aircraft and target."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyRendezvous._metadata, IAgAvtrBasicManeuverStrategyRendezvous._get_MaxSpeedAdvantage_metadata)

    _set_MaxSpeedAdvantage_metadata = { "name" : "MaxSpeedAdvantage",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @MaxSpeedAdvantage.setter
    def MaxSpeedAdvantage(self, newVal:float) -> None:
        """The limit to the airspeed difference between the aircraft and target."""
        return self._intf.set_property(IAgAvtrBasicManeuverStrategyRendezvous._metadata, IAgAvtrBasicManeuverStrategyRendezvous._set_MaxSpeedAdvantage_metadata, newVal)

    _get_AirspeedControlMode_metadata = { "name" : "AirspeedControlMode",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrAccelPerfModelOverride),) }
    @property
    def AirspeedControlMode(self) -> "AgEAvtrAccelPerfModelOverride":
        """The method to define the aircraft's acceleration performance in formation."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyRendezvous._metadata, IAgAvtrBasicManeuverStrategyRendezvous._get_AirspeedControlMode_metadata)

    _set_AirspeedControlMode_metadata = { "name" : "AirspeedControlMode",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrAccelPerfModelOverride),) }
    @AirspeedControlMode.setter
    def AirspeedControlMode(self, newVal:"AgEAvtrAccelPerfModelOverride") -> None:
        """The method to define the aircraft's acceleration performance in formation."""
        return self._intf.set_property(IAgAvtrBasicManeuverStrategyRendezvous._metadata, IAgAvtrBasicManeuverStrategyRendezvous._set_AirspeedControlMode_metadata, newVal)

    _get_AccelDecelG_metadata = { "name" : "AccelDecelG",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def AccelDecelG(self) -> float:
        """The aircraft's specified acceleration rate for an airspeed control mode set to override."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyRendezvous._metadata, IAgAvtrBasicManeuverStrategyRendezvous._get_AccelDecelG_metadata)

    _set_AccelDecelG_metadata = { "name" : "AccelDecelG",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @AccelDecelG.setter
    def AccelDecelG(self, newVal:float) -> None:
        """The aircraft's specified acceleration rate for an airspeed control mode set to override."""
        return self._intf.set_property(IAgAvtrBasicManeuverStrategyRendezvous._metadata, IAgAvtrBasicManeuverStrategyRendezvous._set_AccelDecelG_metadata, newVal)

    _get_UseSeparateAirspeedControl_metadata = { "name" : "UseSeparateAirspeedControl",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def UseSeparateAirspeedControl(self) -> bool:
        """The option to control how fine the control is over the airspeed adjustments in formation flight."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyRendezvous._metadata, IAgAvtrBasicManeuverStrategyRendezvous._get_UseSeparateAirspeedControl_metadata)

    _get_AirspeedFactor_metadata = { "name" : "AirspeedFactor",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def AirspeedFactor(self) -> float:
        """A dimensionless factor defining how fine the control is over airspeed adjustments in formation flight."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyRendezvous._metadata, IAgAvtrBasicManeuverStrategyRendezvous._get_AirspeedFactor_metadata)

    _SetAirspeedFactor_metadata = { "name" : "SetAirspeedFactor",
            "arg_types" : (agcom.VARIANT_BOOL, agcom.DOUBLE,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg, agmarshall.DOUBLE_arg,) }
    def SetAirspeedFactor(self, enable:bool, airspeedFactor:float) -> None:
        """Set whether to enable the option to control how fine the control is and the corresponding dimensionless factor."""
        return self._intf.invoke(IAgAvtrBasicManeuverStrategyRendezvous._metadata, IAgAvtrBasicManeuverStrategyRendezvous._SetAirspeedFactor_metadata, enable, airspeedFactor)

    _get_StopCondition_metadata = { "name" : "StopCondition",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrRendezvousStopCondition),) }
    @property
    def StopCondition(self) -> "AgEAvtrRendezvousStopCondition":
        """The stopping condition for the maneuver."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyRendezvous._metadata, IAgAvtrBasicManeuverStrategyRendezvous._get_StopCondition_metadata)

    _set_StopCondition_metadata = { "name" : "StopCondition",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrRendezvousStopCondition),) }
    @StopCondition.setter
    def StopCondition(self, newVal:"AgEAvtrRendezvousStopCondition") -> None:
        """The stopping condition for the maneuver."""
        return self._intf.set_property(IAgAvtrBasicManeuverStrategyRendezvous._metadata, IAgAvtrBasicManeuverStrategyRendezvous._set_StopCondition_metadata, newVal)

    _get_PosVelStrategies_metadata = { "name" : "PosVelStrategies",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def PosVelStrategies(self) -> "IAgAvtrBasicManeuverTargetPosVel":
        """The position velocity strategies for Rendezvous."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyRendezvous._metadata, IAgAvtrBasicManeuverStrategyRendezvous._get_PosVelStrategies_metadata)

    _CancelTgtPosVel_metadata = { "name" : "CancelTgtPosVel",
            "arg_types" : (),
            "marshallers" : () }
    def CancelTgtPosVel(self) -> None:
        """Cancel the position velocity strategies for Rendezvous."""
        return self._intf.invoke(IAgAvtrBasicManeuverStrategyRendezvous._metadata, IAgAvtrBasicManeuverStrategyRendezvous._CancelTgtPosVel_metadata, )


agcls.AgClassCatalog.add_catalog_entry("{49b4a1d7-e2dd-4956-892e-e3d042b5c3ae}", IAgAvtrBasicManeuverStrategyRendezvous)
agcls.AgTypeNameMap["IAgAvtrBasicManeuverStrategyRendezvous"] = IAgAvtrBasicManeuverStrategyRendezvous

class IAgAvtrBasicManeuverStrategyStationkeeping(object):
    """Interface used to access options for a Stationkeeping Strategy of a Basic Maneuver Procedure."""
    _num_methods = 38
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{b6ab25a8-fcef-49c4-a804-c55471f61f76}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_TargetName" : 1,
                             "set_TargetName" : 2,
                             "get_ValidTargetNames" : 3,
                             "get_TargetResolution" : 4,
                             "set_TargetResolution" : 5,
                             "get_MaxTargetSpeedFraction" : 6,
                             "set_MaxTargetSpeedFraction" : 7,
                             "get_RelBearing" : 8,
                             "set_RelBearing" : 9,
                             "get_RelRange" : 10,
                             "set_RelRange" : 11,
                             "get_DesiredRadius" : 12,
                             "set_DesiredRadius" : 13,
                             "get_TurnDirection" : 14,
                             "set_TurnDirection" : 15,
                             "get_ManeuverFactor" : 16,
                             "set_ManeuverFactor" : 17,
                             "get_StopCondition" : 18,
                             "set_StopCondition" : 19,
                             "get_UseRelativeCourse" : 20,
                             "set_UseRelativeCourse" : 21,
                             "get_StopCourse" : 22,
                             "set_StopCourse" : 23,
                             "get_StopAfterTurnCount" : 24,
                             "set_StopAfterTurnCount" : 25,
                             "get_StopAfterDuration" : 26,
                             "set_StopAfterDuration" : 27,
                             "get_StopAfterTime" : 28,
                             "set_StopAfterTime" : 29,
                             "get_ControlLimitMode" : 30,
                             "get_ControlLimitTurnRadius" : 31,
                             "get_ControlLimitTurnRate" : 32,
                             "get_ControlLimitHorizAccel" : 33,
                             "SetControlLimit" : 34,
                             "get_CompensateForCoriolisAccel" : 35,
                             "set_CompensateForCoriolisAccel" : 36,
                             "get_PosVelStrategies" : 37,
                             "CancelTgtPosVel" : 38, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrBasicManeuverStrategyStationkeeping._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrBasicManeuverStrategyStationkeeping from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrBasicManeuverStrategyStationkeeping.__dict__ and type(IAgAvtrBasicManeuverStrategyStationkeeping.__dict__[attrname]) == property:
            return IAgAvtrBasicManeuverStrategyStationkeeping.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrBasicManeuverStrategyStationkeeping.")
    
    _get_TargetName_metadata = { "name" : "TargetName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def TargetName(self) -> str:
        """The target name."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyStationkeeping._metadata, IAgAvtrBasicManeuverStrategyStationkeeping._get_TargetName_metadata)

    _set_TargetName_metadata = { "name" : "TargetName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @TargetName.setter
    def TargetName(self, newVal:str) -> None:
        """The target name."""
        return self._intf.set_property(IAgAvtrBasicManeuverStrategyStationkeeping._metadata, IAgAvtrBasicManeuverStrategyStationkeeping._set_TargetName_metadata, newVal)

    _get_ValidTargetNames_metadata = { "name" : "ValidTargetNames",
            "arg_types" : (POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg,) }
    @property
    def ValidTargetNames(self) -> list:
        """Returns the valid target names."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyStationkeeping._metadata, IAgAvtrBasicManeuverStrategyStationkeeping._get_ValidTargetNames_metadata)

    _get_TargetResolution_metadata = { "name" : "TargetResolution",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def TargetResolution(self) -> float:
        """The target position/velocity sampling resolution."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyStationkeeping._metadata, IAgAvtrBasicManeuverStrategyStationkeeping._get_TargetResolution_metadata)

    _set_TargetResolution_metadata = { "name" : "TargetResolution",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @TargetResolution.setter
    def TargetResolution(self, newVal:float) -> None:
        """The target position/velocity sampling resolution."""
        return self._intf.set_property(IAgAvtrBasicManeuverStrategyStationkeeping._metadata, IAgAvtrBasicManeuverStrategyStationkeeping._set_TargetResolution_metadata, newVal)

    _get_MaxTargetSpeedFraction_metadata = { "name" : "MaxTargetSpeedFraction",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def MaxTargetSpeedFraction(self) -> float:
        """The maximum speed relative to the target."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyStationkeeping._metadata, IAgAvtrBasicManeuverStrategyStationkeeping._get_MaxTargetSpeedFraction_metadata)

    _set_MaxTargetSpeedFraction_metadata = { "name" : "MaxTargetSpeedFraction",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @MaxTargetSpeedFraction.setter
    def MaxTargetSpeedFraction(self, newVal:float) -> None:
        """The maximum speed relative to the target."""
        return self._intf.set_property(IAgAvtrBasicManeuverStrategyStationkeeping._metadata, IAgAvtrBasicManeuverStrategyStationkeeping._set_MaxTargetSpeedFraction_metadata, newVal)

    _get_RelBearing_metadata = { "name" : "RelBearing",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def RelBearing(self) -> typing.Any:
        """The bearing relative to the target that the aircraft will hold."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyStationkeeping._metadata, IAgAvtrBasicManeuverStrategyStationkeeping._get_RelBearing_metadata)

    _set_RelBearing_metadata = { "name" : "RelBearing",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @RelBearing.setter
    def RelBearing(self, newVal:typing.Any) -> None:
        """The bearing relative to the target that the aircraft will hold."""
        return self._intf.set_property(IAgAvtrBasicManeuverStrategyStationkeeping._metadata, IAgAvtrBasicManeuverStrategyStationkeeping._set_RelBearing_metadata, newVal)

    _get_RelRange_metadata = { "name" : "RelRange",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def RelRange(self) -> float:
        """The range from the target where the aircraft will hold."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyStationkeeping._metadata, IAgAvtrBasicManeuverStrategyStationkeeping._get_RelRange_metadata)

    _set_RelRange_metadata = { "name" : "RelRange",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @RelRange.setter
    def RelRange(self, newVal:float) -> None:
        """The range from the target where the aircraft will hold."""
        return self._intf.set_property(IAgAvtrBasicManeuverStrategyStationkeeping._metadata, IAgAvtrBasicManeuverStrategyStationkeeping._set_RelRange_metadata, newVal)

    _get_DesiredRadius_metadata = { "name" : "DesiredRadius",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def DesiredRadius(self) -> float:
        """The goal radius of the holding circle."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyStationkeeping._metadata, IAgAvtrBasicManeuverStrategyStationkeeping._get_DesiredRadius_metadata)

    _set_DesiredRadius_metadata = { "name" : "DesiredRadius",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @DesiredRadius.setter
    def DesiredRadius(self, newVal:float) -> None:
        """The goal radius of the holding circle."""
        return self._intf.set_property(IAgAvtrBasicManeuverStrategyStationkeeping._metadata, IAgAvtrBasicManeuverStrategyStationkeeping._set_DesiredRadius_metadata, newVal)

    _get_TurnDirection_metadata = { "name" : "TurnDirection",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrTurnDirection),) }
    @property
    def TurnDirection(self) -> "AgEAvtrTurnDirection":
        """Define if the aircraft turns left or right into the holding circle."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyStationkeeping._metadata, IAgAvtrBasicManeuverStrategyStationkeeping._get_TurnDirection_metadata)

    _set_TurnDirection_metadata = { "name" : "TurnDirection",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrTurnDirection),) }
    @TurnDirection.setter
    def TurnDirection(self, newVal:"AgEAvtrTurnDirection") -> None:
        """Define if the aircraft turns left or right into the holding circle."""
        return self._intf.set_property(IAgAvtrBasicManeuverStrategyStationkeeping._metadata, IAgAvtrBasicManeuverStrategyStationkeeping._set_TurnDirection_metadata, newVal)

    _get_ManeuverFactor_metadata = { "name" : "ManeuverFactor",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def ManeuverFactor(self) -> float:
        """A dimensionless factor that determines how tightly or gently the aircraft will maneuver."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyStationkeeping._metadata, IAgAvtrBasicManeuverStrategyStationkeeping._get_ManeuverFactor_metadata)

    _set_ManeuverFactor_metadata = { "name" : "ManeuverFactor",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @ManeuverFactor.setter
    def ManeuverFactor(self, newVal:float) -> None:
        """A dimensionless factor that determines how tightly or gently the aircraft will maneuver."""
        return self._intf.set_property(IAgAvtrBasicManeuverStrategyStationkeeping._metadata, IAgAvtrBasicManeuverStrategyStationkeeping._set_ManeuverFactor_metadata, newVal)

    _get_StopCondition_metadata = { "name" : "StopCondition",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrStationkeepingStopCondition),) }
    @property
    def StopCondition(self) -> "AgEAvtrStationkeepingStopCondition":
        """The stopping condition for the maneuver."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyStationkeeping._metadata, IAgAvtrBasicManeuverStrategyStationkeeping._get_StopCondition_metadata)

    _set_StopCondition_metadata = { "name" : "StopCondition",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrStationkeepingStopCondition),) }
    @StopCondition.setter
    def StopCondition(self, newVal:"AgEAvtrStationkeepingStopCondition") -> None:
        """The stopping condition for the maneuver."""
        return self._intf.set_property(IAgAvtrBasicManeuverStrategyStationkeeping._metadata, IAgAvtrBasicManeuverStrategyStationkeeping._set_StopCondition_metadata, newVal)

    _get_UseRelativeCourse_metadata = { "name" : "UseRelativeCourse",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def UseRelativeCourse(self) -> bool:
        """Option to use a relative course as opposed to an absolute course."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyStationkeeping._metadata, IAgAvtrBasicManeuverStrategyStationkeeping._get_UseRelativeCourse_metadata)

    _set_UseRelativeCourse_metadata = { "name" : "UseRelativeCourse",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @UseRelativeCourse.setter
    def UseRelativeCourse(self, newVal:bool) -> None:
        """Option to use a relative course as opposed to an absolute course."""
        return self._intf.set_property(IAgAvtrBasicManeuverStrategyStationkeeping._metadata, IAgAvtrBasicManeuverStrategyStationkeeping._set_UseRelativeCourse_metadata, newVal)

    _get_StopCourse_metadata = { "name" : "StopCourse",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def StopCourse(self) -> typing.Any:
        """The course stop condition."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyStationkeeping._metadata, IAgAvtrBasicManeuverStrategyStationkeeping._get_StopCourse_metadata)

    _set_StopCourse_metadata = { "name" : "StopCourse",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @StopCourse.setter
    def StopCourse(self, newVal:typing.Any) -> None:
        """The course stop condition."""
        return self._intf.set_property(IAgAvtrBasicManeuverStrategyStationkeeping._metadata, IAgAvtrBasicManeuverStrategyStationkeeping._set_StopCourse_metadata, newVal)

    _get_StopAfterTurnCount_metadata = { "name" : "StopAfterTurnCount",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.LONG_arg,) }
    @property
    def StopAfterTurnCount(self) -> int:
        """The number of turns stop condition."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyStationkeeping._metadata, IAgAvtrBasicManeuverStrategyStationkeeping._get_StopAfterTurnCount_metadata)

    _set_StopAfterTurnCount_metadata = { "name" : "StopAfterTurnCount",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.LONG_arg,) }
    @StopAfterTurnCount.setter
    def StopAfterTurnCount(self, newVal:int) -> None:
        """The number of turns stop condition."""
        return self._intf.set_property(IAgAvtrBasicManeuverStrategyStationkeeping._metadata, IAgAvtrBasicManeuverStrategyStationkeeping._set_StopAfterTurnCount_metadata, newVal)

    _get_StopAfterDuration_metadata = { "name" : "StopAfterDuration",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def StopAfterDuration(self) -> float:
        """The duration stop condition."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyStationkeeping._metadata, IAgAvtrBasicManeuverStrategyStationkeeping._get_StopAfterDuration_metadata)

    _set_StopAfterDuration_metadata = { "name" : "StopAfterDuration",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @StopAfterDuration.setter
    def StopAfterDuration(self, newVal:float) -> None:
        """The duration stop condition."""
        return self._intf.set_property(IAgAvtrBasicManeuverStrategyStationkeeping._metadata, IAgAvtrBasicManeuverStrategyStationkeeping._set_StopAfterDuration_metadata, newVal)

    _get_StopAfterTime_metadata = { "name" : "StopAfterTime",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def StopAfterTime(self) -> typing.Any:
        """The time stop condition."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyStationkeeping._metadata, IAgAvtrBasicManeuverStrategyStationkeeping._get_StopAfterTime_metadata)

    _set_StopAfterTime_metadata = { "name" : "StopAfterTime",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @StopAfterTime.setter
    def StopAfterTime(self, newVal:typing.Any) -> None:
        """The time stop condition."""
        return self._intf.set_property(IAgAvtrBasicManeuverStrategyStationkeeping._metadata, IAgAvtrBasicManeuverStrategyStationkeeping._set_StopAfterTime_metadata, newVal)

    _get_ControlLimitMode_metadata = { "name" : "ControlLimitMode",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrBasicManeuverStrategyNavControlLimit),) }
    @property
    def ControlLimitMode(self) -> "AgEAvtrBasicManeuverStrategyNavControlLimit":
        """Get the method to define the control limits of the aircraft during the maneuver."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyStationkeeping._metadata, IAgAvtrBasicManeuverStrategyStationkeeping._get_ControlLimitMode_metadata)

    _get_ControlLimitTurnRadius_metadata = { "name" : "ControlLimitTurnRadius",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def ControlLimitTurnRadius(self) -> float:
        """The specified turn radius for a control limit mode of specify min turn radius."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyStationkeeping._metadata, IAgAvtrBasicManeuverStrategyStationkeeping._get_ControlLimitTurnRadius_metadata)

    _get_ControlLimitTurnRate_metadata = { "name" : "ControlLimitTurnRate",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def ControlLimitTurnRate(self) -> typing.Any:
        """The specified turn rate for a control limit mode of specify max turn rate."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyStationkeeping._metadata, IAgAvtrBasicManeuverStrategyStationkeeping._get_ControlLimitTurnRate_metadata)

    _get_ControlLimitHorizAccel_metadata = { "name" : "ControlLimitHorizAccel",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def ControlLimitHorizAccel(self) -> float:
        """The specified horizontal acceleration for a control limit mode of specify max horiz accel."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyStationkeeping._metadata, IAgAvtrBasicManeuverStrategyStationkeeping._get_ControlLimitHorizAccel_metadata)

    _SetControlLimit_metadata = { "name" : "SetControlLimit",
            "arg_types" : (agcom.LONG, agcom.DOUBLE,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrBasicManeuverStrategyNavControlLimit), agmarshall.DOUBLE_arg,) }
    def SetControlLimit(self, controlLimitMode:"AgEAvtrBasicManeuverStrategyNavControlLimit", controlLimitValue:float) -> None:
        """Set the method and corresponding value to define the control limits of the aircraft during the maneuver."""
        return self._intf.invoke(IAgAvtrBasicManeuverStrategyStationkeeping._metadata, IAgAvtrBasicManeuverStrategyStationkeeping._SetControlLimit_metadata, controlLimitMode, controlLimitValue)

    _get_CompensateForCoriolisAccel_metadata = { "name" : "CompensateForCoriolisAccel",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def CompensateForCoriolisAccel(self) -> bool:
        """The option to compensate for the acceleration due to the Coriolis effect."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyStationkeeping._metadata, IAgAvtrBasicManeuverStrategyStationkeeping._get_CompensateForCoriolisAccel_metadata)

    _set_CompensateForCoriolisAccel_metadata = { "name" : "CompensateForCoriolisAccel",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @CompensateForCoriolisAccel.setter
    def CompensateForCoriolisAccel(self, newVal:bool) -> None:
        return self._intf.set_property(IAgAvtrBasicManeuverStrategyStationkeeping._metadata, IAgAvtrBasicManeuverStrategyStationkeeping._set_CompensateForCoriolisAccel_metadata, newVal)

    _get_PosVelStrategies_metadata = { "name" : "PosVelStrategies",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def PosVelStrategies(self) -> "IAgAvtrBasicManeuverTargetPosVel":
        """The position velocity strategies for Station Keeping."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyStationkeeping._metadata, IAgAvtrBasicManeuverStrategyStationkeeping._get_PosVelStrategies_metadata)

    _CancelTgtPosVel_metadata = { "name" : "CancelTgtPosVel",
            "arg_types" : (),
            "marshallers" : () }
    def CancelTgtPosVel(self) -> None:
        """Cancel the position velocity strategies for Station Keeping."""
        return self._intf.invoke(IAgAvtrBasicManeuverStrategyStationkeeping._metadata, IAgAvtrBasicManeuverStrategyStationkeeping._CancelTgtPosVel_metadata, )


agcls.AgClassCatalog.add_catalog_entry("{b6ab25a8-fcef-49c4-a804-c55471f61f76}", IAgAvtrBasicManeuverStrategyStationkeeping)
agcls.AgTypeNameMap["IAgAvtrBasicManeuverStrategyStationkeeping"] = IAgAvtrBasicManeuverStrategyStationkeeping

class IAgAvtrBasicManeuverStrategyRelativeFPA(object):
    """Interface used to access options for the Relative Flight Path Angle Strategy of a Basic Maneuver Procedure."""
    _num_methods = 24
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{d2066432-a9ef-48f0-aeb2-e75f6b4323e2}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_FPA" : 1,
                             "set_FPA" : 2,
                             "get_AnchorAltOffset" : 3,
                             "set_AnchorAltOffset" : 4,
                             "get_ManeuverFactor" : 5,
                             "set_ManeuverFactor" : 6,
                             "get_ControlLimitMode" : 7,
                             "get_ControlLimitPitchRate" : 8,
                             "SetControlLimit" : 9,
                             "get_AirspeedOptions" : 10,
                             "get_MinAbsoluteAltitude" : 11,
                             "get_UseMinAbsoluteAltitude" : 12,
                             "SetMinAbsoluteAltitude" : 13,
                             "get_MaxAbsoluteAltitude" : 14,
                             "get_UseMaxAbsoluteAltitude" : 15,
                             "SetMaxAbsoluteAltitude" : 16,
                             "get_MinAltitudeRelAnchor" : 17,
                             "get_UseMinAltitudeRelAnchor" : 18,
                             "SetMinAltitudeRelAnchor" : 19,
                             "get_MaxAltitudeRelAnchor" : 20,
                             "get_UseMaxAltitudeRelAnchor" : 21,
                             "SetMaxAltitudeRelAnchor" : 22,
                             "get_CompensateForCoriolisAccel" : 23,
                             "set_CompensateForCoriolisAccel" : 24, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrBasicManeuverStrategyRelativeFPA._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrBasicManeuverStrategyRelativeFPA from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrBasicManeuverStrategyRelativeFPA.__dict__ and type(IAgAvtrBasicManeuverStrategyRelativeFPA.__dict__[attrname]) == property:
            return IAgAvtrBasicManeuverStrategyRelativeFPA.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrBasicManeuverStrategyRelativeFPA.")
    
    _get_FPA_metadata = { "name" : "FPA",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def FPA(self) -> typing.Any:
        """The flight path angle for the maneuver."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyRelativeFPA._metadata, IAgAvtrBasicManeuverStrategyRelativeFPA._get_FPA_metadata)

    _set_FPA_metadata = { "name" : "FPA",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @FPA.setter
    def FPA(self, newVal:typing.Any) -> None:
        """The flight path angle for the maneuver."""
        return self._intf.set_property(IAgAvtrBasicManeuverStrategyRelativeFPA._metadata, IAgAvtrBasicManeuverStrategyRelativeFPA._set_FPA_metadata, newVal)

    _get_AnchorAltOffset_metadata = { "name" : "AnchorAltOffset",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def AnchorAltOffset(self) -> float:
        """The goal height above or below the target."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyRelativeFPA._metadata, IAgAvtrBasicManeuverStrategyRelativeFPA._get_AnchorAltOffset_metadata)

    _set_AnchorAltOffset_metadata = { "name" : "AnchorAltOffset",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @AnchorAltOffset.setter
    def AnchorAltOffset(self, newVal:float) -> None:
        """The goal height above or below the target."""
        return self._intf.set_property(IAgAvtrBasicManeuverStrategyRelativeFPA._metadata, IAgAvtrBasicManeuverStrategyRelativeFPA._set_AnchorAltOffset_metadata, newVal)

    _get_ManeuverFactor_metadata = { "name" : "ManeuverFactor",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def ManeuverFactor(self) -> float:
        """A dimensionless factor that determines how tightly or gently the aircraft will maneuver."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyRelativeFPA._metadata, IAgAvtrBasicManeuverStrategyRelativeFPA._get_ManeuverFactor_metadata)

    _set_ManeuverFactor_metadata = { "name" : "ManeuverFactor",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @ManeuverFactor.setter
    def ManeuverFactor(self, newVal:float) -> None:
        """A dimensionless factor that determines how tightly or gently the aircraft will maneuver."""
        return self._intf.set_property(IAgAvtrBasicManeuverStrategyRelativeFPA._metadata, IAgAvtrBasicManeuverStrategyRelativeFPA._set_ManeuverFactor_metadata, newVal)

    _get_ControlLimitMode_metadata = { "name" : "ControlLimitMode",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrProfileControlLimit),) }
    @property
    def ControlLimitMode(self) -> "AgEAvtrProfileControlLimit":
        """Get the method to define the control limits of the aircraft during the maneuver."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyRelativeFPA._metadata, IAgAvtrBasicManeuverStrategyRelativeFPA._get_ControlLimitMode_metadata)

    _get_ControlLimitPitchRate_metadata = { "name" : "ControlLimitPitchRate",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def ControlLimitPitchRate(self) -> typing.Any:
        """The specified pitch rate for a control limit mode of specify max pitch rate."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyRelativeFPA._metadata, IAgAvtrBasicManeuverStrategyRelativeFPA._get_ControlLimitPitchRate_metadata)

    _SetControlLimit_metadata = { "name" : "SetControlLimit",
            "arg_types" : (agcom.LONG, agcom.VARIANT,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrProfileControlLimit), agmarshall.VARIANT_arg,) }
    def SetControlLimit(self, controlLimitMode:"AgEAvtrProfileControlLimit", controlLimitValue:typing.Any) -> None:
        """Set the method and corresponding value to define the control limits of the aircraft during the maneuver."""
        return self._intf.invoke(IAgAvtrBasicManeuverStrategyRelativeFPA._metadata, IAgAvtrBasicManeuverStrategyRelativeFPA._SetControlLimit_metadata, controlLimitMode, controlLimitValue)

    _get_AirspeedOptions_metadata = { "name" : "AirspeedOptions",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def AirspeedOptions(self) -> "IAgAvtrBasicManeuverAirspeedOptions":
        """Get the airspeed options."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyRelativeFPA._metadata, IAgAvtrBasicManeuverStrategyRelativeFPA._get_AirspeedOptions_metadata)

    _get_MinAbsoluteAltitude_metadata = { "name" : "MinAbsoluteAltitude",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def MinAbsoluteAltitude(self) -> float:
        """The minimum absolute altitude."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyRelativeFPA._metadata, IAgAvtrBasicManeuverStrategyRelativeFPA._get_MinAbsoluteAltitude_metadata)

    _get_UseMinAbsoluteAltitude_metadata = { "name" : "UseMinAbsoluteAltitude",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def UseMinAbsoluteAltitude(self) -> bool:
        """The option to specify a minimum absolute altitude."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyRelativeFPA._metadata, IAgAvtrBasicManeuverStrategyRelativeFPA._get_UseMinAbsoluteAltitude_metadata)

    _SetMinAbsoluteAltitude_metadata = { "name" : "SetMinAbsoluteAltitude",
            "arg_types" : (agcom.VARIANT_BOOL, agcom.DOUBLE,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg, agmarshall.DOUBLE_arg,) }
    def SetMinAbsoluteAltitude(self, enable:bool, altitude:float) -> None:
        """Set whether to enable and a value for the minimum absolute altitude."""
        return self._intf.invoke(IAgAvtrBasicManeuverStrategyRelativeFPA._metadata, IAgAvtrBasicManeuverStrategyRelativeFPA._SetMinAbsoluteAltitude_metadata, enable, altitude)

    _get_MaxAbsoluteAltitude_metadata = { "name" : "MaxAbsoluteAltitude",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def MaxAbsoluteAltitude(self) -> float:
        """The maximum absolute altitude."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyRelativeFPA._metadata, IAgAvtrBasicManeuverStrategyRelativeFPA._get_MaxAbsoluteAltitude_metadata)

    _get_UseMaxAbsoluteAltitude_metadata = { "name" : "UseMaxAbsoluteAltitude",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def UseMaxAbsoluteAltitude(self) -> bool:
        """The option to specify a maximum absolute altitude."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyRelativeFPA._metadata, IAgAvtrBasicManeuverStrategyRelativeFPA._get_UseMaxAbsoluteAltitude_metadata)

    _SetMaxAbsoluteAltitude_metadata = { "name" : "SetMaxAbsoluteAltitude",
            "arg_types" : (agcom.VARIANT_BOOL, agcom.DOUBLE,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg, agmarshall.DOUBLE_arg,) }
    def SetMaxAbsoluteAltitude(self, enable:bool, altitude:float) -> None:
        """Set whether to enable and a value for the maximum absolute altitude."""
        return self._intf.invoke(IAgAvtrBasicManeuverStrategyRelativeFPA._metadata, IAgAvtrBasicManeuverStrategyRelativeFPA._SetMaxAbsoluteAltitude_metadata, enable, altitude)

    _get_MinAltitudeRelAnchor_metadata = { "name" : "MinAltitudeRelAnchor",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def MinAltitudeRelAnchor(self) -> float:
        """The minimum altitude offset from the target."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyRelativeFPA._metadata, IAgAvtrBasicManeuverStrategyRelativeFPA._get_MinAltitudeRelAnchor_metadata)

    _get_UseMinAltitudeRelAnchor_metadata = { "name" : "UseMinAltitudeRelAnchor",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def UseMinAltitudeRelAnchor(self) -> bool:
        """The option to specify a minimum altitude offset from the target."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyRelativeFPA._metadata, IAgAvtrBasicManeuverStrategyRelativeFPA._get_UseMinAltitudeRelAnchor_metadata)

    _SetMinAltitudeRelAnchor_metadata = { "name" : "SetMinAltitudeRelAnchor",
            "arg_types" : (agcom.VARIANT_BOOL, agcom.DOUBLE,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg, agmarshall.DOUBLE_arg,) }
    def SetMinAltitudeRelAnchor(self, enable:bool, altitude:float) -> None:
        """Set whether to enable and a value for the minimum altitude offset from the target."""
        return self._intf.invoke(IAgAvtrBasicManeuverStrategyRelativeFPA._metadata, IAgAvtrBasicManeuverStrategyRelativeFPA._SetMinAltitudeRelAnchor_metadata, enable, altitude)

    _get_MaxAltitudeRelAnchor_metadata = { "name" : "MaxAltitudeRelAnchor",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def MaxAltitudeRelAnchor(self) -> float:
        """The maximum altitude offset from the target."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyRelativeFPA._metadata, IAgAvtrBasicManeuverStrategyRelativeFPA._get_MaxAltitudeRelAnchor_metadata)

    _get_UseMaxAltitudeRelAnchor_metadata = { "name" : "UseMaxAltitudeRelAnchor",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def UseMaxAltitudeRelAnchor(self) -> bool:
        """The option to specify a maximum altitude offset from the target."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyRelativeFPA._metadata, IAgAvtrBasicManeuverStrategyRelativeFPA._get_UseMaxAltitudeRelAnchor_metadata)

    _SetMaxAltitudeRelAnchor_metadata = { "name" : "SetMaxAltitudeRelAnchor",
            "arg_types" : (agcom.VARIANT_BOOL, agcom.DOUBLE,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg, agmarshall.DOUBLE_arg,) }
    def SetMaxAltitudeRelAnchor(self, enable:bool, altitude:float) -> None:
        """Set whether to enable and a value for the maximum altitude offset from the target."""
        return self._intf.invoke(IAgAvtrBasicManeuverStrategyRelativeFPA._metadata, IAgAvtrBasicManeuverStrategyRelativeFPA._SetMaxAltitudeRelAnchor_metadata, enable, altitude)

    _get_CompensateForCoriolisAccel_metadata = { "name" : "CompensateForCoriolisAccel",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def CompensateForCoriolisAccel(self) -> bool:
        """The option to compensate for the acceleration due to the Coriolis effect."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyRelativeFPA._metadata, IAgAvtrBasicManeuverStrategyRelativeFPA._get_CompensateForCoriolisAccel_metadata)

    _set_CompensateForCoriolisAccel_metadata = { "name" : "CompensateForCoriolisAccel",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @CompensateForCoriolisAccel.setter
    def CompensateForCoriolisAccel(self, newVal:bool) -> None:
        return self._intf.set_property(IAgAvtrBasicManeuverStrategyRelativeFPA._metadata, IAgAvtrBasicManeuverStrategyRelativeFPA._set_CompensateForCoriolisAccel_metadata, newVal)


agcls.AgClassCatalog.add_catalog_entry("{d2066432-a9ef-48f0-aeb2-e75f6b4323e2}", IAgAvtrBasicManeuverStrategyRelativeFPA)
agcls.AgTypeNameMap["IAgAvtrBasicManeuverStrategyRelativeFPA"] = IAgAvtrBasicManeuverStrategyRelativeFPA

class IAgAvtrBasicManeuverStrategyRelSpeedAlt(object):
    """Interface used to access options for a Relative Speed/Altitude Strategy of a Basic Maneuver Procedure."""
    _num_methods = 38
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{1770600b-1329-4efb-8836-200a0d8ed802}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_TargetName" : 1,
                             "set_TargetName" : 2,
                             "get_ValidTargetNames" : 3,
                             "get_TargetResolution" : 4,
                             "set_TargetResolution" : 5,
                             "get_RelativeAltitudeMode" : 6,
                             "set_RelativeAltitudeMode" : 7,
                             "get_ElevationAngle" : 8,
                             "set_ElevationAngle" : 9,
                             "get_AltitudeOffset" : 10,
                             "set_AltitudeOffset" : 11,
                             "get_AirspeedOffsetType" : 12,
                             "get_AirspeedOffset" : 13,
                             "SetAirspeedOffset" : 14,
                             "get_UseTgtAspectForAirspeed" : 15,
                             "set_UseTgtAspectForAirspeed" : 16,
                             "get_UsePerfModelLimits" : 17,
                             "set_UsePerfModelLimits" : 18,
                             "get_RangeForEqualSpeed" : 19,
                             "set_RangeForEqualSpeed" : 20,
                             "get_RangeToTransitionSpeed" : 21,
                             "set_RangeToTransitionSpeed" : 22,
                             "get_MinAltitude" : 23,
                             "set_MinAltitude" : 24,
                             "get_MaxAltitude" : 25,
                             "set_MaxAltitude" : 26,
                             "get_MinAirspeed" : 27,
                             "get_MinAirspeedType" : 28,
                             "SetMinAirspeed" : 29,
                             "get_MaxAirspeed" : 30,
                             "get_MaxAirspeedType" : 31,
                             "SetMaxAirspeed" : 32,
                             "get_StopCondition" : 33,
                             "set_StopCondition" : 34,
                             "get_CompensateForCoriolisAccel" : 35,
                             "set_CompensateForCoriolisAccel" : 36,
                             "get_PosVelStrategies" : 37,
                             "CancelTgtPosVel" : 38, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrBasicManeuverStrategyRelSpeedAlt._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrBasicManeuverStrategyRelSpeedAlt from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrBasicManeuverStrategyRelSpeedAlt.__dict__ and type(IAgAvtrBasicManeuverStrategyRelSpeedAlt.__dict__[attrname]) == property:
            return IAgAvtrBasicManeuverStrategyRelSpeedAlt.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrBasicManeuverStrategyRelSpeedAlt.")
    
    _get_TargetName_metadata = { "name" : "TargetName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def TargetName(self) -> str:
        """The target name."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyRelSpeedAlt._metadata, IAgAvtrBasicManeuverStrategyRelSpeedAlt._get_TargetName_metadata)

    _set_TargetName_metadata = { "name" : "TargetName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @TargetName.setter
    def TargetName(self, newVal:str) -> None:
        """The target name."""
        return self._intf.set_property(IAgAvtrBasicManeuverStrategyRelSpeedAlt._metadata, IAgAvtrBasicManeuverStrategyRelSpeedAlt._set_TargetName_metadata, newVal)

    _get_ValidTargetNames_metadata = { "name" : "ValidTargetNames",
            "arg_types" : (POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg,) }
    @property
    def ValidTargetNames(self) -> list:
        """Returns the valid target names."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyRelSpeedAlt._metadata, IAgAvtrBasicManeuverStrategyRelSpeedAlt._get_ValidTargetNames_metadata)

    _get_TargetResolution_metadata = { "name" : "TargetResolution",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def TargetResolution(self) -> float:
        """The target position/velocity sampling resolution."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyRelSpeedAlt._metadata, IAgAvtrBasicManeuverStrategyRelSpeedAlt._get_TargetResolution_metadata)

    _set_TargetResolution_metadata = { "name" : "TargetResolution",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @TargetResolution.setter
    def TargetResolution(self, newVal:float) -> None:
        """The target position/velocity sampling resolution."""
        return self._intf.set_property(IAgAvtrBasicManeuverStrategyRelSpeedAlt._metadata, IAgAvtrBasicManeuverStrategyRelSpeedAlt._set_TargetResolution_metadata, newVal)

    _get_RelativeAltitudeMode_metadata = { "name" : "RelativeAltitudeMode",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrRelativeAltitudeMode),) }
    @property
    def RelativeAltitudeMode(self) -> "AgEAvtrRelativeAltitudeMode":
        """The mode to define the hold objective for the maneuver."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyRelSpeedAlt._metadata, IAgAvtrBasicManeuverStrategyRelSpeedAlt._get_RelativeAltitudeMode_metadata)

    _set_RelativeAltitudeMode_metadata = { "name" : "RelativeAltitudeMode",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrRelativeAltitudeMode),) }
    @RelativeAltitudeMode.setter
    def RelativeAltitudeMode(self, newVal:"AgEAvtrRelativeAltitudeMode") -> None:
        """The mode to define the hold objective for the maneuver."""
        return self._intf.set_property(IAgAvtrBasicManeuverStrategyRelSpeedAlt._metadata, IAgAvtrBasicManeuverStrategyRelSpeedAlt._set_RelativeAltitudeMode_metadata, newVal)

    _get_ElevationAngle_metadata = { "name" : "ElevationAngle",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def ElevationAngle(self) -> typing.Any:
        """The goal elevation angle from the target to the aircraft."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyRelSpeedAlt._metadata, IAgAvtrBasicManeuverStrategyRelSpeedAlt._get_ElevationAngle_metadata)

    _set_ElevationAngle_metadata = { "name" : "ElevationAngle",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @ElevationAngle.setter
    def ElevationAngle(self, newVal:typing.Any) -> None:
        """The goal elevation angle from the target to the aircraft."""
        return self._intf.set_property(IAgAvtrBasicManeuverStrategyRelSpeedAlt._metadata, IAgAvtrBasicManeuverStrategyRelSpeedAlt._set_ElevationAngle_metadata, newVal)

    _get_AltitudeOffset_metadata = { "name" : "AltitudeOffset",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def AltitudeOffset(self) -> float:
        """The goal altitude offset from the target to the aircraft."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyRelSpeedAlt._metadata, IAgAvtrBasicManeuverStrategyRelSpeedAlt._get_AltitudeOffset_metadata)

    _set_AltitudeOffset_metadata = { "name" : "AltitudeOffset",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @AltitudeOffset.setter
    def AltitudeOffset(self, newVal:float) -> None:
        """The goal altitude offset from the target to the aircraft."""
        return self._intf.set_property(IAgAvtrBasicManeuverStrategyRelSpeedAlt._metadata, IAgAvtrBasicManeuverStrategyRelSpeedAlt._set_AltitudeOffset_metadata, newVal)

    _get_AirspeedOffsetType_metadata = { "name" : "AirspeedOffsetType",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrAirspeedType),) }
    @property
    def AirspeedOffsetType(self) -> "AgEAvtrAirspeedType":
        """The airspeed type."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyRelSpeedAlt._metadata, IAgAvtrBasicManeuverStrategyRelSpeedAlt._get_AirspeedOffsetType_metadata)

    _get_AirspeedOffset_metadata = { "name" : "AirspeedOffset",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def AirspeedOffset(self) -> float:
        """The airspeed offset from the target."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyRelSpeedAlt._metadata, IAgAvtrBasicManeuverStrategyRelSpeedAlt._get_AirspeedOffset_metadata)

    _SetAirspeedOffset_metadata = { "name" : "SetAirspeedOffset",
            "arg_types" : (agcom.LONG, agcom.DOUBLE,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrAirspeedType), agmarshall.DOUBLE_arg,) }
    def SetAirspeedOffset(self, airspeedType:"AgEAvtrAirspeedType", airspeed:float) -> None:
        """Set the airspeed offset value and type."""
        return self._intf.invoke(IAgAvtrBasicManeuverStrategyRelSpeedAlt._metadata, IAgAvtrBasicManeuverStrategyRelSpeedAlt._SetAirspeedOffset_metadata, airspeedType, airspeed)

    _get_UseTgtAspectForAirspeed_metadata = { "name" : "UseTgtAspectForAirspeed",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def UseTgtAspectForAirspeed(self) -> bool:
        """The option to use the target aspect to compute the enforced airspeed difference."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyRelSpeedAlt._metadata, IAgAvtrBasicManeuverStrategyRelSpeedAlt._get_UseTgtAspectForAirspeed_metadata)

    _set_UseTgtAspectForAirspeed_metadata = { "name" : "UseTgtAspectForAirspeed",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @UseTgtAspectForAirspeed.setter
    def UseTgtAspectForAirspeed(self, newVal:bool) -> None:
        """The option to use the target aspect to compute the enforced airspeed difference."""
        return self._intf.set_property(IAgAvtrBasicManeuverStrategyRelSpeedAlt._metadata, IAgAvtrBasicManeuverStrategyRelSpeedAlt._set_UseTgtAspectForAirspeed_metadata, newVal)

    _get_UsePerfModelLimits_metadata = { "name" : "UsePerfModelLimits",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def UsePerfModelLimits(self) -> bool:
        """The option to use the performance model limits for the aircraft."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyRelSpeedAlt._metadata, IAgAvtrBasicManeuverStrategyRelSpeedAlt._get_UsePerfModelLimits_metadata)

    _set_UsePerfModelLimits_metadata = { "name" : "UsePerfModelLimits",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @UsePerfModelLimits.setter
    def UsePerfModelLimits(self, newVal:bool) -> None:
        """The option to use the performance model limits for the aircraft."""
        return self._intf.set_property(IAgAvtrBasicManeuverStrategyRelSpeedAlt._metadata, IAgAvtrBasicManeuverStrategyRelSpeedAlt._set_UsePerfModelLimits_metadata, newVal)

    _get_RangeForEqualSpeed_metadata = { "name" : "RangeForEqualSpeed",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def RangeForEqualSpeed(self) -> float:
        """The range at which the aircraft will achieve the same airspeed as the target."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyRelSpeedAlt._metadata, IAgAvtrBasicManeuverStrategyRelSpeedAlt._get_RangeForEqualSpeed_metadata)

    _set_RangeForEqualSpeed_metadata = { "name" : "RangeForEqualSpeed",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @RangeForEqualSpeed.setter
    def RangeForEqualSpeed(self, newVal:float) -> None:
        """The range at which the aircraft will achieve the same airspeed as the target."""
        return self._intf.set_property(IAgAvtrBasicManeuverStrategyRelSpeedAlt._metadata, IAgAvtrBasicManeuverStrategyRelSpeedAlt._set_RangeForEqualSpeed_metadata, newVal)

    _get_RangeToTransitionSpeed_metadata = { "name" : "RangeToTransitionSpeed",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def RangeToTransitionSpeed(self) -> float:
        """The range at which the aircraft will begin to slow down to match the speed of the target."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyRelSpeedAlt._metadata, IAgAvtrBasicManeuverStrategyRelSpeedAlt._get_RangeToTransitionSpeed_metadata)

    _set_RangeToTransitionSpeed_metadata = { "name" : "RangeToTransitionSpeed",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @RangeToTransitionSpeed.setter
    def RangeToTransitionSpeed(self, newVal:float) -> None:
        """The range at which the aircraft will begin to slow down to match the speed of the target."""
        return self._intf.set_property(IAgAvtrBasicManeuverStrategyRelSpeedAlt._metadata, IAgAvtrBasicManeuverStrategyRelSpeedAlt._set_RangeToTransitionSpeed_metadata, newVal)

    _get_MinAltitude_metadata = { "name" : "MinAltitude",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def MinAltitude(self) -> float:
        """The minimum altitude boundary for the maneuver."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyRelSpeedAlt._metadata, IAgAvtrBasicManeuverStrategyRelSpeedAlt._get_MinAltitude_metadata)

    _set_MinAltitude_metadata = { "name" : "MinAltitude",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @MinAltitude.setter
    def MinAltitude(self, newVal:float) -> None:
        """The minimum altitude boundary for the maneuver."""
        return self._intf.set_property(IAgAvtrBasicManeuverStrategyRelSpeedAlt._metadata, IAgAvtrBasicManeuverStrategyRelSpeedAlt._set_MinAltitude_metadata, newVal)

    _get_MaxAltitude_metadata = { "name" : "MaxAltitude",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def MaxAltitude(self) -> float:
        """The maximum altitude boundary for the maneuver."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyRelSpeedAlt._metadata, IAgAvtrBasicManeuverStrategyRelSpeedAlt._get_MaxAltitude_metadata)

    _set_MaxAltitude_metadata = { "name" : "MaxAltitude",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @MaxAltitude.setter
    def MaxAltitude(self, newVal:float) -> None:
        """The maximum altitude boundary for the maneuver."""
        return self._intf.set_property(IAgAvtrBasicManeuverStrategyRelSpeedAlt._metadata, IAgAvtrBasicManeuverStrategyRelSpeedAlt._set_MaxAltitude_metadata, newVal)

    _get_MinAirspeed_metadata = { "name" : "MinAirspeed",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def MinAirspeed(self) -> float:
        """The minimum airspeed limit for the maneuver."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyRelSpeedAlt._metadata, IAgAvtrBasicManeuverStrategyRelSpeedAlt._get_MinAirspeed_metadata)

    _get_MinAirspeedType_metadata = { "name" : "MinAirspeedType",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrAirspeedType),) }
    @property
    def MinAirspeedType(self) -> "AgEAvtrAirspeedType":
        """The airspeed type."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyRelSpeedAlt._metadata, IAgAvtrBasicManeuverStrategyRelSpeedAlt._get_MinAirspeedType_metadata)

    _SetMinAirspeed_metadata = { "name" : "SetMinAirspeed",
            "arg_types" : (agcom.LONG, agcom.DOUBLE,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrAirspeedType), agmarshall.DOUBLE_arg,) }
    def SetMinAirspeed(self, airspeedType:"AgEAvtrAirspeedType", airspeed:float) -> None:
        """Set the minimum airspeed value and type."""
        return self._intf.invoke(IAgAvtrBasicManeuverStrategyRelSpeedAlt._metadata, IAgAvtrBasicManeuverStrategyRelSpeedAlt._SetMinAirspeed_metadata, airspeedType, airspeed)

    _get_MaxAirspeed_metadata = { "name" : "MaxAirspeed",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def MaxAirspeed(self) -> float:
        """The maximum airspeed limit for the maneuver."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyRelSpeedAlt._metadata, IAgAvtrBasicManeuverStrategyRelSpeedAlt._get_MaxAirspeed_metadata)

    _get_MaxAirspeedType_metadata = { "name" : "MaxAirspeedType",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrAirspeedType),) }
    @property
    def MaxAirspeedType(self) -> "AgEAvtrAirspeedType":
        """The airspeed type."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyRelSpeedAlt._metadata, IAgAvtrBasicManeuverStrategyRelSpeedAlt._get_MaxAirspeedType_metadata)

    _SetMaxAirspeed_metadata = { "name" : "SetMaxAirspeed",
            "arg_types" : (agcom.LONG, agcom.DOUBLE,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrAirspeedType), agmarshall.DOUBLE_arg,) }
    def SetMaxAirspeed(self, airspeedType:"AgEAvtrAirspeedType", airspeed:float) -> None:
        """Set the maximum airspeed value and type."""
        return self._intf.invoke(IAgAvtrBasicManeuverStrategyRelSpeedAlt._metadata, IAgAvtrBasicManeuverStrategyRelSpeedAlt._SetMaxAirspeed_metadata, airspeedType, airspeed)

    _get_StopCondition_metadata = { "name" : "StopCondition",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrRelSpeedAltStopCondition),) }
    @property
    def StopCondition(self) -> "AgEAvtrRelSpeedAltStopCondition":
        """The stopping condition for the maneuver."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyRelSpeedAlt._metadata, IAgAvtrBasicManeuverStrategyRelSpeedAlt._get_StopCondition_metadata)

    _set_StopCondition_metadata = { "name" : "StopCondition",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrRelSpeedAltStopCondition),) }
    @StopCondition.setter
    def StopCondition(self, newVal:"AgEAvtrRelSpeedAltStopCondition") -> None:
        """The stopping condition for the maneuver."""
        return self._intf.set_property(IAgAvtrBasicManeuverStrategyRelSpeedAlt._metadata, IAgAvtrBasicManeuverStrategyRelSpeedAlt._set_StopCondition_metadata, newVal)

    _get_CompensateForCoriolisAccel_metadata = { "name" : "CompensateForCoriolisAccel",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def CompensateForCoriolisAccel(self) -> bool:
        """The option to compensate for the acceleration due to the Coriolis effect."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyRelSpeedAlt._metadata, IAgAvtrBasicManeuverStrategyRelSpeedAlt._get_CompensateForCoriolisAccel_metadata)

    _set_CompensateForCoriolisAccel_metadata = { "name" : "CompensateForCoriolisAccel",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @CompensateForCoriolisAccel.setter
    def CompensateForCoriolisAccel(self, newVal:bool) -> None:
        return self._intf.set_property(IAgAvtrBasicManeuverStrategyRelSpeedAlt._metadata, IAgAvtrBasicManeuverStrategyRelSpeedAlt._set_CompensateForCoriolisAccel_metadata, newVal)

    _get_PosVelStrategies_metadata = { "name" : "PosVelStrategies",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def PosVelStrategies(self) -> "IAgAvtrBasicManeuverTargetPosVel":
        """The position velocity strategies for Rel Speed Alt."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyRelSpeedAlt._metadata, IAgAvtrBasicManeuverStrategyRelSpeedAlt._get_PosVelStrategies_metadata)

    _CancelTgtPosVel_metadata = { "name" : "CancelTgtPosVel",
            "arg_types" : (),
            "marshallers" : () }
    def CancelTgtPosVel(self) -> None:
        """Cancel the position velocity strategies for Rel Speed Alt."""
        return self._intf.invoke(IAgAvtrBasicManeuverStrategyRelSpeedAlt._metadata, IAgAvtrBasicManeuverStrategyRelSpeedAlt._CancelTgtPosVel_metadata, )


agcls.AgClassCatalog.add_catalog_entry("{1770600b-1329-4efb-8836-200a0d8ed802}", IAgAvtrBasicManeuverStrategyRelSpeedAlt)
agcls.AgTypeNameMap["IAgAvtrBasicManeuverStrategyRelSpeedAlt"] = IAgAvtrBasicManeuverStrategyRelSpeedAlt

class IAgAvtrBasicManeuverStrategyBezier(object):
    """Interface used to access options for a Bezier Strategy of a Basic Maneuver Procedure."""
    _num_methods = 22
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{fe815e13-cfab-4da7-8beb-9d8efd93d9f3}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_ReferenceFrame" : 1,
                             "set_ReferenceFrame" : 2,
                             "get_Altitude" : 3,
                             "set_Altitude" : 4,
                             "get_Downrange" : 5,
                             "set_Downrange" : 6,
                             "get_Airspeed" : 7,
                             "get_AirspeedType" : 8,
                             "SetAirspeed" : 9,
                             "get_VerticalVelocityMode" : 10,
                             "get_FlightPathAngle" : 11,
                             "get_AltitudeRate" : 12,
                             "SetVerticalVelocity" : 13,
                             "get_UseStopAtAltitudeRate" : 14,
                             "get_StopAltitudeRate" : 15,
                             "SetStopAltitudeRate" : 16,
                             "get_UseStopAtAirspeed" : 17,
                             "get_StopAirspeed" : 18,
                             "get_StopAirspeedType" : 19,
                             "SetStopAirspeed" : 20,
                             "get_CompensateForCoriolisAccel" : 21,
                             "set_CompensateForCoriolisAccel" : 22, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrBasicManeuverStrategyBezier._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrBasicManeuverStrategyBezier from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrBasicManeuverStrategyBezier.__dict__ and type(IAgAvtrBasicManeuverStrategyBezier.__dict__[attrname]) == property:
            return IAgAvtrBasicManeuverStrategyBezier.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrBasicManeuverStrategyBezier.")
    
    _get_ReferenceFrame_metadata = { "name" : "ReferenceFrame",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrBasicManeuverRefFrame),) }
    @property
    def ReferenceFrame(self) -> "AgEAvtrBasicManeuverRefFrame":
        """The reference frame the aircraft will use."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyBezier._metadata, IAgAvtrBasicManeuverStrategyBezier._get_ReferenceFrame_metadata)

    _set_ReferenceFrame_metadata = { "name" : "ReferenceFrame",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrBasicManeuverRefFrame),) }
    @ReferenceFrame.setter
    def ReferenceFrame(self, newVal:"AgEAvtrBasicManeuverRefFrame") -> None:
        """The reference frame the aircraft will use."""
        return self._intf.set_property(IAgAvtrBasicManeuverStrategyBezier._metadata, IAgAvtrBasicManeuverStrategyBezier._set_ReferenceFrame_metadata, newVal)

    _get_Altitude_metadata = { "name" : "Altitude",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def Altitude(self) -> float:
        """The aircraft's altitude."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyBezier._metadata, IAgAvtrBasicManeuverStrategyBezier._get_Altitude_metadata)

    _set_Altitude_metadata = { "name" : "Altitude",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @Altitude.setter
    def Altitude(self, newVal:float) -> None:
        """The aircraft's altitude."""
        return self._intf.set_property(IAgAvtrBasicManeuverStrategyBezier._metadata, IAgAvtrBasicManeuverStrategyBezier._set_Altitude_metadata, newVal)

    _get_Downrange_metadata = { "name" : "Downrange",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def Downrange(self) -> float:
        """The ground distance from the beginning of the maneuver."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyBezier._metadata, IAgAvtrBasicManeuverStrategyBezier._get_Downrange_metadata)

    _set_Downrange_metadata = { "name" : "Downrange",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @Downrange.setter
    def Downrange(self, newVal:float) -> None:
        """The ground distance from the beginning of the maneuver."""
        return self._intf.set_property(IAgAvtrBasicManeuverStrategyBezier._metadata, IAgAvtrBasicManeuverStrategyBezier._set_Downrange_metadata, newVal)

    _get_Airspeed_metadata = { "name" : "Airspeed",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def Airspeed(self) -> float:
        """The aircraft's airspeed."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyBezier._metadata, IAgAvtrBasicManeuverStrategyBezier._get_Airspeed_metadata)

    _get_AirspeedType_metadata = { "name" : "AirspeedType",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrAirspeedType),) }
    @property
    def AirspeedType(self) -> "AgEAvtrAirspeedType":
        """The airspeed type."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyBezier._metadata, IAgAvtrBasicManeuverStrategyBezier._get_AirspeedType_metadata)

    _SetAirspeed_metadata = { "name" : "SetAirspeed",
            "arg_types" : (agcom.LONG, agcom.DOUBLE,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrAirspeedType), agmarshall.DOUBLE_arg,) }
    def SetAirspeed(self, airspeedType:"AgEAvtrAirspeedType", airspeed:float) -> None:
        """Set the fly to airspeed value and type."""
        return self._intf.invoke(IAgAvtrBasicManeuverStrategyBezier._metadata, IAgAvtrBasicManeuverStrategyBezier._SetAirspeed_metadata, airspeedType, airspeed)

    _get_VerticalVelocityMode_metadata = { "name" : "VerticalVelocityMode",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrFlyToFlightPathAngleMode),) }
    @property
    def VerticalVelocityMode(self) -> "AgEAvtrFlyToFlightPathAngleMode":
        """The option to specify the flight path angle or the altitude rate."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyBezier._metadata, IAgAvtrBasicManeuverStrategyBezier._get_VerticalVelocityMode_metadata)

    _get_FlightPathAngle_metadata = { "name" : "FlightPathAngle",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def FlightPathAngle(self) -> typing.Any:
        """The initial pitch angle of the flight path."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyBezier._metadata, IAgAvtrBasicManeuverStrategyBezier._get_FlightPathAngle_metadata)

    _get_AltitudeRate_metadata = { "name" : "AltitudeRate",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def AltitudeRate(self) -> float:
        """The constant rate at which the aircraft will climb or descend."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyBezier._metadata, IAgAvtrBasicManeuverStrategyBezier._get_AltitudeRate_metadata)

    _SetVerticalVelocity_metadata = { "name" : "SetVerticalVelocity",
            "arg_types" : (agcom.LONG, agcom.VARIANT,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrFlyToFlightPathAngleMode), agmarshall.VARIANT_arg,) }
    def SetVerticalVelocity(self, mode:"AgEAvtrFlyToFlightPathAngleMode", value:typing.Any) -> None:
        """Set the flight path angle or altitude rate."""
        return self._intf.invoke(IAgAvtrBasicManeuverStrategyBezier._metadata, IAgAvtrBasicManeuverStrategyBezier._SetVerticalVelocity_metadata, mode, value)

    _get_UseStopAtAltitudeRate_metadata = { "name" : "UseStopAtAltitudeRate",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def UseStopAtAltitudeRate(self) -> bool:
        """The option to stop the maneuver if a specified altitude rate is achieved."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyBezier._metadata, IAgAvtrBasicManeuverStrategyBezier._get_UseStopAtAltitudeRate_metadata)

    _get_StopAltitudeRate_metadata = { "name" : "StopAltitudeRate",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def StopAltitudeRate(self) -> float:
        """The altitude rate stopping condition."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyBezier._metadata, IAgAvtrBasicManeuverStrategyBezier._get_StopAltitudeRate_metadata)

    _SetStopAltitudeRate_metadata = { "name" : "SetStopAltitudeRate",
            "arg_types" : (agcom.VARIANT_BOOL, agcom.DOUBLE,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg, agmarshall.DOUBLE_arg,) }
    def SetStopAltitudeRate(self, enable:bool, altitudeRate:float) -> None:
        """Set whether to enable the altitude rate stopping condition and the corresponding value."""
        return self._intf.invoke(IAgAvtrBasicManeuverStrategyBezier._metadata, IAgAvtrBasicManeuverStrategyBezier._SetStopAltitudeRate_metadata, enable, altitudeRate)

    _get_UseStopAtAirspeed_metadata = { "name" : "UseStopAtAirspeed",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def UseStopAtAirspeed(self) -> bool:
        """The option to stop the maneuver if a specified airspeed is achieved."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyBezier._metadata, IAgAvtrBasicManeuverStrategyBezier._get_UseStopAtAirspeed_metadata)

    _get_StopAirspeed_metadata = { "name" : "StopAirspeed",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def StopAirspeed(self) -> float:
        """The airspeed stopping condition."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyBezier._metadata, IAgAvtrBasicManeuverStrategyBezier._get_StopAirspeed_metadata)

    _get_StopAirspeedType_metadata = { "name" : "StopAirspeedType",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrAirspeedType),) }
    @property
    def StopAirspeedType(self) -> "AgEAvtrAirspeedType":
        """The airspeed type for the airspeed stopping condition."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyBezier._metadata, IAgAvtrBasicManeuverStrategyBezier._get_StopAirspeedType_metadata)

    _SetStopAirspeed_metadata = { "name" : "SetStopAirspeed",
            "arg_types" : (agcom.VARIANT_BOOL, agcom.LONG, agcom.DOUBLE,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg, agmarshall.AgEnum_arg(AgEAvtrAirspeedType), agmarshall.DOUBLE_arg,) }
    def SetStopAirspeed(self, enable:bool, airspeedType:"AgEAvtrAirspeedType", airspeed:float) -> None:
        """Set whether to enable the airspeed stopping condition and the corresponding value."""
        return self._intf.invoke(IAgAvtrBasicManeuverStrategyBezier._metadata, IAgAvtrBasicManeuverStrategyBezier._SetStopAirspeed_metadata, enable, airspeedType, airspeed)

    _get_CompensateForCoriolisAccel_metadata = { "name" : "CompensateForCoriolisAccel",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def CompensateForCoriolisAccel(self) -> bool:
        """The option to compensate for the acceleration due to the Coriolis effect."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyBezier._metadata, IAgAvtrBasicManeuverStrategyBezier._get_CompensateForCoriolisAccel_metadata)

    _set_CompensateForCoriolisAccel_metadata = { "name" : "CompensateForCoriolisAccel",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @CompensateForCoriolisAccel.setter
    def CompensateForCoriolisAccel(self, newVal:bool) -> None:
        return self._intf.set_property(IAgAvtrBasicManeuverStrategyBezier._metadata, IAgAvtrBasicManeuverStrategyBezier._set_CompensateForCoriolisAccel_metadata, newVal)


agcls.AgClassCatalog.add_catalog_entry("{fe815e13-cfab-4da7-8beb-9d8efd93d9f3}", IAgAvtrBasicManeuverStrategyBezier)
agcls.AgTypeNameMap["IAgAvtrBasicManeuverStrategyBezier"] = IAgAvtrBasicManeuverStrategyBezier

class IAgAvtrBasicManeuverStrategyPushPull(object):
    """Interface used to access options for a Push/Pull Strategy of a Basic Maneuver Procedure."""
    _num_methods = 27
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{8000621a-e9ce-4aa7-bf8e-565f579a4675}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_ReferenceFrame" : 1,
                             "set_ReferenceFrame" : 2,
                             "get_PushPull" : 3,
                             "set_PushPull" : 4,
                             "get_PushPullG" : 5,
                             "set_PushPullG" : 6,
                             "get_AccelMode" : 7,
                             "set_AccelMode" : 8,
                             "get_AccelDecelG" : 9,
                             "set_AccelDecelG" : 10,
                             "get_MaintainAirspeedType" : 11,
                             "set_MaintainAirspeedType" : 12,
                             "get_MaintainAirspeed" : 13,
                             "get_StopFlightPathAngle" : 14,
                             "set_StopFlightPathAngle" : 15,
                             "get_UseStopAtAltitude" : 16,
                             "get_StopAltitude" : 17,
                             "SetStopAltitude" : 18,
                             "get_UseStopAtAltitudeRate" : 19,
                             "get_StopAltitudeRate" : 20,
                             "SetStopAltitudeRate" : 21,
                             "get_UseStopAtAirspeed" : 22,
                             "get_StopAirspeed" : 23,
                             "get_StopAirspeedType" : 24,
                             "SetStopAirspeed" : 25,
                             "get_CompensateForCoriolisAccel" : 26,
                             "set_CompensateForCoriolisAccel" : 27, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrBasicManeuverStrategyPushPull._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrBasicManeuverStrategyPushPull from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrBasicManeuverStrategyPushPull.__dict__ and type(IAgAvtrBasicManeuverStrategyPushPull.__dict__[attrname]) == property:
            return IAgAvtrBasicManeuverStrategyPushPull.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrBasicManeuverStrategyPushPull.")
    
    _get_ReferenceFrame_metadata = { "name" : "ReferenceFrame",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrBasicManeuverRefFrame),) }
    @property
    def ReferenceFrame(self) -> "AgEAvtrBasicManeuverRefFrame":
        """The reference frame the aircraft will use."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyPushPull._metadata, IAgAvtrBasicManeuverStrategyPushPull._get_ReferenceFrame_metadata)

    _set_ReferenceFrame_metadata = { "name" : "ReferenceFrame",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrBasicManeuverRefFrame),) }
    @ReferenceFrame.setter
    def ReferenceFrame(self, newVal:"AgEAvtrBasicManeuverRefFrame") -> None:
        """The reference frame the aircraft will use."""
        return self._intf.set_property(IAgAvtrBasicManeuverStrategyPushPull._metadata, IAgAvtrBasicManeuverStrategyPushPull._set_ReferenceFrame_metadata, newVal)

    _get_PushPull_metadata = { "name" : "PushPull",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrPushPull),) }
    @property
    def PushPull(self) -> "AgEAvtrPushPull":
        """The option to push over or pull up."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyPushPull._metadata, IAgAvtrBasicManeuverStrategyPushPull._get_PushPull_metadata)

    _set_PushPull_metadata = { "name" : "PushPull",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrPushPull),) }
    @PushPull.setter
    def PushPull(self, newVal:"AgEAvtrPushPull") -> None:
        """The option to push over or pull up."""
        return self._intf.set_property(IAgAvtrBasicManeuverStrategyPushPull._metadata, IAgAvtrBasicManeuverStrategyPushPull._set_PushPull_metadata, newVal)

    _get_PushPullG_metadata = { "name" : "PushPullG",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def PushPullG(self) -> float:
        """The G force of the maneuver."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyPushPull._metadata, IAgAvtrBasicManeuverStrategyPushPull._get_PushPullG_metadata)

    _set_PushPullG_metadata = { "name" : "PushPullG",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @PushPullG.setter
    def PushPullG(self, newVal:float) -> None:
        """The G force of the maneuver."""
        return self._intf.set_property(IAgAvtrBasicManeuverStrategyPushPull._metadata, IAgAvtrBasicManeuverStrategyPushPull._set_PushPullG_metadata, newVal)

    _get_AccelMode_metadata = { "name" : "AccelMode",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrAccelMode),) }
    @property
    def AccelMode(self) -> "AgEAvtrAccelMode":
        """The option to accelerate, decelerate, or maintain the current airspeed."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyPushPull._metadata, IAgAvtrBasicManeuverStrategyPushPull._get_AccelMode_metadata)

    _set_AccelMode_metadata = { "name" : "AccelMode",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrAccelMode),) }
    @AccelMode.setter
    def AccelMode(self, newVal:"AgEAvtrAccelMode") -> None:
        """The option to accelerate, decelerate, or maintain the current airspeed."""
        return self._intf.set_property(IAgAvtrBasicManeuverStrategyPushPull._metadata, IAgAvtrBasicManeuverStrategyPushPull._set_AccelMode_metadata, newVal)

    _get_AccelDecelG_metadata = { "name" : "AccelDecelG",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def AccelDecelG(self) -> float:
        """The specific G force rate to accelerate/decelerate at."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyPushPull._metadata, IAgAvtrBasicManeuverStrategyPushPull._get_AccelDecelG_metadata)

    _set_AccelDecelG_metadata = { "name" : "AccelDecelG",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @AccelDecelG.setter
    def AccelDecelG(self, newVal:float) -> None:
        """The specific G force rate to accelerate/decelerate at."""
        return self._intf.set_property(IAgAvtrBasicManeuverStrategyPushPull._metadata, IAgAvtrBasicManeuverStrategyPushPull._set_AccelDecelG_metadata, newVal)

    _get_MaintainAirspeedType_metadata = { "name" : "MaintainAirspeedType",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrAirspeedType),) }
    @property
    def MaintainAirspeedType(self) -> "AgEAvtrAirspeedType":
        """The airspeed type for the maintain airspeed."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyPushPull._metadata, IAgAvtrBasicManeuverStrategyPushPull._get_MaintainAirspeedType_metadata)

    _set_MaintainAirspeedType_metadata = { "name" : "MaintainAirspeedType",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrAirspeedType),) }
    @MaintainAirspeedType.setter
    def MaintainAirspeedType(self, newVal:"AgEAvtrAirspeedType") -> None:
        """The airspeed type for the maintain airspeed."""
        return self._intf.set_property(IAgAvtrBasicManeuverStrategyPushPull._metadata, IAgAvtrBasicManeuverStrategyPushPull._set_MaintainAirspeedType_metadata, newVal)

    _get_MaintainAirspeed_metadata = { "name" : "MaintainAirspeed",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def MaintainAirspeed(self) -> float:
        """The airspeed to maintain."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyPushPull._metadata, IAgAvtrBasicManeuverStrategyPushPull._get_MaintainAirspeed_metadata)

    _get_StopFlightPathAngle_metadata = { "name" : "StopFlightPathAngle",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def StopFlightPathAngle(self) -> typing.Any:
        """The flight path angle the maneuver will stop at if achieved."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyPushPull._metadata, IAgAvtrBasicManeuverStrategyPushPull._get_StopFlightPathAngle_metadata)

    _set_StopFlightPathAngle_metadata = { "name" : "StopFlightPathAngle",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @StopFlightPathAngle.setter
    def StopFlightPathAngle(self, newVal:typing.Any) -> None:
        """The flight path angle the maneuver will stop at if achieved."""
        return self._intf.set_property(IAgAvtrBasicManeuverStrategyPushPull._metadata, IAgAvtrBasicManeuverStrategyPushPull._set_StopFlightPathAngle_metadata, newVal)

    _get_UseStopAtAltitude_metadata = { "name" : "UseStopAtAltitude",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def UseStopAtAltitude(self) -> bool:
        """The option to stop the maneuver if a specified altitude is achieved."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyPushPull._metadata, IAgAvtrBasicManeuverStrategyPushPull._get_UseStopAtAltitude_metadata)

    _get_StopAltitude_metadata = { "name" : "StopAltitude",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def StopAltitude(self) -> float:
        """The altitude stopping condition"""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyPushPull._metadata, IAgAvtrBasicManeuverStrategyPushPull._get_StopAltitude_metadata)

    _SetStopAltitude_metadata = { "name" : "SetStopAltitude",
            "arg_types" : (agcom.VARIANT_BOOL, agcom.DOUBLE,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg, agmarshall.DOUBLE_arg,) }
    def SetStopAltitude(self, enable:bool, altitudeRate:float) -> None:
        """Set whether to enable the altitude stopping condition and the corresponding value."""
        return self._intf.invoke(IAgAvtrBasicManeuverStrategyPushPull._metadata, IAgAvtrBasicManeuverStrategyPushPull._SetStopAltitude_metadata, enable, altitudeRate)

    _get_UseStopAtAltitudeRate_metadata = { "name" : "UseStopAtAltitudeRate",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def UseStopAtAltitudeRate(self) -> bool:
        """The option to stop the maneuver if a specified altitude rate is achieved."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyPushPull._metadata, IAgAvtrBasicManeuverStrategyPushPull._get_UseStopAtAltitudeRate_metadata)

    _get_StopAltitudeRate_metadata = { "name" : "StopAltitudeRate",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def StopAltitudeRate(self) -> float:
        """The altitude rate stopping condition."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyPushPull._metadata, IAgAvtrBasicManeuverStrategyPushPull._get_StopAltitudeRate_metadata)

    _SetStopAltitudeRate_metadata = { "name" : "SetStopAltitudeRate",
            "arg_types" : (agcom.VARIANT_BOOL, agcom.DOUBLE,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg, agmarshall.DOUBLE_arg,) }
    def SetStopAltitudeRate(self, enable:bool, altitudeRate:float) -> None:
        """Set whether to enable the altitude rate stopping condition and the corresponding value."""
        return self._intf.invoke(IAgAvtrBasicManeuverStrategyPushPull._metadata, IAgAvtrBasicManeuverStrategyPushPull._SetStopAltitudeRate_metadata, enable, altitudeRate)

    _get_UseStopAtAirspeed_metadata = { "name" : "UseStopAtAirspeed",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def UseStopAtAirspeed(self) -> bool:
        """The option to stop the maneuver if a specified airspeed is achieved."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyPushPull._metadata, IAgAvtrBasicManeuverStrategyPushPull._get_UseStopAtAirspeed_metadata)

    _get_StopAirspeed_metadata = { "name" : "StopAirspeed",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def StopAirspeed(self) -> float:
        """The airspeed stopping condition."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyPushPull._metadata, IAgAvtrBasicManeuverStrategyPushPull._get_StopAirspeed_metadata)

    _get_StopAirspeedType_metadata = { "name" : "StopAirspeedType",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrAirspeedType),) }
    @property
    def StopAirspeedType(self) -> "AgEAvtrAirspeedType":
        """The airspeed type for the airspeed stopping condition."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyPushPull._metadata, IAgAvtrBasicManeuverStrategyPushPull._get_StopAirspeedType_metadata)

    _SetStopAirspeed_metadata = { "name" : "SetStopAirspeed",
            "arg_types" : (agcom.VARIANT_BOOL, agcom.LONG, agcom.DOUBLE,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg, agmarshall.AgEnum_arg(AgEAvtrAirspeedType), agmarshall.DOUBLE_arg,) }
    def SetStopAirspeed(self, enable:bool, airspeedType:"AgEAvtrAirspeedType", airspeed:float) -> None:
        """Set whether to enable the airspeed stopping condition and the corresponding value."""
        return self._intf.invoke(IAgAvtrBasicManeuverStrategyPushPull._metadata, IAgAvtrBasicManeuverStrategyPushPull._SetStopAirspeed_metadata, enable, airspeedType, airspeed)

    _get_CompensateForCoriolisAccel_metadata = { "name" : "CompensateForCoriolisAccel",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def CompensateForCoriolisAccel(self) -> bool:
        """The option to compensate for the acceleration due to the Coriolis effect."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyPushPull._metadata, IAgAvtrBasicManeuverStrategyPushPull._get_CompensateForCoriolisAccel_metadata)

    _set_CompensateForCoriolisAccel_metadata = { "name" : "CompensateForCoriolisAccel",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @CompensateForCoriolisAccel.setter
    def CompensateForCoriolisAccel(self, newVal:bool) -> None:
        return self._intf.set_property(IAgAvtrBasicManeuverStrategyPushPull._metadata, IAgAvtrBasicManeuverStrategyPushPull._set_CompensateForCoriolisAccel_metadata, newVal)


agcls.AgClassCatalog.add_catalog_entry("{8000621a-e9ce-4aa7-bf8e-565f579a4675}", IAgAvtrBasicManeuverStrategyPushPull)
agcls.AgTypeNameMap["IAgAvtrBasicManeuverStrategyPushPull"] = IAgAvtrBasicManeuverStrategyPushPull

class IAgAvtrBasicManeuverStrategyGlideProfile(object):
    """Interface used to access options for a Glide Profile Strategy of a Basic Maneuver Procedure."""
    _num_methods = 21
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{7c0a4dd8-59ed-403d-96bb-8f45d3e71ca6}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_HoldInitialAirspeed" : 1,
                             "set_HoldInitialAirspeed" : 2,
                             "get_Airspeed" : 3,
                             "get_AirspeedType" : 4,
                             "get_MinG" : 5,
                             "set_MinG" : 6,
                             "get_MaxG" : 7,
                             "set_MaxG" : 8,
                             "get_MaxSpeedLimits" : 9,
                             "set_MaxSpeedLimits" : 10,
                             "SetAirspeed" : 11,
                             "get_CompensateForCoriolisAccel" : 12,
                             "set_CompensateForCoriolisAccel" : 13,
                             "get_PoweredCruiseMode" : 14,
                             "set_PoweredCruiseMode" : 15,
                             "get_PoweredCruiseThrottle" : 16,
                             "set_PoweredCruiseThrottle" : 17,
                             "get_PoweredCruiseThrustModel" : 18,
                             "get_GlideSpeedControlMode" : 19,
                             "get_GlideSpeedControlAlt" : 20,
                             "SetGlideSpeedControlMode" : 21, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrBasicManeuverStrategyGlideProfile._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrBasicManeuverStrategyGlideProfile from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrBasicManeuverStrategyGlideProfile.__dict__ and type(IAgAvtrBasicManeuverStrategyGlideProfile.__dict__[attrname]) == property:
            return IAgAvtrBasicManeuverStrategyGlideProfile.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrBasicManeuverStrategyGlideProfile.")
    
    _get_HoldInitialAirspeed_metadata = { "name" : "HoldInitialAirspeed",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def HoldInitialAirspeed(self) -> bool:
        """Select whether to maintain the airspeed of the aircraft at the beginning of the procedure throughout the maneuver."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyGlideProfile._metadata, IAgAvtrBasicManeuverStrategyGlideProfile._get_HoldInitialAirspeed_metadata)

    _set_HoldInitialAirspeed_metadata = { "name" : "HoldInitialAirspeed",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @HoldInitialAirspeed.setter
    def HoldInitialAirspeed(self, pVal:bool) -> None:
        return self._intf.set_property(IAgAvtrBasicManeuverStrategyGlideProfile._metadata, IAgAvtrBasicManeuverStrategyGlideProfile._set_HoldInitialAirspeed_metadata, pVal)

    _get_Airspeed_metadata = { "name" : "Airspeed",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def Airspeed(self) -> float:
        """Get the airspeed the aircraft will attempt to achieve and maintain if the hold initial airspeed option is not enabled."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyGlideProfile._metadata, IAgAvtrBasicManeuverStrategyGlideProfile._get_Airspeed_metadata)

    _get_AirspeedType_metadata = { "name" : "AirspeedType",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrAirspeedType),) }
    @property
    def AirspeedType(self) -> "AgEAvtrAirspeedType":
        """Get the airspeed type."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyGlideProfile._metadata, IAgAvtrBasicManeuverStrategyGlideProfile._get_AirspeedType_metadata)

    _get_MinG_metadata = { "name" : "MinG",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def MinG(self) -> float:
        """The minimum load factor the aircraft can withstand."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyGlideProfile._metadata, IAgAvtrBasicManeuverStrategyGlideProfile._get_MinG_metadata)

    _set_MinG_metadata = { "name" : "MinG",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @MinG.setter
    def MinG(self, pVal:float) -> None:
        return self._intf.set_property(IAgAvtrBasicManeuverStrategyGlideProfile._metadata, IAgAvtrBasicManeuverStrategyGlideProfile._set_MinG_metadata, pVal)

    _get_MaxG_metadata = { "name" : "MaxG",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def MaxG(self) -> float:
        """The maximum load factor the aircraft can withstand."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyGlideProfile._metadata, IAgAvtrBasicManeuverStrategyGlideProfile._get_MaxG_metadata)

    _set_MaxG_metadata = { "name" : "MaxG",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @MaxG.setter
    def MaxG(self, pVal:float) -> None:
        return self._intf.set_property(IAgAvtrBasicManeuverStrategyGlideProfile._metadata, IAgAvtrBasicManeuverStrategyGlideProfile._set_MaxG_metadata, pVal)

    _get_MaxSpeedLimits_metadata = { "name" : "MaxSpeedLimits",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrBasicManeuverStrategyAirspeedPerfLimits),) }
    @property
    def MaxSpeedLimits(self) -> "AgEAvtrBasicManeuverStrategyAirspeedPerfLimits":
        """The options of what the procedure will do if the aircraft has exceeded the maximum speed limits."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyGlideProfile._metadata, IAgAvtrBasicManeuverStrategyGlideProfile._get_MaxSpeedLimits_metadata)

    _set_MaxSpeedLimits_metadata = { "name" : "MaxSpeedLimits",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrBasicManeuverStrategyAirspeedPerfLimits),) }
    @MaxSpeedLimits.setter
    def MaxSpeedLimits(self, pVal:"AgEAvtrBasicManeuverStrategyAirspeedPerfLimits") -> None:
        return self._intf.set_property(IAgAvtrBasicManeuverStrategyGlideProfile._metadata, IAgAvtrBasicManeuverStrategyGlideProfile._set_MaxSpeedLimits_metadata, pVal)

    _SetAirspeed_metadata = { "name" : "SetAirspeed",
            "arg_types" : (agcom.LONG, agcom.DOUBLE,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrAirspeedType), agmarshall.DOUBLE_arg,) }
    def SetAirspeed(self, airspeedType:"AgEAvtrAirspeedType", airspeed:float) -> None:
        """Set the airspeed and airspeed type that the aircraft will attempt to achieve and maintain if the hold initial airspeed option is not enabled."""
        return self._intf.invoke(IAgAvtrBasicManeuverStrategyGlideProfile._metadata, IAgAvtrBasicManeuverStrategyGlideProfile._SetAirspeed_metadata, airspeedType, airspeed)

    _get_CompensateForCoriolisAccel_metadata = { "name" : "CompensateForCoriolisAccel",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def CompensateForCoriolisAccel(self) -> bool:
        """The option to compensate for the acceleration due to the Coriolis effect."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyGlideProfile._metadata, IAgAvtrBasicManeuverStrategyGlideProfile._get_CompensateForCoriolisAccel_metadata)

    _set_CompensateForCoriolisAccel_metadata = { "name" : "CompensateForCoriolisAccel",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @CompensateForCoriolisAccel.setter
    def CompensateForCoriolisAccel(self, newVal:bool) -> None:
        return self._intf.set_property(IAgAvtrBasicManeuverStrategyGlideProfile._metadata, IAgAvtrBasicManeuverStrategyGlideProfile._set_CompensateForCoriolisAccel_metadata, newVal)

    _get_PoweredCruiseMode_metadata = { "name" : "PoweredCruiseMode",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrBasicManeuverStrategyPoweredCruiseMode),) }
    @property
    def PoweredCruiseMode(self) -> "AgEAvtrBasicManeuverStrategyPoweredCruiseMode":
        """The powered cruise mode"""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyGlideProfile._metadata, IAgAvtrBasicManeuverStrategyGlideProfile._get_PoweredCruiseMode_metadata)

    _set_PoweredCruiseMode_metadata = { "name" : "PoweredCruiseMode",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrBasicManeuverStrategyPoweredCruiseMode),) }
    @PoweredCruiseMode.setter
    def PoweredCruiseMode(self, newVal:"AgEAvtrBasicManeuverStrategyPoweredCruiseMode") -> None:
        return self._intf.set_property(IAgAvtrBasicManeuverStrategyGlideProfile._metadata, IAgAvtrBasicManeuverStrategyGlideProfile._set_PoweredCruiseMode_metadata, newVal)

    _get_PoweredCruiseThrottle_metadata = { "name" : "PoweredCruiseThrottle",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def PoweredCruiseThrottle(self) -> float:
        """The powered cruise throttle"""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyGlideProfile._metadata, IAgAvtrBasicManeuverStrategyGlideProfile._get_PoweredCruiseThrottle_metadata)

    _set_PoweredCruiseThrottle_metadata = { "name" : "PoweredCruiseThrottle",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @PoweredCruiseThrottle.setter
    def PoweredCruiseThrottle(self, newVal:float) -> None:
        return self._intf.set_property(IAgAvtrBasicManeuverStrategyGlideProfile._metadata, IAgAvtrBasicManeuverStrategyGlideProfile._set_PoweredCruiseThrottle_metadata, newVal)

    _get_PoweredCruiseThrustModel_metadata = { "name" : "PoweredCruiseThrustModel",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def PoweredCruiseThrustModel(self) -> "IAgAvtrPropulsionThrust":
        """The powered cruise thrust model"""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyGlideProfile._metadata, IAgAvtrBasicManeuverStrategyGlideProfile._get_PoweredCruiseThrustModel_metadata)

    _get_GlideSpeedControlMode_metadata = { "name" : "GlideSpeedControlMode",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrBasicManeuverGlideSpeedControlMode),) }
    @property
    def GlideSpeedControlMode(self) -> "AgEAvtrBasicManeuverGlideSpeedControlMode":
        """The glide speed control mode"""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyGlideProfile._metadata, IAgAvtrBasicManeuverStrategyGlideProfile._get_GlideSpeedControlMode_metadata)

    _get_GlideSpeedControlAlt_metadata = { "name" : "GlideSpeedControlAlt",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def GlideSpeedControlAlt(self) -> float:
        """The glide speed altitude when using the altitude control mode"""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyGlideProfile._metadata, IAgAvtrBasicManeuverStrategyGlideProfile._get_GlideSpeedControlAlt_metadata)

    _SetGlideSpeedControlMode_metadata = { "name" : "SetGlideSpeedControlMode",
            "arg_types" : (agcom.LONG, agcom.DOUBLE,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrBasicManeuverGlideSpeedControlMode), agmarshall.DOUBLE_arg,) }
    def SetGlideSpeedControlMode(self, eGSMode:"AgEAvtrBasicManeuverGlideSpeedControlMode", dControlAlt:float) -> None:
        """Set the glide speed control mode and altitude"""
        return self._intf.invoke(IAgAvtrBasicManeuverStrategyGlideProfile._metadata, IAgAvtrBasicManeuverStrategyGlideProfile._SetGlideSpeedControlMode_metadata, eGSMode, dControlAlt)


agcls.AgClassCatalog.add_catalog_entry("{7c0a4dd8-59ed-403d-96bb-8f45d3e71ca6}", IAgAvtrBasicManeuverStrategyGlideProfile)
agcls.AgTypeNameMap["IAgAvtrBasicManeuverStrategyGlideProfile"] = IAgAvtrBasicManeuverStrategyGlideProfile

class IAgAvtrBasicManeuverStrategyCruiseProfile(object):
    """Interface used to access options for a Cruise Profile Strategy of a Basic Maneuver Procedure."""
    _num_methods = 13
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{bd2d3a58-6602-4909-bb0f-98fa9c84d535}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_ReferenceFrame" : 1,
                             "set_ReferenceFrame" : 2,
                             "get_UseDefaultCruiseAltitude" : 3,
                             "set_UseDefaultCruiseAltitude" : 4,
                             "get_LevelOff" : 5,
                             "set_LevelOff" : 6,
                             "get_RequestedAltitude" : 7,
                             "set_RequestedAltitude" : 8,
                             "get_CruiseAirspeedOptions" : 9,
                             "get_StopAfterLevelOff" : 10,
                             "set_StopAfterLevelOff" : 11,
                             "get_CompensateForCoriolisAccel" : 12,
                             "set_CompensateForCoriolisAccel" : 13, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrBasicManeuverStrategyCruiseProfile._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrBasicManeuverStrategyCruiseProfile from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrBasicManeuverStrategyCruiseProfile.__dict__ and type(IAgAvtrBasicManeuverStrategyCruiseProfile.__dict__[attrname]) == property:
            return IAgAvtrBasicManeuverStrategyCruiseProfile.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrBasicManeuverStrategyCruiseProfile.")
    
    _get_ReferenceFrame_metadata = { "name" : "ReferenceFrame",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrBasicManeuverRefFrame),) }
    @property
    def ReferenceFrame(self) -> "AgEAvtrBasicManeuverRefFrame":
        """The reference frame the aircraft will use. Earth Frame will force the aircraft to overcome wind effects. Wind frame will allow the maneuver to be perturbed by wind."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyCruiseProfile._metadata, IAgAvtrBasicManeuverStrategyCruiseProfile._get_ReferenceFrame_metadata)

    _set_ReferenceFrame_metadata = { "name" : "ReferenceFrame",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrBasicManeuverRefFrame),) }
    @ReferenceFrame.setter
    def ReferenceFrame(self, pVal:"AgEAvtrBasicManeuverRefFrame") -> None:
        return self._intf.set_property(IAgAvtrBasicManeuverStrategyCruiseProfile._metadata, IAgAvtrBasicManeuverStrategyCruiseProfile._set_ReferenceFrame_metadata, pVal)

    _get_UseDefaultCruiseAltitude_metadata = { "name" : "UseDefaultCruiseAltitude",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def UseDefaultCruiseAltitude(self) -> bool:
        """Opt whether to use the aircraft's default cruise altitude."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyCruiseProfile._metadata, IAgAvtrBasicManeuverStrategyCruiseProfile._get_UseDefaultCruiseAltitude_metadata)

    _set_UseDefaultCruiseAltitude_metadata = { "name" : "UseDefaultCruiseAltitude",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @UseDefaultCruiseAltitude.setter
    def UseDefaultCruiseAltitude(self, pVal:bool) -> None:
        return self._intf.set_property(IAgAvtrBasicManeuverStrategyCruiseProfile._metadata, IAgAvtrBasicManeuverStrategyCruiseProfile._set_UseDefaultCruiseAltitude_metadata, pVal)

    _get_LevelOff_metadata = { "name" : "LevelOff",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def LevelOff(self) -> bool:
        """Opt whether to require the aircraft to level off at the specified altitude. This altitude is only enabled of the Default Cruise Altitude option is not selected."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyCruiseProfile._metadata, IAgAvtrBasicManeuverStrategyCruiseProfile._get_LevelOff_metadata)

    _set_LevelOff_metadata = { "name" : "LevelOff",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @LevelOff.setter
    def LevelOff(self, pVal:bool) -> None:
        return self._intf.set_property(IAgAvtrBasicManeuverStrategyCruiseProfile._metadata, IAgAvtrBasicManeuverStrategyCruiseProfile._set_LevelOff_metadata, pVal)

    _get_RequestedAltitude_metadata = { "name" : "RequestedAltitude",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def RequestedAltitude(self) -> float:
        """The desired MSL Altitude for the maneuver. This altitude is only enabled of the Default Cruise Altitude option is not selected."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyCruiseProfile._metadata, IAgAvtrBasicManeuverStrategyCruiseProfile._get_RequestedAltitude_metadata)

    _set_RequestedAltitude_metadata = { "name" : "RequestedAltitude",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @RequestedAltitude.setter
    def RequestedAltitude(self, newVal:float) -> None:
        return self._intf.set_property(IAgAvtrBasicManeuverStrategyCruiseProfile._metadata, IAgAvtrBasicManeuverStrategyCruiseProfile._set_RequestedAltitude_metadata, newVal)

    _get_CruiseAirspeedOptions_metadata = { "name" : "CruiseAirspeedOptions",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def CruiseAirspeedOptions(self) -> "IAgAvtrCruiseAirspeedOptions":
        """Get the interface for the cruise airspeed options."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyCruiseProfile._metadata, IAgAvtrBasicManeuverStrategyCruiseProfile._get_CruiseAirspeedOptions_metadata)

    _get_StopAfterLevelOff_metadata = { "name" : "StopAfterLevelOff",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def StopAfterLevelOff(self) -> bool:
        """Select to stop the maneuver as soon as the aircraft achieves its goal altitude and levels off, regardless if any basic stopping conditions have been triggered."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyCruiseProfile._metadata, IAgAvtrBasicManeuverStrategyCruiseProfile._get_StopAfterLevelOff_metadata)

    _set_StopAfterLevelOff_metadata = { "name" : "StopAfterLevelOff",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @StopAfterLevelOff.setter
    def StopAfterLevelOff(self, pVal:bool) -> None:
        return self._intf.set_property(IAgAvtrBasicManeuverStrategyCruiseProfile._metadata, IAgAvtrBasicManeuverStrategyCruiseProfile._set_StopAfterLevelOff_metadata, pVal)

    _get_CompensateForCoriolisAccel_metadata = { "name" : "CompensateForCoriolisAccel",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def CompensateForCoriolisAccel(self) -> bool:
        """The option to compensate for the acceleration due to the Coriolis effect."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyCruiseProfile._metadata, IAgAvtrBasicManeuverStrategyCruiseProfile._get_CompensateForCoriolisAccel_metadata)

    _set_CompensateForCoriolisAccel_metadata = { "name" : "CompensateForCoriolisAccel",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @CompensateForCoriolisAccel.setter
    def CompensateForCoriolisAccel(self, newVal:bool) -> None:
        return self._intf.set_property(IAgAvtrBasicManeuverStrategyCruiseProfile._metadata, IAgAvtrBasicManeuverStrategyCruiseProfile._set_CompensateForCoriolisAccel_metadata, newVal)


agcls.AgClassCatalog.add_catalog_entry("{bd2d3a58-6602-4909-bb0f-98fa9c84d535}", IAgAvtrBasicManeuverStrategyCruiseProfile)
agcls.AgTypeNameMap["IAgAvtrBasicManeuverStrategyCruiseProfile"] = IAgAvtrBasicManeuverStrategyCruiseProfile

class IAgAvtrBasicManeuverStrategyStraightAhead(object):
    """Interface used to access options for a Straight Ahead Strategy of a Basic Maneuver Procedure."""
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{b20bf35c-8f9c-4a09-9b2c-b57124e657aa}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_ReferenceFrame" : 1,
                             "set_ReferenceFrame" : 2,
                             "get_CompensateForCoriolisAccel" : 3,
                             "set_CompensateForCoriolisAccel" : 4, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrBasicManeuverStrategyStraightAhead._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrBasicManeuverStrategyStraightAhead from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrBasicManeuverStrategyStraightAhead.__dict__ and type(IAgAvtrBasicManeuverStrategyStraightAhead.__dict__[attrname]) == property:
            return IAgAvtrBasicManeuverStrategyStraightAhead.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrBasicManeuverStrategyStraightAhead.")
    
    _get_ReferenceFrame_metadata = { "name" : "ReferenceFrame",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrStraightAheadRefFrame),) }
    @property
    def ReferenceFrame(self) -> "AgEAvtrStraightAheadRefFrame":
        """The reference frame the aircraft will use to fly straight ahead."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyStraightAhead._metadata, IAgAvtrBasicManeuverStrategyStraightAhead._get_ReferenceFrame_metadata)

    _set_ReferenceFrame_metadata = { "name" : "ReferenceFrame",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrStraightAheadRefFrame),) }
    @ReferenceFrame.setter
    def ReferenceFrame(self, pVal:"AgEAvtrStraightAheadRefFrame") -> None:
        return self._intf.set_property(IAgAvtrBasicManeuverStrategyStraightAhead._metadata, IAgAvtrBasicManeuverStrategyStraightAhead._set_ReferenceFrame_metadata, pVal)

    _get_CompensateForCoriolisAccel_metadata = { "name" : "CompensateForCoriolisAccel",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def CompensateForCoriolisAccel(self) -> bool:
        """The option to compensate for the acceleration due to the Coriolis effect."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyStraightAhead._metadata, IAgAvtrBasicManeuverStrategyStraightAhead._get_CompensateForCoriolisAccel_metadata)

    _set_CompensateForCoriolisAccel_metadata = { "name" : "CompensateForCoriolisAccel",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @CompensateForCoriolisAccel.setter
    def CompensateForCoriolisAccel(self, newVal:bool) -> None:
        return self._intf.set_property(IAgAvtrBasicManeuverStrategyStraightAhead._metadata, IAgAvtrBasicManeuverStrategyStraightAhead._set_CompensateForCoriolisAccel_metadata, newVal)


agcls.AgClassCatalog.add_catalog_entry("{b20bf35c-8f9c-4a09-9b2c-b57124e657aa}", IAgAvtrBasicManeuverStrategyStraightAhead)
agcls.AgTypeNameMap["IAgAvtrBasicManeuverStrategyStraightAhead"] = IAgAvtrBasicManeuverStrategyStraightAhead

class IAgAvtrBasicManeuverStrategyWeave(object):
    """Interface used to access options for a weave strategy of a basic maneuver procedure."""
    _num_methods = 13
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{3ec446e4-6454-4c4d-936c-7094ec85ddd0}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_HeadingChange" : 1,
                             "set_HeadingChange" : 2,
                             "get_MaxNumCycles" : 3,
                             "set_MaxNumCycles" : 4,
                             "get_MaxDistance" : 5,
                             "set_MaxDistance" : 6,
                             "get_ControlLimitMode" : 7,
                             "get_ControlLimitTurnRadius" : 8,
                             "get_ControlLimitTurnRate" : 9,
                             "get_ControlLimitHorizAccel" : 10,
                             "SetControlLimit" : 11,
                             "get_CompensateForCoriolisAccel" : 12,
                             "set_CompensateForCoriolisAccel" : 13, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrBasicManeuverStrategyWeave._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrBasicManeuverStrategyWeave from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrBasicManeuverStrategyWeave.__dict__ and type(IAgAvtrBasicManeuverStrategyWeave.__dict__[attrname]) == property:
            return IAgAvtrBasicManeuverStrategyWeave.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrBasicManeuverStrategyWeave.")
    
    _get_HeadingChange_metadata = { "name" : "HeadingChange",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def HeadingChange(self) -> typing.Any:
        """The direction in which the aircraft will begin the weave pattern."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyWeave._metadata, IAgAvtrBasicManeuverStrategyWeave._get_HeadingChange_metadata)

    _set_HeadingChange_metadata = { "name" : "HeadingChange",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @HeadingChange.setter
    def HeadingChange(self, newVal:typing.Any) -> None:
        return self._intf.set_property(IAgAvtrBasicManeuverStrategyWeave._metadata, IAgAvtrBasicManeuverStrategyWeave._set_HeadingChange_metadata, newVal)

    _get_MaxNumCycles_metadata = { "name" : "MaxNumCycles",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def MaxNumCycles(self) -> float:
        """The number of times the aircraft will fly the pattern."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyWeave._metadata, IAgAvtrBasicManeuverStrategyWeave._get_MaxNumCycles_metadata)

    _set_MaxNumCycles_metadata = { "name" : "MaxNumCycles",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @MaxNumCycles.setter
    def MaxNumCycles(self, newVal:float) -> None:
        return self._intf.set_property(IAgAvtrBasicManeuverStrategyWeave._metadata, IAgAvtrBasicManeuverStrategyWeave._set_MaxNumCycles_metadata, newVal)

    _get_MaxDistance_metadata = { "name" : "MaxDistance",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def MaxDistance(self) -> float:
        """The maximum ground distance the aircraft will travel while performing the weave cyces."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyWeave._metadata, IAgAvtrBasicManeuverStrategyWeave._get_MaxDistance_metadata)

    _set_MaxDistance_metadata = { "name" : "MaxDistance",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @MaxDistance.setter
    def MaxDistance(self, newVal:float) -> None:
        return self._intf.set_property(IAgAvtrBasicManeuverStrategyWeave._metadata, IAgAvtrBasicManeuverStrategyWeave._set_MaxDistance_metadata, newVal)

    _get_ControlLimitMode_metadata = { "name" : "ControlLimitMode",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrBasicManeuverStrategyNavControlLimit),) }
    @property
    def ControlLimitMode(self) -> "AgEAvtrBasicManeuverStrategyNavControlLimit":
        """Get the method to define the control limits of the aircraft during the maneuver."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyWeave._metadata, IAgAvtrBasicManeuverStrategyWeave._get_ControlLimitMode_metadata)

    _get_ControlLimitTurnRadius_metadata = { "name" : "ControlLimitTurnRadius",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def ControlLimitTurnRadius(self) -> float:
        """The specified turn radius for a control limit mode of specify min turn radius."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyWeave._metadata, IAgAvtrBasicManeuverStrategyWeave._get_ControlLimitTurnRadius_metadata)

    _get_ControlLimitTurnRate_metadata = { "name" : "ControlLimitTurnRate",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def ControlLimitTurnRate(self) -> typing.Any:
        """The specified turn rate for a control limit mode of specify max turn rate."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyWeave._metadata, IAgAvtrBasicManeuverStrategyWeave._get_ControlLimitTurnRate_metadata)

    _get_ControlLimitHorizAccel_metadata = { "name" : "ControlLimitHorizAccel",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def ControlLimitHorizAccel(self) -> float:
        """The specified horizontal acceleration for a control limit mode of specify max horiz accel."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyWeave._metadata, IAgAvtrBasicManeuverStrategyWeave._get_ControlLimitHorizAccel_metadata)

    _SetControlLimit_metadata = { "name" : "SetControlLimit",
            "arg_types" : (agcom.LONG, agcom.DOUBLE,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrBasicManeuverStrategyNavControlLimit), agmarshall.DOUBLE_arg,) }
    def SetControlLimit(self, controlLimitMode:"AgEAvtrBasicManeuverStrategyNavControlLimit", controlLimitValue:float) -> None:
        """Set the method and corresponding value to define the control limits of the aircraft during the maneuver."""
        return self._intf.invoke(IAgAvtrBasicManeuverStrategyWeave._metadata, IAgAvtrBasicManeuverStrategyWeave._SetControlLimit_metadata, controlLimitMode, controlLimitValue)

    _get_CompensateForCoriolisAccel_metadata = { "name" : "CompensateForCoriolisAccel",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def CompensateForCoriolisAccel(self) -> bool:
        """The option to compensate for the acceleration due to the Coriolis effect."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyWeave._metadata, IAgAvtrBasicManeuverStrategyWeave._get_CompensateForCoriolisAccel_metadata)

    _set_CompensateForCoriolisAccel_metadata = { "name" : "CompensateForCoriolisAccel",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @CompensateForCoriolisAccel.setter
    def CompensateForCoriolisAccel(self, newVal:bool) -> None:
        return self._intf.set_property(IAgAvtrBasicManeuverStrategyWeave._metadata, IAgAvtrBasicManeuverStrategyWeave._set_CompensateForCoriolisAccel_metadata, newVal)


agcls.AgClassCatalog.add_catalog_entry("{3ec446e4-6454-4c4d-936c-7094ec85ddd0}", IAgAvtrBasicManeuverStrategyWeave)
agcls.AgTypeNameMap["IAgAvtrBasicManeuverStrategyWeave"] = IAgAvtrBasicManeuverStrategyWeave

class IAgAvtrBasicManeuverStrategyBallistic3D(object):
    """Interface used to access options for a balistic 3D strategy of a basic maneuver procedure."""
    _num_methods = 9
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{49C1E15C-785F-4C84-AA50-2B29256811A6}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_ControlMode" : 1,
                             "set_ControlMode" : 2,
                             "get_AirspeedOptions" : 3,
                             "get_ParachuteArea" : 4,
                             "set_ParachuteArea" : 5,
                             "get_ParachuteCd" : 6,
                             "set_ParachuteCd" : 7,
                             "get_WindForceEffectiveArea" : 8,
                             "set_WindForceEffectiveArea" : 9, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrBasicManeuverStrategyBallistic3D._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrBasicManeuverStrategyBallistic3D from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrBasicManeuverStrategyBallistic3D.__dict__ and type(IAgAvtrBasicManeuverStrategyBallistic3D.__dict__[attrname]) == property:
            return IAgAvtrBasicManeuverStrategyBallistic3D.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrBasicManeuverStrategyBallistic3D.")
    
    _get_ControlMode_metadata = { "name" : "ControlMode",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrBallistic3DControlMode),) }
    @property
    def ControlMode(self) -> "AgEAvtrBallistic3DControlMode":
        """The control mode for the ballistic 3D strategy."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyBallistic3D._metadata, IAgAvtrBasicManeuverStrategyBallistic3D._get_ControlMode_metadata)

    _set_ControlMode_metadata = { "name" : "ControlMode",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrBallistic3DControlMode),) }
    @ControlMode.setter
    def ControlMode(self, newVal:"AgEAvtrBallistic3DControlMode") -> None:
        """The control mode for the ballistic 3D strategy."""
        return self._intf.set_property(IAgAvtrBasicManeuverStrategyBallistic3D._metadata, IAgAvtrBasicManeuverStrategyBallistic3D._set_ControlMode_metadata, newVal)

    _get_AirspeedOptions_metadata = { "name" : "AirspeedOptions",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def AirspeedOptions(self) -> "IAgAvtrBasicManeuverAirspeedOptions":
        """Get the airspeed options."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyBallistic3D._metadata, IAgAvtrBasicManeuverStrategyBallistic3D._get_AirspeedOptions_metadata)

    _get_ParachuteArea_metadata = { "name" : "ParachuteArea",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def ParachuteArea(self) -> float:
        """The parachute area used as part of the Parachute control mode for the ballistic 3D strategy."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyBallistic3D._metadata, IAgAvtrBasicManeuverStrategyBallistic3D._get_ParachuteArea_metadata)

    _set_ParachuteArea_metadata = { "name" : "ParachuteArea",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @ParachuteArea.setter
    def ParachuteArea(self, newVal:float) -> None:
        """The parachute area used as part of the Parachute control mode for the ballistic 3D strategy."""
        return self._intf.set_property(IAgAvtrBasicManeuverStrategyBallistic3D._metadata, IAgAvtrBasicManeuverStrategyBallistic3D._set_ParachuteArea_metadata, newVal)

    _get_ParachuteCd_metadata = { "name" : "ParachuteCd",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def ParachuteCd(self) -> float:
        """The parachute coefficient of drag used as part of the Parachute control mode for the ballistic 3D strategy."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyBallistic3D._metadata, IAgAvtrBasicManeuverStrategyBallistic3D._get_ParachuteCd_metadata)

    _set_ParachuteCd_metadata = { "name" : "ParachuteCd",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @ParachuteCd.setter
    def ParachuteCd(self, newVal:float) -> None:
        """The parachute coefficient of drag used as part of the Parachute control mode for the ballistic 3D strategy."""
        return self._intf.set_property(IAgAvtrBasicManeuverStrategyBallistic3D._metadata, IAgAvtrBasicManeuverStrategyBallistic3D._set_ParachuteCd_metadata, newVal)

    _get_WindForceEffectiveArea_metadata = { "name" : "WindForceEffectiveArea",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def WindForceEffectiveArea(self) -> float:
        """The vehicle's wind force effective area."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyBallistic3D._metadata, IAgAvtrBasicManeuverStrategyBallistic3D._get_WindForceEffectiveArea_metadata)

    _set_WindForceEffectiveArea_metadata = { "name" : "WindForceEffectiveArea",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @WindForceEffectiveArea.setter
    def WindForceEffectiveArea(self, newVal:float) -> None:
        """The vehicle's wind force effective area."""
        return self._intf.set_property(IAgAvtrBasicManeuverStrategyBallistic3D._metadata, IAgAvtrBasicManeuverStrategyBallistic3D._set_WindForceEffectiveArea_metadata, newVal)


agcls.AgClassCatalog.add_catalog_entry("{49C1E15C-785F-4C84-AA50-2B29256811A6}", IAgAvtrBasicManeuverStrategyBallistic3D)
agcls.AgTypeNameMap["IAgAvtrBasicManeuverStrategyBallistic3D"] = IAgAvtrBasicManeuverStrategyBallistic3D

class IAgAvtrBasicManeuverStrategyPitch3D(object):
    """Interface used to access options for a pitch 3D strategy of a basic maneuver procedure."""
    _num_methods = 11
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{FF7B545D-B15A-46D9-BFB3-204C38672231}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_ControlMode" : 1,
                             "set_ControlMode" : 2,
                             "get_CommandFPA" : 3,
                             "set_CommandFPA" : 4,
                             "get_ControlFPADot" : 5,
                             "set_ControlFPADot" : 6,
                             "get_StopWhenFPAAchieved" : 7,
                             "set_StopWhenFPAAchieved" : 8,
                             "get_AirspeedOptions" : 9,
                             "get_WindForceEffectiveArea" : 10,
                             "set_WindForceEffectiveArea" : 11, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrBasicManeuverStrategyPitch3D._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrBasicManeuverStrategyPitch3D from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrBasicManeuverStrategyPitch3D.__dict__ and type(IAgAvtrBasicManeuverStrategyPitch3D.__dict__[attrname]) == property:
            return IAgAvtrBasicManeuverStrategyPitch3D.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrBasicManeuverStrategyPitch3D.")
    
    _get_ControlMode_metadata = { "name" : "ControlMode",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrPitch3DControlMode),) }
    @property
    def ControlMode(self) -> "AgEAvtrPitch3DControlMode":
        """The control mode for the pitch 3D strategy."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyPitch3D._metadata, IAgAvtrBasicManeuverStrategyPitch3D._get_ControlMode_metadata)

    _set_ControlMode_metadata = { "name" : "ControlMode",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrPitch3DControlMode),) }
    @ControlMode.setter
    def ControlMode(self, newVal:"AgEAvtrPitch3DControlMode") -> None:
        """The control mode for the pitch 3D strategy."""
        return self._intf.set_property(IAgAvtrBasicManeuverStrategyPitch3D._metadata, IAgAvtrBasicManeuverStrategyPitch3D._set_ControlMode_metadata, newVal)

    _get_CommandFPA_metadata = { "name" : "CommandFPA",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def CommandFPA(self) -> typing.Any:
        """The commanded flight path angle."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyPitch3D._metadata, IAgAvtrBasicManeuverStrategyPitch3D._get_CommandFPA_metadata)

    _set_CommandFPA_metadata = { "name" : "CommandFPA",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @CommandFPA.setter
    def CommandFPA(self, newVal:typing.Any) -> None:
        """The commanded flight path angle."""
        return self._intf.set_property(IAgAvtrBasicManeuverStrategyPitch3D._metadata, IAgAvtrBasicManeuverStrategyPitch3D._set_CommandFPA_metadata, newVal)

    _get_ControlFPADot_metadata = { "name" : "ControlFPADot",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def ControlFPADot(self) -> typing.Any:
        """The flight path angle rate."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyPitch3D._metadata, IAgAvtrBasicManeuverStrategyPitch3D._get_ControlFPADot_metadata)

    _set_ControlFPADot_metadata = { "name" : "ControlFPADot",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @ControlFPADot.setter
    def ControlFPADot(self, newVal:typing.Any) -> None:
        """The flight path angle rate."""
        return self._intf.set_property(IAgAvtrBasicManeuverStrategyPitch3D._metadata, IAgAvtrBasicManeuverStrategyPitch3D._set_ControlFPADot_metadata, newVal)

    _get_StopWhenFPAAchieved_metadata = { "name" : "StopWhenFPAAchieved",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def StopWhenFPAAchieved(self) -> bool:
        """Stop when the commanded flight path angle is achieved."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyPitch3D._metadata, IAgAvtrBasicManeuverStrategyPitch3D._get_StopWhenFPAAchieved_metadata)

    _set_StopWhenFPAAchieved_metadata = { "name" : "StopWhenFPAAchieved",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @StopWhenFPAAchieved.setter
    def StopWhenFPAAchieved(self, newVal:bool) -> None:
        """Stop when the commanded flight path angle is achieved."""
        return self._intf.set_property(IAgAvtrBasicManeuverStrategyPitch3D._metadata, IAgAvtrBasicManeuverStrategyPitch3D._set_StopWhenFPAAchieved_metadata, newVal)

    _get_AirspeedOptions_metadata = { "name" : "AirspeedOptions",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def AirspeedOptions(self) -> "IAgAvtrBasicManeuverAirspeedOptions":
        """Get the airspeed options."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyPitch3D._metadata, IAgAvtrBasicManeuverStrategyPitch3D._get_AirspeedOptions_metadata)

    _get_WindForceEffectiveArea_metadata = { "name" : "WindForceEffectiveArea",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def WindForceEffectiveArea(self) -> float:
        """The vehicle's wind force effective area."""
        return self._intf.get_property(IAgAvtrBasicManeuverStrategyPitch3D._metadata, IAgAvtrBasicManeuverStrategyPitch3D._get_WindForceEffectiveArea_metadata)

    _set_WindForceEffectiveArea_metadata = { "name" : "WindForceEffectiveArea",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @WindForceEffectiveArea.setter
    def WindForceEffectiveArea(self, newVal:float) -> None:
        """The vehicle's wind force effective area."""
        return self._intf.set_property(IAgAvtrBasicManeuverStrategyPitch3D._metadata, IAgAvtrBasicManeuverStrategyPitch3D._set_WindForceEffectiveArea_metadata, newVal)


agcls.AgClassCatalog.add_catalog_entry("{FF7B545D-B15A-46D9-BFB3-204C38672231}", IAgAvtrBasicManeuverStrategyPitch3D)
agcls.AgTypeNameMap["IAgAvtrBasicManeuverStrategyPitch3D"] = IAgAvtrBasicManeuverStrategyPitch3D

class IAgAvtrBasicManeuverTargetPosVelNoisyBrgRng(object):
    """Interface used to access target position and velocity strategy, NoisyBrnRng."""
    _num_methods = 12
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{72B71952-ADE3-45E5-A567-B7EA0EFDE5F6}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "NewRandomEngineSeed" : 1,
                             "get_SmoothingConstant" : 2,
                             "set_SmoothingConstant" : 3,
                             "get_VelocityTimeStep" : 4,
                             "set_VelocityTimeStep" : 5,
                             "get_AngleErrorStdDev" : 6,
                             "set_AngleErrorStdDev" : 7,
                             "get_RangeErrorStdDev" : 8,
                             "set_RangeErrorStdDev" : 9,
                             "ApplyPosVel" : 10,
                             "CancelPosVel" : 11,
                             "SetBaseDynStateLinkName" : 12, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrBasicManeuverTargetPosVelNoisyBrgRng._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrBasicManeuverTargetPosVelNoisyBrgRng from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrBasicManeuverTargetPosVelNoisyBrgRng.__dict__ and type(IAgAvtrBasicManeuverTargetPosVelNoisyBrgRng.__dict__[attrname]) == property:
            return IAgAvtrBasicManeuverTargetPosVelNoisyBrgRng.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrBasicManeuverTargetPosVelNoisyBrgRng.")
    
    _NewRandomEngineSeed_metadata = { "name" : "NewRandomEngineSeed",
            "arg_types" : (),
            "marshallers" : () }
    def NewRandomEngineSeed(self) -> None:
        """method NewRandomEngineSeed"""
        return self._intf.invoke(IAgAvtrBasicManeuverTargetPosVelNoisyBrgRng._metadata, IAgAvtrBasicManeuverTargetPosVelNoisyBrgRng._NewRandomEngineSeed_metadata, )

    _get_SmoothingConstant_metadata = { "name" : "SmoothingConstant",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def SmoothingConstant(self) -> float:
        """property SmoothingConstant"""
        return self._intf.get_property(IAgAvtrBasicManeuverTargetPosVelNoisyBrgRng._metadata, IAgAvtrBasicManeuverTargetPosVelNoisyBrgRng._get_SmoothingConstant_metadata)

    _set_SmoothingConstant_metadata = { "name" : "SmoothingConstant",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @SmoothingConstant.setter
    def SmoothingConstant(self, newVal:float) -> None:
        """property SmoothingConstant"""
        return self._intf.set_property(IAgAvtrBasicManeuverTargetPosVelNoisyBrgRng._metadata, IAgAvtrBasicManeuverTargetPosVelNoisyBrgRng._set_SmoothingConstant_metadata, newVal)

    _get_VelocityTimeStep_metadata = { "name" : "VelocityTimeStep",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def VelocityTimeStep(self) -> float:
        """property VelocityTimeStep"""
        return self._intf.get_property(IAgAvtrBasicManeuverTargetPosVelNoisyBrgRng._metadata, IAgAvtrBasicManeuverTargetPosVelNoisyBrgRng._get_VelocityTimeStep_metadata)

    _set_VelocityTimeStep_metadata = { "name" : "VelocityTimeStep",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @VelocityTimeStep.setter
    def VelocityTimeStep(self, newVal:float) -> None:
        """property VelocityTimeStep"""
        return self._intf.set_property(IAgAvtrBasicManeuverTargetPosVelNoisyBrgRng._metadata, IAgAvtrBasicManeuverTargetPosVelNoisyBrgRng._set_VelocityTimeStep_metadata, newVal)

    _get_AngleErrorStdDev_metadata = { "name" : "AngleErrorStdDev",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def AngleErrorStdDev(self) -> float:
        """property AngleErrorStdDev"""
        return self._intf.get_property(IAgAvtrBasicManeuverTargetPosVelNoisyBrgRng._metadata, IAgAvtrBasicManeuverTargetPosVelNoisyBrgRng._get_AngleErrorStdDev_metadata)

    _set_AngleErrorStdDev_metadata = { "name" : "AngleErrorStdDev",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @AngleErrorStdDev.setter
    def AngleErrorStdDev(self, newVal:float) -> None:
        """property AngleErrorStdDev"""
        return self._intf.set_property(IAgAvtrBasicManeuverTargetPosVelNoisyBrgRng._metadata, IAgAvtrBasicManeuverTargetPosVelNoisyBrgRng._set_AngleErrorStdDev_metadata, newVal)

    _get_RangeErrorStdDev_metadata = { "name" : "RangeErrorStdDev",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def RangeErrorStdDev(self) -> float:
        """property RangeErrorStdDev"""
        return self._intf.get_property(IAgAvtrBasicManeuverTargetPosVelNoisyBrgRng._metadata, IAgAvtrBasicManeuverTargetPosVelNoisyBrgRng._get_RangeErrorStdDev_metadata)

    _set_RangeErrorStdDev_metadata = { "name" : "RangeErrorStdDev",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @RangeErrorStdDev.setter
    def RangeErrorStdDev(self, newVal:float) -> None:
        """property RangeErrorStdDev"""
        return self._intf.set_property(IAgAvtrBasicManeuverTargetPosVelNoisyBrgRng._metadata, IAgAvtrBasicManeuverTargetPosVelNoisyBrgRng._set_RangeErrorStdDev_metadata, newVal)

    _ApplyPosVel_metadata = { "name" : "ApplyPosVel",
            "arg_types" : (),
            "marshallers" : () }
    def ApplyPosVel(self) -> None:
        """Apply the current position velocity strategy."""
        return self._intf.invoke(IAgAvtrBasicManeuverTargetPosVelNoisyBrgRng._metadata, IAgAvtrBasicManeuverTargetPosVelNoisyBrgRng._ApplyPosVel_metadata, )

    _CancelPosVel_metadata = { "name" : "CancelPosVel",
            "arg_types" : (),
            "marshallers" : () }
    def CancelPosVel(self) -> None:
        """Cancel the current position velocity strategy."""
        return self._intf.invoke(IAgAvtrBasicManeuverTargetPosVelNoisyBrgRng._metadata, IAgAvtrBasicManeuverTargetPosVelNoisyBrgRng._CancelPosVel_metadata, )

    _SetBaseDynStateLinkName_metadata = { "name" : "SetBaseDynStateLinkName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    def SetBaseDynStateLinkName(self, newVal:str) -> None:
        """Set the BaseDynStateLinkName"""
        return self._intf.invoke(IAgAvtrBasicManeuverTargetPosVelNoisyBrgRng._metadata, IAgAvtrBasicManeuverTargetPosVelNoisyBrgRng._SetBaseDynStateLinkName_metadata, newVal)


agcls.AgClassCatalog.add_catalog_entry("{72B71952-ADE3-45E5-A567-B7EA0EFDE5F6}", IAgAvtrBasicManeuverTargetPosVelNoisyBrgRng)
agcls.AgTypeNameMap["IAgAvtrBasicManeuverTargetPosVelNoisyBrgRng"] = IAgAvtrBasicManeuverTargetPosVelNoisyBrgRng

class IAgAvtrBasicManeuverTargetPosVelNoisySurfTgt(object):
    """Interface used to access target position and velocity strategy, Surf Tgt Pos Vel."""
    _num_methods = 12
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{E5391DAF-FEC9-4DC2-9726-C9B1B0A44BB6}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "NewRandomEngineSeed" : 1,
                             "get_MeasurementTimeStep" : 2,
                             "set_MeasurementTimeStep" : 3,
                             "get_PositionCEP" : 4,
                             "set_PositionCEP" : 5,
                             "get_CourseError" : 6,
                             "set_CourseError" : 7,
                             "get_SpeedError" : 8,
                             "set_SpeedError" : 9,
                             "ApplyPosVel" : 10,
                             "CancelPosVel" : 11,
                             "SetBaseDynStateLinkName" : 12, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrBasicManeuverTargetPosVelNoisySurfTgt._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrBasicManeuverTargetPosVelNoisySurfTgt from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrBasicManeuverTargetPosVelNoisySurfTgt.__dict__ and type(IAgAvtrBasicManeuverTargetPosVelNoisySurfTgt.__dict__[attrname]) == property:
            return IAgAvtrBasicManeuverTargetPosVelNoisySurfTgt.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrBasicManeuverTargetPosVelNoisySurfTgt.")
    
    _NewRandomEngineSeed_metadata = { "name" : "NewRandomEngineSeed",
            "arg_types" : (),
            "marshallers" : () }
    def NewRandomEngineSeed(self) -> None:
        """method NewRandomEngineSeed"""
        return self._intf.invoke(IAgAvtrBasicManeuverTargetPosVelNoisySurfTgt._metadata, IAgAvtrBasicManeuverTargetPosVelNoisySurfTgt._NewRandomEngineSeed_metadata, )

    _get_MeasurementTimeStep_metadata = { "name" : "MeasurementTimeStep",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def MeasurementTimeStep(self) -> float:
        """property MeasurementTimeStep"""
        return self._intf.get_property(IAgAvtrBasicManeuverTargetPosVelNoisySurfTgt._metadata, IAgAvtrBasicManeuverTargetPosVelNoisySurfTgt._get_MeasurementTimeStep_metadata)

    _set_MeasurementTimeStep_metadata = { "name" : "MeasurementTimeStep",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @MeasurementTimeStep.setter
    def MeasurementTimeStep(self, newVal:float) -> None:
        """property MeasurementTimeStep"""
        return self._intf.set_property(IAgAvtrBasicManeuverTargetPosVelNoisySurfTgt._metadata, IAgAvtrBasicManeuverTargetPosVelNoisySurfTgt._set_MeasurementTimeStep_metadata, newVal)

    _get_PositionCEP_metadata = { "name" : "PositionCEP",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def PositionCEP(self) -> float:
        """property PositionCEP"""
        return self._intf.get_property(IAgAvtrBasicManeuverTargetPosVelNoisySurfTgt._metadata, IAgAvtrBasicManeuverTargetPosVelNoisySurfTgt._get_PositionCEP_metadata)

    _set_PositionCEP_metadata = { "name" : "PositionCEP",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @PositionCEP.setter
    def PositionCEP(self, newVal:float) -> None:
        """property PositionCEP"""
        return self._intf.set_property(IAgAvtrBasicManeuverTargetPosVelNoisySurfTgt._metadata, IAgAvtrBasicManeuverTargetPosVelNoisySurfTgt._set_PositionCEP_metadata, newVal)

    _get_CourseError_metadata = { "name" : "CourseError",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def CourseError(self) -> float:
        """property CourseError"""
        return self._intf.get_property(IAgAvtrBasicManeuverTargetPosVelNoisySurfTgt._metadata, IAgAvtrBasicManeuverTargetPosVelNoisySurfTgt._get_CourseError_metadata)

    _set_CourseError_metadata = { "name" : "CourseError",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @CourseError.setter
    def CourseError(self, newVal:float) -> None:
        """property CourseError"""
        return self._intf.set_property(IAgAvtrBasicManeuverTargetPosVelNoisySurfTgt._metadata, IAgAvtrBasicManeuverTargetPosVelNoisySurfTgt._set_CourseError_metadata, newVal)

    _get_SpeedError_metadata = { "name" : "SpeedError",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def SpeedError(self) -> float:
        """property SpeedError"""
        return self._intf.get_property(IAgAvtrBasicManeuverTargetPosVelNoisySurfTgt._metadata, IAgAvtrBasicManeuverTargetPosVelNoisySurfTgt._get_SpeedError_metadata)

    _set_SpeedError_metadata = { "name" : "SpeedError",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @SpeedError.setter
    def SpeedError(self, newVal:float) -> None:
        """property SpeedError"""
        return self._intf.set_property(IAgAvtrBasicManeuverTargetPosVelNoisySurfTgt._metadata, IAgAvtrBasicManeuverTargetPosVelNoisySurfTgt._set_SpeedError_metadata, newVal)

    _ApplyPosVel_metadata = { "name" : "ApplyPosVel",
            "arg_types" : (),
            "marshallers" : () }
    def ApplyPosVel(self) -> None:
        """Apply the current position velocity strategy."""
        return self._intf.invoke(IAgAvtrBasicManeuverTargetPosVelNoisySurfTgt._metadata, IAgAvtrBasicManeuverTargetPosVelNoisySurfTgt._ApplyPosVel_metadata, )

    _CancelPosVel_metadata = { "name" : "CancelPosVel",
            "arg_types" : (),
            "marshallers" : () }
    def CancelPosVel(self) -> None:
        """Cancel the current position velocity strategy."""
        return self._intf.invoke(IAgAvtrBasicManeuverTargetPosVelNoisySurfTgt._metadata, IAgAvtrBasicManeuverTargetPosVelNoisySurfTgt._CancelPosVel_metadata, )

    _SetBaseDynStateLinkName_metadata = { "name" : "SetBaseDynStateLinkName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    def SetBaseDynStateLinkName(self, newVal:str) -> None:
        """Set the BaseDynStateLinkName"""
        return self._intf.invoke(IAgAvtrBasicManeuverTargetPosVelNoisySurfTgt._metadata, IAgAvtrBasicManeuverTargetPosVelNoisySurfTgt._SetBaseDynStateLinkName_metadata, newVal)


agcls.AgClassCatalog.add_catalog_entry("{E5391DAF-FEC9-4DC2-9726-C9B1B0A44BB6}", IAgAvtrBasicManeuverTargetPosVelNoisySurfTgt)
agcls.AgTypeNameMap["IAgAvtrBasicManeuverTargetPosVelNoisySurfTgt"] = IAgAvtrBasicManeuverTargetPosVelNoisySurfTgt

class IAgAvtrTakeoffNormal(object):
    """The interface used to access the options for a Normal takeoff mode. The mode must be set to Normal to access this interface."""
    _num_methods = 10
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{0a373629-d29b-4c4f-a59f-54fc567022cb}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_TakeoffClimbAngle" : 1,
                             "set_TakeoffClimbAngle" : 2,
                             "get_DepartureAltitude" : 3,
                             "set_DepartureAltitude" : 4,
                             "get_UseRunwayTerrain" : 5,
                             "set_UseRunwayTerrain" : 6,
                             "get_RunwayAltitudeOffset" : 7,
                             "set_RunwayAltitudeOffset" : 8,
                             "get_HoldOnDeck" : 9,
                             "set_HoldOnDeck" : 10, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrTakeoffNormal._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrTakeoffNormal from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrTakeoffNormal.__dict__ and type(IAgAvtrTakeoffNormal.__dict__[attrname]) == property:
            return IAgAvtrTakeoffNormal.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrTakeoffNormal.")
    
    _get_TakeoffClimbAngle_metadata = { "name" : "TakeoffClimbAngle",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def TakeoffClimbAngle(self) -> typing.Any:
        """The angle at which the aircraft will climb from the procedure site to the departure point."""
        return self._intf.get_property(IAgAvtrTakeoffNormal._metadata, IAgAvtrTakeoffNormal._get_TakeoffClimbAngle_metadata)

    _set_TakeoffClimbAngle_metadata = { "name" : "TakeoffClimbAngle",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @TakeoffClimbAngle.setter
    def TakeoffClimbAngle(self, inVal:typing.Any) -> None:
        """The angle at which the aircraft will climb from the procedure site to the departure point."""
        return self._intf.set_property(IAgAvtrTakeoffNormal._metadata, IAgAvtrTakeoffNormal._set_TakeoffClimbAngle_metadata, inVal)

    _get_DepartureAltitude_metadata = { "name" : "DepartureAltitude",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def DepartureAltitude(self) -> float:
        """The aircraft's altitude when it departs the runway."""
        return self._intf.get_property(IAgAvtrTakeoffNormal._metadata, IAgAvtrTakeoffNormal._get_DepartureAltitude_metadata)

    _set_DepartureAltitude_metadata = { "name" : "DepartureAltitude",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @DepartureAltitude.setter
    def DepartureAltitude(self, inVal:float) -> None:
        """The aircraft's altitude when it departs the runway."""
        return self._intf.set_property(IAgAvtrTakeoffNormal._metadata, IAgAvtrTakeoffNormal._set_DepartureAltitude_metadata, inVal)

    _get_UseRunwayTerrain_metadata = { "name" : "UseRunwayTerrain",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def UseRunwayTerrain(self) -> bool:
        """Opt whether to use terrain data to define the runway's ground level attitude."""
        return self._intf.get_property(IAgAvtrTakeoffNormal._metadata, IAgAvtrTakeoffNormal._get_UseRunwayTerrain_metadata)

    _set_UseRunwayTerrain_metadata = { "name" : "UseRunwayTerrain",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @UseRunwayTerrain.setter
    def UseRunwayTerrain(self, inVal:bool) -> None:
        """Opt whether to use terrain data to define the runway's ground level attitude."""
        return self._intf.set_property(IAgAvtrTakeoffNormal._metadata, IAgAvtrTakeoffNormal._set_UseRunwayTerrain_metadata, inVal)

    _get_RunwayAltitudeOffset_metadata = { "name" : "RunwayAltitudeOffset",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def RunwayAltitudeOffset(self) -> float:
        """The altitude offset above the ground level."""
        return self._intf.get_property(IAgAvtrTakeoffNormal._metadata, IAgAvtrTakeoffNormal._get_RunwayAltitudeOffset_metadata)

    _set_RunwayAltitudeOffset_metadata = { "name" : "RunwayAltitudeOffset",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @RunwayAltitudeOffset.setter
    def RunwayAltitudeOffset(self, inVal:float) -> None:
        """The altitude offset above the ground level."""
        return self._intf.set_property(IAgAvtrTakeoffNormal._metadata, IAgAvtrTakeoffNormal._set_RunwayAltitudeOffset_metadata, inVal)

    _get_HoldOnDeck_metadata = { "name" : "HoldOnDeck",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def HoldOnDeck(self) -> typing.Any:
        """The duration the aircraft will wait before beginning the takeoff."""
        return self._intf.get_property(IAgAvtrTakeoffNormal._metadata, IAgAvtrTakeoffNormal._get_HoldOnDeck_metadata)

    _set_HoldOnDeck_metadata = { "name" : "HoldOnDeck",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @HoldOnDeck.setter
    def HoldOnDeck(self, inVal:typing.Any) -> None:
        """The duration the aircraft will wait before beginning the takeoff."""
        return self._intf.set_property(IAgAvtrTakeoffNormal._metadata, IAgAvtrTakeoffNormal._set_HoldOnDeck_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{0a373629-d29b-4c4f-a59f-54fc567022cb}", IAgAvtrTakeoffNormal)
agcls.AgTypeNameMap["IAgAvtrTakeoffNormal"] = IAgAvtrTakeoffNormal

class IAgAvtrTakeoffDeparturePoint(object):
    """The interface used to access the options for a Departure Point takeoff mode. The mode must be set to Departure Point to access this interface."""
    _num_methods = 12
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{24e5949d-456b-4abb-9d46-7095d8ad0fb3}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_TakeoffClimbAngle" : 1,
                             "set_TakeoffClimbAngle" : 2,
                             "get_DepartureAltitude" : 3,
                             "set_DepartureAltitude" : 4,
                             "get_DeparturePointRange" : 5,
                             "set_DeparturePointRange" : 6,
                             "get_UseRunwayTerrain" : 7,
                             "set_UseRunwayTerrain" : 8,
                             "get_RunwayAltitudeOffset" : 9,
                             "set_RunwayAltitudeOffset" : 10,
                             "get_HoldOnDeck" : 11,
                             "set_HoldOnDeck" : 12, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrTakeoffDeparturePoint._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrTakeoffDeparturePoint from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrTakeoffDeparturePoint.__dict__ and type(IAgAvtrTakeoffDeparturePoint.__dict__[attrname]) == property:
            return IAgAvtrTakeoffDeparturePoint.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrTakeoffDeparturePoint.")
    
    _get_TakeoffClimbAngle_metadata = { "name" : "TakeoffClimbAngle",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def TakeoffClimbAngle(self) -> typing.Any:
        """The angle at which the aircraft will climb from the procedure site to the departure point."""
        return self._intf.get_property(IAgAvtrTakeoffDeparturePoint._metadata, IAgAvtrTakeoffDeparturePoint._get_TakeoffClimbAngle_metadata)

    _set_TakeoffClimbAngle_metadata = { "name" : "TakeoffClimbAngle",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @TakeoffClimbAngle.setter
    def TakeoffClimbAngle(self, inVal:typing.Any) -> None:
        """The angle at which the aircraft will climb from the procedure site to the departure point."""
        return self._intf.set_property(IAgAvtrTakeoffDeparturePoint._metadata, IAgAvtrTakeoffDeparturePoint._set_TakeoffClimbAngle_metadata, inVal)

    _get_DepartureAltitude_metadata = { "name" : "DepartureAltitude",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def DepartureAltitude(self) -> float:
        """The aircraft's altitude when it departs the runway."""
        return self._intf.get_property(IAgAvtrTakeoffDeparturePoint._metadata, IAgAvtrTakeoffDeparturePoint._get_DepartureAltitude_metadata)

    _set_DepartureAltitude_metadata = { "name" : "DepartureAltitude",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @DepartureAltitude.setter
    def DepartureAltitude(self, inVal:float) -> None:
        """The aircraft's altitude when it departs the runway."""
        return self._intf.set_property(IAgAvtrTakeoffDeparturePoint._metadata, IAgAvtrTakeoffDeparturePoint._set_DepartureAltitude_metadata, inVal)

    _get_DeparturePointRange_metadata = { "name" : "DeparturePointRange",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def DeparturePointRange(self) -> float:
        """The downrange distance the aircraft will travel when departing the runway."""
        return self._intf.get_property(IAgAvtrTakeoffDeparturePoint._metadata, IAgAvtrTakeoffDeparturePoint._get_DeparturePointRange_metadata)

    _set_DeparturePointRange_metadata = { "name" : "DeparturePointRange",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @DeparturePointRange.setter
    def DeparturePointRange(self, inVal:float) -> None:
        """The downrange distance the aircraft will travel when departing the runway."""
        return self._intf.set_property(IAgAvtrTakeoffDeparturePoint._metadata, IAgAvtrTakeoffDeparturePoint._set_DeparturePointRange_metadata, inVal)

    _get_UseRunwayTerrain_metadata = { "name" : "UseRunwayTerrain",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def UseRunwayTerrain(self) -> bool:
        """Opt whether to use terrain data to define the runway's ground level attitude."""
        return self._intf.get_property(IAgAvtrTakeoffDeparturePoint._metadata, IAgAvtrTakeoffDeparturePoint._get_UseRunwayTerrain_metadata)

    _set_UseRunwayTerrain_metadata = { "name" : "UseRunwayTerrain",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @UseRunwayTerrain.setter
    def UseRunwayTerrain(self, inVal:bool) -> None:
        """Opt whether to use terrain data to define the runway's ground level attitude."""
        return self._intf.set_property(IAgAvtrTakeoffDeparturePoint._metadata, IAgAvtrTakeoffDeparturePoint._set_UseRunwayTerrain_metadata, inVal)

    _get_RunwayAltitudeOffset_metadata = { "name" : "RunwayAltitudeOffset",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def RunwayAltitudeOffset(self) -> float:
        """The altitude offset above the ground level."""
        return self._intf.get_property(IAgAvtrTakeoffDeparturePoint._metadata, IAgAvtrTakeoffDeparturePoint._get_RunwayAltitudeOffset_metadata)

    _set_RunwayAltitudeOffset_metadata = { "name" : "RunwayAltitudeOffset",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @RunwayAltitudeOffset.setter
    def RunwayAltitudeOffset(self, inVal:float) -> None:
        """The altitude offset above the ground level."""
        return self._intf.set_property(IAgAvtrTakeoffDeparturePoint._metadata, IAgAvtrTakeoffDeparturePoint._set_RunwayAltitudeOffset_metadata, inVal)

    _get_HoldOnDeck_metadata = { "name" : "HoldOnDeck",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def HoldOnDeck(self) -> typing.Any:
        """The duration the aircraft will wait before beginning the takeoff."""
        return self._intf.get_property(IAgAvtrTakeoffDeparturePoint._metadata, IAgAvtrTakeoffDeparturePoint._get_HoldOnDeck_metadata)

    _set_HoldOnDeck_metadata = { "name" : "HoldOnDeck",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @HoldOnDeck.setter
    def HoldOnDeck(self, inVal:typing.Any) -> None:
        """The duration the aircraft will wait before beginning the takeoff."""
        return self._intf.set_property(IAgAvtrTakeoffDeparturePoint._metadata, IAgAvtrTakeoffDeparturePoint._set_HoldOnDeck_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{24e5949d-456b-4abb-9d46-7095d8ad0fb3}", IAgAvtrTakeoffDeparturePoint)
agcls.AgTypeNameMap["IAgAvtrTakeoffDeparturePoint"] = IAgAvtrTakeoffDeparturePoint

class IAgAvtrTakeoffLowTransition(object):
    """The interface used to access the options for a Low Transition takeoff mode. The mode must be set to Low Transition to access this interface."""
    _num_methods = 6
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{f205a7c2-5797-4e9f-aac6-7dfe110bcec0}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_UseRunwayTerrain" : 1,
                             "set_UseRunwayTerrain" : 2,
                             "get_RunwayAltitudeOffset" : 3,
                             "set_RunwayAltitudeOffset" : 4,
                             "get_HoldOnDeck" : 5,
                             "set_HoldOnDeck" : 6, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrTakeoffLowTransition._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrTakeoffLowTransition from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrTakeoffLowTransition.__dict__ and type(IAgAvtrTakeoffLowTransition.__dict__[attrname]) == property:
            return IAgAvtrTakeoffLowTransition.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrTakeoffLowTransition.")
    
    _get_UseRunwayTerrain_metadata = { "name" : "UseRunwayTerrain",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def UseRunwayTerrain(self) -> bool:
        """Opt whether to use terrain data to define the runway's ground level attitude."""
        return self._intf.get_property(IAgAvtrTakeoffLowTransition._metadata, IAgAvtrTakeoffLowTransition._get_UseRunwayTerrain_metadata)

    _set_UseRunwayTerrain_metadata = { "name" : "UseRunwayTerrain",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @UseRunwayTerrain.setter
    def UseRunwayTerrain(self, inVal:bool) -> None:
        """Opt whether to use terrain data to define the runway's ground level attitude."""
        return self._intf.set_property(IAgAvtrTakeoffLowTransition._metadata, IAgAvtrTakeoffLowTransition._set_UseRunwayTerrain_metadata, inVal)

    _get_RunwayAltitudeOffset_metadata = { "name" : "RunwayAltitudeOffset",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def RunwayAltitudeOffset(self) -> float:
        """The altitude offset above the ground level."""
        return self._intf.get_property(IAgAvtrTakeoffLowTransition._metadata, IAgAvtrTakeoffLowTransition._get_RunwayAltitudeOffset_metadata)

    _set_RunwayAltitudeOffset_metadata = { "name" : "RunwayAltitudeOffset",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @RunwayAltitudeOffset.setter
    def RunwayAltitudeOffset(self, inVal:float) -> None:
        """The altitude offset above the ground level."""
        return self._intf.set_property(IAgAvtrTakeoffLowTransition._metadata, IAgAvtrTakeoffLowTransition._set_RunwayAltitudeOffset_metadata, inVal)

    _get_HoldOnDeck_metadata = { "name" : "HoldOnDeck",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def HoldOnDeck(self) -> typing.Any:
        """The duration the aircraft will wait before beginning the takeoff."""
        return self._intf.get_property(IAgAvtrTakeoffLowTransition._metadata, IAgAvtrTakeoffLowTransition._get_HoldOnDeck_metadata)

    _set_HoldOnDeck_metadata = { "name" : "HoldOnDeck",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @HoldOnDeck.setter
    def HoldOnDeck(self, inVal:typing.Any) -> None:
        """The duration the aircraft will wait before beginning the takeoff."""
        return self._intf.set_property(IAgAvtrTakeoffLowTransition._metadata, IAgAvtrTakeoffLowTransition._set_HoldOnDeck_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{f205a7c2-5797-4e9f-aac6-7dfe110bcec0}", IAgAvtrTakeoffLowTransition)
agcls.AgTypeNameMap["IAgAvtrTakeoffLowTransition"] = IAgAvtrTakeoffLowTransition

class IAgAvtrRefStateForwardFlightOptions(object):
    """Interface used to access the forward flight options for a reference state procedure."""
    _num_methods = 33
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{f5baa380-d776-4591-a9c6-4836d6919165}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_AirspeedType" : 1,
                             "get_Airspeed" : 2,
                             "SetAirspeed" : 3,
                             "get_AltitudeRate" : 4,
                             "set_AltitudeRate" : 5,
                             "get_FlightPathAngle" : 6,
                             "set_FlightPathAngle" : 7,
                             "get_TASDot" : 8,
                             "get_GroundspeedDot" : 9,
                             "get_LongitudinalAccelType" : 10,
                             "SetLongitudinalAccel" : 11,
                             "get_Heading" : 12,
                             "set_Heading" : 13,
                             "get_HeadingIsMagnetic" : 14,
                             "set_HeadingIsMagnetic" : 15,
                             "get_Course" : 16,
                             "set_Course" : 17,
                             "get_CourseIsMagnetic" : 18,
                             "set_CourseIsMagnetic" : 19,
                             "get_HeadingDot" : 20,
                             "get_CourseDot" : 21,
                             "get_LateralAccelType" : 22,
                             "SetLateralAccel" : 23,
                             "get_RollAngle" : 24,
                             "set_RollAngle" : 25,
                             "get_AOA" : 26,
                             "set_AOA" : 27,
                             "get_Sideslip" : 28,
                             "set_Sideslip" : 29,
                             "get_PitchRate" : 30,
                             "get_PushPullG" : 31,
                             "get_AttitudeRateType" : 32,
                             "SetAttitudeRate" : 33, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrRefStateForwardFlightOptions._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrRefStateForwardFlightOptions from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrRefStateForwardFlightOptions.__dict__ and type(IAgAvtrRefStateForwardFlightOptions.__dict__[attrname]) == property:
            return IAgAvtrRefStateForwardFlightOptions.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrRefStateForwardFlightOptions.")
    
    _get_AirspeedType_metadata = { "name" : "AirspeedType",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrAirspeedType),) }
    @property
    def AirspeedType(self) -> "AgEAvtrAirspeedType":
        """The airspeed type."""
        return self._intf.get_property(IAgAvtrRefStateForwardFlightOptions._metadata, IAgAvtrRefStateForwardFlightOptions._get_AirspeedType_metadata)

    _get_Airspeed_metadata = { "name" : "Airspeed",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def Airspeed(self) -> float:
        """The goal airspeed for the launch."""
        return self._intf.get_property(IAgAvtrRefStateForwardFlightOptions._metadata, IAgAvtrRefStateForwardFlightOptions._get_Airspeed_metadata)

    _SetAirspeed_metadata = { "name" : "SetAirspeed",
            "arg_types" : (agcom.LONG, agcom.DOUBLE,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrAirspeedType), agmarshall.DOUBLE_arg,) }
    def SetAirspeed(self, airspeedType:"AgEAvtrAirspeedType", airspeed:float) -> None:
        """Set the launch airspeed."""
        return self._intf.invoke(IAgAvtrRefStateForwardFlightOptions._metadata, IAgAvtrRefStateForwardFlightOptions._SetAirspeed_metadata, airspeedType, airspeed)

    _get_AltitudeRate_metadata = { "name" : "AltitudeRate",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def AltitudeRate(self) -> float:
        """The rate at which the aircraft will climb or descend."""
        return self._intf.get_property(IAgAvtrRefStateForwardFlightOptions._metadata, IAgAvtrRefStateForwardFlightOptions._get_AltitudeRate_metadata)

    _set_AltitudeRate_metadata = { "name" : "AltitudeRate",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @AltitudeRate.setter
    def AltitudeRate(self, newVal:float) -> None:
        """The rate at which the aircraft will climb or descend."""
        return self._intf.set_property(IAgAvtrRefStateForwardFlightOptions._metadata, IAgAvtrRefStateForwardFlightOptions._set_AltitudeRate_metadata, newVal)

    _get_FlightPathAngle_metadata = { "name" : "FlightPathAngle",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def FlightPathAngle(self) -> typing.Any:
        """The initial pitch angle of the flight path."""
        return self._intf.get_property(IAgAvtrRefStateForwardFlightOptions._metadata, IAgAvtrRefStateForwardFlightOptions._get_FlightPathAngle_metadata)

    _set_FlightPathAngle_metadata = { "name" : "FlightPathAngle",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @FlightPathAngle.setter
    def FlightPathAngle(self, newVal:typing.Any) -> None:
        """The initial pitch angle of the flight path."""
        return self._intf.set_property(IAgAvtrRefStateForwardFlightOptions._metadata, IAgAvtrRefStateForwardFlightOptions._set_FlightPathAngle_metadata, newVal)

    _get_TASDot_metadata = { "name" : "TASDot",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def TASDot(self) -> float:
        """The true airspeed acceleration."""
        return self._intf.get_property(IAgAvtrRefStateForwardFlightOptions._metadata, IAgAvtrRefStateForwardFlightOptions._get_TASDot_metadata)

    _get_GroundspeedDot_metadata = { "name" : "GroundspeedDot",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def GroundspeedDot(self) -> float:
        """The groundspeed acceleration."""
        return self._intf.get_property(IAgAvtrRefStateForwardFlightOptions._metadata, IAgAvtrRefStateForwardFlightOptions._get_GroundspeedDot_metadata)

    _get_LongitudinalAccelType_metadata = { "name" : "LongitudinalAccelType",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrRefStateLongitudinalAccelMode),) }
    @property
    def LongitudinalAccelType(self) -> "AgEAvtrRefStateLongitudinalAccelMode":
        """The mode to specify the longitudinal acceleration."""
        return self._intf.get_property(IAgAvtrRefStateForwardFlightOptions._metadata, IAgAvtrRefStateForwardFlightOptions._get_LongitudinalAccelType_metadata)

    _SetLongitudinalAccel_metadata = { "name" : "SetLongitudinalAccel",
            "arg_types" : (agcom.LONG, agcom.DOUBLE,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrRefStateLongitudinalAccelMode), agmarshall.DOUBLE_arg,) }
    def SetLongitudinalAccel(self, accelType:"AgEAvtrRefStateLongitudinalAccelMode", value:float) -> None:
        """Set the longitudinal acceleration."""
        return self._intf.invoke(IAgAvtrRefStateForwardFlightOptions._metadata, IAgAvtrRefStateForwardFlightOptions._SetLongitudinalAccel_metadata, accelType, value)

    _get_Heading_metadata = { "name" : "Heading",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def Heading(self) -> typing.Any:
        """The direction the aircraft is pointing."""
        return self._intf.get_property(IAgAvtrRefStateForwardFlightOptions._metadata, IAgAvtrRefStateForwardFlightOptions._get_Heading_metadata)

    _set_Heading_metadata = { "name" : "Heading",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @Heading.setter
    def Heading(self, newVal:typing.Any) -> None:
        """The direction the aircraft is pointing."""
        return self._intf.set_property(IAgAvtrRefStateForwardFlightOptions._metadata, IAgAvtrRefStateForwardFlightOptions._set_Heading_metadata, newVal)

    _get_HeadingIsMagnetic_metadata = { "name" : "HeadingIsMagnetic",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def HeadingIsMagnetic(self) -> bool:
        """Opt whether to specify the heading using magnetic North."""
        return self._intf.get_property(IAgAvtrRefStateForwardFlightOptions._metadata, IAgAvtrRefStateForwardFlightOptions._get_HeadingIsMagnetic_metadata)

    _set_HeadingIsMagnetic_metadata = { "name" : "HeadingIsMagnetic",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @HeadingIsMagnetic.setter
    def HeadingIsMagnetic(self, newVal:bool) -> None:
        """Opt whether to specify the heading using magnetic North."""
        return self._intf.set_property(IAgAvtrRefStateForwardFlightOptions._metadata, IAgAvtrRefStateForwardFlightOptions._set_HeadingIsMagnetic_metadata, newVal)

    _get_Course_metadata = { "name" : "Course",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def Course(self) -> typing.Any:
        """The direction the aircraft is traveling."""
        return self._intf.get_property(IAgAvtrRefStateForwardFlightOptions._metadata, IAgAvtrRefStateForwardFlightOptions._get_Course_metadata)

    _set_Course_metadata = { "name" : "Course",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @Course.setter
    def Course(self, newVal:typing.Any) -> None:
        """The direction the aircraft is traveling."""
        return self._intf.set_property(IAgAvtrRefStateForwardFlightOptions._metadata, IAgAvtrRefStateForwardFlightOptions._set_Course_metadata, newVal)

    _get_CourseIsMagnetic_metadata = { "name" : "CourseIsMagnetic",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def CourseIsMagnetic(self) -> bool:
        """Opt whether to specify the course using magnetic North."""
        return self._intf.get_property(IAgAvtrRefStateForwardFlightOptions._metadata, IAgAvtrRefStateForwardFlightOptions._get_CourseIsMagnetic_metadata)

    _set_CourseIsMagnetic_metadata = { "name" : "CourseIsMagnetic",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @CourseIsMagnetic.setter
    def CourseIsMagnetic(self, newVal:bool) -> None:
        """Opt whether to specify the course using magnetic North."""
        return self._intf.set_property(IAgAvtrRefStateForwardFlightOptions._metadata, IAgAvtrRefStateForwardFlightOptions._set_CourseIsMagnetic_metadata, newVal)

    _get_HeadingDot_metadata = { "name" : "HeadingDot",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def HeadingDot(self) -> typing.Any:
        """The heading rate of change."""
        return self._intf.get_property(IAgAvtrRefStateForwardFlightOptions._metadata, IAgAvtrRefStateForwardFlightOptions._get_HeadingDot_metadata)

    _get_CourseDot_metadata = { "name" : "CourseDot",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def CourseDot(self) -> typing.Any:
        """The course rate of change."""
        return self._intf.get_property(IAgAvtrRefStateForwardFlightOptions._metadata, IAgAvtrRefStateForwardFlightOptions._get_CourseDot_metadata)

    _get_LateralAccelType_metadata = { "name" : "LateralAccelType",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrRefStateLateralAccelMode),) }
    @property
    def LateralAccelType(self) -> "AgEAvtrRefStateLateralAccelMode":
        """The mode to specify the lateral acceleration."""
        return self._intf.get_property(IAgAvtrRefStateForwardFlightOptions._metadata, IAgAvtrRefStateForwardFlightOptions._get_LateralAccelType_metadata)

    _SetLateralAccel_metadata = { "name" : "SetLateralAccel",
            "arg_types" : (agcom.LONG, agcom.VARIANT,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrRefStateLateralAccelMode), agmarshall.VARIANT_arg,) }
    def SetLateralAccel(self, accelType:"AgEAvtrRefStateLateralAccelMode", value:typing.Any) -> None:
        """Set the lateral acceleration."""
        return self._intf.invoke(IAgAvtrRefStateForwardFlightOptions._metadata, IAgAvtrRefStateForwardFlightOptions._SetLateralAccel_metadata, accelType, value)

    _get_RollAngle_metadata = { "name" : "RollAngle",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def RollAngle(self) -> typing.Any:
        """The aircraft's bank angle."""
        return self._intf.get_property(IAgAvtrRefStateForwardFlightOptions._metadata, IAgAvtrRefStateForwardFlightOptions._get_RollAngle_metadata)

    _set_RollAngle_metadata = { "name" : "RollAngle",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @RollAngle.setter
    def RollAngle(self, newVal:typing.Any) -> None:
        """The aircraft's bank angle."""
        return self._intf.set_property(IAgAvtrRefStateForwardFlightOptions._metadata, IAgAvtrRefStateForwardFlightOptions._set_RollAngle_metadata, newVal)

    _get_AOA_metadata = { "name" : "AOA",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def AOA(self) -> typing.Any:
        """The aircraft's angle of attack."""
        return self._intf.get_property(IAgAvtrRefStateForwardFlightOptions._metadata, IAgAvtrRefStateForwardFlightOptions._get_AOA_metadata)

    _set_AOA_metadata = { "name" : "AOA",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @AOA.setter
    def AOA(self, newVal:typing.Any) -> None:
        """The aircraft's angle of attack."""
        return self._intf.set_property(IAgAvtrRefStateForwardFlightOptions._metadata, IAgAvtrRefStateForwardFlightOptions._set_AOA_metadata, newVal)

    _get_Sideslip_metadata = { "name" : "Sideslip",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def Sideslip(self) -> typing.Any:
        """The aircraft's yaw angle."""
        return self._intf.get_property(IAgAvtrRefStateForwardFlightOptions._metadata, IAgAvtrRefStateForwardFlightOptions._get_Sideslip_metadata)

    _set_Sideslip_metadata = { "name" : "Sideslip",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @Sideslip.setter
    def Sideslip(self, newVal:typing.Any) -> None:
        """The aircraft's yaw angle"""
        return self._intf.set_property(IAgAvtrRefStateForwardFlightOptions._metadata, IAgAvtrRefStateForwardFlightOptions._set_Sideslip_metadata, newVal)

    _get_PitchRate_metadata = { "name" : "PitchRate",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def PitchRate(self) -> typing.Any:
        """The aircraft's pitch rate."""
        return self._intf.get_property(IAgAvtrRefStateForwardFlightOptions._metadata, IAgAvtrRefStateForwardFlightOptions._get_PitchRate_metadata)

    _get_PushPullG_metadata = { "name" : "PushPullG",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def PushPullG(self) -> float:
        """The G force on the aircraft resulting from its attitude."""
        return self._intf.get_property(IAgAvtrRefStateForwardFlightOptions._metadata, IAgAvtrRefStateForwardFlightOptions._get_PushPullG_metadata)

    _get_AttitudeRateType_metadata = { "name" : "AttitudeRateType",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrRefStateAttitudeMode),) }
    @property
    def AttitudeRateType(self) -> "AgEAvtrRefStateAttitudeMode":
        """The mode to specify the vertical attitude rate."""
        return self._intf.get_property(IAgAvtrRefStateForwardFlightOptions._metadata, IAgAvtrRefStateForwardFlightOptions._get_AttitudeRateType_metadata)

    _SetAttitudeRate_metadata = { "name" : "SetAttitudeRate",
            "arg_types" : (agcom.LONG, agcom.VARIANT,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrRefStateAttitudeMode), agmarshall.VARIANT_arg,) }
    def SetAttitudeRate(self, attitudeRateType:"AgEAvtrRefStateAttitudeMode", value:typing.Any) -> None:
        """Set the vertical attitude rate."""
        return self._intf.invoke(IAgAvtrRefStateForwardFlightOptions._metadata, IAgAvtrRefStateForwardFlightOptions._SetAttitudeRate_metadata, attitudeRateType, value)


agcls.AgClassCatalog.add_catalog_entry("{f5baa380-d776-4591-a9c6-4836d6919165}", IAgAvtrRefStateForwardFlightOptions)
agcls.AgTypeNameMap["IAgAvtrRefStateForwardFlightOptions"] = IAgAvtrRefStateForwardFlightOptions

class IAgAvtrRefStateHoverOptions(object):
    """Interface used to access the hover options for a reference state procedure."""
    _num_methods = 28
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{42eb7689-e629-44f0-b832-44dcbecbeb3e}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_Groundspeed" : 1,
                             "set_Groundspeed" : 2,
                             "get_AltitudeRate" : 3,
                             "set_AltitudeRate" : 4,
                             "get_TASDot" : 5,
                             "get_GroundspeedDot" : 6,
                             "get_LongitudinalAccelType" : 7,
                             "SetLongitudinalAccel" : 8,
                             "get_Heading" : 9,
                             "set_Heading" : 10,
                             "get_HeadingIsMagnetic" : 11,
                             "set_HeadingIsMagnetic" : 12,
                             "get_Course" : 13,
                             "set_Course" : 14,
                             "get_CourseIsMagnetic" : 15,
                             "set_CourseIsMagnetic" : 16,
                             "get_HeadingDot" : 17,
                             "set_HeadingDot" : 18,
                             "get_CourseDot" : 19,
                             "set_CourseDot" : 20,
                             "get_RollAngle" : 21,
                             "set_RollAngle" : 22,
                             "get_AOA" : 23,
                             "set_AOA" : 24,
                             "get_PitchRate" : 25,
                             "get_PushPullG" : 26,
                             "get_AttitudeRateType" : 27,
                             "SetAttitudeRate" : 28, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrRefStateHoverOptions._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrRefStateHoverOptions from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrRefStateHoverOptions.__dict__ and type(IAgAvtrRefStateHoverOptions.__dict__[attrname]) == property:
            return IAgAvtrRefStateHoverOptions.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrRefStateHoverOptions.")
    
    _get_Groundspeed_metadata = { "name" : "Groundspeed",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def Groundspeed(self) -> float:
        """The aircraft's speed relative to the ground."""
        return self._intf.get_property(IAgAvtrRefStateHoverOptions._metadata, IAgAvtrRefStateHoverOptions._get_Groundspeed_metadata)

    _set_Groundspeed_metadata = { "name" : "Groundspeed",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @Groundspeed.setter
    def Groundspeed(self, newVal:float) -> None:
        """The aircraft's speed relative to the ground."""
        return self._intf.set_property(IAgAvtrRefStateHoverOptions._metadata, IAgAvtrRefStateHoverOptions._set_Groundspeed_metadata, newVal)

    _get_AltitudeRate_metadata = { "name" : "AltitudeRate",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def AltitudeRate(self) -> float:
        """The rate at which the aircraft will climb or descend."""
        return self._intf.get_property(IAgAvtrRefStateHoverOptions._metadata, IAgAvtrRefStateHoverOptions._get_AltitudeRate_metadata)

    _set_AltitudeRate_metadata = { "name" : "AltitudeRate",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @AltitudeRate.setter
    def AltitudeRate(self, newVal:float) -> None:
        """The rate at which the aircraft will climb or descend."""
        return self._intf.set_property(IAgAvtrRefStateHoverOptions._metadata, IAgAvtrRefStateHoverOptions._set_AltitudeRate_metadata, newVal)

    _get_TASDot_metadata = { "name" : "TASDot",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def TASDot(self) -> float:
        """The true airspeed acceleration."""
        return self._intf.get_property(IAgAvtrRefStateHoverOptions._metadata, IAgAvtrRefStateHoverOptions._get_TASDot_metadata)

    _get_GroundspeedDot_metadata = { "name" : "GroundspeedDot",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def GroundspeedDot(self) -> float:
        """The groundspeed acceleration."""
        return self._intf.get_property(IAgAvtrRefStateHoverOptions._metadata, IAgAvtrRefStateHoverOptions._get_GroundspeedDot_metadata)

    _get_LongitudinalAccelType_metadata = { "name" : "LongitudinalAccelType",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrRefStateLongitudinalAccelMode),) }
    @property
    def LongitudinalAccelType(self) -> "AgEAvtrRefStateLongitudinalAccelMode":
        """The mode to specify the longitudinal acceleration."""
        return self._intf.get_property(IAgAvtrRefStateHoverOptions._metadata, IAgAvtrRefStateHoverOptions._get_LongitudinalAccelType_metadata)

    _SetLongitudinalAccel_metadata = { "name" : "SetLongitudinalAccel",
            "arg_types" : (agcom.LONG, agcom.DOUBLE,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrRefStateLongitudinalAccelMode), agmarshall.DOUBLE_arg,) }
    def SetLongitudinalAccel(self, accelType:"AgEAvtrRefStateLongitudinalAccelMode", value:float) -> None:
        """Set the longitudinal acceleration."""
        return self._intf.invoke(IAgAvtrRefStateHoverOptions._metadata, IAgAvtrRefStateHoverOptions._SetLongitudinalAccel_metadata, accelType, value)

    _get_Heading_metadata = { "name" : "Heading",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def Heading(self) -> typing.Any:
        """The direction the aircraft is pointing."""
        return self._intf.get_property(IAgAvtrRefStateHoverOptions._metadata, IAgAvtrRefStateHoverOptions._get_Heading_metadata)

    _set_Heading_metadata = { "name" : "Heading",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @Heading.setter
    def Heading(self, newVal:typing.Any) -> None:
        """The direction the aircraft is pointing."""
        return self._intf.set_property(IAgAvtrRefStateHoverOptions._metadata, IAgAvtrRefStateHoverOptions._set_Heading_metadata, newVal)

    _get_HeadingIsMagnetic_metadata = { "name" : "HeadingIsMagnetic",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def HeadingIsMagnetic(self) -> bool:
        """Opt whether to specify the heading using magnetic North."""
        return self._intf.get_property(IAgAvtrRefStateHoverOptions._metadata, IAgAvtrRefStateHoverOptions._get_HeadingIsMagnetic_metadata)

    _set_HeadingIsMagnetic_metadata = { "name" : "HeadingIsMagnetic",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @HeadingIsMagnetic.setter
    def HeadingIsMagnetic(self, newVal:bool) -> None:
        """Opt whether to specify the heading using magnetic North."""
        return self._intf.set_property(IAgAvtrRefStateHoverOptions._metadata, IAgAvtrRefStateHoverOptions._set_HeadingIsMagnetic_metadata, newVal)

    _get_Course_metadata = { "name" : "Course",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def Course(self) -> typing.Any:
        """The direction the aircraft is traveling."""
        return self._intf.get_property(IAgAvtrRefStateHoverOptions._metadata, IAgAvtrRefStateHoverOptions._get_Course_metadata)

    _set_Course_metadata = { "name" : "Course",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @Course.setter
    def Course(self, newVal:typing.Any) -> None:
        """The direction the aircraft is traveling."""
        return self._intf.set_property(IAgAvtrRefStateHoverOptions._metadata, IAgAvtrRefStateHoverOptions._set_Course_metadata, newVal)

    _get_CourseIsMagnetic_metadata = { "name" : "CourseIsMagnetic",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def CourseIsMagnetic(self) -> bool:
        """Opt whether to specify the course using magnetic North."""
        return self._intf.get_property(IAgAvtrRefStateHoverOptions._metadata, IAgAvtrRefStateHoverOptions._get_CourseIsMagnetic_metadata)

    _set_CourseIsMagnetic_metadata = { "name" : "CourseIsMagnetic",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @CourseIsMagnetic.setter
    def CourseIsMagnetic(self, newVal:bool) -> None:
        """Opt whether to specify the course using magnetic North."""
        return self._intf.set_property(IAgAvtrRefStateHoverOptions._metadata, IAgAvtrRefStateHoverOptions._set_CourseIsMagnetic_metadata, newVal)

    _get_HeadingDot_metadata = { "name" : "HeadingDot",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def HeadingDot(self) -> typing.Any:
        """The heading rate of change."""
        return self._intf.get_property(IAgAvtrRefStateHoverOptions._metadata, IAgAvtrRefStateHoverOptions._get_HeadingDot_metadata)

    _set_HeadingDot_metadata = { "name" : "HeadingDot",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @HeadingDot.setter
    def HeadingDot(self, newVal:typing.Any) -> None:
        """The heading rate of change."""
        return self._intf.set_property(IAgAvtrRefStateHoverOptions._metadata, IAgAvtrRefStateHoverOptions._set_HeadingDot_metadata, newVal)

    _get_CourseDot_metadata = { "name" : "CourseDot",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def CourseDot(self) -> typing.Any:
        """The course rate of change."""
        return self._intf.get_property(IAgAvtrRefStateHoverOptions._metadata, IAgAvtrRefStateHoverOptions._get_CourseDot_metadata)

    _set_CourseDot_metadata = { "name" : "CourseDot",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @CourseDot.setter
    def CourseDot(self, newVal:typing.Any) -> None:
        """The course rate of change."""
        return self._intf.set_property(IAgAvtrRefStateHoverOptions._metadata, IAgAvtrRefStateHoverOptions._set_CourseDot_metadata, newVal)

    _get_RollAngle_metadata = { "name" : "RollAngle",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def RollAngle(self) -> typing.Any:
        """The aircraft's bank angle."""
        return self._intf.get_property(IAgAvtrRefStateHoverOptions._metadata, IAgAvtrRefStateHoverOptions._get_RollAngle_metadata)

    _set_RollAngle_metadata = { "name" : "RollAngle",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @RollAngle.setter
    def RollAngle(self, newVal:typing.Any) -> None:
        """The aircraft's bank angle."""
        return self._intf.set_property(IAgAvtrRefStateHoverOptions._metadata, IAgAvtrRefStateHoverOptions._set_RollAngle_metadata, newVal)

    _get_AOA_metadata = { "name" : "AOA",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def AOA(self) -> typing.Any:
        """The aircraft's angle of attack."""
        return self._intf.get_property(IAgAvtrRefStateHoverOptions._metadata, IAgAvtrRefStateHoverOptions._get_AOA_metadata)

    _set_AOA_metadata = { "name" : "AOA",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @AOA.setter
    def AOA(self, newVal:typing.Any) -> None:
        """The aircraft's angle of attack."""
        return self._intf.set_property(IAgAvtrRefStateHoverOptions._metadata, IAgAvtrRefStateHoverOptions._set_AOA_metadata, newVal)

    _get_PitchRate_metadata = { "name" : "PitchRate",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def PitchRate(self) -> typing.Any:
        """The aircraft's pitch rate."""
        return self._intf.get_property(IAgAvtrRefStateHoverOptions._metadata, IAgAvtrRefStateHoverOptions._get_PitchRate_metadata)

    _get_PushPullG_metadata = { "name" : "PushPullG",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def PushPullG(self) -> float:
        """The G force on the aircraft resulting from its attitude."""
        return self._intf.get_property(IAgAvtrRefStateHoverOptions._metadata, IAgAvtrRefStateHoverOptions._get_PushPullG_metadata)

    _get_AttitudeRateType_metadata = { "name" : "AttitudeRateType",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrRefStateAttitudeMode),) }
    @property
    def AttitudeRateType(self) -> "AgEAvtrRefStateAttitudeMode":
        """The mode to specify the vertical attitude rate."""
        return self._intf.get_property(IAgAvtrRefStateHoverOptions._metadata, IAgAvtrRefStateHoverOptions._get_AttitudeRateType_metadata)

    _SetAttitudeRate_metadata = { "name" : "SetAttitudeRate",
            "arg_types" : (agcom.LONG, agcom.VARIANT,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrRefStateAttitudeMode), agmarshall.VARIANT_arg,) }
    def SetAttitudeRate(self, attitudeRateType:"AgEAvtrRefStateAttitudeMode", value:typing.Any) -> None:
        """Set the vertical attitude rate."""
        return self._intf.invoke(IAgAvtrRefStateHoverOptions._metadata, IAgAvtrRefStateHoverOptions._SetAttitudeRate_metadata, attitudeRateType, value)


agcls.AgClassCatalog.add_catalog_entry("{42eb7689-e629-44f0-b832-44dcbecbeb3e}", IAgAvtrRefStateHoverOptions)
agcls.AgTypeNameMap["IAgAvtrRefStateHoverOptions"] = IAgAvtrRefStateHoverOptions

class IAgAvtrRefStateWeightOnWheelsOptions(object):
    """Interface used to access the weight on wheels options for a reference state procedure."""
    _num_methods = 14
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{14db8803-47cd-4009-b496-13caaa53babe}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_Groundspeed" : 1,
                             "set_Groundspeed" : 2,
                             "get_TASDot" : 3,
                             "get_GroundspeedDot" : 4,
                             "get_LongitudinalAccelType" : 5,
                             "SetLongitudinalAccel" : 6,
                             "get_Heading" : 7,
                             "set_Heading" : 8,
                             "get_HeadingIsMagnetic" : 9,
                             "set_HeadingIsMagnetic" : 10,
                             "get_HeadingDot" : 11,
                             "get_CourseDot" : 12,
                             "get_LateralAccelType" : 13,
                             "SetLateralAccel" : 14, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrRefStateWeightOnWheelsOptions._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrRefStateWeightOnWheelsOptions from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrRefStateWeightOnWheelsOptions.__dict__ and type(IAgAvtrRefStateWeightOnWheelsOptions.__dict__[attrname]) == property:
            return IAgAvtrRefStateWeightOnWheelsOptions.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrRefStateWeightOnWheelsOptions.")
    
    _get_Groundspeed_metadata = { "name" : "Groundspeed",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def Groundspeed(self) -> float:
        """The aircraft's speed relative to the ground."""
        return self._intf.get_property(IAgAvtrRefStateWeightOnWheelsOptions._metadata, IAgAvtrRefStateWeightOnWheelsOptions._get_Groundspeed_metadata)

    _set_Groundspeed_metadata = { "name" : "Groundspeed",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @Groundspeed.setter
    def Groundspeed(self, newVal:float) -> None:
        """The aircraft's speed relative to the ground."""
        return self._intf.set_property(IAgAvtrRefStateWeightOnWheelsOptions._metadata, IAgAvtrRefStateWeightOnWheelsOptions._set_Groundspeed_metadata, newVal)

    _get_TASDot_metadata = { "name" : "TASDot",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def TASDot(self) -> float:
        """The true airspeed acceleration."""
        return self._intf.get_property(IAgAvtrRefStateWeightOnWheelsOptions._metadata, IAgAvtrRefStateWeightOnWheelsOptions._get_TASDot_metadata)

    _get_GroundspeedDot_metadata = { "name" : "GroundspeedDot",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def GroundspeedDot(self) -> float:
        """The groundspeed acceleration."""
        return self._intf.get_property(IAgAvtrRefStateWeightOnWheelsOptions._metadata, IAgAvtrRefStateWeightOnWheelsOptions._get_GroundspeedDot_metadata)

    _get_LongitudinalAccelType_metadata = { "name" : "LongitudinalAccelType",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrRefStateLongitudinalAccelMode),) }
    @property
    def LongitudinalAccelType(self) -> "AgEAvtrRefStateLongitudinalAccelMode":
        """The mode to specify the longitudinal acceleration."""
        return self._intf.get_property(IAgAvtrRefStateWeightOnWheelsOptions._metadata, IAgAvtrRefStateWeightOnWheelsOptions._get_LongitudinalAccelType_metadata)

    _SetLongitudinalAccel_metadata = { "name" : "SetLongitudinalAccel",
            "arg_types" : (agcom.LONG, agcom.DOUBLE,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrRefStateLongitudinalAccelMode), agmarshall.DOUBLE_arg,) }
    def SetLongitudinalAccel(self, accelType:"AgEAvtrRefStateLongitudinalAccelMode", value:float) -> None:
        """Set the longitudinal acceleration."""
        return self._intf.invoke(IAgAvtrRefStateWeightOnWheelsOptions._metadata, IAgAvtrRefStateWeightOnWheelsOptions._SetLongitudinalAccel_metadata, accelType, value)

    _get_Heading_metadata = { "name" : "Heading",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def Heading(self) -> typing.Any:
        """The direction the aircraft is pointing."""
        return self._intf.get_property(IAgAvtrRefStateWeightOnWheelsOptions._metadata, IAgAvtrRefStateWeightOnWheelsOptions._get_Heading_metadata)

    _set_Heading_metadata = { "name" : "Heading",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @Heading.setter
    def Heading(self, newVal:typing.Any) -> None:
        """The direction the aircraft is pointing."""
        return self._intf.set_property(IAgAvtrRefStateWeightOnWheelsOptions._metadata, IAgAvtrRefStateWeightOnWheelsOptions._set_Heading_metadata, newVal)

    _get_HeadingIsMagnetic_metadata = { "name" : "HeadingIsMagnetic",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def HeadingIsMagnetic(self) -> bool:
        """Opt whether to specify the heading using magnetic North."""
        return self._intf.get_property(IAgAvtrRefStateWeightOnWheelsOptions._metadata, IAgAvtrRefStateWeightOnWheelsOptions._get_HeadingIsMagnetic_metadata)

    _set_HeadingIsMagnetic_metadata = { "name" : "HeadingIsMagnetic",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @HeadingIsMagnetic.setter
    def HeadingIsMagnetic(self, newVal:bool) -> None:
        """Opt whether to specify the heading using magnetic North."""
        return self._intf.set_property(IAgAvtrRefStateWeightOnWheelsOptions._metadata, IAgAvtrRefStateWeightOnWheelsOptions._set_HeadingIsMagnetic_metadata, newVal)

    _get_HeadingDot_metadata = { "name" : "HeadingDot",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def HeadingDot(self) -> typing.Any:
        """The heading rate of change."""
        return self._intf.get_property(IAgAvtrRefStateWeightOnWheelsOptions._metadata, IAgAvtrRefStateWeightOnWheelsOptions._get_HeadingDot_metadata)

    _get_CourseDot_metadata = { "name" : "CourseDot",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def CourseDot(self) -> typing.Any:
        """The course rate of change."""
        return self._intf.get_property(IAgAvtrRefStateWeightOnWheelsOptions._metadata, IAgAvtrRefStateWeightOnWheelsOptions._get_CourseDot_metadata)

    _get_LateralAccelType_metadata = { "name" : "LateralAccelType",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrRefStateLateralAccelMode),) }
    @property
    def LateralAccelType(self) -> "AgEAvtrRefStateLateralAccelMode":
        """The mode to specify the lateral acceleration."""
        return self._intf.get_property(IAgAvtrRefStateWeightOnWheelsOptions._metadata, IAgAvtrRefStateWeightOnWheelsOptions._get_LateralAccelType_metadata)

    _SetLateralAccel_metadata = { "name" : "SetLateralAccel",
            "arg_types" : (agcom.LONG, agcom.VARIANT,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrRefStateLateralAccelMode), agmarshall.VARIANT_arg,) }
    def SetLateralAccel(self, accelType:"AgEAvtrRefStateLateralAccelMode", value:typing.Any) -> None:
        """Set the lateral acceleration."""
        return self._intf.invoke(IAgAvtrRefStateWeightOnWheelsOptions._metadata, IAgAvtrRefStateWeightOnWheelsOptions._SetLateralAccel_metadata, accelType, value)


agcls.AgClassCatalog.add_catalog_entry("{14db8803-47cd-4009-b496-13caaa53babe}", IAgAvtrRefStateWeightOnWheelsOptions)
agcls.AgTypeNameMap["IAgAvtrRefStateWeightOnWheelsOptions"] = IAgAvtrRefStateWeightOnWheelsOptions

class IAgAvtrRefStateTakeoffLandingOptions(object):
    """Interface used to access the takeoff or landing options for a reference state procedure."""
    _num_methods = 33
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{b510a16b-3a33-408e-bed8-33dd61b76617}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_AirspeedType" : 1,
                             "get_Airspeed" : 2,
                             "SetAirspeed" : 3,
                             "get_AltitudeRate" : 4,
                             "set_AltitudeRate" : 5,
                             "get_FlightPathAngle" : 6,
                             "set_FlightPathAngle" : 7,
                             "get_TASDot" : 8,
                             "get_GroundspeedDot" : 9,
                             "get_LongitudinalAccelType" : 10,
                             "SetLongitudinalAccel" : 11,
                             "get_Heading" : 12,
                             "set_Heading" : 13,
                             "get_HeadingIsMagnetic" : 14,
                             "set_HeadingIsMagnetic" : 15,
                             "get_Course" : 16,
                             "set_Course" : 17,
                             "get_CourseIsMagnetic" : 18,
                             "set_CourseIsMagnetic" : 19,
                             "get_HeadingDot" : 20,
                             "get_CourseDot" : 21,
                             "get_LateralAccelType" : 22,
                             "SetLateralAccel" : 23,
                             "get_RollAngle" : 24,
                             "set_RollAngle" : 25,
                             "get_AOA" : 26,
                             "set_AOA" : 27,
                             "get_Sideslip" : 28,
                             "set_Sideslip" : 29,
                             "get_PitchRate" : 30,
                             "get_PushPullG" : 31,
                             "get_AttitudeRateType" : 32,
                             "SetAttitudeRate" : 33, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrRefStateTakeoffLandingOptions._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrRefStateTakeoffLandingOptions from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrRefStateTakeoffLandingOptions.__dict__ and type(IAgAvtrRefStateTakeoffLandingOptions.__dict__[attrname]) == property:
            return IAgAvtrRefStateTakeoffLandingOptions.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrRefStateTakeoffLandingOptions.")
    
    _get_AirspeedType_metadata = { "name" : "AirspeedType",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrAirspeedType),) }
    @property
    def AirspeedType(self) -> "AgEAvtrAirspeedType":
        """The airspeed type."""
        return self._intf.get_property(IAgAvtrRefStateTakeoffLandingOptions._metadata, IAgAvtrRefStateTakeoffLandingOptions._get_AirspeedType_metadata)

    _get_Airspeed_metadata = { "name" : "Airspeed",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def Airspeed(self) -> float:
        """The goal airspeed for the launch."""
        return self._intf.get_property(IAgAvtrRefStateTakeoffLandingOptions._metadata, IAgAvtrRefStateTakeoffLandingOptions._get_Airspeed_metadata)

    _SetAirspeed_metadata = { "name" : "SetAirspeed",
            "arg_types" : (agcom.LONG, agcom.DOUBLE,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrAirspeedType), agmarshall.DOUBLE_arg,) }
    def SetAirspeed(self, airspeedType:"AgEAvtrAirspeedType", airspeed:float) -> None:
        """Set the launch airspeed."""
        return self._intf.invoke(IAgAvtrRefStateTakeoffLandingOptions._metadata, IAgAvtrRefStateTakeoffLandingOptions._SetAirspeed_metadata, airspeedType, airspeed)

    _get_AltitudeRate_metadata = { "name" : "AltitudeRate",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def AltitudeRate(self) -> float:
        """The rate at which the aircraft will climb or descend."""
        return self._intf.get_property(IAgAvtrRefStateTakeoffLandingOptions._metadata, IAgAvtrRefStateTakeoffLandingOptions._get_AltitudeRate_metadata)

    _set_AltitudeRate_metadata = { "name" : "AltitudeRate",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @AltitudeRate.setter
    def AltitudeRate(self, newVal:float) -> None:
        """The rate at which the aircraft will climb or descend."""
        return self._intf.set_property(IAgAvtrRefStateTakeoffLandingOptions._metadata, IAgAvtrRefStateTakeoffLandingOptions._set_AltitudeRate_metadata, newVal)

    _get_FlightPathAngle_metadata = { "name" : "FlightPathAngle",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def FlightPathAngle(self) -> typing.Any:
        """The initial pitch angle of the flight path."""
        return self._intf.get_property(IAgAvtrRefStateTakeoffLandingOptions._metadata, IAgAvtrRefStateTakeoffLandingOptions._get_FlightPathAngle_metadata)

    _set_FlightPathAngle_metadata = { "name" : "FlightPathAngle",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @FlightPathAngle.setter
    def FlightPathAngle(self, newVal:typing.Any) -> None:
        """The initial pitch angle of the flight path."""
        return self._intf.set_property(IAgAvtrRefStateTakeoffLandingOptions._metadata, IAgAvtrRefStateTakeoffLandingOptions._set_FlightPathAngle_metadata, newVal)

    _get_TASDot_metadata = { "name" : "TASDot",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def TASDot(self) -> float:
        """The true airspeed acceleration."""
        return self._intf.get_property(IAgAvtrRefStateTakeoffLandingOptions._metadata, IAgAvtrRefStateTakeoffLandingOptions._get_TASDot_metadata)

    _get_GroundspeedDot_metadata = { "name" : "GroundspeedDot",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def GroundspeedDot(self) -> float:
        """The groundspeed acceleration."""
        return self._intf.get_property(IAgAvtrRefStateTakeoffLandingOptions._metadata, IAgAvtrRefStateTakeoffLandingOptions._get_GroundspeedDot_metadata)

    _get_LongitudinalAccelType_metadata = { "name" : "LongitudinalAccelType",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrRefStateLongitudinalAccelMode),) }
    @property
    def LongitudinalAccelType(self) -> "AgEAvtrRefStateLongitudinalAccelMode":
        """The mode to specify the longitudinal acceleration."""
        return self._intf.get_property(IAgAvtrRefStateTakeoffLandingOptions._metadata, IAgAvtrRefStateTakeoffLandingOptions._get_LongitudinalAccelType_metadata)

    _SetLongitudinalAccel_metadata = { "name" : "SetLongitudinalAccel",
            "arg_types" : (agcom.LONG, agcom.DOUBLE,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrRefStateLongitudinalAccelMode), agmarshall.DOUBLE_arg,) }
    def SetLongitudinalAccel(self, accelType:"AgEAvtrRefStateLongitudinalAccelMode", value:float) -> None:
        """Set the longitudinal acceleration."""
        return self._intf.invoke(IAgAvtrRefStateTakeoffLandingOptions._metadata, IAgAvtrRefStateTakeoffLandingOptions._SetLongitudinalAccel_metadata, accelType, value)

    _get_Heading_metadata = { "name" : "Heading",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def Heading(self) -> typing.Any:
        """The direction the aircraft is pointing."""
        return self._intf.get_property(IAgAvtrRefStateTakeoffLandingOptions._metadata, IAgAvtrRefStateTakeoffLandingOptions._get_Heading_metadata)

    _set_Heading_metadata = { "name" : "Heading",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @Heading.setter
    def Heading(self, newVal:typing.Any) -> None:
        """The direction the aircraft is pointing."""
        return self._intf.set_property(IAgAvtrRefStateTakeoffLandingOptions._metadata, IAgAvtrRefStateTakeoffLandingOptions._set_Heading_metadata, newVal)

    _get_HeadingIsMagnetic_metadata = { "name" : "HeadingIsMagnetic",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def HeadingIsMagnetic(self) -> bool:
        """Opt whether to specify the heading using magnetic North."""
        return self._intf.get_property(IAgAvtrRefStateTakeoffLandingOptions._metadata, IAgAvtrRefStateTakeoffLandingOptions._get_HeadingIsMagnetic_metadata)

    _set_HeadingIsMagnetic_metadata = { "name" : "HeadingIsMagnetic",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @HeadingIsMagnetic.setter
    def HeadingIsMagnetic(self, newVal:bool) -> None:
        """Opt whether to specify the heading using magnetic North."""
        return self._intf.set_property(IAgAvtrRefStateTakeoffLandingOptions._metadata, IAgAvtrRefStateTakeoffLandingOptions._set_HeadingIsMagnetic_metadata, newVal)

    _get_Course_metadata = { "name" : "Course",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def Course(self) -> typing.Any:
        """The direction the aircraft is traveling."""
        return self._intf.get_property(IAgAvtrRefStateTakeoffLandingOptions._metadata, IAgAvtrRefStateTakeoffLandingOptions._get_Course_metadata)

    _set_Course_metadata = { "name" : "Course",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @Course.setter
    def Course(self, newVal:typing.Any) -> None:
        """The direction the aircraft is traveling."""
        return self._intf.set_property(IAgAvtrRefStateTakeoffLandingOptions._metadata, IAgAvtrRefStateTakeoffLandingOptions._set_Course_metadata, newVal)

    _get_CourseIsMagnetic_metadata = { "name" : "CourseIsMagnetic",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def CourseIsMagnetic(self) -> bool:
        """Opt whether to specify the course using magnetic North."""
        return self._intf.get_property(IAgAvtrRefStateTakeoffLandingOptions._metadata, IAgAvtrRefStateTakeoffLandingOptions._get_CourseIsMagnetic_metadata)

    _set_CourseIsMagnetic_metadata = { "name" : "CourseIsMagnetic",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @CourseIsMagnetic.setter
    def CourseIsMagnetic(self, newVal:bool) -> None:
        """Opt whether to specify the course using magnetic North."""
        return self._intf.set_property(IAgAvtrRefStateTakeoffLandingOptions._metadata, IAgAvtrRefStateTakeoffLandingOptions._set_CourseIsMagnetic_metadata, newVal)

    _get_HeadingDot_metadata = { "name" : "HeadingDot",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def HeadingDot(self) -> typing.Any:
        """The heading rate of change."""
        return self._intf.get_property(IAgAvtrRefStateTakeoffLandingOptions._metadata, IAgAvtrRefStateTakeoffLandingOptions._get_HeadingDot_metadata)

    _get_CourseDot_metadata = { "name" : "CourseDot",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def CourseDot(self) -> typing.Any:
        """The course rate of change."""
        return self._intf.get_property(IAgAvtrRefStateTakeoffLandingOptions._metadata, IAgAvtrRefStateTakeoffLandingOptions._get_CourseDot_metadata)

    _get_LateralAccelType_metadata = { "name" : "LateralAccelType",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrRefStateLateralAccelMode),) }
    @property
    def LateralAccelType(self) -> "AgEAvtrRefStateLateralAccelMode":
        """The mode to specify the lateral acceleration."""
        return self._intf.get_property(IAgAvtrRefStateTakeoffLandingOptions._metadata, IAgAvtrRefStateTakeoffLandingOptions._get_LateralAccelType_metadata)

    _SetLateralAccel_metadata = { "name" : "SetLateralAccel",
            "arg_types" : (agcom.LONG, agcom.VARIANT,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrRefStateLateralAccelMode), agmarshall.VARIANT_arg,) }
    def SetLateralAccel(self, accelType:"AgEAvtrRefStateLateralAccelMode", value:typing.Any) -> None:
        """Set the lateral acceleration."""
        return self._intf.invoke(IAgAvtrRefStateTakeoffLandingOptions._metadata, IAgAvtrRefStateTakeoffLandingOptions._SetLateralAccel_metadata, accelType, value)

    _get_RollAngle_metadata = { "name" : "RollAngle",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def RollAngle(self) -> typing.Any:
        """The aircraft's bank angle."""
        return self._intf.get_property(IAgAvtrRefStateTakeoffLandingOptions._metadata, IAgAvtrRefStateTakeoffLandingOptions._get_RollAngle_metadata)

    _set_RollAngle_metadata = { "name" : "RollAngle",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @RollAngle.setter
    def RollAngle(self, newVal:typing.Any) -> None:
        """The aircraft's bank angle."""
        return self._intf.set_property(IAgAvtrRefStateTakeoffLandingOptions._metadata, IAgAvtrRefStateTakeoffLandingOptions._set_RollAngle_metadata, newVal)

    _get_AOA_metadata = { "name" : "AOA",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def AOA(self) -> typing.Any:
        """The aircraft's angle of attack."""
        return self._intf.get_property(IAgAvtrRefStateTakeoffLandingOptions._metadata, IAgAvtrRefStateTakeoffLandingOptions._get_AOA_metadata)

    _set_AOA_metadata = { "name" : "AOA",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @AOA.setter
    def AOA(self, newVal:typing.Any) -> None:
        """The aircraft's angle of attack."""
        return self._intf.set_property(IAgAvtrRefStateTakeoffLandingOptions._metadata, IAgAvtrRefStateTakeoffLandingOptions._set_AOA_metadata, newVal)

    _get_Sideslip_metadata = { "name" : "Sideslip",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def Sideslip(self) -> typing.Any:
        """The aircraft's yaw angle."""
        return self._intf.get_property(IAgAvtrRefStateTakeoffLandingOptions._metadata, IAgAvtrRefStateTakeoffLandingOptions._get_Sideslip_metadata)

    _set_Sideslip_metadata = { "name" : "Sideslip",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @Sideslip.setter
    def Sideslip(self, newVal:typing.Any) -> None:
        """The aircraft's yaw angle"""
        return self._intf.set_property(IAgAvtrRefStateTakeoffLandingOptions._metadata, IAgAvtrRefStateTakeoffLandingOptions._set_Sideslip_metadata, newVal)

    _get_PitchRate_metadata = { "name" : "PitchRate",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def PitchRate(self) -> typing.Any:
        """The aircraft's pitch rate."""
        return self._intf.get_property(IAgAvtrRefStateTakeoffLandingOptions._metadata, IAgAvtrRefStateTakeoffLandingOptions._get_PitchRate_metadata)

    _get_PushPullG_metadata = { "name" : "PushPullG",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def PushPullG(self) -> float:
        """The G force on the aircraft resulting from its attitude."""
        return self._intf.get_property(IAgAvtrRefStateTakeoffLandingOptions._metadata, IAgAvtrRefStateTakeoffLandingOptions._get_PushPullG_metadata)

    _get_AttitudeRateType_metadata = { "name" : "AttitudeRateType",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrRefStateAttitudeMode),) }
    @property
    def AttitudeRateType(self) -> "AgEAvtrRefStateAttitudeMode":
        """The mode to specify the vertical attitude rate."""
        return self._intf.get_property(IAgAvtrRefStateTakeoffLandingOptions._metadata, IAgAvtrRefStateTakeoffLandingOptions._get_AttitudeRateType_metadata)

    _SetAttitudeRate_metadata = { "name" : "SetAttitudeRate",
            "arg_types" : (agcom.LONG, agcom.VARIANT,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrRefStateAttitudeMode), agmarshall.VARIANT_arg,) }
    def SetAttitudeRate(self, attitudeRateType:"AgEAvtrRefStateAttitudeMode", value:typing.Any) -> None:
        """Set the vertical attitude rate."""
        return self._intf.invoke(IAgAvtrRefStateTakeoffLandingOptions._metadata, IAgAvtrRefStateTakeoffLandingOptions._SetAttitudeRate_metadata, attitudeRateType, value)


agcls.AgClassCatalog.add_catalog_entry("{b510a16b-3a33-408e-bed8-33dd61b76617}", IAgAvtrRefStateTakeoffLandingOptions)
agcls.AgTypeNameMap["IAgAvtrRefStateTakeoffLandingOptions"] = IAgAvtrRefStateTakeoffLandingOptions

class IAgAvtrLandingEnterDownwindPattern(object):
    """The interface used to access the options for a Downwind Pattern approach mode for a landing procedure. The approach mode must be set to Downwind Pattern to access this interface."""
    _num_methods = 18
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{6206fdbf-5eb3-41b4-8792-d562bb2ec92a}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_ApproachFixRange" : 1,
                             "set_ApproachFixRange" : 2,
                             "get_ApproachFixRangeMode" : 3,
                             "set_ApproachFixRangeMode" : 4,
                             "get_AbeamDistance" : 5,
                             "set_AbeamDistance" : 6,
                             "get_AbeamAltitude" : 7,
                             "set_AbeamAltitude" : 8,
                             "get_FinalTurn" : 9,
                             "set_FinalTurn" : 10,
                             "get_Glideslope" : 11,
                             "set_Glideslope" : 12,
                             "get_RunwayAltitudeOffset" : 13,
                             "set_RunwayAltitudeOffset" : 14,
                             "get_UseRunwayTerrain" : 15,
                             "set_UseRunwayTerrain" : 16,
                             "get_TouchAndGo" : 17,
                             "set_TouchAndGo" : 18, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrLandingEnterDownwindPattern._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrLandingEnterDownwindPattern from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrLandingEnterDownwindPattern.__dict__ and type(IAgAvtrLandingEnterDownwindPattern.__dict__[attrname]) == property:
            return IAgAvtrLandingEnterDownwindPattern.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrLandingEnterDownwindPattern.")
    
    _get_ApproachFixRange_metadata = { "name" : "ApproachFixRange",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def ApproachFixRange(self) -> float:
        """The range from the reference point of the runway at which the aircraft begins its landing approach."""
        return self._intf.get_property(IAgAvtrLandingEnterDownwindPattern._metadata, IAgAvtrLandingEnterDownwindPattern._get_ApproachFixRange_metadata)

    _set_ApproachFixRange_metadata = { "name" : "ApproachFixRange",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @ApproachFixRange.setter
    def ApproachFixRange(self, inVal:float) -> None:
        """The range from the reference point of the runway at which the aircraft begins its landing approach."""
        return self._intf.set_property(IAgAvtrLandingEnterDownwindPattern._metadata, IAgAvtrLandingEnterDownwindPattern._set_ApproachFixRange_metadata, inVal)

    _get_ApproachFixRangeMode_metadata = { "name" : "ApproachFixRangeMode",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrLandingApproachFixRangeMode),) }
    @property
    def ApproachFixRangeMode(self) -> "AgEAvtrLandingApproachFixRangeMode":
        """The reference point on the runway for the Approach Fix Range."""
        return self._intf.get_property(IAgAvtrLandingEnterDownwindPattern._metadata, IAgAvtrLandingEnterDownwindPattern._get_ApproachFixRangeMode_metadata)

    _set_ApproachFixRangeMode_metadata = { "name" : "ApproachFixRangeMode",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrLandingApproachFixRangeMode),) }
    @ApproachFixRangeMode.setter
    def ApproachFixRangeMode(self, inVal:"AgEAvtrLandingApproachFixRangeMode") -> None:
        """The reference point on the runway for the Approach Fix Range."""
        return self._intf.set_property(IAgAvtrLandingEnterDownwindPattern._metadata, IAgAvtrLandingEnterDownwindPattern._set_ApproachFixRangeMode_metadata, inVal)

    _get_AbeamDistance_metadata = { "name" : "AbeamDistance",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def AbeamDistance(self) -> float:
        """The distance from the runway that the aircraft will fly the parallel leg of the landing pattern."""
        return self._intf.get_property(IAgAvtrLandingEnterDownwindPattern._metadata, IAgAvtrLandingEnterDownwindPattern._get_AbeamDistance_metadata)

    _set_AbeamDistance_metadata = { "name" : "AbeamDistance",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @AbeamDistance.setter
    def AbeamDistance(self, inVal:float) -> None:
        """The distance from the runway that the aircraft will fly the parallel leg of the landing pattern."""
        return self._intf.set_property(IAgAvtrLandingEnterDownwindPattern._metadata, IAgAvtrLandingEnterDownwindPattern._set_AbeamDistance_metadata, inVal)

    _get_AbeamAltitude_metadata = { "name" : "AbeamAltitude",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def AbeamAltitude(self) -> float:
        """The altitude at which the aircraft will fly the parallel leg of the landing pattern."""
        return self._intf.get_property(IAgAvtrLandingEnterDownwindPattern._metadata, IAgAvtrLandingEnterDownwindPattern._get_AbeamAltitude_metadata)

    _set_AbeamAltitude_metadata = { "name" : "AbeamAltitude",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @AbeamAltitude.setter
    def AbeamAltitude(self, inVal:float) -> None:
        """The altitude at which the aircraft will fly the parallel leg of the landing pattern."""
        return self._intf.set_property(IAgAvtrLandingEnterDownwindPattern._metadata, IAgAvtrLandingEnterDownwindPattern._set_AbeamAltitude_metadata, inVal)

    _get_FinalTurn_metadata = { "name" : "FinalTurn",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrNavigatorTurnDir),) }
    @property
    def FinalTurn(self) -> "AgEAvtrNavigatorTurnDir":
        """The direction of the turn that the aircraft will make when it lines up over the runway to land."""
        return self._intf.get_property(IAgAvtrLandingEnterDownwindPattern._metadata, IAgAvtrLandingEnterDownwindPattern._get_FinalTurn_metadata)

    _set_FinalTurn_metadata = { "name" : "FinalTurn",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrNavigatorTurnDir),) }
    @FinalTurn.setter
    def FinalTurn(self, inVal:"AgEAvtrNavigatorTurnDir") -> None:
        """The direction of the turn that the aircraft will make when it lines up over the runway to land."""
        return self._intf.set_property(IAgAvtrLandingEnterDownwindPattern._metadata, IAgAvtrLandingEnterDownwindPattern._set_FinalTurn_metadata, inVal)

    _get_Glideslope_metadata = { "name" : "Glideslope",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def Glideslope(self) -> typing.Any:
        """The angle from the horizontal on which the aircraft descends to touchdown."""
        return self._intf.get_property(IAgAvtrLandingEnterDownwindPattern._metadata, IAgAvtrLandingEnterDownwindPattern._get_Glideslope_metadata)

    _set_Glideslope_metadata = { "name" : "Glideslope",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @Glideslope.setter
    def Glideslope(self, inVal:typing.Any) -> None:
        """The angle from the horizontal on which the aircraft descends to touchdown."""
        return self._intf.set_property(IAgAvtrLandingEnterDownwindPattern._metadata, IAgAvtrLandingEnterDownwindPattern._set_Glideslope_metadata, inVal)

    _get_RunwayAltitudeOffset_metadata = { "name" : "RunwayAltitudeOffset",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def RunwayAltitudeOffset(self) -> float:
        """The altitude offset above the ground level."""
        return self._intf.get_property(IAgAvtrLandingEnterDownwindPattern._metadata, IAgAvtrLandingEnterDownwindPattern._get_RunwayAltitudeOffset_metadata)

    _set_RunwayAltitudeOffset_metadata = { "name" : "RunwayAltitudeOffset",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @RunwayAltitudeOffset.setter
    def RunwayAltitudeOffset(self, inVal:float) -> None:
        """The altitude offset above the ground level."""
        return self._intf.set_property(IAgAvtrLandingEnterDownwindPattern._metadata, IAgAvtrLandingEnterDownwindPattern._set_RunwayAltitudeOffset_metadata, inVal)

    _get_UseRunwayTerrain_metadata = { "name" : "UseRunwayTerrain",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def UseRunwayTerrain(self) -> bool:
        """Opt whether to use terrain data to define the runway's ground level attitude."""
        return self._intf.get_property(IAgAvtrLandingEnterDownwindPattern._metadata, IAgAvtrLandingEnterDownwindPattern._get_UseRunwayTerrain_metadata)

    _set_UseRunwayTerrain_metadata = { "name" : "UseRunwayTerrain",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @UseRunwayTerrain.setter
    def UseRunwayTerrain(self, inVal:bool) -> None:
        """Opt whether to use terrain data to define the runway's ground level attitude."""
        return self._intf.set_property(IAgAvtrLandingEnterDownwindPattern._metadata, IAgAvtrLandingEnterDownwindPattern._set_UseRunwayTerrain_metadata, inVal)

    _get_TouchAndGo_metadata = { "name" : "TouchAndGo",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def TouchAndGo(self) -> bool:
        """Opt whether to perform a Touch and Go landing. The procedure will stop at wheels down and can be immediately followed by a takeoff procedure."""
        return self._intf.get_property(IAgAvtrLandingEnterDownwindPattern._metadata, IAgAvtrLandingEnterDownwindPattern._get_TouchAndGo_metadata)

    _set_TouchAndGo_metadata = { "name" : "TouchAndGo",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @TouchAndGo.setter
    def TouchAndGo(self, inVal:bool) -> None:
        """Opt whether to perform a Touch and Go landing. The procedure will stop at wheels down and can be immediately followed by a takeoff procedure."""
        return self._intf.set_property(IAgAvtrLandingEnterDownwindPattern._metadata, IAgAvtrLandingEnterDownwindPattern._set_TouchAndGo_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{6206fdbf-5eb3-41b4-8792-d562bb2ec92a}", IAgAvtrLandingEnterDownwindPattern)
agcls.AgTypeNameMap["IAgAvtrLandingEnterDownwindPattern"] = IAgAvtrLandingEnterDownwindPattern

class IAgAvtrLandingInterceptGlideslope(object):
    """The interface used to access the options for an Intercept Glideslope approach mode for a landing procedure. The approach mode must be set to Intercept Glideslope to access this interface."""
    _num_methods = 12
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{534bfa1e-99e8-4188-a66a-53166e8d6536}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_ApproachFixRange" : 1,
                             "set_ApproachFixRange" : 2,
                             "get_ApproachFixRangeMode" : 3,
                             "set_ApproachFixRangeMode" : 4,
                             "get_Glideslope" : 5,
                             "set_Glideslope" : 6,
                             "get_RunwayAltitudeOffset" : 7,
                             "set_RunwayAltitudeOffset" : 8,
                             "get_UseRunwayTerrain" : 9,
                             "set_UseRunwayTerrain" : 10,
                             "get_TouchAndGo" : 11,
                             "set_TouchAndGo" : 12, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrLandingInterceptGlideslope._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrLandingInterceptGlideslope from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrLandingInterceptGlideslope.__dict__ and type(IAgAvtrLandingInterceptGlideslope.__dict__[attrname]) == property:
            return IAgAvtrLandingInterceptGlideslope.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrLandingInterceptGlideslope.")
    
    _get_ApproachFixRange_metadata = { "name" : "ApproachFixRange",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def ApproachFixRange(self) -> float:
        """The range from the reference point of the runway at which the aircraft begins its landing approach."""
        return self._intf.get_property(IAgAvtrLandingInterceptGlideslope._metadata, IAgAvtrLandingInterceptGlideslope._get_ApproachFixRange_metadata)

    _set_ApproachFixRange_metadata = { "name" : "ApproachFixRange",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @ApproachFixRange.setter
    def ApproachFixRange(self, inVal:float) -> None:
        """The range from the reference point of the runway at which the aircraft begins its landing approach."""
        return self._intf.set_property(IAgAvtrLandingInterceptGlideslope._metadata, IAgAvtrLandingInterceptGlideslope._set_ApproachFixRange_metadata, inVal)

    _get_ApproachFixRangeMode_metadata = { "name" : "ApproachFixRangeMode",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrLandingApproachFixRangeMode),) }
    @property
    def ApproachFixRangeMode(self) -> "AgEAvtrLandingApproachFixRangeMode":
        """The reference point on the runway for the Approach Fix Range."""
        return self._intf.get_property(IAgAvtrLandingInterceptGlideslope._metadata, IAgAvtrLandingInterceptGlideslope._get_ApproachFixRangeMode_metadata)

    _set_ApproachFixRangeMode_metadata = { "name" : "ApproachFixRangeMode",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrLandingApproachFixRangeMode),) }
    @ApproachFixRangeMode.setter
    def ApproachFixRangeMode(self, inVal:"AgEAvtrLandingApproachFixRangeMode") -> None:
        """The reference point on the runway for the Approach Fix Range."""
        return self._intf.set_property(IAgAvtrLandingInterceptGlideslope._metadata, IAgAvtrLandingInterceptGlideslope._set_ApproachFixRangeMode_metadata, inVal)

    _get_Glideslope_metadata = { "name" : "Glideslope",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def Glideslope(self) -> typing.Any:
        """The angle from the horizontal on which the aircraft descends to touchdown."""
        return self._intf.get_property(IAgAvtrLandingInterceptGlideslope._metadata, IAgAvtrLandingInterceptGlideslope._get_Glideslope_metadata)

    _set_Glideslope_metadata = { "name" : "Glideslope",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @Glideslope.setter
    def Glideslope(self, inVal:typing.Any) -> None:
        """The angle from the horizontal on which the aircraft descends to touchdown."""
        return self._intf.set_property(IAgAvtrLandingInterceptGlideslope._metadata, IAgAvtrLandingInterceptGlideslope._set_Glideslope_metadata, inVal)

    _get_RunwayAltitudeOffset_metadata = { "name" : "RunwayAltitudeOffset",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def RunwayAltitudeOffset(self) -> float:
        """The altitude offset above the ground level."""
        return self._intf.get_property(IAgAvtrLandingInterceptGlideslope._metadata, IAgAvtrLandingInterceptGlideslope._get_RunwayAltitudeOffset_metadata)

    _set_RunwayAltitudeOffset_metadata = { "name" : "RunwayAltitudeOffset",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @RunwayAltitudeOffset.setter
    def RunwayAltitudeOffset(self, inVal:float) -> None:
        """The altitude offset above the ground level."""
        return self._intf.set_property(IAgAvtrLandingInterceptGlideslope._metadata, IAgAvtrLandingInterceptGlideslope._set_RunwayAltitudeOffset_metadata, inVal)

    _get_UseRunwayTerrain_metadata = { "name" : "UseRunwayTerrain",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def UseRunwayTerrain(self) -> bool:
        """Opt whether to use terrain data to define the runway's ground level attitude."""
        return self._intf.get_property(IAgAvtrLandingInterceptGlideslope._metadata, IAgAvtrLandingInterceptGlideslope._get_UseRunwayTerrain_metadata)

    _set_UseRunwayTerrain_metadata = { "name" : "UseRunwayTerrain",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @UseRunwayTerrain.setter
    def UseRunwayTerrain(self, inVal:bool) -> None:
        """Opt whether to use terrain data to define the runway's ground level attitude."""
        return self._intf.set_property(IAgAvtrLandingInterceptGlideslope._metadata, IAgAvtrLandingInterceptGlideslope._set_UseRunwayTerrain_metadata, inVal)

    _get_TouchAndGo_metadata = { "name" : "TouchAndGo",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def TouchAndGo(self) -> bool:
        """Opt whether to perform a Touch and Go landing. The procedure will stop at wheels down and can be immediately followed by a takeoff procedure."""
        return self._intf.get_property(IAgAvtrLandingInterceptGlideslope._metadata, IAgAvtrLandingInterceptGlideslope._get_TouchAndGo_metadata)

    _set_TouchAndGo_metadata = { "name" : "TouchAndGo",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @TouchAndGo.setter
    def TouchAndGo(self, inVal:bool) -> None:
        """Opt whether to perform a Touch and Go landing. The procedure will stop at wheels down and can be immediately followed by a takeoff procedure."""
        return self._intf.set_property(IAgAvtrLandingInterceptGlideslope._metadata, IAgAvtrLandingInterceptGlideslope._set_TouchAndGo_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{534bfa1e-99e8-4188-a66a-53166e8d6536}", IAgAvtrLandingInterceptGlideslope)
agcls.AgTypeNameMap["IAgAvtrLandingInterceptGlideslope"] = IAgAvtrLandingInterceptGlideslope

class IAgAvtrLandingStandardInstrumentApproach(object):
    """The interface used to access the options for a Standard Instrument Approach mode for a landing procedure. The approach mode must be set to Standard Instrument Approach to access this interface."""
    _num_methods = 16
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{28c196c4-2768-49ce-a384-d0c37394be0f}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_ApproachAltitude" : 1,
                             "set_ApproachAltitude" : 2,
                             "get_LevelOffMode" : 3,
                             "set_LevelOffMode" : 4,
                             "get_ApproachFixRange" : 5,
                             "set_ApproachFixRange" : 6,
                             "get_ApproachFixRangeMode" : 7,
                             "set_ApproachFixRangeMode" : 8,
                             "get_Glideslope" : 9,
                             "set_Glideslope" : 10,
                             "get_RunwayAltitudeOffset" : 11,
                             "set_RunwayAltitudeOffset" : 12,
                             "get_UseRunwayTerrain" : 13,
                             "set_UseRunwayTerrain" : 14,
                             "get_TouchAndGo" : 15,
                             "set_TouchAndGo" : 16, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrLandingStandardInstrumentApproach._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrLandingStandardInstrumentApproach from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrLandingStandardInstrumentApproach.__dict__ and type(IAgAvtrLandingStandardInstrumentApproach.__dict__[attrname]) == property:
            return IAgAvtrLandingStandardInstrumentApproach.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrLandingStandardInstrumentApproach.")
    
    _get_ApproachAltitude_metadata = { "name" : "ApproachAltitude",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def ApproachAltitude(self) -> float:
        """The aircraft's altitude at the Initial Approach Fix Range."""
        return self._intf.get_property(IAgAvtrLandingStandardInstrumentApproach._metadata, IAgAvtrLandingStandardInstrumentApproach._get_ApproachAltitude_metadata)

    _set_ApproachAltitude_metadata = { "name" : "ApproachAltitude",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @ApproachAltitude.setter
    def ApproachAltitude(self, inVal:float) -> None:
        """The aircraft's altitude at the Initial Approach Fix Range."""
        return self._intf.set_property(IAgAvtrLandingStandardInstrumentApproach._metadata, IAgAvtrLandingStandardInstrumentApproach._set_ApproachAltitude_metadata, inVal)

    _get_LevelOffMode_metadata = { "name" : "LevelOffMode",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrAltitudeConstraintManeuverMode),) }
    @property
    def LevelOffMode(self) -> "AgEAvtrAltitudeConstraintManeuverMode":
        """The level off mode. This is only used when the must level off option is on."""
        return self._intf.get_property(IAgAvtrLandingStandardInstrumentApproach._metadata, IAgAvtrLandingStandardInstrumentApproach._get_LevelOffMode_metadata)

    _set_LevelOffMode_metadata = { "name" : "LevelOffMode",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrAltitudeConstraintManeuverMode),) }
    @LevelOffMode.setter
    def LevelOffMode(self, inVal:"AgEAvtrAltitudeConstraintManeuverMode") -> None:
        """The level off mode. This is only used when the must level off option is on."""
        return self._intf.set_property(IAgAvtrLandingStandardInstrumentApproach._metadata, IAgAvtrLandingStandardInstrumentApproach._set_LevelOffMode_metadata, inVal)

    _get_ApproachFixRange_metadata = { "name" : "ApproachFixRange",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def ApproachFixRange(self) -> float:
        """The range from the reference point of the runway at which the aircraft begins its landing approach."""
        return self._intf.get_property(IAgAvtrLandingStandardInstrumentApproach._metadata, IAgAvtrLandingStandardInstrumentApproach._get_ApproachFixRange_metadata)

    _set_ApproachFixRange_metadata = { "name" : "ApproachFixRange",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @ApproachFixRange.setter
    def ApproachFixRange(self, inVal:float) -> None:
        """The range from the reference point of the runway at which the aircraft begins its landing approach."""
        return self._intf.set_property(IAgAvtrLandingStandardInstrumentApproach._metadata, IAgAvtrLandingStandardInstrumentApproach._set_ApproachFixRange_metadata, inVal)

    _get_ApproachFixRangeMode_metadata = { "name" : "ApproachFixRangeMode",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrLandingApproachFixRangeMode),) }
    @property
    def ApproachFixRangeMode(self) -> "AgEAvtrLandingApproachFixRangeMode":
        """The reference point on the runway for the Approach Fix Range."""
        return self._intf.get_property(IAgAvtrLandingStandardInstrumentApproach._metadata, IAgAvtrLandingStandardInstrumentApproach._get_ApproachFixRangeMode_metadata)

    _set_ApproachFixRangeMode_metadata = { "name" : "ApproachFixRangeMode",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrLandingApproachFixRangeMode),) }
    @ApproachFixRangeMode.setter
    def ApproachFixRangeMode(self, inVal:"AgEAvtrLandingApproachFixRangeMode") -> None:
        """The reference point on the runway for the Approach Fix Range."""
        return self._intf.set_property(IAgAvtrLandingStandardInstrumentApproach._metadata, IAgAvtrLandingStandardInstrumentApproach._set_ApproachFixRangeMode_metadata, inVal)

    _get_Glideslope_metadata = { "name" : "Glideslope",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def Glideslope(self) -> typing.Any:
        """The angle from the horizontal on which the aircraft descends to touchdown."""
        return self._intf.get_property(IAgAvtrLandingStandardInstrumentApproach._metadata, IAgAvtrLandingStandardInstrumentApproach._get_Glideslope_metadata)

    _set_Glideslope_metadata = { "name" : "Glideslope",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @Glideslope.setter
    def Glideslope(self, inVal:typing.Any) -> None:
        """The angle from the horizontal on which the aircraft descends to touchdown."""
        return self._intf.set_property(IAgAvtrLandingStandardInstrumentApproach._metadata, IAgAvtrLandingStandardInstrumentApproach._set_Glideslope_metadata, inVal)

    _get_RunwayAltitudeOffset_metadata = { "name" : "RunwayAltitudeOffset",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def RunwayAltitudeOffset(self) -> float:
        """The altitude offset above the ground level."""
        return self._intf.get_property(IAgAvtrLandingStandardInstrumentApproach._metadata, IAgAvtrLandingStandardInstrumentApproach._get_RunwayAltitudeOffset_metadata)

    _set_RunwayAltitudeOffset_metadata = { "name" : "RunwayAltitudeOffset",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @RunwayAltitudeOffset.setter
    def RunwayAltitudeOffset(self, inVal:float) -> None:
        """The altitude offset above the ground level."""
        return self._intf.set_property(IAgAvtrLandingStandardInstrumentApproach._metadata, IAgAvtrLandingStandardInstrumentApproach._set_RunwayAltitudeOffset_metadata, inVal)

    _get_UseRunwayTerrain_metadata = { "name" : "UseRunwayTerrain",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def UseRunwayTerrain(self) -> bool:
        """Opt whether to use terrain data to define the runway's ground level attitude."""
        return self._intf.get_property(IAgAvtrLandingStandardInstrumentApproach._metadata, IAgAvtrLandingStandardInstrumentApproach._get_UseRunwayTerrain_metadata)

    _set_UseRunwayTerrain_metadata = { "name" : "UseRunwayTerrain",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @UseRunwayTerrain.setter
    def UseRunwayTerrain(self, inVal:bool) -> None:
        """Opt whether to use terrain data to define the runway's ground level attitude."""
        return self._intf.set_property(IAgAvtrLandingStandardInstrumentApproach._metadata, IAgAvtrLandingStandardInstrumentApproach._set_UseRunwayTerrain_metadata, inVal)

    _get_TouchAndGo_metadata = { "name" : "TouchAndGo",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def TouchAndGo(self) -> bool:
        """Opt whether to perform a Touch and Go landing. The procedure will stop at wheels down and can be immediately followed by a takeoff procedure."""
        return self._intf.get_property(IAgAvtrLandingStandardInstrumentApproach._metadata, IAgAvtrLandingStandardInstrumentApproach._get_TouchAndGo_metadata)

    _set_TouchAndGo_metadata = { "name" : "TouchAndGo",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @TouchAndGo.setter
    def TouchAndGo(self, inVal:bool) -> None:
        """Opt whether to perform a Touch and Go landing. The procedure will stop at wheels down and can be immediately followed by a takeoff procedure."""
        return self._intf.set_property(IAgAvtrLandingStandardInstrumentApproach._metadata, IAgAvtrLandingStandardInstrumentApproach._set_TouchAndGo_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{28c196c4-2768-49ce-a384-d0c37394be0f}", IAgAvtrLandingStandardInstrumentApproach)
agcls.AgTypeNameMap["IAgAvtrLandingStandardInstrumentApproach"] = IAgAvtrLandingStandardInstrumentApproach

class IAgAvtrProcedureBasicManeuver(object):
    """Interface used to access the options for a Basic Maneuver procedure"""
    _num_methods = 37
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{7cf58344-514c-44a6-aaf0-a45c4472e299}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_MaxTimeOfFlight" : 1,
                             "set_MaxTimeOfFlight" : 2,
                             "get_UseMaxTimeOfFlight" : 3,
                             "set_UseMaxTimeOfFlight" : 4,
                             "get_StopFuelState" : 5,
                             "set_StopFuelState" : 6,
                             "get_UseStopFuelState" : 7,
                             "set_UseStopFuelState" : 8,
                             "get_MaxDownrange" : 9,
                             "set_MaxDownrange" : 10,
                             "get_UseMaxDownrange" : 11,
                             "set_UseMaxDownrange" : 12,
                             "get_AltitudeLimitMode" : 13,
                             "set_AltitudeLimitMode" : 14,
                             "get_TerrainImpactMode" : 15,
                             "set_TerrainImpactMode" : 16,
                             "get_TerrainImpactTimeOffset" : 17,
                             "set_TerrainImpactTimeOffset" : 18,
                             "get_NavigationStrategyType" : 19,
                             "set_NavigationStrategyType" : 20,
                             "get_Navigation" : 21,
                             "get_ProfileStrategyType" : 22,
                             "set_ProfileStrategyType" : 23,
                             "get_Profile" : 24,
                             "get_FlightMode" : 25,
                             "set_FlightMode" : 26,
                             "get_FuelFlowType" : 27,
                             "set_FuelFlowType" : 28,
                             "get_OverrideFuelFlowValue" : 29,
                             "set_OverrideFuelFlowValue" : 30,
                             "get_ScaleFuelFlow" : 31,
                             "set_ScaleFuelFlow" : 32,
                             "get_AttitudeBlendTime" : 33,
                             "set_AttitudeBlendTime" : 34,
                             "get_ControlTimeConstant" : 35,
                             "set_ControlTimeConstant" : 36,
                             "GetAsProcedure" : 37, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrProcedureBasicManeuver._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrProcedureBasicManeuver from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrProcedureBasicManeuver.__dict__ and type(IAgAvtrProcedureBasicManeuver.__dict__[attrname]) == property:
            return IAgAvtrProcedureBasicManeuver.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrProcedureBasicManeuver.")
    
    _get_MaxTimeOfFlight_metadata = { "name" : "MaxTimeOfFlight",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def MaxTimeOfFlight(self) -> typing.Any:
        """Get the max time of flight."""
        return self._intf.get_property(IAgAvtrProcedureBasicManeuver._metadata, IAgAvtrProcedureBasicManeuver._get_MaxTimeOfFlight_metadata)

    _set_MaxTimeOfFlight_metadata = { "name" : "MaxTimeOfFlight",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @MaxTimeOfFlight.setter
    def MaxTimeOfFlight(self, newVal:typing.Any) -> None:
        """Set the max time of flight."""
        return self._intf.set_property(IAgAvtrProcedureBasicManeuver._metadata, IAgAvtrProcedureBasicManeuver._set_MaxTimeOfFlight_metadata, newVal)

    _get_UseMaxTimeOfFlight_metadata = { "name" : "UseMaxTimeOfFlight",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def UseMaxTimeOfFlight(self) -> bool:
        """Get whether to use max time of flight."""
        return self._intf.get_property(IAgAvtrProcedureBasicManeuver._metadata, IAgAvtrProcedureBasicManeuver._get_UseMaxTimeOfFlight_metadata)

    _set_UseMaxTimeOfFlight_metadata = { "name" : "UseMaxTimeOfFlight",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @UseMaxTimeOfFlight.setter
    def UseMaxTimeOfFlight(self, newVal:bool) -> None:
        """Set whether to use max time of flight."""
        return self._intf.set_property(IAgAvtrProcedureBasicManeuver._metadata, IAgAvtrProcedureBasicManeuver._set_UseMaxTimeOfFlight_metadata, newVal)

    _get_StopFuelState_metadata = { "name" : "StopFuelState",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def StopFuelState(self) -> float:
        """Get the stop fuel state value."""
        return self._intf.get_property(IAgAvtrProcedureBasicManeuver._metadata, IAgAvtrProcedureBasicManeuver._get_StopFuelState_metadata)

    _set_StopFuelState_metadata = { "name" : "StopFuelState",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @StopFuelState.setter
    def StopFuelState(self, newVal:float) -> None:
        """Set the stop fuel state value."""
        return self._intf.set_property(IAgAvtrProcedureBasicManeuver._metadata, IAgAvtrProcedureBasicManeuver._set_StopFuelState_metadata, newVal)

    _get_UseStopFuelState_metadata = { "name" : "UseStopFuelState",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def UseStopFuelState(self) -> bool:
        """Get whether to use stop fuel state."""
        return self._intf.get_property(IAgAvtrProcedureBasicManeuver._metadata, IAgAvtrProcedureBasicManeuver._get_UseStopFuelState_metadata)

    _set_UseStopFuelState_metadata = { "name" : "UseStopFuelState",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @UseStopFuelState.setter
    def UseStopFuelState(self, newVal:bool) -> None:
        """Set whether to use stop fuel state."""
        return self._intf.set_property(IAgAvtrProcedureBasicManeuver._metadata, IAgAvtrProcedureBasicManeuver._set_UseStopFuelState_metadata, newVal)

    _get_MaxDownrange_metadata = { "name" : "MaxDownrange",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def MaxDownrange(self) -> float:
        """Get the max down range."""
        return self._intf.get_property(IAgAvtrProcedureBasicManeuver._metadata, IAgAvtrProcedureBasicManeuver._get_MaxDownrange_metadata)

    _set_MaxDownrange_metadata = { "name" : "MaxDownrange",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @MaxDownrange.setter
    def MaxDownrange(self, newVal:float) -> None:
        """Set the max down range."""
        return self._intf.set_property(IAgAvtrProcedureBasicManeuver._metadata, IAgAvtrProcedureBasicManeuver._set_MaxDownrange_metadata, newVal)

    _get_UseMaxDownrange_metadata = { "name" : "UseMaxDownrange",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def UseMaxDownrange(self) -> bool:
        """Get whether to use max down range."""
        return self._intf.get_property(IAgAvtrProcedureBasicManeuver._metadata, IAgAvtrProcedureBasicManeuver._get_UseMaxDownrange_metadata)

    _set_UseMaxDownrange_metadata = { "name" : "UseMaxDownrange",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @UseMaxDownrange.setter
    def UseMaxDownrange(self, newVal:bool) -> None:
        """Set whether to use max down range."""
        return self._intf.set_property(IAgAvtrProcedureBasicManeuver._metadata, IAgAvtrProcedureBasicManeuver._set_UseMaxDownrange_metadata, newVal)

    _get_AltitudeLimitMode_metadata = { "name" : "AltitudeLimitMode",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrBasicManeuverAltitudeLimit),) }
    @property
    def AltitudeLimitMode(self) -> "AgEAvtrBasicManeuverAltitudeLimit":
        """Get the altitude limit mode."""
        return self._intf.get_property(IAgAvtrProcedureBasicManeuver._metadata, IAgAvtrProcedureBasicManeuver._get_AltitudeLimitMode_metadata)

    _set_AltitudeLimitMode_metadata = { "name" : "AltitudeLimitMode",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrBasicManeuverAltitudeLimit),) }
    @AltitudeLimitMode.setter
    def AltitudeLimitMode(self, newVal:"AgEAvtrBasicManeuverAltitudeLimit") -> None:
        """Set the altitude limit mode."""
        return self._intf.set_property(IAgAvtrProcedureBasicManeuver._metadata, IAgAvtrProcedureBasicManeuver._set_AltitudeLimitMode_metadata, newVal)

    _get_TerrainImpactMode_metadata = { "name" : "TerrainImpactMode",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrBasicManeuverAltitudeLimit),) }
    @property
    def TerrainImpactMode(self) -> "AgEAvtrBasicManeuverAltitudeLimit":
        """Get the terrain impact mode."""
        return self._intf.get_property(IAgAvtrProcedureBasicManeuver._metadata, IAgAvtrProcedureBasicManeuver._get_TerrainImpactMode_metadata)

    _set_TerrainImpactMode_metadata = { "name" : "TerrainImpactMode",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrBasicManeuverAltitudeLimit),) }
    @TerrainImpactMode.setter
    def TerrainImpactMode(self, newVal:"AgEAvtrBasicManeuverAltitudeLimit") -> None:
        """Set the terrain impact mode."""
        return self._intf.set_property(IAgAvtrProcedureBasicManeuver._metadata, IAgAvtrProcedureBasicManeuver._set_TerrainImpactMode_metadata, newVal)

    _get_TerrainImpactTimeOffset_metadata = { "name" : "TerrainImpactTimeOffset",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def TerrainImpactTimeOffset(self) -> float:
        """Get the terrain impact time offset."""
        return self._intf.get_property(IAgAvtrProcedureBasicManeuver._metadata, IAgAvtrProcedureBasicManeuver._get_TerrainImpactTimeOffset_metadata)

    _set_TerrainImpactTimeOffset_metadata = { "name" : "TerrainImpactTimeOffset",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @TerrainImpactTimeOffset.setter
    def TerrainImpactTimeOffset(self, newVal:float) -> None:
        """Set the terrain impact time offset."""
        return self._intf.set_property(IAgAvtrProcedureBasicManeuver._metadata, IAgAvtrProcedureBasicManeuver._set_TerrainImpactTimeOffset_metadata, newVal)

    _get_NavigationStrategyType_metadata = { "name" : "NavigationStrategyType",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def NavigationStrategyType(self) -> str:
        """Get the navigation strategy type."""
        return self._intf.get_property(IAgAvtrProcedureBasicManeuver._metadata, IAgAvtrProcedureBasicManeuver._get_NavigationStrategyType_metadata)

    _set_NavigationStrategyType_metadata = { "name" : "NavigationStrategyType",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @NavigationStrategyType.setter
    def NavigationStrategyType(self, newVal:str) -> None:
        """Set the navigation strategy type."""
        return self._intf.set_property(IAgAvtrProcedureBasicManeuver._metadata, IAgAvtrProcedureBasicManeuver._set_NavigationStrategyType_metadata, newVal)

    _get_Navigation_metadata = { "name" : "Navigation",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def Navigation(self) -> "IAgAvtrBasicManeuverStrategy":
        """Get the interface for the navigation strategy."""
        return self._intf.get_property(IAgAvtrProcedureBasicManeuver._metadata, IAgAvtrProcedureBasicManeuver._get_Navigation_metadata)

    _get_ProfileStrategyType_metadata = { "name" : "ProfileStrategyType",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def ProfileStrategyType(self) -> str:
        """Get the profile strategy type."""
        return self._intf.get_property(IAgAvtrProcedureBasicManeuver._metadata, IAgAvtrProcedureBasicManeuver._get_ProfileStrategyType_metadata)

    _set_ProfileStrategyType_metadata = { "name" : "ProfileStrategyType",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @ProfileStrategyType.setter
    def ProfileStrategyType(self, newVal:str) -> None:
        """Set the profile strategy type."""
        return self._intf.set_property(IAgAvtrProcedureBasicManeuver._metadata, IAgAvtrProcedureBasicManeuver._set_ProfileStrategyType_metadata, newVal)

    _get_Profile_metadata = { "name" : "Profile",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def Profile(self) -> "IAgAvtrBasicManeuverStrategy":
        """Get the interface for the profile strategy."""
        return self._intf.get_property(IAgAvtrProcedureBasicManeuver._metadata, IAgAvtrProcedureBasicManeuver._get_Profile_metadata)

    _get_FlightMode_metadata = { "name" : "FlightMode",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrPhaseOfFlight),) }
    @property
    def FlightMode(self) -> "AgEAvtrPhaseOfFlight":
        """The type of performance model  that the aircraft will use to fly the maneuver."""
        return self._intf.get_property(IAgAvtrProcedureBasicManeuver._metadata, IAgAvtrProcedureBasicManeuver._get_FlightMode_metadata)

    _set_FlightMode_metadata = { "name" : "FlightMode",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrPhaseOfFlight),) }
    @FlightMode.setter
    def FlightMode(self, newVal:"AgEAvtrPhaseOfFlight") -> None:
        return self._intf.set_property(IAgAvtrProcedureBasicManeuver._metadata, IAgAvtrProcedureBasicManeuver._set_FlightMode_metadata, newVal)

    _get_FuelFlowType_metadata = { "name" : "FuelFlowType",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrBasicManeuverFuelFlowType),) }
    @property
    def FuelFlowType(self) -> "AgEAvtrBasicManeuverFuelFlowType":
        """The source used to calculate the fuel flow for the maneuver."""
        return self._intf.get_property(IAgAvtrProcedureBasicManeuver._metadata, IAgAvtrProcedureBasicManeuver._get_FuelFlowType_metadata)

    _set_FuelFlowType_metadata = { "name" : "FuelFlowType",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrBasicManeuverFuelFlowType),) }
    @FuelFlowType.setter
    def FuelFlowType(self, newVal:"AgEAvtrBasicManeuverFuelFlowType") -> None:
        return self._intf.set_property(IAgAvtrProcedureBasicManeuver._metadata, IAgAvtrProcedureBasicManeuver._set_FuelFlowType_metadata, newVal)

    _get_OverrideFuelFlowValue_metadata = { "name" : "OverrideFuelFlowValue",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def OverrideFuelFlowValue(self) -> float:
        """The value used for the Override Fuel Flow type. The fuel flow type must be set to Override to access this value."""
        return self._intf.get_property(IAgAvtrProcedureBasicManeuver._metadata, IAgAvtrProcedureBasicManeuver._get_OverrideFuelFlowValue_metadata)

    _set_OverrideFuelFlowValue_metadata = { "name" : "OverrideFuelFlowValue",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @OverrideFuelFlowValue.setter
    def OverrideFuelFlowValue(self, newVal:float) -> None:
        return self._intf.set_property(IAgAvtrProcedureBasicManeuver._metadata, IAgAvtrProcedureBasicManeuver._set_OverrideFuelFlowValue_metadata, newVal)

    _get_ScaleFuelFlow_metadata = { "name" : "ScaleFuelFlow",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def ScaleFuelFlow(self) -> bool:
        """Opt whether to scale the fuel flow based on the aircraft's actual attitude."""
        return self._intf.get_property(IAgAvtrProcedureBasicManeuver._metadata, IAgAvtrProcedureBasicManeuver._get_ScaleFuelFlow_metadata)

    _set_ScaleFuelFlow_metadata = { "name" : "ScaleFuelFlow",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @ScaleFuelFlow.setter
    def ScaleFuelFlow(self, pVal:bool) -> None:
        return self._intf.set_property(IAgAvtrProcedureBasicManeuver._metadata, IAgAvtrProcedureBasicManeuver._set_ScaleFuelFlow_metadata, pVal)

    _get_AttitudeBlendTime_metadata = { "name" : "AttitudeBlendTime",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def AttitudeBlendTime(self) -> float:
        """The amount of time that the aircraft will spend transitioning from the attitude of the previous maneuver to the attitude at the beginning of the current maneuver."""
        return self._intf.get_property(IAgAvtrProcedureBasicManeuver._metadata, IAgAvtrProcedureBasicManeuver._get_AttitudeBlendTime_metadata)

    _set_AttitudeBlendTime_metadata = { "name" : "AttitudeBlendTime",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @AttitudeBlendTime.setter
    def AttitudeBlendTime(self, newVal:float) -> None:
        return self._intf.set_property(IAgAvtrProcedureBasicManeuver._metadata, IAgAvtrProcedureBasicManeuver._set_AttitudeBlendTime_metadata, newVal)

    _get_ControlTimeConstant_metadata = { "name" : "ControlTimeConstant",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def ControlTimeConstant(self) -> float:
        """A smoothing constant for the performance of control surfaces."""
        return self._intf.get_property(IAgAvtrProcedureBasicManeuver._metadata, IAgAvtrProcedureBasicManeuver._get_ControlTimeConstant_metadata)

    _set_ControlTimeConstant_metadata = { "name" : "ControlTimeConstant",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @ControlTimeConstant.setter
    def ControlTimeConstant(self, newVal:float) -> None:
        return self._intf.set_property(IAgAvtrProcedureBasicManeuver._metadata, IAgAvtrProcedureBasicManeuver._set_ControlTimeConstant_metadata, newVal)

    _GetAsProcedure_metadata = { "name" : "GetAsProcedure",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    def GetAsProcedure(self) -> "IAgAvtrProcedure":
        """Get the procedure interface."""
        return self._intf.invoke(IAgAvtrProcedureBasicManeuver._metadata, IAgAvtrProcedureBasicManeuver._GetAsProcedure_metadata, out_arg())


agcls.AgClassCatalog.add_catalog_entry("{7cf58344-514c-44a6-aaf0-a45c4472e299}", IAgAvtrProcedureBasicManeuver)
agcls.AgTypeNameMap["IAgAvtrProcedureBasicManeuver"] = IAgAvtrProcedureBasicManeuver

class IAgAvtrSiteWaypoint(object):
    """Interface used to access the options for a waypoint site."""
    _num_methods = 5
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{caca5c56-6c49-4de7-ae28-8361d3f8cdee}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_Latitude" : 1,
                             "set_Latitude" : 2,
                             "get_Longitude" : 3,
                             "set_Longitude" : 4,
                             "GetAsSite" : 5, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrSiteWaypoint._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrSiteWaypoint from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrSiteWaypoint.__dict__ and type(IAgAvtrSiteWaypoint.__dict__[attrname]) == property:
            return IAgAvtrSiteWaypoint.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrSiteWaypoint.")
    
    _get_Latitude_metadata = { "name" : "Latitude",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def Latitude(self) -> typing.Any:
        """The waypoint latitude."""
        return self._intf.get_property(IAgAvtrSiteWaypoint._metadata, IAgAvtrSiteWaypoint._get_Latitude_metadata)

    _set_Latitude_metadata = { "name" : "Latitude",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @Latitude.setter
    def Latitude(self, newVal:typing.Any) -> None:
        """The waypoint latitude."""
        return self._intf.set_property(IAgAvtrSiteWaypoint._metadata, IAgAvtrSiteWaypoint._set_Latitude_metadata, newVal)

    _get_Longitude_metadata = { "name" : "Longitude",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def Longitude(self) -> typing.Any:
        """The waypoint longitude."""
        return self._intf.get_property(IAgAvtrSiteWaypoint._metadata, IAgAvtrSiteWaypoint._get_Longitude_metadata)

    _set_Longitude_metadata = { "name" : "Longitude",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @Longitude.setter
    def Longitude(self, newVal:typing.Any) -> None:
        """The waypoint longitude."""
        return self._intf.set_property(IAgAvtrSiteWaypoint._metadata, IAgAvtrSiteWaypoint._set_Longitude_metadata, newVal)

    _GetAsSite_metadata = { "name" : "GetAsSite",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    def GetAsSite(self) -> "IAgAvtrSite":
        """Get the site interface."""
        return self._intf.invoke(IAgAvtrSiteWaypoint._metadata, IAgAvtrSiteWaypoint._GetAsSite_metadata, out_arg())


agcls.AgClassCatalog.add_catalog_entry("{caca5c56-6c49-4de7-ae28-8361d3f8cdee}", IAgAvtrSiteWaypoint)
agcls.AgTypeNameMap["IAgAvtrSiteWaypoint"] = IAgAvtrSiteWaypoint

class IAgAvtrSiteEndOfPrevProcedure(object):
    """Interface used to access the options for an End of Previous Procedure site type."""
    _num_methods = 1
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{338fad56-1c3d-4572-97e4-24e01b1d7e65}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "GetAsSite" : 1, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrSiteEndOfPrevProcedure._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrSiteEndOfPrevProcedure from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrSiteEndOfPrevProcedure.__dict__ and type(IAgAvtrSiteEndOfPrevProcedure.__dict__[attrname]) == property:
            return IAgAvtrSiteEndOfPrevProcedure.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrSiteEndOfPrevProcedure.")
    
    _GetAsSite_metadata = { "name" : "GetAsSite",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    def GetAsSite(self) -> "IAgAvtrSite":
        """Get the site interface."""
        return self._intf.invoke(IAgAvtrSiteEndOfPrevProcedure._metadata, IAgAvtrSiteEndOfPrevProcedure._GetAsSite_metadata, out_arg())


agcls.AgClassCatalog.add_catalog_entry("{338fad56-1c3d-4572-97e4-24e01b1d7e65}", IAgAvtrSiteEndOfPrevProcedure)
agcls.AgTypeNameMap["IAgAvtrSiteEndOfPrevProcedure"] = IAgAvtrSiteEndOfPrevProcedure

class IAgAvtrSiteVTOLPoint(object):
    """Interface used to access the options for a VTOL Point site."""
    _num_methods = 9
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{168a5693-2f2c-4db8-822e-dd3571fe8fac}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_Latitude" : 1,
                             "set_Latitude" : 2,
                             "get_Longitude" : 3,
                             "set_Longitude" : 4,
                             "get_Altitude" : 5,
                             "set_Altitude" : 6,
                             "get_AltitudeReference" : 7,
                             "set_AltitudeReference" : 8,
                             "GetAsSite" : 9, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrSiteVTOLPoint._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrSiteVTOLPoint from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrSiteVTOLPoint.__dict__ and type(IAgAvtrSiteVTOLPoint.__dict__[attrname]) == property:
            return IAgAvtrSiteVTOLPoint.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrSiteVTOLPoint.")
    
    _get_Latitude_metadata = { "name" : "Latitude",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def Latitude(self) -> typing.Any:
        """The VTOL Point latitude."""
        return self._intf.get_property(IAgAvtrSiteVTOLPoint._metadata, IAgAvtrSiteVTOLPoint._get_Latitude_metadata)

    _set_Latitude_metadata = { "name" : "Latitude",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @Latitude.setter
    def Latitude(self, newVal:typing.Any) -> None:
        """The VTOL Point latitude."""
        return self._intf.set_property(IAgAvtrSiteVTOLPoint._metadata, IAgAvtrSiteVTOLPoint._set_Latitude_metadata, newVal)

    _get_Longitude_metadata = { "name" : "Longitude",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def Longitude(self) -> typing.Any:
        """The VTOL Point longitude."""
        return self._intf.get_property(IAgAvtrSiteVTOLPoint._metadata, IAgAvtrSiteVTOLPoint._get_Longitude_metadata)

    _set_Longitude_metadata = { "name" : "Longitude",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @Longitude.setter
    def Longitude(self, newVal:typing.Any) -> None:
        """The VTOL Point longitude."""
        return self._intf.set_property(IAgAvtrSiteVTOLPoint._metadata, IAgAvtrSiteVTOLPoint._set_Longitude_metadata, newVal)

    _get_Altitude_metadata = { "name" : "Altitude",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def Altitude(self) -> float:
        """The altitude for the site."""
        return self._intf.get_property(IAgAvtrSiteVTOLPoint._metadata, IAgAvtrSiteVTOLPoint._get_Altitude_metadata)

    _set_Altitude_metadata = { "name" : "Altitude",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @Altitude.setter
    def Altitude(self, newVal:float) -> None:
        """The altitude for the site."""
        return self._intf.set_property(IAgAvtrSiteVTOLPoint._metadata, IAgAvtrSiteVTOLPoint._set_Altitude_metadata, newVal)

    _get_AltitudeReference_metadata = { "name" : "AltitudeReference",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrAGLMSL),) }
    @property
    def AltitudeReference(self) -> "AgEAvtrAGLMSL":
        """The altitude reference."""
        return self._intf.get_property(IAgAvtrSiteVTOLPoint._metadata, IAgAvtrSiteVTOLPoint._get_AltitudeReference_metadata)

    _set_AltitudeReference_metadata = { "name" : "AltitudeReference",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrAGLMSL),) }
    @AltitudeReference.setter
    def AltitudeReference(self, newVal:"AgEAvtrAGLMSL") -> None:
        """The altitude reference."""
        return self._intf.set_property(IAgAvtrSiteVTOLPoint._metadata, IAgAvtrSiteVTOLPoint._set_AltitudeReference_metadata, newVal)

    _GetAsSite_metadata = { "name" : "GetAsSite",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    def GetAsSite(self) -> "IAgAvtrSite":
        """Get the site interface."""
        return self._intf.invoke(IAgAvtrSiteVTOLPoint._metadata, IAgAvtrSiteVTOLPoint._GetAsSite_metadata, out_arg())


agcls.AgClassCatalog.add_catalog_entry("{168a5693-2f2c-4db8-822e-dd3571fe8fac}", IAgAvtrSiteVTOLPoint)
agcls.AgTypeNameMap["IAgAvtrSiteVTOLPoint"] = IAgAvtrSiteVTOLPoint

class IAgAvtrSiteSTKVehicle(object):
    """Interface used to access the options for a STK Vehicle site."""
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{a0260a3b-b3fc-48e8-8708-01c1d9edc6c5}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_ObjectName" : 1,
                             "set_ObjectName" : 2,
                             "get_ValidObjectNames" : 3,
                             "GetAsSite" : 4, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrSiteSTKVehicle._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrSiteSTKVehicle from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrSiteSTKVehicle.__dict__ and type(IAgAvtrSiteSTKVehicle.__dict__[attrname]) == property:
            return IAgAvtrSiteSTKVehicle.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrSiteSTKVehicle.")
    
    _get_ObjectName_metadata = { "name" : "ObjectName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def ObjectName(self) -> str:
        """The object name to link to."""
        return self._intf.get_property(IAgAvtrSiteSTKVehicle._metadata, IAgAvtrSiteSTKVehicle._get_ObjectName_metadata)

    _set_ObjectName_metadata = { "name" : "ObjectName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @ObjectName.setter
    def ObjectName(self, newVal:str) -> None:
        """The object name to link to."""
        return self._intf.set_property(IAgAvtrSiteSTKVehicle._metadata, IAgAvtrSiteSTKVehicle._set_ObjectName_metadata, newVal)

    _get_ValidObjectNames_metadata = { "name" : "ValidObjectNames",
            "arg_types" : (POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg,) }
    @property
    def ValidObjectNames(self) -> list:
        """Returns the valid object names."""
        return self._intf.get_property(IAgAvtrSiteSTKVehicle._metadata, IAgAvtrSiteSTKVehicle._get_ValidObjectNames_metadata)

    _GetAsSite_metadata = { "name" : "GetAsSite",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    def GetAsSite(self) -> "IAgAvtrSite":
        """Get the site interface."""
        return self._intf.invoke(IAgAvtrSiteSTKVehicle._metadata, IAgAvtrSiteSTKVehicle._GetAsSite_metadata, out_arg())


agcls.AgClassCatalog.add_catalog_entry("{a0260a3b-b3fc-48e8-8708-01c1d9edc6c5}", IAgAvtrSiteSTKVehicle)
agcls.AgTypeNameMap["IAgAvtrSiteSTKVehicle"] = IAgAvtrSiteSTKVehicle

class IAgAvtrSiteReferenceState(object):
    """Interface used to access the options for a Reference State site."""
    _num_methods = 1
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{3366da2b-74d8-47ef-8578-a304409e9401}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "GetAsSite" : 1, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrSiteReferenceState._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrSiteReferenceState from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrSiteReferenceState.__dict__ and type(IAgAvtrSiteReferenceState.__dict__[attrname]) == property:
            return IAgAvtrSiteReferenceState.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrSiteReferenceState.")
    
    _GetAsSite_metadata = { "name" : "GetAsSite",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    def GetAsSite(self) -> "IAgAvtrSite":
        """Get the site interface."""
        return self._intf.invoke(IAgAvtrSiteReferenceState._metadata, IAgAvtrSiteReferenceState._GetAsSite_metadata, out_arg())


agcls.AgClassCatalog.add_catalog_entry("{3366da2b-74d8-47ef-8578-a304409e9401}", IAgAvtrSiteReferenceState)
agcls.AgTypeNameMap["IAgAvtrSiteReferenceState"] = IAgAvtrSiteReferenceState

class IAgAvtrSiteSuperProcedure(object):
    """Interface used to access the options for a Super Procedure site."""
    _num_methods = 1
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{0f56f3fe-b661-4d53-84f6-14df85184626}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "GetAsSite" : 1, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrSiteSuperProcedure._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrSiteSuperProcedure from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrSiteSuperProcedure.__dict__ and type(IAgAvtrSiteSuperProcedure.__dict__[attrname]) == property:
            return IAgAvtrSiteSuperProcedure.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrSiteSuperProcedure.")
    
    _GetAsSite_metadata = { "name" : "GetAsSite",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    def GetAsSite(self) -> "IAgAvtrSite":
        """Get the site interface."""
        return self._intf.invoke(IAgAvtrSiteSuperProcedure._metadata, IAgAvtrSiteSuperProcedure._GetAsSite_metadata, out_arg())


agcls.AgClassCatalog.add_catalog_entry("{0f56f3fe-b661-4d53-84f6-14df85184626}", IAgAvtrSiteSuperProcedure)
agcls.AgTypeNameMap["IAgAvtrSiteSuperProcedure"] = IAgAvtrSiteSuperProcedure

class IAgAvtrSiteRelToPrevProcedure(object):
    """Interface used to access the options for a Relative to Previous Procedure site."""
    _num_methods = 7
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{5875fefc-17f1-4fed-a7d8-cde213515f2b}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_BearingMode" : 1,
                             "set_BearingMode" : 2,
                             "get_Bearing" : 3,
                             "set_Bearing" : 4,
                             "get_Range" : 5,
                             "set_Range" : 6,
                             "GetAsSite" : 7, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrSiteRelToPrevProcedure._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrSiteRelToPrevProcedure from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrSiteRelToPrevProcedure.__dict__ and type(IAgAvtrSiteRelToPrevProcedure.__dict__[attrname]) == property:
            return IAgAvtrSiteRelToPrevProcedure.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrSiteRelToPrevProcedure.")
    
    _get_BearingMode_metadata = { "name" : "BearingMode",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrRelAbsBearing),) }
    @property
    def BearingMode(self) -> "AgEAvtrRelAbsBearing":
        """The bearing reference."""
        return self._intf.get_property(IAgAvtrSiteRelToPrevProcedure._metadata, IAgAvtrSiteRelToPrevProcedure._get_BearingMode_metadata)

    _set_BearingMode_metadata = { "name" : "BearingMode",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrRelAbsBearing),) }
    @BearingMode.setter
    def BearingMode(self, newVal:"AgEAvtrRelAbsBearing") -> None:
        """The bearing reference."""
        return self._intf.set_property(IAgAvtrSiteRelToPrevProcedure._metadata, IAgAvtrSiteRelToPrevProcedure._set_BearingMode_metadata, newVal)

    _get_Bearing_metadata = { "name" : "Bearing",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def Bearing(self) -> typing.Any:
        """The bearing to define the site."""
        return self._intf.get_property(IAgAvtrSiteRelToPrevProcedure._metadata, IAgAvtrSiteRelToPrevProcedure._get_Bearing_metadata)

    _set_Bearing_metadata = { "name" : "Bearing",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @Bearing.setter
    def Bearing(self, newVal:typing.Any) -> None:
        """The bearing to define the site."""
        return self._intf.set_property(IAgAvtrSiteRelToPrevProcedure._metadata, IAgAvtrSiteRelToPrevProcedure._set_Bearing_metadata, newVal)

    _get_Range_metadata = { "name" : "Range",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def Range(self) -> float:
        """The range from the previous procedure."""
        return self._intf.get_property(IAgAvtrSiteRelToPrevProcedure._metadata, IAgAvtrSiteRelToPrevProcedure._get_Range_metadata)

    _set_Range_metadata = { "name" : "Range",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @Range.setter
    def Range(self, newVal:float) -> None:
        """The range from the previous procedure."""
        return self._intf.set_property(IAgAvtrSiteRelToPrevProcedure._metadata, IAgAvtrSiteRelToPrevProcedure._set_Range_metadata, newVal)

    _GetAsSite_metadata = { "name" : "GetAsSite",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    def GetAsSite(self) -> "IAgAvtrSite":
        """Get the site interface."""
        return self._intf.invoke(IAgAvtrSiteRelToPrevProcedure._metadata, IAgAvtrSiteRelToPrevProcedure._GetAsSite_metadata, out_arg())


agcls.AgClassCatalog.add_catalog_entry("{5875fefc-17f1-4fed-a7d8-cde213515f2b}", IAgAvtrSiteRelToPrevProcedure)
agcls.AgTypeNameMap["IAgAvtrSiteRelToPrevProcedure"] = IAgAvtrSiteRelToPrevProcedure

class IAgAvtrSiteSTKObjectWaypoint(object):
    """Interface used to access the options for a STK Object Waypoint site."""
    _num_methods = 20
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{b6021d54-bf89-41b2-a5bc-0ee0c064a0f3}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_ObjectName" : 1,
                             "set_ObjectName" : 2,
                             "get_ValidObjectNames" : 3,
                             "get_MinTime" : 4,
                             "get_WaypointTime" : 5,
                             "set_WaypointTime" : 6,
                             "get_MinimizeSiteProcTimeDiff" : 7,
                             "set_MinimizeSiteProcTimeDiff" : 8,
                             "get_MaxTime" : 9,
                             "get_OffsetMode" : 10,
                             "set_OffsetMode" : 11,
                             "get_Bearing" : 12,
                             "set_Bearing" : 13,
                             "get_UseMagneticBearing" : 14,
                             "set_UseMagneticBearing" : 15,
                             "get_Range" : 16,
                             "set_Range" : 17,
                             "get_VGTPoint" : 18,
                             "set_VGTPoint" : 19,
                             "GetAsSite" : 20, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrSiteSTKObjectWaypoint._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrSiteSTKObjectWaypoint from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrSiteSTKObjectWaypoint.__dict__ and type(IAgAvtrSiteSTKObjectWaypoint.__dict__[attrname]) == property:
            return IAgAvtrSiteSTKObjectWaypoint.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrSiteSTKObjectWaypoint.")
    
    _get_ObjectName_metadata = { "name" : "ObjectName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def ObjectName(self) -> str:
        """The object name to link to."""
        return self._intf.get_property(IAgAvtrSiteSTKObjectWaypoint._metadata, IAgAvtrSiteSTKObjectWaypoint._get_ObjectName_metadata)

    _set_ObjectName_metadata = { "name" : "ObjectName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @ObjectName.setter
    def ObjectName(self, newVal:str) -> None:
        """The object name to link to."""
        return self._intf.set_property(IAgAvtrSiteSTKObjectWaypoint._metadata, IAgAvtrSiteSTKObjectWaypoint._set_ObjectName_metadata, newVal)

    _get_ValidObjectNames_metadata = { "name" : "ValidObjectNames",
            "arg_types" : (POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg,) }
    @property
    def ValidObjectNames(self) -> list:
        """Returns the valid object names."""
        return self._intf.get_property(IAgAvtrSiteSTKObjectWaypoint._metadata, IAgAvtrSiteSTKObjectWaypoint._get_ValidObjectNames_metadata)

    _get_MinTime_metadata = { "name" : "MinTime",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def MinTime(self) -> typing.Any:
        """The earliest time that the object is available as a site."""
        return self._intf.get_property(IAgAvtrSiteSTKObjectWaypoint._metadata, IAgAvtrSiteSTKObjectWaypoint._get_MinTime_metadata)

    _get_WaypointTime_metadata = { "name" : "WaypointTime",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def WaypointTime(self) -> typing.Any:
        """The time at which the object's position will be used as a waypoint."""
        return self._intf.get_property(IAgAvtrSiteSTKObjectWaypoint._metadata, IAgAvtrSiteSTKObjectWaypoint._get_WaypointTime_metadata)

    _set_WaypointTime_metadata = { "name" : "WaypointTime",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @WaypointTime.setter
    def WaypointTime(self, newVal:typing.Any) -> None:
        """The time at which the object's position will be used as a waypoint."""
        return self._intf.set_property(IAgAvtrSiteSTKObjectWaypoint._metadata, IAgAvtrSiteSTKObjectWaypoint._set_WaypointTime_metadata, newVal)

    _get_MinimizeSiteProcTimeDiff_metadata = { "name" : "MinimizeSiteProcTimeDiff",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrMinimizeSiteProcTimeDiff),) }
    @property
    def MinimizeSiteProcTimeDiff(self) -> "AgEAvtrMinimizeSiteProcTimeDiff":
        """The mode to minimize the time difference between the procedure and site times."""
        return self._intf.get_property(IAgAvtrSiteSTKObjectWaypoint._metadata, IAgAvtrSiteSTKObjectWaypoint._get_MinimizeSiteProcTimeDiff_metadata)

    _set_MinimizeSiteProcTimeDiff_metadata = { "name" : "MinimizeSiteProcTimeDiff",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrMinimizeSiteProcTimeDiff),) }
    @MinimizeSiteProcTimeDiff.setter
    def MinimizeSiteProcTimeDiff(self, newVal:"AgEAvtrMinimizeSiteProcTimeDiff") -> None:
        """The mode to minimize the time difference between the procedure and site times."""
        return self._intf.set_property(IAgAvtrSiteSTKObjectWaypoint._metadata, IAgAvtrSiteSTKObjectWaypoint._set_MinimizeSiteProcTimeDiff_metadata, newVal)

    _get_MaxTime_metadata = { "name" : "MaxTime",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def MaxTime(self) -> typing.Any:
        """The latest time that the object is available as a site."""
        return self._intf.get_property(IAgAvtrSiteSTKObjectWaypoint._metadata, IAgAvtrSiteSTKObjectWaypoint._get_MaxTime_metadata)

    _get_OffsetMode_metadata = { "name" : "OffsetMode",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrSTKObjectWaypointOffsetMode),) }
    @property
    def OffsetMode(self) -> "AgEAvtrSTKObjectWaypointOffsetMode":
        """The mode to offset the site location relative from the STK Object."""
        return self._intf.get_property(IAgAvtrSiteSTKObjectWaypoint._metadata, IAgAvtrSiteSTKObjectWaypoint._get_OffsetMode_metadata)

    _set_OffsetMode_metadata = { "name" : "OffsetMode",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrSTKObjectWaypointOffsetMode),) }
    @OffsetMode.setter
    def OffsetMode(self, newVal:"AgEAvtrSTKObjectWaypointOffsetMode") -> None:
        """The mode to offset the site location relative from the STK Object."""
        return self._intf.set_property(IAgAvtrSiteSTKObjectWaypoint._metadata, IAgAvtrSiteSTKObjectWaypoint._set_OffsetMode_metadata, newVal)

    _get_Bearing_metadata = { "name" : "Bearing",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def Bearing(self) -> typing.Any:
        """The bearing offset of the site location relative to the object's position."""
        return self._intf.get_property(IAgAvtrSiteSTKObjectWaypoint._metadata, IAgAvtrSiteSTKObjectWaypoint._get_Bearing_metadata)

    _set_Bearing_metadata = { "name" : "Bearing",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @Bearing.setter
    def Bearing(self, newVal:typing.Any) -> None:
        """The bearing offset of the site location relative to the object's position."""
        return self._intf.set_property(IAgAvtrSiteSTKObjectWaypoint._metadata, IAgAvtrSiteSTKObjectWaypoint._set_Bearing_metadata, newVal)

    _get_UseMagneticBearing_metadata = { "name" : "UseMagneticBearing",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def UseMagneticBearing(self) -> bool:
        """The option to use a magnetic heading for the bearing."""
        return self._intf.get_property(IAgAvtrSiteSTKObjectWaypoint._metadata, IAgAvtrSiteSTKObjectWaypoint._get_UseMagneticBearing_metadata)

    _set_UseMagneticBearing_metadata = { "name" : "UseMagneticBearing",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @UseMagneticBearing.setter
    def UseMagneticBearing(self, newVal:bool) -> None:
        """The option to use a magnetic heading for the bearing."""
        return self._intf.set_property(IAgAvtrSiteSTKObjectWaypoint._metadata, IAgAvtrSiteSTKObjectWaypoint._set_UseMagneticBearing_metadata, newVal)

    _get_Range_metadata = { "name" : "Range",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def Range(self) -> float:
        """The range offset of the site location relative to the object's position."""
        return self._intf.get_property(IAgAvtrSiteSTKObjectWaypoint._metadata, IAgAvtrSiteSTKObjectWaypoint._get_Range_metadata)

    _set_Range_metadata = { "name" : "Range",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @Range.setter
    def Range(self, newVal:float) -> None:
        """The range offset of the site location relative to the object's position."""
        return self._intf.set_property(IAgAvtrSiteSTKObjectWaypoint._metadata, IAgAvtrSiteSTKObjectWaypoint._set_Range_metadata, newVal)

    _get_VGTPoint_metadata = { "name" : "VGTPoint",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def VGTPoint(self) -> str:
        """The reference VGT Point."""
        return self._intf.get_property(IAgAvtrSiteSTKObjectWaypoint._metadata, IAgAvtrSiteSTKObjectWaypoint._get_VGTPoint_metadata)

    _set_VGTPoint_metadata = { "name" : "VGTPoint",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @VGTPoint.setter
    def VGTPoint(self, newVal:str) -> None:
        """The reference VGT Point."""
        return self._intf.set_property(IAgAvtrSiteSTKObjectWaypoint._metadata, IAgAvtrSiteSTKObjectWaypoint._set_VGTPoint_metadata, newVal)

    _GetAsSite_metadata = { "name" : "GetAsSite",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    def GetAsSite(self) -> "IAgAvtrSite":
        """Get the site interface."""
        return self._intf.invoke(IAgAvtrSiteSTKObjectWaypoint._metadata, IAgAvtrSiteSTKObjectWaypoint._GetAsSite_metadata, out_arg())


agcls.AgClassCatalog.add_catalog_entry("{b6021d54-bf89-41b2-a5bc-0ee0c064a0f3}", IAgAvtrSiteSTKObjectWaypoint)
agcls.AgTypeNameMap["IAgAvtrSiteSTKObjectWaypoint"] = IAgAvtrSiteSTKObjectWaypoint

class IAgAvtrSiteSTKStaticObject(object):
    """Interface used to access the options for a STK Static Object site."""
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{b9b132d7-25a7-49c2-8f68-945ef572a4fe}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_ObjectName" : 1,
                             "set_ObjectName" : 2,
                             "get_ValidObjectNames" : 3,
                             "GetAsSite" : 4, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrSiteSTKStaticObject._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrSiteSTKStaticObject from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrSiteSTKStaticObject.__dict__ and type(IAgAvtrSiteSTKStaticObject.__dict__[attrname]) == property:
            return IAgAvtrSiteSTKStaticObject.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrSiteSTKStaticObject.")
    
    _get_ObjectName_metadata = { "name" : "ObjectName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def ObjectName(self) -> str:
        """The object name to link to."""
        return self._intf.get_property(IAgAvtrSiteSTKStaticObject._metadata, IAgAvtrSiteSTKStaticObject._get_ObjectName_metadata)

    _set_ObjectName_metadata = { "name" : "ObjectName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @ObjectName.setter
    def ObjectName(self, newVal:str) -> None:
        """The object name to link to."""
        return self._intf.set_property(IAgAvtrSiteSTKStaticObject._metadata, IAgAvtrSiteSTKStaticObject._set_ObjectName_metadata, newVal)

    _get_ValidObjectNames_metadata = { "name" : "ValidObjectNames",
            "arg_types" : (POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg,) }
    @property
    def ValidObjectNames(self) -> list:
        """Returns the valid object names."""
        return self._intf.get_property(IAgAvtrSiteSTKStaticObject._metadata, IAgAvtrSiteSTKStaticObject._get_ValidObjectNames_metadata)

    _GetAsSite_metadata = { "name" : "GetAsSite",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    def GetAsSite(self) -> "IAgAvtrSite":
        """Get the site interface."""
        return self._intf.invoke(IAgAvtrSiteSTKStaticObject._metadata, IAgAvtrSiteSTKStaticObject._GetAsSite_metadata, out_arg())


agcls.AgClassCatalog.add_catalog_entry("{b9b132d7-25a7-49c2-8f68-945ef572a4fe}", IAgAvtrSiteSTKStaticObject)
agcls.AgTypeNameMap["IAgAvtrSiteSTKStaticObject"] = IAgAvtrSiteSTKStaticObject

class IAgAvtrSiteRelToSTKObject(object):
    """Interface used to access the options for a Relative to Stationary STK Object site."""
    _num_methods = 10
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{b0257931-faca-477d-a0a1-9f36cbbb5c7f}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_ObjectName" : 1,
                             "set_ObjectName" : 2,
                             "get_ValidObjectNames" : 3,
                             "get_Bearing" : 4,
                             "set_Bearing" : 5,
                             "get_UseMagneticBearing" : 6,
                             "set_UseMagneticBearing" : 7,
                             "get_Range" : 8,
                             "set_Range" : 9,
                             "GetAsSite" : 10, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrSiteRelToSTKObject._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrSiteRelToSTKObject from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrSiteRelToSTKObject.__dict__ and type(IAgAvtrSiteRelToSTKObject.__dict__[attrname]) == property:
            return IAgAvtrSiteRelToSTKObject.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrSiteRelToSTKObject.")
    
    _get_ObjectName_metadata = { "name" : "ObjectName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def ObjectName(self) -> str:
        """The object name to link to."""
        return self._intf.get_property(IAgAvtrSiteRelToSTKObject._metadata, IAgAvtrSiteRelToSTKObject._get_ObjectName_metadata)

    _set_ObjectName_metadata = { "name" : "ObjectName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @ObjectName.setter
    def ObjectName(self, newVal:str) -> None:
        """The object name to link to."""
        return self._intf.set_property(IAgAvtrSiteRelToSTKObject._metadata, IAgAvtrSiteRelToSTKObject._set_ObjectName_metadata, newVal)

    _get_ValidObjectNames_metadata = { "name" : "ValidObjectNames",
            "arg_types" : (POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg,) }
    @property
    def ValidObjectNames(self) -> list:
        """Returns the valid object names."""
        return self._intf.get_property(IAgAvtrSiteRelToSTKObject._metadata, IAgAvtrSiteRelToSTKObject._get_ValidObjectNames_metadata)

    _get_Bearing_metadata = { "name" : "Bearing",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def Bearing(self) -> typing.Any:
        """The bearing from the STK object."""
        return self._intf.get_property(IAgAvtrSiteRelToSTKObject._metadata, IAgAvtrSiteRelToSTKObject._get_Bearing_metadata)

    _set_Bearing_metadata = { "name" : "Bearing",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @Bearing.setter
    def Bearing(self, newVal:typing.Any) -> None:
        """The bearing from the STK object."""
        return self._intf.set_property(IAgAvtrSiteRelToSTKObject._metadata, IAgAvtrSiteRelToSTKObject._set_Bearing_metadata, newVal)

    _get_UseMagneticBearing_metadata = { "name" : "UseMagneticBearing",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def UseMagneticBearing(self) -> bool:
        """The option to use a magnetic bearing."""
        return self._intf.get_property(IAgAvtrSiteRelToSTKObject._metadata, IAgAvtrSiteRelToSTKObject._get_UseMagneticBearing_metadata)

    _set_UseMagneticBearing_metadata = { "name" : "UseMagneticBearing",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @UseMagneticBearing.setter
    def UseMagneticBearing(self, newVal:bool) -> None:
        """The option to use a magnetic bearing."""
        return self._intf.set_property(IAgAvtrSiteRelToSTKObject._metadata, IAgAvtrSiteRelToSTKObject._set_UseMagneticBearing_metadata, newVal)

    _get_Range_metadata = { "name" : "Range",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def Range(self) -> float:
        """The range from the STK object."""
        return self._intf.get_property(IAgAvtrSiteRelToSTKObject._metadata, IAgAvtrSiteRelToSTKObject._get_Range_metadata)

    _set_Range_metadata = { "name" : "Range",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @Range.setter
    def Range(self, newVal:float) -> None:
        """The range from the STK object."""
        return self._intf.set_property(IAgAvtrSiteRelToSTKObject._metadata, IAgAvtrSiteRelToSTKObject._set_Range_metadata, newVal)

    _GetAsSite_metadata = { "name" : "GetAsSite",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    def GetAsSite(self) -> "IAgAvtrSite":
        """Get the site interface."""
        return self._intf.invoke(IAgAvtrSiteRelToSTKObject._metadata, IAgAvtrSiteRelToSTKObject._GetAsSite_metadata, out_arg())


agcls.AgClassCatalog.add_catalog_entry("{b0257931-faca-477d-a0a1-9f36cbbb5c7f}", IAgAvtrSiteRelToSTKObject)
agcls.AgTypeNameMap["IAgAvtrSiteRelToSTKObject"] = IAgAvtrSiteRelToSTKObject

class IAgAvtrSiteSTKAreaTarget(object):
    """Interface used to access the options for a STK Area Target site."""
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{38dbad68-357f-4129-b8fb-3fbecd506e23}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_ObjectName" : 1,
                             "set_ObjectName" : 2,
                             "get_ValidObjectNames" : 3,
                             "GetAsSite" : 4, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrSiteSTKAreaTarget._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrSiteSTKAreaTarget from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrSiteSTKAreaTarget.__dict__ and type(IAgAvtrSiteSTKAreaTarget.__dict__[attrname]) == property:
            return IAgAvtrSiteSTKAreaTarget.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrSiteSTKAreaTarget.")
    
    _get_ObjectName_metadata = { "name" : "ObjectName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def ObjectName(self) -> str:
        """The object name to link to."""
        return self._intf.get_property(IAgAvtrSiteSTKAreaTarget._metadata, IAgAvtrSiteSTKAreaTarget._get_ObjectName_metadata)

    _set_ObjectName_metadata = { "name" : "ObjectName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @ObjectName.setter
    def ObjectName(self, newVal:str) -> None:
        """The object name to link to."""
        return self._intf.set_property(IAgAvtrSiteSTKAreaTarget._metadata, IAgAvtrSiteSTKAreaTarget._set_ObjectName_metadata, newVal)

    _get_ValidObjectNames_metadata = { "name" : "ValidObjectNames",
            "arg_types" : (POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg,) }
    @property
    def ValidObjectNames(self) -> list:
        """Returns the valid object names."""
        return self._intf.get_property(IAgAvtrSiteSTKAreaTarget._metadata, IAgAvtrSiteSTKAreaTarget._get_ValidObjectNames_metadata)

    _GetAsSite_metadata = { "name" : "GetAsSite",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    def GetAsSite(self) -> "IAgAvtrSite":
        """Get the site interface."""
        return self._intf.invoke(IAgAvtrSiteSTKAreaTarget._metadata, IAgAvtrSiteSTKAreaTarget._GetAsSite_metadata, out_arg())


agcls.AgClassCatalog.add_catalog_entry("{38dbad68-357f-4129-b8fb-3fbecd506e23}", IAgAvtrSiteSTKAreaTarget)
agcls.AgTypeNameMap["IAgAvtrSiteSTKAreaTarget"] = IAgAvtrSiteSTKAreaTarget

class IAgAvtrSiteRunway(object):
    """Interface used to access the options for a Runway site type."""
    _num_methods = 19
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{5b6661c4-9722-49ab-9236-ffbfe2821e86}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_Altitude" : 1,
                             "set_Altitude" : 2,
                             "get_Latitude" : 3,
                             "set_Latitude" : 4,
                             "get_Longitude" : 5,
                             "set_Longitude" : 6,
                             "get_Length" : 7,
                             "set_Length" : 8,
                             "get_AltitudeRef" : 9,
                             "set_AltitudeRef" : 10,
                             "get_LowEndHeading" : 11,
                             "set_LowEndHeading" : 12,
                             "get_HighEndHeading" : 13,
                             "set_HighEndHeading" : 14,
                             "get_IsMagnetic" : 15,
                             "set_IsMagnetic" : 16,
                             "AddToCatalog" : 17,
                             "CopyFromCatalog" : 18,
                             "GetAsSite" : 19, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrSiteRunway._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrSiteRunway from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrSiteRunway.__dict__ and type(IAgAvtrSiteRunway.__dict__[attrname]) == property:
            return IAgAvtrSiteRunway.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrSiteRunway.")
    
    _get_Altitude_metadata = { "name" : "Altitude",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def Altitude(self) -> float:
        """The runway altitude."""
        return self._intf.get_property(IAgAvtrSiteRunway._metadata, IAgAvtrSiteRunway._get_Altitude_metadata)

    _set_Altitude_metadata = { "name" : "Altitude",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @Altitude.setter
    def Altitude(self, newVal:float) -> None:
        """The runway altitude."""
        return self._intf.set_property(IAgAvtrSiteRunway._metadata, IAgAvtrSiteRunway._set_Altitude_metadata, newVal)

    _get_Latitude_metadata = { "name" : "Latitude",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def Latitude(self) -> typing.Any:
        """The runway latitude."""
        return self._intf.get_property(IAgAvtrSiteRunway._metadata, IAgAvtrSiteRunway._get_Latitude_metadata)

    _set_Latitude_metadata = { "name" : "Latitude",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @Latitude.setter
    def Latitude(self, newVal:typing.Any) -> None:
        """The runway latitude."""
        return self._intf.set_property(IAgAvtrSiteRunway._metadata, IAgAvtrSiteRunway._set_Latitude_metadata, newVal)

    _get_Longitude_metadata = { "name" : "Longitude",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def Longitude(self) -> typing.Any:
        """The runway longitude."""
        return self._intf.get_property(IAgAvtrSiteRunway._metadata, IAgAvtrSiteRunway._get_Longitude_metadata)

    _set_Longitude_metadata = { "name" : "Longitude",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @Longitude.setter
    def Longitude(self, newVal:typing.Any) -> None:
        """The runway longitude."""
        return self._intf.set_property(IAgAvtrSiteRunway._metadata, IAgAvtrSiteRunway._set_Longitude_metadata, newVal)

    _get_Length_metadata = { "name" : "Length",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def Length(self) -> float:
        """The length of the runway"""
        return self._intf.get_property(IAgAvtrSiteRunway._metadata, IAgAvtrSiteRunway._get_Length_metadata)

    _set_Length_metadata = { "name" : "Length",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @Length.setter
    def Length(self, newVal:float) -> None:
        """The length of the runway"""
        return self._intf.set_property(IAgAvtrSiteRunway._metadata, IAgAvtrSiteRunway._set_Length_metadata, newVal)

    _get_AltitudeRef_metadata = { "name" : "AltitudeRef",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrAGLMSL),) }
    @property
    def AltitudeRef(self) -> "AgEAvtrAGLMSL":
        """The altitude reference for the runway."""
        return self._intf.get_property(IAgAvtrSiteRunway._metadata, IAgAvtrSiteRunway._get_AltitudeRef_metadata)

    _set_AltitudeRef_metadata = { "name" : "AltitudeRef",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrAGLMSL),) }
    @AltitudeRef.setter
    def AltitudeRef(self, newVal:"AgEAvtrAGLMSL") -> None:
        """The altitude reference for the runway."""
        return self._intf.set_property(IAgAvtrSiteRunway._metadata, IAgAvtrSiteRunway._set_AltitudeRef_metadata, newVal)

    _get_LowEndHeading_metadata = { "name" : "LowEndHeading",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def LowEndHeading(self) -> typing.Any:
        """The low end heading of the runway."""
        return self._intf.get_property(IAgAvtrSiteRunway._metadata, IAgAvtrSiteRunway._get_LowEndHeading_metadata)

    _set_LowEndHeading_metadata = { "name" : "LowEndHeading",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @LowEndHeading.setter
    def LowEndHeading(self, newVal:typing.Any) -> None:
        """The low end heading of the runway."""
        return self._intf.set_property(IAgAvtrSiteRunway._metadata, IAgAvtrSiteRunway._set_LowEndHeading_metadata, newVal)

    _get_HighEndHeading_metadata = { "name" : "HighEndHeading",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def HighEndHeading(self) -> typing.Any:
        """The high end heading of the runway."""
        return self._intf.get_property(IAgAvtrSiteRunway._metadata, IAgAvtrSiteRunway._get_HighEndHeading_metadata)

    _set_HighEndHeading_metadata = { "name" : "HighEndHeading",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @HighEndHeading.setter
    def HighEndHeading(self, newVal:typing.Any) -> None:
        """The high end heading of the runway."""
        return self._intf.set_property(IAgAvtrSiteRunway._metadata, IAgAvtrSiteRunway._set_HighEndHeading_metadata, newVal)

    _get_IsMagnetic_metadata = { "name" : "IsMagnetic",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def IsMagnetic(self) -> bool:
        """Opt whether to use a magnetic heading for the runway heading."""
        return self._intf.get_property(IAgAvtrSiteRunway._metadata, IAgAvtrSiteRunway._get_IsMagnetic_metadata)

    _set_IsMagnetic_metadata = { "name" : "IsMagnetic",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @IsMagnetic.setter
    def IsMagnetic(self, newVal:bool) -> None:
        """Opt whether to use a magnetic heading for the runway heading."""
        return self._intf.set_property(IAgAvtrSiteRunway._metadata, IAgAvtrSiteRunway._set_IsMagnetic_metadata, newVal)

    _AddToCatalog_metadata = { "name" : "AddToCatalog",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    def AddToCatalog(self, overwrite:bool) -> None:
        """Add the runway to the catalog."""
        return self._intf.invoke(IAgAvtrSiteRunway._metadata, IAgAvtrSiteRunway._AddToCatalog_metadata, overwrite)

    _CopyFromCatalog_metadata = { "name" : "CopyFromCatalog",
            "arg_types" : (agcom.PVOID,),
            "marshallers" : (agmarshall.AgInterface_in_arg("IAgAvtrCatalogRunway"),) }
    def CopyFromCatalog(self, runway:"IAgAvtrCatalogRunway") -> None:
        """Copy the information from the runway stored in the catalog."""
        return self._intf.invoke(IAgAvtrSiteRunway._metadata, IAgAvtrSiteRunway._CopyFromCatalog_metadata, runway)

    _GetAsSite_metadata = { "name" : "GetAsSite",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    def GetAsSite(self) -> "IAgAvtrSite":
        """Get the site interface."""
        return self._intf.invoke(IAgAvtrSiteRunway._metadata, IAgAvtrSiteRunway._GetAsSite_metadata, out_arg())


agcls.AgClassCatalog.add_catalog_entry("{5b6661c4-9722-49ab-9236-ffbfe2821e86}", IAgAvtrSiteRunway)
agcls.AgTypeNameMap["IAgAvtrSiteRunway"] = IAgAvtrSiteRunway

class IAgAvtrProcedureLanding(object):
    """Interface used to access the options for a landing procedure."""
    _num_methods = 11
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{b3541a24-1ba3-47cd-86a9-4dc90b7d0c14}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_ModeAsStandardInstrumentApproach" : 1,
                             "get_ModeAsInterceptGlideslope" : 2,
                             "get_ModeAsEnterDownwindPattern" : 3,
                             "get_RunwayHeadingOptions" : 4,
                             "get_EnrouteCruiseAirspeedOptions" : 5,
                             "get_EnrouteTurnDirectionOptions" : 6,
                             "get_EnrouteOptions" : 7,
                             "get_VerticalPlaneOptions" : 8,
                             "get_ApproachMode" : 9,
                             "set_ApproachMode" : 10,
                             "GetAsProcedure" : 11, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrProcedureLanding._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrProcedureLanding from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrProcedureLanding.__dict__ and type(IAgAvtrProcedureLanding.__dict__[attrname]) == property:
            return IAgAvtrProcedureLanding.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrProcedureLanding.")
    
    _get_ModeAsStandardInstrumentApproach_metadata = { "name" : "ModeAsStandardInstrumentApproach",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def ModeAsStandardInstrumentApproach(self) -> "IAgAvtrLandingStandardInstrumentApproach":
        """Get the interface for a standard instrument approach landing."""
        return self._intf.get_property(IAgAvtrProcedureLanding._metadata, IAgAvtrProcedureLanding._get_ModeAsStandardInstrumentApproach_metadata)

    _get_ModeAsInterceptGlideslope_metadata = { "name" : "ModeAsInterceptGlideslope",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def ModeAsInterceptGlideslope(self) -> "IAgAvtrLandingInterceptGlideslope":
        """Get the interface for an intercept glideslope landing."""
        return self._intf.get_property(IAgAvtrProcedureLanding._metadata, IAgAvtrProcedureLanding._get_ModeAsInterceptGlideslope_metadata)

    _get_ModeAsEnterDownwindPattern_metadata = { "name" : "ModeAsEnterDownwindPattern",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def ModeAsEnterDownwindPattern(self) -> "IAgAvtrLandingEnterDownwindPattern":
        """Get the interface for a downwind pattern landing."""
        return self._intf.get_property(IAgAvtrProcedureLanding._metadata, IAgAvtrProcedureLanding._get_ModeAsEnterDownwindPattern_metadata)

    _get_RunwayHeadingOptions_metadata = { "name" : "RunwayHeadingOptions",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def RunwayHeadingOptions(self) -> "IAgAvtrRunwayHeadingOptions":
        """Get the runway heading options."""
        return self._intf.get_property(IAgAvtrProcedureLanding._metadata, IAgAvtrProcedureLanding._get_RunwayHeadingOptions_metadata)

    _get_EnrouteCruiseAirspeedOptions_metadata = { "name" : "EnrouteCruiseAirspeedOptions",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def EnrouteCruiseAirspeedOptions(self) -> "IAgAvtrCruiseAirspeedAndProfileOptions":
        """Get the enroute cruise airspeed options."""
        return self._intf.get_property(IAgAvtrProcedureLanding._metadata, IAgAvtrProcedureLanding._get_EnrouteCruiseAirspeedOptions_metadata)

    _get_EnrouteTurnDirectionOptions_metadata = { "name" : "EnrouteTurnDirectionOptions",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def EnrouteTurnDirectionOptions(self) -> "IAgAvtrEnrouteTurnDirectionOptions":
        """Get the enroute turn direction options."""
        return self._intf.get_property(IAgAvtrProcedureLanding._metadata, IAgAvtrProcedureLanding._get_EnrouteTurnDirectionOptions_metadata)

    _get_EnrouteOptions_metadata = { "name" : "EnrouteOptions",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def EnrouteOptions(self) -> "IAgAvtrEnrouteAndDelayOptions":
        """Get the enroute options."""
        return self._intf.get_property(IAgAvtrProcedureLanding._metadata, IAgAvtrProcedureLanding._get_EnrouteOptions_metadata)

    _get_VerticalPlaneOptions_metadata = { "name" : "VerticalPlaneOptions",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def VerticalPlaneOptions(self) -> "IAgAvtrVerticalPlaneOptions":
        """Get the vertical plane options."""
        return self._intf.get_property(IAgAvtrProcedureLanding._metadata, IAgAvtrProcedureLanding._get_VerticalPlaneOptions_metadata)

    _get_ApproachMode_metadata = { "name" : "ApproachMode",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrApproachMode),) }
    @property
    def ApproachMode(self) -> "AgEAvtrApproachMode":
        """The type of landing the aircraft will perform."""
        return self._intf.get_property(IAgAvtrProcedureLanding._metadata, IAgAvtrProcedureLanding._get_ApproachMode_metadata)

    _set_ApproachMode_metadata = { "name" : "ApproachMode",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrApproachMode),) }
    @ApproachMode.setter
    def ApproachMode(self, newVal:"AgEAvtrApproachMode") -> None:
        """The type of landing the aircraft will perform."""
        return self._intf.set_property(IAgAvtrProcedureLanding._metadata, IAgAvtrProcedureLanding._set_ApproachMode_metadata, newVal)

    _GetAsProcedure_metadata = { "name" : "GetAsProcedure",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    def GetAsProcedure(self) -> "IAgAvtrProcedure":
        """Get the procedure interface."""
        return self._intf.invoke(IAgAvtrProcedureLanding._metadata, IAgAvtrProcedureLanding._GetAsProcedure_metadata, out_arg())


agcls.AgClassCatalog.add_catalog_entry("{b3541a24-1ba3-47cd-86a9-4dc90b7d0c14}", IAgAvtrProcedureLanding)
agcls.AgTypeNameMap["IAgAvtrProcedureLanding"] = IAgAvtrProcedureLanding

class IAgAvtrProcedureEnroute(object):
    """Interface used to access the options for an enroute procedure."""
    _num_methods = 5
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{a35c59ac-496b-4b6c-aa8a-fd55e9992a97}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_AltitudeMSLOptions" : 1,
                             "get_NavigationOptions" : 2,
                             "get_EnrouteOptions" : 3,
                             "get_EnrouteCruiseAirspeedOptions" : 4,
                             "GetAsProcedure" : 5, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrProcedureEnroute._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrProcedureEnroute from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrProcedureEnroute.__dict__ and type(IAgAvtrProcedureEnroute.__dict__[attrname]) == property:
            return IAgAvtrProcedureEnroute.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrProcedureEnroute.")
    
    _get_AltitudeMSLOptions_metadata = { "name" : "AltitudeMSLOptions",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def AltitudeMSLOptions(self) -> "IAgAvtrAltitudeMSLAndLevelOffOptions":
        """Get the altitude MSL options."""
        return self._intf.get_property(IAgAvtrProcedureEnroute._metadata, IAgAvtrProcedureEnroute._get_AltitudeMSLOptions_metadata)

    _get_NavigationOptions_metadata = { "name" : "NavigationOptions",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def NavigationOptions(self) -> "IAgAvtrNavigationOptions":
        """Get the navigation options."""
        return self._intf.get_property(IAgAvtrProcedureEnroute._metadata, IAgAvtrProcedureEnroute._get_NavigationOptions_metadata)

    _get_EnrouteOptions_metadata = { "name" : "EnrouteOptions",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def EnrouteOptions(self) -> "IAgAvtrEnrouteAndDelayOptions":
        """Get the enroute options."""
        return self._intf.get_property(IAgAvtrProcedureEnroute._metadata, IAgAvtrProcedureEnroute._get_EnrouteOptions_metadata)

    _get_EnrouteCruiseAirspeedOptions_metadata = { "name" : "EnrouteCruiseAirspeedOptions",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def EnrouteCruiseAirspeedOptions(self) -> "IAgAvtrCruiseAirspeedOptions":
        """Get the enroute cruise airspeed options."""
        return self._intf.get_property(IAgAvtrProcedureEnroute._metadata, IAgAvtrProcedureEnroute._get_EnrouteCruiseAirspeedOptions_metadata)

    _GetAsProcedure_metadata = { "name" : "GetAsProcedure",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    def GetAsProcedure(self) -> "IAgAvtrProcedure":
        """Get the procedure interface."""
        return self._intf.invoke(IAgAvtrProcedureEnroute._metadata, IAgAvtrProcedureEnroute._GetAsProcedure_metadata, out_arg())


agcls.AgClassCatalog.add_catalog_entry("{a35c59ac-496b-4b6c-aa8a-fd55e9992a97}", IAgAvtrProcedureEnroute)
agcls.AgTypeNameMap["IAgAvtrProcedureEnroute"] = IAgAvtrProcedureEnroute

class IAgAvtrProcedureExtEphem(object):
    """Interface used to access the options for an ExtEphem procedure."""
    _num_methods = 12
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{7A4CFB91-336F-4150-AD2C-C861410FB496}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "set_EphemerisFile" : 1,
                             "get_EphemerisFile" : 2,
                             "get_EphemerisFileDuration" : 3,
                             "set_UseStartDuration" : 4,
                             "get_UseStartDuration" : 5,
                             "set_StartTime" : 6,
                             "get_StartTime" : 7,
                             "set_Duration" : 8,
                             "get_Duration" : 9,
                             "get_FlightMode" : 10,
                             "set_FlightMode" : 11,
                             "GetAsProcedure" : 12, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrProcedureExtEphem._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrProcedureExtEphem from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrProcedureExtEphem.__dict__ and type(IAgAvtrProcedureExtEphem.__dict__[attrname]) == property:
            return IAgAvtrProcedureExtEphem.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrProcedureExtEphem.")
    
    _get_EphemerisFile_metadata = { "name" : "EphemerisFile",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def EphemerisFile(self) -> str:
        """Get the ephemeris filename."""
        return self._intf.get_property(IAgAvtrProcedureExtEphem._metadata, IAgAvtrProcedureExtEphem._get_EphemerisFile_metadata)

    _set_EphemerisFile_metadata = { "name" : "EphemerisFile",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @EphemerisFile.setter
    def EphemerisFile(self, newVal:str) -> None:
        """Set the ephemeris filename."""
        return self._intf.set_property(IAgAvtrProcedureExtEphem._metadata, IAgAvtrProcedureExtEphem._set_EphemerisFile_metadata, newVal)

    _get_EphemerisFileDuration_metadata = { "name" : "EphemerisFileDuration",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def EphemerisFileDuration(self) -> float:
        """Get the ephemeris file duration."""
        return self._intf.get_property(IAgAvtrProcedureExtEphem._metadata, IAgAvtrProcedureExtEphem._get_EphemerisFileDuration_metadata)

    _get_UseStartDuration_metadata = { "name" : "UseStartDuration",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def UseStartDuration(self) -> bool:
        """Get whether to use Start and Duration"""
        return self._intf.get_property(IAgAvtrProcedureExtEphem._metadata, IAgAvtrProcedureExtEphem._get_UseStartDuration_metadata)

    _set_UseStartDuration_metadata = { "name" : "UseStartDuration",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @UseStartDuration.setter
    def UseStartDuration(self, useSD:bool) -> None:
        """Set whether to use Start and Duration"""
        return self._intf.set_property(IAgAvtrProcedureExtEphem._metadata, IAgAvtrProcedureExtEphem._set_UseStartDuration_metadata, useSD)

    _get_StartTime_metadata = { "name" : "StartTime",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def StartTime(self) -> float:
        """Get the start time"""
        return self._intf.get_property(IAgAvtrProcedureExtEphem._metadata, IAgAvtrProcedureExtEphem._get_StartTime_metadata)

    _set_StartTime_metadata = { "name" : "StartTime",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @StartTime.setter
    def StartTime(self, start:float) -> None:
        """Set the start time"""
        return self._intf.set_property(IAgAvtrProcedureExtEphem._metadata, IAgAvtrProcedureExtEphem._set_StartTime_metadata, start)

    _get_Duration_metadata = { "name" : "Duration",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def Duration(self) -> float:
        """Get the duration"""
        return self._intf.get_property(IAgAvtrProcedureExtEphem._metadata, IAgAvtrProcedureExtEphem._get_Duration_metadata)

    _set_Duration_metadata = { "name" : "Duration",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @Duration.setter
    def Duration(self, start:float) -> None:
        """Set the duration"""
        return self._intf.set_property(IAgAvtrProcedureExtEphem._metadata, IAgAvtrProcedureExtEphem._set_Duration_metadata, start)

    _get_FlightMode_metadata = { "name" : "FlightMode",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrExtEphemFlightMode),) }
    @property
    def FlightMode(self) -> "AgEAvtrExtEphemFlightMode":
        """Get the flight mode"""
        return self._intf.get_property(IAgAvtrProcedureExtEphem._metadata, IAgAvtrProcedureExtEphem._get_FlightMode_metadata)

    _set_FlightMode_metadata = { "name" : "FlightMode",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrExtEphemFlightMode),) }
    @FlightMode.setter
    def FlightMode(self, mode:"AgEAvtrExtEphemFlightMode") -> None:
        """Set the flight mode"""
        return self._intf.set_property(IAgAvtrProcedureExtEphem._metadata, IAgAvtrProcedureExtEphem._set_FlightMode_metadata, mode)

    _GetAsProcedure_metadata = { "name" : "GetAsProcedure",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    def GetAsProcedure(self) -> "IAgAvtrProcedure":
        """Get the procedure interface."""
        return self._intf.invoke(IAgAvtrProcedureExtEphem._metadata, IAgAvtrProcedureExtEphem._GetAsProcedure_metadata, out_arg())


agcls.AgClassCatalog.add_catalog_entry("{7A4CFB91-336F-4150-AD2C-C861410FB496}", IAgAvtrProcedureExtEphem)
agcls.AgTypeNameMap["IAgAvtrProcedureExtEphem"] = IAgAvtrProcedureExtEphem

class IAgAvtrProcedureFormationFlyer(object):
    """Interface used to access the options for an enroute procedure."""
    _num_methods = 17
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{A8EF3889-1443-405A-AFC6-5072D53F9AC4}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_MinTimeStep" : 1,
                             "set_MinTimeStep" : 2,
                             "get_MaxTimeStep" : 3,
                             "set_MaxTimeStep" : 4,
                             "get_CrossRangeCloseRate" : 5,
                             "set_CrossRangeCloseRate" : 6,
                             "get_InitialCloseMaxSpeedAdvantage" : 7,
                             "set_InitialCloseMaxSpeedAdvantage" : 8,
                             "get_StopCondition" : 9,
                             "set_StopCondition" : 10,
                             "get_StopTime" : 11,
                             "set_StopTime" : 12,
                             "get_StopDownRange" : 13,
                             "set_StopDownRange" : 14,
                             "get_StopFuelState" : 15,
                             "set_StopFuelState" : 16,
                             "GetAsProcedure" : 17, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrProcedureFormationFlyer._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrProcedureFormationFlyer from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrProcedureFormationFlyer.__dict__ and type(IAgAvtrProcedureFormationFlyer.__dict__[attrname]) == property:
            return IAgAvtrProcedureFormationFlyer.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrProcedureFormationFlyer.")
    
    _get_MinTimeStep_metadata = { "name" : "MinTimeStep",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def MinTimeStep(self) -> float:
        """Get Min time Step"""
        return self._intf.get_property(IAgAvtrProcedureFormationFlyer._metadata, IAgAvtrProcedureFormationFlyer._get_MinTimeStep_metadata)

    _set_MinTimeStep_metadata = { "name" : "MinTimeStep",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @MinTimeStep.setter
    def MinTimeStep(self, pVal:float) -> None:
        """Set Min time Step"""
        return self._intf.set_property(IAgAvtrProcedureFormationFlyer._metadata, IAgAvtrProcedureFormationFlyer._set_MinTimeStep_metadata, pVal)

    _get_MaxTimeStep_metadata = { "name" : "MaxTimeStep",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def MaxTimeStep(self) -> float:
        """Get Max time Step"""
        return self._intf.get_property(IAgAvtrProcedureFormationFlyer._metadata, IAgAvtrProcedureFormationFlyer._get_MaxTimeStep_metadata)

    _set_MaxTimeStep_metadata = { "name" : "MaxTimeStep",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @MaxTimeStep.setter
    def MaxTimeStep(self, pVal:float) -> None:
        """Set Max time Step"""
        return self._intf.set_property(IAgAvtrProcedureFormationFlyer._metadata, IAgAvtrProcedureFormationFlyer._set_MaxTimeStep_metadata, pVal)

    _get_CrossRangeCloseRate_metadata = { "name" : "CrossRangeCloseRate",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def CrossRangeCloseRate(self) -> float:
        """Get Cross Range close rate"""
        return self._intf.get_property(IAgAvtrProcedureFormationFlyer._metadata, IAgAvtrProcedureFormationFlyer._get_CrossRangeCloseRate_metadata)

    _set_CrossRangeCloseRate_metadata = { "name" : "CrossRangeCloseRate",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @CrossRangeCloseRate.setter
    def CrossRangeCloseRate(self, pVal:float) -> None:
        """Set Cross Range close rate"""
        return self._intf.set_property(IAgAvtrProcedureFormationFlyer._metadata, IAgAvtrProcedureFormationFlyer._set_CrossRangeCloseRate_metadata, pVal)

    _get_InitialCloseMaxSpeedAdvantage_metadata = { "name" : "InitialCloseMaxSpeedAdvantage",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def InitialCloseMaxSpeedAdvantage(self) -> float:
        """Get Initial Close Max Speed Advantage"""
        return self._intf.get_property(IAgAvtrProcedureFormationFlyer._metadata, IAgAvtrProcedureFormationFlyer._get_InitialCloseMaxSpeedAdvantage_metadata)

    _set_InitialCloseMaxSpeedAdvantage_metadata = { "name" : "InitialCloseMaxSpeedAdvantage",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @InitialCloseMaxSpeedAdvantage.setter
    def InitialCloseMaxSpeedAdvantage(self, pVal:float) -> None:
        """Set Initial Close Max Speed Advantage"""
        return self._intf.set_property(IAgAvtrProcedureFormationFlyer._metadata, IAgAvtrProcedureFormationFlyer._set_InitialCloseMaxSpeedAdvantage_metadata, pVal)

    _get_StopCondition_metadata = { "name" : "StopCondition",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrFormationFlyerStopCondition),) }
    @property
    def StopCondition(self) -> "AgEAvtrFormationFlyerStopCondition":
        """Get Stop condition"""
        return self._intf.get_property(IAgAvtrProcedureFormationFlyer._metadata, IAgAvtrProcedureFormationFlyer._get_StopCondition_metadata)

    _set_StopCondition_metadata = { "name" : "StopCondition",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrFormationFlyerStopCondition),) }
    @StopCondition.setter
    def StopCondition(self, pVal:"AgEAvtrFormationFlyerStopCondition") -> None:
        """Set Stop condition"""
        return self._intf.set_property(IAgAvtrProcedureFormationFlyer._metadata, IAgAvtrProcedureFormationFlyer._set_StopCondition_metadata, pVal)

    _get_StopTime_metadata = { "name" : "StopTime",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def StopTime(self) -> float:
        """Get stop time"""
        return self._intf.get_property(IAgAvtrProcedureFormationFlyer._metadata, IAgAvtrProcedureFormationFlyer._get_StopTime_metadata)

    _set_StopTime_metadata = { "name" : "StopTime",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @StopTime.setter
    def StopTime(self, pVal:float) -> None:
        """Set stop time"""
        return self._intf.set_property(IAgAvtrProcedureFormationFlyer._metadata, IAgAvtrProcedureFormationFlyer._set_StopTime_metadata, pVal)

    _get_StopDownRange_metadata = { "name" : "StopDownRange",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def StopDownRange(self) -> float:
        """Get stop downrange"""
        return self._intf.get_property(IAgAvtrProcedureFormationFlyer._metadata, IAgAvtrProcedureFormationFlyer._get_StopDownRange_metadata)

    _set_StopDownRange_metadata = { "name" : "StopDownRange",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @StopDownRange.setter
    def StopDownRange(self, pVal:float) -> None:
        """Set stop downrange"""
        return self._intf.set_property(IAgAvtrProcedureFormationFlyer._metadata, IAgAvtrProcedureFormationFlyer._set_StopDownRange_metadata, pVal)

    _get_StopFuelState_metadata = { "name" : "StopFuelState",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def StopFuelState(self) -> float:
        """Get stop fuel state"""
        return self._intf.get_property(IAgAvtrProcedureFormationFlyer._metadata, IAgAvtrProcedureFormationFlyer._get_StopFuelState_metadata)

    _set_StopFuelState_metadata = { "name" : "StopFuelState",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @StopFuelState.setter
    def StopFuelState(self, pVal:float) -> None:
        """Set stop fuel state"""
        return self._intf.set_property(IAgAvtrProcedureFormationFlyer._metadata, IAgAvtrProcedureFormationFlyer._set_StopFuelState_metadata, pVal)

    _GetAsProcedure_metadata = { "name" : "GetAsProcedure",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    def GetAsProcedure(self) -> "IAgAvtrProcedure":
        """Get the procedure interface."""
        return self._intf.invoke(IAgAvtrProcedureFormationFlyer._metadata, IAgAvtrProcedureFormationFlyer._GetAsProcedure_metadata, out_arg())


agcls.AgClassCatalog.add_catalog_entry("{A8EF3889-1443-405A-AFC6-5072D53F9AC4}", IAgAvtrProcedureFormationFlyer)
agcls.AgTypeNameMap["IAgAvtrProcedureFormationFlyer"] = IAgAvtrProcedureFormationFlyer

class IAgAvtrProcedureBasicPointToPoint(object):
    """Interface used to access the options for a basic point to point procedure."""
    _num_methods = 6
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{e6e53440-4d07-4808-be87-ed2bf3908208}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_AltitudeOptions" : 1,
                             "get_NavigationOptions" : 2,
                             "get_EnrouteOptions" : 3,
                             "get_EnrouteCruiseAirspeedOptions" : 4,
                             "get_VerticalPlaneOptions" : 5,
                             "GetAsProcedure" : 6, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrProcedureBasicPointToPoint._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrProcedureBasicPointToPoint from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrProcedureBasicPointToPoint.__dict__ and type(IAgAvtrProcedureBasicPointToPoint.__dict__[attrname]) == property:
            return IAgAvtrProcedureBasicPointToPoint.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrProcedureBasicPointToPoint.")
    
    _get_AltitudeOptions_metadata = { "name" : "AltitudeOptions",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def AltitudeOptions(self) -> "IAgAvtrAltitudeOptions":
        """Get the altitude options."""
        return self._intf.get_property(IAgAvtrProcedureBasicPointToPoint._metadata, IAgAvtrProcedureBasicPointToPoint._get_AltitudeOptions_metadata)

    _get_NavigationOptions_metadata = { "name" : "NavigationOptions",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def NavigationOptions(self) -> "IAgAvtrNavigationOptions":
        """Get the navigation options."""
        return self._intf.get_property(IAgAvtrProcedureBasicPointToPoint._metadata, IAgAvtrProcedureBasicPointToPoint._get_NavigationOptions_metadata)

    _get_EnrouteOptions_metadata = { "name" : "EnrouteOptions",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def EnrouteOptions(self) -> "IAgAvtrEnrouteOptions":
        """Get the enroute options."""
        return self._intf.get_property(IAgAvtrProcedureBasicPointToPoint._metadata, IAgAvtrProcedureBasicPointToPoint._get_EnrouteOptions_metadata)

    _get_EnrouteCruiseAirspeedOptions_metadata = { "name" : "EnrouteCruiseAirspeedOptions",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def EnrouteCruiseAirspeedOptions(self) -> "IAgAvtrCruiseAirspeedAndProfileOptions":
        """Get the enroute cruise airspeed options."""
        return self._intf.get_property(IAgAvtrProcedureBasicPointToPoint._metadata, IAgAvtrProcedureBasicPointToPoint._get_EnrouteCruiseAirspeedOptions_metadata)

    _get_VerticalPlaneOptions_metadata = { "name" : "VerticalPlaneOptions",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def VerticalPlaneOptions(self) -> "IAgAvtrVerticalPlaneAndFlightPathOptions":
        """Get the vertical plane options."""
        return self._intf.get_property(IAgAvtrProcedureBasicPointToPoint._metadata, IAgAvtrProcedureBasicPointToPoint._get_VerticalPlaneOptions_metadata)

    _GetAsProcedure_metadata = { "name" : "GetAsProcedure",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    def GetAsProcedure(self) -> "IAgAvtrProcedure":
        """Get the procedure interface."""
        return self._intf.invoke(IAgAvtrProcedureBasicPointToPoint._metadata, IAgAvtrProcedureBasicPointToPoint._GetAsProcedure_metadata, out_arg())


agcls.AgClassCatalog.add_catalog_entry("{e6e53440-4d07-4808-be87-ed2bf3908208}", IAgAvtrProcedureBasicPointToPoint)
agcls.AgTypeNameMap["IAgAvtrProcedureBasicPointToPoint"] = IAgAvtrProcedureBasicPointToPoint

class IAgAvtrProcedureDelay(object):
    """Interface used to access the options for a delay procedure."""
    _num_methods = 9
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{0196f260-017d-4f54-af50-7ca1ed1056b0}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_AltitudeMode" : 1,
                             "set_AltitudeMode" : 2,
                             "get_Altitude" : 3,
                             "set_Altitude" : 4,
                             "get_CruiseAirspeedOptions" : 5,
                             "get_TurnDirection" : 6,
                             "set_TurnDirection" : 7,
                             "get_TurnRadiusFactor" : 8,
                             "set_TurnRadiusFactor" : 9, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrProcedureDelay._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrProcedureDelay from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrProcedureDelay.__dict__ and type(IAgAvtrProcedureDelay.__dict__[attrname]) == property:
            return IAgAvtrProcedureDelay.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrProcedureDelay.")
    
    _get_AltitudeMode_metadata = { "name" : "AltitudeMode",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrDelayAltMode),) }
    @property
    def AltitudeMode(self) -> "AgEAvtrDelayAltMode":
        """The mode for handling the altitude of the aircraft."""
        return self._intf.get_property(IAgAvtrProcedureDelay._metadata, IAgAvtrProcedureDelay._get_AltitudeMode_metadata)

    _set_AltitudeMode_metadata = { "name" : "AltitudeMode",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrDelayAltMode),) }
    @AltitudeMode.setter
    def AltitudeMode(self, newVal:"AgEAvtrDelayAltMode") -> None:
        """The mode for handling the altitude of the aircraft."""
        return self._intf.set_property(IAgAvtrProcedureDelay._metadata, IAgAvtrProcedureDelay._set_AltitudeMode_metadata, newVal)

    _get_Altitude_metadata = { "name" : "Altitude",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def Altitude(self) -> float:
        """The requested altitude of the procedure."""
        return self._intf.get_property(IAgAvtrProcedureDelay._metadata, IAgAvtrProcedureDelay._get_Altitude_metadata)

    _set_Altitude_metadata = { "name" : "Altitude",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @Altitude.setter
    def Altitude(self, newVal:float) -> None:
        """The requested altitude of the procedure."""
        return self._intf.set_property(IAgAvtrProcedureDelay._metadata, IAgAvtrProcedureDelay._set_Altitude_metadata, newVal)

    _get_CruiseAirspeedOptions_metadata = { "name" : "CruiseAirspeedOptions",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def CruiseAirspeedOptions(self) -> "IAgAvtrCruiseAirspeedOptions":
        """Get the interface for the cruise airspeed options."""
        return self._intf.get_property(IAgAvtrProcedureDelay._metadata, IAgAvtrProcedureDelay._get_CruiseAirspeedOptions_metadata)

    _get_TurnDirection_metadata = { "name" : "TurnDirection",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrNavigatorTurnDir),) }
    @property
    def TurnDirection(self) -> "AgEAvtrNavigatorTurnDir":
        """The turn direction of the procedure."""
        return self._intf.get_property(IAgAvtrProcedureDelay._metadata, IAgAvtrProcedureDelay._get_TurnDirection_metadata)

    _set_TurnDirection_metadata = { "name" : "TurnDirection",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrNavigatorTurnDir),) }
    @TurnDirection.setter
    def TurnDirection(self, newVal:"AgEAvtrNavigatorTurnDir") -> None:
        """The turn direction of the procedure."""
        return self._intf.set_property(IAgAvtrProcedureDelay._metadata, IAgAvtrProcedureDelay._set_TurnDirection_metadata, newVal)

    _get_TurnRadiusFactor_metadata = { "name" : "TurnRadiusFactor",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def TurnRadiusFactor(self) -> float:
        """The turn radius factor."""
        return self._intf.get_property(IAgAvtrProcedureDelay._metadata, IAgAvtrProcedureDelay._get_TurnRadiusFactor_metadata)

    _set_TurnRadiusFactor_metadata = { "name" : "TurnRadiusFactor",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @TurnRadiusFactor.setter
    def TurnRadiusFactor(self, newVal:float) -> None:
        """The turn radius factor."""
        return self._intf.set_property(IAgAvtrProcedureDelay._metadata, IAgAvtrProcedureDelay._set_TurnRadiusFactor_metadata, newVal)


agcls.AgClassCatalog.add_catalog_entry("{0196f260-017d-4f54-af50-7ca1ed1056b0}", IAgAvtrProcedureDelay)
agcls.AgTypeNameMap["IAgAvtrProcedureDelay"] = IAgAvtrProcedureDelay

class IAgAvtrProcedureTakeoff(object):
    """Interface used to access the options for a takeoff procedure."""
    _num_methods = 7
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{2f8f0f66-d7ea-41df-ad48-bcd5bfcd90b7}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_RunwayHeadingOptions" : 1,
                             "get_ModeAsNormal" : 2,
                             "get_ModeAsDeparturePoint" : 3,
                             "get_ModeAsLowTransition" : 4,
                             "get_TakeoffMode" : 5,
                             "set_TakeoffMode" : 6,
                             "GetAsProcedure" : 7, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrProcedureTakeoff._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrProcedureTakeoff from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrProcedureTakeoff.__dict__ and type(IAgAvtrProcedureTakeoff.__dict__[attrname]) == property:
            return IAgAvtrProcedureTakeoff.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrProcedureTakeoff.")
    
    _get_RunwayHeadingOptions_metadata = { "name" : "RunwayHeadingOptions",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def RunwayHeadingOptions(self) -> "IAgAvtrRunwayHeadingOptions":
        """Get the runway heading options."""
        return self._intf.get_property(IAgAvtrProcedureTakeoff._metadata, IAgAvtrProcedureTakeoff._get_RunwayHeadingOptions_metadata)

    _get_ModeAsNormal_metadata = { "name" : "ModeAsNormal",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def ModeAsNormal(self) -> "IAgAvtrTakeoffNormal":
        """Get the interface for a normal takeoff."""
        return self._intf.get_property(IAgAvtrProcedureTakeoff._metadata, IAgAvtrProcedureTakeoff._get_ModeAsNormal_metadata)

    _get_ModeAsDeparturePoint_metadata = { "name" : "ModeAsDeparturePoint",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def ModeAsDeparturePoint(self) -> "IAgAvtrTakeoffDeparturePoint":
        """Get the interface for a departure point takeoff."""
        return self._intf.get_property(IAgAvtrProcedureTakeoff._metadata, IAgAvtrProcedureTakeoff._get_ModeAsDeparturePoint_metadata)

    _get_ModeAsLowTransition_metadata = { "name" : "ModeAsLowTransition",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def ModeAsLowTransition(self) -> "IAgAvtrTakeoffLowTransition":
        """Get the interface for a low transition takeoff."""
        return self._intf.get_property(IAgAvtrProcedureTakeoff._metadata, IAgAvtrProcedureTakeoff._get_ModeAsLowTransition_metadata)

    _get_TakeoffMode_metadata = { "name" : "TakeoffMode",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrTakeoffMode),) }
    @property
    def TakeoffMode(self) -> "AgEAvtrTakeoffMode":
        """The type of takeoff the aircraft will perform."""
        return self._intf.get_property(IAgAvtrProcedureTakeoff._metadata, IAgAvtrProcedureTakeoff._get_TakeoffMode_metadata)

    _set_TakeoffMode_metadata = { "name" : "TakeoffMode",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrTakeoffMode),) }
    @TakeoffMode.setter
    def TakeoffMode(self, newVal:"AgEAvtrTakeoffMode") -> None:
        """The type of takeoff the aircraft will perform."""
        return self._intf.set_property(IAgAvtrProcedureTakeoff._metadata, IAgAvtrProcedureTakeoff._set_TakeoffMode_metadata, newVal)

    _GetAsProcedure_metadata = { "name" : "GetAsProcedure",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    def GetAsProcedure(self) -> "IAgAvtrProcedure":
        """Get the procedure interface."""
        return self._intf.invoke(IAgAvtrProcedureTakeoff._metadata, IAgAvtrProcedureTakeoff._GetAsProcedure_metadata, out_arg())


agcls.AgClassCatalog.add_catalog_entry("{2f8f0f66-d7ea-41df-ad48-bcd5bfcd90b7}", IAgAvtrProcedureTakeoff)
agcls.AgTypeNameMap["IAgAvtrProcedureTakeoff"] = IAgAvtrProcedureTakeoff

class IAgAvtrProcedureArcEnroute(object):
    """Interface used to access the options for an arc enroute procedure."""
    _num_methods = 7
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{e4073986-cdc3-47de-994d-e731e309f7a2}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_AltitudeOptions" : 1,
                             "get_ArcOptions" : 2,
                             "get_ArcCruiseAirspeedOptions" : 3,
                             "get_EnrouteOptions" : 4,
                             "get_EnrouteCruiseAirspeedOptions" : 5,
                             "get_EnrouteTurnDirectionOptions" : 6,
                             "GetAsProcedure" : 7, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrProcedureArcEnroute._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrProcedureArcEnroute from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrProcedureArcEnroute.__dict__ and type(IAgAvtrProcedureArcEnroute.__dict__[attrname]) == property:
            return IAgAvtrProcedureArcEnroute.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrProcedureArcEnroute.")
    
    _get_AltitudeOptions_metadata = { "name" : "AltitudeOptions",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def AltitudeOptions(self) -> "IAgAvtrArcAltitudeAndDelayOptions":
        """Get the altitude options."""
        return self._intf.get_property(IAgAvtrProcedureArcEnroute._metadata, IAgAvtrProcedureArcEnroute._get_AltitudeOptions_metadata)

    _get_ArcOptions_metadata = { "name" : "ArcOptions",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def ArcOptions(self) -> "IAgAvtrArcOptions":
        """Get the arc options."""
        return self._intf.get_property(IAgAvtrProcedureArcEnroute._metadata, IAgAvtrProcedureArcEnroute._get_ArcOptions_metadata)

    _get_ArcCruiseAirspeedOptions_metadata = { "name" : "ArcCruiseAirspeedOptions",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def ArcCruiseAirspeedOptions(self) -> "IAgAvtrCruiseAirspeedOptions":
        """Get the arc cruise airspeed options."""
        return self._intf.get_property(IAgAvtrProcedureArcEnroute._metadata, IAgAvtrProcedureArcEnroute._get_ArcCruiseAirspeedOptions_metadata)

    _get_EnrouteOptions_metadata = { "name" : "EnrouteOptions",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def EnrouteOptions(self) -> "IAgAvtrEnrouteAndDelayOptions":
        """Get the enroute options."""
        return self._intf.get_property(IAgAvtrProcedureArcEnroute._metadata, IAgAvtrProcedureArcEnroute._get_EnrouteOptions_metadata)

    _get_EnrouteCruiseAirspeedOptions_metadata = { "name" : "EnrouteCruiseAirspeedOptions",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def EnrouteCruiseAirspeedOptions(self) -> "IAgAvtrCruiseAirspeedOptions":
        """Get the enroute cruise airspeed options."""
        return self._intf.get_property(IAgAvtrProcedureArcEnroute._metadata, IAgAvtrProcedureArcEnroute._get_EnrouteCruiseAirspeedOptions_metadata)

    _get_EnrouteTurnDirectionOptions_metadata = { "name" : "EnrouteTurnDirectionOptions",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def EnrouteTurnDirectionOptions(self) -> "IAgAvtrEnrouteTurnDirectionOptions":
        """Get the enroute turn direction options."""
        return self._intf.get_property(IAgAvtrProcedureArcEnroute._metadata, IAgAvtrProcedureArcEnroute._get_EnrouteTurnDirectionOptions_metadata)

    _GetAsProcedure_metadata = { "name" : "GetAsProcedure",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    def GetAsProcedure(self) -> "IAgAvtrProcedure":
        """Get the procedure interface."""
        return self._intf.invoke(IAgAvtrProcedureArcEnroute._metadata, IAgAvtrProcedureArcEnroute._GetAsProcedure_metadata, out_arg())


agcls.AgClassCatalog.add_catalog_entry("{e4073986-cdc3-47de-994d-e731e309f7a2}", IAgAvtrProcedureArcEnroute)
agcls.AgTypeNameMap["IAgAvtrProcedureArcEnroute"] = IAgAvtrProcedureArcEnroute

class IAgAvtrProcedureArcPointToPoint(object):
    """Interface used to access the options for an arc point to point procedure."""
    _num_methods = 10
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{0b5eaf53-8f72-4039-b469-18cfccedc1ef}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_AltitudeOptions" : 1,
                             "get_ArcOptions" : 2,
                             "get_ArcCruiseAirspeedOptions" : 3,
                             "get_EnrouteOptions" : 4,
                             "get_EnrouteCruiseAirspeedOptions" : 5,
                             "get_EnrouteTurnDirectionOptions" : 6,
                             "get_FlyCruiseAirspeedProfile" : 7,
                             "set_FlyCruiseAirspeedProfile" : 8,
                             "get_VerticalPlaneOptions" : 9,
                             "GetAsProcedure" : 10, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrProcedureArcPointToPoint._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrProcedureArcPointToPoint from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrProcedureArcPointToPoint.__dict__ and type(IAgAvtrProcedureArcPointToPoint.__dict__[attrname]) == property:
            return IAgAvtrProcedureArcPointToPoint.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrProcedureArcPointToPoint.")
    
    _get_AltitudeOptions_metadata = { "name" : "AltitudeOptions",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def AltitudeOptions(self) -> "IAgAvtrArcAltitudeOptions":
        """Get the altitude options."""
        return self._intf.get_property(IAgAvtrProcedureArcPointToPoint._metadata, IAgAvtrProcedureArcPointToPoint._get_AltitudeOptions_metadata)

    _get_ArcOptions_metadata = { "name" : "ArcOptions",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def ArcOptions(self) -> "IAgAvtrArcOptions":
        """Get the arc options."""
        return self._intf.get_property(IAgAvtrProcedureArcPointToPoint._metadata, IAgAvtrProcedureArcPointToPoint._get_ArcOptions_metadata)

    _get_ArcCruiseAirspeedOptions_metadata = { "name" : "ArcCruiseAirspeedOptions",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def ArcCruiseAirspeedOptions(self) -> "IAgAvtrCruiseAirspeedOptions":
        """Get the arc cruise airspeed options."""
        return self._intf.get_property(IAgAvtrProcedureArcPointToPoint._metadata, IAgAvtrProcedureArcPointToPoint._get_ArcCruiseAirspeedOptions_metadata)

    _get_EnrouteOptions_metadata = { "name" : "EnrouteOptions",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def EnrouteOptions(self) -> "IAgAvtrEnrouteOptions":
        """Get the enroute options."""
        return self._intf.get_property(IAgAvtrProcedureArcPointToPoint._metadata, IAgAvtrProcedureArcPointToPoint._get_EnrouteOptions_metadata)

    _get_EnrouteCruiseAirspeedOptions_metadata = { "name" : "EnrouteCruiseAirspeedOptions",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def EnrouteCruiseAirspeedOptions(self) -> "IAgAvtrCruiseAirspeedOptions":
        """Get the enroute cruise airspeed options."""
        return self._intf.get_property(IAgAvtrProcedureArcPointToPoint._metadata, IAgAvtrProcedureArcPointToPoint._get_EnrouteCruiseAirspeedOptions_metadata)

    _get_EnrouteTurnDirectionOptions_metadata = { "name" : "EnrouteTurnDirectionOptions",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def EnrouteTurnDirectionOptions(self) -> "IAgAvtrEnrouteTurnDirectionOptions":
        """Get the enroute turn direction options."""
        return self._intf.get_property(IAgAvtrProcedureArcPointToPoint._metadata, IAgAvtrProcedureArcPointToPoint._get_EnrouteTurnDirectionOptions_metadata)

    _get_FlyCruiseAirspeedProfile_metadata = { "name" : "FlyCruiseAirspeedProfile",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def FlyCruiseAirspeedProfile(self) -> bool:
        """Opt whether the aircraft immediately adopts the selected cruise airspeed or gradually begins accelerating/decelerating in the previous procedure."""
        return self._intf.get_property(IAgAvtrProcedureArcPointToPoint._metadata, IAgAvtrProcedureArcPointToPoint._get_FlyCruiseAirspeedProfile_metadata)

    _set_FlyCruiseAirspeedProfile_metadata = { "name" : "FlyCruiseAirspeedProfile",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @FlyCruiseAirspeedProfile.setter
    def FlyCruiseAirspeedProfile(self, pVal:bool) -> None:
        """Opt whether the aircraft immediately adopts the selected cruise airspeed or gradually begins accelerating/decelerating in the previous procedure."""
        return self._intf.set_property(IAgAvtrProcedureArcPointToPoint._metadata, IAgAvtrProcedureArcPointToPoint._set_FlyCruiseAirspeedProfile_metadata, pVal)

    _get_VerticalPlaneOptions_metadata = { "name" : "VerticalPlaneOptions",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def VerticalPlaneOptions(self) -> "IAgAvtrArcVerticalPlaneOptions":
        """Get the vertical plane options."""
        return self._intf.get_property(IAgAvtrProcedureArcPointToPoint._metadata, IAgAvtrProcedureArcPointToPoint._get_VerticalPlaneOptions_metadata)

    _GetAsProcedure_metadata = { "name" : "GetAsProcedure",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    def GetAsProcedure(self) -> "IAgAvtrProcedure":
        """Get the procedure interface."""
        return self._intf.invoke(IAgAvtrProcedureArcPointToPoint._metadata, IAgAvtrProcedureArcPointToPoint._GetAsProcedure_metadata, out_arg())


agcls.AgClassCatalog.add_catalog_entry("{0b5eaf53-8f72-4039-b469-18cfccedc1ef}", IAgAvtrProcedureArcPointToPoint)
agcls.AgTypeNameMap["IAgAvtrProcedureArcPointToPoint"] = IAgAvtrProcedureArcPointToPoint

class IAgAvtrProcedureFlightLine(object):
    """Interface used to access the options for a flight line procedure."""
    _num_methods = 20
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{cfa301c6-3326-4e4b-8973-5e74d00b7553}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_AltitudeOptions" : 1,
                             "get_FlyCruiseAirspeedProfile" : 2,
                             "set_FlyCruiseAirspeedProfile" : 3,
                             "get_FlightLineAirspeedOptions" : 4,
                             "get_EnrouteOptions" : 5,
                             "get_EnrouteTurnDirectionOptions" : 6,
                             "get_EnrouteCruiseAirspeedOptions" : 7,
                             "get_ProcedureType" : 8,
                             "set_ProcedureType" : 9,
                             "get_OutboundCourse" : 10,
                             "set_OutboundCourse" : 11,
                             "get_UseMagneticHeading" : 12,
                             "set_UseMagneticHeading" : 13,
                             "get_LegLength" : 14,
                             "set_LegLength" : 15,
                             "get_MustLevelOff" : 16,
                             "set_MustLevelOff" : 17,
                             "get_LevelOffMode" : 18,
                             "set_LevelOffMode" : 19,
                             "GetAsProcedure" : 20, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrProcedureFlightLine._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrProcedureFlightLine from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrProcedureFlightLine.__dict__ and type(IAgAvtrProcedureFlightLine.__dict__[attrname]) == property:
            return IAgAvtrProcedureFlightLine.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrProcedureFlightLine.")
    
    _get_AltitudeOptions_metadata = { "name" : "AltitudeOptions",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def AltitudeOptions(self) -> "IAgAvtrAltitudeOptions":
        """Get the altitude options."""
        return self._intf.get_property(IAgAvtrProcedureFlightLine._metadata, IAgAvtrProcedureFlightLine._get_AltitudeOptions_metadata)

    _get_FlyCruiseAirspeedProfile_metadata = { "name" : "FlyCruiseAirspeedProfile",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def FlyCruiseAirspeedProfile(self) -> bool:
        """Opt whether the aircraft immediately adopts the selected cruise airspeed or gradually begins accelerating/decelerating in the previous procedure."""
        return self._intf.get_property(IAgAvtrProcedureFlightLine._metadata, IAgAvtrProcedureFlightLine._get_FlyCruiseAirspeedProfile_metadata)

    _set_FlyCruiseAirspeedProfile_metadata = { "name" : "FlyCruiseAirspeedProfile",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @FlyCruiseAirspeedProfile.setter
    def FlyCruiseAirspeedProfile(self, pVal:bool) -> None:
        """Opt whether the aircraft immediately adopts the selected cruise airspeed or gradually begins accelerating/decelerating in the previous procedure."""
        return self._intf.set_property(IAgAvtrProcedureFlightLine._metadata, IAgAvtrProcedureFlightLine._set_FlyCruiseAirspeedProfile_metadata, pVal)

    _get_FlightLineAirspeedOptions_metadata = { "name" : "FlightLineAirspeedOptions",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def FlightLineAirspeedOptions(self) -> "IAgAvtrCruiseAirspeedOptions":
        """Get the flight line airspeed options."""
        return self._intf.get_property(IAgAvtrProcedureFlightLine._metadata, IAgAvtrProcedureFlightLine._get_FlightLineAirspeedOptions_metadata)

    _get_EnrouteOptions_metadata = { "name" : "EnrouteOptions",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def EnrouteOptions(self) -> "IAgAvtrEnrouteOptions":
        """Get the enroute options."""
        return self._intf.get_property(IAgAvtrProcedureFlightLine._metadata, IAgAvtrProcedureFlightLine._get_EnrouteOptions_metadata)

    _get_EnrouteTurnDirectionOptions_metadata = { "name" : "EnrouteTurnDirectionOptions",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def EnrouteTurnDirectionOptions(self) -> "IAgAvtrEnrouteTurnDirectionOptions":
        """Get the enroute turn direction options."""
        return self._intf.get_property(IAgAvtrProcedureFlightLine._metadata, IAgAvtrProcedureFlightLine._get_EnrouteTurnDirectionOptions_metadata)

    _get_EnrouteCruiseAirspeedOptions_metadata = { "name" : "EnrouteCruiseAirspeedOptions",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def EnrouteCruiseAirspeedOptions(self) -> "IAgAvtrCruiseAirspeedOptions":
        """Get the enroute cruise airspeed options."""
        return self._intf.get_property(IAgAvtrProcedureFlightLine._metadata, IAgAvtrProcedureFlightLine._get_EnrouteCruiseAirspeedOptions_metadata)

    _get_ProcedureType_metadata = { "name" : "ProcedureType",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrFlightLineProcType),) }
    @property
    def ProcedureType(self) -> "AgEAvtrFlightLineProcType":
        """The procedure methodology used to calculate the flight line."""
        return self._intf.get_property(IAgAvtrProcedureFlightLine._metadata, IAgAvtrProcedureFlightLine._get_ProcedureType_metadata)

    _set_ProcedureType_metadata = { "name" : "ProcedureType",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrFlightLineProcType),) }
    @ProcedureType.setter
    def ProcedureType(self, newVal:"AgEAvtrFlightLineProcType") -> None:
        """The procedure methodology used to calculate the flight line."""
        return self._intf.set_property(IAgAvtrProcedureFlightLine._metadata, IAgAvtrProcedureFlightLine._set_ProcedureType_metadata, newVal)

    _get_OutboundCourse_metadata = { "name" : "OutboundCourse",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def OutboundCourse(self) -> typing.Any:
        """The outbound course."""
        return self._intf.get_property(IAgAvtrProcedureFlightLine._metadata, IAgAvtrProcedureFlightLine._get_OutboundCourse_metadata)

    _set_OutboundCourse_metadata = { "name" : "OutboundCourse",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @OutboundCourse.setter
    def OutboundCourse(self, newVal:typing.Any) -> None:
        """The outbound course."""
        return self._intf.set_property(IAgAvtrProcedureFlightLine._metadata, IAgAvtrProcedureFlightLine._set_OutboundCourse_metadata, newVal)

    _get_UseMagneticHeading_metadata = { "name" : "UseMagneticHeading",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def UseMagneticHeading(self) -> bool:
        """The option to use a magnetic heading."""
        return self._intf.get_property(IAgAvtrProcedureFlightLine._metadata, IAgAvtrProcedureFlightLine._get_UseMagneticHeading_metadata)

    _set_UseMagneticHeading_metadata = { "name" : "UseMagneticHeading",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @UseMagneticHeading.setter
    def UseMagneticHeading(self, newVal:bool) -> None:
        """The option to use a magnetic heading."""
        return self._intf.set_property(IAgAvtrProcedureFlightLine._metadata, IAgAvtrProcedureFlightLine._set_UseMagneticHeading_metadata, newVal)

    _get_LegLength_metadata = { "name" : "LegLength",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def LegLength(self) -> float:
        """The length of the flight line."""
        return self._intf.get_property(IAgAvtrProcedureFlightLine._metadata, IAgAvtrProcedureFlightLine._get_LegLength_metadata)

    _set_LegLength_metadata = { "name" : "LegLength",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @LegLength.setter
    def LegLength(self, newVal:float) -> None:
        """The length of the flight line."""
        return self._intf.set_property(IAgAvtrProcedureFlightLine._metadata, IAgAvtrProcedureFlightLine._set_LegLength_metadata, newVal)

    _get_MustLevelOff_metadata = { "name" : "MustLevelOff",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def MustLevelOff(self) -> bool:
        """Opt whether the procedure must level off."""
        return self._intf.get_property(IAgAvtrProcedureFlightLine._metadata, IAgAvtrProcedureFlightLine._get_MustLevelOff_metadata)

    _set_MustLevelOff_metadata = { "name" : "MustLevelOff",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @MustLevelOff.setter
    def MustLevelOff(self, newVal:bool) -> None:
        """Opt whether the procedure must level off."""
        return self._intf.set_property(IAgAvtrProcedureFlightLine._metadata, IAgAvtrProcedureFlightLine._set_MustLevelOff_metadata, newVal)

    _get_LevelOffMode_metadata = { "name" : "LevelOffMode",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrAltitudeConstraintManeuverMode),) }
    @property
    def LevelOffMode(self) -> "AgEAvtrAltitudeConstraintManeuverMode":
        """The level off mode. This is only used when the must level off option is on."""
        return self._intf.get_property(IAgAvtrProcedureFlightLine._metadata, IAgAvtrProcedureFlightLine._get_LevelOffMode_metadata)

    _set_LevelOffMode_metadata = { "name" : "LevelOffMode",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrAltitudeConstraintManeuverMode),) }
    @LevelOffMode.setter
    def LevelOffMode(self, newVal:"AgEAvtrAltitudeConstraintManeuverMode") -> None:
        """The level off mode. This is only used when the must level off option is on."""
        return self._intf.set_property(IAgAvtrProcedureFlightLine._metadata, IAgAvtrProcedureFlightLine._set_LevelOffMode_metadata, newVal)

    _GetAsProcedure_metadata = { "name" : "GetAsProcedure",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    def GetAsProcedure(self) -> "IAgAvtrProcedure":
        """Get the procedure interface."""
        return self._intf.invoke(IAgAvtrProcedureFlightLine._metadata, IAgAvtrProcedureFlightLine._GetAsProcedure_metadata, out_arg())


agcls.AgClassCatalog.add_catalog_entry("{cfa301c6-3326-4e4b-8973-5e74d00b7553}", IAgAvtrProcedureFlightLine)
agcls.AgTypeNameMap["IAgAvtrProcedureFlightLine"] = IAgAvtrProcedureFlightLine

class IAgAvtrProcedureHoldingCircular(object):
    """Interface used to access the options for a holding circular procedure."""
    _num_methods = 27
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{ecb689b1-ebcb-45f2-832a-ed36734601ae}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_AltitudeOptions" : 1,
                             "get_ProfileMode" : 2,
                             "set_ProfileMode" : 3,
                             "get_LevelOffMode" : 4,
                             "set_LevelOffMode" : 5,
                             "get_Bearing" : 6,
                             "set_Bearing" : 7,
                             "get_UseMagneticHeading" : 8,
                             "set_UseMagneticHeading" : 9,
                             "get_Range" : 10,
                             "set_Range" : 11,
                             "get_Diameter" : 12,
                             "set_Diameter" : 13,
                             "get_UseAlternateEntryPoints" : 14,
                             "set_UseAlternateEntryPoints" : 15,
                             "get_TurnDirection" : 16,
                             "set_TurnDirection" : 17,
                             "get_Turns" : 18,
                             "set_Turns" : 19,
                             "get_RefuelDumpMode" : 20,
                             "set_RefuelDumpMode" : 21,
                             "get_HoldCruiseAirspeedOptions" : 22,
                             "get_EnrouteOptions" : 23,
                             "get_EnrouteCruiseAirspeedOptions" : 24,
                             "get_EnrouteTurnDirectionOptions" : 25,
                             "GetMinimumDiameter" : 26,
                             "GetAsProcedure" : 27, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrProcedureHoldingCircular._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrProcedureHoldingCircular from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrProcedureHoldingCircular.__dict__ and type(IAgAvtrProcedureHoldingCircular.__dict__[attrname]) == property:
            return IAgAvtrProcedureHoldingCircular.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrProcedureHoldingCircular.")
    
    _get_AltitudeOptions_metadata = { "name" : "AltitudeOptions",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def AltitudeOptions(self) -> "IAgAvtrAltitudeMSLOptions":
        """Get the altitude options."""
        return self._intf.get_property(IAgAvtrProcedureHoldingCircular._metadata, IAgAvtrProcedureHoldingCircular._get_AltitudeOptions_metadata)

    _get_ProfileMode_metadata = { "name" : "ProfileMode",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrHoldingProfileMode),) }
    @property
    def ProfileMode(self) -> "AgEAvtrHoldingProfileMode":
        """The mode defines how the aircraft will perform the holding pattern."""
        return self._intf.get_property(IAgAvtrProcedureHoldingCircular._metadata, IAgAvtrProcedureHoldingCircular._get_ProfileMode_metadata)

    _set_ProfileMode_metadata = { "name" : "ProfileMode",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrHoldingProfileMode),) }
    @ProfileMode.setter
    def ProfileMode(self, newVal:"AgEAvtrHoldingProfileMode") -> None:
        """The mode defines how the aircraft will perform the holding pattern."""
        return self._intf.set_property(IAgAvtrProcedureHoldingCircular._metadata, IAgAvtrProcedureHoldingCircular._set_ProfileMode_metadata, newVal)

    _get_LevelOffMode_metadata = { "name" : "LevelOffMode",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrAltitudeConstraintManeuverMode),) }
    @property
    def LevelOffMode(self) -> "AgEAvtrAltitudeConstraintManeuverMode":
        """The mode for the level off maneuver."""
        return self._intf.get_property(IAgAvtrProcedureHoldingCircular._metadata, IAgAvtrProcedureHoldingCircular._get_LevelOffMode_metadata)

    _set_LevelOffMode_metadata = { "name" : "LevelOffMode",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrAltitudeConstraintManeuverMode),) }
    @LevelOffMode.setter
    def LevelOffMode(self, newVal:"AgEAvtrAltitudeConstraintManeuverMode") -> None:
        """The mode for the level off maneuver."""
        return self._intf.set_property(IAgAvtrProcedureHoldingCircular._metadata, IAgAvtrProcedureHoldingCircular._set_LevelOffMode_metadata, newVal)

    _get_Bearing_metadata = { "name" : "Bearing",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def Bearing(self) -> typing.Any:
        """The bearing of the holding point from the site."""
        return self._intf.get_property(IAgAvtrProcedureHoldingCircular._metadata, IAgAvtrProcedureHoldingCircular._get_Bearing_metadata)

    _set_Bearing_metadata = { "name" : "Bearing",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @Bearing.setter
    def Bearing(self, newVal:typing.Any) -> None:
        """The bearing of the holding point from the site."""
        return self._intf.set_property(IAgAvtrProcedureHoldingCircular._metadata, IAgAvtrProcedureHoldingCircular._set_Bearing_metadata, newVal)

    _get_UseMagneticHeading_metadata = { "name" : "UseMagneticHeading",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def UseMagneticHeading(self) -> bool:
        """The option to use a magnetic heading."""
        return self._intf.get_property(IAgAvtrProcedureHoldingCircular._metadata, IAgAvtrProcedureHoldingCircular._get_UseMagneticHeading_metadata)

    _set_UseMagneticHeading_metadata = { "name" : "UseMagneticHeading",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @UseMagneticHeading.setter
    def UseMagneticHeading(self, newVal:bool) -> None:
        """The option to use a magnetic heading."""
        return self._intf.set_property(IAgAvtrProcedureHoldingCircular._metadata, IAgAvtrProcedureHoldingCircular._set_UseMagneticHeading_metadata, newVal)

    _get_Range_metadata = { "name" : "Range",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def Range(self) -> float:
        """The distance to the holding point from the site."""
        return self._intf.get_property(IAgAvtrProcedureHoldingCircular._metadata, IAgAvtrProcedureHoldingCircular._get_Range_metadata)

    _set_Range_metadata = { "name" : "Range",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @Range.setter
    def Range(self, newVal:float) -> None:
        """The distance to the holding point from the site."""
        return self._intf.set_property(IAgAvtrProcedureHoldingCircular._metadata, IAgAvtrProcedureHoldingCircular._set_Range_metadata, newVal)

    _get_Diameter_metadata = { "name" : "Diameter",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def Diameter(self) -> float:
        """The diameter of the holding pattern."""
        return self._intf.get_property(IAgAvtrProcedureHoldingCircular._metadata, IAgAvtrProcedureHoldingCircular._get_Diameter_metadata)

    _set_Diameter_metadata = { "name" : "Diameter",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @Diameter.setter
    def Diameter(self, newVal:float) -> None:
        """The diameter of the holding pattern."""
        return self._intf.set_property(IAgAvtrProcedureHoldingCircular._metadata, IAgAvtrProcedureHoldingCircular._set_Diameter_metadata, newVal)

    _get_UseAlternateEntryPoints_metadata = { "name" : "UseAlternateEntryPoints",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def UseAlternateEntryPoints(self) -> bool:
        """The option to enter the holding pattern from an alternate point."""
        return self._intf.get_property(IAgAvtrProcedureHoldingCircular._metadata, IAgAvtrProcedureHoldingCircular._get_UseAlternateEntryPoints_metadata)

    _set_UseAlternateEntryPoints_metadata = { "name" : "UseAlternateEntryPoints",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @UseAlternateEntryPoints.setter
    def UseAlternateEntryPoints(self, newVal:bool) -> None:
        """The option to enter the holding pattern from an alternate point."""
        return self._intf.set_property(IAgAvtrProcedureHoldingCircular._metadata, IAgAvtrProcedureHoldingCircular._set_UseAlternateEntryPoints_metadata, newVal)

    _get_TurnDirection_metadata = { "name" : "TurnDirection",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrHoldingDirection),) }
    @property
    def TurnDirection(self) -> "AgEAvtrHoldingDirection":
        """The turn direction to enter the holding pattern."""
        return self._intf.get_property(IAgAvtrProcedureHoldingCircular._metadata, IAgAvtrProcedureHoldingCircular._get_TurnDirection_metadata)

    _set_TurnDirection_metadata = { "name" : "TurnDirection",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrHoldingDirection),) }
    @TurnDirection.setter
    def TurnDirection(self, newVal:"AgEAvtrHoldingDirection") -> None:
        """The turn direction to enter the holding pattern."""
        return self._intf.set_property(IAgAvtrProcedureHoldingCircular._metadata, IAgAvtrProcedureHoldingCircular._set_TurnDirection_metadata, newVal)

    _get_Turns_metadata = { "name" : "Turns",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.LONG_arg,) }
    @property
    def Turns(self) -> int:
        """The number of full turns."""
        return self._intf.get_property(IAgAvtrProcedureHoldingCircular._metadata, IAgAvtrProcedureHoldingCircular._get_Turns_metadata)

    _set_Turns_metadata = { "name" : "Turns",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.LONG_arg,) }
    @Turns.setter
    def Turns(self, newVal:int) -> None:
        """The number of full turns."""
        return self._intf.set_property(IAgAvtrProcedureHoldingCircular._metadata, IAgAvtrProcedureHoldingCircular._set_Turns_metadata, newVal)

    _get_RefuelDumpMode_metadata = { "name" : "RefuelDumpMode",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrHoldRefuelDumpMode),) }
    @property
    def RefuelDumpMode(self) -> "AgEAvtrHoldRefuelDumpMode":
        """The mode that defines when the aircraft will leave the holding pattern for a Refuel/Dump operation."""
        return self._intf.get_property(IAgAvtrProcedureHoldingCircular._metadata, IAgAvtrProcedureHoldingCircular._get_RefuelDumpMode_metadata)

    _set_RefuelDumpMode_metadata = { "name" : "RefuelDumpMode",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrHoldRefuelDumpMode),) }
    @RefuelDumpMode.setter
    def RefuelDumpMode(self, newVal:"AgEAvtrHoldRefuelDumpMode") -> None:
        """The mode that defines when the aircraft will leave the holding pattern for a Refuel/Dump operation."""
        return self._intf.set_property(IAgAvtrProcedureHoldingCircular._metadata, IAgAvtrProcedureHoldingCircular._set_RefuelDumpMode_metadata, newVal)

    _get_HoldCruiseAirspeedOptions_metadata = { "name" : "HoldCruiseAirspeedOptions",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def HoldCruiseAirspeedOptions(self) -> "IAgAvtrCruiseAirspeedOptions":
        """Get the hold cruise airspeed options."""
        return self._intf.get_property(IAgAvtrProcedureHoldingCircular._metadata, IAgAvtrProcedureHoldingCircular._get_HoldCruiseAirspeedOptions_metadata)

    _get_EnrouteOptions_metadata = { "name" : "EnrouteOptions",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def EnrouteOptions(self) -> "IAgAvtrEnrouteAndDelayOptions":
        """Get the enroute options."""
        return self._intf.get_property(IAgAvtrProcedureHoldingCircular._metadata, IAgAvtrProcedureHoldingCircular._get_EnrouteOptions_metadata)

    _get_EnrouteCruiseAirspeedOptions_metadata = { "name" : "EnrouteCruiseAirspeedOptions",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def EnrouteCruiseAirspeedOptions(self) -> "IAgAvtrCruiseAirspeedOptions":
        """Get the enroute cruise airspeed options."""
        return self._intf.get_property(IAgAvtrProcedureHoldingCircular._metadata, IAgAvtrProcedureHoldingCircular._get_EnrouteCruiseAirspeedOptions_metadata)

    _get_EnrouteTurnDirectionOptions_metadata = { "name" : "EnrouteTurnDirectionOptions",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def EnrouteTurnDirectionOptions(self) -> "IAgAvtrEnrouteTurnDirectionOptions":
        """Get the enroute turn direction options."""
        return self._intf.get_property(IAgAvtrProcedureHoldingCircular._metadata, IAgAvtrProcedureHoldingCircular._get_EnrouteTurnDirectionOptions_metadata)

    _GetMinimumDiameter_metadata = { "name" : "GetMinimumDiameter",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    def GetMinimumDiameter(self) -> float:
        """The aircraft's minimum diameter at this altitude."""
        return self._intf.invoke(IAgAvtrProcedureHoldingCircular._metadata, IAgAvtrProcedureHoldingCircular._GetMinimumDiameter_metadata, out_arg())

    _GetAsProcedure_metadata = { "name" : "GetAsProcedure",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    def GetAsProcedure(self) -> "IAgAvtrProcedure":
        """Get the procedure interface."""
        return self._intf.invoke(IAgAvtrProcedureHoldingCircular._metadata, IAgAvtrProcedureHoldingCircular._GetAsProcedure_metadata, out_arg())


agcls.AgClassCatalog.add_catalog_entry("{ecb689b1-ebcb-45f2-832a-ed36734601ae}", IAgAvtrProcedureHoldingCircular)
agcls.AgTypeNameMap["IAgAvtrProcedureHoldingCircular"] = IAgAvtrProcedureHoldingCircular

class IAgAvtrProcedureHoldingFigure8(object):
    """Interface used to access the options for a holding figure 8 procedure."""
    _num_methods = 27
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{5b4e19a2-dd75-462f-b4da-ed23c6c16de3}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_AltitudeOptions" : 1,
                             "get_ProfileMode" : 2,
                             "set_ProfileMode" : 3,
                             "get_LevelOffMode" : 4,
                             "set_LevelOffMode" : 5,
                             "get_Bearing" : 6,
                             "set_Bearing" : 7,
                             "get_UseMagneticHeading" : 8,
                             "set_UseMagneticHeading" : 9,
                             "get_Range" : 10,
                             "set_Range" : 11,
                             "get_Length" : 12,
                             "set_Length" : 13,
                             "get_Width" : 14,
                             "set_Width" : 15,
                             "get_UseAlternateEntryPoints" : 16,
                             "set_UseAlternateEntryPoints" : 17,
                             "get_Turns" : 18,
                             "set_Turns" : 19,
                             "get_RefuelDumpMode" : 20,
                             "set_RefuelDumpMode" : 21,
                             "get_HoldCruiseAirspeedOptions" : 22,
                             "get_EnrouteOptions" : 23,
                             "get_EnrouteCruiseAirspeedOptions" : 24,
                             "get_EnrouteTurnDirectionOptions" : 25,
                             "GetMinimumWidth" : 26,
                             "GetAsProcedure" : 27, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrProcedureHoldingFigure8._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrProcedureHoldingFigure8 from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrProcedureHoldingFigure8.__dict__ and type(IAgAvtrProcedureHoldingFigure8.__dict__[attrname]) == property:
            return IAgAvtrProcedureHoldingFigure8.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrProcedureHoldingFigure8.")
    
    _get_AltitudeOptions_metadata = { "name" : "AltitudeOptions",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def AltitudeOptions(self) -> "IAgAvtrAltitudeMSLOptions":
        """Get the altitude options."""
        return self._intf.get_property(IAgAvtrProcedureHoldingFigure8._metadata, IAgAvtrProcedureHoldingFigure8._get_AltitudeOptions_metadata)

    _get_ProfileMode_metadata = { "name" : "ProfileMode",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrHoldingProfileMode),) }
    @property
    def ProfileMode(self) -> "AgEAvtrHoldingProfileMode":
        """The mode defines how the aircraft will perform the holding pattern."""
        return self._intf.get_property(IAgAvtrProcedureHoldingFigure8._metadata, IAgAvtrProcedureHoldingFigure8._get_ProfileMode_metadata)

    _set_ProfileMode_metadata = { "name" : "ProfileMode",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrHoldingProfileMode),) }
    @ProfileMode.setter
    def ProfileMode(self, newVal:"AgEAvtrHoldingProfileMode") -> None:
        """The mode defines how the aircraft will perform the holding pattern."""
        return self._intf.set_property(IAgAvtrProcedureHoldingFigure8._metadata, IAgAvtrProcedureHoldingFigure8._set_ProfileMode_metadata, newVal)

    _get_LevelOffMode_metadata = { "name" : "LevelOffMode",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrAltitudeConstraintManeuverMode),) }
    @property
    def LevelOffMode(self) -> "AgEAvtrAltitudeConstraintManeuverMode":
        """The mode for the level off maneuver."""
        return self._intf.get_property(IAgAvtrProcedureHoldingFigure8._metadata, IAgAvtrProcedureHoldingFigure8._get_LevelOffMode_metadata)

    _set_LevelOffMode_metadata = { "name" : "LevelOffMode",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrAltitudeConstraintManeuverMode),) }
    @LevelOffMode.setter
    def LevelOffMode(self, newVal:"AgEAvtrAltitudeConstraintManeuverMode") -> None:
        """The mode for the level off maneuver."""
        return self._intf.set_property(IAgAvtrProcedureHoldingFigure8._metadata, IAgAvtrProcedureHoldingFigure8._set_LevelOffMode_metadata, newVal)

    _get_Bearing_metadata = { "name" : "Bearing",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def Bearing(self) -> typing.Any:
        """The bearing of the holding point from the site."""
        return self._intf.get_property(IAgAvtrProcedureHoldingFigure8._metadata, IAgAvtrProcedureHoldingFigure8._get_Bearing_metadata)

    _set_Bearing_metadata = { "name" : "Bearing",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @Bearing.setter
    def Bearing(self, newVal:typing.Any) -> None:
        """The bearing of the holding point from the site."""
        return self._intf.set_property(IAgAvtrProcedureHoldingFigure8._metadata, IAgAvtrProcedureHoldingFigure8._set_Bearing_metadata, newVal)

    _get_UseMagneticHeading_metadata = { "name" : "UseMagneticHeading",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def UseMagneticHeading(self) -> bool:
        """The option to use a magnetic heading."""
        return self._intf.get_property(IAgAvtrProcedureHoldingFigure8._metadata, IAgAvtrProcedureHoldingFigure8._get_UseMagneticHeading_metadata)

    _set_UseMagneticHeading_metadata = { "name" : "UseMagneticHeading",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @UseMagneticHeading.setter
    def UseMagneticHeading(self, newVal:bool) -> None:
        """The option to use a magnetic heading."""
        return self._intf.set_property(IAgAvtrProcedureHoldingFigure8._metadata, IAgAvtrProcedureHoldingFigure8._set_UseMagneticHeading_metadata, newVal)

    _get_Range_metadata = { "name" : "Range",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def Range(self) -> float:
        """The distance to the holding point from the site."""
        return self._intf.get_property(IAgAvtrProcedureHoldingFigure8._metadata, IAgAvtrProcedureHoldingFigure8._get_Range_metadata)

    _set_Range_metadata = { "name" : "Range",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @Range.setter
    def Range(self, newVal:float) -> None:
        """The distance to the holding point from the site."""
        return self._intf.set_property(IAgAvtrProcedureHoldingFigure8._metadata, IAgAvtrProcedureHoldingFigure8._set_Range_metadata, newVal)

    _get_Length_metadata = { "name" : "Length",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def Length(self) -> float:
        """The distance between the centers of the pattern's arcs."""
        return self._intf.get_property(IAgAvtrProcedureHoldingFigure8._metadata, IAgAvtrProcedureHoldingFigure8._get_Length_metadata)

    _set_Length_metadata = { "name" : "Length",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @Length.setter
    def Length(self, newVal:float) -> None:
        """The distance between the centers of the pattern's arcs."""
        return self._intf.set_property(IAgAvtrProcedureHoldingFigure8._metadata, IAgAvtrProcedureHoldingFigure8._set_Length_metadata, newVal)

    _get_Width_metadata = { "name" : "Width",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def Width(self) -> float:
        """The width of the holding pattern."""
        return self._intf.get_property(IAgAvtrProcedureHoldingFigure8._metadata, IAgAvtrProcedureHoldingFigure8._get_Width_metadata)

    _set_Width_metadata = { "name" : "Width",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @Width.setter
    def Width(self, newVal:float) -> None:
        """The width of the holding pattern."""
        return self._intf.set_property(IAgAvtrProcedureHoldingFigure8._metadata, IAgAvtrProcedureHoldingFigure8._set_Width_metadata, newVal)

    _get_UseAlternateEntryPoints_metadata = { "name" : "UseAlternateEntryPoints",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def UseAlternateEntryPoints(self) -> bool:
        """The option to enter the holding pattern from an alternate point."""
        return self._intf.get_property(IAgAvtrProcedureHoldingFigure8._metadata, IAgAvtrProcedureHoldingFigure8._get_UseAlternateEntryPoints_metadata)

    _set_UseAlternateEntryPoints_metadata = { "name" : "UseAlternateEntryPoints",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @UseAlternateEntryPoints.setter
    def UseAlternateEntryPoints(self, newVal:bool) -> None:
        """The option to enter the holding pattern from an alternate point."""
        return self._intf.set_property(IAgAvtrProcedureHoldingFigure8._metadata, IAgAvtrProcedureHoldingFigure8._set_UseAlternateEntryPoints_metadata, newVal)

    _get_Turns_metadata = { "name" : "Turns",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.LONG_arg,) }
    @property
    def Turns(self) -> int:
        """The number of full turns."""
        return self._intf.get_property(IAgAvtrProcedureHoldingFigure8._metadata, IAgAvtrProcedureHoldingFigure8._get_Turns_metadata)

    _set_Turns_metadata = { "name" : "Turns",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.LONG_arg,) }
    @Turns.setter
    def Turns(self, newVal:int) -> None:
        """The number of full turns."""
        return self._intf.set_property(IAgAvtrProcedureHoldingFigure8._metadata, IAgAvtrProcedureHoldingFigure8._set_Turns_metadata, newVal)

    _get_RefuelDumpMode_metadata = { "name" : "RefuelDumpMode",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrHoldRefuelDumpMode),) }
    @property
    def RefuelDumpMode(self) -> "AgEAvtrHoldRefuelDumpMode":
        """The mode that defines when the aircraft will leave the holding pattern for a Refuel/Dump operation."""
        return self._intf.get_property(IAgAvtrProcedureHoldingFigure8._metadata, IAgAvtrProcedureHoldingFigure8._get_RefuelDumpMode_metadata)

    _set_RefuelDumpMode_metadata = { "name" : "RefuelDumpMode",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrHoldRefuelDumpMode),) }
    @RefuelDumpMode.setter
    def RefuelDumpMode(self, newVal:"AgEAvtrHoldRefuelDumpMode") -> None:
        """The mode that defines when the aircraft will leave the holding pattern for a Refuel/Dump operation."""
        return self._intf.set_property(IAgAvtrProcedureHoldingFigure8._metadata, IAgAvtrProcedureHoldingFigure8._set_RefuelDumpMode_metadata, newVal)

    _get_HoldCruiseAirspeedOptions_metadata = { "name" : "HoldCruiseAirspeedOptions",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def HoldCruiseAirspeedOptions(self) -> "IAgAvtrCruiseAirspeedOptions":
        """Get the hold cruise airspeed options."""
        return self._intf.get_property(IAgAvtrProcedureHoldingFigure8._metadata, IAgAvtrProcedureHoldingFigure8._get_HoldCruiseAirspeedOptions_metadata)

    _get_EnrouteOptions_metadata = { "name" : "EnrouteOptions",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def EnrouteOptions(self) -> "IAgAvtrEnrouteAndDelayOptions":
        """Get the enroute options."""
        return self._intf.get_property(IAgAvtrProcedureHoldingFigure8._metadata, IAgAvtrProcedureHoldingFigure8._get_EnrouteOptions_metadata)

    _get_EnrouteCruiseAirspeedOptions_metadata = { "name" : "EnrouteCruiseAirspeedOptions",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def EnrouteCruiseAirspeedOptions(self) -> "IAgAvtrCruiseAirspeedOptions":
        """Get the enroute cruise airspeed options."""
        return self._intf.get_property(IAgAvtrProcedureHoldingFigure8._metadata, IAgAvtrProcedureHoldingFigure8._get_EnrouteCruiseAirspeedOptions_metadata)

    _get_EnrouteTurnDirectionOptions_metadata = { "name" : "EnrouteTurnDirectionOptions",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def EnrouteTurnDirectionOptions(self) -> "IAgAvtrEnrouteTurnDirectionOptions":
        """Get the enroute turn direction options."""
        return self._intf.get_property(IAgAvtrProcedureHoldingFigure8._metadata, IAgAvtrProcedureHoldingFigure8._get_EnrouteTurnDirectionOptions_metadata)

    _GetMinimumWidth_metadata = { "name" : "GetMinimumWidth",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    def GetMinimumWidth(self) -> float:
        """The minimum allowable width based on the aircraft's minimum diameter at this altitude."""
        return self._intf.invoke(IAgAvtrProcedureHoldingFigure8._metadata, IAgAvtrProcedureHoldingFigure8._GetMinimumWidth_metadata, out_arg())

    _GetAsProcedure_metadata = { "name" : "GetAsProcedure",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    def GetAsProcedure(self) -> "IAgAvtrProcedure":
        """Get the procedure interface."""
        return self._intf.invoke(IAgAvtrProcedureHoldingFigure8._metadata, IAgAvtrProcedureHoldingFigure8._GetAsProcedure_metadata, out_arg())


agcls.AgClassCatalog.add_catalog_entry("{5b4e19a2-dd75-462f-b4da-ed23c6c16de3}", IAgAvtrProcedureHoldingFigure8)
agcls.AgTypeNameMap["IAgAvtrProcedureHoldingFigure8"] = IAgAvtrProcedureHoldingFigure8

class IAgAvtrProcedureHoldingRacetrack(object):
    """Interface used to access the options for a holding racetrack procedure."""
    _num_methods = 27
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{f4b0bbae-3a2b-4333-949c-ab5fc5a232b4}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_AltitudeOptions" : 1,
                             "get_ProfileMode" : 2,
                             "set_ProfileMode" : 3,
                             "get_LevelOffMode" : 4,
                             "set_LevelOffMode" : 5,
                             "get_Bearing" : 6,
                             "set_Bearing" : 7,
                             "get_UseMagneticHeading" : 8,
                             "set_UseMagneticHeading" : 9,
                             "get_Range" : 10,
                             "set_Range" : 11,
                             "get_Length" : 12,
                             "set_Length" : 13,
                             "get_Width" : 14,
                             "set_Width" : 15,
                             "get_EntryManeuver" : 16,
                             "set_EntryManeuver" : 17,
                             "get_Turns" : 18,
                             "set_Turns" : 19,
                             "get_RefuelDumpMode" : 20,
                             "set_RefuelDumpMode" : 21,
                             "get_HoldCruiseAirspeedOptions" : 22,
                             "get_EnrouteOptions" : 23,
                             "get_EnrouteCruiseAirspeedOptions" : 24,
                             "get_EnrouteTurnDirectionOptions" : 25,
                             "GetMinimumWidth" : 26,
                             "GetAsProcedure" : 27, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrProcedureHoldingRacetrack._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrProcedureHoldingRacetrack from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrProcedureHoldingRacetrack.__dict__ and type(IAgAvtrProcedureHoldingRacetrack.__dict__[attrname]) == property:
            return IAgAvtrProcedureHoldingRacetrack.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrProcedureHoldingRacetrack.")
    
    _get_AltitudeOptions_metadata = { "name" : "AltitudeOptions",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def AltitudeOptions(self) -> "IAgAvtrAltitudeMSLOptions":
        """Get the altitude options."""
        return self._intf.get_property(IAgAvtrProcedureHoldingRacetrack._metadata, IAgAvtrProcedureHoldingRacetrack._get_AltitudeOptions_metadata)

    _get_ProfileMode_metadata = { "name" : "ProfileMode",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrHoldingProfileMode),) }
    @property
    def ProfileMode(self) -> "AgEAvtrHoldingProfileMode":
        """The mode defines how the aircraft will perform the holding pattern."""
        return self._intf.get_property(IAgAvtrProcedureHoldingRacetrack._metadata, IAgAvtrProcedureHoldingRacetrack._get_ProfileMode_metadata)

    _set_ProfileMode_metadata = { "name" : "ProfileMode",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrHoldingProfileMode),) }
    @ProfileMode.setter
    def ProfileMode(self, newVal:"AgEAvtrHoldingProfileMode") -> None:
        """The mode defines how the aircraft will perform the holding pattern."""
        return self._intf.set_property(IAgAvtrProcedureHoldingRacetrack._metadata, IAgAvtrProcedureHoldingRacetrack._set_ProfileMode_metadata, newVal)

    _get_LevelOffMode_metadata = { "name" : "LevelOffMode",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrAltitudeConstraintManeuverMode),) }
    @property
    def LevelOffMode(self) -> "AgEAvtrAltitudeConstraintManeuverMode":
        """The mode for the level off maneuver."""
        return self._intf.get_property(IAgAvtrProcedureHoldingRacetrack._metadata, IAgAvtrProcedureHoldingRacetrack._get_LevelOffMode_metadata)

    _set_LevelOffMode_metadata = { "name" : "LevelOffMode",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrAltitudeConstraintManeuverMode),) }
    @LevelOffMode.setter
    def LevelOffMode(self, newVal:"AgEAvtrAltitudeConstraintManeuverMode") -> None:
        """The mode for the level off maneuver."""
        return self._intf.set_property(IAgAvtrProcedureHoldingRacetrack._metadata, IAgAvtrProcedureHoldingRacetrack._set_LevelOffMode_metadata, newVal)

    _get_Bearing_metadata = { "name" : "Bearing",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def Bearing(self) -> typing.Any:
        """The bearing of the holding point from the site."""
        return self._intf.get_property(IAgAvtrProcedureHoldingRacetrack._metadata, IAgAvtrProcedureHoldingRacetrack._get_Bearing_metadata)

    _set_Bearing_metadata = { "name" : "Bearing",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @Bearing.setter
    def Bearing(self, newVal:typing.Any) -> None:
        """The bearing of the holding point from the site."""
        return self._intf.set_property(IAgAvtrProcedureHoldingRacetrack._metadata, IAgAvtrProcedureHoldingRacetrack._set_Bearing_metadata, newVal)

    _get_UseMagneticHeading_metadata = { "name" : "UseMagneticHeading",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def UseMagneticHeading(self) -> bool:
        """The option to use a magnetic heading."""
        return self._intf.get_property(IAgAvtrProcedureHoldingRacetrack._metadata, IAgAvtrProcedureHoldingRacetrack._get_UseMagneticHeading_metadata)

    _set_UseMagneticHeading_metadata = { "name" : "UseMagneticHeading",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @UseMagneticHeading.setter
    def UseMagneticHeading(self, newVal:bool) -> None:
        """The option to use a magnetic heading."""
        return self._intf.set_property(IAgAvtrProcedureHoldingRacetrack._metadata, IAgAvtrProcedureHoldingRacetrack._set_UseMagneticHeading_metadata, newVal)

    _get_Range_metadata = { "name" : "Range",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def Range(self) -> float:
        """The distance to the holding point from the site."""
        return self._intf.get_property(IAgAvtrProcedureHoldingRacetrack._metadata, IAgAvtrProcedureHoldingRacetrack._get_Range_metadata)

    _set_Range_metadata = { "name" : "Range",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @Range.setter
    def Range(self, newVal:float) -> None:
        """The distance to the holding point from the site."""
        return self._intf.set_property(IAgAvtrProcedureHoldingRacetrack._metadata, IAgAvtrProcedureHoldingRacetrack._set_Range_metadata, newVal)

    _get_Length_metadata = { "name" : "Length",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def Length(self) -> float:
        """The distance between the centers of the pattern's arcs."""
        return self._intf.get_property(IAgAvtrProcedureHoldingRacetrack._metadata, IAgAvtrProcedureHoldingRacetrack._get_Length_metadata)

    _set_Length_metadata = { "name" : "Length",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @Length.setter
    def Length(self, newVal:float) -> None:
        """The distance between the centers of the pattern's arcs."""
        return self._intf.set_property(IAgAvtrProcedureHoldingRacetrack._metadata, IAgAvtrProcedureHoldingRacetrack._set_Length_metadata, newVal)

    _get_Width_metadata = { "name" : "Width",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def Width(self) -> float:
        """The width of the holding pattern."""
        return self._intf.get_property(IAgAvtrProcedureHoldingRacetrack._metadata, IAgAvtrProcedureHoldingRacetrack._get_Width_metadata)

    _set_Width_metadata = { "name" : "Width",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @Width.setter
    def Width(self, newVal:float) -> None:
        """The width of the holding pattern."""
        return self._intf.set_property(IAgAvtrProcedureHoldingRacetrack._metadata, IAgAvtrProcedureHoldingRacetrack._set_Width_metadata, newVal)

    _get_EntryManeuver_metadata = { "name" : "EntryManeuver",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrHoldingEntryManeuver),) }
    @property
    def EntryManeuver(self) -> "AgEAvtrHoldingEntryManeuver":
        """Defines how the aircraft will enter the holding pattern."""
        return self._intf.get_property(IAgAvtrProcedureHoldingRacetrack._metadata, IAgAvtrProcedureHoldingRacetrack._get_EntryManeuver_metadata)

    _set_EntryManeuver_metadata = { "name" : "EntryManeuver",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrHoldingEntryManeuver),) }
    @EntryManeuver.setter
    def EntryManeuver(self, newVal:"AgEAvtrHoldingEntryManeuver") -> None:
        """Defines how the aircraft will enter the holding pattern."""
        return self._intf.set_property(IAgAvtrProcedureHoldingRacetrack._metadata, IAgAvtrProcedureHoldingRacetrack._set_EntryManeuver_metadata, newVal)

    _get_Turns_metadata = { "name" : "Turns",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.LONG_arg,) }
    @property
    def Turns(self) -> int:
        """The number of full turns."""
        return self._intf.get_property(IAgAvtrProcedureHoldingRacetrack._metadata, IAgAvtrProcedureHoldingRacetrack._get_Turns_metadata)

    _set_Turns_metadata = { "name" : "Turns",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.LONG_arg,) }
    @Turns.setter
    def Turns(self, newVal:int) -> None:
        """The number of full turns."""
        return self._intf.set_property(IAgAvtrProcedureHoldingRacetrack._metadata, IAgAvtrProcedureHoldingRacetrack._set_Turns_metadata, newVal)

    _get_RefuelDumpMode_metadata = { "name" : "RefuelDumpMode",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrHoldRefuelDumpMode),) }
    @property
    def RefuelDumpMode(self) -> "AgEAvtrHoldRefuelDumpMode":
        """The mode that defines when the aircraft will leave the holding pattern for a Refuel/Dump operation."""
        return self._intf.get_property(IAgAvtrProcedureHoldingRacetrack._metadata, IAgAvtrProcedureHoldingRacetrack._get_RefuelDumpMode_metadata)

    _set_RefuelDumpMode_metadata = { "name" : "RefuelDumpMode",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrHoldRefuelDumpMode),) }
    @RefuelDumpMode.setter
    def RefuelDumpMode(self, newVal:"AgEAvtrHoldRefuelDumpMode") -> None:
        """The mode that defines when the aircraft will leave the holding pattern for a Refuel/Dump operation."""
        return self._intf.set_property(IAgAvtrProcedureHoldingRacetrack._metadata, IAgAvtrProcedureHoldingRacetrack._set_RefuelDumpMode_metadata, newVal)

    _get_HoldCruiseAirspeedOptions_metadata = { "name" : "HoldCruiseAirspeedOptions",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def HoldCruiseAirspeedOptions(self) -> "IAgAvtrCruiseAirspeedOptions":
        """Get the hold cruise airspeed options."""
        return self._intf.get_property(IAgAvtrProcedureHoldingRacetrack._metadata, IAgAvtrProcedureHoldingRacetrack._get_HoldCruiseAirspeedOptions_metadata)

    _get_EnrouteOptions_metadata = { "name" : "EnrouteOptions",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def EnrouteOptions(self) -> "IAgAvtrEnrouteAndDelayOptions":
        """Get the enroute options."""
        return self._intf.get_property(IAgAvtrProcedureHoldingRacetrack._metadata, IAgAvtrProcedureHoldingRacetrack._get_EnrouteOptions_metadata)

    _get_EnrouteCruiseAirspeedOptions_metadata = { "name" : "EnrouteCruiseAirspeedOptions",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def EnrouteCruiseAirspeedOptions(self) -> "IAgAvtrCruiseAirspeedOptions":
        """Get the enroute cruise airspeed options."""
        return self._intf.get_property(IAgAvtrProcedureHoldingRacetrack._metadata, IAgAvtrProcedureHoldingRacetrack._get_EnrouteCruiseAirspeedOptions_metadata)

    _get_EnrouteTurnDirectionOptions_metadata = { "name" : "EnrouteTurnDirectionOptions",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def EnrouteTurnDirectionOptions(self) -> "IAgAvtrEnrouteTurnDirectionOptions":
        """Get the enroute turn direction options."""
        return self._intf.get_property(IAgAvtrProcedureHoldingRacetrack._metadata, IAgAvtrProcedureHoldingRacetrack._get_EnrouteTurnDirectionOptions_metadata)

    _GetMinimumWidth_metadata = { "name" : "GetMinimumWidth",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    def GetMinimumWidth(self) -> float:
        """The minimum allowable width based on the aircraft's minimum diameter at this altitude."""
        return self._intf.invoke(IAgAvtrProcedureHoldingRacetrack._metadata, IAgAvtrProcedureHoldingRacetrack._GetMinimumWidth_metadata, out_arg())

    _GetAsProcedure_metadata = { "name" : "GetAsProcedure",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    def GetAsProcedure(self) -> "IAgAvtrProcedure":
        """Get the procedure interface."""
        return self._intf.invoke(IAgAvtrProcedureHoldingRacetrack._metadata, IAgAvtrProcedureHoldingRacetrack._GetAsProcedure_metadata, out_arg())


agcls.AgClassCatalog.add_catalog_entry("{f4b0bbae-3a2b-4333-949c-ab5fc5a232b4}", IAgAvtrProcedureHoldingRacetrack)
agcls.AgTypeNameMap["IAgAvtrProcedureHoldingRacetrack"] = IAgAvtrProcedureHoldingRacetrack

class IAgAvtrProcedureTransitionToHover(object):
    """Interface used to access the options for a transition to hover procedure."""
    _num_methods = 15
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{06667f6e-68d3-4a3f-b285-64c556aac5c0}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_AltitudeReference" : 1,
                             "set_AltitudeReference" : 2,
                             "get_Altitude" : 3,
                             "set_Altitude" : 4,
                             "get_UseMagneticHeading" : 5,
                             "get_Course" : 6,
                             "get_TransitionIntoWind" : 7,
                             "SetTransitionCourse" : 8,
                             "SetTransitionIntoWind" : 9,
                             "get_EnrouteOptions" : 10,
                             "get_EnrouteTurnDirectionOptions" : 11,
                             "get_VerticalPlaneOptions" : 12,
                             "get_SmoothTransitionMode" : 13,
                             "set_SmoothTransitionMode" : 14,
                             "GetAsProcedure" : 15, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrProcedureTransitionToHover._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrProcedureTransitionToHover from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrProcedureTransitionToHover.__dict__ and type(IAgAvtrProcedureTransitionToHover.__dict__[attrname]) == property:
            return IAgAvtrProcedureTransitionToHover.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrProcedureTransitionToHover.")
    
    _get_AltitudeReference_metadata = { "name" : "AltitudeReference",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrAGLMSL),) }
    @property
    def AltitudeReference(self) -> "AgEAvtrAGLMSL":
        """The altitude reference."""
        return self._intf.get_property(IAgAvtrProcedureTransitionToHover._metadata, IAgAvtrProcedureTransitionToHover._get_AltitudeReference_metadata)

    _set_AltitudeReference_metadata = { "name" : "AltitudeReference",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrAGLMSL),) }
    @AltitudeReference.setter
    def AltitudeReference(self, newVal:"AgEAvtrAGLMSL") -> None:
        """The altitude reference."""
        return self._intf.set_property(IAgAvtrProcedureTransitionToHover._metadata, IAgAvtrProcedureTransitionToHover._set_AltitudeReference_metadata, newVal)

    _get_Altitude_metadata = { "name" : "Altitude",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def Altitude(self) -> float:
        """The altitude for the procedure."""
        return self._intf.get_property(IAgAvtrProcedureTransitionToHover._metadata, IAgAvtrProcedureTransitionToHover._get_Altitude_metadata)

    _set_Altitude_metadata = { "name" : "Altitude",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @Altitude.setter
    def Altitude(self, newVal:float) -> None:
        """The altitude for the procedure."""
        return self._intf.set_property(IAgAvtrProcedureTransitionToHover._metadata, IAgAvtrProcedureTransitionToHover._set_Altitude_metadata, newVal)

    _get_UseMagneticHeading_metadata = { "name" : "UseMagneticHeading",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def UseMagneticHeading(self) -> bool:
        """The option to use a magnetic heading for the course."""
        return self._intf.get_property(IAgAvtrProcedureTransitionToHover._metadata, IAgAvtrProcedureTransitionToHover._get_UseMagneticHeading_metadata)

    _get_Course_metadata = { "name" : "Course",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def Course(self) -> typing.Any:
        """The course for the procedure."""
        return self._intf.get_property(IAgAvtrProcedureTransitionToHover._metadata, IAgAvtrProcedureTransitionToHover._get_Course_metadata)

    _get_TransitionIntoWind_metadata = { "name" : "TransitionIntoWind",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def TransitionIntoWind(self) -> bool:
        """The option to transition into the wind."""
        return self._intf.get_property(IAgAvtrProcedureTransitionToHover._metadata, IAgAvtrProcedureTransitionToHover._get_TransitionIntoWind_metadata)

    _SetTransitionCourse_metadata = { "name" : "SetTransitionCourse",
            "arg_types" : (agcom.VARIANT, agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_arg, agmarshall.VARIANT_BOOL_arg,) }
    def SetTransitionCourse(self, course:typing.Any, useMagneticCourse:bool) -> None:
        """Set the course and heading reference."""
        return self._intf.invoke(IAgAvtrProcedureTransitionToHover._metadata, IAgAvtrProcedureTransitionToHover._SetTransitionCourse_metadata, course, useMagneticCourse)

    _SetTransitionIntoWind_metadata = { "name" : "SetTransitionIntoWind",
            "arg_types" : (),
            "marshallers" : () }
    def SetTransitionIntoWind(self) -> None:
        """Set the option to transition into the wind to true."""
        return self._intf.invoke(IAgAvtrProcedureTransitionToHover._metadata, IAgAvtrProcedureTransitionToHover._SetTransitionIntoWind_metadata, )

    _get_EnrouteOptions_metadata = { "name" : "EnrouteOptions",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def EnrouteOptions(self) -> "IAgAvtrEnrouteOptions":
        """Get the enroute options."""
        return self._intf.get_property(IAgAvtrProcedureTransitionToHover._metadata, IAgAvtrProcedureTransitionToHover._get_EnrouteOptions_metadata)

    _get_EnrouteTurnDirectionOptions_metadata = { "name" : "EnrouteTurnDirectionOptions",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def EnrouteTurnDirectionOptions(self) -> "IAgAvtrEnrouteTurnDirectionOptions":
        """Get the enroute turn direction options."""
        return self._intf.get_property(IAgAvtrProcedureTransitionToHover._metadata, IAgAvtrProcedureTransitionToHover._get_EnrouteTurnDirectionOptions_metadata)

    _get_VerticalPlaneOptions_metadata = { "name" : "VerticalPlaneOptions",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def VerticalPlaneOptions(self) -> "IAgAvtrVerticalPlaneAndFlightPathOptions":
        """Get the vertical plane options."""
        return self._intf.get_property(IAgAvtrProcedureTransitionToHover._metadata, IAgAvtrProcedureTransitionToHover._get_VerticalPlaneOptions_metadata)

    _get_SmoothTransitionMode_metadata = { "name" : "SmoothTransitionMode",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrTransitionToHoverMode),) }
    @property
    def SmoothTransitionMode(self) -> "AgEAvtrTransitionToHoverMode":
        """The transition mode of the aircraft at the end of the procedure."""
        return self._intf.get_property(IAgAvtrProcedureTransitionToHover._metadata, IAgAvtrProcedureTransitionToHover._get_SmoothTransitionMode_metadata)

    _set_SmoothTransitionMode_metadata = { "name" : "SmoothTransitionMode",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrTransitionToHoverMode),) }
    @SmoothTransitionMode.setter
    def SmoothTransitionMode(self, newVal:"AgEAvtrTransitionToHoverMode") -> None:
        """The transition mode of the aircraft at the end of the procedure."""
        return self._intf.set_property(IAgAvtrProcedureTransitionToHover._metadata, IAgAvtrProcedureTransitionToHover._set_SmoothTransitionMode_metadata, newVal)

    _GetAsProcedure_metadata = { "name" : "GetAsProcedure",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    def GetAsProcedure(self) -> "IAgAvtrProcedure":
        """Get the procedure interface."""
        return self._intf.invoke(IAgAvtrProcedureTransitionToHover._metadata, IAgAvtrProcedureTransitionToHover._GetAsProcedure_metadata, out_arg())


agcls.AgClassCatalog.add_catalog_entry("{06667f6e-68d3-4a3f-b285-64c556aac5c0}", IAgAvtrProcedureTransitionToHover)
agcls.AgTypeNameMap["IAgAvtrProcedureTransitionToHover"] = IAgAvtrProcedureTransitionToHover

class IAgAvtrProcedureTerrainFollow(object):
    """Interface used to access the options for a terrain following procedure."""
    _num_methods = 9
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{4c79076e-a174-469f-8370-0cb2271446ec}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_AltitudeAGL" : 1,
                             "set_AltitudeAGL" : 2,
                             "get_NavigationOptions" : 3,
                             "get_TerrainFollowingAirspeedOptions" : 4,
                             "get_ReduceTurnRadii" : 5,
                             "set_ReduceTurnRadii" : 6,
                             "get_TurnFactor" : 7,
                             "set_TurnFactor" : 8,
                             "GetAsProcedure" : 9, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrProcedureTerrainFollow._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrProcedureTerrainFollow from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrProcedureTerrainFollow.__dict__ and type(IAgAvtrProcedureTerrainFollow.__dict__[attrname]) == property:
            return IAgAvtrProcedureTerrainFollow.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrProcedureTerrainFollow.")
    
    _get_AltitudeAGL_metadata = { "name" : "AltitudeAGL",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def AltitudeAGL(self) -> float:
        """The altitude above ground level the aircraft will fly."""
        return self._intf.get_property(IAgAvtrProcedureTerrainFollow._metadata, IAgAvtrProcedureTerrainFollow._get_AltitudeAGL_metadata)

    _set_AltitudeAGL_metadata = { "name" : "AltitudeAGL",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @AltitudeAGL.setter
    def AltitudeAGL(self, newVal:float) -> None:
        """The altitude above ground level the aircraft will fly."""
        return self._intf.set_property(IAgAvtrProcedureTerrainFollow._metadata, IAgAvtrProcedureTerrainFollow._set_AltitudeAGL_metadata, newVal)

    _get_NavigationOptions_metadata = { "name" : "NavigationOptions",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def NavigationOptions(self) -> "IAgAvtrNavigationOptions":
        """Get the navigation options."""
        return self._intf.get_property(IAgAvtrProcedureTerrainFollow._metadata, IAgAvtrProcedureTerrainFollow._get_NavigationOptions_metadata)

    _get_TerrainFollowingAirspeedOptions_metadata = { "name" : "TerrainFollowingAirspeedOptions",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def TerrainFollowingAirspeedOptions(self) -> "IAgAvtrCruiseAirspeedOptions":
        """Get the terrain following airspeed options."""
        return self._intf.get_property(IAgAvtrProcedureTerrainFollow._metadata, IAgAvtrProcedureTerrainFollow._get_TerrainFollowingAirspeedOptions_metadata)

    _get_ReduceTurnRadii_metadata = { "name" : "ReduceTurnRadii",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def ReduceTurnRadii(self) -> bool:
        """Option to use the minimum speed to compute the turn radius."""
        return self._intf.get_property(IAgAvtrProcedureTerrainFollow._metadata, IAgAvtrProcedureTerrainFollow._get_ReduceTurnRadii_metadata)

    _set_ReduceTurnRadii_metadata = { "name" : "ReduceTurnRadii",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @ReduceTurnRadii.setter
    def ReduceTurnRadii(self, newVal:bool) -> None:
        """Option to use the minimum speed to compute the turn radius."""
        return self._intf.set_property(IAgAvtrProcedureTerrainFollow._metadata, IAgAvtrProcedureTerrainFollow._set_ReduceTurnRadii_metadata, newVal)

    _get_TurnFactor_metadata = { "name" : "TurnFactor",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def TurnFactor(self) -> float:
        """The maximum turn radius factor."""
        return self._intf.get_property(IAgAvtrProcedureTerrainFollow._metadata, IAgAvtrProcedureTerrainFollow._get_TurnFactor_metadata)

    _set_TurnFactor_metadata = { "name" : "TurnFactor",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @TurnFactor.setter
    def TurnFactor(self, newVal:float) -> None:
        """The maximum turn radius factor."""
        return self._intf.set_property(IAgAvtrProcedureTerrainFollow._metadata, IAgAvtrProcedureTerrainFollow._set_TurnFactor_metadata, newVal)

    _GetAsProcedure_metadata = { "name" : "GetAsProcedure",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    def GetAsProcedure(self) -> "IAgAvtrProcedure":
        """Get the procedure interface."""
        return self._intf.invoke(IAgAvtrProcedureTerrainFollow._metadata, IAgAvtrProcedureTerrainFollow._GetAsProcedure_metadata, out_arg())


agcls.AgClassCatalog.add_catalog_entry("{4c79076e-a174-469f-8370-0cb2271446ec}", IAgAvtrProcedureTerrainFollow)
agcls.AgTypeNameMap["IAgAvtrProcedureTerrainFollow"] = IAgAvtrProcedureTerrainFollow

class IAgAvtrProcedureHover(object):
    """Interface used to access the options for a hover procedure."""
    _num_methods = 31
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{9e58b1a4-ae09-41dd-aadb-fd1886d01fff}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_AltitudeOptions" : 1,
                             "get_HoverMode" : 2,
                             "set_HoverMode" : 3,
                             "get_FixedTime" : 4,
                             "set_FixedTime" : 5,
                             "get_HeadingMode" : 6,
                             "set_HeadingMode" : 7,
                             "get_FinalHeadingMode" : 8,
                             "SetRelativeCourse" : 9,
                             "SetAbsoluteCourse" : 10,
                             "SetFinalTranslationCourse" : 11,
                             "get_AbsoluteCourse" : 12,
                             "get_RelativeCourse" : 13,
                             "get_UseMagneticHeading" : 14,
                             "get_FinalHeadingRate" : 15,
                             "set_FinalHeadingRate" : 16,
                             "get_TranslationMode" : 17,
                             "set_TranslationMode" : 18,
                             "get_Bearing" : 19,
                             "set_Bearing" : 20,
                             "get_UseMagneticBearing" : 21,
                             "set_UseMagneticBearing" : 22,
                             "get_Range" : 23,
                             "set_Range" : 24,
                             "get_FinalCourseMode" : 25,
                             "set_FinalCourseMode" : 26,
                             "get_SmoothTranslationMode" : 27,
                             "set_SmoothTranslationMode" : 28,
                             "get_RadiusFactor" : 29,
                             "set_RadiusFactor" : 30,
                             "GetAsProcedure" : 31, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrProcedureHover._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrProcedureHover from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrProcedureHover.__dict__ and type(IAgAvtrProcedureHover.__dict__[attrname]) == property:
            return IAgAvtrProcedureHover.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrProcedureHover.")
    
    _get_AltitudeOptions_metadata = { "name" : "AltitudeOptions",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def AltitudeOptions(self) -> "IAgAvtrHoverAltitudeOptions":
        """Get the altitude options."""
        return self._intf.get_property(IAgAvtrProcedureHover._metadata, IAgAvtrProcedureHover._get_AltitudeOptions_metadata)

    _get_HoverMode_metadata = { "name" : "HoverMode",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrHoverMode),) }
    @property
    def HoverMode(self) -> "AgEAvtrHoverMode":
        """The option to have the aircraft hover in place for a fixed time or to perform a hovering maneuver."""
        return self._intf.get_property(IAgAvtrProcedureHover._metadata, IAgAvtrProcedureHover._get_HoverMode_metadata)

    _set_HoverMode_metadata = { "name" : "HoverMode",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrHoverMode),) }
    @HoverMode.setter
    def HoverMode(self, newVal:"AgEAvtrHoverMode") -> None:
        """The option to have the aircraft hover in place for a fixed time or to perform a hovering maneuver."""
        return self._intf.set_property(IAgAvtrProcedureHover._metadata, IAgAvtrProcedureHover._set_HoverMode_metadata, newVal)

    _get_FixedTime_metadata = { "name" : "FixedTime",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def FixedTime(self) -> typing.Any:
        """The time to hover in place."""
        return self._intf.get_property(IAgAvtrProcedureHover._metadata, IAgAvtrProcedureHover._get_FixedTime_metadata)

    _set_FixedTime_metadata = { "name" : "FixedTime",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @FixedTime.setter
    def FixedTime(self, newVal:typing.Any) -> None:
        """The time to hover in place."""
        return self._intf.set_property(IAgAvtrProcedureHover._metadata, IAgAvtrProcedureHover._set_FixedTime_metadata, newVal)

    _get_HeadingMode_metadata = { "name" : "HeadingMode",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrVTOLHeadingMode),) }
    @property
    def HeadingMode(self) -> "AgEAvtrVTOLHeadingMode":
        """The heading mode for the aircraft."""
        return self._intf.get_property(IAgAvtrProcedureHover._metadata, IAgAvtrProcedureHover._get_HeadingMode_metadata)

    _set_HeadingMode_metadata = { "name" : "HeadingMode",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrVTOLHeadingMode),) }
    @HeadingMode.setter
    def HeadingMode(self, newVal:"AgEAvtrVTOLHeadingMode") -> None:
        """The heading mode for the aircraft."""
        return self._intf.set_property(IAgAvtrProcedureHover._metadata, IAgAvtrProcedureHover._set_HeadingMode_metadata, newVal)

    _get_FinalHeadingMode_metadata = { "name" : "FinalHeadingMode",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrVTOLFinalHeadingMode),) }
    @property
    def FinalHeadingMode(self) -> "AgEAvtrVTOLFinalHeadingMode":
        """The mode to define the heading at the end of the hover."""
        return self._intf.get_property(IAgAvtrProcedureHover._metadata, IAgAvtrProcedureHover._get_FinalHeadingMode_metadata)

    _SetRelativeCourse_metadata = { "name" : "SetRelativeCourse",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    def SetRelativeCourse(self, headingChange:typing.Any) -> None:
        """Set the relative heading change."""
        return self._intf.invoke(IAgAvtrProcedureHover._metadata, IAgAvtrProcedureHover._SetRelativeCourse_metadata, headingChange)

    _SetAbsoluteCourse_metadata = { "name" : "SetAbsoluteCourse",
            "arg_types" : (agcom.VARIANT, agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_arg, agmarshall.VARIANT_BOOL_arg,) }
    def SetAbsoluteCourse(self, course:typing.Any, isMagnetic:bool) -> None:
        """Set the absolute heading and reference."""
        return self._intf.invoke(IAgAvtrProcedureHover._metadata, IAgAvtrProcedureHover._SetAbsoluteCourse_metadata, course, isMagnetic)

    _SetFinalTranslationCourse_metadata = { "name" : "SetFinalTranslationCourse",
            "arg_types" : (),
            "marshallers" : () }
    def SetFinalTranslationCourse(self) -> None:
        """The option to have the final heading to match the translation bearing."""
        return self._intf.invoke(IAgAvtrProcedureHover._metadata, IAgAvtrProcedureHover._SetFinalTranslationCourse_metadata, )

    _get_AbsoluteCourse_metadata = { "name" : "AbsoluteCourse",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def AbsoluteCourse(self) -> typing.Any:
        """The absolute course for the heading."""
        return self._intf.get_property(IAgAvtrProcedureHover._metadata, IAgAvtrProcedureHover._get_AbsoluteCourse_metadata)

    _get_RelativeCourse_metadata = { "name" : "RelativeCourse",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def RelativeCourse(self) -> typing.Any:
        """The relative heading change."""
        return self._intf.get_property(IAgAvtrProcedureHover._metadata, IAgAvtrProcedureHover._get_RelativeCourse_metadata)

    _get_UseMagneticHeading_metadata = { "name" : "UseMagneticHeading",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def UseMagneticHeading(self) -> bool:
        """The option to use a magnetic heading for the heading course."""
        return self._intf.get_property(IAgAvtrProcedureHover._metadata, IAgAvtrProcedureHover._get_UseMagneticHeading_metadata)

    _get_FinalHeadingRate_metadata = { "name" : "FinalHeadingRate",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrVTOLRateMode),) }
    @property
    def FinalHeadingRate(self) -> "AgEAvtrVTOLRateMode":
        """The options to define the heading rate of the aircraft at the end of the procedure."""
        return self._intf.get_property(IAgAvtrProcedureHover._metadata, IAgAvtrProcedureHover._get_FinalHeadingRate_metadata)

    _set_FinalHeadingRate_metadata = { "name" : "FinalHeadingRate",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrVTOLRateMode),) }
    @FinalHeadingRate.setter
    def FinalHeadingRate(self, newVal:"AgEAvtrVTOLRateMode") -> None:
        """The options to define the heading rate of the aircraft at the end of the procedure."""
        return self._intf.set_property(IAgAvtrProcedureHover._metadata, IAgAvtrProcedureHover._set_FinalHeadingRate_metadata, newVal)

    _get_TranslationMode_metadata = { "name" : "TranslationMode",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrVTOLTranslationMode),) }
    @property
    def TranslationMode(self) -> "AgEAvtrVTOLTranslationMode":
        """Define how the aircraft will translate during the hover."""
        return self._intf.get_property(IAgAvtrProcedureHover._metadata, IAgAvtrProcedureHover._get_TranslationMode_metadata)

    _set_TranslationMode_metadata = { "name" : "TranslationMode",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrVTOLTranslationMode),) }
    @TranslationMode.setter
    def TranslationMode(self, newVal:"AgEAvtrVTOLTranslationMode") -> None:
        """Define how the aircraft will translate during the hover."""
        return self._intf.set_property(IAgAvtrProcedureHover._metadata, IAgAvtrProcedureHover._set_TranslationMode_metadata, newVal)

    _get_Bearing_metadata = { "name" : "Bearing",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def Bearing(self) -> typing.Any:
        """The bearing of the translation during the hover."""
        return self._intf.get_property(IAgAvtrProcedureHover._metadata, IAgAvtrProcedureHover._get_Bearing_metadata)

    _set_Bearing_metadata = { "name" : "Bearing",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @Bearing.setter
    def Bearing(self, newVal:typing.Any) -> None:
        """The bearing of the translation during the hover."""
        return self._intf.set_property(IAgAvtrProcedureHover._metadata, IAgAvtrProcedureHover._set_Bearing_metadata, newVal)

    _get_UseMagneticBearing_metadata = { "name" : "UseMagneticBearing",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def UseMagneticBearing(self) -> bool:
        """The option to use a magnetic heading for the translation bearing."""
        return self._intf.get_property(IAgAvtrProcedureHover._metadata, IAgAvtrProcedureHover._get_UseMagneticBearing_metadata)

    _set_UseMagneticBearing_metadata = { "name" : "UseMagneticBearing",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @UseMagneticBearing.setter
    def UseMagneticBearing(self, newVal:bool) -> None:
        """The option to use a magnetic heading for the translation bearing."""
        return self._intf.set_property(IAgAvtrProcedureHover._metadata, IAgAvtrProcedureHover._set_UseMagneticBearing_metadata, newVal)

    _get_Range_metadata = { "name" : "Range",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def Range(self) -> float:
        """The range to translate during the hover."""
        return self._intf.get_property(IAgAvtrProcedureHover._metadata, IAgAvtrProcedureHover._get_Range_metadata)

    _set_Range_metadata = { "name" : "Range",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @Range.setter
    def Range(self, newVal:float) -> None:
        """The range to translate during the hover."""
        return self._intf.set_property(IAgAvtrProcedureHover._metadata, IAgAvtrProcedureHover._set_Range_metadata, newVal)

    _get_FinalCourseMode_metadata = { "name" : "FinalCourseMode",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrVTOLTranslationFinalCourseMode),) }
    @property
    def FinalCourseMode(self) -> "AgEAvtrVTOLTranslationFinalCourseMode":
        """The mode to specify the final course at the end of the hover."""
        return self._intf.get_property(IAgAvtrProcedureHover._metadata, IAgAvtrProcedureHover._get_FinalCourseMode_metadata)

    _set_FinalCourseMode_metadata = { "name" : "FinalCourseMode",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrVTOLTranslationFinalCourseMode),) }
    @FinalCourseMode.setter
    def FinalCourseMode(self, newVal:"AgEAvtrVTOLTranslationFinalCourseMode") -> None:
        """The mode to specify the final course at the end of the hover."""
        return self._intf.set_property(IAgAvtrProcedureHover._metadata, IAgAvtrProcedureHover._set_FinalCourseMode_metadata, newVal)

    _get_SmoothTranslationMode_metadata = { "name" : "SmoothTranslationMode",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrVTOLRateMode),) }
    @property
    def SmoothTranslationMode(self) -> "AgEAvtrVTOLRateMode":
        """The translation mode of the aircraft at the end of the procedure."""
        return self._intf.get_property(IAgAvtrProcedureHover._metadata, IAgAvtrProcedureHover._get_SmoothTranslationMode_metadata)

    _set_SmoothTranslationMode_metadata = { "name" : "SmoothTranslationMode",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrVTOLRateMode),) }
    @SmoothTranslationMode.setter
    def SmoothTranslationMode(self, newVal:"AgEAvtrVTOLRateMode") -> None:
        """The translation mode of the aircraft at the end of the procedure."""
        return self._intf.set_property(IAgAvtrProcedureHover._metadata, IAgAvtrProcedureHover._set_SmoothTranslationMode_metadata, newVal)

    _get_RadiusFactor_metadata = { "name" : "RadiusFactor",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def RadiusFactor(self) -> float:
        """The turn radius factor."""
        return self._intf.get_property(IAgAvtrProcedureHover._metadata, IAgAvtrProcedureHover._get_RadiusFactor_metadata)

    _set_RadiusFactor_metadata = { "name" : "RadiusFactor",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @RadiusFactor.setter
    def RadiusFactor(self, newVal:float) -> None:
        """The turn radius factor."""
        return self._intf.set_property(IAgAvtrProcedureHover._metadata, IAgAvtrProcedureHover._set_RadiusFactor_metadata, newVal)

    _GetAsProcedure_metadata = { "name" : "GetAsProcedure",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    def GetAsProcedure(self) -> "IAgAvtrProcedure":
        """Get the procedure interface."""
        return self._intf.invoke(IAgAvtrProcedureHover._metadata, IAgAvtrProcedureHover._GetAsProcedure_metadata, out_arg())


agcls.AgClassCatalog.add_catalog_entry("{9e58b1a4-ae09-41dd-aadb-fd1886d01fff}", IAgAvtrProcedureHover)
agcls.AgTypeNameMap["IAgAvtrProcedureHover"] = IAgAvtrProcedureHover

class IAgAvtrProcedureHoverTranslate(object):
    """Interface used to access the options for a hover translate procedure."""
    _num_methods = 19
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{7c58df50-e3d1-4e96-bb3c-8cc2b2c58343}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_AltitudeOptions" : 1,
                             "get_HeadingMode" : 2,
                             "set_HeadingMode" : 3,
                             "get_FinalHeadingMode" : 4,
                             "SetRelativeCourse" : 5,
                             "SetAbsoluteCourse" : 6,
                             "SetFinalTranslationCourse" : 7,
                             "get_AbsoluteCourse" : 8,
                             "get_RelativeCourse" : 9,
                             "get_UseMagneticHeading" : 10,
                             "get_FinalHeadingRate" : 11,
                             "set_FinalHeadingRate" : 12,
                             "get_FinalCourseMode" : 13,
                             "set_FinalCourseMode" : 14,
                             "get_SmoothTranslationMode" : 15,
                             "set_SmoothTranslationMode" : 16,
                             "get_RadiusFactor" : 17,
                             "set_RadiusFactor" : 18,
                             "GetAsProcedure" : 19, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrProcedureHoverTranslate._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrProcedureHoverTranslate from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrProcedureHoverTranslate.__dict__ and type(IAgAvtrProcedureHoverTranslate.__dict__[attrname]) == property:
            return IAgAvtrProcedureHoverTranslate.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrProcedureHoverTranslate.")
    
    _get_AltitudeOptions_metadata = { "name" : "AltitudeOptions",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def AltitudeOptions(self) -> "IAgAvtrHoverAltitudeOptions":
        """Get the altitude options."""
        return self._intf.get_property(IAgAvtrProcedureHoverTranslate._metadata, IAgAvtrProcedureHoverTranslate._get_AltitudeOptions_metadata)

    _get_HeadingMode_metadata = { "name" : "HeadingMode",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrVTOLHeadingMode),) }
    @property
    def HeadingMode(self) -> "AgEAvtrVTOLHeadingMode":
        """The heading mode for the aircraft."""
        return self._intf.get_property(IAgAvtrProcedureHoverTranslate._metadata, IAgAvtrProcedureHoverTranslate._get_HeadingMode_metadata)

    _set_HeadingMode_metadata = { "name" : "HeadingMode",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrVTOLHeadingMode),) }
    @HeadingMode.setter
    def HeadingMode(self, newVal:"AgEAvtrVTOLHeadingMode") -> None:
        """The heading mode for the aircraft."""
        return self._intf.set_property(IAgAvtrProcedureHoverTranslate._metadata, IAgAvtrProcedureHoverTranslate._set_HeadingMode_metadata, newVal)

    _get_FinalHeadingMode_metadata = { "name" : "FinalHeadingMode",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrVTOLFinalHeadingMode),) }
    @property
    def FinalHeadingMode(self) -> "AgEAvtrVTOLFinalHeadingMode":
        """The mode to define the heading at the end of the hover."""
        return self._intf.get_property(IAgAvtrProcedureHoverTranslate._metadata, IAgAvtrProcedureHoverTranslate._get_FinalHeadingMode_metadata)

    _SetRelativeCourse_metadata = { "name" : "SetRelativeCourse",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    def SetRelativeCourse(self, headingChange:typing.Any) -> None:
        """Set the relative heading change."""
        return self._intf.invoke(IAgAvtrProcedureHoverTranslate._metadata, IAgAvtrProcedureHoverTranslate._SetRelativeCourse_metadata, headingChange)

    _SetAbsoluteCourse_metadata = { "name" : "SetAbsoluteCourse",
            "arg_types" : (agcom.VARIANT, agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_arg, agmarshall.VARIANT_BOOL_arg,) }
    def SetAbsoluteCourse(self, course:typing.Any, isMagnetic:bool) -> None:
        """Set the absolute heading and reference."""
        return self._intf.invoke(IAgAvtrProcedureHoverTranslate._metadata, IAgAvtrProcedureHoverTranslate._SetAbsoluteCourse_metadata, course, isMagnetic)

    _SetFinalTranslationCourse_metadata = { "name" : "SetFinalTranslationCourse",
            "arg_types" : (),
            "marshallers" : () }
    def SetFinalTranslationCourse(self) -> None:
        """The option to have the final heading to match the translation bearing."""
        return self._intf.invoke(IAgAvtrProcedureHoverTranslate._metadata, IAgAvtrProcedureHoverTranslate._SetFinalTranslationCourse_metadata, )

    _get_AbsoluteCourse_metadata = { "name" : "AbsoluteCourse",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def AbsoluteCourse(self) -> typing.Any:
        """The absolute course for the heading."""
        return self._intf.get_property(IAgAvtrProcedureHoverTranslate._metadata, IAgAvtrProcedureHoverTranslate._get_AbsoluteCourse_metadata)

    _get_RelativeCourse_metadata = { "name" : "RelativeCourse",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def RelativeCourse(self) -> typing.Any:
        """The relative heading change."""
        return self._intf.get_property(IAgAvtrProcedureHoverTranslate._metadata, IAgAvtrProcedureHoverTranslate._get_RelativeCourse_metadata)

    _get_UseMagneticHeading_metadata = { "name" : "UseMagneticHeading",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def UseMagneticHeading(self) -> bool:
        """The option to use a magnetic heading for the heading course."""
        return self._intf.get_property(IAgAvtrProcedureHoverTranslate._metadata, IAgAvtrProcedureHoverTranslate._get_UseMagneticHeading_metadata)

    _get_FinalHeadingRate_metadata = { "name" : "FinalHeadingRate",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrVTOLRateMode),) }
    @property
    def FinalHeadingRate(self) -> "AgEAvtrVTOLRateMode":
        """The options to define the heading rate of the aircraft at the end of the procedure."""
        return self._intf.get_property(IAgAvtrProcedureHoverTranslate._metadata, IAgAvtrProcedureHoverTranslate._get_FinalHeadingRate_metadata)

    _set_FinalHeadingRate_metadata = { "name" : "FinalHeadingRate",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrVTOLRateMode),) }
    @FinalHeadingRate.setter
    def FinalHeadingRate(self, newVal:"AgEAvtrVTOLRateMode") -> None:
        """The options to define the heading rate of the aircraft at the end of the procedure."""
        return self._intf.set_property(IAgAvtrProcedureHoverTranslate._metadata, IAgAvtrProcedureHoverTranslate._set_FinalHeadingRate_metadata, newVal)

    _get_FinalCourseMode_metadata = { "name" : "FinalCourseMode",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrVTOLTranslationFinalCourseMode),) }
    @property
    def FinalCourseMode(self) -> "AgEAvtrVTOLTranslationFinalCourseMode":
        """The mode to specify the final course at the end of the hover."""
        return self._intf.get_property(IAgAvtrProcedureHoverTranslate._metadata, IAgAvtrProcedureHoverTranslate._get_FinalCourseMode_metadata)

    _set_FinalCourseMode_metadata = { "name" : "FinalCourseMode",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrVTOLTranslationFinalCourseMode),) }
    @FinalCourseMode.setter
    def FinalCourseMode(self, newVal:"AgEAvtrVTOLTranslationFinalCourseMode") -> None:
        """The mode to specify the final course at the end of the hover."""
        return self._intf.set_property(IAgAvtrProcedureHoverTranslate._metadata, IAgAvtrProcedureHoverTranslate._set_FinalCourseMode_metadata, newVal)

    _get_SmoothTranslationMode_metadata = { "name" : "SmoothTranslationMode",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrVTOLRateMode),) }
    @property
    def SmoothTranslationMode(self) -> "AgEAvtrVTOLRateMode":
        """The translation mode of the aircraft at the end of the procedure."""
        return self._intf.get_property(IAgAvtrProcedureHoverTranslate._metadata, IAgAvtrProcedureHoverTranslate._get_SmoothTranslationMode_metadata)

    _set_SmoothTranslationMode_metadata = { "name" : "SmoothTranslationMode",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrVTOLRateMode),) }
    @SmoothTranslationMode.setter
    def SmoothTranslationMode(self, newVal:"AgEAvtrVTOLRateMode") -> None:
        """The translation mode of the aircraft at the end of the procedure."""
        return self._intf.set_property(IAgAvtrProcedureHoverTranslate._metadata, IAgAvtrProcedureHoverTranslate._set_SmoothTranslationMode_metadata, newVal)

    _get_RadiusFactor_metadata = { "name" : "RadiusFactor",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def RadiusFactor(self) -> float:
        """The turn radius factor."""
        return self._intf.get_property(IAgAvtrProcedureHoverTranslate._metadata, IAgAvtrProcedureHoverTranslate._get_RadiusFactor_metadata)

    _set_RadiusFactor_metadata = { "name" : "RadiusFactor",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @RadiusFactor.setter
    def RadiusFactor(self, newVal:float) -> None:
        """The turn radius factor."""
        return self._intf.set_property(IAgAvtrProcedureHoverTranslate._metadata, IAgAvtrProcedureHoverTranslate._set_RadiusFactor_metadata, newVal)

    _GetAsProcedure_metadata = { "name" : "GetAsProcedure",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    def GetAsProcedure(self) -> "IAgAvtrProcedure":
        """Get the procedure interface."""
        return self._intf.invoke(IAgAvtrProcedureHoverTranslate._metadata, IAgAvtrProcedureHoverTranslate._GetAsProcedure_metadata, out_arg())


agcls.AgClassCatalog.add_catalog_entry("{7c58df50-e3d1-4e96-bb3c-8cc2b2c58343}", IAgAvtrProcedureHoverTranslate)
agcls.AgTypeNameMap["IAgAvtrProcedureHoverTranslate"] = IAgAvtrProcedureHoverTranslate

class IAgAvtrProcedureTransitionToForwardFlight(object):
    """Interface used to access the options for a transition to forward flight procedure."""
    _num_methods = 10
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{5dbdb660-3320-47c7-ac2b-f1ebd3b0eeae}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_TransitionCourseMode" : 1,
                             "SetTransitionIntoWind" : 2,
                             "SetAbsoluteCourse" : 3,
                             "SetRelativeCourse" : 4,
                             "get_UseMagneticHeading" : 5,
                             "get_AbsoluteCourse" : 6,
                             "get_RelativeCourse" : 7,
                             "get_FlightPathAngle" : 8,
                             "set_FlightPathAngle" : 9,
                             "GetAsProcedure" : 10, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrProcedureTransitionToForwardFlight._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrProcedureTransitionToForwardFlight from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrProcedureTransitionToForwardFlight.__dict__ and type(IAgAvtrProcedureTransitionToForwardFlight.__dict__[attrname]) == property:
            return IAgAvtrProcedureTransitionToForwardFlight.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrProcedureTransitionToForwardFlight.")
    
    _get_TransitionCourseMode_metadata = { "name" : "TransitionCourseMode",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrVTOLTransitionMode),) }
    @property
    def TransitionCourseMode(self) -> "AgEAvtrVTOLTransitionMode":
        """The mode to specify the course of the transition maneuver."""
        return self._intf.get_property(IAgAvtrProcedureTransitionToForwardFlight._metadata, IAgAvtrProcedureTransitionToForwardFlight._get_TransitionCourseMode_metadata)

    _SetTransitionIntoWind_metadata = { "name" : "SetTransitionIntoWind",
            "arg_types" : (),
            "marshallers" : () }
    def SetTransitionIntoWind(self) -> None:
        """Set the option to transition into the wind to true."""
        return self._intf.invoke(IAgAvtrProcedureTransitionToForwardFlight._metadata, IAgAvtrProcedureTransitionToForwardFlight._SetTransitionIntoWind_metadata, )

    _SetAbsoluteCourse_metadata = { "name" : "SetAbsoluteCourse",
            "arg_types" : (agcom.VARIANT, agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_arg, agmarshall.VARIANT_BOOL_arg,) }
    def SetAbsoluteCourse(self, course:typing.Any, useMagneticCourse:bool) -> None:
        """Set the mode to absolute and specify the course and heading reference."""
        return self._intf.invoke(IAgAvtrProcedureTransitionToForwardFlight._metadata, IAgAvtrProcedureTransitionToForwardFlight._SetAbsoluteCourse_metadata, course, useMagneticCourse)

    _SetRelativeCourse_metadata = { "name" : "SetRelativeCourse",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    def SetRelativeCourse(self, headingChange:typing.Any) -> None:
        """Set the mode to relative and specify the heading change."""
        return self._intf.invoke(IAgAvtrProcedureTransitionToForwardFlight._metadata, IAgAvtrProcedureTransitionToForwardFlight._SetRelativeCourse_metadata, headingChange)

    _get_UseMagneticHeading_metadata = { "name" : "UseMagneticHeading",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def UseMagneticHeading(self) -> bool:
        """The option to use a magnetic heading for the course."""
        return self._intf.get_property(IAgAvtrProcedureTransitionToForwardFlight._metadata, IAgAvtrProcedureTransitionToForwardFlight._get_UseMagneticHeading_metadata)

    _get_AbsoluteCourse_metadata = { "name" : "AbsoluteCourse",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def AbsoluteCourse(self) -> typing.Any:
        """The absolute course for the procedure."""
        return self._intf.get_property(IAgAvtrProcedureTransitionToForwardFlight._metadata, IAgAvtrProcedureTransitionToForwardFlight._get_AbsoluteCourse_metadata)

    _get_RelativeCourse_metadata = { "name" : "RelativeCourse",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def RelativeCourse(self) -> typing.Any:
        """The relative course for the procedure."""
        return self._intf.get_property(IAgAvtrProcedureTransitionToForwardFlight._metadata, IAgAvtrProcedureTransitionToForwardFlight._get_RelativeCourse_metadata)

    _get_FlightPathAngle_metadata = { "name" : "FlightPathAngle",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def FlightPathAngle(self) -> typing.Any:
        """The pitch angle of the flight path at the end of the procedure."""
        return self._intf.get_property(IAgAvtrProcedureTransitionToForwardFlight._metadata, IAgAvtrProcedureTransitionToForwardFlight._get_FlightPathAngle_metadata)

    _set_FlightPathAngle_metadata = { "name" : "FlightPathAngle",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @FlightPathAngle.setter
    def FlightPathAngle(self, newVal:typing.Any) -> None:
        """The pitch angle of the flight path at the end of the procedure."""
        return self._intf.set_property(IAgAvtrProcedureTransitionToForwardFlight._metadata, IAgAvtrProcedureTransitionToForwardFlight._set_FlightPathAngle_metadata, newVal)

    _GetAsProcedure_metadata = { "name" : "GetAsProcedure",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    def GetAsProcedure(self) -> "IAgAvtrProcedure":
        """Get the procedure interface."""
        return self._intf.invoke(IAgAvtrProcedureTransitionToForwardFlight._metadata, IAgAvtrProcedureTransitionToForwardFlight._GetAsProcedure_metadata, out_arg())


agcls.AgClassCatalog.add_catalog_entry("{5dbdb660-3320-47c7-ac2b-f1ebd3b0eeae}", IAgAvtrProcedureTransitionToForwardFlight)
agcls.AgTypeNameMap["IAgAvtrProcedureTransitionToForwardFlight"] = IAgAvtrProcedureTransitionToForwardFlight

class IAgAvtrProcedureVerticalTakeoff(object):
    """Interface used to access the options for a vertical takeoff procedure."""
    _num_methods = 14
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{1d8d4dbd-b18b-4fc7-862f-0afbdff5054c}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_AltitudeAbovePoint" : 1,
                             "set_AltitudeAbovePoint" : 2,
                             "get_FinalAltitudeRate" : 3,
                             "set_FinalAltitudeRate" : 4,
                             "get_AltitudeOffset" : 5,
                             "set_AltitudeOffset" : 6,
                             "SetHeading" : 7,
                             "get_Heading" : 8,
                             "get_UseMagneticHeading" : 9,
                             "get_HeadingIntoWind" : 10,
                             "set_HeadingIntoWind" : 11,
                             "get_HoldOnDeck" : 12,
                             "set_HoldOnDeck" : 13,
                             "GetAsProcedure" : 14, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrProcedureVerticalTakeoff._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrProcedureVerticalTakeoff from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrProcedureVerticalTakeoff.__dict__ and type(IAgAvtrProcedureVerticalTakeoff.__dict__[attrname]) == property:
            return IAgAvtrProcedureVerticalTakeoff.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrProcedureVerticalTakeoff.")
    
    _get_AltitudeAbovePoint_metadata = { "name" : "AltitudeAbovePoint",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def AltitudeAbovePoint(self) -> float:
        """The altitude the aircraft will takeoff to."""
        return self._intf.get_property(IAgAvtrProcedureVerticalTakeoff._metadata, IAgAvtrProcedureVerticalTakeoff._get_AltitudeAbovePoint_metadata)

    _set_AltitudeAbovePoint_metadata = { "name" : "AltitudeAbovePoint",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @AltitudeAbovePoint.setter
    def AltitudeAbovePoint(self, newVal:float) -> None:
        """The altitude the aircraft will takeoff to."""
        return self._intf.set_property(IAgAvtrProcedureVerticalTakeoff._metadata, IAgAvtrProcedureVerticalTakeoff._set_AltitudeAbovePoint_metadata, newVal)

    _get_FinalAltitudeRate_metadata = { "name" : "FinalAltitudeRate",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrVTOLRateMode),) }
    @property
    def FinalAltitudeRate(self) -> "AgEAvtrVTOLRateMode":
        """The altitude rate at the end of the procedure."""
        return self._intf.get_property(IAgAvtrProcedureVerticalTakeoff._metadata, IAgAvtrProcedureVerticalTakeoff._get_FinalAltitudeRate_metadata)

    _set_FinalAltitudeRate_metadata = { "name" : "FinalAltitudeRate",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrVTOLRateMode),) }
    @FinalAltitudeRate.setter
    def FinalAltitudeRate(self, newVal:"AgEAvtrVTOLRateMode") -> None:
        """The altitude rate at the end of the procedure."""
        return self._intf.set_property(IAgAvtrProcedureVerticalTakeoff._metadata, IAgAvtrProcedureVerticalTakeoff._set_FinalAltitudeRate_metadata, newVal)

    _get_AltitudeOffset_metadata = { "name" : "AltitudeOffset",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def AltitudeOffset(self) -> float:
        """The altitude offset from the site to begin the vertical takeoff."""
        return self._intf.get_property(IAgAvtrProcedureVerticalTakeoff._metadata, IAgAvtrProcedureVerticalTakeoff._get_AltitudeOffset_metadata)

    _set_AltitudeOffset_metadata = { "name" : "AltitudeOffset",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @AltitudeOffset.setter
    def AltitudeOffset(self, newVal:float) -> None:
        """The altitude offset from the site to begin the vertical takeoff."""
        return self._intf.set_property(IAgAvtrProcedureVerticalTakeoff._metadata, IAgAvtrProcedureVerticalTakeoff._set_AltitudeOffset_metadata, newVal)

    _SetHeading_metadata = { "name" : "SetHeading",
            "arg_types" : (agcom.VARIANT, agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_arg, agmarshall.VARIANT_BOOL_arg,) }
    def SetHeading(self, heading:typing.Any, isMagnetic:bool) -> None:
        """Set the heading and heading reference."""
        return self._intf.invoke(IAgAvtrProcedureVerticalTakeoff._metadata, IAgAvtrProcedureVerticalTakeoff._SetHeading_metadata, heading, isMagnetic)

    _get_Heading_metadata = { "name" : "Heading",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def Heading(self) -> typing.Any:
        """The heading for the procedure."""
        return self._intf.get_property(IAgAvtrProcedureVerticalTakeoff._metadata, IAgAvtrProcedureVerticalTakeoff._get_Heading_metadata)

    _get_UseMagneticHeading_metadata = { "name" : "UseMagneticHeading",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def UseMagneticHeading(self) -> bool:
        """The option to use a magnetic heading."""
        return self._intf.get_property(IAgAvtrProcedureVerticalTakeoff._metadata, IAgAvtrProcedureVerticalTakeoff._get_UseMagneticHeading_metadata)

    _get_HeadingIntoWind_metadata = { "name" : "HeadingIntoWind",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def HeadingIntoWind(self) -> bool:
        """The option to define the heading according to the wind direction."""
        return self._intf.get_property(IAgAvtrProcedureVerticalTakeoff._metadata, IAgAvtrProcedureVerticalTakeoff._get_HeadingIntoWind_metadata)

    _set_HeadingIntoWind_metadata = { "name" : "HeadingIntoWind",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @HeadingIntoWind.setter
    def HeadingIntoWind(self, pVal:bool) -> None:
        """The option to define the heading according to the wind direction."""
        return self._intf.set_property(IAgAvtrProcedureVerticalTakeoff._metadata, IAgAvtrProcedureVerticalTakeoff._set_HeadingIntoWind_metadata, pVal)

    _get_HoldOnDeck_metadata = { "name" : "HoldOnDeck",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def HoldOnDeck(self) -> typing.Any:
        """The duration the aircraft will wait before beginning the takeoff."""
        return self._intf.get_property(IAgAvtrProcedureVerticalTakeoff._metadata, IAgAvtrProcedureVerticalTakeoff._get_HoldOnDeck_metadata)

    _set_HoldOnDeck_metadata = { "name" : "HoldOnDeck",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @HoldOnDeck.setter
    def HoldOnDeck(self, inVal:typing.Any) -> None:
        """The duration the aircraft will wait before beginning the takeoff."""
        return self._intf.set_property(IAgAvtrProcedureVerticalTakeoff._metadata, IAgAvtrProcedureVerticalTakeoff._set_HoldOnDeck_metadata, inVal)

    _GetAsProcedure_metadata = { "name" : "GetAsProcedure",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    def GetAsProcedure(self) -> "IAgAvtrProcedure":
        """Get the procedure interface."""
        return self._intf.invoke(IAgAvtrProcedureVerticalTakeoff._metadata, IAgAvtrProcedureVerticalTakeoff._GetAsProcedure_metadata, out_arg())


agcls.AgClassCatalog.add_catalog_entry("{1d8d4dbd-b18b-4fc7-862f-0afbdff5054c}", IAgAvtrProcedureVerticalTakeoff)
agcls.AgTypeNameMap["IAgAvtrProcedureVerticalTakeoff"] = IAgAvtrProcedureVerticalTakeoff

class IAgAvtrProcedureVerticalLanding(object):
    """Interface used to access the options for a vertical landing procedure."""
    _num_methods = 14
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{22009a25-626b-4677-aac4-668cc62a6d9f}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_AltitudeAbovePoint" : 1,
                             "set_AltitudeAbovePoint" : 2,
                             "get_FinalAltitudeRate" : 3,
                             "set_FinalAltitudeRate" : 4,
                             "get_AltitudeOffset" : 5,
                             "set_AltitudeOffset" : 6,
                             "get_HeadingMode" : 7,
                             "set_HeadingMode" : 8,
                             "SetHeading" : 9,
                             "get_Heading" : 10,
                             "get_UseMagneticHeading" : 11,
                             "get_RadiusFactor" : 12,
                             "set_RadiusFactor" : 13,
                             "GetAsProcedure" : 14, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrProcedureVerticalLanding._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrProcedureVerticalLanding from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrProcedureVerticalLanding.__dict__ and type(IAgAvtrProcedureVerticalLanding.__dict__[attrname]) == property:
            return IAgAvtrProcedureVerticalLanding.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrProcedureVerticalLanding.")
    
    _get_AltitudeAbovePoint_metadata = { "name" : "AltitudeAbovePoint",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def AltitudeAbovePoint(self) -> float:
        """The altitude the aircraft will takeoff to."""
        return self._intf.get_property(IAgAvtrProcedureVerticalLanding._metadata, IAgAvtrProcedureVerticalLanding._get_AltitudeAbovePoint_metadata)

    _set_AltitudeAbovePoint_metadata = { "name" : "AltitudeAbovePoint",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @AltitudeAbovePoint.setter
    def AltitudeAbovePoint(self, newVal:float) -> None:
        """The altitude the aircraft will takeoff to."""
        return self._intf.set_property(IAgAvtrProcedureVerticalLanding._metadata, IAgAvtrProcedureVerticalLanding._set_AltitudeAbovePoint_metadata, newVal)

    _get_FinalAltitudeRate_metadata = { "name" : "FinalAltitudeRate",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrVTOLRateMode),) }
    @property
    def FinalAltitudeRate(self) -> "AgEAvtrVTOLRateMode":
        """The altitude rate at the end of the procedure."""
        return self._intf.get_property(IAgAvtrProcedureVerticalLanding._metadata, IAgAvtrProcedureVerticalLanding._get_FinalAltitudeRate_metadata)

    _set_FinalAltitudeRate_metadata = { "name" : "FinalAltitudeRate",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrVTOLRateMode),) }
    @FinalAltitudeRate.setter
    def FinalAltitudeRate(self, newVal:"AgEAvtrVTOLRateMode") -> None:
        """The altitude rate at the end of the procedure."""
        return self._intf.set_property(IAgAvtrProcedureVerticalLanding._metadata, IAgAvtrProcedureVerticalLanding._set_FinalAltitudeRate_metadata, newVal)

    _get_AltitudeOffset_metadata = { "name" : "AltitudeOffset",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def AltitudeOffset(self) -> float:
        """The altitude offset from the site to begin the vertical takeoff."""
        return self._intf.get_property(IAgAvtrProcedureVerticalLanding._metadata, IAgAvtrProcedureVerticalLanding._get_AltitudeOffset_metadata)

    _set_AltitudeOffset_metadata = { "name" : "AltitudeOffset",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @AltitudeOffset.setter
    def AltitudeOffset(self, newVal:float) -> None:
        """The altitude offset from the site to begin the vertical takeoff."""
        return self._intf.set_property(IAgAvtrProcedureVerticalLanding._metadata, IAgAvtrProcedureVerticalLanding._set_AltitudeOffset_metadata, newVal)

    _get_HeadingMode_metadata = { "name" : "HeadingMode",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrVertLandingMode),) }
    @property
    def HeadingMode(self) -> "AgEAvtrVertLandingMode":
        """The mode to define the heading during the landing."""
        return self._intf.get_property(IAgAvtrProcedureVerticalLanding._metadata, IAgAvtrProcedureVerticalLanding._get_HeadingMode_metadata)

    _set_HeadingMode_metadata = { "name" : "HeadingMode",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrVertLandingMode),) }
    @HeadingMode.setter
    def HeadingMode(self, newVal:"AgEAvtrVertLandingMode") -> None:
        """The mode to define the heading during the landing."""
        return self._intf.set_property(IAgAvtrProcedureVerticalLanding._metadata, IAgAvtrProcedureVerticalLanding._set_HeadingMode_metadata, newVal)

    _SetHeading_metadata = { "name" : "SetHeading",
            "arg_types" : (agcom.VARIANT, agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_arg, agmarshall.VARIANT_BOOL_arg,) }
    def SetHeading(self, heading:typing.Any, isMagnetic:bool) -> None:
        """Set the heading and heading reference."""
        return self._intf.invoke(IAgAvtrProcedureVerticalLanding._metadata, IAgAvtrProcedureVerticalLanding._SetHeading_metadata, heading, isMagnetic)

    _get_Heading_metadata = { "name" : "Heading",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def Heading(self) -> typing.Any:
        """The heading for the procedure."""
        return self._intf.get_property(IAgAvtrProcedureVerticalLanding._metadata, IAgAvtrProcedureVerticalLanding._get_Heading_metadata)

    _get_UseMagneticHeading_metadata = { "name" : "UseMagneticHeading",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def UseMagneticHeading(self) -> bool:
        """The option to use a magnetic heading."""
        return self._intf.get_property(IAgAvtrProcedureVerticalLanding._metadata, IAgAvtrProcedureVerticalLanding._get_UseMagneticHeading_metadata)

    _get_RadiusFactor_metadata = { "name" : "RadiusFactor",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def RadiusFactor(self) -> float:
        """The radius factor for turns performed while translating to the hover point."""
        return self._intf.get_property(IAgAvtrProcedureVerticalLanding._metadata, IAgAvtrProcedureVerticalLanding._get_RadiusFactor_metadata)

    _set_RadiusFactor_metadata = { "name" : "RadiusFactor",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @RadiusFactor.setter
    def RadiusFactor(self, newVal:float) -> None:
        """The radius factor for turns performed while translating to the hover point."""
        return self._intf.set_property(IAgAvtrProcedureVerticalLanding._metadata, IAgAvtrProcedureVerticalLanding._set_RadiusFactor_metadata, newVal)

    _GetAsProcedure_metadata = { "name" : "GetAsProcedure",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    def GetAsProcedure(self) -> "IAgAvtrProcedure":
        """Get the procedure interface."""
        return self._intf.invoke(IAgAvtrProcedureVerticalLanding._metadata, IAgAvtrProcedureVerticalLanding._GetAsProcedure_metadata, out_arg())


agcls.AgClassCatalog.add_catalog_entry("{22009a25-626b-4677-aac4-668cc62a6d9f}", IAgAvtrProcedureVerticalLanding)
agcls.AgTypeNameMap["IAgAvtrProcedureVerticalLanding"] = IAgAvtrProcedureVerticalLanding

class IAgAvtrProcedureReferenceState(object):
    """Interface used to access the options for a reference state procedure."""
    _num_methods = 21
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{729bb865-8651-4e35-beac-db80804116bb}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_StartTime" : 1,
                             "set_StartTime" : 2,
                             "GetAsProcedure" : 3,
                             "get_Latitude" : 4,
                             "set_Latitude" : 5,
                             "get_Longitude" : 6,
                             "set_Longitude" : 7,
                             "get_UseDefaultCruiseAltitude" : 8,
                             "set_UseDefaultCruiseAltitude" : 9,
                             "get_MSLAltitude" : 10,
                             "set_MSLAltitude" : 11,
                             "get_PerformanceMode" : 12,
                             "set_PerformanceMode" : 13,
                             "get_ReferenceFrame" : 14,
                             "set_ReferenceFrame" : 15,
                             "get_FuelFlow" : 16,
                             "set_FuelFlow" : 17,
                             "get_ModeAsForwardFlight" : 18,
                             "get_ModeAsTakeoffLanding" : 19,
                             "get_ModeAsHover" : 20,
                             "get_ModeAsWeightOnWheels" : 21, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrProcedureReferenceState._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrProcedureReferenceState from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrProcedureReferenceState.__dict__ and type(IAgAvtrProcedureReferenceState.__dict__[attrname]) == property:
            return IAgAvtrProcedureReferenceState.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrProcedureReferenceState.")
    
    _get_StartTime_metadata = { "name" : "StartTime",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def StartTime(self) -> typing.Any:
        """The start time of the reference state."""
        return self._intf.get_property(IAgAvtrProcedureReferenceState._metadata, IAgAvtrProcedureReferenceState._get_StartTime_metadata)

    _set_StartTime_metadata = { "name" : "StartTime",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @StartTime.setter
    def StartTime(self, newVal:typing.Any) -> None:
        """The start time of the reference state."""
        return self._intf.set_property(IAgAvtrProcedureReferenceState._metadata, IAgAvtrProcedureReferenceState._set_StartTime_metadata, newVal)

    _GetAsProcedure_metadata = { "name" : "GetAsProcedure",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    def GetAsProcedure(self) -> "IAgAvtrProcedure":
        """Get the procedure interface."""
        return self._intf.invoke(IAgAvtrProcedureReferenceState._metadata, IAgAvtrProcedureReferenceState._GetAsProcedure_metadata, out_arg())

    _get_Latitude_metadata = { "name" : "Latitude",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def Latitude(self) -> typing.Any:
        """The waypoint latitude."""
        return self._intf.get_property(IAgAvtrProcedureReferenceState._metadata, IAgAvtrProcedureReferenceState._get_Latitude_metadata)

    _set_Latitude_metadata = { "name" : "Latitude",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @Latitude.setter
    def Latitude(self, newVal:typing.Any) -> None:
        """The waypoint latitude."""
        return self._intf.set_property(IAgAvtrProcedureReferenceState._metadata, IAgAvtrProcedureReferenceState._set_Latitude_metadata, newVal)

    _get_Longitude_metadata = { "name" : "Longitude",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def Longitude(self) -> typing.Any:
        """The waypoint longitude."""
        return self._intf.get_property(IAgAvtrProcedureReferenceState._metadata, IAgAvtrProcedureReferenceState._get_Longitude_metadata)

    _set_Longitude_metadata = { "name" : "Longitude",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @Longitude.setter
    def Longitude(self, newVal:typing.Any) -> None:
        """The waypoint longitude."""
        return self._intf.set_property(IAgAvtrProcedureReferenceState._metadata, IAgAvtrProcedureReferenceState._set_Longitude_metadata, newVal)

    _get_UseDefaultCruiseAltitude_metadata = { "name" : "UseDefaultCruiseAltitude",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def UseDefaultCruiseAltitude(self) -> bool:
        """Opt whether to use the default cruise altitude."""
        return self._intf.get_property(IAgAvtrProcedureReferenceState._metadata, IAgAvtrProcedureReferenceState._get_UseDefaultCruiseAltitude_metadata)

    _set_UseDefaultCruiseAltitude_metadata = { "name" : "UseDefaultCruiseAltitude",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @UseDefaultCruiseAltitude.setter
    def UseDefaultCruiseAltitude(self, newVal:bool) -> None:
        """Opt whether to use the default cruise altitude."""
        return self._intf.set_property(IAgAvtrProcedureReferenceState._metadata, IAgAvtrProcedureReferenceState._set_UseDefaultCruiseAltitude_metadata, newVal)

    _get_MSLAltitude_metadata = { "name" : "MSLAltitude",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def MSLAltitude(self) -> float:
        """The MSL altitude. Can only be used when the option to use the default cruise altitude is off."""
        return self._intf.get_property(IAgAvtrProcedureReferenceState._metadata, IAgAvtrProcedureReferenceState._get_MSLAltitude_metadata)

    _set_MSLAltitude_metadata = { "name" : "MSLAltitude",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @MSLAltitude.setter
    def MSLAltitude(self, newVal:float) -> None:
        """Set the MSLAltitude"""
        return self._intf.set_property(IAgAvtrProcedureReferenceState._metadata, IAgAvtrProcedureReferenceState._set_MSLAltitude_metadata, newVal)

    _get_PerformanceMode_metadata = { "name" : "PerformanceMode",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrRefStatePerfMode),) }
    @property
    def PerformanceMode(self) -> "AgEAvtrRefStatePerfMode":
        """The type of motion the aircraft is engaged in."""
        return self._intf.get_property(IAgAvtrProcedureReferenceState._metadata, IAgAvtrProcedureReferenceState._get_PerformanceMode_metadata)

    _set_PerformanceMode_metadata = { "name" : "PerformanceMode",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrRefStatePerfMode),) }
    @PerformanceMode.setter
    def PerformanceMode(self, newVal:"AgEAvtrRefStatePerfMode") -> None:
        """The type of motion the aircraft is engaged in."""
        return self._intf.set_property(IAgAvtrProcedureReferenceState._metadata, IAgAvtrProcedureReferenceState._set_PerformanceMode_metadata, newVal)

    _get_ReferenceFrame_metadata = { "name" : "ReferenceFrame",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrBasicManeuverRefFrame),) }
    @property
    def ReferenceFrame(self) -> "AgEAvtrBasicManeuverRefFrame":
        """The reference frame the aircraft will use."""
        return self._intf.get_property(IAgAvtrProcedureReferenceState._metadata, IAgAvtrProcedureReferenceState._get_ReferenceFrame_metadata)

    _set_ReferenceFrame_metadata = { "name" : "ReferenceFrame",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrBasicManeuverRefFrame),) }
    @ReferenceFrame.setter
    def ReferenceFrame(self, newVal:"AgEAvtrBasicManeuverRefFrame") -> None:
        """The reference frame the aircraft will use."""
        return self._intf.set_property(IAgAvtrProcedureReferenceState._metadata, IAgAvtrProcedureReferenceState._set_ReferenceFrame_metadata, newVal)

    _get_FuelFlow_metadata = { "name" : "FuelFlow",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def FuelFlow(self) -> float:
        """The rate of fuel consumption."""
        return self._intf.get_property(IAgAvtrProcedureReferenceState._metadata, IAgAvtrProcedureReferenceState._get_FuelFlow_metadata)

    _set_FuelFlow_metadata = { "name" : "FuelFlow",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @FuelFlow.setter
    def FuelFlow(self, newVal:float) -> None:
        """The rate of fuel consumption."""
        return self._intf.set_property(IAgAvtrProcedureReferenceState._metadata, IAgAvtrProcedureReferenceState._set_FuelFlow_metadata, newVal)

    _get_ModeAsForwardFlight_metadata = { "name" : "ModeAsForwardFlight",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def ModeAsForwardFlight(self) -> "IAgAvtrRefStateForwardFlightOptions":
        """Get the forward flight options."""
        return self._intf.get_property(IAgAvtrProcedureReferenceState._metadata, IAgAvtrProcedureReferenceState._get_ModeAsForwardFlight_metadata)

    _get_ModeAsTakeoffLanding_metadata = { "name" : "ModeAsTakeoffLanding",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def ModeAsTakeoffLanding(self) -> "IAgAvtrRefStateTakeoffLandingOptions":
        """Get the takeoff and landing options."""
        return self._intf.get_property(IAgAvtrProcedureReferenceState._metadata, IAgAvtrProcedureReferenceState._get_ModeAsTakeoffLanding_metadata)

    _get_ModeAsHover_metadata = { "name" : "ModeAsHover",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def ModeAsHover(self) -> "IAgAvtrRefStateHoverOptions":
        """Get the hover options."""
        return self._intf.get_property(IAgAvtrProcedureReferenceState._metadata, IAgAvtrProcedureReferenceState._get_ModeAsHover_metadata)

    _get_ModeAsWeightOnWheels_metadata = { "name" : "ModeAsWeightOnWheels",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def ModeAsWeightOnWheels(self) -> "IAgAvtrRefStateWeightOnWheelsOptions":
        """Get the weight on wheels options."""
        return self._intf.get_property(IAgAvtrProcedureReferenceState._metadata, IAgAvtrProcedureReferenceState._get_ModeAsWeightOnWheels_metadata)


agcls.AgClassCatalog.add_catalog_entry("{729bb865-8651-4e35-beac-db80804116bb}", IAgAvtrProcedureReferenceState)
agcls.AgTypeNameMap["IAgAvtrProcedureReferenceState"] = IAgAvtrProcedureReferenceState

class IAgAvtrProcedureSuperProcedure(object):
    """Interface used to access the options for a super procedure."""
    _num_methods = 3
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{47fee7c5-8e6d-4510-b70d-6d234b4db640}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "GetAsProcedure" : 1,
                             "LoadProceduresFromClipboard" : 2,
                             "LoadProceduresFromFile" : 3, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrProcedureSuperProcedure._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrProcedureSuperProcedure from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrProcedureSuperProcedure.__dict__ and type(IAgAvtrProcedureSuperProcedure.__dict__[attrname]) == property:
            return IAgAvtrProcedureSuperProcedure.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrProcedureSuperProcedure.")
    
    _GetAsProcedure_metadata = { "name" : "GetAsProcedure",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    def GetAsProcedure(self) -> "IAgAvtrProcedure":
        """Get the procedure interface."""
        return self._intf.invoke(IAgAvtrProcedureSuperProcedure._metadata, IAgAvtrProcedureSuperProcedure._GetAsProcedure_metadata, out_arg())

    _LoadProceduresFromClipboard_metadata = { "name" : "LoadProceduresFromClipboard",
            "arg_types" : (),
            "marshallers" : () }
    def LoadProceduresFromClipboard(self) -> None:
        """Load procedures from the clipboard."""
        return self._intf.invoke(IAgAvtrProcedureSuperProcedure._metadata, IAgAvtrProcedureSuperProcedure._LoadProceduresFromClipboard_metadata, )

    _LoadProceduresFromFile_metadata = { "name" : "LoadProceduresFromFile",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    def LoadProceduresFromFile(self, filepath:str) -> None:
        """Load procedures from a file."""
        return self._intf.invoke(IAgAvtrProcedureSuperProcedure._metadata, IAgAvtrProcedureSuperProcedure._LoadProceduresFromFile_metadata, filepath)


agcls.AgClassCatalog.add_catalog_entry("{47fee7c5-8e6d-4510-b70d-6d234b4db640}", IAgAvtrProcedureSuperProcedure)
agcls.AgTypeNameMap["IAgAvtrProcedureSuperProcedure"] = IAgAvtrProcedureSuperProcedure

class IAgAvtrProcedureLaunch(object):
    """Interface used to access the options for a launch procedure."""
    _num_methods = 22
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{f74d4c55-51c8-4559-ad0f-3236b5764f12}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_LaunchTime" : 1,
                             "set_LaunchTime" : 2,
                             "get_PositionPointName" : 3,
                             "set_PositionPointName" : 4,
                             "get_DirectionVecName" : 5,
                             "set_DirectionVecName" : 6,
                             "get_AttitudeMode" : 7,
                             "set_AttitudeMode" : 8,
                             "get_SpecifyLaunchAirspeed" : 9,
                             "set_SpecifyLaunchAirspeed" : 10,
                             "get_AccelG" : 11,
                             "set_AccelG" : 12,
                             "get_AirspeedType" : 13,
                             "get_Airspeed" : 14,
                             "SetAirspeed" : 15,
                             "get_FuelFlowType" : 16,
                             "set_FuelFlowType" : 17,
                             "get_OverrideFuelFlow" : 18,
                             "set_OverrideFuelFlow" : 19,
                             "GetAsProcedure" : 20,
                             "get_TrueCourseHint" : 21,
                             "set_TrueCourseHint" : 22, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrProcedureLaunch._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrProcedureLaunch from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrProcedureLaunch.__dict__ and type(IAgAvtrProcedureLaunch.__dict__[attrname]) == property:
            return IAgAvtrProcedureLaunch.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrProcedureLaunch.")
    
    _get_LaunchTime_metadata = { "name" : "LaunchTime",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def LaunchTime(self) -> typing.Any:
        """The launch time of the aircraft."""
        return self._intf.get_property(IAgAvtrProcedureLaunch._metadata, IAgAvtrProcedureLaunch._get_LaunchTime_metadata)

    _set_LaunchTime_metadata = { "name" : "LaunchTime",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @LaunchTime.setter
    def LaunchTime(self, newVal:typing.Any) -> None:
        """The launch time of the aircraft."""
        return self._intf.set_property(IAgAvtrProcedureLaunch._metadata, IAgAvtrProcedureLaunch._set_LaunchTime_metadata, newVal)

    _get_PositionPointName_metadata = { "name" : "PositionPointName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def PositionPointName(self) -> str:
        """The name of the point used for the launch position."""
        return self._intf.get_property(IAgAvtrProcedureLaunch._metadata, IAgAvtrProcedureLaunch._get_PositionPointName_metadata)

    _set_PositionPointName_metadata = { "name" : "PositionPointName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @PositionPointName.setter
    def PositionPointName(self, pVal:str) -> None:
        """The name of the point used for the launch position."""
        return self._intf.set_property(IAgAvtrProcedureLaunch._metadata, IAgAvtrProcedureLaunch._set_PositionPointName_metadata, pVal)

    _get_DirectionVecName_metadata = { "name" : "DirectionVecName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def DirectionVecName(self) -> str:
        """The name of the vector used for the launch direction."""
        return self._intf.get_property(IAgAvtrProcedureLaunch._metadata, IAgAvtrProcedureLaunch._get_DirectionVecName_metadata)

    _set_DirectionVecName_metadata = { "name" : "DirectionVecName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @DirectionVecName.setter
    def DirectionVecName(self, pVal:str) -> None:
        """The name of the vector used for the launch direction."""
        return self._intf.set_property(IAgAvtrProcedureLaunch._metadata, IAgAvtrProcedureLaunch._set_DirectionVecName_metadata, pVal)

    _get_AttitudeMode_metadata = { "name" : "AttitudeMode",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrLaunchAttitudeMode),) }
    @property
    def AttitudeMode(self) -> "AgEAvtrLaunchAttitudeMode":
        """The attitude mode during the launch."""
        return self._intf.get_property(IAgAvtrProcedureLaunch._metadata, IAgAvtrProcedureLaunch._get_AttitudeMode_metadata)

    _set_AttitudeMode_metadata = { "name" : "AttitudeMode",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrLaunchAttitudeMode),) }
    @AttitudeMode.setter
    def AttitudeMode(self, newVal:"AgEAvtrLaunchAttitudeMode") -> None:
        """The attitude mode during the launch."""
        return self._intf.set_property(IAgAvtrProcedureLaunch._metadata, IAgAvtrProcedureLaunch._set_AttitudeMode_metadata, newVal)

    _get_SpecifyLaunchAirspeed_metadata = { "name" : "SpecifyLaunchAirspeed",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def SpecifyLaunchAirspeed(self) -> bool:
        """Opt to specify a minimum launch speed the aircraft will accelerate to."""
        return self._intf.get_property(IAgAvtrProcedureLaunch._metadata, IAgAvtrProcedureLaunch._get_SpecifyLaunchAirspeed_metadata)

    _set_SpecifyLaunchAirspeed_metadata = { "name" : "SpecifyLaunchAirspeed",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @SpecifyLaunchAirspeed.setter
    def SpecifyLaunchAirspeed(self, newVal:bool) -> None:
        """Opt to specify a minimum launch speed the aircraft will accelerate to."""
        return self._intf.set_property(IAgAvtrProcedureLaunch._metadata, IAgAvtrProcedureLaunch._set_SpecifyLaunchAirspeed_metadata, newVal)

    _get_AccelG_metadata = { "name" : "AccelG",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def AccelG(self) -> float:
        """The acceleration of the aircraft during the launch."""
        return self._intf.get_property(IAgAvtrProcedureLaunch._metadata, IAgAvtrProcedureLaunch._get_AccelG_metadata)

    _set_AccelG_metadata = { "name" : "AccelG",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @AccelG.setter
    def AccelG(self, newVal:float) -> None:
        """The acceleration of the aircraft during the launch."""
        return self._intf.set_property(IAgAvtrProcedureLaunch._metadata, IAgAvtrProcedureLaunch._set_AccelG_metadata, newVal)

    _get_AirspeedType_metadata = { "name" : "AirspeedType",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrAirspeedType),) }
    @property
    def AirspeedType(self) -> "AgEAvtrAirspeedType":
        """The airspeed type."""
        return self._intf.get_property(IAgAvtrProcedureLaunch._metadata, IAgAvtrProcedureLaunch._get_AirspeedType_metadata)

    _get_Airspeed_metadata = { "name" : "Airspeed",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def Airspeed(self) -> float:
        """The goal airspeed for the launch."""
        return self._intf.get_property(IAgAvtrProcedureLaunch._metadata, IAgAvtrProcedureLaunch._get_Airspeed_metadata)

    _SetAirspeed_metadata = { "name" : "SetAirspeed",
            "arg_types" : (agcom.LONG, agcom.DOUBLE,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrAirspeedType), agmarshall.DOUBLE_arg,) }
    def SetAirspeed(self, airspeedType:"AgEAvtrAirspeedType", airspeed:float) -> None:
        """Set the launch airspeed."""
        return self._intf.invoke(IAgAvtrProcedureLaunch._metadata, IAgAvtrProcedureLaunch._SetAirspeed_metadata, airspeedType, airspeed)

    _get_FuelFlowType_metadata = { "name" : "FuelFlowType",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrFuelFlowType),) }
    @property
    def FuelFlowType(self) -> "AgEAvtrFuelFlowType":
        """The fuel flow type of the aircraft during the launch."""
        return self._intf.get_property(IAgAvtrProcedureLaunch._metadata, IAgAvtrProcedureLaunch._get_FuelFlowType_metadata)

    _set_FuelFlowType_metadata = { "name" : "FuelFlowType",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrFuelFlowType),) }
    @FuelFlowType.setter
    def FuelFlowType(self, newVal:"AgEAvtrFuelFlowType") -> None:
        """The fuel flow type of the aircraft during the launch."""
        return self._intf.set_property(IAgAvtrProcedureLaunch._metadata, IAgAvtrProcedureLaunch._set_FuelFlowType_metadata, newVal)

    _get_OverrideFuelFlow_metadata = { "name" : "OverrideFuelFlow",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def OverrideFuelFlow(self) -> float:
        """The fuel flow value for a fuel flow type set to Override."""
        return self._intf.get_property(IAgAvtrProcedureLaunch._metadata, IAgAvtrProcedureLaunch._get_OverrideFuelFlow_metadata)

    _set_OverrideFuelFlow_metadata = { "name" : "OverrideFuelFlow",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @OverrideFuelFlow.setter
    def OverrideFuelFlow(self, newVal:float) -> None:
        """The fuel flow value for a fuel flow type set to Override."""
        return self._intf.set_property(IAgAvtrProcedureLaunch._metadata, IAgAvtrProcedureLaunch._set_OverrideFuelFlow_metadata, newVal)

    _GetAsProcedure_metadata = { "name" : "GetAsProcedure",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    def GetAsProcedure(self) -> "IAgAvtrProcedure":
        """Get the procedure interface."""
        return self._intf.invoke(IAgAvtrProcedureLaunch._metadata, IAgAvtrProcedureLaunch._GetAsProcedure_metadata, out_arg())

    _get_TrueCourseHint_metadata = { "name" : "TrueCourseHint",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def TrueCourseHint(self) -> typing.Any:
        """The true course used when the vehicle's direction vector is set to Zenith."""
        return self._intf.get_property(IAgAvtrProcedureLaunch._metadata, IAgAvtrProcedureLaunch._get_TrueCourseHint_metadata)

    _set_TrueCourseHint_metadata = { "name" : "TrueCourseHint",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @TrueCourseHint.setter
    def TrueCourseHint(self, newVal:typing.Any) -> None:
        """The true course used when the vehicle's direction vector is set to Zenith."""
        return self._intf.set_property(IAgAvtrProcedureLaunch._metadata, IAgAvtrProcedureLaunch._set_TrueCourseHint_metadata, newVal)


agcls.AgClassCatalog.add_catalog_entry("{f74d4c55-51c8-4559-ad0f-3236b5764f12}", IAgAvtrProcedureLaunch)
agcls.AgTypeNameMap["IAgAvtrProcedureLaunch"] = IAgAvtrProcedureLaunch

class IAgAvtrProcedureAirway(object):
    """Interface used to access the options for an Airway procedure."""
    _num_methods = 18
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{49483b87-39de-46f6-b61b-633ada0c7970}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "GetAsProcedure" : 1,
                             "get_AltitudeOptions" : 2,
                             "get_EnrouteOptions" : 3,
                             "get_EnrouteCruiseAirspeedOptions" : 4,
                             "get_Router" : 5,
                             "set_Router" : 6,
                             "get_AirwayID" : 7,
                             "set_AirwayID" : 8,
                             "GetAirwayNames" : 9,
                             "get_Sequence" : 10,
                             "set_Sequence" : 11,
                             "GetSequences" : 12,
                             "get_EntryID" : 13,
                             "set_EntryID" : 14,
                             "get_ExitID" : 15,
                             "set_ExitID" : 16,
                             "GetWaypoints" : 17,
                             "CopyProcedures" : 18, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrProcedureAirway._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrProcedureAirway from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrProcedureAirway.__dict__ and type(IAgAvtrProcedureAirway.__dict__[attrname]) == property:
            return IAgAvtrProcedureAirway.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrProcedureAirway.")
    
    _GetAsProcedure_metadata = { "name" : "GetAsProcedure",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    def GetAsProcedure(self) -> "IAgAvtrProcedure":
        """Get the procedure interface."""
        return self._intf.invoke(IAgAvtrProcedureAirway._metadata, IAgAvtrProcedureAirway._GetAsProcedure_metadata, out_arg())

    _get_AltitudeOptions_metadata = { "name" : "AltitudeOptions",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def AltitudeOptions(self) -> "IAgAvtrAltitudeMSLOptions":
        """Get the altitude options."""
        return self._intf.get_property(IAgAvtrProcedureAirway._metadata, IAgAvtrProcedureAirway._get_AltitudeOptions_metadata)

    _get_EnrouteOptions_metadata = { "name" : "EnrouteOptions",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def EnrouteOptions(self) -> "IAgAvtrEnrouteOptions":
        """Get the enroute options."""
        return self._intf.get_property(IAgAvtrProcedureAirway._metadata, IAgAvtrProcedureAirway._get_EnrouteOptions_metadata)

    _get_EnrouteCruiseAirspeedOptions_metadata = { "name" : "EnrouteCruiseAirspeedOptions",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def EnrouteCruiseAirspeedOptions(self) -> "IAgAvtrCruiseAirspeedOptions":
        """Get the enroute cruise airspeed options."""
        return self._intf.get_property(IAgAvtrProcedureAirway._metadata, IAgAvtrProcedureAirway._get_EnrouteCruiseAirspeedOptions_metadata)

    _get_Router_metadata = { "name" : "Router",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def Router(self) -> str:
        """The router used to provide available airways."""
        return self._intf.get_property(IAgAvtrProcedureAirway._metadata, IAgAvtrProcedureAirway._get_Router_metadata)

    _set_Router_metadata = { "name" : "Router",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @Router.setter
    def Router(self, newVal:str) -> None:
        """The router used to provide available airways."""
        return self._intf.set_property(IAgAvtrProcedureAirway._metadata, IAgAvtrProcedureAirway._set_Router_metadata, newVal)

    _get_AirwayID_metadata = { "name" : "AirwayID",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def AirwayID(self) -> str:
        """The airway ID."""
        return self._intf.get_property(IAgAvtrProcedureAirway._metadata, IAgAvtrProcedureAirway._get_AirwayID_metadata)

    _set_AirwayID_metadata = { "name" : "AirwayID",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @AirwayID.setter
    def AirwayID(self, newVal:str) -> None:
        """The airway ID."""
        return self._intf.set_property(IAgAvtrProcedureAirway._metadata, IAgAvtrProcedureAirway._set_AirwayID_metadata, newVal)

    _GetAirwayNames_metadata = { "name" : "GetAirwayNames",
            "arg_types" : (POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg,) }
    def GetAirwayNames(self) -> list:
        """Get the a list of names of the available airways."""
        return self._intf.invoke(IAgAvtrProcedureAirway._metadata, IAgAvtrProcedureAirway._GetAirwayNames_metadata, out_arg())

    _get_Sequence_metadata = { "name" : "Sequence",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def Sequence(self) -> str:
        """The direction the aircraft will fly the route."""
        return self._intf.get_property(IAgAvtrProcedureAirway._metadata, IAgAvtrProcedureAirway._get_Sequence_metadata)

    _set_Sequence_metadata = { "name" : "Sequence",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @Sequence.setter
    def Sequence(self, newVal:str) -> None:
        """The direction the aircraft will fly the route."""
        return self._intf.set_property(IAgAvtrProcedureAirway._metadata, IAgAvtrProcedureAirway._set_Sequence_metadata, newVal)

    _GetSequences_metadata = { "name" : "GetSequences",
            "arg_types" : (POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg,) }
    def GetSequences(self) -> list:
        """Get a list of sequence options."""
        return self._intf.invoke(IAgAvtrProcedureAirway._metadata, IAgAvtrProcedureAirway._GetSequences_metadata, out_arg())

    _get_EntryID_metadata = { "name" : "EntryID",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def EntryID(self) -> str:
        """The ID of the entry waypoint."""
        return self._intf.get_property(IAgAvtrProcedureAirway._metadata, IAgAvtrProcedureAirway._get_EntryID_metadata)

    _set_EntryID_metadata = { "name" : "EntryID",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @EntryID.setter
    def EntryID(self, newVal:str) -> None:
        """The ID of the entry waypoint."""
        return self._intf.set_property(IAgAvtrProcedureAirway._metadata, IAgAvtrProcedureAirway._set_EntryID_metadata, newVal)

    _get_ExitID_metadata = { "name" : "ExitID",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def ExitID(self) -> str:
        """The ID of the exit waypoint."""
        return self._intf.get_property(IAgAvtrProcedureAirway._metadata, IAgAvtrProcedureAirway._get_ExitID_metadata)

    _set_ExitID_metadata = { "name" : "ExitID",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @ExitID.setter
    def ExitID(self, newVal:str) -> None:
        """The ID of the exit waypoint."""
        return self._intf.set_property(IAgAvtrProcedureAirway._metadata, IAgAvtrProcedureAirway._set_ExitID_metadata, newVal)

    _GetWaypoints_metadata = { "name" : "GetWaypoints",
            "arg_types" : (POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg,) }
    def GetWaypoints(self) -> list:
        """Get a list of available waypoints for the airway."""
        return self._intf.invoke(IAgAvtrProcedureAirway._metadata, IAgAvtrProcedureAirway._GetWaypoints_metadata, out_arg())

    _CopyProcedures_metadata = { "name" : "CopyProcedures",
            "arg_types" : (),
            "marshallers" : () }
    def CopyProcedures(self) -> None:
        """Copy the airway route as a set of procedures to the clipboard."""
        return self._intf.invoke(IAgAvtrProcedureAirway._metadata, IAgAvtrProcedureAirway._CopyProcedures_metadata, )


agcls.AgClassCatalog.add_catalog_entry("{49483b87-39de-46f6-b61b-633ada0c7970}", IAgAvtrProcedureAirway)
agcls.AgTypeNameMap["IAgAvtrProcedureAirway"] = IAgAvtrProcedureAirway

class IAgAvtrProcedureAirwayRouter(object):
    """Interface used to access the options for an Airway Router procedure."""
    _num_methods = 19
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{5f3240be-4a51-4580-976b-f8ca68855608}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "GetAsProcedure" : 1,
                             "get_AltitudeOptions" : 2,
                             "get_EnrouteOptions" : 3,
                             "get_EnrouteCruiseAirspeedOptions" : 4,
                             "get_Router" : 5,
                             "get_OptimizeForWind" : 6,
                             "set_OptimizeForWind" : 7,
                             "get_BoundingBoxPad" : 8,
                             "set_BoundingBoxPad" : 9,
                             "get_MaxWaypointRange" : 10,
                             "set_MaxWaypointRange" : 11,
                             "get_EntryExitAndOr" : 12,
                             "set_EntryExitAndOr" : 13,
                             "get_MaxWaypointCount" : 14,
                             "set_MaxWaypointCount" : 15,
                             "UpdateRoute" : 16,
                             "GetWaypoints" : 17,
                             "GetSegments" : 18,
                             "CopyProcedures" : 19, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrProcedureAirwayRouter._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrProcedureAirwayRouter from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrProcedureAirwayRouter.__dict__ and type(IAgAvtrProcedureAirwayRouter.__dict__[attrname]) == property:
            return IAgAvtrProcedureAirwayRouter.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrProcedureAirwayRouter.")
    
    _GetAsProcedure_metadata = { "name" : "GetAsProcedure",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    def GetAsProcedure(self) -> "IAgAvtrProcedure":
        """Get the procedure interface."""
        return self._intf.invoke(IAgAvtrProcedureAirwayRouter._metadata, IAgAvtrProcedureAirwayRouter._GetAsProcedure_metadata, out_arg())

    _get_AltitudeOptions_metadata = { "name" : "AltitudeOptions",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def AltitudeOptions(self) -> "IAgAvtrAltitudeMSLOptions":
        """Get the altitude options."""
        return self._intf.get_property(IAgAvtrProcedureAirwayRouter._metadata, IAgAvtrProcedureAirwayRouter._get_AltitudeOptions_metadata)

    _get_EnrouteOptions_metadata = { "name" : "EnrouteOptions",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def EnrouteOptions(self) -> "IAgAvtrEnrouteOptions":
        """Get the enroute options."""
        return self._intf.get_property(IAgAvtrProcedureAirwayRouter._metadata, IAgAvtrProcedureAirwayRouter._get_EnrouteOptions_metadata)

    _get_EnrouteCruiseAirspeedOptions_metadata = { "name" : "EnrouteCruiseAirspeedOptions",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def EnrouteCruiseAirspeedOptions(self) -> "IAgAvtrCruiseAirspeedOptions":
        """Get the enroute cruise airspeed options."""
        return self._intf.get_property(IAgAvtrProcedureAirwayRouter._metadata, IAgAvtrProcedureAirwayRouter._get_EnrouteCruiseAirspeedOptions_metadata)

    _get_Router_metadata = { "name" : "Router",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def Router(self) -> str:
        """The router used to provide available airways."""
        return self._intf.get_property(IAgAvtrProcedureAirwayRouter._metadata, IAgAvtrProcedureAirwayRouter._get_Router_metadata)

    _get_OptimizeForWind_metadata = { "name" : "OptimizeForWind",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def OptimizeForWind(self) -> bool:
        """Opt to account for the wind when calculating the most efficient route."""
        return self._intf.get_property(IAgAvtrProcedureAirwayRouter._metadata, IAgAvtrProcedureAirwayRouter._get_OptimizeForWind_metadata)

    _set_OptimizeForWind_metadata = { "name" : "OptimizeForWind",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @OptimizeForWind.setter
    def OptimizeForWind(self, newVal:bool) -> None:
        """Opt to account for the wind when calculating the most efficient route."""
        return self._intf.set_property(IAgAvtrProcedureAirwayRouter._metadata, IAgAvtrProcedureAirwayRouter._set_OptimizeForWind_metadata, newVal)

    _get_BoundingBoxPad_metadata = { "name" : "BoundingBoxPad",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def BoundingBoxPad(self) -> float:
        """The maximum distance beyond the bounding box that a waypoint will be considered for the final route."""
        return self._intf.get_property(IAgAvtrProcedureAirwayRouter._metadata, IAgAvtrProcedureAirwayRouter._get_BoundingBoxPad_metadata)

    _set_BoundingBoxPad_metadata = { "name" : "BoundingBoxPad",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @BoundingBoxPad.setter
    def BoundingBoxPad(self, newVal:float) -> None:
        """The maximum distance beyond the bounding box that a waypoint will be considered for the final route."""
        return self._intf.set_property(IAgAvtrProcedureAirwayRouter._metadata, IAgAvtrProcedureAirwayRouter._set_BoundingBoxPad_metadata, newVal)

    _get_MaxWaypointRange_metadata = { "name" : "MaxWaypointRange",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def MaxWaypointRange(self) -> float:
        """The maximum distance from the end of the previous procedure that an airway waypoint will be considered."""
        return self._intf.get_property(IAgAvtrProcedureAirwayRouter._metadata, IAgAvtrProcedureAirwayRouter._get_MaxWaypointRange_metadata)

    _set_MaxWaypointRange_metadata = { "name" : "MaxWaypointRange",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @MaxWaypointRange.setter
    def MaxWaypointRange(self, newVal:float) -> None:
        """The maximum distance from the end of the previous procedure that an airway waypoint will be considered."""
        return self._intf.set_property(IAgAvtrProcedureAirwayRouter._metadata, IAgAvtrProcedureAirwayRouter._set_MaxWaypointRange_metadata, newVal)

    _get_EntryExitAndOr_metadata = { "name" : "EntryExitAndOr",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrAndOr),) }
    @property
    def EntryExitAndOr(self) -> "AgEAvtrAndOr":
        """Define how the two Entry/Exit Waypoint constraints will be considered."""
        return self._intf.get_property(IAgAvtrProcedureAirwayRouter._metadata, IAgAvtrProcedureAirwayRouter._get_EntryExitAndOr_metadata)

    _set_EntryExitAndOr_metadata = { "name" : "EntryExitAndOr",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrAndOr),) }
    @EntryExitAndOr.setter
    def EntryExitAndOr(self, newVal:"AgEAvtrAndOr") -> None:
        """Define how the two Entry/Exit Waypoint constraints will be considered."""
        return self._intf.set_property(IAgAvtrProcedureAirwayRouter._metadata, IAgAvtrProcedureAirwayRouter._set_EntryExitAndOr_metadata, newVal)

    _get_MaxWaypointCount_metadata = { "name" : "MaxWaypointCount",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.LONG_arg,) }
    @property
    def MaxWaypointCount(self) -> int:
        """The maximum number of airway waypoints that the procedure will consider for each segment."""
        return self._intf.get_property(IAgAvtrProcedureAirwayRouter._metadata, IAgAvtrProcedureAirwayRouter._get_MaxWaypointCount_metadata)

    _set_MaxWaypointCount_metadata = { "name" : "MaxWaypointCount",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.LONG_arg,) }
    @MaxWaypointCount.setter
    def MaxWaypointCount(self, newVal:int) -> None:
        """The maximum number of airway waypoints that the procedure will consider for each segment."""
        return self._intf.set_property(IAgAvtrProcedureAirwayRouter._metadata, IAgAvtrProcedureAirwayRouter._set_MaxWaypointCount_metadata, newVal)

    _UpdateRoute_metadata = { "name" : "UpdateRoute",
            "arg_types" : (),
            "marshallers" : () }
    def UpdateRoute(self) -> None:
        """Recalculate the route."""
        return self._intf.invoke(IAgAvtrProcedureAirwayRouter._metadata, IAgAvtrProcedureAirwayRouter._UpdateRoute_metadata, )

    _GetWaypoints_metadata = { "name" : "GetWaypoints",
            "arg_types" : (POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg,) }
    def GetWaypoints(self) -> list:
        """Get a list of the current route's waypoints."""
        return self._intf.invoke(IAgAvtrProcedureAirwayRouter._metadata, IAgAvtrProcedureAirwayRouter._GetWaypoints_metadata, out_arg())

    _GetSegments_metadata = { "name" : "GetSegments",
            "arg_types" : (POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg,) }
    def GetSegments(self) -> list:
        """Get a list of the current route's individual procedures."""
        return self._intf.invoke(IAgAvtrProcedureAirwayRouter._metadata, IAgAvtrProcedureAirwayRouter._GetSegments_metadata, out_arg())

    _CopyProcedures_metadata = { "name" : "CopyProcedures",
            "arg_types" : (),
            "marshallers" : () }
    def CopyProcedures(self) -> None:
        """Copy the route as a set of procedures to the clipboard."""
        return self._intf.invoke(IAgAvtrProcedureAirwayRouter._metadata, IAgAvtrProcedureAirwayRouter._CopyProcedures_metadata, )


agcls.AgClassCatalog.add_catalog_entry("{5f3240be-4a51-4580-976b-f8ca68855608}", IAgAvtrProcedureAirwayRouter)
agcls.AgTypeNameMap["IAgAvtrProcedureAirwayRouter"] = IAgAvtrProcedureAirwayRouter

class IAgAvtrProcedureAreaTargetSearch(object):
    """Interface used to access the options for an Area Target Search procedure."""
    _num_methods = 21
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{ad0dc4ce-a6b1-499b-9a60-54dd5b6266ac}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "GetAsProcedure" : 1,
                             "get_AltitudeOptions" : 2,
                             "get_EnrouteOptions" : 3,
                             "get_EnrouteCruiseAirspeedOptions" : 4,
                             "get_ProcedureType" : 5,
                             "set_ProcedureType" : 6,
                             "get_MaxSeparation" : 7,
                             "set_MaxSeparation" : 8,
                             "get_CourseMode" : 9,
                             "set_CourseMode" : 10,
                             "get_FirstLegRetrograde" : 11,
                             "set_FirstLegRetrograde" : 12,
                             "get_CentroidTrueCourse" : 13,
                             "set_CentroidTrueCourse" : 14,
                             "get_FlyCruiseAirspeedProfile" : 15,
                             "set_FlyCruiseAirspeedProfile" : 16,
                             "get_MustLevelOff" : 17,
                             "set_MustLevelOff" : 18,
                             "get_LevelOffMode" : 19,
                             "set_LevelOffMode" : 20,
                             "CopyProcedures" : 21, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrProcedureAreaTargetSearch._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrProcedureAreaTargetSearch from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrProcedureAreaTargetSearch.__dict__ and type(IAgAvtrProcedureAreaTargetSearch.__dict__[attrname]) == property:
            return IAgAvtrProcedureAreaTargetSearch.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrProcedureAreaTargetSearch.")
    
    _GetAsProcedure_metadata = { "name" : "GetAsProcedure",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    def GetAsProcedure(self) -> "IAgAvtrProcedure":
        """Get the procedure interface."""
        return self._intf.invoke(IAgAvtrProcedureAreaTargetSearch._metadata, IAgAvtrProcedureAreaTargetSearch._GetAsProcedure_metadata, out_arg())

    _get_AltitudeOptions_metadata = { "name" : "AltitudeOptions",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def AltitudeOptions(self) -> "IAgAvtrAltitudeOptions":
        """Get the altitude options."""
        return self._intf.get_property(IAgAvtrProcedureAreaTargetSearch._metadata, IAgAvtrProcedureAreaTargetSearch._get_AltitudeOptions_metadata)

    _get_EnrouteOptions_metadata = { "name" : "EnrouteOptions",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def EnrouteOptions(self) -> "IAgAvtrEnrouteOptions":
        """Get the enroute options."""
        return self._intf.get_property(IAgAvtrProcedureAreaTargetSearch._metadata, IAgAvtrProcedureAreaTargetSearch._get_EnrouteOptions_metadata)

    _get_EnrouteCruiseAirspeedOptions_metadata = { "name" : "EnrouteCruiseAirspeedOptions",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def EnrouteCruiseAirspeedOptions(self) -> "IAgAvtrCruiseAirspeedOptions":
        """Get the enroute cruise airspeed options."""
        return self._intf.get_property(IAgAvtrProcedureAreaTargetSearch._metadata, IAgAvtrProcedureAreaTargetSearch._get_EnrouteCruiseAirspeedOptions_metadata)

    _get_ProcedureType_metadata = { "name" : "ProcedureType",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrFlightLineProcType),) }
    @property
    def ProcedureType(self) -> "AgEAvtrFlightLineProcType":
        """The procedure methodology used to calculate the flight line."""
        return self._intf.get_property(IAgAvtrProcedureAreaTargetSearch._metadata, IAgAvtrProcedureAreaTargetSearch._get_ProcedureType_metadata)

    _set_ProcedureType_metadata = { "name" : "ProcedureType",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrFlightLineProcType),) }
    @ProcedureType.setter
    def ProcedureType(self, newVal:"AgEAvtrFlightLineProcType") -> None:
        """The procedure methodology used to calculate the flight line."""
        return self._intf.set_property(IAgAvtrProcedureAreaTargetSearch._metadata, IAgAvtrProcedureAreaTargetSearch._set_ProcedureType_metadata, newVal)

    _get_MaxSeparation_metadata = { "name" : "MaxSeparation",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def MaxSeparation(self) -> float:
        """The maximum distance between the parallel flight lines of the search pattern."""
        return self._intf.get_property(IAgAvtrProcedureAreaTargetSearch._metadata, IAgAvtrProcedureAreaTargetSearch._get_MaxSeparation_metadata)

    _set_MaxSeparation_metadata = { "name" : "MaxSeparation",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @MaxSeparation.setter
    def MaxSeparation(self, newVal:float) -> None:
        """The maximum distance between the parallel flight lines of the search pattern."""
        return self._intf.set_property(IAgAvtrProcedureAreaTargetSearch._metadata, IAgAvtrProcedureAreaTargetSearch._set_MaxSeparation_metadata, newVal)

    _get_CourseMode_metadata = { "name" : "CourseMode",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrSearchPatternCourseMode),) }
    @property
    def CourseMode(self) -> "AgEAvtrSearchPatternCourseMode":
        """The mode to determine the course of the search pattern."""
        return self._intf.get_property(IAgAvtrProcedureAreaTargetSearch._metadata, IAgAvtrProcedureAreaTargetSearch._get_CourseMode_metadata)

    _set_CourseMode_metadata = { "name" : "CourseMode",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrSearchPatternCourseMode),) }
    @CourseMode.setter
    def CourseMode(self, newVal:"AgEAvtrSearchPatternCourseMode") -> None:
        """The mode to determine the course of the search pattern."""
        return self._intf.set_property(IAgAvtrProcedureAreaTargetSearch._metadata, IAgAvtrProcedureAreaTargetSearch._set_CourseMode_metadata, newVal)

    _get_FirstLegRetrograde_metadata = { "name" : "FirstLegRetrograde",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def FirstLegRetrograde(self) -> bool:
        """The option to fly the first leg of the search pattern on the reverse heading."""
        return self._intf.get_property(IAgAvtrProcedureAreaTargetSearch._metadata, IAgAvtrProcedureAreaTargetSearch._get_FirstLegRetrograde_metadata)

    _set_FirstLegRetrograde_metadata = { "name" : "FirstLegRetrograde",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @FirstLegRetrograde.setter
    def FirstLegRetrograde(self, newVal:bool) -> None:
        """The option to fly the first leg of the search pattern on the reverse heading."""
        return self._intf.set_property(IAgAvtrProcedureAreaTargetSearch._metadata, IAgAvtrProcedureAreaTargetSearch._set_FirstLegRetrograde_metadata, newVal)

    _get_CentroidTrueCourse_metadata = { "name" : "CentroidTrueCourse",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def CentroidTrueCourse(self) -> typing.Any:
        """The specific course of the search pattern."""
        return self._intf.get_property(IAgAvtrProcedureAreaTargetSearch._metadata, IAgAvtrProcedureAreaTargetSearch._get_CentroidTrueCourse_metadata)

    _set_CentroidTrueCourse_metadata = { "name" : "CentroidTrueCourse",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @CentroidTrueCourse.setter
    def CentroidTrueCourse(self, newVal:typing.Any) -> None:
        """The specific course of the search pattern."""
        return self._intf.set_property(IAgAvtrProcedureAreaTargetSearch._metadata, IAgAvtrProcedureAreaTargetSearch._set_CentroidTrueCourse_metadata, newVal)

    _get_FlyCruiseAirspeedProfile_metadata = { "name" : "FlyCruiseAirspeedProfile",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def FlyCruiseAirspeedProfile(self) -> bool:
        """Opt whether the aircraft immediately adopts the selected cruise airspeed or gradually begins accelerating/decelerating in the previous procedure."""
        return self._intf.get_property(IAgAvtrProcedureAreaTargetSearch._metadata, IAgAvtrProcedureAreaTargetSearch._get_FlyCruiseAirspeedProfile_metadata)

    _set_FlyCruiseAirspeedProfile_metadata = { "name" : "FlyCruiseAirspeedProfile",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @FlyCruiseAirspeedProfile.setter
    def FlyCruiseAirspeedProfile(self, pVal:bool) -> None:
        """Opt whether the aircraft immediately adopts the selected cruise airspeed or gradually begins accelerating/decelerating in the previous procedure."""
        return self._intf.set_property(IAgAvtrProcedureAreaTargetSearch._metadata, IAgAvtrProcedureAreaTargetSearch._set_FlyCruiseAirspeedProfile_metadata, pVal)

    _get_MustLevelOff_metadata = { "name" : "MustLevelOff",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def MustLevelOff(self) -> bool:
        """Opt whether the procedure must level off."""
        return self._intf.get_property(IAgAvtrProcedureAreaTargetSearch._metadata, IAgAvtrProcedureAreaTargetSearch._get_MustLevelOff_metadata)

    _set_MustLevelOff_metadata = { "name" : "MustLevelOff",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @MustLevelOff.setter
    def MustLevelOff(self, newVal:bool) -> None:
        """Opt whether the procedure must level off."""
        return self._intf.set_property(IAgAvtrProcedureAreaTargetSearch._metadata, IAgAvtrProcedureAreaTargetSearch._set_MustLevelOff_metadata, newVal)

    _get_LevelOffMode_metadata = { "name" : "LevelOffMode",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrAltitudeConstraintManeuverMode),) }
    @property
    def LevelOffMode(self) -> "AgEAvtrAltitudeConstraintManeuverMode":
        """The level off mode. This is only used when the must level off option is on."""
        return self._intf.get_property(IAgAvtrProcedureAreaTargetSearch._metadata, IAgAvtrProcedureAreaTargetSearch._get_LevelOffMode_metadata)

    _set_LevelOffMode_metadata = { "name" : "LevelOffMode",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrAltitudeConstraintManeuverMode),) }
    @LevelOffMode.setter
    def LevelOffMode(self, newVal:"AgEAvtrAltitudeConstraintManeuverMode") -> None:
        """The level off mode. This is only used when the must level off option is on."""
        return self._intf.set_property(IAgAvtrProcedureAreaTargetSearch._metadata, IAgAvtrProcedureAreaTargetSearch._set_LevelOffMode_metadata, newVal)

    _CopyProcedures_metadata = { "name" : "CopyProcedures",
            "arg_types" : (),
            "marshallers" : () }
    def CopyProcedures(self) -> None:
        """Copy the search pattern maneuvers as a set of procedures to the clipboard."""
        return self._intf.invoke(IAgAvtrProcedureAreaTargetSearch._metadata, IAgAvtrProcedureAreaTargetSearch._CopyProcedures_metadata, )


agcls.AgClassCatalog.add_catalog_entry("{ad0dc4ce-a6b1-499b-9a60-54dd5b6266ac}", IAgAvtrProcedureAreaTargetSearch)
agcls.AgTypeNameMap["IAgAvtrProcedureAreaTargetSearch"] = IAgAvtrProcedureAreaTargetSearch

class IAgAvtrProcedureFormationRecover(object):
    """Interface used to access the options for a Formation Recover procedure."""
    _num_methods = 38
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{d96375bc-d2b6-4397-81bc-35a923b5b883}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "GetAsProcedure" : 1,
                             "get_EnrouteOptions" : 2,
                             "get_DelayCruiseAirspeedOptions" : 3,
                             "GetMinimumTime" : 4,
                             "get_StartTime" : 5,
                             "set_StartTime" : 6,
                             "FindFirstValidStartTime" : 7,
                             "get_MaximumTime" : 8,
                             "get_FormationPoint" : 9,
                             "set_FormationPoint" : 10,
                             "get_InterpolatePointPosVel" : 11,
                             "set_InterpolatePointPosVel" : 12,
                             "get_AltitudeOffset" : 13,
                             "set_AltitudeOffset" : 14,
                             "get_FuelFlowType" : 15,
                             "set_FuelFlowType" : 16,
                             "get_OverrideFuelFlowValue" : 17,
                             "set_OverrideFuelFlowValue" : 18,
                             "get_ConsiderAccelForFuelFlow" : 19,
                             "set_ConsiderAccelForFuelFlow" : 20,
                             "get_FirstPause" : 21,
                             "set_FirstPause" : 22,
                             "get_TransitionTime" : 23,
                             "set_TransitionTime" : 24,
                             "get_SecondPause" : 25,
                             "set_SecondPause" : 26,
                             "get_DisplayStepTime" : 27,
                             "set_DisplayStepTime" : 28,
                             "get_FlightMode" : 29,
                             "set_FlightMode" : 30,
                             "get_FlightPathAngle" : 31,
                             "set_FlightPathAngle" : 32,
                             "get_RadiusFactor" : 33,
                             "set_RadiusFactor" : 34,
                             "get_UseDelay" : 35,
                             "set_UseDelay" : 36,
                             "get_DelayTurnDir" : 37,
                             "set_DelayTurnDir" : 38, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrProcedureFormationRecover._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrProcedureFormationRecover from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrProcedureFormationRecover.__dict__ and type(IAgAvtrProcedureFormationRecover.__dict__[attrname]) == property:
            return IAgAvtrProcedureFormationRecover.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrProcedureFormationRecover.")
    
    _GetAsProcedure_metadata = { "name" : "GetAsProcedure",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    def GetAsProcedure(self) -> "IAgAvtrProcedure":
        """Get the procedure interface."""
        return self._intf.invoke(IAgAvtrProcedureFormationRecover._metadata, IAgAvtrProcedureFormationRecover._GetAsProcedure_metadata, out_arg())

    _get_EnrouteOptions_metadata = { "name" : "EnrouteOptions",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def EnrouteOptions(self) -> "IAgAvtrEnrouteOptions":
        """Get the enroute options."""
        return self._intf.get_property(IAgAvtrProcedureFormationRecover._metadata, IAgAvtrProcedureFormationRecover._get_EnrouteOptions_metadata)

    _get_DelayCruiseAirspeedOptions_metadata = { "name" : "DelayCruiseAirspeedOptions",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def DelayCruiseAirspeedOptions(self) -> "IAgAvtrCruiseAirspeedOptions":
        """Get the delay cruise airspeed options."""
        return self._intf.get_property(IAgAvtrProcedureFormationRecover._metadata, IAgAvtrProcedureFormationRecover._get_DelayCruiseAirspeedOptions_metadata)

    _GetMinimumTime_metadata = { "name" : "GetMinimumTime",
            "arg_types" : (agcom.VARIANT_BOOL, POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg, agmarshall.VARIANT_arg,) }
    def GetMinimumTime(self, considerPrevProc:bool) -> typing.Any:
        """Get the minimum time at which formation might be possible. Opt whether to consider previous procedure(s) for the minimum time."""
        return self._intf.invoke(IAgAvtrProcedureFormationRecover._metadata, IAgAvtrProcedureFormationRecover._GetMinimumTime_metadata, considerPrevProc, out_arg())

    _get_StartTime_metadata = { "name" : "StartTime",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def StartTime(self) -> typing.Any:
        """The time at which the formation begins."""
        return self._intf.get_property(IAgAvtrProcedureFormationRecover._metadata, IAgAvtrProcedureFormationRecover._get_StartTime_metadata)

    _set_StartTime_metadata = { "name" : "StartTime",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @StartTime.setter
    def StartTime(self, newVal:typing.Any) -> None:
        """The time at which the formation begins."""
        return self._intf.set_property(IAgAvtrProcedureFormationRecover._metadata, IAgAvtrProcedureFormationRecover._set_StartTime_metadata, newVal)

    _FindFirstValidStartTime_metadata = { "name" : "FindFirstValidStartTime",
            "arg_types" : (agcom.VARIANT, agcom.VARIANT, agcom.DOUBLE, POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg, agmarshall.VARIANT_arg, agmarshall.DOUBLE_arg, agmarshall.VARIANT_arg,) }
    def FindFirstValidStartTime(self, minTime:typing.Any, maxTime:typing.Any, stepTime:float) -> typing.Any:
        """Have Aviator calculate the earliest valid formation time."""
        return self._intf.invoke(IAgAvtrProcedureFormationRecover._metadata, IAgAvtrProcedureFormationRecover._FindFirstValidStartTime_metadata, minTime, maxTime, stepTime, out_arg())

    _get_MaximumTime_metadata = { "name" : "MaximumTime",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def MaximumTime(self) -> typing.Any:
        """The maximum time at which formation might be possible."""
        return self._intf.get_property(IAgAvtrProcedureFormationRecover._metadata, IAgAvtrProcedureFormationRecover._get_MaximumTime_metadata)

    _get_FormationPoint_metadata = { "name" : "FormationPoint",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def FormationPoint(self) -> str:
        """The position that the aircraft will be locked onto while in formation."""
        return self._intf.get_property(IAgAvtrProcedureFormationRecover._metadata, IAgAvtrProcedureFormationRecover._get_FormationPoint_metadata)

    _set_FormationPoint_metadata = { "name" : "FormationPoint",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @FormationPoint.setter
    def FormationPoint(self, newVal:str) -> None:
        """The position that the aircraft will be locked onto while in formation."""
        return self._intf.set_property(IAgAvtrProcedureFormationRecover._metadata, IAgAvtrProcedureFormationRecover._set_FormationPoint_metadata, newVal)

    _get_InterpolatePointPosVel_metadata = { "name" : "InterpolatePointPosVel",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def InterpolatePointPosVel(self) -> bool:
        """The option to use interpolation to determine the formation point's speed and position."""
        return self._intf.get_property(IAgAvtrProcedureFormationRecover._metadata, IAgAvtrProcedureFormationRecover._get_InterpolatePointPosVel_metadata)

    _set_InterpolatePointPosVel_metadata = { "name" : "InterpolatePointPosVel",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @InterpolatePointPosVel.setter
    def InterpolatePointPosVel(self, newVal:bool) -> None:
        """The option to use interpolation to determine the formation point's speed and position."""
        return self._intf.set_property(IAgAvtrProcedureFormationRecover._metadata, IAgAvtrProcedureFormationRecover._set_InterpolatePointPosVel_metadata, newVal)

    _get_AltitudeOffset_metadata = { "name" : "AltitudeOffset",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def AltitudeOffset(self) -> float:
        """The altitude distance between the aircraft and the formation point during the first or second pause."""
        return self._intf.get_property(IAgAvtrProcedureFormationRecover._metadata, IAgAvtrProcedureFormationRecover._get_AltitudeOffset_metadata)

    _set_AltitudeOffset_metadata = { "name" : "AltitudeOffset",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @AltitudeOffset.setter
    def AltitudeOffset(self, newVal:float) -> None:
        """The altitude distance between the aircraft and the formation point during the first or second pause."""
        return self._intf.set_property(IAgAvtrProcedureFormationRecover._metadata, IAgAvtrProcedureFormationRecover._set_AltitudeOffset_metadata, newVal)

    _get_FuelFlowType_metadata = { "name" : "FuelFlowType",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrFuelFlowType),) }
    @property
    def FuelFlowType(self) -> "AgEAvtrFuelFlowType":
        """The source used to calculate the fuel flow for the maneuver."""
        return self._intf.get_property(IAgAvtrProcedureFormationRecover._metadata, IAgAvtrProcedureFormationRecover._get_FuelFlowType_metadata)

    _set_FuelFlowType_metadata = { "name" : "FuelFlowType",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrFuelFlowType),) }
    @FuelFlowType.setter
    def FuelFlowType(self, newVal:"AgEAvtrFuelFlowType") -> None:
        """The source used to calculate the fuel flow for the maneuver."""
        return self._intf.set_property(IAgAvtrProcedureFormationRecover._metadata, IAgAvtrProcedureFormationRecover._set_FuelFlowType_metadata, newVal)

    _get_OverrideFuelFlowValue_metadata = { "name" : "OverrideFuelFlowValue",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def OverrideFuelFlowValue(self) -> float:
        """The value used for the Override Fuel Flow type. The fuel flow type must be set to Override to access this value."""
        return self._intf.get_property(IAgAvtrProcedureFormationRecover._metadata, IAgAvtrProcedureFormationRecover._get_OverrideFuelFlowValue_metadata)

    _set_OverrideFuelFlowValue_metadata = { "name" : "OverrideFuelFlowValue",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @OverrideFuelFlowValue.setter
    def OverrideFuelFlowValue(self, newVal:float) -> None:
        """The value used for the Override Fuel Flow type. The fuel flow type must be set to Override to access this value."""
        return self._intf.set_property(IAgAvtrProcedureFormationRecover._metadata, IAgAvtrProcedureFormationRecover._set_OverrideFuelFlowValue_metadata, newVal)

    _get_ConsiderAccelForFuelFlow_metadata = { "name" : "ConsiderAccelForFuelFlow",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def ConsiderAccelForFuelFlow(self) -> bool:
        """The option to calculate the fuel flow rate according to the acceleration of the aircraft."""
        return self._intf.get_property(IAgAvtrProcedureFormationRecover._metadata, IAgAvtrProcedureFormationRecover._get_ConsiderAccelForFuelFlow_metadata)

    _set_ConsiderAccelForFuelFlow_metadata = { "name" : "ConsiderAccelForFuelFlow",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @ConsiderAccelForFuelFlow.setter
    def ConsiderAccelForFuelFlow(self, newVal:bool) -> None:
        """The option to calculate the fuel flow rate according to the acceleration of the aircraft."""
        return self._intf.set_property(IAgAvtrProcedureFormationRecover._metadata, IAgAvtrProcedureFormationRecover._set_ConsiderAccelForFuelFlow_metadata, newVal)

    _get_FirstPause_metadata = { "name" : "FirstPause",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def FirstPause(self) -> typing.Any:
        """The amount of time that the aircraft will pause at the specified altitude offset."""
        return self._intf.get_property(IAgAvtrProcedureFormationRecover._metadata, IAgAvtrProcedureFormationRecover._get_FirstPause_metadata)

    _set_FirstPause_metadata = { "name" : "FirstPause",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @FirstPause.setter
    def FirstPause(self, newVal:typing.Any) -> None:
        """The amount of time that the aircraft will pause at the specified altitude offset."""
        return self._intf.set_property(IAgAvtrProcedureFormationRecover._metadata, IAgAvtrProcedureFormationRecover._set_FirstPause_metadata, newVal)

    _get_TransitionTime_metadata = { "name" : "TransitionTime",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def TransitionTime(self) -> float:
        """The amount of time that the aircraft will spend transitioning from the specified altitude offset to a zero altitude offset."""
        return self._intf.get_property(IAgAvtrProcedureFormationRecover._metadata, IAgAvtrProcedureFormationRecover._get_TransitionTime_metadata)

    _set_TransitionTime_metadata = { "name" : "TransitionTime",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @TransitionTime.setter
    def TransitionTime(self, newVal:float) -> None:
        """The amount of time that the aircraft will spend transitioning from the specified altitude offset to a zero altitude offset."""
        return self._intf.set_property(IAgAvtrProcedureFormationRecover._metadata, IAgAvtrProcedureFormationRecover._set_TransitionTime_metadata, newVal)

    _get_SecondPause_metadata = { "name" : "SecondPause",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def SecondPause(self) -> typing.Any:
        """The amount of time that the aircraft will pause at a zero altitude offset."""
        return self._intf.get_property(IAgAvtrProcedureFormationRecover._metadata, IAgAvtrProcedureFormationRecover._get_SecondPause_metadata)

    _set_SecondPause_metadata = { "name" : "SecondPause",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @SecondPause.setter
    def SecondPause(self, newVal:typing.Any) -> None:
        """The amount of time that the aircraft will pause at a zero altitude offset."""
        return self._intf.set_property(IAgAvtrProcedureFormationRecover._metadata, IAgAvtrProcedureFormationRecover._set_SecondPause_metadata, newVal)

    _get_DisplayStepTime_metadata = { "name" : "DisplayStepTime",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def DisplayStepTime(self) -> float:
        """The time interval at which ephemeris is generated for display purposes."""
        return self._intf.get_property(IAgAvtrProcedureFormationRecover._metadata, IAgAvtrProcedureFormationRecover._get_DisplayStepTime_metadata)

    _set_DisplayStepTime_metadata = { "name" : "DisplayStepTime",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @DisplayStepTime.setter
    def DisplayStepTime(self, newVal:float) -> None:
        """The time interval at which ephemeris is generated for display purposes."""
        return self._intf.set_property(IAgAvtrProcedureFormationRecover._metadata, IAgAvtrProcedureFormationRecover._set_DisplayStepTime_metadata, newVal)

    _get_FlightMode_metadata = { "name" : "FlightMode",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrPhaseOfFlight),) }
    @property
    def FlightMode(self) -> "AgEAvtrPhaseOfFlight":
        """The type of performance model that the aircraft will use to fly the maneuver."""
        return self._intf.get_property(IAgAvtrProcedureFormationRecover._metadata, IAgAvtrProcedureFormationRecover._get_FlightMode_metadata)

    _set_FlightMode_metadata = { "name" : "FlightMode",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrPhaseOfFlight),) }
    @FlightMode.setter
    def FlightMode(self, newVal:"AgEAvtrPhaseOfFlight") -> None:
        """The type of performance model that the aircraft will use to fly the maneuver."""
        return self._intf.set_property(IAgAvtrProcedureFormationRecover._metadata, IAgAvtrProcedureFormationRecover._set_FlightMode_metadata, newVal)

    _get_FlightPathAngle_metadata = { "name" : "FlightPathAngle",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def FlightPathAngle(self) -> typing.Any:
        """The flight path angle at the beginning of the first pause."""
        return self._intf.get_property(IAgAvtrProcedureFormationRecover._metadata, IAgAvtrProcedureFormationRecover._get_FlightPathAngle_metadata)

    _set_FlightPathAngle_metadata = { "name" : "FlightPathAngle",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @FlightPathAngle.setter
    def FlightPathAngle(self, newVal:typing.Any) -> None:
        """The flight path angle at the beginning of the first pause."""
        return self._intf.set_property(IAgAvtrProcedureFormationRecover._metadata, IAgAvtrProcedureFormationRecover._set_FlightPathAngle_metadata, newVal)

    _get_RadiusFactor_metadata = { "name" : "RadiusFactor",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def RadiusFactor(self) -> float:
        """The maximum amount the radius of vertical curve will be increased to minimize the flight path angle required to complete it."""
        return self._intf.get_property(IAgAvtrProcedureFormationRecover._metadata, IAgAvtrProcedureFormationRecover._get_RadiusFactor_metadata)

    _set_RadiusFactor_metadata = { "name" : "RadiusFactor",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @RadiusFactor.setter
    def RadiusFactor(self, newVal:float) -> None:
        """The maximum amount the radius of vertical curve will be increased to minimize the flight path angle required to complete it."""
        return self._intf.set_property(IAgAvtrProcedureFormationRecover._metadata, IAgAvtrProcedureFormationRecover._set_RadiusFactor_metadata, newVal)

    _get_UseDelay_metadata = { "name" : "UseDelay",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def UseDelay(self) -> bool:
        """The option to insert a delay at the beginning of the procedure."""
        return self._intf.get_property(IAgAvtrProcedureFormationRecover._metadata, IAgAvtrProcedureFormationRecover._get_UseDelay_metadata)

    _set_UseDelay_metadata = { "name" : "UseDelay",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @UseDelay.setter
    def UseDelay(self, newVal:bool) -> None:
        """The option to insert a delay at the beginning of the procedure."""
        return self._intf.set_property(IAgAvtrProcedureFormationRecover._metadata, IAgAvtrProcedureFormationRecover._set_UseDelay_metadata, newVal)

    _get_DelayTurnDir_metadata = { "name" : "DelayTurnDir",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrDelayTurnDir),) }
    @property
    def DelayTurnDir(self) -> "AgEAvtrDelayTurnDir":
        """The turn direction of the delay."""
        return self._intf.get_property(IAgAvtrProcedureFormationRecover._metadata, IAgAvtrProcedureFormationRecover._get_DelayTurnDir_metadata)

    _set_DelayTurnDir_metadata = { "name" : "DelayTurnDir",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrDelayTurnDir),) }
    @DelayTurnDir.setter
    def DelayTurnDir(self, newVal:"AgEAvtrDelayTurnDir") -> None:
        """The turn direction of the delay."""
        return self._intf.set_property(IAgAvtrProcedureFormationRecover._metadata, IAgAvtrProcedureFormationRecover._set_DelayTurnDir_metadata, newVal)


agcls.AgClassCatalog.add_catalog_entry("{d96375bc-d2b6-4397-81bc-35a923b5b883}", IAgAvtrProcedureFormationRecover)
agcls.AgTypeNameMap["IAgAvtrProcedureFormationRecover"] = IAgAvtrProcedureFormationRecover

class IAgAvtrProcedureInFormation(object):
    """Interface used to access the options for an In Formation procedure."""
    _num_methods = 19
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{7d5aa09b-b2d4-4984-b930-f4b55acf3219}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "GetAsProcedure" : 1,
                             "get_FlightMode" : 2,
                             "set_FlightMode" : 3,
                             "get_FormationPoint" : 4,
                             "set_FormationPoint" : 5,
                             "get_TransitionTime" : 6,
                             "set_TransitionTime" : 7,
                             "get_HoldTime" : 8,
                             "set_HoldTime" : 9,
                             "get_DisplayStepTime" : 10,
                             "set_DisplayStepTime" : 11,
                             "get_TrajectoryBlending" : 12,
                             "set_TrajectoryBlending" : 13,
                             "get_FuelFlowType" : 14,
                             "set_FuelFlowType" : 15,
                             "get_OverrideFuelFlowValue" : 16,
                             "set_OverrideFuelFlowValue" : 17,
                             "get_ConsiderAccelForFuelFlow" : 18,
                             "set_ConsiderAccelForFuelFlow" : 19, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrProcedureInFormation._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrProcedureInFormation from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrProcedureInFormation.__dict__ and type(IAgAvtrProcedureInFormation.__dict__[attrname]) == property:
            return IAgAvtrProcedureInFormation.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrProcedureInFormation.")
    
    _GetAsProcedure_metadata = { "name" : "GetAsProcedure",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    def GetAsProcedure(self) -> "IAgAvtrProcedure":
        """Get the procedure interface."""
        return self._intf.invoke(IAgAvtrProcedureInFormation._metadata, IAgAvtrProcedureInFormation._GetAsProcedure_metadata, out_arg())

    _get_FlightMode_metadata = { "name" : "FlightMode",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrPhaseOfFlight),) }
    @property
    def FlightMode(self) -> "AgEAvtrPhaseOfFlight":
        """The type of performance model that the aircraft will use to fly the maneuver."""
        return self._intf.get_property(IAgAvtrProcedureInFormation._metadata, IAgAvtrProcedureInFormation._get_FlightMode_metadata)

    _set_FlightMode_metadata = { "name" : "FlightMode",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrPhaseOfFlight),) }
    @FlightMode.setter
    def FlightMode(self, newVal:"AgEAvtrPhaseOfFlight") -> None:
        """The type of performance model that the aircraft will use to fly the maneuver."""
        return self._intf.set_property(IAgAvtrProcedureInFormation._metadata, IAgAvtrProcedureInFormation._set_FlightMode_metadata, newVal)

    _get_FormationPoint_metadata = { "name" : "FormationPoint",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def FormationPoint(self) -> str:
        """The position that the aircraft will be locked onto while in formation."""
        return self._intf.get_property(IAgAvtrProcedureInFormation._metadata, IAgAvtrProcedureInFormation._get_FormationPoint_metadata)

    _set_FormationPoint_metadata = { "name" : "FormationPoint",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @FormationPoint.setter
    def FormationPoint(self, newVal:str) -> None:
        """The position that the aircraft will be locked onto while in formation."""
        return self._intf.set_property(IAgAvtrProcedureInFormation._metadata, IAgAvtrProcedureInFormation._set_FormationPoint_metadata, newVal)

    _get_TransitionTime_metadata = { "name" : "TransitionTime",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def TransitionTime(self) -> float:
        """The amount of time that the aircraft will spend transitioning from the altitude offset to a zero altitude offset."""
        return self._intf.get_property(IAgAvtrProcedureInFormation._metadata, IAgAvtrProcedureInFormation._get_TransitionTime_metadata)

    _set_TransitionTime_metadata = { "name" : "TransitionTime",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @TransitionTime.setter
    def TransitionTime(self, newVal:float) -> None:
        """The amount of time that the aircraft will spend transitioning from the altitude offset to a zero altitude offset."""
        return self._intf.set_property(IAgAvtrProcedureInFormation._metadata, IAgAvtrProcedureInFormation._set_TransitionTime_metadata, newVal)

    _get_HoldTime_metadata = { "name" : "HoldTime",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def HoldTime(self) -> typing.Any:
        """The amount of time that the aircraft will pause at a zero altitude offset."""
        return self._intf.get_property(IAgAvtrProcedureInFormation._metadata, IAgAvtrProcedureInFormation._get_HoldTime_metadata)

    _set_HoldTime_metadata = { "name" : "HoldTime",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @HoldTime.setter
    def HoldTime(self, newVal:typing.Any) -> None:
        """The amount of time that the aircraft will pause at a zero altitude offset."""
        return self._intf.set_property(IAgAvtrProcedureInFormation._metadata, IAgAvtrProcedureInFormation._set_HoldTime_metadata, newVal)

    _get_DisplayStepTime_metadata = { "name" : "DisplayStepTime",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def DisplayStepTime(self) -> float:
        """The time interval at which ephemeris is generated for display purposes."""
        return self._intf.get_property(IAgAvtrProcedureInFormation._metadata, IAgAvtrProcedureInFormation._get_DisplayStepTime_metadata)

    _set_DisplayStepTime_metadata = { "name" : "DisplayStepTime",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @DisplayStepTime.setter
    def DisplayStepTime(self, newVal:float) -> None:
        """The time interval at which ephemeris is generated for display purposes."""
        return self._intf.set_property(IAgAvtrProcedureInFormation._metadata, IAgAvtrProcedureInFormation._set_DisplayStepTime_metadata, newVal)

    _get_TrajectoryBlending_metadata = { "name" : "TrajectoryBlending",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrTrajectoryBlendMode),) }
    @property
    def TrajectoryBlending(self) -> "AgEAvtrTrajectoryBlendMode":
        """The interpolation mode to determine the aircraft's position and velocity."""
        return self._intf.get_property(IAgAvtrProcedureInFormation._metadata, IAgAvtrProcedureInFormation._get_TrajectoryBlending_metadata)

    _set_TrajectoryBlending_metadata = { "name" : "TrajectoryBlending",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrTrajectoryBlendMode),) }
    @TrajectoryBlending.setter
    def TrajectoryBlending(self, newVal:"AgEAvtrTrajectoryBlendMode") -> None:
        """The interpolation mode to determine the aircraft's position and velocity."""
        return self._intf.set_property(IAgAvtrProcedureInFormation._metadata, IAgAvtrProcedureInFormation._set_TrajectoryBlending_metadata, newVal)

    _get_FuelFlowType_metadata = { "name" : "FuelFlowType",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrFuelFlowType),) }
    @property
    def FuelFlowType(self) -> "AgEAvtrFuelFlowType":
        """The source used to calculate the fuel flow for the maneuver."""
        return self._intf.get_property(IAgAvtrProcedureInFormation._metadata, IAgAvtrProcedureInFormation._get_FuelFlowType_metadata)

    _set_FuelFlowType_metadata = { "name" : "FuelFlowType",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrFuelFlowType),) }
    @FuelFlowType.setter
    def FuelFlowType(self, newVal:"AgEAvtrFuelFlowType") -> None:
        """The source used to calculate the fuel flow for the maneuver."""
        return self._intf.set_property(IAgAvtrProcedureInFormation._metadata, IAgAvtrProcedureInFormation._set_FuelFlowType_metadata, newVal)

    _get_OverrideFuelFlowValue_metadata = { "name" : "OverrideFuelFlowValue",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def OverrideFuelFlowValue(self) -> float:
        """The value used for the Override Fuel Flow type. The fuel flow type must be set to Override to access this value."""
        return self._intf.get_property(IAgAvtrProcedureInFormation._metadata, IAgAvtrProcedureInFormation._get_OverrideFuelFlowValue_metadata)

    _set_OverrideFuelFlowValue_metadata = { "name" : "OverrideFuelFlowValue",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @OverrideFuelFlowValue.setter
    def OverrideFuelFlowValue(self, newVal:float) -> None:
        """The value used for the Override Fuel Flow type. The fuel flow type must be set to Override to access this value."""
        return self._intf.set_property(IAgAvtrProcedureInFormation._metadata, IAgAvtrProcedureInFormation._set_OverrideFuelFlowValue_metadata, newVal)

    _get_ConsiderAccelForFuelFlow_metadata = { "name" : "ConsiderAccelForFuelFlow",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def ConsiderAccelForFuelFlow(self) -> bool:
        """The option to calculate the fuel flow rate according to the acceleration of the aircraft."""
        return self._intf.get_property(IAgAvtrProcedureInFormation._metadata, IAgAvtrProcedureInFormation._get_ConsiderAccelForFuelFlow_metadata)

    _set_ConsiderAccelForFuelFlow_metadata = { "name" : "ConsiderAccelForFuelFlow",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @ConsiderAccelForFuelFlow.setter
    def ConsiderAccelForFuelFlow(self, newVal:bool) -> None:
        """The option to calculate the fuel flow rate according to the acceleration of the aircraft."""
        return self._intf.set_property(IAgAvtrProcedureInFormation._metadata, IAgAvtrProcedureInFormation._set_ConsiderAccelForFuelFlow_metadata, newVal)


agcls.AgClassCatalog.add_catalog_entry("{7d5aa09b-b2d4-4984-b930-f4b55acf3219}", IAgAvtrProcedureInFormation)
agcls.AgTypeNameMap["IAgAvtrProcedureInFormation"] = IAgAvtrProcedureInFormation

class IAgAvtrProcedureParallelFlightLine(object):
    """Interface used to access the options for a Parallel Flight Line procedure."""
    _num_methods = 19
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{4c911a89-bad8-457e-9dca-64c1adf59603}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_AltitudeOptions" : 1,
                             "get_EnrouteOptions" : 2,
                             "get_EnrouteCruiseAirspeedOptions" : 3,
                             "get_EnrouteTurnDirectionOptions" : 4,
                             "get_ProcedureType" : 5,
                             "set_ProcedureType" : 6,
                             "get_Orientation" : 7,
                             "set_Orientation" : 8,
                             "get_Separation" : 9,
                             "set_Separation" : 10,
                             "get_Offset" : 11,
                             "set_Offset" : 12,
                             "get_LegLength" : 13,
                             "set_LegLength" : 14,
                             "get_MustLevelOff" : 15,
                             "set_MustLevelOff" : 16,
                             "get_LevelOffMode" : 17,
                             "set_LevelOffMode" : 18,
                             "GetAsProcedure" : 19, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrProcedureParallelFlightLine._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrProcedureParallelFlightLine from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrProcedureParallelFlightLine.__dict__ and type(IAgAvtrProcedureParallelFlightLine.__dict__[attrname]) == property:
            return IAgAvtrProcedureParallelFlightLine.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrProcedureParallelFlightLine.")
    
    _get_AltitudeOptions_metadata = { "name" : "AltitudeOptions",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def AltitudeOptions(self) -> "IAgAvtrAltitudeOptions":
        """Get the altitude options."""
        return self._intf.get_property(IAgAvtrProcedureParallelFlightLine._metadata, IAgAvtrProcedureParallelFlightLine._get_AltitudeOptions_metadata)

    _get_EnrouteOptions_metadata = { "name" : "EnrouteOptions",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def EnrouteOptions(self) -> "IAgAvtrEnrouteOptions":
        """Get the enroute options."""
        return self._intf.get_property(IAgAvtrProcedureParallelFlightLine._metadata, IAgAvtrProcedureParallelFlightLine._get_EnrouteOptions_metadata)

    _get_EnrouteCruiseAirspeedOptions_metadata = { "name" : "EnrouteCruiseAirspeedOptions",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def EnrouteCruiseAirspeedOptions(self) -> "IAgAvtrCruiseAirspeedAndProfileOptions":
        """Get the enroute cruise airspeed options."""
        return self._intf.get_property(IAgAvtrProcedureParallelFlightLine._metadata, IAgAvtrProcedureParallelFlightLine._get_EnrouteCruiseAirspeedOptions_metadata)

    _get_EnrouteTurnDirectionOptions_metadata = { "name" : "EnrouteTurnDirectionOptions",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def EnrouteTurnDirectionOptions(self) -> "IAgAvtrEnrouteTurnDirectionOptions":
        """Get the enroute turn direction options."""
        return self._intf.get_property(IAgAvtrProcedureParallelFlightLine._metadata, IAgAvtrProcedureParallelFlightLine._get_EnrouteTurnDirectionOptions_metadata)

    _get_ProcedureType_metadata = { "name" : "ProcedureType",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrFlightLineProcType),) }
    @property
    def ProcedureType(self) -> "AgEAvtrFlightLineProcType":
        """The procedure methodology used to calculate the flight line."""
        return self._intf.get_property(IAgAvtrProcedureParallelFlightLine._metadata, IAgAvtrProcedureParallelFlightLine._get_ProcedureType_metadata)

    _set_ProcedureType_metadata = { "name" : "ProcedureType",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrFlightLineProcType),) }
    @ProcedureType.setter
    def ProcedureType(self, newVal:"AgEAvtrFlightLineProcType") -> None:
        """The procedure methodology used to calculate the flight line."""
        return self._intf.set_property(IAgAvtrProcedureParallelFlightLine._metadata, IAgAvtrProcedureParallelFlightLine._set_ProcedureType_metadata, newVal)

    _get_Orientation_metadata = { "name" : "Orientation",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrLineOrientation),) }
    @property
    def Orientation(self) -> "AgEAvtrLineOrientation":
        """The placement of the procedure with respect to the previous flight line."""
        return self._intf.get_property(IAgAvtrProcedureParallelFlightLine._metadata, IAgAvtrProcedureParallelFlightLine._get_Orientation_metadata)

    _set_Orientation_metadata = { "name" : "Orientation",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrLineOrientation),) }
    @Orientation.setter
    def Orientation(self, newVal:"AgEAvtrLineOrientation") -> None:
        """The placement of the procedure with respect to the previous flight line."""
        return self._intf.set_property(IAgAvtrProcedureParallelFlightLine._metadata, IAgAvtrProcedureParallelFlightLine._set_Orientation_metadata, newVal)

    _get_Separation_metadata = { "name" : "Separation",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def Separation(self) -> float:
        """The distance between the flight line and the previous flight line."""
        return self._intf.get_property(IAgAvtrProcedureParallelFlightLine._metadata, IAgAvtrProcedureParallelFlightLine._get_Separation_metadata)

    _set_Separation_metadata = { "name" : "Separation",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @Separation.setter
    def Separation(self, newVal:float) -> None:
        """The distance between the flight line and the previous flight line."""
        return self._intf.set_property(IAgAvtrProcedureParallelFlightLine._metadata, IAgAvtrProcedureParallelFlightLine._set_Separation_metadata, newVal)

    _get_Offset_metadata = { "name" : "Offset",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def Offset(self) -> float:
        """The distance from the end of the previous procedure to the beginning of the flight line."""
        return self._intf.get_property(IAgAvtrProcedureParallelFlightLine._metadata, IAgAvtrProcedureParallelFlightLine._get_Offset_metadata)

    _set_Offset_metadata = { "name" : "Offset",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @Offset.setter
    def Offset(self, newVal:float) -> None:
        """The distance from the end of the previous procedure to the beginning of the flight line."""
        return self._intf.set_property(IAgAvtrProcedureParallelFlightLine._metadata, IAgAvtrProcedureParallelFlightLine._set_Offset_metadata, newVal)

    _get_LegLength_metadata = { "name" : "LegLength",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def LegLength(self) -> float:
        """The length of the flight line."""
        return self._intf.get_property(IAgAvtrProcedureParallelFlightLine._metadata, IAgAvtrProcedureParallelFlightLine._get_LegLength_metadata)

    _set_LegLength_metadata = { "name" : "LegLength",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @LegLength.setter
    def LegLength(self, newVal:float) -> None:
        """The length of the flight line."""
        return self._intf.set_property(IAgAvtrProcedureParallelFlightLine._metadata, IAgAvtrProcedureParallelFlightLine._set_LegLength_metadata, newVal)

    _get_MustLevelOff_metadata = { "name" : "MustLevelOff",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def MustLevelOff(self) -> bool:
        """Opt whether the procedure must level off."""
        return self._intf.get_property(IAgAvtrProcedureParallelFlightLine._metadata, IAgAvtrProcedureParallelFlightLine._get_MustLevelOff_metadata)

    _set_MustLevelOff_metadata = { "name" : "MustLevelOff",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @MustLevelOff.setter
    def MustLevelOff(self, newVal:bool) -> None:
        """Opt whether the procedure must level off."""
        return self._intf.set_property(IAgAvtrProcedureParallelFlightLine._metadata, IAgAvtrProcedureParallelFlightLine._set_MustLevelOff_metadata, newVal)

    _get_LevelOffMode_metadata = { "name" : "LevelOffMode",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrAltitudeConstraintManeuverMode),) }
    @property
    def LevelOffMode(self) -> "AgEAvtrAltitudeConstraintManeuverMode":
        """The level off mode. This is only used when the must level off option is on."""
        return self._intf.get_property(IAgAvtrProcedureParallelFlightLine._metadata, IAgAvtrProcedureParallelFlightLine._get_LevelOffMode_metadata)

    _set_LevelOffMode_metadata = { "name" : "LevelOffMode",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrAltitudeConstraintManeuverMode),) }
    @LevelOffMode.setter
    def LevelOffMode(self, newVal:"AgEAvtrAltitudeConstraintManeuverMode") -> None:
        """The level off mode. This is only used when the must level off option is on."""
        return self._intf.set_property(IAgAvtrProcedureParallelFlightLine._metadata, IAgAvtrProcedureParallelFlightLine._set_LevelOffMode_metadata, newVal)

    _GetAsProcedure_metadata = { "name" : "GetAsProcedure",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    def GetAsProcedure(self) -> "IAgAvtrProcedure":
        """Get the procedure interface."""
        return self._intf.invoke(IAgAvtrProcedureParallelFlightLine._metadata, IAgAvtrProcedureParallelFlightLine._GetAsProcedure_metadata, out_arg())


agcls.AgClassCatalog.add_catalog_entry("{4c911a89-bad8-457e-9dca-64c1adf59603}", IAgAvtrProcedureParallelFlightLine)
agcls.AgTypeNameMap["IAgAvtrProcedureParallelFlightLine"] = IAgAvtrProcedureParallelFlightLine

class IAgAvtrProcedureVGTPoint(object):
    """Interface used to access the options for a VGT Point procedure."""
    _num_methods = 23
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{36159f4d-5c80-4a49-bdf8-ccfdda28100b}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "GetAsProcedure" : 1,
                             "get_MinimumTime" : 2,
                             "get_StartTime" : 3,
                             "set_StartTime" : 4,
                             "get_MaximumTime" : 5,
                             "get_FormationPoint" : 6,
                             "set_FormationPoint" : 7,
                             "get_InterpolatePointPosVel" : 8,
                             "set_InterpolatePointPosVel" : 9,
                             "get_Duration" : 10,
                             "set_Duration" : 11,
                             "get_UseMaxPointStopTime" : 12,
                             "set_UseMaxPointStopTime" : 13,
                             "get_FuelFlowType" : 14,
                             "set_FuelFlowType" : 15,
                             "get_OverrideFuelFlowValue" : 16,
                             "set_OverrideFuelFlowValue" : 17,
                             "get_ConsiderAccelForFuelFlow" : 18,
                             "set_ConsiderAccelForFuelFlow" : 19,
                             "get_FlightMode" : 20,
                             "set_FlightMode" : 21,
                             "get_DisplayStepTime" : 22,
                             "set_DisplayStepTime" : 23, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrProcedureVGTPoint._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrProcedureVGTPoint from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrProcedureVGTPoint.__dict__ and type(IAgAvtrProcedureVGTPoint.__dict__[attrname]) == property:
            return IAgAvtrProcedureVGTPoint.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrProcedureVGTPoint.")
    
    _GetAsProcedure_metadata = { "name" : "GetAsProcedure",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    def GetAsProcedure(self) -> "IAgAvtrProcedure":
        """Get the procedure interface."""
        return self._intf.invoke(IAgAvtrProcedureVGTPoint._metadata, IAgAvtrProcedureVGTPoint._GetAsProcedure_metadata, out_arg())

    _get_MinimumTime_metadata = { "name" : "MinimumTime",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def MinimumTime(self) -> typing.Any:
        """The minimum time at which formation might be possible."""
        return self._intf.get_property(IAgAvtrProcedureVGTPoint._metadata, IAgAvtrProcedureVGTPoint._get_MinimumTime_metadata)

    _get_StartTime_metadata = { "name" : "StartTime",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def StartTime(self) -> typing.Any:
        """The time at which the formation begins."""
        return self._intf.get_property(IAgAvtrProcedureVGTPoint._metadata, IAgAvtrProcedureVGTPoint._get_StartTime_metadata)

    _set_StartTime_metadata = { "name" : "StartTime",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @StartTime.setter
    def StartTime(self, newVal:typing.Any) -> None:
        """The time at which the formation begins."""
        return self._intf.set_property(IAgAvtrProcedureVGTPoint._metadata, IAgAvtrProcedureVGTPoint._set_StartTime_metadata, newVal)

    _get_MaximumTime_metadata = { "name" : "MaximumTime",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def MaximumTime(self) -> typing.Any:
        """The maximum time at which formation might be possible."""
        return self._intf.get_property(IAgAvtrProcedureVGTPoint._metadata, IAgAvtrProcedureVGTPoint._get_MaximumTime_metadata)

    _get_FormationPoint_metadata = { "name" : "FormationPoint",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def FormationPoint(self) -> str:
        """The position that the aircraft will be locked onto while in formation."""
        return self._intf.get_property(IAgAvtrProcedureVGTPoint._metadata, IAgAvtrProcedureVGTPoint._get_FormationPoint_metadata)

    _set_FormationPoint_metadata = { "name" : "FormationPoint",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @FormationPoint.setter
    def FormationPoint(self, newVal:str) -> None:
        """The position that the aircraft will be locked onto while in formation."""
        return self._intf.set_property(IAgAvtrProcedureVGTPoint._metadata, IAgAvtrProcedureVGTPoint._set_FormationPoint_metadata, newVal)

    _get_InterpolatePointPosVel_metadata = { "name" : "InterpolatePointPosVel",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def InterpolatePointPosVel(self) -> bool:
        """The option to use interpolation to determine the formation point's speed and position."""
        return self._intf.get_property(IAgAvtrProcedureVGTPoint._metadata, IAgAvtrProcedureVGTPoint._get_InterpolatePointPosVel_metadata)

    _set_InterpolatePointPosVel_metadata = { "name" : "InterpolatePointPosVel",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @InterpolatePointPosVel.setter
    def InterpolatePointPosVel(self, newVal:bool) -> None:
        """The option to use interpolation to determine the formation point's speed and position."""
        return self._intf.set_property(IAgAvtrProcedureVGTPoint._metadata, IAgAvtrProcedureVGTPoint._set_InterpolatePointPosVel_metadata, newVal)

    _get_Duration_metadata = { "name" : "Duration",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def Duration(self) -> float:
        """The duration of the procedure."""
        return self._intf.get_property(IAgAvtrProcedureVGTPoint._metadata, IAgAvtrProcedureVGTPoint._get_Duration_metadata)

    _set_Duration_metadata = { "name" : "Duration",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @Duration.setter
    def Duration(self, newVal:float) -> None:
        """The duration of the procedure."""
        return self._intf.set_property(IAgAvtrProcedureVGTPoint._metadata, IAgAvtrProcedureVGTPoint._set_Duration_metadata, newVal)

    _get_UseMaxPointStopTime_metadata = { "name" : "UseMaxPointStopTime",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def UseMaxPointStopTime(self) -> bool:
        """Opt to limit the duration to the maximum possible time if the duration exceeds the time limit."""
        return self._intf.get_property(IAgAvtrProcedureVGTPoint._metadata, IAgAvtrProcedureVGTPoint._get_UseMaxPointStopTime_metadata)

    _set_UseMaxPointStopTime_metadata = { "name" : "UseMaxPointStopTime",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @UseMaxPointStopTime.setter
    def UseMaxPointStopTime(self, newVal:bool) -> None:
        """Opt to limit the duration to the maximum possible time if the duration exceeds the time limit."""
        return self._intf.set_property(IAgAvtrProcedureVGTPoint._metadata, IAgAvtrProcedureVGTPoint._set_UseMaxPointStopTime_metadata, newVal)

    _get_FuelFlowType_metadata = { "name" : "FuelFlowType",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrFuelFlowType),) }
    @property
    def FuelFlowType(self) -> "AgEAvtrFuelFlowType":
        """The source used to calculate the fuel flow for the maneuver."""
        return self._intf.get_property(IAgAvtrProcedureVGTPoint._metadata, IAgAvtrProcedureVGTPoint._get_FuelFlowType_metadata)

    _set_FuelFlowType_metadata = { "name" : "FuelFlowType",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrFuelFlowType),) }
    @FuelFlowType.setter
    def FuelFlowType(self, newVal:"AgEAvtrFuelFlowType") -> None:
        """The source used to calculate the fuel flow for the maneuver."""
        return self._intf.set_property(IAgAvtrProcedureVGTPoint._metadata, IAgAvtrProcedureVGTPoint._set_FuelFlowType_metadata, newVal)

    _get_OverrideFuelFlowValue_metadata = { "name" : "OverrideFuelFlowValue",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def OverrideFuelFlowValue(self) -> float:
        """The value used for the Override Fuel Flow type. The fuel flow type must be set to Override to access this value."""
        return self._intf.get_property(IAgAvtrProcedureVGTPoint._metadata, IAgAvtrProcedureVGTPoint._get_OverrideFuelFlowValue_metadata)

    _set_OverrideFuelFlowValue_metadata = { "name" : "OverrideFuelFlowValue",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @OverrideFuelFlowValue.setter
    def OverrideFuelFlowValue(self, newVal:float) -> None:
        """The value used for the Override Fuel Flow type. The fuel flow type must be set to Override to access this value."""
        return self._intf.set_property(IAgAvtrProcedureVGTPoint._metadata, IAgAvtrProcedureVGTPoint._set_OverrideFuelFlowValue_metadata, newVal)

    _get_ConsiderAccelForFuelFlow_metadata = { "name" : "ConsiderAccelForFuelFlow",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def ConsiderAccelForFuelFlow(self) -> bool:
        """The option to calculate the fuel flow rate according to the acceleration of the aircraft."""
        return self._intf.get_property(IAgAvtrProcedureVGTPoint._metadata, IAgAvtrProcedureVGTPoint._get_ConsiderAccelForFuelFlow_metadata)

    _set_ConsiderAccelForFuelFlow_metadata = { "name" : "ConsiderAccelForFuelFlow",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @ConsiderAccelForFuelFlow.setter
    def ConsiderAccelForFuelFlow(self, newVal:bool) -> None:
        """The option to calculate the fuel flow rate according to the acceleration of the aircraft."""
        return self._intf.set_property(IAgAvtrProcedureVGTPoint._metadata, IAgAvtrProcedureVGTPoint._set_ConsiderAccelForFuelFlow_metadata, newVal)

    _get_FlightMode_metadata = { "name" : "FlightMode",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrPhaseOfFlight),) }
    @property
    def FlightMode(self) -> "AgEAvtrPhaseOfFlight":
        """The type of performance model that the aircraft will use to fly the maneuver."""
        return self._intf.get_property(IAgAvtrProcedureVGTPoint._metadata, IAgAvtrProcedureVGTPoint._get_FlightMode_metadata)

    _set_FlightMode_metadata = { "name" : "FlightMode",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrPhaseOfFlight),) }
    @FlightMode.setter
    def FlightMode(self, newVal:"AgEAvtrPhaseOfFlight") -> None:
        """The type of performance model that the aircraft will use to fly the maneuver."""
        return self._intf.set_property(IAgAvtrProcedureVGTPoint._metadata, IAgAvtrProcedureVGTPoint._set_FlightMode_metadata, newVal)

    _get_DisplayStepTime_metadata = { "name" : "DisplayStepTime",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def DisplayStepTime(self) -> float:
        """The time interval at which ephemeris is generated for display purposes."""
        return self._intf.get_property(IAgAvtrProcedureVGTPoint._metadata, IAgAvtrProcedureVGTPoint._get_DisplayStepTime_metadata)

    _set_DisplayStepTime_metadata = { "name" : "DisplayStepTime",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @DisplayStepTime.setter
    def DisplayStepTime(self, newVal:float) -> None:
        """The time interval at which ephemeris is generated for display purposes."""
        return self._intf.set_property(IAgAvtrProcedureVGTPoint._metadata, IAgAvtrProcedureVGTPoint._set_DisplayStepTime_metadata, newVal)


agcls.AgClassCatalog.add_catalog_entry("{36159f4d-5c80-4a49-bdf8-ccfdda28100b}", IAgAvtrProcedureVGTPoint)
agcls.AgTypeNameMap["IAgAvtrProcedureVGTPoint"] = IAgAvtrProcedureVGTPoint

class IAgAvtrSiteRunwayFromCatalog(object):
    """Interface used to access the options for a Runway From Catalog site type."""
    _num_methods = 3
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{56a06eb2-be85-4e31-b850-7c0485566739}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "GetCatalogRunway" : 1,
                             "SetCatalogRunway" : 2,
                             "GetAsSite" : 3, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrSiteRunwayFromCatalog._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrSiteRunwayFromCatalog from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrSiteRunwayFromCatalog.__dict__ and type(IAgAvtrSiteRunwayFromCatalog.__dict__[attrname]) == property:
            return IAgAvtrSiteRunwayFromCatalog.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrSiteRunwayFromCatalog.")
    
    _GetCatalogRunway_metadata = { "name" : "GetCatalogRunway",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    def GetCatalogRunway(self) -> "IAgAvtrCatalogRunway":
        """Get the catalog runway."""
        return self._intf.invoke(IAgAvtrSiteRunwayFromCatalog._metadata, IAgAvtrSiteRunwayFromCatalog._GetCatalogRunway_metadata, out_arg())

    _SetCatalogRunway_metadata = { "name" : "SetCatalogRunway",
            "arg_types" : (agcom.PVOID,),
            "marshallers" : (agmarshall.AgInterface_in_arg("IAgAvtrCatalogRunway"),) }
    def SetCatalogRunway(self, pVal:"IAgAvtrCatalogRunway") -> None:
        """Set the catalog runway."""
        return self._intf.invoke(IAgAvtrSiteRunwayFromCatalog._metadata, IAgAvtrSiteRunwayFromCatalog._SetCatalogRunway_metadata, pVal)

    _GetAsSite_metadata = { "name" : "GetAsSite",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    def GetAsSite(self) -> "IAgAvtrSite":
        """Get the site interface."""
        return self._intf.invoke(IAgAvtrSiteRunwayFromCatalog._metadata, IAgAvtrSiteRunwayFromCatalog._GetAsSite_metadata, out_arg())


agcls.AgClassCatalog.add_catalog_entry("{56a06eb2-be85-4e31-b850-7c0485566739}", IAgAvtrSiteRunwayFromCatalog)
agcls.AgTypeNameMap["IAgAvtrSiteRunwayFromCatalog"] = IAgAvtrSiteRunwayFromCatalog

class IAgAvtrSiteAirportFromCatalog(object):
    """Interface used to access the options for a airport From Catalog site type."""
    _num_methods = 3
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{8cf3e110-d619-4769-894a-b23cb32baa7f}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "GetCatalogAirport" : 1,
                             "SetCatalogAirport" : 2,
                             "GetAsSite" : 3, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrSiteAirportFromCatalog._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrSiteAirportFromCatalog from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrSiteAirportFromCatalog.__dict__ and type(IAgAvtrSiteAirportFromCatalog.__dict__[attrname]) == property:
            return IAgAvtrSiteAirportFromCatalog.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrSiteAirportFromCatalog.")
    
    _GetCatalogAirport_metadata = { "name" : "GetCatalogAirport",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    def GetCatalogAirport(self) -> "IAgAvtrCatalogAirport":
        """Get the catalog airport."""
        return self._intf.invoke(IAgAvtrSiteAirportFromCatalog._metadata, IAgAvtrSiteAirportFromCatalog._GetCatalogAirport_metadata, out_arg())

    _SetCatalogAirport_metadata = { "name" : "SetCatalogAirport",
            "arg_types" : (agcom.PVOID,),
            "marshallers" : (agmarshall.AgInterface_in_arg("IAgAvtrCatalogAirport"),) }
    def SetCatalogAirport(self, pVal:"IAgAvtrCatalogAirport") -> None:
        """Set the catalog airport."""
        return self._intf.invoke(IAgAvtrSiteAirportFromCatalog._metadata, IAgAvtrSiteAirportFromCatalog._SetCatalogAirport_metadata, pVal)

    _GetAsSite_metadata = { "name" : "GetAsSite",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    def GetAsSite(self) -> "IAgAvtrSite":
        """Get the site interface."""
        return self._intf.invoke(IAgAvtrSiteAirportFromCatalog._metadata, IAgAvtrSiteAirportFromCatalog._GetAsSite_metadata, out_arg())


agcls.AgClassCatalog.add_catalog_entry("{8cf3e110-d619-4769-894a-b23cb32baa7f}", IAgAvtrSiteAirportFromCatalog)
agcls.AgTypeNameMap["IAgAvtrSiteAirportFromCatalog"] = IAgAvtrSiteAirportFromCatalog

class IAgAvtrSiteNavaidFromCatalog(object):
    """Interface used to access the options for a navaid From Catalog site type."""
    _num_methods = 3
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{960e8584-5349-44cc-8b49-9a00c209f9a5}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "GetCatalogNavaid" : 1,
                             "SetCatalogNavaid" : 2,
                             "GetAsSite" : 3, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrSiteNavaidFromCatalog._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrSiteNavaidFromCatalog from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrSiteNavaidFromCatalog.__dict__ and type(IAgAvtrSiteNavaidFromCatalog.__dict__[attrname]) == property:
            return IAgAvtrSiteNavaidFromCatalog.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrSiteNavaidFromCatalog.")
    
    _GetCatalogNavaid_metadata = { "name" : "GetCatalogNavaid",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    def GetCatalogNavaid(self) -> "IAgAvtrCatalogNavaid":
        """Get the catalog navaid."""
        return self._intf.invoke(IAgAvtrSiteNavaidFromCatalog._metadata, IAgAvtrSiteNavaidFromCatalog._GetCatalogNavaid_metadata, out_arg())

    _SetCatalogNavaid_metadata = { "name" : "SetCatalogNavaid",
            "arg_types" : (agcom.PVOID,),
            "marshallers" : (agmarshall.AgInterface_in_arg("IAgAvtrCatalogNavaid"),) }
    def SetCatalogNavaid(self, pVal:"IAgAvtrCatalogNavaid") -> None:
        """Set the catalog navaid."""
        return self._intf.invoke(IAgAvtrSiteNavaidFromCatalog._metadata, IAgAvtrSiteNavaidFromCatalog._SetCatalogNavaid_metadata, pVal)

    _GetAsSite_metadata = { "name" : "GetAsSite",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    def GetAsSite(self) -> "IAgAvtrSite":
        """Get the site interface."""
        return self._intf.invoke(IAgAvtrSiteNavaidFromCatalog._metadata, IAgAvtrSiteNavaidFromCatalog._GetAsSite_metadata, out_arg())


agcls.AgClassCatalog.add_catalog_entry("{960e8584-5349-44cc-8b49-9a00c209f9a5}", IAgAvtrSiteNavaidFromCatalog)
agcls.AgTypeNameMap["IAgAvtrSiteNavaidFromCatalog"] = IAgAvtrSiteNavaidFromCatalog

class IAgAvtrSiteVTOLPointFromCatalog(object):
    """Interface used to access the options for a VTOL Point From Catalog site type."""
    _num_methods = 3
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{f0556822-9ba9-45ca-9cd2-e965d442d997}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "GetCatalogVTOLPoint" : 1,
                             "SetCatalogVTOLPoint" : 2,
                             "GetAsSite" : 3, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrSiteVTOLPointFromCatalog._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrSiteVTOLPointFromCatalog from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrSiteVTOLPointFromCatalog.__dict__ and type(IAgAvtrSiteVTOLPointFromCatalog.__dict__[attrname]) == property:
            return IAgAvtrSiteVTOLPointFromCatalog.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrSiteVTOLPointFromCatalog.")
    
    _GetCatalogVTOLPoint_metadata = { "name" : "GetCatalogVTOLPoint",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    def GetCatalogVTOLPoint(self) -> "IAgAvtrCatalogVTOLPoint":
        """Get the catalog VTOL point."""
        return self._intf.invoke(IAgAvtrSiteVTOLPointFromCatalog._metadata, IAgAvtrSiteVTOLPointFromCatalog._GetCatalogVTOLPoint_metadata, out_arg())

    _SetCatalogVTOLPoint_metadata = { "name" : "SetCatalogVTOLPoint",
            "arg_types" : (agcom.PVOID,),
            "marshallers" : (agmarshall.AgInterface_in_arg("IAgAvtrCatalogVTOLPoint"),) }
    def SetCatalogVTOLPoint(self, pVal:"IAgAvtrCatalogVTOLPoint") -> None:
        """Set the catalog VTOL point."""
        return self._intf.invoke(IAgAvtrSiteVTOLPointFromCatalog._metadata, IAgAvtrSiteVTOLPointFromCatalog._SetCatalogVTOLPoint_metadata, pVal)

    _GetAsSite_metadata = { "name" : "GetAsSite",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    def GetAsSite(self) -> "IAgAvtrSite":
        """Get the site interface."""
        return self._intf.invoke(IAgAvtrSiteVTOLPointFromCatalog._metadata, IAgAvtrSiteVTOLPointFromCatalog._GetAsSite_metadata, out_arg())


agcls.AgClassCatalog.add_catalog_entry("{f0556822-9ba9-45ca-9cd2-e965d442d997}", IAgAvtrSiteVTOLPointFromCatalog)
agcls.AgTypeNameMap["IAgAvtrSiteVTOLPointFromCatalog"] = IAgAvtrSiteVTOLPointFromCatalog

class IAgAvtrSiteWaypointFromCatalog(object):
    """Interface used to access the options for a waypoint From Catalog site type."""
    _num_methods = 3
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{89b1a048-7b22-45ab-bd5c-34584de7b2b7}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "GetCatalogWaypoint" : 1,
                             "SetCatalogWaypoint" : 2,
                             "GetAsSite" : 3, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrSiteWaypointFromCatalog._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrSiteWaypointFromCatalog from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrSiteWaypointFromCatalog.__dict__ and type(IAgAvtrSiteWaypointFromCatalog.__dict__[attrname]) == property:
            return IAgAvtrSiteWaypointFromCatalog.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrSiteWaypointFromCatalog.")
    
    _GetCatalogWaypoint_metadata = { "name" : "GetCatalogWaypoint",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    def GetCatalogWaypoint(self) -> "IAgAvtrCatalogWaypoint":
        """Get the catalog waypoint."""
        return self._intf.invoke(IAgAvtrSiteWaypointFromCatalog._metadata, IAgAvtrSiteWaypointFromCatalog._GetCatalogWaypoint_metadata, out_arg())

    _SetCatalogWaypoint_metadata = { "name" : "SetCatalogWaypoint",
            "arg_types" : (agcom.PVOID,),
            "marshallers" : (agmarshall.AgInterface_in_arg("IAgAvtrCatalogWaypoint"),) }
    def SetCatalogWaypoint(self, pVal:"IAgAvtrCatalogWaypoint") -> None:
        """Set the catalog waypoint."""
        return self._intf.invoke(IAgAvtrSiteWaypointFromCatalog._metadata, IAgAvtrSiteWaypointFromCatalog._SetCatalogWaypoint_metadata, pVal)

    _GetAsSite_metadata = { "name" : "GetAsSite",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    def GetAsSite(self) -> "IAgAvtrSite":
        """Get the site interface."""
        return self._intf.invoke(IAgAvtrSiteWaypointFromCatalog._metadata, IAgAvtrSiteWaypointFromCatalog._GetAsSite_metadata, out_arg())


agcls.AgClassCatalog.add_catalog_entry("{89b1a048-7b22-45ab-bd5c-34584de7b2b7}", IAgAvtrSiteWaypointFromCatalog)
agcls.AgTypeNameMap["IAgAvtrSiteWaypointFromCatalog"] = IAgAvtrSiteWaypointFromCatalog

class IAgAvtrProcedureLaunchDynState(object):
    """Interface used to access the options for a dyn state launch procedure."""
    _num_methods = 26
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{BC0541E2-248E-4B42-8A7F-E9C411E40073}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_LaunchTime" : 1,
                             "set_LaunchTime" : 2,
                             "get_CoordFrame" : 3,
                             "set_CoordFrame" : 4,
                             "get_BearingRef" : 5,
                             "set_BearingRef" : 6,
                             "get_LaunchBearing" : 7,
                             "set_LaunchBearing" : 8,
                             "get_LaunchElevation" : 9,
                             "set_LaunchElevation" : 10,
                             "get_AttitudeMode" : 11,
                             "set_AttitudeMode" : 12,
                             "get_SpecifyLaunchAirspeed" : 13,
                             "set_SpecifyLaunchAirspeed" : 14,
                             "get_AccelG" : 15,
                             "set_AccelG" : 16,
                             "get_AirspeedType" : 17,
                             "get_Airspeed" : 18,
                             "SetAirspeed" : 19,
                             "get_FuelFlowType" : 20,
                             "set_FuelFlowType" : 21,
                             "get_OverrideFuelFlow" : 22,
                             "set_OverrideFuelFlow" : 23,
                             "get_TrueCourseHint" : 24,
                             "set_TrueCourseHint" : 25,
                             "GetAsProcedure" : 26, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrProcedureLaunchDynState._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrProcedureLaunchDynState from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrProcedureLaunchDynState.__dict__ and type(IAgAvtrProcedureLaunchDynState.__dict__[attrname]) == property:
            return IAgAvtrProcedureLaunchDynState.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrProcedureLaunchDynState.")
    
    _get_LaunchTime_metadata = { "name" : "LaunchTime",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def LaunchTime(self) -> typing.Any:
        """The launch time of the aircraft."""
        return self._intf.get_property(IAgAvtrProcedureLaunchDynState._metadata, IAgAvtrProcedureLaunchDynState._get_LaunchTime_metadata)

    _set_LaunchTime_metadata = { "name" : "LaunchTime",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @LaunchTime.setter
    def LaunchTime(self, newVal:typing.Any) -> None:
        """The launch time of the aircraft."""
        return self._intf.set_property(IAgAvtrProcedureLaunchDynState._metadata, IAgAvtrProcedureLaunchDynState._set_LaunchTime_metadata, newVal)

    _get_CoordFrame_metadata = { "name" : "CoordFrame",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrLaunchDynStateCoordFrame),) }
    @property
    def CoordFrame(self) -> "AgEAvtrLaunchDynStateCoordFrame":
        """The reference coordinate frame for the dyn state launch procedure."""
        return self._intf.get_property(IAgAvtrProcedureLaunchDynState._metadata, IAgAvtrProcedureLaunchDynState._get_CoordFrame_metadata)

    _set_CoordFrame_metadata = { "name" : "CoordFrame",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrLaunchDynStateCoordFrame),) }
    @CoordFrame.setter
    def CoordFrame(self, pVal:"AgEAvtrLaunchDynStateCoordFrame") -> None:
        """The reference coordinate frame for the dyn state launch procedure."""
        return self._intf.set_property(IAgAvtrProcedureLaunchDynState._metadata, IAgAvtrProcedureLaunchDynState._set_CoordFrame_metadata, pVal)

    _get_BearingRef_metadata = { "name" : "BearingRef",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrLaunchDynStateBearingRef),) }
    @property
    def BearingRef(self) -> "AgEAvtrLaunchDynStateBearingRef":
        """The bearing reference for the dyn state launch procedure."""
        return self._intf.get_property(IAgAvtrProcedureLaunchDynState._metadata, IAgAvtrProcedureLaunchDynState._get_BearingRef_metadata)

    _set_BearingRef_metadata = { "name" : "BearingRef",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrLaunchDynStateBearingRef),) }
    @BearingRef.setter
    def BearingRef(self, pVal:"AgEAvtrLaunchDynStateBearingRef") -> None:
        """The bearing reference for the dyn state launch procedure."""
        return self._intf.set_property(IAgAvtrProcedureLaunchDynState._metadata, IAgAvtrProcedureLaunchDynState._set_BearingRef_metadata, pVal)

    _get_LaunchBearing_metadata = { "name" : "LaunchBearing",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def LaunchBearing(self) -> typing.Any:
        """The launch direction bearing."""
        return self._intf.get_property(IAgAvtrProcedureLaunchDynState._metadata, IAgAvtrProcedureLaunchDynState._get_LaunchBearing_metadata)

    _set_LaunchBearing_metadata = { "name" : "LaunchBearing",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @LaunchBearing.setter
    def LaunchBearing(self, newVal:typing.Any) -> None:
        """The launch direction bearing."""
        return self._intf.set_property(IAgAvtrProcedureLaunchDynState._metadata, IAgAvtrProcedureLaunchDynState._set_LaunchBearing_metadata, newVal)

    _get_LaunchElevation_metadata = { "name" : "LaunchElevation",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def LaunchElevation(self) -> typing.Any:
        """The launch direction elevation."""
        return self._intf.get_property(IAgAvtrProcedureLaunchDynState._metadata, IAgAvtrProcedureLaunchDynState._get_LaunchElevation_metadata)

    _set_LaunchElevation_metadata = { "name" : "LaunchElevation",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @LaunchElevation.setter
    def LaunchElevation(self, newVal:typing.Any) -> None:
        """The launch direction elevation."""
        return self._intf.set_property(IAgAvtrProcedureLaunchDynState._metadata, IAgAvtrProcedureLaunchDynState._set_LaunchElevation_metadata, newVal)

    _get_AttitudeMode_metadata = { "name" : "AttitudeMode",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrLaunchAttitudeMode),) }
    @property
    def AttitudeMode(self) -> "AgEAvtrLaunchAttitudeMode":
        """The attitude mode during the launch."""
        return self._intf.get_property(IAgAvtrProcedureLaunchDynState._metadata, IAgAvtrProcedureLaunchDynState._get_AttitudeMode_metadata)

    _set_AttitudeMode_metadata = { "name" : "AttitudeMode",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrLaunchAttitudeMode),) }
    @AttitudeMode.setter
    def AttitudeMode(self, newVal:"AgEAvtrLaunchAttitudeMode") -> None:
        """The attitude mode during the launch."""
        return self._intf.set_property(IAgAvtrProcedureLaunchDynState._metadata, IAgAvtrProcedureLaunchDynState._set_AttitudeMode_metadata, newVal)

    _get_SpecifyLaunchAirspeed_metadata = { "name" : "SpecifyLaunchAirspeed",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def SpecifyLaunchAirspeed(self) -> bool:
        """Opt to specify a minimum launch speed the aircraft will accelerate to."""
        return self._intf.get_property(IAgAvtrProcedureLaunchDynState._metadata, IAgAvtrProcedureLaunchDynState._get_SpecifyLaunchAirspeed_metadata)

    _set_SpecifyLaunchAirspeed_metadata = { "name" : "SpecifyLaunchAirspeed",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @SpecifyLaunchAirspeed.setter
    def SpecifyLaunchAirspeed(self, newVal:bool) -> None:
        """Opt to specify a minimum launch speed the aircraft will accelerate to."""
        return self._intf.set_property(IAgAvtrProcedureLaunchDynState._metadata, IAgAvtrProcedureLaunchDynState._set_SpecifyLaunchAirspeed_metadata, newVal)

    _get_AccelG_metadata = { "name" : "AccelG",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def AccelG(self) -> float:
        """The acceleration of the aircraft during the launch."""
        return self._intf.get_property(IAgAvtrProcedureLaunchDynState._metadata, IAgAvtrProcedureLaunchDynState._get_AccelG_metadata)

    _set_AccelG_metadata = { "name" : "AccelG",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @AccelG.setter
    def AccelG(self, newVal:float) -> None:
        """The acceleration of the aircraft during the launch."""
        return self._intf.set_property(IAgAvtrProcedureLaunchDynState._metadata, IAgAvtrProcedureLaunchDynState._set_AccelG_metadata, newVal)

    _get_AirspeedType_metadata = { "name" : "AirspeedType",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrAirspeedType),) }
    @property
    def AirspeedType(self) -> "AgEAvtrAirspeedType":
        """The airspeed type."""
        return self._intf.get_property(IAgAvtrProcedureLaunchDynState._metadata, IAgAvtrProcedureLaunchDynState._get_AirspeedType_metadata)

    _get_Airspeed_metadata = { "name" : "Airspeed",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def Airspeed(self) -> float:
        """The goal airspeed for the launch."""
        return self._intf.get_property(IAgAvtrProcedureLaunchDynState._metadata, IAgAvtrProcedureLaunchDynState._get_Airspeed_metadata)

    _SetAirspeed_metadata = { "name" : "SetAirspeed",
            "arg_types" : (agcom.LONG, agcom.DOUBLE,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrAirspeedType), agmarshall.DOUBLE_arg,) }
    def SetAirspeed(self, airspeedType:"AgEAvtrAirspeedType", airspeed:float) -> None:
        """Set the launch airspeed."""
        return self._intf.invoke(IAgAvtrProcedureLaunchDynState._metadata, IAgAvtrProcedureLaunchDynState._SetAirspeed_metadata, airspeedType, airspeed)

    _get_FuelFlowType_metadata = { "name" : "FuelFlowType",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrFuelFlowType),) }
    @property
    def FuelFlowType(self) -> "AgEAvtrFuelFlowType":
        """The fuel flow type of the aircraft during the launch."""
        return self._intf.get_property(IAgAvtrProcedureLaunchDynState._metadata, IAgAvtrProcedureLaunchDynState._get_FuelFlowType_metadata)

    _set_FuelFlowType_metadata = { "name" : "FuelFlowType",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrFuelFlowType),) }
    @FuelFlowType.setter
    def FuelFlowType(self, newVal:"AgEAvtrFuelFlowType") -> None:
        """The fuel flow type of the aircraft during the launch."""
        return self._intf.set_property(IAgAvtrProcedureLaunchDynState._metadata, IAgAvtrProcedureLaunchDynState._set_FuelFlowType_metadata, newVal)

    _get_OverrideFuelFlow_metadata = { "name" : "OverrideFuelFlow",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def OverrideFuelFlow(self) -> float:
        """The fuel flow value for a fuel flow type set to Override."""
        return self._intf.get_property(IAgAvtrProcedureLaunchDynState._metadata, IAgAvtrProcedureLaunchDynState._get_OverrideFuelFlow_metadata)

    _set_OverrideFuelFlow_metadata = { "name" : "OverrideFuelFlow",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @OverrideFuelFlow.setter
    def OverrideFuelFlow(self, newVal:float) -> None:
        """The fuel flow value for a fuel flow type set to Override."""
        return self._intf.set_property(IAgAvtrProcedureLaunchDynState._metadata, IAgAvtrProcedureLaunchDynState._set_OverrideFuelFlow_metadata, newVal)

    _get_TrueCourseHint_metadata = { "name" : "TrueCourseHint",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def TrueCourseHint(self) -> typing.Any:
        """The true course used when the vehicle's direction vector is set to Zenith."""
        return self._intf.get_property(IAgAvtrProcedureLaunchDynState._metadata, IAgAvtrProcedureLaunchDynState._get_TrueCourseHint_metadata)

    _set_TrueCourseHint_metadata = { "name" : "TrueCourseHint",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @TrueCourseHint.setter
    def TrueCourseHint(self, newVal:typing.Any) -> None:
        """The true course used when the vehicle's direction vector is set to Zenith."""
        return self._intf.set_property(IAgAvtrProcedureLaunchDynState._metadata, IAgAvtrProcedureLaunchDynState._set_TrueCourseHint_metadata, newVal)

    _GetAsProcedure_metadata = { "name" : "GetAsProcedure",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    def GetAsProcedure(self) -> "IAgAvtrProcedure":
        """Get the procedure interface."""
        return self._intf.invoke(IAgAvtrProcedureLaunchDynState._metadata, IAgAvtrProcedureLaunchDynState._GetAsProcedure_metadata, out_arg())


agcls.AgClassCatalog.add_catalog_entry("{BC0541E2-248E-4B42-8A7F-E9C411E40073}", IAgAvtrProcedureLaunchDynState)
agcls.AgTypeNameMap["IAgAvtrProcedureLaunchDynState"] = IAgAvtrProcedureLaunchDynState

class IAgAvtrProcedureLaunchWaypoint(object):
    """Interface used to access the options for a waypoint launch procedure."""
    _num_methods = 20
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{6154839D-55D1-4A31-9B03-330411C54D24}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_LaunchTime" : 1,
                             "set_LaunchTime" : 2,
                             "get_AltitudeRef" : 3,
                             "set_AltitudeRef" : 4,
                             "get_LaunchAltitude" : 5,
                             "set_LaunchAltitude" : 6,
                             "get_LaunchTrueBearing" : 7,
                             "set_LaunchTrueBearing" : 8,
                             "get_LaunchElevation" : 9,
                             "set_LaunchElevation" : 10,
                             "get_AccelG" : 11,
                             "set_AccelG" : 12,
                             "get_AirspeedType" : 13,
                             "get_Airspeed" : 14,
                             "SetAirspeed" : 15,
                             "get_FuelFlowType" : 16,
                             "set_FuelFlowType" : 17,
                             "get_OverrideFuelFlow" : 18,
                             "set_OverrideFuelFlow" : 19,
                             "GetAsProcedure" : 20, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrProcedureLaunchWaypoint._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrProcedureLaunchWaypoint from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrProcedureLaunchWaypoint.__dict__ and type(IAgAvtrProcedureLaunchWaypoint.__dict__[attrname]) == property:
            return IAgAvtrProcedureLaunchWaypoint.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrProcedureLaunchWaypoint.")
    
    _get_LaunchTime_metadata = { "name" : "LaunchTime",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def LaunchTime(self) -> typing.Any:
        """The launch time of the aircraft."""
        return self._intf.get_property(IAgAvtrProcedureLaunchWaypoint._metadata, IAgAvtrProcedureLaunchWaypoint._get_LaunchTime_metadata)

    _set_LaunchTime_metadata = { "name" : "LaunchTime",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @LaunchTime.setter
    def LaunchTime(self, newVal:typing.Any) -> None:
        """The launch time of the aircraft."""
        return self._intf.set_property(IAgAvtrProcedureLaunchWaypoint._metadata, IAgAvtrProcedureLaunchWaypoint._set_LaunchTime_metadata, newVal)

    _get_AltitudeRef_metadata = { "name" : "AltitudeRef",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrAltitudeRef),) }
    @property
    def AltitudeRef(self) -> "AgEAvtrAltitudeRef":
        """The launch altitude reference."""
        return self._intf.get_property(IAgAvtrProcedureLaunchWaypoint._metadata, IAgAvtrProcedureLaunchWaypoint._get_AltitudeRef_metadata)

    _set_AltitudeRef_metadata = { "name" : "AltitudeRef",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrAltitudeRef),) }
    @AltitudeRef.setter
    def AltitudeRef(self, newVal:"AgEAvtrAltitudeRef") -> None:
        """The launch altitude reference."""
        return self._intf.set_property(IAgAvtrProcedureLaunchWaypoint._metadata, IAgAvtrProcedureLaunchWaypoint._set_AltitudeRef_metadata, newVal)

    _get_LaunchAltitude_metadata = { "name" : "LaunchAltitude",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def LaunchAltitude(self) -> float:
        """The launch altitude."""
        return self._intf.get_property(IAgAvtrProcedureLaunchWaypoint._metadata, IAgAvtrProcedureLaunchWaypoint._get_LaunchAltitude_metadata)

    _set_LaunchAltitude_metadata = { "name" : "LaunchAltitude",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @LaunchAltitude.setter
    def LaunchAltitude(self, newVal:float) -> None:
        """The launch altitude."""
        return self._intf.set_property(IAgAvtrProcedureLaunchWaypoint._metadata, IAgAvtrProcedureLaunchWaypoint._set_LaunchAltitude_metadata, newVal)

    _get_LaunchTrueBearing_metadata = { "name" : "LaunchTrueBearing",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def LaunchTrueBearing(self) -> typing.Any:
        """The launch direction bearing."""
        return self._intf.get_property(IAgAvtrProcedureLaunchWaypoint._metadata, IAgAvtrProcedureLaunchWaypoint._get_LaunchTrueBearing_metadata)

    _set_LaunchTrueBearing_metadata = { "name" : "LaunchTrueBearing",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @LaunchTrueBearing.setter
    def LaunchTrueBearing(self, newVal:typing.Any) -> None:
        """The launch direction bearing."""
        return self._intf.set_property(IAgAvtrProcedureLaunchWaypoint._metadata, IAgAvtrProcedureLaunchWaypoint._set_LaunchTrueBearing_metadata, newVal)

    _get_LaunchElevation_metadata = { "name" : "LaunchElevation",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def LaunchElevation(self) -> typing.Any:
        """The launch direction elevation."""
        return self._intf.get_property(IAgAvtrProcedureLaunchWaypoint._metadata, IAgAvtrProcedureLaunchWaypoint._get_LaunchElevation_metadata)

    _set_LaunchElevation_metadata = { "name" : "LaunchElevation",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @LaunchElevation.setter
    def LaunchElevation(self, newVal:typing.Any) -> None:
        """The launch direction elevation."""
        return self._intf.set_property(IAgAvtrProcedureLaunchWaypoint._metadata, IAgAvtrProcedureLaunchWaypoint._set_LaunchElevation_metadata, newVal)

    _get_AccelG_metadata = { "name" : "AccelG",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def AccelG(self) -> float:
        """The acceleration of the aircraft during the launch."""
        return self._intf.get_property(IAgAvtrProcedureLaunchWaypoint._metadata, IAgAvtrProcedureLaunchWaypoint._get_AccelG_metadata)

    _set_AccelG_metadata = { "name" : "AccelG",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @AccelG.setter
    def AccelG(self, newVal:float) -> None:
        """The acceleration of the aircraft during the launch."""
        return self._intf.set_property(IAgAvtrProcedureLaunchWaypoint._metadata, IAgAvtrProcedureLaunchWaypoint._set_AccelG_metadata, newVal)

    _get_AirspeedType_metadata = { "name" : "AirspeedType",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrAirspeedType),) }
    @property
    def AirspeedType(self) -> "AgEAvtrAirspeedType":
        """The airspeed type."""
        return self._intf.get_property(IAgAvtrProcedureLaunchWaypoint._metadata, IAgAvtrProcedureLaunchWaypoint._get_AirspeedType_metadata)

    _get_Airspeed_metadata = { "name" : "Airspeed",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def Airspeed(self) -> float:
        """The goal airspeed for the launch."""
        return self._intf.get_property(IAgAvtrProcedureLaunchWaypoint._metadata, IAgAvtrProcedureLaunchWaypoint._get_Airspeed_metadata)

    _SetAirspeed_metadata = { "name" : "SetAirspeed",
            "arg_types" : (agcom.LONG, agcom.DOUBLE,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrAirspeedType), agmarshall.DOUBLE_arg,) }
    def SetAirspeed(self, airspeedType:"AgEAvtrAirspeedType", airspeed:float) -> None:
        """Set the launch airspeed."""
        return self._intf.invoke(IAgAvtrProcedureLaunchWaypoint._metadata, IAgAvtrProcedureLaunchWaypoint._SetAirspeed_metadata, airspeedType, airspeed)

    _get_FuelFlowType_metadata = { "name" : "FuelFlowType",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrFuelFlowType),) }
    @property
    def FuelFlowType(self) -> "AgEAvtrFuelFlowType":
        """The fuel flow type of the aircraft during the launch."""
        return self._intf.get_property(IAgAvtrProcedureLaunchWaypoint._metadata, IAgAvtrProcedureLaunchWaypoint._get_FuelFlowType_metadata)

    _set_FuelFlowType_metadata = { "name" : "FuelFlowType",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrFuelFlowType),) }
    @FuelFlowType.setter
    def FuelFlowType(self, newVal:"AgEAvtrFuelFlowType") -> None:
        """The fuel flow type of the aircraft during the launch."""
        return self._intf.set_property(IAgAvtrProcedureLaunchWaypoint._metadata, IAgAvtrProcedureLaunchWaypoint._set_FuelFlowType_metadata, newVal)

    _get_OverrideFuelFlow_metadata = { "name" : "OverrideFuelFlow",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def OverrideFuelFlow(self) -> float:
        """The fuel flow value for a fuel flow type set to Override."""
        return self._intf.get_property(IAgAvtrProcedureLaunchWaypoint._metadata, IAgAvtrProcedureLaunchWaypoint._get_OverrideFuelFlow_metadata)

    _set_OverrideFuelFlow_metadata = { "name" : "OverrideFuelFlow",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @OverrideFuelFlow.setter
    def OverrideFuelFlow(self, newVal:float) -> None:
        """The fuel flow value for a fuel flow type set to Override."""
        return self._intf.set_property(IAgAvtrProcedureLaunchWaypoint._metadata, IAgAvtrProcedureLaunchWaypoint._set_OverrideFuelFlow_metadata, newVal)

    _GetAsProcedure_metadata = { "name" : "GetAsProcedure",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    def GetAsProcedure(self) -> "IAgAvtrProcedure":
        """Get the procedure interface."""
        return self._intf.invoke(IAgAvtrProcedureLaunchWaypoint._metadata, IAgAvtrProcedureLaunchWaypoint._GetAsProcedure_metadata, out_arg())


agcls.AgClassCatalog.add_catalog_entry("{6154839D-55D1-4A31-9B03-330411C54D24}", IAgAvtrProcedureLaunchWaypoint)
agcls.AgTypeNameMap["IAgAvtrProcedureLaunchWaypoint"] = IAgAvtrProcedureLaunchWaypoint

class IAgAvtrSiteDynState(object):
    """Interface used to access the options for a dyn state site type."""
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{06485268-3338-46D7-8F0C-7BCA35CE9589}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_ObjectName" : 1,
                             "set_ObjectName" : 2,
                             "get_ValidObjectNames" : 3,
                             "GetAsSite" : 4, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrSiteDynState._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrSiteDynState from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrSiteDynState.__dict__ and type(IAgAvtrSiteDynState.__dict__[attrname]) == property:
            return IAgAvtrSiteDynState.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrSiteDynState.")
    
    _get_ObjectName_metadata = { "name" : "ObjectName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def ObjectName(self) -> str:
        """The object name to link to."""
        return self._intf.get_property(IAgAvtrSiteDynState._metadata, IAgAvtrSiteDynState._get_ObjectName_metadata)

    _set_ObjectName_metadata = { "name" : "ObjectName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @ObjectName.setter
    def ObjectName(self, newVal:str) -> None:
        """The object name to link to."""
        return self._intf.set_property(IAgAvtrSiteDynState._metadata, IAgAvtrSiteDynState._set_ObjectName_metadata, newVal)

    _get_ValidObjectNames_metadata = { "name" : "ValidObjectNames",
            "arg_types" : (POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg,) }
    @property
    def ValidObjectNames(self) -> list:
        """Returns the valid object names."""
        return self._intf.get_property(IAgAvtrSiteDynState._metadata, IAgAvtrSiteDynState._get_ValidObjectNames_metadata)

    _GetAsSite_metadata = { "name" : "GetAsSite",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    def GetAsSite(self) -> "IAgAvtrSite":
        """Get the site interface."""
        return self._intf.invoke(IAgAvtrSiteDynState._metadata, IAgAvtrSiteDynState._GetAsSite_metadata, out_arg())


agcls.AgClassCatalog.add_catalog_entry("{06485268-3338-46D7-8F0C-7BCA35CE9589}", IAgAvtrSiteDynState)
agcls.AgTypeNameMap["IAgAvtrSiteDynState"] = IAgAvtrSiteDynState



class AgAvtrSiteWaypoint(IAgAvtrSiteWaypoint, IAgAvtrSite):
    """Class defining a waypoint site."""
    def __init__(self, sourceObject=None):
        IAgAvtrSiteWaypoint.__init__(self, sourceObject)
        IAgAvtrSite.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrSiteWaypoint._private_init(self, intf)
        IAgAvtrSite._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrSiteWaypoint._get_property(self, attrname) is not None: found_prop = IAgAvtrSiteWaypoint._get_property(self, attrname)
        if IAgAvtrSite._get_property(self, attrname) is not None: found_prop = IAgAvtrSite._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrSiteWaypoint.")

agcls.AgClassCatalog.add_catalog_entry("{6d98e9b3-6766-46e5-98e2-b1f859b2ce92}", AgAvtrSiteWaypoint)


class AgAvtrSiteEndOfPrevProcedure(IAgAvtrSiteEndOfPrevProcedure, IAgAvtrSite):
    """Class defining an End of Previous Procedure site."""
    def __init__(self, sourceObject=None):
        IAgAvtrSiteEndOfPrevProcedure.__init__(self, sourceObject)
        IAgAvtrSite.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrSiteEndOfPrevProcedure._private_init(self, intf)
        IAgAvtrSite._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrSiteEndOfPrevProcedure._get_property(self, attrname) is not None: found_prop = IAgAvtrSiteEndOfPrevProcedure._get_property(self, attrname)
        if IAgAvtrSite._get_property(self, attrname) is not None: found_prop = IAgAvtrSite._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrSiteEndOfPrevProcedure.")

agcls.AgClassCatalog.add_catalog_entry("{24d8e613-5ce5-4e04-9251-fe44414caa14}", AgAvtrSiteEndOfPrevProcedure)


class AgAvtrSiteVTOLPoint(IAgAvtrSiteVTOLPoint, IAgAvtrSite):
    """Class defining a VTOL Point site."""
    def __init__(self, sourceObject=None):
        IAgAvtrSiteVTOLPoint.__init__(self, sourceObject)
        IAgAvtrSite.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrSiteVTOLPoint._private_init(self, intf)
        IAgAvtrSite._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrSiteVTOLPoint._get_property(self, attrname) is not None: found_prop = IAgAvtrSiteVTOLPoint._get_property(self, attrname)
        if IAgAvtrSite._get_property(self, attrname) is not None: found_prop = IAgAvtrSite._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrSiteVTOLPoint.")

agcls.AgClassCatalog.add_catalog_entry("{4f9d9e04-fa7e-4335-b1f4-15788a01c7ea}", AgAvtrSiteVTOLPoint)


class AgAvtrSiteReferenceState(IAgAvtrSiteReferenceState, IAgAvtrSite):
    """Class defining a Reference State site."""
    def __init__(self, sourceObject=None):
        IAgAvtrSiteReferenceState.__init__(self, sourceObject)
        IAgAvtrSite.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrSiteReferenceState._private_init(self, intf)
        IAgAvtrSite._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrSiteReferenceState._get_property(self, attrname) is not None: found_prop = IAgAvtrSiteReferenceState._get_property(self, attrname)
        if IAgAvtrSite._get_property(self, attrname) is not None: found_prop = IAgAvtrSite._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrSiteReferenceState.")

agcls.AgClassCatalog.add_catalog_entry("{978180ff-3f87-4ead-9405-e12e915c27e1}", AgAvtrSiteReferenceState)


class AgAvtrSiteSTKVehicle(IAgAvtrSiteSTKVehicle, IAgAvtrSite):
    """Class defining a STK Vehicle site."""
    def __init__(self, sourceObject=None):
        IAgAvtrSiteSTKVehicle.__init__(self, sourceObject)
        IAgAvtrSite.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrSiteSTKVehicle._private_init(self, intf)
        IAgAvtrSite._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrSiteSTKVehicle._get_property(self, attrname) is not None: found_prop = IAgAvtrSiteSTKVehicle._get_property(self, attrname)
        if IAgAvtrSite._get_property(self, attrname) is not None: found_prop = IAgAvtrSite._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrSiteSTKVehicle.")

agcls.AgClassCatalog.add_catalog_entry("{01b272ac-3b19-4daf-825f-88c0ff0e10bb}", AgAvtrSiteSTKVehicle)


class AgAvtrSiteSuperProcedure(IAgAvtrSiteSuperProcedure, IAgAvtrSite):
    """Class defining a Super Procedure site."""
    def __init__(self, sourceObject=None):
        IAgAvtrSiteSuperProcedure.__init__(self, sourceObject)
        IAgAvtrSite.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrSiteSuperProcedure._private_init(self, intf)
        IAgAvtrSite._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrSiteSuperProcedure._get_property(self, attrname) is not None: found_prop = IAgAvtrSiteSuperProcedure._get_property(self, attrname)
        if IAgAvtrSite._get_property(self, attrname) is not None: found_prop = IAgAvtrSite._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrSiteSuperProcedure.")

agcls.AgClassCatalog.add_catalog_entry("{0faf9c77-17bc-4a8d-b490-d4dcd2326ca9}", AgAvtrSiteSuperProcedure)


class AgAvtrSiteRelToPrevProcedure(IAgAvtrSiteRelToPrevProcedure, IAgAvtrSite):
    """Class defining a Relative to Previous Procedure site."""
    def __init__(self, sourceObject=None):
        IAgAvtrSiteRelToPrevProcedure.__init__(self, sourceObject)
        IAgAvtrSite.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrSiteRelToPrevProcedure._private_init(self, intf)
        IAgAvtrSite._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrSiteRelToPrevProcedure._get_property(self, attrname) is not None: found_prop = IAgAvtrSiteRelToPrevProcedure._get_property(self, attrname)
        if IAgAvtrSite._get_property(self, attrname) is not None: found_prop = IAgAvtrSite._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrSiteRelToPrevProcedure.")

agcls.AgClassCatalog.add_catalog_entry("{aa8dc548-3b50-44d0-b340-f1fca98283ee}", AgAvtrSiteRelToPrevProcedure)


class AgAvtrSiteSTKObjectWaypoint(IAgAvtrSiteSTKObjectWaypoint, IAgAvtrSite):
    """Class defining a STK Object Waypoint site."""
    def __init__(self, sourceObject=None):
        IAgAvtrSiteSTKObjectWaypoint.__init__(self, sourceObject)
        IAgAvtrSite.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrSiteSTKObjectWaypoint._private_init(self, intf)
        IAgAvtrSite._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrSiteSTKObjectWaypoint._get_property(self, attrname) is not None: found_prop = IAgAvtrSiteSTKObjectWaypoint._get_property(self, attrname)
        if IAgAvtrSite._get_property(self, attrname) is not None: found_prop = IAgAvtrSite._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrSiteSTKObjectWaypoint.")

agcls.AgClassCatalog.add_catalog_entry("{0b1f12ad-e7be-4158-abb4-39efb21a87d3}", AgAvtrSiteSTKObjectWaypoint)


class AgAvtrSiteSTKStaticObject(IAgAvtrSiteSTKStaticObject, IAgAvtrSite):
    """Class defining a STK Static Object site."""
    def __init__(self, sourceObject=None):
        IAgAvtrSiteSTKStaticObject.__init__(self, sourceObject)
        IAgAvtrSite.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrSiteSTKStaticObject._private_init(self, intf)
        IAgAvtrSite._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrSiteSTKStaticObject._get_property(self, attrname) is not None: found_prop = IAgAvtrSiteSTKStaticObject._get_property(self, attrname)
        if IAgAvtrSite._get_property(self, attrname) is not None: found_prop = IAgAvtrSite._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrSiteSTKStaticObject.")

agcls.AgClassCatalog.add_catalog_entry("{16bc1a6a-6cf6-4e2a-b73f-82e6e0928c61}", AgAvtrSiteSTKStaticObject)


class AgAvtrSiteRelToSTKObject(IAgAvtrSiteRelToSTKObject, IAgAvtrSite):
    """Class defining a Relative to Stationary STK Object site."""
    def __init__(self, sourceObject=None):
        IAgAvtrSiteRelToSTKObject.__init__(self, sourceObject)
        IAgAvtrSite.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrSiteRelToSTKObject._private_init(self, intf)
        IAgAvtrSite._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrSiteRelToSTKObject._get_property(self, attrname) is not None: found_prop = IAgAvtrSiteRelToSTKObject._get_property(self, attrname)
        if IAgAvtrSite._get_property(self, attrname) is not None: found_prop = IAgAvtrSite._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrSiteRelToSTKObject.")

agcls.AgClassCatalog.add_catalog_entry("{0c4677b4-f09b-4f8c-a170-3d4f0e1bf7f9}", AgAvtrSiteRelToSTKObject)


class AgAvtrSiteSTKAreaTarget(IAgAvtrSiteSTKAreaTarget, IAgAvtrSite):
    """Class defining a STK Area Target site."""
    def __init__(self, sourceObject=None):
        IAgAvtrSiteSTKAreaTarget.__init__(self, sourceObject)
        IAgAvtrSite.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrSiteSTKAreaTarget._private_init(self, intf)
        IAgAvtrSite._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrSiteSTKAreaTarget._get_property(self, attrname) is not None: found_prop = IAgAvtrSiteSTKAreaTarget._get_property(self, attrname)
        if IAgAvtrSite._get_property(self, attrname) is not None: found_prop = IAgAvtrSite._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrSiteSTKAreaTarget.")

agcls.AgClassCatalog.add_catalog_entry("{8ae70236-0185-4072-b230-da6e68e122f1}", AgAvtrSiteSTKAreaTarget)


class AgAvtrSiteRunway(IAgAvtrSiteRunway, IAgAvtrSite):
    """Class defining a runway site."""
    def __init__(self, sourceObject=None):
        IAgAvtrSiteRunway.__init__(self, sourceObject)
        IAgAvtrSite.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrSiteRunway._private_init(self, intf)
        IAgAvtrSite._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrSiteRunway._get_property(self, attrname) is not None: found_prop = IAgAvtrSiteRunway._get_property(self, attrname)
        if IAgAvtrSite._get_property(self, attrname) is not None: found_prop = IAgAvtrSite._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrSiteRunway.")

agcls.AgClassCatalog.add_catalog_entry("{6bbd87f1-83bc-4750-8128-8ba51a48b4ed}", AgAvtrSiteRunway)


class AgAvtrSite(IAgAvtrSite, IAgAvtrSiteUnknown):
    """Class defining an unknown site type."""
    def __init__(self, sourceObject=None):
        IAgAvtrSite.__init__(self, sourceObject)
        IAgAvtrSiteUnknown.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrSite._private_init(self, intf)
        IAgAvtrSiteUnknown._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrSite._get_property(self, attrname) is not None: found_prop = IAgAvtrSite._get_property(self, attrname)
        if IAgAvtrSiteUnknown._get_property(self, attrname) is not None: found_prop = IAgAvtrSiteUnknown._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrSite.")

agcls.AgClassCatalog.add_catalog_entry("{445bad6d-6125-446d-bce6-ac9233f11706}", AgAvtrSite)


class AgAvtrProcedureLanding(IAgAvtrProcedureLanding, IAgAvtrProcedure):
    """Class defining a landing procedure."""
    def __init__(self, sourceObject=None):
        IAgAvtrProcedureLanding.__init__(self, sourceObject)
        IAgAvtrProcedure.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrProcedureLanding._private_init(self, intf)
        IAgAvtrProcedure._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrProcedureLanding._get_property(self, attrname) is not None: found_prop = IAgAvtrProcedureLanding._get_property(self, attrname)
        if IAgAvtrProcedure._get_property(self, attrname) is not None: found_prop = IAgAvtrProcedure._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrProcedureLanding.")

agcls.AgClassCatalog.add_catalog_entry("{bde94020-cc95-4868-b5f1-da680baf4aeb}", AgAvtrProcedureLanding)


class AgAvtrProcedureEnroute(IAgAvtrProcedureEnroute, IAgAvtrProcedure):
    """Class defining an enroute procedure."""
    def __init__(self, sourceObject=None):
        IAgAvtrProcedureEnroute.__init__(self, sourceObject)
        IAgAvtrProcedure.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrProcedureEnroute._private_init(self, intf)
        IAgAvtrProcedure._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrProcedureEnroute._get_property(self, attrname) is not None: found_prop = IAgAvtrProcedureEnroute._get_property(self, attrname)
        if IAgAvtrProcedure._get_property(self, attrname) is not None: found_prop = IAgAvtrProcedure._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrProcedureEnroute.")

agcls.AgClassCatalog.add_catalog_entry("{f073011a-bfc1-4c9a-bd43-1a99bed41390}", AgAvtrProcedureEnroute)


class AgAvtrProcedureExtEphem(IAgAvtrProcedureExtEphem, IAgAvtrProcedure):
    """Class defining an ExtEphem procedure."""
    def __init__(self, sourceObject=None):
        IAgAvtrProcedureExtEphem.__init__(self, sourceObject)
        IAgAvtrProcedure.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrProcedureExtEphem._private_init(self, intf)
        IAgAvtrProcedure._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrProcedureExtEphem._get_property(self, attrname) is not None: found_prop = IAgAvtrProcedureExtEphem._get_property(self, attrname)
        if IAgAvtrProcedure._get_property(self, attrname) is not None: found_prop = IAgAvtrProcedure._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrProcedureExtEphem.")

agcls.AgClassCatalog.add_catalog_entry("{0F39A3ED-4A9E-4893-A061-F73A75ACF910}", AgAvtrProcedureExtEphem)


class AgAvtrProcedureFormationFlyer(IAgAvtrProcedureFormationFlyer, IAgAvtrProcedure):
    """Class defining an formationflyer procedure."""
    def __init__(self, sourceObject=None):
        IAgAvtrProcedureFormationFlyer.__init__(self, sourceObject)
        IAgAvtrProcedure.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrProcedureFormationFlyer._private_init(self, intf)
        IAgAvtrProcedure._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrProcedureFormationFlyer._get_property(self, attrname) is not None: found_prop = IAgAvtrProcedureFormationFlyer._get_property(self, attrname)
        if IAgAvtrProcedure._get_property(self, attrname) is not None: found_prop = IAgAvtrProcedure._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrProcedureFormationFlyer.")

agcls.AgClassCatalog.add_catalog_entry("{678807EC-D03C-4E14-A068-3C0D14923D72}", AgAvtrProcedureFormationFlyer)


class AgAvtrProcedureBasicPointToPoint(IAgAvtrProcedureBasicPointToPoint, IAgAvtrProcedure):
    """Class defining a basic point to point procedure."""
    def __init__(self, sourceObject=None):
        IAgAvtrProcedureBasicPointToPoint.__init__(self, sourceObject)
        IAgAvtrProcedure.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrProcedureBasicPointToPoint._private_init(self, intf)
        IAgAvtrProcedure._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrProcedureBasicPointToPoint._get_property(self, attrname) is not None: found_prop = IAgAvtrProcedureBasicPointToPoint._get_property(self, attrname)
        if IAgAvtrProcedure._get_property(self, attrname) is not None: found_prop = IAgAvtrProcedure._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrProcedureBasicPointToPoint.")

agcls.AgClassCatalog.add_catalog_entry("{36ce90e9-da71-40a6-aff9-db4aecab63bd}", AgAvtrProcedureBasicPointToPoint)


class AgAvtrProcedureArcEnroute(IAgAvtrProcedureArcEnroute, IAgAvtrProcedure):
    """Class defining a arc enroute procedure."""
    def __init__(self, sourceObject=None):
        IAgAvtrProcedureArcEnroute.__init__(self, sourceObject)
        IAgAvtrProcedure.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrProcedureArcEnroute._private_init(self, intf)
        IAgAvtrProcedure._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrProcedureArcEnroute._get_property(self, attrname) is not None: found_prop = IAgAvtrProcedureArcEnroute._get_property(self, attrname)
        if IAgAvtrProcedure._get_property(self, attrname) is not None: found_prop = IAgAvtrProcedure._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrProcedureArcEnroute.")

agcls.AgClassCatalog.add_catalog_entry("{7466bbc5-38eb-48ee-aec6-d45c69c562c1}", AgAvtrProcedureArcEnroute)


class AgAvtrProcedureArcPointToPoint(IAgAvtrProcedureArcPointToPoint, IAgAvtrProcedure):
    """Class defining a arc point to point procedure."""
    def __init__(self, sourceObject=None):
        IAgAvtrProcedureArcPointToPoint.__init__(self, sourceObject)
        IAgAvtrProcedure.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrProcedureArcPointToPoint._private_init(self, intf)
        IAgAvtrProcedure._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrProcedureArcPointToPoint._get_property(self, attrname) is not None: found_prop = IAgAvtrProcedureArcPointToPoint._get_property(self, attrname)
        if IAgAvtrProcedure._get_property(self, attrname) is not None: found_prop = IAgAvtrProcedure._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrProcedureArcPointToPoint.")

agcls.AgClassCatalog.add_catalog_entry("{c8026c77-0b69-413a-9903-bff5e40f44b8}", AgAvtrProcedureArcPointToPoint)


class AgAvtrProcedureFlightLine(IAgAvtrProcedureFlightLine, IAgAvtrProcedure):
    """Class defining a flight line procedure."""
    def __init__(self, sourceObject=None):
        IAgAvtrProcedureFlightLine.__init__(self, sourceObject)
        IAgAvtrProcedure.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrProcedureFlightLine._private_init(self, intf)
        IAgAvtrProcedure._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrProcedureFlightLine._get_property(self, attrname) is not None: found_prop = IAgAvtrProcedureFlightLine._get_property(self, attrname)
        if IAgAvtrProcedure._get_property(self, attrname) is not None: found_prop = IAgAvtrProcedure._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrProcedureFlightLine.")

agcls.AgClassCatalog.add_catalog_entry("{5079d60a-789b-489e-b1ba-749d7a888eba}", AgAvtrProcedureFlightLine)


class AgAvtrProcedureDelay(IAgAvtrProcedureDelay, IAgAvtrProcedure):
    """Class defining a delay procedure."""
    def __init__(self, sourceObject=None):
        IAgAvtrProcedureDelay.__init__(self, sourceObject)
        IAgAvtrProcedure.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrProcedureDelay._private_init(self, intf)
        IAgAvtrProcedure._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrProcedureDelay._get_property(self, attrname) is not None: found_prop = IAgAvtrProcedureDelay._get_property(self, attrname)
        if IAgAvtrProcedure._get_property(self, attrname) is not None: found_prop = IAgAvtrProcedure._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrProcedureDelay.")

agcls.AgClassCatalog.add_catalog_entry("{bf773446-cf9e-4f29-8c9e-57d62abbdb09}", AgAvtrProcedureDelay)


class AgAvtrProcedureTakeoff(IAgAvtrProcedureTakeoff, IAgAvtrProcedure):
    """Class defining a takeoff procedure."""
    def __init__(self, sourceObject=None):
        IAgAvtrProcedureTakeoff.__init__(self, sourceObject)
        IAgAvtrProcedure.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrProcedureTakeoff._private_init(self, intf)
        IAgAvtrProcedure._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrProcedureTakeoff._get_property(self, attrname) is not None: found_prop = IAgAvtrProcedureTakeoff._get_property(self, attrname)
        if IAgAvtrProcedure._get_property(self, attrname) is not None: found_prop = IAgAvtrProcedure._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrProcedureTakeoff.")

agcls.AgClassCatalog.add_catalog_entry("{52f322eb-31ca-4026-910d-ce46cc0830ee}", AgAvtrProcedureTakeoff)


class AgAvtrProcedureCollection(IAgAvtrProcedureCollection):
    """Class defining the collection of procedures in the phase of an Aviator mission."""
    def __init__(self, sourceObject=None):
        IAgAvtrProcedureCollection.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrProcedureCollection._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrProcedureCollection._get_property(self, attrname) is not None: found_prop = IAgAvtrProcedureCollection._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrProcedureCollection.")

agcls.AgClassCatalog.add_catalog_entry("{02be4f36-f12f-4df0-86f4-3740e53fafe9}", AgAvtrProcedureCollection)


class AgAvtrPhase(IAgAvtrPhase):
    """Class defining a phase in an Aviator mission."""
    def __init__(self, sourceObject=None):
        IAgAvtrPhase.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrPhase._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrPhase._get_property(self, attrname) is not None: found_prop = IAgAvtrPhase._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrPhase.")

agcls.AgClassCatalog.add_catalog_entry("{ff7ca84a-39d9-49ee-9629-0e3d46183fbf}", AgAvtrPhase)


class AgAvtrPhaseCollection(IAgAvtrPhaseCollection):
    """Class defining the collection of phases."""
    def __init__(self, sourceObject=None):
        IAgAvtrPhaseCollection.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrPhaseCollection._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrPhaseCollection._get_property(self, attrname) is not None: found_prop = IAgAvtrPhaseCollection._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrPhaseCollection.")

agcls.AgClassCatalog.add_catalog_entry("{6518b03b-1889-4b4e-86d0-403939b71a21}", AgAvtrPhaseCollection)


class AgAvtrMission(IAgAvtrMission):
    """Class defining the Aviator mission."""
    def __init__(self, sourceObject=None):
        IAgAvtrMission.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrMission._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrMission._get_property(self, attrname) is not None: found_prop = IAgAvtrMission._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrMission.")

agcls.AgClassCatalog.add_catalog_entry("{26840b17-5789-4690-96be-c8637b15f434}", AgAvtrMission)


class AgAvtrPropagator(IAgAvtrPropagator):
    """Class defining the Aviator propagator."""
    def __init__(self, sourceObject=None):
        IAgAvtrPropagator.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrPropagator._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrPropagator._get_property(self, attrname) is not None: found_prop = IAgAvtrPropagator._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrPropagator.")

agcls.AgClassCatalog.add_catalog_entry("{e20f6939-fe05-44eb-a175-d63fa503526f}", AgAvtrPropagator)


class AgAvtrProcedureBasicManeuver(IAgAvtrProcedureBasicManeuver, IAgAvtrProcedure):
    """Class defining a Basic Maneuver procedure."""
    def __init__(self, sourceObject=None):
        IAgAvtrProcedureBasicManeuver.__init__(self, sourceObject)
        IAgAvtrProcedure.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrProcedureBasicManeuver._private_init(self, intf)
        IAgAvtrProcedure._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrProcedureBasicManeuver._get_property(self, attrname) is not None: found_prop = IAgAvtrProcedureBasicManeuver._get_property(self, attrname)
        if IAgAvtrProcedure._get_property(self, attrname) is not None: found_prop = IAgAvtrProcedure._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrProcedureBasicManeuver.")

agcls.AgClassCatalog.add_catalog_entry("{7eb66528-bec8-4b78-a9c7-45333edbda52}", AgAvtrProcedureBasicManeuver)


class AgAvtrBasicManeuverStrategyWeave(IAgAvtrBasicManeuverStrategyWeave, IAgAvtrBasicManeuverStrategy):
    """Class defining Weave strategy for a Basic Maneuver procedure."""
    def __init__(self, sourceObject=None):
        IAgAvtrBasicManeuverStrategyWeave.__init__(self, sourceObject)
        IAgAvtrBasicManeuverStrategy.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrBasicManeuverStrategyWeave._private_init(self, intf)
        IAgAvtrBasicManeuverStrategy._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrBasicManeuverStrategyWeave._get_property(self, attrname) is not None: found_prop = IAgAvtrBasicManeuverStrategyWeave._get_property(self, attrname)
        if IAgAvtrBasicManeuverStrategy._get_property(self, attrname) is not None: found_prop = IAgAvtrBasicManeuverStrategy._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrBasicManeuverStrategyWeave.")

agcls.AgClassCatalog.add_catalog_entry("{46876894-f405-41cc-b071-9368b2d615f8}", AgAvtrBasicManeuverStrategyWeave)


class AgAvtrProcedureTimeOptions(IAgAvtrProcedureTimeOptions):
    """Class defining the time options for the current procedure."""
    def __init__(self, sourceObject=None):
        IAgAvtrProcedureTimeOptions.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrProcedureTimeOptions._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrProcedureTimeOptions._get_property(self, attrname) is not None: found_prop = IAgAvtrProcedureTimeOptions._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrProcedureTimeOptions.")

agcls.AgClassCatalog.add_catalog_entry("{8f9d3e7e-4531-42b5-b066-44a87d6afc8c}", AgAvtrProcedureTimeOptions)


class AgAvtrCalculationOptions(IAgAvtrCalculationOptions):
    """Class defining the calculation options for a procedure or phase."""
    def __init__(self, sourceObject=None):
        IAgAvtrCalculationOptions.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrCalculationOptions._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrCalculationOptions._get_property(self, attrname) is not None: found_prop = IAgAvtrCalculationOptions._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrCalculationOptions.")

agcls.AgClassCatalog.add_catalog_entry("{0538ece7-c599-4fc2-9d5b-3750f6712233}", AgAvtrCalculationOptions)


class AgAvtrAircraftCategory(IAgAvtrAircraftCategory):
    """Class defining the aircraft category in the Aviator catalog."""
    def __init__(self, sourceObject=None):
        IAgAvtrAircraftCategory.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrAircraftCategory._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrAircraftCategory._get_property(self, attrname) is not None: found_prop = IAgAvtrAircraftCategory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrAircraftCategory.")

agcls.AgClassCatalog.add_catalog_entry("{7c68c433-7123-45ec-9e3d-3bc4d999c6f3}", AgAvtrAircraftCategory)


class AgAvtrCatalog(IAgAvtrCatalog):
    """Class defining the Aviator Catalog."""
    def __init__(self, sourceObject=None):
        IAgAvtrCatalog.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrCatalog._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrCatalog._get_property(self, attrname) is not None: found_prop = IAgAvtrCatalog._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrCatalog.")

agcls.AgClassCatalog.add_catalog_entry("{3ac28f35-5412-4419-ac35-24dfd086a210}", AgAvtrCatalog)


class AgAvtrAircraft(IAgAvtrAircraft, IAgAvtrVehicle, IAgAvtrCatalogItem):
    """Class defining an aircraft in Aviator."""
    def __init__(self, sourceObject=None):
        IAgAvtrAircraft.__init__(self, sourceObject)
        IAgAvtrVehicle.__init__(self, sourceObject)
        IAgAvtrCatalogItem.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrAircraft._private_init(self, intf)
        IAgAvtrVehicle._private_init(self, intf)
        IAgAvtrCatalogItem._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrAircraft._get_property(self, attrname) is not None: found_prop = IAgAvtrAircraft._get_property(self, attrname)
        if IAgAvtrVehicle._get_property(self, attrname) is not None: found_prop = IAgAvtrVehicle._get_property(self, attrname)
        if IAgAvtrCatalogItem._get_property(self, attrname) is not None: found_prop = IAgAvtrCatalogItem._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrAircraft.")

agcls.AgClassCatalog.add_catalog_entry("{063a922a-36a4-492c-8b6b-7b9cd7c29e8d}", AgAvtrAircraft)


class AgAvtrMissile(IAgAvtrMissile, IAgAvtrVehicle, IAgAvtrCatalogItem):
    """Class defining a missile in Aviator."""
    def __init__(self, sourceObject=None):
        IAgAvtrMissile.__init__(self, sourceObject)
        IAgAvtrVehicle.__init__(self, sourceObject)
        IAgAvtrCatalogItem.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrMissile._private_init(self, intf)
        IAgAvtrVehicle._private_init(self, intf)
        IAgAvtrCatalogItem._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrMissile._get_property(self, attrname) is not None: found_prop = IAgAvtrMissile._get_property(self, attrname)
        if IAgAvtrVehicle._get_property(self, attrname) is not None: found_prop = IAgAvtrVehicle._get_property(self, attrname)
        if IAgAvtrCatalogItem._get_property(self, attrname) is not None: found_prop = IAgAvtrCatalogItem._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrMissile.")

agcls.AgClassCatalog.add_catalog_entry("{4b46d7a8-3e2b-4cd9-a927-2e49e1b9ab5c}", AgAvtrMissile)


class AgAvtrRotorcraft(IAgAvtrRotorcraft, IAgAvtrVehicle, IAgAvtrCatalogItem):
    """Class defining a rotorcraft in Aviator."""
    def __init__(self, sourceObject=None):
        IAgAvtrRotorcraft.__init__(self, sourceObject)
        IAgAvtrVehicle.__init__(self, sourceObject)
        IAgAvtrCatalogItem.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrRotorcraft._private_init(self, intf)
        IAgAvtrVehicle._private_init(self, intf)
        IAgAvtrCatalogItem._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrRotorcraft._get_property(self, attrname) is not None: found_prop = IAgAvtrRotorcraft._get_property(self, attrname)
        if IAgAvtrVehicle._get_property(self, attrname) is not None: found_prop = IAgAvtrVehicle._get_property(self, attrname)
        if IAgAvtrCatalogItem._get_property(self, attrname) is not None: found_prop = IAgAvtrCatalogItem._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrRotorcraft.")

agcls.AgClassCatalog.add_catalog_entry("{a10ff662-0083-473b-90c7-5ff75d3144c9}", AgAvtrRotorcraft)


class AgAvtrRotorcraftAero(IAgAvtrRotorcraftAero):
    """Class defining the aerodynamic options for a rotorcraft."""
    def __init__(self, sourceObject=None):
        IAgAvtrRotorcraftAero.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrRotorcraftAero._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrRotorcraftAero._get_property(self, attrname) is not None: found_prop = IAgAvtrRotorcraftAero._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrRotorcraftAero.")

agcls.AgClassCatalog.add_catalog_entry("{df267da7-689f-48eb-bd92-1bdfebc51435}", AgAvtrRotorcraftAero)


class AgAvtrRotorcraftProp(IAgAvtrRotorcraftProp):
    """Class defining the propulsion options for a rotorcraft."""
    def __init__(self, sourceObject=None):
        IAgAvtrRotorcraftProp.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrRotorcraftProp._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrRotorcraftProp._get_property(self, attrname) is not None: found_prop = IAgAvtrRotorcraftProp._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrRotorcraftProp.")

agcls.AgClassCatalog.add_catalog_entry("{c0734618-529f-4ff2-9a14-3e4bd14cd601}", AgAvtrRotorcraftProp)


class AgAvtrAircraftAcceleration(IAgAvtrAircraftAcceleration, IAgAvtrCatalogItem):
    """Class defining the aircraft acceleration category of an Aviator aircraft."""
    def __init__(self, sourceObject=None):
        IAgAvtrAircraftAcceleration.__init__(self, sourceObject)
        IAgAvtrCatalogItem.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrAircraftAcceleration._private_init(self, intf)
        IAgAvtrCatalogItem._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrAircraftAcceleration._get_property(self, attrname) is not None: found_prop = IAgAvtrAircraftAcceleration._get_property(self, attrname)
        if IAgAvtrCatalogItem._get_property(self, attrname) is not None: found_prop = IAgAvtrCatalogItem._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrAircraftAcceleration.")

agcls.AgClassCatalog.add_catalog_entry("{574f37f4-4889-4c85-baf5-8359e847acfa}", AgAvtrAircraftAcceleration)


class AgAvtrAircraftBasicAccelerationModel(IAgAvtrAircraftBasicAccelerationModel, IAgAvtrPerformanceModel, IAgAvtrCatalogItem):
    """Class defining the basic acceleration performance model for an Aviator aircraft."""
    def __init__(self, sourceObject=None):
        IAgAvtrAircraftBasicAccelerationModel.__init__(self, sourceObject)
        IAgAvtrPerformanceModel.__init__(self, sourceObject)
        IAgAvtrCatalogItem.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrAircraftBasicAccelerationModel._private_init(self, intf)
        IAgAvtrPerformanceModel._private_init(self, intf)
        IAgAvtrCatalogItem._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrAircraftBasicAccelerationModel._get_property(self, attrname) is not None: found_prop = IAgAvtrAircraftBasicAccelerationModel._get_property(self, attrname)
        if IAgAvtrPerformanceModel._get_property(self, attrname) is not None: found_prop = IAgAvtrPerformanceModel._get_property(self, attrname)
        if IAgAvtrCatalogItem._get_property(self, attrname) is not None: found_prop = IAgAvtrCatalogItem._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrAircraftBasicAccelerationModel.")

agcls.AgClassCatalog.add_catalog_entry("{e33469ad-d69d-48a2-9fc0-3fce97a2b98e}", AgAvtrAircraftBasicAccelerationModel)


class AgAvtrAircraftClimb(IAgAvtrAircraftClimb, IAgAvtrCatalogItem):
    """Class defining the aircraft climb category of an Aviator aircraft."""
    def __init__(self, sourceObject=None):
        IAgAvtrAircraftClimb.__init__(self, sourceObject)
        IAgAvtrCatalogItem.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrAircraftClimb._private_init(self, intf)
        IAgAvtrCatalogItem._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrAircraftClimb._get_property(self, attrname) is not None: found_prop = IAgAvtrAircraftClimb._get_property(self, attrname)
        if IAgAvtrCatalogItem._get_property(self, attrname) is not None: found_prop = IAgAvtrCatalogItem._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrAircraftClimb.")

agcls.AgClassCatalog.add_catalog_entry("{2f0086b2-66d4-4df6-9711-ee2524ba1ed0}", AgAvtrAircraftClimb)


class AgAvtrAircraftCruise(IAgAvtrAircraftCruise, IAgAvtrCatalogItem):
    """Class defining the aircraft cruise category of an Aviator aircraft."""
    def __init__(self, sourceObject=None):
        IAgAvtrAircraftCruise.__init__(self, sourceObject)
        IAgAvtrCatalogItem.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrAircraftCruise._private_init(self, intf)
        IAgAvtrCatalogItem._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrAircraftCruise._get_property(self, attrname) is not None: found_prop = IAgAvtrAircraftCruise._get_property(self, attrname)
        if IAgAvtrCatalogItem._get_property(self, attrname) is not None: found_prop = IAgAvtrCatalogItem._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrAircraftCruise.")

agcls.AgClassCatalog.add_catalog_entry("{efe9b334-9261-44bb-9834-8e7207ca6e05}", AgAvtrAircraftCruise)


class AgAvtrAircraftDescent(IAgAvtrAircraftDescent, IAgAvtrCatalogItem):
    """Class defining the aircraft descent category of an Aviator aircraft."""
    def __init__(self, sourceObject=None):
        IAgAvtrAircraftDescent.__init__(self, sourceObject)
        IAgAvtrCatalogItem.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrAircraftDescent._private_init(self, intf)
        IAgAvtrCatalogItem._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrAircraftDescent._get_property(self, attrname) is not None: found_prop = IAgAvtrAircraftDescent._get_property(self, attrname)
        if IAgAvtrCatalogItem._get_property(self, attrname) is not None: found_prop = IAgAvtrCatalogItem._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrAircraftDescent.")

agcls.AgClassCatalog.add_catalog_entry("{d76fa881-77b3-486a-976c-8184e9cb91fd}", AgAvtrAircraftDescent)


class AgAvtrAircraftLanding(IAgAvtrAircraftLanding, IAgAvtrCatalogItem):
    """Class defining the aircraft landing category of an Aviator aircraft."""
    def __init__(self, sourceObject=None):
        IAgAvtrAircraftLanding.__init__(self, sourceObject)
        IAgAvtrCatalogItem.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrAircraftLanding._private_init(self, intf)
        IAgAvtrCatalogItem._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrAircraftLanding._get_property(self, attrname) is not None: found_prop = IAgAvtrAircraftLanding._get_property(self, attrname)
        if IAgAvtrCatalogItem._get_property(self, attrname) is not None: found_prop = IAgAvtrCatalogItem._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrAircraftLanding.")

agcls.AgClassCatalog.add_catalog_entry("{8371480b-53cf-41ca-b749-41623f6d380a}", AgAvtrAircraftLanding)


class AgAvtrAircraftTakeoff(IAgAvtrAircraftTakeoff, IAgAvtrCatalogItem):
    """Class defining the aircraft takeoff category of an Aviator aircraft."""
    def __init__(self, sourceObject=None):
        IAgAvtrAircraftTakeoff.__init__(self, sourceObject)
        IAgAvtrCatalogItem.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrAircraftTakeoff._private_init(self, intf)
        IAgAvtrCatalogItem._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrAircraftTakeoff._get_property(self, attrname) is not None: found_prop = IAgAvtrAircraftTakeoff._get_property(self, attrname)
        if IAgAvtrCatalogItem._get_property(self, attrname) is not None: found_prop = IAgAvtrCatalogItem._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrAircraftTakeoff.")

agcls.AgClassCatalog.add_catalog_entry("{aeef7451-7456-4d8c-aabf-147a466149cd}", AgAvtrAircraftTakeoff)


class AgAvtrAircraftBasicClimbModel(IAgAvtrAircraftBasicClimbModel, IAgAvtrPerformanceModel, IAgAvtrCatalogItem):
    """Class defining the basic climb performance model for an Aviator aircraft."""
    def __init__(self, sourceObject=None):
        IAgAvtrAircraftBasicClimbModel.__init__(self, sourceObject)
        IAgAvtrPerformanceModel.__init__(self, sourceObject)
        IAgAvtrCatalogItem.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrAircraftBasicClimbModel._private_init(self, intf)
        IAgAvtrPerformanceModel._private_init(self, intf)
        IAgAvtrCatalogItem._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrAircraftBasicClimbModel._get_property(self, attrname) is not None: found_prop = IAgAvtrAircraftBasicClimbModel._get_property(self, attrname)
        if IAgAvtrPerformanceModel._get_property(self, attrname) is not None: found_prop = IAgAvtrPerformanceModel._get_property(self, attrname)
        if IAgAvtrCatalogItem._get_property(self, attrname) is not None: found_prop = IAgAvtrCatalogItem._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrAircraftBasicClimbModel.")

agcls.AgClassCatalog.add_catalog_entry("{2950de29-1009-4c2a-8db5-378b41c6d48d}", AgAvtrAircraftBasicClimbModel)


class AgAvtrAircraftAdvClimbModel(IAgAvtrAircraftAdvClimbModel, IAgAvtrPerformanceModel, IAgAvtrCatalogItem):
    """Class defining the advanced climb performance model for an Aviator aircraft."""
    def __init__(self, sourceObject=None):
        IAgAvtrAircraftAdvClimbModel.__init__(self, sourceObject)
        IAgAvtrPerformanceModel.__init__(self, sourceObject)
        IAgAvtrCatalogItem.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrAircraftAdvClimbModel._private_init(self, intf)
        IAgAvtrPerformanceModel._private_init(self, intf)
        IAgAvtrCatalogItem._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrAircraftAdvClimbModel._get_property(self, attrname) is not None: found_prop = IAgAvtrAircraftAdvClimbModel._get_property(self, attrname)
        if IAgAvtrPerformanceModel._get_property(self, attrname) is not None: found_prop = IAgAvtrPerformanceModel._get_property(self, attrname)
        if IAgAvtrCatalogItem._get_property(self, attrname) is not None: found_prop = IAgAvtrCatalogItem._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrAircraftAdvClimbModel.")

agcls.AgClassCatalog.add_catalog_entry("{C1C87503-2B8E-41BC-8BA9-02B7CC1E02C2}", AgAvtrAircraftAdvClimbModel)


class AgAvtrAircraftBasicCruiseModel(IAgAvtrAircraftBasicCruiseModel, IAgAvtrPerformanceModel, IAgAvtrCatalogItem):
    """Class defining the basic cruise performance model for an Aviator aircraft."""
    def __init__(self, sourceObject=None):
        IAgAvtrAircraftBasicCruiseModel.__init__(self, sourceObject)
        IAgAvtrPerformanceModel.__init__(self, sourceObject)
        IAgAvtrCatalogItem.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrAircraftBasicCruiseModel._private_init(self, intf)
        IAgAvtrPerformanceModel._private_init(self, intf)
        IAgAvtrCatalogItem._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrAircraftBasicCruiseModel._get_property(self, attrname) is not None: found_prop = IAgAvtrAircraftBasicCruiseModel._get_property(self, attrname)
        if IAgAvtrPerformanceModel._get_property(self, attrname) is not None: found_prop = IAgAvtrPerformanceModel._get_property(self, attrname)
        if IAgAvtrCatalogItem._get_property(self, attrname) is not None: found_prop = IAgAvtrCatalogItem._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrAircraftBasicCruiseModel.")

agcls.AgClassCatalog.add_catalog_entry("{c6090ace-e557-4bef-adf3-2e56387015a8}", AgAvtrAircraftBasicCruiseModel)


class AgAvtrAircraftAdvCruiseModel(IAgAvtrAircraftAdvCruiseModel, IAgAvtrPerformanceModel, IAgAvtrCatalogItem):
    """Class defining the advanced cruise performance model for an Aviator aircraft."""
    def __init__(self, sourceObject=None):
        IAgAvtrAircraftAdvCruiseModel.__init__(self, sourceObject)
        IAgAvtrPerformanceModel.__init__(self, sourceObject)
        IAgAvtrCatalogItem.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrAircraftAdvCruiseModel._private_init(self, intf)
        IAgAvtrPerformanceModel._private_init(self, intf)
        IAgAvtrCatalogItem._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrAircraftAdvCruiseModel._get_property(self, attrname) is not None: found_prop = IAgAvtrAircraftAdvCruiseModel._get_property(self, attrname)
        if IAgAvtrPerformanceModel._get_property(self, attrname) is not None: found_prop = IAgAvtrPerformanceModel._get_property(self, attrname)
        if IAgAvtrCatalogItem._get_property(self, attrname) is not None: found_prop = IAgAvtrCatalogItem._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrAircraftAdvCruiseModel.")

agcls.AgClassCatalog.add_catalog_entry("{ead08117-2561-4bb7-a82b-86057f506090}", AgAvtrAircraftAdvCruiseModel)


class AgAvtrAircraftBasicDescentModel(IAgAvtrAircraftBasicDescentModel, IAgAvtrPerformanceModel, IAgAvtrCatalogItem):
    """Class defining the basic descent performance model for an Aviator aircraft."""
    def __init__(self, sourceObject=None):
        IAgAvtrAircraftBasicDescentModel.__init__(self, sourceObject)
        IAgAvtrPerformanceModel.__init__(self, sourceObject)
        IAgAvtrCatalogItem.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrAircraftBasicDescentModel._private_init(self, intf)
        IAgAvtrPerformanceModel._private_init(self, intf)
        IAgAvtrCatalogItem._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrAircraftBasicDescentModel._get_property(self, attrname) is not None: found_prop = IAgAvtrAircraftBasicDescentModel._get_property(self, attrname)
        if IAgAvtrPerformanceModel._get_property(self, attrname) is not None: found_prop = IAgAvtrPerformanceModel._get_property(self, attrname)
        if IAgAvtrCatalogItem._get_property(self, attrname) is not None: found_prop = IAgAvtrCatalogItem._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrAircraftBasicDescentModel.")

agcls.AgClassCatalog.add_catalog_entry("{30cb8d6f-afe5-4275-8479-4ce73b93a758}", AgAvtrAircraftBasicDescentModel)


class AgAvtrAircraftAdvDescentModel(IAgAvtrAircraftAdvDescentModel, IAgAvtrPerformanceModel, IAgAvtrCatalogItem):
    """Class defining the advanced descent performance model for an Aviator aircraft."""
    def __init__(self, sourceObject=None):
        IAgAvtrAircraftAdvDescentModel.__init__(self, sourceObject)
        IAgAvtrPerformanceModel.__init__(self, sourceObject)
        IAgAvtrCatalogItem.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrAircraftAdvDescentModel._private_init(self, intf)
        IAgAvtrPerformanceModel._private_init(self, intf)
        IAgAvtrCatalogItem._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrAircraftAdvDescentModel._get_property(self, attrname) is not None: found_prop = IAgAvtrAircraftAdvDescentModel._get_property(self, attrname)
        if IAgAvtrPerformanceModel._get_property(self, attrname) is not None: found_prop = IAgAvtrPerformanceModel._get_property(self, attrname)
        if IAgAvtrCatalogItem._get_property(self, attrname) is not None: found_prop = IAgAvtrCatalogItem._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrAircraftAdvDescentModel.")

agcls.AgClassCatalog.add_catalog_entry("{40ee1832-9491-49e5-bd27-40d40fefb326}", AgAvtrAircraftAdvDescentModel)


class AgAvtrAircraftBasicTakeoffModel(IAgAvtrAircraftBasicTakeoffModel, IAgAvtrPerformanceModel, IAgAvtrCatalogItem):
    """Class defining the basic takeoff performance model for an Aviator aircraft."""
    def __init__(self, sourceObject=None):
        IAgAvtrAircraftBasicTakeoffModel.__init__(self, sourceObject)
        IAgAvtrPerformanceModel.__init__(self, sourceObject)
        IAgAvtrCatalogItem.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrAircraftBasicTakeoffModel._private_init(self, intf)
        IAgAvtrPerformanceModel._private_init(self, intf)
        IAgAvtrCatalogItem._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrAircraftBasicTakeoffModel._get_property(self, attrname) is not None: found_prop = IAgAvtrAircraftBasicTakeoffModel._get_property(self, attrname)
        if IAgAvtrPerformanceModel._get_property(self, attrname) is not None: found_prop = IAgAvtrPerformanceModel._get_property(self, attrname)
        if IAgAvtrCatalogItem._get_property(self, attrname) is not None: found_prop = IAgAvtrCatalogItem._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrAircraftBasicTakeoffModel.")

agcls.AgClassCatalog.add_catalog_entry("{3d9380c9-1aa0-4dcf-86bb-ded3b6b656e8}", AgAvtrAircraftBasicTakeoffModel)


class AgAvtrAircraftAdvTakeoffModel(IAgAvtrAircraftAdvTakeoffModel, IAgAvtrPerformanceModel, IAgAvtrCatalogItem):
    """Class defining the advanced takeoff performance model for an Aviator aircraft."""
    def __init__(self, sourceObject=None):
        IAgAvtrAircraftAdvTakeoffModel.__init__(self, sourceObject)
        IAgAvtrPerformanceModel.__init__(self, sourceObject)
        IAgAvtrCatalogItem.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrAircraftAdvTakeoffModel._private_init(self, intf)
        IAgAvtrPerformanceModel._private_init(self, intf)
        IAgAvtrCatalogItem._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrAircraftAdvTakeoffModel._get_property(self, attrname) is not None: found_prop = IAgAvtrAircraftAdvTakeoffModel._get_property(self, attrname)
        if IAgAvtrPerformanceModel._get_property(self, attrname) is not None: found_prop = IAgAvtrPerformanceModel._get_property(self, attrname)
        if IAgAvtrCatalogItem._get_property(self, attrname) is not None: found_prop = IAgAvtrCatalogItem._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrAircraftAdvTakeoffModel.")

agcls.AgClassCatalog.add_catalog_entry("{fc3190a3-fbeb-46bb-8395-22405fbf5b80}", AgAvtrAircraftAdvTakeoffModel)


class AgAvtrAircraftBasicLandingModel(IAgAvtrAircraftBasicLandingModel, IAgAvtrPerformanceModel, IAgAvtrCatalogItem):
    """Class defining the basic landing performance model for an Aviator aircraft."""
    def __init__(self, sourceObject=None):
        IAgAvtrAircraftBasicLandingModel.__init__(self, sourceObject)
        IAgAvtrPerformanceModel.__init__(self, sourceObject)
        IAgAvtrCatalogItem.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrAircraftBasicLandingModel._private_init(self, intf)
        IAgAvtrPerformanceModel._private_init(self, intf)
        IAgAvtrCatalogItem._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrAircraftBasicLandingModel._get_property(self, attrname) is not None: found_prop = IAgAvtrAircraftBasicLandingModel._get_property(self, attrname)
        if IAgAvtrPerformanceModel._get_property(self, attrname) is not None: found_prop = IAgAvtrPerformanceModel._get_property(self, attrname)
        if IAgAvtrCatalogItem._get_property(self, attrname) is not None: found_prop = IAgAvtrCatalogItem._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrAircraftBasicLandingModel.")

agcls.AgClassCatalog.add_catalog_entry("{bd4e5100-7e2c-40ca-815a-02a618a4321d}", AgAvtrAircraftBasicLandingModel)


class AgAvtrAircraftAdvLandingModel(IAgAvtrAircraftAdvLandingModel, IAgAvtrPerformanceModel, IAgAvtrCatalogItem):
    """Class defining the advanced landing performance model for an Aviator aircraft."""
    def __init__(self, sourceObject=None):
        IAgAvtrAircraftAdvLandingModel.__init__(self, sourceObject)
        IAgAvtrPerformanceModel.__init__(self, sourceObject)
        IAgAvtrCatalogItem.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrAircraftAdvLandingModel._private_init(self, intf)
        IAgAvtrPerformanceModel._private_init(self, intf)
        IAgAvtrCatalogItem._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrAircraftAdvLandingModel._get_property(self, attrname) is not None: found_prop = IAgAvtrAircraftAdvLandingModel._get_property(self, attrname)
        if IAgAvtrPerformanceModel._get_property(self, attrname) is not None: found_prop = IAgAvtrPerformanceModel._get_property(self, attrname)
        if IAgAvtrCatalogItem._get_property(self, attrname) is not None: found_prop = IAgAvtrCatalogItem._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrAircraftAdvLandingModel.")

agcls.AgClassCatalog.add_catalog_entry("{fb7534d7-1f9b-4133-9712-66728255532b}", AgAvtrAircraftAdvLandingModel)


class AgAvtrAirportCategory(IAgAvtrAirportCategory):
    """Class defining the airport category in the Aviator catalog."""
    def __init__(self, sourceObject=None):
        IAgAvtrAirportCategory.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrAirportCategory._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrAirportCategory._get_property(self, attrname) is not None: found_prop = IAgAvtrAirportCategory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrAirportCategory.")

agcls.AgClassCatalog.add_catalog_entry("{d497aeeb-3c6a-44ad-9f1a-6af1504c9a99}", AgAvtrAirportCategory)


class AgAvtrARINC424Airport(IAgAvtrARINC424Item, IAgAvtrCatalogAirport, IAgAvtrCatalogWaypoint, IAgAvtrCatalogItem):
    """Class defining an ARINC424 Airport."""
    def __init__(self, sourceObject=None):
        IAgAvtrARINC424Item.__init__(self, sourceObject)
        IAgAvtrCatalogAirport.__init__(self, sourceObject)
        IAgAvtrCatalogWaypoint.__init__(self, sourceObject)
        IAgAvtrCatalogItem.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrARINC424Item._private_init(self, intf)
        IAgAvtrCatalogAirport._private_init(self, intf)
        IAgAvtrCatalogWaypoint._private_init(self, intf)
        IAgAvtrCatalogItem._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrARINC424Item._get_property(self, attrname) is not None: found_prop = IAgAvtrARINC424Item._get_property(self, attrname)
        if IAgAvtrCatalogAirport._get_property(self, attrname) is not None: found_prop = IAgAvtrCatalogAirport._get_property(self, attrname)
        if IAgAvtrCatalogWaypoint._get_property(self, attrname) is not None: found_prop = IAgAvtrCatalogWaypoint._get_property(self, attrname)
        if IAgAvtrCatalogItem._get_property(self, attrname) is not None: found_prop = IAgAvtrCatalogItem._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrARINC424Airport.")

agcls.AgClassCatalog.add_catalog_entry("{1d942d58-5b4d-4784-8ec9-435008352423}", AgAvtrARINC424Airport)


class AgAvtrARINC424Runway(IAgAvtrARINC424Runway, IAgAvtrARINC424Item, IAgAvtrCatalogRunway, IAgAvtrCatalogWaypoint, IAgAvtrCatalogItem):
    """Class defining an ARINC424 Runway."""
    def __init__(self, sourceObject=None):
        IAgAvtrARINC424Runway.__init__(self, sourceObject)
        IAgAvtrARINC424Item.__init__(self, sourceObject)
        IAgAvtrCatalogRunway.__init__(self, sourceObject)
        IAgAvtrCatalogWaypoint.__init__(self, sourceObject)
        IAgAvtrCatalogItem.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrARINC424Runway._private_init(self, intf)
        IAgAvtrARINC424Item._private_init(self, intf)
        IAgAvtrCatalogRunway._private_init(self, intf)
        IAgAvtrCatalogWaypoint._private_init(self, intf)
        IAgAvtrCatalogItem._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrARINC424Runway._get_property(self, attrname) is not None: found_prop = IAgAvtrARINC424Runway._get_property(self, attrname)
        if IAgAvtrARINC424Item._get_property(self, attrname) is not None: found_prop = IAgAvtrARINC424Item._get_property(self, attrname)
        if IAgAvtrCatalogRunway._get_property(self, attrname) is not None: found_prop = IAgAvtrCatalogRunway._get_property(self, attrname)
        if IAgAvtrCatalogWaypoint._get_property(self, attrname) is not None: found_prop = IAgAvtrCatalogWaypoint._get_property(self, attrname)
        if IAgAvtrCatalogItem._get_property(self, attrname) is not None: found_prop = IAgAvtrCatalogItem._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrARINC424Runway.")

agcls.AgClassCatalog.add_catalog_entry("{20c6f0ee-a2d5-4447-8d9a-3b67fe759266}", AgAvtrARINC424Runway)


class AgAvtrDAFIFRunway(IAgAvtrDAFIFItem, IAgAvtrCatalogRunway, IAgAvtrCatalogWaypoint, IAgAvtrCatalogItem):
    """Class defining an DAFIF Runway."""
    def __init__(self, sourceObject=None):
        IAgAvtrDAFIFItem.__init__(self, sourceObject)
        IAgAvtrCatalogRunway.__init__(self, sourceObject)
        IAgAvtrCatalogWaypoint.__init__(self, sourceObject)
        IAgAvtrCatalogItem.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrDAFIFItem._private_init(self, intf)
        IAgAvtrCatalogRunway._private_init(self, intf)
        IAgAvtrCatalogWaypoint._private_init(self, intf)
        IAgAvtrCatalogItem._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrDAFIFItem._get_property(self, attrname) is not None: found_prop = IAgAvtrDAFIFItem._get_property(self, attrname)
        if IAgAvtrCatalogRunway._get_property(self, attrname) is not None: found_prop = IAgAvtrCatalogRunway._get_property(self, attrname)
        if IAgAvtrCatalogWaypoint._get_property(self, attrname) is not None: found_prop = IAgAvtrCatalogWaypoint._get_property(self, attrname)
        if IAgAvtrCatalogItem._get_property(self, attrname) is not None: found_prop = IAgAvtrCatalogItem._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrDAFIFRunway.")

agcls.AgClassCatalog.add_catalog_entry("{95867fe1-39fa-41cf-aa24-c6068c2cd86a}", AgAvtrDAFIFRunway)


class AgAvtrDAFIFHelipad(IAgAvtrDAFIFItem, IAgAvtrCatalogVTOLPoint, IAgAvtrCatalogWaypoint, IAgAvtrCatalogItem):
    """Class defining an DAFIF Helipad."""
    def __init__(self, sourceObject=None):
        IAgAvtrDAFIFItem.__init__(self, sourceObject)
        IAgAvtrCatalogVTOLPoint.__init__(self, sourceObject)
        IAgAvtrCatalogWaypoint.__init__(self, sourceObject)
        IAgAvtrCatalogItem.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrDAFIFItem._private_init(self, intf)
        IAgAvtrCatalogVTOLPoint._private_init(self, intf)
        IAgAvtrCatalogWaypoint._private_init(self, intf)
        IAgAvtrCatalogItem._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrDAFIFItem._get_property(self, attrname) is not None: found_prop = IAgAvtrDAFIFItem._get_property(self, attrname)
        if IAgAvtrCatalogVTOLPoint._get_property(self, attrname) is not None: found_prop = IAgAvtrCatalogVTOLPoint._get_property(self, attrname)
        if IAgAvtrCatalogWaypoint._get_property(self, attrname) is not None: found_prop = IAgAvtrCatalogWaypoint._get_property(self, attrname)
        if IAgAvtrCatalogItem._get_property(self, attrname) is not None: found_prop = IAgAvtrCatalogItem._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrDAFIFHelipad.")

agcls.AgClassCatalog.add_catalog_entry("{6973673c-7c51-48c2-8931-614aa2ab1da5}", AgAvtrDAFIFHelipad)


class AgAvtrDAFIFWaypoint(IAgAvtrDAFIFItem, IAgAvtrCatalogWaypoint, IAgAvtrCatalogItem):
    """Class defining an DAFIF Waypoint."""
    def __init__(self, sourceObject=None):
        IAgAvtrDAFIFItem.__init__(self, sourceObject)
        IAgAvtrCatalogWaypoint.__init__(self, sourceObject)
        IAgAvtrCatalogItem.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrDAFIFItem._private_init(self, intf)
        IAgAvtrCatalogWaypoint._private_init(self, intf)
        IAgAvtrCatalogItem._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrDAFIFItem._get_property(self, attrname) is not None: found_prop = IAgAvtrDAFIFItem._get_property(self, attrname)
        if IAgAvtrCatalogWaypoint._get_property(self, attrname) is not None: found_prop = IAgAvtrCatalogWaypoint._get_property(self, attrname)
        if IAgAvtrCatalogItem._get_property(self, attrname) is not None: found_prop = IAgAvtrCatalogItem._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrDAFIFWaypoint.")

agcls.AgClassCatalog.add_catalog_entry("{62195e59-a4fc-40f9-ab7d-4229c79c0e8f}", AgAvtrDAFIFWaypoint)


class AgAvtrRunwayCategory(IAgAvtrRunwayCategory):
    """Class defining the runway category in the Aviator catalog."""
    def __init__(self, sourceObject=None):
        IAgAvtrRunwayCategory.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrRunwayCategory._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrRunwayCategory._get_property(self, attrname) is not None: found_prop = IAgAvtrRunwayCategory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrRunwayCategory.")

agcls.AgClassCatalog.add_catalog_entry("{69b1b664-f8d4-4be5-bfe9-8760573b2c72}", AgAvtrRunwayCategory)


class AgAvtrUserRunwaySource(IAgAvtrUserRunwaySource, IAgAvtrCatalogSource):
    """Class defining the user runways in the Aviator catalog."""
    def __init__(self, sourceObject=None):
        IAgAvtrUserRunwaySource.__init__(self, sourceObject)
        IAgAvtrCatalogSource.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrUserRunwaySource._private_init(self, intf)
        IAgAvtrCatalogSource._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrUserRunwaySource._get_property(self, attrname) is not None: found_prop = IAgAvtrUserRunwaySource._get_property(self, attrname)
        if IAgAvtrCatalogSource._get_property(self, attrname) is not None: found_prop = IAgAvtrCatalogSource._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrUserRunwaySource.")

agcls.AgClassCatalog.add_catalog_entry("{7b8c1764-ce59-4e35-940a-24d99c2953ef}", AgAvtrUserRunwaySource)


class AgAvtrUserRunway(IAgAvtrUserRunway, IAgAvtrCatalogRunway, IAgAvtrCatalogItem, IAgAvtrCatalogWaypoint):
    """Class defining the user runway in the Aviator catalog."""
    def __init__(self, sourceObject=None):
        IAgAvtrUserRunway.__init__(self, sourceObject)
        IAgAvtrCatalogRunway.__init__(self, sourceObject)
        IAgAvtrCatalogItem.__init__(self, sourceObject)
        IAgAvtrCatalogWaypoint.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrUserRunway._private_init(self, intf)
        IAgAvtrCatalogRunway._private_init(self, intf)
        IAgAvtrCatalogItem._private_init(self, intf)
        IAgAvtrCatalogWaypoint._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrUserRunway._get_property(self, attrname) is not None: found_prop = IAgAvtrUserRunway._get_property(self, attrname)
        if IAgAvtrCatalogRunway._get_property(self, attrname) is not None: found_prop = IAgAvtrCatalogRunway._get_property(self, attrname)
        if IAgAvtrCatalogItem._get_property(self, attrname) is not None: found_prop = IAgAvtrCatalogItem._get_property(self, attrname)
        if IAgAvtrCatalogWaypoint._get_property(self, attrname) is not None: found_prop = IAgAvtrCatalogWaypoint._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrUserRunway.")

agcls.AgClassCatalog.add_catalog_entry("{693bdacd-4c8d-4efd-bb23-3f14c83d3b04}", AgAvtrUserRunway)


class AgAvtrAltitudeMSLOptions(IAgAvtrAltitudeMSLOptions):
    """Class defining the altitude MSL options in a procedure."""
    def __init__(self, sourceObject=None):
        IAgAvtrAltitudeMSLOptions.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrAltitudeMSLOptions._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrAltitudeMSLOptions._get_property(self, attrname) is not None: found_prop = IAgAvtrAltitudeMSLOptions._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrAltitudeMSLOptions.")

agcls.AgClassCatalog.add_catalog_entry("{c866a6dd-1070-4162-bff2-4339ab28f6b2}", AgAvtrAltitudeMSLOptions)


class AgAvtrAltitudeOptions(IAgAvtrAltitudeOptions):
    """Class defining the altitude options in a procedure."""
    def __init__(self, sourceObject=None):
        IAgAvtrAltitudeOptions.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrAltitudeOptions._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrAltitudeOptions._get_property(self, attrname) is not None: found_prop = IAgAvtrAltitudeOptions._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrAltitudeOptions.")

agcls.AgClassCatalog.add_catalog_entry("{4d5d82b7-e342-4dcb-9af1-7cbfa909fc23}", AgAvtrAltitudeOptions)


class AgAvtrArcAltitudeOptions(IAgAvtrArcAltitudeOptions):
    """Class defining the altitude options for an arc procedure."""
    def __init__(self, sourceObject=None):
        IAgAvtrArcAltitudeOptions.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrArcAltitudeOptions._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrArcAltitudeOptions._get_property(self, attrname) is not None: found_prop = IAgAvtrArcAltitudeOptions._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrArcAltitudeOptions.")

agcls.AgClassCatalog.add_catalog_entry("{1c4f7491-db5d-4e52-ba8e-e64ddfc687fe}", AgAvtrArcAltitudeOptions)


class AgAvtrArcAltitudeAndDelayOptions(IAgAvtrArcAltitudeAndDelayOptions):
    """Class defining the altitude and delay options for an arc procedure."""
    def __init__(self, sourceObject=None):
        IAgAvtrArcAltitudeAndDelayOptions.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrArcAltitudeAndDelayOptions._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrArcAltitudeAndDelayOptions._get_property(self, attrname) is not None: found_prop = IAgAvtrArcAltitudeAndDelayOptions._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrArcAltitudeAndDelayOptions.")

agcls.AgClassCatalog.add_catalog_entry("{fdf04fa7-1588-4e15-a0ab-37b9586c878f}", AgAvtrArcAltitudeAndDelayOptions)


class AgAvtrArcOptions(IAgAvtrArcOptions):
    """Class defining the arc options for a procedure."""
    def __init__(self, sourceObject=None):
        IAgAvtrArcOptions.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrArcOptions._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrArcOptions._get_property(self, attrname) is not None: found_prop = IAgAvtrArcOptions._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrArcOptions.")

agcls.AgClassCatalog.add_catalog_entry("{41af67f7-489f-452e-858a-bd8cc0bf782d}", AgAvtrArcOptions)


class AgAvtrAltitudeMSLAndLevelOffOptions(IAgAvtrAltitudeMSLAndLevelOffOptions):
    """Class defining the altitude MSL and Level off options in a procedure."""
    def __init__(self, sourceObject=None):
        IAgAvtrAltitudeMSLAndLevelOffOptions.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrAltitudeMSLAndLevelOffOptions._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrAltitudeMSLAndLevelOffOptions._get_property(self, attrname) is not None: found_prop = IAgAvtrAltitudeMSLAndLevelOffOptions._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrAltitudeMSLAndLevelOffOptions.")

agcls.AgClassCatalog.add_catalog_entry("{0a38e533-78b2-402b-aed6-0ff04a62fcce}", AgAvtrAltitudeMSLAndLevelOffOptions)


class AgAvtrCruiseAirspeedOptions(IAgAvtrCruiseAirspeedOptions):
    """Class defining the cruise airspeed options in a procedure."""
    def __init__(self, sourceObject=None):
        IAgAvtrCruiseAirspeedOptions.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrCruiseAirspeedOptions._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrCruiseAirspeedOptions._get_property(self, attrname) is not None: found_prop = IAgAvtrCruiseAirspeedOptions._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrCruiseAirspeedOptions.")

agcls.AgClassCatalog.add_catalog_entry("{05251788-e43e-4d91-84ad-3d2bcfc2087a}", AgAvtrCruiseAirspeedOptions)


class AgAvtrCruiseAirspeedProfile(IAgAvtrCruiseAirspeedProfile):
    """Class defining the cruise profile options in a procedure."""
    def __init__(self, sourceObject=None):
        IAgAvtrCruiseAirspeedProfile.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrCruiseAirspeedProfile._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrCruiseAirspeedProfile._get_property(self, attrname) is not None: found_prop = IAgAvtrCruiseAirspeedProfile._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrCruiseAirspeedProfile.")

agcls.AgClassCatalog.add_catalog_entry("{5afc99d6-3a02-45f9-b6f5-87690d8f9702}", AgAvtrCruiseAirspeedProfile)


class AgAvtrCruiseAirspeedAndProfileOptions(IAgAvtrCruiseAirspeedAndProfileOptions):
    """Class defining the cruise airspeed and profile options in a procedure."""
    def __init__(self, sourceObject=None):
        IAgAvtrCruiseAirspeedAndProfileOptions.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrCruiseAirspeedAndProfileOptions._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrCruiseAirspeedAndProfileOptions._get_property(self, attrname) is not None: found_prop = IAgAvtrCruiseAirspeedAndProfileOptions._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrCruiseAirspeedAndProfileOptions.")

agcls.AgClassCatalog.add_catalog_entry("{ee439155-cd45-45b5-b7f8-eae4f5e51b8e}", AgAvtrCruiseAirspeedAndProfileOptions)


class AgAvtrLandingCruiseAirspeedAndProfileOptions(IAgAvtrCruiseAirspeedAndProfileOptions):
    """Class defining the cruise airspeed and profile options for a landing procedure."""
    def __init__(self, sourceObject=None):
        IAgAvtrCruiseAirspeedAndProfileOptions.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrCruiseAirspeedAndProfileOptions._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrCruiseAirspeedAndProfileOptions._get_property(self, attrname) is not None: found_prop = IAgAvtrCruiseAirspeedAndProfileOptions._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrLandingCruiseAirspeedAndProfileOptions.")

agcls.AgClassCatalog.add_catalog_entry("{cb47399c-3316-494f-959c-4f84b4c4936c}", AgAvtrLandingCruiseAirspeedAndProfileOptions)


class AgAvtrEnrouteOptions(IAgAvtrEnrouteOptions):
    """Class defining the enroute options in a procedure."""
    def __init__(self, sourceObject=None):
        IAgAvtrEnrouteOptions.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrEnrouteOptions._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrEnrouteOptions._get_property(self, attrname) is not None: found_prop = IAgAvtrEnrouteOptions._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrEnrouteOptions.")

agcls.AgClassCatalog.add_catalog_entry("{cb708621-5036-4dbc-a900-a3b3a3fa7124}", AgAvtrEnrouteOptions)


class AgAvtrEnrouteAndDelayOptions(IAgAvtrEnrouteAndDelayOptions):
    """Class defining the enroute and delay options in a procedure."""
    def __init__(self, sourceObject=None):
        IAgAvtrEnrouteAndDelayOptions.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrEnrouteAndDelayOptions._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrEnrouteAndDelayOptions._get_property(self, attrname) is not None: found_prop = IAgAvtrEnrouteAndDelayOptions._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrEnrouteAndDelayOptions.")

agcls.AgClassCatalog.add_catalog_entry("{fc46b909-c927-4e2d-9d82-79c6980807d8}", AgAvtrEnrouteAndDelayOptions)


class AgAvtrLandingEnrouteOptions(IAgAvtrEnrouteAndDelayOptions):
    """Class defining the enroute options in a landing procedure."""
    def __init__(self, sourceObject=None):
        IAgAvtrEnrouteAndDelayOptions.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrEnrouteAndDelayOptions._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrEnrouteAndDelayOptions._get_property(self, attrname) is not None: found_prop = IAgAvtrEnrouteAndDelayOptions._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrLandingEnrouteOptions.")

agcls.AgClassCatalog.add_catalog_entry("{42ec119b-2661-4c68-b807-a5ed2a3af018}", AgAvtrLandingEnrouteOptions)


class AgAvtrEnrouteTurnDirectionOptions(IAgAvtrEnrouteTurnDirectionOptions):
    """Class defining the enroute turn direction options in a procedure."""
    def __init__(self, sourceObject=None):
        IAgAvtrEnrouteTurnDirectionOptions.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrEnrouteTurnDirectionOptions._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrEnrouteTurnDirectionOptions._get_property(self, attrname) is not None: found_prop = IAgAvtrEnrouteTurnDirectionOptions._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrEnrouteTurnDirectionOptions.")

agcls.AgClassCatalog.add_catalog_entry("{16e895f3-5a65-4caf-960e-691f904ca66c}", AgAvtrEnrouteTurnDirectionOptions)


class AgAvtrNavigationOptions(IAgAvtrNavigationOptions):
    """Class defining the navigation options in a procedure."""
    def __init__(self, sourceObject=None):
        IAgAvtrNavigationOptions.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrNavigationOptions._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrNavigationOptions._get_property(self, attrname) is not None: found_prop = IAgAvtrNavigationOptions._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrNavigationOptions.")

agcls.AgClassCatalog.add_catalog_entry("{ce90add8-b152-4984-b864-0f6e61e680d4}", AgAvtrNavigationOptions)


class AgAvtrVerticalPlaneOptions(IAgAvtrVerticalPlaneOptions):
    """Class defining the vertical plane options in a procedure."""
    def __init__(self, sourceObject=None):
        IAgAvtrVerticalPlaneOptions.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrVerticalPlaneOptions._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrVerticalPlaneOptions._get_property(self, attrname) is not None: found_prop = IAgAvtrVerticalPlaneOptions._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrVerticalPlaneOptions.")

agcls.AgClassCatalog.add_catalog_entry("{a902b408-0141-4280-b6cf-e1cb18dae4f6}", AgAvtrVerticalPlaneOptions)


class AgAvtrArcVerticalPlaneOptions(IAgAvtrArcVerticalPlaneOptions):
    """Class defining the vertical plane options in a procedure."""
    def __init__(self, sourceObject=None):
        IAgAvtrArcVerticalPlaneOptions.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrArcVerticalPlaneOptions._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrArcVerticalPlaneOptions._get_property(self, attrname) is not None: found_prop = IAgAvtrArcVerticalPlaneOptions._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrArcVerticalPlaneOptions.")

agcls.AgClassCatalog.add_catalog_entry("{eae3a835-4897-408f-91dc-59b9a2fbcb5c}", AgAvtrArcVerticalPlaneOptions)


class AgAvtrVerticalPlaneAndFlightPathOptions(IAgAvtrVerticalPlaneAndFlightPathOptions):
    """Class defining the vertical plane options for an arc procedure."""
    def __init__(self, sourceObject=None):
        IAgAvtrVerticalPlaneAndFlightPathOptions.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrVerticalPlaneAndFlightPathOptions._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrVerticalPlaneAndFlightPathOptions._get_property(self, attrname) is not None: found_prop = IAgAvtrVerticalPlaneAndFlightPathOptions._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrVerticalPlaneAndFlightPathOptions.")

agcls.AgClassCatalog.add_catalog_entry("{7db61c31-a562-43b9-b3fa-76dc120bdd74}", AgAvtrVerticalPlaneAndFlightPathOptions)


class AgAvtrLandingVerticalPlaneOptions(IAgAvtrVerticalPlaneOptions):
    """Class defining the vertical plane options in a landing procedure."""
    def __init__(self, sourceObject=None):
        IAgAvtrVerticalPlaneOptions.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrVerticalPlaneOptions._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrVerticalPlaneOptions._get_property(self, attrname) is not None: found_prop = IAgAvtrVerticalPlaneOptions._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrLandingVerticalPlaneOptions.")

agcls.AgClassCatalog.add_catalog_entry("{846a07a8-230c-4036-a43b-c61ccd1bde69}", AgAvtrLandingVerticalPlaneOptions)


class AgAvtrRunwayHeadingOptions(IAgAvtrRunwayHeadingOptions):
    """Class defining the runway heading options in a takeoff or landing procedure."""
    def __init__(self, sourceObject=None):
        IAgAvtrRunwayHeadingOptions.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrRunwayHeadingOptions._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrRunwayHeadingOptions._get_property(self, attrname) is not None: found_prop = IAgAvtrRunwayHeadingOptions._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrRunwayHeadingOptions.")

agcls.AgClassCatalog.add_catalog_entry("{167457be-4afe-477d-af6d-4e49413f4863}", AgAvtrRunwayHeadingOptions)


class AgAvtrLandingEnterDownwindPattern(IAgAvtrLandingEnterDownwindPattern):
    """Class defining the enter downwind pattern options for a landing procedure."""
    def __init__(self, sourceObject=None):
        IAgAvtrLandingEnterDownwindPattern.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrLandingEnterDownwindPattern._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrLandingEnterDownwindPattern._get_property(self, attrname) is not None: found_prop = IAgAvtrLandingEnterDownwindPattern._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrLandingEnterDownwindPattern.")

agcls.AgClassCatalog.add_catalog_entry("{7fd1f000-c683-490f-9eea-a30062392898}", AgAvtrLandingEnterDownwindPattern)


class AgAvtrLandingInterceptGlideslope(IAgAvtrLandingInterceptGlideslope):
    """Class defining the intercept glideslope options for a landing procedure."""
    def __init__(self, sourceObject=None):
        IAgAvtrLandingInterceptGlideslope.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrLandingInterceptGlideslope._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrLandingInterceptGlideslope._get_property(self, attrname) is not None: found_prop = IAgAvtrLandingInterceptGlideslope._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrLandingInterceptGlideslope.")

agcls.AgClassCatalog.add_catalog_entry("{f9735637-159f-4a79-9b1c-05d88d8437ac}", AgAvtrLandingInterceptGlideslope)


class AgAvtrLandingStandardInstrumentApproach(IAgAvtrLandingStandardInstrumentApproach):
    """Class defining the standard instrument approach options for a landing procedure."""
    def __init__(self, sourceObject=None):
        IAgAvtrLandingStandardInstrumentApproach.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrLandingStandardInstrumentApproach._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrLandingStandardInstrumentApproach._get_property(self, attrname) is not None: found_prop = IAgAvtrLandingStandardInstrumentApproach._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrLandingStandardInstrumentApproach.")

agcls.AgClassCatalog.add_catalog_entry("{6463a94a-8a78-432d-b155-d9d6d436c748}", AgAvtrLandingStandardInstrumentApproach)


class AgAvtrTakeoffDeparturePoint(IAgAvtrTakeoffDeparturePoint):
    """Class defining the departure point options for a takeoff procedure."""
    def __init__(self, sourceObject=None):
        IAgAvtrTakeoffDeparturePoint.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrTakeoffDeparturePoint._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrTakeoffDeparturePoint._get_property(self, attrname) is not None: found_prop = IAgAvtrTakeoffDeparturePoint._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrTakeoffDeparturePoint.")

agcls.AgClassCatalog.add_catalog_entry("{59ebf9c6-d1de-47c0-bd56-b3d455c5c335}", AgAvtrTakeoffDeparturePoint)


class AgAvtrTakeoffLowTransition(IAgAvtrTakeoffLowTransition):
    """Class defining the low transition options for a takeoff procedure."""
    def __init__(self, sourceObject=None):
        IAgAvtrTakeoffLowTransition.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrTakeoffLowTransition._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrTakeoffLowTransition._get_property(self, attrname) is not None: found_prop = IAgAvtrTakeoffLowTransition._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrTakeoffLowTransition.")

agcls.AgClassCatalog.add_catalog_entry("{c8f9161b-97e3-4eab-b5e9-6a5aebaddaea}", AgAvtrTakeoffLowTransition)


class AgAvtrTakeoffNormal(IAgAvtrTakeoffNormal):
    """Class defining the normal options for a takeoff procedure."""
    def __init__(self, sourceObject=None):
        IAgAvtrTakeoffNormal.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrTakeoffNormal._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrTakeoffNormal._get_property(self, attrname) is not None: found_prop = IAgAvtrTakeoffNormal._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrTakeoffNormal.")

agcls.AgClassCatalog.add_catalog_entry("{4951950f-59cb-4524-a2c6-5d8b6f35922d}", AgAvtrTakeoffNormal)


class AgAvtrLevelTurns(IAgAvtrLevelTurns):
    """Class defining the level turns options for an acceleration performance model of an Aviator aircraft."""
    def __init__(self, sourceObject=None):
        IAgAvtrLevelTurns.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrLevelTurns._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrLevelTurns._get_property(self, attrname) is not None: found_prop = IAgAvtrLevelTurns._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrLevelTurns.")

agcls.AgClassCatalog.add_catalog_entry("{8c955be7-5999-4332-bb80-4151d864d1d4}", AgAvtrLevelTurns)


class AgAvtrAttitudeTransitions(IAgAvtrAttitudeTransitions):
    """Class defining the attitude transition options for an acceleration performance model of an Aviator aircraft."""
    def __init__(self, sourceObject=None):
        IAgAvtrAttitudeTransitions.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrAttitudeTransitions._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrAttitudeTransitions._get_property(self, attrname) is not None: found_prop = IAgAvtrAttitudeTransitions._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrAttitudeTransitions.")

agcls.AgClassCatalog.add_catalog_entry("{0fc49614-6fbf-4d80-94ae-f8a338d8e7ab}", AgAvtrAttitudeTransitions)


class AgAvtrClimbAndDescentTransitions(IAgAvtrClimbAndDescentTransitions):
    """Class defining the climb and descent transition options for an Acceleration performance model of an Aviator aircraft."""
    def __init__(self, sourceObject=None):
        IAgAvtrClimbAndDescentTransitions.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrClimbAndDescentTransitions._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrClimbAndDescentTransitions._get_property(self, attrname) is not None: found_prop = IAgAvtrClimbAndDescentTransitions._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrClimbAndDescentTransitions.")

agcls.AgClassCatalog.add_catalog_entry("{c8d87c4a-ee0c-4a96-b7f4-9dbe84a7b2aa}", AgAvtrClimbAndDescentTransitions)


class AgAvtrAeroPropManeuverModeHelper(IAgAvtrAeroPropManeuverModeHelper):
    """Class defining the The calculation mode for the Aero/Prop maneuver mode helper. Helper for a basic acceleration performance model of an Aviator aircraft."""
    def __init__(self, sourceObject=None):
        IAgAvtrAeroPropManeuverModeHelper.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrAeroPropManeuverModeHelper._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrAeroPropManeuverModeHelper._get_property(self, attrname) is not None: found_prop = IAgAvtrAeroPropManeuverModeHelper._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrAeroPropManeuverModeHelper.")

agcls.AgClassCatalog.add_catalog_entry("{854b3e50-7d20-4d15-a58d-b1f36dac5c77}", AgAvtrAeroPropManeuverModeHelper)


class AgAvtrAircraftAdvAccelerationModel(IAgAvtrAircraftAdvAccelerationModel, IAgAvtrPerformanceModel, IAgAvtrCatalogItem):
    """Class defining the advanced acceleration performance model of an Aviator aircraft."""
    def __init__(self, sourceObject=None):
        IAgAvtrAircraftAdvAccelerationModel.__init__(self, sourceObject)
        IAgAvtrPerformanceModel.__init__(self, sourceObject)
        IAgAvtrCatalogItem.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrAircraftAdvAccelerationModel._private_init(self, intf)
        IAgAvtrPerformanceModel._private_init(self, intf)
        IAgAvtrCatalogItem._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrAircraftAdvAccelerationModel._get_property(self, attrname) is not None: found_prop = IAgAvtrAircraftAdvAccelerationModel._get_property(self, attrname)
        if IAgAvtrPerformanceModel._get_property(self, attrname) is not None: found_prop = IAgAvtrPerformanceModel._get_property(self, attrname)
        if IAgAvtrCatalogItem._get_property(self, attrname) is not None: found_prop = IAgAvtrCatalogItem._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrAircraftAdvAccelerationModel.")

agcls.AgClassCatalog.add_catalog_entry("{e55e8521-3091-4a5d-afe0-57f7e7ee698e}", AgAvtrAircraftAdvAccelerationModel)


class AgAvtrAircraftAccelerationMode(IAgAvtrAircraftAccelerationMode):
    """Class defining the acceleration mode options for an advanced acceleration performance model of an Aviator aircraft."""
    def __init__(self, sourceObject=None):
        IAgAvtrAircraftAccelerationMode.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrAircraftAccelerationMode._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrAircraftAccelerationMode._get_property(self, attrname) is not None: found_prop = IAgAvtrAircraftAccelerationMode._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrAircraftAccelerationMode.")

agcls.AgClassCatalog.add_catalog_entry("{551999ee-51a5-4863-a244-0030899884ee}", AgAvtrAircraftAccelerationMode)


class AgAvtrAircraftSimpleAero(IAgAvtrAircraftSimpleAero):
    """Class defining the simple aerodynamic options for a basic acceleration performance model of an Aviator aircraft."""
    def __init__(self, sourceObject=None):
        IAgAvtrAircraftSimpleAero.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrAircraftSimpleAero._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrAircraftSimpleAero._get_property(self, attrname) is not None: found_prop = IAgAvtrAircraftSimpleAero._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrAircraftSimpleAero.")

agcls.AgClassCatalog.add_catalog_entry("{54bb15cb-5b0e-44af-9605-0b646efebaeb}", AgAvtrAircraftSimpleAero)


class AgAvtrAircraftExternalAero(IAgAvtrAircraftExternalAero):
    """Class defining the external file aerodynamic options for a basic acceleration performance model of an Aviator aircraft."""
    def __init__(self, sourceObject=None):
        IAgAvtrAircraftExternalAero.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrAircraftExternalAero._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrAircraftExternalAero._get_property(self, attrname) is not None: found_prop = IAgAvtrAircraftExternalAero._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrAircraftExternalAero.")

agcls.AgClassCatalog.add_catalog_entry("{f79db172-f8c6-4dc9-84c7-dfff374156bc}", AgAvtrAircraftExternalAero)


class AgAvtrAircraftAero(IAgAvtrAircraftAero):
    """Class defining the aerodynamic options for a basic acceleration performance model of an Aviator aircraft."""
    def __init__(self, sourceObject=None):
        IAgAvtrAircraftAero.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrAircraftAero._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrAircraftAero._get_property(self, attrname) is not None: found_prop = IAgAvtrAircraftAero._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrAircraftAero.")

agcls.AgClassCatalog.add_catalog_entry("{6005f6fd-9923-4688-a60f-6179d5cec1f3}", AgAvtrAircraftAero)


class AgAvtrAircraftBasicFixedWingAero(IAgAvtrAircraftBasicFixedWingAero):
    """Class defining the basic fixed wing aerodynamic options for a basic acceleration performance model of an Aviator aircraft."""
    def __init__(self, sourceObject=None):
        IAgAvtrAircraftBasicFixedWingAero.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrAircraftBasicFixedWingAero._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrAircraftBasicFixedWingAero._get_property(self, attrname) is not None: found_prop = IAgAvtrAircraftBasicFixedWingAero._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrAircraftBasicFixedWingAero.")

agcls.AgClassCatalog.add_catalog_entry("{3e05b32c-25ac-400d-ae1c-e1628b2e6ebb}", AgAvtrAircraftBasicFixedWingAero)


class AgAvtrAircraftProp(IAgAvtrAircraftProp):
    """Class defining the propulsion options for a basic acceleration performance model of an Aviator aircraft."""
    def __init__(self, sourceObject=None):
        IAgAvtrAircraftProp.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrAircraftProp._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrAircraftProp._get_property(self, attrname) is not None: found_prop = IAgAvtrAircraftProp._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrAircraftProp.")

agcls.AgClassCatalog.add_catalog_entry("{8773e358-a871-4d66-b7b2-25a473f22bdb}", AgAvtrAircraftProp)


class AgAvtrAircraftSimpleProp(IAgAvtrAircraftSimpleProp):
    """Class defining the basic fixed wing propulsion options for a basic acceleration performance model of an Aviator aircraft."""
    def __init__(self, sourceObject=None):
        IAgAvtrAircraftSimpleProp.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrAircraftSimpleProp._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrAircraftSimpleProp._get_property(self, attrname) is not None: found_prop = IAgAvtrAircraftSimpleProp._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrAircraftSimpleProp.")

agcls.AgClassCatalog.add_catalog_entry("{359cf55e-59da-4f34-93fe-010180c2a415}", AgAvtrAircraftSimpleProp)


class AgAvtrAircraftExternalProp(IAgAvtrAircraftExternalProp):
    """Class defining the external propulsion options for a basic acceleration performance model of an Aviator aircraft."""
    def __init__(self, sourceObject=None):
        IAgAvtrAircraftExternalProp.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrAircraftExternalProp._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrAircraftExternalProp._get_property(self, attrname) is not None: found_prop = IAgAvtrAircraftExternalProp._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrAircraftExternalProp.")

agcls.AgClassCatalog.add_catalog_entry("{9a59b51f-6133-446f-9f7c-04bfa1e8c69a}", AgAvtrAircraftExternalProp)


class AgAvtrAircraftBasicFixedWingProp(IAgAvtrAircraftBasicFixedWingProp):
    """Class defining the basic fixed wing propulsion options for a basic acceleration performance model of an Aviator aircraft."""
    def __init__(self, sourceObject=None):
        IAgAvtrAircraftBasicFixedWingProp.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrAircraftBasicFixedWingProp._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrAircraftBasicFixedWingProp._get_property(self, attrname) is not None: found_prop = IAgAvtrAircraftBasicFixedWingProp._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrAircraftBasicFixedWingProp.")

agcls.AgClassCatalog.add_catalog_entry("{b4158163-51d7-4eb6-956a-14740ae523b3}", AgAvtrAircraftBasicFixedWingProp)


class AgAvtrARINC424Source(IAgAvtrARINC424Source, IAgAvtrCatalogSource):
    """Class defining an ARINC424 source in the Aviator catalog."""
    def __init__(self, sourceObject=None):
        IAgAvtrARINC424Source.__init__(self, sourceObject)
        IAgAvtrCatalogSource.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrARINC424Source._private_init(self, intf)
        IAgAvtrCatalogSource._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrARINC424Source._get_property(self, attrname) is not None: found_prop = IAgAvtrARINC424Source._get_property(self, attrname)
        if IAgAvtrCatalogSource._get_property(self, attrname) is not None: found_prop = IAgAvtrCatalogSource._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrARINC424Source.")

agcls.AgClassCatalog.add_catalog_entry("{e4f5b464-d93a-4541-8a1e-737ece8b120c}", AgAvtrARINC424Source)


class AgAvtrDAFIFSource(IAgAvtrDAFIFSource, IAgAvtrCatalogSource):
    """Class defining an DAFIF source in the Aviator catalog."""
    def __init__(self, sourceObject=None):
        IAgAvtrDAFIFSource.__init__(self, sourceObject)
        IAgAvtrCatalogSource.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrDAFIFSource._private_init(self, intf)
        IAgAvtrCatalogSource._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrDAFIFSource._get_property(self, attrname) is not None: found_prop = IAgAvtrDAFIFSource._get_property(self, attrname)
        if IAgAvtrCatalogSource._get_property(self, attrname) is not None: found_prop = IAgAvtrCatalogSource._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrDAFIFSource.")

agcls.AgClassCatalog.add_catalog_entry("{4325ae72-1155-40cd-a708-0cf4da0b653c}", AgAvtrDAFIFSource)


class AgAvtrBasicFixedWingFwdFlightLiftHelper(IAgAvtrBasicFixedWingLiftHelper):
    """Class defining the Lift Coefficient Helper for Forward Flight in the Basic Fixed Wing Aerodynamics interface for the Basic Acceleration Model of an aircraft."""
    def __init__(self, sourceObject=None):
        IAgAvtrBasicFixedWingLiftHelper.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrBasicFixedWingLiftHelper._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrBasicFixedWingLiftHelper._get_property(self, attrname) is not None: found_prop = IAgAvtrBasicFixedWingLiftHelper._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrBasicFixedWingFwdFlightLiftHelper.")

agcls.AgClassCatalog.add_catalog_entry("{507fa67b-cebe-431c-a109-fb6d77b6b026}", AgAvtrBasicFixedWingFwdFlightLiftHelper)


class AgAvtrBasicManeuverStrategyStraightAhead(IAgAvtrBasicManeuverStrategyStraightAhead, IAgAvtrBasicManeuverStrategy):
    """Class defining the Straight Ahead strategy for a basic maneuver procedure."""
    def __init__(self, sourceObject=None):
        IAgAvtrBasicManeuverStrategyStraightAhead.__init__(self, sourceObject)
        IAgAvtrBasicManeuverStrategy.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrBasicManeuverStrategyStraightAhead._private_init(self, intf)
        IAgAvtrBasicManeuverStrategy._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrBasicManeuverStrategyStraightAhead._get_property(self, attrname) is not None: found_prop = IAgAvtrBasicManeuverStrategyStraightAhead._get_property(self, attrname)
        if IAgAvtrBasicManeuverStrategy._get_property(self, attrname) is not None: found_prop = IAgAvtrBasicManeuverStrategy._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrBasicManeuverStrategyStraightAhead.")

agcls.AgClassCatalog.add_catalog_entry("{beae703c-6b09-4ff9-a7d0-3e6513848c84}", AgAvtrBasicManeuverStrategyStraightAhead)


class AgAvtrBasicManeuverStrategyCruiseProfile(IAgAvtrBasicManeuverStrategyCruiseProfile, IAgAvtrBasicManeuverStrategy):
    """Class defining the Cruise profile strategy for a basic maneuver procedure."""
    def __init__(self, sourceObject=None):
        IAgAvtrBasicManeuverStrategyCruiseProfile.__init__(self, sourceObject)
        IAgAvtrBasicManeuverStrategy.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrBasicManeuverStrategyCruiseProfile._private_init(self, intf)
        IAgAvtrBasicManeuverStrategy._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrBasicManeuverStrategyCruiseProfile._get_property(self, attrname) is not None: found_prop = IAgAvtrBasicManeuverStrategyCruiseProfile._get_property(self, attrname)
        if IAgAvtrBasicManeuverStrategy._get_property(self, attrname) is not None: found_prop = IAgAvtrBasicManeuverStrategy._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrBasicManeuverStrategyCruiseProfile.")

agcls.AgClassCatalog.add_catalog_entry("{00a0e796-7322-478b-9ad6-b8f1d6ef81e1}", AgAvtrBasicManeuverStrategyCruiseProfile)


class AgAvtrBasicManeuverStrategyGlideProfile(IAgAvtrBasicManeuverStrategyGlideProfile, IAgAvtrBasicManeuverStrategy):
    """Class defining the Glide profile strategy for a basic maneuver procedure."""
    def __init__(self, sourceObject=None):
        IAgAvtrBasicManeuverStrategyGlideProfile.__init__(self, sourceObject)
        IAgAvtrBasicManeuverStrategy.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrBasicManeuverStrategyGlideProfile._private_init(self, intf)
        IAgAvtrBasicManeuverStrategy._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrBasicManeuverStrategyGlideProfile._get_property(self, attrname) is not None: found_prop = IAgAvtrBasicManeuverStrategyGlideProfile._get_property(self, attrname)
        if IAgAvtrBasicManeuverStrategy._get_property(self, attrname) is not None: found_prop = IAgAvtrBasicManeuverStrategy._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrBasicManeuverStrategyGlideProfile.")

agcls.AgClassCatalog.add_catalog_entry("{0e60df52-4bb8-40a1-90a8-ecf7a57bca0a}", AgAvtrBasicManeuverStrategyGlideProfile)


class AgAvtrAircraftModels(IAgAvtrAircraftModels, IAgAvtrCatalogSource):
    """Class defining the User Aircraft Models in the Aviator Catalog."""
    def __init__(self, sourceObject=None):
        IAgAvtrAircraftModels.__init__(self, sourceObject)
        IAgAvtrCatalogSource.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrAircraftModels._private_init(self, intf)
        IAgAvtrCatalogSource._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrAircraftModels._get_property(self, attrname) is not None: found_prop = IAgAvtrAircraftModels._get_property(self, attrname)
        if IAgAvtrCatalogSource._get_property(self, attrname) is not None: found_prop = IAgAvtrCatalogSource._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrAircraftModels.")

agcls.AgClassCatalog.add_catalog_entry("{47dd19b1-0ce7-458b-bdb2-2ec0d337231b}", AgAvtrAircraftModels)


class AgAvtrMissileModels(IAgAvtrMissileModels, IAgAvtrCatalogSource):
    """Class defining the User Missile Models in the Aviator Catalog."""
    def __init__(self, sourceObject=None):
        IAgAvtrMissileModels.__init__(self, sourceObject)
        IAgAvtrCatalogSource.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrMissileModels._private_init(self, intf)
        IAgAvtrCatalogSource._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrMissileModels._get_property(self, attrname) is not None: found_prop = IAgAvtrMissileModels._get_property(self, attrname)
        if IAgAvtrCatalogSource._get_property(self, attrname) is not None: found_prop = IAgAvtrCatalogSource._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrMissileModels.")

agcls.AgClassCatalog.add_catalog_entry("{038a565a-efe0-4bc0-8a22-eb1c2d88d87a}", AgAvtrMissileModels)


class AgAvtrRotorcraftModels(IAgAvtrRotorcraftModels, IAgAvtrCatalogSource):
    """Class defining the User Rotorcraft Models in the Aviator Catalog."""
    def __init__(self, sourceObject=None):
        IAgAvtrRotorcraftModels.__init__(self, sourceObject)
        IAgAvtrCatalogSource.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrRotorcraftModels._private_init(self, intf)
        IAgAvtrCatalogSource._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrRotorcraftModels._get_property(self, attrname) is not None: found_prop = IAgAvtrRotorcraftModels._get_property(self, attrname)
        if IAgAvtrCatalogSource._get_property(self, attrname) is not None: found_prop = IAgAvtrCatalogSource._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrRotorcraftModels.")

agcls.AgClassCatalog.add_catalog_entry("{f85cc088-0dc1-4436-bc2e-a985bfd4dfb4}", AgAvtrRotorcraftModels)


class AgAvtrConfiguration(IAgAvtrConfiguration):
    """Class defining the aircraft configuration for an Aviator mission."""
    def __init__(self, sourceObject=None):
        IAgAvtrConfiguration.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrConfiguration._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrConfiguration._get_property(self, attrname) is not None: found_prop = IAgAvtrConfiguration._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrConfiguration.")

agcls.AgClassCatalog.add_catalog_entry("{823e96a0-a485-4c5b-9abc-7d6658432f99}", AgAvtrConfiguration)


class AgAvtrFuelTankInternal(IAgAvtrFuelTankInternal, IAgAvtrStation):
    """Class defining an internal fuel tank for an Aviator aircraft."""
    def __init__(self, sourceObject=None):
        IAgAvtrFuelTankInternal.__init__(self, sourceObject)
        IAgAvtrStation.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrFuelTankInternal._private_init(self, intf)
        IAgAvtrStation._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrFuelTankInternal._get_property(self, attrname) is not None: found_prop = IAgAvtrFuelTankInternal._get_property(self, attrname)
        if IAgAvtrStation._get_property(self, attrname) is not None: found_prop = IAgAvtrStation._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrFuelTankInternal.")

agcls.AgClassCatalog.add_catalog_entry("{64fd434a-e313-4f15-a236-f25f10461444}", AgAvtrFuelTankInternal)


class AgAvtrFuelTankExternal(IAgAvtrFuelTankExternal):
    """Class defining an external fuel tank for an Aviator aircraft."""
    def __init__(self, sourceObject=None):
        IAgAvtrFuelTankExternal.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrFuelTankExternal._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrFuelTankExternal._get_property(self, attrname) is not None: found_prop = IAgAvtrFuelTankExternal._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrFuelTankExternal.")

agcls.AgClassCatalog.add_catalog_entry("{8037f407-784e-469e-b92d-2a0fff148e86}", AgAvtrFuelTankExternal)


class AgAvtrPayloadStation(IAgAvtrPayloadStation, IAgAvtrStation):
    """Class defining a payload station for an Aviator aircraft."""
    def __init__(self, sourceObject=None):
        IAgAvtrPayloadStation.__init__(self, sourceObject)
        IAgAvtrStation.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrPayloadStation._private_init(self, intf)
        IAgAvtrStation._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrPayloadStation._get_property(self, attrname) is not None: found_prop = IAgAvtrPayloadStation._get_property(self, attrname)
        if IAgAvtrStation._get_property(self, attrname) is not None: found_prop = IAgAvtrStation._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrPayloadStation.")

agcls.AgClassCatalog.add_catalog_entry("{13423a45-1732-438b-a96a-502bc40f0827}", AgAvtrPayloadStation)


class AgAvtrStationCollection(IAgAvtrStationCollection):
    """Class defining a collection of payload stations for an Aviator aircraft."""
    def __init__(self, sourceObject=None):
        IAgAvtrStationCollection.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrStationCollection._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrStationCollection._get_property(self, attrname) is not None: found_prop = IAgAvtrStationCollection._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrStationCollection.")

agcls.AgClassCatalog.add_catalog_entry("{e81ed53f-b172-46c4-85b1-e80fe06e211a}", AgAvtrStationCollection)


class AgAvtrWindModel(IAgAvtrWindModel):
    """Class defining the wind model for a mission, scenario, or procedure."""
    def __init__(self, sourceObject=None):
        IAgAvtrWindModel.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrWindModel._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrWindModel._get_property(self, attrname) is not None: found_prop = IAgAvtrWindModel._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrWindModel.")

agcls.AgClassCatalog.add_catalog_entry("{8c0e170c-1818-4bd9-8bbf-e578065ea2a8}", AgAvtrWindModel)


class AgAvtrWindModelConstant(IAgAvtrWindModelConstant):
    """Class defining a constant bearing/speed wind model for a mission."""
    def __init__(self, sourceObject=None):
        IAgAvtrWindModelConstant.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrWindModelConstant._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrWindModelConstant._get_property(self, attrname) is not None: found_prop = IAgAvtrWindModelConstant._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrWindModelConstant.")

agcls.AgClassCatalog.add_catalog_entry("{079a1206-8ed3-423d-8f1d-855551f0435c}", AgAvtrWindModelConstant)


class AgAvtrWindModelADDS(IAgAvtrWindModelADDS):
    """Class defining a wind model using the NOAA ADDS service for a mission."""
    def __init__(self, sourceObject=None):
        IAgAvtrWindModelADDS.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrWindModelADDS._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrWindModelADDS._get_property(self, attrname) is not None: found_prop = IAgAvtrWindModelADDS._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrWindModelADDS.")

agcls.AgClassCatalog.add_catalog_entry("{1e2024ff-d594-49bf-8ea7-a110213078ba}", AgAvtrWindModelADDS)


class AgAvtrADDSMessage(IAgAvtrADDSMessage):
    """Class defining a message from the NOAA ADDS service."""
    def __init__(self, sourceObject=None):
        IAgAvtrADDSMessage.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrADDSMessage._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrADDSMessage._get_property(self, attrname) is not None: found_prop = IAgAvtrADDSMessage._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrADDSMessage.")

agcls.AgClassCatalog.add_catalog_entry("{22e44fa2-cfe7-456a-900c-0916f1d88cec}", AgAvtrADDSMessage)


class AgAvtrADDSMessageCollection(IAgAvtrADDSMessageCollection):
    """Class defining a collection of messages from the NOAA ADDS service."""
    def __init__(self, sourceObject=None):
        IAgAvtrADDSMessageCollection.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrADDSMessageCollection._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrADDSMessageCollection._get_property(self, attrname) is not None: found_prop = IAgAvtrADDSMessageCollection._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrADDSMessageCollection.")

agcls.AgClassCatalog.add_catalog_entry("{f5e634eb-3433-4336-9c0d-73b3d0e9674a}", AgAvtrADDSMessageCollection)


class AgAvtrProcedure(IAgAvtrProcedure, IAgAvtrConnect):
    """Class defining an unknown procedure type."""
    def __init__(self, sourceObject=None):
        IAgAvtrProcedure.__init__(self, sourceObject)
        IAgAvtrConnect.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrProcedure._private_init(self, intf)
        IAgAvtrConnect._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrProcedure._get_property(self, attrname) is not None: found_prop = IAgAvtrProcedure._get_property(self, attrname)
        if IAgAvtrConnect._get_property(self, attrname) is not None: found_prop = IAgAvtrConnect._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrProcedure.")

agcls.AgClassCatalog.add_catalog_entry("{c744fb3a-e51d-4b87-8006-ed9dd4d48495}", AgAvtrProcedure)


class AgAvtrAtmosphereModel(IAgAvtrAtmosphereModel):
    """Class defining the atmosphere model for a mission, scenario, or procedure."""
    def __init__(self, sourceObject=None):
        IAgAvtrAtmosphereModel.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrAtmosphereModel._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrAtmosphereModel._get_property(self, attrname) is not None: found_prop = IAgAvtrAtmosphereModel._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrAtmosphereModel.")

agcls.AgClassCatalog.add_catalog_entry("{43ce46bb-52dc-42d7-818a-5bd4d13dd15d}", AgAvtrAtmosphereModel)


class AgAvtrAtmosphereModelBasic(IAgAvtrAtmosphereModelBasic):
    """Class defining the basic atmosphere model."""
    def __init__(self, sourceObject=None):
        IAgAvtrAtmosphereModelBasic.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrAtmosphereModelBasic._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrAtmosphereModelBasic._get_property(self, attrname) is not None: found_prop = IAgAvtrAtmosphereModelBasic._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrAtmosphereModelBasic.")

agcls.AgClassCatalog.add_catalog_entry("{9c9a3976-e898-4e98-b2ce-26d045ab4d46}", AgAvtrAtmosphereModelBasic)


class AgAvtrBasicManeuverStrategySimpleTurn(IAgAvtrBasicManeuverStrategySimpleTurn, IAgAvtrBasicManeuverStrategy):
    """Class defining the simple turn strategy for a basic maneuver procedure."""
    def __init__(self, sourceObject=None):
        IAgAvtrBasicManeuverStrategySimpleTurn.__init__(self, sourceObject)
        IAgAvtrBasicManeuverStrategy.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrBasicManeuverStrategySimpleTurn._private_init(self, intf)
        IAgAvtrBasicManeuverStrategy._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrBasicManeuverStrategySimpleTurn._get_property(self, attrname) is not None: found_prop = IAgAvtrBasicManeuverStrategySimpleTurn._get_property(self, attrname)
        if IAgAvtrBasicManeuverStrategy._get_property(self, attrname) is not None: found_prop = IAgAvtrBasicManeuverStrategy._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrBasicManeuverStrategySimpleTurn.")

agcls.AgClassCatalog.add_catalog_entry("{5a0fd768-cf78-47cb-8a85-ccb1fbe68cee}", AgAvtrBasicManeuverStrategySimpleTurn)


class AgAvtrBasicManeuverStrategyAileronRoll(IAgAvtrBasicManeuverStrategyAileronRoll, IAgAvtrBasicManeuverStrategy):
    """Class defining the aileron roll strategy for a basic maneuver procedure."""
    def __init__(self, sourceObject=None):
        IAgAvtrBasicManeuverStrategyAileronRoll.__init__(self, sourceObject)
        IAgAvtrBasicManeuverStrategy.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrBasicManeuverStrategyAileronRoll._private_init(self, intf)
        IAgAvtrBasicManeuverStrategy._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrBasicManeuverStrategyAileronRoll._get_property(self, attrname) is not None: found_prop = IAgAvtrBasicManeuverStrategyAileronRoll._get_property(self, attrname)
        if IAgAvtrBasicManeuverStrategy._get_property(self, attrname) is not None: found_prop = IAgAvtrBasicManeuverStrategy._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrBasicManeuverStrategyAileronRoll.")

agcls.AgClassCatalog.add_catalog_entry("{b8979539-00bf-46af-a412-9a16ebb57ac7}", AgAvtrBasicManeuverStrategyAileronRoll)


class AgAvtrBasicManeuverStrategyFlyAOA(IAgAvtrBasicManeuverStrategyFlyAOA, IAgAvtrBasicManeuverStrategy):
    """Class defining the fly AOA strategy for a basic maneuver procedure."""
    def __init__(self, sourceObject=None):
        IAgAvtrBasicManeuverStrategyFlyAOA.__init__(self, sourceObject)
        IAgAvtrBasicManeuverStrategy.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrBasicManeuverStrategyFlyAOA._private_init(self, intf)
        IAgAvtrBasicManeuverStrategy._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrBasicManeuverStrategyFlyAOA._get_property(self, attrname) is not None: found_prop = IAgAvtrBasicManeuverStrategyFlyAOA._get_property(self, attrname)
        if IAgAvtrBasicManeuverStrategy._get_property(self, attrname) is not None: found_prop = IAgAvtrBasicManeuverStrategy._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrBasicManeuverStrategyFlyAOA.")

agcls.AgClassCatalog.add_catalog_entry("{f3c56de2-f58f-4292-a05b-d6e8f2756a55}", AgAvtrBasicManeuverStrategyFlyAOA)


class AgAvtrBasicManeuverStrategyPull(IAgAvtrBasicManeuverStrategyPull, IAgAvtrBasicManeuverStrategy):
    """Class defining the pull strategy for a basic maneuver procedure."""
    def __init__(self, sourceObject=None):
        IAgAvtrBasicManeuverStrategyPull.__init__(self, sourceObject)
        IAgAvtrBasicManeuverStrategy.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrBasicManeuverStrategyPull._private_init(self, intf)
        IAgAvtrBasicManeuverStrategy._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrBasicManeuverStrategyPull._get_property(self, attrname) is not None: found_prop = IAgAvtrBasicManeuverStrategyPull._get_property(self, attrname)
        if IAgAvtrBasicManeuverStrategy._get_property(self, attrname) is not None: found_prop = IAgAvtrBasicManeuverStrategy._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrBasicManeuverStrategyPull.")

agcls.AgClassCatalog.add_catalog_entry("{7f14c043-4c1d-46f2-a3fd-112b17a27e82}", AgAvtrBasicManeuverStrategyPull)


class AgAvtrBasicManeuverStrategyRollingPull(IAgAvtrBasicManeuverStrategyRollingPull, IAgAvtrBasicManeuverStrategy):
    """Class defining the rolling pull strategy for a basic maneuver procedure."""
    def __init__(self, sourceObject=None):
        IAgAvtrBasicManeuverStrategyRollingPull.__init__(self, sourceObject)
        IAgAvtrBasicManeuverStrategy.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrBasicManeuverStrategyRollingPull._private_init(self, intf)
        IAgAvtrBasicManeuverStrategy._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrBasicManeuverStrategyRollingPull._get_property(self, attrname) is not None: found_prop = IAgAvtrBasicManeuverStrategyRollingPull._get_property(self, attrname)
        if IAgAvtrBasicManeuverStrategy._get_property(self, attrname) is not None: found_prop = IAgAvtrBasicManeuverStrategy._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrBasicManeuverStrategyRollingPull.")

agcls.AgClassCatalog.add_catalog_entry("{abb3d02b-ae1f-482e-a903-cdc6bcb7bde1}", AgAvtrBasicManeuverStrategyRollingPull)


class AgAvtrBasicManeuverStrategySmoothAccel(IAgAvtrBasicManeuverStrategySmoothAccel, IAgAvtrBasicManeuverStrategy):
    """Class defining the smooth accel strategy for a basic maneuver procedure."""
    def __init__(self, sourceObject=None):
        IAgAvtrBasicManeuverStrategySmoothAccel.__init__(self, sourceObject)
        IAgAvtrBasicManeuverStrategy.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrBasicManeuverStrategySmoothAccel._private_init(self, intf)
        IAgAvtrBasicManeuverStrategy._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrBasicManeuverStrategySmoothAccel._get_property(self, attrname) is not None: found_prop = IAgAvtrBasicManeuverStrategySmoothAccel._get_property(self, attrname)
        if IAgAvtrBasicManeuverStrategy._get_property(self, attrname) is not None: found_prop = IAgAvtrBasicManeuverStrategy._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrBasicManeuverStrategySmoothAccel.")

agcls.AgClassCatalog.add_catalog_entry("{e5277844-1d1b-49ae-9a08-553e55823581}", AgAvtrBasicManeuverStrategySmoothAccel)


class AgAvtrBasicManeuverStrategySmoothTurn(IAgAvtrBasicManeuverStrategySmoothTurn, IAgAvtrBasicManeuverStrategy):
    """Class defining the smooth turn strategy for a basic maneuver procedure."""
    def __init__(self, sourceObject=None):
        IAgAvtrBasicManeuverStrategySmoothTurn.__init__(self, sourceObject)
        IAgAvtrBasicManeuverStrategy.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrBasicManeuverStrategySmoothTurn._private_init(self, intf)
        IAgAvtrBasicManeuverStrategy._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrBasicManeuverStrategySmoothTurn._get_property(self, attrname) is not None: found_prop = IAgAvtrBasicManeuverStrategySmoothTurn._get_property(self, attrname)
        if IAgAvtrBasicManeuverStrategy._get_property(self, attrname) is not None: found_prop = IAgAvtrBasicManeuverStrategy._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrBasicManeuverStrategySmoothTurn.")

agcls.AgClassCatalog.add_catalog_entry("{d55e7e13-72e2-4046-b7c7-a0702d951b03}", AgAvtrBasicManeuverStrategySmoothTurn)


class AgAvtrBasicManeuverAirspeedOptions(IAgAvtrBasicManeuverAirspeedOptions):
    """Class defining the airspeed options for basic maneuver strategies."""
    def __init__(self, sourceObject=None):
        IAgAvtrBasicManeuverAirspeedOptions.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrBasicManeuverAirspeedOptions._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrBasicManeuverAirspeedOptions._get_property(self, attrname) is not None: found_prop = IAgAvtrBasicManeuverAirspeedOptions._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrBasicManeuverAirspeedOptions.")

agcls.AgClassCatalog.add_catalog_entry("{0eb776dc-78a8-42db-b8c0-8c62611d7e44}", AgAvtrBasicManeuverAirspeedOptions)


class AgAvtrPropulsionThrust(IAgAvtrPropulsionThrust):
    """Class defining the the thrust propulsion used in basic maneuver procedures."""
    def __init__(self, sourceObject=None):
        IAgAvtrPropulsionThrust.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrPropulsionThrust._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrPropulsionThrust._get_property(self, attrname) is not None: found_prop = IAgAvtrPropulsionThrust._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrPropulsionThrust.")

agcls.AgClassCatalog.add_catalog_entry("{50e5309a-e9f9-4dc0-8296-b3bf43a9b1a5}", AgAvtrPropulsionThrust)


class AgAvtrBasicManeuverStrategyAutopilotNav(IAgAvtrBasicManeuverStrategyAutopilotNav, IAgAvtrBasicManeuverStrategy):
    """Class defining the autopilot - horizontal plane strategy for a basic maneuver procedure."""
    def __init__(self, sourceObject=None):
        IAgAvtrBasicManeuverStrategyAutopilotNav.__init__(self, sourceObject)
        IAgAvtrBasicManeuverStrategy.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrBasicManeuverStrategyAutopilotNav._private_init(self, intf)
        IAgAvtrBasicManeuverStrategy._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrBasicManeuverStrategyAutopilotNav._get_property(self, attrname) is not None: found_prop = IAgAvtrBasicManeuverStrategyAutopilotNav._get_property(self, attrname)
        if IAgAvtrBasicManeuverStrategy._get_property(self, attrname) is not None: found_prop = IAgAvtrBasicManeuverStrategy._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrBasicManeuverStrategyAutopilotNav.")

agcls.AgClassCatalog.add_catalog_entry("{129c0672-05c6-41ae-ae30-3aa82d83783a}", AgAvtrBasicManeuverStrategyAutopilotNav)


class AgAvtrBasicManeuverStrategyAutopilotProf(IAgAvtrBasicManeuverStrategyAutopilotProf, IAgAvtrBasicManeuverStrategy):
    """Class defining the autopiloc - vertical plane strategy for a basic maneuver procedure."""
    def __init__(self, sourceObject=None):
        IAgAvtrBasicManeuverStrategyAutopilotProf.__init__(self, sourceObject)
        IAgAvtrBasicManeuverStrategy.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrBasicManeuverStrategyAutopilotProf._private_init(self, intf)
        IAgAvtrBasicManeuverStrategy._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrBasicManeuverStrategyAutopilotProf._get_property(self, attrname) is not None: found_prop = IAgAvtrBasicManeuverStrategyAutopilotProf._get_property(self, attrname)
        if IAgAvtrBasicManeuverStrategy._get_property(self, attrname) is not None: found_prop = IAgAvtrBasicManeuverStrategy._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrBasicManeuverStrategyAutopilotProf.")

agcls.AgClassCatalog.add_catalog_entry("{a86d3f81-6bd4-4f3d-8747-c1b31d7b06e9}", AgAvtrBasicManeuverStrategyAutopilotProf)


class AgAvtrBasicManeuverStrategyBarrelRoll(IAgAvtrBasicManeuverStrategyBarrelRoll, IAgAvtrBasicManeuverStrategy):
    """Class defining the barrel roll strategy for a basic maneuver procedure."""
    def __init__(self, sourceObject=None):
        IAgAvtrBasicManeuverStrategyBarrelRoll.__init__(self, sourceObject)
        IAgAvtrBasicManeuverStrategy.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrBasicManeuverStrategyBarrelRoll._private_init(self, intf)
        IAgAvtrBasicManeuverStrategy._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrBasicManeuverStrategyBarrelRoll._get_property(self, attrname) is not None: found_prop = IAgAvtrBasicManeuverStrategyBarrelRoll._get_property(self, attrname)
        if IAgAvtrBasicManeuverStrategy._get_property(self, attrname) is not None: found_prop = IAgAvtrBasicManeuverStrategy._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrBasicManeuverStrategyBarrelRoll.")

agcls.AgClassCatalog.add_catalog_entry("{3ee92041-1fb9-4a53-ad71-9045d738fe7d}", AgAvtrBasicManeuverStrategyBarrelRoll)


class AgAvtrBasicManeuverStrategyLoop(IAgAvtrBasicManeuverStrategyLoop, IAgAvtrBasicManeuverStrategy):
    """Class defining the loop strategy for a basic maneuver procedure."""
    def __init__(self, sourceObject=None):
        IAgAvtrBasicManeuverStrategyLoop.__init__(self, sourceObject)
        IAgAvtrBasicManeuverStrategy.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrBasicManeuverStrategyLoop._private_init(self, intf)
        IAgAvtrBasicManeuverStrategy._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrBasicManeuverStrategyLoop._get_property(self, attrname) is not None: found_prop = IAgAvtrBasicManeuverStrategyLoop._get_property(self, attrname)
        if IAgAvtrBasicManeuverStrategy._get_property(self, attrname) is not None: found_prop = IAgAvtrBasicManeuverStrategy._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrBasicManeuverStrategyLoop.")

agcls.AgClassCatalog.add_catalog_entry("{77780df4-1f0f-411c-a4eb-edfeb5d44d82}", AgAvtrBasicManeuverStrategyLoop)


class AgAvtrBasicManeuverStrategyLTAHover(IAgAvtrBasicManeuverStrategyLTAHover, IAgAvtrBasicManeuverStrategy):
    """Class defining the lighter than air hover strategy for a basic maneuver procedure."""
    def __init__(self, sourceObject=None):
        IAgAvtrBasicManeuverStrategyLTAHover.__init__(self, sourceObject)
        IAgAvtrBasicManeuverStrategy.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrBasicManeuverStrategyLTAHover._private_init(self, intf)
        IAgAvtrBasicManeuverStrategy._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrBasicManeuverStrategyLTAHover._get_property(self, attrname) is not None: found_prop = IAgAvtrBasicManeuverStrategyLTAHover._get_property(self, attrname)
        if IAgAvtrBasicManeuverStrategy._get_property(self, attrname) is not None: found_prop = IAgAvtrBasicManeuverStrategy._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrBasicManeuverStrategyLTAHover.")

agcls.AgClassCatalog.add_catalog_entry("{5dfffe06-20ce-4e0e-903e-90ca3e60c273}", AgAvtrBasicManeuverStrategyLTAHover)


class AgAvtrBasicManeuverStrategyIntercept(IAgAvtrBasicManeuverStrategyIntercept, IAgAvtrBasicManeuverStrategy):
    """Class defining the Intercept strategy for a basic maneuver procedure."""
    def __init__(self, sourceObject=None):
        IAgAvtrBasicManeuverStrategyIntercept.__init__(self, sourceObject)
        IAgAvtrBasicManeuverStrategy.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrBasicManeuverStrategyIntercept._private_init(self, intf)
        IAgAvtrBasicManeuverStrategy._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrBasicManeuverStrategyIntercept._get_property(self, attrname) is not None: found_prop = IAgAvtrBasicManeuverStrategyIntercept._get_property(self, attrname)
        if IAgAvtrBasicManeuverStrategy._get_property(self, attrname) is not None: found_prop = IAgAvtrBasicManeuverStrategy._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrBasicManeuverStrategyIntercept.")

agcls.AgClassCatalog.add_catalog_entry("{015abd40-d52a-479b-b9ef-92aadb650a42}", AgAvtrBasicManeuverStrategyIntercept)


class AgAvtrBasicManeuverStrategyRelativeBearing(IAgAvtrBasicManeuverStrategyRelativeBearing, IAgAvtrBasicManeuverStrategy):
    """Class defining the Relative Bearing strategy for a basic maneuver procedure."""
    def __init__(self, sourceObject=None):
        IAgAvtrBasicManeuverStrategyRelativeBearing.__init__(self, sourceObject)
        IAgAvtrBasicManeuverStrategy.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrBasicManeuverStrategyRelativeBearing._private_init(self, intf)
        IAgAvtrBasicManeuverStrategy._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrBasicManeuverStrategyRelativeBearing._get_property(self, attrname) is not None: found_prop = IAgAvtrBasicManeuverStrategyRelativeBearing._get_property(self, attrname)
        if IAgAvtrBasicManeuverStrategy._get_property(self, attrname) is not None: found_prop = IAgAvtrBasicManeuverStrategy._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrBasicManeuverStrategyRelativeBearing.")

agcls.AgClassCatalog.add_catalog_entry("{e2ffd4c9-cab5-4e7d-972f-d7b0f6983a04}", AgAvtrBasicManeuverStrategyRelativeBearing)


class AgAvtrBasicManeuverStrategyRelativeCourse(IAgAvtrBasicManeuverStrategyRelativeCourse, IAgAvtrBasicManeuverStrategy):
    """Class defining the Relative Course strategy for a basic maneuver procedure."""
    def __init__(self, sourceObject=None):
        IAgAvtrBasicManeuverStrategyRelativeCourse.__init__(self, sourceObject)
        IAgAvtrBasicManeuverStrategy.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrBasicManeuverStrategyRelativeCourse._private_init(self, intf)
        IAgAvtrBasicManeuverStrategy._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrBasicManeuverStrategyRelativeCourse._get_property(self, attrname) is not None: found_prop = IAgAvtrBasicManeuverStrategyRelativeCourse._get_property(self, attrname)
        if IAgAvtrBasicManeuverStrategy._get_property(self, attrname) is not None: found_prop = IAgAvtrBasicManeuverStrategy._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrBasicManeuverStrategyRelativeCourse.")

agcls.AgClassCatalog.add_catalog_entry("{b38ed3c1-d896-476f-8b6d-c5b6d72b4590}", AgAvtrBasicManeuverStrategyRelativeCourse)


class AgAvtrBasicManeuverStrategyRendezvous(IAgAvtrBasicManeuverStrategyRendezvous, IAgAvtrBasicManeuverStrategy):
    """Class defining the Rendezvous/Formation strategy for a basic maneuver procedure."""
    def __init__(self, sourceObject=None):
        IAgAvtrBasicManeuverStrategyRendezvous.__init__(self, sourceObject)
        IAgAvtrBasicManeuverStrategy.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrBasicManeuverStrategyRendezvous._private_init(self, intf)
        IAgAvtrBasicManeuverStrategy._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrBasicManeuverStrategyRendezvous._get_property(self, attrname) is not None: found_prop = IAgAvtrBasicManeuverStrategyRendezvous._get_property(self, attrname)
        if IAgAvtrBasicManeuverStrategy._get_property(self, attrname) is not None: found_prop = IAgAvtrBasicManeuverStrategy._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrBasicManeuverStrategyRendezvous.")

agcls.AgClassCatalog.add_catalog_entry("{bb5fdd2b-8e95-40e1-8048-86547b0daff0}", AgAvtrBasicManeuverStrategyRendezvous)


class AgAvtrBasicManeuverStrategyStationkeeping(IAgAvtrBasicManeuverStrategyStationkeeping, IAgAvtrBasicManeuverStrategy):
    """Class defining the Stationkeeping strategy for a basic maneuver procedure."""
    def __init__(self, sourceObject=None):
        IAgAvtrBasicManeuverStrategyStationkeeping.__init__(self, sourceObject)
        IAgAvtrBasicManeuverStrategy.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrBasicManeuverStrategyStationkeeping._private_init(self, intf)
        IAgAvtrBasicManeuverStrategy._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrBasicManeuverStrategyStationkeeping._get_property(self, attrname) is not None: found_prop = IAgAvtrBasicManeuverStrategyStationkeeping._get_property(self, attrname)
        if IAgAvtrBasicManeuverStrategy._get_property(self, attrname) is not None: found_prop = IAgAvtrBasicManeuverStrategy._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrBasicManeuverStrategyStationkeeping.")

agcls.AgClassCatalog.add_catalog_entry("{949ee147-7b1f-4f22-b721-aea0725b9116}", AgAvtrBasicManeuverStrategyStationkeeping)


class AgAvtrBasicManeuverStrategyRelativeFPA(IAgAvtrBasicManeuverStrategyRelativeFPA, IAgAvtrBasicManeuverStrategy):
    """Class defining the Relative Flight Path Angle strategy for a basic maneuver procedure."""
    def __init__(self, sourceObject=None):
        IAgAvtrBasicManeuverStrategyRelativeFPA.__init__(self, sourceObject)
        IAgAvtrBasicManeuverStrategy.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrBasicManeuverStrategyRelativeFPA._private_init(self, intf)
        IAgAvtrBasicManeuverStrategy._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrBasicManeuverStrategyRelativeFPA._get_property(self, attrname) is not None: found_prop = IAgAvtrBasicManeuverStrategyRelativeFPA._get_property(self, attrname)
        if IAgAvtrBasicManeuverStrategy._get_property(self, attrname) is not None: found_prop = IAgAvtrBasicManeuverStrategy._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrBasicManeuverStrategyRelativeFPA.")

agcls.AgClassCatalog.add_catalog_entry("{dd290505-55b9-48a9-a800-451bcc816dd6}", AgAvtrBasicManeuverStrategyRelativeFPA)


class AgAvtrBasicManeuverStrategyRelSpeedAlt(IAgAvtrBasicManeuverStrategyRelSpeedAlt, IAgAvtrBasicManeuverStrategy):
    """Class defining the Relative Speed/Altitude strategy for a basic maneuver procedure."""
    def __init__(self, sourceObject=None):
        IAgAvtrBasicManeuverStrategyRelSpeedAlt.__init__(self, sourceObject)
        IAgAvtrBasicManeuverStrategy.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrBasicManeuverStrategyRelSpeedAlt._private_init(self, intf)
        IAgAvtrBasicManeuverStrategy._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrBasicManeuverStrategyRelSpeedAlt._get_property(self, attrname) is not None: found_prop = IAgAvtrBasicManeuverStrategyRelSpeedAlt._get_property(self, attrname)
        if IAgAvtrBasicManeuverStrategy._get_property(self, attrname) is not None: found_prop = IAgAvtrBasicManeuverStrategy._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrBasicManeuverStrategyRelSpeedAlt.")

agcls.AgClassCatalog.add_catalog_entry("{72d18bdd-ad36-43ed-a8d6-6c25a7d88078}", AgAvtrBasicManeuverStrategyRelSpeedAlt)


class AgAvtrBasicManeuverStrategyBezier(IAgAvtrBasicManeuverStrategyBezier, IAgAvtrBasicManeuverStrategy):
    """Class defining the Bezier strategy for a basic maneuver procedure."""
    def __init__(self, sourceObject=None):
        IAgAvtrBasicManeuverStrategyBezier.__init__(self, sourceObject)
        IAgAvtrBasicManeuverStrategy.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrBasicManeuverStrategyBezier._private_init(self, intf)
        IAgAvtrBasicManeuverStrategy._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrBasicManeuverStrategyBezier._get_property(self, attrname) is not None: found_prop = IAgAvtrBasicManeuverStrategyBezier._get_property(self, attrname)
        if IAgAvtrBasicManeuverStrategy._get_property(self, attrname) is not None: found_prop = IAgAvtrBasicManeuverStrategy._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrBasicManeuverStrategyBezier.")

agcls.AgClassCatalog.add_catalog_entry("{84f1131f-4e28-4879-902c-bf5c2cbfff5b}", AgAvtrBasicManeuverStrategyBezier)


class AgAvtrBasicManeuverStrategyPushPull(IAgAvtrBasicManeuverStrategyPushPull, IAgAvtrBasicManeuverStrategy):
    """Class defining the Push/Pull strategy for a basic maneuver procedure."""
    def __init__(self, sourceObject=None):
        IAgAvtrBasicManeuverStrategyPushPull.__init__(self, sourceObject)
        IAgAvtrBasicManeuverStrategy.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrBasicManeuverStrategyPushPull._private_init(self, intf)
        IAgAvtrBasicManeuverStrategy._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrBasicManeuverStrategyPushPull._get_property(self, attrname) is not None: found_prop = IAgAvtrBasicManeuverStrategyPushPull._get_property(self, attrname)
        if IAgAvtrBasicManeuverStrategy._get_property(self, attrname) is not None: found_prop = IAgAvtrBasicManeuverStrategy._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrBasicManeuverStrategyPushPull.")

agcls.AgClassCatalog.add_catalog_entry("{6184d781-4842-4e83-8211-fc4baab53395}", AgAvtrBasicManeuverStrategyPushPull)


class AgAvtrProcedureHoldingCircular(IAgAvtrProcedureHoldingCircular, IAgAvtrProcedure):
    """Class defining a holding circular procedure."""
    def __init__(self, sourceObject=None):
        IAgAvtrProcedureHoldingCircular.__init__(self, sourceObject)
        IAgAvtrProcedure.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrProcedureHoldingCircular._private_init(self, intf)
        IAgAvtrProcedure._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrProcedureHoldingCircular._get_property(self, attrname) is not None: found_prop = IAgAvtrProcedureHoldingCircular._get_property(self, attrname)
        if IAgAvtrProcedure._get_property(self, attrname) is not None: found_prop = IAgAvtrProcedure._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrProcedureHoldingCircular.")

agcls.AgClassCatalog.add_catalog_entry("{dec98be5-d1d2-4a97-bbcd-5a1f7ca5f158}", AgAvtrProcedureHoldingCircular)


class AgAvtrProcedureHoldingFigure8(IAgAvtrProcedureHoldingFigure8, IAgAvtrProcedure):
    """Class defining a holding figure 8 procedure."""
    def __init__(self, sourceObject=None):
        IAgAvtrProcedureHoldingFigure8.__init__(self, sourceObject)
        IAgAvtrProcedure.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrProcedureHoldingFigure8._private_init(self, intf)
        IAgAvtrProcedure._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrProcedureHoldingFigure8._get_property(self, attrname) is not None: found_prop = IAgAvtrProcedureHoldingFigure8._get_property(self, attrname)
        if IAgAvtrProcedure._get_property(self, attrname) is not None: found_prop = IAgAvtrProcedure._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrProcedureHoldingFigure8.")

agcls.AgClassCatalog.add_catalog_entry("{cdd17fce-e24c-45f4-8b7c-b313f490e124}", AgAvtrProcedureHoldingFigure8)


class AgAvtrProcedureHoldingRacetrack(IAgAvtrProcedureHoldingRacetrack, IAgAvtrProcedure):
    """Class defining a holding racetrack procedure."""
    def __init__(self, sourceObject=None):
        IAgAvtrProcedureHoldingRacetrack.__init__(self, sourceObject)
        IAgAvtrProcedure.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrProcedureHoldingRacetrack._private_init(self, intf)
        IAgAvtrProcedure._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrProcedureHoldingRacetrack._get_property(self, attrname) is not None: found_prop = IAgAvtrProcedureHoldingRacetrack._get_property(self, attrname)
        if IAgAvtrProcedure._get_property(self, attrname) is not None: found_prop = IAgAvtrProcedure._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrProcedureHoldingRacetrack.")

agcls.AgClassCatalog.add_catalog_entry("{d2aa71dd-b167-4eea-be1d-665e4fd586da}", AgAvtrProcedureHoldingRacetrack)


class AgAvtrProcedureTransitionToHover(IAgAvtrProcedureTransitionToHover, IAgAvtrProcedure):
    """Class defining a transition to hover procedure."""
    def __init__(self, sourceObject=None):
        IAgAvtrProcedureTransitionToHover.__init__(self, sourceObject)
        IAgAvtrProcedure.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrProcedureTransitionToHover._private_init(self, intf)
        IAgAvtrProcedure._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrProcedureTransitionToHover._get_property(self, attrname) is not None: found_prop = IAgAvtrProcedureTransitionToHover._get_property(self, attrname)
        if IAgAvtrProcedure._get_property(self, attrname) is not None: found_prop = IAgAvtrProcedure._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrProcedureTransitionToHover.")

agcls.AgClassCatalog.add_catalog_entry("{4cc8f381-2118-4c51-a1f4-68db53833efc}", AgAvtrProcedureTransitionToHover)


class AgAvtrProcedureTerrainFollow(IAgAvtrProcedureTerrainFollow, IAgAvtrProcedure):
    """Class defining a terrain following procedure."""
    def __init__(self, sourceObject=None):
        IAgAvtrProcedureTerrainFollow.__init__(self, sourceObject)
        IAgAvtrProcedure.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrProcedureTerrainFollow._private_init(self, intf)
        IAgAvtrProcedure._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrProcedureTerrainFollow._get_property(self, attrname) is not None: found_prop = IAgAvtrProcedureTerrainFollow._get_property(self, attrname)
        if IAgAvtrProcedure._get_property(self, attrname) is not None: found_prop = IAgAvtrProcedure._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrProcedureTerrainFollow.")

agcls.AgClassCatalog.add_catalog_entry("{3ab3ca3e-70dd-405c-a470-9bfbdfa23734}", AgAvtrProcedureTerrainFollow)


class AgAvtrProcedureHover(IAgAvtrProcedureHover, IAgAvtrProcedure):
    """Class defining a hover procedure."""
    def __init__(self, sourceObject=None):
        IAgAvtrProcedureHover.__init__(self, sourceObject)
        IAgAvtrProcedure.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrProcedureHover._private_init(self, intf)
        IAgAvtrProcedure._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrProcedureHover._get_property(self, attrname) is not None: found_prop = IAgAvtrProcedureHover._get_property(self, attrname)
        if IAgAvtrProcedure._get_property(self, attrname) is not None: found_prop = IAgAvtrProcedure._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrProcedureHover.")

agcls.AgClassCatalog.add_catalog_entry("{2af73325-a00b-405c-987c-af5f4e7f60cf}", AgAvtrProcedureHover)


class AgAvtrProcedureHoverTranslate(IAgAvtrProcedureHoverTranslate, IAgAvtrProcedure):
    """Class defining a hover translate procedure."""
    def __init__(self, sourceObject=None):
        IAgAvtrProcedureHoverTranslate.__init__(self, sourceObject)
        IAgAvtrProcedure.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrProcedureHoverTranslate._private_init(self, intf)
        IAgAvtrProcedure._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrProcedureHoverTranslate._get_property(self, attrname) is not None: found_prop = IAgAvtrProcedureHoverTranslate._get_property(self, attrname)
        if IAgAvtrProcedure._get_property(self, attrname) is not None: found_prop = IAgAvtrProcedure._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrProcedureHoverTranslate.")

agcls.AgClassCatalog.add_catalog_entry("{fde61d2d-7896-4b38-a0cb-f3a2776c8cfb}", AgAvtrProcedureHoverTranslate)


class AgAvtrProcedureTransitionToForwardFlight(IAgAvtrProcedureTransitionToForwardFlight, IAgAvtrProcedure):
    """Class defining a transition to forward flight procedure."""
    def __init__(self, sourceObject=None):
        IAgAvtrProcedureTransitionToForwardFlight.__init__(self, sourceObject)
        IAgAvtrProcedure.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrProcedureTransitionToForwardFlight._private_init(self, intf)
        IAgAvtrProcedure._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrProcedureTransitionToForwardFlight._get_property(self, attrname) is not None: found_prop = IAgAvtrProcedureTransitionToForwardFlight._get_property(self, attrname)
        if IAgAvtrProcedure._get_property(self, attrname) is not None: found_prop = IAgAvtrProcedure._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrProcedureTransitionToForwardFlight.")

agcls.AgClassCatalog.add_catalog_entry("{f4e5896e-1457-4909-8b6f-0740d9852278}", AgAvtrProcedureTransitionToForwardFlight)


class AgAvtrHoverAltitudeOptions(IAgAvtrHoverAltitudeOptions):
    """Class defining the altitude options for a VTOL procedure."""
    def __init__(self, sourceObject=None):
        IAgAvtrHoverAltitudeOptions.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrHoverAltitudeOptions._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrHoverAltitudeOptions._get_property(self, attrname) is not None: found_prop = IAgAvtrHoverAltitudeOptions._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrHoverAltitudeOptions.")

agcls.AgClassCatalog.add_catalog_entry("{feb66c2d-f9c7-472d-a389-4764db1d37bf}", AgAvtrHoverAltitudeOptions)


class AgAvtrProcedureVerticalTakeoff(IAgAvtrProcedureVerticalTakeoff, IAgAvtrProcedure):
    """Class defining a vertical takeoff procedure."""
    def __init__(self, sourceObject=None):
        IAgAvtrProcedureVerticalTakeoff.__init__(self, sourceObject)
        IAgAvtrProcedure.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrProcedureVerticalTakeoff._private_init(self, intf)
        IAgAvtrProcedure._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrProcedureVerticalTakeoff._get_property(self, attrname) is not None: found_prop = IAgAvtrProcedureVerticalTakeoff._get_property(self, attrname)
        if IAgAvtrProcedure._get_property(self, attrname) is not None: found_prop = IAgAvtrProcedure._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrProcedureVerticalTakeoff.")

agcls.AgClassCatalog.add_catalog_entry("{518b6d80-31d5-427e-b55f-8b299ba082b9}", AgAvtrProcedureVerticalTakeoff)


class AgAvtrProcedureVerticalLanding(IAgAvtrProcedureVerticalLanding, IAgAvtrProcedure):
    """Class defining a vertical landing procedure."""
    def __init__(self, sourceObject=None):
        IAgAvtrProcedureVerticalLanding.__init__(self, sourceObject)
        IAgAvtrProcedure.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrProcedureVerticalLanding._private_init(self, intf)
        IAgAvtrProcedure._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrProcedureVerticalLanding._get_property(self, attrname) is not None: found_prop = IAgAvtrProcedureVerticalLanding._get_property(self, attrname)
        if IAgAvtrProcedure._get_property(self, attrname) is not None: found_prop = IAgAvtrProcedure._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrProcedureVerticalLanding.")

agcls.AgClassCatalog.add_catalog_entry("{68401463-90f1-4a74-9346-6e1e99906906}", AgAvtrProcedureVerticalLanding)


class AgAvtrProcedureReferenceState(IAgAvtrProcedureReferenceState, IAgAvtrProcedure):
    """Class defining a reference state procedure."""
    def __init__(self, sourceObject=None):
        IAgAvtrProcedureReferenceState.__init__(self, sourceObject)
        IAgAvtrProcedure.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrProcedureReferenceState._private_init(self, intf)
        IAgAvtrProcedure._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrProcedureReferenceState._get_property(self, attrname) is not None: found_prop = IAgAvtrProcedureReferenceState._get_property(self, attrname)
        if IAgAvtrProcedure._get_property(self, attrname) is not None: found_prop = IAgAvtrProcedure._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrProcedureReferenceState.")

agcls.AgClassCatalog.add_catalog_entry("{44f22ac8-6eec-42ca-a433-dbf8b9fdaabf}", AgAvtrProcedureReferenceState)


class AgAvtrProcedureSuperProcedure(IAgAvtrProcedureSuperProcedure, IAgAvtrProcedure):
    """Class defining a super procedure."""
    def __init__(self, sourceObject=None):
        IAgAvtrProcedureSuperProcedure.__init__(self, sourceObject)
        IAgAvtrProcedure.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrProcedureSuperProcedure._private_init(self, intf)
        IAgAvtrProcedure._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrProcedureSuperProcedure._get_property(self, attrname) is not None: found_prop = IAgAvtrProcedureSuperProcedure._get_property(self, attrname)
        if IAgAvtrProcedure._get_property(self, attrname) is not None: found_prop = IAgAvtrProcedure._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrProcedureSuperProcedure.")

agcls.AgClassCatalog.add_catalog_entry("{b49011b5-9b02-48df-9ddd-9936e7903017}", AgAvtrProcedureSuperProcedure)


class AgAvtrProcedureLaunch(IAgAvtrProcedureLaunch, IAgAvtrProcedure):
    """Class defining a launch procedure."""
    def __init__(self, sourceObject=None):
        IAgAvtrProcedureLaunch.__init__(self, sourceObject)
        IAgAvtrProcedure.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrProcedureLaunch._private_init(self, intf)
        IAgAvtrProcedure._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrProcedureLaunch._get_property(self, attrname) is not None: found_prop = IAgAvtrProcedureLaunch._get_property(self, attrname)
        if IAgAvtrProcedure._get_property(self, attrname) is not None: found_prop = IAgAvtrProcedure._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrProcedureLaunch.")

agcls.AgClassCatalog.add_catalog_entry("{4121a688-337a-4436-999f-9e1de57aab96}", AgAvtrProcedureLaunch)


class AgAvtrProcedureAirway(IAgAvtrProcedureAirway, IAgAvtrProcedure):
    """Class defining an Airway procedure."""
    def __init__(self, sourceObject=None):
        IAgAvtrProcedureAirway.__init__(self, sourceObject)
        IAgAvtrProcedure.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrProcedureAirway._private_init(self, intf)
        IAgAvtrProcedure._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrProcedureAirway._get_property(self, attrname) is not None: found_prop = IAgAvtrProcedureAirway._get_property(self, attrname)
        if IAgAvtrProcedure._get_property(self, attrname) is not None: found_prop = IAgAvtrProcedure._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrProcedureAirway.")

agcls.AgClassCatalog.add_catalog_entry("{66c4d604-dac9-4eff-a18d-be1efb81f1f0}", AgAvtrProcedureAirway)


class AgAvtrProcedureAirwayRouter(IAgAvtrProcedureAirwayRouter, IAgAvtrProcedure):
    """Class defining an Airway Router procedure."""
    def __init__(self, sourceObject=None):
        IAgAvtrProcedureAirwayRouter.__init__(self, sourceObject)
        IAgAvtrProcedure.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrProcedureAirwayRouter._private_init(self, intf)
        IAgAvtrProcedure._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrProcedureAirwayRouter._get_property(self, attrname) is not None: found_prop = IAgAvtrProcedureAirwayRouter._get_property(self, attrname)
        if IAgAvtrProcedure._get_property(self, attrname) is not None: found_prop = IAgAvtrProcedure._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrProcedureAirwayRouter.")

agcls.AgClassCatalog.add_catalog_entry("{c240ee52-dee2-42e0-a8c1-17f52b665f39}", AgAvtrProcedureAirwayRouter)


class AgAvtrProcedureAreaTargetSearch(IAgAvtrProcedureAreaTargetSearch, IAgAvtrProcedure):
    """Class defining an Area Target Search procedure."""
    def __init__(self, sourceObject=None):
        IAgAvtrProcedureAreaTargetSearch.__init__(self, sourceObject)
        IAgAvtrProcedure.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrProcedureAreaTargetSearch._private_init(self, intf)
        IAgAvtrProcedure._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrProcedureAreaTargetSearch._get_property(self, attrname) is not None: found_prop = IAgAvtrProcedureAreaTargetSearch._get_property(self, attrname)
        if IAgAvtrProcedure._get_property(self, attrname) is not None: found_prop = IAgAvtrProcedure._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrProcedureAreaTargetSearch.")

agcls.AgClassCatalog.add_catalog_entry("{d065a50b-ba9e-4f25-831e-bb691df5cc71}", AgAvtrProcedureAreaTargetSearch)


class AgAvtrProcedureFormationRecover(IAgAvtrProcedureFormationRecover, IAgAvtrProcedure):
    """Class defining a Formation/Recover procedure."""
    def __init__(self, sourceObject=None):
        IAgAvtrProcedureFormationRecover.__init__(self, sourceObject)
        IAgAvtrProcedure.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrProcedureFormationRecover._private_init(self, intf)
        IAgAvtrProcedure._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrProcedureFormationRecover._get_property(self, attrname) is not None: found_prop = IAgAvtrProcedureFormationRecover._get_property(self, attrname)
        if IAgAvtrProcedure._get_property(self, attrname) is not None: found_prop = IAgAvtrProcedure._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrProcedureFormationRecover.")

agcls.AgClassCatalog.add_catalog_entry("{c3ca901a-fcb0-407b-a8d7-0f6972ebcd85}", AgAvtrProcedureFormationRecover)


class AgAvtrProcedureInFormation(IAgAvtrProcedureInFormation, IAgAvtrProcedure):
    """Class defining an In Formation procedure."""
    def __init__(self, sourceObject=None):
        IAgAvtrProcedureInFormation.__init__(self, sourceObject)
        IAgAvtrProcedure.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrProcedureInFormation._private_init(self, intf)
        IAgAvtrProcedure._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrProcedureInFormation._get_property(self, attrname) is not None: found_prop = IAgAvtrProcedureInFormation._get_property(self, attrname)
        if IAgAvtrProcedure._get_property(self, attrname) is not None: found_prop = IAgAvtrProcedure._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrProcedureInFormation.")

agcls.AgClassCatalog.add_catalog_entry("{5f09f987-b896-4cc7-b356-732d0c1500b8}", AgAvtrProcedureInFormation)


class AgAvtrProcedureParallelFlightLine(IAgAvtrProcedureParallelFlightLine, IAgAvtrProcedure):
    """Class defining a Parallel Flight Line procedure."""
    def __init__(self, sourceObject=None):
        IAgAvtrProcedureParallelFlightLine.__init__(self, sourceObject)
        IAgAvtrProcedure.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrProcedureParallelFlightLine._private_init(self, intf)
        IAgAvtrProcedure._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrProcedureParallelFlightLine._get_property(self, attrname) is not None: found_prop = IAgAvtrProcedureParallelFlightLine._get_property(self, attrname)
        if IAgAvtrProcedure._get_property(self, attrname) is not None: found_prop = IAgAvtrProcedure._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrProcedureParallelFlightLine.")

agcls.AgClassCatalog.add_catalog_entry("{3d83878f-7cda-46e8-b93f-9cbdc117244b}", AgAvtrProcedureParallelFlightLine)


class AgAvtrProcedureVGTPoint(IAgAvtrProcedureVGTPoint, IAgAvtrProcedure):
    """Class defining a VGT Point procedure."""
    def __init__(self, sourceObject=None):
        IAgAvtrProcedureVGTPoint.__init__(self, sourceObject)
        IAgAvtrProcedure.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrProcedureVGTPoint._private_init(self, intf)
        IAgAvtrProcedure._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrProcedureVGTPoint._get_property(self, attrname) is not None: found_prop = IAgAvtrProcedureVGTPoint._get_property(self, attrname)
        if IAgAvtrProcedure._get_property(self, attrname) is not None: found_prop = IAgAvtrProcedure._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrProcedureVGTPoint.")

agcls.AgClassCatalog.add_catalog_entry("{c1c57b66-ecf6-47f5-be6a-36075f83917a}", AgAvtrProcedureVGTPoint)


class AgAvtrPerformanceModelOptions(IAgAvtrPerformanceModelOptions):
    """Class defining the options for the active performance model in a phase."""
    def __init__(self, sourceObject=None):
        IAgAvtrPerformanceModelOptions.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrPerformanceModelOptions._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrPerformanceModelOptions._get_property(self, attrname) is not None: found_prop = IAgAvtrPerformanceModelOptions._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrPerformanceModelOptions.")

agcls.AgClassCatalog.add_catalog_entry("{d37c0417-9eab-4d38-8a3f-a70e144b5368}", AgAvtrPerformanceModelOptions)


class AgAvtrAdvFixedWingTool(IAgAvtrAdvFixedWingTool):
    """Class defining the options for the Advanced Fixed Wing Tool of an aircraft."""
    def __init__(self, sourceObject=None):
        IAgAvtrAdvFixedWingTool.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrAdvFixedWingTool._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrAdvFixedWingTool._get_property(self, attrname) is not None: found_prop = IAgAvtrAdvFixedWingTool._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrAdvFixedWingTool.")

agcls.AgClassCatalog.add_catalog_entry("{e250469c-80a2-44d2-b53d-2712363d7b47}", AgAvtrAdvFixedWingTool)


class AgAvtrAdvFixedWingExternalAero(IAgAvtrAdvFixedWingExternalAero):
    """Class defining the External Aero File aerodynamic strategy in the Advanced Fixed Wing Tool."""
    def __init__(self, sourceObject=None):
        IAgAvtrAdvFixedWingExternalAero.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrAdvFixedWingExternalAero._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrAdvFixedWingExternalAero._get_property(self, attrname) is not None: found_prop = IAgAvtrAdvFixedWingExternalAero._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrAdvFixedWingExternalAero.")

agcls.AgClassCatalog.add_catalog_entry("{0938800e-fa5d-446d-bf7b-3d79283da798}", AgAvtrAdvFixedWingExternalAero)


class AgAvtrAdvFixedWingSubsonicAero(IAgAvtrAdvFixedWingSubsonicAero):
    """Class defining the subsonic aerodynamic strategy in the Advanced Fixed Wing Tool."""
    def __init__(self, sourceObject=None):
        IAgAvtrAdvFixedWingSubsonicAero.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrAdvFixedWingSubsonicAero._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrAdvFixedWingSubsonicAero._get_property(self, attrname) is not None: found_prop = IAgAvtrAdvFixedWingSubsonicAero._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrAdvFixedWingSubsonicAero.")

agcls.AgClassCatalog.add_catalog_entry("{ced4d6ca-5a7e-4640-936f-e0db35949454}", AgAvtrAdvFixedWingSubsonicAero)


class AgAvtrAdvFixedWingSubSuperHypersonicAero(IAgAvtrAdvFixedWingSubSuperHypersonicAero):
    """Class defining the Sub/Super/Hypersonic aerodynamic strategy in the Advanced Fixed Wing Tool."""
    def __init__(self, sourceObject=None):
        IAgAvtrAdvFixedWingSubSuperHypersonicAero.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrAdvFixedWingSubSuperHypersonicAero._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrAdvFixedWingSubSuperHypersonicAero._get_property(self, attrname) is not None: found_prop = IAgAvtrAdvFixedWingSubSuperHypersonicAero._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrAdvFixedWingSubSuperHypersonicAero.")

agcls.AgClassCatalog.add_catalog_entry("{aa686d0d-7a40-44bb-b340-a5a5470ed81f}", AgAvtrAdvFixedWingSubSuperHypersonicAero)


class AgAvtrAdvFixedWingSupersonicAero(IAgAvtrAdvFixedWingSupersonicAero):
    """Class defining the supersonic aerodynamic strategy in the Advanced Fixed Wing Tool."""
    def __init__(self, sourceObject=None):
        IAgAvtrAdvFixedWingSupersonicAero.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrAdvFixedWingSupersonicAero._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrAdvFixedWingSupersonicAero._get_property(self, attrname) is not None: found_prop = IAgAvtrAdvFixedWingSupersonicAero._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrAdvFixedWingSupersonicAero.")

agcls.AgClassCatalog.add_catalog_entry("{00683dc3-fc6d-4ba2-9d0b-306363523e17}", AgAvtrAdvFixedWingSupersonicAero)


class AgAvtrPerformanceModel(IAgAvtrPerformanceModel, IAgAvtrCatalogItem):
    """Class defining an unknown performance model."""
    def __init__(self, sourceObject=None):
        IAgAvtrPerformanceModel.__init__(self, sourceObject)
        IAgAvtrCatalogItem.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrPerformanceModel._private_init(self, intf)
        IAgAvtrCatalogItem._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrPerformanceModel._get_property(self, attrname) is not None: found_prop = IAgAvtrPerformanceModel._get_property(self, attrname)
        if IAgAvtrCatalogItem._get_property(self, attrname) is not None: found_prop = IAgAvtrCatalogItem._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrPerformanceModel.")

agcls.AgClassCatalog.add_catalog_entry("{07c21222-ddfa-4417-8739-aa7e41a6091a}", AgAvtrPerformanceModel)


class AgAvtrAdvFixedWingGeometryBasic(IAgAvtrAdvFixedWingGeometryBasic, IAgAvtrAdvFixedWingGeometry):
    """Class defining a basic geometry wing in the Advanced Fixed Wing Tool."""
    def __init__(self, sourceObject=None):
        IAgAvtrAdvFixedWingGeometryBasic.__init__(self, sourceObject)
        IAgAvtrAdvFixedWingGeometry.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrAdvFixedWingGeometryBasic._private_init(self, intf)
        IAgAvtrAdvFixedWingGeometry._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrAdvFixedWingGeometryBasic._get_property(self, attrname) is not None: found_prop = IAgAvtrAdvFixedWingGeometryBasic._get_property(self, attrname)
        if IAgAvtrAdvFixedWingGeometry._get_property(self, attrname) is not None: found_prop = IAgAvtrAdvFixedWingGeometry._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrAdvFixedWingGeometryBasic.")

agcls.AgClassCatalog.add_catalog_entry("{3fccd7b1-9fd7-424e-a251-cadcc2d44a0a}", AgAvtrAdvFixedWingGeometryBasic)


class AgAvtrAdvFixedWingGeometryVariable(IAgAvtrAdvFixedWingGeometryVariable, IAgAvtrAdvFixedWingGeometry):
    """Class defining a variable geometry wing in the Advanced Fixed Wing Tool."""
    def __init__(self, sourceObject=None):
        IAgAvtrAdvFixedWingGeometryVariable.__init__(self, sourceObject)
        IAgAvtrAdvFixedWingGeometry.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrAdvFixedWingGeometryVariable._private_init(self, intf)
        IAgAvtrAdvFixedWingGeometry._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrAdvFixedWingGeometryVariable._get_property(self, attrname) is not None: found_prop = IAgAvtrAdvFixedWingGeometryVariable._get_property(self, attrname)
        if IAgAvtrAdvFixedWingGeometry._get_property(self, attrname) is not None: found_prop = IAgAvtrAdvFixedWingGeometry._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrAdvFixedWingGeometryVariable.")

agcls.AgClassCatalog.add_catalog_entry("{a7cb26ac-fa5b-416d-b81b-8a5975937740}", AgAvtrAdvFixedWingGeometryVariable)


class AgAvtrAdvFixedWingElectricPowerplant(IAgAvtrAdvFixedWingElectricPowerplant):
    """Class defining an Electric powerplant in the Advanced Fixed Wing Tool."""
    def __init__(self, sourceObject=None):
        IAgAvtrAdvFixedWingElectricPowerplant.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrAdvFixedWingElectricPowerplant._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrAdvFixedWingElectricPowerplant._get_property(self, attrname) is not None: found_prop = IAgAvtrAdvFixedWingElectricPowerplant._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrAdvFixedWingElectricPowerplant.")

agcls.AgClassCatalog.add_catalog_entry("{64f956f4-4b87-4b13-b459-efef51191309}", AgAvtrAdvFixedWingElectricPowerplant)


class AgAvtrAdvFixedWingExternalProp(IAgAvtrAdvFixedWingExternalProp):
    """Class defining an External Prop File powerplant in the Advanced Fixed Wing Tool."""
    def __init__(self, sourceObject=None):
        IAgAvtrAdvFixedWingExternalProp.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrAdvFixedWingExternalProp._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrAdvFixedWingExternalProp._get_property(self, attrname) is not None: found_prop = IAgAvtrAdvFixedWingExternalProp._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrAdvFixedWingExternalProp.")

agcls.AgClassCatalog.add_catalog_entry("{86d612c4-8537-48d7-912b-931a2c939c8e}", AgAvtrAdvFixedWingExternalProp)


class AgAvtrAdvFixedWingSubSuperHypersonicProp(IAgAvtrAdvFixedWingSubSuperHypersonicProp):
    """Class defining a Sub/Super/Hypersonic powerplant in the Advanced Fixed Wing Tool."""
    def __init__(self, sourceObject=None):
        IAgAvtrAdvFixedWingSubSuperHypersonicProp.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrAdvFixedWingSubSuperHypersonicProp._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrAdvFixedWingSubSuperHypersonicProp._get_property(self, attrname) is not None: found_prop = IAgAvtrAdvFixedWingSubSuperHypersonicProp._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrAdvFixedWingSubSuperHypersonicProp.")

agcls.AgClassCatalog.add_catalog_entry("{15279d03-0f3b-458d-957c-2cdee97bc0a8}", AgAvtrAdvFixedWingSubSuperHypersonicProp)


class AgAvtrAdvFixedWingPistonPowerplant(IAgAvtrAdvFixedWingPistonPowerplant):
    """Class defining a Piston powerplant in the Advanced Fixed Wing Tool."""
    def __init__(self, sourceObject=None):
        IAgAvtrAdvFixedWingPistonPowerplant.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrAdvFixedWingPistonPowerplant._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrAdvFixedWingPistonPowerplant._get_property(self, attrname) is not None: found_prop = IAgAvtrAdvFixedWingPistonPowerplant._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrAdvFixedWingPistonPowerplant.")

agcls.AgClassCatalog.add_catalog_entry("{dd383e2b-f1e9-4afe-9241-4d89e95db034}", AgAvtrAdvFixedWingPistonPowerplant)


class AgAvtrAdvFixedWingEmpiricalJetEngine(IAgAvtrAdvFixedWingEmpiricalJetEngine):
    """Class defining the Turbojet and Turbofan empirical models in the Advanced Fixed Wing Tool"""
    def __init__(self, sourceObject=None):
        IAgAvtrAdvFixedWingEmpiricalJetEngine.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrAdvFixedWingEmpiricalJetEngine._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrAdvFixedWingEmpiricalJetEngine._get_property(self, attrname) is not None: found_prop = IAgAvtrAdvFixedWingEmpiricalJetEngine._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrAdvFixedWingEmpiricalJetEngine.")

agcls.AgClassCatalog.add_catalog_entry("{cf86965f-eacf-47ca-a6b8-5c69a1f9612f}", AgAvtrAdvFixedWingEmpiricalJetEngine)


class AgAvtrAdvFixedWingTurbofanBasicABPowerplant(IAgAvtrAdvFixedWingTurbofanBasicABPowerplant):
    """This class is deprecated. Use AgAvtrAdvFixedWingTurbofanBasicABProp instead."""
    def __init__(self, sourceObject=None):
        IAgAvtrAdvFixedWingTurbofanBasicABPowerplant.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrAdvFixedWingTurbofanBasicABPowerplant._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrAdvFixedWingTurbofanBasicABPowerplant._get_property(self, attrname) is not None: found_prop = IAgAvtrAdvFixedWingTurbofanBasicABPowerplant._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrAdvFixedWingTurbofanBasicABPowerplant.")

agcls.AgClassCatalog.add_catalog_entry("{27a6cd0b-bd9b-4af7-9367-9d2ce3fa39cd}", AgAvtrAdvFixedWingTurbofanBasicABPowerplant)


class AgAvtrAdvFixedWingTurbojetBasicABPowerplant(IAgAvtrAdvFixedWingTurbojetBasicABPowerplant):
    """This class is deprecated. Use AgAvtrAdvFixedWingTurbojetBasicABProp instead."""
    def __init__(self, sourceObject=None):
        IAgAvtrAdvFixedWingTurbojetBasicABPowerplant.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrAdvFixedWingTurbojetBasicABPowerplant._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrAdvFixedWingTurbojetBasicABPowerplant._get_property(self, attrname) is not None: found_prop = IAgAvtrAdvFixedWingTurbojetBasicABPowerplant._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrAdvFixedWingTurbojetBasicABPowerplant.")

agcls.AgClassCatalog.add_catalog_entry("{65230337-ecdc-4b80-92aa-107af1bcfdbe}", AgAvtrAdvFixedWingTurbojetBasicABPowerplant)


class AgAvtrAdvFixedWingTurbofanBasicABProp(IAgAvtrAdvFixedWingTurbofanBasicABProp):
    """Class defining the Turbofan - Basic w/AB (Thermodynamic model) powerplant in the Advanced Fixed Wing Tool"""
    def __init__(self, sourceObject=None):
        IAgAvtrAdvFixedWingTurbofanBasicABProp.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrAdvFixedWingTurbofanBasicABProp._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrAdvFixedWingTurbofanBasicABProp._get_property(self, attrname) is not None: found_prop = IAgAvtrAdvFixedWingTurbofanBasicABProp._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrAdvFixedWingTurbofanBasicABProp.")

agcls.AgClassCatalog.add_catalog_entry("{327e3a7a-ecce-445e-b105-2dbec0239e6d}", AgAvtrAdvFixedWingTurbofanBasicABProp)


class AgAvtrAdvFixedWingTurbojetBasicABProp(IAgAvtrAdvFixedWingTurbojetBasicABProp):
    """Class defining the Turbojet - Basic w/AB (Thermodynamic model) powerplant in the Advanced Fixed Wing Tool"""
    def __init__(self, sourceObject=None):
        IAgAvtrAdvFixedWingTurbojetBasicABProp.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrAdvFixedWingTurbojetBasicABProp._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrAdvFixedWingTurbojetBasicABProp._get_property(self, attrname) is not None: found_prop = IAgAvtrAdvFixedWingTurbojetBasicABProp._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrAdvFixedWingTurbojetBasicABProp.")

agcls.AgClassCatalog.add_catalog_entry("{c60f96fa-5802-4d89-b522-2a1dd5e03ca0}", AgAvtrAdvFixedWingTurbojetBasicABProp)


class AgAvtrAdvFixedWingTurbopropPowerplant(IAgAvtrAdvFixedWingTurbopropPowerplant):
    """Class defining the Turboprop powerplant in the Advanced Fixed Wing Tool"""
    def __init__(self, sourceObject=None):
        IAgAvtrAdvFixedWingTurbopropPowerplant.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrAdvFixedWingTurbopropPowerplant._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrAdvFixedWingTurbopropPowerplant._get_property(self, attrname) is not None: found_prop = IAgAvtrAdvFixedWingTurbopropPowerplant._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrAdvFixedWingTurbopropPowerplant.")

agcls.AgClassCatalog.add_catalog_entry("{7ac5402a-9b5d-4fc9-94b5-365e9bc1e25e}", AgAvtrAdvFixedWingTurbopropPowerplant)


class AgAvtrMissileSimpleAero(IAgAvtrMissileSimpleAero):
    """Class defining the simple aerodynamic options for a missile."""
    def __init__(self, sourceObject=None):
        IAgAvtrMissileSimpleAero.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrMissileSimpleAero._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrMissileSimpleAero._get_property(self, attrname) is not None: found_prop = IAgAvtrMissileSimpleAero._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrMissileSimpleAero.")

agcls.AgClassCatalog.add_catalog_entry("{99dff5f7-c73c-414d-9c38-2e7b35c93f5e}", AgAvtrMissileSimpleAero)


class AgAvtrMissileExternalAero(IAgAvtrMissileExternalAero):
    """Class defining the external aerodynamic options for a missile."""
    def __init__(self, sourceObject=None):
        IAgAvtrMissileExternalAero.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrMissileExternalAero._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrMissileExternalAero._get_property(self, attrname) is not None: found_prop = IAgAvtrMissileExternalAero._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrMissileExternalAero.")

agcls.AgClassCatalog.add_catalog_entry("{92940e34-6d78-4e39-b774-4a865e9d0bc0}", AgAvtrMissileExternalAero)


class AgAvtrMissileAdvancedAero(IAgAvtrMissileAdvancedAero):
    """Class defining the advanced aerodynamic options for a missile."""
    def __init__(self, sourceObject=None):
        IAgAvtrMissileAdvancedAero.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrMissileAdvancedAero._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrMissileAdvancedAero._get_property(self, attrname) is not None: found_prop = IAgAvtrMissileAdvancedAero._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrMissileAdvancedAero.")

agcls.AgClassCatalog.add_catalog_entry("{becfe264-7b70-461f-9f64-b0d23aa59f1e}", AgAvtrMissileAdvancedAero)


class AgAvtrMissileAero(IAgAvtrMissileAero):
    """Class defining the aerodynamic options for a missile."""
    def __init__(self, sourceObject=None):
        IAgAvtrMissileAero.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrMissileAero._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrMissileAero._get_property(self, attrname) is not None: found_prop = IAgAvtrMissileAero._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrMissileAero.")

agcls.AgClassCatalog.add_catalog_entry("{bc518434-5a42-49e0-8a54-8212a797c728}", AgAvtrMissileAero)


class AgAvtrMissileProp(IAgAvtrMissileProp):
    """Class defining the propulsion options for a missile."""
    def __init__(self, sourceObject=None):
        IAgAvtrMissileProp.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrMissileProp._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrMissileProp._get_property(self, attrname) is not None: found_prop = IAgAvtrMissileProp._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrMissileProp.")

agcls.AgClassCatalog.add_catalog_entry("{544b60ce-22da-4e8b-a222-ffd4bc070a01}", AgAvtrMissileProp)


class AgAvtrMissileSimpleProp(IAgAvtrMissileSimpleProp):
    """Class defining the Simple propulsion options for a missile."""
    def __init__(self, sourceObject=None):
        IAgAvtrMissileSimpleProp.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrMissileSimpleProp._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrMissileSimpleProp._get_property(self, attrname) is not None: found_prop = IAgAvtrMissileSimpleProp._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrMissileSimpleProp.")

agcls.AgClassCatalog.add_catalog_entry("{e92e2a28-9614-4afe-97ee-8e0d90e4ee3b}", AgAvtrMissileSimpleProp)


class AgAvtrMissileExternalProp(IAgAvtrMissileExternalProp):
    """Class defining the External propulsion options for a missile."""
    def __init__(self, sourceObject=None):
        IAgAvtrMissileExternalProp.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrMissileExternalProp._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrMissileExternalProp._get_property(self, attrname) is not None: found_prop = IAgAvtrMissileExternalProp._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrMissileExternalProp.")

agcls.AgClassCatalog.add_catalog_entry("{4b7a80c7-e7a6-453b-a423-1c53ac68c0bc}", AgAvtrMissileExternalProp)


class AgAvtrMissileRamjetProp(IAgAvtrMissileRamjetProp):
    """Class defining the Ramjet propulsion options for a missile."""
    def __init__(self, sourceObject=None):
        IAgAvtrMissileRamjetProp.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrMissileRamjetProp._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrMissileRamjetProp._get_property(self, attrname) is not None: found_prop = IAgAvtrMissileRamjetProp._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrMissileRamjetProp.")

agcls.AgClassCatalog.add_catalog_entry("{0bef31b2-9f2c-4dea-b475-e2feeb55052e}", AgAvtrMissileRamjetProp)


class AgAvtrMissileRocketProp(IAgAvtrMissileRocketProp):
    """Class defining the Rocket propulsion options for a missile."""
    def __init__(self, sourceObject=None):
        IAgAvtrMissileRocketProp.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrMissileRocketProp._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrMissileRocketProp._get_property(self, attrname) is not None: found_prop = IAgAvtrMissileRocketProp._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrMissileRocketProp.")

agcls.AgClassCatalog.add_catalog_entry("{68296bb7-edd5-4305-8b51-3f3d0c7d4428}", AgAvtrMissileRocketProp)


class AgAvtrMissileTurbojetProp(IAgAvtrMissileTurbojetProp):
    """Class defining the Turbojet propulsion options for a missile."""
    def __init__(self, sourceObject=None):
        IAgAvtrMissileTurbojetProp.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrMissileTurbojetProp._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrMissileTurbojetProp._get_property(self, attrname) is not None: found_prop = IAgAvtrMissileTurbojetProp._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrMissileTurbojetProp.")

agcls.AgClassCatalog.add_catalog_entry("{6024d1a7-768e-4015-abb3-e0539d431ff9}", AgAvtrMissileTurbojetProp)


class AgAvtrRefStateForwardFlightOptions(IAgAvtrRefStateForwardFlightOptions):
    """Class defining the Forward Flight options for a Reference State procedure."""
    def __init__(self, sourceObject=None):
        IAgAvtrRefStateForwardFlightOptions.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrRefStateForwardFlightOptions._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrRefStateForwardFlightOptions._get_property(self, attrname) is not None: found_prop = IAgAvtrRefStateForwardFlightOptions._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrRefStateForwardFlightOptions.")

agcls.AgClassCatalog.add_catalog_entry("{6f60fd0b-6c79-48a5-908b-b5d697552b94}", AgAvtrRefStateForwardFlightOptions)


class AgAvtrRefStateTakeoffLandingOptions(IAgAvtrRefStateTakeoffLandingOptions):
    """Class defining the Takeoff or Landing options for a Reference State procedure."""
    def __init__(self, sourceObject=None):
        IAgAvtrRefStateTakeoffLandingOptions.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrRefStateTakeoffLandingOptions._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrRefStateTakeoffLandingOptions._get_property(self, attrname) is not None: found_prop = IAgAvtrRefStateTakeoffLandingOptions._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrRefStateTakeoffLandingOptions.")

agcls.AgClassCatalog.add_catalog_entry("{5a54840f-128e-411c-af24-2e2c49fbd922}", AgAvtrRefStateTakeoffLandingOptions)


class AgAvtrRefStateHoverOptions(IAgAvtrRefStateHoverOptions):
    """Class defining the Hover options for a Reference State procedure."""
    def __init__(self, sourceObject=None):
        IAgAvtrRefStateHoverOptions.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrRefStateHoverOptions._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrRefStateHoverOptions._get_property(self, attrname) is not None: found_prop = IAgAvtrRefStateHoverOptions._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrRefStateHoverOptions.")

agcls.AgClassCatalog.add_catalog_entry("{0767b34e-3bc9-447d-956e-5e0939cc9bfc}", AgAvtrRefStateHoverOptions)


class AgAvtrRefStateWeightOnWheelsOptions(IAgAvtrRefStateWeightOnWheelsOptions):
    """Class defining the Weight on Wheels options for a Reference State procedure."""
    def __init__(self, sourceObject=None):
        IAgAvtrRefStateWeightOnWheelsOptions.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrRefStateWeightOnWheelsOptions._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrRefStateWeightOnWheelsOptions._get_property(self, attrname) is not None: found_prop = IAgAvtrRefStateWeightOnWheelsOptions._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrRefStateWeightOnWheelsOptions.")

agcls.AgClassCatalog.add_catalog_entry("{de32d95c-707b-41dd-a7de-072506f171b9}", AgAvtrRefStateWeightOnWheelsOptions)


class AgAvtrSiteRunwayFromCatalog(IAgAvtrSiteRunwayFromCatalog, IAgAvtrSite):
    """Class defining a runway from catalog site."""
    def __init__(self, sourceObject=None):
        IAgAvtrSiteRunwayFromCatalog.__init__(self, sourceObject)
        IAgAvtrSite.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrSiteRunwayFromCatalog._private_init(self, intf)
        IAgAvtrSite._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrSiteRunwayFromCatalog._get_property(self, attrname) is not None: found_prop = IAgAvtrSiteRunwayFromCatalog._get_property(self, attrname)
        if IAgAvtrSite._get_property(self, attrname) is not None: found_prop = IAgAvtrSite._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrSiteRunwayFromCatalog.")

agcls.AgClassCatalog.add_catalog_entry("{9220ceaa-69a7-4b64-8dfe-ec4ca0083d3e}", AgAvtrSiteRunwayFromCatalog)


class AgAvtrSiteAirportFromCatalog(IAgAvtrSiteAirportFromCatalog, IAgAvtrSite):
    """Class defining a airport from catalog site."""
    def __init__(self, sourceObject=None):
        IAgAvtrSiteAirportFromCatalog.__init__(self, sourceObject)
        IAgAvtrSite.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrSiteAirportFromCatalog._private_init(self, intf)
        IAgAvtrSite._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrSiteAirportFromCatalog._get_property(self, attrname) is not None: found_prop = IAgAvtrSiteAirportFromCatalog._get_property(self, attrname)
        if IAgAvtrSite._get_property(self, attrname) is not None: found_prop = IAgAvtrSite._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrSiteAirportFromCatalog.")

agcls.AgClassCatalog.add_catalog_entry("{b5a44f89-2af4-41bd-8ebc-8e503f43f912}", AgAvtrSiteAirportFromCatalog)


class AgAvtrSiteNavaidFromCatalog(IAgAvtrSiteNavaidFromCatalog, IAgAvtrSite):
    """Class defining a navaid from catalog site."""
    def __init__(self, sourceObject=None):
        IAgAvtrSiteNavaidFromCatalog.__init__(self, sourceObject)
        IAgAvtrSite.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrSiteNavaidFromCatalog._private_init(self, intf)
        IAgAvtrSite._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrSiteNavaidFromCatalog._get_property(self, attrname) is not None: found_prop = IAgAvtrSiteNavaidFromCatalog._get_property(self, attrname)
        if IAgAvtrSite._get_property(self, attrname) is not None: found_prop = IAgAvtrSite._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrSiteNavaidFromCatalog.")

agcls.AgClassCatalog.add_catalog_entry("{59135b93-5164-4c35-8128-de6a6376a66f}", AgAvtrSiteNavaidFromCatalog)


class AgAvtrSiteVTOLPointFromCatalog(IAgAvtrSiteVTOLPointFromCatalog, IAgAvtrSite):
    """Class defining a VTOL point from catalog site."""
    def __init__(self, sourceObject=None):
        IAgAvtrSiteVTOLPointFromCatalog.__init__(self, sourceObject)
        IAgAvtrSite.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrSiteVTOLPointFromCatalog._private_init(self, intf)
        IAgAvtrSite._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrSiteVTOLPointFromCatalog._get_property(self, attrname) is not None: found_prop = IAgAvtrSiteVTOLPointFromCatalog._get_property(self, attrname)
        if IAgAvtrSite._get_property(self, attrname) is not None: found_prop = IAgAvtrSite._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrSiteVTOLPointFromCatalog.")

agcls.AgClassCatalog.add_catalog_entry("{189c8c0a-c6a4-424f-b2ff-b1e466c38cd4}", AgAvtrSiteVTOLPointFromCatalog)


class AgAvtrSiteWaypointFromCatalog(IAgAvtrSiteWaypointFromCatalog, IAgAvtrSite):
    """Class defining a waypoint from catalog site."""
    def __init__(self, sourceObject=None):
        IAgAvtrSiteWaypointFromCatalog.__init__(self, sourceObject)
        IAgAvtrSite.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrSiteWaypointFromCatalog._private_init(self, intf)
        IAgAvtrSite._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrSiteWaypointFromCatalog._get_property(self, attrname) is not None: found_prop = IAgAvtrSiteWaypointFromCatalog._get_property(self, attrname)
        if IAgAvtrSite._get_property(self, attrname) is not None: found_prop = IAgAvtrSite._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrSiteWaypointFromCatalog.")

agcls.AgClassCatalog.add_catalog_entry("{d620651a-2526-43c8-8715-122ad6d6eb40}", AgAvtrSiteWaypointFromCatalog)


class AgAvtrNavaidCategory(IAgAvtrNavaidCategory):
    """Class defining the navaid category in the Aviator catalog."""
    def __init__(self, sourceObject=None):
        IAgAvtrNavaidCategory.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrNavaidCategory._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrNavaidCategory._get_property(self, attrname) is not None: found_prop = IAgAvtrNavaidCategory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrNavaidCategory.")

agcls.AgClassCatalog.add_catalog_entry("{9cab926c-f92d-4b63-9588-d5e849f047bf}", AgAvtrNavaidCategory)


class AgAvtrVTOLPointCategory(IAgAvtrVTOLPointCategory):
    """Class defining the VTOL point category in the Aviator catalog."""
    def __init__(self, sourceObject=None):
        IAgAvtrVTOLPointCategory.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrVTOLPointCategory._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrVTOLPointCategory._get_property(self, attrname) is not None: found_prop = IAgAvtrVTOLPointCategory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrVTOLPointCategory.")

agcls.AgClassCatalog.add_catalog_entry("{35a0a9ce-18bd-47b5-927a-1cb825edab22}", AgAvtrVTOLPointCategory)


class AgAvtrWaypointCategory(IAgAvtrWaypointCategory):
    """Class defining the waypoint category in the Aviator catalog."""
    def __init__(self, sourceObject=None):
        IAgAvtrWaypointCategory.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrWaypointCategory._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrWaypointCategory._get_property(self, attrname) is not None: found_prop = IAgAvtrWaypointCategory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrWaypointCategory.")

agcls.AgClassCatalog.add_catalog_entry("{502442da-96cc-4a07-9124-9d4e4c287801}", AgAvtrWaypointCategory)


class AgAvtrARINC424Navaid(IAgAvtrARINC424Item, IAgAvtrCatalogNavaid, IAgAvtrCatalogWaypoint, IAgAvtrCatalogItem):
    """Class defining an ARINC424 Navaid."""
    def __init__(self, sourceObject=None):
        IAgAvtrARINC424Item.__init__(self, sourceObject)
        IAgAvtrCatalogNavaid.__init__(self, sourceObject)
        IAgAvtrCatalogWaypoint.__init__(self, sourceObject)
        IAgAvtrCatalogItem.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrARINC424Item._private_init(self, intf)
        IAgAvtrCatalogNavaid._private_init(self, intf)
        IAgAvtrCatalogWaypoint._private_init(self, intf)
        IAgAvtrCatalogItem._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrARINC424Item._get_property(self, attrname) is not None: found_prop = IAgAvtrARINC424Item._get_property(self, attrname)
        if IAgAvtrCatalogNavaid._get_property(self, attrname) is not None: found_prop = IAgAvtrCatalogNavaid._get_property(self, attrname)
        if IAgAvtrCatalogWaypoint._get_property(self, attrname) is not None: found_prop = IAgAvtrCatalogWaypoint._get_property(self, attrname)
        if IAgAvtrCatalogItem._get_property(self, attrname) is not None: found_prop = IAgAvtrCatalogItem._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrARINC424Navaid.")

agcls.AgClassCatalog.add_catalog_entry("{18308bdb-0318-4820-87c7-59e4ad432c0f}", AgAvtrARINC424Navaid)


class AgAvtrARINC424Helipad(IAgAvtrARINC424Item, IAgAvtrCatalogVTOLPoint, IAgAvtrCatalogWaypoint, IAgAvtrCatalogItem):
    """Class defining an ARINC424 Helipad."""
    def __init__(self, sourceObject=None):
        IAgAvtrARINC424Item.__init__(self, sourceObject)
        IAgAvtrCatalogVTOLPoint.__init__(self, sourceObject)
        IAgAvtrCatalogWaypoint.__init__(self, sourceObject)
        IAgAvtrCatalogItem.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrARINC424Item._private_init(self, intf)
        IAgAvtrCatalogVTOLPoint._private_init(self, intf)
        IAgAvtrCatalogWaypoint._private_init(self, intf)
        IAgAvtrCatalogItem._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrARINC424Item._get_property(self, attrname) is not None: found_prop = IAgAvtrARINC424Item._get_property(self, attrname)
        if IAgAvtrCatalogVTOLPoint._get_property(self, attrname) is not None: found_prop = IAgAvtrCatalogVTOLPoint._get_property(self, attrname)
        if IAgAvtrCatalogWaypoint._get_property(self, attrname) is not None: found_prop = IAgAvtrCatalogWaypoint._get_property(self, attrname)
        if IAgAvtrCatalogItem._get_property(self, attrname) is not None: found_prop = IAgAvtrCatalogItem._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrARINC424Helipad.")

agcls.AgClassCatalog.add_catalog_entry("{6cf2bbc6-dcf3-493e-ad3d-bf58879edd2d}", AgAvtrARINC424Helipad)


class AgAvtrARINC424Waypoint(IAgAvtrARINC424Item, IAgAvtrCatalogWaypoint, IAgAvtrCatalogItem):
    """Class defining an ARINC424 Waypoint."""
    def __init__(self, sourceObject=None):
        IAgAvtrARINC424Item.__init__(self, sourceObject)
        IAgAvtrCatalogWaypoint.__init__(self, sourceObject)
        IAgAvtrCatalogItem.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrARINC424Item._private_init(self, intf)
        IAgAvtrCatalogWaypoint._private_init(self, intf)
        IAgAvtrCatalogItem._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrARINC424Item._get_property(self, attrname) is not None: found_prop = IAgAvtrARINC424Item._get_property(self, attrname)
        if IAgAvtrCatalogWaypoint._get_property(self, attrname) is not None: found_prop = IAgAvtrCatalogWaypoint._get_property(self, attrname)
        if IAgAvtrCatalogItem._get_property(self, attrname) is not None: found_prop = IAgAvtrCatalogItem._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrARINC424Waypoint.")

agcls.AgClassCatalog.add_catalog_entry("{55d1b405-651f-4687-a34a-f0bb64ec8814}", AgAvtrARINC424Waypoint)


class AgAvtrUserVTOLPointSource(IAgAvtrUserVTOLPointSource, IAgAvtrCatalogSource):
    """Class defining the user VTOL Point source in the Aviator catalog."""
    def __init__(self, sourceObject=None):
        IAgAvtrUserVTOLPointSource.__init__(self, sourceObject)
        IAgAvtrCatalogSource.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrUserVTOLPointSource._private_init(self, intf)
        IAgAvtrCatalogSource._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrUserVTOLPointSource._get_property(self, attrname) is not None: found_prop = IAgAvtrUserVTOLPointSource._get_property(self, attrname)
        if IAgAvtrCatalogSource._get_property(self, attrname) is not None: found_prop = IAgAvtrCatalogSource._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrUserVTOLPointSource.")

agcls.AgClassCatalog.add_catalog_entry("{dfc0b12b-f8c4-4d99-bb5c-6aecebe0ea7d}", AgAvtrUserVTOLPointSource)


class AgAvtrUserVTOLPoint(IAgAvtrUserVTOLPoint, IAgAvtrCatalogVTOLPoint, IAgAvtrCatalogWaypoint, IAgAvtrCatalogItem):
    """Class defining the user VTOL Point in the Aviator catalog."""
    def __init__(self, sourceObject=None):
        IAgAvtrUserVTOLPoint.__init__(self, sourceObject)
        IAgAvtrCatalogVTOLPoint.__init__(self, sourceObject)
        IAgAvtrCatalogWaypoint.__init__(self, sourceObject)
        IAgAvtrCatalogItem.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrUserVTOLPoint._private_init(self, intf)
        IAgAvtrCatalogVTOLPoint._private_init(self, intf)
        IAgAvtrCatalogWaypoint._private_init(self, intf)
        IAgAvtrCatalogItem._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrUserVTOLPoint._get_property(self, attrname) is not None: found_prop = IAgAvtrUserVTOLPoint._get_property(self, attrname)
        if IAgAvtrCatalogVTOLPoint._get_property(self, attrname) is not None: found_prop = IAgAvtrCatalogVTOLPoint._get_property(self, attrname)
        if IAgAvtrCatalogWaypoint._get_property(self, attrname) is not None: found_prop = IAgAvtrCatalogWaypoint._get_property(self, attrname)
        if IAgAvtrCatalogItem._get_property(self, attrname) is not None: found_prop = IAgAvtrCatalogItem._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrUserVTOLPoint.")

agcls.AgClassCatalog.add_catalog_entry("{748a44bd-4d22-4800-a311-fc8c95901638}", AgAvtrUserVTOLPoint)


class AgAvtrUserWaypointSource(IAgAvtrUserWaypointSource, IAgAvtrCatalogSource):
    """Class defining the user waypoint source in the Aviator catalog."""
    def __init__(self, sourceObject=None):
        IAgAvtrUserWaypointSource.__init__(self, sourceObject)
        IAgAvtrCatalogSource.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrUserWaypointSource._private_init(self, intf)
        IAgAvtrCatalogSource._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrUserWaypointSource._get_property(self, attrname) is not None: found_prop = IAgAvtrUserWaypointSource._get_property(self, attrname)
        if IAgAvtrCatalogSource._get_property(self, attrname) is not None: found_prop = IAgAvtrCatalogSource._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrUserWaypointSource.")

agcls.AgClassCatalog.add_catalog_entry("{7f85e32f-b5a1-4d12-b7ac-a817dd7162d0}", AgAvtrUserWaypointSource)


class AgAvtrUserWaypoint(IAgAvtrUserWaypoint, IAgAvtrCatalogWaypoint, IAgAvtrCatalogItem):
    """Class defining the user waypoint in the Aviator catalog."""
    def __init__(self, sourceObject=None):
        IAgAvtrUserWaypoint.__init__(self, sourceObject)
        IAgAvtrCatalogWaypoint.__init__(self, sourceObject)
        IAgAvtrCatalogItem.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrUserWaypoint._private_init(self, intf)
        IAgAvtrCatalogWaypoint._private_init(self, intf)
        IAgAvtrCatalogItem._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrUserWaypoint._get_property(self, attrname) is not None: found_prop = IAgAvtrUserWaypoint._get_property(self, attrname)
        if IAgAvtrCatalogWaypoint._get_property(self, attrname) is not None: found_prop = IAgAvtrCatalogWaypoint._get_property(self, attrname)
        if IAgAvtrCatalogItem._get_property(self, attrname) is not None: found_prop = IAgAvtrCatalogItem._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrUserWaypoint.")

agcls.AgClassCatalog.add_catalog_entry("{ca33c45d-2eba-409b-aa44-b57b5a57e3b3}", AgAvtrUserWaypoint)


class AgAvtrPropulsionEfficiencies(IAgAvtrPropulsionEfficiencies):
    """Class defining the Propulsion Efficiencies and Losses of a jet engine powerplant in the advanced fixed wing tool."""
    def __init__(self, sourceObject=None):
        IAgAvtrPropulsionEfficiencies.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrPropulsionEfficiencies._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrPropulsionEfficiencies._get_property(self, attrname) is not None: found_prop = IAgAvtrPropulsionEfficiencies._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrPropulsionEfficiencies.")

agcls.AgClassCatalog.add_catalog_entry("{0af7363a-b62a-4eaf-a4b5-4103197bc6b1}", AgAvtrPropulsionEfficiencies)


class AgAvtrFuelModelKeroseneAFPROP(IAgAvtrFuelModelKeroseneAFPROP):
    """Class defining the Kerosense - AFPROP fuel type for a thermodynamic jet engine model."""
    def __init__(self, sourceObject=None):
        IAgAvtrFuelModelKeroseneAFPROP.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrFuelModelKeroseneAFPROP._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrFuelModelKeroseneAFPROP._get_property(self, attrname) is not None: found_prop = IAgAvtrFuelModelKeroseneAFPROP._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrFuelModelKeroseneAFPROP.")

agcls.AgClassCatalog.add_catalog_entry("{fb23d809-5785-4a45-b914-415015e6d9eb}", AgAvtrFuelModelKeroseneAFPROP)


class AgAvtrFuelModelKeroseneCEA(IAgAvtrFuelModelKeroseneCEA):
    """Class defining the Kerosense - CEA fuel type for a thermodynamic jet engine model."""
    def __init__(self, sourceObject=None):
        IAgAvtrFuelModelKeroseneCEA.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrFuelModelKeroseneCEA._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrFuelModelKeroseneCEA._get_property(self, attrname) is not None: found_prop = IAgAvtrFuelModelKeroseneCEA._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrFuelModelKeroseneCEA.")

agcls.AgClassCatalog.add_catalog_entry("{6df7fa84-6983-4ed2-9447-a11d0fbd0fac}", AgAvtrFuelModelKeroseneCEA)


class AgAvtrAdvFixedWingRamjetBasic(IAgAvtrAdvFixedWingRamjetBasic):
    """Class defining the basic Ramjet model."""
    def __init__(self, sourceObject=None):
        IAgAvtrAdvFixedWingRamjetBasic.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrAdvFixedWingRamjetBasic._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrAdvFixedWingRamjetBasic._get_property(self, attrname) is not None: found_prop = IAgAvtrAdvFixedWingRamjetBasic._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrAdvFixedWingRamjetBasic.")

agcls.AgClassCatalog.add_catalog_entry("{9f333e9b-3d22-429d-9880-940122216dde}", AgAvtrAdvFixedWingRamjetBasic)


class AgAvtrAdvFixedWingScramjetBasic(IAgAvtrAdvFixedWingScramjetBasic):
    """Class defining the basic Scramjet model."""
    def __init__(self, sourceObject=None):
        IAgAvtrAdvFixedWingScramjetBasic.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrAdvFixedWingScramjetBasic._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrAdvFixedWingScramjetBasic._get_property(self, attrname) is not None: found_prop = IAgAvtrAdvFixedWingScramjetBasic._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrAdvFixedWingScramjetBasic.")

agcls.AgClassCatalog.add_catalog_entry("{6caec1e6-8cf4-4752-89c6-42b55473f144}", AgAvtrAdvFixedWingScramjetBasic)


class AgAvtrAircraftVTOLModel(IAgAvtrAircraftVTOLModel):
    """Class defining the VTOL performance model of an aircraft."""
    def __init__(self, sourceObject=None):
        IAgAvtrAircraftVTOLModel.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrAircraftVTOLModel._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrAircraftVTOLModel._get_property(self, attrname) is not None: found_prop = IAgAvtrAircraftVTOLModel._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrAircraftVTOLModel.")

agcls.AgClassCatalog.add_catalog_entry("{5fb18d9d-20cb-408e-a0d0-60f5cdd9dc2c}", AgAvtrAircraftVTOLModel)


class AgAvtrAircraftVTOL(IAgAvtrAircraftVTOL, IAgAvtrCatalogItem):
    """Class defining the VTOL category of an Aviator aircraft."""
    def __init__(self, sourceObject=None):
        IAgAvtrAircraftVTOL.__init__(self, sourceObject)
        IAgAvtrCatalogItem.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrAircraftVTOL._private_init(self, intf)
        IAgAvtrCatalogItem._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrAircraftVTOL._get_property(self, attrname) is not None: found_prop = IAgAvtrAircraftVTOL._get_property(self, attrname)
        if IAgAvtrCatalogItem._get_property(self, attrname) is not None: found_prop = IAgAvtrCatalogItem._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrAircraftVTOL.")

agcls.AgClassCatalog.add_catalog_entry("{c1bd235a-6ffc-435c-900d-0ff6a7ca5422}", AgAvtrAircraftVTOL)


class AgAvtrAircraftTerrainFollowModel(IAgAvtrAircraftTerrainFollowModel):
    """Class defining the TerrainFollow performance model of an aircraft."""
    def __init__(self, sourceObject=None):
        IAgAvtrAircraftTerrainFollowModel.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrAircraftTerrainFollowModel._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrAircraftTerrainFollowModel._get_property(self, attrname) is not None: found_prop = IAgAvtrAircraftTerrainFollowModel._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrAircraftTerrainFollowModel.")

agcls.AgClassCatalog.add_catalog_entry("{27d2c971-cdce-4465-a3df-eaf526de6c01}", AgAvtrAircraftTerrainFollowModel)


class AgAvtrAircraftTerrainFollow(IAgAvtrAircraftTerrainFollow, IAgAvtrCatalogItem):
    """Class defining the TerrainFollow category of an Aviator aircraft."""
    def __init__(self, sourceObject=None):
        IAgAvtrAircraftTerrainFollow.__init__(self, sourceObject)
        IAgAvtrCatalogItem.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrAircraftTerrainFollow._private_init(self, intf)
        IAgAvtrCatalogItem._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrAircraftTerrainFollow._get_property(self, attrname) is not None: found_prop = IAgAvtrAircraftTerrainFollow._get_property(self, attrname)
        if IAgAvtrCatalogItem._get_property(self, attrname) is not None: found_prop = IAgAvtrCatalogItem._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrAircraftTerrainFollow.")

agcls.AgClassCatalog.add_catalog_entry("{683bec0d-293d-4afa-a1ab-b23b123d62e4}", AgAvtrAircraftTerrainFollow)


class AgAvtrBasicManeuverStrategyBallistic3D(IAgAvtrBasicManeuverStrategyBallistic3D, IAgAvtrBasicManeuverStrategy):
    """Class defining Ballistic 3D strategy for a Basic Maneuver procedure."""
    def __init__(self, sourceObject=None):
        IAgAvtrBasicManeuverStrategyBallistic3D.__init__(self, sourceObject)
        IAgAvtrBasicManeuverStrategy.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrBasicManeuverStrategyBallistic3D._private_init(self, intf)
        IAgAvtrBasicManeuverStrategy._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrBasicManeuverStrategyBallistic3D._get_property(self, attrname) is not None: found_prop = IAgAvtrBasicManeuverStrategyBallistic3D._get_property(self, attrname)
        if IAgAvtrBasicManeuverStrategy._get_property(self, attrname) is not None: found_prop = IAgAvtrBasicManeuverStrategy._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrBasicManeuverStrategyBallistic3D.")

agcls.AgClassCatalog.add_catalog_entry("{ec8f88ae-2944-459b-90aa-f8df3e74bf89}", AgAvtrBasicManeuverStrategyBallistic3D)


class AgAvtrProcedureLaunchDynState(IAgAvtrProcedureLaunchDynState, IAgAvtrProcedure):
    """Class defining a Launch Dyn State procedure."""
    def __init__(self, sourceObject=None):
        IAgAvtrProcedureLaunchDynState.__init__(self, sourceObject)
        IAgAvtrProcedure.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrProcedureLaunchDynState._private_init(self, intf)
        IAgAvtrProcedure._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrProcedureLaunchDynState._get_property(self, attrname) is not None: found_prop = IAgAvtrProcedureLaunchDynState._get_property(self, attrname)
        if IAgAvtrProcedure._get_property(self, attrname) is not None: found_prop = IAgAvtrProcedure._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrProcedureLaunchDynState.")

agcls.AgClassCatalog.add_catalog_entry("{AA90861B-C8E1-46D1-BA87-47F27D731B84}", AgAvtrProcedureLaunchDynState)


class AgAvtrProcedureLaunchWaypoint(IAgAvtrProcedureLaunchWaypoint, IAgAvtrProcedure):
    """Class defining a Launch Waypoint procedure."""
    def __init__(self, sourceObject=None):
        IAgAvtrProcedureLaunchWaypoint.__init__(self, sourceObject)
        IAgAvtrProcedure.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrProcedureLaunchWaypoint._private_init(self, intf)
        IAgAvtrProcedure._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrProcedureLaunchWaypoint._get_property(self, attrname) is not None: found_prop = IAgAvtrProcedureLaunchWaypoint._get_property(self, attrname)
        if IAgAvtrProcedure._get_property(self, attrname) is not None: found_prop = IAgAvtrProcedure._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrProcedureLaunchWaypoint.")

agcls.AgClassCatalog.add_catalog_entry("{05730C66-FF4D-4A05-A821-C541134119CE}", AgAvtrProcedureLaunchWaypoint)


class AgAvtrSiteDynState(IAgAvtrSiteDynState, IAgAvtrSite):
    """Class defining a Dyn State site."""
    def __init__(self, sourceObject=None):
        IAgAvtrSiteDynState.__init__(self, sourceObject)
        IAgAvtrSite.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrSiteDynState._private_init(self, intf)
        IAgAvtrSite._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrSiteDynState._get_property(self, attrname) is not None: found_prop = IAgAvtrSiteDynState._get_property(self, attrname)
        if IAgAvtrSite._get_property(self, attrname) is not None: found_prop = IAgAvtrSite._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrSiteDynState.")

agcls.AgClassCatalog.add_catalog_entry("{DF907297-E5CC-4346-9E97-95A3AFEE02FD}", AgAvtrSiteDynState)


class AgAvtrBasicManeuverStrategyPitch3D(IAgAvtrBasicManeuverStrategyPitch3D, IAgAvtrBasicManeuverStrategy):
    """Class defining Pitch 3D strategy for a Basic Maneuver procedure."""
    def __init__(self, sourceObject=None):
        IAgAvtrBasicManeuverStrategyPitch3D.__init__(self, sourceObject)
        IAgAvtrBasicManeuverStrategy.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrBasicManeuverStrategyPitch3D._private_init(self, intf)
        IAgAvtrBasicManeuverStrategy._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrBasicManeuverStrategyPitch3D._get_property(self, attrname) is not None: found_prop = IAgAvtrBasicManeuverStrategyPitch3D._get_property(self, attrname)
        if IAgAvtrBasicManeuverStrategy._get_property(self, attrname) is not None: found_prop = IAgAvtrBasicManeuverStrategy._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrBasicManeuverStrategyPitch3D.")

agcls.AgClassCatalog.add_catalog_entry("{A10EDD83-CED6-4747-AFBA-948653338437}", AgAvtrBasicManeuverStrategyPitch3D)


class AgAvtrRefuelDumpProperties(IAgAvtrRefuelDumpProperties):
    """Class defining the refuel/dump properties for the current procedure."""
    def __init__(self, sourceObject=None):
        IAgAvtrRefuelDumpProperties.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrRefuelDumpProperties._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrRefuelDumpProperties._get_property(self, attrname) is not None: found_prop = IAgAvtrRefuelDumpProperties._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrRefuelDumpProperties.")

agcls.AgClassCatalog.add_catalog_entry("{9CB1E862-FDED-463D-B449-C39030B149D6}", AgAvtrRefuelDumpProperties)


class AgAvtrProcedureFastTimeOptions(IAgAvtrProcedureFastTimeOptions):
    """Class defining fast operations (without error or constraint checks) for time options for the current procedure."""
    def __init__(self, sourceObject=None):
        IAgAvtrProcedureFastTimeOptions.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrProcedureFastTimeOptions._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrProcedureFastTimeOptions._get_property(self, attrname) is not None: found_prop = IAgAvtrProcedureFastTimeOptions._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrProcedureFastTimeOptions.")

agcls.AgClassCatalog.add_catalog_entry("{D69CF956-3A04-48F1-B553-7A10412253A0}", AgAvtrProcedureFastTimeOptions)


class AgAvtrBasicManeuverTargetPosVel(IAgAvtrBasicManeuverTargetPosVel):
    """Class defining the target position and velocity strategies for basic maneuvers."""
    def __init__(self, sourceObject=None):
        IAgAvtrBasicManeuverTargetPosVel.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrBasicManeuverTargetPosVel._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrBasicManeuverTargetPosVel._get_property(self, attrname) is not None: found_prop = IAgAvtrBasicManeuverTargetPosVel._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrBasicManeuverTargetPosVel.")

agcls.AgClassCatalog.add_catalog_entry("{4084EB67-0992-4F64-B710-7B5B4E275AC5}", AgAvtrBasicManeuverTargetPosVel)


class AgAvtrBasicManeuverTargetPosVelNoisyBrgRng(IAgAvtrBasicManeuverTargetPosVelNoisyBrgRng):
    """Class defining the position and velocity strategy, Noisy Bearing Range"""
    def __init__(self, sourceObject=None):
        IAgAvtrBasicManeuverTargetPosVelNoisyBrgRng.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrBasicManeuverTargetPosVelNoisyBrgRng._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrBasicManeuverTargetPosVelNoisyBrgRng._get_property(self, attrname) is not None: found_prop = IAgAvtrBasicManeuverTargetPosVelNoisyBrgRng._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrBasicManeuverTargetPosVelNoisyBrgRng.")

agcls.AgClassCatalog.add_catalog_entry("{B64A8B6B-FA25-47EF-8945-2DA2817D6853}", AgAvtrBasicManeuverTargetPosVelNoisyBrgRng)


class AgAvtrBasicManeuverTargetPosVelNoisySurfTgt(IAgAvtrBasicManeuverTargetPosVelNoisySurfTgt):
    """Class defining the position and velocity strategy, Noisy Surface Target"""
    def __init__(self, sourceObject=None):
        IAgAvtrBasicManeuverTargetPosVelNoisySurfTgt.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrBasicManeuverTargetPosVelNoisySurfTgt._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrBasicManeuverTargetPosVelNoisySurfTgt._get_property(self, attrname) is not None: found_prop = IAgAvtrBasicManeuverTargetPosVelNoisySurfTgt._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrBasicManeuverTargetPosVelNoisySurfTgt.")

agcls.AgClassCatalog.add_catalog_entry("{A04BE0CD-AF3B-4887-A160-F4FCF29B9610}", AgAvtrBasicManeuverTargetPosVelNoisySurfTgt)



################################################################################
#          Copyright 2020-2023, Ansys Government Initiatives
################################################################################
