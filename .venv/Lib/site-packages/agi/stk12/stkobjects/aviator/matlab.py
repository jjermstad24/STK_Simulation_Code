################################################################################
#          Copyright 2020-2023, Ansys Government Initiatives
################################################################################ 

__all__ = ["AgAvtrBasicManeuverMATLABFactory", "AgAvtrStrategyMATLAB3DGuidance", "AgAvtrStrategyMATLABFull3D", "AgAvtrStrategyMATLABNav", 
"AgAvtrStrategyMATLABProfile", "IAgAvtrStrategyMATLAB3DGuidance", "IAgAvtrStrategyMATLABFull3D", "IAgAvtrStrategyMATLABNav", 
"IAgAvtrStrategyMATLABProfile"]

import typing

from ctypes   import byref, POINTER
from datetime import datetime
from enum     import IntEnum, IntFlag

from ...internal  import comutil          as agcom
from ...internal  import coclassutil      as agcls
from ...internal  import marshall         as agmarshall
from ...internal  import dataanalysisutil as agdata
from ...utilities import colors           as agcolor
from ...internal.comutil     import IUnknown, IDispatch, IPictureDisp
from ...internal.apiutil     import interface_proxy, enumerator_proxy, out_arg
from ...internal.eventutil   import *
from ...utilities.exceptions import *

from ...stkobjects.aviator import *


def _raise_uninitialized_error(*args):
    raise STKRuntimeError("Valid STK object model classes are returned from STK methods and should not be created independently.")

class IAgAvtrStrategyMATLABNav(object):
    """Interface used to access options for a MATLAB - Horizontal Plane Strategy of a Basic Maneuver Procedure."""
    _num_methods = 7
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{e53fcce4-1a17-488d-9053-c236d27b8b6e}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_FunctionName" : 1,
                             "set_FunctionName" : 2,
                             "IsFunctionPathValid" : 3,
                             "get_CheckForErrors" : 4,
                             "set_CheckForErrors" : 5,
                             "get_DisplayOutput" : 6,
                             "set_DisplayOutput" : 7, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrStrategyMATLABNav._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrStrategyMATLABNav from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrStrategyMATLABNav.__dict__ and type(IAgAvtrStrategyMATLABNav.__dict__[attrname]) == property:
            return IAgAvtrStrategyMATLABNav.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrStrategyMATLABNav.")
    
    _get_FunctionName_metadata = { "name" : "FunctionName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def FunctionName(self) -> str:
        """The name of the MATLAB function."""
        return self._intf.get_property(IAgAvtrStrategyMATLABNav._metadata, IAgAvtrStrategyMATLABNav._get_FunctionName_metadata)

    _set_FunctionName_metadata = { "name" : "FunctionName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @FunctionName.setter
    def FunctionName(self, newVal:str) -> None:
        """The name of the MATLAB function."""
        return self._intf.set_property(IAgAvtrStrategyMATLABNav._metadata, IAgAvtrStrategyMATLABNav._set_FunctionName_metadata, newVal)

    _IsFunctionPathValid_metadata = { "name" : "IsFunctionPathValid",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    def IsFunctionPathValid(self) -> bool:
        """Check if the MATLAB function path is valid."""
        return self._intf.invoke(IAgAvtrStrategyMATLABNav._metadata, IAgAvtrStrategyMATLABNav._IsFunctionPathValid_metadata, out_arg())

    _get_CheckForErrors_metadata = { "name" : "CheckForErrors",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def CheckForErrors(self) -> bool:
        """The option to check the function for errors."""
        return self._intf.get_property(IAgAvtrStrategyMATLABNav._metadata, IAgAvtrStrategyMATLABNav._get_CheckForErrors_metadata)

    _set_CheckForErrors_metadata = { "name" : "CheckForErrors",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @CheckForErrors.setter
    def CheckForErrors(self, newVal:bool) -> None:
        """The option to check the function for errors."""
        return self._intf.set_property(IAgAvtrStrategyMATLABNav._metadata, IAgAvtrStrategyMATLABNav._set_CheckForErrors_metadata, newVal)

    _get_DisplayOutput_metadata = { "name" : "DisplayOutput",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def DisplayOutput(self) -> bool:
        """The option to display the output from the MATLAB function."""
        return self._intf.get_property(IAgAvtrStrategyMATLABNav._metadata, IAgAvtrStrategyMATLABNav._get_DisplayOutput_metadata)

    _set_DisplayOutput_metadata = { "name" : "DisplayOutput",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @DisplayOutput.setter
    def DisplayOutput(self, newVal:bool) -> None:
        """The option to display the output from the MATLAB function."""
        return self._intf.set_property(IAgAvtrStrategyMATLABNav._metadata, IAgAvtrStrategyMATLABNav._set_DisplayOutput_metadata, newVal)


agcls.AgClassCatalog.add_catalog_entry("{e53fcce4-1a17-488d-9053-c236d27b8b6e}", IAgAvtrStrategyMATLABNav)
agcls.AgTypeNameMap["IAgAvtrStrategyMATLABNav"] = IAgAvtrStrategyMATLABNav

class IAgAvtrStrategyMATLABProfile(object):
    """Interface used to access options for a MATLAB - Vertical Plane Strategy of a Basic Maneuver Procedure."""
    _num_methods = 7
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{c5c0a490-9e7d-4ff9-95e9-9c10ed89500b}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_FunctionName" : 1,
                             "set_FunctionName" : 2,
                             "IsFunctionPathValid" : 3,
                             "get_CheckForErrors" : 4,
                             "set_CheckForErrors" : 5,
                             "get_DisplayOutput" : 6,
                             "set_DisplayOutput" : 7, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrStrategyMATLABProfile._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrStrategyMATLABProfile from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrStrategyMATLABProfile.__dict__ and type(IAgAvtrStrategyMATLABProfile.__dict__[attrname]) == property:
            return IAgAvtrStrategyMATLABProfile.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrStrategyMATLABProfile.")
    
    _get_FunctionName_metadata = { "name" : "FunctionName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def FunctionName(self) -> str:
        """The name of the MATLAB function."""
        return self._intf.get_property(IAgAvtrStrategyMATLABProfile._metadata, IAgAvtrStrategyMATLABProfile._get_FunctionName_metadata)

    _set_FunctionName_metadata = { "name" : "FunctionName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @FunctionName.setter
    def FunctionName(self, newVal:str) -> None:
        """The name of the MATLAB function."""
        return self._intf.set_property(IAgAvtrStrategyMATLABProfile._metadata, IAgAvtrStrategyMATLABProfile._set_FunctionName_metadata, newVal)

    _IsFunctionPathValid_metadata = { "name" : "IsFunctionPathValid",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    def IsFunctionPathValid(self) -> bool:
        """Check if the MATLAB function path is valid."""
        return self._intf.invoke(IAgAvtrStrategyMATLABProfile._metadata, IAgAvtrStrategyMATLABProfile._IsFunctionPathValid_metadata, out_arg())

    _get_CheckForErrors_metadata = { "name" : "CheckForErrors",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def CheckForErrors(self) -> bool:
        """The option to check the function for errors."""
        return self._intf.get_property(IAgAvtrStrategyMATLABProfile._metadata, IAgAvtrStrategyMATLABProfile._get_CheckForErrors_metadata)

    _set_CheckForErrors_metadata = { "name" : "CheckForErrors",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @CheckForErrors.setter
    def CheckForErrors(self, newVal:bool) -> None:
        """The option to check the function for errors."""
        return self._intf.set_property(IAgAvtrStrategyMATLABProfile._metadata, IAgAvtrStrategyMATLABProfile._set_CheckForErrors_metadata, newVal)

    _get_DisplayOutput_metadata = { "name" : "DisplayOutput",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def DisplayOutput(self) -> bool:
        """The option to display the output from the MATLAB function."""
        return self._intf.get_property(IAgAvtrStrategyMATLABProfile._metadata, IAgAvtrStrategyMATLABProfile._get_DisplayOutput_metadata)

    _set_DisplayOutput_metadata = { "name" : "DisplayOutput",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @DisplayOutput.setter
    def DisplayOutput(self, newVal:bool) -> None:
        """The option to display the output from the MATLAB function."""
        return self._intf.set_property(IAgAvtrStrategyMATLABProfile._metadata, IAgAvtrStrategyMATLABProfile._set_DisplayOutput_metadata, newVal)


agcls.AgClassCatalog.add_catalog_entry("{c5c0a490-9e7d-4ff9-95e9-9c10ed89500b}", IAgAvtrStrategyMATLABProfile)
agcls.AgTypeNameMap["IAgAvtrStrategyMATLABProfile"] = IAgAvtrStrategyMATLABProfile

class IAgAvtrStrategyMATLABFull3D(object):
    """Interface used to access options for a MATLAB - Full 3D Strategy of a Basic Maneuver Procedure."""
    _num_methods = 7
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{eb6b432e-50fc-4546-9d4b-a4285ae96a9d}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_FunctionName" : 1,
                             "set_FunctionName" : 2,
                             "IsFunctionPathValid" : 3,
                             "get_CheckForErrors" : 4,
                             "set_CheckForErrors" : 5,
                             "get_DisplayOutput" : 6,
                             "set_DisplayOutput" : 7, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrStrategyMATLABFull3D._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrStrategyMATLABFull3D from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrStrategyMATLABFull3D.__dict__ and type(IAgAvtrStrategyMATLABFull3D.__dict__[attrname]) == property:
            return IAgAvtrStrategyMATLABFull3D.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrStrategyMATLABFull3D.")
    
    _get_FunctionName_metadata = { "name" : "FunctionName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def FunctionName(self) -> str:
        """The name of the MATLAB function."""
        return self._intf.get_property(IAgAvtrStrategyMATLABFull3D._metadata, IAgAvtrStrategyMATLABFull3D._get_FunctionName_metadata)

    _set_FunctionName_metadata = { "name" : "FunctionName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @FunctionName.setter
    def FunctionName(self, newVal:str) -> None:
        """The name of the MATLAB function."""
        return self._intf.set_property(IAgAvtrStrategyMATLABFull3D._metadata, IAgAvtrStrategyMATLABFull3D._set_FunctionName_metadata, newVal)

    _IsFunctionPathValid_metadata = { "name" : "IsFunctionPathValid",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    def IsFunctionPathValid(self) -> bool:
        """Check if the MATLAB function path is valid."""
        return self._intf.invoke(IAgAvtrStrategyMATLABFull3D._metadata, IAgAvtrStrategyMATLABFull3D._IsFunctionPathValid_metadata, out_arg())

    _get_CheckForErrors_metadata = { "name" : "CheckForErrors",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def CheckForErrors(self) -> bool:
        """The option to check the function for errors."""
        return self._intf.get_property(IAgAvtrStrategyMATLABFull3D._metadata, IAgAvtrStrategyMATLABFull3D._get_CheckForErrors_metadata)

    _set_CheckForErrors_metadata = { "name" : "CheckForErrors",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @CheckForErrors.setter
    def CheckForErrors(self, newVal:bool) -> None:
        """The option to check the function for errors."""
        return self._intf.set_property(IAgAvtrStrategyMATLABFull3D._metadata, IAgAvtrStrategyMATLABFull3D._set_CheckForErrors_metadata, newVal)

    _get_DisplayOutput_metadata = { "name" : "DisplayOutput",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def DisplayOutput(self) -> bool:
        """The option to display the output from the MATLAB function."""
        return self._intf.get_property(IAgAvtrStrategyMATLABFull3D._metadata, IAgAvtrStrategyMATLABFull3D._get_DisplayOutput_metadata)

    _set_DisplayOutput_metadata = { "name" : "DisplayOutput",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @DisplayOutput.setter
    def DisplayOutput(self, newVal:bool) -> None:
        """The option to display the output from the MATLAB function."""
        return self._intf.set_property(IAgAvtrStrategyMATLABFull3D._metadata, IAgAvtrStrategyMATLABFull3D._set_DisplayOutput_metadata, newVal)


agcls.AgClassCatalog.add_catalog_entry("{eb6b432e-50fc-4546-9d4b-a4285ae96a9d}", IAgAvtrStrategyMATLABFull3D)
agcls.AgTypeNameMap["IAgAvtrStrategyMATLABFull3D"] = IAgAvtrStrategyMATLABFull3D

class IAgAvtrStrategyMATLAB3DGuidance(object):
    """Interface used to access options for a MATLAB - 3D Guidance Strategy of a Basic Maneuver Procedure."""
    _num_methods = 29
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{fa4719ee-da5b-4845-af69-09ce61f4109e}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_TargetName" : 1,
                             "set_TargetName" : 2,
                             "get_ValidTargetNames" : 3,
                             "get_TargetResolution" : 4,
                             "set_TargetResolution" : 5,
                             "get_UseStopTimeToGo" : 6,
                             "get_StopTimeToGo" : 7,
                             "SetStopTimeToGo" : 8,
                             "get_UseStopSlantRange" : 9,
                             "get_StopSlantRange" : 10,
                             "SetStopSlantRange" : 11,
                             "get_FunctionName" : 12,
                             "set_FunctionName" : 13,
                             "IsFunctionPathValid" : 14,
                             "get_CheckForErrors" : 15,
                             "set_CheckForErrors" : 16,
                             "get_DisplayOutput" : 17,
                             "set_DisplayOutput" : 18,
                             "get_ClosureMode" : 19,
                             "set_ClosureMode" : 20,
                             "get_HOBSMaxAngle" : 21,
                             "set_HOBSMaxAngle" : 22,
                             "get_HOBSAngleTol" : 23,
                             "set_HOBSAngleTol" : 24,
                             "get_ComputeTASDot" : 25,
                             "set_ComputeTASDot" : 26,
                             "get_AirspeedOptions" : 27,
                             "get_PosVelStrategies" : 28,
                             "CancelTgtPosVel" : 29, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAvtrStrategyMATLAB3DGuidance._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAvtrStrategyMATLAB3DGuidance from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAvtrStrategyMATLAB3DGuidance.__dict__ and type(IAgAvtrStrategyMATLAB3DGuidance.__dict__[attrname]) == property:
            return IAgAvtrStrategyMATLAB3DGuidance.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAvtrStrategyMATLAB3DGuidance.")
    
    _get_TargetName_metadata = { "name" : "TargetName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def TargetName(self) -> str:
        """The target name."""
        return self._intf.get_property(IAgAvtrStrategyMATLAB3DGuidance._metadata, IAgAvtrStrategyMATLAB3DGuidance._get_TargetName_metadata)

    _set_TargetName_metadata = { "name" : "TargetName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @TargetName.setter
    def TargetName(self, newVal:str) -> None:
        """The target name."""
        return self._intf.set_property(IAgAvtrStrategyMATLAB3DGuidance._metadata, IAgAvtrStrategyMATLAB3DGuidance._set_TargetName_metadata, newVal)

    _get_ValidTargetNames_metadata = { "name" : "ValidTargetNames",
            "arg_types" : (POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg,) }
    @property
    def ValidTargetNames(self) -> list:
        """Returns the valid target names."""
        return self._intf.get_property(IAgAvtrStrategyMATLAB3DGuidance._metadata, IAgAvtrStrategyMATLAB3DGuidance._get_ValidTargetNames_metadata)

    _get_TargetResolution_metadata = { "name" : "TargetResolution",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def TargetResolution(self) -> float:
        """The target position/velocity sampling resolution."""
        return self._intf.get_property(IAgAvtrStrategyMATLAB3DGuidance._metadata, IAgAvtrStrategyMATLAB3DGuidance._get_TargetResolution_metadata)

    _set_TargetResolution_metadata = { "name" : "TargetResolution",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @TargetResolution.setter
    def TargetResolution(self, newVal:float) -> None:
        """The target position/velocity sampling resolution."""
        return self._intf.set_property(IAgAvtrStrategyMATLAB3DGuidance._metadata, IAgAvtrStrategyMATLAB3DGuidance._set_TargetResolution_metadata, newVal)

    _get_UseStopTimeToGo_metadata = { "name" : "UseStopTimeToGo",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def UseStopTimeToGo(self) -> bool:
        """The option to specify a time to go stopping condition."""
        return self._intf.get_property(IAgAvtrStrategyMATLAB3DGuidance._metadata, IAgAvtrStrategyMATLAB3DGuidance._get_UseStopTimeToGo_metadata)

    _get_StopTimeToGo_metadata = { "name" : "StopTimeToGo",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def StopTimeToGo(self) -> float:
        """The stop time from the target at which the maneuver will stop."""
        return self._intf.get_property(IAgAvtrStrategyMATLAB3DGuidance._metadata, IAgAvtrStrategyMATLAB3DGuidance._get_StopTimeToGo_metadata)

    _SetStopTimeToGo_metadata = { "name" : "SetStopTimeToGo",
            "arg_types" : (agcom.VARIANT_BOOL, agcom.DOUBLE,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg, agmarshall.DOUBLE_arg,) }
    def SetStopTimeToGo(self, enable:bool, time:float) -> None:
        """Set the option to use the stop time from target stopping condition and set the according value."""
        return self._intf.invoke(IAgAvtrStrategyMATLAB3DGuidance._metadata, IAgAvtrStrategyMATLAB3DGuidance._SetStopTimeToGo_metadata, enable, time)

    _get_UseStopSlantRange_metadata = { "name" : "UseStopSlantRange",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def UseStopSlantRange(self) -> bool:
        """The option to specify a range from target stopping condition."""
        return self._intf.get_property(IAgAvtrStrategyMATLAB3DGuidance._metadata, IAgAvtrStrategyMATLAB3DGuidance._get_UseStopSlantRange_metadata)

    _get_StopSlantRange_metadata = { "name" : "StopSlantRange",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def StopSlantRange(self) -> float:
        """The range from the target at which the maneuver will stop."""
        return self._intf.get_property(IAgAvtrStrategyMATLAB3DGuidance._metadata, IAgAvtrStrategyMATLAB3DGuidance._get_StopSlantRange_metadata)

    _SetStopSlantRange_metadata = { "name" : "SetStopSlantRange",
            "arg_types" : (agcom.VARIANT_BOOL, agcom.DOUBLE,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg, agmarshall.DOUBLE_arg,) }
    def SetStopSlantRange(self, enable:bool, range:float) -> None:
        """Set the option to use the stop slant range stopping condition and set the according value."""
        return self._intf.invoke(IAgAvtrStrategyMATLAB3DGuidance._metadata, IAgAvtrStrategyMATLAB3DGuidance._SetStopSlantRange_metadata, enable, range)

    _get_FunctionName_metadata = { "name" : "FunctionName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def FunctionName(self) -> str:
        """The name of the MATLAB function."""
        return self._intf.get_property(IAgAvtrStrategyMATLAB3DGuidance._metadata, IAgAvtrStrategyMATLAB3DGuidance._get_FunctionName_metadata)

    _set_FunctionName_metadata = { "name" : "FunctionName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @FunctionName.setter
    def FunctionName(self, newVal:str) -> None:
        """The name of the MATLAB function."""
        return self._intf.set_property(IAgAvtrStrategyMATLAB3DGuidance._metadata, IAgAvtrStrategyMATLAB3DGuidance._set_FunctionName_metadata, newVal)

    _IsFunctionPathValid_metadata = { "name" : "IsFunctionPathValid",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    def IsFunctionPathValid(self) -> bool:
        """Check if the MATLAB function path is valid."""
        return self._intf.invoke(IAgAvtrStrategyMATLAB3DGuidance._metadata, IAgAvtrStrategyMATLAB3DGuidance._IsFunctionPathValid_metadata, out_arg())

    _get_CheckForErrors_metadata = { "name" : "CheckForErrors",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def CheckForErrors(self) -> bool:
        """The option to check the function for errors."""
        return self._intf.get_property(IAgAvtrStrategyMATLAB3DGuidance._metadata, IAgAvtrStrategyMATLAB3DGuidance._get_CheckForErrors_metadata)

    _set_CheckForErrors_metadata = { "name" : "CheckForErrors",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @CheckForErrors.setter
    def CheckForErrors(self, newVal:bool) -> None:
        """The option to check the function for errors."""
        return self._intf.set_property(IAgAvtrStrategyMATLAB3DGuidance._metadata, IAgAvtrStrategyMATLAB3DGuidance._set_CheckForErrors_metadata, newVal)

    _get_DisplayOutput_metadata = { "name" : "DisplayOutput",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def DisplayOutput(self) -> bool:
        """The option to display the output from the MATLAB function."""
        return self._intf.get_property(IAgAvtrStrategyMATLAB3DGuidance._metadata, IAgAvtrStrategyMATLAB3DGuidance._get_DisplayOutput_metadata)

    _set_DisplayOutput_metadata = { "name" : "DisplayOutput",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @DisplayOutput.setter
    def DisplayOutput(self, newVal:bool) -> None:
        """The option to display the output from the MATLAB function."""
        return self._intf.set_property(IAgAvtrStrategyMATLAB3DGuidance._metadata, IAgAvtrStrategyMATLAB3DGuidance._set_DisplayOutput_metadata, newVal)

    _get_ClosureMode_metadata = { "name" : "ClosureMode",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrClosureMode),) }
    @property
    def ClosureMode(self) -> "AgEAvtrClosureMode":
        """The closure mode for the guidance strategy."""
        return self._intf.get_property(IAgAvtrStrategyMATLAB3DGuidance._metadata, IAgAvtrStrategyMATLAB3DGuidance._get_ClosureMode_metadata)

    _set_ClosureMode_metadata = { "name" : "ClosureMode",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAvtrClosureMode),) }
    @ClosureMode.setter
    def ClosureMode(self, newVal:"AgEAvtrClosureMode") -> None:
        """The closure mode for the guidance strategy."""
        return self._intf.set_property(IAgAvtrStrategyMATLAB3DGuidance._metadata, IAgAvtrStrategyMATLAB3DGuidance._set_ClosureMode_metadata, newVal)

    _get_HOBSMaxAngle_metadata = { "name" : "HOBSMaxAngle",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def HOBSMaxAngle(self) -> typing.Any:
        """The closure high off boresight max angle."""
        return self._intf.get_property(IAgAvtrStrategyMATLAB3DGuidance._metadata, IAgAvtrStrategyMATLAB3DGuidance._get_HOBSMaxAngle_metadata)

    _set_HOBSMaxAngle_metadata = { "name" : "HOBSMaxAngle",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @HOBSMaxAngle.setter
    def HOBSMaxAngle(self, newVal:typing.Any) -> None:
        """The closure high off boresight max angle."""
        return self._intf.set_property(IAgAvtrStrategyMATLAB3DGuidance._metadata, IAgAvtrStrategyMATLAB3DGuidance._set_HOBSMaxAngle_metadata, newVal)

    _get_HOBSAngleTol_metadata = { "name" : "HOBSAngleTol",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def HOBSAngleTol(self) -> typing.Any:
        """The closure high off boresight angle tolerance."""
        return self._intf.get_property(IAgAvtrStrategyMATLAB3DGuidance._metadata, IAgAvtrStrategyMATLAB3DGuidance._get_HOBSAngleTol_metadata)

    _set_HOBSAngleTol_metadata = { "name" : "HOBSAngleTol",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @HOBSAngleTol.setter
    def HOBSAngleTol(self, newVal:typing.Any) -> None:
        """The closure high off boresight angle tolerance."""
        return self._intf.set_property(IAgAvtrStrategyMATLAB3DGuidance._metadata, IAgAvtrStrategyMATLAB3DGuidance._set_HOBSAngleTol_metadata, newVal)

    _get_ComputeTASDot_metadata = { "name" : "ComputeTASDot",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def ComputeTASDot(self) -> bool:
        """The option to allow MATLAB to compute the true airspeed for the aircraft."""
        return self._intf.get_property(IAgAvtrStrategyMATLAB3DGuidance._metadata, IAgAvtrStrategyMATLAB3DGuidance._get_ComputeTASDot_metadata)

    _set_ComputeTASDot_metadata = { "name" : "ComputeTASDot",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @ComputeTASDot.setter
    def ComputeTASDot(self, newVal:bool) -> None:
        """The option to allow MATLAB to compute the true airspeed for the aircraft."""
        return self._intf.set_property(IAgAvtrStrategyMATLAB3DGuidance._metadata, IAgAvtrStrategyMATLAB3DGuidance._set_ComputeTASDot_metadata, newVal)

    _get_AirspeedOptions_metadata = { "name" : "AirspeedOptions",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def AirspeedOptions(self) -> "IAgAvtrBasicManeuverAirspeedOptions":
        """Get the airspeed options."""
        return self._intf.get_property(IAgAvtrStrategyMATLAB3DGuidance._metadata, IAgAvtrStrategyMATLAB3DGuidance._get_AirspeedOptions_metadata)

    _get_PosVelStrategies_metadata = { "name" : "PosVelStrategies",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def PosVelStrategies(self) -> "IAgAvtrBasicManeuverTargetPosVel":
        """The position velocity strategies for MATLAB 3D Guidance."""
        return self._intf.get_property(IAgAvtrStrategyMATLAB3DGuidance._metadata, IAgAvtrStrategyMATLAB3DGuidance._get_PosVelStrategies_metadata)

    _CancelTgtPosVel_metadata = { "name" : "CancelTgtPosVel",
            "arg_types" : (),
            "marshallers" : () }
    def CancelTgtPosVel(self) -> None:
        """Cancel the position velocity strategies for MATLAB 3D Guidance."""
        return self._intf.invoke(IAgAvtrStrategyMATLAB3DGuidance._metadata, IAgAvtrStrategyMATLAB3DGuidance._CancelTgtPosVel_metadata, )


agcls.AgClassCatalog.add_catalog_entry("{fa4719ee-da5b-4845-af69-09ce61f4109e}", IAgAvtrStrategyMATLAB3DGuidance)
agcls.AgTypeNameMap["IAgAvtrStrategyMATLAB3DGuidance"] = IAgAvtrStrategyMATLAB3DGuidance



class AgAvtrStrategyMATLABNav(IAgAvtrStrategyMATLABNav, IAgAvtrBasicManeuverStrategy):
    """Class defining the MATLAB - Horizontal Plane strategy for a basic maneuver procedure."""
    def __init__(self, sourceObject=None):
        IAgAvtrStrategyMATLABNav.__init__(self, sourceObject)
        IAgAvtrBasicManeuverStrategy.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrStrategyMATLABNav._private_init(self, intf)
        IAgAvtrBasicManeuverStrategy._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrStrategyMATLABNav._get_property(self, attrname) is not None: found_prop = IAgAvtrStrategyMATLABNav._get_property(self, attrname)
        if IAgAvtrBasicManeuverStrategy._get_property(self, attrname) is not None: found_prop = IAgAvtrBasicManeuverStrategy._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrStrategyMATLABNav.")

agcls.AgClassCatalog.add_catalog_entry("{4447B282-8834-4451-8CD8-0A3168015B45}", AgAvtrStrategyMATLABNav)


class AgAvtrStrategyMATLABProfile(IAgAvtrStrategyMATLABProfile, IAgAvtrBasicManeuverStrategy):
    """Class defining the MATLAB - Vertical Plane strategy for a basic maneuver procedure."""
    def __init__(self, sourceObject=None):
        IAgAvtrStrategyMATLABProfile.__init__(self, sourceObject)
        IAgAvtrBasicManeuverStrategy.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrStrategyMATLABProfile._private_init(self, intf)
        IAgAvtrBasicManeuverStrategy._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrStrategyMATLABProfile._get_property(self, attrname) is not None: found_prop = IAgAvtrStrategyMATLABProfile._get_property(self, attrname)
        if IAgAvtrBasicManeuverStrategy._get_property(self, attrname) is not None: found_prop = IAgAvtrBasicManeuverStrategy._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrStrategyMATLABProfile.")

agcls.AgClassCatalog.add_catalog_entry("{1bf89982-311b-4b61-ba17-00881de09863}", AgAvtrStrategyMATLABProfile)


class AgAvtrStrategyMATLABFull3D(IAgAvtrStrategyMATLABFull3D, IAgAvtrBasicManeuverStrategy):
    """Class defining the MATLAB - Full 3D strategy for a basic maneuver procedure."""
    def __init__(self, sourceObject=None):
        IAgAvtrStrategyMATLABFull3D.__init__(self, sourceObject)
        IAgAvtrBasicManeuverStrategy.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrStrategyMATLABFull3D._private_init(self, intf)
        IAgAvtrBasicManeuverStrategy._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrStrategyMATLABFull3D._get_property(self, attrname) is not None: found_prop = IAgAvtrStrategyMATLABFull3D._get_property(self, attrname)
        if IAgAvtrBasicManeuverStrategy._get_property(self, attrname) is not None: found_prop = IAgAvtrBasicManeuverStrategy._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrStrategyMATLABFull3D.")

agcls.AgClassCatalog.add_catalog_entry("{7fdf8025-0f64-4f1a-9c12-8275051354d4}", AgAvtrStrategyMATLABFull3D)


class AgAvtrStrategyMATLAB3DGuidance(IAgAvtrStrategyMATLAB3DGuidance, IAgAvtrBasicManeuverStrategy):
    """Class defining the MATLAB - 3D Guidance strategy for a basic maneuver procedure."""
    def __init__(self, sourceObject=None):
        IAgAvtrStrategyMATLAB3DGuidance.__init__(self, sourceObject)
        IAgAvtrBasicManeuverStrategy.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrStrategyMATLAB3DGuidance._private_init(self, intf)
        IAgAvtrBasicManeuverStrategy._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrStrategyMATLAB3DGuidance._get_property(self, attrname) is not None: found_prop = IAgAvtrStrategyMATLAB3DGuidance._get_property(self, attrname)
        if IAgAvtrBasicManeuverStrategy._get_property(self, attrname) is not None: found_prop = IAgAvtrBasicManeuverStrategy._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrStrategyMATLAB3DGuidance.")

agcls.AgClassCatalog.add_catalog_entry("{c90db66d-a2fa-4474-9c21-2e8f61b93fad}", AgAvtrStrategyMATLAB3DGuidance)


class AgAvtrBasicManeuverMATLABFactory(IAgAvtrAutomationStrategyFactory):
    """Class defining the factory to create the basic maneuver PropNav strategies."""
    def __init__(self, sourceObject=None):
        IAgAvtrAutomationStrategyFactory.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAvtrAutomationStrategyFactory._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAvtrAutomationStrategyFactory._get_property(self, attrname) is not None: found_prop = IAgAvtrAutomationStrategyFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAvtrBasicManeuverMATLABFactory.")

agcls.AgClassCatalog.add_catalog_entry("{29352A63-3095-4D7E-A056-189D672BF458}", AgAvtrBasicManeuverMATLABFactory)



################################################################################
#          Copyright 2020-2023, Ansys Government Initiatives
################################################################################
