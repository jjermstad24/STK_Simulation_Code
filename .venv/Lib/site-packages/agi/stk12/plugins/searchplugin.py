################################################################################
#          Copyright 2020-2023, Ansys Government Initiatives
################################################################################ 

__all__ = ["AgEGatorPluginErrorCodes", "AgESearchControlTypes", "AgESearchPluginErrorCodes", "AgGatorPropagatorScriptDriver", 
"IAgGatorPropagatorScriptDriver", "IAgPluginSearch", "IAgPluginSearchStatusGrid", "IAgSearchControl", "IAgSearchControlCollection", 
"IAgSearchControlReal", "IAgSearchPluginOperand", "IAgSearchResult", "IAgSearchResultCollection"]

import typing

from ctypes   import byref, POINTER
from datetime import datetime
from enum     import IntEnum, IntFlag

from ..internal  import comutil          as agcom
from ..internal  import coclassutil      as agcls
from ..internal  import marshall         as agmarshall
from ..internal  import dataanalysisutil as agdata
from ..utilities import colors           as agcolor
from ..internal.comutil     import IUnknown, IDispatch, IPictureDisp
from ..internal.apiutil     import interface_proxy, enumerator_proxy, out_arg
from ..internal.eventutil   import *
from ..utilities.exceptions import *

from ..plugins.utplugin import *
from ..plugins.hpopplugin import *


def _raise_uninitialized_error(*args):
    raise STKRuntimeError("Valid STK object model classes are returned from STK methods and should not be created independently.")

class AgEGatorPluginErrorCodes(IntEnum):
    """Enumeration of AgGatorPlugin General Error Codes"""
    # Gator Plugin: An internal failure occurred.
    eGatorPluginInternalFailure = (((1 << 31) | (4 << 16)) | 0x101)
    # Gator Plugin: Not configured properly.
    eGatorPluginNotConfigured = (((1 << 31) | (4 << 16)) | 0x102)
    # Gator Plugin: Central Body is undefined.
    eGatorPluginCentralBodyUndefined = (((1 << 31) | (4 << 16)) | 0x103)
    # Gator Plugin: Sun Position Type SRP not supported.
    eGatorPluginSunPositionTypeSRPNotSupported = (((1 << 31) | (4 << 16)) | 0x104)
    # Gator Plugin: The Square Root of an invalid value occurred.
    eGatorPluginInvalidSqr = (((1 << 31) | (4 << 16)) | 0x105)
    # Gator Plugin: Reference Axes Unavailable.
    eGatorPluginReferenceAxesUnavailable = (((1 << 31) | (4 << 16)) | 0x106)
    # Gator Plugin: Color not valid.
    eGatorPluginInvalidColor = (((1 << 31) | (4 << 16)) | 0x107)

AgEGatorPluginErrorCodes.eGatorPluginInternalFailure.__doc__ = "Gator Plugin: An internal failure occurred."
AgEGatorPluginErrorCodes.eGatorPluginNotConfigured.__doc__ = "Gator Plugin: Not configured properly."
AgEGatorPluginErrorCodes.eGatorPluginCentralBodyUndefined.__doc__ = "Gator Plugin: Central Body is undefined."
AgEGatorPluginErrorCodes.eGatorPluginSunPositionTypeSRPNotSupported.__doc__ = "Gator Plugin: Sun Position Type SRP not supported."
AgEGatorPluginErrorCodes.eGatorPluginInvalidSqr.__doc__ = "Gator Plugin: The Square Root of an invalid value occurred."
AgEGatorPluginErrorCodes.eGatorPluginReferenceAxesUnavailable.__doc__ = "Gator Plugin: Reference Axes Unavailable."
AgEGatorPluginErrorCodes.eGatorPluginInvalidColor.__doc__ = "Gator Plugin: Color not valid."

agcls.AgTypeNameMap["AgEGatorPluginErrorCodes"] = AgEGatorPluginErrorCodes

class AgESearchPluginErrorCodes(IntEnum):
    """Enumeration of AgSearchPlugin General Error Codes."""
    # Search Plugin: Operand Error.
    eSearchPluginErrorCodesOperandError = (((1 << 31) | (4 << 16)) | 0x108)
    # Search Plugin: Profile Failure.
    eSearchPluginErrorCodesOperandProfileFailure = (((1 << 31) | (4 << 16)) | 0x109)
    # Search Plugin: GUI Data Failure.
    eSearchPluginErrorCodesGUIDataFailure = (((1 << 31) | (4 << 16)) | 0x110)
    # Search Plugin: Operand Stopped.
    eSearchPluginErrorCodesOperandStopped = (((1 << 31) | (4 << 16)) | 0x111)
    # Search Plugin: Operand Canceled.
    eSearchPluginErrorCodesOperandCanceled = (((1 << 31) | (4 << 16)) | 0x112)

AgESearchPluginErrorCodes.eSearchPluginErrorCodesOperandError.__doc__ = "Search Plugin: Operand Error."
AgESearchPluginErrorCodes.eSearchPluginErrorCodesOperandProfileFailure.__doc__ = "Search Plugin: Profile Failure."
AgESearchPluginErrorCodes.eSearchPluginErrorCodesGUIDataFailure.__doc__ = "Search Plugin: GUI Data Failure."
AgESearchPluginErrorCodes.eSearchPluginErrorCodesOperandStopped.__doc__ = "Search Plugin: Operand Stopped."
AgESearchPluginErrorCodes.eSearchPluginErrorCodesOperandCanceled.__doc__ = "Search Plugin: Operand Canceled."

agcls.AgTypeNameMap["AgESearchPluginErrorCodes"] = AgESearchPluginErrorCodes

class AgESearchControlTypes(IntEnum):
    """Enumeration of control types for search plugins."""
    # Real numbers (doubles)
    eSearchControlTypesReal = 0

AgESearchControlTypes.eSearchControlTypesReal.__doc__ = "Real numbers (doubles)"

agcls.AgTypeNameMap["AgESearchControlTypes"] = AgESearchControlTypes


class IAgGatorPropagatorScriptDriver(object):
    """HPOP plugin engine interface utilizing a script driver interface (VBScript, Matlab)"""
    _num_methods = 30
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{62574EAE-D805-48f1-9579-A3885B05A5F6}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_UseInitFile" : 1,
                             "set_UseInitFile" : 2,
                             "get_InitFile" : 3,
                             "set_InitFile" : 4,
                             "get_InitFileRWFlag" : 5,
                             "get_UsePrePropagateFile" : 6,
                             "set_UsePrePropagateFile" : 7,
                             "get_PrePropagateFile" : 8,
                             "set_PrePropagateFile" : 9,
                             "get_PrePropagateFileRWFlag" : 10,
                             "get_UsePreNextStepFile" : 11,
                             "set_UsePreNextStepFile" : 12,
                             "get_PreNextStepFile" : 13,
                             "set_PreNextStepFile" : 14,
                             "get_PreNextStepFileRWFlag" : 15,
                             "get_UseEvaluateFile" : 16,
                             "set_UseEvaluateFile" : 17,
                             "get_EvaluateFile" : 18,
                             "set_EvaluateFile" : 19,
                             "get_EvaluateFileRWFlag" : 20,
                             "get_UsePostPropagateFile" : 21,
                             "set_UsePostPropagateFile" : 22,
                             "get_PostPropagateFile" : 23,
                             "set_PostPropagateFile" : 24,
                             "get_PostPropagateFileRWFlag" : 25,
                             "get_UseFreeFile" : 26,
                             "set_UseFreeFile" : 27,
                             "get_FreeFile" : 28,
                             "set_FreeFile" : 29,
                             "get_FreeFileRWFlag" : 30, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgGatorPropagatorScriptDriver._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgGatorPropagatorScriptDriver from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgGatorPropagatorScriptDriver.__dict__ and type(IAgGatorPropagatorScriptDriver.__dict__[attrname]) == property:
            return IAgGatorPropagatorScriptDriver.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgGatorPropagatorScriptDriver.")
    
    _get_UseInitFile_metadata = { "name" : "UseInitFile",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def UseInitFile(self) -> bool:
        """Use Init File"""
        return self._intf.get_property(IAgGatorPropagatorScriptDriver._metadata, IAgGatorPropagatorScriptDriver._get_UseInitFile_metadata)

    _set_UseInitFile_metadata = { "name" : "UseInitFile",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @UseInitFile.setter
    def UseInitFile(self, newVal:bool) -> None:
        """Use Init File"""
        return self._intf.set_property(IAgGatorPropagatorScriptDriver._metadata, IAgGatorPropagatorScriptDriver._set_UseInitFile_metadata, newVal)

    _get_InitFile_metadata = { "name" : "InitFile",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def InitFile(self) -> str:
        """Init File"""
        return self._intf.get_property(IAgGatorPropagatorScriptDriver._metadata, IAgGatorPropagatorScriptDriver._get_InitFile_metadata)

    _set_InitFile_metadata = { "name" : "InitFile",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @InitFile.setter
    def InitFile(self, newVal:str) -> None:
        """Init File"""
        return self._intf.set_property(IAgGatorPropagatorScriptDriver._metadata, IAgGatorPropagatorScriptDriver._set_InitFile_metadata, newVal)

    _get_InitFileRWFlag_metadata = { "name" : "InitFileRWFlag",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.LONG_arg,) }
    @property
    def InitFileRWFlag(self) -> int:
        """Init File RW Flag"""
        return self._intf.get_property(IAgGatorPropagatorScriptDriver._metadata, IAgGatorPropagatorScriptDriver._get_InitFileRWFlag_metadata)

    _get_UsePrePropagateFile_metadata = { "name" : "UsePrePropagateFile",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def UsePrePropagateFile(self) -> bool:
        """Use PrePropagate File"""
        return self._intf.get_property(IAgGatorPropagatorScriptDriver._metadata, IAgGatorPropagatorScriptDriver._get_UsePrePropagateFile_metadata)

    _set_UsePrePropagateFile_metadata = { "name" : "UsePrePropagateFile",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @UsePrePropagateFile.setter
    def UsePrePropagateFile(self, newVal:bool) -> None:
        """Use PrePropagate File"""
        return self._intf.set_property(IAgGatorPropagatorScriptDriver._metadata, IAgGatorPropagatorScriptDriver._set_UsePrePropagateFile_metadata, newVal)

    _get_PrePropagateFile_metadata = { "name" : "PrePropagateFile",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def PrePropagateFile(self) -> str:
        """PrePropagate File"""
        return self._intf.get_property(IAgGatorPropagatorScriptDriver._metadata, IAgGatorPropagatorScriptDriver._get_PrePropagateFile_metadata)

    _set_PrePropagateFile_metadata = { "name" : "PrePropagateFile",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @PrePropagateFile.setter
    def PrePropagateFile(self, newVal:str) -> None:
        """PrePropagate File"""
        return self._intf.set_property(IAgGatorPropagatorScriptDriver._metadata, IAgGatorPropagatorScriptDriver._set_PrePropagateFile_metadata, newVal)

    _get_PrePropagateFileRWFlag_metadata = { "name" : "PrePropagateFileRWFlag",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.LONG_arg,) }
    @property
    def PrePropagateFileRWFlag(self) -> int:
        """PrePropagate File RW Flag"""
        return self._intf.get_property(IAgGatorPropagatorScriptDriver._metadata, IAgGatorPropagatorScriptDriver._get_PrePropagateFileRWFlag_metadata)

    _get_UsePreNextStepFile_metadata = { "name" : "UsePreNextStepFile",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def UsePreNextStepFile(self) -> bool:
        """Use PreNextStep File"""
        return self._intf.get_property(IAgGatorPropagatorScriptDriver._metadata, IAgGatorPropagatorScriptDriver._get_UsePreNextStepFile_metadata)

    _set_UsePreNextStepFile_metadata = { "name" : "UsePreNextStepFile",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @UsePreNextStepFile.setter
    def UsePreNextStepFile(self, newVal:bool) -> None:
        """Use PreNextStep File"""
        return self._intf.set_property(IAgGatorPropagatorScriptDriver._metadata, IAgGatorPropagatorScriptDriver._set_UsePreNextStepFile_metadata, newVal)

    _get_PreNextStepFile_metadata = { "name" : "PreNextStepFile",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def PreNextStepFile(self) -> str:
        """PreNextStep File"""
        return self._intf.get_property(IAgGatorPropagatorScriptDriver._metadata, IAgGatorPropagatorScriptDriver._get_PreNextStepFile_metadata)

    _set_PreNextStepFile_metadata = { "name" : "PreNextStepFile",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @PreNextStepFile.setter
    def PreNextStepFile(self, newVal:str) -> None:
        """PreNextStep File"""
        return self._intf.set_property(IAgGatorPropagatorScriptDriver._metadata, IAgGatorPropagatorScriptDriver._set_PreNextStepFile_metadata, newVal)

    _get_PreNextStepFileRWFlag_metadata = { "name" : "PreNextStepFileRWFlag",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.LONG_arg,) }
    @property
    def PreNextStepFileRWFlag(self) -> int:
        """PreNextStep File RW Flag"""
        return self._intf.get_property(IAgGatorPropagatorScriptDriver._metadata, IAgGatorPropagatorScriptDriver._get_PreNextStepFileRWFlag_metadata)

    _get_UseEvaluateFile_metadata = { "name" : "UseEvaluateFile",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def UseEvaluateFile(self) -> bool:
        """Use Evaluate File"""
        return self._intf.get_property(IAgGatorPropagatorScriptDriver._metadata, IAgGatorPropagatorScriptDriver._get_UseEvaluateFile_metadata)

    _set_UseEvaluateFile_metadata = { "name" : "UseEvaluateFile",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @UseEvaluateFile.setter
    def UseEvaluateFile(self, newVal:bool) -> None:
        """Use Evaluate File"""
        return self._intf.set_property(IAgGatorPropagatorScriptDriver._metadata, IAgGatorPropagatorScriptDriver._set_UseEvaluateFile_metadata, newVal)

    _get_EvaluateFile_metadata = { "name" : "EvaluateFile",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def EvaluateFile(self) -> str:
        """Evaluate File"""
        return self._intf.get_property(IAgGatorPropagatorScriptDriver._metadata, IAgGatorPropagatorScriptDriver._get_EvaluateFile_metadata)

    _set_EvaluateFile_metadata = { "name" : "EvaluateFile",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @EvaluateFile.setter
    def EvaluateFile(self, newVal:str) -> None:
        """Evaluate File"""
        return self._intf.set_property(IAgGatorPropagatorScriptDriver._metadata, IAgGatorPropagatorScriptDriver._set_EvaluateFile_metadata, newVal)

    _get_EvaluateFileRWFlag_metadata = { "name" : "EvaluateFileRWFlag",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.LONG_arg,) }
    @property
    def EvaluateFileRWFlag(self) -> int:
        """Evaluate File RW Flag"""
        return self._intf.get_property(IAgGatorPropagatorScriptDriver._metadata, IAgGatorPropagatorScriptDriver._get_EvaluateFileRWFlag_metadata)

    _get_UsePostPropagateFile_metadata = { "name" : "UsePostPropagateFile",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def UsePostPropagateFile(self) -> bool:
        """Use PostPropagate File"""
        return self._intf.get_property(IAgGatorPropagatorScriptDriver._metadata, IAgGatorPropagatorScriptDriver._get_UsePostPropagateFile_metadata)

    _set_UsePostPropagateFile_metadata = { "name" : "UsePostPropagateFile",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @UsePostPropagateFile.setter
    def UsePostPropagateFile(self, newVal:bool) -> None:
        """Use PostPropagate File"""
        return self._intf.set_property(IAgGatorPropagatorScriptDriver._metadata, IAgGatorPropagatorScriptDriver._set_UsePostPropagateFile_metadata, newVal)

    _get_PostPropagateFile_metadata = { "name" : "PostPropagateFile",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def PostPropagateFile(self) -> str:
        """PostPropagate File"""
        return self._intf.get_property(IAgGatorPropagatorScriptDriver._metadata, IAgGatorPropagatorScriptDriver._get_PostPropagateFile_metadata)

    _set_PostPropagateFile_metadata = { "name" : "PostPropagateFile",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @PostPropagateFile.setter
    def PostPropagateFile(self, newVal:str) -> None:
        """PostPropagate File"""
        return self._intf.set_property(IAgGatorPropagatorScriptDriver._metadata, IAgGatorPropagatorScriptDriver._set_PostPropagateFile_metadata, newVal)

    _get_PostPropagateFileRWFlag_metadata = { "name" : "PostPropagateFileRWFlag",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.LONG_arg,) }
    @property
    def PostPropagateFileRWFlag(self) -> int:
        """PostPropagate File RW Flag"""
        return self._intf.get_property(IAgGatorPropagatorScriptDriver._metadata, IAgGatorPropagatorScriptDriver._get_PostPropagateFileRWFlag_metadata)

    _get_UseFreeFile_metadata = { "name" : "UseFreeFile",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def UseFreeFile(self) -> bool:
        """Use Free File"""
        return self._intf.get_property(IAgGatorPropagatorScriptDriver._metadata, IAgGatorPropagatorScriptDriver._get_UseFreeFile_metadata)

    _set_UseFreeFile_metadata = { "name" : "UseFreeFile",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @UseFreeFile.setter
    def UseFreeFile(self, newVal:bool) -> None:
        """Use Free File"""
        return self._intf.set_property(IAgGatorPropagatorScriptDriver._metadata, IAgGatorPropagatorScriptDriver._set_UseFreeFile_metadata, newVal)

    _get_FreeFile_metadata = { "name" : "FreeFile",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def FreeFile(self) -> str:
        """Free File"""
        return self._intf.get_property(IAgGatorPropagatorScriptDriver._metadata, IAgGatorPropagatorScriptDriver._get_FreeFile_metadata)

    _set_FreeFile_metadata = { "name" : "FreeFile",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @FreeFile.setter
    def FreeFile(self, newVal:str) -> None:
        """Free File"""
        return self._intf.set_property(IAgGatorPropagatorScriptDriver._metadata, IAgGatorPropagatorScriptDriver._set_FreeFile_metadata, newVal)

    _get_FreeFileRWFlag_metadata = { "name" : "FreeFileRWFlag",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.LONG_arg,) }
    @property
    def FreeFileRWFlag(self) -> int:
        """Free File RW Flag"""
        return self._intf.get_property(IAgGatorPropagatorScriptDriver._metadata, IAgGatorPropagatorScriptDriver._get_FreeFileRWFlag_metadata)


agcls.AgClassCatalog.add_catalog_entry("{62574EAE-D805-48f1-9579-A3885B05A5F6}", IAgGatorPropagatorScriptDriver)
agcls.AgTypeNameMap["IAgGatorPropagatorScriptDriver"] = IAgGatorPropagatorScriptDriver

class IAgSearchControl(object):
    """Plugin search algorithm control"""
    _num_methods = 6
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{A05CFD20-F2E0-48d7-BD4C-D3DF88FF852A}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_ObjectName" : 1,
                             "set_ObjectName" : 2,
                             "get_ControlName" : 3,
                             "set_ControlName" : 4,
                             "get_ControlType" : 5,
                             "set_ControlType" : 6, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgSearchControl._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgSearchControl from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgSearchControl.__dict__ and type(IAgSearchControl.__dict__[attrname]) == property:
            return IAgSearchControl.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgSearchControl.")
    
    _get_ObjectName_metadata = { "name" : "ObjectName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def ObjectName(self) -> str:
        """Name of the object associated with the control.  Set by STK."""
        return self._intf.get_property(IAgSearchControl._metadata, IAgSearchControl._get_ObjectName_metadata)

    _set_ObjectName_metadata = { "name" : "ObjectName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @ObjectName.setter
    def ObjectName(self, objectName:str) -> None:
        """Name of the object associated with the control.  Set by STK."""
        return self._intf.set_property(IAgSearchControl._metadata, IAgSearchControl._set_ObjectName_metadata, objectName)

    _get_ControlName_metadata = { "name" : "ControlName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def ControlName(self) -> str:
        """Name of the control.  Set by STK."""
        return self._intf.get_property(IAgSearchControl._metadata, IAgSearchControl._get_ControlName_metadata)

    _set_ControlName_metadata = { "name" : "ControlName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @ControlName.setter
    def ControlName(self, controlName:str) -> None:
        """Name of the control.  Set by STK."""
        return self._intf.set_property(IAgSearchControl._metadata, IAgSearchControl._set_ControlName_metadata, controlName)

    _get_ControlType_metadata = { "name" : "ControlType",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgESearchControlTypes),) }
    @property
    def ControlType(self) -> "AgESearchControlTypes":
        """Type of the control.  Set by STK."""
        return self._intf.get_property(IAgSearchControl._metadata, IAgSearchControl._get_ControlType_metadata)

    _set_ControlType_metadata = { "name" : "ControlType",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgESearchControlTypes),) }
    @ControlType.setter
    def ControlType(self, type:"AgESearchControlTypes") -> None:
        """Type of the control.  Set by STK."""
        return self._intf.set_property(IAgSearchControl._metadata, IAgSearchControl._set_ControlType_metadata, type)


agcls.AgClassCatalog.add_catalog_entry("{A05CFD20-F2E0-48d7-BD4C-D3DF88FF852A}", IAgSearchControl)
agcls.AgTypeNameMap["IAgSearchControl"] = IAgSearchControl

class IAgSearchControlReal(IAgSearchControl):
    """Plugin search algorithm control, real number"""
    _num_methods = 8
    _vtable_offset = IAgSearchControl._vtable_offset + IAgSearchControl._num_methods
    _metadata = {
        "uuid" : "{56C81403-0567-48d9-A8CA-76D722AEE95F}",
        "vtable_reference" : IAgSearchControl._vtable_offset + IAgSearchControl._num_methods - 1,
        "method_offsets" : { "get_CurrentValue" : 1,
                             "set_CurrentValue" : 2,
                             "get_InitialValue" : 3,
                             "set_InitialValue" : 4,
                             "get_Dimension" : 5,
                             "set_Dimension" : 6,
                             "get_InternalUnit" : 7,
                             "set_InternalUnit" : 8, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgSearchControlReal._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgSearchControlReal from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgSearchControl._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgSearchControlReal.__dict__ and type(IAgSearchControlReal.__dict__[attrname]) == property:
            return IAgSearchControlReal.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            IAgSearchControl.__setattr__(self, attrname, value)
    
    _get_CurrentValue_metadata = { "name" : "CurrentValue",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def CurrentValue(self) -> float:
        """The current value of the control.  Set by the plugin search algorithm."""
        return self._intf.get_property(IAgSearchControlReal._metadata, IAgSearchControlReal._get_CurrentValue_metadata)

    _set_CurrentValue_metadata = { "name" : "CurrentValue",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @CurrentValue.setter
    def CurrentValue(self, currentValue:float) -> None:
        """The current value of the control.  Set by the plugin search algorithm."""
        return self._intf.set_property(IAgSearchControlReal._metadata, IAgSearchControlReal._set_CurrentValue_metadata, currentValue)

    _get_InitialValue_metadata = { "name" : "InitialValue",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def InitialValue(self) -> float:
        """The value of the control at the start of the plugin search run.  Set by STK."""
        return self._intf.get_property(IAgSearchControlReal._metadata, IAgSearchControlReal._get_InitialValue_metadata)

    _set_InitialValue_metadata = { "name" : "InitialValue",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @InitialValue.setter
    def InitialValue(self, initialValue:float) -> None:
        """The value of the control at the start of the plugin search run.  Set by STK."""
        return self._intf.set_property(IAgSearchControlReal._metadata, IAgSearchControlReal._set_InitialValue_metadata, initialValue)

    _get_Dimension_metadata = { "name" : "Dimension",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def Dimension(self) -> str:
        """The dimension of the control.  Set by STK."""
        return self._intf.get_property(IAgSearchControlReal._metadata, IAgSearchControlReal._get_Dimension_metadata)

    _set_Dimension_metadata = { "name" : "Dimension",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @Dimension.setter
    def Dimension(self, dimension:str) -> None:
        """The dimension of the control.  Set by STK."""
        return self._intf.set_property(IAgSearchControlReal._metadata, IAgSearchControlReal._set_Dimension_metadata, dimension)

    _get_InternalUnit_metadata = { "name" : "InternalUnit",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def InternalUnit(self) -> str:
        """The internal unit of the control.  Set by STK."""
        return self._intf.get_property(IAgSearchControlReal._metadata, IAgSearchControlReal._get_InternalUnit_metadata)

    _set_InternalUnit_metadata = { "name" : "InternalUnit",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @InternalUnit.setter
    def InternalUnit(self, internalUnit:str) -> None:
        """The internal unit of the control.  Set by STK."""
        return self._intf.set_property(IAgSearchControlReal._metadata, IAgSearchControlReal._set_InternalUnit_metadata, internalUnit)


agcls.AgClassCatalog.add_catalog_entry("{56C81403-0567-48d9-A8CA-76D722AEE95F}", IAgSearchControlReal)
agcls.AgTypeNameMap["IAgSearchControlReal"] = IAgSearchControlReal

class IAgSearchControlCollection(object):
    """Collection for plugin search algorithm controls"""
    _num_methods = 3
    _vtable_offset = IDispatch._vtable_offset + IDispatch._num_methods
    _metadata = {
        "uuid" : "{67A00871-9B5A-42da-B63D-49674C35ED39}",
        "vtable_reference" : IDispatch._vtable_offset + IDispatch._num_methods - 1,
        "method_offsets" : { "Item" : 1,
                             "get__NewEnum" : 2,
                             "get_Count" : 3, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgSearchControlCollection._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgSearchControlCollection from source object.")
        self.__dict__["_enumerator"] = None
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgSearchControlCollection.__dict__ and type(IAgSearchControlCollection.__dict__[attrname]) == property:
            return IAgSearchControlCollection.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgSearchControlCollection.")
    def __iter__(self):
        self.__dict__["_enumerator"] = self._NewEnum
        self._enumerator.reset()
        return self
    def __next__(self) -> "IAgSearchControl":
        if self._enumerator is None:
            raise StopIteration
        nextval = self._enumerator.next()
        if nextval is None:
            raise StopIteration
        return nextval
    
    _Item_metadata = { "name" : "Item",
            "arg_types" : (agcom.LONG, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.LONG_arg, agmarshall.AgInterface_out_arg,) }
    def Item(self, index:int) -> "IAgSearchControl":
        """Given an index, returns the element in the collection."""
        return self._intf.invoke(IAgSearchControlCollection._metadata, IAgSearchControlCollection._Item_metadata, index, out_arg())

    _get__NewEnum_metadata = { "name" : "_NewEnum",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.IEnumVARIANT_arg,) }
    @property
    def _NewEnum(self) -> enumerator_proxy:
        """Returns an enumerator for the collection."""
        return self._intf.get_property(IAgSearchControlCollection._metadata, IAgSearchControlCollection._get__NewEnum_metadata)

    _get_Count_metadata = { "name" : "Count",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.LONG_arg,) }
    @property
    def Count(self) -> int:
        """Number of items in the collection"""
        return self._intf.get_property(IAgSearchControlCollection._metadata, IAgSearchControlCollection._get_Count_metadata)

    __getitem__ = Item



agcls.AgClassCatalog.add_catalog_entry("{67A00871-9B5A-42da-B63D-49674C35ED39}", IAgSearchControlCollection)
agcls.AgTypeNameMap["IAgSearchControlCollection"] = IAgSearchControlCollection

class IAgSearchResult(object):
    """Plugin search algorithm result"""
    _num_methods = 12
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{1794AA9C-1762-4e2d-9DDE-C5E0C95F825D}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_ObjectName" : 1,
                             "set_ObjectName" : 2,
                             "get_ResultName" : 3,
                             "set_ResultName" : 4,
                             "get_CurrentValue" : 5,
                             "set_CurrentValue" : 6,
                             "get_IsValid" : 7,
                             "set_IsValid" : 8,
                             "get_Dimension" : 9,
                             "set_Dimension" : 10,
                             "get_InternalUnit" : 11,
                             "set_InternalUnit" : 12, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgSearchResult._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgSearchResult from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgSearchResult.__dict__ and type(IAgSearchResult.__dict__[attrname]) == property:
            return IAgSearchResult.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgSearchResult.")
    
    _get_ObjectName_metadata = { "name" : "ObjectName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def ObjectName(self) -> str:
        """Name of the object associated with the result.  Set by STK."""
        return self._intf.get_property(IAgSearchResult._metadata, IAgSearchResult._get_ObjectName_metadata)

    _set_ObjectName_metadata = { "name" : "ObjectName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @ObjectName.setter
    def ObjectName(self, objectName:str) -> None:
        """Name of the object associated with the result.  Set by STK."""
        return self._intf.set_property(IAgSearchResult._metadata, IAgSearchResult._set_ObjectName_metadata, objectName)

    _get_ResultName_metadata = { "name" : "ResultName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def ResultName(self) -> str:
        """Name of the result.  Set by STK."""
        return self._intf.get_property(IAgSearchResult._metadata, IAgSearchResult._get_ResultName_metadata)

    _set_ResultName_metadata = { "name" : "ResultName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @ResultName.setter
    def ResultName(self, resultName:str) -> None:
        """Name of the result.  Set by STK."""
        return self._intf.set_property(IAgSearchResult._metadata, IAgSearchResult._set_ResultName_metadata, resultName)

    _get_CurrentValue_metadata = { "name" : "CurrentValue",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def CurrentValue(self) -> float:
        """The current value of the result.  Set by STK."""
        return self._intf.get_property(IAgSearchResult._metadata, IAgSearchResult._get_CurrentValue_metadata)

    _set_CurrentValue_metadata = { "name" : "CurrentValue",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @CurrentValue.setter
    def CurrentValue(self, currentValue:float) -> None:
        """The current value of the result.  Set by STK."""
        return self._intf.set_property(IAgSearchResult._metadata, IAgSearchResult._set_CurrentValue_metadata, currentValue)

    _get_IsValid_metadata = { "name" : "IsValid",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def IsValid(self) -> bool:
        """Whether the current value of the result is valid.  Set by STK."""
        return self._intf.get_property(IAgSearchResult._metadata, IAgSearchResult._get_IsValid_metadata)

    _set_IsValid_metadata = { "name" : "IsValid",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @IsValid.setter
    def IsValid(self, isValid:bool) -> None:
        """Whether the current value of the result is valid.  Set by STK."""
        return self._intf.set_property(IAgSearchResult._metadata, IAgSearchResult._set_IsValid_metadata, isValid)

    _get_Dimension_metadata = { "name" : "Dimension",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def Dimension(self) -> str:
        """The dimension of the result.  Set by STK."""
        return self._intf.get_property(IAgSearchResult._metadata, IAgSearchResult._get_Dimension_metadata)

    _set_Dimension_metadata = { "name" : "Dimension",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @Dimension.setter
    def Dimension(self, dimension:str) -> None:
        """The dimension of the result.  Set by STK."""
        return self._intf.set_property(IAgSearchResult._metadata, IAgSearchResult._set_Dimension_metadata, dimension)

    _get_InternalUnit_metadata = { "name" : "InternalUnit",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def InternalUnit(self) -> str:
        """The internal unit of the result.  Set by STK."""
        return self._intf.get_property(IAgSearchResult._metadata, IAgSearchResult._get_InternalUnit_metadata)

    _set_InternalUnit_metadata = { "name" : "InternalUnit",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @InternalUnit.setter
    def InternalUnit(self, internalUnit:str) -> None:
        """The internal unit of the result.  Set by STK."""
        return self._intf.set_property(IAgSearchResult._metadata, IAgSearchResult._set_InternalUnit_metadata, internalUnit)


agcls.AgClassCatalog.add_catalog_entry("{1794AA9C-1762-4e2d-9DDE-C5E0C95F825D}", IAgSearchResult)
agcls.AgTypeNameMap["IAgSearchResult"] = IAgSearchResult

class IAgSearchResultCollection(object):
    """Collection for plugin search algorithm results"""
    _num_methods = 3
    _vtable_offset = IDispatch._vtable_offset + IDispatch._num_methods
    _metadata = {
        "uuid" : "{EFF32FA4-F98E-4e7f-891B-523B8133AAA3}",
        "vtable_reference" : IDispatch._vtable_offset + IDispatch._num_methods - 1,
        "method_offsets" : { "Item" : 1,
                             "get__NewEnum" : 2,
                             "get_Count" : 3, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgSearchResultCollection._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgSearchResultCollection from source object.")
        self.__dict__["_enumerator"] = None
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgSearchResultCollection.__dict__ and type(IAgSearchResultCollection.__dict__[attrname]) == property:
            return IAgSearchResultCollection.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgSearchResultCollection.")
    def __iter__(self):
        self.__dict__["_enumerator"] = self._NewEnum
        self._enumerator.reset()
        return self
    def __next__(self) -> "IAgSearchResult":
        if self._enumerator is None:
            raise StopIteration
        nextval = self._enumerator.next()
        if nextval is None:
            raise StopIteration
        return nextval
    
    _Item_metadata = { "name" : "Item",
            "arg_types" : (agcom.LONG, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.LONG_arg, agmarshall.AgInterface_out_arg,) }
    def Item(self, index:int) -> "IAgSearchResult":
        """Given an index, returns the element in the collection."""
        return self._intf.invoke(IAgSearchResultCollection._metadata, IAgSearchResultCollection._Item_metadata, index, out_arg())

    _get__NewEnum_metadata = { "name" : "_NewEnum",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.IEnumVARIANT_arg,) }
    @property
    def _NewEnum(self) -> enumerator_proxy:
        """Returns an enumerator for the collection."""
        return self._intf.get_property(IAgSearchResultCollection._metadata, IAgSearchResultCollection._get__NewEnum_metadata)

    _get_Count_metadata = { "name" : "Count",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.LONG_arg,) }
    @property
    def Count(self) -> int:
        """Number of items in the collection"""
        return self._intf.get_property(IAgSearchResultCollection._metadata, IAgSearchResultCollection._get_Count_metadata)

    __getitem__ = Item



agcls.AgClassCatalog.add_catalog_entry("{EFF32FA4-F98E-4e7f-891B-523B8133AAA3}", IAgSearchResultCollection)
agcls.AgTypeNameMap["IAgSearchResultCollection"] = IAgSearchResultCollection

class IAgPluginSearchStatusGrid(object):
    """Astrogator plugin class for plugin search algorithm's status grid."""
    _num_methods = 11
    _vtable_offset = IDispatch._vtable_offset + IDispatch._num_methods
    _metadata = {
        "uuid" : "{36B1DC5D-0BA4-42ac-8225-DE9F6E6C6AEB}",
        "vtable_reference" : IDispatch._vtable_offset + IDispatch._num_methods - 1,
        "method_offsets" : { "CreateGrid" : 1,
                             "SetCellString" : 2,
                             "SetCellValue" : 3,
                             "SetStatus" : 4,
                             "Refresh" : 5,
                             "SetColumnToTruncateLeft" : 6,
                             "SetHeaderCellString" : 7,
                             "SetCellControlValue" : 8,
                             "SetCellResultValue" : 9,
                             "SetCellControlDeltaValue" : 10,
                             "SetCellResultDeltaValue" : 11, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgPluginSearchStatusGrid._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgPluginSearchStatusGrid from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgPluginSearchStatusGrid.__dict__ and type(IAgPluginSearchStatusGrid.__dict__[attrname]) == property:
            return IAgPluginSearchStatusGrid.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgPluginSearchStatusGrid.")
    
    _CreateGrid_metadata = { "name" : "CreateGrid",
            "arg_types" : (agcom.INT, agcom.INT,),
            "marshallers" : (agmarshall.INT_arg, agmarshall.INT_arg,) }
    def CreateGrid(self, numRows:int, numCols:int) -> None:
        """Creates the grid."""
        return self._intf.invoke(IAgPluginSearchStatusGrid._metadata, IAgPluginSearchStatusGrid._CreateGrid_metadata, numRows, numCols)

    _SetCellString_metadata = { "name" : "SetCellString",
            "arg_types" : (agcom.INT, agcom.INT, agcom.BSTR,),
            "marshallers" : (agmarshall.INT_arg, agmarshall.INT_arg, agmarshall.BSTR_arg,) }
    def SetCellString(self, row:int, col:int, text:str) -> None:
        """Sets a string in a cell."""
        return self._intf.invoke(IAgPluginSearchStatusGrid._metadata, IAgPluginSearchStatusGrid._SetCellString_metadata, row, col, text)

    _SetCellValue_metadata = { "name" : "SetCellValue",
            "arg_types" : (agcom.INT, agcom.INT, agcom.DOUBLE, agcom.BSTR, agcom.INT,),
            "marshallers" : (agmarshall.INT_arg, agmarshall.INT_arg, agmarshall.DOUBLE_arg, agmarshall.BSTR_arg, agmarshall.INT_arg,) }
    def SetCellValue(self, row:int, col:int, value:float, dimension:str, numDigits:int) -> None:
        """Sets a number in a cell. Uses scenario units."""
        return self._intf.invoke(IAgPluginSearchStatusGrid._metadata, IAgPluginSearchStatusGrid._SetCellValue_metadata, row, col, value, dimension, numDigits)

    _SetStatus_metadata = { "name" : "SetStatus",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    def SetStatus(self, value:str) -> None:
        """Sets the status in the title bar."""
        return self._intf.invoke(IAgPluginSearchStatusGrid._metadata, IAgPluginSearchStatusGrid._SetStatus_metadata, value)

    _Refresh_metadata = { "name" : "Refresh",
            "arg_types" : (),
            "marshallers" : () }
    def Refresh(self) -> None:
        """Refreshes the grid."""
        return self._intf.invoke(IAgPluginSearchStatusGrid._metadata, IAgPluginSearchStatusGrid._Refresh_metadata, )

    _SetColumnToTruncateLeft_metadata = { "name" : "SetColumnToTruncateLeft",
            "arg_types" : (agcom.INT,),
            "marshallers" : (agmarshall.INT_arg,) }
    def SetColumnToTruncateLeft(self, col:int) -> None:
        """Sets a column to truncate left."""
        return self._intf.invoke(IAgPluginSearchStatusGrid._metadata, IAgPluginSearchStatusGrid._SetColumnToTruncateLeft_metadata, col)

    _SetHeaderCellString_metadata = { "name" : "SetHeaderCellString",
            "arg_types" : (agcom.INT, agcom.INT, agcom.BSTR,),
            "marshallers" : (agmarshall.INT_arg, agmarshall.INT_arg, agmarshall.BSTR_arg,) }
    def SetHeaderCellString(self, row:int, col:int, text:str) -> None:
        """Sets a bold string in a cell."""
        return self._intf.invoke(IAgPluginSearchStatusGrid._metadata, IAgPluginSearchStatusGrid._SetHeaderCellString_metadata, row, col, text)

    _SetCellControlValue_metadata = { "name" : "SetCellControlValue",
            "arg_types" : (agcom.INT, agcom.INT, agcom.INT, agcom.DOUBLE, agcom.INT,),
            "marshallers" : (agmarshall.INT_arg, agmarshall.INT_arg, agmarshall.INT_arg, agmarshall.DOUBLE_arg, agmarshall.INT_arg,) }
    def SetCellControlValue(self, row:int, col:int, controlIndex:int, value:float, numDigits:int) -> None:
        """Sets a number in a cell in the units of a control value."""
        return self._intf.invoke(IAgPluginSearchStatusGrid._metadata, IAgPluginSearchStatusGrid._SetCellControlValue_metadata, row, col, controlIndex, value, numDigits)

    _SetCellResultValue_metadata = { "name" : "SetCellResultValue",
            "arg_types" : (agcom.INT, agcom.INT, agcom.INT, agcom.DOUBLE, agcom.INT,),
            "marshallers" : (agmarshall.INT_arg, agmarshall.INT_arg, agmarshall.INT_arg, agmarshall.DOUBLE_arg, agmarshall.INT_arg,) }
    def SetCellResultValue(self, row:int, col:int, resultIndex:int, value:float, numDigits:int) -> None:
        """Sets a number in a cell in the units of a result value."""
        return self._intf.invoke(IAgPluginSearchStatusGrid._metadata, IAgPluginSearchStatusGrid._SetCellResultValue_metadata, row, col, resultIndex, value, numDigits)

    _SetCellControlDeltaValue_metadata = { "name" : "SetCellControlDeltaValue",
            "arg_types" : (agcom.INT, agcom.INT, agcom.INT, agcom.DOUBLE, agcom.INT,),
            "marshallers" : (agmarshall.INT_arg, agmarshall.INT_arg, agmarshall.INT_arg, agmarshall.DOUBLE_arg, agmarshall.INT_arg,) }
    def SetCellControlDeltaValue(self, row:int, col:int, controlIndex:int, value:float, numDigits:int) -> None:
        """Sets a number in a cell in the delta units of a control value."""
        return self._intf.invoke(IAgPluginSearchStatusGrid._metadata, IAgPluginSearchStatusGrid._SetCellControlDeltaValue_metadata, row, col, controlIndex, value, numDigits)

    _SetCellResultDeltaValue_metadata = { "name" : "SetCellResultDeltaValue",
            "arg_types" : (agcom.INT, agcom.INT, agcom.INT, agcom.DOUBLE, agcom.INT,),
            "marshallers" : (agmarshall.INT_arg, agmarshall.INT_arg, agmarshall.INT_arg, agmarshall.DOUBLE_arg, agmarshall.INT_arg,) }
    def SetCellResultDeltaValue(self, row:int, col:int, resultIndex:int, value:float, numDigits:int) -> None:
        """Sets a number in a cell in the delta units of a result value."""
        return self._intf.invoke(IAgPluginSearchStatusGrid._metadata, IAgPluginSearchStatusGrid._SetCellResultDeltaValue_metadata, row, col, resultIndex, value, numDigits)


agcls.AgClassCatalog.add_catalog_entry("{36B1DC5D-0BA4-42ac-8225-DE9F6E6C6AEB}", IAgPluginSearchStatusGrid)
agcls.AgTypeNameMap["IAgPluginSearchStatusGrid"] = IAgPluginSearchStatusGrid

class IAgSearchPluginOperand(object):
    """Astrogator plugin class for plugin search algorithm's operand."""
    _num_methods = 8
    _vtable_offset = IDispatch._vtable_offset + IDispatch._num_methods
    _metadata = {
        "uuid" : "{45D6651F-FF93-48cc-ABE9-78FD08C4CEBB}",
        "vtable_reference" : IDispatch._vtable_offset + IDispatch._num_methods - 1,
        "method_offsets" : { "Trace" : 1,
                             "Evaluate" : 2,
                             "get_Controls" : 3,
                             "get_Results" : 4,
                             "get_StatusGrid" : 5,
                             "Evaluate2" : 6,
                             "get_LogFile" : 7,
                             "get_ProfileName" : 8, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgSearchPluginOperand._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgSearchPluginOperand from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgSearchPluginOperand.__dict__ and type(IAgSearchPluginOperand.__dict__[attrname]) == property:
            return IAgSearchPluginOperand.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgSearchPluginOperand.")
    
    _Trace_metadata = { "name" : "Trace",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.LONG_arg,) }
    def Trace(self, numCalls:int) -> None:
        """Set this interface to trace the next numCalls by outputting a message to the message viewer."""
        return self._intf.invoke(IAgSearchPluginOperand._metadata, IAgSearchPluginOperand._Trace_metadata, numCalls)

    _Evaluate_metadata = { "name" : "Evaluate",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    def Evaluate(self) -> bool:
        """Evaluates the operand of the search.  Treated as a perturbation so graphs are not updated."""
        return self._intf.invoke(IAgSearchPluginOperand._metadata, IAgSearchPluginOperand._Evaluate_metadata, out_arg())

    _get_Controls_metadata = { "name" : "Controls",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def Controls(self) -> "IAgSearchControlCollection":
        """Collection of controls."""
        return self._intf.get_property(IAgSearchPluginOperand._metadata, IAgSearchPluginOperand._get_Controls_metadata)

    _get_Results_metadata = { "name" : "Results",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def Results(self) -> "IAgSearchResultCollection":
        """Collection of results."""
        return self._intf.get_property(IAgSearchPluginOperand._metadata, IAgSearchPluginOperand._get_Results_metadata)

    _get_StatusGrid_metadata = { "name" : "StatusGrid",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def StatusGrid(self) -> "IAgPluginSearchStatusGrid":
        """Status Grid."""
        return self._intf.get_property(IAgSearchPluginOperand._metadata, IAgSearchPluginOperand._get_StatusGrid_metadata)

    _Evaluate2_metadata = { "name" : "Evaluate2",
            "arg_types" : (agcom.VARIANT_BOOL, POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg, agmarshall.VARIANT_BOOL_arg,) }
    def Evaluate2(self, isIteration:bool) -> bool:
        """Evaluates the operand of the search.  Graphs are updated if IsIteration is true."""
        return self._intf.invoke(IAgSearchPluginOperand._metadata, IAgSearchPluginOperand._Evaluate2_metadata, isIteration, out_arg())

    _get_LogFile_metadata = { "name" : "LogFile",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def LogFile(self) -> str:
        """Log file plugin can use."""
        return self._intf.get_property(IAgSearchPluginOperand._metadata, IAgSearchPluginOperand._get_LogFile_metadata)

    _get_ProfileName_metadata = { "name" : "ProfileName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def ProfileName(self) -> str:
        """Name of this search profile."""
        return self._intf.get_property(IAgSearchPluginOperand._metadata, IAgSearchPluginOperand._get_ProfileName_metadata)


agcls.AgClassCatalog.add_catalog_entry("{45D6651F-FF93-48cc-ABE9-78FD08C4CEBB}", IAgSearchPluginOperand)
agcls.AgTypeNameMap["IAgSearchPluginOperand"] = IAgSearchPluginOperand


class IAgPluginSearch(object):
    """
    Plugin search algorithm interface. A method returning false indicates an error.
    This interface may be inherited from to assist in development of the plugin.  All methods should be overridden.
    """
    def Name(self) -> str:
        """Triggered to set the name of the plugin used in messages."""
        raise STKPluginMethodNotImplementedError("Name was not implemented.")

    def GetControlsProgID(self, type:"AgESearchControlTypes") -> str:
        """Gets the progid of the controls of the specified type for this algorithm.  If a certain control type isn't supported, return an empty string."""
        raise STKPluginMethodNotImplementedError("GetControlsProgID was not implemented.")

    def GetResultsProgID(self) -> str:
        """Gets the progid of the results for this algorithm."""
        raise STKPluginMethodNotImplementedError("GetResultsProgID was not implemented.")

    def Init(self, site:"IAgUtPluginSite") -> bool:
        """Triggered when the plugin is initialized to allow for any additional needed initialization. Must return true to turn on use of plugin."""
        raise STKPluginMethodNotImplementedError("Init was not implemented.")

    def Run(self, searchOperand:"IAgSearchPluginOperand", testing:bool) -> bool:
        """Triggered when the plugin is run."""
        raise STKPluginMethodNotImplementedError("Run was not implemented.")

    def Free(self) -> None:
        """Triggered just before the plugin is freed from use to allow for any additional cleanup."""
        raise STKPluginMethodNotImplementedError("Free was not implemented.")




class AgGatorPropagatorScriptDriver(IAgGatorPropagatorScriptDriver, IAgAsHpopPlugin, IAgUtPluginConfig):
    """Astrogator plugin class to use old script plug-ins as HPOP COM plugins"""
    def __init__(self, sourceObject=None):
        IAgGatorPropagatorScriptDriver.__init__(self, sourceObject)
        IAgAsHpopPlugin.__init__(self, sourceObject)
        IAgUtPluginConfig.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgGatorPropagatorScriptDriver._private_init(self, intf)
        IAgAsHpopPlugin._private_init(self, intf)
        IAgUtPluginConfig._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgGatorPropagatorScriptDriver._get_property(self, attrname) is not None: found_prop = IAgGatorPropagatorScriptDriver._get_property(self, attrname)
        if IAgAsHpopPlugin._get_property(self, attrname) is not None: found_prop = IAgAsHpopPlugin._get_property(self, attrname)
        if IAgUtPluginConfig._get_property(self, attrname) is not None: found_prop = IAgUtPluginConfig._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgGatorPropagatorScriptDriver.")

agcls.AgClassCatalog.add_catalog_entry("{D843A31B-CDB0-4437-9DE6-59E6AB21D0CC}", AgGatorPropagatorScriptDriver)



################################################################################
#          Copyright 2020-2023, Ansys Government Initiatives
################################################################################
