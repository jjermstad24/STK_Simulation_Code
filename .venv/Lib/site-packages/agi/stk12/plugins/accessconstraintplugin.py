################################################################################
#          Copyright 2020-2023, Ansys Government Initiatives
################################################################################ 

__all__ = ["AgAccessConstraintPluginObjectData", "AgAccessConstraintPluginObjectDescriptor", "AgAccessConstraintPluginResultEval", 
"AgAccessConstraintPluginResultPostCompute", "AgAccessConstraintPluginResultPreCompute", "AgAccessConstraintPluginResultRegister", 
"AgEAccessApparentPositionType", "AgEAccessConstraintDependencyFlags", "AgEAccessConstraintObjectType", "AgEAccessConstraintPluginErrorCodes", 
"AgEAccessLightTimeDelayFrame", "AgEAltitudeReference", "AgEApparentPositionAberrationType", "AgEApparentPositionSignalSense", 
"IAgAccessConstraintPlugin", "IAgAccessConstraintPluginObjectData", "IAgAccessConstraintPluginObjectDescriptor", "IAgAccessConstraintPluginResultEval", 
"IAgAccessConstraintPluginResultPostCompute", "IAgAccessConstraintPluginResultPreCompute", "IAgAccessConstraintPluginResultRegister"]

import typing

from ctypes   import byref, POINTER
from datetime import datetime
from enum     import IntEnum, IntFlag

from ..internal  import comutil          as agcom
from ..internal  import coclassutil      as agcls
from ..internal  import marshall         as agmarshall
from ..internal  import dataanalysisutil as agdata
from ..utilities import colors           as agcolor
from ..internal.comutil     import IUnknown, IDispatch, IPictureDisp
from ..internal.apiutil     import interface_proxy, enumerator_proxy, out_arg
from ..internal.eventutil   import *
from ..utilities.exceptions import *

from ..plugins.attrautomation import *
from ..plugins.utplugin import *
from ..plugins.crdnplugin import *


def _raise_uninitialized_error(*args):
    raise STKRuntimeError("Valid STK object model classes are returned from STK methods and should not be created independently.")

class AgEAccessConstraintPluginErrorCodes(IntEnum):
    """Enumeration of AgAccessConstraintPlugin General Error Codes"""
    # Access Constraint Plugin: An internal failure occurred.
    eAccessConstraintPluginErrorInternalFailure = (((1 << 31) | (4 << 16)) | 0x101)
    # Access Constraint Plugin: Object path unavailable.
    eAccessConstraintPluginErrorObjectPathUnavailable = (((1 << 31) | (4 << 16)) | 0x102)
    # Access Constraint Plugin: Central Body Name unavailable.
    eAccessConstraintPluginErrorObjectCentralBodyNameUnavailable = (((1 << 31) | (4 << 16)) | 0x103)
    # Access Constraint Plugin: Implementation not yet complete, please contact AGI for more information.
    eAccessConstraintPluginErrorImplementationIncompleteError = (((1 << 31) | (4 << 16)) | 0x104)
    # Access Constraint Plugin: Plugin initialization failure.
    eAccessConstraintPluginErrorPluginInitializationError = (((1 << 31) | (4 << 16)) | 0x105)
    # Access Constraint Plugin: Plugin uninitialization failure.
    eAccessConstraintPluginErrorPluginUninitializationError = (((1 << 31) | (4 << 16)) | 0x106)
    # Access Constraint Plugin: Invalid AgEAccessConstraintObjectType enum.
    eAccessConstraintPluginErrorObjectTypeInvalid = (((1 << 31) | (4 << 16)) | 0x107)
    # Access Constraint Plugin: No targets have been specified for registration.
    eAccessConstraintPluginErrorRegisterNoTargets = (((1 << 31) | (4 << 16)) | 0x108)
    # Access Constraint Plugin: Bad Frame request. Only eUtFrameInertial and eUtFrameFixed are supported.
    eAccessConstraintPluginErrorBadRequestFrame = (((1 << 31) | (4 << 16)) | 0x109)
    # Access Constraint Plugin: Geometrical value not computed. Check registration dependency flags.
    eAccessConstraintPluginErrorGeometryNotComputed = (((1 << 31) | (4 << 16)) | 0x10A)
    # Access Constraint Plugin: Invalid AgEAltitudeReference enum.
    eAccessConstraintPluginErrorInvalidAltitudeReference = (((1 << 31) | (4 << 16)) | 0x10B)
    # Access Constraint Plugin: Invalid AgEAccessApparentPositionType enum.
    eAccessConstraintPluginErrorInvalidApparentPositionType = (((1 << 31) | (4 << 16)) | 0x10C)
    # Access Constraint Plugin: Invalid dimension name.
    eAccessConstraintPluginErrorInvalidDimension = (((1 << 31) | (4 << 16)) | 0x10D)
    # Access Constraint Plugin: Invalid computational weight value. Must be positive.
    eAccessConstraintPluginErrorInvalidWeight = (((1 << 31) | (4 << 16)) | 0x10E)

AgEAccessConstraintPluginErrorCodes.eAccessConstraintPluginErrorInternalFailure.__doc__ = "Access Constraint Plugin: An internal failure occurred."
AgEAccessConstraintPluginErrorCodes.eAccessConstraintPluginErrorObjectPathUnavailable.__doc__ = "Access Constraint Plugin: Object path unavailable."
AgEAccessConstraintPluginErrorCodes.eAccessConstraintPluginErrorObjectCentralBodyNameUnavailable.__doc__ = "Access Constraint Plugin: Central Body Name unavailable."
AgEAccessConstraintPluginErrorCodes.eAccessConstraintPluginErrorImplementationIncompleteError.__doc__ = "Access Constraint Plugin: Implementation not yet complete, please contact AGI for more information."
AgEAccessConstraintPluginErrorCodes.eAccessConstraintPluginErrorPluginInitializationError.__doc__ = "Access Constraint Plugin: Plugin initialization failure."
AgEAccessConstraintPluginErrorCodes.eAccessConstraintPluginErrorPluginUninitializationError.__doc__ = "Access Constraint Plugin: Plugin uninitialization failure."
AgEAccessConstraintPluginErrorCodes.eAccessConstraintPluginErrorObjectTypeInvalid.__doc__ = "Access Constraint Plugin: Invalid AgEAccessConstraintObjectType enum."
AgEAccessConstraintPluginErrorCodes.eAccessConstraintPluginErrorRegisterNoTargets.__doc__ = "Access Constraint Plugin: No targets have been specified for registration."
AgEAccessConstraintPluginErrorCodes.eAccessConstraintPluginErrorBadRequestFrame.__doc__ = "Access Constraint Plugin: Bad Frame request. Only eUtFrameInertial and eUtFrameFixed are supported."
AgEAccessConstraintPluginErrorCodes.eAccessConstraintPluginErrorGeometryNotComputed.__doc__ = "Access Constraint Plugin: Geometrical value not computed. Check registration dependency flags."
AgEAccessConstraintPluginErrorCodes.eAccessConstraintPluginErrorInvalidAltitudeReference.__doc__ = "Access Constraint Plugin: Invalid AgEAltitudeReference enum."
AgEAccessConstraintPluginErrorCodes.eAccessConstraintPluginErrorInvalidApparentPositionType.__doc__ = "Access Constraint Plugin: Invalid AgEAccessApparentPositionType enum."
AgEAccessConstraintPluginErrorCodes.eAccessConstraintPluginErrorInvalidDimension.__doc__ = "Access Constraint Plugin: Invalid dimension name."
AgEAccessConstraintPluginErrorCodes.eAccessConstraintPluginErrorInvalidWeight.__doc__ = "Access Constraint Plugin: Invalid computational weight value. Must be positive."

agcls.AgTypeNameMap["AgEAccessConstraintPluginErrorCodes"] = AgEAccessConstraintPluginErrorCodes

class AgEAccessConstraintObjectType(IntEnum):
    """Enumeration of valid objects for access constraint plugins."""
    # Aircraft.
    eAircraft = 1
    # Facility.
    eFacility = 8
    # Ground Vehicle.
    eGroundVehicle = 9
    # Launch Vehicle.
    eLaunchVehicle = 10
    # Missile.
    eMissile = 13
    # Planet.
    ePlanet = 15
    # Place.
    ePlace = 25
    # Radar.
    eRadar = 16
    # Receiver.
    eReceiver = 17
    # Satellite.
    eSatellite = 18
    # Sensor.
    eSensor = 20
    # Ship.
    eShip = 21
    # Star.
    eStar = 22
    # Submarine.
    eSubmarine = 30
    # Target.
    eTarget = 23
    # Transmitter.
    eTransmitter = 24

AgEAccessConstraintObjectType.eAircraft.__doc__ = "Aircraft."
AgEAccessConstraintObjectType.eFacility.__doc__ = "Facility."
AgEAccessConstraintObjectType.eGroundVehicle.__doc__ = "Ground Vehicle."
AgEAccessConstraintObjectType.eLaunchVehicle.__doc__ = "Launch Vehicle."
AgEAccessConstraintObjectType.eMissile.__doc__ = "Missile."
AgEAccessConstraintObjectType.ePlanet.__doc__ = "Planet."
AgEAccessConstraintObjectType.ePlace.__doc__ = "Place."
AgEAccessConstraintObjectType.eRadar.__doc__ = "Radar."
AgEAccessConstraintObjectType.eReceiver.__doc__ = "Receiver."
AgEAccessConstraintObjectType.eSatellite.__doc__ = "Satellite."
AgEAccessConstraintObjectType.eSensor.__doc__ = "Sensor."
AgEAccessConstraintObjectType.eShip.__doc__ = "Ship."
AgEAccessConstraintObjectType.eStar.__doc__ = "Star."
AgEAccessConstraintObjectType.eSubmarine.__doc__ = "Submarine."
AgEAccessConstraintObjectType.eTarget.__doc__ = "Target."
AgEAccessConstraintObjectType.eTransmitter.__doc__ = "Transmitter."

agcls.AgTypeNameMap["AgEAccessConstraintObjectType"] = AgEAccessConstraintObjectType

class AgEAccessConstraintDependencyFlags(IntEnum):
    """Enumeration of Access Constraint Dependency Flags"""
    # Relative position and velocity
    eDependencyRelativePosVel = 0x0001
    # Relative acceleration
    eDependencyRelativeAcc = 0x0002
    # Position and velocity
    eDependencyPosVel = 0x0004
    # Acceleration
    eDependencyAcc = 0x0008
    # Attitude
    eDependencyAttitude = 0x0010
    # Relative position of Sun
    eDependencyRelSun = 0x0020
    # No dependencies nor light time delay effects computed
    eDependencyNone = 0x1000

AgEAccessConstraintDependencyFlags.eDependencyRelativePosVel.__doc__ = "Relative position and velocity"
AgEAccessConstraintDependencyFlags.eDependencyRelativeAcc.__doc__ = "Relative acceleration"
AgEAccessConstraintDependencyFlags.eDependencyPosVel.__doc__ = "Position and velocity"
AgEAccessConstraintDependencyFlags.eDependencyAcc.__doc__ = "Acceleration"
AgEAccessConstraintDependencyFlags.eDependencyAttitude.__doc__ = "Attitude"
AgEAccessConstraintDependencyFlags.eDependencyRelSun.__doc__ = "Relative position of Sun"
AgEAccessConstraintDependencyFlags.eDependencyNone.__doc__ = "No dependencies nor light time delay effects computed"

agcls.AgTypeNameMap["AgEAccessConstraintDependencyFlags"] = AgEAccessConstraintDependencyFlags

class AgEAccessLightTimeDelayFrame(IntEnum):
    """Enumeration of frames used in Access to compute light time delay."""
    # CentralBody Inertial frame.
    eLightTimeDelayFrameCBI = 1
    # Solar system barycenter frame.
    eLightTimeDelayFrameSSBary = 2

AgEAccessLightTimeDelayFrame.eLightTimeDelayFrameCBI.__doc__ = "CentralBody Inertial frame."
AgEAccessLightTimeDelayFrame.eLightTimeDelayFrameSSBary.__doc__ = "Solar system barycenter frame."

agcls.AgTypeNameMap["AgEAccessLightTimeDelayFrame"] = AgEAccessLightTimeDelayFrame

class AgEApparentPositionSignalSense(IntEnum):
    """Enumeration of the signal sense of the apparent position computation."""
    # Transmit signal.
    eTransmitSignal = 1
    # Receive signal.
    eReceiveSignal = 2

AgEApparentPositionSignalSense.eTransmitSignal.__doc__ = "Transmit signal."
AgEApparentPositionSignalSense.eReceiveSignal.__doc__ = "Receive signal."

agcls.AgTypeNameMap["AgEApparentPositionSignalSense"] = AgEApparentPositionSignalSense

class AgEApparentPositionAberrationType(IntEnum):
    """Enumeration of methods of incorporating aberration into the apparent position computation."""
    # The total effect of aberration.
    eAberrationTotal = 1
    # The annual effect of aberration.
    eAberrationAnnual = 2
    # No aberration.
    eAberrationNone = 3

AgEApparentPositionAberrationType.eAberrationTotal.__doc__ = "The total effect of aberration."
AgEApparentPositionAberrationType.eAberrationAnnual.__doc__ = "The annual effect of aberration."
AgEApparentPositionAberrationType.eAberrationNone.__doc__ = "No aberration."

agcls.AgTypeNameMap["AgEApparentPositionAberrationType"] = AgEApparentPositionAberrationType

class AgEAccessApparentPositionType(IntEnum):
    """Enumeration of types of apparent positions computed by Access."""
    # Light path apparent position. Accounts for the light time delay (if applied) between objects.
    eLightPathApparentPosition = 1
    # Refracted apparent position. Accounts for refraction effects (if applied) on the light path apparent position.
    eRefractedApparentPosition = 2
    # Proper Apparent position. Accounts for aberration effects (depending on the aberration type applied) on the refracted apparent position.
    eProperApparentPosition = 3

AgEAccessApparentPositionType.eLightPathApparentPosition.__doc__ = "Light path apparent position. Accounts for the light time delay (if applied) between objects."
AgEAccessApparentPositionType.eRefractedApparentPosition.__doc__ = "Refracted apparent position. Accounts for refraction effects (if applied) on the light path apparent position."
AgEAccessApparentPositionType.eProperApparentPosition.__doc__ = "Proper Apparent position. Accounts for aberration effects (depending on the aberration type applied) on the refracted apparent position."

agcls.AgTypeNameMap["AgEAccessApparentPositionType"] = AgEAccessApparentPositionType

class AgEAltitudeReference(IntEnum):
    """Enumeration of references used for reporting altitude."""
    # Central body ellipsoid.
    eEllispoidReference = 1
    # Mean sea level. Only available for objects whose central body is Earth.
    eMSLReference = 2
    # Terrain.
    eTerrainReference = 3

AgEAltitudeReference.eEllispoidReference.__doc__ = "Central body ellipsoid."
AgEAltitudeReference.eMSLReference.__doc__ = "Mean sea level. Only available for objects whose central body is Earth."
AgEAltitudeReference.eTerrainReference.__doc__ = "Terrain."

agcls.AgTypeNameMap["AgEAltitudeReference"] = AgEAltitudeReference


class IAgAccessConstraintPluginResultRegister(object):
    """Access Constraint Registration interface for the Register method."""
    _num_methods = 27
    _vtable_offset = IDispatch._vtable_offset + IDispatch._num_methods
    _metadata = {
        "uuid" : "{A9513408-7B86-4331-AEF2-A12848DC0C94}",
        "vtable_reference" : IDispatch._vtable_offset + IDispatch._num_methods - 1,
        "method_offsets" : { "Reset" : 1,
                             "ClearTargets" : 2,
                             "AddTarget" : 3,
                             "Targets" : 4,
                             "ObjectTypeName" : 5,
                             "Register" : 6,
                             "get_BaseObjectType" : 7,
                             "set_BaseObjectType" : 8,
                             "get_BaseDependency" : 9,
                             "set_BaseDependency" : 10,
                             "get_TargetDependency" : 11,
                             "set_TargetDependency" : 12,
                             "get_Dimension" : 13,
                             "set_Dimension" : 14,
                             "get_MinValue" : 15,
                             "set_MinValue" : 16,
                             "get_MaxValue" : 17,
                             "set_MaxValue" : 18,
                             "get_MaxRelMotion" : 19,
                             "set_MaxRelMotion" : 20,
                             "get_InstallDirectory" : 21,
                             "get_ConfigDirectory" : 22,
                             "Message" : 23,
                             "get_Weight" : 24,
                             "set_Weight" : 25,
                             "get_MaxTimeStep" : 26,
                             "set_MaxTimeStep" : 27, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAccessConstraintPluginResultRegister._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAccessConstraintPluginResultRegister from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAccessConstraintPluginResultRegister.__dict__ and type(IAgAccessConstraintPluginResultRegister.__dict__[attrname]) == property:
            return IAgAccessConstraintPluginResultRegister.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAccessConstraintPluginResultRegister.")
    
    _Reset_metadata = { "name" : "Reset",
            "arg_types" : (),
            "marshallers" : () }
    def Reset(self) -> None:
        """Resets property values to defaults values and clears targets."""
        return self._intf.invoke(IAgAccessConstraintPluginResultRegister._metadata, IAgAccessConstraintPluginResultRegister._Reset_metadata, )

    _ClearTargets_metadata = { "name" : "ClearTargets",
            "arg_types" : (),
            "marshallers" : () }
    def ClearTargets(self) -> None:
        """Clears the target list."""
        return self._intf.invoke(IAgAccessConstraintPluginResultRegister._metadata, IAgAccessConstraintPluginResultRegister._ClearTargets_metadata, )

    _AddTarget_metadata = { "name" : "AddTarget",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAccessConstraintObjectType),) }
    def AddTarget(self, type:"AgEAccessConstraintObjectType") -> None:
        """Adds a target to the target list."""
        return self._intf.invoke(IAgAccessConstraintPluginResultRegister._metadata, IAgAccessConstraintPluginResultRegister._AddTarget_metadata, type)

    _Targets_metadata = { "name" : "Targets",
            "arg_types" : (POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg,) }
    def Targets(self) -> list:
        """Returns the current target list."""
        return self._intf.invoke(IAgAccessConstraintPluginResultRegister._metadata, IAgAccessConstraintPluginResultRegister._Targets_metadata, out_arg())

    _ObjectTypeName_metadata = { "name" : "ObjectTypeName",
            "arg_types" : (agcom.LONG, POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAccessConstraintObjectType), agmarshall.BSTR_arg,) }
    def ObjectTypeName(self, type:"AgEAccessConstraintObjectType") -> str:
        """Returns the name of associated object type."""
        return self._intf.invoke(IAgAccessConstraintPluginResultRegister._metadata, IAgAccessConstraintPluginResultRegister._ObjectTypeName_metadata, type, out_arg())

    _Register_metadata = { "name" : "Register",
            "arg_types" : (),
            "marshallers" : () }
    def Register(self) -> None:
        """Registers the constraint using the current settings."""
        return self._intf.invoke(IAgAccessConstraintPluginResultRegister._metadata, IAgAccessConstraintPluginResultRegister._Register_metadata, )

    _get_BaseObjectType_metadata = { "name" : "BaseObjectType",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAccessConstraintObjectType),) }
    @property
    def BaseObjectType(self) -> "AgEAccessConstraintObjectType":
        """This object type is permitted to own this constraint."""
        return self._intf.get_property(IAgAccessConstraintPluginResultRegister._metadata, IAgAccessConstraintPluginResultRegister._get_BaseObjectType_metadata)

    _set_BaseObjectType_metadata = { "name" : "BaseObjectType",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAccessConstraintObjectType),) }
    @BaseObjectType.setter
    def BaseObjectType(self, type:"AgEAccessConstraintObjectType") -> None:
        """This object type is permitted to own this constraint."""
        return self._intf.set_property(IAgAccessConstraintPluginResultRegister._metadata, IAgAccessConstraintPluginResultRegister._set_BaseObjectType_metadata, type)

    _get_BaseDependency_metadata = { "name" : "BaseDependency",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.LONG_arg,) }
    @property
    def BaseDependency(self) -> int:
        """Dependency mask of the Base object indicating the geometric dependencies of the constraint computation."""
        return self._intf.get_property(IAgAccessConstraintPluginResultRegister._metadata, IAgAccessConstraintPluginResultRegister._get_BaseDependency_metadata)

    _set_BaseDependency_metadata = { "name" : "BaseDependency",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.LONG_arg,) }
    @BaseDependency.setter
    def BaseDependency(self, newDepMask:int) -> None:
        """Dependency mask of the Base object indicating the geometric dependencies of the constraint computation."""
        return self._intf.set_property(IAgAccessConstraintPluginResultRegister._metadata, IAgAccessConstraintPluginResultRegister._set_BaseDependency_metadata, newDepMask)

    _get_TargetDependency_metadata = { "name" : "TargetDependency",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.LONG_arg,) }
    @property
    def TargetDependency(self) -> int:
        """Dependency mask of the Target object indicating the geometric dependencies of the constraint computation."""
        return self._intf.get_property(IAgAccessConstraintPluginResultRegister._metadata, IAgAccessConstraintPluginResultRegister._get_TargetDependency_metadata)

    _set_TargetDependency_metadata = { "name" : "TargetDependency",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.LONG_arg,) }
    @TargetDependency.setter
    def TargetDependency(self, newDepMask:int) -> None:
        """Dependency mask of the Target object indicating the geometric dependencies of the constraint computation."""
        return self._intf.set_property(IAgAccessConstraintPluginResultRegister._metadata, IAgAccessConstraintPluginResultRegister._set_TargetDependency_metadata, newDepMask)

    _get_Dimension_metadata = { "name" : "Dimension",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def Dimension(self) -> str:
        """Dimension of the computed constraint value."""
        return self._intf.get_property(IAgAccessConstraintPluginResultRegister._metadata, IAgAccessConstraintPluginResultRegister._get_Dimension_metadata)

    _set_Dimension_metadata = { "name" : "Dimension",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @Dimension.setter
    def Dimension(self, newDimension:str) -> None:
        """Dimension of the computed constraint value."""
        return self._intf.set_property(IAgAccessConstraintPluginResultRegister._metadata, IAgAccessConstraintPluginResultRegister._set_Dimension_metadata, newDimension)

    _get_MinValue_metadata = { "name" : "MinValue",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def MinValue(self) -> float:
        """Minimum value of the computed constraint value."""
        return self._intf.get_property(IAgAccessConstraintPluginResultRegister._metadata, IAgAccessConstraintPluginResultRegister._get_MinValue_metadata)

    _set_MinValue_metadata = { "name" : "MinValue",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @MinValue.setter
    def MinValue(self, newMinValue:float) -> None:
        """Minimum value of the computed constraint value."""
        return self._intf.set_property(IAgAccessConstraintPluginResultRegister._metadata, IAgAccessConstraintPluginResultRegister._set_MinValue_metadata, newMinValue)

    _get_MaxValue_metadata = { "name" : "MaxValue",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def MaxValue(self) -> float:
        """Maximum value of the computed constraint value."""
        return self._intf.get_property(IAgAccessConstraintPluginResultRegister._metadata, IAgAccessConstraintPluginResultRegister._get_MaxValue_metadata)

    _set_MaxValue_metadata = { "name" : "MaxValue",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @MaxValue.setter
    def MaxValue(self, newMaxValue:float) -> None:
        """Maximum value of the computed constraint value."""
        return self._intf.set_property(IAgAccessConstraintPluginResultRegister._metadata, IAgAccessConstraintPluginResultRegister._set_MaxValue_metadata, newMaxValue)

    _get_MaxRelMotion_metadata = { "name" : "MaxRelMotion",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def MaxRelMotion(self) -> float:
        """Maximum relative motion (in degrees) allowed between constraint samples."""
        return self._intf.get_property(IAgAccessConstraintPluginResultRegister._metadata, IAgAccessConstraintPluginResultRegister._get_MaxRelMotion_metadata)

    _set_MaxRelMotion_metadata = { "name" : "MaxRelMotion",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @MaxRelMotion.setter
    def MaxRelMotion(self, newMaxRelMotion:float) -> None:
        """Maximum relative motion (in dgerees) allowed between constraint samples."""
        return self._intf.set_property(IAgAccessConstraintPluginResultRegister._metadata, IAgAccessConstraintPluginResultRegister._set_MaxRelMotion_metadata, newMaxRelMotion)

    _get_InstallDirectory_metadata = { "name" : "InstallDirectory",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def InstallDirectory(self) -> str:
        """The directory path of the installation of the application."""
        return self._intf.get_property(IAgAccessConstraintPluginResultRegister._metadata, IAgAccessConstraintPluginResultRegister._get_InstallDirectory_metadata)

    _get_ConfigDirectory_metadata = { "name" : "ConfigDirectory",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def ConfigDirectory(self) -> str:
        """The directory path of the user configuration area."""
        return self._intf.get_property(IAgAccessConstraintPluginResultRegister._metadata, IAgAccessConstraintPluginResultRegister._get_ConfigDirectory_metadata)

    _Message_metadata = { "name" : "Message",
            "arg_types" : (agcom.LONG, agcom.BSTR,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEUtLogMsgType), agmarshall.BSTR_arg,) }
    def Message(self, msgType:"AgEUtLogMsgType", message:str) -> None:
        """Send a message to the message viewer."""
        return self._intf.invoke(IAgAccessConstraintPluginResultRegister._metadata, IAgAccessConstraintPluginResultRegister._Message_metadata, msgType, message)

    _get_Weight_metadata = { "name" : "Weight",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.LONG_arg,) }
    @property
    def Weight(self) -> int:
        """Computational weight of the constraint. Must be positive."""
        return self._intf.get_property(IAgAccessConstraintPluginResultRegister._metadata, IAgAccessConstraintPluginResultRegister._get_Weight_metadata)

    _set_Weight_metadata = { "name" : "Weight",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.LONG_arg,) }
    @Weight.setter
    def Weight(self, newWeight:int) -> None:
        """Computational weight of the constraint. Must be positive."""
        return self._intf.set_property(IAgAccessConstraintPluginResultRegister._metadata, IAgAccessConstraintPluginResultRegister._set_Weight_metadata, newWeight)

    _get_MaxTimeStep_metadata = { "name" : "MaxTimeStep",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def MaxTimeStep(self) -> float:
        """Maximum time step (in secs) allowed between constraint samples."""
        return self._intf.get_property(IAgAccessConstraintPluginResultRegister._metadata, IAgAccessConstraintPluginResultRegister._get_MaxTimeStep_metadata)

    _set_MaxTimeStep_metadata = { "name" : "MaxTimeStep",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @MaxTimeStep.setter
    def MaxTimeStep(self, newMaxTimeStep:float) -> None:
        """Maximum time step (in secs) allowed between constraint samples."""
        return self._intf.set_property(IAgAccessConstraintPluginResultRegister._metadata, IAgAccessConstraintPluginResultRegister._set_MaxTimeStep_metadata, newMaxTimeStep)


agcls.AgClassCatalog.add_catalog_entry("{A9513408-7B86-4331-AEF2-A12848DC0C94}", IAgAccessConstraintPluginResultRegister)
agcls.AgTypeNameMap["IAgAccessConstraintPluginResultRegister"] = IAgAccessConstraintPluginResultRegister

class IAgAccessConstraintPluginObjectDescriptor(object):
    """Access Constraint Plugin Object Descriptor interface."""
    _num_methods = 10
    _vtable_offset = IDispatch._vtable_offset + IDispatch._num_methods
    _metadata = {
        "uuid" : "{2E7CB866-8F43-4331-84AD-3C843B8957CD}",
        "vtable_reference" : IDispatch._vtable_offset + IDispatch._num_methods - 1,
        "method_offsets" : { "get_IsValid" : 1,
                             "get_VectorToolProvider" : 2,
                             "get_ObjectType" : 3,
                             "get_ObjectPath" : 4,
                             "get_ShortDescription" : 5,
                             "set_ShortDescription" : 6,
                             "get_LongDescription" : 7,
                             "set_LongDescription" : 8,
                             "get_CentralBodyName" : 9,
                             "get_CalcToolProvider" : 10, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAccessConstraintPluginObjectDescriptor._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAccessConstraintPluginObjectDescriptor from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAccessConstraintPluginObjectDescriptor.__dict__ and type(IAgAccessConstraintPluginObjectDescriptor.__dict__[attrname]) == property:
            return IAgAccessConstraintPluginObjectDescriptor.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAccessConstraintPluginObjectDescriptor.")
    
    _get_IsValid_metadata = { "name" : "IsValid",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def IsValid(self) -> bool:
        """True when the object is a valid object. If false, none of the other methods return valid data."""
        return self._intf.get_property(IAgAccessConstraintPluginObjectDescriptor._metadata, IAgAccessConstraintPluginObjectDescriptor._get_IsValid_metadata)

    _get_VectorToolProvider_metadata = { "name" : "VectorToolProvider",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def VectorToolProvider(self) -> "IAgCrdnPluginProvider":
        """Creates an IAgCrdnPluginProvider object."""
        return self._intf.get_property(IAgAccessConstraintPluginObjectDescriptor._metadata, IAgAccessConstraintPluginObjectDescriptor._get_VectorToolProvider_metadata)

    _get_ObjectType_metadata = { "name" : "ObjectType",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAccessConstraintObjectType),) }
    @property
    def ObjectType(self) -> "AgEAccessConstraintObjectType":
        """The object type of the object."""
        return self._intf.get_property(IAgAccessConstraintPluginObjectDescriptor._metadata, IAgAccessConstraintPluginObjectDescriptor._get_ObjectType_metadata)

    _get_ObjectPath_metadata = { "name" : "ObjectPath",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def ObjectPath(self) -> str:
        """The STK object path of the object."""
        return self._intf.get_property(IAgAccessConstraintPluginObjectDescriptor._metadata, IAgAccessConstraintPluginObjectDescriptor._get_ObjectPath_metadata)

    _get_ShortDescription_metadata = { "name" : "ShortDescription",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def ShortDescription(self) -> str:
        """The short description of the object."""
        return self._intf.get_property(IAgAccessConstraintPluginObjectDescriptor._metadata, IAgAccessConstraintPluginObjectDescriptor._get_ShortDescription_metadata)

    _set_ShortDescription_metadata = { "name" : "ShortDescription",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @ShortDescription.setter
    def ShortDescription(self, newDescription:str) -> None:
        """The short description of the object."""
        return self._intf.set_property(IAgAccessConstraintPluginObjectDescriptor._metadata, IAgAccessConstraintPluginObjectDescriptor._set_ShortDescription_metadata, newDescription)

    _get_LongDescription_metadata = { "name" : "LongDescription",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def LongDescription(self) -> str:
        """The long description of the object."""
        return self._intf.get_property(IAgAccessConstraintPluginObjectDescriptor._metadata, IAgAccessConstraintPluginObjectDescriptor._get_LongDescription_metadata)

    _set_LongDescription_metadata = { "name" : "LongDescription",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @LongDescription.setter
    def LongDescription(self, newDescription:str) -> None:
        """The long description of the object."""
        return self._intf.set_property(IAgAccessConstraintPluginObjectDescriptor._metadata, IAgAccessConstraintPluginObjectDescriptor._set_LongDescription_metadata, newDescription)

    _get_CentralBodyName_metadata = { "name" : "CentralBodyName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def CentralBodyName(self) -> str:
        """The name of the central body for this object."""
        return self._intf.get_property(IAgAccessConstraintPluginObjectDescriptor._metadata, IAgAccessConstraintPluginObjectDescriptor._get_CentralBodyName_metadata)

    _get_CalcToolProvider_metadata = { "name" : "CalcToolProvider",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def CalcToolProvider(self) -> "IAgCrdnPluginCalcProvider":
        """Creates an IAgCrdnPluginProvider object."""
        return self._intf.get_property(IAgAccessConstraintPluginObjectDescriptor._metadata, IAgAccessConstraintPluginObjectDescriptor._get_CalcToolProvider_metadata)


agcls.AgClassCatalog.add_catalog_entry("{2E7CB866-8F43-4331-84AD-3C843B8957CD}", IAgAccessConstraintPluginObjectDescriptor)
agcls.AgTypeNameMap["IAgAccessConstraintPluginObjectDescriptor"] = IAgAccessConstraintPluginObjectDescriptor

class IAgAccessConstraintPluginResultPreCompute(object):
    """Access Constraint Plugin Result interface for the PreCompute method."""
    _num_methods = 2
    _vtable_offset = IDispatch._vtable_offset + IDispatch._num_methods
    _metadata = {
        "uuid" : "{FD05D93E-871D-43b5-BC9D-AEA3BE0FAA46}",
        "vtable_reference" : IDispatch._vtable_offset + IDispatch._num_methods - 1,
        "method_offsets" : { "get_Base" : 1,
                             "get_Target" : 2, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAccessConstraintPluginResultPreCompute._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAccessConstraintPluginResultPreCompute from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAccessConstraintPluginResultPreCompute.__dict__ and type(IAgAccessConstraintPluginResultPreCompute.__dict__[attrname]) == property:
            return IAgAccessConstraintPluginResultPreCompute.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAccessConstraintPluginResultPreCompute.")
    
    _get_Base_metadata = { "name" : "Base",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def Base(self) -> "IAgAccessConstraintPluginObjectDescriptor":
        """An interface to a description of the object that owns this constraint."""
        return self._intf.get_property(IAgAccessConstraintPluginResultPreCompute._metadata, IAgAccessConstraintPluginResultPreCompute._get_Base_metadata)

    _get_Target_metadata = { "name" : "Target",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def Target(self) -> "IAgAccessConstraintPluginObjectDescriptor":
        """An interface to a description of the other object involved with this constraint."""
        return self._intf.get_property(IAgAccessConstraintPluginResultPreCompute._metadata, IAgAccessConstraintPluginResultPreCompute._get_Target_metadata)


agcls.AgClassCatalog.add_catalog_entry("{FD05D93E-871D-43b5-BC9D-AEA3BE0FAA46}", IAgAccessConstraintPluginResultPreCompute)
agcls.AgTypeNameMap["IAgAccessConstraintPluginResultPreCompute"] = IAgAccessConstraintPluginResultPreCompute

class IAgAccessConstraintPluginResultPostCompute(object):
    """Access Constraint Plugin Result interface for the PostCompute method."""
    _num_methods = 2
    _vtable_offset = IDispatch._vtable_offset + IDispatch._num_methods
    _metadata = {
        "uuid" : "{E3138BF9-8A16-4829-A9DA-07CD62683590}",
        "vtable_reference" : IDispatch._vtable_offset + IDispatch._num_methods - 1,
        "method_offsets" : { "get_Base" : 1,
                             "get_Target" : 2, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAccessConstraintPluginResultPostCompute._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAccessConstraintPluginResultPostCompute from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAccessConstraintPluginResultPostCompute.__dict__ and type(IAgAccessConstraintPluginResultPostCompute.__dict__[attrname]) == property:
            return IAgAccessConstraintPluginResultPostCompute.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAccessConstraintPluginResultPostCompute.")
    
    _get_Base_metadata = { "name" : "Base",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def Base(self) -> "IAgAccessConstraintPluginObjectDescriptor":
        """An interface to a description of the object that owns this constraint."""
        return self._intf.get_property(IAgAccessConstraintPluginResultPostCompute._metadata, IAgAccessConstraintPluginResultPostCompute._get_Base_metadata)

    _get_Target_metadata = { "name" : "Target",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def Target(self) -> "IAgAccessConstraintPluginObjectDescriptor":
        """An interface to a description of the other object involved with this constraint."""
        return self._intf.get_property(IAgAccessConstraintPluginResultPostCompute._metadata, IAgAccessConstraintPluginResultPostCompute._get_Target_metadata)


agcls.AgClassCatalog.add_catalog_entry("{E3138BF9-8A16-4829-A9DA-07CD62683590}", IAgAccessConstraintPluginResultPostCompute)
agcls.AgTypeNameMap["IAgAccessConstraintPluginResultPostCompute"] = IAgAccessConstraintPluginResultPostCompute

class IAgAccessConstraintPluginObjectData(object):
    """Access Constraint Plugin Object Data interface used to get inputs and outputs during the Evaluate method call."""
    _num_methods = 33
    _vtable_offset = IDispatch._vtable_offset + IDispatch._num_methods
    _metadata = {
        "uuid" : "{71D28592-CF66-4a67-A5AC-9E30FA6CF0DB}",
        "vtable_reference" : IDispatch._vtable_offset + IDispatch._num_methods - 1,
        "method_offsets" : { "get_Descriptor" : 1,
                             "get_CentralBodyName" : 2,
                             "get_SignalSense" : 3,
                             "get_IsClockHost" : 4,
                             "get_IsRefractionComputed" : 5,
                             "get_GeometryMask" : 6,
                             "DayCount" : 7,
                             "DayCount_Array" : 8,
                             "Position" : 9,
                             "Position_Array" : 10,
                             "Velocity" : 11,
                             "Velocity_Array" : 12,
                             "Acceleration" : 13,
                             "Acceleration_Array" : 14,
                             "LatLonAlt" : 15,
                             "LatLonAlt_Array" : 16,
                             "Altitude" : 17,
                             "Range" : 18,
                             "RelativePosition" : 19,
                             "RelativePosition_Array" : 20,
                             "RelativeVelocity" : 21,
                             "RelativeVelocity_Array" : 22,
                             "RelativeAcceleration" : 23,
                             "RelativeAcceleration_Array" : 24,
                             "ApparentSunPosition" : 25,
                             "ApparentSunPosition_Array" : 26,
                             "Attitude" : 27,
                             "Attitude_Array" : 28,
                             "AngularVelocity" : 29,
                             "AngularVelocity_Array" : 30,
                             "DateElements" : 31,
                             "DateElements_Array" : 32,
                             "DateString" : 33, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAccessConstraintPluginObjectData._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAccessConstraintPluginObjectData from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAccessConstraintPluginObjectData.__dict__ and type(IAgAccessConstraintPluginObjectData.__dict__[attrname]) == property:
            return IAgAccessConstraintPluginObjectData.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAccessConstraintPluginObjectData.")
    
    _get_Descriptor_metadata = { "name" : "Descriptor",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def Descriptor(self) -> "IAgAccessConstraintPluginObjectDescriptor":
        """An interface to a description of the object."""
        return self._intf.get_property(IAgAccessConstraintPluginObjectData._metadata, IAgAccessConstraintPluginObjectData._get_Descriptor_metadata)

    _get_CentralBodyName_metadata = { "name" : "CentralBodyName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def CentralBodyName(self) -> str:
        """The name of the central body for this object."""
        return self._intf.get_property(IAgAccessConstraintPluginObjectData._metadata, IAgAccessConstraintPluginObjectData._get_CentralBodyName_metadata)

    _get_SignalSense_metadata = { "name" : "SignalSense",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEApparentPositionSignalSense),) }
    @property
    def SignalSense(self) -> "AgEApparentPositionSignalSense":
        """The signal sense for this object."""
        return self._intf.get_property(IAgAccessConstraintPluginObjectData._metadata, IAgAccessConstraintPluginObjectData._get_SignalSense_metadata)

    _get_IsClockHost_metadata = { "name" : "IsClockHost",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def IsClockHost(self) -> bool:
        """True if this object is the clock host for the access computation."""
        return self._intf.get_property(IAgAccessConstraintPluginObjectData._metadata, IAgAccessConstraintPluginObjectData._get_IsClockHost_metadata)

    _get_IsRefractionComputed_metadata = { "name" : "IsRefractionComputed",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def IsRefractionComputed(self) -> bool:
        """True if refraction was computed for the apparent relative position of the other object."""
        return self._intf.get_property(IAgAccessConstraintPluginObjectData._metadata, IAgAccessConstraintPluginObjectData._get_IsRefractionComputed_metadata)

    _get_GeometryMask_metadata = { "name" : "GeometryMask",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.LONG_arg,) }
    @property
    def GeometryMask(self) -> int:
        """A bit mask of AgEAccessConstraintDependencyFlags indicating which geometrical data was computed."""
        return self._intf.get_property(IAgAccessConstraintPluginObjectData._metadata, IAgAccessConstraintPluginObjectData._get_GeometryMask_metadata)

    _DayCount_Array_metadata = { "name" : "DayCount_Array",
            "arg_types" : (agcom.LONG, POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEUtTimeScale), agmarshall.LPSAFEARRAY_arg,) }
    def DayCount_Array(self, scale:"AgEUtTimeScale") -> list:
        """The current time in requested time scale of the object expressed in day count format returned as an array representing wholeDays, secsIntoDay. Useful for scripting clients."""
        return self._intf.invoke(IAgAccessConstraintPluginObjectData._metadata, IAgAccessConstraintPluginObjectData._DayCount_Array_metadata, scale, out_arg())

    _Position_Array_metadata = { "name" : "Position_Array",
            "arg_types" : (agcom.LONG, POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEUtFrame), agmarshall.LPSAFEARRAY_arg,) }
    def Position_Array(self, frame:"AgEUtFrame") -> list:
        """The object position in the requested frame, returned as an array representing x, y, z. Only eUtFrameInertial and eUtFrameFixed are supported. Useful for scripting clients."""
        return self._intf.invoke(IAgAccessConstraintPluginObjectData._metadata, IAgAccessConstraintPluginObjectData._Position_Array_metadata, frame, out_arg())

    _Velocity_Array_metadata = { "name" : "Velocity_Array",
            "arg_types" : (agcom.LONG, POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEUtFrame), agmarshall.LPSAFEARRAY_arg,) }
    def Velocity_Array(self, frame:"AgEUtFrame") -> list:
        """The object velocity in the requested frame, returned as an array representing vx, vy, vz. Only eUtFrameInertial and eUtFrameFixed are supported. Useful for scripting clients."""
        return self._intf.invoke(IAgAccessConstraintPluginObjectData._metadata, IAgAccessConstraintPluginObjectData._Velocity_Array_metadata, frame, out_arg())

    _Acceleration_Array_metadata = { "name" : "Acceleration_Array",
            "arg_types" : (agcom.LONG, POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEUtFrame), agmarshall.LPSAFEARRAY_arg,) }
    def Acceleration_Array(self, frame:"AgEUtFrame") -> list:
        """The object acceleration in the requested frame, returned as an array representing ax, ay, az. Only eUtFrameInertial and eUtFrameFixed are supported. Useful for scripting clients."""
        return self._intf.invoke(IAgAccessConstraintPluginObjectData._metadata, IAgAccessConstraintPluginObjectData._Acceleration_Array_metadata, frame, out_arg())

    _LatLonAlt_Array_metadata = { "name" : "LatLonAlt_Array",
            "arg_types" : (POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg,) }
    def LatLonAlt_Array(self) -> list:
        """The detic latitude, detic longitude, and altitude of the object, returned as an array representing latitude, longitude, altitude. Altitude is measured wrt the central body ellispoid of the object. (eg. Earth uses WGS84)"""
        return self._intf.invoke(IAgAccessConstraintPluginObjectData._metadata, IAgAccessConstraintPluginObjectData._LatLonAlt_Array_metadata, out_arg())

    _Altitude_metadata = { "name" : "Altitude",
            "arg_types" : (agcom.LONG, POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAltitudeReference), agmarshall.DOUBLE_arg,) }
    def Altitude(self, altRef:"AgEAltitudeReference") -> float:
        """The altitude of the object wrt the requested reference."""
        return self._intf.invoke(IAgAccessConstraintPluginObjectData._metadata, IAgAccessConstraintPluginObjectData._Altitude_metadata, altRef, out_arg())

    _Range_metadata = { "name" : "Range",
            "arg_types" : (agcom.LONG, POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAccessApparentPositionType), agmarshall.DOUBLE_arg,) }
    def Range(self, type:"AgEAccessApparentPositionType") -> float:
        """Apparent range between the objects."""
        return self._intf.invoke(IAgAccessConstraintPluginObjectData._metadata, IAgAccessConstraintPluginObjectData._Range_metadata, type, out_arg())

    _RelativePosition_Array_metadata = { "name" : "RelativePosition_Array",
            "arg_types" : (agcom.LONG, agcom.LONG, POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAccessApparentPositionType), agmarshall.AgEnum_arg(AgEUtFrame), agmarshall.LPSAFEARRAY_arg,) }
    def RelativePosition_Array(self, type:"AgEAccessApparentPositionType", frame:"AgEUtFrame") -> list:
        """The apparent relative position of the other object with respect to this object, in the requested frame, returned as an array representing x, y, z. Only eUtFrameInertial and eUtFrameFixed are supported."""
        return self._intf.invoke(IAgAccessConstraintPluginObjectData._metadata, IAgAccessConstraintPluginObjectData._RelativePosition_Array_metadata, type, frame, out_arg())

    _RelativeVelocity_Array_metadata = { "name" : "RelativeVelocity_Array",
            "arg_types" : (agcom.LONG, agcom.LONG, POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAccessApparentPositionType), agmarshall.AgEnum_arg(AgEUtFrame), agmarshall.LPSAFEARRAY_arg,) }
    def RelativeVelocity_Array(self, type:"AgEAccessApparentPositionType", frame:"AgEUtFrame") -> list:
        """The apparent relative velocity of the other object with respect to this object, in the requested frame, returned as an array representing vx, vy, vz. Only eUtFrameInertial and eUtFrameFixed are supported."""
        return self._intf.invoke(IAgAccessConstraintPluginObjectData._metadata, IAgAccessConstraintPluginObjectData._RelativeVelocity_Array_metadata, type, frame, out_arg())

    _RelativeAcceleration_Array_metadata = { "name" : "RelativeAcceleration_Array",
            "arg_types" : (agcom.LONG, agcom.LONG, POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAccessApparentPositionType), agmarshall.AgEnum_arg(AgEUtFrame), agmarshall.LPSAFEARRAY_arg,) }
    def RelativeAcceleration_Array(self, type:"AgEAccessApparentPositionType", frame:"AgEUtFrame") -> list:
        """The apparent relative acceleration of the other object with respect to this object, in the requested frame, returned as an array representing ax, ay, az. Only eUtFrameInertial and eUtFrameFixed are supported."""
        return self._intf.invoke(IAgAccessConstraintPluginObjectData._metadata, IAgAccessConstraintPluginObjectData._RelativeAcceleration_Array_metadata, type, frame, out_arg())

    _ApparentSunPosition_Array_metadata = { "name" : "ApparentSunPosition_Array",
            "arg_types" : (agcom.LONG, POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEUtFrame), agmarshall.LPSAFEARRAY_arg,) }
    def ApparentSunPosition_Array(self, frame:"AgEUtFrame") -> list:
        """The apparent sun position with respect to the object in the requested frame, returned as an array representing x, y, z. Only eUtFrameInertial and eUtFrameFixed are supported. Useful for scripting clients."""
        return self._intf.invoke(IAgAccessConstraintPluginObjectData._metadata, IAgAccessConstraintPluginObjectData._ApparentSunPosition_Array_metadata, frame, out_arg())

    _Attitude_Array_metadata = { "name" : "Attitude_Array",
            "arg_types" : (agcom.LONG, POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEUtFrame), agmarshall.LPSAFEARRAY_arg,) }
    def Attitude_Array(self, frame:"AgEUtFrame") -> list:
        """The attitude of the body frame of the object wrt the requested frame, returned as an array representing Q1, Q2, Q3 Q4. Only eUtFrameInertial and eUtFrameFixed are supported."""
        return self._intf.invoke(IAgAccessConstraintPluginObjectData._metadata, IAgAccessConstraintPluginObjectData._Attitude_Array_metadata, frame, out_arg())

    _AngularVelocity_Array_metadata = { "name" : "AngularVelocity_Array",
            "arg_types" : (agcom.LONG, POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEUtFrame), agmarshall.LPSAFEARRAY_arg,) }
    def AngularVelocity_Array(self, frame:"AgEUtFrame") -> list:
        """The angular velocity of the body frame of the object wrt the requested frame, returned as an array representing wx, wy, wz. Only eUtFrameInertial and eUtFrameFixed are supported."""
        return self._intf.invoke(IAgAccessConstraintPluginObjectData._metadata, IAgAccessConstraintPluginObjectData._AngularVelocity_Array_metadata, frame, out_arg())

    _DateElements_Array_metadata = { "name" : "DateElements_Array",
            "arg_types" : (agcom.LONG, POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEUtTimeScale), agmarshall.LPSAFEARRAY_arg,) }
    def DateElements_Array(self, scale:"AgEUtTimeScale") -> list:
        """The current time of the object in requested time scale expressed in date format returned as the array: Year [yyyy], DayOfYear [1-366], Month [1-12], DayOfMonth [1-31], Hour [0-23], Minute [0-59], Seconds [0-60]. Useful for scripting clients."""
        return self._intf.invoke(IAgAccessConstraintPluginObjectData._metadata, IAgAccessConstraintPluginObjectData._DateElements_Array_metadata, scale, out_arg())

    _DateString_metadata = { "name" : "DateString",
            "arg_types" : (agcom.BSTR, POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.BSTR_arg,) }
    def DateString(self, dateAbbrv:str) -> str:
        """Current epoch expressed using the date format abbreviation specified."""
        return self._intf.invoke(IAgAccessConstraintPluginObjectData._metadata, IAgAccessConstraintPluginObjectData._DateString_metadata, dateAbbrv, out_arg())


agcls.AgClassCatalog.add_catalog_entry("{71D28592-CF66-4a67-A5AC-9E30FA6CF0DB}", IAgAccessConstraintPluginObjectData)
agcls.AgTypeNameMap["IAgAccessConstraintPluginObjectData"] = IAgAccessConstraintPluginObjectData

class IAgAccessConstraintPluginResultEval(object):
    """Access Constraint Plugin Result interface for the Evaluate method."""
    _num_methods = 16
    _vtable_offset = IDispatch._vtable_offset + IDispatch._num_methods
    _metadata = {
        "uuid" : "{D7C3529C-5F6F-409a-93C9-E4D4DC36CFE9}",
        "vtable_reference" : IDispatch._vtable_offset + IDispatch._num_methods - 1,
        "method_offsets" : { "get_Value" : 1,
                             "set_Value" : 2,
                             "get_MaxRelMotion" : 3,
                             "set_MaxRelMotion" : 4,
                             "get_StepSize" : 5,
                             "set_StepSize" : 6,
                             "get_IsLightTimeDelayConsidered" : 7,
                             "get_LightTimeDelayFrame" : 8,
                             "get_AberrationType" : 9,
                             "get_LightTimeDelay" : 10,
                             "get_LightPathRange" : 11,
                             "DayCount" : 12,
                             "DayCount_Array" : 13,
                             "DateElements" : 14,
                             "DateElements_Array" : 15,
                             "DateString" : 16, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAccessConstraintPluginResultEval._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAccessConstraintPluginResultEval from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAccessConstraintPluginResultEval.__dict__ and type(IAgAccessConstraintPluginResultEval.__dict__[attrname]) == property:
            return IAgAccessConstraintPluginResultEval.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAccessConstraintPluginResultEval.")
    
    _get_Value_metadata = { "name" : "Value",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def Value(self) -> float:
        """The current value of the constraint."""
        return self._intf.get_property(IAgAccessConstraintPluginResultEval._metadata, IAgAccessConstraintPluginResultEval._get_Value_metadata)

    _set_Value_metadata = { "name" : "Value",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @Value.setter
    def Value(self, newValue:float) -> None:
        """The current value of the constraint."""
        return self._intf.set_property(IAgAccessConstraintPluginResultEval._metadata, IAgAccessConstraintPluginResultEval._set_Value_metadata, newValue)

    _get_MaxRelMotion_metadata = { "name" : "MaxRelMotion",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def MaxRelMotion(self) -> float:
        """Maximum relative motion (in degrees) allowed between constraint samples."""
        return self._intf.get_property(IAgAccessConstraintPluginResultEval._metadata, IAgAccessConstraintPluginResultEval._get_MaxRelMotion_metadata)

    _set_MaxRelMotion_metadata = { "name" : "MaxRelMotion",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @MaxRelMotion.setter
    def MaxRelMotion(self, newMaxRelMotion:float) -> None:
        """Maximum relative motion (in degrees) allowed between constraint samples."""
        return self._intf.set_property(IAgAccessConstraintPluginResultEval._metadata, IAgAccessConstraintPluginResultEval._set_MaxRelMotion_metadata, newMaxRelMotion)

    _get_StepSize_metadata = { "name" : "StepSize",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def StepSize(self) -> float:
        """The current time step taken (secs)."""
        return self._intf.get_property(IAgAccessConstraintPluginResultEval._metadata, IAgAccessConstraintPluginResultEval._get_StepSize_metadata)

    _set_StepSize_metadata = { "name" : "StepSize",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @StepSize.setter
    def StepSize(self, newRequestedStepSize:float) -> None:
        """The requested next time step to take (secs)."""
        return self._intf.set_property(IAgAccessConstraintPluginResultEval._metadata, IAgAccessConstraintPluginResultEval._set_StepSize_metadata, newRequestedStepSize)

    _get_IsLightTimeDelayConsidered_metadata = { "name" : "IsLightTimeDelayConsidered",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def IsLightTimeDelayConsidered(self) -> bool:
        """True when light time delay is considered."""
        return self._intf.get_property(IAgAccessConstraintPluginResultEval._metadata, IAgAccessConstraintPluginResultEval._get_IsLightTimeDelayConsidered_metadata)

    _get_LightTimeDelayFrame_metadata = { "name" : "LightTimeDelayFrame",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAccessLightTimeDelayFrame),) }
    @property
    def LightTimeDelayFrame(self) -> "AgEAccessLightTimeDelayFrame":
        """Frame in which light time delay is computed."""
        return self._intf.get_property(IAgAccessConstraintPluginResultEval._metadata, IAgAccessConstraintPluginResultEval._get_LightTimeDelayFrame_metadata)

    _get_AberrationType_metadata = { "name" : "AberrationType",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEApparentPositionAberrationType),) }
    @property
    def AberrationType(self) -> "AgEApparentPositionAberrationType":
        """The type of aberration applied"""
        return self._intf.get_property(IAgAccessConstraintPluginResultEval._metadata, IAgAccessConstraintPluginResultEval._get_AberrationType_metadata)

    _get_LightTimeDelay_metadata = { "name" : "LightTimeDelay",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def LightTimeDelay(self) -> float:
        """Light time delay in seconds."""
        return self._intf.get_property(IAgAccessConstraintPluginResultEval._metadata, IAgAccessConstraintPluginResultEval._get_LightTimeDelay_metadata)

    _get_LightPathRange_metadata = { "name" : "LightPathRange",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def LightPathRange(self) -> float:
        """The range in meters between the Base and Target objects only accounting for light time delay if applied (not refraction nor aberration)."""
        return self._intf.get_property(IAgAccessConstraintPluginResultEval._metadata, IAgAccessConstraintPluginResultEval._get_LightPathRange_metadata)

    _DayCount_Array_metadata = { "name" : "DayCount_Array",
            "arg_types" : (agcom.LONG, POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEUtTimeScale), agmarshall.LPSAFEARRAY_arg,) }
    def DayCount_Array(self, scale:"AgEUtTimeScale") -> list:
        """The current time in requested time scale of the object that is the clock host expressed in day count format returned as an array representing wholeDays, secsIntoDay. Useful for scripting clients."""
        return self._intf.invoke(IAgAccessConstraintPluginResultEval._metadata, IAgAccessConstraintPluginResultEval._DayCount_Array_metadata, scale, out_arg())

    _DateElements_Array_metadata = { "name" : "DateElements_Array",
            "arg_types" : (agcom.LONG, POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEUtTimeScale), agmarshall.LPSAFEARRAY_arg,) }
    def DateElements_Array(self, scale:"AgEUtTimeScale") -> list:
        """The current time of the object in requested time scale expressed in date format returned as the array: Year [yyyy], DayOfYear [1-366], Month [1-12], DayOfMonth [1-31], Hour [0-23], Minute [0-59], Seconds [0-60]. Useful for scripting clients."""
        return self._intf.invoke(IAgAccessConstraintPluginResultEval._metadata, IAgAccessConstraintPluginResultEval._DateElements_Array_metadata, scale, out_arg())

    _DateString_metadata = { "name" : "DateString",
            "arg_types" : (agcom.BSTR, POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.BSTR_arg,) }
    def DateString(self, dateAbbrv:str) -> str:
        """Current epoch expressed using the date format abbreviation specified."""
        return self._intf.invoke(IAgAccessConstraintPluginResultEval._metadata, IAgAccessConstraintPluginResultEval._DateString_metadata, dateAbbrv, out_arg())


agcls.AgClassCatalog.add_catalog_entry("{D7C3529C-5F6F-409a-93C9-E4D4DC36CFE9}", IAgAccessConstraintPluginResultEval)
agcls.AgTypeNameMap["IAgAccessConstraintPluginResultEval"] = IAgAccessConstraintPluginResultEval


class IAgAccessConstraintPlugin(object):
    """
    Access Constraint plugin interface for an  Access Constraint.
    This interface may be inherited from to assist in development of the plugin.  All methods should be overridden.
    """
    def DisplayName(self) -> str:
        """Triggered when the plugin is being registered. This is the name of the constraint used by STK."""
        raise STKPluginMethodNotImplementedError("DisplayName was not implemented.")

    def Register(self, result:"IAgAccessConstraintPluginResultRegister") -> None:
        """Triggered after application start-up, in order to register the constraint for specific STK object pairs for which this constraint is applicable."""
        raise STKPluginMethodNotImplementedError("Register was not implemented.")

    def Init(self, site:"IAgUtPluginSite") -> bool:
        """Triggered just before the first computational event trigger."""
        raise STKPluginMethodNotImplementedError("Init was not implemented.")

    def PreCompute(self, result:"IAgAccessConstraintPluginResultPreCompute") -> bool:
        """Triggered prior to the calls to the Evaluate method, to allow for any required initialization."""
        raise STKPluginMethodNotImplementedError("PreCompute was not implemented.")

    def Evaluate(self, result:"IAgAccessConstraintPluginResultEval", baseData:"IAgAccessConstraintPluginObjectData", targetData:"IAgAccessConstraintPluginObjectData") -> bool:
        """Triggered when the plugin is evaluated for an access constraint value"""
        raise STKPluginMethodNotImplementedError("Evaluate was not implemented.")

    def PostCompute(self, result:"IAgAccessConstraintPluginResultPostCompute") -> bool:
        """Triggered after the calls to the Evaluate method, to allow for any required clean up."""
        raise STKPluginMethodNotImplementedError("PostCompute was not implemented.")

    def Free(self) -> None:
        """Triggered just before the plugin is destroyed."""
        raise STKPluginMethodNotImplementedError("Free was not implemented.")




class AgAccessConstraintPluginResultRegister(IAgAccessConstraintPluginResultRegister):
    """Access Constraint Registration interface for the Register method."""
    def __init__(self, sourceObject=None):
        IAgAccessConstraintPluginResultRegister.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAccessConstraintPluginResultRegister._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAccessConstraintPluginResultRegister._get_property(self, attrname) is not None: found_prop = IAgAccessConstraintPluginResultRegister._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAccessConstraintPluginResultRegister.")

agcls.AgClassCatalog.add_catalog_entry("{18D5B422-C74C-4DDE-9810-82CAE663753B}", AgAccessConstraintPluginResultRegister)


class AgAccessConstraintPluginObjectData(IAgAccessConstraintPluginObjectData):
    """Access Constraint Plugin Object Data interface used to get inputs and outputs during the Evaluate method call."""
    def __init__(self, sourceObject=None):
        IAgAccessConstraintPluginObjectData.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAccessConstraintPluginObjectData._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAccessConstraintPluginObjectData._get_property(self, attrname) is not None: found_prop = IAgAccessConstraintPluginObjectData._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAccessConstraintPluginObjectData.")

agcls.AgClassCatalog.add_catalog_entry("{BF083607-3516-4F1E-9591-BB2E962266D4}", AgAccessConstraintPluginObjectData)


class AgAccessConstraintPluginObjectDescriptor(IAgAccessConstraintPluginObjectDescriptor):
    """Access Constraint Plugin Object Descriptor interface."""
    def __init__(self, sourceObject=None):
        IAgAccessConstraintPluginObjectDescriptor.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAccessConstraintPluginObjectDescriptor._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAccessConstraintPluginObjectDescriptor._get_property(self, attrname) is not None: found_prop = IAgAccessConstraintPluginObjectDescriptor._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAccessConstraintPluginObjectDescriptor.")

agcls.AgClassCatalog.add_catalog_entry("{62B3AC51-4E29-4721-9833-52522D028DA3}", AgAccessConstraintPluginObjectDescriptor)


class AgAccessConstraintPluginResultPreCompute(IAgAccessConstraintPluginResultPreCompute):
    """Access Constraint Plugin Result interface for the PreCompute method."""
    def __init__(self, sourceObject=None):
        IAgAccessConstraintPluginResultPreCompute.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAccessConstraintPluginResultPreCompute._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAccessConstraintPluginResultPreCompute._get_property(self, attrname) is not None: found_prop = IAgAccessConstraintPluginResultPreCompute._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAccessConstraintPluginResultPreCompute.")

agcls.AgClassCatalog.add_catalog_entry("{FB57C0E4-6DEC-4D30-8C0A-169640250392}", AgAccessConstraintPluginResultPreCompute)


class AgAccessConstraintPluginResultEval(IAgAccessConstraintPluginResultEval):
    """Access Constraint Plugin Result interface for the Evaluate method."""
    def __init__(self, sourceObject=None):
        IAgAccessConstraintPluginResultEval.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAccessConstraintPluginResultEval._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAccessConstraintPluginResultEval._get_property(self, attrname) is not None: found_prop = IAgAccessConstraintPluginResultEval._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAccessConstraintPluginResultEval.")

agcls.AgClassCatalog.add_catalog_entry("{700080FC-AD4D-4A7B-85D5-567647DE4ABC}", AgAccessConstraintPluginResultEval)


class AgAccessConstraintPluginResultPostCompute(IAgAccessConstraintPluginResultPostCompute):
    """Access Constraint Plugin Result interface for the PostCompute method."""
    def __init__(self, sourceObject=None):
        IAgAccessConstraintPluginResultPostCompute.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAccessConstraintPluginResultPostCompute._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAccessConstraintPluginResultPostCompute._get_property(self, attrname) is not None: found_prop = IAgAccessConstraintPluginResultPostCompute._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAccessConstraintPluginResultPostCompute.")

agcls.AgClassCatalog.add_catalog_entry("{8C0E2421-7B95-4B10-8B01-110E03559054}", AgAccessConstraintPluginResultPostCompute)



################################################################################
#          Copyright 2020-2023, Ansys Government Initiatives
################################################################################
