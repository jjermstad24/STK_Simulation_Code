################################################################################
#          Copyright 2020-2023, Ansys Government Initiatives
################################################################################ 

__all__ = ["AgEEulerSequence", "AgEPropagatorWrapperPluginErrorCodes", "AgGatorPluginResultAttCtrl", "AgGatorPluginResultEvalEngineModel", 
"AgGatorPluginResultState", "IAgGatorPluginAttCtrl", "IAgGatorPluginEngineModel", "IAgGatorPluginResultAttCtrl", "IAgGatorPluginResultEvalEngineModel", 
"IAgGatorPluginResultState"]

import typing

from ctypes   import byref, POINTER
from datetime import datetime
from enum     import IntEnum, IntFlag

from ..internal  import comutil          as agcom
from ..internal  import coclassutil      as agcls
from ..internal  import marshall         as agmarshall
from ..internal  import dataanalysisutil as agdata
from ..utilities import colors           as agcolor
from ..internal.comutil     import IUnknown, IDispatch, IPictureDisp
from ..internal.apiutil     import interface_proxy, enumerator_proxy, out_arg
from ..internal.eventutil   import *
from ..utilities.exceptions import *

from ..plugins.utplugin import *
from ..plugins.hpopplugin import *


def _raise_uninitialized_error(*args):
    raise STKRuntimeError("Valid STK object model classes are returned from STK methods and should not be created independently.")

class AgEPropagatorWrapperPluginErrorCodes(IntEnum):
    """Enumeration of AgPropagatorWrapperPlugin General Error Codes"""
    # Gator Plugin: An internal failure occurred.
    E_PROPAGATOR_WRAPPERS_PLUGIN_INTERNAL_FAILURE = (((1 << 31) | (4 << 16)) | 0x101)
    # Gator Plugin: Not configured properly.
    E_PROPAGATOR_WRAPPERS_PLUGIN_NOT_CONFIGURED = (((1 << 31) | (4 << 16)) | 0x102)
    # Gator Plugin: Central Body is undefined.
    E_PROPAGATOR_WRAPPERS_PLUGIN_CENTRALBODY_UNDEFINED = (((1 << 31) | (4 << 16)) | 0x103)
    # Gator Plugin: Sun Position Type SRP not supported.
    E_PROPAGATOR_WRAPPERS_PLUGIN_SUNPOSTYPE_SRP_NOT_SUPPORTED = (((1 << 31) | (4 << 16)) | 0x104)
    # Gator Plugin: The Square Root of an invalid value occurred.
    E_PROPAGATOR_WRAPPERS_PLUGIN_INVALID_SQR = (((1 << 31) | (4 << 16)) | 0x105)
    # Gator Plugin: Reference Axes Unavailable.
    E_PROPAGATOR_WRAPPERS_PLUGIN_REF_AXES_UNAVAILABLE = (((1 << 31) | (4 << 16)) | 0x106)
    # Gator Plugin: Color not valid.
    E_PROPAGATOR_WRAPPERS_PLUGIN_INVALID_COLOR = (((1 << 31) | (4 << 16)) | 0x107)

AgEPropagatorWrapperPluginErrorCodes.E_PROPAGATOR_WRAPPERS_PLUGIN_INTERNAL_FAILURE.__doc__ = "Gator Plugin: An internal failure occurred."
AgEPropagatorWrapperPluginErrorCodes.E_PROPAGATOR_WRAPPERS_PLUGIN_NOT_CONFIGURED.__doc__ = "Gator Plugin: Not configured properly."
AgEPropagatorWrapperPluginErrorCodes.E_PROPAGATOR_WRAPPERS_PLUGIN_CENTRALBODY_UNDEFINED.__doc__ = "Gator Plugin: Central Body is undefined."
AgEPropagatorWrapperPluginErrorCodes.E_PROPAGATOR_WRAPPERS_PLUGIN_SUNPOSTYPE_SRP_NOT_SUPPORTED.__doc__ = "Gator Plugin: Sun Position Type SRP not supported."
AgEPropagatorWrapperPluginErrorCodes.E_PROPAGATOR_WRAPPERS_PLUGIN_INVALID_SQR.__doc__ = "Gator Plugin: The Square Root of an invalid value occurred."
AgEPropagatorWrapperPluginErrorCodes.E_PROPAGATOR_WRAPPERS_PLUGIN_REF_AXES_UNAVAILABLE.__doc__ = "Gator Plugin: Reference Axes Unavailable."
AgEPropagatorWrapperPluginErrorCodes.E_PROPAGATOR_WRAPPERS_PLUGIN_INVALID_COLOR.__doc__ = "Gator Plugin: Color not valid."

agcls.AgTypeNameMap["AgEPropagatorWrapperPluginErrorCodes"] = AgEPropagatorWrapperPluginErrorCodes

class AgEEulerSequence(IntEnum):
    """Enumeration AgEEulerSequence."""
    # Sequence defined by rotation about x-axis, then about rotated y-axis, then about rotated x-axis.
    e121 = 121
    # Sequence defined by rotation about x-axis, then about rotated y-axis, then about rotated z-axis.
    e123 = 123
    # Sequence defined by rotation about x-axis, then about rotated z-axis, then about rotated x-axis.
    e131 = 131
    # Sequence defined by rotation about x-axis, then about rotated z-axis, then about rotated y-axis.
    e132 = 132
    # Sequence defined by rotation about y-axis, then about rotated x-axis, then about rotated y-axis.
    e212 = 212
    # Sequence defined by rotation about y-axis, then about rotated x-axis, then about rotated z-axis.
    e213 = 213
    # Sequence defined by rotation about y-axis, then about rotated z-axis, then about rotated x-axis.
    e231 = 231
    # Sequence defined by rotation about y-axis, then about rotated z-axis, then about rotated y-axis.
    e232 = 232
    # Sequence defined by rotation about z-axis, then about rotated x-axis, then about rotated y-axis.
    e312 = 312
    # Sequence defined by rotation about z-axis, then about rotated x-axis, then about rotated z-axis.
    e313 = 313
    # Sequence defined by rotation about z-axis, then about rotated y-axis, then about rotated x-axis.
    e321 = 321
    # Sequence defined by rotation about z-axis, then about rotated y-axis, then about rotated x-axis.
    e323 = 323

AgEEulerSequence.e121.__doc__ = "Sequence defined by rotation about x-axis, then about rotated y-axis, then about rotated x-axis."
AgEEulerSequence.e123.__doc__ = "Sequence defined by rotation about x-axis, then about rotated y-axis, then about rotated z-axis."
AgEEulerSequence.e131.__doc__ = "Sequence defined by rotation about x-axis, then about rotated z-axis, then about rotated x-axis."
AgEEulerSequence.e132.__doc__ = "Sequence defined by rotation about x-axis, then about rotated z-axis, then about rotated y-axis."
AgEEulerSequence.e212.__doc__ = "Sequence defined by rotation about y-axis, then about rotated x-axis, then about rotated y-axis."
AgEEulerSequence.e213.__doc__ = "Sequence defined by rotation about y-axis, then about rotated x-axis, then about rotated z-axis."
AgEEulerSequence.e231.__doc__ = "Sequence defined by rotation about y-axis, then about rotated z-axis, then about rotated x-axis."
AgEEulerSequence.e232.__doc__ = "Sequence defined by rotation about y-axis, then about rotated z-axis, then about rotated y-axis."
AgEEulerSequence.e312.__doc__ = "Sequence defined by rotation about z-axis, then about rotated x-axis, then about rotated y-axis."
AgEEulerSequence.e313.__doc__ = "Sequence defined by rotation about z-axis, then about rotated x-axis, then about rotated z-axis."
AgEEulerSequence.e321.__doc__ = "Sequence defined by rotation about z-axis, then about rotated y-axis, then about rotated x-axis."
AgEEulerSequence.e323.__doc__ = "Sequence defined by rotation about z-axis, then about rotated y-axis, then about rotated x-axis."

agcls.AgTypeNameMap["AgEEulerSequence"] = AgEEulerSequence


class IAgGatorPluginResultState(object):
    """Astrogator plugin interface used to get state values. Supports IAgGatorState and IAgEpoch."""
    _num_methods = 28
    _vtable_offset = IDispatch._vtable_offset + IDispatch._num_methods
    _metadata = {
        "uuid" : "{1FE7D2CB-DC59-4e05-A3C2-CBAB2C00EC45}",
        "vtable_reference" : IDispatch._vtable_offset + IDispatch._num_methods - 1,
        "method_offsets" : { "Trace" : 1,
                             "get_CbName" : 2,
                             "get_Mu" : 3,
                             "get_Cd" : 4,
                             "get_Cr" : 5,
                             "get_DragArea" : 6,
                             "get_SRPArea" : 7,
                             "get_Mass" : 8,
                             "get_DryMass" : 9,
                             "get_FuelMass" : 10,
                             "get_Altitude" : 11,
                             "DayCount" : 12,
                             "DayCount_Array" : 13,
                             "PosVel" : 14,
                             "PosVel_Array" : 15,
                             "LatLonAlt" : 16,
                             "LatLonAlt_Array" : 17,
                             "SunPosition" : 18,
                             "SunPosition_Array" : 19,
                             "TransformVector" : 20,
                             "TransformVector_Array" : 21,
                             "StopPropagation" : 22,
                             "IndicateEvent" : 23,
                             "SetMaxStep" : 24,
                             "SetColor" : 25,
                             "DateElements" : 26,
                             "DateElements_Array" : 27,
                             "DateString" : 28, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgGatorPluginResultState._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgGatorPluginResultState from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgGatorPluginResultState.__dict__ and type(IAgGatorPluginResultState.__dict__[attrname]) == property:
            return IAgGatorPluginResultState.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgGatorPluginResultState.")
    
    _Trace_metadata = { "name" : "Trace",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.LONG_arg,) }
    def Trace(self, numCalls:int) -> None:
        """Set this interface to trace the next numCalls by outputting a message to the message viewer."""
        return self._intf.invoke(IAgGatorPluginResultState._metadata, IAgGatorPluginResultState._Trace_metadata, numCalls)

    _get_CbName_metadata = { "name" : "CbName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def CbName(self) -> str:
        """Name of the central body used as reference frame origin."""
        return self._intf.get_property(IAgGatorPluginResultState._metadata, IAgGatorPluginResultState._get_CbName_metadata)

    _get_Mu_metadata = { "name" : "Mu",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def Mu(self) -> float:
        """Gravitational constant of the state central body"""
        return self._intf.get_property(IAgGatorPluginResultState._metadata, IAgGatorPluginResultState._get_Mu_metadata)

    _get_Cd_metadata = { "name" : "Cd",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def Cd(self) -> float:
        """Drag Coefficient."""
        return self._intf.get_property(IAgGatorPluginResultState._metadata, IAgGatorPluginResultState._get_Cd_metadata)

    _get_Cr_metadata = { "name" : "Cr",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def Cr(self) -> float:
        """SRP Coefficient."""
        return self._intf.get_property(IAgGatorPluginResultState._metadata, IAgGatorPluginResultState._get_Cr_metadata)

    _get_DragArea_metadata = { "name" : "DragArea",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def DragArea(self) -> float:
        """Drag Area."""
        return self._intf.get_property(IAgGatorPluginResultState._metadata, IAgGatorPluginResultState._get_DragArea_metadata)

    _get_SRPArea_metadata = { "name" : "SRPArea",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def SRPArea(self) -> float:
        """SRP Area."""
        return self._intf.get_property(IAgGatorPluginResultState._metadata, IAgGatorPluginResultState._get_SRPArea_metadata)

    _get_Mass_metadata = { "name" : "Mass",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def Mass(self) -> float:
        """Total Mass."""
        return self._intf.get_property(IAgGatorPluginResultState._metadata, IAgGatorPluginResultState._get_Mass_metadata)

    _get_DryMass_metadata = { "name" : "DryMass",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def DryMass(self) -> float:
        """Dry Mass."""
        return self._intf.get_property(IAgGatorPluginResultState._metadata, IAgGatorPluginResultState._get_DryMass_metadata)

    _get_FuelMass_metadata = { "name" : "FuelMass",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def FuelMass(self) -> float:
        """Fuel Mass."""
        return self._intf.get_property(IAgGatorPluginResultState._metadata, IAgGatorPluginResultState._get_FuelMass_metadata)

    _get_Altitude_metadata = { "name" : "Altitude",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def Altitude(self) -> float:
        """Current altitude."""
        return self._intf.get_property(IAgGatorPluginResultState._metadata, IAgGatorPluginResultState._get_Altitude_metadata)

    _DayCount_Array_metadata = { "name" : "DayCount_Array",
            "arg_types" : (agcom.LONG, POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEUtTimeScale), agmarshall.LPSAFEARRAY_arg,) }
    def DayCount_Array(self, scale:"AgEUtTimeScale") -> list:
        """Current epoch in requested time scale expressed in day count format returned as an array representing wholeDays, secsIntoDay. Useful for scripting clients."""
        return self._intf.invoke(IAgGatorPluginResultState._metadata, IAgGatorPluginResultState._DayCount_Array_metadata, scale, out_arg())

    _PosVel_Array_metadata = { "name" : "PosVel_Array",
            "arg_types" : (agcom.LONG, POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEUtFrame), agmarshall.LPSAFEARRAY_arg,) }
    def PosVel_Array(self, frame:"AgEUtFrame") -> list:
        """Current position and velocity in the requested frame (in internal units) returned as an array representing x, y, z, vx, vy, vz. Useful for scripting clients."""
        return self._intf.invoke(IAgGatorPluginResultState._metadata, IAgGatorPluginResultState._PosVel_Array_metadata, frame, out_arg())

    _LatLonAlt_Array_metadata = { "name" : "LatLonAlt_Array",
            "arg_types" : (POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg,) }
    def LatLonAlt_Array(self) -> list:
        """Current detic latitude, detic longitude, and altitude(in internal units) returned as an array representing lat, lon, alt. Useful for scripting clients."""
        return self._intf.invoke(IAgGatorPluginResultState._metadata, IAgGatorPluginResultState._LatLonAlt_Array_metadata, out_arg())

    _SunPosition_Array_metadata = { "name" : "SunPosition_Array",
            "arg_types" : (agcom.LONG, agcom.LONG, POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEUtSunPosType), agmarshall.AgEnum_arg(AgEUtFrame), agmarshall.LPSAFEARRAY_arg,) }
    def SunPosition_Array(self, sunPosType:"AgEUtSunPosType", frame:"AgEUtFrame") -> list:
        """Position of the sun wrt the current satellite position, in the requested frame, computed in the requested manner, (in internal units) returned as an array representing x, y, z. Useful for scripting clients."""
        return self._intf.invoke(IAgGatorPluginResultState._metadata, IAgGatorPluginResultState._SunPosition_Array_metadata, sunPosType, frame, out_arg())

    _TransformVector_Array_metadata = { "name" : "TransformVector_Array",
            "arg_types" : (agcom.LONG, agcom.DOUBLE, agcom.DOUBLE, agcom.DOUBLE, agcom.LONG, POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEUtFrame), agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg, agmarshall.AgEnum_arg(AgEUtFrame), agmarshall.LPSAFEARRAY_arg,) }
    def TransformVector_Array(self, frameFrom:"AgEUtFrame", xFrom:float, yFrom:float, zFrom:float, frameTo:"AgEUtFrame") -> list:
        """Transforms a vector from the input frame to the output frame (in internal units) returned as an array representing x, y, z. Useful for scripting clients."""
        return self._intf.invoke(IAgGatorPluginResultState._metadata, IAgGatorPluginResultState._TransformVector_Array_metadata, frameFrom, xFrom, yFrom, zFrom, frameTo, out_arg())

    _StopPropagation_metadata = { "name" : "StopPropagation",
            "arg_types" : (),
            "marshallers" : () }
    def StopPropagation(self) -> None:
        """Stops propagation.  For fatal errors."""
        return self._intf.invoke(IAgGatorPluginResultState._metadata, IAgGatorPluginResultState._StopPropagation_metadata, )

    _IndicateEvent_metadata = { "name" : "IndicateEvent",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAsHpopPluginEventIndicators),) }
    def IndicateEvent(self, eEventIndicator:"AgEAsHpopPluginEventIndicators") -> None:
        """Marks an event to the propagator."""
        return self._intf.invoke(IAgGatorPluginResultState._metadata, IAgGatorPluginResultState._IndicateEvent_metadata, eEventIndicator)

    _SetMaxStep_metadata = { "name" : "SetMaxStep",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    def SetMaxStep(self, maxStep:float) -> None:
        """Sets the maximum step size for the propagator."""
        return self._intf.invoke(IAgGatorPluginResultState._metadata, IAgGatorPluginResultState._SetMaxStep_metadata, maxStep)

    _SetColor_metadata = { "name" : "SetColor",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    def SetColor(self, color:str) -> None:
        """Sets the segment color."""
        return self._intf.invoke(IAgGatorPluginResultState._metadata, IAgGatorPluginResultState._SetColor_metadata, color)

    _DateElements_Array_metadata = { "name" : "DateElements_Array",
            "arg_types" : (agcom.LONG, POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEUtTimeScale), agmarshall.LPSAFEARRAY_arg,) }
    def DateElements_Array(self, scale:"AgEUtTimeScale") -> list:
        """Current epoch in requested time scale expressed in date format returned as the array: Year [yyyy], DayOfYear [1-366], Month [1-12], DayOfMonth [1-31], Hour [0-23], Minute [0-59], Seconds [0-60]. Useful for scripting clients."""
        return self._intf.invoke(IAgGatorPluginResultState._metadata, IAgGatorPluginResultState._DateElements_Array_metadata, scale, out_arg())

    _DateString_metadata = { "name" : "DateString",
            "arg_types" : (agcom.BSTR, POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.BSTR_arg,) }
    def DateString(self, dateAbbrv:str) -> str:
        """Current epoch expressed using the date format abbreviation specified."""
        return self._intf.invoke(IAgGatorPluginResultState._metadata, IAgGatorPluginResultState._DateString_metadata, dateAbbrv, out_arg())


agcls.AgClassCatalog.add_catalog_entry("{1FE7D2CB-DC59-4e05-A3C2-CBAB2C00EC45}", IAgGatorPluginResultState)
agcls.AgTypeNameMap["IAgGatorPluginResultState"] = IAgGatorPluginResultState

class IAgGatorPluginResultEvalEngineModel(object):
    """Astrogator plugin interface used to get/set engine model settings during the computation of a step. Supports IAgGatorState and IAgEpoch."""
    _num_methods = 32
    _vtable_offset = IDispatch._vtable_offset + IDispatch._num_methods
    _metadata = {
        "uuid" : "{D120DA1E-B666-4a30-8D32-E59133C72B87}",
        "vtable_reference" : IDispatch._vtable_offset + IDispatch._num_methods - 1,
        "method_offsets" : { "Trace" : 1,
                             "get_CbName" : 2,
                             "get_Mu" : 3,
                             "get_Cd" : 4,
                             "get_Cr" : 5,
                             "get_DragArea" : 6,
                             "get_SRPArea" : 7,
                             "get_Mass" : 8,
                             "get_DryMass" : 9,
                             "get_FuelMass" : 10,
                             "get_Altitude" : 11,
                             "DayCount" : 12,
                             "DayCount_Array" : 13,
                             "PosVel" : 14,
                             "PosVel_Array" : 15,
                             "LatLonAlt" : 16,
                             "LatLonAlt_Array" : 17,
                             "SunPosition" : 18,
                             "SunPosition_Array" : 19,
                             "TransformVector" : 20,
                             "TransformVector_Array" : 21,
                             "get_Thrust" : 22,
                             "get_Isp" : 23,
                             "get_MassFlowRate" : 24,
                             "get_TimeSinceIgnition" : 25,
                             "SetThrustAndIsp" : 26,
                             "SetThrustAndMassFlowRate" : 27,
                             "SetIspAndMassFlowRate" : 28,
                             "StopPropagation" : 29,
                             "DateElements" : 30,
                             "DateElements_Array" : 31,
                             "DateString" : 32, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgGatorPluginResultEvalEngineModel._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgGatorPluginResultEvalEngineModel from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgGatorPluginResultEvalEngineModel.__dict__ and type(IAgGatorPluginResultEvalEngineModel.__dict__[attrname]) == property:
            return IAgGatorPluginResultEvalEngineModel.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgGatorPluginResultEvalEngineModel.")
    
    _Trace_metadata = { "name" : "Trace",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.LONG_arg,) }
    def Trace(self, numCalls:int) -> None:
        """Set this interface to trace the next numCalls by outputting a message to the message viewer."""
        return self._intf.invoke(IAgGatorPluginResultEvalEngineModel._metadata, IAgGatorPluginResultEvalEngineModel._Trace_metadata, numCalls)

    _get_CbName_metadata = { "name" : "CbName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def CbName(self) -> str:
        """Name of the central body used as reference frame origin."""
        return self._intf.get_property(IAgGatorPluginResultEvalEngineModel._metadata, IAgGatorPluginResultEvalEngineModel._get_CbName_metadata)

    _get_Mu_metadata = { "name" : "Mu",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def Mu(self) -> float:
        """Gravitational constant of the state central body"""
        return self._intf.get_property(IAgGatorPluginResultEvalEngineModel._metadata, IAgGatorPluginResultEvalEngineModel._get_Mu_metadata)

    _get_Cd_metadata = { "name" : "Cd",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def Cd(self) -> float:
        """Drag Coefficient."""
        return self._intf.get_property(IAgGatorPluginResultEvalEngineModel._metadata, IAgGatorPluginResultEvalEngineModel._get_Cd_metadata)

    _get_Cr_metadata = { "name" : "Cr",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def Cr(self) -> float:
        """SRP Coefficient."""
        return self._intf.get_property(IAgGatorPluginResultEvalEngineModel._metadata, IAgGatorPluginResultEvalEngineModel._get_Cr_metadata)

    _get_DragArea_metadata = { "name" : "DragArea",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def DragArea(self) -> float:
        """Drag Area."""
        return self._intf.get_property(IAgGatorPluginResultEvalEngineModel._metadata, IAgGatorPluginResultEvalEngineModel._get_DragArea_metadata)

    _get_SRPArea_metadata = { "name" : "SRPArea",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def SRPArea(self) -> float:
        """SRP Area."""
        return self._intf.get_property(IAgGatorPluginResultEvalEngineModel._metadata, IAgGatorPluginResultEvalEngineModel._get_SRPArea_metadata)

    _get_Mass_metadata = { "name" : "Mass",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def Mass(self) -> float:
        """Total Mass."""
        return self._intf.get_property(IAgGatorPluginResultEvalEngineModel._metadata, IAgGatorPluginResultEvalEngineModel._get_Mass_metadata)

    _get_DryMass_metadata = { "name" : "DryMass",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def DryMass(self) -> float:
        """Dry Mass."""
        return self._intf.get_property(IAgGatorPluginResultEvalEngineModel._metadata, IAgGatorPluginResultEvalEngineModel._get_DryMass_metadata)

    _get_FuelMass_metadata = { "name" : "FuelMass",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def FuelMass(self) -> float:
        """Fuel Mass."""
        return self._intf.get_property(IAgGatorPluginResultEvalEngineModel._metadata, IAgGatorPluginResultEvalEngineModel._get_FuelMass_metadata)

    _get_Altitude_metadata = { "name" : "Altitude",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def Altitude(self) -> float:
        """Current altitude."""
        return self._intf.get_property(IAgGatorPluginResultEvalEngineModel._metadata, IAgGatorPluginResultEvalEngineModel._get_Altitude_metadata)

    _DayCount_Array_metadata = { "name" : "DayCount_Array",
            "arg_types" : (agcom.LONG, POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEUtTimeScale), agmarshall.LPSAFEARRAY_arg,) }
    def DayCount_Array(self, scale:"AgEUtTimeScale") -> list:
        """Current epoch in requested time scale expressed in day count format returned as an array representing wholeDays, secsIntoDay. Useful for scripting clients."""
        return self._intf.invoke(IAgGatorPluginResultEvalEngineModel._metadata, IAgGatorPluginResultEvalEngineModel._DayCount_Array_metadata, scale, out_arg())

    _PosVel_Array_metadata = { "name" : "PosVel_Array",
            "arg_types" : (agcom.LONG, POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEUtFrame), agmarshall.LPSAFEARRAY_arg,) }
    def PosVel_Array(self, frame:"AgEUtFrame") -> list:
        """Current position and velocity in the requested frame (in internal units) returned as an array representing x, y, z, vx, vy, vz. Useful for scripting clients."""
        return self._intf.invoke(IAgGatorPluginResultEvalEngineModel._metadata, IAgGatorPluginResultEvalEngineModel._PosVel_Array_metadata, frame, out_arg())

    _LatLonAlt_Array_metadata = { "name" : "LatLonAlt_Array",
            "arg_types" : (POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg,) }
    def LatLonAlt_Array(self) -> list:
        """Current detic latitude, detic longitude, and altitude(in internal units) returned as an array representing lat, lon, alt. Useful for scripting clients."""
        return self._intf.invoke(IAgGatorPluginResultEvalEngineModel._metadata, IAgGatorPluginResultEvalEngineModel._LatLonAlt_Array_metadata, out_arg())

    _SunPosition_Array_metadata = { "name" : "SunPosition_Array",
            "arg_types" : (agcom.LONG, agcom.LONG, POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEUtSunPosType), agmarshall.AgEnum_arg(AgEUtFrame), agmarshall.LPSAFEARRAY_arg,) }
    def SunPosition_Array(self, sunPosType:"AgEUtSunPosType", frame:"AgEUtFrame") -> list:
        """Position of the sun wrt the current satellite position, in the requested frame, computed in the requested manner, (in internal units) returned as an array representing x, y, z. Useful for scripting clients."""
        return self._intf.invoke(IAgGatorPluginResultEvalEngineModel._metadata, IAgGatorPluginResultEvalEngineModel._SunPosition_Array_metadata, sunPosType, frame, out_arg())

    _TransformVector_Array_metadata = { "name" : "TransformVector_Array",
            "arg_types" : (agcom.LONG, agcom.DOUBLE, agcom.DOUBLE, agcom.DOUBLE, agcom.LONG, POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEUtFrame), agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg, agmarshall.AgEnum_arg(AgEUtFrame), agmarshall.LPSAFEARRAY_arg,) }
    def TransformVector_Array(self, frameFrom:"AgEUtFrame", xFrom:float, yFrom:float, zFrom:float, frameTo:"AgEUtFrame") -> list:
        """Transforms a vector from the input frame to the output frame (in internal units) returned as an array representing x, y, z. Useful for scripting clients."""
        return self._intf.invoke(IAgGatorPluginResultEvalEngineModel._metadata, IAgGatorPluginResultEvalEngineModel._TransformVector_Array_metadata, frameFrom, xFrom, yFrom, zFrom, frameTo, out_arg())

    _get_Thrust_metadata = { "name" : "Thrust",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def Thrust(self) -> float:
        """Current thrust (N)."""
        return self._intf.get_property(IAgGatorPluginResultEvalEngineModel._metadata, IAgGatorPluginResultEvalEngineModel._get_Thrust_metadata)

    _get_Isp_metadata = { "name" : "Isp",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def Isp(self) -> float:
        """Current Isp (secs)."""
        return self._intf.get_property(IAgGatorPluginResultEvalEngineModel._metadata, IAgGatorPluginResultEvalEngineModel._get_Isp_metadata)

    _get_MassFlowRate_metadata = { "name" : "MassFlowRate",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def MassFlowRate(self) -> float:
        """Current mass flow rate (kg/sec)."""
        return self._intf.get_property(IAgGatorPluginResultEvalEngineModel._metadata, IAgGatorPluginResultEvalEngineModel._get_MassFlowRate_metadata)

    _get_TimeSinceIgnition_metadata = { "name" : "TimeSinceIgnition",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def TimeSinceIgnition(self) -> float:
        """Time since ignition (secs)."""
        return self._intf.get_property(IAgGatorPluginResultEvalEngineModel._metadata, IAgGatorPluginResultEvalEngineModel._get_TimeSinceIgnition_metadata)

    _SetThrustAndIsp_metadata = { "name" : "SetThrustAndIsp",
            "arg_types" : (agcom.DOUBLE, agcom.DOUBLE, POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg, agmarshall.VARIANT_BOOL_arg,) }
    def SetThrustAndIsp(self, thrust:float, isp:float) -> bool:
        """Sets the current thrust (N) and isp (secs). Computes the mass flow rate using the rocket equation. Returns false on an error."""
        return self._intf.invoke(IAgGatorPluginResultEvalEngineModel._metadata, IAgGatorPluginResultEvalEngineModel._SetThrustAndIsp_metadata, thrust, isp, out_arg())

    _SetThrustAndMassFlowRate_metadata = { "name" : "SetThrustAndMassFlowRate",
            "arg_types" : (agcom.DOUBLE, agcom.DOUBLE, POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg, agmarshall.VARIANT_BOOL_arg,) }
    def SetThrustAndMassFlowRate(self, thrust:float, massFlowRate:float) -> bool:
        """Sets the current thrust(N) and mass flow rate (kg/sec). Computes the isp using the rocket equation. Returns false on an error."""
        return self._intf.invoke(IAgGatorPluginResultEvalEngineModel._metadata, IAgGatorPluginResultEvalEngineModel._SetThrustAndMassFlowRate_metadata, thrust, massFlowRate, out_arg())

    _SetIspAndMassFlowRate_metadata = { "name" : "SetIspAndMassFlowRate",
            "arg_types" : (agcom.DOUBLE, agcom.DOUBLE, POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg, agmarshall.VARIANT_BOOL_arg,) }
    def SetIspAndMassFlowRate(self, isp:float, massFlowRate:float) -> bool:
        """Sets the current isp and mass flow rate. Computes the thrust using the rocket equation. Returns false on an error."""
        return self._intf.invoke(IAgGatorPluginResultEvalEngineModel._metadata, IAgGatorPluginResultEvalEngineModel._SetIspAndMassFlowRate_metadata, isp, massFlowRate, out_arg())

    _StopPropagation_metadata = { "name" : "StopPropagation",
            "arg_types" : (),
            "marshallers" : () }
    def StopPropagation(self) -> None:
        """Stops propagation.  For fatal errors."""
        return self._intf.invoke(IAgGatorPluginResultEvalEngineModel._metadata, IAgGatorPluginResultEvalEngineModel._StopPropagation_metadata, )

    _DateElements_Array_metadata = { "name" : "DateElements_Array",
            "arg_types" : (agcom.LONG, POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEUtTimeScale), agmarshall.LPSAFEARRAY_arg,) }
    def DateElements_Array(self, scale:"AgEUtTimeScale") -> list:
        """Current epoch in requested time scale expressed in date format returned as the array: Year [yyyy], DayOfYear [1-366], Month [1-12], DayOfMonth [1-31], Hour [0-23], Minute [0-59], Seconds [0-60]. Useful for scripting clients."""
        return self._intf.invoke(IAgGatorPluginResultEvalEngineModel._metadata, IAgGatorPluginResultEvalEngineModel._DateElements_Array_metadata, scale, out_arg())

    _DateString_metadata = { "name" : "DateString",
            "arg_types" : (agcom.BSTR, POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.BSTR_arg,) }
    def DateString(self, dateAbbrv:str) -> str:
        """Current epoch expressed using the date format abbreviation specified."""
        return self._intf.invoke(IAgGatorPluginResultEvalEngineModel._metadata, IAgGatorPluginResultEvalEngineModel._DateString_metadata, dateAbbrv, out_arg())


agcls.AgClassCatalog.add_catalog_entry("{D120DA1E-B666-4a30-8D32-E59133C72B87}", IAgGatorPluginResultEvalEngineModel)
agcls.AgTypeNameMap["IAgGatorPluginResultEvalEngineModel"] = IAgGatorPluginResultEvalEngineModel

class IAgGatorPluginResultAttCtrl(object):
    """Astrogator plugin interface used to get/set attitude controller settings. Supports IAgGatorState and IAgEpoch."""
    _num_methods = 33
    _vtable_offset = IDispatch._vtable_offset + IDispatch._num_methods
    _metadata = {
        "uuid" : "{96E6BDF6-C1C6-4a50-9A93-6782BFF9FE5F}",
        "vtable_reference" : IDispatch._vtable_offset + IDispatch._num_methods - 1,
        "method_offsets" : { "Trace" : 1,
                             "get_CbName" : 2,
                             "get_Mu" : 3,
                             "get_Cd" : 4,
                             "get_Cr" : 5,
                             "get_DragArea" : 6,
                             "get_SRPArea" : 7,
                             "get_Mass" : 8,
                             "get_DryMass" : 9,
                             "get_FuelMass" : 10,
                             "get_Altitude" : 11,
                             "DayCount" : 12,
                             "DayCount_Array" : 13,
                             "PosVel" : 14,
                             "PosVel_Array" : 15,
                             "LatLonAlt" : 16,
                             "LatLonAlt_Array" : 17,
                             "SunPosition" : 18,
                             "SunPosition_Array" : 19,
                             "TransformVector" : 20,
                             "TransformVector_Array" : 21,
                             "get_RefAxes" : 22,
                             "SetRefAxes" : 23,
                             "SetQuaternion" : 24,
                             "EulerRotate" : 25,
                             "GetQuaternion" : 26,
                             "GetQuaternion_Array" : 27,
                             "GetEulerRotation" : 28,
                             "GetEulerRotation_Array" : 29,
                             "StopPropagation" : 30,
                             "DateElements" : 31,
                             "DateElements_Array" : 32,
                             "DateString" : 33, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgGatorPluginResultAttCtrl._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgGatorPluginResultAttCtrl from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgGatorPluginResultAttCtrl.__dict__ and type(IAgGatorPluginResultAttCtrl.__dict__[attrname]) == property:
            return IAgGatorPluginResultAttCtrl.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgGatorPluginResultAttCtrl.")
    
    _Trace_metadata = { "name" : "Trace",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.LONG_arg,) }
    def Trace(self, numCalls:int) -> None:
        """Set this interface to trace the next numCalls by outputting a message to the message viewer."""
        return self._intf.invoke(IAgGatorPluginResultAttCtrl._metadata, IAgGatorPluginResultAttCtrl._Trace_metadata, numCalls)

    _get_CbName_metadata = { "name" : "CbName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def CbName(self) -> str:
        """Name of the central body used as reference frame origin."""
        return self._intf.get_property(IAgGatorPluginResultAttCtrl._metadata, IAgGatorPluginResultAttCtrl._get_CbName_metadata)

    _get_Mu_metadata = { "name" : "Mu",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def Mu(self) -> float:
        """Gravitational constant of the state central body"""
        return self._intf.get_property(IAgGatorPluginResultAttCtrl._metadata, IAgGatorPluginResultAttCtrl._get_Mu_metadata)

    _get_Cd_metadata = { "name" : "Cd",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def Cd(self) -> float:
        """Drag Coefficient."""
        return self._intf.get_property(IAgGatorPluginResultAttCtrl._metadata, IAgGatorPluginResultAttCtrl._get_Cd_metadata)

    _get_Cr_metadata = { "name" : "Cr",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def Cr(self) -> float:
        """SRP Coefficient."""
        return self._intf.get_property(IAgGatorPluginResultAttCtrl._metadata, IAgGatorPluginResultAttCtrl._get_Cr_metadata)

    _get_DragArea_metadata = { "name" : "DragArea",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def DragArea(self) -> float:
        """Drag Area."""
        return self._intf.get_property(IAgGatorPluginResultAttCtrl._metadata, IAgGatorPluginResultAttCtrl._get_DragArea_metadata)

    _get_SRPArea_metadata = { "name" : "SRPArea",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def SRPArea(self) -> float:
        """SRP Area."""
        return self._intf.get_property(IAgGatorPluginResultAttCtrl._metadata, IAgGatorPluginResultAttCtrl._get_SRPArea_metadata)

    _get_Mass_metadata = { "name" : "Mass",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def Mass(self) -> float:
        """Total Mass."""
        return self._intf.get_property(IAgGatorPluginResultAttCtrl._metadata, IAgGatorPluginResultAttCtrl._get_Mass_metadata)

    _get_DryMass_metadata = { "name" : "DryMass",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def DryMass(self) -> float:
        """Dry Mass."""
        return self._intf.get_property(IAgGatorPluginResultAttCtrl._metadata, IAgGatorPluginResultAttCtrl._get_DryMass_metadata)

    _get_FuelMass_metadata = { "name" : "FuelMass",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def FuelMass(self) -> float:
        """Fuel Mass."""
        return self._intf.get_property(IAgGatorPluginResultAttCtrl._metadata, IAgGatorPluginResultAttCtrl._get_FuelMass_metadata)

    _get_Altitude_metadata = { "name" : "Altitude",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def Altitude(self) -> float:
        """Current altitude."""
        return self._intf.get_property(IAgGatorPluginResultAttCtrl._metadata, IAgGatorPluginResultAttCtrl._get_Altitude_metadata)

    _DayCount_Array_metadata = { "name" : "DayCount_Array",
            "arg_types" : (agcom.LONG, POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEUtTimeScale), agmarshall.LPSAFEARRAY_arg,) }
    def DayCount_Array(self, scale:"AgEUtTimeScale") -> list:
        """Current epoch in requested time scale expressed in day count format returned as an array representing wholeDays, secsIntoDay. Useful for scripting clients."""
        return self._intf.invoke(IAgGatorPluginResultAttCtrl._metadata, IAgGatorPluginResultAttCtrl._DayCount_Array_metadata, scale, out_arg())

    _PosVel_Array_metadata = { "name" : "PosVel_Array",
            "arg_types" : (agcom.LONG, POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEUtFrame), agmarshall.LPSAFEARRAY_arg,) }
    def PosVel_Array(self, frame:"AgEUtFrame") -> list:
        """Current position and velocity in the requested frame (in internal units) returned as an array representing x, y, z, vx, vy, vz. Useful for scripting clients."""
        return self._intf.invoke(IAgGatorPluginResultAttCtrl._metadata, IAgGatorPluginResultAttCtrl._PosVel_Array_metadata, frame, out_arg())

    _LatLonAlt_Array_metadata = { "name" : "LatLonAlt_Array",
            "arg_types" : (POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg,) }
    def LatLonAlt_Array(self) -> list:
        """Current detic latitude, detic longitude, and altitude(in internal units) returned as an array representing lat, lon, alt. Useful for scripting clients."""
        return self._intf.invoke(IAgGatorPluginResultAttCtrl._metadata, IAgGatorPluginResultAttCtrl._LatLonAlt_Array_metadata, out_arg())

    _SunPosition_Array_metadata = { "name" : "SunPosition_Array",
            "arg_types" : (agcom.LONG, agcom.LONG, POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEUtSunPosType), agmarshall.AgEnum_arg(AgEUtFrame), agmarshall.LPSAFEARRAY_arg,) }
    def SunPosition_Array(self, sunPosType:"AgEUtSunPosType", frame:"AgEUtFrame") -> list:
        """Position of the sun wrt the current satellite position, in the requested frame, computed in the requested manner, (in internal units) returned as an array representing x, y, z. Useful for scripting clients."""
        return self._intf.invoke(IAgGatorPluginResultAttCtrl._metadata, IAgGatorPluginResultAttCtrl._SunPosition_Array_metadata, sunPosType, frame, out_arg())

    _TransformVector_Array_metadata = { "name" : "TransformVector_Array",
            "arg_types" : (agcom.LONG, agcom.DOUBLE, agcom.DOUBLE, agcom.DOUBLE, agcom.LONG, POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEUtFrame), agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg, agmarshall.AgEnum_arg(AgEUtFrame), agmarshall.LPSAFEARRAY_arg,) }
    def TransformVector_Array(self, frameFrom:"AgEUtFrame", xFrom:float, yFrom:float, zFrom:float, frameTo:"AgEUtFrame") -> list:
        """Transforms a vector from the input frame to the output frame (in internal units) returned as an array representing x, y, z. Useful for scripting clients."""
        return self._intf.invoke(IAgGatorPluginResultAttCtrl._metadata, IAgGatorPluginResultAttCtrl._TransformVector_Array_metadata, frameFrom, xFrom, yFrom, zFrom, frameTo, out_arg())

    _get_RefAxes_metadata = { "name" : "RefAxes",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def RefAxes(self) -> str:
        """Name of the reference axes."""
        return self._intf.get_property(IAgGatorPluginResultAttCtrl._metadata, IAgGatorPluginResultAttCtrl._get_RefAxes_metadata)

    _SetRefAxes_metadata = { "name" : "SetRefAxes",
            "arg_types" : (agcom.BSTR, POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.VARIANT_BOOL_arg,) }
    def SetRefAxes(self, name:str) -> bool:
        """Sets the reference axes."""
        return self._intf.invoke(IAgGatorPluginResultAttCtrl._metadata, IAgGatorPluginResultAttCtrl._SetRefAxes_metadata, name, out_arg())

    _SetQuaternion_metadata = { "name" : "SetQuaternion",
            "arg_types" : (agcom.DOUBLE, agcom.DOUBLE, agcom.DOUBLE, agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg,) }
    def SetQuaternion(self, q1:float, q2:float, q3:float, q4:float) -> None:
        """Sets the current orientation using a quaternion."""
        return self._intf.invoke(IAgGatorPluginResultAttCtrl._metadata, IAgGatorPluginResultAttCtrl._SetQuaternion_metadata, q1, q2, q3, q4)

    _EulerRotate_metadata = { "name" : "EulerRotate",
            "arg_types" : (agcom.LONG, agcom.DOUBLE, agcom.DOUBLE, agcom.DOUBLE,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEEulerSequence), agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg,) }
    def EulerRotate(self, sequence:"AgEEulerSequence", first:float, second:float, third:float) -> None:
        """Sets the current orientation using a sequence of euler rotations."""
        return self._intf.invoke(IAgGatorPluginResultAttCtrl._metadata, IAgGatorPluginResultAttCtrl._EulerRotate_metadata, sequence, first, second, third)

    _GetQuaternion_metadata = { "name" : "GetQuaternion",
            "arg_types" : (POINTER(agcom.DOUBLE), POINTER(agcom.DOUBLE), POINTER(agcom.DOUBLE), POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg,) }
    def GetQuaternion(self) -> typing.Tuple[float, float, float, float]:
        """Gets the current orientation as a quaternion."""
        return self._intf.invoke(IAgGatorPluginResultAttCtrl._metadata, IAgGatorPluginResultAttCtrl._GetQuaternion_metadata, out_arg(), out_arg(), out_arg(), out_arg())

    _GetQuaternion_Array_metadata = { "name" : "GetQuaternion_Array",
            "arg_types" : (POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg,) }
    def GetQuaternion_Array(self) -> list:
        """Gets the current orientation as a quaternion returned as an array representing Q1, Q2, Q3, and Q4. Useful for scripting clients."""
        return self._intf.invoke(IAgGatorPluginResultAttCtrl._metadata, IAgGatorPluginResultAttCtrl._GetQuaternion_Array_metadata, out_arg())

    _GetEulerRotation_metadata = { "name" : "GetEulerRotation",
            "arg_types" : (agcom.LONG, POINTER(agcom.DOUBLE), POINTER(agcom.DOUBLE), POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEEulerSequence), agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg,) }
    def GetEulerRotation(self, sequence:"AgEEulerSequence") -> typing.Tuple[float, float, float]:
        """Gets the current orientation as euler angles."""
        return self._intf.invoke(IAgGatorPluginResultAttCtrl._metadata, IAgGatorPluginResultAttCtrl._GetEulerRotation_metadata, sequence, out_arg(), out_arg(), out_arg())

    _GetEulerRotation_Array_metadata = { "name" : "GetEulerRotation_Array",
            "arg_types" : (agcom.LONG, POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEEulerSequence), agmarshall.LPSAFEARRAY_arg,) }
    def GetEulerRotation_Array(self, sequence:"AgEEulerSequence") -> list:
        """Gets the current orientation as euler rotations returned as an array. Useful for scripting clients."""
        return self._intf.invoke(IAgGatorPluginResultAttCtrl._metadata, IAgGatorPluginResultAttCtrl._GetEulerRotation_Array_metadata, sequence, out_arg())

    _StopPropagation_metadata = { "name" : "StopPropagation",
            "arg_types" : (),
            "marshallers" : () }
    def StopPropagation(self) -> None:
        """Stops propagation.  For fatal errors."""
        return self._intf.invoke(IAgGatorPluginResultAttCtrl._metadata, IAgGatorPluginResultAttCtrl._StopPropagation_metadata, )

    _DateElements_Array_metadata = { "name" : "DateElements_Array",
            "arg_types" : (agcom.LONG, POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEUtTimeScale), agmarshall.LPSAFEARRAY_arg,) }
    def DateElements_Array(self, scale:"AgEUtTimeScale") -> list:
        """Current epoch in requested time scale expressed in date format returned as the array: Year [yyyy], DayOfYear [1-366], Month [1-12], DayOfMonth [1-31], Hour [0-23], Minute [0-59], Seconds [0-60]. Useful for scripting clients."""
        return self._intf.invoke(IAgGatorPluginResultAttCtrl._metadata, IAgGatorPluginResultAttCtrl._DateElements_Array_metadata, scale, out_arg())

    _DateString_metadata = { "name" : "DateString",
            "arg_types" : (agcom.BSTR, POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.BSTR_arg,) }
    def DateString(self, dateAbbrv:str) -> str:
        """Current epoch expressed using the date format abbreviation specified."""
        return self._intf.invoke(IAgGatorPluginResultAttCtrl._metadata, IAgGatorPluginResultAttCtrl._DateString_metadata, dateAbbrv, out_arg())


agcls.AgClassCatalog.add_catalog_entry("{96E6BDF6-C1C6-4a50-9A93-6782BFF9FE5F}", IAgGatorPluginResultAttCtrl)
agcls.AgTypeNameMap["IAgGatorPluginResultAttCtrl"] = IAgGatorPluginResultAttCtrl


class IAgGatorPluginEngineModel(object):
    """
    Astrogator plugin engine model interface whose methods are called at certain events in the propagation process. A method returning false indicates an error.
    This interface may be inherited from to assist in development of the plugin.  All methods should be overridden.
    """
    def Name(self) -> str:
        """Triggered to set the name of the plugin used in messages."""
        raise STKPluginMethodNotImplementedError("Name was not implemented.")

    def Init(self, site:"IAgUtPluginSite") -> bool:
        """Triggered when the plugin is initialized to allow for any additional needed initialization. Must return true to turn on use of plugin."""
        raise STKPluginMethodNotImplementedError("Init was not implemented.")

    def PrePropagate(self, resultState:"IAgGatorPluginResultState") -> bool:
        """Triggered just before propagation starts. Use the input interface to access engine model settings."""
        raise STKPluginMethodNotImplementedError("PrePropagate was not implemented.")

    def PreNextStep(self, resultState:"IAgGatorPluginResultState") -> bool:
        """Triggered just before the next propagation step is attempted. Use the input interface to access engine model settings. Returning false will turn this callback off."""
        raise STKPluginMethodNotImplementedError("PreNextStep was not implemented.")

    def Evaluate(self, resultEvalEngineModel:"IAgGatorPluginResultEvalEngineModel") -> bool:
        """Triggered on every force model evaluation during the propagation of a step. Use the input interface to access engine model settings. Returning false will turn this callback off."""
        raise STKPluginMethodNotImplementedError("Evaluate was not implemented.")

    def Free(self) -> None:
        """Triggered just before the plugin is freed from use to allow for any additional cleanup."""
        raise STKPluginMethodNotImplementedError("Free was not implemented.")


class IAgGatorPluginAttCtrl(object):
    """
    Astrogator plugin attitude controller interface whose methods are called at certain events in the propagation process. A method returning false indicates an error.
    This interface may be inherited from to assist in development of the plugin.  All methods should be overridden.
    """
    def Name(self) -> str:
        """Triggered to set the name of the plugin used in messages."""
        raise STKPluginMethodNotImplementedError("Name was not implemented.")

    def Init(self, site:"IAgUtPluginSite") -> bool:
        """Triggered when the plugin is initialized to allow for any additional needed initialization. Must return true to turn on use of plugin."""
        raise STKPluginMethodNotImplementedError("Init was not implemented.")

    def PrePropagate(self, resultAttCtrl:"IAgGatorPluginResultAttCtrl") -> bool:
        """Triggered just before propagation starts. Use the input interface to access attitude controller settings."""
        raise STKPluginMethodNotImplementedError("PrePropagate was not implemented.")

    def PreNextStep(self, resultAttCtrl:"IAgGatorPluginResultAttCtrl") -> bool:
        """Triggered just before the next propagation step is attempted. Use the input interface to access attitude controller settings. Returning false will turn this callback off."""
        raise STKPluginMethodNotImplementedError("PreNextStep was not implemented.")

    def Evaluate(self, resultAttCtrl:"IAgGatorPluginResultAttCtrl") -> bool:
        """Triggered on every force model evaluation during the propagation of a step. Use the input interface to access attitude controller settings. Returning false will turn this callback off."""
        raise STKPluginMethodNotImplementedError("Evaluate was not implemented.")

    def Free(self) -> None:
        """Triggered just before the plugin is freed from use to allow for any additional cleanup."""
        raise STKPluginMethodNotImplementedError("Free was not implemented.")




class AgGatorPluginResultState(IAgGatorPluginResultState):
    """Astrogator plugin class used to get state values"""
    def __init__(self, sourceObject=None):
        IAgGatorPluginResultState.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgGatorPluginResultState._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgGatorPluginResultState._get_property(self, attrname) is not None: found_prop = IAgGatorPluginResultState._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgGatorPluginResultState.")

agcls.AgClassCatalog.add_catalog_entry("{55CC183B-F1DC-464E-B652-1366F5959234}", AgGatorPluginResultState)


class AgGatorPluginResultEvalEngineModel(IAgGatorPluginResultEvalEngineModel):
    """Astrogator plugin class used to get/set engine model settings during the propagation of a step"""
    def __init__(self, sourceObject=None):
        IAgGatorPluginResultEvalEngineModel.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgGatorPluginResultEvalEngineModel._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgGatorPluginResultEvalEngineModel._get_property(self, attrname) is not None: found_prop = IAgGatorPluginResultEvalEngineModel._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgGatorPluginResultEvalEngineModel.")

agcls.AgClassCatalog.add_catalog_entry("{B98E0848-7BD4-4C6B-9260-19793ECB6EEA}", AgGatorPluginResultEvalEngineModel)


class AgGatorPluginResultAttCtrl(IAgGatorPluginResultAttCtrl):
    """Astrogator plugin class used to get/set attitude controller settings during the propagation of a step"""
    def __init__(self, sourceObject=None):
        IAgGatorPluginResultAttCtrl.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgGatorPluginResultAttCtrl._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgGatorPluginResultAttCtrl._get_property(self, attrname) is not None: found_prop = IAgGatorPluginResultAttCtrl._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgGatorPluginResultAttCtrl.")

agcls.AgClassCatalog.add_catalog_entry("{418797AC-061C-4574-8700-7FA73E02DD5F}", AgGatorPluginResultAttCtrl)



################################################################################
#          Copyright 2020-2023, Ansys Government Initiatives
################################################################################
