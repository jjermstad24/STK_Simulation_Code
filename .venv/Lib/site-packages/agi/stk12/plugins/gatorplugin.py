################################################################################
#          Copyright 2020-2023, Ansys Government Initiatives
################################################################################ 

__all__ = ["AgGatorConfiguredCalcObject", "AgGatorPluginProvider", "IAgGatorConfiguredCalcObject", "IAgGatorPluginProvider"]

import typing

from ctypes   import byref, POINTER
from datetime import datetime
from enum     import IntEnum, IntFlag

from ..internal  import comutil          as agcom
from ..internal  import coclassutil      as agcls
from ..internal  import marshall         as agmarshall
from ..internal  import dataanalysisutil as agdata
from ..utilities import colors           as agcolor
from ..internal.comutil     import IUnknown, IDispatch, IPictureDisp
from ..internal.apiutil     import interface_proxy, enumerator_proxy, out_arg
from ..internal.eventutil   import *
from ..utilities.exceptions import *


def _raise_uninitialized_error(*args):
    raise STKRuntimeError("Valid STK object model classes are returned from STK methods and should not be created independently.")

class IAgGatorConfiguredCalcObject(object):
    """Astrogator Calc Object interface which computes its value. Inputs to the Calc Object are provided by the DispInterface which must support IAgGatorState."""
    _num_methods = 1
    _vtable_offset = IDispatch._vtable_offset + IDispatch._num_methods
    _metadata = {
        "uuid" : "{6AE7EF38-51E3-4a5a-88DC-7AE3A200AD31}",
        "vtable_reference" : IDispatch._vtable_offset + IDispatch._num_methods - 1,
        "method_offsets" : { "Evaluate" : 1, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgGatorConfiguredCalcObject._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgGatorConfiguredCalcObject from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgGatorConfiguredCalcObject.__dict__ and type(IAgGatorConfiguredCalcObject.__dict__[attrname]) == property:
            return IAgGatorConfiguredCalcObject.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgGatorConfiguredCalcObject.")
    
    _Evaluate_metadata = { "name" : "Evaluate",
            "arg_types" : (agcom.PVOID, POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.AgInterface_in_arg("IDispatch"), agmarshall.DOUBLE_arg,) }
    def Evaluate(self, dispInterface:"IDispatch") -> float:
        """Computes the Value (in internal units) at the time indicated by the interface. The interface must support IAgGatorState."""
        return self._intf.invoke(IAgGatorConfiguredCalcObject._metadata, IAgGatorConfiguredCalcObject._Evaluate_metadata, dispInterface, out_arg())


agcls.AgClassCatalog.add_catalog_entry("{6AE7EF38-51E3-4a5a-88DC-7AE3A200AD31}", IAgGatorConfiguredCalcObject)
agcls.AgTypeNameMap["IAgGatorConfiguredCalcObject"] = IAgGatorConfiguredCalcObject

class IAgGatorPluginProvider(object):
    """Astrogator plugin provider interface."""
    _num_methods = 1
    _vtable_offset = IDispatch._vtable_offset + IDispatch._num_methods
    _metadata = {
        "uuid" : "{4E0C33A8-25A9-4ae2-BD33-FC086EF3979D}",
        "vtable_reference" : IDispatch._vtable_offset + IDispatch._num_methods - 1,
        "method_offsets" : { "ConfigureCalcObject" : 1, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgGatorPluginProvider._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgGatorPluginProvider from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgGatorPluginProvider.__dict__ and type(IAgGatorPluginProvider.__dict__[attrname]) == property:
            return IAgGatorPluginProvider.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgGatorPluginProvider.")
    
    _ConfigureCalcObject_metadata = { "name" : "ConfigureCalcObject",
            "arg_types" : (agcom.BSTR, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.AgInterface_out_arg,) }
    def ConfigureCalcObject(self, name:str) -> "IAgGatorConfiguredCalcObject":
        """Creates an IAgGatorCalcObject object from Astrogator component browser."""
        return self._intf.invoke(IAgGatorPluginProvider._metadata, IAgGatorPluginProvider._ConfigureCalcObject_metadata, name, out_arg())


agcls.AgClassCatalog.add_catalog_entry("{4E0C33A8-25A9-4ae2-BD33-FC086EF3979D}", IAgGatorPluginProvider)
agcls.AgTypeNameMap["IAgGatorPluginProvider"] = IAgGatorPluginProvider



class AgGatorConfiguredCalcObject(IAgGatorConfiguredCalcObject):
    """Astrogator Calc object from the component browser"""
    def __init__(self, sourceObject=None):
        IAgGatorConfiguredCalcObject.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgGatorConfiguredCalcObject._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgGatorConfiguredCalcObject._get_property(self, attrname) is not None: found_prop = IAgGatorConfiguredCalcObject._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgGatorConfiguredCalcObject.")

agcls.AgClassCatalog.add_catalog_entry("{7498D5D7-BA11-439E-8D61-18143D22D858}", AgGatorConfiguredCalcObject)


class AgGatorPluginProvider(IAgGatorPluginProvider):
    """Astrogator plugin provider."""
    def __init__(self, sourceObject=None):
        IAgGatorPluginProvider.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgGatorPluginProvider._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgGatorPluginProvider._get_property(self, attrname) is not None: found_prop = IAgGatorPluginProvider._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgGatorPluginProvider.")

agcls.AgClassCatalog.add_catalog_entry("{43B6DEE2-9DE1-41BE-AC26-4FEEA9BA932A}", AgGatorPluginProvider)



################################################################################
#          Copyright 2020-2023, Ansys Government Initiatives
################################################################################
