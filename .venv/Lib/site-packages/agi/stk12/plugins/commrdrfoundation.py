################################################################################
#          Copyright 2020-2023, Ansys Government Initiatives
################################################################################ 

__all__ = ["AgECRPolarizationRefAxis", "AgECRPolarizationType", "IAgCRPolarization", "IAgCRPolarizationElliptical", "IAgCRPolarizationLinear", 
"IAgCRSignal", "IAgCRSignalCollection"]

import typing

from ctypes   import byref, POINTER
from datetime import datetime
from enum     import IntEnum, IntFlag

from ..internal  import comutil          as agcom
from ..internal  import coclassutil      as agcls
from ..internal  import marshall         as agmarshall
from ..internal  import dataanalysisutil as agdata
from ..utilities import colors           as agcolor
from ..internal.comutil     import IUnknown, IDispatch, IPictureDisp
from ..internal.apiutil     import interface_proxy, enumerator_proxy, out_arg
from ..internal.eventutil   import *
from ..utilities.exceptions import *

from ..plugins.attrautomation import *
from ..plugins.utplugin import *
from ..plugins.crdnplugin import *


def _raise_uninitialized_error(*args):
    raise STKRuntimeError("Valid STK object model classes are returned from STK methods and should not be created independently.")

class AgECRPolarizationRefAxis(IntEnum):
    """Enumeration of polarization reference axes."""
    # X Axis
    eCRPolRefXAxis = 1
    # Y Axis
    eCRPolRefYAxis = 2
    # Z Axis
    eCRPolRefZAxis = 3

AgECRPolarizationRefAxis.eCRPolRefXAxis.__doc__ = "X Axis"
AgECRPolarizationRefAxis.eCRPolRefYAxis.__doc__ = "Y Axis"
AgECRPolarizationRefAxis.eCRPolRefZAxis.__doc__ = "Z Axis"

agcls.AgTypeNameMap["AgECRPolarizationRefAxis"] = AgECRPolarizationRefAxis

class AgECRPolarizationType(IntEnum):
    """Enumeration of polarization types."""
    # Linear
    eCRLinearPol = 1
    # Left-hand Circular
    eCRLHCPol = 2
    # Right-hand Circular
    eCRRHCPol = 3
    # Elliptical
    eCREllipticalPol = 4

AgECRPolarizationType.eCRLinearPol.__doc__ = "Linear"
AgECRPolarizationType.eCRLHCPol.__doc__ = "Left-hand Circular"
AgECRPolarizationType.eCRRHCPol.__doc__ = "Right-hand Circular"
AgECRPolarizationType.eCREllipticalPol.__doc__ = "Elliptical"

agcls.AgTypeNameMap["AgECRPolarizationType"] = AgECRPolarizationType


class IAgCRPolarization(object):
    """Polarization object interface used to represent a signal polarization."""
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{AE821EF4-7233-4E11-B05D-C0807BB36901}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_Type" : 1,
                             "get_TiltAngle" : 2,
                             "get_AxialRatio" : 3,
                             "get_ReferenceAxis" : 4, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgCRPolarization._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgCRPolarization from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgCRPolarization.__dict__ and type(IAgCRPolarization.__dict__[attrname]) == property:
            return IAgCRPolarization.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgCRPolarization.")
    
    _get_Type_metadata = { "name" : "Type",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgECRPolarizationType),) }
    @property
    def Type(self) -> "AgECRPolarizationType":
        """Gets the polarizatoin type."""
        return self._intf.get_property(IAgCRPolarization._metadata, IAgCRPolarization._get_Type_metadata)

    _get_TiltAngle_metadata = { "name" : "TiltAngle",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def TiltAngle(self) -> float:
        """Gets the tilt angle."""
        return self._intf.get_property(IAgCRPolarization._metadata, IAgCRPolarization._get_TiltAngle_metadata)

    _get_AxialRatio_metadata = { "name" : "AxialRatio",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def AxialRatio(self) -> float:
        """Gets the axial ratio."""
        return self._intf.get_property(IAgCRPolarization._metadata, IAgCRPolarization._get_AxialRatio_metadata)

    _get_ReferenceAxis_metadata = { "name" : "ReferenceAxis",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgECRPolarizationRefAxis),) }
    @property
    def ReferenceAxis(self) -> "AgECRPolarizationRefAxis":
        """Gets the reference axis"""
        return self._intf.get_property(IAgCRPolarization._metadata, IAgCRPolarization._get_ReferenceAxis_metadata)


agcls.AgClassCatalog.add_catalog_entry("{AE821EF4-7233-4E11-B05D-C0807BB36901}", IAgCRPolarization)
agcls.AgTypeNameMap["IAgCRPolarization"] = IAgCRPolarization

class IAgCRPolarizationLinear(object):
    """Linear polarization object interface used to represent linear signal polarization."""
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{E5E3284C-8C6C-478B-92DF-E374A192AAED}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "set_TiltAngle" : 1,
                             "set_ReferenceAxis" : 2, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgCRPolarizationLinear._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgCRPolarizationLinear from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgCRPolarizationLinear.__dict__ and type(IAgCRPolarizationLinear.__dict__[attrname]) == property:
            return IAgCRPolarizationLinear.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgCRPolarizationLinear.")
    
    _get_TiltAngle_metadata = { "name" : "TiltAngle",
            "arg_types" : (),
            "marshallers" : () }
    @property
    def TiltAngle(self) -> None:
        """TiltAngle is a write-only property."""
        raise RuntimeError("TiltAngle is a write-only property.")


    _set_TiltAngle_metadata = { "name" : "TiltAngle",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @TiltAngle.setter
    def TiltAngle(self, tiltAngle:float) -> None:
        """Sets the tilt angle."""
        return self._intf.set_property(IAgCRPolarizationLinear._metadata, IAgCRPolarizationLinear._set_TiltAngle_metadata, tiltAngle)

    _get_ReferenceAxis_metadata = { "name" : "ReferenceAxis",
            "arg_types" : (),
            "marshallers" : () }
    @property
    def ReferenceAxis(self) -> None:
        """ReferenceAxis is a write-only property."""
        raise RuntimeError("ReferenceAxis is a write-only property.")


    _set_ReferenceAxis_metadata = { "name" : "ReferenceAxis",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgECRPolarizationRefAxis),) }
    @ReferenceAxis.setter
    def ReferenceAxis(self, referenceAxis:"AgECRPolarizationRefAxis") -> None:
        """Sets the reference axis"""
        return self._intf.set_property(IAgCRPolarizationLinear._metadata, IAgCRPolarizationLinear._set_ReferenceAxis_metadata, referenceAxis)


agcls.AgClassCatalog.add_catalog_entry("{E5E3284C-8C6C-478B-92DF-E374A192AAED}", IAgCRPolarizationLinear)
agcls.AgTypeNameMap["IAgCRPolarizationLinear"] = IAgCRPolarizationLinear

class IAgCRPolarizationElliptical(object):
    """Elliptical polarization object interface used to represent elliptical signal polarization."""
    _num_methods = 3
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{698655C0-9BB6-4D8F-A785-9E0ED2880D17}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "set_TiltAngle" : 1,
                             "set_AxialRatio" : 2,
                             "set_ReferenceAxis" : 3, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgCRPolarizationElliptical._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgCRPolarizationElliptical from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgCRPolarizationElliptical.__dict__ and type(IAgCRPolarizationElliptical.__dict__[attrname]) == property:
            return IAgCRPolarizationElliptical.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgCRPolarizationElliptical.")
    
    _get_TiltAngle_metadata = { "name" : "TiltAngle",
            "arg_types" : (),
            "marshallers" : () }
    @property
    def TiltAngle(self) -> None:
        """TiltAngle is a write-only property."""
        raise RuntimeError("TiltAngle is a write-only property.")


    _set_TiltAngle_metadata = { "name" : "TiltAngle",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @TiltAngle.setter
    def TiltAngle(self, tiltAngle:float) -> None:
        """Sets the tilt angle."""
        return self._intf.set_property(IAgCRPolarizationElliptical._metadata, IAgCRPolarizationElliptical._set_TiltAngle_metadata, tiltAngle)

    _get_AxialRatio_metadata = { "name" : "AxialRatio",
            "arg_types" : (),
            "marshallers" : () }
    @property
    def AxialRatio(self) -> None:
        """AxialRatio is a write-only property."""
        raise RuntimeError("AxialRatio is a write-only property.")


    _set_AxialRatio_metadata = { "name" : "AxialRatio",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @AxialRatio.setter
    def AxialRatio(self, axialRatio:float) -> None:
        """Sets the axial ratio."""
        return self._intf.set_property(IAgCRPolarizationElliptical._metadata, IAgCRPolarizationElliptical._set_AxialRatio_metadata, axialRatio)

    _get_ReferenceAxis_metadata = { "name" : "ReferenceAxis",
            "arg_types" : (),
            "marshallers" : () }
    @property
    def ReferenceAxis(self) -> None:
        """ReferenceAxis is a write-only property."""
        raise RuntimeError("ReferenceAxis is a write-only property.")


    _set_ReferenceAxis_metadata = { "name" : "ReferenceAxis",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgECRPolarizationRefAxis),) }
    @ReferenceAxis.setter
    def ReferenceAxis(self, referenceAxis:"AgECRPolarizationRefAxis") -> None:
        """Sets the reference axis"""
        return self._intf.set_property(IAgCRPolarizationElliptical._metadata, IAgCRPolarizationElliptical._set_ReferenceAxis_metadata, referenceAxis)


agcls.AgClassCatalog.add_catalog_entry("{698655C0-9BB6-4D8F-A785-9E0ED2880D17}", IAgCRPolarizationElliptical)
agcls.AgTypeNameMap["IAgCRPolarizationElliptical"] = IAgCRPolarizationElliptical

class IAgCRSignal(object):
    """Signal object interface used to represent an electromagnetic signal."""
    _num_methods = 13
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{AD51AE42-C2D9-4F06-BD0D-D4D5B895F117}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_Time" : 1,
                             "get_Frequency" : 2,
                             "set_Frequency" : 3,
                             "get_UpperBandLimit" : 4,
                             "set_UpperBandLimit" : 5,
                             "get_LowerBandLimit" : 6,
                             "set_LowerBandLimit" : 7,
                             "get_Power" : 8,
                             "set_Power" : 9,
                             "get_Polarization" : 10,
                             "set_Polarization" : 11,
                             "ComputePolLoss" : 12,
                             "ComputePolRotationAngle" : 13, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgCRSignal._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgCRSignal from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgCRSignal.__dict__ and type(IAgCRSignal.__dict__[attrname]) == property:
            return IAgCRSignal.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgCRSignal.")
    
    _get_Time_metadata = { "name" : "Time",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def Time(self) -> float:
        """Gets the signal time in epoch seconds."""
        return self._intf.get_property(IAgCRSignal._metadata, IAgCRSignal._get_Time_metadata)

    _get_Frequency_metadata = { "name" : "Frequency",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def Frequency(self) -> float:
        """Gets or sets the signal frequency in Hz."""
        return self._intf.get_property(IAgCRSignal._metadata, IAgCRSignal._get_Frequency_metadata)

    _set_Frequency_metadata = { "name" : "Frequency",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @Frequency.setter
    def Frequency(self, frequency:float) -> None:
        """Gets or sets the signal frequency in Hz."""
        return self._intf.set_property(IAgCRSignal._metadata, IAgCRSignal._set_Frequency_metadata, frequency)

    _get_UpperBandLimit_metadata = { "name" : "UpperBandLimit",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def UpperBandLimit(self) -> float:
        """Gets or sets the signal upper bandwidth limit in Hz."""
        return self._intf.get_property(IAgCRSignal._metadata, IAgCRSignal._get_UpperBandLimit_metadata)

    _set_UpperBandLimit_metadata = { "name" : "UpperBandLimit",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @UpperBandLimit.setter
    def UpperBandLimit(self, upperLimit:float) -> None:
        """Gets or sets the signal upper bandwidth limit in Hz."""
        return self._intf.set_property(IAgCRSignal._metadata, IAgCRSignal._set_UpperBandLimit_metadata, upperLimit)

    _get_LowerBandLimit_metadata = { "name" : "LowerBandLimit",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def LowerBandLimit(self) -> float:
        """Gets or sets the signal lower bandwidth limit in Hz."""
        return self._intf.get_property(IAgCRSignal._metadata, IAgCRSignal._get_LowerBandLimit_metadata)

    _set_LowerBandLimit_metadata = { "name" : "LowerBandLimit",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @LowerBandLimit.setter
    def LowerBandLimit(self, lowerLimit:float) -> None:
        """Gets or sets the signal lower bandwidth limit in Hz."""
        return self._intf.set_property(IAgCRSignal._metadata, IAgCRSignal._set_LowerBandLimit_metadata, lowerLimit)

    _get_Power_metadata = { "name" : "Power",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def Power(self) -> float:
        """Gets or sets the signal power in Watts."""
        return self._intf.get_property(IAgCRSignal._metadata, IAgCRSignal._get_Power_metadata)

    _set_Power_metadata = { "name" : "Power",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @Power.setter
    def Power(self, power:float) -> None:
        """Gets or sets the signal power in Watts."""
        return self._intf.set_property(IAgCRSignal._metadata, IAgCRSignal._set_Power_metadata, power)

    _get_Polarization_metadata = { "name" : "Polarization",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def Polarization(self) -> "IAgCRPolarization":
        """Gets or sets the signal polarization"""
        return self._intf.get_property(IAgCRSignal._metadata, IAgCRSignal._get_Polarization_metadata)

    _set_Polarization_metadata = { "name" : "Polarization",
            "arg_types" : (agcom.PVOID,),
            "marshallers" : (agmarshall.AgInterface_in_arg("IAgCRPolarization"),) }
    @Polarization.setter
    def Polarization(self, polarization:"IAgCRPolarization") -> None:
        """Gets or sets the signal polarization"""
        return self._intf.set_property(IAgCRSignal._metadata, IAgCRSignal._set_Polarization_metadata, polarization)

    _ComputePolLoss_metadata = { "name" : "ComputePolLoss",
            "arg_types" : (agcom.PVOID, POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.AgInterface_in_arg("IAgCRPolarization"), agmarshall.DOUBLE_arg,) }
    def ComputePolLoss(self, rcvSidePolarization:"IAgCRPolarization") -> float:
        """Computes the rotation angle for the receive side polarization."""
        return self._intf.invoke(IAgCRSignal._metadata, IAgCRSignal._ComputePolLoss_metadata, rcvSidePolarization, out_arg())

    _ComputePolRotationAngle_metadata = { "name" : "ComputePolRotationAngle",
            "arg_types" : (agcom.PVOID, POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.AgInterface_in_arg("IAgCRPolarization"), agmarshall.DOUBLE_arg,) }
    def ComputePolRotationAngle(self, rcvSidePolarization:"IAgCRPolarization") -> float:
        """Computes the rotation angle for the receive side polarization."""
        return self._intf.invoke(IAgCRSignal._metadata, IAgCRSignal._ComputePolRotationAngle_metadata, rcvSidePolarization, out_arg())


agcls.AgClassCatalog.add_catalog_entry("{AD51AE42-C2D9-4F06-BD0D-D4D5B895F117}", IAgCRSignal)
agcls.AgTypeNameMap["IAgCRSignal"] = IAgCRSignal

class IAgCRSignalCollection(object):
    """Interface implemented by a collection of signal objects."""
    _num_methods = 3
    _vtable_offset = IDispatch._vtable_offset + IDispatch._num_methods
    _metadata = {
        "uuid" : "{3E1095D7-D4F2-496C-B27C-0E1F23FCCA54}",
        "vtable_reference" : IDispatch._vtable_offset + IDispatch._num_methods - 1,
        "method_offsets" : { "get_Count" : 1,
                             "Item" : 2,
                             "get__NewEnum" : 3, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgCRSignalCollection._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgCRSignalCollection from source object.")
        self.__dict__["_enumerator"] = None
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgCRSignalCollection.__dict__ and type(IAgCRSignalCollection.__dict__[attrname]) == property:
            return IAgCRSignalCollection.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgCRSignalCollection.")
    def __iter__(self):
        self.__dict__["_enumerator"] = self._NewEnum
        self._enumerator.reset()
        return self
    def __next__(self) -> "IAgCRSignal":
        if self._enumerator is None:
            raise StopIteration
        nextval = self._enumerator.next()
        if nextval is None:
            raise StopIteration
        return nextval
    
    _get_Count_metadata = { "name" : "Count",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.LONG_arg,) }
    @property
    def Count(self) -> int:
        """Returns the number of elements in the collection."""
        return self._intf.get_property(IAgCRSignalCollection._metadata, IAgCRSignalCollection._get_Count_metadata)

    _Item_metadata = { "name" : "Item",
            "arg_types" : (agcom.LONG, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.LONG_arg, agmarshall.AgInterface_out_arg,) }
    def Item(self, index:int) -> "IAgCRSignal":
        """Given an index, returns an element in the collection."""
        return self._intf.invoke(IAgCRSignalCollection._metadata, IAgCRSignalCollection._Item_metadata, index, out_arg())

    _get__NewEnum_metadata = { "name" : "_NewEnum",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.IEnumVARIANT_arg,) }
    @property
    def _NewEnum(self) -> enumerator_proxy:
        """Returns an enumerator that can iterate through the collection."""
        return self._intf.get_property(IAgCRSignalCollection._metadata, IAgCRSignalCollection._get__NewEnum_metadata)

    __getitem__ = Item



agcls.AgClassCatalog.add_catalog_entry("{3E1095D7-D4F2-496C-B27C-0E1F23FCCA54}", IAgCRSignalCollection)
agcls.AgTypeNameMap["IAgCRSignalCollection"] = IAgCRSignalCollection



################################################################################
#          Copyright 2020-2023, Ansys Government Initiatives
################################################################################
