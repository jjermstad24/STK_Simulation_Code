################################################################################
#          Copyright 2020-2023, Ansys Government Initiatives
################################################################################ 

__all__ = ["AgAttrBuilder", "AgEAttrAddFlags", "IAgAttrAutomationConnector", "IAgAttrBuilder", "IAgAttrConfig"]

import typing

from ctypes   import byref, POINTER
from datetime import datetime
from enum     import IntEnum, IntFlag

from ..internal  import comutil          as agcom
from ..internal  import coclassutil      as agcls
from ..internal  import marshall         as agmarshall
from ..internal  import dataanalysisutil as agdata
from ..utilities import colors           as agcolor
from ..internal.comutil     import IUnknown, IDispatch, IPictureDisp
from ..internal.apiutil     import interface_proxy, enumerator_proxy, out_arg
from ..internal.eventutil   import *
from ..utilities.exceptions import *


def _raise_uninitialized_error(*args):
    raise STKRuntimeError("Valid STK object model classes are returned from STK methods and should not be created independently.")

class AgEAttrAddFlags(IntFlag):
    """Enumeration of Attribute Flags"""
    # No special flag
    eAddFlagNone = 0x0000
    # When applied to a container, makes the container transparent (i.e. its attributes are directly visible without having to navigate into the container)
    eAddFlagTransparent = 0x0002
    # The attribute is not visible in the user interface property page.
    eAddFlagHidden = 0x0004
    # The attribute is ignored during save/load.
    eAddFlagTransient = 0x0008
    # The attribute is read-only and cannot be modified by the user.
    eAddFlagReadOnly = 0x0010
    # The attribute container has a fixed size. Additions/removals of sub-elements are prohibited.
    eAddFlagFixed = 0x0020

AgEAttrAddFlags.eAddFlagNone.__doc__ = "No special flag"
AgEAttrAddFlags.eAddFlagTransparent.__doc__ = "When applied to a container, makes the container transparent (i.e. its attributes are directly visible without having to navigate into the container)"
AgEAttrAddFlags.eAddFlagHidden.__doc__ = "The attribute is not visible in the user interface property page."
AgEAttrAddFlags.eAddFlagTransient.__doc__ = "The attribute is ignored during save/load."
AgEAttrAddFlags.eAddFlagReadOnly.__doc__ = "The attribute is read-only and cannot be modified by the user."
AgEAttrAddFlags.eAddFlagFixed.__doc__ = "The attribute container has a fixed size. Additions/removals of sub-elements are prohibited."

agcls.AgTypeNameMap["AgEAttrAddFlags"] = AgEAttrAddFlags


class IAgAttrBuilder(object):
    """Attribute Automation Builder Interface helps construct an Attribute Scope"""
    _num_methods = 29
    _vtable_offset = IDispatch._vtable_offset + IDispatch._num_methods
    _metadata = {
        "uuid" : "{BD47DED6-51B4-425f-AD80-6BB07C7E8B41}",
        "vtable_reference" : IDispatch._vtable_offset + IDispatch._num_methods - 1,
        "method_offsets" : { "NewScope" : 1,
                             "AddIntDispatchProperty" : 2,
                             "AddLongDispatchProperty" : 3,
                             "AddStringDispatchProperty" : 4,
                             "AddBoolDispatchProperty" : 5,
                             "AddFileDispatchProperty" : 6,
                             "AddDirectoryDispatchProperty" : 7,
                             "AddRelFileDispatchProperty" : 8,
                             "AddDoubleDispatchProperty" : 9,
                             "AddDateDispatchProperty" : 10,
                             "ToString" : 11,
                             "MergeFromString" : 12,
                             "AddDependencyDispatchProperty" : 13,
                             "AddFlagsDispatchProperty" : 14,
                             "AddChoicesDispatchProperty" : 15,
                             "AddListDispatchProperty" : 16,
                             "AddVARIANTDispatchProperty" : 17,
                             "AddMultiLineStringDispatchProperty" : 18,
                             "ToFormattedString" : 19,
                             "AddQuantityDispatchProperty2" : 20,
                             "AddQuantityMinMaxDispatchProperty2" : 21,
                             "AddScopeDispatchProperty" : 22,
                             "AddChoicesFuncDispatchProperty" : 23,
                             "AddDoubleMinDispatchProperty" : 24,
                             "AddDoubleMinMaxDispatchProperty" : 25,
                             "AddQuantityMinDispatchProperty2" : 26,
                             "AddIntMinDispatchProperty" : 27,
                             "AddIntMinMaxDispatchProperty" : 28,
                             "AddScopeDispatchProperty2" : 29, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAttrBuilder._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAttrBuilder from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAttrBuilder.__dict__ and type(IAgAttrBuilder.__dict__[attrname]) == property:
            return IAgAttrBuilder.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAttrBuilder.")
    
    _NewScope_metadata = { "name" : "NewScope",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    def NewScope(self) -> typing.Any:
        """Create a new Attribute Scope for use in Attribute Builder method calls"""
        return self._intf.invoke(IAgAttrBuilder._metadata, IAgAttrBuilder._NewScope_metadata, out_arg())

    _AddIntDispatchProperty_metadata = { "name" : "AddIntDispatchProperty",
            "arg_types" : (agcom.PVOID, agcom.BSTR, agcom.BSTR, agcom.BSTR, agcom.LONG,),
            "marshallers" : (agmarshall.AgInterface_in_arg("IDispatch"), agmarshall.BSTR_arg, agmarshall.BSTR_arg, agmarshall.BSTR_arg, agmarshall.LONG_arg,) }
    def AddIntDispatchProperty(self, dispScope:"IDispatch", name:str, description:str, propName:str, flags:int) -> None:
        """Add an Attribute of type int to the Attribute Scope. It is recommended that any name used for these configuration properties not include spaces because certain interfaces to the properties may not work correctly."""
        return self._intf.invoke(IAgAttrBuilder._metadata, IAgAttrBuilder._AddIntDispatchProperty_metadata, dispScope, name, description, propName, flags)

    _AddLongDispatchProperty_metadata = { "name" : "AddLongDispatchProperty",
            "arg_types" : (agcom.PVOID, agcom.BSTR, agcom.BSTR, agcom.BSTR, agcom.LONG,),
            "marshallers" : (agmarshall.AgInterface_in_arg("IDispatch"), agmarshall.BSTR_arg, agmarshall.BSTR_arg, agmarshall.BSTR_arg, agmarshall.LONG_arg,) }
    def AddLongDispatchProperty(self, dispScope:"IDispatch", name:str, description:str, propName:str, flags:int) -> None:
        """Add an Attribute of type long to the Attribute Scope. It is recommended that any name used for these configuration properties not include spaces because certain interfaces to the properties may not work correctly."""
        return self._intf.invoke(IAgAttrBuilder._metadata, IAgAttrBuilder._AddLongDispatchProperty_metadata, dispScope, name, description, propName, flags)

    _AddStringDispatchProperty_metadata = { "name" : "AddStringDispatchProperty",
            "arg_types" : (agcom.PVOID, agcom.BSTR, agcom.BSTR, agcom.BSTR, agcom.LONG,),
            "marshallers" : (agmarshall.AgInterface_in_arg("IDispatch"), agmarshall.BSTR_arg, agmarshall.BSTR_arg, agmarshall.BSTR_arg, agmarshall.LONG_arg,) }
    def AddStringDispatchProperty(self, dispScope:"IDispatch", name:str, description:str, propName:str, flags:int) -> None:
        """Add an Attribute of type string to the Attribute Scope. Only allows single line strings. For multi-line strings use AddMultiLineStringDispatchProperty. It is recommended that any name used for these configuration properties not include spaces because certain interfaces to the properties may not work correctly."""
        return self._intf.invoke(IAgAttrBuilder._metadata, IAgAttrBuilder._AddStringDispatchProperty_metadata, dispScope, name, description, propName, flags)

    _AddBoolDispatchProperty_metadata = { "name" : "AddBoolDispatchProperty",
            "arg_types" : (agcom.PVOID, agcom.BSTR, agcom.BSTR, agcom.BSTR, agcom.LONG,),
            "marshallers" : (agmarshall.AgInterface_in_arg("IDispatch"), agmarshall.BSTR_arg, agmarshall.BSTR_arg, agmarshall.BSTR_arg, agmarshall.LONG_arg,) }
    def AddBoolDispatchProperty(self, dispScope:"IDispatch", name:str, description:str, propName:str, flags:int) -> None:
        """Add an Attribute of type bool to the Attribute Scope. It is recommended that any name used for these configuration properties not include spaces because certain interfaces to the properties may not work correctly."""
        return self._intf.invoke(IAgAttrBuilder._metadata, IAgAttrBuilder._AddBoolDispatchProperty_metadata, dispScope, name, description, propName, flags)

    _AddFileDispatchProperty_metadata = { "name" : "AddFileDispatchProperty",
            "arg_types" : (agcom.PVOID, agcom.BSTR, agcom.BSTR, agcom.BSTR, agcom.BSTR, agcom.BSTR, agcom.LONG,),
            "marshallers" : (agmarshall.AgInterface_in_arg("IDispatch"), agmarshall.BSTR_arg, agmarshall.BSTR_arg, agmarshall.BSTR_arg, agmarshall.BSTR_arg, agmarshall.BSTR_arg, agmarshall.LONG_arg,) }
    def AddFileDispatchProperty(self, dispScope:"IDispatch", name:str, description:str, propName:str, fileType:str, fileFilter:str, flags:int) -> None:
        """Add an Attribute of type file (string) to the Attribute Scope. It is recommended that any name used for these configuration properties not include spaces because certain interfaces to the properties may not work correctly."""
        return self._intf.invoke(IAgAttrBuilder._metadata, IAgAttrBuilder._AddFileDispatchProperty_metadata, dispScope, name, description, propName, fileType, fileFilter, flags)

    _AddDirectoryDispatchProperty_metadata = { "name" : "AddDirectoryDispatchProperty",
            "arg_types" : (agcom.PVOID, agcom.BSTR, agcom.BSTR, agcom.BSTR, agcom.LONG,),
            "marshallers" : (agmarshall.AgInterface_in_arg("IDispatch"), agmarshall.BSTR_arg, agmarshall.BSTR_arg, agmarshall.BSTR_arg, agmarshall.LONG_arg,) }
    def AddDirectoryDispatchProperty(self, dispScope:"IDispatch", name:str, description:str, propName:str, flags:int) -> None:
        """Add an Attribute of type directory (string) to the Attribute Scope. It is recommended that any name used for these configuration properties not include spaces because certain interfaces to the properties may not work correctly."""
        return self._intf.invoke(IAgAttrBuilder._metadata, IAgAttrBuilder._AddDirectoryDispatchProperty_metadata, dispScope, name, description, propName, flags)

    _AddRelFileDispatchProperty_metadata = { "name" : "AddRelFileDispatchProperty",
            "arg_types" : (agcom.PVOID, agcom.BSTR, agcom.BSTR, agcom.BSTR, agcom.BSTR, agcom.BSTR, agcom.LONG,),
            "marshallers" : (agmarshall.AgInterface_in_arg("IDispatch"), agmarshall.BSTR_arg, agmarshall.BSTR_arg, agmarshall.BSTR_arg, agmarshall.BSTR_arg, agmarshall.BSTR_arg, agmarshall.LONG_arg,) }
    def AddRelFileDispatchProperty(self, dispScope:"IDispatch", name:str, description:str, propName:str, fileType:str, fileFilter:str, flags:int) -> None:
        """Add an Attribute of type relative file path (string) to the Attribute Scope. It is recommended that any name used for these configuration properties not include spaces because certain interfaces to the properties may not work correctly."""
        return self._intf.invoke(IAgAttrBuilder._metadata, IAgAttrBuilder._AddRelFileDispatchProperty_metadata, dispScope, name, description, propName, fileType, fileFilter, flags)

    _AddDoubleDispatchProperty_metadata = { "name" : "AddDoubleDispatchProperty",
            "arg_types" : (agcom.PVOID, agcom.BSTR, agcom.BSTR, agcom.BSTR, agcom.LONG,),
            "marshallers" : (agmarshall.AgInterface_in_arg("IDispatch"), agmarshall.BSTR_arg, agmarshall.BSTR_arg, agmarshall.BSTR_arg, agmarshall.LONG_arg,) }
    def AddDoubleDispatchProperty(self, dispScope:"IDispatch", name:str, description:str, propName:str, flags:int) -> None:
        """Add an Attribute of type double to the Attribute Scope. It is recommended that any name used for these configuration properties not include spaces because certain interfaces to the properties may not work correctly."""
        return self._intf.invoke(IAgAttrBuilder._metadata, IAgAttrBuilder._AddDoubleDispatchProperty_metadata, dispScope, name, description, propName, flags)

    _AddDateDispatchProperty_metadata = { "name" : "AddDateDispatchProperty",
            "arg_types" : (agcom.PVOID, agcom.BSTR, agcom.BSTR, agcom.BSTR, agcom.LONG,),
            "marshallers" : (agmarshall.AgInterface_in_arg("IDispatch"), agmarshall.BSTR_arg, agmarshall.BSTR_arg, agmarshall.BSTR_arg, agmarshall.LONG_arg,) }
    def AddDateDispatchProperty(self, dispScope:"IDispatch", name:str, description:str, propName:str, flags:int) -> None:
        """Add an Attribute of type date (represented as a double in EpSec) to the Attribute Scope. It is recommended that any name used for these configuration properties not include spaces because certain interfaces to the properties may not work correctly."""
        return self._intf.invoke(IAgAttrBuilder._metadata, IAgAttrBuilder._AddDateDispatchProperty_metadata, dispScope, name, description, propName, flags)

    _ToString_metadata = { "name" : "ToString",
            "arg_types" : (agcom.PVOID, agcom.PVOID, POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.AgInterface_in_arg("IDispatch"), agmarshall.AgInterface_in_arg("IDispatch"), agmarshall.BSTR_arg,) }
    def ToString(self, dispPlugin:"IDispatch", dispScope:"IDispatch") -> str:
        """Serialize an Attribute scope for a plugin to a formatted XML String representation. (internal use)"""
        return self._intf.invoke(IAgAttrBuilder._metadata, IAgAttrBuilder._ToString_metadata, dispPlugin, dispScope, out_arg())

    _MergeFromString_metadata = { "name" : "MergeFromString",
            "arg_types" : (agcom.PVOID, agcom.PVOID, agcom.BSTR,),
            "marshallers" : (agmarshall.AgInterface_in_arg("IDispatch"), agmarshall.AgInterface_in_arg("IDispatch"), agmarshall.BSTR_arg,) }
    def MergeFromString(self, dispPlugin:"IDispatch", dispScope:"IDispatch", xmlString:str) -> None:
        """Deserialize an Attribute scope into a plugin from a formatted XML String representation. (internal use)"""
        return self._intf.invoke(IAgAttrBuilder._metadata, IAgAttrBuilder._MergeFromString_metadata, dispPlugin, dispScope, xmlString)

    _AddDependencyDispatchProperty_metadata = { "name" : "AddDependencyDispatchProperty",
            "arg_types" : (agcom.PVOID, agcom.BSTR, agcom.BSTR,),
            "marshallers" : (agmarshall.AgInterface_in_arg("IDispatch"), agmarshall.BSTR_arg, agmarshall.BSTR_arg,) }
    def AddDependencyDispatchProperty(self, dispScope:"IDispatch", parentAttributeName:str, childAttributeName:str) -> None:
        """Add a Dependency between two Attributes within the Attribute Scope provided. Dependencies are used to force the update of the child attribute when the parent attribute is modified by the user."""
        return self._intf.invoke(IAgAttrBuilder._metadata, IAgAttrBuilder._AddDependencyDispatchProperty_metadata, dispScope, parentAttributeName, childAttributeName)

    _AddFlagsDispatchProperty_metadata = { "name" : "AddFlagsDispatchProperty",
            "arg_types" : (agcom.PVOID, agcom.BSTR, agcom.BSTR,),
            "marshallers" : (agmarshall.AgInterface_in_arg("IDispatch"), agmarshall.BSTR_arg, agmarshall.BSTR_arg,) }
    def AddFlagsDispatchProperty(self, dispScope:"IDispatch", name:str, flagPropName:str) -> None:
        """Add a callback to retrieve the flags for the provided Attribute name from the provided property name. It is recommended that any name used for these configuration properties not include spaces because certain interfaces to the properties may not work correctly."""
        return self._intf.invoke(IAgAttrBuilder._metadata, IAgAttrBuilder._AddFlagsDispatchProperty_metadata, dispScope, name, flagPropName)

    _AddChoicesDispatchProperty_metadata = { "name" : "AddChoicesDispatchProperty",
            "arg_types" : (agcom.PVOID, agcom.BSTR, agcom.BSTR, agcom.BSTR, agcom.LPSAFEARRAY,),
            "marshallers" : (agmarshall.AgInterface_in_arg("IDispatch"), agmarshall.BSTR_arg, agmarshall.BSTR_arg, agmarshall.BSTR_arg, agmarshall.LPSAFEARRAY_arg,) }
    def AddChoicesDispatchProperty(self, dispScope:"IDispatch", name:str, description:str, propName:str, choices:list) -> None:
        """Add an Attribute that provides a combobox of values from which the user can choose. It is recommended that any name used for these configuration properties not include spaces because certain interfaces to the properties may not work correctly."""
        return self._intf.invoke(IAgAttrBuilder._metadata, IAgAttrBuilder._AddChoicesDispatchProperty_metadata, dispScope, name, description, propName, choices)

    _AddListDispatchProperty_metadata = { "name" : "AddListDispatchProperty",
            "arg_types" : (agcom.PVOID, agcom.BSTR, agcom.BSTR, agcom.BSTR, agcom.BSTR, agcom.LONG,),
            "marshallers" : (agmarshall.AgInterface_in_arg("IDispatch"), agmarshall.BSTR_arg, agmarshall.BSTR_arg, agmarshall.BSTR_arg, agmarshall.BSTR_arg, agmarshall.LONG_arg,) }
    def AddListDispatchProperty(self, dispScope:"IDispatch", name:str, description:str, propName:str, newElemMethodName:str, flags:int) -> None:
        """Add an Attribute that represents a list of values. It is recommended that any name used for these configuration properties not include spaces because certain interfaces to the properties may not work correctly."""
        return self._intf.invoke(IAgAttrBuilder._metadata, IAgAttrBuilder._AddListDispatchProperty_metadata, dispScope, name, description, propName, newElemMethodName, flags)

    _AddVARIANTDispatchProperty_metadata = { "name" : "AddVARIANTDispatchProperty",
            "arg_types" : (agcom.PVOID, agcom.BSTR, agcom.BSTR, agcom.BSTR, agcom.LONG,),
            "marshallers" : (agmarshall.AgInterface_in_arg("IDispatch"), agmarshall.BSTR_arg, agmarshall.BSTR_arg, agmarshall.BSTR_arg, agmarshall.LONG_arg,) }
    def AddVARIANTDispatchProperty(self, dispScope:"IDispatch", name:str, description:str, propName:str, flags:int) -> None:
        """Add an Attribute of type variant to the Attribute Scope. It is recommended that any name used for these configuration properties not include spaces because certain interfaces to the properties may not work correctly."""
        return self._intf.invoke(IAgAttrBuilder._metadata, IAgAttrBuilder._AddVARIANTDispatchProperty_metadata, dispScope, name, description, propName, flags)

    _AddMultiLineStringDispatchProperty_metadata = { "name" : "AddMultiLineStringDispatchProperty",
            "arg_types" : (agcom.PVOID, agcom.BSTR, agcom.BSTR, agcom.BSTR, agcom.LONG,),
            "marshallers" : (agmarshall.AgInterface_in_arg("IDispatch"), agmarshall.BSTR_arg, agmarshall.BSTR_arg, agmarshall.BSTR_arg, agmarshall.LONG_arg,) }
    def AddMultiLineStringDispatchProperty(self, dispScope:"IDispatch", name:str, description:str, propName:str, flags:int) -> None:
        """Add an Attribute of type multi-line string to the Attribute Scope. It is recommended that any name used for these configuration properties not include spaces because certain interfaces to the properties may not work correctly."""
        return self._intf.invoke(IAgAttrBuilder._metadata, IAgAttrBuilder._AddMultiLineStringDispatchProperty_metadata, dispScope, name, description, propName, flags)

    _ToFormattedString_metadata = { "name" : "ToFormattedString",
            "arg_types" : (agcom.PVOID, agcom.PVOID, agcom.BSTR, POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.AgInterface_in_arg("IDispatch"), agmarshall.AgInterface_in_arg("IDispatch"), agmarshall.BSTR_arg, agmarshall.BSTR_arg,) }
    def ToFormattedString(self, dispPlugin:"IDispatch", dispScope:"IDispatch", formatId:str) -> str:
        """Get a String representation of the Attribute Scope, formatted using the specified FormatId. (internal use)"""
        return self._intf.invoke(IAgAttrBuilder._metadata, IAgAttrBuilder._ToFormattedString_metadata, dispPlugin, dispScope, formatId, out_arg())

    _AddQuantityDispatchProperty2_metadata = { "name" : "AddQuantityDispatchProperty2",
            "arg_types" : (agcom.PVOID, agcom.BSTR, agcom.BSTR, agcom.BSTR, agcom.BSTR, agcom.BSTR, agcom.BSTR, agcom.LONG,),
            "marshallers" : (agmarshall.AgInterface_in_arg("IDispatch"), agmarshall.BSTR_arg, agmarshall.BSTR_arg, agmarshall.BSTR_arg, agmarshall.BSTR_arg, agmarshall.BSTR_arg, agmarshall.BSTR_arg, agmarshall.LONG_arg,) }
    def AddQuantityDispatchProperty2(self, dispScope:"IDispatch", name:str, description:str, propName:str, dimension:str, displayUnit:str, internalUnit:str, flags:int) -> None:
        """Add an Attribute of type quantity to the Attribute Scope. It is recommended that any name used for these configuration properties not include spaces because certain interfaces to the properties may not work correctly."""
        return self._intf.invoke(IAgAttrBuilder._metadata, IAgAttrBuilder._AddQuantityDispatchProperty2_metadata, dispScope, name, description, propName, dimension, displayUnit, internalUnit, flags)

    _AddQuantityMinMaxDispatchProperty2_metadata = { "name" : "AddQuantityMinMaxDispatchProperty2",
            "arg_types" : (agcom.PVOID, agcom.BSTR, agcom.BSTR, agcom.BSTR, agcom.BSTR, agcom.BSTR, agcom.BSTR, agcom.DOUBLE, agcom.DOUBLE, agcom.LONG,),
            "marshallers" : (agmarshall.AgInterface_in_arg("IDispatch"), agmarshall.BSTR_arg, agmarshall.BSTR_arg, agmarshall.BSTR_arg, agmarshall.BSTR_arg, agmarshall.BSTR_arg, agmarshall.BSTR_arg, agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg, agmarshall.LONG_arg,) }
    def AddQuantityMinMaxDispatchProperty2(self, dispScope:"IDispatch", name:str, description:str, propName:str, dimension:str, displayUnit:str, internalUnit:str, minVal:float, maxVal:float, flags:int) -> None:
        """Add an Attribute of type quantity to the Attribute Scope. It is recommended that any name used for these configuration properties not include spaces because certain interfaces to the properties may not work correctly."""
        return self._intf.invoke(IAgAttrBuilder._metadata, IAgAttrBuilder._AddQuantityMinMaxDispatchProperty2_metadata, dispScope, name, description, propName, dimension, displayUnit, internalUnit, minVal, maxVal, flags)

    _AddScopeDispatchProperty_metadata = { "name" : "AddScopeDispatchProperty",
            "arg_types" : (agcom.PVOID, agcom.BSTR, agcom.BSTR, agcom.PVOID,),
            "marshallers" : (agmarshall.AgInterface_in_arg("IDispatch"), agmarshall.BSTR_arg, agmarshall.BSTR_arg, agmarshall.AgInterface_in_arg("IDispatch"),) }
    def AddScopeDispatchProperty(self, dispScope:"IDispatch", name:str, description:str, newDispScope:"IDispatch") -> None:
        """Add an Attribute to the 'NewDispScope' Scope (to construct a hierarchy). It is recommended that any name used for these configuration properties not include spaces because certain interfaces to the properties may not work correctly."""
        return self._intf.invoke(IAgAttrBuilder._metadata, IAgAttrBuilder._AddScopeDispatchProperty_metadata, dispScope, name, description, newDispScope)

    _AddChoicesFuncDispatchProperty_metadata = { "name" : "AddChoicesFuncDispatchProperty",
            "arg_types" : (agcom.PVOID, agcom.BSTR, agcom.BSTR, agcom.BSTR, agcom.BSTR,),
            "marshallers" : (agmarshall.AgInterface_in_arg("IDispatch"), agmarshall.BSTR_arg, agmarshall.BSTR_arg, agmarshall.BSTR_arg, agmarshall.BSTR_arg,) }
    def AddChoicesFuncDispatchProperty(self, dispScope:"IDispatch", name:str, description:str, propName:str, funcPropName:str) -> None:
        """Add an Attribute that provides a combobox of values from which the user can choose. Similar to AddChoicesDispatchProperty but uses a callback to get the list of available values instead of a static array of strings. It is recommended that any name used for these configuration properties not include spaces because certain interfaces to the properties may not work correctly."""
        return self._intf.invoke(IAgAttrBuilder._metadata, IAgAttrBuilder._AddChoicesFuncDispatchProperty_metadata, dispScope, name, description, propName, funcPropName)

    _AddDoubleMinDispatchProperty_metadata = { "name" : "AddDoubleMinDispatchProperty",
            "arg_types" : (agcom.PVOID, agcom.BSTR, agcom.BSTR, agcom.BSTR, agcom.DOUBLE, agcom.LONG,),
            "marshallers" : (agmarshall.AgInterface_in_arg("IDispatch"), agmarshall.BSTR_arg, agmarshall.BSTR_arg, agmarshall.BSTR_arg, agmarshall.DOUBLE_arg, agmarshall.LONG_arg,) }
    def AddDoubleMinDispatchProperty(self, dispScope:"IDispatch", name:str, description:str, propName:str, minVal:float, flags:int) -> None:
        """Add an Attribute of type double with a min to the Attribute Scope. It is recommended that any name used for these configuration properties not include spaces because certain interfaces to the properties may not work correctly."""
        return self._intf.invoke(IAgAttrBuilder._metadata, IAgAttrBuilder._AddDoubleMinDispatchProperty_metadata, dispScope, name, description, propName, minVal, flags)

    _AddDoubleMinMaxDispatchProperty_metadata = { "name" : "AddDoubleMinMaxDispatchProperty",
            "arg_types" : (agcom.PVOID, agcom.BSTR, agcom.BSTR, agcom.BSTR, agcom.DOUBLE, agcom.DOUBLE, agcom.LONG,),
            "marshallers" : (agmarshall.AgInterface_in_arg("IDispatch"), agmarshall.BSTR_arg, agmarshall.BSTR_arg, agmarshall.BSTR_arg, agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg, agmarshall.LONG_arg,) }
    def AddDoubleMinMaxDispatchProperty(self, dispScope:"IDispatch", name:str, description:str, propName:str, minVal:float, maxVal:float, flags:int) -> None:
        """Add an Attribute of type double with a min and max to the Attribute Scope. It is recommended that any name used for these configuration properties not include spaces because certain interfaces to the properties may not work correctly."""
        return self._intf.invoke(IAgAttrBuilder._metadata, IAgAttrBuilder._AddDoubleMinMaxDispatchProperty_metadata, dispScope, name, description, propName, minVal, maxVal, flags)

    _AddQuantityMinDispatchProperty2_metadata = { "name" : "AddQuantityMinDispatchProperty2",
            "arg_types" : (agcom.PVOID, agcom.BSTR, agcom.BSTR, agcom.BSTR, agcom.BSTR, agcom.BSTR, agcom.BSTR, agcom.DOUBLE, agcom.LONG,),
            "marshallers" : (agmarshall.AgInterface_in_arg("IDispatch"), agmarshall.BSTR_arg, agmarshall.BSTR_arg, agmarshall.BSTR_arg, agmarshall.BSTR_arg, agmarshall.BSTR_arg, agmarshall.BSTR_arg, agmarshall.DOUBLE_arg, agmarshall.LONG_arg,) }
    def AddQuantityMinDispatchProperty2(self, dispScope:"IDispatch", name:str, description:str, propName:str, dimension:str, displayUnit:str, internalUnit:str, minVal:float, flags:int) -> None:
        """Add an Attribute of type quantity with a min to the Attribute Scope. It is recommended that any name used for these configuration properties not include spaces because certain interfaces to the properties may not work correctly."""
        return self._intf.invoke(IAgAttrBuilder._metadata, IAgAttrBuilder._AddQuantityMinDispatchProperty2_metadata, dispScope, name, description, propName, dimension, displayUnit, internalUnit, minVal, flags)

    _AddIntMinDispatchProperty_metadata = { "name" : "AddIntMinDispatchProperty",
            "arg_types" : (agcom.PVOID, agcom.BSTR, agcom.BSTR, agcom.BSTR, agcom.INT, agcom.LONG,),
            "marshallers" : (agmarshall.AgInterface_in_arg("IDispatch"), agmarshall.BSTR_arg, agmarshall.BSTR_arg, agmarshall.BSTR_arg, agmarshall.INT_arg, agmarshall.LONG_arg,) }
    def AddIntMinDispatchProperty(self, dispScope:"IDispatch", name:str, description:str, propName:str, minVal:int, flags:int) -> None:
        """Add an Attribute of type int with a minimum to the Attribute Scope. It is recommended that any name used for these configuration properties not include spaces because certain interfaces to the properties may not work correctly."""
        return self._intf.invoke(IAgAttrBuilder._metadata, IAgAttrBuilder._AddIntMinDispatchProperty_metadata, dispScope, name, description, propName, minVal, flags)

    _AddIntMinMaxDispatchProperty_metadata = { "name" : "AddIntMinMaxDispatchProperty",
            "arg_types" : (agcom.PVOID, agcom.BSTR, agcom.BSTR, agcom.BSTR, agcom.INT, agcom.INT, agcom.LONG,),
            "marshallers" : (agmarshall.AgInterface_in_arg("IDispatch"), agmarshall.BSTR_arg, agmarshall.BSTR_arg, agmarshall.BSTR_arg, agmarshall.INT_arg, agmarshall.INT_arg, agmarshall.LONG_arg,) }
    def AddIntMinMaxDispatchProperty(self, dispScope:"IDispatch", name:str, description:str, propName:str, minVal:int, maxVal:int, flags:int) -> None:
        """Add an Attribute of type int with a min and max to the Attribute Scope. It is recommended that any name used for these configuration properties not include spaces because certain interfaces to the properties may not work correctly."""
        return self._intf.invoke(IAgAttrBuilder._metadata, IAgAttrBuilder._AddIntMinMaxDispatchProperty_metadata, dispScope, name, description, propName, minVal, maxVal, flags)

    _AddScopeDispatchProperty2_metadata = { "name" : "AddScopeDispatchProperty2",
            "arg_types" : (agcom.PVOID, agcom.BSTR, agcom.BSTR,),
            "marshallers" : (agmarshall.AgInterface_in_arg("IDispatch"), agmarshall.BSTR_arg, agmarshall.BSTR_arg,) }
    def AddScopeDispatchProperty2(self, dispScope:"IDispatch", name:str, description:str) -> None:
        """Add an Attribute to the current Attribute Scope (to construct a hierarchy). It is recommended that any name used for these configuration properties not include spaces because certain interfaces to the properties may not work correctly."""
        return self._intf.invoke(IAgAttrBuilder._metadata, IAgAttrBuilder._AddScopeDispatchProperty2_metadata, dispScope, name, description)


agcls.AgClassCatalog.add_catalog_entry("{BD47DED6-51B4-425f-AD80-6BB07C7E8B41}", IAgAttrBuilder)
agcls.AgTypeNameMap["IAgAttrBuilder"] = IAgAttrBuilder

class IAgAttrConfig(object):
    """Attributes Configuration Interface"""
    _num_methods = 1
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{EB74434B-4493-413b-A098-DB610508745D}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "GetConfig" : 1, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAttrConfig._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAttrConfig from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAttrConfig.__dict__ and type(IAgAttrConfig.__dict__[attrname]) == property:
            return IAgAttrConfig.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAttrConfig.")
    
    _GetConfig_metadata = { "name" : "GetConfig",
            "arg_types" : (agcom.PVOID, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_in_arg("IAgAttrBuilder"), agmarshall.AgInterface_out_arg,) }
    def GetConfig(self, pAttrBuilder:"IAgAttrBuilder") -> typing.Any:
        """Get the configuration represented by an attribute container (also called attribute scope)."""
        return self._intf.invoke(IAgAttrConfig._metadata, IAgAttrConfig._GetConfig_metadata, pAttrBuilder, out_arg())


agcls.AgClassCatalog.add_catalog_entry("{EB74434B-4493-413b-A098-DB610508745D}", IAgAttrConfig)
agcls.AgTypeNameMap["IAgAttrConfig"] = IAgAttrConfig

class IAgAttrAutomationConnector(object):
    """Attributes Automation Connector Interface"""
    _num_methods = 2
    _vtable_offset = IDispatch._vtable_offset + IDispatch._num_methods
    _metadata = {
        "uuid" : "{2A376EFB-4A22-4767-A9F5-36B95D863EC4}",
        "vtable_reference" : IDispatch._vtable_offset + IDispatch._num_methods - 1,
        "method_offsets" : { "ConnectObject" : 1,
                             "DisconnectObject" : 2, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAttrAutomationConnector._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAttrAutomationConnector from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAttrAutomationConnector.__dict__ and type(IAgAttrAutomationConnector.__dict__[attrname]) == property:
            return IAgAttrAutomationConnector.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAttrAutomationConnector.")
    
    _ConnectObject_metadata = { "name" : "ConnectObject",
            "arg_types" : (agcom.PVOID,),
            "marshallers" : (agmarshall.AgInterface_in_arg("IDispatch"),) }
    def ConnectObject(self, objectDispatch:"IDispatch") -> None:
        """Connect to Attributes Automation Adapter Object (AgAttrAutomationAdapter)"""
        return self._intf.invoke(IAgAttrAutomationConnector._metadata, IAgAttrAutomationConnector._ConnectObject_metadata, objectDispatch)

    _DisconnectObject_metadata = { "name" : "DisconnectObject",
            "arg_types" : (),
            "marshallers" : () }
    def DisconnectObject(self) -> None:
        """Disconnect from Attributes Automation Adapter Object (AgAttrAutomationAdapter)"""
        return self._intf.invoke(IAgAttrAutomationConnector._metadata, IAgAttrAutomationConnector._DisconnectObject_metadata, )


agcls.AgClassCatalog.add_catalog_entry("{2A376EFB-4A22-4767-A9F5-36B95D863EC4}", IAgAttrAutomationConnector)
agcls.AgTypeNameMap["IAgAttrAutomationConnector"] = IAgAttrAutomationConnector



class AgAttrBuilder(IAgAttrBuilder):
    """Attribute Automation Builder Class helps construct an Attribute Scope"""
    def __init__(self, sourceObject=None):
        IAgAttrBuilder.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAttrBuilder._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAttrBuilder._get_property(self, attrname) is not None: found_prop = IAgAttrBuilder._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAttrBuilder.")

agcls.AgClassCatalog.add_catalog_entry("{2F0A09A2-B9DC-4740-9A60-735CA72F81A0}", AgAttrBuilder)



################################################################################
#          Copyright 2020-2023, Ansys Government Initiatives
################################################################################
