################################################################################
#          Copyright 2020-2023, Ansys Government Initiatives
################################################################################ 

__all__ = ["AgAsEphemFileReaderPluginResultData", "AgAsEphemFileReaderPluginResultEphem", "AgAsEphemFileReaderPluginResultReg", 
"AgAsEphemFileReaderPluginResultVerify", "AgEAsCovRep", "AgEAsCovType", "AgEAsEphemFileDistanceUnit", "AgEAsEphemFileTimeUnit", 
"AgEAsEphemInterpolationMethod", "AgEAsPluginErrorCodes", "IAgAsEphemFileReaderPlugin", "IAgAsEphemFileReaderPluginResultData", 
"IAgAsEphemFileReaderPluginResultEphem", "IAgAsEphemFileReaderPluginResultReg", "IAgAsEphemFileReaderPluginResultVerify"]

import typing

from ctypes   import byref, POINTER
from datetime import datetime
from enum     import IntEnum, IntFlag

from ..internal  import comutil          as agcom
from ..internal  import coclassutil      as agcls
from ..internal  import marshall         as agmarshall
from ..internal  import dataanalysisutil as agdata
from ..utilities import colors           as agcolor
from ..internal.comutil     import IUnknown, IDispatch, IPictureDisp
from ..internal.apiutil     import interface_proxy, enumerator_proxy, out_arg
from ..internal.eventutil   import *
from ..utilities.exceptions import *

from ..plugins.attrautomation import *
from ..plugins.utplugin import *


def _raise_uninitialized_error(*args):
    raise STKRuntimeError("Valid STK object model classes are returned from STK methods and should not be created independently.")

class AgEAsPluginErrorCodes(IntEnum):
    """Enumeration of AgAsPlugin General Error Codes"""
    # Plugin: An internal failure occurred.
    eAstroPluginInternalFailure = (((1 << 31) | (4 << 16)) | 0x0001)
    # The specified format is invalid (either containing spaces or matching an existing format).
    eEphemerisReaderBadFormat = (((1 << 31) | (4 << 16)) | 0x0002)
    # The central body name is invalid.
    eAstroPluginBadCentralBody = (((1 << 31) | (4 << 16)) | 0x0003)
    # The coordinate system is unrecognized.
    eEphemerisReaderBadCoordinateSystem = (((1 << 31) | (4 << 16)) | 0x0004)
    # The interpolation method is invalid.
    eEphemerisReaderBadInterpolationMethod = (((1 << 31) | (4 << 16)) | 0x0005)
    # The interpolation order is invalid.
    eEphemerisReaderBadInterpolationOrder = (((1 << 31) | (4 << 16)) | 0x0006)
    # The covariance representation is invalid.
    eEphemerisReaderBadCovarianceRepresentation = (((1 << 31) | (4 << 16)) | 0x0008)
    # The VopMu value is invalid. Must be positive.
    eEphemerisReaderBadVopMu = (((1 << 31) | (4 << 16)) | 0x0007)
    # The distance unit is invalid.
    eEphemerisReaderBadDistanceUnit = (((1 << 31) | (4 << 16)) | 0x0008)
    # The time unit is invalid.
    eEphemerisReaderBadTimeUnit = (((1 << 31) | (4 << 16)) | 0x0009)
    # The double is not a finite value (i.e., infinite or indeterminant).
    eAstroPluginBadDouble = (((1 << 31) | (4 << 16)) | 0x0010)
    # The covariance array does not contain the required number of entries (6 or 21).
    eEphemerisReaderBadCovarianceArray = (((1 << 31) | (4 << 16)) | 0x0011)

AgEAsPluginErrorCodes.eAstroPluginInternalFailure.__doc__ = "Plugin: An internal failure occurred."
AgEAsPluginErrorCodes.eEphemerisReaderBadFormat.__doc__ = "The specified format is invalid (either containing spaces or matching an existing format)."
AgEAsPluginErrorCodes.eAstroPluginBadCentralBody.__doc__ = "The central body name is invalid."
AgEAsPluginErrorCodes.eEphemerisReaderBadCoordinateSystem.__doc__ = "The coordinate system is unrecognized."
AgEAsPluginErrorCodes.eEphemerisReaderBadInterpolationMethod.__doc__ = "The interpolation method is invalid."
AgEAsPluginErrorCodes.eEphemerisReaderBadInterpolationOrder.__doc__ = "The interpolation order is invalid."
AgEAsPluginErrorCodes.eEphemerisReaderBadCovarianceRepresentation.__doc__ = "The covariance representation is invalid."
AgEAsPluginErrorCodes.eEphemerisReaderBadVopMu.__doc__ = "The VopMu value is invalid. Must be positive."
AgEAsPluginErrorCodes.eEphemerisReaderBadDistanceUnit.__doc__ = "The distance unit is invalid."
AgEAsPluginErrorCodes.eEphemerisReaderBadTimeUnit.__doc__ = "The time unit is invalid."
AgEAsPluginErrorCodes.eAstroPluginBadDouble.__doc__ = "The double is not a finite value (i.e., infinite or indeterminant)."
AgEAsPluginErrorCodes.eEphemerisReaderBadCovarianceArray.__doc__ = "The covariance array does not contain the required number of entries (6 or 21)."

agcls.AgTypeNameMap["AgEAsPluginErrorCodes"] = AgEAsPluginErrorCodes

class AgEAsEphemInterpolationMethod(IntEnum):
    """Enumeration of interpolation methods valid for IAgAsEphemFileReaderPlugin"""
    # Invalid AgEAsEphemInterpolationMethod indicator.
    eAsEphemInterpolationMethodUnknown = -1
    # Lagrange interpolation. Position and velocity are interpolated independently.
    eAsEphemInterpolationMethodLagrange = 0
    # Hermitian interpolation. Position and velocity are interpolated together.
    eAsEphemInterpolationMethodHermite = 1
    # Lagrange VOP interpolation. Position and velocity are interpolated independently, using a VOP formulation.
    eAsEphemInterpolationMethodLagrangeVOP = 2

AgEAsEphemInterpolationMethod.eAsEphemInterpolationMethodUnknown.__doc__ = "Invalid AgEAsEphemInterpolationMethod indicator."
AgEAsEphemInterpolationMethod.eAsEphemInterpolationMethodLagrange.__doc__ = "Lagrange interpolation. Position and velocity are interpolated independently."
AgEAsEphemInterpolationMethod.eAsEphemInterpolationMethodHermite.__doc__ = "Hermitian interpolation. Position and velocity are interpolated together."
AgEAsEphemInterpolationMethod.eAsEphemInterpolationMethodLagrangeVOP.__doc__ = "Lagrange VOP interpolation. Position and velocity are interpolated independently, using a VOP formulation."

agcls.AgTypeNameMap["AgEAsEphemInterpolationMethod"] = AgEAsEphemInterpolationMethod

class AgEAsCovRep(IntEnum):
    """Enumeration of covariance representations for IAgAsEphemFileReaderPlugin"""
    # Invalid AgEAsCovRep indicator.
    eAsCovRepUnknown = -1
    # The covariance components are expressed using the same coordinate system as the ephemeris (i.e., X, Y, Z, etc.)
    eAsCovRepStandard = 0
    # The covariance components are expressed using radial, inTrack, and crossTrack components, computed using the same coordinate system as the ephemeris.
    eAsCovRepRIC = 1

AgEAsCovRep.eAsCovRepUnknown.__doc__ = "Invalid AgEAsCovRep indicator."
AgEAsCovRep.eAsCovRepStandard.__doc__ = "The covariance components are expressed using the same coordinate system as the ephemeris (i.e., X, Y, Z, etc.)"
AgEAsCovRep.eAsCovRepRIC.__doc__ = "The covariance components are expressed using radial, inTrack, and crossTrack components, computed using the same coordinate system as the ephemeris."

agcls.AgTypeNameMap["AgEAsCovRep"] = AgEAsCovRep

class AgEAsCovType(IntEnum):
    """Enumeration of the desired covariance level."""
    # Invalid AgEAsCovType indicator.
    eAsCovTypeUnknown = -1
    # No covariance is desired.
    eAsCovTypeNone = 0
    # Position covariance is desired. The 6 values of the lower triangular position covariance matrix will be kept if provided.
    eAsCovTypePosition = 1
    # Position and velocity covariance is desired.  The 21 values of the lower triangular position-velocity covariance matrix will be kept if provided.
    eAsCovTypePositionVelocity = 2

AgEAsCovType.eAsCovTypeUnknown.__doc__ = "Invalid AgEAsCovType indicator."
AgEAsCovType.eAsCovTypeNone.__doc__ = "No covariance is desired."
AgEAsCovType.eAsCovTypePosition.__doc__ = "Position covariance is desired. The 6 values of the lower triangular position covariance matrix will be kept if provided."
AgEAsCovType.eAsCovTypePositionVelocity.__doc__ = "Position and velocity covariance is desired.  The 21 values of the lower triangular position-velocity covariance matrix will be kept if provided."

agcls.AgTypeNameMap["AgEAsCovType"] = AgEAsCovType

class AgEAsEphemFileDistanceUnit(IntEnum):
    """Sets the distance units."""
    # Invalid AgEAsEphemFileDistanceUnit indicator.
    eAsEphemFileDistanceUnitUnknown = -1
    # Meter
    eAsEphemFileDistanceUnitMeter = 0
    # Kilometer
    eAsEphemFileDistanceUnitKilometer = 1
    # KiloFeet
    eAsEphemFileDistanceUnitKiloFeet = 2
    # Feet
    eAsEphemFileDistanceUnitFeet = 3
    # Nautical Mile
    eAsEphemFileDistanceUnitNautMile = 4

AgEAsEphemFileDistanceUnit.eAsEphemFileDistanceUnitUnknown.__doc__ = "Invalid AgEAsEphemFileDistanceUnit indicator."
AgEAsEphemFileDistanceUnit.eAsEphemFileDistanceUnitMeter.__doc__ = "Meter"
AgEAsEphemFileDistanceUnit.eAsEphemFileDistanceUnitKilometer.__doc__ = "Kilometer"
AgEAsEphemFileDistanceUnit.eAsEphemFileDistanceUnitKiloFeet.__doc__ = "KiloFeet"
AgEAsEphemFileDistanceUnit.eAsEphemFileDistanceUnitFeet.__doc__ = "Feet"
AgEAsEphemFileDistanceUnit.eAsEphemFileDistanceUnitNautMile.__doc__ = "Nautical Mile"

agcls.AgTypeNameMap["AgEAsEphemFileDistanceUnit"] = AgEAsEphemFileDistanceUnit

class AgEAsEphemFileTimeUnit(IntEnum):
    """Sets the time units."""
    # Invalid AgEAsEphemFileTimeUnit indicator.
    eAsEphemFileTimeUnitUnknown = -1
    # Seconds
    eAsEphemFileTimeUnitSecond = 0
    # Minutes
    eAsEphemFileTimeUnitMinute = 1
    # Hours
    eAsEphemFileTimeUnitHour = 2
    # Days
    eAsEphemFileTimeUnitDay = 3

AgEAsEphemFileTimeUnit.eAsEphemFileTimeUnitUnknown.__doc__ = "Invalid AgEAsEphemFileTimeUnit indicator."
AgEAsEphemFileTimeUnit.eAsEphemFileTimeUnitSecond.__doc__ = "Seconds"
AgEAsEphemFileTimeUnit.eAsEphemFileTimeUnitMinute.__doc__ = "Minutes"
AgEAsEphemFileTimeUnit.eAsEphemFileTimeUnitHour.__doc__ = "Hours"
AgEAsEphemFileTimeUnit.eAsEphemFileTimeUnitDay.__doc__ = "Days"

agcls.AgTypeNameMap["AgEAsEphemFileTimeUnit"] = AgEAsEphemFileTimeUnit


class IAgAsEphemFileReaderPluginResultReg(object):
    """Interface for use with IAgAsEphemFileReaderPlugin"""
    _num_methods = 5
    _vtable_offset = IDispatch._vtable_offset + IDispatch._num_methods
    _metadata = {
        "uuid" : "{F6A367B8-235A-423d-BBD6-F00486DC1CCB}",
        "vtable_reference" : IDispatch._vtable_offset + IDispatch._num_methods - 1,
        "method_offsets" : { "get_FormatID" : 1,
                             "set_FormatID" : 2,
                             "get_Name" : 3,
                             "set_Name" : 4,
                             "AddFileExtension" : 5, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAsEphemFileReaderPluginResultReg._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAsEphemFileReaderPluginResultReg from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAsEphemFileReaderPluginResultReg.__dict__ and type(IAgAsEphemFileReaderPluginResultReg.__dict__[attrname]) == property:
            return IAgAsEphemFileReaderPluginResultReg.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAsEphemFileReaderPluginResultReg.")
    
    _get_FormatID_metadata = { "name" : "FormatID",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def FormatID(self) -> str:
        """File Format identification. Cannot contain spaces."""
        return self._intf.get_property(IAgAsEphemFileReaderPluginResultReg._metadata, IAgAsEphemFileReaderPluginResultReg._get_FormatID_metadata)

    _set_FormatID_metadata = { "name" : "FormatID",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @FormatID.setter
    def FormatID(self, formatID:str) -> None:
        """File Format identification. Cannot contain spaces."""
        return self._intf.set_property(IAgAsEphemFileReaderPluginResultReg._metadata, IAgAsEphemFileReaderPluginResultReg._set_FormatID_metadata, formatID)

    _get_Name_metadata = { "name" : "Name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def Name(self) -> str:
        """Name to use in the user interface."""
        return self._intf.get_property(IAgAsEphemFileReaderPluginResultReg._metadata, IAgAsEphemFileReaderPluginResultReg._get_Name_metadata)

    _set_Name_metadata = { "name" : "Name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @Name.setter
    def Name(self, name:str) -> None:
        """Name to use in the user interface."""
        return self._intf.set_property(IAgAsEphemFileReaderPluginResultReg._metadata, IAgAsEphemFileReaderPluginResultReg._set_Name_metadata, name)

    _AddFileExtension_metadata = { "name" : "AddFileExtension",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    def AddFileExtension(self, fileExt:str) -> None:
        """Adds a file extension to associate with this format. For example, .txt, .inp, ...."""
        return self._intf.invoke(IAgAsEphemFileReaderPluginResultReg._metadata, IAgAsEphemFileReaderPluginResultReg._AddFileExtension_metadata, fileExt)


agcls.AgClassCatalog.add_catalog_entry("{F6A367B8-235A-423d-BBD6-F00486DC1CCB}", IAgAsEphemFileReaderPluginResultReg)
agcls.AgTypeNameMap["IAgAsEphemFileReaderPluginResultReg"] = IAgAsEphemFileReaderPluginResultReg

class IAgAsEphemFileReaderPluginResultVerify(object):
    """Interface for use with IAgAsEphemFileReaderPlugin"""
    _num_methods = 5
    _vtable_offset = IDispatch._vtable_offset + IDispatch._num_methods
    _metadata = {
        "uuid" : "{51F4FB14-83AB-4ce1-9A71-D294701D8BE3}",
        "vtable_reference" : IDispatch._vtable_offset + IDispatch._num_methods - 1,
        "method_offsets" : { "get_Filename" : 1,
                             "get_IsValid" : 2,
                             "set_IsValid" : 3,
                             "get_Message" : 4,
                             "set_Message" : 5, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAsEphemFileReaderPluginResultVerify._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAsEphemFileReaderPluginResultVerify from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAsEphemFileReaderPluginResultVerify.__dict__ and type(IAgAsEphemFileReaderPluginResultVerify.__dict__[attrname]) == property:
            return IAgAsEphemFileReaderPluginResultVerify.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAsEphemFileReaderPluginResultVerify.")
    
    _get_Filename_metadata = { "name" : "Filename",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def Filename(self) -> str:
        """The filename to verify."""
        return self._intf.get_property(IAgAsEphemFileReaderPluginResultVerify._metadata, IAgAsEphemFileReaderPluginResultVerify._get_Filename_metadata)

    _get_IsValid_metadata = { "name" : "IsValid",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def IsValid(self) -> bool:
        """The result of validating the file. Return true for a valid file, else return false."""
        return self._intf.get_property(IAgAsEphemFileReaderPluginResultVerify._metadata, IAgAsEphemFileReaderPluginResultVerify._get_IsValid_metadata)

    _set_IsValid_metadata = { "name" : "IsValid",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @IsValid.setter
    def IsValid(self, isValid:bool) -> None:
        """The result of validating the file. Return true for a valid file, else return false."""
        return self._intf.set_property(IAgAsEphemFileReaderPluginResultVerify._metadata, IAgAsEphemFileReaderPluginResultVerify._set_IsValid_metadata, isValid)

    _get_Message_metadata = { "name" : "Message",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def Message(self) -> str:
        """The message of the validation of the file if it has failed."""
        return self._intf.get_property(IAgAsEphemFileReaderPluginResultVerify._metadata, IAgAsEphemFileReaderPluginResultVerify._get_Message_metadata)

    _set_Message_metadata = { "name" : "Message",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @Message.setter
    def Message(self, message:str) -> None:
        """The message of the validation of the file if it has failed."""
        return self._intf.set_property(IAgAsEphemFileReaderPluginResultVerify._metadata, IAgAsEphemFileReaderPluginResultVerify._set_Message_metadata, message)


agcls.AgClassCatalog.add_catalog_entry("{51F4FB14-83AB-4ce1-9A71-D294701D8BE3}", IAgAsEphemFileReaderPluginResultVerify)
agcls.AgTypeNameMap["IAgAsEphemFileReaderPluginResultVerify"] = IAgAsEphemFileReaderPluginResultVerify

class IAgAsEphemFileReaderPluginResultEphem(object):
    """Interface for use with IAgAsEphemFileReaderPlugin"""
    _num_methods = 29
    _vtable_offset = IDispatch._vtable_offset + IDispatch._num_methods
    _metadata = {
        "uuid" : "{239441E1-34E6-4826-9056-531B3E45D681}",
        "vtable_reference" : IDispatch._vtable_offset + IDispatch._num_methods - 1,
        "method_offsets" : { "get_FormatID" : 1,
                             "get_Name" : 2,
                             "get_Filename" : 3,
                             "set_IsValid" : 4,
                             "set_Message" : 5,
                             "AddMetaData" : 6,
                             "set_CentralBody" : 7,
                             "set_CoordinateSystem" : 8,
                             "SetCoordinateSystemEpoch" : 9,
                             "GetCoordinateSystemEpoch" : 10,
                             "set_InterpolationMethod" : 11,
                             "get_InterpolationMethod" : 12,
                             "set_InterpolationOrder" : 13,
                             "get_InterpolationOrder" : 14,
                             "set_CovarianceRepresentation" : 15,
                             "get_CovarianceRepresentation" : 16,
                             "AddInterpolationBoundary" : 17,
                             "SetRefEpoch" : 18,
                             "GetRefEpoch" : 19,
                             "SetUnits" : 20,
                             "GetDistanceUnit" : 21,
                             "GetTimeUnit" : 22,
                             "set_MuLagrangeVOP" : 23,
                             "get_MuLagrangeVOP" : 24,
                             "AddEphemeris" : 25,
                             "AddEphemerisAtEpoch" : 26,
                             "AddEphemerisOnDate" : 27,
                             "get_CovarianceType" : 28,
                             "AddTrendControlTime" : 29, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAsEphemFileReaderPluginResultEphem._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAsEphemFileReaderPluginResultEphem from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAsEphemFileReaderPluginResultEphem.__dict__ and type(IAgAsEphemFileReaderPluginResultEphem.__dict__[attrname]) == property:
            return IAgAsEphemFileReaderPluginResultEphem.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAsEphemFileReaderPluginResultEphem.")
    
    _get_FormatID_metadata = { "name" : "FormatID",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def FormatID(self) -> str:
        """File Format identification. Cannot contain spaces."""
        return self._intf.get_property(IAgAsEphemFileReaderPluginResultEphem._metadata, IAgAsEphemFileReaderPluginResultEphem._get_FormatID_metadata)

    _get_Name_metadata = { "name" : "Name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def Name(self) -> str:
        """Name to use in the user interface."""
        return self._intf.get_property(IAgAsEphemFileReaderPluginResultEphem._metadata, IAgAsEphemFileReaderPluginResultEphem._get_Name_metadata)

    _get_Filename_metadata = { "name" : "Filename",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def Filename(self) -> str:
        """The filename to verify."""
        return self._intf.get_property(IAgAsEphemFileReaderPluginResultEphem._metadata, IAgAsEphemFileReaderPluginResultEphem._get_Filename_metadata)

    _get_IsValid_metadata = { "name" : "IsValid",
            "arg_types" : (),
            "marshallers" : () }
    @property
    def IsValid(self) -> None:
        """IsValid is a write-only property."""
        raise RuntimeError("IsValid is a write-only property.")


    _set_IsValid_metadata = { "name" : "IsValid",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @IsValid.setter
    def IsValid(self, validity:bool) -> None:
        """False indicates a failure has occurred and that the message should be displayed"""
        return self._intf.set_property(IAgAsEphemFileReaderPluginResultEphem._metadata, IAgAsEphemFileReaderPluginResultEphem._set_IsValid_metadata, validity)

    _get_Message_metadata = { "name" : "Message",
            "arg_types" : (),
            "marshallers" : () }
    @property
    def Message(self) -> None:
        """Message is a write-only property."""
        raise RuntimeError("Message is a write-only property.")


    _set_Message_metadata = { "name" : "Message",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @Message.setter
    def Message(self, errorMsg:str) -> None:
        """Sets an error message when not valid"""
        return self._intf.set_property(IAgAsEphemFileReaderPluginResultEphem._metadata, IAgAsEphemFileReaderPluginResultEphem._set_Message_metadata, errorMsg)

    _AddMetaData_metadata = { "name" : "AddMetaData",
            "arg_types" : (agcom.BSTR, agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.BSTR_arg,) }
    def AddMetaData(self, keyword:str, value:str) -> None:
        """Associates the Value with the given Keyword"""
        return self._intf.invoke(IAgAsEphemFileReaderPluginResultEphem._metadata, IAgAsEphemFileReaderPluginResultEphem._AddMetaData_metadata, keyword, value)

    _get_CentralBody_metadata = { "name" : "CentralBody",
            "arg_types" : (),
            "marshallers" : () }
    @property
    def CentralBody(self) -> None:
        """CentralBody is a write-only property."""
        raise RuntimeError("CentralBody is a write-only property.")


    _set_CentralBody_metadata = { "name" : "CentralBody",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @CentralBody.setter
    def CentralBody(self, name:str) -> None:
        """The central body for the coordinate system used for the ephemeris and covariance."""
        return self._intf.set_property(IAgAsEphemFileReaderPluginResultEphem._metadata, IAgAsEphemFileReaderPluginResultEphem._set_CentralBody_metadata, name)

    _get_CoordinateSystem_metadata = { "name" : "CoordinateSystem",
            "arg_types" : (),
            "marshallers" : () }
    @property
    def CoordinateSystem(self) -> None:
        """CoordinateSystem is a write-only property."""
        raise RuntimeError("CoordinateSystem is a write-only property.")


    _set_CoordinateSystem_metadata = { "name" : "CoordinateSystem",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @CoordinateSystem.setter
    def CoordinateSystem(self, name:str) -> None:
        """The name of the coordinate system used for the ephemeris and covariance. AWB systems are supported using the same notation as that for CoordinateSystem in a .e file, e.g., AWB TopoCentric Facility/Facility1."""
        return self._intf.set_property(IAgAsEphemFileReaderPluginResultEphem._metadata, IAgAsEphemFileReaderPluginResultEphem._set_CoordinateSystem_metadata, name)

    _SetCoordinateSystemEpoch_metadata = { "name" : "SetCoordinateSystemEpoch",
            "arg_types" : (agcom.BSTR, agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.BSTR_arg,) }
    def SetCoordinateSystemEpoch(self, dateAbbrv:str, epoch:str) -> None:
        """The coordinate system epoch for the CoordinateSystem, expressed as a string in format given by DateAbbrv. Not needed for systems with fixed epochs (like ICRF, J2000, B1950)."""
        return self._intf.invoke(IAgAsEphemFileReaderPluginResultEphem._metadata, IAgAsEphemFileReaderPluginResultEphem._SetCoordinateSystemEpoch_metadata, dateAbbrv, epoch)

    _GetCoordinateSystemEpoch_metadata = { "name" : "GetCoordinateSystemEpoch",
            "arg_types" : (agcom.BSTR, POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.BSTR_arg,) }
    def GetCoordinateSystemEpoch(self, dateAbbrv:str) -> str:
        """The coordinate system epoch for the CoordinateSystem, expressed as a string in format given by DateAbbrv. Not needed for systems with fixed epochs (like ICRF, J2000, B1950)."""
        return self._intf.invoke(IAgAsEphemFileReaderPluginResultEphem._metadata, IAgAsEphemFileReaderPluginResultEphem._GetCoordinateSystemEpoch_metadata, dateAbbrv, out_arg())

    _get_InterpolationMethod_metadata = { "name" : "InterpolationMethod",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAsEphemInterpolationMethod),) }
    @property
    def InterpolationMethod(self) -> "AgEAsEphemInterpolationMethod":
        """The interpolation method used with the ephemeris."""
        return self._intf.get_property(IAgAsEphemFileReaderPluginResultEphem._metadata, IAgAsEphemFileReaderPluginResultEphem._get_InterpolationMethod_metadata)

    _set_InterpolationMethod_metadata = { "name" : "InterpolationMethod",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAsEphemInterpolationMethod),) }
    @InterpolationMethod.setter
    def InterpolationMethod(self, method:"AgEAsEphemInterpolationMethod") -> None:
        """The interpolation method used with the ephemeris."""
        return self._intf.set_property(IAgAsEphemFileReaderPluginResultEphem._metadata, IAgAsEphemFileReaderPluginResultEphem._set_InterpolationMethod_metadata, method)

    _get_InterpolationOrder_metadata = { "name" : "InterpolationOrder",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.LONG_arg,) }
    @property
    def InterpolationOrder(self) -> int:
        """The interpolation order to use. For Lagrange-type interpolation, 1+Order samples are used; for Hermitian, (Order+1)/2 samples are used."""
        return self._intf.get_property(IAgAsEphemFileReaderPluginResultEphem._metadata, IAgAsEphemFileReaderPluginResultEphem._get_InterpolationOrder_metadata)

    _set_InterpolationOrder_metadata = { "name" : "InterpolationOrder",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.LONG_arg,) }
    @InterpolationOrder.setter
    def InterpolationOrder(self, order:int) -> None:
        """The interpolation order to use. For Lagrange-type interpolation, 1+Order samples are used; for Hermitian, (Order+1)/2 samples are used."""
        return self._intf.set_property(IAgAsEphemFileReaderPluginResultEphem._metadata, IAgAsEphemFileReaderPluginResultEphem._set_InterpolationOrder_metadata, order)

    _get_CovarianceRepresentation_metadata = { "name" : "CovarianceRepresentation",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAsCovRep),) }
    @property
    def CovarianceRepresentation(self) -> "AgEAsCovRep":
        """Sets the covariance representation."""
        return self._intf.get_property(IAgAsEphemFileReaderPluginResultEphem._metadata, IAgAsEphemFileReaderPluginResultEphem._get_CovarianceRepresentation_metadata)

    _set_CovarianceRepresentation_metadata = { "name" : "CovarianceRepresentation",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAsCovRep),) }
    @CovarianceRepresentation.setter
    def CovarianceRepresentation(self, covRep:"AgEAsCovRep") -> None:
        """Sets the covariance representation."""
        return self._intf.set_property(IAgAsEphemFileReaderPluginResultEphem._metadata, IAgAsEphemFileReaderPluginResultEphem._set_CovarianceRepresentation_metadata, covRep)

    _AddInterpolationBoundary_metadata = { "name" : "AddInterpolationBoundary",
            "arg_types" : (agcom.BSTR, agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.BSTR_arg,) }
    def AddInterpolationBoundary(self, dateAbbrv:str, epoch:str) -> None:
        """Adds an interpolation boundary at the Epoch specified in format given by DateAbbrv."""
        return self._intf.invoke(IAgAsEphemFileReaderPluginResultEphem._metadata, IAgAsEphemFileReaderPluginResultEphem._AddInterpolationBoundary_metadata, dateAbbrv, epoch)

    _SetRefEpoch_metadata = { "name" : "SetRefEpoch",
            "arg_types" : (agcom.BSTR, agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.BSTR_arg,) }
    def SetRefEpoch(self, dateAbbrv:str, epoch:str) -> None:
        """Sets the reference epoch for points added by AddEphemeris(). The Epoch is specified in the format given by DateAbbrv."""
        return self._intf.invoke(IAgAsEphemFileReaderPluginResultEphem._metadata, IAgAsEphemFileReaderPluginResultEphem._SetRefEpoch_metadata, dateAbbrv, epoch)

    _GetRefEpoch_metadata = { "name" : "GetRefEpoch",
            "arg_types" : (agcom.BSTR, POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.BSTR_arg,) }
    def GetRefEpoch(self, dateAbbrv:str) -> str:
        """Sets the reference epoch for points added by AddEphemeris(). The Epoch is specified in the format given by DateAbbrv."""
        return self._intf.invoke(IAgAsEphemFileReaderPluginResultEphem._metadata, IAgAsEphemFileReaderPluginResultEphem._GetRefEpoch_metadata, dateAbbrv, out_arg())

    _SetUnits_metadata = { "name" : "SetUnits",
            "arg_types" : (agcom.LONG, agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAsEphemFileDistanceUnit), agmarshall.AgEnum_arg(AgEAsEphemFileTimeUnit),) }
    def SetUnits(self, distUnit:"AgEAsEphemFileDistanceUnit", timeUnit:"AgEAsEphemFileTimeUnit") -> None:
        """Sets the distance and time units used for both ephemeris and covariance."""
        return self._intf.invoke(IAgAsEphemFileReaderPluginResultEphem._metadata, IAgAsEphemFileReaderPluginResultEphem._SetUnits_metadata, distUnit, timeUnit)

    _GetDistanceUnit_metadata = { "name" : "GetDistanceUnit",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAsEphemFileDistanceUnit),) }
    def GetDistanceUnit(self) -> "AgEAsEphemFileDistanceUnit":
        """Gets the distance unit used for both ephemeris and covariance."""
        return self._intf.invoke(IAgAsEphemFileReaderPluginResultEphem._metadata, IAgAsEphemFileReaderPluginResultEphem._GetDistanceUnit_metadata, out_arg())

    _GetTimeUnit_metadata = { "name" : "GetTimeUnit",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAsEphemFileTimeUnit),) }
    def GetTimeUnit(self) -> "AgEAsEphemFileTimeUnit":
        """Gets the distance unit used for both ephemeris and covariance."""
        return self._intf.invoke(IAgAsEphemFileReaderPluginResultEphem._metadata, IAgAsEphemFileReaderPluginResultEphem._GetTimeUnit_metadata, out_arg())

    _get_MuLagrangeVOP_metadata = { "name" : "MuLagrangeVOP",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def MuLagrangeVOP(self) -> float:
        """The gravitational parameter (expressed using the distance and time units) to use when using LagrangeVOP interpolation."""
        return self._intf.get_property(IAgAsEphemFileReaderPluginResultEphem._metadata, IAgAsEphemFileReaderPluginResultEphem._get_MuLagrangeVOP_metadata)

    _set_MuLagrangeVOP_metadata = { "name" : "MuLagrangeVOP",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @MuLagrangeVOP.setter
    def MuLagrangeVOP(self, vopMu:float) -> None:
        """The gravitational parameter (expressed using the distance and time units) to use when using LagrangeVOP interpolation."""
        return self._intf.set_property(IAgAsEphemFileReaderPluginResultEphem._metadata, IAgAsEphemFileReaderPluginResultEphem._set_MuLagrangeVOP_metadata, vopMu)

    _AddEphemeris_metadata = { "name" : "AddEphemeris",
            "arg_types" : (agcom.DOUBLE, agcom.DOUBLE, agcom.DOUBLE, agcom.DOUBLE, agcom.DOUBLE, agcom.DOUBLE, agcom.DOUBLE, agcom.LPSAFEARRAY, POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg, agmarshall.LPSAFEARRAY_arg, agmarshall.VARIANT_BOOL_arg,) }
    def AddEphemeris(self, timeSinceEpoch:float, x:float, y:float, z:float, vx:float, vy:float, vz:float, covArray:list) -> bool:
        """Adds an ephemeris point. Covariance array is optional. It contains the lower triangle of the covariance matrix, either 6 elements for position only, or 21 elements when using pos-vel covariance."""
        return self._intf.invoke(IAgAsEphemFileReaderPluginResultEphem._metadata, IAgAsEphemFileReaderPluginResultEphem._AddEphemeris_metadata, timeSinceEpoch, x, y, z, vx, vy, vz, covArray, out_arg())

    _AddEphemerisAtEpoch_metadata = { "name" : "AddEphemerisAtEpoch",
            "arg_types" : (agcom.BSTR, agcom.BSTR, agcom.DOUBLE, agcom.DOUBLE, agcom.DOUBLE, agcom.DOUBLE, agcom.DOUBLE, agcom.DOUBLE, agcom.LPSAFEARRAY, POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.BSTR_arg, agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg, agmarshall.LPSAFEARRAY_arg, agmarshall.VARIANT_BOOL_arg,) }
    def AddEphemerisAtEpoch(self, dateAbbrv:str, epoch:str, x:float, y:float, z:float, vx:float, vy:float, vz:float, covArray:list) -> bool:
        """Adds an ephemeris point at the Epoch given in the format DateAbbrv. The Covariance array is optional. It contains the lower triangle of the covariance matrix, either 6 elements for position only, or 21 elements when using pos-vel covariance."""
        return self._intf.invoke(IAgAsEphemFileReaderPluginResultEphem._metadata, IAgAsEphemFileReaderPluginResultEphem._AddEphemerisAtEpoch_metadata, dateAbbrv, epoch, x, y, z, vx, vy, vz, covArray, out_arg())

    _AddEphemerisOnDate_metadata = { "name" : "AddEphemerisOnDate",
            "arg_types" : (agcom.LONG, agcom.LONG, agcom.LONG, agcom.LONG, agcom.LONG, agcom.LONG, agcom.DOUBLE, agcom.DOUBLE, agcom.DOUBLE, agcom.DOUBLE, agcom.DOUBLE, agcom.DOUBLE, agcom.DOUBLE, agcom.LPSAFEARRAY, POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEUtTimeScale), agmarshall.LONG_arg, agmarshall.LONG_arg, agmarshall.LONG_arg, agmarshall.LONG_arg, agmarshall.LONG_arg, agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg, agmarshall.LPSAFEARRAY_arg, agmarshall.VARIANT_BOOL_arg,) }
    def AddEphemerisOnDate(self, scale:"AgEUtTimeScale", year:int, month:int, dayOfMonth:int, hour:int, minute:int, seconds:float, x:float, y:float, z:float, vx:float, vy:float, vz:float, covArray:list) -> bool:
        """Adds an ephemeris point on the date specified. The Covariance array is optional. It contains the lower triangle of the covariance matrix, either 6 elements for position only, or 21 elements when using pos-vel covariance. Year [yyyy], DayOfYear [1-366], Month [1-12], DayOfMonth [1-31], Hour [0-23], Minute [0-59], Seconds [0-60]."""
        return self._intf.invoke(IAgAsEphemFileReaderPluginResultEphem._metadata, IAgAsEphemFileReaderPluginResultEphem._AddEphemerisOnDate_metadata, scale, year, month, dayOfMonth, hour, minute, seconds, x, y, z, vx, vy, vz, covArray, out_arg())

    _get_CovarianceType_metadata = { "name" : "CovarianceType",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAsCovType),) }
    @property
    def CovarianceType(self) -> "AgEAsCovType":
        """Specifies the type of covariance desired."""
        return self._intf.get_property(IAgAsEphemFileReaderPluginResultEphem._metadata, IAgAsEphemFileReaderPluginResultEphem._get_CovarianceType_metadata)

    _AddTrendControlTime_metadata = { "name" : "AddTrendControlTime",
            "arg_types" : (agcom.BSTR, agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.BSTR_arg,) }
    def AddTrendControlTime(self, dateAbbrv:str, epoch:str) -> None:
        """Adds a trending control time at the Epoch specified in format given by DateAbbrv."""
        return self._intf.invoke(IAgAsEphemFileReaderPluginResultEphem._metadata, IAgAsEphemFileReaderPluginResultEphem._AddTrendControlTime_metadata, dateAbbrv, epoch)


agcls.AgClassCatalog.add_catalog_entry("{239441E1-34E6-4826-9056-531B3E45D681}", IAgAsEphemFileReaderPluginResultEphem)
agcls.AgTypeNameMap["IAgAsEphemFileReaderPluginResultEphem"] = IAgAsEphemFileReaderPluginResultEphem

class IAgAsEphemFileReaderPluginResultData(object):
    """Interface for use with IAgAsEphemFileReaderPlugin"""
    _num_methods = 6
    _vtable_offset = IDispatch._vtable_offset + IDispatch._num_methods
    _metadata = {
        "uuid" : "{659FAA5C-5845-430d-B192-E9D096619CAC}",
        "vtable_reference" : IDispatch._vtable_offset + IDispatch._num_methods - 1,
        "method_offsets" : { "get_FormatID" : 1,
                             "get_Name" : 2,
                             "get_Filename" : 3,
                             "set_IsValid" : 4,
                             "set_Message" : 5,
                             "AddMetaData" : 6, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgAsEphemFileReaderPluginResultData._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgAsEphemFileReaderPluginResultData from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgAsEphemFileReaderPluginResultData.__dict__ and type(IAgAsEphemFileReaderPluginResultData.__dict__[attrname]) == property:
            return IAgAsEphemFileReaderPluginResultData.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgAsEphemFileReaderPluginResultData.")
    
    _get_FormatID_metadata = { "name" : "FormatID",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def FormatID(self) -> str:
        """File Format identification. Cannot contain spaces."""
        return self._intf.get_property(IAgAsEphemFileReaderPluginResultData._metadata, IAgAsEphemFileReaderPluginResultData._get_FormatID_metadata)

    _get_Name_metadata = { "name" : "Name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def Name(self) -> str:
        """Name to use in the user interface."""
        return self._intf.get_property(IAgAsEphemFileReaderPluginResultData._metadata, IAgAsEphemFileReaderPluginResultData._get_Name_metadata)

    _get_Filename_metadata = { "name" : "Filename",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def Filename(self) -> str:
        """The filename to verify."""
        return self._intf.get_property(IAgAsEphemFileReaderPluginResultData._metadata, IAgAsEphemFileReaderPluginResultData._get_Filename_metadata)

    _get_IsValid_metadata = { "name" : "IsValid",
            "arg_types" : (),
            "marshallers" : () }
    @property
    def IsValid(self) -> None:
        """IsValid is a write-only property."""
        raise RuntimeError("IsValid is a write-only property.")


    _set_IsValid_metadata = { "name" : "IsValid",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @IsValid.setter
    def IsValid(self, validity:bool) -> None:
        """False indicates a failure has occurred and that the message should be displayed"""
        return self._intf.set_property(IAgAsEphemFileReaderPluginResultData._metadata, IAgAsEphemFileReaderPluginResultData._set_IsValid_metadata, validity)

    _get_Message_metadata = { "name" : "Message",
            "arg_types" : (),
            "marshallers" : () }
    @property
    def Message(self) -> None:
        """Message is a write-only property."""
        raise RuntimeError("Message is a write-only property.")


    _set_Message_metadata = { "name" : "Message",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @Message.setter
    def Message(self, errorMsg:str) -> None:
        """Sets an error message when not valid"""
        return self._intf.set_property(IAgAsEphemFileReaderPluginResultData._metadata, IAgAsEphemFileReaderPluginResultData._set_Message_metadata, errorMsg)

    _AddMetaData_metadata = { "name" : "AddMetaData",
            "arg_types" : (agcom.BSTR, agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.BSTR_arg,) }
    def AddMetaData(self, keyword:str, value:str) -> None:
        """Associates the Value with the given Keyword"""
        return self._intf.invoke(IAgAsEphemFileReaderPluginResultData._metadata, IAgAsEphemFileReaderPluginResultData._AddMetaData_metadata, keyword, value)


agcls.AgClassCatalog.add_catalog_entry("{659FAA5C-5845-430d-B192-E9D096619CAC}", IAgAsEphemFileReaderPluginResultData)
agcls.AgTypeNameMap["IAgAsEphemFileReaderPluginResultData"] = IAgAsEphemFileReaderPluginResultData


class IAgAsEphemFileReaderPlugin(object):
    """
    COM Plugin interface for a External File Reader.
    This interface may be inherited from to assist in development of the plugin.  All methods should be overridden.
    """
    def Init(self, site:"IAgUtPluginSite") -> bool:
        """Triggered on instantiation of the reader."""
        raise STKPluginMethodNotImplementedError("Init was not implemented.")

    def Register(self, result:"IAgAsEphemFileReaderPluginResultReg") -> None:
        """Triggered when the plugin is asked to register its name, format, and file extension associations"""
        raise STKPluginMethodNotImplementedError("Register was not implemented.")

    def Verify(self, result:"IAgAsEphemFileReaderPluginResultVerify") -> None:
        """Triggered when the plugin is asked to verify a file."""
        raise STKPluginMethodNotImplementedError("Verify was not implemented.")

    def ReadEphemeris(self, result:"IAgAsEphemFileReaderPluginResultEphem") -> None:
        """Triggered when the plugin is asked to read a file and obtain its ephemeris"""
        raise STKPluginMethodNotImplementedError("ReadEphemeris was not implemented.")

    def ReadMetaData(self, result:"IAgAsEphemFileReaderPluginResultData") -> None:
        """Triggered when the plugin is asked to read a file and return any meta-data contained in the file"""
        raise STKPluginMethodNotImplementedError("ReadMetaData was not implemented.")

    def Free(self) -> None:
        """Triggered just before the plugin is destroyed."""
        raise STKPluginMethodNotImplementedError("Free was not implemented.")




class AgAsEphemFileReaderPluginResultReg(IAgAsEphemFileReaderPluginResultReg):
    """Interface for use with IAgAsEphemFileReaderPlugin"""
    def __init__(self, sourceObject=None):
        IAgAsEphemFileReaderPluginResultReg.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAsEphemFileReaderPluginResultReg._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAsEphemFileReaderPluginResultReg._get_property(self, attrname) is not None: found_prop = IAgAsEphemFileReaderPluginResultReg._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAsEphemFileReaderPluginResultReg.")

agcls.AgClassCatalog.add_catalog_entry("{9E573C0F-F41B-4517-AA69-F9D308C6FB46}", AgAsEphemFileReaderPluginResultReg)


class AgAsEphemFileReaderPluginResultVerify(IAgAsEphemFileReaderPluginResultVerify):
    """Interface for use with IAgAsEphemFileReaderPlugin"""
    def __init__(self, sourceObject=None):
        IAgAsEphemFileReaderPluginResultVerify.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAsEphemFileReaderPluginResultVerify._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAsEphemFileReaderPluginResultVerify._get_property(self, attrname) is not None: found_prop = IAgAsEphemFileReaderPluginResultVerify._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAsEphemFileReaderPluginResultVerify.")

agcls.AgClassCatalog.add_catalog_entry("{E50B059B-38F9-43D3-BD45-56DBED598301}", AgAsEphemFileReaderPluginResultVerify)


class AgAsEphemFileReaderPluginResultEphem(IAgAsEphemFileReaderPluginResultEphem):
    """Interface for use with IAgAsEphemFileReaderPlugin"""
    def __init__(self, sourceObject=None):
        IAgAsEphemFileReaderPluginResultEphem.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAsEphemFileReaderPluginResultEphem._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAsEphemFileReaderPluginResultEphem._get_property(self, attrname) is not None: found_prop = IAgAsEphemFileReaderPluginResultEphem._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAsEphemFileReaderPluginResultEphem.")

agcls.AgClassCatalog.add_catalog_entry("{42A115BD-82D1-4DA1-A5B2-578D8E3132F6}", AgAsEphemFileReaderPluginResultEphem)


class AgAsEphemFileReaderPluginResultData(IAgAsEphemFileReaderPluginResultData):
    """Interface for use with IAgAsEphemFileReaderPlugin"""
    def __init__(self, sourceObject=None):
        IAgAsEphemFileReaderPluginResultData.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgAsEphemFileReaderPluginResultData._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgAsEphemFileReaderPluginResultData._get_property(self, attrname) is not None: found_prop = IAgAsEphemFileReaderPluginResultData._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgAsEphemFileReaderPluginResultData.")

agcls.AgClassCatalog.add_catalog_entry("{DC324635-1F91-456B-85AE-1249E41ED524}", AgAsEphemFileReaderPluginResultData)



################################################################################
#          Copyright 2020-2023, Ansys Government Initiatives
################################################################################
