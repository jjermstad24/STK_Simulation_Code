# Copyright 2020-2023, Ansys Government Initiatives 

import typing

from ..utilities.exceptions   import *

class interface_proxy(object):
    """Proxy class to isolate the call strategy to STK (COM, gRPC, etc)."""
    def __init__(self):
        pass

    def __eq__(self, other):
        """Check for equivalence of the underlying STK interface."""
        return False

    def __hash__(self):
        """Used primarily for reference count management."""
        return 0

    def __bool__(self):
        """Represents a valid interface."""
        return False

    def query_interface(self, guid) -> "interface_proxy":
        """Returns a new object with the requested guid."""
        return interface_proxy()

    def invoke(self, intf_metatdata:dict, method_metadata:dict, *args):
        pass

    def get_property(self, intf_metatdata:dict, method_metadata:dict):
        pass

    def set_property(self, intf_metatdata:dict, method_metadata:dict, value):
        pass

class enumerator_proxy(object):
    """Proxy class to isolate the call strategy for enumeration (COM, gRPC, etc)."""
    def __init__(self):
        pass

    def next(self) -> typing.Any:
        """Returns the next item in the collection."""
        return None

    def reset(self):
        """Resets the enumeration of the collection."""
        pass

class out_arg(object):
    pass

def _unquoted(s:str) -> str:
    if s is not None and len(s) > 0:
        if s[0] == "\"":
            s = s[1:]
        if len(s) > 0 and s[-1] == "\"":
            s = s[:-1]
    return s 

def read_registry_key(key, value=None, root=None, silent_exception=False):
    try:
        import winreg
        if root is None:
            root = winreg.HKEY_CLASSES_ROOT
        with winreg.OpenKey(root, key) as hkey:
            (val, typ) = winreg.QueryValueEx(hkey, value)
        return _unquoted(val)
    except Exception as e:
        if not silent_exception:
            raise STKInitializationError(f"Error Reading Registry for {key}: {e}")
        return None

def winreg_stk_binary_dir():
    try:
        import winreg
        return _unquoted(read_registry_key(f"SOFTWARE\\AGI\\STK\\12.0", root=winreg.HKEY_LOCAL_MACHINE, value="STKBinaryFolder"))
    except Exception as e:
        return None