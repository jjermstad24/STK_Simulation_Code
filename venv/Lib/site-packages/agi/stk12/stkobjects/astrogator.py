################################################################################
#          Copyright 2020-2023, Ansys Government Initiatives
################################################################################ 

__all__ = ["AgEVAAccessCriterion", "AgEVAAscentType", "AgEVAAtmosDataSource", "AgEVAAttitudeControl", "AgEVAAttitudeUpdate", 
"AgEVABaseSelection", "AgEVABodyAxis", "AgEVABurnoutOptions", "AgEVABurnoutType", "AgEVACalcObjectAngleSign", "AgEVACalcObjectCentralBodyReference", 
"AgEVACalcObjectDirection", "AgEVACalcObjectElem", "AgEVACalcObjectLocationSource", "AgEVACalcObjectOrbitPlaneSource", "AgEVACalcObjectReference", 
"AgEVACalcObjectReferenceDirection", "AgEVACalcObjectReferenceEllipse", "AgEVACalcObjectRelativePosition", "AgEVACalcObjectSunPosition", 
"AgEVACbAttitude", "AgEVACbEphemeris", "AgEVACbGravityModel", "AgEVACbShape", "AgEVAClearEphemerisDirection", "AgEVACoeffRKV8th9th", 
"AgEVAComplexNumber", "AgEVAConstraintSign", "AgEVAControlAdvanced", "AgEVAControlEngineConstAcc", "AgEVAControlEngineConstant", 
"AgEVAControlEngineCustom", "AgEVAControlEngineIon", "AgEVAControlEngineModelPoly", "AgEVAControlEngineThrottleTable", "AgEVAControlFollow", 
"AgEVAControlInitState", "AgEVAControlLaunch", "AgEVAControlManeuver", "AgEVAControlOrbitStateValue", "AgEVAControlPowerInternal", 
"AgEVAControlPowerProcessed", "AgEVAControlPowerSolarArray", "AgEVAControlRepeatingGroundTrackErr", "AgEVAControlStoppingCondition", 
"AgEVAControlThrusters", "AgEVAControlUpdate", "AgEVAConvergenceCriteria", "AgEVACriteria", "AgEVACriterion", "AgEVACustomFunction", 
"AgEVADCScalingMethod", "AgEVADeriveCalcMethod", "AgEVADifferenceOrder", "AgEVADragModelType", "AgEVADrawPerturbation", 
"AgEVAEclipsingBodiesSource", "AgEVAElement", "AgEVAElementType", "AgEVAEngineModelFunction", "AgEVAEphemSource", "AgEVAErrorControl", 
"AgEVAFollowJoin", "AgEVAFollowSeparation", "AgEVAFollowSpacecraftAndFuelTank", "AgEVAFormulation", "AgEVAGeoMagneticFluxSource", 
"AgEVAGeoMagneticFluxUpdateRate", "AgEVAGeoStationaryDriftRateModel", "AgEVAGeoStationaryInclinationMag", "AgEVAGoldenSectionDesiredOperation", 
"AgEVAGraphOption", "AgEVAGravCoeffCoefficientType", "AgEVAGravCoeffNormalizationType", "AgEVAGravParamSource", "AgEVAGravitationalParameterSource", 
"AgEVAGridSearchDesiredOperation", "AgEVAIPOPTGoal", "AgEVAIdealOrbitRadius", "AgEVAImpDeltaVRep", "AgEVALambertDirectionOfMotionType", 
"AgEVALambertOrbitalEnergyType", "AgEVALambertSolutionOptionType", "AgEVALambertTargetCoordType", "AgEVALanguage", "AgEVALaunchDisplaySystem", 
"AgEVALightingCondition", "AgEVAManeuverType", "AgEVAMarsGRAMDensityType", "AgEVANumericalIntegrator", "AgEVAOptimalFiniteDiscretizationStrategy", 
"AgEVAOptimalFiniteExportNodesFormat", "AgEVAOptimalFiniteGuessMethod", "AgEVAOptimalFiniteRunMode", "AgEVAOptimalFiniteSNOPTObjective", 
"AgEVAOptimalFiniteSNOPTScaling", "AgEVAOptimalFiniteScalingOptions", "AgEVAOptimalFiniteSeedMethod", "AgEVAOptimalFiniteWorkingVariables", 
"AgEVAPredictorCorrector", "AgEVAPressureMode", "AgEVAProfile", "AgEVAProfileInsertDirection", "AgEVAProfileMode", "AgEVAProfilesFinish", 
"AgEVAPropulsionMethod", "AgEVAReferenceRadiusSource", "AgEVAReturnControl", "AgEVARootFindingAlgorithm", "AgEVARotatingCoordinateSystem", 
"AgEVARunCode", "AgEVASNOPTGoal", "AgEVASTMEigenNumber", "AgEVASTMPertVariables", "AgEVAScriptingParameterType", "AgEVASegmentDifferenceOrder", 
"AgEVASegmentState", "AgEVASegmentType", "AgEVASequenceStateToPass", "AgEVAShadowModel", "AgEVASmartRunMode", "AgEVASolarForceMethod", 
"AgEVASquaredType", "AgEVAState", "AgEVAStoppingCondition", "AgEVASunPosition", "AgEVATabVecInterpMethod", "AgEVATargetSeqAction", 
"AgEVAThirdBodyMode", "AgEVAThrottleTableOperationMode", "AgEVAThrustType", "AgEVAThrusterDirection", "AgEVAUpdateAction", 
"AgEVAUpdateParam", "AgEVAVenusGRAMDensityType", "AgVAAccessStoppingCondition", "AgVAAsTriggerCondition", "AgVAAttitudeControlFiniteAntiVelocityVector", 
"AgVAAttitudeControlFiniteAttitude", "AgVAAttitudeControlFiniteFile", "AgVAAttitudeControlFinitePlugin", "AgVAAttitudeControlFiniteThrustVector", 
"AgVAAttitudeControlFiniteTimeVarying", "AgVAAttitudeControlFiniteVelocityVector", "AgVAAttitudeControlImpulsiveAntiVelocityVector", 
"AgVAAttitudeControlImpulsiveAttitude", "AgVAAttitudeControlImpulsiveFile", "AgVAAttitudeControlImpulsiveThrustVector", 
"AgVAAttitudeControlImpulsiveVelocityVector", "AgVAAttitudeControlOptimalFiniteLagrange", "AgVAAutomaticSequence", "AgVAAutomaticSequenceCollection", 
"AgVABDotRCalc", "AgVABDotTCalc", "AgVABMagCalc", "AgVABPlaneCollection", "AgVABThetaCalc", "AgVABisectionControl", "AgVABisectionControlCollection", 
"AgVABisectionResult", "AgVABisectionResultCollection", "AgVABlendedDensity", "AgVABulirschStoerIntegrator", "AgVABurnoutCBFCartesian", 
"AgVABurnoutGeocentric", "AgVABurnoutGeodetic", "AgVABurnoutLaunchAzAlt", "AgVABurnoutLaunchAzRadius", "AgVABurnoutVelocity", 
"AgVACR3BPFunc", "AgVACalcObjectCollection", "AgVACalcObjectLinkEmbedControlCollection", "AgVACalculationGraphCollection", 
"AgVACbAttitudeIAU1994", "AgVACbAttitudeRotationCoefficientsFile", "AgVACbEphemerisAnalyticOrbit", "AgVACbEphemerisFile", 
"AgVACbEphemerisJPLDE", "AgVACbEphemerisJPLSpice", "AgVACbEphemerisPlanetary", "AgVACbGravityModel", "AgVACbShapeOblateSpheroid", 
"AgVACbShapeSphere", "AgVACbShapeTriaxialEllipsoid", "AgVACentralBody", "AgVACentralBodyCollection", "AgVACira72Function", 
"AgVAConstraintCollection", "AgVACustomFunctionScriptEngine", "AgVADCControl", "AgVADCControlCollection", "AgVADCResult", 
"AgVADCResultCollection", "AgVADTM2012", "AgVADTM2020", "AgVADensityModelPlugin", "AgVADesignCR3BPObject", "AgVADesignCR3BPObjectCollection", 
"AgVADesignCR3BPSetup", "AgVADisplaySystemGeocentric", "AgVADisplaySystemGeodetic", "AgVADragModelPlugin", "AgVADriverMCS", 
"AgVAEOMFuncPluginFunction", "AgVAElementBPlane", "AgVAElementCartesian", "AgVAElementDelaunay", "AgVAElementEquinoctial", 
"AgVAElementGeodetic", "AgVAElementKeplerian", "AgVAElementMixedSpherical", "AgVAElementSpherical", "AgVAElementTargetVectorIncomingAsymptote", 
"AgVAElementTargetVectorOutgoingAsymptote", "AgVAEngineConstAcc", "AgVAEngineConstant", "AgVAEngineCustom", "AgVAEngineDefinition", 
"AgVAEngineIon", "AgVAEngineModelIspCoefficients", "AgVAEngineModelPoly", "AgVAEngineModelThrustCoefficients", "AgVAEnginePlugin", 
"AgVAEngineThrottleTable", "AgVAExponential", "AgVAFuelTank", "AgVAGaussJacksonIntegrator", "AgVAGeneralRelativityFunction", 
"AgVAGoldenSectionControl", "AgVAGoldenSectionControlCollection", "AgVAGoldenSectionResult", "AgVAGoldenSectionResultCollection", 
"AgVAGravityFieldFunction", "AgVAGridSearchControl", "AgVAGridSearchControlCollection", "AgVAGridSearchResult", "AgVAGridSearchResultCollection", 
"AgVAHPOPPluginFunction", "AgVAHarrisPriester", "AgVAIPOPTControl", "AgVAIPOPTControlCollection", "AgVAIPOPTResult", "AgVAIPOPTResultCollection", 
"AgVAJacchiaBowman2008", "AgVAJacchiaRoberts", "AgVAJacchia_1960", "AgVAJacchia_1970", "AgVAJacchia_1971", "AgVALightingStoppingCondition", 
"AgVAMCSBackwardSequence", "AgVAMCSEnd", "AgVAMCSFollow", "AgVAMCSHold", "AgVAMCSInitialState", "AgVAMCSLaunch", "AgVAMCSManeuver", 
"AgVAMCSOptions", "AgVAMCSPropagate", "AgVAMCSReturn", "AgVAMCSSegmentCollection", "AgVAMCSSegmentProperties", "AgVAMCSSequence", 
"AgVAMCSStop", "AgVAMCSTargetSequence", "AgVAMCSUpdate", "AgVAMSISE_1990", "AgVAMSIS_1986", "AgVAManeuverFinite", "AgVAManeuverFinitePropagator", 
"AgVAManeuverImpulsive", "AgVAManeuverOptimalFinite", "AgVAManeuverOptimalFiniteBounds", "AgVAManeuverOptimalFiniteFinalBoundaryConditions", 
"AgVAManeuverOptimalFiniteInitialBoundaryConditions", "AgVAManeuverOptimalFinitePathBoundaryConditions", "AgVAManeuverOptimalFiniteSNOPTOptimizer", 
"AgVAManeuverOptimalFiniteSteeringNodeCollection", "AgVAManeuverOptimalFiniteSteeringNodeElement", "AgVAMarsGRAM2000", "AgVAMarsGRAM2001", 
"AgVAMarsGRAM2005", "AgVAMarsGRAM2010", "AgVAMarsGRAM37", "AgVANRLMSISE_2000", "AgVANumericalPropagatorWrapper", "AgVANumericalPropagatorWrapperCR3BP", 
"AgVAPluginProperties", "AgVAPointMassFunction", "AgVAPowerInternal", "AgVAPowerProcessed", "AgVAPowerSolarArray", "AgVAProfileBisection", 
"AgVAProfileChangeManeuverType", "AgVAProfileChangePropagator", "AgVAProfileChangeReturnSegment", "AgVAProfileChangeStopSegment", 
"AgVAProfileChangeStoppingConditionState", "AgVAProfileCollection", "AgVAProfileDifferentialCorrector", "AgVAProfileGoldenSection", 
"AgVAProfileGridSearch", "AgVAProfileIPOPTOptimizer", "AgVAProfileLambertProfile", "AgVAProfileLambertSearchProfile", "AgVAProfileRunOnce", 
"AgVAProfileSNOPTOptimizer", "AgVAProfileScriptingTool", "AgVAProfileSearchPlugin", "AgVAProfileSeedFiniteManeuver", "AgVAPropagatorFunctionCollection", 
"AgVARK2nd3rd", "AgVARK4th", "AgVARK4th5th", "AgVARK4thAdapt", "AgVARKF7th8th", "AgVARKV8th9th", "AgVARadiationPressureFunction", 
"AgVASNOPTControl", "AgVASNOPTControlCollection", "AgVASNOPTResult", "AgVASNOPTResultCollection", "AgVASRPAeroT20", "AgVASRPAeroT30", 
"AgVASRPGSPM04aIIA", "AgVASRPGSPM04aIIR", "AgVASRPGSPM04aeIIA", "AgVASRPGSPM04aeIIR", "AgVASRPNPlate", "AgVASRPReflectionPlugin", 
"AgVASRPSpherical", "AgVASRPTabAreaVec", "AgVASRPVariableArea", "AgVAScriptingCalcObject", "AgVAScriptingCalcObjectCollection", 
"AgVAScriptingParameter", "AgVAScriptingParameterCollection", "AgVAScriptingParameterEnumerationChoice", "AgVAScriptingParameterEnumerationChoiceCollection", 
"AgVAScriptingSegment", "AgVAScriptingSegmentCollection", "AgVAScriptingTool", "AgVASearchPluginControl", "AgVASearchPluginControlCollection", 
"AgVASearchPluginResult", "AgVASearchPluginResultCollection", "AgVASpacecraftParameters", "AgVAState", "AgVAStateCalcAbsoluteValue", 
"AgVAStateCalcAltOfApoapsis", "AgVAStateCalcAltOfPeriapsis", "AgVAStateCalcAngle", "AgVAStateCalcApparentSolarTime", "AgVAStateCalcArgOfLat", 
"AgVAStateCalcArgOfPeriapsis", "AgVAStateCalcBetaAngle", "AgVAStateCalcC3Energy", "AgVAStateCalcCartSTMElem", "AgVAStateCalcCartesianElem", 
"AgVAStateCalcCd", "AgVAStateCalcCloseApproachBearing", "AgVAStateCalcCloseApproachCosBearing", "AgVAStateCalcCloseApproachMag", 
"AgVAStateCalcCloseApproachTheta", "AgVAStateCalcCloseApproachX", "AgVAStateCalcCloseApproachY", "AgVAStateCalcCosOfVerticalFPA", 
"AgVAStateCalcCr", "AgVAStateCalcCrdnAngle", "AgVAStateCalcCurvilinearRelMotion", "AgVAStateCalcCustomFunction", "AgVAStateCalcDamageFlux", 
"AgVAStateCalcDamageMassFlux", "AgVAStateCalcDec", "AgVAStateCalcDecRate", "AgVAStateCalcDeltaDec", "AgVAStateCalcDeltaFromMaster", 
"AgVAStateCalcDeltaRA", "AgVAStateCalcDeltaV", "AgVAStateCalcDeltaVSquared", "AgVAStateCalcDensity", "AgVAStateCalcDifference", 
"AgVAStateCalcDifferenceAcrossSegmentsOtherSat", "AgVAStateCalcDifferenceOtherSegment", "AgVAStateCalcDotProduct", "AgVAStateCalcDragArea", 
"AgVAStateCalcDriftRateFactor", "AgVAStateCalcDuration", "AgVAStateCalcEarthMeanLocTimeAN", "AgVAStateCalcEarthMeanSolarTime", 
"AgVAStateCalcEccAnomaly", "AgVAStateCalcEccentricity", "AgVAStateCalcEccentricityX", "AgVAStateCalcEccentricityY", "AgVAStateCalcEnvironment", 
"AgVAStateCalcEpoch", "AgVAStateCalcEquinoctialElem", "AgVAStateCalcFPA", "AgVAStateCalcFuelMass", "AgVAStateCalcGeodeticElem", 
"AgVAStateCalcGeodeticMeanRightAscension", "AgVAStateCalcGeodeticTrueLongitude", "AgVAStateCalcGeodeticTrueLongitudeAtTimeOfPerigee", 
"AgVAStateCalcGravCoeff", "AgVAStateCalcGravitationalParameter", "AgVAStateCalcHeightAboveTerrain", "AgVAStateCalcImpactFlux", 
"AgVAStateCalcImpactMassFlux", "AgVAStateCalcInAsympDec", "AgVAStateCalcInAsympRA", "AgVAStateCalcInVelAzAtPeriapsis", "AgVAStateCalcInclination", 
"AgVAStateCalcInclinationX", "AgVAStateCalcInclinationY", "AgVAStateCalcInertialDeltaVMag", "AgVAStateCalcInertialDeltaVx", 
"AgVAStateCalcInertialDeltaVy", "AgVAStateCalcInertialDeltaVz", "AgVAStateCalcJacobiConstant", "AgVAStateCalcLocalApparentSolarLon", 
"AgVAStateCalcLonDriftRate", "AgVAStateCalcLonOfAscNode", "AgVAStateCalcLonOfPeriapsis", "AgVAStateCalcMCSDeltaV", "AgVAStateCalcMCSDeltaVSquared", 
"AgVAStateCalcMagFieldDipoleL", "AgVAStateCalcManeuverSpecificImpulse", "AgVAStateCalcManeuverTotalMassFlowRate", "AgVAStateCalcMass", 
"AgVAStateCalcMaxValue", "AgVAStateCalcMeanAnomaly", "AgVAStateCalcMeanEarthLon", "AgVAStateCalcMeanMotion", "AgVAStateCalcMeanRightAscension", 
"AgVAStateCalcMeanValue", "AgVAStateCalcMedianValue", "AgVAStateCalcMinValue", "AgVAStateCalcNegative", "AgVAStateCalcNumRevs", 
"AgVAStateCalcOnePtAccess", "AgVAStateCalcOrbitDelaunayG", "AgVAStateCalcOrbitDelaunayH", "AgVAStateCalcOrbitDelaunayL", 
"AgVAStateCalcOrbitPeriod", "AgVAStateCalcOrbitSemiLatusRectum", "AgVAStateCalcOrbitStateValue", "AgVAStateCalcOutAsympDec", 
"AgVAStateCalcOutAsympRA", "AgVAStateCalcOutVelAzAtPeriapsis", "AgVAStateCalcPi", "AgVAStateCalcPosDifferenceOtherSegment", 
"AgVAStateCalcPosVelDifferenceOtherSegment", "AgVAStateCalcPower", "AgVAStateCalcPressure", "AgVAStateCalcRA", "AgVAStateCalcRAAN", 
"AgVAStateCalcRARate", "AgVAStateCalcRMag", "AgVAStateCalcRadOfApoapsis", "AgVAStateCalcRadOfPeriapsis", "AgVAStateCalcRadiationPressureArea", 
"AgVAStateCalcRadiationPressureCoefficient", "AgVAStateCalcRectifiedLon", "AgVAStateCalcReferenceRadius", "AgVAStateCalcRelAtAOLMaster", 
"AgVAStateCalcRelGroundTrackError", "AgVAStateCalcRelMotion", "AgVAStateCalcRelPosDecAngle", "AgVAStateCalcRelPosInPlaneAngle", 
"AgVAStateCalcRelativeInclination", "AgVAStateCalcRepeatingGroundTrackErr", "AgVAStateCalcSEETMagFieldFieldLineSepAngle", 
"AgVAStateCalcSEETSAAFlux", "AgVAStateCalcSEETVehTemp", "AgVAStateCalcSRPArea", "AgVAStateCalcSTMEigenval", "AgVAStateCalcSTMEigenvecElem", 
"AgVAStateCalcScalar", "AgVAStateCalcScript", "AgVAStateCalcSemiMajorAxis", "AgVAStateCalcSequenceDeltaV", "AgVAStateCalcSequenceDeltaVSquared", 
"AgVAStateCalcSignedEccentricity", "AgVAStateCalcSolarBetaAngle", "AgVAStateCalcSolarInPlaneAngle", "AgVAStateCalcSpeedOfLight", 
"AgVAStateCalcStandardDeviation", "AgVAStateCalcTemperature", "AgVAStateCalcTimePastAscNode", "AgVAStateCalcTimePastPeriapsis", 
"AgVAStateCalcTrueAnomaly", "AgVAStateCalcTrueLon", "AgVAStateCalcTrueLongitude", "AgVAStateCalcTwoBodyDriftRate", "AgVAStateCalcUnitAngularMomentumX", 
"AgVAStateCalcUnitAngularMomentumY", "AgVAStateCalcUnitAngularMomentumZ", "AgVAStateCalcUserValue", "AgVAStateCalcVMag", 
"AgVAStateCalcValueAtSegment", "AgVAStateCalcValueAtSegmentOtherSat", "AgVAStateCalcVectorDec", "AgVAStateCalcVectorMag", 
"AgVAStateCalcVectorRA", "AgVAStateCalcVectorX", "AgVAStateCalcVectorY", "AgVAStateCalcVectorZ", "AgVAStateCalcVelAz", "AgVAStateCalcVelDifferenceOtherSegment", 
"AgVAStateTransFunction", "AgVAStoppingCondition", "AgVAStoppingConditionCollection", "AgVAStoppingConditionElement", "AgVATargeterGraph", 
"AgVATargeterGraphActiveControl", "AgVATargeterGraphActiveControlCollection", "AgVATargeterGraphCollection", "AgVATargeterGraphResult", 
"AgVATargeterGraphResultCollection", "AgVAThirdBodyFunction", "AgVAThruster", "AgVAThrusterSet", "AgVAThrusterSetCollection", 
"AgVATwoBodyFunction", "AgVAUS_Standard_Atmosphere", "AgVAUserVariable", "AgVAUserVariableCollection", "AgVAUserVariableDefinition", 
"AgVAUserVariableDefinitionCollection", "AgVAUserVariableUpdate", "AgVAUserVariableUpdateCollection", "AgVAVenusGRAM2005", 
"AgVAYarkovskyFunc", "IAgVAAccessStoppingCondition", "IAgVAAsTriggerCondition", "IAgVAAttitudeControl", "IAgVAAttitudeControlFinite", 
"IAgVAAttitudeControlFiniteAntiVelocityVector", "IAgVAAttitudeControlFiniteAttitude", "IAgVAAttitudeControlFiniteFile", 
"IAgVAAttitudeControlFinitePlugin", "IAgVAAttitudeControlFiniteThrustVector", "IAgVAAttitudeControlFiniteTimeVarying", "IAgVAAttitudeControlFiniteVelocityVector", 
"IAgVAAttitudeControlImpulsive", "IAgVAAttitudeControlImpulsiveAntiVelocityVector", "IAgVAAttitudeControlImpulsiveAttitude", 
"IAgVAAttitudeControlImpulsiveFile", "IAgVAAttitudeControlImpulsiveThrustVector", "IAgVAAttitudeControlImpulsiveVelocityVector", 
"IAgVAAttitudeControlOptimalFinite", "IAgVAAttitudeControlOptimalFiniteLagrange", "IAgVAAutomaticSequence", "IAgVAAutomaticSequenceCollection", 
"IAgVABDotRCalc", "IAgVABDotTCalc", "IAgVABMagCalc", "IAgVABPlaneCollection", "IAgVABThetaCalc", "IAgVABisectionControl", 
"IAgVABisectionControlCollection", "IAgVABisectionResult", "IAgVABisectionResultCollection", "IAgVABlendedDensity", "IAgVABulirschStoerIntegrator", 
"IAgVABurnout", "IAgVABurnoutCBFCartesian", "IAgVABurnoutGeocentric", "IAgVABurnoutGeodetic", "IAgVABurnoutLaunchAzAlt", 
"IAgVABurnoutLaunchAzRadius", "IAgVABurnoutVelocity", "IAgVACR3BPFunc", "IAgVACalcObjectCollection", "IAgVACalcObjectLinkEmbedControlCollection", 
"IAgVACalculationGraphCollection", "IAgVACbAttitude", "IAgVACbAttitudeIAU1994", "IAgVACbAttitudeRotationCoefficientsFile", 
"IAgVACbEphemeris", "IAgVACbEphemerisAnalyticOrbit", "IAgVACbEphemerisFile", "IAgVACbEphemerisJPLDE", "IAgVACbEphemerisJPLSpice", 
"IAgVACbEphemerisPlanetary", "IAgVACbGravityModel", "IAgVACbShape", "IAgVACbShapeOblateSpheroid", "IAgVACbShapeSphere", 
"IAgVACbShapeTriaxialEllipsoid", "IAgVACentralBody", "IAgVACentralBodyCollection", "IAgVACira72Function", "IAgVAConstraintCollection", 
"IAgVACustomFunctionScriptEngine", "IAgVADCControl", "IAgVADCControlCollection", "IAgVADCResult", "IAgVADCResultCollection", 
"IAgVADTM2012", "IAgVADTM2020", "IAgVADensityModelPlugin", "IAgVADesignCR3BPObject", "IAgVADesignCR3BPObjectCollection", 
"IAgVADesignCR3BPSetup", "IAgVADisplaySystem", "IAgVADisplaySystemGeocentric", "IAgVADisplaySystemGeodetic", "IAgVADragModelPlugin", 
"IAgVADriverMCS", "IAgVAEOMFuncPluginFunction", "IAgVAElement", "IAgVAElementBPlane", "IAgVAElementCartesian", "IAgVAElementDelaunay", 
"IAgVAElementEquinoctial", "IAgVAElementGeodetic", "IAgVAElementKeplerian", "IAgVAElementMixedSpherical", "IAgVAElementSpherical", 
"IAgVAElementTargetVectorIncomingAsymptote", "IAgVAElementTargetVectorOutgoingAsymptote", "IAgVAEngineConstAcc", "IAgVAEngineConstant", 
"IAgVAEngineCustom", "IAgVAEngineDefinition", "IAgVAEngineIon", "IAgVAEngineModelIspCoefficients", "IAgVAEngineModelPoly", 
"IAgVAEngineModelThrustCoefficients", "IAgVAEnginePlugin", "IAgVAEngineThrottleTable", "IAgVAExponential", "IAgVAFuelTank", 
"IAgVAGaussJacksonIntegrator", "IAgVAGeneralRelativityFunction", "IAgVAGoldenSectionControl", "IAgVAGoldenSectionControlCollection", 
"IAgVAGoldenSectionResult", "IAgVAGoldenSectionResultCollection", "IAgVAGravityFieldFunction", "IAgVAGridSearchControl", 
"IAgVAGridSearchControlCollection", "IAgVAGridSearchResult", "IAgVAGridSearchResultCollection", "IAgVAHPOPPluginFunction", 
"IAgVAHarrisPriester", "IAgVAIPOPTControl", "IAgVAIPOPTControlCollection", "IAgVAIPOPTResult", "IAgVAIPOPTResultCollection", 
"IAgVAJacchiaBowman2008", "IAgVAJacchiaRoberts", "IAgVAJacchia_1960", "IAgVAJacchia_1970", "IAgVAJacchia_1971", "IAgVALightingStoppingCondition", 
"IAgVAMCSBackwardSequence", "IAgVAMCSEnd", "IAgVAMCSFollow", "IAgVAMCSHold", "IAgVAMCSInitialState", "IAgVAMCSLaunch", "IAgVAMCSManeuver", 
"IAgVAMCSOptions", "IAgVAMCSPropagate", "IAgVAMCSReturn", "IAgVAMCSSegment", "IAgVAMCSSegmentCollection", "IAgVAMCSSegmentProperties", 
"IAgVAMCSSequence", "IAgVAMCSStop", "IAgVAMCSTargetSequence", "IAgVAMCSUpdate", "IAgVAMSISE_1990", "IAgVAMSIS_1986", "IAgVAManeuver", 
"IAgVAManeuverFinite", "IAgVAManeuverFinitePropagator", "IAgVAManeuverImpulsive", "IAgVAManeuverOptimalFinite", "IAgVAManeuverOptimalFiniteBounds", 
"IAgVAManeuverOptimalFiniteFinalBoundaryConditions", "IAgVAManeuverOptimalFiniteInitialBoundaryConditions", "IAgVAManeuverOptimalFinitePathBoundaryConditions", 
"IAgVAManeuverOptimalFiniteSNOPTOptimizer", "IAgVAManeuverOptimalFiniteSteeringNodeCollection", "IAgVAManeuverOptimalFiniteSteeringNodeElement", 
"IAgVAMarsGRAM2000", "IAgVAMarsGRAM2001", "IAgVAMarsGRAM2005", "IAgVAMarsGRAM2010", "IAgVAMarsGRAM37", "IAgVANRLMSISE_2000", 
"IAgVANumericalIntegrator", "IAgVANumericalPropagatorWrapper", "IAgVANumericalPropagatorWrapperCR3BP", "IAgVAPluginProperties", 
"IAgVAPointMassFunction", "IAgVAPowerInternal", "IAgVAPowerProcessed", "IAgVAPowerSolarArray", "IAgVAProfile", "IAgVAProfileBisection", 
"IAgVAProfileChangeManeuverType", "IAgVAProfileChangePropagator", "IAgVAProfileChangeReturnSegment", "IAgVAProfileChangeStopSegment", 
"IAgVAProfileChangeStoppingConditionState", "IAgVAProfileCollection", "IAgVAProfileDifferentialCorrector", "IAgVAProfileGoldenSection", 
"IAgVAProfileGridSearch", "IAgVAProfileIPOPTOptimizer", "IAgVAProfileLambertProfile", "IAgVAProfileLambertSearchProfile", 
"IAgVAProfileRunOnce", "IAgVAProfileSNOPTOptimizer", "IAgVAProfileScriptingTool", "IAgVAProfileSearchPlugin", "IAgVAProfileSeedFiniteManeuver", 
"IAgVAPropagatorFunctionCollection", "IAgVARK2nd3rd", "IAgVARK4th", "IAgVARK4th5th", "IAgVARK4thAdapt", "IAgVARKF7th8th", 
"IAgVARKV8th9th", "IAgVARadiationPressureFunction", "IAgVASNOPTControl", "IAgVASNOPTControlCollection", "IAgVASNOPTResult", 
"IAgVASNOPTResultCollection", "IAgVASRPAeroT20", "IAgVASRPAeroT30", "IAgVASRPGSPM04aIIA", "IAgVASRPGSPM04aIIR", "IAgVASRPGSPM04aeIIA", 
"IAgVASRPGSPM04aeIIR", "IAgVASRPNPlate", "IAgVASRPReflectionPlugin", "IAgVASRPSpherical", "IAgVASRPTabAreaVec", "IAgVASRPVariableArea", 
"IAgVAScriptingCalcObject", "IAgVAScriptingCalcObjectCollection", "IAgVAScriptingParameter", "IAgVAScriptingParameterCollection", 
"IAgVAScriptingParameterEnumerationChoice", "IAgVAScriptingParameterEnumerationChoiceCollection", "IAgVAScriptingSegment", 
"IAgVAScriptingSegmentCollection", "IAgVAScriptingTool", "IAgVASearchPluginControl", "IAgVASearchPluginControlCollection", 
"IAgVASearchPluginResult", "IAgVASearchPluginResultCollection", "IAgVASpacecraftParameters", "IAgVAState", "IAgVAStateCalcAbsoluteValue", 
"IAgVAStateCalcAltOfApoapsis", "IAgVAStateCalcAltOfPeriapsis", "IAgVAStateCalcAngle", "IAgVAStateCalcApparentSolarTime", 
"IAgVAStateCalcArgOfLat", "IAgVAStateCalcArgOfPeriapsis", "IAgVAStateCalcBetaAngle", "IAgVAStateCalcC3Energy", "IAgVAStateCalcCartSTMElem", 
"IAgVAStateCalcCartesianElem", "IAgVAStateCalcCd", "IAgVAStateCalcCloseApproachBearing", "IAgVAStateCalcCloseApproachCosBearing", 
"IAgVAStateCalcCloseApproachMag", "IAgVAStateCalcCloseApproachTheta", "IAgVAStateCalcCloseApproachX", "IAgVAStateCalcCloseApproachY", 
"IAgVAStateCalcCosOfVerticalFPA", "IAgVAStateCalcCr", "IAgVAStateCalcCrdnAngle", "IAgVAStateCalcCurvilinearRelMotion", "IAgVAStateCalcCustomFunction", 
"IAgVAStateCalcDamageFlux", "IAgVAStateCalcDamageMassFlux", "IAgVAStateCalcDec", "IAgVAStateCalcDecRate", "IAgVAStateCalcDeltaDec", 
"IAgVAStateCalcDeltaFromMaster", "IAgVAStateCalcDeltaRA", "IAgVAStateCalcDeltaV", "IAgVAStateCalcDeltaVSquared", "IAgVAStateCalcDensity", 
"IAgVAStateCalcDifference", "IAgVAStateCalcDifferenceAcrossSegmentsOtherSat", "IAgVAStateCalcDifferenceOtherSegment", "IAgVAStateCalcDotProduct", 
"IAgVAStateCalcDragArea", "IAgVAStateCalcDriftRateFactor", "IAgVAStateCalcDuration", "IAgVAStateCalcEarthMeanLocTimeAN", 
"IAgVAStateCalcEarthMeanSolarTime", "IAgVAStateCalcEccAnomaly", "IAgVAStateCalcEccentricity", "IAgVAStateCalcEccentricityX", 
"IAgVAStateCalcEccentricityY", "IAgVAStateCalcEnvironment", "IAgVAStateCalcEpoch", "IAgVAStateCalcEquinoctialElem", "IAgVAStateCalcFPA", 
"IAgVAStateCalcFuelMass", "IAgVAStateCalcGeodeticElem", "IAgVAStateCalcGeodeticMeanRightAscension", "IAgVAStateCalcGeodeticTrueLongitude", 
"IAgVAStateCalcGeodeticTrueLongitudeAtTimeOfPerigee", "IAgVAStateCalcGravCoeff", "IAgVAStateCalcGravitationalParameter", 
"IAgVAStateCalcHeightAboveTerrain", "IAgVAStateCalcImpactFlux", "IAgVAStateCalcImpactMassFlux", "IAgVAStateCalcInAsympDec", 
"IAgVAStateCalcInAsympRA", "IAgVAStateCalcInVelAzAtPeriapsis", "IAgVAStateCalcInclination", "IAgVAStateCalcInclinationX", 
"IAgVAStateCalcInclinationY", "IAgVAStateCalcInertialDeltaVMag", "IAgVAStateCalcInertialDeltaVx", "IAgVAStateCalcInertialDeltaVy", 
"IAgVAStateCalcInertialDeltaVz", "IAgVAStateCalcJacobiConstant", "IAgVAStateCalcLocalApparentSolarLon", "IAgVAStateCalcLonDriftRate", 
"IAgVAStateCalcLonOfAscNode", "IAgVAStateCalcLonOfPeriapsis", "IAgVAStateCalcMCSDeltaV", "IAgVAStateCalcMCSDeltaVSquared", 
"IAgVAStateCalcMagFieldDipoleL", "IAgVAStateCalcManeuverSpecificImpulse", "IAgVAStateCalcManeuverTotalMassFlowRate", "IAgVAStateCalcMass", 
"IAgVAStateCalcMaxValue", "IAgVAStateCalcMeanAnomaly", "IAgVAStateCalcMeanEarthLon", "IAgVAStateCalcMeanMotion", "IAgVAStateCalcMeanRightAscension", 
"IAgVAStateCalcMeanValue", "IAgVAStateCalcMedianValue", "IAgVAStateCalcMinValue", "IAgVAStateCalcNegative", "IAgVAStateCalcNumRevs", 
"IAgVAStateCalcOnePtAccess", "IAgVAStateCalcOrbitDelaunayG", "IAgVAStateCalcOrbitDelaunayH", "IAgVAStateCalcOrbitDelaunayL", 
"IAgVAStateCalcOrbitPeriod", "IAgVAStateCalcOrbitSemiLatusRectum", "IAgVAStateCalcOrbitStateValue", "IAgVAStateCalcOutAsympDec", 
"IAgVAStateCalcOutAsympRA", "IAgVAStateCalcOutVelAzAtPeriapsis", "IAgVAStateCalcPi", "IAgVAStateCalcPosDifferenceOtherSegment", 
"IAgVAStateCalcPosVelDifferenceOtherSegment", "IAgVAStateCalcPower", "IAgVAStateCalcPressure", "IAgVAStateCalcRA", "IAgVAStateCalcRAAN", 
"IAgVAStateCalcRARate", "IAgVAStateCalcRMag", "IAgVAStateCalcRadOfApoapsis", "IAgVAStateCalcRadOfPeriapsis", "IAgVAStateCalcRadiationPressureArea", 
"IAgVAStateCalcRadiationPressureCoefficient", "IAgVAStateCalcRectifiedLon", "IAgVAStateCalcReferenceRadius", "IAgVAStateCalcRelAtAOLMaster", 
"IAgVAStateCalcRelGroundTrackError", "IAgVAStateCalcRelMotion", "IAgVAStateCalcRelPosDecAngle", "IAgVAStateCalcRelPosInPlaneAngle", 
"IAgVAStateCalcRelativeInclination", "IAgVAStateCalcRepeatingGroundTrackErr", "IAgVAStateCalcSEETMagFieldFieldLineSepAngle", 
"IAgVAStateCalcSEETSAAFlux", "IAgVAStateCalcSEETVehTemp", "IAgVAStateCalcSRPArea", "IAgVAStateCalcSTMEigenval", "IAgVAStateCalcSTMEigenvecElem", 
"IAgVAStateCalcScalar", "IAgVAStateCalcScript", "IAgVAStateCalcSemiMajorAxis", "IAgVAStateCalcSequenceDeltaV", "IAgVAStateCalcSequenceDeltaVSquared", 
"IAgVAStateCalcSignedEccentricity", "IAgVAStateCalcSolarBetaAngle", "IAgVAStateCalcSolarInPlaneAngle", "IAgVAStateCalcSpeedOfLight", 
"IAgVAStateCalcStandardDeviation", "IAgVAStateCalcTemperature", "IAgVAStateCalcTimePastAscNode", "IAgVAStateCalcTimePastPeriapsis", 
"IAgVAStateCalcTrueAnomaly", "IAgVAStateCalcTrueLon", "IAgVAStateCalcTrueLongitude", "IAgVAStateCalcTwoBodyDriftRate", "IAgVAStateCalcUnitAngularMomentumX", 
"IAgVAStateCalcUnitAngularMomentumY", "IAgVAStateCalcUnitAngularMomentumZ", "IAgVAStateCalcUserValue", "IAgVAStateCalcVMag", 
"IAgVAStateCalcValueAtSegment", "IAgVAStateCalcValueAtSegmentOtherSat", "IAgVAStateCalcVectorDec", "IAgVAStateCalcVectorMag", 
"IAgVAStateCalcVectorRA", "IAgVAStateCalcVectorX", "IAgVAStateCalcVectorY", "IAgVAStateCalcVectorZ", "IAgVAStateCalcVelAz", 
"IAgVAStateCalcVelDifferenceOtherSegment", "IAgVAStateTransFunction", "IAgVAStoppingCondition", "IAgVAStoppingConditionCollection", 
"IAgVAStoppingConditionComponent", "IAgVAStoppingConditionElement", "IAgVATargeterGraph", "IAgVATargeterGraphActiveControl", 
"IAgVATargeterGraphActiveControlCollection", "IAgVATargeterGraphCollection", "IAgVATargeterGraphResult", "IAgVATargeterGraphResultCollection", 
"IAgVAThirdBodyFunction", "IAgVAThruster", "IAgVAThrusterSet", "IAgVAThrusterSetCollection", "IAgVATwoBodyFunction", "IAgVAUS_Standard_Atmosphere", 
"IAgVAUserVariable", "IAgVAUserVariableCollection", "IAgVAUserVariableDefinition", "IAgVAUserVariableDefinitionCollection", 
"IAgVAUserVariableUpdate", "IAgVAUserVariableUpdateCollection", "IAgVAVenusGRAM2005", "IAgVAYarkovskyFunc"]

import typing

from ctypes   import byref, POINTER
from datetime import datetime
from enum     import IntEnum, IntFlag

from ..internal  import comutil          as agcom
from ..internal  import coclassutil      as agcls
from ..internal  import marshall         as agmarshall
from ..internal  import dataanalysisutil as agdata
from ..utilities import colors           as agcolor
from ..internal.comutil     import IUnknown, IDispatch, IPictureDisp
from ..internal.apiutil     import interface_proxy, enumerator_proxy, out_arg
from ..internal.eventutil   import *
from ..utilities.exceptions import *

from ..stkutil import *
from ..stkobjects import *


def _raise_uninitialized_error(*args):
    raise STKRuntimeError("Valid STK object model classes are returned from STK methods and should not be created independently.")

class AgEVAGraphOption(IntEnum):
    """Mode that the mcs will run in."""
    # Don't graph.
    eVAGraphOptionNoGraph = 0
    # Graph the difference.
    eVAGraphOptionGraphDifference = 1
    # Graph the value.
    eVAGraphOptionGraphValue = 2

AgEVAGraphOption.eVAGraphOptionNoGraph.__doc__ = "Don't graph."
AgEVAGraphOption.eVAGraphOptionGraphDifference.__doc__ = "Graph the difference."
AgEVAGraphOption.eVAGraphOptionGraphValue.__doc__ = "Graph the value."

agcls.AgTypeNameMap["AgEVAGraphOption"] = AgEVAGraphOption

class AgEVASmartRunMode(IntEnum):
    """Mode that the mcs will run in."""
    # Run Entire Mission Control Sequence
    eVASmartRunModeEntireMCS = 0
    # Run Only Changed Segments
    eVASmartRunModeOnlyChanged = 1

AgEVASmartRunMode.eVASmartRunModeEntireMCS.__doc__ = "Run Entire Mission Control Sequence"
AgEVASmartRunMode.eVASmartRunModeOnlyChanged.__doc__ = "Run Only Changed Segments"

agcls.AgTypeNameMap["AgEVASmartRunMode"] = AgEVASmartRunMode

class AgEVAFormulation(IntEnum):
    """Equinoctial Formulation."""
    # Posigrade.
    eVAFormulationPosigrade = 0
    # Retrograde.
    eVAFormulationRetrograde = 1

AgEVAFormulation.eVAFormulationPosigrade.__doc__ = "Posigrade."
AgEVAFormulation.eVAFormulationRetrograde.__doc__ = "Retrograde."

agcls.AgTypeNameMap["AgEVAFormulation"] = AgEVAFormulation

class AgEVALightingCondition(IntEnum):
    """The criteria of a Lighting stopping condition."""
    # The Enter Direct Sun criterion.
    eVALightingCriterionEnterDirectSun = 0
    # The Exit Direct Sun criterion.
    eVALightingCriterionExitDirectSun = 1
    # The Enter Umbra criterion.
    eVALightingCriterionEnterUmbra = 2
    # The Exit Umbra criterion.
    eVALightingCriterionExitUmbra = 3

AgEVALightingCondition.eVALightingCriterionEnterDirectSun.__doc__ = "The Enter Direct Sun criterion."
AgEVALightingCondition.eVALightingCriterionExitDirectSun.__doc__ = "The Exit Direct Sun criterion."
AgEVALightingCondition.eVALightingCriterionEnterUmbra.__doc__ = "The Enter Umbra criterion."
AgEVALightingCondition.eVALightingCriterionExitUmbra.__doc__ = "The Exit Umbra criterion."

agcls.AgTypeNameMap["AgEVALightingCondition"] = AgEVALightingCondition

class AgEVAProfile(IntEnum):
    """Type of profile."""
    # Plugin search profile.
    eVAProfileSearchPlugin = 0
    # Differential corrector profile.
    eVAProfileDifferentialCorrector = 2
    # Change maneuver type profile.
    eVAProfileChangeManeuverType = 3
    # Scripting tool profile.
    eVAProfileScriptingTool = 4
    # Change return segment profile.
    eVAProfileChangeReturnSegment = 5
    # Change propagator profile.
    eVAProfileChangePropagator = 6
    # Change stop segment profile.
    eVAProfileChangeStopSegment = 7
    # Change stopping condition state profile.
    eVAProfileChangeStoppingConditionState = 8
    # Change seed finite maneuver profile.
    eVAProfileSeedFiniteManeuver = 9
    # Run once profile.
    eVAProfileRunOnce = 10
    # SNOPT Optimizer profile.
    eVAProfileSNOPTOptimizer = 11
    # IPOPT Optimizer profile.
    eVAProfileIPOPTOptimizer = 12
    # Lambert profile.
    eVAProfileLambertProfile = 13
    # Lambert Search profile.
    eVAProfileLambertSearchProfile = 14
    # Golden Section profile.
    eVAProfileGoldenSection = 15
    # grid Search profile.
    eVAProfileGridSearch = 16
    # Single Parameter Bisection profile.
    eVAProfileBisection = 17

AgEVAProfile.eVAProfileSearchPlugin.__doc__ = "Plugin search profile."
AgEVAProfile.eVAProfileDifferentialCorrector.__doc__ = "Differential corrector profile."
AgEVAProfile.eVAProfileChangeManeuverType.__doc__ = "Change maneuver type profile."
AgEVAProfile.eVAProfileScriptingTool.__doc__ = "Scripting tool profile."
AgEVAProfile.eVAProfileChangeReturnSegment.__doc__ = "Change return segment profile."
AgEVAProfile.eVAProfileChangePropagator.__doc__ = "Change propagator profile."
AgEVAProfile.eVAProfileChangeStopSegment.__doc__ = "Change stop segment profile."
AgEVAProfile.eVAProfileChangeStoppingConditionState.__doc__ = "Change stopping condition state profile."
AgEVAProfile.eVAProfileSeedFiniteManeuver.__doc__ = "Change seed finite maneuver profile."
AgEVAProfile.eVAProfileRunOnce.__doc__ = "Run once profile."
AgEVAProfile.eVAProfileSNOPTOptimizer.__doc__ = "SNOPT Optimizer profile."
AgEVAProfile.eVAProfileIPOPTOptimizer.__doc__ = "IPOPT Optimizer profile."
AgEVAProfile.eVAProfileLambertProfile.__doc__ = "Lambert profile."
AgEVAProfile.eVAProfileLambertSearchProfile.__doc__ = "Lambert Search profile."
AgEVAProfile.eVAProfileGoldenSection.__doc__ = "Golden Section profile."
AgEVAProfile.eVAProfileGridSearch.__doc__ = "grid Search profile."
AgEVAProfile.eVAProfileBisection.__doc__ = "Single Parameter Bisection profile."

agcls.AgTypeNameMap["AgEVAProfile"] = AgEVAProfile

class AgEVAAccessCriterion(IntEnum):
    """The criteria of an Access stopping condition."""
    # The Gain Access criterion.
    eVAAccessCriterionGain = 0
    # The Lose Access criterion.
    eVAAccessCriterionLose = 1
    # The Either criterion.
    eVAAccessCriterionEither = 2

AgEVAAccessCriterion.eVAAccessCriterionGain.__doc__ = "The Gain Access criterion."
AgEVAAccessCriterion.eVAAccessCriterionLose.__doc__ = "The Lose Access criterion."
AgEVAAccessCriterion.eVAAccessCriterionEither.__doc__ = "The Either criterion."

agcls.AgTypeNameMap["AgEVAAccessCriterion"] = AgEVAAccessCriterion

class AgEVAEclipsingBodiesSource(IntEnum):
    """The source types of the eclipsing bodies list."""
    # The eclipsing bodies list of the propagator's central body.
    eVAEclipsingBodiesPropagatorCb = 0
    # A user-defined eclipsing bodies list related to the propagator's central body.
    eVAEclipsingBodiesUserDefined = 1
    # The eclipsing bodies list of the vehicle's central body.
    eVAEclipsingBodiesVehicleCb = 2
    # A list of eclipsing bodies from the vehicle's Basic Properties->Eclipse Bodies list.
    eVAEclipsingBodiesVehicleUserDefined = 3

AgEVAEclipsingBodiesSource.eVAEclipsingBodiesPropagatorCb.__doc__ = "The eclipsing bodies list of the propagator's central body."
AgEVAEclipsingBodiesSource.eVAEclipsingBodiesUserDefined.__doc__ = "A user-defined eclipsing bodies list related to the propagator's central body."
AgEVAEclipsingBodiesSource.eVAEclipsingBodiesVehicleCb.__doc__ = "The eclipsing bodies list of the vehicle's central body."
AgEVAEclipsingBodiesSource.eVAEclipsingBodiesVehicleUserDefined.__doc__ = "A list of eclipsing bodies from the vehicle's Basic Properties->Eclipse Bodies list."

agcls.AgTypeNameMap["AgEVAEclipsingBodiesSource"] = AgEVAEclipsingBodiesSource

class AgEVACriterion(IntEnum):
    """The stopping condition criterion types."""
    # The Cross Decreasing criterion - the stopping condition is satisfied when the parameter reaches a value equal to the trip value while decreasing.
    eVACriterionCrossDecreasing = 0
    # The Cross Either criterion - the stopping condition is satisfied when either of the above situations occurs.
    eVACriterionCrossEither = 1
    # The Cross Increasing criterion - the stopping condition is satisfied when the parameter reaches a value equal to the trip value while increasing.
    eVACriterionCrossIncreasing = 2

AgEVACriterion.eVACriterionCrossDecreasing.__doc__ = "The Cross Decreasing criterion - the stopping condition is satisfied when the parameter reaches a value equal to the trip value while decreasing."
AgEVACriterion.eVACriterionCrossEither.__doc__ = "The Cross Either criterion - the stopping condition is satisfied when either of the above situations occurs."
AgEVACriterion.eVACriterionCrossIncreasing.__doc__ = "The Cross Increasing criterion - the stopping condition is satisfied when the parameter reaches a value equal to the trip value while increasing."

agcls.AgTypeNameMap["AgEVACriterion"] = AgEVACriterion

class AgEVACalcObjectReference(IntEnum):
    """The calculation object Reference Selection types."""
    # The Use Basic Reference type - uses the current satellite as the reference vehicle.
    eVACalcObjectReferenceBasic = 0
    # The UserSpecifiedReference type - uses a user specified vehicle object as the reference vehicle.
    eVACalcObjectReferenceSpecified = 1

AgEVACalcObjectReference.eVACalcObjectReferenceBasic.__doc__ = "The Use Basic Reference type - uses the current satellite as the reference vehicle."
AgEVACalcObjectReference.eVACalcObjectReferenceSpecified.__doc__ = "The UserSpecifiedReference type - uses a user specified vehicle object as the reference vehicle."

agcls.AgTypeNameMap["AgEVACalcObjectReference"] = AgEVACalcObjectReference

class AgEVACalcObjectCentralBodyReference(IntEnum):
    """The calculation object Central Body Reference Selection types."""
    # The Use Basic Reference type - uses the current satellite as the reference vehicle.
    eVACalcObjectCentralBodyReferenceSpecified = 0
    # The UserSpecifiedReference type - uses a user specified vehicle object as the reference vehicle.
    eVACalcObjectCentralBodyReferenceParent = 1

AgEVACalcObjectCentralBodyReference.eVACalcObjectCentralBodyReferenceSpecified.__doc__ = "The Use Basic Reference type - uses the current satellite as the reference vehicle."
AgEVACalcObjectCentralBodyReference.eVACalcObjectCentralBodyReferenceParent.__doc__ = "The UserSpecifiedReference type - uses a user specified vehicle object as the reference vehicle."

agcls.AgTypeNameMap["AgEVACalcObjectCentralBodyReference"] = AgEVACalcObjectCentralBodyReference

class AgEVACalcObjectElem(IntEnum):
    """The calculation object Element Types."""
    # Brouwer-Lyddane mean elements considering both the short and long period terms (i.e. resulting from averaging over the rotation of periapse). The perturbation terms are the J2, J3, J4 and J5 oblateness terms and it considers the term involving J2^2.
    eVACalcObjectElemBrouwerLyddaneMeanLong = 0
    # Brouwer-Lyddane Mean Short - Brouwer-Lyddane mean elements considering only the short period terms (i.e. those involving averaging over the period of the orbit) where the only perturbation force is the oblateness arising from the J2 gravity term.
    eVACalcObjectElemBrouwerLyddaneMeanShort = 1
    # Kozai-Izsak Mean - Kozai-Izsak mean elements for which only the short period terms (i.e. those involving averaging over the period of the orbit) are considered. The only perturbation force considered is the oblateness arising from the J2 gravity term.
    eVACalcObjectElemKozaiIzsakMean = 2
    # Osculating.
    eVACalcObjectElemOsculating = 3

AgEVACalcObjectElem.eVACalcObjectElemBrouwerLyddaneMeanLong.__doc__ = "Brouwer-Lyddane mean elements considering both the short and long period terms (i.e. resulting from averaging over the rotation of periapse). The perturbation terms are the J2, J3, J4 and J5 oblateness terms and it considers the term involving J2^2."
AgEVACalcObjectElem.eVACalcObjectElemBrouwerLyddaneMeanShort.__doc__ = "Brouwer-Lyddane Mean Short - Brouwer-Lyddane mean elements considering only the short period terms (i.e. those involving averaging over the period of the orbit) where the only perturbation force is the oblateness arising from the J2 gravity term."
AgEVACalcObjectElem.eVACalcObjectElemKozaiIzsakMean.__doc__ = "Kozai-Izsak Mean - Kozai-Izsak mean elements for which only the short period terms (i.e. those involving averaging over the period of the orbit) are considered. The only perturbation force considered is the oblateness arising from the J2 gravity term."
AgEVACalcObjectElem.eVACalcObjectElemOsculating.__doc__ = "Osculating."

agcls.AgTypeNameMap["AgEVACalcObjectElem"] = AgEVACalcObjectElem

class AgEVAProfileMode(IntEnum):
    """The Target Sequence profile modes."""
    # Iterate - the Target Sequence will run the profile as it is configured in an attempt to attain the desired solution.
    eVAProfileModeIterate = 0
    # Not Active - the Target Sequence will ignore the profile when running.
    eVAProfileModeNotActive = 1
    # Run Once - the Target Sequence will run the profile once according to its current configuration.
    eVAProfileModeRunOnce = 2
    # Active - the Target Sequence will apply the change that the profile passes when running.
    eVAProfileModeActive = 3

AgEVAProfileMode.eVAProfileModeIterate.__doc__ = "Iterate - the Target Sequence will run the profile as it is configured in an attempt to attain the desired solution."
AgEVAProfileMode.eVAProfileModeNotActive.__doc__ = "Not Active - the Target Sequence will ignore the profile when running."
AgEVAProfileMode.eVAProfileModeRunOnce.__doc__ = "Run Once - the Target Sequence will run the profile once according to its current configuration."
AgEVAProfileMode.eVAProfileModeActive.__doc__ = "Active - the Target Sequence will apply the change that the profile passes when running."

agcls.AgTypeNameMap["AgEVAProfileMode"] = AgEVAProfileMode

class AgEVAControlStoppingCondition(IntEnum):
    """The stopping condition control types."""
    # Trip - the value at which the stopping condition will be satisfied.
    eVAControlStoppingConditionTripValue = 0

AgEVAControlStoppingCondition.eVAControlStoppingConditionTripValue.__doc__ = "Trip - the value at which the stopping condition will be satisfied."

agcls.AgTypeNameMap["AgEVAControlStoppingCondition"] = AgEVAControlStoppingCondition

class AgEVAState(IntEnum):
    """The Stop segment state types."""
    # Enabled - the segment stops the run of the MCS.
    eVAStateEnabled = 0
    # Disabled - the MCS ignores this segment and continues to run.
    eVAStateDisabled = 1

AgEVAState.eVAStateEnabled.__doc__ = "Enabled - the segment stops the run of the MCS."
AgEVAState.eVAStateDisabled.__doc__ = "Disabled - the MCS ignores this segment and continues to run."

agcls.AgTypeNameMap["AgEVAState"] = AgEVAState

class AgEVAReturnControl(IntEnum):
    """The Return segment control types"""
    # Enable - returns control of the MCS run to the parent segment.
    eVAReturnControlEnable = 0
    # Disable - the MCS ignores this segment and continues to run.
    eVAReturnControlDisable = 1
    # Enable (except Profiles bypass)- functions as enabled except when run from a Target Sequence profile (e.g., a differential corrector), which will ignore it.
    eVAReturnControlEnableExceptProfilesBypass = 2

AgEVAReturnControl.eVAReturnControlEnable.__doc__ = "Enable - returns control of the MCS run to the parent segment."
AgEVAReturnControl.eVAReturnControlDisable.__doc__ = "Disable - the MCS ignores this segment and continues to run."
AgEVAReturnControl.eVAReturnControlEnableExceptProfilesBypass.__doc__ = "Enable (except Profiles bypass)- functions as enabled except when run from a Target Sequence profile (e.g., a differential corrector), which will ignore it."

agcls.AgTypeNameMap["AgEVAReturnControl"] = AgEVAReturnControl

class AgEVADrawPerturbation(IntEnum):
    """The Draw Perturbation types for a Differential Corrector profile."""
    # Segment Color - perturbations will be displayed in the trajectory color defined for the individual segments within the target sequence.
    eVADrawPerturbationSegmentColor = 0
    # Don't Draw - perturbations will not be drawn, which may decrease the run time of the target sequence.
    eVADrawPerturbationDontDraw = 1
    # Targeter Color - perturbations will be displayed in the trajectory color defined for the target sequence.
    eVADrawPerturbationTargeterColor = 2

AgEVADrawPerturbation.eVADrawPerturbationSegmentColor.__doc__ = "Segment Color - perturbations will be displayed in the trajectory color defined for the individual segments within the target sequence."
AgEVADrawPerturbation.eVADrawPerturbationDontDraw.__doc__ = "Don't Draw - perturbations will not be drawn, which may decrease the run time of the target sequence."
AgEVADrawPerturbation.eVADrawPerturbationTargeterColor.__doc__ = "Targeter Color - perturbations will be displayed in the trajectory color defined for the target sequence."

agcls.AgTypeNameMap["AgEVADrawPerturbation"] = AgEVADrawPerturbation

class AgEVADeriveCalcMethod(IntEnum):
    """The Derivative Calculation method types for a Differential Corrector profile."""
    # Forward Difference - (f(x + delta) - f(x))/ delta
    eVADeriveCalcMethodForward = 0
    # Central Difference - (f(x + delta) - f(x - delta)) / 2delta
    eVADeriveCalcMethodCentral = 1
    # Signed Difference - if x is positive, use the forward difference; if x is negative, use the backward difference.
    eVADeriveCalcMethodSigned = 2

AgEVADeriveCalcMethod.eVADeriveCalcMethodForward.__doc__ = "Forward Difference - (f(x + delta) - f(x))/ delta"
AgEVADeriveCalcMethod.eVADeriveCalcMethodCentral.__doc__ = "Central Difference - (f(x + delta) - f(x - delta)) / 2delta"
AgEVADeriveCalcMethod.eVADeriveCalcMethodSigned.__doc__ = "Signed Difference - if x is positive, use the forward difference; if x is negative, use the backward difference."

agcls.AgTypeNameMap["AgEVADeriveCalcMethod"] = AgEVADeriveCalcMethod

class AgEVAConvergenceCriteria(IntEnum):
    """The Convergence Criteria types for a Differential Corrector profile."""
    # Equality Constraints Satisfied - the differences between the achieved and desired equality constraint values must be within the specified tolerances for convergence.
    eVAConvergenceCriteriaEqualityConstraintWithinTolerance = 0
    # Equality Constraints Satisfied or Parameter Variations within Tolerance - the differences between the achieved and desired EC values must be within tolerances, or the last updates to the control parameters must be within tolerances for convergence.
    eVAConvervenceCriteriaEitherEqualityConstraintsOrControlParams = 1

AgEVAConvergenceCriteria.eVAConvergenceCriteriaEqualityConstraintWithinTolerance.__doc__ = "Equality Constraints Satisfied - the differences between the achieved and desired equality constraint values must be within the specified tolerances for convergence."
AgEVAConvergenceCriteria.eVAConvervenceCriteriaEitherEqualityConstraintsOrControlParams.__doc__ = "Equality Constraints Satisfied or Parameter Variations within Tolerance - the differences between the achieved and desired EC values must be within tolerances, or the last updates to the control parameters must be within tolerances for convergence."

agcls.AgTypeNameMap["AgEVAConvergenceCriteria"] = AgEVAConvergenceCriteria

class AgEVADCScalingMethod(IntEnum):
    """The Scaling Method types for a Differential Corrector profile."""
    # By initial value.
    eVADCScalingMethodInitialValue = 0
    # By one (no scaling).
    eVADCScalingMethodOneNoScaling = 1
    # By specified value.
    eVADCScalingMethodSpecifiedValue = 2
    # By tolerance.
    eVADCScalingMethodTolerance = 3

AgEVADCScalingMethod.eVADCScalingMethodInitialValue.__doc__ = "By initial value."
AgEVADCScalingMethod.eVADCScalingMethodOneNoScaling.__doc__ = "By one (no scaling)."
AgEVADCScalingMethod.eVADCScalingMethodSpecifiedValue.__doc__ = "By specified value."
AgEVADCScalingMethod.eVADCScalingMethodTolerance.__doc__ = "By tolerance."

agcls.AgTypeNameMap["AgEVADCScalingMethod"] = AgEVADCScalingMethod

class AgEVAControlUpdate(IntEnum):
    """Update segment properties that can be selected as control parameters for a Target Sequence."""
    # Drag Coefficient (Cd) - the dimensionless drag coefficient associated with the drag area.
    eVAControlUpdateCdVal = 100
    # Solar Radiation Pressure (Spherical) Coefficient (Cr) - the reflectivity of the spacecraft used for solar radiation pressure calculations, where 2.0 is fully reflective and 1.0 is not reflective at all.
    eVAControlUpdateCrVal = 101
    # Drag Area - the cross-sectional area of the spacecraft assumed perpendicular to the direction of motion, used for atmospheric drag calculations. Enter a value in the selected distance unit squared.
    eVAControlUpdateDragAreaVal = 102
    # Dry Mass - the mass of the spacecraft exclusive of propellant. Enter a value in the selected mass unit (e.g. kg).
    eVAControlUpdateDryMassVal = 103
    # Fuel Density - the density of the fuel tank. Enter a value in the selected mass unit per the selected distance unit cubed (e.g. kg/m^3).
    eVAControlUpdateFuelDensityVal = 104
    # Fuel Mass - the mass of the spacecraft propellant. Enter a value in the selected mass unit (e.g. kg).
    eVAControlUpdateFuelMassVal = 105
    # The cross-sectional area of the spacecraft assumed perpendicular to the direction of central body radiation, used for central body radiation (albedo / thermal pressure) calculations. Enter a value in the selected distance unit squared.
    eVAControlUpdateRadiationPressureAreaVal = 106
    # Radiation Pressure (Albedo/Thermal) Coefficient (Ck) - the reflectivity of the spacecraft used for central body radiation pressure (albedo / thermal pressure) calculations, where 2.0 is fully reflective and 1.0 is not reflective at all.
    eVAControlUpdateRadiationPressureCoefficientVal = 107
    # Solar Radiation Pressure (Spherical) Area - the cross-sectional area of the spacecraft assumed perpendicular to the direction of solar radiation, used for solar radiation calculations. Enter a value in the selected distance unit squared.
    eVAControlUpdateSRPAreaVal = 108
    # Tank Pressure - the fuel tank pressure. Enter a value in the selected pressure unit (e.g. Pa).
    eVAControlUpdateTankPressureVal = 109
    # Tank Temperature - the temperature of the fuel tank. Enter a value in the selected temperature unit.
    eVAControlUpdateTankTempVal = 110

AgEVAControlUpdate.eVAControlUpdateCdVal.__doc__ = "Drag Coefficient (Cd) - the dimensionless drag coefficient associated with the drag area."
AgEVAControlUpdate.eVAControlUpdateCrVal.__doc__ = "Solar Radiation Pressure (Spherical) Coefficient (Cr) - the reflectivity of the spacecraft used for solar radiation pressure calculations, where 2.0 is fully reflective and 1.0 is not reflective at all."
AgEVAControlUpdate.eVAControlUpdateDragAreaVal.__doc__ = "Drag Area - the cross-sectional area of the spacecraft assumed perpendicular to the direction of motion, used for atmospheric drag calculations. Enter a value in the selected distance unit squared."
AgEVAControlUpdate.eVAControlUpdateDryMassVal.__doc__ = "Dry Mass - the mass of the spacecraft exclusive of propellant. Enter a value in the selected mass unit (e.g. kg)."
AgEVAControlUpdate.eVAControlUpdateFuelDensityVal.__doc__ = "Fuel Density - the density of the fuel tank. Enter a value in the selected mass unit per the selected distance unit cubed (e.g. kg/m^3)."
AgEVAControlUpdate.eVAControlUpdateFuelMassVal.__doc__ = "Fuel Mass - the mass of the spacecraft propellant. Enter a value in the selected mass unit (e.g. kg)."
AgEVAControlUpdate.eVAControlUpdateRadiationPressureAreaVal.__doc__ = "The cross-sectional area of the spacecraft assumed perpendicular to the direction of central body radiation, used for central body radiation (albedo / thermal pressure) calculations. Enter a value in the selected distance unit squared."
AgEVAControlUpdate.eVAControlUpdateRadiationPressureCoefficientVal.__doc__ = "Radiation Pressure (Albedo/Thermal) Coefficient (Ck) - the reflectivity of the spacecraft used for central body radiation pressure (albedo / thermal pressure) calculations, where 2.0 is fully reflective and 1.0 is not reflective at all."
AgEVAControlUpdate.eVAControlUpdateSRPAreaVal.__doc__ = "Solar Radiation Pressure (Spherical) Area - the cross-sectional area of the spacecraft assumed perpendicular to the direction of solar radiation, used for solar radiation calculations. Enter a value in the selected distance unit squared."
AgEVAControlUpdate.eVAControlUpdateTankPressureVal.__doc__ = "Tank Pressure - the fuel tank pressure. Enter a value in the selected pressure unit (e.g. Pa)."
AgEVAControlUpdate.eVAControlUpdateTankTempVal.__doc__ = "Tank Temperature - the temperature of the fuel tank. Enter a value in the selected temperature unit."

agcls.AgTypeNameMap["AgEVAControlUpdate"] = AgEVAControlUpdate

class AgEVAControlFollow(IntEnum):
    """Follow segment properties that can be selected as control parameters for a Target Sequence."""
    # Fuel Mass - the mass of the spacecraft propellant. Enter a value in the selected mass unit (e.g. kg).
    eVAControlFollowFuelMass = 200
    # Drag Coefficient (Cd) - the dimensionless drag coefficient associated with the drag area.
    eVAControlFollowCd = 201
    # Solar Radiation Pressure (Spherical) Coefficient (Cr) - the reflectivity of the spacecraft used for solar radiation pressure calculations, where 2.0 is fully reflective and 1.0 is not reflective at all.
    eVAControlFollowCr = 202
    # Drag Area - the cross-sectional area of the spacecraft assumed perpendicular to the direction of motion, used for atmospheric drag calculations. Enter a value in the selected distance unit squared.
    eVAControlFollowDragArea = 203
    # Dry Mass - the mass of the spacecraft exclusive of propellant. Enter a value in the selected mass unit (e.g. kg).
    eVAControlFollowDryMass = 204
    # Fuel Density - the density of the fuel tank. Enter a value in the selected mass unit per the selected distance unit cubed (e.g. kg/m^3).
    eVAControlFollowFuelDensity = 205
    # GPS Solar Radiation Pressure K1 - if you are using a non-spherical SRP model, this field defines the model's K1 (scale) value.
    eVAControlFollowK1 = 206
    # GPS Solar Radiation Pressure K2 - if you are using a non-spherical SRP model, this field defines the model's K2 (Y bias) value.
    eVAControlFollowK2 = 207
    # The cross-sectional area of the spacecraft assumed perpendicular to the direction of central body radiation, used for central body radiation (albedo / thermal pressure) calculations. Enter a value in the selected distance unit squared.
    eVAControlFollowRadiationPressureArea = 208
    # Radiation Pressure (Albedo/Thermal) Coefficient (Ck) - the reflectivity of the spacecraft used for central body radiation pressure (albedo / thermal pressure) calculations, where 2.0 is fully reflective and 1.0 is not reflective at all.
    eVAControlFollowCk = 209
    # Solar Radiation Pressure (Spherical) Area - the cross-sectional area of the spacecraft assumed perpendicular to the direction of solar radiation, used for solar radiation calculations. Enter a value in the selected distance unit squared.
    eVAControlFollowSRPArea = 210
    # Tank Pressure - the fuel tank pressure. Enter a value in the selected pressure unit (e.g. Pa).
    eVAControlFollowTankPressure = 211
    # Tank Temperature - the temperature of the fuel tank. Enter a value in the selected temperature unit.
    eVAControlFollowTankTemp = 212
    # Maximum Fuel Mass - the maximum fuel mass of the spacecraft; this parameter specifically applies to Finite Maneuver segments that are being executed in Backward Sequences. Enter a value in the selected mass unit (e.g. kg).
    eVAControlFollowMaxFuelMass = 213
    # Tank Volume - the volume of the fuel tank. Enter a value in the selected distance unit cubed (e.g. m^3). The minimum value is 1e-019 m^3.
    eVAControlFollowTankVolume = 214
    # X Offset - the distance that the spacecraft will be offset from the leader's body frame along the X axis.
    eVAControlFollowXOffset = 215
    # Y Offset - the distance that the spacecraft will be offset from the leader's body frame along the Y axis.
    eVAControlFollowYOffset = 216
    # Z Offset - the distance that the spacecraft will be offset from the leader's body frame along the Z axis.
    eVAControlFollowZOffset = 217

AgEVAControlFollow.eVAControlFollowFuelMass.__doc__ = "Fuel Mass - the mass of the spacecraft propellant. Enter a value in the selected mass unit (e.g. kg)."
AgEVAControlFollow.eVAControlFollowCd.__doc__ = "Drag Coefficient (Cd) - the dimensionless drag coefficient associated with the drag area."
AgEVAControlFollow.eVAControlFollowCr.__doc__ = "Solar Radiation Pressure (Spherical) Coefficient (Cr) - the reflectivity of the spacecraft used for solar radiation pressure calculations, where 2.0 is fully reflective and 1.0 is not reflective at all."
AgEVAControlFollow.eVAControlFollowDragArea.__doc__ = "Drag Area - the cross-sectional area of the spacecraft assumed perpendicular to the direction of motion, used for atmospheric drag calculations. Enter a value in the selected distance unit squared."
AgEVAControlFollow.eVAControlFollowDryMass.__doc__ = "Dry Mass - the mass of the spacecraft exclusive of propellant. Enter a value in the selected mass unit (e.g. kg)."
AgEVAControlFollow.eVAControlFollowFuelDensity.__doc__ = "Fuel Density - the density of the fuel tank. Enter a value in the selected mass unit per the selected distance unit cubed (e.g. kg/m^3)."
AgEVAControlFollow.eVAControlFollowK1.__doc__ = "GPS Solar Radiation Pressure K1 - if you are using a non-spherical SRP model, this field defines the model's K1 (scale) value."
AgEVAControlFollow.eVAControlFollowK2.__doc__ = "GPS Solar Radiation Pressure K2 - if you are using a non-spherical SRP model, this field defines the model's K2 (Y bias) value."
AgEVAControlFollow.eVAControlFollowRadiationPressureArea.__doc__ = "The cross-sectional area of the spacecraft assumed perpendicular to the direction of central body radiation, used for central body radiation (albedo / thermal pressure) calculations. Enter a value in the selected distance unit squared."
AgEVAControlFollow.eVAControlFollowCk.__doc__ = "Radiation Pressure (Albedo/Thermal) Coefficient (Ck) - the reflectivity of the spacecraft used for central body radiation pressure (albedo / thermal pressure) calculations, where 2.0 is fully reflective and 1.0 is not reflective at all."
AgEVAControlFollow.eVAControlFollowSRPArea.__doc__ = "Solar Radiation Pressure (Spherical) Area - the cross-sectional area of the spacecraft assumed perpendicular to the direction of solar radiation, used for solar radiation calculations. Enter a value in the selected distance unit squared."
AgEVAControlFollow.eVAControlFollowTankPressure.__doc__ = "Tank Pressure - the fuel tank pressure. Enter a value in the selected pressure unit (e.g. Pa)."
AgEVAControlFollow.eVAControlFollowTankTemp.__doc__ = "Tank Temperature - the temperature of the fuel tank. Enter a value in the selected temperature unit."
AgEVAControlFollow.eVAControlFollowMaxFuelMass.__doc__ = "Maximum Fuel Mass - the maximum fuel mass of the spacecraft; this parameter specifically applies to Finite Maneuver segments that are being executed in Backward Sequences. Enter a value in the selected mass unit (e.g. kg)."
AgEVAControlFollow.eVAControlFollowTankVolume.__doc__ = "Tank Volume - the volume of the fuel tank. Enter a value in the selected distance unit cubed (e.g. m^3). The minimum value is 1e-019 m^3."
AgEVAControlFollow.eVAControlFollowXOffset.__doc__ = "X Offset - the distance that the spacecraft will be offset from the leader's body frame along the X axis."
AgEVAControlFollow.eVAControlFollowYOffset.__doc__ = "Y Offset - the distance that the spacecraft will be offset from the leader's body frame along the Y axis."
AgEVAControlFollow.eVAControlFollowZOffset.__doc__ = "Z Offset - the distance that the spacecraft will be offset from the leader's body frame along the Z axis."

agcls.AgTypeNameMap["AgEVAControlFollow"] = AgEVAControlFollow

class AgEVAControlInitState(IntEnum):
    """Initial State segment properties that can be selected as control parameters for a Target Sequence."""
    # Fuel Mass - the mass of the spacecraft propellant. Enter a value in the selected mass unit (e.g. kg).
    eVAControlInitStateFuelMass = 300
    # Vx Component - the X component of the spacecraft velocity vector.
    eVAControlInitStateCartesianVx = 301
    # Vy Component - the Y component of the spacecraft velocity vector.
    eVAControlInitStateCartesianVy = 302
    # Vz Component - the Z component of the spacecraft velocity vector.
    eVAControlInitStateCartesianVz = 303
    # X Component - the X component of the spacecraft position vector.
    eVAControlInitStateCartesianX = 304
    # Y Component - the Y component of the spacecraft position vector.
    eVAControlInitStateCartesianY = 305
    # Z Component - the Z component of the spacecraft position vector.
    eVAControlInitStateCartesianZ = 306
    # Drag Coefficient (Cd) - the dimensionless drag coefficient associated with the drag area.
    eVAControlInitStateCd = 307
    # Solar Radiation Pressure (Spherical) Coefficient (Cr) - the reflectivity of the spacecraft used for solar radiation pressure calculations, where 2.0 is fully reflective and 1.0 is not reflective at all.
    eVAControlInitStateCr = 308
    # Drag Area - the cross-sectional area of the spacecraft assumed perpendicular to the direction of motion, used for atmospheric drag calculations. Enter a value in the selected distance unit squared.
    eVAControlInitStateDragArea = 309
    # Dry Mass - the mass of the spacecraft exclusive of propellant. Enter a value in the selected mass unit (e.g. kg).
    eVAControlInitStateDryMass = 310
    # Epoch - the orbit epoch.
    eVAControlInitStateEpoch = 311
    # Fuel Density - the density of the fuel tank.
    eVAControlInitStateFuelDensity = 312
    # GPS Solar Radiation Pressure K1 - if you are using a non-spherical SRP model, this field defines the model's K1 (scale) value.
    eVAControlInitStateK1 = 313
    # GPS Solar Radiation Pressure K2 - if you are using a non-spherical SRP model, this field defines the model's K2 (Y bias) value.
    eVAControlInitStateK2 = 314
    # Eccentricity - the ratio of the distance between the foci to the major axis of the orbital ellipse. Dimensionless.
    eVAControlInitStateKeplerianEcc = 315
    # Inclination - the angle from the +Z axis of the coordinate system to the angular momentum vector of the spacecraft's orbit.
    eVAControlInitStateKeplerianInc = 316
    # Right Ascension of Ascending Node - the angle between the X direction of the coordinate system and the point where the orbit crosses the X-Y plane in the +Z direction.
    eVAControlInitStateKeplerianRAAN = 317
    # Semimajor Axis - half the length of the major (longest) axis of the orbital ellipse.
    eVAControlInitStateKeplerianSMA = 318
    # True Anomaly - the angle from the periapsis of the orbit to the spacecraft's position vector, measured in the direction of spacecraft motion.
    eVAControlInitStateKeplerianTA = 319
    # Argument of Periapsis - the angle measured in the direction of spacecraft motion, in the orbit plane, from the ascending node to the periapsis of the orbit.
    eVAControlInitStateKeplerianW = 320
    # Radiation Pressure (Albedo/Thermal) Area - the cross-sectional area of the spacecraft assumed perpendicular to the direction of central body radiation, used for central body radiation (albedo / thermal pressure) calculations.
    eVAControlInitStateRadiationPressureArea = 327
    # Radiation Pressure (Albedo/Thermal) Coefficient (Ck) - the reflectivity of the spacecraft used for central body radiation pressure (albedo / thermal pressure) calculations, where 2.0 is fully reflective and 1.0 is not reflective at all.
    eVAControlInitStateCk = 328
    # Velocity Azimuth - the angle in the spacecraft local horizontal plane between the projection of the velocity vector onto that plane and the local +Z direction measured as positive in the clockwise direction from north.
    eVAControlInitStateSphericalAz = 329
    # Declination - the angle from the X-Y plane of the coordinate system to the spacecraft position vector.
    eVAControlInitStateSphericalDec = 330
    # Horizontal Flight Path Angle - the complement of the angle between the spacecraft velocity vector and the radius vector (90 deg minus the vertical flight path angle).
    eVAControlInitStateSphericalHorizFPA = 331
    # Right Ascension - angle measured in the inertial equatorial plane from the inertial X axis in a right-handed sense about the inertial Z axis to the spacecraft position vector.
    eVAControlInitStateSphericalRA = 332
    # Radius Magnitude - the magnitude of the spacecraft position vector.
    eVAControlInitStateSphericalRMag = 333
    # Velocity Magnitude - the magnitude of the spacecraft velocity vector.
    eVAControlInitStateSphericalVMag = 334
    # Solar Radiation Pressure (Spherical) Area - the cross-sectional area of the spacecraft assumed perpendicular to the direction of solar radiation, used for solar radiation calculations.
    eVAControlInitStateSRPArea = 335
    # Tank Pressure - the fuel tank pressure.
    eVAControlInitStateTankPressure = 336
    # Tank Temperature - the temperature of the fuel tank.
    eVAControlInitStateTankTemp = 337
    # Declination of Incoming Asymptote - the declination of the incoming asymptote in the selected coordinate system.
    eVAControlInitStateTargetVecInAsympDec = 338
    # Right Ascension of Incoming Asymptote - the right ascension of the hyperbolic incoming asymptote in the selected coordinate system.
    eVAControlInitStateTargetVecInAsympRA = 339
    # Velocity Azimuth at Periapsis - the inertial flight path azimuth of the trajectory measured at periapsis.
    eVAControlInitStateTargetVecInVelAzAtPeriapsis = 340
    # C3 Energy - the energy of the orbit, computed as - mu / a, where mu is the gravity constant of the central body and a is the semimajor axis.
    eVAControlInitStateTargetVecInC3 = 341
    # Radius of Periapsis - distance from the center of mass of the central body to the periapsis of the hyperbolic orbit.
    eVAControlInitStateTargetVecInRadOfPeriapsis = 342
    # True Anomaly - the angle from the periapsis of the orbit to the spacecraft's position vector, measured in the direction of spacecraft motion.
    eVAControlInitStateTargetVecInTrueAnomaly = 343
    # Declination of Outgoing Asymptote - the declination of the outgoing asymptote in the selected coordinate system.
    eVAControlInitStateTargetVecOutAsympDec = 344
    # Right Ascension of Outgoing Asymptote - the right ascension of the hyperbolic outgoing asymptote in the selected coordinate system.
    eVAControlInitStateTargetVecOutAsympRA = 345
    # Velocity Azimuth at Periapsis - the inertial flight path azimuth of the trajectory measured at periapsis.
    eVAControlInitStateTargetVecOutVelAzAtPeriapsis = 346
    # C3 Energy - the energy of the orbit, computed as - mu / a, where mu is the gravity constant of the central body and a is the semimajor axis.
    eVAControlInitStateTargetVecOutC3 = 347
    # Radius of Periapsis - distance from the center of mass of the central body to the periapsis of the hyperbolic orbit.
    eVAControlInitStateTargetVecOutRadOfPeriapsis = 348
    # True Anomaly - the angle from the periapsis of the orbit to the spacecraft's position vector, measured in the direction of spacecraft motion.
    eVAControlInitStateTargetVecOutTrueAnomaly = 349
    # Maximum Fuel Mass - the maximum fuel mass of the spacecraft; this parameter specifically applies to Finite Maneuver segments that are being executed in Backward Sequences.
    eVAControlInitStateMaxFuelMass = 350
    # Tank Volume - the volume of the fuel tank.
    eVAControlInitStateTankVolume = 351
    # G - Magnitude of orbital angular momentum, sqrt(GM * p).
    eVAControlInitStateDelaunayG = 352
    # H - Z component of orbital angular momentum, G cos(inc).
    eVAControlInitStateDelaunayH = 353
    # Inclination - The angle between the angular momentum vector (perpendicular to the plane of the orbit) and the inertial Z axis.
    eVAControlInitStateDelaunayInc = 354
    # L - Related to two-body orbital energy, sqrt(GM * a)
    eVAControlInitStateDelaunayL = 355
    # Mean Anomaly - The angle from the eccentricity vector to a position vector where the satellite would be if it were always moving at its average angular rate.
    eVAControlInitStateDelaunayMeanAnomaly = 356
    # Right Ascension of Ascending Node - The angle from the inertial X axis to the ascending node measured in a right-handed sense about the inertial Z axis in the equatorial plane.
    eVAControlInitStateDelaunayRAAN = 357
    # Semi-latus Rectum - Distance from focus to orbit at true anomaly of 90 degrees
    eVAControlInitStateDelaunaySemiLatusRectum = 358
    # Semimajor Axis - Half the length of the major (longest) axis of the orbital ellipse.
    eVAControlInitStateDelaunaySMA = 359
    # Argument of Periapsis - The angle from the ascending node to the eccentricity vector measured in the direction of the satellite's motion and in the orbit plane.
    eVAControlInitStateDelaunayW = 360
    # H - With K, describe the shape and position of periapsis of the orbit, ecc * sin(RAAN + w)
    eVAControlInitStateEquinoctialH = 361
    # K - With H, describe the shape and position of periapsis of the orbit, ecc * cos(RAAN + w)
    eVAControlInitStateEquinoctialK = 362
    # Mean Longitude - RAAN + w + M
    eVAControlInitStateEquinoctialMeanLongitude = 363
    # Mean Motion - The number of orbits per day (86400 sec/period), based on assumed two-body motion.
    eVAControlInitStateEquinoctialMeanMotion = 364
    # P - With Q, describes the orientation of the orbit plane, tan(inc/2) * sin(RAAN)
    eVAControlInitStateEquinoctialP = 365
    # Q - With P, describes the orientation of the orbit plane, tan(inc/2) * cos(RAAN)
    eVAControlInitStateEquinoctialQ = 366
    # Semimajor Axis - Half the length of the major (longest) axis of the orbital ellipse.
    eVAControlInitStateEquinoctialSMA = 367
    # Altitude - The object's position above or below the reference ellipsoid. Altitude is measured along a normal to the surface of the reference ellipsoid.
    eVAControlInitStateMixedSphericalAltitude = 368
    # Azimuth - The angle in the satellite local horizontal plane between the projection of the inertial velocity vector onto this plane and the local north direction measured as positive in the clockwise direction.
    eVAControlInitStateMixedSphericalAzimuth = 369
    # Horizontal Flight Path Angle - The complement of the angle between the inertial velocity vector and the radius vector.
    eVAControlInitStateMixedSphericalHorizFPA = 370
    # Latitude - The geodetic latitude of a point is the angle between the normal to the reference ellipsoid that passes through the satellite position and the equatorial plane.
    eVAControlInitStateMixedSphericalLatitude = 371
    # Longitude
    eVAControlInitStateMixedSphericalLongitude = 372
    # Vertical Flight Path Angle -  The angle between the inertial velocity vector and the radius vector.
    eVAControlInitStateMixedSphericalVerticalFPA = 373
    # Velocity Magnitude - The magnitude of the inertial velocity vector.
    eVAControlInitStateMixedSphericalVMag = 374
    # Vertical Flight Path Angle -  The angle between the inertial velocity vector and the radius vector.
    eVAControlInitStateSphericalVerticalFPA = 375
    # Apoapsis Altitude - Shape Parameter - Distance from the surface of the central body to the point of maximum radius in the orbit.
    eVAControlInitStateKeplerianApoapsisAltShape = 376
    # Apoapsis Altitude - Size Parameter - Distance from the surface of the central body to the point of maximum radius in the orbit.
    eVAControlInitStateKeplerianApoapsisAltSize = 377
    # Apoapsis Radius - Shape Parameter - Distance from the center of the central body to the point of maximum radius in the orbit.
    eVAControlInitStateKeplerianApoapsisRadShape = 378
    # Apoapsis Radius - Size Parameter - Distance from the center of the central body to the point of maximum radius in the orbit.
    eVAControlInitStateKeplerianApoapsisRadSize = 379
    # Argument of Latitude - The sum of the True Anomaly and the Argument of Perigee.
    eVAControlInitStateKeplerianArgLat = 380
    # Eccentric Anomaly - Angle measured with an origin at the center of the ellipse from the direction of perigee to a point on a circumscribing circle from which a line perpendicular to the SMA intersects the position of the satellite on the ellipse.
    eVAControlInitStateKeplerianEccAnomaly = 381
    # Longitude of Ascending Node - Longitude of the Ascending Node is the Earth-fixed longitude where the satellite has crossed the inertial equator from south to north based on an assumption of two-body motion.
    eVAControlInitStateKeplerianLAN = 382
    # Mean Anomaly - The angle from the eccentricity vector to a position vector where the satellite would be if it were always moving at its average angular rate.
    eVAControlInitStateKeplerianMeanAnomaly = 383
    # Mean Motion - The number of orbits per day (86400 sec/period), based on assumed two-body motion.
    eVAControlInitStateKeplerianMeanMotion = 384
    # Periapsis Altitude - Shape Parameter - Distance from the surface of the central body to the point of minimum radius in the orbit.
    eVAControlInitStateKeplerianPeriapsisAltShape = 385
    # Periapsis Altitude - Size Parameter - Distance from the surface of the central body to the point of minimum radius in the orbit.
    eVAControlInitStateKeplerianPeriapsisAltSize = 386
    # Periapsis Radius - Shape Parameter - Distance from the center of the central body to the point of minimum radius in the orbit.
    eVAControlInitStateKeplerianPeriapsisRadShape = 387
    # Periapsis Radius - Size Parameter - Distance from the surface of the central body to the point of minimum radius in the orbit.
    eVAControlInitStateKeplerianPeriapsisRadSize = 388
    # Period - The duration of one orbit, based on assumed two-body motion.
    eVAControlInitStateKeplerianPeriod = 389
    # Time Past Ascending Node - The elapsed time since the last ascending node crossing based on assumed two-body motion.
    eVAControlInitStateKeplerianTimePastAN = 390
    # Time Past Periapsis - The elapsed time since the last perigee passage based on assumed two-body motion.
    eVAControlInitStateKeplerianTimePastPeriapsis = 391

AgEVAControlInitState.eVAControlInitStateFuelMass.__doc__ = "Fuel Mass - the mass of the spacecraft propellant. Enter a value in the selected mass unit (e.g. kg)."
AgEVAControlInitState.eVAControlInitStateCartesianVx.__doc__ = "Vx Component - the X component of the spacecraft velocity vector."
AgEVAControlInitState.eVAControlInitStateCartesianVy.__doc__ = "Vy Component - the Y component of the spacecraft velocity vector."
AgEVAControlInitState.eVAControlInitStateCartesianVz.__doc__ = "Vz Component - the Z component of the spacecraft velocity vector."
AgEVAControlInitState.eVAControlInitStateCartesianX.__doc__ = "X Component - the X component of the spacecraft position vector."
AgEVAControlInitState.eVAControlInitStateCartesianY.__doc__ = "Y Component - the Y component of the spacecraft position vector."
AgEVAControlInitState.eVAControlInitStateCartesianZ.__doc__ = "Z Component - the Z component of the spacecraft position vector."
AgEVAControlInitState.eVAControlInitStateCd.__doc__ = "Drag Coefficient (Cd) - the dimensionless drag coefficient associated with the drag area."
AgEVAControlInitState.eVAControlInitStateCr.__doc__ = "Solar Radiation Pressure (Spherical) Coefficient (Cr) - the reflectivity of the spacecraft used for solar radiation pressure calculations, where 2.0 is fully reflective and 1.0 is not reflective at all."
AgEVAControlInitState.eVAControlInitStateDragArea.__doc__ = "Drag Area - the cross-sectional area of the spacecraft assumed perpendicular to the direction of motion, used for atmospheric drag calculations. Enter a value in the selected distance unit squared."
AgEVAControlInitState.eVAControlInitStateDryMass.__doc__ = "Dry Mass - the mass of the spacecraft exclusive of propellant. Enter a value in the selected mass unit (e.g. kg)."
AgEVAControlInitState.eVAControlInitStateEpoch.__doc__ = "Epoch - the orbit epoch."
AgEVAControlInitState.eVAControlInitStateFuelDensity.__doc__ = "Fuel Density - the density of the fuel tank."
AgEVAControlInitState.eVAControlInitStateK1.__doc__ = "GPS Solar Radiation Pressure K1 - if you are using a non-spherical SRP model, this field defines the model's K1 (scale) value."
AgEVAControlInitState.eVAControlInitStateK2.__doc__ = "GPS Solar Radiation Pressure K2 - if you are using a non-spherical SRP model, this field defines the model's K2 (Y bias) value."
AgEVAControlInitState.eVAControlInitStateKeplerianEcc.__doc__ = "Eccentricity - the ratio of the distance between the foci to the major axis of the orbital ellipse. Dimensionless."
AgEVAControlInitState.eVAControlInitStateKeplerianInc.__doc__ = "Inclination - the angle from the +Z axis of the coordinate system to the angular momentum vector of the spacecraft's orbit."
AgEVAControlInitState.eVAControlInitStateKeplerianRAAN.__doc__ = "Right Ascension of Ascending Node - the angle between the X direction of the coordinate system and the point where the orbit crosses the X-Y plane in the +Z direction."
AgEVAControlInitState.eVAControlInitStateKeplerianSMA.__doc__ = "Semimajor Axis - half the length of the major (longest) axis of the orbital ellipse."
AgEVAControlInitState.eVAControlInitStateKeplerianTA.__doc__ = "True Anomaly - the angle from the periapsis of the orbit to the spacecraft's position vector, measured in the direction of spacecraft motion."
AgEVAControlInitState.eVAControlInitStateKeplerianW.__doc__ = "Argument of Periapsis - the angle measured in the direction of spacecraft motion, in the orbit plane, from the ascending node to the periapsis of the orbit."
AgEVAControlInitState.eVAControlInitStateRadiationPressureArea.__doc__ = "Radiation Pressure (Albedo/Thermal) Area - the cross-sectional area of the spacecraft assumed perpendicular to the direction of central body radiation, used for central body radiation (albedo / thermal pressure) calculations."
AgEVAControlInitState.eVAControlInitStateCk.__doc__ = "Radiation Pressure (Albedo/Thermal) Coefficient (Ck) - the reflectivity of the spacecraft used for central body radiation pressure (albedo / thermal pressure) calculations, where 2.0 is fully reflective and 1.0 is not reflective at all."
AgEVAControlInitState.eVAControlInitStateSphericalAz.__doc__ = "Velocity Azimuth - the angle in the spacecraft local horizontal plane between the projection of the velocity vector onto that plane and the local +Z direction measured as positive in the clockwise direction from north."
AgEVAControlInitState.eVAControlInitStateSphericalDec.__doc__ = "Declination - the angle from the X-Y plane of the coordinate system to the spacecraft position vector."
AgEVAControlInitState.eVAControlInitStateSphericalHorizFPA.__doc__ = "Horizontal Flight Path Angle - the complement of the angle between the spacecraft velocity vector and the radius vector (90 deg minus the vertical flight path angle)."
AgEVAControlInitState.eVAControlInitStateSphericalRA.__doc__ = "Right Ascension - angle measured in the inertial equatorial plane from the inertial X axis in a right-handed sense about the inertial Z axis to the spacecraft position vector."
AgEVAControlInitState.eVAControlInitStateSphericalRMag.__doc__ = "Radius Magnitude - the magnitude of the spacecraft position vector."
AgEVAControlInitState.eVAControlInitStateSphericalVMag.__doc__ = "Velocity Magnitude - the magnitude of the spacecraft velocity vector."
AgEVAControlInitState.eVAControlInitStateSRPArea.__doc__ = "Solar Radiation Pressure (Spherical) Area - the cross-sectional area of the spacecraft assumed perpendicular to the direction of solar radiation, used for solar radiation calculations."
AgEVAControlInitState.eVAControlInitStateTankPressure.__doc__ = "Tank Pressure - the fuel tank pressure."
AgEVAControlInitState.eVAControlInitStateTankTemp.__doc__ = "Tank Temperature - the temperature of the fuel tank."
AgEVAControlInitState.eVAControlInitStateTargetVecInAsympDec.__doc__ = "Declination of Incoming Asymptote - the declination of the incoming asymptote in the selected coordinate system."
AgEVAControlInitState.eVAControlInitStateTargetVecInAsympRA.__doc__ = "Right Ascension of Incoming Asymptote - the right ascension of the hyperbolic incoming asymptote in the selected coordinate system."
AgEVAControlInitState.eVAControlInitStateTargetVecInVelAzAtPeriapsis.__doc__ = "Velocity Azimuth at Periapsis - the inertial flight path azimuth of the trajectory measured at periapsis."
AgEVAControlInitState.eVAControlInitStateTargetVecInC3.__doc__ = "C3 Energy - the energy of the orbit, computed as - mu / a, where mu is the gravity constant of the central body and a is the semimajor axis."
AgEVAControlInitState.eVAControlInitStateTargetVecInRadOfPeriapsis.__doc__ = "Radius of Periapsis - distance from the center of mass of the central body to the periapsis of the hyperbolic orbit."
AgEVAControlInitState.eVAControlInitStateTargetVecInTrueAnomaly.__doc__ = "True Anomaly - the angle from the periapsis of the orbit to the spacecraft's position vector, measured in the direction of spacecraft motion."
AgEVAControlInitState.eVAControlInitStateTargetVecOutAsympDec.__doc__ = "Declination of Outgoing Asymptote - the declination of the outgoing asymptote in the selected coordinate system."
AgEVAControlInitState.eVAControlInitStateTargetVecOutAsympRA.__doc__ = "Right Ascension of Outgoing Asymptote - the right ascension of the hyperbolic outgoing asymptote in the selected coordinate system."
AgEVAControlInitState.eVAControlInitStateTargetVecOutVelAzAtPeriapsis.__doc__ = "Velocity Azimuth at Periapsis - the inertial flight path azimuth of the trajectory measured at periapsis."
AgEVAControlInitState.eVAControlInitStateTargetVecOutC3.__doc__ = "C3 Energy - the energy of the orbit, computed as - mu / a, where mu is the gravity constant of the central body and a is the semimajor axis."
AgEVAControlInitState.eVAControlInitStateTargetVecOutRadOfPeriapsis.__doc__ = "Radius of Periapsis - distance from the center of mass of the central body to the periapsis of the hyperbolic orbit."
AgEVAControlInitState.eVAControlInitStateTargetVecOutTrueAnomaly.__doc__ = "True Anomaly - the angle from the periapsis of the orbit to the spacecraft's position vector, measured in the direction of spacecraft motion."
AgEVAControlInitState.eVAControlInitStateMaxFuelMass.__doc__ = "Maximum Fuel Mass - the maximum fuel mass of the spacecraft; this parameter specifically applies to Finite Maneuver segments that are being executed in Backward Sequences."
AgEVAControlInitState.eVAControlInitStateTankVolume.__doc__ = "Tank Volume - the volume of the fuel tank."
AgEVAControlInitState.eVAControlInitStateDelaunayG.__doc__ = "G - Magnitude of orbital angular momentum, sqrt(GM * p)."
AgEVAControlInitState.eVAControlInitStateDelaunayH.__doc__ = "H - Z component of orbital angular momentum, G cos(inc)."
AgEVAControlInitState.eVAControlInitStateDelaunayInc.__doc__ = "Inclination - The angle between the angular momentum vector (perpendicular to the plane of the orbit) and the inertial Z axis."
AgEVAControlInitState.eVAControlInitStateDelaunayL.__doc__ = "L - Related to two-body orbital energy, sqrt(GM * a)"
AgEVAControlInitState.eVAControlInitStateDelaunayMeanAnomaly.__doc__ = "Mean Anomaly - The angle from the eccentricity vector to a position vector where the satellite would be if it were always moving at its average angular rate."
AgEVAControlInitState.eVAControlInitStateDelaunayRAAN.__doc__ = "Right Ascension of Ascending Node - The angle from the inertial X axis to the ascending node measured in a right-handed sense about the inertial Z axis in the equatorial plane."
AgEVAControlInitState.eVAControlInitStateDelaunaySemiLatusRectum.__doc__ = "Semi-latus Rectum - Distance from focus to orbit at true anomaly of 90 degrees"
AgEVAControlInitState.eVAControlInitStateDelaunaySMA.__doc__ = "Semimajor Axis - Half the length of the major (longest) axis of the orbital ellipse."
AgEVAControlInitState.eVAControlInitStateDelaunayW.__doc__ = "Argument of Periapsis - The angle from the ascending node to the eccentricity vector measured in the direction of the satellite's motion and in the orbit plane."
AgEVAControlInitState.eVAControlInitStateEquinoctialH.__doc__ = "H - With K, describe the shape and position of periapsis of the orbit, ecc * sin(RAAN + w)"
AgEVAControlInitState.eVAControlInitStateEquinoctialK.__doc__ = "K - With H, describe the shape and position of periapsis of the orbit, ecc * cos(RAAN + w)"
AgEVAControlInitState.eVAControlInitStateEquinoctialMeanLongitude.__doc__ = "Mean Longitude - RAAN + w + M"
AgEVAControlInitState.eVAControlInitStateEquinoctialMeanMotion.__doc__ = "Mean Motion - The number of orbits per day (86400 sec/period), based on assumed two-body motion."
AgEVAControlInitState.eVAControlInitStateEquinoctialP.__doc__ = "P - With Q, describes the orientation of the orbit plane, tan(inc/2) * sin(RAAN)"
AgEVAControlInitState.eVAControlInitStateEquinoctialQ.__doc__ = "Q - With P, describes the orientation of the orbit plane, tan(inc/2) * cos(RAAN)"
AgEVAControlInitState.eVAControlInitStateEquinoctialSMA.__doc__ = "Semimajor Axis - Half the length of the major (longest) axis of the orbital ellipse."
AgEVAControlInitState.eVAControlInitStateMixedSphericalAltitude.__doc__ = "Altitude - The object's position above or below the reference ellipsoid. Altitude is measured along a normal to the surface of the reference ellipsoid."
AgEVAControlInitState.eVAControlInitStateMixedSphericalAzimuth.__doc__ = "Azimuth - The angle in the satellite local horizontal plane between the projection of the inertial velocity vector onto this plane and the local north direction measured as positive in the clockwise direction."
AgEVAControlInitState.eVAControlInitStateMixedSphericalHorizFPA.__doc__ = "Horizontal Flight Path Angle - The complement of the angle between the inertial velocity vector and the radius vector."
AgEVAControlInitState.eVAControlInitStateMixedSphericalLatitude.__doc__ = "Latitude - The geodetic latitude of a point is the angle between the normal to the reference ellipsoid that passes through the satellite position and the equatorial plane."
AgEVAControlInitState.eVAControlInitStateMixedSphericalLongitude.__doc__ = "Longitude"
AgEVAControlInitState.eVAControlInitStateMixedSphericalVerticalFPA.__doc__ = "Vertical Flight Path Angle -  The angle between the inertial velocity vector and the radius vector."
AgEVAControlInitState.eVAControlInitStateMixedSphericalVMag.__doc__ = "Velocity Magnitude - The magnitude of the inertial velocity vector."
AgEVAControlInitState.eVAControlInitStateSphericalVerticalFPA.__doc__ = "Vertical Flight Path Angle -  The angle between the inertial velocity vector and the radius vector."
AgEVAControlInitState.eVAControlInitStateKeplerianApoapsisAltShape.__doc__ = "Apoapsis Altitude - Shape Parameter - Distance from the surface of the central body to the point of maximum radius in the orbit."
AgEVAControlInitState.eVAControlInitStateKeplerianApoapsisAltSize.__doc__ = "Apoapsis Altitude - Size Parameter - Distance from the surface of the central body to the point of maximum radius in the orbit."
AgEVAControlInitState.eVAControlInitStateKeplerianApoapsisRadShape.__doc__ = "Apoapsis Radius - Shape Parameter - Distance from the center of the central body to the point of maximum radius in the orbit."
AgEVAControlInitState.eVAControlInitStateKeplerianApoapsisRadSize.__doc__ = "Apoapsis Radius - Size Parameter - Distance from the center of the central body to the point of maximum radius in the orbit."
AgEVAControlInitState.eVAControlInitStateKeplerianArgLat.__doc__ = "Argument of Latitude - The sum of the True Anomaly and the Argument of Perigee."
AgEVAControlInitState.eVAControlInitStateKeplerianEccAnomaly.__doc__ = "Eccentric Anomaly - Angle measured with an origin at the center of the ellipse from the direction of perigee to a point on a circumscribing circle from which a line perpendicular to the SMA intersects the position of the satellite on the ellipse."
AgEVAControlInitState.eVAControlInitStateKeplerianLAN.__doc__ = "Longitude of Ascending Node - Longitude of the Ascending Node is the Earth-fixed longitude where the satellite has crossed the inertial equator from south to north based on an assumption of two-body motion."
AgEVAControlInitState.eVAControlInitStateKeplerianMeanAnomaly.__doc__ = "Mean Anomaly - The angle from the eccentricity vector to a position vector where the satellite would be if it were always moving at its average angular rate."
AgEVAControlInitState.eVAControlInitStateKeplerianMeanMotion.__doc__ = "Mean Motion - The number of orbits per day (86400 sec/period), based on assumed two-body motion."
AgEVAControlInitState.eVAControlInitStateKeplerianPeriapsisAltShape.__doc__ = "Periapsis Altitude - Shape Parameter - Distance from the surface of the central body to the point of minimum radius in the orbit."
AgEVAControlInitState.eVAControlInitStateKeplerianPeriapsisAltSize.__doc__ = "Periapsis Altitude - Size Parameter - Distance from the surface of the central body to the point of minimum radius in the orbit."
AgEVAControlInitState.eVAControlInitStateKeplerianPeriapsisRadShape.__doc__ = "Periapsis Radius - Shape Parameter - Distance from the center of the central body to the point of minimum radius in the orbit."
AgEVAControlInitState.eVAControlInitStateKeplerianPeriapsisRadSize.__doc__ = "Periapsis Radius - Size Parameter - Distance from the surface of the central body to the point of minimum radius in the orbit."
AgEVAControlInitState.eVAControlInitStateKeplerianPeriod.__doc__ = "Period - The duration of one orbit, based on assumed two-body motion."
AgEVAControlInitState.eVAControlInitStateKeplerianTimePastAN.__doc__ = "Time Past Ascending Node - The elapsed time since the last ascending node crossing based on assumed two-body motion."
AgEVAControlInitState.eVAControlInitStateKeplerianTimePastPeriapsis.__doc__ = "Time Past Periapsis - The elapsed time since the last perigee passage based on assumed two-body motion."

agcls.AgTypeNameMap["AgEVAControlInitState"] = AgEVAControlInitState

class AgEVAControlManeuver(IntEnum):
    """Maneuver segment properties that can be selected as control parameters for a Target Sequence."""
    # The Cartesian X component of the thrust vector.
    eVAControlManeuverFiniteCartesianX = 400
    # The Cartesian Y component of the thrust vector.
    eVAControlManeuverFiniteCartesianY = 401
    # The Cartesian Z component of the thrust vector.
    eVAControlManeuverFiniteCartesianZ = 402
    # The Euler A (Phi) component of the rotation from the reference axes to the body frame.
    eVAControlManeuverFiniteEulerAngles1 = 403
    # The Euler B (Theta) component of the rotation from the reference axes to the body frame.
    eVAControlManeuverFiniteEulerAngles2 = 404
    # The Euler C (Psi) component of the rotation from the reference axes to the body frame.
    eVAControlManeuverFiniteEulerAngles3 = 405
    # The spherical azimuth component of the thrust vector.
    eVAControlManeuverFiniteSphericalAz = 406
    # The spherical elevation component of the thrust vector.
    eVAControlManeuverFiniteSphericalElev = 407
    # The Cartesian X component of the thrust vector.
    eVAControlManeuverImpulsiveCartesianX = 408
    # The Cartesian Y component of the thrust vector.
    eVAControlManeuverImpulsiveCartesianY = 409
    # The Cartesian Z component of the thrust vector.
    eVAControlManeuverImpulsiveCartesianZ = 410
    # The Euler A (Phi) component of the rotation from the reference axes to the body frame.
    eVAControlManeuverImpulsiveEulerAngles1 = 411
    # The Euler B (Theta) component of the rotation from the reference axes to the body frame.
    eVAControlManeuverImpulsiveEulerAngles2 = 412
    # The Euler C (Psi) component of the rotation from the reference axes to the body frame.
    eVAControlManeuverImpulsiveEulerAngles3 = 413
    # The spherical azimuth component of the thrust vector.
    eVAControlManeuverImpulsiveSphericalAz = 414
    # The spherical elevation component of the thrust vector.
    eVAControlManeuverImpulsiveSphericalElev = 415
    # The spherical magnitude component of the thrust vector.
    eVAControlManeuverImpulsiveSphericalMag = 416
    # The burn center bias of the thrust.
    eVAControlManeuverFiniteBurnCenterBias = 417
    # The thrust efficiency value.
    eVAControlManeuverFiniteThrustEfficiency = 418
    # The time varying azimuth polynomial constant term.
    eVAControlManeuverFiniteAz0 = 419
    # The time varying azimuth polynomial linear term.
    eVAControlManeuverFiniteAz1 = 420
    # The time varying azimuth polynomial quadratic term.
    eVAControlManeuverFiniteAz2 = 421
    # The time varying azimuth polynomial cubic term.
    eVAControlManeuverFiniteAz3 = 422
    # The time varying azimuth polynomial quartic term.
    eVAControlManeuverFiniteAz4 = 423
    # The time varying azimuth sine amplitude term.
    eVAControlManeuverFiniteAzA = 424
    # The time varying azimuth sine frequency term.
    eVAControlManeuverFiniteAzF = 425
    # The time varying azimuth sine phase term.
    eVAControlManeuverFiniteAzP = 426
    # The time varying elevation polynomial constant term.
    eVAControlManeuverFiniteEl0 = 427
    # The time varying elevation polynomial linear term.
    eVAControlManeuverFiniteEl1 = 428
    # The time varying elevation polynomial quadratic term.
    eVAControlManeuverFiniteEl2 = 429
    # The time varying elevation polynomial cubic term.
    eVAControlManeuverFiniteEl3 = 430
    # The time varying elevation polynomial quartic term.
    eVAControlManeuverFiniteEl4 = 431
    # The time varying elevation sine amplitude term.
    eVAControlManeuverFiniteElA = 432
    # The time varying elevation sine frequency term.
    eVAControlManeuverFiniteElF = 433
    # The time varying elevation sine phase term.
    eVAControlManeuverFiniteElP = 434

AgEVAControlManeuver.eVAControlManeuverFiniteCartesianX.__doc__ = "The Cartesian X component of the thrust vector."
AgEVAControlManeuver.eVAControlManeuverFiniteCartesianY.__doc__ = "The Cartesian Y component of the thrust vector."
AgEVAControlManeuver.eVAControlManeuverFiniteCartesianZ.__doc__ = "The Cartesian Z component of the thrust vector."
AgEVAControlManeuver.eVAControlManeuverFiniteEulerAngles1.__doc__ = "The Euler A (Phi) component of the rotation from the reference axes to the body frame."
AgEVAControlManeuver.eVAControlManeuverFiniteEulerAngles2.__doc__ = "The Euler B (Theta) component of the rotation from the reference axes to the body frame."
AgEVAControlManeuver.eVAControlManeuverFiniteEulerAngles3.__doc__ = "The Euler C (Psi) component of the rotation from the reference axes to the body frame."
AgEVAControlManeuver.eVAControlManeuverFiniteSphericalAz.__doc__ = "The spherical azimuth component of the thrust vector."
AgEVAControlManeuver.eVAControlManeuverFiniteSphericalElev.__doc__ = "The spherical elevation component of the thrust vector."
AgEVAControlManeuver.eVAControlManeuverImpulsiveCartesianX.__doc__ = "The Cartesian X component of the thrust vector."
AgEVAControlManeuver.eVAControlManeuverImpulsiveCartesianY.__doc__ = "The Cartesian Y component of the thrust vector."
AgEVAControlManeuver.eVAControlManeuverImpulsiveCartesianZ.__doc__ = "The Cartesian Z component of the thrust vector."
AgEVAControlManeuver.eVAControlManeuverImpulsiveEulerAngles1.__doc__ = "The Euler A (Phi) component of the rotation from the reference axes to the body frame."
AgEVAControlManeuver.eVAControlManeuverImpulsiveEulerAngles2.__doc__ = "The Euler B (Theta) component of the rotation from the reference axes to the body frame."
AgEVAControlManeuver.eVAControlManeuverImpulsiveEulerAngles3.__doc__ = "The Euler C (Psi) component of the rotation from the reference axes to the body frame."
AgEVAControlManeuver.eVAControlManeuverImpulsiveSphericalAz.__doc__ = "The spherical azimuth component of the thrust vector."
AgEVAControlManeuver.eVAControlManeuverImpulsiveSphericalElev.__doc__ = "The spherical elevation component of the thrust vector."
AgEVAControlManeuver.eVAControlManeuverImpulsiveSphericalMag.__doc__ = "The spherical magnitude component of the thrust vector."
AgEVAControlManeuver.eVAControlManeuverFiniteBurnCenterBias.__doc__ = "The burn center bias of the thrust."
AgEVAControlManeuver.eVAControlManeuverFiniteThrustEfficiency.__doc__ = "The thrust efficiency value."
AgEVAControlManeuver.eVAControlManeuverFiniteAz0.__doc__ = "The time varying azimuth polynomial constant term."
AgEVAControlManeuver.eVAControlManeuverFiniteAz1.__doc__ = "The time varying azimuth polynomial linear term."
AgEVAControlManeuver.eVAControlManeuverFiniteAz2.__doc__ = "The time varying azimuth polynomial quadratic term."
AgEVAControlManeuver.eVAControlManeuverFiniteAz3.__doc__ = "The time varying azimuth polynomial cubic term."
AgEVAControlManeuver.eVAControlManeuverFiniteAz4.__doc__ = "The time varying azimuth polynomial quartic term."
AgEVAControlManeuver.eVAControlManeuverFiniteAzA.__doc__ = "The time varying azimuth sine amplitude term."
AgEVAControlManeuver.eVAControlManeuverFiniteAzF.__doc__ = "The time varying azimuth sine frequency term."
AgEVAControlManeuver.eVAControlManeuverFiniteAzP.__doc__ = "The time varying azimuth sine phase term."
AgEVAControlManeuver.eVAControlManeuverFiniteEl0.__doc__ = "The time varying elevation polynomial constant term."
AgEVAControlManeuver.eVAControlManeuverFiniteEl1.__doc__ = "The time varying elevation polynomial linear term."
AgEVAControlManeuver.eVAControlManeuverFiniteEl2.__doc__ = "The time varying elevation polynomial quadratic term."
AgEVAControlManeuver.eVAControlManeuverFiniteEl3.__doc__ = "The time varying elevation polynomial cubic term."
AgEVAControlManeuver.eVAControlManeuverFiniteEl4.__doc__ = "The time varying elevation polynomial quartic term."
AgEVAControlManeuver.eVAControlManeuverFiniteElA.__doc__ = "The time varying elevation sine amplitude term."
AgEVAControlManeuver.eVAControlManeuverFiniteElF.__doc__ = "The time varying elevation sine frequency term."
AgEVAControlManeuver.eVAControlManeuverFiniteElP.__doc__ = "The time varying elevation sine phase term."

agcls.AgTypeNameMap["AgEVAControlManeuver"] = AgEVAControlManeuver

class AgEVAControlLaunch(IntEnum):
    """Launch segment properties that can be selected as control parameters for a Target Sequence."""
    # The date and time of the launch.
    eVAControlLaunchEpoch = 500
    # The geodetic latitude of the launch location.
    eVAControlLaunchGeodeticLat = 501
    # The geodetic longitude of the launch location.
    eVAControlLaunchGeodeticLon = 502
    # The geodetic altitude of the launch location.
    eVAControlLaunchGeodeticAlt = 503
    # The geocentric latitude of the launch location.
    eVAControlLaunchGeocentricLat = 504
    # The geocentric longitude of the launch location.
    eVAControlLaunchGeocentricLon = 505
    # The geocentric radius of the launch location.
    eVAControlLaunchGeocentricRad = 506
    # The time of flight, from launch until burnout.
    eVAControlLaunchTimeOfFlight = 507
    # The geocentric latitude of the burnout point.
    eVAControlLaunchBurnoutGeocentricLat = 508
    # The geocentric longitude of the burnout point.
    eVAControlLaunchBurnoutGeocentricLon = 509
    # The geocentric radius of the burnout point.
    eVAControlLaunchBurnoutGeocentricRad = 510
    # The geodetic latitude of the burnout point.
    eVAControlLaunchBurnoutGeodeticLat = 511
    # The geodetic longitude of the burnout point.
    eVAControlLaunchBurnoutGeodeticLon = 512
    # The geodetic altitude of the burnout point.
    eVAControlLaunchBurnoutGeodeticAlt = 513
    # The geodetic azimuth of the launch trajectory.
    eVAControlLaunchBurnoutAzAltAz = 514
    # The geodetic downrange distance of the burnout point.
    eVAControlLaunchBurnoutAzAltDownrangeDist = 515
    # The geodetic altitude of the burnout point.
    eVAControlLaunchBurnoutAzAltAlt = 516
    # The geocentric azimuth of the launch trajectory.
    eVAControlLaunchBurnoutAzRadAz = 517
    # The geocentric downrange distance of the burnout point.
    eVAControlLaunchBurnoutAzRadDownrangeDist = 518
    # The geocentric radius of the burnout point.
    eVAControlLaunchBurnoutAzRadRad = 519
    # The burnout velocity in the fixed frame.
    eVAControlLaunchBurnoutFixedVelocity = 520
    # The burnout velocity in the inertial frame.
    eVAControlLaunchBurnoutInertialVelocity = 521
    # Inertial Velocity Azimuth - the angle from the projection of north in the local horizontal plane to the inertial velocity vector, right handed.
    eVAControlLaunchBurnoutInertialVelocityAzimuth = 522
    # Inertial Horizontal FPA - the angle from the local horizontal to the inertial velocity vector, positive towards radius. It is also 90 degrees minus vertical flight path angle.
    eVAControlLaunchBurnoutInertialHorizontalFPA = 523
    # Dry Mass - the mass of the spacecraft exclusive of propellant.
    eVAControlLaunchDryMass = 524
    # Drag Coefficient (Cd) - the dimensionless drag coefficient associated with the drag area.
    eVAControlLaunchCd = 525
    # Drag Area - the cross-sectional area of the spacecraft assumed perpendicular to the direction of motion, used for atmospheric drag calculations.
    eVAControlLaunchDragArea = 526
    # Solar Radiation Pressure (Spherical) Coefficient (Cr) - the reflectivity of the spacecraft used for solar radiation pressure calculations, where 2.0 is fully reflective and 1.0 is not reflective at all.
    eVAControlLaunchCr = 527
    # Solar Radiation Pressure (Spherical) Area - the cross-sectional area of the spacecraft assumed perpendicular to the direction of solar radiation, used for solar radiation calculations.
    eVAControlLaunchSRPArea = 528
    # Radiation Pressure (Albedo/Thermal) Coefficient (Ck) - the reflectivity of the spacecraft used for central body radiation pressure (albedo / thermal pressure) calculations, where 2.0 is fully reflective and 1.0 is not reflective at all.
    eVAControlLaunchCk = 529
    # Radiation Pressure (Albedo/Thermal) Area - the cross-sectional area of the spacecraft assumed perpendicular to the direction of central body radiation, used for central body radiation (albedo / thermal pressure) calculations.
    eVAControlLaunchRadiationPressureArea = 530
    # GPS Solar Radiation Pressure K1 - if you are using a non-spherical SRP model, this field defines the model's K1 (scale) value.
    eVAControlLaunchK1 = 531
    # GPS Solar Radiation Pressure K2 - if you are using a non-spherical SRP model, this field defines the model's K2 (scale) value.
    eVAControlLaunchK2 = 532
    # The fuel tank pressure.
    eVAControlLaunchTankPressure = 533
    # The volume of the fuel tank.
    eVAControlLaunchTankVolume = 534
    # The fuel tank temperature.
    eVAControlLaunchTankTemp = 535
    # The density of the fuel tank.
    eVAControlLaunchFuelDensity = 536
    # The mass of the spacecraft propellant.
    eVAControlLaunchFuelMass = 537
    # Maximum Fuel Mass - the maximum fuel mass of the spacecraft; this parameter specifically applies to Finite Maneuver segments that are being executed in Backward Sequences.
    eVAControlLaunchMaxFuelMass = 538

AgEVAControlLaunch.eVAControlLaunchEpoch.__doc__ = "The date and time of the launch."
AgEVAControlLaunch.eVAControlLaunchGeodeticLat.__doc__ = "The geodetic latitude of the launch location."
AgEVAControlLaunch.eVAControlLaunchGeodeticLon.__doc__ = "The geodetic longitude of the launch location."
AgEVAControlLaunch.eVAControlLaunchGeodeticAlt.__doc__ = "The geodetic altitude of the launch location."
AgEVAControlLaunch.eVAControlLaunchGeocentricLat.__doc__ = "The geocentric latitude of the launch location."
AgEVAControlLaunch.eVAControlLaunchGeocentricLon.__doc__ = "The geocentric longitude of the launch location."
AgEVAControlLaunch.eVAControlLaunchGeocentricRad.__doc__ = "The geocentric radius of the launch location."
AgEVAControlLaunch.eVAControlLaunchTimeOfFlight.__doc__ = "The time of flight, from launch until burnout."
AgEVAControlLaunch.eVAControlLaunchBurnoutGeocentricLat.__doc__ = "The geocentric latitude of the burnout point."
AgEVAControlLaunch.eVAControlLaunchBurnoutGeocentricLon.__doc__ = "The geocentric longitude of the burnout point."
AgEVAControlLaunch.eVAControlLaunchBurnoutGeocentricRad.__doc__ = "The geocentric radius of the burnout point."
AgEVAControlLaunch.eVAControlLaunchBurnoutGeodeticLat.__doc__ = "The geodetic latitude of the burnout point."
AgEVAControlLaunch.eVAControlLaunchBurnoutGeodeticLon.__doc__ = "The geodetic longitude of the burnout point."
AgEVAControlLaunch.eVAControlLaunchBurnoutGeodeticAlt.__doc__ = "The geodetic altitude of the burnout point."
AgEVAControlLaunch.eVAControlLaunchBurnoutAzAltAz.__doc__ = "The geodetic azimuth of the launch trajectory."
AgEVAControlLaunch.eVAControlLaunchBurnoutAzAltDownrangeDist.__doc__ = "The geodetic downrange distance of the burnout point."
AgEVAControlLaunch.eVAControlLaunchBurnoutAzAltAlt.__doc__ = "The geodetic altitude of the burnout point."
AgEVAControlLaunch.eVAControlLaunchBurnoutAzRadAz.__doc__ = "The geocentric azimuth of the launch trajectory."
AgEVAControlLaunch.eVAControlLaunchBurnoutAzRadDownrangeDist.__doc__ = "The geocentric downrange distance of the burnout point."
AgEVAControlLaunch.eVAControlLaunchBurnoutAzRadRad.__doc__ = "The geocentric radius of the burnout point."
AgEVAControlLaunch.eVAControlLaunchBurnoutFixedVelocity.__doc__ = "The burnout velocity in the fixed frame."
AgEVAControlLaunch.eVAControlLaunchBurnoutInertialVelocity.__doc__ = "The burnout velocity in the inertial frame."
AgEVAControlLaunch.eVAControlLaunchBurnoutInertialVelocityAzimuth.__doc__ = "Inertial Velocity Azimuth - the angle from the projection of north in the local horizontal plane to the inertial velocity vector, right handed."
AgEVAControlLaunch.eVAControlLaunchBurnoutInertialHorizontalFPA.__doc__ = "Inertial Horizontal FPA - the angle from the local horizontal to the inertial velocity vector, positive towards radius. It is also 90 degrees minus vertical flight path angle."
AgEVAControlLaunch.eVAControlLaunchDryMass.__doc__ = "Dry Mass - the mass of the spacecraft exclusive of propellant."
AgEVAControlLaunch.eVAControlLaunchCd.__doc__ = "Drag Coefficient (Cd) - the dimensionless drag coefficient associated with the drag area."
AgEVAControlLaunch.eVAControlLaunchDragArea.__doc__ = "Drag Area - the cross-sectional area of the spacecraft assumed perpendicular to the direction of motion, used for atmospheric drag calculations."
AgEVAControlLaunch.eVAControlLaunchCr.__doc__ = "Solar Radiation Pressure (Spherical) Coefficient (Cr) - the reflectivity of the spacecraft used for solar radiation pressure calculations, where 2.0 is fully reflective and 1.0 is not reflective at all."
AgEVAControlLaunch.eVAControlLaunchSRPArea.__doc__ = "Solar Radiation Pressure (Spherical) Area - the cross-sectional area of the spacecraft assumed perpendicular to the direction of solar radiation, used for solar radiation calculations."
AgEVAControlLaunch.eVAControlLaunchCk.__doc__ = "Radiation Pressure (Albedo/Thermal) Coefficient (Ck) - the reflectivity of the spacecraft used for central body radiation pressure (albedo / thermal pressure) calculations, where 2.0 is fully reflective and 1.0 is not reflective at all."
AgEVAControlLaunch.eVAControlLaunchRadiationPressureArea.__doc__ = "Radiation Pressure (Albedo/Thermal) Area - the cross-sectional area of the spacecraft assumed perpendicular to the direction of central body radiation, used for central body radiation (albedo / thermal pressure) calculations."
AgEVAControlLaunch.eVAControlLaunchK1.__doc__ = "GPS Solar Radiation Pressure K1 - if you are using a non-spherical SRP model, this field defines the model's K1 (scale) value."
AgEVAControlLaunch.eVAControlLaunchK2.__doc__ = "GPS Solar Radiation Pressure K2 - if you are using a non-spherical SRP model, this field defines the model's K2 (scale) value."
AgEVAControlLaunch.eVAControlLaunchTankPressure.__doc__ = "The fuel tank pressure."
AgEVAControlLaunch.eVAControlLaunchTankVolume.__doc__ = "The volume of the fuel tank."
AgEVAControlLaunch.eVAControlLaunchTankTemp.__doc__ = "The fuel tank temperature."
AgEVAControlLaunch.eVAControlLaunchFuelDensity.__doc__ = "The density of the fuel tank."
AgEVAControlLaunch.eVAControlLaunchFuelMass.__doc__ = "The mass of the spacecraft propellant."
AgEVAControlLaunch.eVAControlLaunchMaxFuelMass.__doc__ = "Maximum Fuel Mass - the maximum fuel mass of the spacecraft; this parameter specifically applies to Finite Maneuver segments that are being executed in Backward Sequences."

agcls.AgTypeNameMap["AgEVAControlLaunch"] = AgEVAControlLaunch

class AgEVAControlAdvanced(IntEnum):
    """Propagate segment properties that can be selected as control parameters for a Target Sequence."""
    # The maximum propagation time, after which the segment will end regardless of whether the stopping conditions have been satisfied.
    eVAControlPropagateMaxPropTime = 600
    # The minimum propagation time - minimum time that must elapse from the beginning of the segment until Astrogator will begin checking stopping conditions for satisfaction.
    eVAControlPropagateMinPropTime = 601

AgEVAControlAdvanced.eVAControlPropagateMaxPropTime.__doc__ = "The maximum propagation time, after which the segment will end regardless of whether the stopping conditions have been satisfied."
AgEVAControlAdvanced.eVAControlPropagateMinPropTime.__doc__ = "The minimum propagation time - minimum time that must elapse from the beginning of the segment until Astrogator will begin checking stopping conditions for satisfaction."

agcls.AgTypeNameMap["AgEVAControlAdvanced"] = AgEVAControlAdvanced

class AgEVATargetSeqAction(IntEnum):
    """Action options for Target Sequence profiles."""
    # Run Nominal Sequence - runs the mission control sequence.
    eVATargetSeqActionRunNominalSeq = 0
    # Run Active Profiles - runs the mission control sequence allowing the active profiles to operate.
    eVATargetSeqActionRunActiveProfiles = 1
    # Run Active Profiles Once - runs the profile with corrections applied to control parameters.
    eVATargetSeqActionRunActiveProfilesOnce = 2

AgEVATargetSeqAction.eVATargetSeqActionRunNominalSeq.__doc__ = "Run Nominal Sequence - runs the mission control sequence."
AgEVATargetSeqAction.eVATargetSeqActionRunActiveProfiles.__doc__ = "Run Active Profiles - runs the mission control sequence allowing the active profiles to operate."
AgEVATargetSeqAction.eVATargetSeqActionRunActiveProfilesOnce.__doc__ = "Run Active Profiles Once - runs the profile with corrections applied to control parameters."

agcls.AgTypeNameMap["AgEVATargetSeqAction"] = AgEVATargetSeqAction

class AgEVAProfilesFinish(IntEnum):
    """Action options for Target Sequence profiles convergence."""
    # Run To Return And Continue - run to the first Return segment in the sequence, then pass control to the next segment after this target sequence. Often, the only Return is at the end of the target sequence.
    eVAProfilesFinishRunToReturnAndContinue = 0
    # Run To Return And Stop - run the target sequence to the first Return segment, and then stop running the MCS altogether.
    eVAProfilesFinishRunToReturnAndStop = 1
    # Stop - stop the MCS as soon as the target sequence has converged.
    eVAProfilesFinishStop = 2

AgEVAProfilesFinish.eVAProfilesFinishRunToReturnAndContinue.__doc__ = "Run To Return And Continue - run to the first Return segment in the sequence, then pass control to the next segment after this target sequence. Often, the only Return is at the end of the target sequence."
AgEVAProfilesFinish.eVAProfilesFinishRunToReturnAndStop.__doc__ = "Run To Return And Stop - run the target sequence to the first Return segment, and then stop running the MCS altogether."
AgEVAProfilesFinish.eVAProfilesFinishStop.__doc__ = "Stop - stop the MCS as soon as the target sequence has converged."

agcls.AgTypeNameMap["AgEVAProfilesFinish"] = AgEVAProfilesFinish

class AgEVAUpdateParam(IntEnum):
    """Spacecraft parameters that can be modified by an Update segment."""
    # Drag Area - the cross-sectional area of the spacecraft assumed perpendicular to the direction of motion, used for atmospheric drag calculations.
    eVAUpdateParamDragArea = 0
    # Solar Radiation Pressure (Spherical) Area - the cross-sectional area of the spacecraft assumed perpendicular to the direction of solar radiation, used for solar radiation calculations.
    eVAUpdateParamSRPArea = 1
    # Dry Mass - the mass of the spacecraft exclusive of propellant.
    eVAUpdateParamDryMass = 2
    # The mass of the spacecraft propellant.
    eVAUpdateParamFuelMass = 3
    # The density of the fuel tank.
    eVAUpdateParamFuelDensity = 4
    # The fuel tank pressure.
    eVAUpdateParamTankPressure = 5
    # The temperature of the fuel tank.
    eVAUpdateParamTankTemp = 6
    # Solar Radiation Pressure (Spherical) Coefficient (Cr) - the reflectivity of the spacecraft used for solar radiation pressure calculations, where 2.0 is fully reflective and 1.0 is not reflective at all.
    eVAUpdateParamCr = 7
    # Drag Coefficient (Cd) - the dimensionless drag coefficient associated with the drag area.
    eVAUpdateParamCd = 8
    # Radiation Pressure (Albedo/Thermal) Coefficient (Ck) - the reflectivity of the spacecraft used for central body radiation pressure (albedo / thermal pressure) calculations, where 2.0 is fully reflective and 1.0 is not reflective at all.
    eVAUpdateParamCk = 9
    # Radiation Pressure (Albedo/Thermal) Area - the cross-sectional area of the spacecraft assumed perpendicular to the direction of central body radiation, used for central body radiation (albedo / thermal pressure) calculations.
    eVAUpdateParamRadiationPressureArea = 10

AgEVAUpdateParam.eVAUpdateParamDragArea.__doc__ = "Drag Area - the cross-sectional area of the spacecraft assumed perpendicular to the direction of motion, used for atmospheric drag calculations."
AgEVAUpdateParam.eVAUpdateParamSRPArea.__doc__ = "Solar Radiation Pressure (Spherical) Area - the cross-sectional area of the spacecraft assumed perpendicular to the direction of solar radiation, used for solar radiation calculations."
AgEVAUpdateParam.eVAUpdateParamDryMass.__doc__ = "Dry Mass - the mass of the spacecraft exclusive of propellant."
AgEVAUpdateParam.eVAUpdateParamFuelMass.__doc__ = "The mass of the spacecraft propellant."
AgEVAUpdateParam.eVAUpdateParamFuelDensity.__doc__ = "The density of the fuel tank."
AgEVAUpdateParam.eVAUpdateParamTankPressure.__doc__ = "The fuel tank pressure."
AgEVAUpdateParam.eVAUpdateParamTankTemp.__doc__ = "The temperature of the fuel tank."
AgEVAUpdateParam.eVAUpdateParamCr.__doc__ = "Solar Radiation Pressure (Spherical) Coefficient (Cr) - the reflectivity of the spacecraft used for solar radiation pressure calculations, where 2.0 is fully reflective and 1.0 is not reflective at all."
AgEVAUpdateParam.eVAUpdateParamCd.__doc__ = "Drag Coefficient (Cd) - the dimensionless drag coefficient associated with the drag area."
AgEVAUpdateParam.eVAUpdateParamCk.__doc__ = "Radiation Pressure (Albedo/Thermal) Coefficient (Ck) - the reflectivity of the spacecraft used for central body radiation pressure (albedo / thermal pressure) calculations, where 2.0 is fully reflective and 1.0 is not reflective at all."
AgEVAUpdateParam.eVAUpdateParamRadiationPressureArea.__doc__ = "Radiation Pressure (Albedo/Thermal) Area - the cross-sectional area of the spacecraft assumed perpendicular to the direction of central body radiation, used for central body radiation (albedo / thermal pressure) calculations."

agcls.AgTypeNameMap["AgEVAUpdateParam"] = AgEVAUpdateParam

class AgEVAUpdateAction(IntEnum):
    """Actions for the Update segment."""
    # No change in value - leave the current value for this parameter unchanged (ignoring any quantity that may appear in the Value column).
    eVAUpdateActionNoChange = 0
    # Add value - add the quantity entered in the Value column to the current value for this parameter.
    eVAUpdateActionAddValue = 1
    # Subtract value - subtract the quantity entered in the Value column from the current value for this parameter.
    eVAUpdateActionSubtractValue = 2
    # Set to new value - replace the current value for this parameter with the quantity entered in the Value column.
    eVAUpdateActionSetToNewValue = 3

AgEVAUpdateAction.eVAUpdateActionNoChange.__doc__ = "No change in value - leave the current value for this parameter unchanged (ignoring any quantity that may appear in the Value column)."
AgEVAUpdateAction.eVAUpdateActionAddValue.__doc__ = "Add value - add the quantity entered in the Value column to the current value for this parameter."
AgEVAUpdateAction.eVAUpdateActionSubtractValue.__doc__ = "Subtract value - subtract the quantity entered in the Value column from the current value for this parameter."
AgEVAUpdateAction.eVAUpdateActionSetToNewValue.__doc__ = "Set to new value - replace the current value for this parameter with the quantity entered in the Value column."

agcls.AgTypeNameMap["AgEVAUpdateAction"] = AgEVAUpdateAction

class AgEVAPressureMode(IntEnum):
    """Pressure Mode options."""
    # Blow-Down - pressure decreases as propellant is consumed and the volume occupied by the pressurant gas consequently increases. This is based on the ideal gas law.
    eVAPressureModeBlowDown = 0
    # Pressure-Regulated - constant pressure is maintained in the fuel tank through some pressurization mechanism as the propellant mass decreases.
    eVAPressureModePressureRegulated = 1

AgEVAPressureMode.eVAPressureModeBlowDown.__doc__ = "Blow-Down - pressure decreases as propellant is consumed and the volume occupied by the pressurant gas consequently increases. This is based on the ideal gas law."
AgEVAPressureMode.eVAPressureModePressureRegulated.__doc__ = "Pressure-Regulated - constant pressure is maintained in the fuel tank through some pressurization mechanism as the propellant mass decreases."

agcls.AgTypeNameMap["AgEVAPressureMode"] = AgEVAPressureMode

class AgEVAThrustType(IntEnum):
    """Thrust options."""
    # Affects Acceleration and Mass Flow Calculations - may represent an inefficiency in the propulsion tanks and feed lines.
    eVAThrustTypeAffectsAccelAndMassFlow = 0
    # Affects Acceleration Only - an efficiency of 0.98 means that only 98% of the fuel will be spent to get 98% thrust. For example, a thrust efficiency affecting acceleration only may represent some problem in the combustion chamber.
    eVAThrustTypeAffectsAccelOnly = 1

AgEVAThrustType.eVAThrustTypeAffectsAccelAndMassFlow.__doc__ = "Affects Acceleration and Mass Flow Calculations - may represent an inefficiency in the propulsion tanks and feed lines."
AgEVAThrustType.eVAThrustTypeAffectsAccelOnly.__doc__ = "Affects Acceleration Only - an efficiency of 0.98 means that only 98% of the fuel will be spent to get 98% thrust. For example, a thrust efficiency affecting acceleration only may represent some problem in the combustion chamber."

agcls.AgTypeNameMap["AgEVAThrustType"] = AgEVAThrustType

class AgEVAAttitudeUpdate(IntEnum):
    """Attitude Update."""
    # Update during burn - updated throughout the maneuver so as to maintain the required thrust direction. This forces the thrust vector to the specified direction at every instant throughout the burn.
    eVAAttitudeUpdateDuringBurn = 0
    # Inertial at ignition - specified by Attitude Control at ignition and remains the same throughout the maneuver. This fixes the thrust direction in the inertial direction calculated at the beginning of the burn and is used for inertially fixed spacecraft.
    eVAAttitudeUpdateInertialAtIgnition = 1
    # Inertial at start - specified by Attitude Control at the beginning of the maneuver segment and remains the same throughout the maneuver.
    eVAAttitudeUpdateInertialAtStart = 2

AgEVAAttitudeUpdate.eVAAttitudeUpdateDuringBurn.__doc__ = "Update during burn - updated throughout the maneuver so as to maintain the required thrust direction. This forces the thrust vector to the specified direction at every instant throughout the burn."
AgEVAAttitudeUpdate.eVAAttitudeUpdateInertialAtIgnition.__doc__ = "Inertial at ignition - specified by Attitude Control at ignition and remains the same throughout the maneuver. This fixes the thrust direction in the inertial direction calculated at the beginning of the burn and is used for inertially fixed spacecraft."
AgEVAAttitudeUpdate.eVAAttitudeUpdateInertialAtStart.__doc__ = "Inertial at start - specified by Attitude Control at the beginning of the maneuver segment and remains the same throughout the maneuver."

agcls.AgTypeNameMap["AgEVAAttitudeUpdate"] = AgEVAAttitudeUpdate

class AgEVAPropulsionMethod(IntEnum):
    """Propulsion method options."""
    # Engine Model - can be used to quickly model the firing of a single engine.
    eVAPropulsionMethodEngineModel = 0
    # Thruster Set - used to fire multiple engines simultaneously, and to simulate off-pulsing or complex engine pointing.
    eVAPropulsionMethodThrusterSet = 1

AgEVAPropulsionMethod.eVAPropulsionMethodEngineModel.__doc__ = "Engine Model - can be used to quickly model the firing of a single engine."
AgEVAPropulsionMethod.eVAPropulsionMethodThrusterSet.__doc__ = "Thruster Set - used to fire multiple engines simultaneously, and to simulate off-pulsing or complex engine pointing."

agcls.AgTypeNameMap["AgEVAPropulsionMethod"] = AgEVAPropulsionMethod

class AgEVACustomFunction(IntEnum):
    """Attitude definition options for other STK functions."""
    # Use attitude page definition for other STK functions - the actual attitude during the maneuver is ignored and the satellite is considered to always be in the attitude specified by the page for all other calculations in STK.
    eVAEnablePageDefinition = 0
    # Maneuver attitude will be used for the satellite during the time at the maneuver, and during the specified lead and trail times. This attitude will also show up in reports, graphs, sensor access calculations, and in the 3D Graphics window.
    eVAEnableManeuverAttitude = 1

AgEVACustomFunction.eVAEnablePageDefinition.__doc__ = "Use attitude page definition for other STK functions - the actual attitude during the maneuver is ignored and the satellite is considered to always be in the attitude specified by the page for all other calculations in STK."
AgEVACustomFunction.eVAEnableManeuverAttitude.__doc__ = "Maneuver attitude will be used for the satellite during the time at the maneuver, and during the specified lead and trail times. This attitude will also show up in reports, graphs, sensor access calculations, and in the 3D Graphics window."

agcls.AgTypeNameMap["AgEVACustomFunction"] = AgEVACustomFunction

class AgEVABodyAxis(IntEnum):
    """Attitude body axis options."""
    # The positive X engine acceleration direction.
    eVABodyAxisPlusX = 0
    # The positive Y engine acceleration direction.
    eVABodyAxisPlusY = 1
    # The positive Z engine acceleration direction.
    eVABodyAxisPlusZ = 2
    # The negative X engine acceleration direction.
    eVABodyAxisMinusX = 3
    # The negative Y engine acceleration direction.
    eVABodyAxisMinusY = 4
    # The negative Z engine acceleration direction.
    eVABodyAxisMinusZ = 5

AgEVABodyAxis.eVABodyAxisPlusX.__doc__ = "The positive X engine acceleration direction."
AgEVABodyAxis.eVABodyAxisPlusY.__doc__ = "The positive Y engine acceleration direction."
AgEVABodyAxis.eVABodyAxisPlusZ.__doc__ = "The positive Z engine acceleration direction."
AgEVABodyAxis.eVABodyAxisMinusX.__doc__ = "The negative X engine acceleration direction."
AgEVABodyAxis.eVABodyAxisMinusY.__doc__ = "The negative Y engine acceleration direction."
AgEVABodyAxis.eVABodyAxisMinusZ.__doc__ = "The negative Z engine acceleration direction."

agcls.AgTypeNameMap["AgEVABodyAxis"] = AgEVABodyAxis

class AgEVAConstraintSign(IntEnum):
    """Constraint vector sign options."""
    # Positive.
    eVAConstraintSignPlus = 0
    # Negative.
    eVAConstraintSignMinus = 1

AgEVAConstraintSign.eVAConstraintSignPlus.__doc__ = "Positive."
AgEVAConstraintSign.eVAConstraintSignMinus.__doc__ = "Negative."

agcls.AgTypeNameMap["AgEVAConstraintSign"] = AgEVAConstraintSign

class AgEVAAttitudeControl(IntEnum):
    """Attitude Control options."""
    # Along Velocity Vector (impulsive/finite) - the total thrust vector is aligned with the spacecraft's velocity vector.
    eVAAttitudeControlVelocityVector = 0
    # Anti-Velocity Vector (impulsive/finite) - the total thrust vector is opposite to the spacecraft's velocity vector.
    eVAAttitudeControlAntiVelocityVector = 1
    # Attitude (impulsive/finite) - the thrust vector direction is defined using Euler Angles or a Quaternion. 
    eVAAttitudeControlAttitude = 2
    # File (impulsive/finite) - uses an attitude file to set the thrust vector direction.
    eVAAttitudeControlFile = 3
    # Thrust Vector (impulsive/finite) - the total thrust vector is explicitly specified in Cartesian or spherical form with respect to the thrust axes.
    eVAAttitudeControlThrustVector = 4
    # Plugin (finite) - thrust vector direction is defined using a COM plugin.
    eVAAttitudeControlPlugin = 5
    # Time Varying (finite) - polynomial and sine representations for the azimuth and elevation of the thrust vector.
    eVAAttitudeControlTimeVarying = 6
    # Lagrange Interpolation (optimal finite, always set) - supports the 'Run current nodes' execution mode of the Optimal Finite Maneuver.
    eVAAttitudeControlLagrangeInterpolation = 7

AgEVAAttitudeControl.eVAAttitudeControlVelocityVector.__doc__ = "Along Velocity Vector (impulsive/finite) - the total thrust vector is aligned with the spacecraft's velocity vector."
AgEVAAttitudeControl.eVAAttitudeControlAntiVelocityVector.__doc__ = "Anti-Velocity Vector (impulsive/finite) - the total thrust vector is opposite to the spacecraft's velocity vector."
AgEVAAttitudeControl.eVAAttitudeControlAttitude.__doc__ = "Attitude (impulsive/finite) - the thrust vector direction is defined using Euler Angles or a Quaternion. "
AgEVAAttitudeControl.eVAAttitudeControlFile.__doc__ = "File (impulsive/finite) - uses an attitude file to set the thrust vector direction."
AgEVAAttitudeControl.eVAAttitudeControlThrustVector.__doc__ = "Thrust Vector (impulsive/finite) - the total thrust vector is explicitly specified in Cartesian or spherical form with respect to the thrust axes."
AgEVAAttitudeControl.eVAAttitudeControlPlugin.__doc__ = "Plugin (finite) - thrust vector direction is defined using a COM plugin."
AgEVAAttitudeControl.eVAAttitudeControlTimeVarying.__doc__ = "Time Varying (finite) - polynomial and sine representations for the azimuth and elevation of the thrust vector."
AgEVAAttitudeControl.eVAAttitudeControlLagrangeInterpolation.__doc__ = "Lagrange Interpolation (optimal finite, always set) - supports the 'Run current nodes' execution mode of the Optimal Finite Maneuver."

agcls.AgTypeNameMap["AgEVAAttitudeControl"] = AgEVAAttitudeControl

class AgEVAFollowJoin(IntEnum):
    """Joining options for the Follow segment."""
    # Specify Joining Conditions - specify joining conditions to define when the spacecraft will begin to follow the leader. Joining conditions will become apparent on a new tab - Joining.
    eVAFollowJoinSpecify = 0
    # Join at Beginning of Leader's Ephemeris - the spacecraft will follow the leader from the beginning of the leader's ephemeris.
    eVAFollowJoinAtBeginning = 1
    # Join at End of Leader's Ephemeris - the spacecraft will use the leader's final ephemeris point as the initial and final state of the Follow segment; the separation parameter will automatically be set to 'Separate at End of Leader's Ephemeris'.
    eVAFollowJoinAtEnd = 2
    # Join at Final Epoch of Previous Segment - the spacecraft will follow the leader from the final epoch at the end of the previous segment.
    eVAFollowJoinAtFinalEpochOfPreviousSeg = 3

AgEVAFollowJoin.eVAFollowJoinSpecify.__doc__ = "Specify Joining Conditions - specify joining conditions to define when the spacecraft will begin to follow the leader. Joining conditions will become apparent on a new tab - Joining."
AgEVAFollowJoin.eVAFollowJoinAtBeginning.__doc__ = "Join at Beginning of Leader's Ephemeris - the spacecraft will follow the leader from the beginning of the leader's ephemeris."
AgEVAFollowJoin.eVAFollowJoinAtEnd.__doc__ = "Join at End of Leader's Ephemeris - the spacecraft will use the leader's final ephemeris point as the initial and final state of the Follow segment; the separation parameter will automatically be set to 'Separate at End of Leader's Ephemeris'."
AgEVAFollowJoin.eVAFollowJoinAtFinalEpochOfPreviousSeg.__doc__ = "Join at Final Epoch of Previous Segment - the spacecraft will follow the leader from the final epoch at the end of the previous segment."

agcls.AgTypeNameMap["AgEVAFollowJoin"] = AgEVAFollowJoin

class AgEVAFollowSeparation(IntEnum):
    """Separation options for the Follow segment."""
    # Specify Separation Conditions - specify separation conditions to define when the spacecraft will stop following the leader. Separation conditions will become apparent on a new tab - Separation.
    eVAFollowSeparationSpecify = 0
    # Separate at End of Leader's Ephemeris - the spacecraft will follow the leader to the end of the leader's ephemeris and then separate.
    eVAFollowSeparationAtEndOfLeadersEphem = 1

AgEVAFollowSeparation.eVAFollowSeparationSpecify.__doc__ = "Specify Separation Conditions - specify separation conditions to define when the spacecraft will stop following the leader. Separation conditions will become apparent on a new tab - Separation."
AgEVAFollowSeparation.eVAFollowSeparationAtEndOfLeadersEphem.__doc__ = "Separate at End of Leader's Ephemeris - the spacecraft will follow the leader to the end of the leader's ephemeris and then separate."

agcls.AgTypeNameMap["AgEVAFollowSeparation"] = AgEVAFollowSeparation

class AgEVAFollowSpacecraftAndFuelTank(IntEnum):
    """Spacecraft parameter options for the Follow segment."""
    # Specify Spacecraft Configuration - manually define the spacecraft for this segment. Spacecraft physical parameters will become apparent on new tabs - Spacecraft Parameters and Fuel Tank.
    eVAFollowSpacecraftAndFuelTankSpecify = 0
    # Inherit Spacecraft Configuration From Previous Segment - the spacecraft will be defined by its configuration at the end of the previous segment. The configuration will not be changed by the Follow segment.
    eVAFollowSpacecraftAndFuelTankInherit = 1
    # Inherit Spacecraft Configuration From Leader - if leader is an Astrogator satellite, configuration will be defined by the leader's configuration.
    eVAFollowSpacecraftAndFuelTankLeader = 2

AgEVAFollowSpacecraftAndFuelTank.eVAFollowSpacecraftAndFuelTankSpecify.__doc__ = "Specify Spacecraft Configuration - manually define the spacecraft for this segment. Spacecraft physical parameters will become apparent on new tabs - Spacecraft Parameters and Fuel Tank."
AgEVAFollowSpacecraftAndFuelTank.eVAFollowSpacecraftAndFuelTankInherit.__doc__ = "Inherit Spacecraft Configuration From Previous Segment - the spacecraft will be defined by its configuration at the end of the previous segment. The configuration will not be changed by the Follow segment."
AgEVAFollowSpacecraftAndFuelTank.eVAFollowSpacecraftAndFuelTankLeader.__doc__ = "Inherit Spacecraft Configuration From Leader - if leader is an Astrogator satellite, configuration will be defined by the leader's configuration."

agcls.AgTypeNameMap["AgEVAFollowSpacecraftAndFuelTank"] = AgEVAFollowSpacecraftAndFuelTank

class AgEVABurnoutOptions(IntEnum):
    """Burnout options for the Launch segment."""
    # Use Fixed Velocity - the inclination of the final state of the launch segment is determined by the arc between the launch and insertion positions, and the horizontal flight path angle is set to zero.
    eVABurnoutOptionsFixedVelocity = 0
    # Use Inertial Velocity - the final state of the launch segment is solely and completely determined by the burnout position and velocity.
    eVABurnoutOptionsInertialVelocity = 1

AgEVABurnoutOptions.eVABurnoutOptionsFixedVelocity.__doc__ = "Use Fixed Velocity - the inclination of the final state of the launch segment is determined by the arc between the launch and insertion positions, and the horizontal flight path angle is set to zero."
AgEVABurnoutOptions.eVABurnoutOptionsInertialVelocity.__doc__ = "Use Inertial Velocity - the final state of the launch segment is solely and completely determined by the burnout position and velocity."

agcls.AgTypeNameMap["AgEVABurnoutOptions"] = AgEVABurnoutOptions

class AgEVABurnoutType(IntEnum):
    """Burnout point definition types for the Launch segment."""
    # Geocentric (Planetocentric) - the burnout point is measured from the center of mass of the Earth or other central body.
    eVABurnoutTypeGeocentric = 0
    # Geodetic (Planetodetic) - the burnout point is measured along the normal to the surface of an ellipsoid defined with reference to the Earth (or other central body).
    eVABurnoutTypeGeodetic = 1
    # Launch Az / Radius - the burnout point is defined in reference to distance downrange along an azimuth, measured from the center of mass of the Earth or other central body.
    eVABurnoutTypeLaunchAzRad = 2
    # Launch Az / Alt - the burnout point is defined in reference to distance downrange along an azimuth, measured from the surface of the Earth or other central body.
    eVABurnoutTypeLaunchAzAlt = 3
    # Central Body Fixed Cartesian - the burnout state is specified in the central-body-fixed Cartesian coordinate system.
    eVABurnoutTypeCBFCartesian = 4

AgEVABurnoutType.eVABurnoutTypeGeocentric.__doc__ = "Geocentric (Planetocentric) - the burnout point is measured from the center of mass of the Earth or other central body."
AgEVABurnoutType.eVABurnoutTypeGeodetic.__doc__ = "Geodetic (Planetodetic) - the burnout point is measured along the normal to the surface of an ellipsoid defined with reference to the Earth (or other central body)."
AgEVABurnoutType.eVABurnoutTypeLaunchAzRad.__doc__ = "Launch Az / Radius - the burnout point is defined in reference to distance downrange along an azimuth, measured from the center of mass of the Earth or other central body."
AgEVABurnoutType.eVABurnoutTypeLaunchAzAlt.__doc__ = "Launch Az / Alt - the burnout point is defined in reference to distance downrange along an azimuth, measured from the surface of the Earth or other central body."
AgEVABurnoutType.eVABurnoutTypeCBFCartesian.__doc__ = "Central Body Fixed Cartesian - the burnout state is specified in the central-body-fixed Cartesian coordinate system."

agcls.AgTypeNameMap["AgEVABurnoutType"] = AgEVABurnoutType

class AgEVAAscentType(IntEnum):
    """Ascent types for the Launch segment."""
    # Ellipse: Cubic Motion - the motion is computed on the basis of given positions and velocities.
    eVAAscentTypeEllipseCubicMotion = 0
    # Ellipse: Quartic Motion - the motion is computed on the basis of given positions and velocities and initial acceleration.
    eVAAscentTypeEllipseQuarticMotion = 1

AgEVAAscentType.eVAAscentTypeEllipseCubicMotion.__doc__ = "Ellipse: Cubic Motion - the motion is computed on the basis of given positions and velocities."
AgEVAAscentType.eVAAscentTypeEllipseQuarticMotion.__doc__ = "Ellipse: Quartic Motion - the motion is computed on the basis of given positions and velocities and initial acceleration."

agcls.AgTypeNameMap["AgEVAAscentType"] = AgEVAAscentType

class AgEVALaunchDisplaySystem(IntEnum):
    """Launch location coordinate types for the Launch segment."""
    # Geocentric (Planetocentric) - the location is measured from the center of mass of the Earth or other central body.
    eVADisplaySystemGeodetic = 0
    # Geodetic (Planetodetic) - the location is measured along the normal to the surface of an ellipsoid defined with reference to the Earth (or other central body).
    eVADisplaySystemGeocentric = 1

AgEVALaunchDisplaySystem.eVADisplaySystemGeodetic.__doc__ = "Geocentric (Planetocentric) - the location is measured from the center of mass of the Earth or other central body."
AgEVALaunchDisplaySystem.eVADisplaySystemGeocentric.__doc__ = "Geodetic (Planetodetic) - the location is measured along the normal to the surface of an ellipsoid defined with reference to the Earth (or other central body)."

agcls.AgTypeNameMap["AgEVALaunchDisplaySystem"] = AgEVALaunchDisplaySystem

class AgEVARunCode(IntEnum):
    """The run code returned after the MCS is run."""
    # Marching - a segment has run successfully.
    eVARunCodeMarching = 0
    # Profile Failure - a search profile failed to converge.
    eVARunCodeProfileFailure = 1
    # Error - encountered an error.
    eVARunCodeError = 2
    # Stopped - encountered a stop segment.
    eVARunCodeStopped = 3
    # Returned - encountered a return segment.
    eVARunCodeReturned = 4
    # Cancelled - cancelled by user.
    eVARunCodeCancelled = 5
    # Global Stop - hit a global stopping condition.
    eVARunCodeHitGlobalStop = 6

AgEVARunCode.eVARunCodeMarching.__doc__ = "Marching - a segment has run successfully."
AgEVARunCode.eVARunCodeProfileFailure.__doc__ = "Profile Failure - a search profile failed to converge."
AgEVARunCode.eVARunCodeError.__doc__ = "Error - encountered an error."
AgEVARunCode.eVARunCodeStopped.__doc__ = "Stopped - encountered a stop segment."
AgEVARunCode.eVARunCodeReturned.__doc__ = "Returned - encountered a return segment."
AgEVARunCode.eVARunCodeCancelled.__doc__ = "Cancelled - cancelled by user."
AgEVARunCode.eVARunCodeHitGlobalStop.__doc__ = "Global Stop - hit a global stopping condition."

agcls.AgTypeNameMap["AgEVARunCode"] = AgEVARunCode

class AgEVASequenceStateToPass(IntEnum):
    """State To Pass options for the Sequence segment."""
    # The initial state of the sequence.
    eVASequenceStateToPassInitial = 0
    # The final state of the sequence.
    eVASequenceStateToPassFinal = 1

AgEVASequenceStateToPass.eVASequenceStateToPassInitial.__doc__ = "The initial state of the sequence."
AgEVASequenceStateToPass.eVASequenceStateToPassFinal.__doc__ = "The final state of the sequence."

agcls.AgTypeNameMap["AgEVASequenceStateToPass"] = AgEVASequenceStateToPass

class AgEVAManeuverType(IntEnum):
    """Maneuver types for the maneuver segment."""
    # Impulsive - calculates a state by adding the defined delta-V vector to the velocity of the final state of the previous segment, adds this new state to the ephemeris, and passes it to the next segment.
    eVAManeuverTypeImpulsive = 0
    # Finite - effectively a Propagate segment with thrust. Like Propagate segments, each point calculated by the propagator is added to the ephemeris, and propagation continues until a stopping condition is met.
    eVAManeuverTypeFinite = 1
    # Optimal Finite
    eVAManeuverTypeOptimalFinite = 2

AgEVAManeuverType.eVAManeuverTypeImpulsive.__doc__ = "Impulsive - calculates a state by adding the defined delta-V vector to the velocity of the final state of the previous segment, adds this new state to the ephemeris, and passes it to the next segment."
AgEVAManeuverType.eVAManeuverTypeFinite.__doc__ = "Finite - effectively a Propagate segment with thrust. Like Propagate segments, each point calculated by the propagator is added to the ephemeris, and propagation continues until a stopping condition is met."
AgEVAManeuverType.eVAManeuverTypeOptimalFinite.__doc__ = "Optimal Finite"

agcls.AgTypeNameMap["AgEVAManeuverType"] = AgEVAManeuverType

class AgEVASegmentType(IntEnum):
    """Segment types."""
    # Initial State - can be used to define the initial conditions of your MCS, or of a subsequence within the MCS.
    eVASegmentTypeInitialState = 0
    # Launch - can be used to model a simple spacecraft launch from Earth or another central body.
    eVASegmentTypeLaunch = 1
    # Maneuver - can be used to model a spacecraft maneuver.
    eVASegmentTypeManeuver = 2
    # Follow - can be used to set the spacecraft to follow another vehicle (Satellite, Launch Vehicle, Missile, Aircraft, Ship, or Ground Vehicle) at a specified offset, and to separate from that vehicle upon meeting specified conditions.
    eVASegmentTypeFollow = 3
    # Hold - can be used to model landing or rendezvous operations by setting the spacecraft to maintain a fixed position in reference to another object or body, until meeting specified conditions.
    eVASegmentTypeHold = 4
    # Propagate - can be used to model the movement of the spacecraft along its current trajectory until meeting specified stopping conditions.
    eVASegmentTypePropagate = 5
    # Sequence - can be used to organize segments and define the nature of the results that are passed on to the next segment or sequence in the MCS.
    eVASegmentTypeSequence = 6
    # Return - can be used to control the execution of the Mission Control Sequence by returning control to its parent segment.
    eVASegmentTypeReturn = 7
    # Target Sequence - can be used to define maneuvers and propagations in terms of the goals they are intended to achieve.
    eVASegmentTypeTargetSequence = 8
    # Stop - can be used to control the execution of the Mission Control Sequence by halting execution of the MCS.
    eVASegmentTypeStop = 9
    # Update - can be used to modify some of the satellite properties to reflect changes that occur during the mission.
    eVASegmentTypeUpdate = 10
    # Backward Sequence - can be used to organize segments and define the nature of the results that are passed on to the next segment or sequence in the MCS.
    eVASegmentTypeBackwardSequence = 11
    # End - The End segment is a default segment of the MCS that functions similarly to a Return segment; it returns control to the beginning of the MCS. The End segment cannot be disabled or deleted, nor can any segments be inserted into the MCS after it.
    eVASegmentTypeEnd = 12

AgEVASegmentType.eVASegmentTypeInitialState.__doc__ = "Initial State - can be used to define the initial conditions of your MCS, or of a subsequence within the MCS."
AgEVASegmentType.eVASegmentTypeLaunch.__doc__ = "Launch - can be used to model a simple spacecraft launch from Earth or another central body."
AgEVASegmentType.eVASegmentTypeManeuver.__doc__ = "Maneuver - can be used to model a spacecraft maneuver."
AgEVASegmentType.eVASegmentTypeFollow.__doc__ = "Follow - can be used to set the spacecraft to follow another vehicle (Satellite, Launch Vehicle, Missile, Aircraft, Ship, or Ground Vehicle) at a specified offset, and to separate from that vehicle upon meeting specified conditions."
AgEVASegmentType.eVASegmentTypeHold.__doc__ = "Hold - can be used to model landing or rendezvous operations by setting the spacecraft to maintain a fixed position in reference to another object or body, until meeting specified conditions."
AgEVASegmentType.eVASegmentTypePropagate.__doc__ = "Propagate - can be used to model the movement of the spacecraft along its current trajectory until meeting specified stopping conditions."
AgEVASegmentType.eVASegmentTypeSequence.__doc__ = "Sequence - can be used to organize segments and define the nature of the results that are passed on to the next segment or sequence in the MCS."
AgEVASegmentType.eVASegmentTypeReturn.__doc__ = "Return - can be used to control the execution of the Mission Control Sequence by returning control to its parent segment."
AgEVASegmentType.eVASegmentTypeTargetSequence.__doc__ = "Target Sequence - can be used to define maneuvers and propagations in terms of the goals they are intended to achieve."
AgEVASegmentType.eVASegmentTypeStop.__doc__ = "Stop - can be used to control the execution of the Mission Control Sequence by halting execution of the MCS."
AgEVASegmentType.eVASegmentTypeUpdate.__doc__ = "Update - can be used to modify some of the satellite properties to reflect changes that occur during the mission."
AgEVASegmentType.eVASegmentTypeBackwardSequence.__doc__ = "Backward Sequence - can be used to organize segments and define the nature of the results that are passed on to the next segment or sequence in the MCS."
AgEVASegmentType.eVASegmentTypeEnd.__doc__ = "End - The End segment is a default segment of the MCS that functions similarly to a Return segment; it returns control to the beginning of the MCS. The End segment cannot be disabled or deleted, nor can any segments be inserted into the MCS after it."

agcls.AgTypeNameMap["AgEVASegmentType"] = AgEVASegmentType

class AgEVAElementType(IntEnum):
    """Types of orbit element sets."""
    # Cartesian - specifying an orbit by three position elements and three velocity elements in a rectangular coordinate system.
    eVAElementTypeCartesian = 0
    # Keplerian - the classical system, specifying an orbit by six elements describing its size, shape and three-dimensional orientation in space.
    eVAElementTypeKeplerian = 1
    # Spherical - a system in which positions are specified as a radial distance from the origin and two angles relative to a fundamental plane.
    eVAElementTypeSpherical = 3
    # Target Vector Incoming Asymptote - used for hyperbolic arrival trajectories.
    eVAElementTypeTargetVectorIncomingAsymptote = 4
    # Target Vector Outgoing Asymptote - used for hyperbolic departure trajectories.
    eVAElementTypeTargetVectorOutgoingAsymptote = 5
    # Mixed Spherical.
    eVAElementTypeMixedSpherical = 6
    # Delaunay.
    eVAElementTypeDelaunay = 7
    # Equinoctial.
    eVAElementTypeEquinoctial = 8
    # Geodetic.
    eVAElementTypeGeodetic = 9
    # BPlane.
    eVAElementTypeBPlane = 10

AgEVAElementType.eVAElementTypeCartesian.__doc__ = "Cartesian - specifying an orbit by three position elements and three velocity elements in a rectangular coordinate system."
AgEVAElementType.eVAElementTypeKeplerian.__doc__ = "Keplerian - the classical system, specifying an orbit by six elements describing its size, shape and three-dimensional orientation in space."
AgEVAElementType.eVAElementTypeSpherical.__doc__ = "Spherical - a system in which positions are specified as a radial distance from the origin and two angles relative to a fundamental plane."
AgEVAElementType.eVAElementTypeTargetVectorIncomingAsymptote.__doc__ = "Target Vector Incoming Asymptote - used for hyperbolic arrival trajectories."
AgEVAElementType.eVAElementTypeTargetVectorOutgoingAsymptote.__doc__ = "Target Vector Outgoing Asymptote - used for hyperbolic departure trajectories."
AgEVAElementType.eVAElementTypeMixedSpherical.__doc__ = "Mixed Spherical."
AgEVAElementType.eVAElementTypeDelaunay.__doc__ = "Delaunay."
AgEVAElementType.eVAElementTypeEquinoctial.__doc__ = "Equinoctial."
AgEVAElementType.eVAElementTypeGeodetic.__doc__ = "Geodetic."
AgEVAElementType.eVAElementTypeBPlane.__doc__ = "BPlane."

agcls.AgTypeNameMap["AgEVAElementType"] = AgEVAElementType

class AgEVALanguage(IntEnum):
    """Scripting language types for the Scripting Tool."""
    # VBScript.
    eVALanguageVBScript = 0
    # JScript.
    eVALanguageJScript = 1
    # MATLAB.
    eVALanguageMATLAB = 2

AgEVALanguage.eVALanguageVBScript.__doc__ = "VBScript."
AgEVALanguage.eVALanguageJScript.__doc__ = "JScript."
AgEVALanguage.eVALanguageMATLAB.__doc__ = "MATLAB."

agcls.AgTypeNameMap["AgEVALanguage"] = AgEVALanguage

class AgEVAStoppingCondition(IntEnum):
    """Type of stopping condition."""
    # Basic Stopping Condition.
    eVAStoppingConditionBasic = 0
    # Before Stopping Condition.
    eVAStoppingConditionBefore = 1
    # One Point Access Stopping Condition.
    eVAStoppingConditionOnePtAccess = 2
    # Lighting Stopping Condition.
    eVAStoppingConditionLighting = 3

AgEVAStoppingCondition.eVAStoppingConditionBasic.__doc__ = "Basic Stopping Condition."
AgEVAStoppingCondition.eVAStoppingConditionBefore.__doc__ = "Before Stopping Condition."
AgEVAStoppingCondition.eVAStoppingConditionOnePtAccess.__doc__ = "One Point Access Stopping Condition."
AgEVAStoppingCondition.eVAStoppingConditionLighting.__doc__ = "Lighting Stopping Condition."

agcls.AgTypeNameMap["AgEVAStoppingCondition"] = AgEVAStoppingCondition

class AgEVAClearEphemerisDirection(IntEnum):
    """Direction in which to clear ephemeris."""
    # Clear ephemeris before selected time or state.
    eVAClearEphemerisBefore = -1
    # Do not clear ephemeris.
    eVAClearEphemerisNoClear = 0
    # Clear ephemeris after selected time or state.
    eVAClearEphemerisAfter = 1

AgEVAClearEphemerisDirection.eVAClearEphemerisBefore.__doc__ = "Clear ephemeris before selected time or state."
AgEVAClearEphemerisDirection.eVAClearEphemerisNoClear.__doc__ = "Do not clear ephemeris."
AgEVAClearEphemerisDirection.eVAClearEphemerisAfter.__doc__ = "Clear ephemeris after selected time or state."

agcls.AgTypeNameMap["AgEVAClearEphemerisDirection"] = AgEVAClearEphemerisDirection

class AgEVAProfileInsertDirection(IntEnum):
    """Direction to insert profile."""
    # Insert profile before reference profile.
    eVAProfileInsertBefore = 0
    # Insert profile after reference profile.
    eVAProfileInsertAfter = 1

AgEVAProfileInsertDirection.eVAProfileInsertBefore.__doc__ = "Insert profile before reference profile."
AgEVAProfileInsertDirection.eVAProfileInsertAfter.__doc__ = "Insert profile after reference profile."

agcls.AgTypeNameMap["AgEVAProfileInsertDirection"] = AgEVAProfileInsertDirection

class AgEVARootFindingAlgorithm(IntEnum):
    """Root-finding algorithms."""
    # Secant method.
    eVASecantMethod = 0
    # Newton-Raphson method.
    eVANewtonRaphsonMethod = 1

AgEVARootFindingAlgorithm.eVASecantMethod.__doc__ = "Secant method."
AgEVARootFindingAlgorithm.eVANewtonRaphsonMethod.__doc__ = "Newton-Raphson method."

agcls.AgTypeNameMap["AgEVARootFindingAlgorithm"] = AgEVARootFindingAlgorithm

class AgEVAScriptingParameterType(IntEnum):
    """Scripting Tool parameter type."""
    # Double.
    eVAScriptingParameterTypeDouble = 0
    # Quantity.
    eVAScriptingParameterTypeQuantity = 1
    # Date.
    eVAScriptingParameterTypeDate = 2
    # String.
    eVAScriptingParameterTypeString = 3
    # Boolean.
    eVAScriptingParameterTypeBoolean = 4
    # Integer.
    eVAScriptingParameterTypeInteger = 5
    # Enumeration.
    eVAScriptingParameterTypeEnumeration = 6

AgEVAScriptingParameterType.eVAScriptingParameterTypeDouble.__doc__ = "Double."
AgEVAScriptingParameterType.eVAScriptingParameterTypeQuantity.__doc__ = "Quantity."
AgEVAScriptingParameterType.eVAScriptingParameterTypeDate.__doc__ = "Date."
AgEVAScriptingParameterType.eVAScriptingParameterTypeString.__doc__ = "String."
AgEVAScriptingParameterType.eVAScriptingParameterTypeBoolean.__doc__ = "Boolean."
AgEVAScriptingParameterType.eVAScriptingParameterTypeInteger.__doc__ = "Integer."
AgEVAScriptingParameterType.eVAScriptingParameterTypeEnumeration.__doc__ = "Enumeration."

agcls.AgTypeNameMap["AgEVAScriptingParameterType"] = AgEVAScriptingParameterType

class AgEVASNOPTGoal(IntEnum):
    """The Goal types for a SNOPT profile."""
    # Minimize
    eVASNOPTGoalMinimize = 0
    # Bound
    eVASNOPTGoalBound = 1

AgEVASNOPTGoal.eVASNOPTGoalMinimize.__doc__ = "Minimize"
AgEVASNOPTGoal.eVASNOPTGoalBound.__doc__ = "Bound"

agcls.AgTypeNameMap["AgEVASNOPTGoal"] = AgEVASNOPTGoal

class AgEVAIPOPTGoal(IntEnum):
    """The Goal types for a IPOPT profile."""
    # Minimize
    eVAIPOPTGoalMinimize = 0
    # Bound
    eVAIPOPTGoalBound = 1

AgEVAIPOPTGoal.eVAIPOPTGoalMinimize.__doc__ = "Minimize"
AgEVAIPOPTGoal.eVAIPOPTGoalBound.__doc__ = "Bound"

agcls.AgTypeNameMap["AgEVAIPOPTGoal"] = AgEVAIPOPTGoal

class AgEVAOptimalFiniteSeedMethod(IntEnum):
    """Seed methods."""
    # Seed initial guess from file.
    eVAOptimalFiniteSeedMethodInitialGuessFile = 0
    # Seed initial guess from finite maneuver.
    eVAOptimalFiniteSeedMethodFiniteManeuver = 1

AgEVAOptimalFiniteSeedMethod.eVAOptimalFiniteSeedMethodInitialGuessFile.__doc__ = "Seed initial guess from file."
AgEVAOptimalFiniteSeedMethod.eVAOptimalFiniteSeedMethodFiniteManeuver.__doc__ = "Seed initial guess from finite maneuver."

agcls.AgTypeNameMap["AgEVAOptimalFiniteSeedMethod"] = AgEVAOptimalFiniteSeedMethod

class AgEVAOptimalFiniteRunMode(IntEnum):
    """Run modes."""
    # Run current nodes.
    eVAOptimalFiniteRunModeRunCurrentNodes = 0
    # Optimize via direct transcription.
    eVAOptimalFiniteRunModeOptimizeViaDirectTranscription = 1

AgEVAOptimalFiniteRunMode.eVAOptimalFiniteRunModeRunCurrentNodes.__doc__ = "Run current nodes."
AgEVAOptimalFiniteRunMode.eVAOptimalFiniteRunModeOptimizeViaDirectTranscription.__doc__ = "Optimize via direct transcription."

agcls.AgTypeNameMap["AgEVAOptimalFiniteRunMode"] = AgEVAOptimalFiniteRunMode

class AgEVAOptimalFiniteDiscretizationStrategy(IntEnum):
    """Discretization Strategy."""
    # The Legendre-Gauss-Lobatto quadrature rule
    eVAOptimalFiniteDiscretizationStrategyLegendreGaussLobatto = 0
    # The Legendre-Gauss-Radau quadrature rule.
    eVAOptimalFiniteDiscretizationStrategyLegendreGaussRadau = 1

AgEVAOptimalFiniteDiscretizationStrategy.eVAOptimalFiniteDiscretizationStrategyLegendreGaussLobatto.__doc__ = "The Legendre-Gauss-Lobatto quadrature rule"
AgEVAOptimalFiniteDiscretizationStrategy.eVAOptimalFiniteDiscretizationStrategyLegendreGaussRadau.__doc__ = "The Legendre-Gauss-Radau quadrature rule."

agcls.AgTypeNameMap["AgEVAOptimalFiniteDiscretizationStrategy"] = AgEVAOptimalFiniteDiscretizationStrategy

class AgEVAOptimalFiniteWorkingVariables(IntEnum):
    """Working Variables."""
    # Standard inertial equinoctial coordinates.
    eVAOptimalFiniteWorkingVariablesEquinoctial = 0
    # Use semi-latus rectum instead of SMA and true longitude instead of mean longitude.
    eVAOptimalFiniteWorkingVariablesModifiedEquinoctial = 1

AgEVAOptimalFiniteWorkingVariables.eVAOptimalFiniteWorkingVariablesEquinoctial.__doc__ = "Standard inertial equinoctial coordinates."
AgEVAOptimalFiniteWorkingVariables.eVAOptimalFiniteWorkingVariablesModifiedEquinoctial.__doc__ = "Use semi-latus rectum instead of SMA and true longitude instead of mean longitude."

agcls.AgTypeNameMap["AgEVAOptimalFiniteWorkingVariables"] = AgEVAOptimalFiniteWorkingVariables

class AgEVAOptimalFiniteScalingOptions(IntEnum):
    """Scaling Options."""
    # No scaling.
    eVAOptimalFiniteScalingOptionsNoScaling = 0
    # Scale based on canonical units.
    eVAOptimalFiniteScalingOptionsCanonicalUnits = 1
    # Scale based on the initial state.
    eVAOptimalFiniteScalingOptionsInitialStateBased = 2

AgEVAOptimalFiniteScalingOptions.eVAOptimalFiniteScalingOptionsNoScaling.__doc__ = "No scaling."
AgEVAOptimalFiniteScalingOptions.eVAOptimalFiniteScalingOptionsCanonicalUnits.__doc__ = "Scale based on canonical units."
AgEVAOptimalFiniteScalingOptions.eVAOptimalFiniteScalingOptionsInitialStateBased.__doc__ = "Scale based on the initial state."

agcls.AgTypeNameMap["AgEVAOptimalFiniteScalingOptions"] = AgEVAOptimalFiniteScalingOptions

class AgEVAOptimalFiniteSNOPTObjective(IntEnum):
    """Optimal Finite SNOPT objective."""
    # Minimize the total TOF along the collocation arc.
    eVAOptimalFiniteSNOPTObjectiveMinimizeTOF = 0
    # Minimize the total calculated DeltaV along the collocation arc.
    eVAOptimalFiniteSNOPTObjectiveMaximizeFinalRad = 1
    # Maximize the final mass after the collocation arc.
    eVAOptimalFiniteSNOPTObjectiveMinimizePropellantUse = 2

AgEVAOptimalFiniteSNOPTObjective.eVAOptimalFiniteSNOPTObjectiveMinimizeTOF.__doc__ = "Minimize the total TOF along the collocation arc."
AgEVAOptimalFiniteSNOPTObjective.eVAOptimalFiniteSNOPTObjectiveMaximizeFinalRad.__doc__ = "Minimize the total calculated DeltaV along the collocation arc."
AgEVAOptimalFiniteSNOPTObjective.eVAOptimalFiniteSNOPTObjectiveMinimizePropellantUse.__doc__ = "Maximize the final mass after the collocation arc."

agcls.AgTypeNameMap["AgEVAOptimalFiniteSNOPTObjective"] = AgEVAOptimalFiniteSNOPTObjective

class AgEVAOptimalFiniteSNOPTScaling(IntEnum):
    """Optimal Finite SNOPT scaling option."""
    # No scaling.
    eVAOptimalFiniteSNOPTScalingNone = 0
    # Scale linear constraints and variables.
    eVAOptimalFiniteSNOPTScalingLinear = 1
    # Scale all constraints and variables.
    eVAOptimalFiniteSNOPTScalingAll = 2

AgEVAOptimalFiniteSNOPTScaling.eVAOptimalFiniteSNOPTScalingNone.__doc__ = "No scaling."
AgEVAOptimalFiniteSNOPTScaling.eVAOptimalFiniteSNOPTScalingLinear.__doc__ = "Scale linear constraints and variables."
AgEVAOptimalFiniteSNOPTScaling.eVAOptimalFiniteSNOPTScalingAll.__doc__ = "Scale all constraints and variables."

agcls.AgTypeNameMap["AgEVAOptimalFiniteSNOPTScaling"] = AgEVAOptimalFiniteSNOPTScaling

class AgEVAOptimalFiniteExportNodesFormat(IntEnum):
    """Steering nodes export format."""
    # Export controls as Az/El = Ra/Dec angles.
    eVAOptimalFiniteExportNodesFormatAzimuthElevation = 0
    # Export controls as unit vectors = direction cosines.
    eVAOptimalFiniteExportNodesFormatUnitVector = 1

AgEVAOptimalFiniteExportNodesFormat.eVAOptimalFiniteExportNodesFormatAzimuthElevation.__doc__ = "Export controls as Az/El = Ra/Dec angles."
AgEVAOptimalFiniteExportNodesFormat.eVAOptimalFiniteExportNodesFormatUnitVector.__doc__ = "Export controls as unit vectors = direction cosines."

agcls.AgTypeNameMap["AgEVAOptimalFiniteExportNodesFormat"] = AgEVAOptimalFiniteExportNodesFormat

class AgEVAOptimalFiniteGuessMethod(IntEnum):
    """Guess interpolation method."""
    # Lagrange polynomial method.
    eVAOptimalFiniteGuessMethodLagrangePolynomial = 0
    # Piecewise linear method.
    eVAOptimalFiniteGuessMethodPiecewiseLinear = 1

AgEVAOptimalFiniteGuessMethod.eVAOptimalFiniteGuessMethodLagrangePolynomial.__doc__ = "Lagrange polynomial method."
AgEVAOptimalFiniteGuessMethod.eVAOptimalFiniteGuessMethodPiecewiseLinear.__doc__ = "Piecewise linear method."

agcls.AgTypeNameMap["AgEVAOptimalFiniteGuessMethod"] = AgEVAOptimalFiniteGuessMethod

class AgEVAImpDeltaVRep(IntEnum):
    """Vector representations for impulsive DeltaV specification"""
    # Cartesian - specify the impulsive DeltaV in Cartesian coordinates (X, Y, Z).
    eVACartesianImpDeltaV = 0
    # Spherical - specify the impulsive DeltaV in spherical coordinates (Azimuth, Elevation, Magnitude).
    eVASphericalImpDeltaV = 1

AgEVAImpDeltaVRep.eVACartesianImpDeltaV.__doc__ = "Cartesian - specify the impulsive DeltaV in Cartesian coordinates (X, Y, Z)."
AgEVAImpDeltaVRep.eVASphericalImpDeltaV.__doc__ = "Spherical - specify the impulsive DeltaV in spherical coordinates (Azimuth, Elevation, Magnitude)."

agcls.AgTypeNameMap["AgEVAImpDeltaVRep"] = AgEVAImpDeltaVRep

class AgEVALambertTargetCoordType(IntEnum):
    """Lambert Target CoordType."""
    # Cartesian - specifying an orbit by three position elements and three velocity elements in a rectangular coordinate system.
    eVALambertTargetCoordTypeCartesian = 0
    # Keplerian - the classical system, specifying an orbit by six elements describing its size, shape and three-dimensional orientation in space.
    eVALambertTargetCoordTypeKeplerian = 1

AgEVALambertTargetCoordType.eVALambertTargetCoordTypeCartesian.__doc__ = "Cartesian - specifying an orbit by three position elements and three velocity elements in a rectangular coordinate system."
AgEVALambertTargetCoordType.eVALambertTargetCoordTypeKeplerian.__doc__ = "Keplerian - the classical system, specifying an orbit by six elements describing its size, shape and three-dimensional orientation in space."

agcls.AgTypeNameMap["AgEVALambertTargetCoordType"] = AgEVALambertTargetCoordType

class AgEVALambertSolutionOptionType(IntEnum):
    """Lambert Solution Option Type."""
    # Fixed time - The type of Lambert solution to calculate.
    eAgEVALambertSolutionOptionFixedTime = 0
    # Minimum Eccentricity - The type of Lambert solution to calculate.
    eAgEVALambertSolutionOptionMinEccentricity = 1
    # Minimum Energy - The type of Lambert solution to calculate.
    eAgEVALambertSolutionOptionMinEnergy = 2

AgEVALambertSolutionOptionType.eAgEVALambertSolutionOptionFixedTime.__doc__ = "Fixed time - The type of Lambert solution to calculate."
AgEVALambertSolutionOptionType.eAgEVALambertSolutionOptionMinEccentricity.__doc__ = "Minimum Eccentricity - The type of Lambert solution to calculate."
AgEVALambertSolutionOptionType.eAgEVALambertSolutionOptionMinEnergy.__doc__ = "Minimum Energy - The type of Lambert solution to calculate."

agcls.AgTypeNameMap["AgEVALambertSolutionOptionType"] = AgEVALambertSolutionOptionType

class AgEVALambertOrbitalEnergyType(IntEnum):
    """Lambert Orbital Energy Type."""
    # Low energy- This is the orbital energy for the Lambert solution that corresponds to the smaller semimajor axis solution.
    eAgEVALambertOrbitalEnergyLow = 0
    # High energy- This is the orbital energy for the Lambert solution that corresponds to the larger semimajor axis solution.
    eAgEVALambertOrbitalEnergyHigh = 1

AgEVALambertOrbitalEnergyType.eAgEVALambertOrbitalEnergyLow.__doc__ = "Low energy- This is the orbital energy for the Lambert solution that corresponds to the smaller semimajor axis solution."
AgEVALambertOrbitalEnergyType.eAgEVALambertOrbitalEnergyHigh.__doc__ = "High energy- This is the orbital energy for the Lambert solution that corresponds to the larger semimajor axis solution."

agcls.AgTypeNameMap["AgEVALambertOrbitalEnergyType"] = AgEVALambertOrbitalEnergyType

class AgEVALambertDirectionOfMotionType(IntEnum):
    """Lambert Direction Of Motion Type."""
    # The short direction of motion for the Lambert solution.
    eAgEVALambertDirectionOfMotionShort = 0
    # The long direction of motion for the Lambert solution.
    eAgEVALambertDirectionOfMotionLong = 1

AgEVALambertDirectionOfMotionType.eAgEVALambertDirectionOfMotionShort.__doc__ = "The short direction of motion for the Lambert solution."
AgEVALambertDirectionOfMotionType.eAgEVALambertDirectionOfMotionLong.__doc__ = "The long direction of motion for the Lambert solution."

agcls.AgTypeNameMap["AgEVALambertDirectionOfMotionType"] = AgEVALambertDirectionOfMotionType

class AgEVAGoldenSectionDesiredOperation(IntEnum):
    """The types for Desired Operation/Objective of golden section profile."""
    # Minimize value
    eVAGoldenSectionDesiredOpMinimizeValue = 0
    # Maximize value
    eVAGoldenSectionDesiredOpMaximizeValue = 1

AgEVAGoldenSectionDesiredOperation.eVAGoldenSectionDesiredOpMinimizeValue.__doc__ = "Minimize value"
AgEVAGoldenSectionDesiredOperation.eVAGoldenSectionDesiredOpMaximizeValue.__doc__ = "Maximize value"

agcls.AgTypeNameMap["AgEVAGoldenSectionDesiredOperation"] = AgEVAGoldenSectionDesiredOperation

class AgEVAGridSearchDesiredOperation(IntEnum):
    """The types for Desired Operation/Objective of Grid Search profile."""
    # Minimize value
    eVAGridSearchDesiredOpMinimizeValue = 0
    # Maximize value
    eVAGridSearchDesiredOpMaximizeValue = 1

AgEVAGridSearchDesiredOperation.eVAGridSearchDesiredOpMinimizeValue.__doc__ = "Minimize value"
AgEVAGridSearchDesiredOperation.eVAGridSearchDesiredOpMaximizeValue.__doc__ = "Maximize value"

agcls.AgTypeNameMap["AgEVAGridSearchDesiredOperation"] = AgEVAGridSearchDesiredOperation

class AgEVAElement(IntEnum):
    """Which type of elements (osculating or mean)"""
    # Osculating.
    eVAElementOsculating = 0
    # Kozai-Izsak Mean.
    eVAElementKozaiIzsakMean = 1
    # Brouwer-Lyddane Mean Long.
    eVAElementBrouwerLyddaneMeanLong = 2
    # Brouwer-Lyddane Mean Short.
    eVAElementBrouwerLyddaneMeanShort = 3

AgEVAElement.eVAElementOsculating.__doc__ = "Osculating."
AgEVAElement.eVAElementKozaiIzsakMean.__doc__ = "Kozai-Izsak Mean."
AgEVAElement.eVAElementBrouwerLyddaneMeanLong.__doc__ = "Brouwer-Lyddane Mean Long."
AgEVAElement.eVAElementBrouwerLyddaneMeanShort.__doc__ = "Brouwer-Lyddane Mean Short."

agcls.AgTypeNameMap["AgEVAElement"] = AgEVAElement

class AgEVABaseSelection(IntEnum):
    """Access base object selections types."""
    # An object in the current scenario.
    eVABaseSelectionSpecify = 0
    # The current satellite.
    eVABaseSelectionCurrentSatellite = 1

AgEVABaseSelection.eVABaseSelectionSpecify.__doc__ = "An object in the current scenario."
AgEVABaseSelection.eVABaseSelectionCurrentSatellite.__doc__ = "The current satellite."

agcls.AgTypeNameMap["AgEVABaseSelection"] = AgEVABaseSelection

class AgEVAControlOrbitStateValue(IntEnum):
    """Orbit State Value properties that can be selected as control parameters for a Target Sequence."""
    # The Vx velocity component of the orbit state.
    eVAControlOrbitStateValueVx = 0
    # The Vy velocity component of the orbit state.
    eVAControlOrbitStateValueVy = 1
    # The Vz velocity component of the orbit state.
    eVAControlOrbitStateValueVz = 2
    # The x position component of the orbit state.
    eVAControlOrbitStateValueX = 3
    # The y position component of the orbit state.
    eVAControlOrbitStateValueY = 4
    # The z position component of the orbit state.
    eVAControlOrbitStateValueZ = 5

AgEVAControlOrbitStateValue.eVAControlOrbitStateValueVx.__doc__ = "The Vx velocity component of the orbit state."
AgEVAControlOrbitStateValue.eVAControlOrbitStateValueVy.__doc__ = "The Vy velocity component of the orbit state."
AgEVAControlOrbitStateValue.eVAControlOrbitStateValueVz.__doc__ = "The Vz velocity component of the orbit state."
AgEVAControlOrbitStateValue.eVAControlOrbitStateValueX.__doc__ = "The x position component of the orbit state."
AgEVAControlOrbitStateValue.eVAControlOrbitStateValueY.__doc__ = "The y position component of the orbit state."
AgEVAControlOrbitStateValue.eVAControlOrbitStateValueZ.__doc__ = "The z position component of the orbit state."

agcls.AgTypeNameMap["AgEVAControlOrbitStateValue"] = AgEVAControlOrbitStateValue

class AgEVASegmentState(IntEnum):
    """Segment state to use types."""
    # The segment initial state.
    eVASegmentStateInitial = 0
    # The segment final state.
    eVASegmentStateFinal = 1

AgEVASegmentState.eVASegmentStateInitial.__doc__ = "The segment initial state."
AgEVASegmentState.eVASegmentStateFinal.__doc__ = "The segment final state."

agcls.AgTypeNameMap["AgEVASegmentState"] = AgEVASegmentState

class AgEVADifferenceOrder(IntEnum):
    """The Difference order types."""
    # The initial minus current difference.
    eVADifferenceOrderInitialMinusCurrent = 0
    # The current minus initial difference.
    eVADifferenceOrderCurrentMinusInitial = 1

AgEVADifferenceOrder.eVADifferenceOrderInitialMinusCurrent.__doc__ = "The initial minus current difference."
AgEVADifferenceOrder.eVADifferenceOrderCurrentMinusInitial.__doc__ = "The current minus initial difference."

agcls.AgTypeNameMap["AgEVADifferenceOrder"] = AgEVADifferenceOrder

class AgEVASegmentDifferenceOrder(IntEnum):
    """The Difference Across Segments order types."""
    # The current minus segment difference.
    eVASegmentDifferenceOrderCurrentMinusSegment = 0
    # The segment minus current difference.
    eVASegmentDifferenceOrderSegmentMinusCurrent = 1

AgEVASegmentDifferenceOrder.eVASegmentDifferenceOrderCurrentMinusSegment.__doc__ = "The current minus segment difference."
AgEVASegmentDifferenceOrder.eVASegmentDifferenceOrderSegmentMinusCurrent.__doc__ = "The segment minus current difference."

agcls.AgTypeNameMap["AgEVASegmentDifferenceOrder"] = AgEVASegmentDifferenceOrder

class AgEVAControlRepeatingGroundTrackErr(IntEnum):
    """Repeating Ground Track Equator Error properties that can be selected as control parameters for a Target Sequence."""
    # The reference longitude.
    eVAControlRepeatingGroundTrackErrRefLon = 0
    # The repeat count.
    eVAControlRepeatingGroundTrackErrRepeatCount = 1

AgEVAControlRepeatingGroundTrackErr.eVAControlRepeatingGroundTrackErrRefLon.__doc__ = "The reference longitude."
AgEVAControlRepeatingGroundTrackErr.eVAControlRepeatingGroundTrackErrRepeatCount.__doc__ = "The repeat count."

agcls.AgTypeNameMap["AgEVAControlRepeatingGroundTrackErr"] = AgEVAControlRepeatingGroundTrackErr

class AgEVACalcObjectDirection(IntEnum):
    """The direction to search for a desired value."""
    # Search in the direction of the next calculation object.
    eVACalcObjectDirectionNext = 0
    # Search in the direction of the previous calculation object.
    eVACalcObjectDirectionPrevious = 1

AgEVACalcObjectDirection.eVACalcObjectDirectionNext.__doc__ = "Search in the direction of the next calculation object."
AgEVACalcObjectDirection.eVACalcObjectDirectionPrevious.__doc__ = "Search in the direction of the previous calculation object."

agcls.AgTypeNameMap["AgEVACalcObjectDirection"] = AgEVACalcObjectDirection

class AgEVACalcObjectOrbitPlaneSource(IntEnum):
    """The calculation object orbit plane source Types."""
    # Use the reference satellite to generate the orbit plane.
    eAgEVACalcObjectOrbitPlaneSourceReferenceSatellite = 0
    # Use the satellite to generate the orbit plane.
    eAgEVACalcObjectOrbitPlaneSourceSatellite = 1

AgEVACalcObjectOrbitPlaneSource.eAgEVACalcObjectOrbitPlaneSourceReferenceSatellite.__doc__ = "Use the reference satellite to generate the orbit plane."
AgEVACalcObjectOrbitPlaneSource.eAgEVACalcObjectOrbitPlaneSourceSatellite.__doc__ = "Use the satellite to generate the orbit plane."

agcls.AgTypeNameMap["AgEVACalcObjectOrbitPlaneSource"] = AgEVACalcObjectOrbitPlaneSource

class AgEVACalcObjectSunPosition(IntEnum):
    """The calculation object sun location Types."""
    # Use the sun location apparent from satellite.
    eAgEVACalcObjectSunPositionApparentFromSatellite = 0
    # Use the sun location apparent from reference satellite.
    eAgEVACalcObjectSunPositionApparentFromRefSatellite = 1
    # Use the sun location true from satellite.
    eAgEVACalcObjectSunPositionTrueFromSatellite = 2
    # Use the sun location true from reference satellite.
    eAgEVACalcObjectSunPositionTrueFromRefSatellite = 3

AgEVACalcObjectSunPosition.eAgEVACalcObjectSunPositionApparentFromSatellite.__doc__ = "Use the sun location apparent from satellite."
AgEVACalcObjectSunPosition.eAgEVACalcObjectSunPositionApparentFromRefSatellite.__doc__ = "Use the sun location apparent from reference satellite."
AgEVACalcObjectSunPosition.eAgEVACalcObjectSunPositionTrueFromSatellite.__doc__ = "Use the sun location true from satellite."
AgEVACalcObjectSunPosition.eAgEVACalcObjectSunPositionTrueFromRefSatellite.__doc__ = "Use the sun location true from reference satellite."

agcls.AgTypeNameMap["AgEVACalcObjectSunPosition"] = AgEVACalcObjectSunPosition

class AgEVACalcObjectAngleSign(IntEnum):
    """The sign of the angle when the relative position has a component along the orbit normal."""
    # Use the positive sign for the angle when the relative position has a positive component along the orbit normal.
    eAgEVACalcObjectAngleSignPositive = 0
    # Use the negative sign for the angle when the relative position does not have a positive component along the orbit normal.
    eAgEVACalcObjectAngleSignNegative = 1

AgEVACalcObjectAngleSign.eAgEVACalcObjectAngleSignPositive.__doc__ = "Use the positive sign for the angle when the relative position has a positive component along the orbit normal."
AgEVACalcObjectAngleSign.eAgEVACalcObjectAngleSignNegative.__doc__ = "Use the negative sign for the angle when the relative position does not have a positive component along the orbit normal."

agcls.AgTypeNameMap["AgEVACalcObjectAngleSign"] = AgEVACalcObjectAngleSign

class AgEVACalcObjectReferenceDirection(IntEnum):
    """Direction that establishes the zero value when projected into the orbit plane."""
    # Use the reference satellite position when projected into the orbit plane.
    eAgEVACalcObjectReferenceDirectionReferenceSatellitePosition = 0
    # Use the satellite position when projected into the orbit plane.
    eAgEVACalcObjectReferenceDirectionSatellitePosition = 1
    # Use the reference satellite nadir (centric) when projected into the orbit plane.
    eAgEVACalcObjectReferenceDirectionReferenceSatelliteNadir = 2
    # Use the satellite nadir (centric) position when projected into the orbit plane.
    eAgEVACalcObjectReferenceDirectionSatelliteNadir = 3

AgEVACalcObjectReferenceDirection.eAgEVACalcObjectReferenceDirectionReferenceSatellitePosition.__doc__ = "Use the reference satellite position when projected into the orbit plane."
AgEVACalcObjectReferenceDirection.eAgEVACalcObjectReferenceDirectionSatellitePosition.__doc__ = "Use the satellite position when projected into the orbit plane."
AgEVACalcObjectReferenceDirection.eAgEVACalcObjectReferenceDirectionReferenceSatelliteNadir.__doc__ = "Use the reference satellite nadir (centric) when projected into the orbit plane."
AgEVACalcObjectReferenceDirection.eAgEVACalcObjectReferenceDirectionSatelliteNadir.__doc__ = "Use the satellite nadir (centric) position when projected into the orbit plane."

agcls.AgTypeNameMap["AgEVACalcObjectReferenceDirection"] = AgEVACalcObjectReferenceDirection

class AgEVACalcObjectRelativePosition(IntEnum):
    """The calculation object relative position Types."""
    # Use the relative position satellite to reference satellite.
    eAgEVACalcObjectRelativePositionSatelliteToRefSatellite = 0
    # Use the relative position reference satellite to satellite.
    eAgEVACalcObjectRelativePositionRefSatelliteToSatellite = 1

AgEVACalcObjectRelativePosition.eAgEVACalcObjectRelativePositionSatelliteToRefSatellite.__doc__ = "Use the relative position satellite to reference satellite."
AgEVACalcObjectRelativePosition.eAgEVACalcObjectRelativePositionRefSatelliteToSatellite.__doc__ = "Use the relative position reference satellite to satellite."

agcls.AgTypeNameMap["AgEVACalcObjectRelativePosition"] = AgEVACalcObjectRelativePosition

class AgEVACalcObjectReferenceEllipse(IntEnum):
    """The calculation object reference ellipse Types."""
    # Use the reference satellite orbit.
    eAgEVACalcObjectReferenceEllipseRefSatOrbit = 0
    # Use the satellite orbit.
    eAgEVACalcObjectReferenceEllipseSatelliteOrbit = 1

AgEVACalcObjectReferenceEllipse.eAgEVACalcObjectReferenceEllipseRefSatOrbit.__doc__ = "Use the reference satellite orbit."
AgEVACalcObjectReferenceEllipse.eAgEVACalcObjectReferenceEllipseSatelliteOrbit.__doc__ = "Use the satellite orbit."

agcls.AgTypeNameMap["AgEVACalcObjectReferenceEllipse"] = AgEVACalcObjectReferenceEllipse

class AgEVACalcObjectLocationSource(IntEnum):
    """The calculation object location source Types."""
    # Use the reference satellite.
    eAgEVACalcObjectLocationSourceRefSat = 0
    # Use the satellite.
    eAgEVACalcObjectLocationSourceSatellite = 1

AgEVACalcObjectLocationSource.eAgEVACalcObjectLocationSourceRefSat.__doc__ = "Use the reference satellite."
AgEVACalcObjectLocationSource.eAgEVACalcObjectLocationSourceSatellite.__doc__ = "Use the satellite."

agcls.AgTypeNameMap["AgEVACalcObjectLocationSource"] = AgEVACalcObjectLocationSource

class AgEVAGravitationalParameterSource(IntEnum):
    """The source of the gravitational parameter for a CAgVAStateCalcGravitationalParameter calculation object."""
    # Cb File.
    eVAGravitationalParameterSourceCbFile = 0
    # Cb File -  System.
    eVAGravitationalParameterSourceCbFileSystem = 1
    # DE File.
    eVAGravitationalParameterSourceDEFile = 2
    # Gravity File.
    eVAGravitationalParameterSourceGravityFile = 3

AgEVAGravitationalParameterSource.eVAGravitationalParameterSourceCbFile.__doc__ = "Cb File."
AgEVAGravitationalParameterSource.eVAGravitationalParameterSourceCbFileSystem.__doc__ = "Cb File -  System."
AgEVAGravitationalParameterSource.eVAGravitationalParameterSourceDEFile.__doc__ = "DE File."
AgEVAGravitationalParameterSource.eVAGravitationalParameterSourceGravityFile.__doc__ = "Gravity File."

agcls.AgTypeNameMap["AgEVAGravitationalParameterSource"] = AgEVAGravitationalParameterSource

class AgEVAReferenceRadiusSource(IntEnum):
    """The source of the reference radius for a CAgVAStateCalcReferenceRadius calculation object."""
    # Cb File.
    eVAReferenceRadiusSourceCbFile = 0
    # Gravity File.
    eVAReferenceRadiusSourceGravityFile = 1

AgEVAReferenceRadiusSource.eVAReferenceRadiusSourceCbFile.__doc__ = "Cb File."
AgEVAReferenceRadiusSource.eVAReferenceRadiusSourceGravityFile.__doc__ = "Gravity File."

agcls.AgTypeNameMap["AgEVAReferenceRadiusSource"] = AgEVAReferenceRadiusSource

class AgEVAGravCoeffNormalizationType(IntEnum):
    """The normalization type for the CAgVAStateCalcGravCoeff calculation object."""
    # Normalized.
    eVAGravCoeffNormalized = 0
    # Unnormalized.
    eVAGravCoeffUnnormalized = 1

AgEVAGravCoeffNormalizationType.eVAGravCoeffNormalized.__doc__ = "Normalized."
AgEVAGravCoeffNormalizationType.eVAGravCoeffUnnormalized.__doc__ = "Unnormalized."

agcls.AgTypeNameMap["AgEVAGravCoeffNormalizationType"] = AgEVAGravCoeffNormalizationType

class AgEVAGravCoeffCoefficientType(IntEnum):
    """The coefficient type for the CAgVAStateCalcGravCoeff calculation object."""
    # Zonal.
    eVAGravCoeffCoefficientTypeZonal = 0
    # Cosine.
    eVAGravCoeffCoefficientTypeCosine = 1
    # Sine.
    eVAGravCoeffCoefficientTypeSine = 2

AgEVAGravCoeffCoefficientType.eVAGravCoeffCoefficientTypeZonal.__doc__ = "Zonal."
AgEVAGravCoeffCoefficientType.eVAGravCoeffCoefficientTypeCosine.__doc__ = "Cosine."
AgEVAGravCoeffCoefficientType.eVAGravCoeffCoefficientTypeSine.__doc__ = "Sine."

agcls.AgTypeNameMap["AgEVAGravCoeffCoefficientType"] = AgEVAGravCoeffCoefficientType

class AgEVASTMPertVariables(IntEnum):
    """The initial and final Cartesian variational variables that describe an STM element."""
    # Designates the initial or final variation in the 'x' component of position.
    eVASTMPertVariablePosX = 0
    # Designates the initial or final variation in the 'y' component of position.
    eVASTMPertVariablePosY = 1
    # Designates the initial or final variation in the 'z' component of position.
    eVASTMPertVariablePosZ = 2
    # Designates the initial or final variation in the 'x' component of velocity.
    eVASTMPertVariableVelX = 3
    # Designates the initial or final variation in the 'y' component of velocity.
    eVASTMPertVariableVelY = 4
    # Designates the initial or final variation in the 'z' component of velocity.
    eVASTMPertVariableVelZ = 5

AgEVASTMPertVariables.eVASTMPertVariablePosX.__doc__ = "Designates the initial or final variation in the 'x' component of position."
AgEVASTMPertVariables.eVASTMPertVariablePosY.__doc__ = "Designates the initial or final variation in the 'y' component of position."
AgEVASTMPertVariables.eVASTMPertVariablePosZ.__doc__ = "Designates the initial or final variation in the 'z' component of position."
AgEVASTMPertVariables.eVASTMPertVariableVelX.__doc__ = "Designates the initial or final variation in the 'x' component of velocity."
AgEVASTMPertVariables.eVASTMPertVariableVelY.__doc__ = "Designates the initial or final variation in the 'y' component of velocity."
AgEVASTMPertVariables.eVASTMPertVariableVelZ.__doc__ = "Designates the initial or final variation in the 'z' component of velocity."

agcls.AgTypeNameMap["AgEVASTMPertVariables"] = AgEVASTMPertVariables

class AgEVASTMEigenNumber(IntEnum):
    """The number that describes one of the 6 STM Eigenvalues or Eigenvectors."""
    # Designates the first Eigenvalue or Eigenvector.
    eVASTMEigenNumber1 = 0
    # Designates the second Eigenvalue or Eigenvector.
    eVASTMEigenNumber2 = 1
    # Designates the third Eigenvalue or Eigenvector.
    eVASTMEigenNumber3 = 2
    # Designates the fourth Eigenvalue or Eigenvector.
    eVASTMEigenNumber4 = 3
    # Designates the fifth Eigenvalue or Eigenvector.
    eVASTMEigenNumber5 = 4
    # Designates the sixth Eigenvalue or Eigenvector.
    eVASTMEigenNumber6 = 5

AgEVASTMEigenNumber.eVASTMEigenNumber1.__doc__ = "Designates the first Eigenvalue or Eigenvector."
AgEVASTMEigenNumber.eVASTMEigenNumber2.__doc__ = "Designates the second Eigenvalue or Eigenvector."
AgEVASTMEigenNumber.eVASTMEigenNumber3.__doc__ = "Designates the third Eigenvalue or Eigenvector."
AgEVASTMEigenNumber.eVASTMEigenNumber4.__doc__ = "Designates the fourth Eigenvalue or Eigenvector."
AgEVASTMEigenNumber.eVASTMEigenNumber5.__doc__ = "Designates the fifth Eigenvalue or Eigenvector."
AgEVASTMEigenNumber.eVASTMEigenNumber6.__doc__ = "Designates the sixth Eigenvalue or Eigenvector."

agcls.AgTypeNameMap["AgEVASTMEigenNumber"] = AgEVASTMEigenNumber

class AgEVAComplexNumber(IntEnum):
    """Whether a value represents the real or imaginary portion of a number."""
    # Designates the value as the real part.
    eVAComplexNumberReal = 0
    # Designates the value as the imaginary part.
    eVAComplexNumberImaginary = 1

AgEVAComplexNumber.eVAComplexNumberReal.__doc__ = "Designates the value as the real part."
AgEVAComplexNumber.eVAComplexNumberImaginary.__doc__ = "Designates the value as the imaginary part."

agcls.AgTypeNameMap["AgEVAComplexNumber"] = AgEVAComplexNumber

class AgEVASquaredType(IntEnum):
    """Whether to calculate the value as the square of the sum of each component or the sum of the squares."""
    # Designates the calculation to be the sum of the squares.
    eVASumOfSquares = 0
    # Designates the calculation to be the square of the sum.
    eVASquareOfSum = 1

AgEVASquaredType.eVASumOfSquares.__doc__ = "Designates the calculation to be the sum of the squares."
AgEVASquaredType.eVASquareOfSum.__doc__ = "Designates the calculation to be the square of the sum."

agcls.AgTypeNameMap["AgEVASquaredType"] = AgEVASquaredType

class AgEVAGeoStationaryDriftRateModel(IntEnum):
    """Gravity models used to compute geostationary drift rate."""
    # Computes drift rate using two-body point mass gravity model.
    eVAGeoStationaryDriftRatePointMass = 0
    # Computes drift rate using gravity model that includes point mass plus secular effect of J2.
    eVAGeoStationaryDriftRatePointMassPlusJ2 = 1

AgEVAGeoStationaryDriftRateModel.eVAGeoStationaryDriftRatePointMass.__doc__ = "Computes drift rate using two-body point mass gravity model."
AgEVAGeoStationaryDriftRateModel.eVAGeoStationaryDriftRatePointMassPlusJ2.__doc__ = "Computes drift rate using gravity model that includes point mass plus secular effect of J2."

agcls.AgTypeNameMap["AgEVAGeoStationaryDriftRateModel"] = AgEVAGeoStationaryDriftRateModel

class AgEVAGeoStationaryInclinationMag(IntEnum):
    """Magnitude to use when computing the inclination vector."""
    # Computes inclination vector magnitude as the inclination angle itself (in radins).
    eVAGeoStationaryInclinationMagInclinationAngle = 0
    # Computes inclination vector magnitude as sin(inclination).
    eVAGeoStationaryInclinationMagSinInclination = 1
    # Computes inclination vector magnitude as sin(0.5*inclination).
    eVAGeoStationaryInclinationMagSinHalfInclination = 2
    # Computes inclination vector magnitude as 2*sin(0.5*inclination).
    eVAGeoStationaryInclinationMagTwiceSinHalfInclination = 3
    # Computes inclination vector magnitude as tan(0.5*inclination).
    eVAGeoStationaryInclinationMagTanHalfInclination = 4
    # Computes inclination vector magnitude as 2*tan(0.5*inclination).
    eVAGeoStationaryInclinationMagTwiceTanHalfInclination = 5

AgEVAGeoStationaryInclinationMag.eVAGeoStationaryInclinationMagInclinationAngle.__doc__ = "Computes inclination vector magnitude as the inclination angle itself (in radins)."
AgEVAGeoStationaryInclinationMag.eVAGeoStationaryInclinationMagSinInclination.__doc__ = "Computes inclination vector magnitude as sin(inclination)."
AgEVAGeoStationaryInclinationMag.eVAGeoStationaryInclinationMagSinHalfInclination.__doc__ = "Computes inclination vector magnitude as sin(0.5*inclination)."
AgEVAGeoStationaryInclinationMag.eVAGeoStationaryInclinationMagTwiceSinHalfInclination.__doc__ = "Computes inclination vector magnitude as 2*sin(0.5*inclination)."
AgEVAGeoStationaryInclinationMag.eVAGeoStationaryInclinationMagTanHalfInclination.__doc__ = "Computes inclination vector magnitude as tan(0.5*inclination)."
AgEVAGeoStationaryInclinationMag.eVAGeoStationaryInclinationMagTwiceTanHalfInclination.__doc__ = "Computes inclination vector magnitude as 2*tan(0.5*inclination)."

agcls.AgTypeNameMap["AgEVAGeoStationaryInclinationMag"] = AgEVAGeoStationaryInclinationMag

class AgEVACbGravityModel(IntEnum):
    """The gravity model."""
    # ZonalsToJ4 - (various) Gravity model for all central bodies except Sun, Earth and Moon.
    eVACbGravityModelZonalsToJ4 = 0
    # Earth Simple gravity model.
    eVACbGravityModelEarthSimple = 1
    # WGS84 - (Earth) World Geodetic System 1984; WGS 84 was created by the Defense Mapping Agency (DMA).
    eVACbGravityModelWGS84 = 2
    # EGM96 - (Earth) Earth Gravity Model 1996, a geopotential model of the Earth consisting of spherical harmonic coefficients complete to degree and order 360. Developed jointly by NGA (formerly known as NIMA), NASA Goddard and Ohio State University.
    eVACbGravityModelEGM96 = 3
    # GEMT1 - (Earth) Goddard Earth Model T1.
    eVACbGravityModelGEMT1 = 4
    # JGM2 - (Earth) Joint Gravity Model version 2, a model that describes the Earth gravity field up to degree and order 70, developed by NASA/GSFC Space Geodesy Branch, the University of Texas Center for Space Research and CNES.
    eVACbGravityModelJGM2 = 5
    # JGM3 - (Earth) Joint Gravity Model version 3, a model that describes the Earth gravity field up to degree and order 70, developed by the University of Texas and NASA/GSFC.
    eVACbGravityModelJGM3 = 6
    # WGS84 EGM96 - (Earth) Uses the coefficients from EGM96 with the shape model of WGS84. This model is the recommended gravity model of the WGS84 definition document: NIMA TR8350.2, Third Edition, 4 July 1997.
    eVACbGravityModelWSG84EGM96 = 7
    # WGS84 old - (Earth) Old version of WGS84.
    eVACbGravityModelWGS84Old = 8
    # GLGM2 - (Moon) GM = 4.9028029535968e+12, reference distance = 1,738,000 m.
    eVACbGravityModelGLGM2 = 9
    # LP165P - (Moon) GM = 4.902801056E+12, reference distance = 1,738,000.0 m.
    eVACbGravityModelLP165P = 10
    # Icarus1987 - (Mercury) GM = 2.203209e+013, reference distance = 2,439,000 m. Reference: Anderson, J. J., Colombo, G., Esposito, P. B., Lau E. L., and Trager, G. B. 'The Mass, Gravity Field, and Ephemeris of Mercury', Icarus 71, 337-349, 1987.
    eVACbGravityModelIcarus1987 = 11
    # MGNP180U - (Venus) GM = 3.248585920790000E+14, reference distance = 6,051,000.0 m.
    eVACbGravityModelMGNP180U = 12
    # GMM1 - (Mars) GM = 4.28283579647735e+13, reference distance = 3,394,200.0 m.
    eVACbGravityModelGMM1 = 13
    # GMM2B - (Mars) GM = 4.28283719012840e+13, reference distance = 3,397,000 m. Reference: These numbers came from the GMM-2B model published at <a href='https://www.nasa.gov/'>NASA</a> and were gotten from Journal of Geophysical Research, November 2000.
    eVACbGravityModelGMM2B = 14
    # Mars50c - (Mars) GM = 4.2828370371000e+13, reference distance = 3,394,200 m.
    eVACbGravityModelMars50c = 15
    # JUP230 - (Jupiter) GM = 1.26686535e+017, reference distance = 71,492,000 m. Reference: Jacobson, R. A. The JUP230 orbit solution, 2003.
    eVACbGravityModelJUP230 = 16
    # Astron2004 - (Saturn) GM = 3.7931284e+016, reference distance = 60,330,000 m.
    eVACbGravityModelAstron2004 = 17
    # AstronAstro1991 - (Neptune) GM = 6.835107e+015, reference distance = 25,225,000 m.
    eVACbGravityModelAstronAstro1991 = 18
    # Icarus2001 - (Callisto) GM = 7.179292e+12, reference distance = 2,410,300 m.
    eVACbGravityModelIcarus2001 = 19
    # Science1998 - (Europa) GM =3.20272e+012, reference distance = 1,565,000 m.
    eVACbGravityModelScience1998 = 20
    # Nature1996 - (Ganymede) GM = 9.8866e+12, reference distance = 2,634,000 m.
    eVACbGravityModelNature1996 = 21
    # JGeoRes2001 - (Io) GM = 5.96e+12, reference distance = 1,821,600 m.
    eVACbGravityModelJGeoRes2001 = 22
    # GGM01C - (Earth)
    eVACbGravityModelGGM01C = 23
    # GGM02C - (Earth)
    eVACbGravityModelGGM02C = 24
    # WGS72 ZonalsToJ4 - (Earth)
    eVACbGravityModelWGS72ZonalsToJ4 = 25
    # LP100J - (Moon)
    eVACbGravityModelLP100J = 26
    # LP100K - (Moon)
    eVACbGravityModelLP100K = 27
    # LP150Q - (Moon)
    eVACbGravityModelLP150Q = 28
    # LP75G - (Moon)
    eVACbGravityModelLP75G = 29

AgEVACbGravityModel.eVACbGravityModelZonalsToJ4.__doc__ = "ZonalsToJ4 - (various) Gravity model for all central bodies except Sun, Earth and Moon."
AgEVACbGravityModel.eVACbGravityModelEarthSimple.__doc__ = "Earth Simple gravity model."
AgEVACbGravityModel.eVACbGravityModelWGS84.__doc__ = "WGS84 - (Earth) World Geodetic System 1984; WGS 84 was created by the Defense Mapping Agency (DMA)."
AgEVACbGravityModel.eVACbGravityModelEGM96.__doc__ = "EGM96 - (Earth) Earth Gravity Model 1996, a geopotential model of the Earth consisting of spherical harmonic coefficients complete to degree and order 360. Developed jointly by NGA (formerly known as NIMA), NASA Goddard and Ohio State University."
AgEVACbGravityModel.eVACbGravityModelGEMT1.__doc__ = "GEMT1 - (Earth) Goddard Earth Model T1."
AgEVACbGravityModel.eVACbGravityModelJGM2.__doc__ = "JGM2 - (Earth) Joint Gravity Model version 2, a model that describes the Earth gravity field up to degree and order 70, developed by NASA/GSFC Space Geodesy Branch, the University of Texas Center for Space Research and CNES."
AgEVACbGravityModel.eVACbGravityModelJGM3.__doc__ = "JGM3 - (Earth) Joint Gravity Model version 3, a model that describes the Earth gravity field up to degree and order 70, developed by the University of Texas and NASA/GSFC."
AgEVACbGravityModel.eVACbGravityModelWSG84EGM96.__doc__ = "WGS84 EGM96 - (Earth) Uses the coefficients from EGM96 with the shape model of WGS84. This model is the recommended gravity model of the WGS84 definition document: NIMA TR8350.2, Third Edition, 4 July 1997."
AgEVACbGravityModel.eVACbGravityModelWGS84Old.__doc__ = "WGS84 old - (Earth) Old version of WGS84."
AgEVACbGravityModel.eVACbGravityModelGLGM2.__doc__ = "GLGM2 - (Moon) GM = 4.9028029535968e+12, reference distance = 1,738,000 m."
AgEVACbGravityModel.eVACbGravityModelLP165P.__doc__ = "LP165P - (Moon) GM = 4.902801056E+12, reference distance = 1,738,000.0 m."
AgEVACbGravityModel.eVACbGravityModelIcarus1987.__doc__ = "Icarus1987 - (Mercury) GM = 2.203209e+013, reference distance = 2,439,000 m. Reference: Anderson, J. J., Colombo, G., Esposito, P. B., Lau E. L., and Trager, G. B. 'The Mass, Gravity Field, and Ephemeris of Mercury', Icarus 71, 337-349, 1987."
AgEVACbGravityModel.eVACbGravityModelMGNP180U.__doc__ = "MGNP180U - (Venus) GM = 3.248585920790000E+14, reference distance = 6,051,000.0 m."
AgEVACbGravityModel.eVACbGravityModelGMM1.__doc__ = "GMM1 - (Mars) GM = 4.28283579647735e+13, reference distance = 3,394,200.0 m."
AgEVACbGravityModel.eVACbGravityModelGMM2B.__doc__ = "GMM2B - (Mars) GM = 4.28283719012840e+13, reference distance = 3,397,000 m. Reference: These numbers came from the GMM-2B model published at <a href='https://www.nasa.gov/'>NASA</a> and were gotten from Journal of Geophysical Research, November 2000."
AgEVACbGravityModel.eVACbGravityModelMars50c.__doc__ = "Mars50c - (Mars) GM = 4.2828370371000e+13, reference distance = 3,394,200 m."
AgEVACbGravityModel.eVACbGravityModelJUP230.__doc__ = "JUP230 - (Jupiter) GM = 1.26686535e+017, reference distance = 71,492,000 m. Reference: Jacobson, R. A. The JUP230 orbit solution, 2003."
AgEVACbGravityModel.eVACbGravityModelAstron2004.__doc__ = "Astron2004 - (Saturn) GM = 3.7931284e+016, reference distance = 60,330,000 m."
AgEVACbGravityModel.eVACbGravityModelAstronAstro1991.__doc__ = "AstronAstro1991 - (Neptune) GM = 6.835107e+015, reference distance = 25,225,000 m."
AgEVACbGravityModel.eVACbGravityModelIcarus2001.__doc__ = "Icarus2001 - (Callisto) GM = 7.179292e+12, reference distance = 2,410,300 m."
AgEVACbGravityModel.eVACbGravityModelScience1998.__doc__ = "Science1998 - (Europa) GM =3.20272e+012, reference distance = 1,565,000 m."
AgEVACbGravityModel.eVACbGravityModelNature1996.__doc__ = "Nature1996 - (Ganymede) GM = 9.8866e+12, reference distance = 2,634,000 m."
AgEVACbGravityModel.eVACbGravityModelJGeoRes2001.__doc__ = "JGeoRes2001 - (Io) GM = 5.96e+12, reference distance = 1,821,600 m."
AgEVACbGravityModel.eVACbGravityModelGGM01C.__doc__ = "GGM01C - (Earth)"
AgEVACbGravityModel.eVACbGravityModelGGM02C.__doc__ = "GGM02C - (Earth)"
AgEVACbGravityModel.eVACbGravityModelWGS72ZonalsToJ4.__doc__ = "WGS72 ZonalsToJ4 - (Earth)"
AgEVACbGravityModel.eVACbGravityModelLP100J.__doc__ = "LP100J - (Moon)"
AgEVACbGravityModel.eVACbGravityModelLP100K.__doc__ = "LP100K - (Moon)"
AgEVACbGravityModel.eVACbGravityModelLP150Q.__doc__ = "LP150Q - (Moon)"
AgEVACbGravityModel.eVACbGravityModelLP75G.__doc__ = "LP75G - (Moon)"

agcls.AgTypeNameMap["AgEVACbGravityModel"] = AgEVACbGravityModel

class AgEVACbShape(IntEnum):
    """The central body shape types."""
    # A triaxial ellipsoid defined by a semi-major axis, semi-mid axis and semi-minor axis.
    eVACbShapeTriaxialEllipsoid = 0
    # An oblate spheroid defined by a minimum and maximum radii, and a derived flattening coefficient.
    eVACbShapeOblateSpheroid = 1
    # A sphere defined by a radius.
    eVACbShapeSphere = 2

AgEVACbShape.eVACbShapeTriaxialEllipsoid.__doc__ = "A triaxial ellipsoid defined by a semi-major axis, semi-mid axis and semi-minor axis."
AgEVACbShape.eVACbShapeOblateSpheroid.__doc__ = "An oblate spheroid defined by a minimum and maximum radii, and a derived flattening coefficient."
AgEVACbShape.eVACbShapeSphere.__doc__ = "A sphere defined by a radius."

agcls.AgTypeNameMap["AgEVACbShape"] = AgEVACbShape

class AgEVACbAttitude(IntEnum):
    """The central body attitude types."""
    # An IAU 1994 attitude definition.
    eVACbAttitudeIAU1994 = 0
    # A rotation coefficient file.
    eVACbAttitudeRotationCoefficientsFile = 1

AgEVACbAttitude.eVACbAttitudeIAU1994.__doc__ = "An IAU 1994 attitude definition."
AgEVACbAttitude.eVACbAttitudeRotationCoefficientsFile.__doc__ = "A rotation coefficient file."

agcls.AgTypeNameMap["AgEVACbAttitude"] = AgEVACbAttitude

class AgEVACbEphemeris(IntEnum):
    """The central body ephemeris types."""
    # Specified values and rates of change for the classical orbital elements.
    eVACbEphemerisAnalyticOrbit = 0
    # An external ephemeris (.e) file.
    eVACbEphemerisFile = 1
    # Ephemerides from the Jet Propulsion Laboratory's JPL DE set are used.
    eVACbEphemerisJPLDE = 2
    # The SPICE propagator reads ephemeris from binary files that are in a standard format produced by the Jet Propulsion Laboratory for ephemeris for celestial bodies but can be used for spacecraft.
    eVACbEphemerisJPLSPICE = 3
    # A planetary ephemeris (.pe) file.
    eVACbEphemerisPlanetary = 4

AgEVACbEphemeris.eVACbEphemerisAnalyticOrbit.__doc__ = "Specified values and rates of change for the classical orbital elements."
AgEVACbEphemeris.eVACbEphemerisFile.__doc__ = "An external ephemeris (.e) file."
AgEVACbEphemeris.eVACbEphemerisJPLDE.__doc__ = "Ephemerides from the Jet Propulsion Laboratory's JPL DE set are used."
AgEVACbEphemeris.eVACbEphemerisJPLSPICE.__doc__ = "The SPICE propagator reads ephemeris from binary files that are in a standard format produced by the Jet Propulsion Laboratory for ephemeris for celestial bodies but can be used for spacecraft."
AgEVACbEphemeris.eVACbEphemerisPlanetary.__doc__ = "A planetary ephemeris (.pe) file."

agcls.AgTypeNameMap["AgEVACbEphemeris"] = AgEVACbEphemeris

class AgEVAControlPowerInternal(IntEnum):
    """Internal Power properties that can be selected as control parameters for a Target Sequence."""
    # The power generated by the spacecraft from internal sources.
    eVAControlPowerInternalGeneratedPower = 0
    # The percent degradation per year; degradation factor is (1 - x%/yr)timeSinceRefEpoch.
    eVAControlPowerInternalPercentDegradation = 1
    # The date and time used as a reference epoch for degradation.
    eVAControlPowerInternalEpoch = 2

AgEVAControlPowerInternal.eVAControlPowerInternalGeneratedPower.__doc__ = "The power generated by the spacecraft from internal sources."
AgEVAControlPowerInternal.eVAControlPowerInternalPercentDegradation.__doc__ = "The percent degradation per year; degradation factor is (1 - x%/yr)timeSinceRefEpoch."
AgEVAControlPowerInternal.eVAControlPowerInternalEpoch.__doc__ = "The date and time used as a reference epoch for degradation."

agcls.AgTypeNameMap["AgEVAControlPowerInternal"] = AgEVAControlPowerInternal

class AgEVAControlPowerProcessed(IntEnum):
    """Processed Power properties that can be selected as control parameters for a Target Sequence."""
    # The efficiency of the power processing unit(PPU).
    eVAControlPowerProcessedEfficiency = 0
    # The power diverted from the power source and unavailable to the power processing unit(PPU).
    eVAControlPowerProcessedLoad = 1

AgEVAControlPowerProcessed.eVAControlPowerProcessedEfficiency.__doc__ = "The efficiency of the power processing unit(PPU)."
AgEVAControlPowerProcessed.eVAControlPowerProcessedLoad.__doc__ = "The power diverted from the power source and unavailable to the power processing unit(PPU)."

agcls.AgTypeNameMap["AgEVAControlPowerProcessed"] = AgEVAControlPowerProcessed

class AgEVAControlPowerSolarArray(IntEnum):
    """Solar Array Power properties that can be selected as control parameters for a Target Sequence."""
    # The ThermalModel.C0 coefficient.
    eVAControlPowerSolarArrayC0 = 0
    # The ThermalModel.C1 coefficient.
    eVAControlPowerSolarArrayC1 = 1
    # The ThermalModel.C2 coefficient.
    eVAControlPowerSolarArrayC2 = 2
    # The ThermalModel.C3 coefficient.
    eVAControlPowerSolarArrayC3 = 3
    # The ThermalModel.C4 coefficient.
    eVAControlPowerSolarArrayC4 = 4
    # The solar array panel area.
    eVAControlPowerSolarArrayArea = 5
    # The array efficiency in producing output power from a collection of cells.
    eVAControlPowerSolarArrayEfficiency = 6
    # The cell efficiency in producing output power from incident sunlight.
    eVAControlPowerSolarArrayCellEfficiency = 7
    # The solar array concentration factor.
    eVAControlPowerSolarArrayConcentration = 8
    # The angle from the panel normal vector to the apparent sun line.
    eVAControlPowerSolarArrayInclinationToSunLine = 9
    # The percent degradation per year; degradation factor is (1 - x%/yr)timeSinceRefEpoch.
    eVAControlPowerSolarArrayPercentDegradation = 10
    # The date and time used as a reference epoch for degradation.
    eVAControlPowerSolarArrayEpoch = 11

AgEVAControlPowerSolarArray.eVAControlPowerSolarArrayC0.__doc__ = "The ThermalModel.C0 coefficient."
AgEVAControlPowerSolarArray.eVAControlPowerSolarArrayC1.__doc__ = "The ThermalModel.C1 coefficient."
AgEVAControlPowerSolarArray.eVAControlPowerSolarArrayC2.__doc__ = "The ThermalModel.C2 coefficient."
AgEVAControlPowerSolarArray.eVAControlPowerSolarArrayC3.__doc__ = "The ThermalModel.C3 coefficient."
AgEVAControlPowerSolarArray.eVAControlPowerSolarArrayC4.__doc__ = "The ThermalModel.C4 coefficient."
AgEVAControlPowerSolarArray.eVAControlPowerSolarArrayArea.__doc__ = "The solar array panel area."
AgEVAControlPowerSolarArray.eVAControlPowerSolarArrayEfficiency.__doc__ = "The array efficiency in producing output power from a collection of cells."
AgEVAControlPowerSolarArray.eVAControlPowerSolarArrayCellEfficiency.__doc__ = "The cell efficiency in producing output power from incident sunlight."
AgEVAControlPowerSolarArray.eVAControlPowerSolarArrayConcentration.__doc__ = "The solar array concentration factor."
AgEVAControlPowerSolarArray.eVAControlPowerSolarArrayInclinationToSunLine.__doc__ = "The angle from the panel normal vector to the apparent sun line."
AgEVAControlPowerSolarArray.eVAControlPowerSolarArrayPercentDegradation.__doc__ = "The percent degradation per year; degradation factor is (1 - x%/yr)timeSinceRefEpoch."
AgEVAControlPowerSolarArray.eVAControlPowerSolarArrayEpoch.__doc__ = "The date and time used as a reference epoch for degradation."

agcls.AgTypeNameMap["AgEVAControlPowerSolarArray"] = AgEVAControlPowerSolarArray

class AgEVAThirdBodyMode(IntEnum):
    """The third body gravity mode."""
    # Defines the gravitational effect as a full Gravitational Force model
    eVAThirdBodyModeGravityField = 0
    # Defines the gravitational effect as a third body point mass effect.
    eVAThirdBodyModePointMass = 1

AgEVAThirdBodyMode.eVAThirdBodyModeGravityField.__doc__ = "Defines the gravitational effect as a full Gravitational Force model"
AgEVAThirdBodyMode.eVAThirdBodyModePointMass.__doc__ = "Defines the gravitational effect as a third body point mass effect."

agcls.AgTypeNameMap["AgEVAThirdBodyMode"] = AgEVAThirdBodyMode

class AgEVAGravParamSource(IntEnum):
    """The gravity parameter source."""
    # The Cb file provided with STK; uses the default, body centered gravity source for the central body.
    eVAGravParamSourceCbFile = 0
    # A DE file; body centered for the inner planets and barycentered for the outer planets.
    eVAGravParamSourceDEFile = 1
    # User defined; requires you to specify the mu value of the Gravitational Parameter.
    eVAGravParamSourceUser = 2
    # The Cb file provided with STK; uses the default, barycentered gravity source for the central body.
    eVAGravParamSourceCbFileSystem = 3

AgEVAGravParamSource.eVAGravParamSourceCbFile.__doc__ = "The Cb file provided with STK; uses the default, body centered gravity source for the central body."
AgEVAGravParamSource.eVAGravParamSourceDEFile.__doc__ = "A DE file; body centered for the inner planets and barycentered for the outer planets."
AgEVAGravParamSource.eVAGravParamSourceUser.__doc__ = "User defined; requires you to specify the mu value of the Gravitational Parameter."
AgEVAGravParamSource.eVAGravParamSourceCbFileSystem.__doc__ = "The Cb file provided with STK; uses the default, barycentered gravity source for the central body."

agcls.AgTypeNameMap["AgEVAGravParamSource"] = AgEVAGravParamSource

class AgEVAEphemSource(IntEnum):
    """The ephemeris source type."""
    # The Cb file provided with STK; uses the default ephemeris source for that central body.
    eVAEphemSourceCbFile = 0
    # A DE file; body centered for the inner planets and barycentered for the outer planets.
    eVAEphemSourceDEFile = 1
    # A SPICE file, barycentered; uses the entire planetary system as a single effect, with the system center as the point mass.
    eVAEphemSourceSPICEBary = 2
    # A SPICE file, body centered; uses only the planet as the effect, with the planet's center as the point mass.
    eVAEphemSourceSPICEBody = 3

AgEVAEphemSource.eVAEphemSourceCbFile.__doc__ = "The Cb file provided with STK; uses the default ephemeris source for that central body."
AgEVAEphemSource.eVAEphemSourceDEFile.__doc__ = "A DE file; body centered for the inner planets and barycentered for the outer planets."
AgEVAEphemSource.eVAEphemSourceSPICEBary.__doc__ = "A SPICE file, barycentered; uses the entire planetary system as a single effect, with the system center as the point mass."
AgEVAEphemSource.eVAEphemSourceSPICEBody.__doc__ = "A SPICE file, body centered; uses only the planet as the effect, with the planet's center as the point mass."

agcls.AgTypeNameMap["AgEVAEphemSource"] = AgEVAEphemSource

class AgEVASolarForceMethod(IntEnum):
    """The solar force method type for a spherical or N-plate SRP model."""
    # Luminosity - used as the value for solar flux at 1 AU in the Solar Radiation computation.
    eVASolarForceMethodLuminosity = 0
    # Mean Flux - used as the value for solar flux at 1 AU in the Solar Radiation computation.
    eVASolarForceMethodMeanFlux = 1

AgEVASolarForceMethod.eVASolarForceMethodLuminosity.__doc__ = "Luminosity - used as the value for solar flux at 1 AU in the Solar Radiation computation."
AgEVASolarForceMethod.eVASolarForceMethodMeanFlux.__doc__ = "Mean Flux - used as the value for solar flux at 1 AU in the Solar Radiation computation."

agcls.AgTypeNameMap["AgEVASolarForceMethod"] = AgEVASolarForceMethod

class AgEVAShadowModel(IntEnum):
    """The shadow model type."""
    # Cylindrical - assumes the Sun to be at infinite distance so that all light coming from the Sun moves in a direction parallel to the Sun to satellite vector.
    eVAShadowModelCylindrical = 0
    # Dual Cone - uses the actual size and distance of the Sun to model regions of full, partial (penumbra) and zero (umbra) sunlight. The visible fraction of the solar disk is used to compute the acceleration during penumbra.
    eVAShadowModelDualCone = 1
    # None - turns off all shadowing of the satellite.
    eVAShadowModelNone = 2

AgEVAShadowModel.eVAShadowModelCylindrical.__doc__ = "Cylindrical - assumes the Sun to be at infinite distance so that all light coming from the Sun moves in a direction parallel to the Sun to satellite vector."
AgEVAShadowModel.eVAShadowModelDualCone.__doc__ = "Dual Cone - uses the actual size and distance of the Sun to model regions of full, partial (penumbra) and zero (umbra) sunlight. The visible fraction of the solar disk is used to compute the acceleration during penumbra."
AgEVAShadowModel.eVAShadowModelNone.__doc__ = "None - turns off all shadowing of the satellite."

agcls.AgTypeNameMap["AgEVAShadowModel"] = AgEVAShadowModel

class AgEVASunPosition(IntEnum):
    """The sun position type."""
    # Apparent - takes into account the time required for light to travel from the sun to the position of the spacecraft.
    eVASunPositionApparent = 0
    # Apparent Sun to True Cb - takes into account the time required for light to travel from the sun to the central body.
    eVASunPositionApparentToTrueCb = 1
    # True - assumes that light from the sun reaches the spacecraft instantaneously.
    eVASunPositionTrue = 2

AgEVASunPosition.eVASunPositionApparent.__doc__ = "Apparent - takes into account the time required for light to travel from the sun to the position of the spacecraft."
AgEVASunPosition.eVASunPositionApparentToTrueCb.__doc__ = "Apparent Sun to True Cb - takes into account the time required for light to travel from the sun to the central body."
AgEVASunPosition.eVASunPositionTrue.__doc__ = "True - assumes that light from the sun reaches the spacecraft instantaneously."

agcls.AgTypeNameMap["AgEVASunPosition"] = AgEVASunPosition

class AgEVAAtmosDataSource(IntEnum):
    """The Atmospheric data source type."""
    # Constant Atmospheric data source.
    eVAAtmosDataSourceConstant = 0
    # Atmopsheric data source from file.
    eVAAtmosDataSourceFile = 1

AgEVAAtmosDataSource.eVAAtmosDataSourceConstant.__doc__ = "Constant Atmospheric data source."
AgEVAAtmosDataSource.eVAAtmosDataSourceFile.__doc__ = "Atmopsheric data source from file."

agcls.AgTypeNameMap["AgEVAAtmosDataSource"] = AgEVAAtmosDataSource

class AgEVAGeoMagneticFluxSource(IntEnum):
    """Whether to use Kp or Ap data from the flux file."""
    # Read Ap from file.
    eVAGeoMagneticFluxSourceAp = 0
    # Read Kp from file.
    eVAGeoMagneticFluxSourceKp = 1

AgEVAGeoMagneticFluxSource.eVAGeoMagneticFluxSourceAp.__doc__ = "Read Ap from file."
AgEVAGeoMagneticFluxSource.eVAGeoMagneticFluxSourceKp.__doc__ = "Read Kp from file."

agcls.AgTypeNameMap["AgEVAGeoMagneticFluxSource"] = AgEVAGeoMagneticFluxSource

class AgEVAGeoMagneticFluxUpdateRate(IntEnum):
    """Method for using geomagnetic flux values from the flux file."""
    # Three hourly
    eVAGeoMagneticFluxUpdateRate3Hourly = 0
    # Three hourly cubic spline
    eVAGeoMagneticFluxUpdateRate3HourlyCubicSpline = 1
    # Three hourly interpolated
    eVAGeoMagneticFluxUpdateRate3HourlyInterpolated = 2
    # Daily
    eVAGeoMagneticFluxUpdateRateDaily = 3

AgEVAGeoMagneticFluxUpdateRate.eVAGeoMagneticFluxUpdateRate3Hourly.__doc__ = "Three hourly"
AgEVAGeoMagneticFluxUpdateRate.eVAGeoMagneticFluxUpdateRate3HourlyCubicSpline.__doc__ = "Three hourly cubic spline"
AgEVAGeoMagneticFluxUpdateRate.eVAGeoMagneticFluxUpdateRate3HourlyInterpolated.__doc__ = "Three hourly interpolated"
AgEVAGeoMagneticFluxUpdateRate.eVAGeoMagneticFluxUpdateRateDaily.__doc__ = "Daily"

agcls.AgTypeNameMap["AgEVAGeoMagneticFluxUpdateRate"] = AgEVAGeoMagneticFluxUpdateRate

class AgEVADragModelType(IntEnum):
    """Type of Drag Model."""
    # Spherical
    eVADragModelTypeSpherical = 0
    # Plugin
    eVADragModelTypePlugin = 1
    # Variable Area
    eVADragModelTypeVariableArea = 2
    # N-Plate
    eVADragModelTypeNPlate = 3

AgEVADragModelType.eVADragModelTypeSpherical.__doc__ = "Spherical"
AgEVADragModelType.eVADragModelTypePlugin.__doc__ = "Plugin"
AgEVADragModelType.eVADragModelTypeVariableArea.__doc__ = "Variable Area"
AgEVADragModelType.eVADragModelTypeNPlate.__doc__ = "N-Plate"

agcls.AgTypeNameMap["AgEVADragModelType"] = AgEVADragModelType

class AgEVAMarsGRAMDensityType(IntEnum):
    """Density Type for MarsGRAM Density Models"""
    # Low density
    eVAMarsGRAMDensityTypeLow = 0
    # Mean density
    eVAMarsGRAMDensityTypeMean = 1
    # High density
    eVAMarsGRAMDensityTypeHigh = 2
    # Randomly perturbed density
    eVAMarsGRAMDensityTypeRandomlyPerturbed = 3

AgEVAMarsGRAMDensityType.eVAMarsGRAMDensityTypeLow.__doc__ = "Low density"
AgEVAMarsGRAMDensityType.eVAMarsGRAMDensityTypeMean.__doc__ = "Mean density"
AgEVAMarsGRAMDensityType.eVAMarsGRAMDensityTypeHigh.__doc__ = "High density"
AgEVAMarsGRAMDensityType.eVAMarsGRAMDensityTypeRandomlyPerturbed.__doc__ = "Randomly perturbed density"

agcls.AgTypeNameMap["AgEVAMarsGRAMDensityType"] = AgEVAMarsGRAMDensityType

class AgEVAVenusGRAMDensityType(IntEnum):
    """Density Type for VenusGRAM Density Models"""
    # Low density
    eVAVenusGRAMDensityTypeLow = 0
    # Mean density
    eVAVenusGRAMDensityTypeMean = 1
    # High density
    eVAVenusGRAMDensityTypeHigh = 2
    # Randomly perturbed density
    eVAVenusGRAMDensityTypeRandomlyPerturbed = 3

AgEVAVenusGRAMDensityType.eVAVenusGRAMDensityTypeLow.__doc__ = "Low density"
AgEVAVenusGRAMDensityType.eVAVenusGRAMDensityTypeMean.__doc__ = "Mean density"
AgEVAVenusGRAMDensityType.eVAVenusGRAMDensityTypeHigh.__doc__ = "High density"
AgEVAVenusGRAMDensityType.eVAVenusGRAMDensityTypeRandomlyPerturbed.__doc__ = "Randomly perturbed density"

agcls.AgTypeNameMap["AgEVAVenusGRAMDensityType"] = AgEVAVenusGRAMDensityType

class AgEVATabVecInterpMethod(IntEnum):
    """The interpolation method for tabulated area vector file."""
    # Bilinear interpolation on the Cartesian grid.
    eVATabVecCartesianInterpolation = 0
    # Bilinear interpolation in magnitude and direction space.
    eVATabVecMagDirInterpolation = 1

AgEVATabVecInterpMethod.eVATabVecCartesianInterpolation.__doc__ = "Bilinear interpolation on the Cartesian grid."
AgEVATabVecInterpMethod.eVATabVecMagDirInterpolation.__doc__ = "Bilinear interpolation in magnitude and direction space."

agcls.AgTypeNameMap["AgEVATabVecInterpMethod"] = AgEVATabVecInterpMethod

class AgEVAControlEngineConstAcc(IntEnum):
    """Constant Acceleration and Isp engine model properties that can be selected as control parameters for a Target Sequence."""
    # The gravitational acceleration constant at sea level on the Earth.
    eVAControlEngineConstAccGrav = 0
    # The acceleration for the engine.
    eVAControlEngineConstAccAcceleration = 1
    # The specific impulse for the engine.
    eVAControlEngineConstAccIsp = 2

AgEVAControlEngineConstAcc.eVAControlEngineConstAccGrav.__doc__ = "The gravitational acceleration constant at sea level on the Earth."
AgEVAControlEngineConstAcc.eVAControlEngineConstAccAcceleration.__doc__ = "The acceleration for the engine."
AgEVAControlEngineConstAcc.eVAControlEngineConstAccIsp.__doc__ = "The specific impulse for the engine."

agcls.AgTypeNameMap["AgEVAControlEngineConstAcc"] = AgEVAControlEngineConstAcc

class AgEVAControlEngineConstant(IntEnum):
    """Constant Thrust and Isp engine model properties that can be selected as control parameters for a Target Sequence."""
    # The gravitational acceleration constant at sea level on the Earth.
    eVAControlEngineConstantGrav = 0
    # The thrust for the engine.
    eVAControlEngineConstantThrust = 1
    # The specific impulse for the engine.
    eVAControlEngineConstantIsp = 2

AgEVAControlEngineConstant.eVAControlEngineConstantGrav.__doc__ = "The gravitational acceleration constant at sea level on the Earth."
AgEVAControlEngineConstant.eVAControlEngineConstantThrust.__doc__ = "The thrust for the engine."
AgEVAControlEngineConstant.eVAControlEngineConstantIsp.__doc__ = "The specific impulse for the engine."

agcls.AgTypeNameMap["AgEVAControlEngineConstant"] = AgEVAControlEngineConstant

class AgEVAControlEngineCustom(IntEnum):
    """Custom engine model properties that can be selected as control parameters for a Target Sequence."""
    # Earth surface gravity acceleration for Isp conversions.
    eVAControlEngineCustomGrav = 0

AgEVAControlEngineCustom.eVAControlEngineCustomGrav.__doc__ = "Earth surface gravity acceleration for Isp conversions."

agcls.AgTypeNameMap["AgEVAControlEngineCustom"] = AgEVAControlEngineCustom

class AgEVAControlEngineThrottleTable(IntEnum):
    """Throttle table engine model properties that can be selected as control parameters for a Target Sequence."""
    # Gravitational acceleration constant at sea level on the Earth.
    eVAControlEngineThrottleTableGrav = 0
    # The degradation factor is (1 - x)n, where n is the time since epoch in years, and x is the percent degradation per year.
    eVAControlEngineThrottleTablePercentDegradationPerYear = 1
    # The date and time used as a reference epoch for degradation.
    eVAControlEngineThrottleTableReferenceEpoch = 2

AgEVAControlEngineThrottleTable.eVAControlEngineThrottleTableGrav.__doc__ = "Gravitational acceleration constant at sea level on the Earth."
AgEVAControlEngineThrottleTable.eVAControlEngineThrottleTablePercentDegradationPerYear.__doc__ = "The degradation factor is (1 - x)n, where n is the time since epoch in years, and x is the percent degradation per year."
AgEVAControlEngineThrottleTable.eVAControlEngineThrottleTableReferenceEpoch.__doc__ = "The date and time used as a reference epoch for degradation."

agcls.AgTypeNameMap["AgEVAControlEngineThrottleTable"] = AgEVAControlEngineThrottleTable

class AgEVAControlEngineIon(IntEnum):
    """Ion engine model properties that can be selected as control parameters for a Target Sequence."""
    # FlowRateModel.C0 - the constant coefficient.
    eVAControlEngineIonFlowRateC0 = 0
    # FlowRateModel.C1 - the linear coefficient.
    eVAControlEngineIonFlowRateC1 = 1
    # FlowRateModel.C2 - the quadratic coefficient.
    eVAControlEngineIonFlowRateC2 = 2
    # FlowRateModel.C3 - the cubic coefficient.
    eVAControlEngineIonFlowRateC3 = 3
    # Gravitational acceleration constant at sea level on the Earth.
    eVAControlEngineIonGrav = 4
    # IspModel.C0 - the constant coefficient.
    eVAControlEngineIonIspC0 = 5
    # IspModel.C1 - the linear coefficient.
    eVAControlEngineIonIspC1 = 6
    # IspModel.C2 - the quadratic coefficient.
    eVAControlEngineIonIspC2 = 7
    # IspModel.C3 - the cubic coefficient.
    eVAControlEngineIonIspC3 = 8
    # MassFlowEfficiencyModel.C0 - the constant coefficient.
    eVAControlEngineIonMassFlowEfficiencyC0 = 9
    # MassFlowEfficiencyModel.C1 - the linear coefficient.
    eVAControlEngineIonMassFlowEfficiencyC1 = 10
    # MassFlowEfficiencyModel.C2 - the quadratic coefficient.
    eVAControlEngineIonMassFlowEfficiencyC2 = 11
    # MassFlowEfficiencyModel.C3 - the cubic coefficient.
    eVAControlEngineIonMassFlowEfficiencyC3 = 12
    # Minimum power required for the engine to produce thrust. 
    eVAControlEngineIonMaxInputPower = 13
    # Maximum power that can be used by the engine to produce thrust.
    eVAControlEngineIonMinRequiredPower = 14
    # The degradation factor is (1 - x)n, where n is the time since epoch in years, and x is the percent degradation per year.
    eVAControlEngineIonPercentDegradationPerYear = 15
    # Percentage of available thrust to use (100 is full on, 0 is off).
    eVAControlEngineIonPercentThrottle = 16
    # PowerEfficiencyModel.C0 - the constant coefficient.
    eVAControlEngineIonPowerEfficiencyC0 = 17
    # PowerEfficiencyModel.C1 - the linear coefficient.
    eVAControlEngineIonPowerEfficiencyC1 = 18
    # PowerEfficiencyModel.C2 - the quadratic coefficient.
    eVAControlEngineIonPowerEfficiencyC2 = 19
    # PowerEfficiencyModel.C3 - the cubic coefficient.
    eVAControlEngineIonPowerEfficiencyC3 = 20
    # The date and time used as a reference epoch for degradation.
    eVAControlEngineIonReferenceEpoch = 21

AgEVAControlEngineIon.eVAControlEngineIonFlowRateC0.__doc__ = "FlowRateModel.C0 - the constant coefficient."
AgEVAControlEngineIon.eVAControlEngineIonFlowRateC1.__doc__ = "FlowRateModel.C1 - the linear coefficient."
AgEVAControlEngineIon.eVAControlEngineIonFlowRateC2.__doc__ = "FlowRateModel.C2 - the quadratic coefficient."
AgEVAControlEngineIon.eVAControlEngineIonFlowRateC3.__doc__ = "FlowRateModel.C3 - the cubic coefficient."
AgEVAControlEngineIon.eVAControlEngineIonGrav.__doc__ = "Gravitational acceleration constant at sea level on the Earth."
AgEVAControlEngineIon.eVAControlEngineIonIspC0.__doc__ = "IspModel.C0 - the constant coefficient."
AgEVAControlEngineIon.eVAControlEngineIonIspC1.__doc__ = "IspModel.C1 - the linear coefficient."
AgEVAControlEngineIon.eVAControlEngineIonIspC2.__doc__ = "IspModel.C2 - the quadratic coefficient."
AgEVAControlEngineIon.eVAControlEngineIonIspC3.__doc__ = "IspModel.C3 - the cubic coefficient."
AgEVAControlEngineIon.eVAControlEngineIonMassFlowEfficiencyC0.__doc__ = "MassFlowEfficiencyModel.C0 - the constant coefficient."
AgEVAControlEngineIon.eVAControlEngineIonMassFlowEfficiencyC1.__doc__ = "MassFlowEfficiencyModel.C1 - the linear coefficient."
AgEVAControlEngineIon.eVAControlEngineIonMassFlowEfficiencyC2.__doc__ = "MassFlowEfficiencyModel.C2 - the quadratic coefficient."
AgEVAControlEngineIon.eVAControlEngineIonMassFlowEfficiencyC3.__doc__ = "MassFlowEfficiencyModel.C3 - the cubic coefficient."
AgEVAControlEngineIon.eVAControlEngineIonMaxInputPower.__doc__ = "Minimum power required for the engine to produce thrust. "
AgEVAControlEngineIon.eVAControlEngineIonMinRequiredPower.__doc__ = "Maximum power that can be used by the engine to produce thrust."
AgEVAControlEngineIon.eVAControlEngineIonPercentDegradationPerYear.__doc__ = "The degradation factor is (1 - x)n, where n is the time since epoch in years, and x is the percent degradation per year."
AgEVAControlEngineIon.eVAControlEngineIonPercentThrottle.__doc__ = "Percentage of available thrust to use (100 is full on, 0 is off)."
AgEVAControlEngineIon.eVAControlEngineIonPowerEfficiencyC0.__doc__ = "PowerEfficiencyModel.C0 - the constant coefficient."
AgEVAControlEngineIon.eVAControlEngineIonPowerEfficiencyC1.__doc__ = "PowerEfficiencyModel.C1 - the linear coefficient."
AgEVAControlEngineIon.eVAControlEngineIonPowerEfficiencyC2.__doc__ = "PowerEfficiencyModel.C2 - the quadratic coefficient."
AgEVAControlEngineIon.eVAControlEngineIonPowerEfficiencyC3.__doc__ = "PowerEfficiencyModel.C3 - the cubic coefficient."
AgEVAControlEngineIon.eVAControlEngineIonReferenceEpoch.__doc__ = "The date and time used as a reference epoch for degradation."

agcls.AgTypeNameMap["AgEVAControlEngineIon"] = AgEVAControlEngineIon

class AgEVAControlEngineModelPoly(IntEnum):
    """Polynomial Thrust and Isp engine model properties that can be selected as control parameters for a Target Sequence."""
    # The thrust C0 coefficient.
    eVAControlEngineModelPolyThrustC0 = 0
    # The thrust C1 coefficient.
    eVAControlEngineModelPolyThrustC1 = 1
    # The thrust C2 coefficient.
    eVAControlEngineModelPolyThrustC2 = 2
    # The thrust C3 coefficient.
    eVAControlEngineModelPolyThrustC3 = 3
    # The thrust C4 coefficient.
    eVAControlEngineModelPolyThrustC4 = 4
    # The thrust C5 coefficient.
    eVAControlEngineModelPolyThrustC5 = 5
    # The thrust C6 coefficient.
    eVAControlEngineModelPolyThrustC6 = 6
    # The thrust C7 coefficient.
    eVAControlEngineModelPolyThrustC7 = 7
    # The thrust B7 coefficient.
    eVAControlEngineModelPolyThrustB7 = 8
    # The thrust E4 coefficient.
    eVAControlEngineModelPolyThrustE4 = 9
    # The thrust E5 coefficient.
    eVAControlEngineModelPolyThrustE5 = 10
    # The thrust E6 coefficient.
    eVAControlEngineModelPolyThrustE6 = 11
    # The thrust E7 coefficient.
    eVAControlEngineModelPolyThrustE7 = 12
    # The thrust K0 coefficient.
    eVAControlEngineModelPolyThrustK0 = 13
    # The thrust K1 coefficient.
    eVAControlEngineModelPolyThrustK1 = 14
    # The thrust reference temperature, Tr.
    eVAControlEngineModelPolyThrustReferenceTemp = 15
    # The specific impulse C0 coefficient.
    eVAControlEngineModelPolyIspC0 = 16
    # The specific impulse C1 coefficient.
    eVAControlEngineModelPolyIspC1 = 17
    # The specific impulse C2 coefficient.
    eVAControlEngineModelPolyIspC2 = 18
    # The specific impulse C3 coefficient.
    eVAControlEngineModelPolyIspC3 = 19
    # The specific impulse C4 coefficient.
    eVAControlEngineModelPolyIspC4 = 20
    # The specific impulse C5 coefficient.
    eVAControlEngineModelPolyIspC5 = 21
    # The specific impulse C6 coefficient.
    eVAControlEngineModelPolyIspC6 = 22
    # The specific impulse C7 coefficient.
    eVAControlEngineModelPolyIspC7 = 23
    # The specific impulse B7 coefficient.
    eVAControlEngineModelPolyIspB7 = 24
    # The specific impulse E4 coefficient.
    eVAControlEngineModelPolyIspE4 = 25
    # The specific impulse E5 coefficient.
    eVAControlEngineModelPolyIspE5 = 26
    # The specific impulse E6 coefficient.
    eVAControlEngineModelPolyIspE6 = 27
    # The specific impulse E7 coefficient.
    eVAControlEngineModelPolyIspE7 = 28
    # The specific impulse K0 coefficient.
    eVAControlEngineModelPolyIspK0 = 29
    # The specific impulse K1 coefficient.
    eVAControlEngineModelPolyIspK1 = 30
    # The specific impulse reference temperature, Tr.
    eVAControlEngineModelPolyIspReferenceTemp = 31
    # The gravitational acceleration constant at sea level on the Earth.
    eVAControlEngineModelPolyGrav = 32

AgEVAControlEngineModelPoly.eVAControlEngineModelPolyThrustC0.__doc__ = "The thrust C0 coefficient."
AgEVAControlEngineModelPoly.eVAControlEngineModelPolyThrustC1.__doc__ = "The thrust C1 coefficient."
AgEVAControlEngineModelPoly.eVAControlEngineModelPolyThrustC2.__doc__ = "The thrust C2 coefficient."
AgEVAControlEngineModelPoly.eVAControlEngineModelPolyThrustC3.__doc__ = "The thrust C3 coefficient."
AgEVAControlEngineModelPoly.eVAControlEngineModelPolyThrustC4.__doc__ = "The thrust C4 coefficient."
AgEVAControlEngineModelPoly.eVAControlEngineModelPolyThrustC5.__doc__ = "The thrust C5 coefficient."
AgEVAControlEngineModelPoly.eVAControlEngineModelPolyThrustC6.__doc__ = "The thrust C6 coefficient."
AgEVAControlEngineModelPoly.eVAControlEngineModelPolyThrustC7.__doc__ = "The thrust C7 coefficient."
AgEVAControlEngineModelPoly.eVAControlEngineModelPolyThrustB7.__doc__ = "The thrust B7 coefficient."
AgEVAControlEngineModelPoly.eVAControlEngineModelPolyThrustE4.__doc__ = "The thrust E4 coefficient."
AgEVAControlEngineModelPoly.eVAControlEngineModelPolyThrustE5.__doc__ = "The thrust E5 coefficient."
AgEVAControlEngineModelPoly.eVAControlEngineModelPolyThrustE6.__doc__ = "The thrust E6 coefficient."
AgEVAControlEngineModelPoly.eVAControlEngineModelPolyThrustE7.__doc__ = "The thrust E7 coefficient."
AgEVAControlEngineModelPoly.eVAControlEngineModelPolyThrustK0.__doc__ = "The thrust K0 coefficient."
AgEVAControlEngineModelPoly.eVAControlEngineModelPolyThrustK1.__doc__ = "The thrust K1 coefficient."
AgEVAControlEngineModelPoly.eVAControlEngineModelPolyThrustReferenceTemp.__doc__ = "The thrust reference temperature, Tr."
AgEVAControlEngineModelPoly.eVAControlEngineModelPolyIspC0.__doc__ = "The specific impulse C0 coefficient."
AgEVAControlEngineModelPoly.eVAControlEngineModelPolyIspC1.__doc__ = "The specific impulse C1 coefficient."
AgEVAControlEngineModelPoly.eVAControlEngineModelPolyIspC2.__doc__ = "The specific impulse C2 coefficient."
AgEVAControlEngineModelPoly.eVAControlEngineModelPolyIspC3.__doc__ = "The specific impulse C3 coefficient."
AgEVAControlEngineModelPoly.eVAControlEngineModelPolyIspC4.__doc__ = "The specific impulse C4 coefficient."
AgEVAControlEngineModelPoly.eVAControlEngineModelPolyIspC5.__doc__ = "The specific impulse C5 coefficient."
AgEVAControlEngineModelPoly.eVAControlEngineModelPolyIspC6.__doc__ = "The specific impulse C6 coefficient."
AgEVAControlEngineModelPoly.eVAControlEngineModelPolyIspC7.__doc__ = "The specific impulse C7 coefficient."
AgEVAControlEngineModelPoly.eVAControlEngineModelPolyIspB7.__doc__ = "The specific impulse B7 coefficient."
AgEVAControlEngineModelPoly.eVAControlEngineModelPolyIspE4.__doc__ = "The specific impulse E4 coefficient."
AgEVAControlEngineModelPoly.eVAControlEngineModelPolyIspE5.__doc__ = "The specific impulse E5 coefficient."
AgEVAControlEngineModelPoly.eVAControlEngineModelPolyIspE6.__doc__ = "The specific impulse E6 coefficient."
AgEVAControlEngineModelPoly.eVAControlEngineModelPolyIspE7.__doc__ = "The specific impulse E7 coefficient."
AgEVAControlEngineModelPoly.eVAControlEngineModelPolyIspK0.__doc__ = "The specific impulse K0 coefficient."
AgEVAControlEngineModelPoly.eVAControlEngineModelPolyIspK1.__doc__ = "The specific impulse K1 coefficient."
AgEVAControlEngineModelPoly.eVAControlEngineModelPolyIspReferenceTemp.__doc__ = "The specific impulse reference temperature, Tr."
AgEVAControlEngineModelPoly.eVAControlEngineModelPolyGrav.__doc__ = "The gravitational acceleration constant at sea level on the Earth."

agcls.AgTypeNameMap["AgEVAControlEngineModelPoly"] = AgEVAControlEngineModelPoly

class AgEVAEngineModelFunction(IntEnum):
    """The engine model function types."""
    # Isp as an independent variable of an equation.
    eVAEngineModelFunctionIsp = 0
    # Power as an independent variable of an equation.
    eVAEngineModelFunctionPower = 1
    # Isp and Power as independent variables of an equation.
    eVAEngineModelFunctionIspAndPower = 2

AgEVAEngineModelFunction.eVAEngineModelFunctionIsp.__doc__ = "Isp as an independent variable of an equation."
AgEVAEngineModelFunction.eVAEngineModelFunctionPower.__doc__ = "Power as an independent variable of an equation."
AgEVAEngineModelFunction.eVAEngineModelFunctionIspAndPower.__doc__ = "Isp and Power as independent variables of an equation."

agcls.AgTypeNameMap["AgEVAEngineModelFunction"] = AgEVAEngineModelFunction

class AgEVAThrottleTableOperationMode(IntEnum):
    """Engine operation mode."""
    # Interpolation of engine performance data based on a regression polynomial model.
    eVAEngineOperationRegPoly = 0
    # Interpolation of engine performance data based on a piecewise linear model.
    eVAEngineOperationPiecewiseLinear = 1
    # Discrete engine operation: piecewise constant engine performance as a function of available power.
    eVAEngineOperationDiscrete = 2

AgEVAThrottleTableOperationMode.eVAEngineOperationRegPoly.__doc__ = "Interpolation of engine performance data based on a regression polynomial model."
AgEVAThrottleTableOperationMode.eVAEngineOperationPiecewiseLinear.__doc__ = "Interpolation of engine performance data based on a piecewise linear model."
AgEVAThrottleTableOperationMode.eVAEngineOperationDiscrete.__doc__ = "Discrete engine operation: piecewise constant engine performance as a function of available power."

agcls.AgTypeNameMap["AgEVAThrottleTableOperationMode"] = AgEVAThrottleTableOperationMode

class AgEVAIdealOrbitRadius(IntEnum):
    """Ideal Orbit Radius."""
    # Epoch centered average source radius.
    eVAIdealOrbitEpochCenteredAvgSourceRadius = 0
    # Instantanous characteristic distance.
    eVAIdealOrbitRadiusInstantCharDistance = 1

AgEVAIdealOrbitRadius.eVAIdealOrbitEpochCenteredAvgSourceRadius.__doc__ = "Epoch centered average source radius."
AgEVAIdealOrbitRadius.eVAIdealOrbitRadiusInstantCharDistance.__doc__ = "Instantanous characteristic distance."

agcls.AgTypeNameMap["AgEVAIdealOrbitRadius"] = AgEVAIdealOrbitRadius

class AgEVARotatingCoordinateSystem(IntEnum):
    """Barycenter centered rotating system."""
    # Barycenter centered rotating system.
    eVARotatingCoordinateSystemBarycenterCentered = 0
    # Primary centered rotating system.
    eVARotatingCoordinateSystemPrimaryCentered = 1
    # Secondary centered rotating system.
    eVARotatingCoordinateSystemSecondaryCentered = 2
    # L1 centered rotating system.
    eVARotatingCoordinateSystemL1Centered = 3
    # L2 centered rotating system.
    eVARotatingCoordinateSystemL2Centered = 4
    # L3 centered rotating system.
    eVARotatingCoordinateSystemL3Centered = 5
    # L4 centered rotating system.
    eVARotatingCoordinateSystemL4Centered = 6
    # L5 centered rotating system.
    eVARotatingCoordinateSystemL5Centered = 7

AgEVARotatingCoordinateSystem.eVARotatingCoordinateSystemBarycenterCentered.__doc__ = "Barycenter centered rotating system."
AgEVARotatingCoordinateSystem.eVARotatingCoordinateSystemPrimaryCentered.__doc__ = "Primary centered rotating system."
AgEVARotatingCoordinateSystem.eVARotatingCoordinateSystemSecondaryCentered.__doc__ = "Secondary centered rotating system."
AgEVARotatingCoordinateSystem.eVARotatingCoordinateSystemL1Centered.__doc__ = "L1 centered rotating system."
AgEVARotatingCoordinateSystem.eVARotatingCoordinateSystemL2Centered.__doc__ = "L2 centered rotating system."
AgEVARotatingCoordinateSystem.eVARotatingCoordinateSystemL3Centered.__doc__ = "L3 centered rotating system."
AgEVARotatingCoordinateSystem.eVARotatingCoordinateSystemL4Centered.__doc__ = "L4 centered rotating system."
AgEVARotatingCoordinateSystem.eVARotatingCoordinateSystemL5Centered.__doc__ = "L5 centered rotating system."

agcls.AgTypeNameMap["AgEVARotatingCoordinateSystem"] = AgEVARotatingCoordinateSystem

class AgEVAControlThrusters(IntEnum):
    """Thruster properties that can be selected as control parameters for a Target Sequence."""
    # The equivalent on-time percentage is a factor multiplied by the thrust. The thrust is applied continuously throughout the maneuver and is reduced by the percentage. The mass flow rate is likewise reduced.
    eVAControlThrustersEquivOnTime = 0
    # The thruster efficiency.
    eVAControlThrustersThrustEfficiency = 1
    # Thruster direction defined as a vector in the body frame. Spherical azimuth value.
    eVAControlThrustersSphericalAzimuth = 2
    # Thruster direction defined as a vector in the body frame. Spherical elevation value.
    eVAControlThrustersSphericalElevation = 3
    # Thruster direction defined as a vector in the body frame. Cartesian X value.
    eVAControlThrustersCartesianX = 4
    # Thruster direction defined as a vector in the body frame. Cartesian Y value.
    eVAControlThrustersCartesianY = 5
    # Thruster direction defined as a vector in the body frame. Cartesian Z value.
    eVAControlThrustersCartesianZ = 6

AgEVAControlThrusters.eVAControlThrustersEquivOnTime.__doc__ = "The equivalent on-time percentage is a factor multiplied by the thrust. The thrust is applied continuously throughout the maneuver and is reduced by the percentage. The mass flow rate is likewise reduced."
AgEVAControlThrusters.eVAControlThrustersThrustEfficiency.__doc__ = "The thruster efficiency."
AgEVAControlThrusters.eVAControlThrustersSphericalAzimuth.__doc__ = "Thruster direction defined as a vector in the body frame. Spherical azimuth value."
AgEVAControlThrusters.eVAControlThrustersSphericalElevation.__doc__ = "Thruster direction defined as a vector in the body frame. Spherical elevation value."
AgEVAControlThrusters.eVAControlThrustersCartesianX.__doc__ = "Thruster direction defined as a vector in the body frame. Cartesian X value."
AgEVAControlThrusters.eVAControlThrustersCartesianY.__doc__ = "Thruster direction defined as a vector in the body frame. Cartesian Y value."
AgEVAControlThrusters.eVAControlThrustersCartesianZ.__doc__ = "Thruster direction defined as a vector in the body frame. Cartesian Z value."

agcls.AgTypeNameMap["AgEVAControlThrusters"] = AgEVAControlThrusters

class AgEVAThrusterDirection(IntEnum):
    """The thruster direction type."""
    # The direction that is opposite the direction of the exhaust.
    eVAThrusterDirectionAcceleration = 0
    # The direction of engine exhaust.
    eVAThrusterDirectionExhaust = 1

AgEVAThrusterDirection.eVAThrusterDirectionAcceleration.__doc__ = "The direction that is opposite the direction of the exhaust."
AgEVAThrusterDirection.eVAThrusterDirectionExhaust.__doc__ = "The direction of engine exhaust."

agcls.AgTypeNameMap["AgEVAThrusterDirection"] = AgEVAThrusterDirection

class AgEVACriteria(IntEnum):
    """The criteria type."""
    # The test parameter must be equal (within the specified tolerance) to the specified value.
    eVACriteriaEquals = 0
    # The test parameter must be greater than the specified value.
    eVACriteriaGreaterThan = 1
    # The current value for the calculation object is greater by the specified tolerance than the minimum reached by that object during the segment.
    eVACriteriaGreaterThanMinimum = 2
    # The test parameter must be less than the specified value.
    eVACriteriaLessThan = 3
    # The current value for the calculation object is less by the specified tolerance than the maximum reached by that object during the segment.
    eVACriteriaLessThanMaximum = 4
    # The test parameter must be not equal (within the specified tolerance) to the specified value.
    eVACriteriaNotEqualTo = 5

AgEVACriteria.eVACriteriaEquals.__doc__ = "The test parameter must be equal (within the specified tolerance) to the specified value."
AgEVACriteria.eVACriteriaGreaterThan.__doc__ = "The test parameter must be greater than the specified value."
AgEVACriteria.eVACriteriaGreaterThanMinimum.__doc__ = "The current value for the calculation object is greater by the specified tolerance than the minimum reached by that object during the segment."
AgEVACriteria.eVACriteriaLessThan.__doc__ = "The test parameter must be less than the specified value."
AgEVACriteria.eVACriteriaLessThanMaximum.__doc__ = "The current value for the calculation object is less by the specified tolerance than the maximum reached by that object during the segment."
AgEVACriteria.eVACriteriaNotEqualTo.__doc__ = "The test parameter must be not equal (within the specified tolerance) to the specified value."

agcls.AgTypeNameMap["AgEVACriteria"] = AgEVACriteria

class AgEVAErrorControl(IntEnum):
    """Error Control for the numerical integrator."""
    # The error estimate of each integrated component is compared to the absolute error tolerance. Error control with this method is based on absolute values, e.g. in meters for position, m/sec for velocity, etc.
    eVAErrorControlAbsolute = 0
    # The error estimate of each element being integrated relative to the element's value at the start of the step is compared to the relative error tolerance, and the absolute error estimate of each element is compared to the absolute error tolerance.
    eVAErrorControlRelativeByComponent = 1
    # Relative to State error control.
    eVAErrorControlRelativeToState = 2
    # Error estimate of each integrated component relative to the element's change in value over the step is compared to the relative error tolerance, and the absolute error estimate of each integrated component is compared to the absolute error tolerance.
    eVAErrorControlRelativeToStep = 3

AgEVAErrorControl.eVAErrorControlAbsolute.__doc__ = "The error estimate of each integrated component is compared to the absolute error tolerance. Error control with this method is based on absolute values, e.g. in meters for position, m/sec for velocity, etc."
AgEVAErrorControl.eVAErrorControlRelativeByComponent.__doc__ = "The error estimate of each element being integrated relative to the element's value at the start of the step is compared to the relative error tolerance, and the absolute error estimate of each element is compared to the absolute error tolerance."
AgEVAErrorControl.eVAErrorControlRelativeToState.__doc__ = "Relative to State error control."
AgEVAErrorControl.eVAErrorControlRelativeToStep.__doc__ = "Error estimate of each integrated component relative to the element's change in value over the step is compared to the relative error tolerance, and the absolute error estimate of each integrated component is compared to the absolute error tolerance."

agcls.AgTypeNameMap["AgEVAErrorControl"] = AgEVAErrorControl

class AgEVAPredictorCorrector(IntEnum):
    """Predictor corrector scheme for the numerical integrator."""
    # All force models are re-evaluated at each corrector step.
    eVAPredictorCorrectorFull = 0
    # Only the two-body acceleration is re-evaluated at each corrector step.
    eVAPredictorCorrectorPseudo = 1

AgEVAPredictorCorrector.eVAPredictorCorrectorFull.__doc__ = "All force models are re-evaluated at each corrector step."
AgEVAPredictorCorrector.eVAPredictorCorrectorPseudo.__doc__ = "Only the two-body acceleration is re-evaluated at each corrector step."

agcls.AgTypeNameMap["AgEVAPredictorCorrector"] = AgEVAPredictorCorrector

class AgEVANumericalIntegrator(IntEnum):
    """Numerical integrator type."""
    # A 4th order Runge-Kutta integrator, adapting step size by comparing one full step to two half steps. Although this technique can be quite slow compared to the other algorithms, it is very common and can be used for comparison.
    eVANumericalIntegratorRK4thAdapt = 0
    # A 7th order Runge-Kutta-Fehlberg integrator with 8th order error control. This is the default integrator used in the HPOP propagator.
    eVANumericalIntegratorRKF7th8th = 1
    # A 9th order Runge-Kutta-Verner integrator with 8th order error control.
    eVANumericalIntegratorRKV8th9th = 2
    # An integrator based on Richardson extrapolation with automatic step size control.
    eVANumericalIntegratorBulirschStoer = 3
    # A 12th order Gauss-Jackson integrator for second order ODEs. There is currently no error control implemented for this method, meaning that a fixed step size is used.
    eVANumericalIntegratorGaussJackson = 4
    # A 2nd order Runge-Kutta integrator with 3rd order error control, using Bogacki and Shampine coefficients.
    eVANumericalIntegratorRK2nd3rd = 5
    # A 4th order Runge-Kutta integrator with 5th order error control, using Cash-Karp coefficients.
    eVANumericalIntegratorRK4th5th = 6
    # A 4th order Runge-Kutta integrator that does not employ error control.
    eVANumericalIntegratorRK4th = 7

AgEVANumericalIntegrator.eVANumericalIntegratorRK4thAdapt.__doc__ = "A 4th order Runge-Kutta integrator, adapting step size by comparing one full step to two half steps. Although this technique can be quite slow compared to the other algorithms, it is very common and can be used for comparison."
AgEVANumericalIntegrator.eVANumericalIntegratorRKF7th8th.__doc__ = "A 7th order Runge-Kutta-Fehlberg integrator with 8th order error control. This is the default integrator used in the HPOP propagator."
AgEVANumericalIntegrator.eVANumericalIntegratorRKV8th9th.__doc__ = "A 9th order Runge-Kutta-Verner integrator with 8th order error control."
AgEVANumericalIntegrator.eVANumericalIntegratorBulirschStoer.__doc__ = "An integrator based on Richardson extrapolation with automatic step size control."
AgEVANumericalIntegrator.eVANumericalIntegratorGaussJackson.__doc__ = "A 12th order Gauss-Jackson integrator for second order ODEs. There is currently no error control implemented for this method, meaning that a fixed step size is used."
AgEVANumericalIntegrator.eVANumericalIntegratorRK2nd3rd.__doc__ = "A 2nd order Runge-Kutta integrator with 3rd order error control, using Bogacki and Shampine coefficients."
AgEVANumericalIntegrator.eVANumericalIntegratorRK4th5th.__doc__ = "A 4th order Runge-Kutta integrator with 5th order error control, using Cash-Karp coefficients."
AgEVANumericalIntegrator.eVANumericalIntegratorRK4th.__doc__ = "A 4th order Runge-Kutta integrator that does not employ error control."

agcls.AgTypeNameMap["AgEVANumericalIntegrator"] = AgEVANumericalIntegrator

class AgEVACoeffRKV8th9th(IntEnum):
    """Coefficient sets for RKV8th(9th) integrator."""
    # SIAM 1978.
    eVACoeffRKV8th9th1978 = 0
    # Efficient.
    eVACoeffRKV8th9thEfficient = 1

AgEVACoeffRKV8th9th.eVACoeffRKV8th9th1978.__doc__ = "SIAM 1978."
AgEVACoeffRKV8th9th.eVACoeffRKV8th9thEfficient.__doc__ = "Efficient."

agcls.AgTypeNameMap["AgEVACoeffRKV8th9th"] = AgEVACoeffRKV8th9th


class IAgVAUserVariableDefinitionCollection(object):
    """The list of User Variables accessed through the Driver."""
    _num_methods = 8
    _vtable_offset = IDispatch._vtable_offset + IDispatch._num_methods
    _metadata = {
        "uuid" : "{4D460A14-D8C8-4BEB-A4D0-D387079AF0BC}",
        "vtable_reference" : IDispatch._vtable_offset + IDispatch._num_methods - 1,
        "method_offsets" : { "Item" : 1,
                             "Add" : 2,
                             "Remove" : 3,
                             "RemoveAll" : 4,
                             "get__NewEnum" : 5,
                             "get_Count" : 6,
                             "GetItemByIndex" : 7,
                             "GetItemByName" : 8, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAUserVariableDefinitionCollection._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAUserVariableDefinitionCollection from source object.")
        self.__dict__["_enumerator"] = None
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAUserVariableDefinitionCollection.__dict__ and type(IAgVAUserVariableDefinitionCollection.__dict__[attrname]) == property:
            return IAgVAUserVariableDefinitionCollection.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAUserVariableDefinitionCollection.")
    def __iter__(self):
        self.__dict__["_enumerator"] = self._NewEnum
        self._enumerator.reset()
        return self
    def __next__(self) -> "IAgVAUserVariableDefinition":
        if self._enumerator is None:
            raise StopIteration
        nextval = self._enumerator.next()
        if nextval is None:
            raise StopIteration
        return nextval
    
    _Item_metadata = { "name" : "Item",
            "arg_types" : (agcom.VARIANT, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.VARIANT_arg, agmarshall.AgInterface_out_arg,) }
    def Item(self, indexOrName:typing.Any) -> "IAgVAUserVariableDefinition":
        """Allows you to iterate through the collection."""
        return self._intf.invoke(IAgVAUserVariableDefinitionCollection._metadata, IAgVAUserVariableDefinitionCollection._Item_metadata, indexOrName, out_arg())

    _Add_metadata = { "name" : "Add",
            "arg_types" : (agcom.BSTR, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.AgInterface_out_arg,) }
    def Add(self, parameterName:str) -> "IAgVAUserVariableDefinition":
        """Adds a user variable to the collection."""
        return self._intf.invoke(IAgVAUserVariableDefinitionCollection._metadata, IAgVAUserVariableDefinitionCollection._Add_metadata, parameterName, out_arg())

    _Remove_metadata = { "name" : "Remove",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    def Remove(self, indexOrName:typing.Any) -> None:
        """Removes a user variable."""
        return self._intf.invoke(IAgVAUserVariableDefinitionCollection._metadata, IAgVAUserVariableDefinitionCollection._Remove_metadata, indexOrName)

    _RemoveAll_metadata = { "name" : "RemoveAll",
            "arg_types" : (),
            "marshallers" : () }
    def RemoveAll(self) -> None:
        """Removes all user variables."""
        return self._intf.invoke(IAgVAUserVariableDefinitionCollection._metadata, IAgVAUserVariableDefinitionCollection._RemoveAll_metadata, )

    _get__NewEnum_metadata = { "name" : "_NewEnum",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.IEnumVARIANT_arg,) }
    @property
    def _NewEnum(self) -> enumerator_proxy:
        """Allows you to enumerate through the collection."""
        return self._intf.get_property(IAgVAUserVariableDefinitionCollection._metadata, IAgVAUserVariableDefinitionCollection._get__NewEnum_metadata)

    _get_Count_metadata = { "name" : "Count",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.LONG_arg,) }
    @property
    def Count(self) -> int:
        """Returns the size of the collection."""
        return self._intf.get_property(IAgVAUserVariableDefinitionCollection._metadata, IAgVAUserVariableDefinitionCollection._get_Count_metadata)

    _GetItemByIndex_metadata = { "name" : "GetItemByIndex",
            "arg_types" : (agcom.INT, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.INT_arg, agmarshall.AgInterface_out_arg,) }
    def GetItemByIndex(self, index:int) -> "IAgVAUserVariableDefinition":
        """Retrieves a user variable definition in the collection by index."""
        return self._intf.invoke(IAgVAUserVariableDefinitionCollection._metadata, IAgVAUserVariableDefinitionCollection._GetItemByIndex_metadata, index, out_arg())

    _GetItemByName_metadata = { "name" : "GetItemByName",
            "arg_types" : (agcom.BSTR, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.AgInterface_out_arg,) }
    def GetItemByName(self, name:str) -> "IAgVAUserVariableDefinition":
        """Retrieves a user variable definition in the collection by name."""
        return self._intf.invoke(IAgVAUserVariableDefinitionCollection._metadata, IAgVAUserVariableDefinitionCollection._GetItemByName_metadata, name, out_arg())

    __getitem__ = Item



agcls.AgClassCatalog.add_catalog_entry("{4D460A14-D8C8-4BEB-A4D0-D387079AF0BC}", IAgVAUserVariableDefinitionCollection)
agcls.AgTypeNameMap["IAgVAUserVariableDefinitionCollection"] = IAgVAUserVariableDefinitionCollection

class IAgVAUserVariableCollection(object):
    """The list of User Variables accessed through a segment that sets initial conditions."""
    _num_methods = 5
    _vtable_offset = IDispatch._vtable_offset + IDispatch._num_methods
    _metadata = {
        "uuid" : "{1BB5F3BC-51E2-4F2D-93E2-61322E3F65BE}",
        "vtable_reference" : IDispatch._vtable_offset + IDispatch._num_methods - 1,
        "method_offsets" : { "Item" : 1,
                             "get__NewEnum" : 2,
                             "get_Count" : 3,
                             "GetItemByIndex" : 4,
                             "GetItemByName" : 5, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAUserVariableCollection._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAUserVariableCollection from source object.")
        self.__dict__["_enumerator"] = None
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAUserVariableCollection.__dict__ and type(IAgVAUserVariableCollection.__dict__[attrname]) == property:
            return IAgVAUserVariableCollection.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAUserVariableCollection.")
    def __iter__(self):
        self.__dict__["_enumerator"] = self._NewEnum
        self._enumerator.reset()
        return self
    def __next__(self) -> "IAgVAUserVariable":
        if self._enumerator is None:
            raise StopIteration
        nextval = self._enumerator.next()
        if nextval is None:
            raise StopIteration
        return nextval
    
    _Item_metadata = { "name" : "Item",
            "arg_types" : (agcom.VARIANT, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.VARIANT_arg, agmarshall.AgInterface_out_arg,) }
    def Item(self, indexOrName:typing.Any) -> "IAgVAUserVariable":
        """Allows you to iterate through the collection."""
        return self._intf.invoke(IAgVAUserVariableCollection._metadata, IAgVAUserVariableCollection._Item_metadata, indexOrName, out_arg())

    _get__NewEnum_metadata = { "name" : "_NewEnum",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.IEnumVARIANT_arg,) }
    @property
    def _NewEnum(self) -> enumerator_proxy:
        """Allows you to enumerate through the collection."""
        return self._intf.get_property(IAgVAUserVariableCollection._metadata, IAgVAUserVariableCollection._get__NewEnum_metadata)

    _get_Count_metadata = { "name" : "Count",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.LONG_arg,) }
    @property
    def Count(self) -> int:
        """Returns the size of the collection."""
        return self._intf.get_property(IAgVAUserVariableCollection._metadata, IAgVAUserVariableCollection._get_Count_metadata)

    _GetItemByIndex_metadata = { "name" : "GetItemByIndex",
            "arg_types" : (agcom.INT, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.INT_arg, agmarshall.AgInterface_out_arg,) }
    def GetItemByIndex(self, index:int) -> "IAgVAUserVariable":
        """Retrieves a user variable in the collection by index."""
        return self._intf.invoke(IAgVAUserVariableCollection._metadata, IAgVAUserVariableCollection._GetItemByIndex_metadata, index, out_arg())

    _GetItemByName_metadata = { "name" : "GetItemByName",
            "arg_types" : (agcom.BSTR, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.AgInterface_out_arg,) }
    def GetItemByName(self, name:str) -> "IAgVAUserVariable":
        """Retrieves a user variable in the collection by name."""
        return self._intf.invoke(IAgVAUserVariableCollection._metadata, IAgVAUserVariableCollection._GetItemByName_metadata, name, out_arg())

    __getitem__ = Item



agcls.AgClassCatalog.add_catalog_entry("{1BB5F3BC-51E2-4F2D-93E2-61322E3F65BE}", IAgVAUserVariableCollection)
agcls.AgTypeNameMap["IAgVAUserVariableCollection"] = IAgVAUserVariableCollection

class IAgVAUserVariableUpdateCollection(object):
    """The list of User Variables accessed through an Update segment"""
    _num_methods = 5
    _vtable_offset = IDispatch._vtable_offset + IDispatch._num_methods
    _metadata = {
        "uuid" : "{7DC1728B-C032-4810-BE7B-7801C5CF906C}",
        "vtable_reference" : IDispatch._vtable_offset + IDispatch._num_methods - 1,
        "method_offsets" : { "Item" : 1,
                             "get__NewEnum" : 2,
                             "get_Count" : 3,
                             "GetItemByIndex" : 4,
                             "GetItemByName" : 5, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAUserVariableUpdateCollection._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAUserVariableUpdateCollection from source object.")
        self.__dict__["_enumerator"] = None
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAUserVariableUpdateCollection.__dict__ and type(IAgVAUserVariableUpdateCollection.__dict__[attrname]) == property:
            return IAgVAUserVariableUpdateCollection.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAUserVariableUpdateCollection.")
    def __iter__(self):
        self.__dict__["_enumerator"] = self._NewEnum
        self._enumerator.reset()
        return self
    def __next__(self) -> "IAgVAUserVariableUpdate":
        if self._enumerator is None:
            raise StopIteration
        nextval = self._enumerator.next()
        if nextval is None:
            raise StopIteration
        return nextval
    
    _Item_metadata = { "name" : "Item",
            "arg_types" : (agcom.VARIANT, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.VARIANT_arg, agmarshall.AgInterface_out_arg,) }
    def Item(self, indexOrName:typing.Any) -> "IAgVAUserVariableUpdate":
        """Allows you to iterate through the collection."""
        return self._intf.invoke(IAgVAUserVariableUpdateCollection._metadata, IAgVAUserVariableUpdateCollection._Item_metadata, indexOrName, out_arg())

    _get__NewEnum_metadata = { "name" : "_NewEnum",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.IEnumVARIANT_arg,) }
    @property
    def _NewEnum(self) -> enumerator_proxy:
        """Allows you to enumerate through the collection."""
        return self._intf.get_property(IAgVAUserVariableUpdateCollection._metadata, IAgVAUserVariableUpdateCollection._get__NewEnum_metadata)

    _get_Count_metadata = { "name" : "Count",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.LONG_arg,) }
    @property
    def Count(self) -> int:
        """Returns the size of the collection."""
        return self._intf.get_property(IAgVAUserVariableUpdateCollection._metadata, IAgVAUserVariableUpdateCollection._get_Count_metadata)

    _GetItemByIndex_metadata = { "name" : "GetItemByIndex",
            "arg_types" : (agcom.INT, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.INT_arg, agmarshall.AgInterface_out_arg,) }
    def GetItemByIndex(self, index:int) -> "IAgVAUserVariableUpdate":
        """Retrieves a user variable update in the collection by index."""
        return self._intf.invoke(IAgVAUserVariableUpdateCollection._metadata, IAgVAUserVariableUpdateCollection._GetItemByIndex_metadata, index, out_arg())

    _GetItemByName_metadata = { "name" : "GetItemByName",
            "arg_types" : (agcom.BSTR, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.AgInterface_out_arg,) }
    def GetItemByName(self, name:str) -> "IAgVAUserVariableUpdate":
        """Retrieves a user variable update in the collection by name."""
        return self._intf.invoke(IAgVAUserVariableUpdateCollection._metadata, IAgVAUserVariableUpdateCollection._GetItemByName_metadata, name, out_arg())

    __getitem__ = Item



agcls.AgClassCatalog.add_catalog_entry("{7DC1728B-C032-4810-BE7B-7801C5CF906C}", IAgVAUserVariableUpdateCollection)
agcls.AgTypeNameMap["IAgVAUserVariableUpdateCollection"] = IAgVAUserVariableUpdateCollection

class IAgVACalculationGraphCollection(object):
    """The list of Calculations Graphs to display."""
    _num_methods = 6
    _vtable_offset = IDispatch._vtable_offset + IDispatch._num_methods
    _metadata = {
        "uuid" : "{77FD67C8-A85F-42F8-8546-9E1B944FF7F9}",
        "vtable_reference" : IDispatch._vtable_offset + IDispatch._num_methods - 1,
        "method_offsets" : { "Item" : 1,
                             "get__NewEnum" : 2,
                             "Add" : 3,
                             "Remove" : 4,
                             "RemoveAll" : 5,
                             "get_Count" : 6, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVACalculationGraphCollection._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVACalculationGraphCollection from source object.")
        self.__dict__["_enumerator"] = None
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVACalculationGraphCollection.__dict__ and type(IAgVACalculationGraphCollection.__dict__[attrname]) == property:
            return IAgVACalculationGraphCollection.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVACalculationGraphCollection.")
    def __iter__(self):
        self.__dict__["_enumerator"] = self._NewEnum
        self._enumerator.reset()
        return self
    def __next__(self) -> str:
        if self._enumerator is None:
            raise StopIteration
        nextval = self._enumerator.next()
        if nextval is None:
            raise StopIteration
        return nextval
    
    _Item_metadata = { "name" : "Item",
            "arg_types" : (agcom.LONG, POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.LONG_arg, agmarshall.BSTR_arg,) }
    def Item(self, index:int) -> str:
        """Allows you to iterate through the collection."""
        return self._intf.invoke(IAgVACalculationGraphCollection._metadata, IAgVACalculationGraphCollection._Item_metadata, index, out_arg())

    _get__NewEnum_metadata = { "name" : "_NewEnum",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.IEnumVARIANT_arg,) }
    @property
    def _NewEnum(self) -> enumerator_proxy:
        """Allows you to enumerate through the collection."""
        return self._intf.get_property(IAgVACalculationGraphCollection._metadata, IAgVACalculationGraphCollection._get__NewEnum_metadata)

    _Add_metadata = { "name" : "Add",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    def Add(self, graphName:str) -> None:
        """Adds a calculation graph"""
        return self._intf.invoke(IAgVACalculationGraphCollection._metadata, IAgVACalculationGraphCollection._Add_metadata, graphName)

    _Remove_metadata = { "name" : "Remove",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    def Remove(self, graphName:str) -> None:
        """Removes a parameter."""
        return self._intf.invoke(IAgVACalculationGraphCollection._metadata, IAgVACalculationGraphCollection._Remove_metadata, graphName)

    _RemoveAll_metadata = { "name" : "RemoveAll",
            "arg_types" : (),
            "marshallers" : () }
    def RemoveAll(self) -> None:
        """Removes all parameters."""
        return self._intf.invoke(IAgVACalculationGraphCollection._metadata, IAgVACalculationGraphCollection._RemoveAll_metadata, )

    _get_Count_metadata = { "name" : "Count",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.LONG_arg,) }
    @property
    def Count(self) -> int:
        """Returns the size of the collection."""
        return self._intf.get_property(IAgVACalculationGraphCollection._metadata, IAgVACalculationGraphCollection._get_Count_metadata)

    __getitem__ = Item



agcls.AgClassCatalog.add_catalog_entry("{77FD67C8-A85F-42F8-8546-9E1B944FF7F9}", IAgVACalculationGraphCollection)
agcls.AgTypeNameMap["IAgVACalculationGraphCollection"] = IAgVACalculationGraphCollection

class IAgVAConstraintCollection(object):
    """The list of constraints assigned to a stopping condition."""
    _num_methods = 10
    _vtable_offset = IDispatch._vtable_offset + IDispatch._num_methods
    _metadata = {
        "uuid" : "{055FF747-D60B-4AE2-82CE-B1FA61F85A3E}",
        "vtable_reference" : IDispatch._vtable_offset + IDispatch._num_methods - 1,
        "method_offsets" : { "Add" : 1,
                             "Item" : 2,
                             "Remove" : 3,
                             "get__NewEnum" : 4,
                             "get_Count" : 5,
                             "Cut" : 6,
                             "Paste" : 7,
                             "InsertCopy" : 8,
                             "GetItemByIndex" : 9,
                             "GetItemByName" : 10, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAConstraintCollection._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAConstraintCollection from source object.")
        self.__dict__["_enumerator"] = None
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAConstraintCollection.__dict__ and type(IAgVAConstraintCollection.__dict__[attrname]) == property:
            return IAgVAConstraintCollection.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAConstraintCollection.")
    def __iter__(self):
        self.__dict__["_enumerator"] = self._NewEnum
        self._enumerator.reset()
        return self
    def __next__(self) -> "IAgVAAsTriggerCondition":
        if self._enumerator is None:
            raise StopIteration
        nextval = self._enumerator.next()
        if nextval is None:
            raise StopIteration
        return nextval
    
    _Add_metadata = { "name" : "Add",
            "arg_types" : (agcom.BSTR, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.AgInterface_out_arg,) }
    def Add(self, resultName:str) -> "IAgVAAsTriggerCondition":
        """Adds a constraint to the collection."""
        return self._intf.invoke(IAgVAConstraintCollection._metadata, IAgVAConstraintCollection._Add_metadata, resultName, out_arg())

    _Item_metadata = { "name" : "Item",
            "arg_types" : (agcom.VARIANT, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.VARIANT_arg, agmarshall.AgInterface_out_arg,) }
    def Item(self, indexOrName:typing.Any) -> "IAgVAAsTriggerCondition":
        """A property that allows you to iterate through the collection."""
        return self._intf.invoke(IAgVAConstraintCollection._metadata, IAgVAConstraintCollection._Item_metadata, indexOrName, out_arg())

    _Remove_metadata = { "name" : "Remove",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    def Remove(self, indexOrName:typing.Any) -> None:
        """Removes a specified constraint from the collection."""
        return self._intf.invoke(IAgVAConstraintCollection._metadata, IAgVAConstraintCollection._Remove_metadata, indexOrName)

    _get__NewEnum_metadata = { "name" : "_NewEnum",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.IEnumVARIANT_arg,) }
    @property
    def _NewEnum(self) -> enumerator_proxy:
        """A property that allows you to enumerate through the collection."""
        return self._intf.get_property(IAgVAConstraintCollection._metadata, IAgVAConstraintCollection._get__NewEnum_metadata)

    _get_Count_metadata = { "name" : "Count",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.LONG_arg,) }
    @property
    def Count(self) -> int:
        """Returns the size of the collection."""
        return self._intf.get_property(IAgVAConstraintCollection._metadata, IAgVAConstraintCollection._get_Count_metadata)

    _Cut_metadata = { "name" : "Cut",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    def Cut(self, indexOrName:typing.Any) -> None:
        """Copies the constraint into the clipboard and removes the constraint from the list."""
        return self._intf.invoke(IAgVAConstraintCollection._metadata, IAgVAConstraintCollection._Cut_metadata, indexOrName)

    _Paste_metadata = { "name" : "Paste",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    def Paste(self) -> "IAgVAAsTriggerCondition":
        """Pastes the constraint from the clipboard and inserts into the list."""
        return self._intf.invoke(IAgVAConstraintCollection._metadata, IAgVAConstraintCollection._Paste_metadata, out_arg())

    _InsertCopy_metadata = { "name" : "InsertCopy",
            "arg_types" : (agcom.PVOID, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_in_arg("IAgVAAsTriggerCondition"), agmarshall.AgInterface_out_arg,) }
    def InsertCopy(self, cond:"IAgVAAsTriggerCondition") -> "IAgVAAsTriggerCondition":
        """Copies the constraint and inserts the copy into the list."""
        return self._intf.invoke(IAgVAConstraintCollection._metadata, IAgVAConstraintCollection._InsertCopy_metadata, cond, out_arg())

    _GetItemByIndex_metadata = { "name" : "GetItemByIndex",
            "arg_types" : (agcom.INT, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.INT_arg, agmarshall.AgInterface_out_arg,) }
    def GetItemByIndex(self, index:int) -> "IAgVAAsTriggerCondition":
        """Retrieves a constraint from the collection by index."""
        return self._intf.invoke(IAgVAConstraintCollection._metadata, IAgVAConstraintCollection._GetItemByIndex_metadata, index, out_arg())

    _GetItemByName_metadata = { "name" : "GetItemByName",
            "arg_types" : (agcom.BSTR, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.AgInterface_out_arg,) }
    def GetItemByName(self, name:str) -> "IAgVAAsTriggerCondition":
        """Retrieves a constraint from the collection by name."""
        return self._intf.invoke(IAgVAConstraintCollection._metadata, IAgVAConstraintCollection._GetItemByName_metadata, name, out_arg())

    __getitem__ = Item



agcls.AgClassCatalog.add_catalog_entry("{055FF747-D60B-4AE2-82CE-B1FA61F85A3E}", IAgVAConstraintCollection)
agcls.AgTypeNameMap["IAgVAConstraintCollection"] = IAgVAConstraintCollection

class IAgVAPluginProperties(object):
    """Properties of a plugin attitude control."""
    _num_methods = 3
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{E4AEB83C-8A8A-48F2-8DB8-BA2F4299CC97}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "GetProperty" : 1,
                             "SetProperty" : 2,
                             "get_AvailableProperties" : 3, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAPluginProperties._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAPluginProperties from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAPluginProperties.__dict__ and type(IAgVAPluginProperties.__dict__[attrname]) == property:
            return IAgVAPluginProperties.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAPluginProperties.")
    
    _GetProperty_metadata = { "name" : "GetProperty",
            "arg_types" : (agcom.BSTR, POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.VARIANT_arg,) }
    def GetProperty(self, path:str) -> typing.Any:
        """Method to get a property."""
        return self._intf.invoke(IAgVAPluginProperties._metadata, IAgVAPluginProperties._GetProperty_metadata, path, out_arg())

    _SetProperty_metadata = { "name" : "SetProperty",
            "arg_types" : (agcom.BSTR, agcom.VARIANT,),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.VARIANT_arg,) }
    def SetProperty(self, path:str, propertyValue:typing.Any) -> None:
        """Method to set a property."""
        return self._intf.invoke(IAgVAPluginProperties._metadata, IAgVAPluginProperties._SetProperty_metadata, path, propertyValue)

    _get_AvailableProperties_metadata = { "name" : "AvailableProperties",
            "arg_types" : (POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg,) }
    @property
    def AvailableProperties(self) -> list:
        """Returns an array of all available properties."""
        return self._intf.get_property(IAgVAPluginProperties._metadata, IAgVAPluginProperties._get_AvailableProperties_metadata)


agcls.AgClassCatalog.add_catalog_entry("{E4AEB83C-8A8A-48F2-8DB8-BA2F4299CC97}", IAgVAPluginProperties)
agcls.AgTypeNameMap["IAgVAPluginProperties"] = IAgVAPluginProperties

class IAgVASNOPTControlCollection(object):
    """Properties for the list of SNOPT control parameters."""
    _num_methods = 4
    _vtable_offset = IDispatch._vtable_offset + IDispatch._num_methods
    _metadata = {
        "uuid" : "{2E9D2998-066F-4DC6-9672-8EDF9F604351}",
        "vtable_reference" : IDispatch._vtable_offset + IDispatch._num_methods - 1,
        "method_offsets" : { "Item" : 1,
                             "get__NewEnum" : 2,
                             "get_Count" : 3,
                             "GetControlByPaths" : 4, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVASNOPTControlCollection._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVASNOPTControlCollection from source object.")
        self.__dict__["_enumerator"] = None
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVASNOPTControlCollection.__dict__ and type(IAgVASNOPTControlCollection.__dict__[attrname]) == property:
            return IAgVASNOPTControlCollection.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVASNOPTControlCollection.")
    def __iter__(self):
        self.__dict__["_enumerator"] = self._NewEnum
        self._enumerator.reset()
        return self
    def __next__(self) -> "IAgVASNOPTControl":
        if self._enumerator is None:
            raise StopIteration
        nextval = self._enumerator.next()
        if nextval is None:
            raise StopIteration
        return nextval
    
    _Item_metadata = { "name" : "Item",
            "arg_types" : (agcom.LONG, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.LONG_arg, agmarshall.AgInterface_out_arg,) }
    def Item(self, index:int) -> "IAgVASNOPTControl":
        """Allows you to iterate through the collection."""
        return self._intf.invoke(IAgVASNOPTControlCollection._metadata, IAgVASNOPTControlCollection._Item_metadata, index, out_arg())

    _get__NewEnum_metadata = { "name" : "_NewEnum",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.IEnumVARIANT_arg,) }
    @property
    def _NewEnum(self) -> enumerator_proxy:
        """Allows you to enumerate through the collection."""
        return self._intf.get_property(IAgVASNOPTControlCollection._metadata, IAgVASNOPTControlCollection._get__NewEnum_metadata)

    _get_Count_metadata = { "name" : "Count",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.LONG_arg,) }
    @property
    def Count(self) -> int:
        """Returns the size of the collection."""
        return self._intf.get_property(IAgVASNOPTControlCollection._metadata, IAgVASNOPTControlCollection._get_Count_metadata)

    _GetControlByPaths_metadata = { "name" : "GetControlByPaths",
            "arg_types" : (agcom.BSTR, agcom.BSTR, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.BSTR_arg, agmarshall.AgInterface_out_arg,) }
    def GetControlByPaths(self, objectPath:str, controlPath:str) -> "IAgVASNOPTControl":
        """Returns the control specified by the object/control path."""
        return self._intf.invoke(IAgVASNOPTControlCollection._metadata, IAgVASNOPTControlCollection._GetControlByPaths_metadata, objectPath, controlPath, out_arg())

    __getitem__ = Item



agcls.AgClassCatalog.add_catalog_entry("{2E9D2998-066F-4DC6-9672-8EDF9F604351}", IAgVASNOPTControlCollection)
agcls.AgTypeNameMap["IAgVASNOPTControlCollection"] = IAgVASNOPTControlCollection

class IAgVASNOPTResultCollection(object):
    """SNOPT result collection."""
    _num_methods = 4
    _vtable_offset = IDispatch._vtable_offset + IDispatch._num_methods
    _metadata = {
        "uuid" : "{53F7183C-7957-4C6F-8987-399A3F4C2A26}",
        "vtable_reference" : IDispatch._vtable_offset + IDispatch._num_methods - 1,
        "method_offsets" : { "Item" : 1,
                             "get__NewEnum" : 2,
                             "get_Count" : 3,
                             "GetResultByPaths" : 4, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVASNOPTResultCollection._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVASNOPTResultCollection from source object.")
        self.__dict__["_enumerator"] = None
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVASNOPTResultCollection.__dict__ and type(IAgVASNOPTResultCollection.__dict__[attrname]) == property:
            return IAgVASNOPTResultCollection.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVASNOPTResultCollection.")
    def __iter__(self):
        self.__dict__["_enumerator"] = self._NewEnum
        self._enumerator.reset()
        return self
    def __next__(self) -> "IAgVASNOPTResult":
        if self._enumerator is None:
            raise StopIteration
        nextval = self._enumerator.next()
        if nextval is None:
            raise StopIteration
        return nextval
    
    _Item_metadata = { "name" : "Item",
            "arg_types" : (agcom.LONG, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.LONG_arg, agmarshall.AgInterface_out_arg,) }
    def Item(self, index:int) -> "IAgVASNOPTResult":
        """Allows you to iterate through the collection."""
        return self._intf.invoke(IAgVASNOPTResultCollection._metadata, IAgVASNOPTResultCollection._Item_metadata, index, out_arg())

    _get__NewEnum_metadata = { "name" : "_NewEnum",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.IEnumVARIANT_arg,) }
    @property
    def _NewEnum(self) -> enumerator_proxy:
        """Allows you to enumerate through the collection."""
        return self._intf.get_property(IAgVASNOPTResultCollection._metadata, IAgVASNOPTResultCollection._get__NewEnum_metadata)

    _get_Count_metadata = { "name" : "Count",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.LONG_arg,) }
    @property
    def Count(self) -> int:
        """Returns the size of the collection."""
        return self._intf.get_property(IAgVASNOPTResultCollection._metadata, IAgVASNOPTResultCollection._get_Count_metadata)

    _GetResultByPaths_metadata = { "name" : "GetResultByPaths",
            "arg_types" : (agcom.BSTR, agcom.BSTR, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.BSTR_arg, agmarshall.AgInterface_out_arg,) }
    def GetResultByPaths(self, objectPath:str, resultPath:str) -> "IAgVASNOPTResult":
        """Returns the result specified by the object/result names."""
        return self._intf.invoke(IAgVASNOPTResultCollection._metadata, IAgVASNOPTResultCollection._GetResultByPaths_metadata, objectPath, resultPath, out_arg())

    __getitem__ = Item



agcls.AgClassCatalog.add_catalog_entry("{53F7183C-7957-4C6F-8987-399A3F4C2A26}", IAgVASNOPTResultCollection)
agcls.AgTypeNameMap["IAgVASNOPTResultCollection"] = IAgVASNOPTResultCollection

class IAgVAIPOPTControlCollection(object):
    """Properties for the list of IPOPT control parameters."""
    _num_methods = 4
    _vtable_offset = IDispatch._vtable_offset + IDispatch._num_methods
    _metadata = {
        "uuid" : "{CAF26432-D3B9-4A8B-A9A2-9147DD520BBB}",
        "vtable_reference" : IDispatch._vtable_offset + IDispatch._num_methods - 1,
        "method_offsets" : { "Item" : 1,
                             "get__NewEnum" : 2,
                             "get_Count" : 3,
                             "GetControlByPaths" : 4, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAIPOPTControlCollection._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAIPOPTControlCollection from source object.")
        self.__dict__["_enumerator"] = None
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAIPOPTControlCollection.__dict__ and type(IAgVAIPOPTControlCollection.__dict__[attrname]) == property:
            return IAgVAIPOPTControlCollection.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAIPOPTControlCollection.")
    def __iter__(self):
        self.__dict__["_enumerator"] = self._NewEnum
        self._enumerator.reset()
        return self
    def __next__(self) -> "IAgVAIPOPTControl":
        if self._enumerator is None:
            raise StopIteration
        nextval = self._enumerator.next()
        if nextval is None:
            raise StopIteration
        return nextval
    
    _Item_metadata = { "name" : "Item",
            "arg_types" : (agcom.LONG, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.LONG_arg, agmarshall.AgInterface_out_arg,) }
    def Item(self, index:int) -> "IAgVAIPOPTControl":
        """Allows you to iterate through the collection."""
        return self._intf.invoke(IAgVAIPOPTControlCollection._metadata, IAgVAIPOPTControlCollection._Item_metadata, index, out_arg())

    _get__NewEnum_metadata = { "name" : "_NewEnum",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.IEnumVARIANT_arg,) }
    @property
    def _NewEnum(self) -> enumerator_proxy:
        """Allows you to enumerate through the collection."""
        return self._intf.get_property(IAgVAIPOPTControlCollection._metadata, IAgVAIPOPTControlCollection._get__NewEnum_metadata)

    _get_Count_metadata = { "name" : "Count",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.LONG_arg,) }
    @property
    def Count(self) -> int:
        """Returns the size of the collection."""
        return self._intf.get_property(IAgVAIPOPTControlCollection._metadata, IAgVAIPOPTControlCollection._get_Count_metadata)

    _GetControlByPaths_metadata = { "name" : "GetControlByPaths",
            "arg_types" : (agcom.BSTR, agcom.BSTR, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.BSTR_arg, agmarshall.AgInterface_out_arg,) }
    def GetControlByPaths(self, objectPath:str, controlPath:str) -> "IAgVAIPOPTControl":
        """Returns the control specified by the object/control path."""
        return self._intf.invoke(IAgVAIPOPTControlCollection._metadata, IAgVAIPOPTControlCollection._GetControlByPaths_metadata, objectPath, controlPath, out_arg())

    __getitem__ = Item



agcls.AgClassCatalog.add_catalog_entry("{CAF26432-D3B9-4A8B-A9A2-9147DD520BBB}", IAgVAIPOPTControlCollection)
agcls.AgTypeNameMap["IAgVAIPOPTControlCollection"] = IAgVAIPOPTControlCollection

class IAgVAIPOPTResultCollection(object):
    """IPOPT result collection."""
    _num_methods = 4
    _vtable_offset = IDispatch._vtable_offset + IDispatch._num_methods
    _metadata = {
        "uuid" : "{DC5D0BFD-1459-4DAA-81B9-06790B157ED2}",
        "vtable_reference" : IDispatch._vtable_offset + IDispatch._num_methods - 1,
        "method_offsets" : { "Item" : 1,
                             "get__NewEnum" : 2,
                             "get_Count" : 3,
                             "GetResultByPaths" : 4, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAIPOPTResultCollection._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAIPOPTResultCollection from source object.")
        self.__dict__["_enumerator"] = None
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAIPOPTResultCollection.__dict__ and type(IAgVAIPOPTResultCollection.__dict__[attrname]) == property:
            return IAgVAIPOPTResultCollection.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAIPOPTResultCollection.")
    def __iter__(self):
        self.__dict__["_enumerator"] = self._NewEnum
        self._enumerator.reset()
        return self
    def __next__(self) -> "IAgVAIPOPTResult":
        if self._enumerator is None:
            raise StopIteration
        nextval = self._enumerator.next()
        if nextval is None:
            raise StopIteration
        return nextval
    
    _Item_metadata = { "name" : "Item",
            "arg_types" : (agcom.LONG, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.LONG_arg, agmarshall.AgInterface_out_arg,) }
    def Item(self, index:int) -> "IAgVAIPOPTResult":
        """Allows you to iterate through the collection."""
        return self._intf.invoke(IAgVAIPOPTResultCollection._metadata, IAgVAIPOPTResultCollection._Item_metadata, index, out_arg())

    _get__NewEnum_metadata = { "name" : "_NewEnum",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.IEnumVARIANT_arg,) }
    @property
    def _NewEnum(self) -> enumerator_proxy:
        """Allows you to enumerate through the collection."""
        return self._intf.get_property(IAgVAIPOPTResultCollection._metadata, IAgVAIPOPTResultCollection._get__NewEnum_metadata)

    _get_Count_metadata = { "name" : "Count",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.LONG_arg,) }
    @property
    def Count(self) -> int:
        """Returns the size of the collection."""
        return self._intf.get_property(IAgVAIPOPTResultCollection._metadata, IAgVAIPOPTResultCollection._get_Count_metadata)

    _GetResultByPaths_metadata = { "name" : "GetResultByPaths",
            "arg_types" : (agcom.BSTR, agcom.BSTR, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.BSTR_arg, agmarshall.AgInterface_out_arg,) }
    def GetResultByPaths(self, objectPath:str, resultPath:str) -> "IAgVAIPOPTResult":
        """Returns the result specified by the object/result names."""
        return self._intf.invoke(IAgVAIPOPTResultCollection._metadata, IAgVAIPOPTResultCollection._GetResultByPaths_metadata, objectPath, resultPath, out_arg())

    __getitem__ = Item



agcls.AgClassCatalog.add_catalog_entry("{DC5D0BFD-1459-4DAA-81B9-06790B157ED2}", IAgVAIPOPTResultCollection)
agcls.AgTypeNameMap["IAgVAIPOPTResultCollection"] = IAgVAIPOPTResultCollection

class IAgVAManeuverOptimalFiniteSNOPTOptimizer(object):
    """Properties of SNOPT Optimizer options for optimal finite maneuver."""
    _num_methods = 21
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{176AB7BE-90C8-4558-8E24-9E9862CE18FD}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_Objective" : 1,
                             "set_Objective" : 2,
                             "get_MaxMajorIterations" : 3,
                             "set_MaxMajorIterations" : 4,
                             "get_ToleranceOnMajorFeasibility" : 5,
                             "set_ToleranceOnMajorFeasibility" : 6,
                             "get_ToleranceOnMajorOptimality" : 7,
                             "set_ToleranceOnMajorOptimality" : 8,
                             "get_MaxMinorIterations" : 9,
                             "set_MaxMinorIterations" : 10,
                             "get_ToleranceOnMinorFeasibility" : 11,
                             "set_ToleranceOnMinorFeasibility" : 12,
                             "get_OptionsFilename" : 13,
                             "set_OptionsFilename" : 14,
                             "get_ProvideRuntimeTypeInfo" : 15,
                             "get_UseConsoleMonitor" : 16,
                             "set_UseConsoleMonitor" : 17,
                             "get_AllowInternalPrimalInfeasibilityMeasureNormalization" : 18,
                             "set_AllowInternalPrimalInfeasibilityMeasureNormalization" : 19,
                             "get_SNOPTScaling" : 20,
                             "set_SNOPTScaling" : 21, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAManeuverOptimalFiniteSNOPTOptimizer._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAManeuverOptimalFiniteSNOPTOptimizer from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAManeuverOptimalFiniteSNOPTOptimizer.__dict__ and type(IAgVAManeuverOptimalFiniteSNOPTOptimizer.__dict__[attrname]) == property:
            return IAgVAManeuverOptimalFiniteSNOPTOptimizer.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAManeuverOptimalFiniteSNOPTOptimizer.")
    
    _get_Objective_metadata = { "name" : "Objective",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAOptimalFiniteSNOPTObjective),) }
    @property
    def Objective(self) -> "AgEVAOptimalFiniteSNOPTObjective":
        """Objective."""
        return self._intf.get_property(IAgVAManeuverOptimalFiniteSNOPTOptimizer._metadata, IAgVAManeuverOptimalFiniteSNOPTOptimizer._get_Objective_metadata)

    _set_Objective_metadata = { "name" : "Objective",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAOptimalFiniteSNOPTObjective),) }
    @Objective.setter
    def Objective(self, newVal:"AgEVAOptimalFiniteSNOPTObjective") -> None:
        return self._intf.set_property(IAgVAManeuverOptimalFiniteSNOPTOptimizer._metadata, IAgVAManeuverOptimalFiniteSNOPTOptimizer._set_Objective_metadata, newVal)

    _get_MaxMajorIterations_metadata = { "name" : "MaxMajorIterations",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.LONG_arg,) }
    @property
    def MaxMajorIterations(self) -> int:
        """The maximum number of major iterations allowed."""
        return self._intf.get_property(IAgVAManeuverOptimalFiniteSNOPTOptimizer._metadata, IAgVAManeuverOptimalFiniteSNOPTOptimizer._get_MaxMajorIterations_metadata)

    _set_MaxMajorIterations_metadata = { "name" : "MaxMajorIterations",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.LONG_arg,) }
    @MaxMajorIterations.setter
    def MaxMajorIterations(self, newVal:int) -> None:
        return self._intf.set_property(IAgVAManeuverOptimalFiniteSNOPTOptimizer._metadata, IAgVAManeuverOptimalFiniteSNOPTOptimizer._set_MaxMajorIterations_metadata, newVal)

    _get_ToleranceOnMajorFeasibility_metadata = { "name" : "ToleranceOnMajorFeasibility",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def ToleranceOnMajorFeasibility(self) -> float:
        """Specifies how accurately the nonlinear constraints should be satisfied."""
        return self._intf.get_property(IAgVAManeuverOptimalFiniteSNOPTOptimizer._metadata, IAgVAManeuverOptimalFiniteSNOPTOptimizer._get_ToleranceOnMajorFeasibility_metadata)

    _set_ToleranceOnMajorFeasibility_metadata = { "name" : "ToleranceOnMajorFeasibility",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @ToleranceOnMajorFeasibility.setter
    def ToleranceOnMajorFeasibility(self, newVal:float) -> None:
        return self._intf.set_property(IAgVAManeuverOptimalFiniteSNOPTOptimizer._metadata, IAgVAManeuverOptimalFiniteSNOPTOptimizer._set_ToleranceOnMajorFeasibility_metadata, newVal)

    _get_ToleranceOnMajorOptimality_metadata = { "name" : "ToleranceOnMajorOptimality",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def ToleranceOnMajorOptimality(self) -> float:
        """Specifies the final accuracy of the dual variables."""
        return self._intf.get_property(IAgVAManeuverOptimalFiniteSNOPTOptimizer._metadata, IAgVAManeuverOptimalFiniteSNOPTOptimizer._get_ToleranceOnMajorOptimality_metadata)

    _set_ToleranceOnMajorOptimality_metadata = { "name" : "ToleranceOnMajorOptimality",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @ToleranceOnMajorOptimality.setter
    def ToleranceOnMajorOptimality(self, newVal:float) -> None:
        return self._intf.set_property(IAgVAManeuverOptimalFiniteSNOPTOptimizer._metadata, IAgVAManeuverOptimalFiniteSNOPTOptimizer._set_ToleranceOnMajorOptimality_metadata, newVal)

    _get_MaxMinorIterations_metadata = { "name" : "MaxMinorIterations",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.LONG_arg,) }
    @property
    def MaxMinorIterations(self) -> int:
        """The maximum number of iterations for the QP subproblem allowed during a single major iteration."""
        return self._intf.get_property(IAgVAManeuverOptimalFiniteSNOPTOptimizer._metadata, IAgVAManeuverOptimalFiniteSNOPTOptimizer._get_MaxMinorIterations_metadata)

    _set_MaxMinorIterations_metadata = { "name" : "MaxMinorIterations",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.LONG_arg,) }
    @MaxMinorIterations.setter
    def MaxMinorIterations(self, newVal:int) -> None:
        return self._intf.set_property(IAgVAManeuverOptimalFiniteSNOPTOptimizer._metadata, IAgVAManeuverOptimalFiniteSNOPTOptimizer._set_MaxMinorIterations_metadata, newVal)

    _get_ToleranceOnMinorFeasibility_metadata = { "name" : "ToleranceOnMinorFeasibility",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def ToleranceOnMinorFeasibility(self) -> float:
        """The tolerance which the QP subproblem must meet before being considered feasible."""
        return self._intf.get_property(IAgVAManeuverOptimalFiniteSNOPTOptimizer._metadata, IAgVAManeuverOptimalFiniteSNOPTOptimizer._get_ToleranceOnMinorFeasibility_metadata)

    _set_ToleranceOnMinorFeasibility_metadata = { "name" : "ToleranceOnMinorFeasibility",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @ToleranceOnMinorFeasibility.setter
    def ToleranceOnMinorFeasibility(self, newVal:float) -> None:
        return self._intf.set_property(IAgVAManeuverOptimalFiniteSNOPTOptimizer._metadata, IAgVAManeuverOptimalFiniteSNOPTOptimizer._set_ToleranceOnMinorFeasibility_metadata, newVal)

    _get_OptionsFilename_metadata = { "name" : "OptionsFilename",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def OptionsFilename(self) -> str:
        """If used, the associated SNOPT specifications file may define any of the various SNOPT options. Options in the file that conflict with options specified elsewhere will take precedence."""
        return self._intf.get_property(IAgVAManeuverOptimalFiniteSNOPTOptimizer._metadata, IAgVAManeuverOptimalFiniteSNOPTOptimizer._get_OptionsFilename_metadata)

    _set_OptionsFilename_metadata = { "name" : "OptionsFilename",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @OptionsFilename.setter
    def OptionsFilename(self, newVal:str) -> None:
        return self._intf.set_property(IAgVAManeuverOptimalFiniteSNOPTOptimizer._metadata, IAgVAManeuverOptimalFiniteSNOPTOptimizer._set_OptionsFilename_metadata, newVal)

    _get_ProvideRuntimeTypeInfo_metadata = { "name" : "ProvideRuntimeTypeInfo",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def ProvideRuntimeTypeInfo(self) -> "IAgRuntimeTypeInfo":
        """Returns the IAgRuntimeTypeInfo interface to access properties at runtime."""
        return self._intf.get_property(IAgVAManeuverOptimalFiniteSNOPTOptimizer._metadata, IAgVAManeuverOptimalFiniteSNOPTOptimizer._get_ProvideRuntimeTypeInfo_metadata)

    _get_UseConsoleMonitor_metadata = { "name" : "UseConsoleMonitor",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def UseConsoleMonitor(self) -> bool:
        """Whether to use the out-of-process console monitor for the optimizer."""
        return self._intf.get_property(IAgVAManeuverOptimalFiniteSNOPTOptimizer._metadata, IAgVAManeuverOptimalFiniteSNOPTOptimizer._get_UseConsoleMonitor_metadata)

    _set_UseConsoleMonitor_metadata = { "name" : "UseConsoleMonitor",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @UseConsoleMonitor.setter
    def UseConsoleMonitor(self, newVal:bool) -> None:
        return self._intf.set_property(IAgVAManeuverOptimalFiniteSNOPTOptimizer._metadata, IAgVAManeuverOptimalFiniteSNOPTOptimizer._set_UseConsoleMonitor_metadata, newVal)

    _get_AllowInternalPrimalInfeasibilityMeasureNormalization_metadata = { "name" : "AllowInternalPrimalInfeasibilityMeasureNormalization",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def AllowInternalPrimalInfeasibilityMeasureNormalization(self) -> bool:
        """Whether to allow internal normalization of the primal infeasibility measure."""
        return self._intf.get_property(IAgVAManeuverOptimalFiniteSNOPTOptimizer._metadata, IAgVAManeuverOptimalFiniteSNOPTOptimizer._get_AllowInternalPrimalInfeasibilityMeasureNormalization_metadata)

    _set_AllowInternalPrimalInfeasibilityMeasureNormalization_metadata = { "name" : "AllowInternalPrimalInfeasibilityMeasureNormalization",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @AllowInternalPrimalInfeasibilityMeasureNormalization.setter
    def AllowInternalPrimalInfeasibilityMeasureNormalization(self, newVal:bool) -> None:
        return self._intf.set_property(IAgVAManeuverOptimalFiniteSNOPTOptimizer._metadata, IAgVAManeuverOptimalFiniteSNOPTOptimizer._set_AllowInternalPrimalInfeasibilityMeasureNormalization_metadata, newVal)

    _get_SNOPTScaling_metadata = { "name" : "SNOPTScaling",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAOptimalFiniteSNOPTScaling),) }
    @property
    def SNOPTScaling(self) -> "AgEVAOptimalFiniteSNOPTScaling":
        """SNOPT scaling option."""
        return self._intf.get_property(IAgVAManeuverOptimalFiniteSNOPTOptimizer._metadata, IAgVAManeuverOptimalFiniteSNOPTOptimizer._get_SNOPTScaling_metadata)

    _set_SNOPTScaling_metadata = { "name" : "SNOPTScaling",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAOptimalFiniteSNOPTScaling),) }
    @SNOPTScaling.setter
    def SNOPTScaling(self, newVal:"AgEVAOptimalFiniteSNOPTScaling") -> None:
        return self._intf.set_property(IAgVAManeuverOptimalFiniteSNOPTOptimizer._metadata, IAgVAManeuverOptimalFiniteSNOPTOptimizer._set_SNOPTScaling_metadata, newVal)


agcls.AgClassCatalog.add_catalog_entry("{176AB7BE-90C8-4558-8E24-9E9862CE18FD}", IAgVAManeuverOptimalFiniteSNOPTOptimizer)
agcls.AgTypeNameMap["IAgVAManeuverOptimalFiniteSNOPTOptimizer"] = IAgVAManeuverOptimalFiniteSNOPTOptimizer

class IAgVAManeuverOptimalFiniteInitialBoundaryConditions(object):
    """Properties of initial boundary conditions for optimal finite maneuver."""
    _num_methods = 9
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{872A109F-710B-49D4-9A7D-544E7044530B}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_SetFromInitialGuess" : 1,
                             "set_SetFromInitialGuess" : 2,
                             "get_a" : 3,
                             "get_h" : 4,
                             "get_k" : 5,
                             "get_p" : 6,
                             "get_q" : 7,
                             "get_L" : 8,
                             "get_ProvideRuntimeTypeInfo" : 9, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAManeuverOptimalFiniteInitialBoundaryConditions._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAManeuverOptimalFiniteInitialBoundaryConditions from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAManeuverOptimalFiniteInitialBoundaryConditions.__dict__ and type(IAgVAManeuverOptimalFiniteInitialBoundaryConditions.__dict__[attrname]) == property:
            return IAgVAManeuverOptimalFiniteInitialBoundaryConditions.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAManeuverOptimalFiniteInitialBoundaryConditions.")
    
    _get_SetFromInitialGuess_metadata = { "name" : "SetFromInitialGuess",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def SetFromInitialGuess(self) -> bool:
        """Set initial boundary conditions from initial guess."""
        return self._intf.get_property(IAgVAManeuverOptimalFiniteInitialBoundaryConditions._metadata, IAgVAManeuverOptimalFiniteInitialBoundaryConditions._get_SetFromInitialGuess_metadata)

    _set_SetFromInitialGuess_metadata = { "name" : "SetFromInitialGuess",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @SetFromInitialGuess.setter
    def SetFromInitialGuess(self, newVal:bool) -> None:
        """Set initial boundary conditions from initial guess."""
        return self._intf.set_property(IAgVAManeuverOptimalFiniteInitialBoundaryConditions._metadata, IAgVAManeuverOptimalFiniteInitialBoundaryConditions._set_SetFromInitialGuess_metadata, newVal)

    _get_a_metadata = { "name" : "a",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def a(self) -> "IAgVAManeuverOptimalFiniteBounds":
        """Bound limits for element a."""
        return self._intf.get_property(IAgVAManeuverOptimalFiniteInitialBoundaryConditions._metadata, IAgVAManeuverOptimalFiniteInitialBoundaryConditions._get_a_metadata)

    _get_h_metadata = { "name" : "h",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def h(self) -> "IAgVAManeuverOptimalFiniteBounds":
        """Bound limits for element h."""
        return self._intf.get_property(IAgVAManeuverOptimalFiniteInitialBoundaryConditions._metadata, IAgVAManeuverOptimalFiniteInitialBoundaryConditions._get_h_metadata)

    _get_k_metadata = { "name" : "k",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def k(self) -> "IAgVAManeuverOptimalFiniteBounds":
        """Bound limits for element k."""
        return self._intf.get_property(IAgVAManeuverOptimalFiniteInitialBoundaryConditions._metadata, IAgVAManeuverOptimalFiniteInitialBoundaryConditions._get_k_metadata)

    _get_p_metadata = { "name" : "p",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def p(self) -> "IAgVAManeuverOptimalFiniteBounds":
        """Bound limits for element p."""
        return self._intf.get_property(IAgVAManeuverOptimalFiniteInitialBoundaryConditions._metadata, IAgVAManeuverOptimalFiniteInitialBoundaryConditions._get_p_metadata)

    _get_q_metadata = { "name" : "q",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def q(self) -> "IAgVAManeuverOptimalFiniteBounds":
        """Bound limits for element q."""
        return self._intf.get_property(IAgVAManeuverOptimalFiniteInitialBoundaryConditions._metadata, IAgVAManeuverOptimalFiniteInitialBoundaryConditions._get_q_metadata)

    _get_L_metadata = { "name" : "L",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def L(self) -> "IAgVAManeuverOptimalFiniteBounds":
        """Bound limits for element L."""
        return self._intf.get_property(IAgVAManeuverOptimalFiniteInitialBoundaryConditions._metadata, IAgVAManeuverOptimalFiniteInitialBoundaryConditions._get_L_metadata)

    _get_ProvideRuntimeTypeInfo_metadata = { "name" : "ProvideRuntimeTypeInfo",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def ProvideRuntimeTypeInfo(self) -> "IAgRuntimeTypeInfo":
        """Returns the IAgRuntimeTypeInfo interface to access properties at runtime."""
        return self._intf.get_property(IAgVAManeuverOptimalFiniteInitialBoundaryConditions._metadata, IAgVAManeuverOptimalFiniteInitialBoundaryConditions._get_ProvideRuntimeTypeInfo_metadata)


agcls.AgClassCatalog.add_catalog_entry("{872A109F-710B-49D4-9A7D-544E7044530B}", IAgVAManeuverOptimalFiniteInitialBoundaryConditions)
agcls.AgTypeNameMap["IAgVAManeuverOptimalFiniteInitialBoundaryConditions"] = IAgVAManeuverOptimalFiniteInitialBoundaryConditions

class IAgVAManeuverOptimalFiniteFinalBoundaryConditions(object):
    """Properties of final boundary conditions for optimal finite maneuver."""
    _num_methods = 13
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{476E5210-09E8-4DD7-ABCC-AF09E67DB21D}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_SetFromFinalGuess" : 1,
                             "set_SetFromFinalGuess" : 2,
                             "get_a" : 3,
                             "get_h" : 4,
                             "get_k" : 5,
                             "get_p" : 6,
                             "get_q" : 7,
                             "get_L" : 8,
                             "get_LowerDeltaFinalTime" : 9,
                             "set_LowerDeltaFinalTime" : 10,
                             "get_UpperDeltaFinalTime" : 11,
                             "set_UpperDeltaFinalTime" : 12,
                             "get_ProvideRuntimeTypeInfo" : 13, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAManeuverOptimalFiniteFinalBoundaryConditions._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAManeuverOptimalFiniteFinalBoundaryConditions from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAManeuverOptimalFiniteFinalBoundaryConditions.__dict__ and type(IAgVAManeuverOptimalFiniteFinalBoundaryConditions.__dict__[attrname]) == property:
            return IAgVAManeuverOptimalFiniteFinalBoundaryConditions.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAManeuverOptimalFiniteFinalBoundaryConditions.")
    
    _get_SetFromFinalGuess_metadata = { "name" : "SetFromFinalGuess",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def SetFromFinalGuess(self) -> bool:
        """Set initial boundary conditions from initial guess."""
        return self._intf.get_property(IAgVAManeuverOptimalFiniteFinalBoundaryConditions._metadata, IAgVAManeuverOptimalFiniteFinalBoundaryConditions._get_SetFromFinalGuess_metadata)

    _set_SetFromFinalGuess_metadata = { "name" : "SetFromFinalGuess",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @SetFromFinalGuess.setter
    def SetFromFinalGuess(self, newVal:bool) -> None:
        return self._intf.set_property(IAgVAManeuverOptimalFiniteFinalBoundaryConditions._metadata, IAgVAManeuverOptimalFiniteFinalBoundaryConditions._set_SetFromFinalGuess_metadata, newVal)

    _get_a_metadata = { "name" : "a",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def a(self) -> "IAgVAManeuverOptimalFiniteBounds":
        """Bound limits for element a."""
        return self._intf.get_property(IAgVAManeuverOptimalFiniteFinalBoundaryConditions._metadata, IAgVAManeuverOptimalFiniteFinalBoundaryConditions._get_a_metadata)

    _get_h_metadata = { "name" : "h",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def h(self) -> "IAgVAManeuverOptimalFiniteBounds":
        """Bound limits for element h."""
        return self._intf.get_property(IAgVAManeuverOptimalFiniteFinalBoundaryConditions._metadata, IAgVAManeuverOptimalFiniteFinalBoundaryConditions._get_h_metadata)

    _get_k_metadata = { "name" : "k",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def k(self) -> "IAgVAManeuverOptimalFiniteBounds":
        """Bound limits for element k."""
        return self._intf.get_property(IAgVAManeuverOptimalFiniteFinalBoundaryConditions._metadata, IAgVAManeuverOptimalFiniteFinalBoundaryConditions._get_k_metadata)

    _get_p_metadata = { "name" : "p",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def p(self) -> "IAgVAManeuverOptimalFiniteBounds":
        """Bound limits for element p."""
        return self._intf.get_property(IAgVAManeuverOptimalFiniteFinalBoundaryConditions._metadata, IAgVAManeuverOptimalFiniteFinalBoundaryConditions._get_p_metadata)

    _get_q_metadata = { "name" : "q",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def q(self) -> "IAgVAManeuverOptimalFiniteBounds":
        """Bound limits for element q."""
        return self._intf.get_property(IAgVAManeuverOptimalFiniteFinalBoundaryConditions._metadata, IAgVAManeuverOptimalFiniteFinalBoundaryConditions._get_q_metadata)

    _get_L_metadata = { "name" : "L",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def L(self) -> "IAgVAManeuverOptimalFiniteBounds":
        """Bound limits for element L."""
        return self._intf.get_property(IAgVAManeuverOptimalFiniteFinalBoundaryConditions._metadata, IAgVAManeuverOptimalFiniteFinalBoundaryConditions._get_L_metadata)

    _get_LowerDeltaFinalTime_metadata = { "name" : "LowerDeltaFinalTime",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def LowerDeltaFinalTime(self) -> float:
        """Lower delta for final time"""
        return self._intf.get_property(IAgVAManeuverOptimalFiniteFinalBoundaryConditions._metadata, IAgVAManeuverOptimalFiniteFinalBoundaryConditions._get_LowerDeltaFinalTime_metadata)

    _set_LowerDeltaFinalTime_metadata = { "name" : "LowerDeltaFinalTime",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @LowerDeltaFinalTime.setter
    def LowerDeltaFinalTime(self, newVal:float) -> None:
        return self._intf.set_property(IAgVAManeuverOptimalFiniteFinalBoundaryConditions._metadata, IAgVAManeuverOptimalFiniteFinalBoundaryConditions._set_LowerDeltaFinalTime_metadata, newVal)

    _get_UpperDeltaFinalTime_metadata = { "name" : "UpperDeltaFinalTime",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def UpperDeltaFinalTime(self) -> float:
        """Upper delta for final time"""
        return self._intf.get_property(IAgVAManeuverOptimalFiniteFinalBoundaryConditions._metadata, IAgVAManeuverOptimalFiniteFinalBoundaryConditions._get_UpperDeltaFinalTime_metadata)

    _set_UpperDeltaFinalTime_metadata = { "name" : "UpperDeltaFinalTime",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @UpperDeltaFinalTime.setter
    def UpperDeltaFinalTime(self, newVal:float) -> None:
        return self._intf.set_property(IAgVAManeuverOptimalFiniteFinalBoundaryConditions._metadata, IAgVAManeuverOptimalFiniteFinalBoundaryConditions._set_UpperDeltaFinalTime_metadata, newVal)

    _get_ProvideRuntimeTypeInfo_metadata = { "name" : "ProvideRuntimeTypeInfo",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def ProvideRuntimeTypeInfo(self) -> "IAgRuntimeTypeInfo":
        """Returns the IAgRuntimeTypeInfo interface to access properties at runtime."""
        return self._intf.get_property(IAgVAManeuverOptimalFiniteFinalBoundaryConditions._metadata, IAgVAManeuverOptimalFiniteFinalBoundaryConditions._get_ProvideRuntimeTypeInfo_metadata)


agcls.AgClassCatalog.add_catalog_entry("{476E5210-09E8-4DD7-ABCC-AF09E67DB21D}", IAgVAManeuverOptimalFiniteFinalBoundaryConditions)
agcls.AgTypeNameMap["IAgVAManeuverOptimalFiniteFinalBoundaryConditions"] = IAgVAManeuverOptimalFiniteFinalBoundaryConditions

class IAgVAManeuverOptimalFinitePathBoundaryConditions(object):
    """Properties of path boundary conditions for optimal finite maneuver."""
    _num_methods = 17
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{BF41B9E6-80DE-4E15-8E36-00D735E7B40D}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_ComputeFromInitialGuess" : 1,
                             "set_ComputeFromInitialGuess" : 2,
                             "get_a" : 3,
                             "get_h" : 4,
                             "get_k" : 5,
                             "get_p" : 6,
                             "get_q" : 7,
                             "get_L" : 8,
                             "get_LowerBoundAzimuth" : 9,
                             "set_LowerBoundAzimuth" : 10,
                             "get_UpperBoundAzimuth" : 11,
                             "set_UpperBoundAzimuth" : 12,
                             "get_LowerBoundElevation" : 13,
                             "set_LowerBoundElevation" : 14,
                             "get_UpperBoundElevation" : 15,
                             "set_UpperBoundElevation" : 16,
                             "get_ProvideRuntimeTypeInfo" : 17, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAManeuverOptimalFinitePathBoundaryConditions._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAManeuverOptimalFinitePathBoundaryConditions from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAManeuverOptimalFinitePathBoundaryConditions.__dict__ and type(IAgVAManeuverOptimalFinitePathBoundaryConditions.__dict__[attrname]) == property:
            return IAgVAManeuverOptimalFinitePathBoundaryConditions.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAManeuverOptimalFinitePathBoundaryConditions.")
    
    _get_ComputeFromInitialGuess_metadata = { "name" : "ComputeFromInitialGuess",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def ComputeFromInitialGuess(self) -> bool:
        """Compute path boundary conditions from initial guess."""
        return self._intf.get_property(IAgVAManeuverOptimalFinitePathBoundaryConditions._metadata, IAgVAManeuverOptimalFinitePathBoundaryConditions._get_ComputeFromInitialGuess_metadata)

    _set_ComputeFromInitialGuess_metadata = { "name" : "ComputeFromInitialGuess",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @ComputeFromInitialGuess.setter
    def ComputeFromInitialGuess(self, newVal:bool) -> None:
        return self._intf.set_property(IAgVAManeuverOptimalFinitePathBoundaryConditions._metadata, IAgVAManeuverOptimalFinitePathBoundaryConditions._set_ComputeFromInitialGuess_metadata, newVal)

    _get_a_metadata = { "name" : "a",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def a(self) -> "IAgVAManeuverOptimalFiniteBounds":
        """Bound limits for element a."""
        return self._intf.get_property(IAgVAManeuverOptimalFinitePathBoundaryConditions._metadata, IAgVAManeuverOptimalFinitePathBoundaryConditions._get_a_metadata)

    _get_h_metadata = { "name" : "h",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def h(self) -> "IAgVAManeuverOptimalFiniteBounds":
        """Bound limits for element h."""
        return self._intf.get_property(IAgVAManeuverOptimalFinitePathBoundaryConditions._metadata, IAgVAManeuverOptimalFinitePathBoundaryConditions._get_h_metadata)

    _get_k_metadata = { "name" : "k",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def k(self) -> "IAgVAManeuverOptimalFiniteBounds":
        """Bound limits for element k."""
        return self._intf.get_property(IAgVAManeuverOptimalFinitePathBoundaryConditions._metadata, IAgVAManeuverOptimalFinitePathBoundaryConditions._get_k_metadata)

    _get_p_metadata = { "name" : "p",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def p(self) -> "IAgVAManeuverOptimalFiniteBounds":
        """Bound limits for element p."""
        return self._intf.get_property(IAgVAManeuverOptimalFinitePathBoundaryConditions._metadata, IAgVAManeuverOptimalFinitePathBoundaryConditions._get_p_metadata)

    _get_q_metadata = { "name" : "q",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def q(self) -> "IAgVAManeuverOptimalFiniteBounds":
        """Bound limits for element q."""
        return self._intf.get_property(IAgVAManeuverOptimalFinitePathBoundaryConditions._metadata, IAgVAManeuverOptimalFinitePathBoundaryConditions._get_q_metadata)

    _get_L_metadata = { "name" : "L",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def L(self) -> "IAgVAManeuverOptimalFiniteBounds":
        """Bound limits for element L."""
        return self._intf.get_property(IAgVAManeuverOptimalFinitePathBoundaryConditions._metadata, IAgVAManeuverOptimalFinitePathBoundaryConditions._get_L_metadata)

    _get_LowerBoundAzimuth_metadata = { "name" : "LowerBoundAzimuth",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def LowerBoundAzimuth(self) -> float:
        """Thrust direction azimuth lower bound along the path"""
        return self._intf.get_property(IAgVAManeuverOptimalFinitePathBoundaryConditions._metadata, IAgVAManeuverOptimalFinitePathBoundaryConditions._get_LowerBoundAzimuth_metadata)

    _set_LowerBoundAzimuth_metadata = { "name" : "LowerBoundAzimuth",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @LowerBoundAzimuth.setter
    def LowerBoundAzimuth(self, newVal:float) -> None:
        return self._intf.set_property(IAgVAManeuverOptimalFinitePathBoundaryConditions._metadata, IAgVAManeuverOptimalFinitePathBoundaryConditions._set_LowerBoundAzimuth_metadata, newVal)

    _get_UpperBoundAzimuth_metadata = { "name" : "UpperBoundAzimuth",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def UpperBoundAzimuth(self) -> float:
        """Thrust direction azimuth upper bound along the path"""
        return self._intf.get_property(IAgVAManeuverOptimalFinitePathBoundaryConditions._metadata, IAgVAManeuverOptimalFinitePathBoundaryConditions._get_UpperBoundAzimuth_metadata)

    _set_UpperBoundAzimuth_metadata = { "name" : "UpperBoundAzimuth",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @UpperBoundAzimuth.setter
    def UpperBoundAzimuth(self, newVal:float) -> None:
        return self._intf.set_property(IAgVAManeuverOptimalFinitePathBoundaryConditions._metadata, IAgVAManeuverOptimalFinitePathBoundaryConditions._set_UpperBoundAzimuth_metadata, newVal)

    _get_LowerBoundElevation_metadata = { "name" : "LowerBoundElevation",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def LowerBoundElevation(self) -> float:
        """Thrust direction elevation lower bound along the path"""
        return self._intf.get_property(IAgVAManeuverOptimalFinitePathBoundaryConditions._metadata, IAgVAManeuverOptimalFinitePathBoundaryConditions._get_LowerBoundElevation_metadata)

    _set_LowerBoundElevation_metadata = { "name" : "LowerBoundElevation",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @LowerBoundElevation.setter
    def LowerBoundElevation(self, newVal:float) -> None:
        return self._intf.set_property(IAgVAManeuverOptimalFinitePathBoundaryConditions._metadata, IAgVAManeuverOptimalFinitePathBoundaryConditions._set_LowerBoundElevation_metadata, newVal)

    _get_UpperBoundElevation_metadata = { "name" : "UpperBoundElevation",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def UpperBoundElevation(self) -> float:
        """Thrust direction elevation upper bound along the path"""
        return self._intf.get_property(IAgVAManeuverOptimalFinitePathBoundaryConditions._metadata, IAgVAManeuverOptimalFinitePathBoundaryConditions._get_UpperBoundElevation_metadata)

    _set_UpperBoundElevation_metadata = { "name" : "UpperBoundElevation",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @UpperBoundElevation.setter
    def UpperBoundElevation(self, newVal:float) -> None:
        return self._intf.set_property(IAgVAManeuverOptimalFinitePathBoundaryConditions._metadata, IAgVAManeuverOptimalFinitePathBoundaryConditions._set_UpperBoundElevation_metadata, newVal)

    _get_ProvideRuntimeTypeInfo_metadata = { "name" : "ProvideRuntimeTypeInfo",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def ProvideRuntimeTypeInfo(self) -> "IAgRuntimeTypeInfo":
        """Returns the IAgRuntimeTypeInfo interface to access properties at runtime."""
        return self._intf.get_property(IAgVAManeuverOptimalFinitePathBoundaryConditions._metadata, IAgVAManeuverOptimalFinitePathBoundaryConditions._get_ProvideRuntimeTypeInfo_metadata)


agcls.AgClassCatalog.add_catalog_entry("{BF41B9E6-80DE-4E15-8E36-00D735E7B40D}", IAgVAManeuverOptimalFinitePathBoundaryConditions)
agcls.AgTypeNameMap["IAgVAManeuverOptimalFinitePathBoundaryConditions"] = IAgVAManeuverOptimalFinitePathBoundaryConditions

class IAgVAManeuverOptimalFiniteSteeringNodeCollection(object):
    """Steering/nodes collection."""
    _num_methods = 3
    _vtable_offset = IDispatch._vtable_offset + IDispatch._num_methods
    _metadata = {
        "uuid" : "{1808D2D6-FAB4-4750-AE06-B37D95779815}",
        "vtable_reference" : IDispatch._vtable_offset + IDispatch._num_methods - 1,
        "method_offsets" : { "Item" : 1,
                             "get__NewEnum" : 2,
                             "get_Count" : 3, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAManeuverOptimalFiniteSteeringNodeCollection._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAManeuverOptimalFiniteSteeringNodeCollection from source object.")
        self.__dict__["_enumerator"] = None
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAManeuverOptimalFiniteSteeringNodeCollection.__dict__ and type(IAgVAManeuverOptimalFiniteSteeringNodeCollection.__dict__[attrname]) == property:
            return IAgVAManeuverOptimalFiniteSteeringNodeCollection.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAManeuverOptimalFiniteSteeringNodeCollection.")
    def __iter__(self):
        self.__dict__["_enumerator"] = self._NewEnum
        self._enumerator.reset()
        return self
    def __next__(self) -> "IAgVAManeuverOptimalFiniteSteeringNodeElement":
        if self._enumerator is None:
            raise StopIteration
        nextval = self._enumerator.next()
        if nextval is None:
            raise StopIteration
        return nextval
    
    _Item_metadata = { "name" : "Item",
            "arg_types" : (agcom.LONG, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.LONG_arg, agmarshall.AgInterface_out_arg,) }
    def Item(self, index:int) -> "IAgVAManeuverOptimalFiniteSteeringNodeElement":
        """Allows you to iterate through the collection."""
        return self._intf.invoke(IAgVAManeuverOptimalFiniteSteeringNodeCollection._metadata, IAgVAManeuverOptimalFiniteSteeringNodeCollection._Item_metadata, index, out_arg())

    _get__NewEnum_metadata = { "name" : "_NewEnum",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.IEnumVARIANT_arg,) }
    @property
    def _NewEnum(self) -> enumerator_proxy:
        """Allows you to enumerate through the collection."""
        return self._intf.get_property(IAgVAManeuverOptimalFiniteSteeringNodeCollection._metadata, IAgVAManeuverOptimalFiniteSteeringNodeCollection._get__NewEnum_metadata)

    _get_Count_metadata = { "name" : "Count",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.LONG_arg,) }
    @property
    def Count(self) -> int:
        """Returns the size of the collection."""
        return self._intf.get_property(IAgVAManeuverOptimalFiniteSteeringNodeCollection._metadata, IAgVAManeuverOptimalFiniteSteeringNodeCollection._get_Count_metadata)

    __getitem__ = Item



agcls.AgClassCatalog.add_catalog_entry("{1808D2D6-FAB4-4750-AE06-B37D95779815}", IAgVAManeuverOptimalFiniteSteeringNodeCollection)
agcls.AgTypeNameMap["IAgVAManeuverOptimalFiniteSteeringNodeCollection"] = IAgVAManeuverOptimalFiniteSteeringNodeCollection

class IAgVAManeuverOptimalFiniteBounds(object):
    """The bounds for boundary interfaces."""
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{E2B960BB-5091-43DE-91DD-53D6E0EFA61D}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_LowerBound" : 1,
                             "set_LowerBound" : 2,
                             "get_UpperBound" : 3,
                             "set_UpperBound" : 4, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAManeuverOptimalFiniteBounds._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAManeuverOptimalFiniteBounds from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAManeuverOptimalFiniteBounds.__dict__ and type(IAgVAManeuverOptimalFiniteBounds.__dict__[attrname]) == property:
            return IAgVAManeuverOptimalFiniteBounds.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAManeuverOptimalFiniteBounds.")
    
    _get_LowerBound_metadata = { "name" : "LowerBound",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def LowerBound(self) -> float:
        """Lower bound for a boundary element."""
        return self._intf.get_property(IAgVAManeuverOptimalFiniteBounds._metadata, IAgVAManeuverOptimalFiniteBounds._get_LowerBound_metadata)

    _set_LowerBound_metadata = { "name" : "LowerBound",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @LowerBound.setter
    def LowerBound(self, newVal:float) -> None:
        return self._intf.set_property(IAgVAManeuverOptimalFiniteBounds._metadata, IAgVAManeuverOptimalFiniteBounds._set_LowerBound_metadata, newVal)

    _get_UpperBound_metadata = { "name" : "UpperBound",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def UpperBound(self) -> float:
        """Upper bound for a boundary element."""
        return self._intf.get_property(IAgVAManeuverOptimalFiniteBounds._metadata, IAgVAManeuverOptimalFiniteBounds._get_UpperBound_metadata)

    _set_UpperBound_metadata = { "name" : "UpperBound",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @UpperBound.setter
    def UpperBound(self, newVal:float) -> None:
        return self._intf.set_property(IAgVAManeuverOptimalFiniteBounds._metadata, IAgVAManeuverOptimalFiniteBounds._set_UpperBound_metadata, newVal)


agcls.AgClassCatalog.add_catalog_entry("{E2B960BB-5091-43DE-91DD-53D6E0EFA61D}", IAgVAManeuverOptimalFiniteBounds)
agcls.AgTypeNameMap["IAgVAManeuverOptimalFiniteBounds"] = IAgVAManeuverOptimalFiniteBounds

class IAgVAGoldenSectionControlCollection(object):
    """Properties for the list of Golden Section control parameters."""
    _num_methods = 4
    _vtable_offset = IDispatch._vtable_offset + IDispatch._num_methods
    _metadata = {
        "uuid" : "{1E3A8FAA-05F5-4519-A63A-C793CCE4C27A}",
        "vtable_reference" : IDispatch._vtable_offset + IDispatch._num_methods - 1,
        "method_offsets" : { "Item" : 1,
                             "get__NewEnum" : 2,
                             "get_Count" : 3,
                             "GetControlByPaths" : 4, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAGoldenSectionControlCollection._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAGoldenSectionControlCollection from source object.")
        self.__dict__["_enumerator"] = None
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAGoldenSectionControlCollection.__dict__ and type(IAgVAGoldenSectionControlCollection.__dict__[attrname]) == property:
            return IAgVAGoldenSectionControlCollection.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAGoldenSectionControlCollection.")
    def __iter__(self):
        self.__dict__["_enumerator"] = self._NewEnum
        self._enumerator.reset()
        return self
    def __next__(self) -> "IAgVAGoldenSectionControl":
        if self._enumerator is None:
            raise StopIteration
        nextval = self._enumerator.next()
        if nextval is None:
            raise StopIteration
        return nextval
    
    _Item_metadata = { "name" : "Item",
            "arg_types" : (agcom.LONG, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.LONG_arg, agmarshall.AgInterface_out_arg,) }
    def Item(self, index:int) -> "IAgVAGoldenSectionControl":
        """Allows you to iterate through the collection."""
        return self._intf.invoke(IAgVAGoldenSectionControlCollection._metadata, IAgVAGoldenSectionControlCollection._Item_metadata, index, out_arg())

    _get__NewEnum_metadata = { "name" : "_NewEnum",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.IEnumVARIANT_arg,) }
    @property
    def _NewEnum(self) -> enumerator_proxy:
        """Allows you to enumerate through the collection."""
        return self._intf.get_property(IAgVAGoldenSectionControlCollection._metadata, IAgVAGoldenSectionControlCollection._get__NewEnum_metadata)

    _get_Count_metadata = { "name" : "Count",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.LONG_arg,) }
    @property
    def Count(self) -> int:
        """Returns the size of the collection."""
        return self._intf.get_property(IAgVAGoldenSectionControlCollection._metadata, IAgVAGoldenSectionControlCollection._get_Count_metadata)

    _GetControlByPaths_metadata = { "name" : "GetControlByPaths",
            "arg_types" : (agcom.BSTR, agcom.BSTR, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.BSTR_arg, agmarshall.AgInterface_out_arg,) }
    def GetControlByPaths(self, objectPath:str, controlPath:str) -> "IAgVAGoldenSectionControl":
        """Returns the control specified by the object/control path."""
        return self._intf.invoke(IAgVAGoldenSectionControlCollection._metadata, IAgVAGoldenSectionControlCollection._GetControlByPaths_metadata, objectPath, controlPath, out_arg())

    __getitem__ = Item



agcls.AgClassCatalog.add_catalog_entry("{1E3A8FAA-05F5-4519-A63A-C793CCE4C27A}", IAgVAGoldenSectionControlCollection)
agcls.AgTypeNameMap["IAgVAGoldenSectionControlCollection"] = IAgVAGoldenSectionControlCollection

class IAgVAGoldenSectionControl(object):
    """Properties for control parameters of a Golden Section profile."""
    _num_methods = 15
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{91407E31-8792-460C-AE98-32CF4690D53F}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_Enable" : 1,
                             "set_Enable" : 2,
                             "get_Name" : 3,
                             "get_ParentName" : 4,
                             "get_CurrentValue" : 5,
                             "get_LowerBound" : 6,
                             "set_LowerBound" : 7,
                             "get_UpperBound" : 8,
                             "set_UpperBound" : 9,
                             "get_UseCustomDisplayUnit" : 10,
                             "set_UseCustomDisplayUnit" : 11,
                             "get_CustomDisplayUnit" : 12,
                             "set_CustomDisplayUnit" : 13,
                             "get_Tolerance" : 14,
                             "set_Tolerance" : 15, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAGoldenSectionControl._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAGoldenSectionControl from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAGoldenSectionControl.__dict__ and type(IAgVAGoldenSectionControl.__dict__[attrname]) == property:
            return IAgVAGoldenSectionControl.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAGoldenSectionControl.")
    
    _get_Enable_metadata = { "name" : "Enable",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def Enable(self) -> bool:
        """If true, the variable is being used."""
        return self._intf.get_property(IAgVAGoldenSectionControl._metadata, IAgVAGoldenSectionControl._get_Enable_metadata)

    _set_Enable_metadata = { "name" : "Enable",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @Enable.setter
    def Enable(self, newVal:bool) -> None:
        return self._intf.set_property(IAgVAGoldenSectionControl._metadata, IAgVAGoldenSectionControl._set_Enable_metadata, newVal)

    _get_Name_metadata = { "name" : "Name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def Name(self) -> str:
        """The name of the parameter."""
        return self._intf.get_property(IAgVAGoldenSectionControl._metadata, IAgVAGoldenSectionControl._get_Name_metadata)

    _get_ParentName_metadata = { "name" : "ParentName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def ParentName(self) -> str:
        """The name of the segment to which the parameter belongs."""
        return self._intf.get_property(IAgVAGoldenSectionControl._metadata, IAgVAGoldenSectionControl._get_ParentName_metadata)

    _get_CurrentValue_metadata = { "name" : "CurrentValue",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def CurrentValue(self) -> typing.Any:
        """The value of the independent variable after the last targeter run."""
        return self._intf.get_property(IAgVAGoldenSectionControl._metadata, IAgVAGoldenSectionControl._get_CurrentValue_metadata)

    _get_LowerBound_metadata = { "name" : "LowerBound",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def LowerBound(self) -> typing.Any:
        """Dimension depends on context."""
        return self._intf.get_property(IAgVAGoldenSectionControl._metadata, IAgVAGoldenSectionControl._get_LowerBound_metadata)

    _set_LowerBound_metadata = { "name" : "LowerBound",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @LowerBound.setter
    def LowerBound(self, newVal:typing.Any) -> None:
        return self._intf.set_property(IAgVAGoldenSectionControl._metadata, IAgVAGoldenSectionControl._set_LowerBound_metadata, newVal)

    _get_UpperBound_metadata = { "name" : "UpperBound",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def UpperBound(self) -> typing.Any:
        """Dimension depends on context."""
        return self._intf.get_property(IAgVAGoldenSectionControl._metadata, IAgVAGoldenSectionControl._get_UpperBound_metadata)

    _set_UpperBound_metadata = { "name" : "UpperBound",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @UpperBound.setter
    def UpperBound(self, newVal:typing.Any) -> None:
        return self._intf.set_property(IAgVAGoldenSectionControl._metadata, IAgVAGoldenSectionControl._set_UpperBound_metadata, newVal)

    _get_UseCustomDisplayUnit_metadata = { "name" : "UseCustomDisplayUnit",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def UseCustomDisplayUnit(self) -> bool:
        """If true, allows display of values in another unit."""
        return self._intf.get_property(IAgVAGoldenSectionControl._metadata, IAgVAGoldenSectionControl._get_UseCustomDisplayUnit_metadata)

    _set_UseCustomDisplayUnit_metadata = { "name" : "UseCustomDisplayUnit",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @UseCustomDisplayUnit.setter
    def UseCustomDisplayUnit(self, newVal:bool) -> None:
        return self._intf.set_property(IAgVAGoldenSectionControl._metadata, IAgVAGoldenSectionControl._set_UseCustomDisplayUnit_metadata, newVal)

    _get_CustomDisplayUnit_metadata = { "name" : "CustomDisplayUnit",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def CustomDisplayUnit(self) -> str:
        """The unit in which the value will be displayed in the GUI."""
        return self._intf.get_property(IAgVAGoldenSectionControl._metadata, IAgVAGoldenSectionControl._get_CustomDisplayUnit_metadata)

    _set_CustomDisplayUnit_metadata = { "name" : "CustomDisplayUnit",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @CustomDisplayUnit.setter
    def CustomDisplayUnit(self, newVal:str) -> None:
        return self._intf.set_property(IAgVAGoldenSectionControl._metadata, IAgVAGoldenSectionControl._set_CustomDisplayUnit_metadata, newVal)

    _get_Tolerance_metadata = { "name" : "Tolerance",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def Tolerance(self) -> typing.Any:
        """How close the targeter should come to the desired. Dimension depends on context."""
        return self._intf.get_property(IAgVAGoldenSectionControl._metadata, IAgVAGoldenSectionControl._get_Tolerance_metadata)

    _set_Tolerance_metadata = { "name" : "Tolerance",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @Tolerance.setter
    def Tolerance(self, newVal:typing.Any) -> None:
        return self._intf.set_property(IAgVAGoldenSectionControl._metadata, IAgVAGoldenSectionControl._set_Tolerance_metadata, newVal)


agcls.AgClassCatalog.add_catalog_entry("{91407E31-8792-460C-AE98-32CF4690D53F}", IAgVAGoldenSectionControl)
agcls.AgTypeNameMap["IAgVAGoldenSectionControl"] = IAgVAGoldenSectionControl

class IAgVAGoldenSectionResultCollection(object):
    """Properties for the list of Golden Section result parameters."""
    _num_methods = 4
    _vtable_offset = IDispatch._vtable_offset + IDispatch._num_methods
    _metadata = {
        "uuid" : "{50AD7420-2926-4B14-8C99-88E1942EF754}",
        "vtable_reference" : IDispatch._vtable_offset + IDispatch._num_methods - 1,
        "method_offsets" : { "Item" : 1,
                             "get__NewEnum" : 2,
                             "get_Count" : 3,
                             "GetResultByPaths" : 4, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAGoldenSectionResultCollection._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAGoldenSectionResultCollection from source object.")
        self.__dict__["_enumerator"] = None
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAGoldenSectionResultCollection.__dict__ and type(IAgVAGoldenSectionResultCollection.__dict__[attrname]) == property:
            return IAgVAGoldenSectionResultCollection.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAGoldenSectionResultCollection.")
    def __iter__(self):
        self.__dict__["_enumerator"] = self._NewEnum
        self._enumerator.reset()
        return self
    def __next__(self) -> "IAgVAGoldenSectionResult":
        if self._enumerator is None:
            raise StopIteration
        nextval = self._enumerator.next()
        if nextval is None:
            raise StopIteration
        return nextval
    
    _Item_metadata = { "name" : "Item",
            "arg_types" : (agcom.LONG, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.LONG_arg, agmarshall.AgInterface_out_arg,) }
    def Item(self, index:int) -> "IAgVAGoldenSectionResult":
        """Allows you to iterate through the collection."""
        return self._intf.invoke(IAgVAGoldenSectionResultCollection._metadata, IAgVAGoldenSectionResultCollection._Item_metadata, index, out_arg())

    _get__NewEnum_metadata = { "name" : "_NewEnum",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.IEnumVARIANT_arg,) }
    @property
    def _NewEnum(self) -> enumerator_proxy:
        """Allows you to enumerate through the collection."""
        return self._intf.get_property(IAgVAGoldenSectionResultCollection._metadata, IAgVAGoldenSectionResultCollection._get__NewEnum_metadata)

    _get_Count_metadata = { "name" : "Count",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.LONG_arg,) }
    @property
    def Count(self) -> int:
        """Returns the size of the collection."""
        return self._intf.get_property(IAgVAGoldenSectionResultCollection._metadata, IAgVAGoldenSectionResultCollection._get_Count_metadata)

    _GetResultByPaths_metadata = { "name" : "GetResultByPaths",
            "arg_types" : (agcom.BSTR, agcom.BSTR, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.BSTR_arg, agmarshall.AgInterface_out_arg,) }
    def GetResultByPaths(self, objectPath:str, resultPath:str) -> "IAgVAGoldenSectionResult":
        """Returns the result specified by the object/result path."""
        return self._intf.invoke(IAgVAGoldenSectionResultCollection._metadata, IAgVAGoldenSectionResultCollection._GetResultByPaths_metadata, objectPath, resultPath, out_arg())

    __getitem__ = Item



agcls.AgClassCatalog.add_catalog_entry("{50AD7420-2926-4B14-8C99-88E1942EF754}", IAgVAGoldenSectionResultCollection)
agcls.AgTypeNameMap["IAgVAGoldenSectionResultCollection"] = IAgVAGoldenSectionResultCollection

class IAgVAGoldenSectionResult(object):
    """Properties for result parameters of a Golden Section profile."""
    _num_methods = 11
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{67461697-37E6-4342-978D-9C6143528607}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_Enable" : 1,
                             "set_Enable" : 2,
                             "get_Name" : 3,
                             "get_ParentName" : 4,
                             "get_CurrentValue" : 5,
                             "get_DesiredOperation" : 6,
                             "set_DesiredOperation" : 7,
                             "get_UseCustomDisplayUnit" : 8,
                             "set_UseCustomDisplayUnit" : 9,
                             "get_CustomDisplayUnit" : 10,
                             "set_CustomDisplayUnit" : 11, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAGoldenSectionResult._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAGoldenSectionResult from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAGoldenSectionResult.__dict__ and type(IAgVAGoldenSectionResult.__dict__[attrname]) == property:
            return IAgVAGoldenSectionResult.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAGoldenSectionResult.")
    
    _get_Enable_metadata = { "name" : "Enable",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def Enable(self) -> bool:
        """If true, the variable is being used."""
        return self._intf.get_property(IAgVAGoldenSectionResult._metadata, IAgVAGoldenSectionResult._get_Enable_metadata)

    _set_Enable_metadata = { "name" : "Enable",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @Enable.setter
    def Enable(self, newVal:bool) -> None:
        return self._intf.set_property(IAgVAGoldenSectionResult._metadata, IAgVAGoldenSectionResult._set_Enable_metadata, newVal)

    _get_Name_metadata = { "name" : "Name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def Name(self) -> str:
        """The name of the parameter."""
        return self._intf.get_property(IAgVAGoldenSectionResult._metadata, IAgVAGoldenSectionResult._get_Name_metadata)

    _get_ParentName_metadata = { "name" : "ParentName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def ParentName(self) -> str:
        """The name of the segment to which the parameter belongs."""
        return self._intf.get_property(IAgVAGoldenSectionResult._metadata, IAgVAGoldenSectionResult._get_ParentName_metadata)

    _get_CurrentValue_metadata = { "name" : "CurrentValue",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def CurrentValue(self) -> typing.Any:
        """The value of the independent variable after the last targeter run."""
        return self._intf.get_property(IAgVAGoldenSectionResult._metadata, IAgVAGoldenSectionResult._get_CurrentValue_metadata)

    _get_DesiredOperation_metadata = { "name" : "DesiredOperation",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAGoldenSectionDesiredOperation),) }
    @property
    def DesiredOperation(self) -> "AgEVAGoldenSectionDesiredOperation":
        """The Desired Operation/Objective of golden section."""
        return self._intf.get_property(IAgVAGoldenSectionResult._metadata, IAgVAGoldenSectionResult._get_DesiredOperation_metadata)

    _set_DesiredOperation_metadata = { "name" : "DesiredOperation",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAGoldenSectionDesiredOperation),) }
    @DesiredOperation.setter
    def DesiredOperation(self, inVal:"AgEVAGoldenSectionDesiredOperation") -> None:
        return self._intf.set_property(IAgVAGoldenSectionResult._metadata, IAgVAGoldenSectionResult._set_DesiredOperation_metadata, inVal)

    _get_UseCustomDisplayUnit_metadata = { "name" : "UseCustomDisplayUnit",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def UseCustomDisplayUnit(self) -> bool:
        """If true, allows display of values in another unit."""
        return self._intf.get_property(IAgVAGoldenSectionResult._metadata, IAgVAGoldenSectionResult._get_UseCustomDisplayUnit_metadata)

    _set_UseCustomDisplayUnit_metadata = { "name" : "UseCustomDisplayUnit",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @UseCustomDisplayUnit.setter
    def UseCustomDisplayUnit(self, newVal:bool) -> None:
        return self._intf.set_property(IAgVAGoldenSectionResult._metadata, IAgVAGoldenSectionResult._set_UseCustomDisplayUnit_metadata, newVal)

    _get_CustomDisplayUnit_metadata = { "name" : "CustomDisplayUnit",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def CustomDisplayUnit(self) -> str:
        """The unit in which the value will be displayed in the GUI."""
        return self._intf.get_property(IAgVAGoldenSectionResult._metadata, IAgVAGoldenSectionResult._get_CustomDisplayUnit_metadata)

    _set_CustomDisplayUnit_metadata = { "name" : "CustomDisplayUnit",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @CustomDisplayUnit.setter
    def CustomDisplayUnit(self, newVal:str) -> None:
        return self._intf.set_property(IAgVAGoldenSectionResult._metadata, IAgVAGoldenSectionResult._set_CustomDisplayUnit_metadata, newVal)


agcls.AgClassCatalog.add_catalog_entry("{67461697-37E6-4342-978D-9C6143528607}", IAgVAGoldenSectionResult)
agcls.AgTypeNameMap["IAgVAGoldenSectionResult"] = IAgVAGoldenSectionResult

class IAgVAGridSearchControlCollection(object):
    """Properties for the list of Grid Search control parameters."""
    _num_methods = 4
    _vtable_offset = IDispatch._vtable_offset + IDispatch._num_methods
    _metadata = {
        "uuid" : "{BD562D00-ABDC-411B-813D-84C1E3597CEF}",
        "vtable_reference" : IDispatch._vtable_offset + IDispatch._num_methods - 1,
        "method_offsets" : { "Item" : 1,
                             "get__NewEnum" : 2,
                             "get_Count" : 3,
                             "GetControlByPaths" : 4, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAGridSearchControlCollection._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAGridSearchControlCollection from source object.")
        self.__dict__["_enumerator"] = None
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAGridSearchControlCollection.__dict__ and type(IAgVAGridSearchControlCollection.__dict__[attrname]) == property:
            return IAgVAGridSearchControlCollection.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAGridSearchControlCollection.")
    def __iter__(self):
        self.__dict__["_enumerator"] = self._NewEnum
        self._enumerator.reset()
        return self
    def __next__(self) -> "IAgVAGridSearchControl":
        if self._enumerator is None:
            raise StopIteration
        nextval = self._enumerator.next()
        if nextval is None:
            raise StopIteration
        return nextval
    
    _Item_metadata = { "name" : "Item",
            "arg_types" : (agcom.LONG, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.LONG_arg, agmarshall.AgInterface_out_arg,) }
    def Item(self, index:int) -> "IAgVAGridSearchControl":
        """Allows you to iterate through the collection."""
        return self._intf.invoke(IAgVAGridSearchControlCollection._metadata, IAgVAGridSearchControlCollection._Item_metadata, index, out_arg())

    _get__NewEnum_metadata = { "name" : "_NewEnum",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.IEnumVARIANT_arg,) }
    @property
    def _NewEnum(self) -> enumerator_proxy:
        """Allows you to enumerate through the collection."""
        return self._intf.get_property(IAgVAGridSearchControlCollection._metadata, IAgVAGridSearchControlCollection._get__NewEnum_metadata)

    _get_Count_metadata = { "name" : "Count",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.LONG_arg,) }
    @property
    def Count(self) -> int:
        """Returns the size of the collection."""
        return self._intf.get_property(IAgVAGridSearchControlCollection._metadata, IAgVAGridSearchControlCollection._get_Count_metadata)

    _GetControlByPaths_metadata = { "name" : "GetControlByPaths",
            "arg_types" : (agcom.BSTR, agcom.BSTR, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.BSTR_arg, agmarshall.AgInterface_out_arg,) }
    def GetControlByPaths(self, objectPath:str, controlPath:str) -> "IAgVAGridSearchControl":
        """Returns the control specified by the object/control path."""
        return self._intf.invoke(IAgVAGridSearchControlCollection._metadata, IAgVAGridSearchControlCollection._GetControlByPaths_metadata, objectPath, controlPath, out_arg())

    __getitem__ = Item



agcls.AgClassCatalog.add_catalog_entry("{BD562D00-ABDC-411B-813D-84C1E3597CEF}", IAgVAGridSearchControlCollection)
agcls.AgTypeNameMap["IAgVAGridSearchControlCollection"] = IAgVAGridSearchControlCollection

class IAgVAGridSearchControl(object):
    """Properties for control parameters of a Grid Search profile."""
    _num_methods = 15
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{7E71EB52-998F-49E7-80BA-1B11574D59DF}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_Enable" : 1,
                             "set_Enable" : 2,
                             "get_Name" : 3,
                             "get_ParentName" : 4,
                             "get_CurrentValue" : 5,
                             "get_LowerBound" : 6,
                             "set_LowerBound" : 7,
                             "get_UpperBound" : 8,
                             "set_UpperBound" : 9,
                             "get_UseCustomDisplayUnit" : 10,
                             "set_UseCustomDisplayUnit" : 11,
                             "get_CustomDisplayUnit" : 12,
                             "set_CustomDisplayUnit" : 13,
                             "get_Step" : 14,
                             "set_Step" : 15, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAGridSearchControl._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAGridSearchControl from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAGridSearchControl.__dict__ and type(IAgVAGridSearchControl.__dict__[attrname]) == property:
            return IAgVAGridSearchControl.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAGridSearchControl.")
    
    _get_Enable_metadata = { "name" : "Enable",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def Enable(self) -> bool:
        """If true, the variable is being used."""
        return self._intf.get_property(IAgVAGridSearchControl._metadata, IAgVAGridSearchControl._get_Enable_metadata)

    _set_Enable_metadata = { "name" : "Enable",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @Enable.setter
    def Enable(self, newVal:bool) -> None:
        return self._intf.set_property(IAgVAGridSearchControl._metadata, IAgVAGridSearchControl._set_Enable_metadata, newVal)

    _get_Name_metadata = { "name" : "Name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def Name(self) -> str:
        """The name of the parameter."""
        return self._intf.get_property(IAgVAGridSearchControl._metadata, IAgVAGridSearchControl._get_Name_metadata)

    _get_ParentName_metadata = { "name" : "ParentName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def ParentName(self) -> str:
        """The name of the segment to which the parameter belongs."""
        return self._intf.get_property(IAgVAGridSearchControl._metadata, IAgVAGridSearchControl._get_ParentName_metadata)

    _get_CurrentValue_metadata = { "name" : "CurrentValue",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def CurrentValue(self) -> typing.Any:
        """The value of the independent variable after the last targeter run."""
        return self._intf.get_property(IAgVAGridSearchControl._metadata, IAgVAGridSearchControl._get_CurrentValue_metadata)

    _get_LowerBound_metadata = { "name" : "LowerBound",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def LowerBound(self) -> typing.Any:
        """Dimension depends on context."""
        return self._intf.get_property(IAgVAGridSearchControl._metadata, IAgVAGridSearchControl._get_LowerBound_metadata)

    _set_LowerBound_metadata = { "name" : "LowerBound",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @LowerBound.setter
    def LowerBound(self, newVal:typing.Any) -> None:
        return self._intf.set_property(IAgVAGridSearchControl._metadata, IAgVAGridSearchControl._set_LowerBound_metadata, newVal)

    _get_UpperBound_metadata = { "name" : "UpperBound",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def UpperBound(self) -> typing.Any:
        """Dimension depends on context."""
        return self._intf.get_property(IAgVAGridSearchControl._metadata, IAgVAGridSearchControl._get_UpperBound_metadata)

    _set_UpperBound_metadata = { "name" : "UpperBound",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @UpperBound.setter
    def UpperBound(self, newVal:typing.Any) -> None:
        return self._intf.set_property(IAgVAGridSearchControl._metadata, IAgVAGridSearchControl._set_UpperBound_metadata, newVal)

    _get_UseCustomDisplayUnit_metadata = { "name" : "UseCustomDisplayUnit",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def UseCustomDisplayUnit(self) -> bool:
        """If true, allows display of values in another unit."""
        return self._intf.get_property(IAgVAGridSearchControl._metadata, IAgVAGridSearchControl._get_UseCustomDisplayUnit_metadata)

    _set_UseCustomDisplayUnit_metadata = { "name" : "UseCustomDisplayUnit",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @UseCustomDisplayUnit.setter
    def UseCustomDisplayUnit(self, newVal:bool) -> None:
        return self._intf.set_property(IAgVAGridSearchControl._metadata, IAgVAGridSearchControl._set_UseCustomDisplayUnit_metadata, newVal)

    _get_CustomDisplayUnit_metadata = { "name" : "CustomDisplayUnit",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def CustomDisplayUnit(self) -> str:
        """The unit in which the value will be displayed in the GUI."""
        return self._intf.get_property(IAgVAGridSearchControl._metadata, IAgVAGridSearchControl._get_CustomDisplayUnit_metadata)

    _set_CustomDisplayUnit_metadata = { "name" : "CustomDisplayUnit",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @CustomDisplayUnit.setter
    def CustomDisplayUnit(self, newVal:str) -> None:
        return self._intf.set_property(IAgVAGridSearchControl._metadata, IAgVAGridSearchControl._set_CustomDisplayUnit_metadata, newVal)

    _get_Step_metadata = { "name" : "Step",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def Step(self) -> typing.Any:
        """Specifies the step size to use when evaluating the grid search. Dimension depends on context."""
        return self._intf.get_property(IAgVAGridSearchControl._metadata, IAgVAGridSearchControl._get_Step_metadata)

    _set_Step_metadata = { "name" : "Step",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @Step.setter
    def Step(self, newVal:typing.Any) -> None:
        return self._intf.set_property(IAgVAGridSearchControl._metadata, IAgVAGridSearchControl._set_Step_metadata, newVal)


agcls.AgClassCatalog.add_catalog_entry("{7E71EB52-998F-49E7-80BA-1B11574D59DF}", IAgVAGridSearchControl)
agcls.AgTypeNameMap["IAgVAGridSearchControl"] = IAgVAGridSearchControl

class IAgVAGridSearchResultCollection(object):
    """Properties for the list of Grid Search result parameters."""
    _num_methods = 4
    _vtable_offset = IDispatch._vtable_offset + IDispatch._num_methods
    _metadata = {
        "uuid" : "{BCA009A8-29CD-420A-955E-DC95A251CD9E}",
        "vtable_reference" : IDispatch._vtable_offset + IDispatch._num_methods - 1,
        "method_offsets" : { "Item" : 1,
                             "get__NewEnum" : 2,
                             "get_Count" : 3,
                             "GetResultByPaths" : 4, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAGridSearchResultCollection._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAGridSearchResultCollection from source object.")
        self.__dict__["_enumerator"] = None
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAGridSearchResultCollection.__dict__ and type(IAgVAGridSearchResultCollection.__dict__[attrname]) == property:
            return IAgVAGridSearchResultCollection.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAGridSearchResultCollection.")
    def __iter__(self):
        self.__dict__["_enumerator"] = self._NewEnum
        self._enumerator.reset()
        return self
    def __next__(self) -> "IAgVAGridSearchResult":
        if self._enumerator is None:
            raise StopIteration
        nextval = self._enumerator.next()
        if nextval is None:
            raise StopIteration
        return nextval
    
    _Item_metadata = { "name" : "Item",
            "arg_types" : (agcom.LONG, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.LONG_arg, agmarshall.AgInterface_out_arg,) }
    def Item(self, index:int) -> "IAgVAGridSearchResult":
        """Allows you to iterate through the collection."""
        return self._intf.invoke(IAgVAGridSearchResultCollection._metadata, IAgVAGridSearchResultCollection._Item_metadata, index, out_arg())

    _get__NewEnum_metadata = { "name" : "_NewEnum",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.IEnumVARIANT_arg,) }
    @property
    def _NewEnum(self) -> enumerator_proxy:
        """Allows you to enumerate through the collection."""
        return self._intf.get_property(IAgVAGridSearchResultCollection._metadata, IAgVAGridSearchResultCollection._get__NewEnum_metadata)

    _get_Count_metadata = { "name" : "Count",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.LONG_arg,) }
    @property
    def Count(self) -> int:
        """Returns the size of the collection."""
        return self._intf.get_property(IAgVAGridSearchResultCollection._metadata, IAgVAGridSearchResultCollection._get_Count_metadata)

    _GetResultByPaths_metadata = { "name" : "GetResultByPaths",
            "arg_types" : (agcom.BSTR, agcom.BSTR, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.BSTR_arg, agmarshall.AgInterface_out_arg,) }
    def GetResultByPaths(self, objectPath:str, resultPath:str) -> "IAgVAGridSearchResult":
        """Returns the result specified by the object/result path."""
        return self._intf.invoke(IAgVAGridSearchResultCollection._metadata, IAgVAGridSearchResultCollection._GetResultByPaths_metadata, objectPath, resultPath, out_arg())

    __getitem__ = Item



agcls.AgClassCatalog.add_catalog_entry("{BCA009A8-29CD-420A-955E-DC95A251CD9E}", IAgVAGridSearchResultCollection)
agcls.AgTypeNameMap["IAgVAGridSearchResultCollection"] = IAgVAGridSearchResultCollection

class IAgVAGridSearchResult(object):
    """Properties for result parameters of a Grid Search profile."""
    _num_methods = 11
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{36F26633-D0C4-4692-A6D2-4D98451AB3A7}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_Enable" : 1,
                             "set_Enable" : 2,
                             "get_Name" : 3,
                             "get_ParentName" : 4,
                             "get_CurrentValue" : 5,
                             "get_DesiredOperation" : 6,
                             "set_DesiredOperation" : 7,
                             "get_UseCustomDisplayUnit" : 8,
                             "set_UseCustomDisplayUnit" : 9,
                             "get_CustomDisplayUnit" : 10,
                             "set_CustomDisplayUnit" : 11, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAGridSearchResult._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAGridSearchResult from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAGridSearchResult.__dict__ and type(IAgVAGridSearchResult.__dict__[attrname]) == property:
            return IAgVAGridSearchResult.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAGridSearchResult.")
    
    _get_Enable_metadata = { "name" : "Enable",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def Enable(self) -> bool:
        """If true, the variable is being used."""
        return self._intf.get_property(IAgVAGridSearchResult._metadata, IAgVAGridSearchResult._get_Enable_metadata)

    _set_Enable_metadata = { "name" : "Enable",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @Enable.setter
    def Enable(self, newVal:bool) -> None:
        return self._intf.set_property(IAgVAGridSearchResult._metadata, IAgVAGridSearchResult._set_Enable_metadata, newVal)

    _get_Name_metadata = { "name" : "Name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def Name(self) -> str:
        """The name of the parameter."""
        return self._intf.get_property(IAgVAGridSearchResult._metadata, IAgVAGridSearchResult._get_Name_metadata)

    _get_ParentName_metadata = { "name" : "ParentName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def ParentName(self) -> str:
        """The name of the segment to which the parameter belongs."""
        return self._intf.get_property(IAgVAGridSearchResult._metadata, IAgVAGridSearchResult._get_ParentName_metadata)

    _get_CurrentValue_metadata = { "name" : "CurrentValue",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def CurrentValue(self) -> typing.Any:
        """The value of the independent variable after the last targeter run."""
        return self._intf.get_property(IAgVAGridSearchResult._metadata, IAgVAGridSearchResult._get_CurrentValue_metadata)

    _get_DesiredOperation_metadata = { "name" : "DesiredOperation",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAGridSearchDesiredOperation),) }
    @property
    def DesiredOperation(self) -> "AgEVAGridSearchDesiredOperation":
        """The Desired Operation/Objective of grid search."""
        return self._intf.get_property(IAgVAGridSearchResult._metadata, IAgVAGridSearchResult._get_DesiredOperation_metadata)

    _set_DesiredOperation_metadata = { "name" : "DesiredOperation",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAGridSearchDesiredOperation),) }
    @DesiredOperation.setter
    def DesiredOperation(self, inVal:"AgEVAGridSearchDesiredOperation") -> None:
        return self._intf.set_property(IAgVAGridSearchResult._metadata, IAgVAGridSearchResult._set_DesiredOperation_metadata, inVal)

    _get_UseCustomDisplayUnit_metadata = { "name" : "UseCustomDisplayUnit",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def UseCustomDisplayUnit(self) -> bool:
        """If true, allows display of values in another unit."""
        return self._intf.get_property(IAgVAGridSearchResult._metadata, IAgVAGridSearchResult._get_UseCustomDisplayUnit_metadata)

    _set_UseCustomDisplayUnit_metadata = { "name" : "UseCustomDisplayUnit",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @UseCustomDisplayUnit.setter
    def UseCustomDisplayUnit(self, newVal:bool) -> None:
        return self._intf.set_property(IAgVAGridSearchResult._metadata, IAgVAGridSearchResult._set_UseCustomDisplayUnit_metadata, newVal)

    _get_CustomDisplayUnit_metadata = { "name" : "CustomDisplayUnit",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def CustomDisplayUnit(self) -> str:
        """The unit in which the value will be displayed in the GUI."""
        return self._intf.get_property(IAgVAGridSearchResult._metadata, IAgVAGridSearchResult._get_CustomDisplayUnit_metadata)

    _set_CustomDisplayUnit_metadata = { "name" : "CustomDisplayUnit",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @CustomDisplayUnit.setter
    def CustomDisplayUnit(self, newVal:str) -> None:
        return self._intf.set_property(IAgVAGridSearchResult._metadata, IAgVAGridSearchResult._set_CustomDisplayUnit_metadata, newVal)


agcls.AgClassCatalog.add_catalog_entry("{36F26633-D0C4-4692-A6D2-4D98451AB3A7}", IAgVAGridSearchResult)
agcls.AgTypeNameMap["IAgVAGridSearchResult"] = IAgVAGridSearchResult

class IAgVABisectionControlCollection(object):
    """Properties for the list of Bisection control parameters."""
    _num_methods = 4
    _vtable_offset = IDispatch._vtable_offset + IDispatch._num_methods
    _metadata = {
        "uuid" : "{C6D33DA0-04F8-4655-88F9-6A3E70E0DFCB}",
        "vtable_reference" : IDispatch._vtable_offset + IDispatch._num_methods - 1,
        "method_offsets" : { "Item" : 1,
                             "get__NewEnum" : 2,
                             "get_Count" : 3,
                             "GetControlByPaths" : 4, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVABisectionControlCollection._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVABisectionControlCollection from source object.")
        self.__dict__["_enumerator"] = None
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVABisectionControlCollection.__dict__ and type(IAgVABisectionControlCollection.__dict__[attrname]) == property:
            return IAgVABisectionControlCollection.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVABisectionControlCollection.")
    def __iter__(self):
        self.__dict__["_enumerator"] = self._NewEnum
        self._enumerator.reset()
        return self
    def __next__(self) -> "IAgVABisectionControl":
        if self._enumerator is None:
            raise StopIteration
        nextval = self._enumerator.next()
        if nextval is None:
            raise StopIteration
        return nextval
    
    _Item_metadata = { "name" : "Item",
            "arg_types" : (agcom.LONG, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.LONG_arg, agmarshall.AgInterface_out_arg,) }
    def Item(self, index:int) -> "IAgVABisectionControl":
        """Allows you to iterate through the collection."""
        return self._intf.invoke(IAgVABisectionControlCollection._metadata, IAgVABisectionControlCollection._Item_metadata, index, out_arg())

    _get__NewEnum_metadata = { "name" : "_NewEnum",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.IEnumVARIANT_arg,) }
    @property
    def _NewEnum(self) -> enumerator_proxy:
        """Allows you to enumerate through the collection."""
        return self._intf.get_property(IAgVABisectionControlCollection._metadata, IAgVABisectionControlCollection._get__NewEnum_metadata)

    _get_Count_metadata = { "name" : "Count",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.LONG_arg,) }
    @property
    def Count(self) -> int:
        """Returns the size of the collection."""
        return self._intf.get_property(IAgVABisectionControlCollection._metadata, IAgVABisectionControlCollection._get_Count_metadata)

    _GetControlByPaths_metadata = { "name" : "GetControlByPaths",
            "arg_types" : (agcom.BSTR, agcom.BSTR, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.BSTR_arg, agmarshall.AgInterface_out_arg,) }
    def GetControlByPaths(self, objectPath:str, controlPath:str) -> "IAgVABisectionControl":
        """Returns the control specified by the object/control path."""
        return self._intf.invoke(IAgVABisectionControlCollection._metadata, IAgVABisectionControlCollection._GetControlByPaths_metadata, objectPath, controlPath, out_arg())

    __getitem__ = Item



agcls.AgClassCatalog.add_catalog_entry("{C6D33DA0-04F8-4655-88F9-6A3E70E0DFCB}", IAgVABisectionControlCollection)
agcls.AgTypeNameMap["IAgVABisectionControlCollection"] = IAgVABisectionControlCollection

class IAgVABisectionResult(object):
    """Properties for result parameters of a Bisection profile."""
    _num_methods = 13
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{750F4B13-2B5E-456E-9969-76D5B82356C8}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_Enable" : 1,
                             "set_Enable" : 2,
                             "get_Name" : 3,
                             "get_ParentName" : 4,
                             "get_CurrentValue" : 5,
                             "get_DesiredValue" : 6,
                             "set_DesiredValue" : 7,
                             "get_Tolerance" : 8,
                             "set_Tolerance" : 9,
                             "get_UseCustomDisplayUnit" : 10,
                             "set_UseCustomDisplayUnit" : 11,
                             "get_CustomDisplayUnit" : 12,
                             "set_CustomDisplayUnit" : 13, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVABisectionResult._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVABisectionResult from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVABisectionResult.__dict__ and type(IAgVABisectionResult.__dict__[attrname]) == property:
            return IAgVABisectionResult.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVABisectionResult.")
    
    _get_Enable_metadata = { "name" : "Enable",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def Enable(self) -> bool:
        """If true, the variable is being used."""
        return self._intf.get_property(IAgVABisectionResult._metadata, IAgVABisectionResult._get_Enable_metadata)

    _set_Enable_metadata = { "name" : "Enable",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @Enable.setter
    def Enable(self, newVal:bool) -> None:
        return self._intf.set_property(IAgVABisectionResult._metadata, IAgVABisectionResult._set_Enable_metadata, newVal)

    _get_Name_metadata = { "name" : "Name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def Name(self) -> str:
        """The name of the parameter."""
        return self._intf.get_property(IAgVABisectionResult._metadata, IAgVABisectionResult._get_Name_metadata)

    _get_ParentName_metadata = { "name" : "ParentName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def ParentName(self) -> str:
        """The name of the segment to which the parameter belongs."""
        return self._intf.get_property(IAgVABisectionResult._metadata, IAgVABisectionResult._get_ParentName_metadata)

    _get_CurrentValue_metadata = { "name" : "CurrentValue",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def CurrentValue(self) -> typing.Any:
        """The value of the independent variable after the last targeter run."""
        return self._intf.get_property(IAgVABisectionResult._metadata, IAgVABisectionResult._get_CurrentValue_metadata)

    _get_DesiredValue_metadata = { "name" : "DesiredValue",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def DesiredValue(self) -> typing.Any:
        """The value that you want to achieve."""
        return self._intf.get_property(IAgVABisectionResult._metadata, IAgVABisectionResult._get_DesiredValue_metadata)

    _set_DesiredValue_metadata = { "name" : "DesiredValue",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @DesiredValue.setter
    def DesiredValue(self, newVal:typing.Any) -> None:
        return self._intf.set_property(IAgVABisectionResult._metadata, IAgVABisectionResult._set_DesiredValue_metadata, newVal)

    _get_Tolerance_metadata = { "name" : "Tolerance",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def Tolerance(self) -> typing.Any:
        """The profile will stop when it achieves a value within this range of the Desired Value."""
        return self._intf.get_property(IAgVABisectionResult._metadata, IAgVABisectionResult._get_Tolerance_metadata)

    _set_Tolerance_metadata = { "name" : "Tolerance",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @Tolerance.setter
    def Tolerance(self, newVal:typing.Any) -> None:
        return self._intf.set_property(IAgVABisectionResult._metadata, IAgVABisectionResult._set_Tolerance_metadata, newVal)

    _get_UseCustomDisplayUnit_metadata = { "name" : "UseCustomDisplayUnit",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def UseCustomDisplayUnit(self) -> bool:
        """If true, allows display of values in another unit."""
        return self._intf.get_property(IAgVABisectionResult._metadata, IAgVABisectionResult._get_UseCustomDisplayUnit_metadata)

    _set_UseCustomDisplayUnit_metadata = { "name" : "UseCustomDisplayUnit",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @UseCustomDisplayUnit.setter
    def UseCustomDisplayUnit(self, newVal:bool) -> None:
        return self._intf.set_property(IAgVABisectionResult._metadata, IAgVABisectionResult._set_UseCustomDisplayUnit_metadata, newVal)

    _get_CustomDisplayUnit_metadata = { "name" : "CustomDisplayUnit",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def CustomDisplayUnit(self) -> str:
        """The unit in which the value will be displayed in the GUI."""
        return self._intf.get_property(IAgVABisectionResult._metadata, IAgVABisectionResult._get_CustomDisplayUnit_metadata)

    _set_CustomDisplayUnit_metadata = { "name" : "CustomDisplayUnit",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @CustomDisplayUnit.setter
    def CustomDisplayUnit(self, newVal:str) -> None:
        return self._intf.set_property(IAgVABisectionResult._metadata, IAgVABisectionResult._set_CustomDisplayUnit_metadata, newVal)


agcls.AgClassCatalog.add_catalog_entry("{750F4B13-2B5E-456E-9969-76D5B82356C8}", IAgVABisectionResult)
agcls.AgTypeNameMap["IAgVABisectionResult"] = IAgVABisectionResult

class IAgVABisectionResultCollection(object):
    """Bisection result collection."""
    _num_methods = 4
    _vtable_offset = IDispatch._vtable_offset + IDispatch._num_methods
    _metadata = {
        "uuid" : "{6D0F0277-92F2-4931-A497-EF39C81C72B5}",
        "vtable_reference" : IDispatch._vtable_offset + IDispatch._num_methods - 1,
        "method_offsets" : { "Item" : 1,
                             "get__NewEnum" : 2,
                             "get_Count" : 3,
                             "GetResultByPaths" : 4, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVABisectionResultCollection._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVABisectionResultCollection from source object.")
        self.__dict__["_enumerator"] = None
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVABisectionResultCollection.__dict__ and type(IAgVABisectionResultCollection.__dict__[attrname]) == property:
            return IAgVABisectionResultCollection.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVABisectionResultCollection.")
    def __iter__(self):
        self.__dict__["_enumerator"] = self._NewEnum
        self._enumerator.reset()
        return self
    def __next__(self) -> "IAgVABisectionResult":
        if self._enumerator is None:
            raise StopIteration
        nextval = self._enumerator.next()
        if nextval is None:
            raise StopIteration
        return nextval
    
    _Item_metadata = { "name" : "Item",
            "arg_types" : (agcom.LONG, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.LONG_arg, agmarshall.AgInterface_out_arg,) }
    def Item(self, index:int) -> "IAgVABisectionResult":
        """Allows you to iterate through the collection."""
        return self._intf.invoke(IAgVABisectionResultCollection._metadata, IAgVABisectionResultCollection._Item_metadata, index, out_arg())

    _get__NewEnum_metadata = { "name" : "_NewEnum",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.IEnumVARIANT_arg,) }
    @property
    def _NewEnum(self) -> enumerator_proxy:
        """Allows you to enumerate through the collection."""
        return self._intf.get_property(IAgVABisectionResultCollection._metadata, IAgVABisectionResultCollection._get__NewEnum_metadata)

    _get_Count_metadata = { "name" : "Count",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.LONG_arg,) }
    @property
    def Count(self) -> int:
        """Returns the size of the collection."""
        return self._intf.get_property(IAgVABisectionResultCollection._metadata, IAgVABisectionResultCollection._get_Count_metadata)

    _GetResultByPaths_metadata = { "name" : "GetResultByPaths",
            "arg_types" : (agcom.BSTR, agcom.BSTR, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.BSTR_arg, agmarshall.AgInterface_out_arg,) }
    def GetResultByPaths(self, objectPath:str, resultPath:str) -> "IAgVABisectionResult":
        """Returns the result specified by the object/result names."""
        return self._intf.invoke(IAgVABisectionResultCollection._metadata, IAgVABisectionResultCollection._GetResultByPaths_metadata, objectPath, resultPath, out_arg())

    __getitem__ = Item



agcls.AgClassCatalog.add_catalog_entry("{6D0F0277-92F2-4931-A497-EF39C81C72B5}", IAgVABisectionResultCollection)
agcls.AgTypeNameMap["IAgVABisectionResultCollection"] = IAgVABisectionResultCollection

class IAgVAStoppingConditionElement(object):
    """The status of a stopping condition."""
    _num_methods = 7
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{7508042C-1986-42AB-9B83-DE0AAA5626A0}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_Active" : 1,
                             "set_Active" : 2,
                             "EnableControlParameter" : 3,
                             "DisableControlParameter" : 4,
                             "IsControlParameterEnabled" : 5,
                             "get_ControlParametersAvailable" : 6,
                             "get_Properties" : 7, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAStoppingConditionElement._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStoppingConditionElement from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStoppingConditionElement.__dict__ and type(IAgVAStoppingConditionElement.__dict__[attrname]) == property:
            return IAgVAStoppingConditionElement.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStoppingConditionElement.")
    
    _get_Active_metadata = { "name" : "Active",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def Active(self) -> bool:
        """If true, the stopping condition is active."""
        return self._intf.get_property(IAgVAStoppingConditionElement._metadata, IAgVAStoppingConditionElement._get_Active_metadata)

    _set_Active_metadata = { "name" : "Active",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @Active.setter
    def Active(self, newVal:bool) -> None:
        return self._intf.set_property(IAgVAStoppingConditionElement._metadata, IAgVAStoppingConditionElement._set_Active_metadata, newVal)

    _EnableControlParameter_metadata = { "name" : "EnableControlParameter",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAControlStoppingCondition),) }
    def EnableControlParameter(self, param:"AgEVAControlStoppingCondition") -> None:
        """Enables or disables the specified control parameter"""
        return self._intf.invoke(IAgVAStoppingConditionElement._metadata, IAgVAStoppingConditionElement._EnableControlParameter_metadata, param)

    _DisableControlParameter_metadata = { "name" : "DisableControlParameter",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAControlStoppingCondition),) }
    def DisableControlParameter(self, param:"AgEVAControlStoppingCondition") -> None:
        """Disables the specified control parameter"""
        return self._intf.invoke(IAgVAStoppingConditionElement._metadata, IAgVAStoppingConditionElement._DisableControlParameter_metadata, param)

    _IsControlParameterEnabled_metadata = { "name" : "IsControlParameterEnabled",
            "arg_types" : (agcom.LONG, POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAControlStoppingCondition), agmarshall.VARIANT_BOOL_arg,) }
    def IsControlParameterEnabled(self, param:"AgEVAControlStoppingCondition") -> bool:
        """Sees if the specified control is enabled"""
        return self._intf.invoke(IAgVAStoppingConditionElement._metadata, IAgVAStoppingConditionElement._IsControlParameterEnabled_metadata, param, out_arg())

    _get_ControlParametersAvailable_metadata = { "name" : "ControlParametersAvailable",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def ControlParametersAvailable(self) -> bool:
        """Returns whether or not the control parameters can be set."""
        return self._intf.get_property(IAgVAStoppingConditionElement._metadata, IAgVAStoppingConditionElement._get_ControlParametersAvailable_metadata)

    _get_Properties_metadata = { "name" : "Properties",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def Properties(self) -> "IAgVAStoppingConditionComponent":
        """The properties available to the stopping condition."""
        return self._intf.get_property(IAgVAStoppingConditionElement._metadata, IAgVAStoppingConditionElement._get_Properties_metadata)


agcls.AgClassCatalog.add_catalog_entry("{7508042C-1986-42AB-9B83-DE0AAA5626A0}", IAgVAStoppingConditionElement)
agcls.AgTypeNameMap["IAgVAStoppingConditionElement"] = IAgVAStoppingConditionElement

class IAgVAStoppingConditionCollection(object):
    """The list of Stopping Conditions."""
    _num_methods = 10
    _vtable_offset = IDispatch._vtable_offset + IDispatch._num_methods
    _metadata = {
        "uuid" : "{47FEE61C-D8B9-4E24-8417-6A9D1DF966A9}",
        "vtable_reference" : IDispatch._vtable_offset + IDispatch._num_methods - 1,
        "method_offsets" : { "Item" : 1,
                             "Add" : 2,
                             "Remove" : 3,
                             "get__NewEnum" : 4,
                             "get_Count" : 5,
                             "Cut" : 6,
                             "Paste" : 7,
                             "InsertCopy" : 8,
                             "GetItemByIndex" : 9,
                             "GetItemByName" : 10, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAStoppingConditionCollection._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStoppingConditionCollection from source object.")
        self.__dict__["_enumerator"] = None
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStoppingConditionCollection.__dict__ and type(IAgVAStoppingConditionCollection.__dict__[attrname]) == property:
            return IAgVAStoppingConditionCollection.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStoppingConditionCollection.")
    def __iter__(self):
        self.__dict__["_enumerator"] = self._NewEnum
        self._enumerator.reset()
        return self
    def __next__(self) -> "IAgVAStoppingConditionElement":
        if self._enumerator is None:
            raise StopIteration
        nextval = self._enumerator.next()
        if nextval is None:
            raise StopIteration
        return nextval
    
    _Item_metadata = { "name" : "Item",
            "arg_types" : (agcom.VARIANT, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.VARIANT_arg, agmarshall.AgInterface_out_arg,) }
    def Item(self, indexOrName:typing.Any) -> "IAgVAStoppingConditionElement":
        """Allows you to iterate through the collection."""
        return self._intf.invoke(IAgVAStoppingConditionCollection._metadata, IAgVAStoppingConditionCollection._Item_metadata, indexOrName, out_arg())

    _Add_metadata = { "name" : "Add",
            "arg_types" : (agcom.BSTR, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.AgInterface_out_arg,) }
    def Add(self, conditionName:str) -> "IAgVAStoppingConditionElement":
        """Adds a stopping condition."""
        return self._intf.invoke(IAgVAStoppingConditionCollection._metadata, IAgVAStoppingConditionCollection._Add_metadata, conditionName, out_arg())

    _Remove_metadata = { "name" : "Remove",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    def Remove(self, indexOrName:typing.Any) -> None:
        """Removes a stopping condition."""
        return self._intf.invoke(IAgVAStoppingConditionCollection._metadata, IAgVAStoppingConditionCollection._Remove_metadata, indexOrName)

    _get__NewEnum_metadata = { "name" : "_NewEnum",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.IEnumVARIANT_arg,) }
    @property
    def _NewEnum(self) -> enumerator_proxy:
        """Allows you to enumerate through the collection."""
        return self._intf.get_property(IAgVAStoppingConditionCollection._metadata, IAgVAStoppingConditionCollection._get__NewEnum_metadata)

    _get_Count_metadata = { "name" : "Count",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.LONG_arg,) }
    @property
    def Count(self) -> int:
        """Returns the size of the collection."""
        return self._intf.get_property(IAgVAStoppingConditionCollection._metadata, IAgVAStoppingConditionCollection._get_Count_metadata)

    _Cut_metadata = { "name" : "Cut",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    def Cut(self, indexOrName:typing.Any) -> None:
        """Copies the stopping condition into the clipboard and removes the stopping condition from the list."""
        return self._intf.invoke(IAgVAStoppingConditionCollection._metadata, IAgVAStoppingConditionCollection._Cut_metadata, indexOrName)

    _Paste_metadata = { "name" : "Paste",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    def Paste(self) -> "IAgVAStoppingConditionElement":
        """Pastes the stopping condition from the clipboard and inserts into the list."""
        return self._intf.invoke(IAgVAStoppingConditionCollection._metadata, IAgVAStoppingConditionCollection._Paste_metadata, out_arg())

    _InsertCopy_metadata = { "name" : "InsertCopy",
            "arg_types" : (agcom.PVOID, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_in_arg("IAgVAStoppingConditionElement"), agmarshall.AgInterface_out_arg,) }
    def InsertCopy(self, stopCond:"IAgVAStoppingConditionElement") -> "IAgVAStoppingConditionElement":
        """Copies the stopping condition and inserts the copy into the list."""
        return self._intf.invoke(IAgVAStoppingConditionCollection._metadata, IAgVAStoppingConditionCollection._InsertCopy_metadata, stopCond, out_arg())

    _GetItemByIndex_metadata = { "name" : "GetItemByIndex",
            "arg_types" : (agcom.INT, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.INT_arg, agmarshall.AgInterface_out_arg,) }
    def GetItemByIndex(self, index:int) -> "IAgVAStoppingConditionElement":
        """Retrieves a stopping condition in the collection by index."""
        return self._intf.invoke(IAgVAStoppingConditionCollection._metadata, IAgVAStoppingConditionCollection._GetItemByIndex_metadata, index, out_arg())

    _GetItemByName_metadata = { "name" : "GetItemByName",
            "arg_types" : (agcom.BSTR, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.AgInterface_out_arg,) }
    def GetItemByName(self, name:str) -> "IAgVAStoppingConditionElement":
        """Retrieves a stopping condition in the collection by name."""
        return self._intf.invoke(IAgVAStoppingConditionCollection._metadata, IAgVAStoppingConditionCollection._GetItemByName_metadata, name, out_arg())

    __getitem__ = Item



agcls.AgClassCatalog.add_catalog_entry("{47FEE61C-D8B9-4E24-8417-6A9D1DF966A9}", IAgVAStoppingConditionCollection)
agcls.AgTypeNameMap["IAgVAStoppingConditionCollection"] = IAgVAStoppingConditionCollection

class IAgVAMCSSegmentCollection(object):
    """Properties for a collection of segments."""
    _num_methods = 13
    _vtable_offset = IDispatch._vtable_offset + IDispatch._num_methods
    _metadata = {
        "uuid" : "{550AD0AB-FAB1-4632-895D-774CA07B120E}",
        "vtable_reference" : IDispatch._vtable_offset + IDispatch._num_methods - 1,
        "method_offsets" : { "Item" : 1,
                             "Insert" : 2,
                             "Remove" : 3,
                             "RemoveAll" : 4,
                             "get__NewEnum" : 5,
                             "get_Count" : 6,
                             "Cut" : 7,
                             "Paste" : 8,
                             "InsertCopy" : 9,
                             "InsertByName" : 10,
                             "get_ProvideRuntimeTypeInfo" : 11,
                             "GetItemByIndex" : 12,
                             "GetItemByName" : 13, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAMCSSegmentCollection._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAMCSSegmentCollection from source object.")
        self.__dict__["_enumerator"] = None
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAMCSSegmentCollection.__dict__ and type(IAgVAMCSSegmentCollection.__dict__[attrname]) == property:
            return IAgVAMCSSegmentCollection.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAMCSSegmentCollection.")
    def __iter__(self):
        self.__dict__["_enumerator"] = self._NewEnum
        self._enumerator.reset()
        return self
    def __next__(self) -> "IAgVAMCSSegment":
        if self._enumerator is None:
            raise StopIteration
        nextval = self._enumerator.next()
        if nextval is None:
            raise StopIteration
        return nextval
    
    _Item_metadata = { "name" : "Item",
            "arg_types" : (agcom.VARIANT, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.VARIANT_arg, agmarshall.AgInterface_out_arg,) }
    def Item(self, indexOrName:typing.Any) -> "IAgVAMCSSegment":
        """Returns the specified segment(using segment name or index number)."""
        return self._intf.invoke(IAgVAMCSSegmentCollection._metadata, IAgVAMCSSegmentCollection._Item_metadata, indexOrName, out_arg())

    _Insert_metadata = { "name" : "Insert",
            "arg_types" : (agcom.LONG, agcom.BSTR, agcom.BSTR, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVASegmentType), agmarshall.BSTR_arg, agmarshall.BSTR_arg, agmarshall.AgInterface_out_arg,) }
    def Insert(self, segmentType:"AgEVASegmentType", segmentName:str, segmentToInsertBefore:str) -> "IAgVAMCSSegment":
        """Adds a segment to the segment collection."""
        return self._intf.invoke(IAgVAMCSSegmentCollection._metadata, IAgVAMCSSegmentCollection._Insert_metadata, segmentType, segmentName, segmentToInsertBefore, out_arg())

    _Remove_metadata = { "name" : "Remove",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    def Remove(self, segmentNameToRemove:str) -> None:
        """Removes a segment; the End segment cannot be deleted."""
        return self._intf.invoke(IAgVAMCSSegmentCollection._metadata, IAgVAMCSSegmentCollection._Remove_metadata, segmentNameToRemove)

    _RemoveAll_metadata = { "name" : "RemoveAll",
            "arg_types" : (),
            "marshallers" : () }
    def RemoveAll(self) -> None:
        """Removes all segments; the End segment cannot be deleted."""
        return self._intf.invoke(IAgVAMCSSegmentCollection._metadata, IAgVAMCSSegmentCollection._RemoveAll_metadata, )

    _get__NewEnum_metadata = { "name" : "_NewEnum",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.IEnumVARIANT_arg,) }
    @property
    def _NewEnum(self) -> enumerator_proxy:
        """Allows you to enumerate through the collection."""
        return self._intf.get_property(IAgVAMCSSegmentCollection._metadata, IAgVAMCSSegmentCollection._get__NewEnum_metadata)

    _get_Count_metadata = { "name" : "Count",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.LONG_arg,) }
    @property
    def Count(self) -> int:
        """Returns the size of the collection."""
        return self._intf.get_property(IAgVAMCSSegmentCollection._metadata, IAgVAMCSSegmentCollection._get_Count_metadata)

    _Cut_metadata = { "name" : "Cut",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    def Cut(self, segmentNameToCut:str) -> None:
        """Copies the segment into the clipboard and removes the segment from the sequence."""
        return self._intf.invoke(IAgVAMCSSegmentCollection._metadata, IAgVAMCSSegmentCollection._Cut_metadata, segmentNameToCut)

    _Paste_metadata = { "name" : "Paste",
            "arg_types" : (agcom.BSTR, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.AgInterface_out_arg,) }
    def Paste(self, segmentToPasteBefore:str) -> "IAgVAMCSSegment":
        """Pastes the segment from the clipboard and inserts in before the given segment name."""
        return self._intf.invoke(IAgVAMCSSegmentCollection._metadata, IAgVAMCSSegmentCollection._Paste_metadata, segmentToPasteBefore, out_arg())

    _InsertCopy_metadata = { "name" : "InsertCopy",
            "arg_types" : (agcom.PVOID, agcom.BSTR, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_in_arg("IAgVAMCSSegment"), agmarshall.BSTR_arg, agmarshall.AgInterface_out_arg,) }
    def InsertCopy(self, segment:"IAgVAMCSSegment", segmentToInsertBefore:str) -> "IAgVAMCSSegment":
        """Copies the segment pointer and inserts the copy before the given segment name."""
        return self._intf.invoke(IAgVAMCSSegmentCollection._metadata, IAgVAMCSSegmentCollection._InsertCopy_metadata, segment, segmentToInsertBefore, out_arg())

    _InsertByName_metadata = { "name" : "InsertByName",
            "arg_types" : (agcom.BSTR, agcom.BSTR, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.BSTR_arg, agmarshall.AgInterface_out_arg,) }
    def InsertByName(self, segmentName:str, segmentToInsertBefore:str) -> "IAgVAMCSSegment":
        """Inserts a segment by name to the segment collection."""
        return self._intf.invoke(IAgVAMCSSegmentCollection._metadata, IAgVAMCSSegmentCollection._InsertByName_metadata, segmentName, segmentToInsertBefore, out_arg())

    _get_ProvideRuntimeTypeInfo_metadata = { "name" : "ProvideRuntimeTypeInfo",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def ProvideRuntimeTypeInfo(self) -> "IAgRuntimeTypeInfo":
        """Returns the IAgRuntimeTypeInfo interface to access properties at runtime."""
        return self._intf.get_property(IAgVAMCSSegmentCollection._metadata, IAgVAMCSSegmentCollection._get_ProvideRuntimeTypeInfo_metadata)

    _GetItemByIndex_metadata = { "name" : "GetItemByIndex",
            "arg_types" : (agcom.INT, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.INT_arg, agmarshall.AgInterface_out_arg,) }
    def GetItemByIndex(self, index:int) -> "IAgVAMCSSegment":
        """Retrieves the specified segment(using segment index number)."""
        return self._intf.invoke(IAgVAMCSSegmentCollection._metadata, IAgVAMCSSegmentCollection._GetItemByIndex_metadata, index, out_arg())

    _GetItemByName_metadata = { "name" : "GetItemByName",
            "arg_types" : (agcom.BSTR, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.AgInterface_out_arg,) }
    def GetItemByName(self, name:str) -> "IAgVAMCSSegment":
        """Retrieves the specified segment(using segment name)."""
        return self._intf.invoke(IAgVAMCSSegmentCollection._metadata, IAgVAMCSSegmentCollection._GetItemByName_metadata, name, out_arg())

    __getitem__ = Item



agcls.AgClassCatalog.add_catalog_entry("{550AD0AB-FAB1-4632-895D-774CA07B120E}", IAgVAMCSSegmentCollection)
agcls.AgTypeNameMap["IAgVAMCSSegmentCollection"] = IAgVAMCSSegmentCollection

class IAgVAState(object):
    """Spacecraft Parameters properties for the spacecraft configuration."""
    _num_methods = 33
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{44DC2BBF-BC83-42AE-80A1-C1C4B399637F}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_ElementType" : 1,
                             "SetElementType" : 2,
                             "get_Element" : 3,
                             "get_Epoch" : 4,
                             "set_Epoch" : 5,
                             "get_CoordSystemName" : 6,
                             "get_DryMass" : 7,
                             "set_DryMass" : 8,
                             "get_FuelMass" : 9,
                             "set_FuelMass" : 10,
                             "get_DragArea" : 11,
                             "set_DragArea" : 12,
                             "get_SRPArea" : 13,
                             "set_SRPArea" : 14,
                             "get_TankPressure" : 15,
                             "set_TankPressure" : 16,
                             "get_TankTemperature" : 17,
                             "set_TankTemperature" : 18,
                             "get_FuelDensity" : 19,
                             "set_FuelDensity" : 20,
                             "get_Cr" : 21,
                             "set_Cr" : 22,
                             "get_Cd" : 23,
                             "set_Cd" : 24,
                             "get_RadiationPressureCoeff" : 25,
                             "set_RadiationPressureCoeff" : 26,
                             "get_RadiationPressureArea" : 27,
                             "set_RadiationPressureArea" : 28,
                             "get_K1" : 29,
                             "set_K1" : 30,
                             "get_K2" : 31,
                             "set_K2" : 32,
                             "GetInFrameName" : 33, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAState._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAState from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAState.__dict__ and type(IAgVAState.__dict__[attrname]) == property:
            return IAgVAState.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAState.")
    
    _get_ElementType_metadata = { "name" : "ElementType",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAElementType),) }
    @property
    def ElementType(self) -> "AgEVAElementType":
        """The element type."""
        return self._intf.get_property(IAgVAState._metadata, IAgVAState._get_ElementType_metadata)

    _SetElementType_metadata = { "name" : "SetElementType",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAElementType),) }
    def SetElementType(self, elementType:"AgEVAElementType") -> None:
        """Sets the element type."""
        return self._intf.invoke(IAgVAState._metadata, IAgVAState._SetElementType_metadata, elementType)

    _get_Element_metadata = { "name" : "Element",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def Element(self) -> "IAgVAElement":
        """Returns the currently selected element type."""
        return self._intf.get_property(IAgVAState._metadata, IAgVAState._get_Element_metadata)

    _get_Epoch_metadata = { "name" : "Epoch",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def Epoch(self) -> typing.Any:
        """The epoch of the Orbit State. Uses DateFormat Dimension."""
        return self._intf.get_property(IAgVAState._metadata, IAgVAState._get_Epoch_metadata)

    _set_Epoch_metadata = { "name" : "Epoch",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @Epoch.setter
    def Epoch(self, epoch:typing.Any) -> None:
        return self._intf.set_property(IAgVAState._metadata, IAgVAState._set_Epoch_metadata, epoch)

    _get_CoordSystemName_metadata = { "name" : "CoordSystemName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def CoordSystemName(self) -> str:
        """The coordinate system."""
        return self._intf.get_property(IAgVAState._metadata, IAgVAState._get_CoordSystemName_metadata)

    _get_DryMass_metadata = { "name" : "DryMass",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def DryMass(self) -> float:
        """The mass of the spacecraft exclusive of propellant. Uses Mass Dimension."""
        return self._intf.get_property(IAgVAState._metadata, IAgVAState._get_DryMass_metadata)

    _set_DryMass_metadata = { "name" : "DryMass",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @DryMass.setter
    def DryMass(self, dryMass:float) -> None:
        return self._intf.set_property(IAgVAState._metadata, IAgVAState._set_DryMass_metadata, dryMass)

    _get_FuelMass_metadata = { "name" : "FuelMass",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def FuelMass(self) -> float:
        """The mass of the spacecraft propellant. Uses Mass Dimension."""
        return self._intf.get_property(IAgVAState._metadata, IAgVAState._get_FuelMass_metadata)

    _set_FuelMass_metadata = { "name" : "FuelMass",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @FuelMass.setter
    def FuelMass(self, fuelMass:float) -> None:
        return self._intf.set_property(IAgVAState._metadata, IAgVAState._set_FuelMass_metadata, fuelMass)

    _get_DragArea_metadata = { "name" : "DragArea",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def DragArea(self) -> float:
        """The cross-sectional area of the spacecraft assumed perpendicular to the direction of motion, used for atmospheric drag calculations. Uses SmallArea Dimension."""
        return self._intf.get_property(IAgVAState._metadata, IAgVAState._get_DragArea_metadata)

    _set_DragArea_metadata = { "name" : "DragArea",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @DragArea.setter
    def DragArea(self, fuelMass:float) -> None:
        return self._intf.set_property(IAgVAState._metadata, IAgVAState._set_DragArea_metadata, fuelMass)

    _get_SRPArea_metadata = { "name" : "SRPArea",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def SRPArea(self) -> float:
        """The cross-sectional area of the spacecraft assumed perpendicular to the direction of solar radiation, used for solar radiation calculations. Uses SmallArea Dimension."""
        return self._intf.get_property(IAgVAState._metadata, IAgVAState._get_SRPArea_metadata)

    _set_SRPArea_metadata = { "name" : "SRPArea",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @SRPArea.setter
    def SRPArea(self, sRPArea:float) -> None:
        return self._intf.set_property(IAgVAState._metadata, IAgVAState._set_SRPArea_metadata, sRPArea)

    _get_TankPressure_metadata = { "name" : "TankPressure",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def TankPressure(self) -> float:
        """The fuel tank pressure. Uses Pressure Dimension."""
        return self._intf.get_property(IAgVAState._metadata, IAgVAState._get_TankPressure_metadata)

    _set_TankPressure_metadata = { "name" : "TankPressure",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @TankPressure.setter
    def TankPressure(self, tankPressure:float) -> None:
        return self._intf.set_property(IAgVAState._metadata, IAgVAState._set_TankPressure_metadata, tankPressure)

    _get_TankTemperature_metadata = { "name" : "TankTemperature",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def TankTemperature(self) -> float:
        """The temperature of the fuel tank. Uses Temperature Dimension."""
        return self._intf.get_property(IAgVAState._metadata, IAgVAState._get_TankTemperature_metadata)

    _set_TankTemperature_metadata = { "name" : "TankTemperature",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @TankTemperature.setter
    def TankTemperature(self, tankTemperature:float) -> None:
        return self._intf.set_property(IAgVAState._metadata, IAgVAState._set_TankTemperature_metadata, tankTemperature)

    _get_FuelDensity_metadata = { "name" : "FuelDensity",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def FuelDensity(self) -> float:
        """The density of the fuel tank. Uses SmallDensity Dimension."""
        return self._intf.get_property(IAgVAState._metadata, IAgVAState._get_FuelDensity_metadata)

    _set_FuelDensity_metadata = { "name" : "FuelDensity",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @FuelDensity.setter
    def FuelDensity(self, fuelDensity:float) -> None:
        return self._intf.set_property(IAgVAState._metadata, IAgVAState._set_FuelDensity_metadata, fuelDensity)

    _get_Cr_metadata = { "name" : "Cr",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def Cr(self) -> float:
        """The reflectivity of the spacecraft used for solar radiation pressure calculations, where 2.0 is fully reflective and 1.0 is not reflective at all. Dimensionless."""
        return self._intf.get_property(IAgVAState._metadata, IAgVAState._get_Cr_metadata)

    _set_Cr_metadata = { "name" : "Cr",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @Cr.setter
    def Cr(self, cr:float) -> None:
        return self._intf.set_property(IAgVAState._metadata, IAgVAState._set_Cr_metadata, cr)

    _get_Cd_metadata = { "name" : "Cd",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def Cd(self) -> float:
        """The dimensionless drag coefficient associated with the drag area. Dimensionless."""
        return self._intf.get_property(IAgVAState._metadata, IAgVAState._get_Cd_metadata)

    _set_Cd_metadata = { "name" : "Cd",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @Cd.setter
    def Cd(self, cd:float) -> None:
        return self._intf.set_property(IAgVAState._metadata, IAgVAState._set_Cd_metadata, cd)

    _get_RadiationPressureCoeff_metadata = { "name" : "RadiationPressureCoeff",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def RadiationPressureCoeff(self) -> float:
        """The reflectivity of the spacecraft used for central body radiation pressure (albedo / thermal pressure) calculations, where 2.0 is fully reflective and 1.0 is not reflective at all. Dimensionless."""
        return self._intf.get_property(IAgVAState._metadata, IAgVAState._get_RadiationPressureCoeff_metadata)

    _set_RadiationPressureCoeff_metadata = { "name" : "RadiationPressureCoeff",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @RadiationPressureCoeff.setter
    def RadiationPressureCoeff(self, radiationPressureCoeff:float) -> None:
        return self._intf.set_property(IAgVAState._metadata, IAgVAState._set_RadiationPressureCoeff_metadata, radiationPressureCoeff)

    _get_RadiationPressureArea_metadata = { "name" : "RadiationPressureArea",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def RadiationPressureArea(self) -> float:
        """The cross-sectional area of the spacecraft assumed perpendicular to the direction of central body radiation, used for central body radiation (albedo / thermal pressure) calculations. Uses Small Area Dimension."""
        return self._intf.get_property(IAgVAState._metadata, IAgVAState._get_RadiationPressureArea_metadata)

    _set_RadiationPressureArea_metadata = { "name" : "RadiationPressureArea",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @RadiationPressureArea.setter
    def RadiationPressureArea(self, radPressureArea:float) -> None:
        return self._intf.set_property(IAgVAState._metadata, IAgVAState._set_RadiationPressureArea_metadata, radPressureArea)

    _get_K1_metadata = { "name" : "K1",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def K1(self) -> float:
        """If you are using a non-spherical SRP model, this field defines the model's GPS solar radiation pressure K1 (scale) value. Dimensionless."""
        return self._intf.get_property(IAgVAState._metadata, IAgVAState._get_K1_metadata)

    _set_K1_metadata = { "name" : "K1",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @K1.setter
    def K1(self, k1:float) -> None:
        return self._intf.set_property(IAgVAState._metadata, IAgVAState._set_K1_metadata, k1)

    _get_K2_metadata = { "name" : "K2",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def K2(self) -> float:
        """If you are using a non-spherical SRP model, this field defines the model's GPS solar radiation pressure K2 (scale) value. Dimensionless."""
        return self._intf.get_property(IAgVAState._metadata, IAgVAState._get_K2_metadata)

    _set_K2_metadata = { "name" : "K2",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @K2.setter
    def K2(self, k2:float) -> None:
        return self._intf.set_property(IAgVAState._metadata, IAgVAState._set_K2_metadata, k2)

    _GetInFrameName_metadata = { "name" : "GetInFrameName",
            "arg_types" : (agcom.BSTR, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.AgInterface_out_arg,) }
    def GetInFrameName(self, frameName:str) -> "IAgVAState":
        """Gets the orbit state in the specified frame."""
        return self._intf.invoke(IAgVAState._metadata, IAgVAState._GetInFrameName_metadata, frameName, out_arg())


agcls.AgClassCatalog.add_catalog_entry("{44DC2BBF-BC83-42AE-80A1-C1C4B399637F}", IAgVAState)
agcls.AgTypeNameMap["IAgVAState"] = IAgVAState

class IAgVAStoppingConditionComponent(object):
    """Properties for a stopping condition."""
    _num_methods = 1
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{BB400CAB-0917-4921-BD15-73F6039F3AF2}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_StoppingConditionType" : 1, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAStoppingConditionComponent._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStoppingConditionComponent from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStoppingConditionComponent.__dict__ and type(IAgVAStoppingConditionComponent.__dict__[attrname]) == property:
            return IAgVAStoppingConditionComponent.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStoppingConditionComponent.")
    
    _get_StoppingConditionType_metadata = { "name" : "StoppingConditionType",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAStoppingCondition),) }
    @property
    def StoppingConditionType(self) -> "AgEVAStoppingCondition":
        """The type of stopping condition."""
        return self._intf.get_property(IAgVAStoppingConditionComponent._metadata, IAgVAStoppingConditionComponent._get_StoppingConditionType_metadata)


agcls.AgClassCatalog.add_catalog_entry("{BB400CAB-0917-4921-BD15-73F6039F3AF2}", IAgVAStoppingConditionComponent)
agcls.AgTypeNameMap["IAgVAStoppingConditionComponent"] = IAgVAStoppingConditionComponent

class IAgVAAutomaticSequence(object):
    """Properties for automatic sequences."""
    _num_methods = 6
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{B38BC6BA-95F1-4F88-A09D-5657DB8A31AC}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "MakeCopy" : 1,
                             "get_Name" : 2,
                             "set_Name" : 3,
                             "get_UserComment" : 4,
                             "set_UserComment" : 5,
                             "get_Sequence" : 6, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAAutomaticSequence._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAAutomaticSequence from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAAutomaticSequence.__dict__ and type(IAgVAAutomaticSequence.__dict__[attrname]) == property:
            return IAgVAAutomaticSequence.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAAutomaticSequence.")
    
    _MakeCopy_metadata = { "name" : "MakeCopy",
            "arg_types" : (agcom.BSTR, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.AgInterface_out_arg,) }
    def MakeCopy(self, uniqueName:str) -> "IAgVAAutomaticSequence":
        """Makes a copy of the sequence."""
        return self._intf.invoke(IAgVAAutomaticSequence._metadata, IAgVAAutomaticSequence._MakeCopy_metadata, uniqueName, out_arg())

    _get_Name_metadata = { "name" : "Name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def Name(self) -> str:
        """The name of the sequence."""
        return self._intf.get_property(IAgVAAutomaticSequence._metadata, IAgVAAutomaticSequence._get_Name_metadata)

    _set_Name_metadata = { "name" : "Name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @Name.setter
    def Name(self, newVal:str) -> None:
        return self._intf.set_property(IAgVAAutomaticSequence._metadata, IAgVAAutomaticSequence._set_Name_metadata, newVal)

    _get_UserComment_metadata = { "name" : "UserComment",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def UserComment(self) -> str:
        """The user comment."""
        return self._intf.get_property(IAgVAAutomaticSequence._metadata, IAgVAAutomaticSequence._get_UserComment_metadata)

    _set_UserComment_metadata = { "name" : "UserComment",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @UserComment.setter
    def UserComment(self, newVal:str) -> None:
        return self._intf.set_property(IAgVAAutomaticSequence._metadata, IAgVAAutomaticSequence._set_UserComment_metadata, newVal)

    _get_Sequence_metadata = { "name" : "Sequence",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def Sequence(self) -> "IAgVAMCSSegmentCollection":
        """Returns the segment collection of the sequence."""
        return self._intf.get_property(IAgVAAutomaticSequence._metadata, IAgVAAutomaticSequence._get_Sequence_metadata)


agcls.AgClassCatalog.add_catalog_entry("{B38BC6BA-95F1-4F88-A09D-5657DB8A31AC}", IAgVAAutomaticSequence)
agcls.AgTypeNameMap["IAgVAAutomaticSequence"] = IAgVAAutomaticSequence

class IAgVAAutomaticSequenceCollection(object):
    """Properties for the Automatic Sequence Browser."""
    _num_methods = 7
    _vtable_offset = IDispatch._vtable_offset + IDispatch._num_methods
    _metadata = {
        "uuid" : "{E71D785F-1A4C-4E98-BDC1-4EE7055D1FDC}",
        "vtable_reference" : IDispatch._vtable_offset + IDispatch._num_methods - 1,
        "method_offsets" : { "Item" : 1,
                             "Add" : 2,
                             "Remove" : 3,
                             "get__NewEnum" : 4,
                             "get_Count" : 5,
                             "GetItemByIndex" : 6,
                             "GetItemByName" : 7, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAAutomaticSequenceCollection._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAAutomaticSequenceCollection from source object.")
        self.__dict__["_enumerator"] = None
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAAutomaticSequenceCollection.__dict__ and type(IAgVAAutomaticSequenceCollection.__dict__[attrname]) == property:
            return IAgVAAutomaticSequenceCollection.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAAutomaticSequenceCollection.")
    def __iter__(self):
        self.__dict__["_enumerator"] = self._NewEnum
        self._enumerator.reset()
        return self
    def __next__(self) -> "IAgVAAutomaticSequence":
        if self._enumerator is None:
            raise StopIteration
        nextval = self._enumerator.next()
        if nextval is None:
            raise StopIteration
        return nextval
    
    _Item_metadata = { "name" : "Item",
            "arg_types" : (agcom.VARIANT, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.VARIANT_arg, agmarshall.AgInterface_out_arg,) }
    def Item(self, indexOrName:typing.Any) -> "IAgVAAutomaticSequence":
        """Returns the given automatic sequence."""
        return self._intf.invoke(IAgVAAutomaticSequenceCollection._metadata, IAgVAAutomaticSequenceCollection._Item_metadata, indexOrName, out_arg())

    _Add_metadata = { "name" : "Add",
            "arg_types" : (agcom.BSTR, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.AgInterface_out_arg,) }
    def Add(self, name:str) -> "IAgVAAutomaticSequence":
        """Creates a new sequence."""
        return self._intf.invoke(IAgVAAutomaticSequenceCollection._metadata, IAgVAAutomaticSequenceCollection._Add_metadata, name, out_arg())

    _Remove_metadata = { "name" : "Remove",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    def Remove(self, indexOrName:typing.Any) -> None:
        """Removes a sequence."""
        return self._intf.invoke(IAgVAAutomaticSequenceCollection._metadata, IAgVAAutomaticSequenceCollection._Remove_metadata, indexOrName)

    _get__NewEnum_metadata = { "name" : "_NewEnum",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.IEnumVARIANT_arg,) }
    @property
    def _NewEnum(self) -> enumerator_proxy:
        """Allows you to enumerate through the collection."""
        return self._intf.get_property(IAgVAAutomaticSequenceCollection._metadata, IAgVAAutomaticSequenceCollection._get__NewEnum_metadata)

    _get_Count_metadata = { "name" : "Count",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.LONG_arg,) }
    @property
    def Count(self) -> int:
        """The size of the collection."""
        return self._intf.get_property(IAgVAAutomaticSequenceCollection._metadata, IAgVAAutomaticSequenceCollection._get_Count_metadata)

    _GetItemByIndex_metadata = { "name" : "GetItemByIndex",
            "arg_types" : (agcom.INT, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.INT_arg, agmarshall.AgInterface_out_arg,) }
    def GetItemByIndex(self, index:int) -> "IAgVAAutomaticSequence":
        """Retrieves the given automatic sequence found by the index."""
        return self._intf.invoke(IAgVAAutomaticSequenceCollection._metadata, IAgVAAutomaticSequenceCollection._GetItemByIndex_metadata, index, out_arg())

    _GetItemByName_metadata = { "name" : "GetItemByName",
            "arg_types" : (agcom.BSTR, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.AgInterface_out_arg,) }
    def GetItemByName(self, name:str) -> "IAgVAAutomaticSequence":
        """Retrieves the given automatic sequence found by the name."""
        return self._intf.invoke(IAgVAAutomaticSequenceCollection._metadata, IAgVAAutomaticSequenceCollection._GetItemByName_metadata, name, out_arg())

    __getitem__ = Item



agcls.AgClassCatalog.add_catalog_entry("{E71D785F-1A4C-4E98-BDC1-4EE7055D1FDC}", IAgVAAutomaticSequenceCollection)
agcls.AgTypeNameMap["IAgVAAutomaticSequenceCollection"] = IAgVAAutomaticSequenceCollection

class IAgVABPlaneCollection(object):
    """Properties for the collection of B-Planes."""
    _num_methods = 6
    _vtable_offset = IDispatch._vtable_offset + IDispatch._num_methods
    _metadata = {
        "uuid" : "{64D1804F-3A12-4DA5-AF4F-79C6AE3B39BC}",
        "vtable_reference" : IDispatch._vtable_offset + IDispatch._num_methods - 1,
        "method_offsets" : { "Add" : 1,
                             "Remove" : 2,
                             "RemoveAll" : 3,
                             "Item" : 4,
                             "get__NewEnum" : 5,
                             "get_Count" : 6, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVABPlaneCollection._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVABPlaneCollection from source object.")
        self.__dict__["_enumerator"] = None
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVABPlaneCollection.__dict__ and type(IAgVABPlaneCollection.__dict__[attrname]) == property:
            return IAgVABPlaneCollection.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVABPlaneCollection.")
    def __iter__(self):
        self.__dict__["_enumerator"] = self._NewEnum
        self._enumerator.reset()
        return self
    def __next__(self) -> str:
        if self._enumerator is None:
            raise StopIteration
        nextval = self._enumerator.next()
        if nextval is None:
            raise StopIteration
        return nextval
    
    _Add_metadata = { "name" : "Add",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    def Add(self, bPlaneName:str) -> None:
        """Adds a BPlane."""
        return self._intf.invoke(IAgVABPlaneCollection._metadata, IAgVABPlaneCollection._Add_metadata, bPlaneName)

    _Remove_metadata = { "name" : "Remove",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    def Remove(self, bPlaneName:str) -> None:
        """Removes a BPlane."""
        return self._intf.invoke(IAgVABPlaneCollection._metadata, IAgVABPlaneCollection._Remove_metadata, bPlaneName)

    _RemoveAll_metadata = { "name" : "RemoveAll",
            "arg_types" : (),
            "marshallers" : () }
    def RemoveAll(self) -> None:
        """Removes all BPlanes."""
        return self._intf.invoke(IAgVABPlaneCollection._metadata, IAgVABPlaneCollection._RemoveAll_metadata, )

    _Item_metadata = { "name" : "Item",
            "arg_types" : (agcom.LONG, POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.LONG_arg, agmarshall.BSTR_arg,) }
    def Item(self, index:int) -> str:
        """Allows you to iterate through the collection."""
        return self._intf.invoke(IAgVABPlaneCollection._metadata, IAgVABPlaneCollection._Item_metadata, index, out_arg())

    _get__NewEnum_metadata = { "name" : "_NewEnum",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.IEnumVARIANT_arg,) }
    @property
    def _NewEnum(self) -> enumerator_proxy:
        """Allows you to enumerate through the collection."""
        return self._intf.get_property(IAgVABPlaneCollection._metadata, IAgVABPlaneCollection._get__NewEnum_metadata)

    _get_Count_metadata = { "name" : "Count",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.LONG_arg,) }
    @property
    def Count(self) -> int:
        """The number of active BPlanes."""
        return self._intf.get_property(IAgVABPlaneCollection._metadata, IAgVABPlaneCollection._get_Count_metadata)

    __getitem__ = Item



agcls.AgClassCatalog.add_catalog_entry("{64D1804F-3A12-4DA5-AF4F-79C6AE3B39BC}", IAgVABPlaneCollection)
agcls.AgTypeNameMap["IAgVABPlaneCollection"] = IAgVABPlaneCollection

class IAgVACalcObjectCollection(object):
    """Collection of calculation objects."""
    _num_methods = 10
    _vtable_offset = IDispatch._vtable_offset + IDispatch._num_methods
    _metadata = {
        "uuid" : "{ECCA3BE7-235C-439B-8DE8-8A5010C4A484}",
        "vtable_reference" : IDispatch._vtable_offset + IDispatch._num_methods - 1,
        "method_offsets" : { "Add" : 1,
                             "Item" : 2,
                             "Remove" : 3,
                             "get__NewEnum" : 4,
                             "get_Count" : 5,
                             "Cut" : 6,
                             "Paste" : 7,
                             "InsertCopy" : 8,
                             "GetItemByIndex" : 9,
                             "GetItemByName" : 10, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVACalcObjectCollection._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVACalcObjectCollection from source object.")
        self.__dict__["_enumerator"] = None
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVACalcObjectCollection.__dict__ and type(IAgVACalcObjectCollection.__dict__[attrname]) == property:
            return IAgVACalcObjectCollection.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVACalcObjectCollection.")
    def __iter__(self):
        self.__dict__["_enumerator"] = self._NewEnum
        self._enumerator.reset()
        return self
    def __next__(self) -> "IAgComponentInfo":
        if self._enumerator is None:
            raise StopIteration
        nextval = self._enumerator.next()
        if nextval is None:
            raise StopIteration
        return nextval
    
    _Add_metadata = { "name" : "Add",
            "arg_types" : (agcom.BSTR, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.AgInterface_out_arg,) }
    def Add(self, name:str) -> "IAgComponentInfo":
        """Adds a calc object to the collection."""
        return self._intf.invoke(IAgVACalcObjectCollection._metadata, IAgVACalcObjectCollection._Add_metadata, name, out_arg())

    _Item_metadata = { "name" : "Item",
            "arg_types" : (agcom.VARIANT, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.VARIANT_arg, agmarshall.AgInterface_out_arg,) }
    def Item(self, indexOrName:typing.Any) -> "IAgComponentInfo":
        """Returns a calc object."""
        return self._intf.invoke(IAgVACalcObjectCollection._metadata, IAgVACalcObjectCollection._Item_metadata, indexOrName, out_arg())

    _Remove_metadata = { "name" : "Remove",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    def Remove(self, indexOrName:typing.Any) -> None:
        """Removes a calc object from the collection."""
        return self._intf.invoke(IAgVACalcObjectCollection._metadata, IAgVACalcObjectCollection._Remove_metadata, indexOrName)

    _get__NewEnum_metadata = { "name" : "_NewEnum",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.IEnumVARIANT_arg,) }
    @property
    def _NewEnum(self) -> enumerator_proxy:
        """Allows you to enumerate through the collection."""
        return self._intf.get_property(IAgVACalcObjectCollection._metadata, IAgVACalcObjectCollection._get__NewEnum_metadata)

    _get_Count_metadata = { "name" : "Count",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.LONG_arg,) }
    @property
    def Count(self) -> int:
        """Returns the size of the collection."""
        return self._intf.get_property(IAgVACalcObjectCollection._metadata, IAgVACalcObjectCollection._get_Count_metadata)

    _Cut_metadata = { "name" : "Cut",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    def Cut(self, indexOrName:typing.Any) -> None:
        """Copies a calc object to the clipboard and removes the calc object from the list."""
        return self._intf.invoke(IAgVACalcObjectCollection._metadata, IAgVACalcObjectCollection._Cut_metadata, indexOrName)

    _Paste_metadata = { "name" : "Paste",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    def Paste(self) -> "IAgComponentInfo":
        """Pastes a calc object from the clipboard into the list."""
        return self._intf.invoke(IAgVACalcObjectCollection._metadata, IAgVACalcObjectCollection._Paste_metadata, out_arg())

    _InsertCopy_metadata = { "name" : "InsertCopy",
            "arg_types" : (agcom.PVOID, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_in_arg("IAgComponentInfo"), agmarshall.AgInterface_out_arg,) }
    def InsertCopy(self, calcObj:"IAgComponentInfo") -> "IAgComponentInfo":
        """Copies a calc object and inserts the copy into the list."""
        return self._intf.invoke(IAgVACalcObjectCollection._metadata, IAgVACalcObjectCollection._InsertCopy_metadata, calcObj, out_arg())

    _GetItemByIndex_metadata = { "name" : "GetItemByIndex",
            "arg_types" : (agcom.INT, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.INT_arg, agmarshall.AgInterface_out_arg,) }
    def GetItemByIndex(self, index:int) -> "IAgComponentInfo":
        """Retrieves a calc object found by the index."""
        return self._intf.invoke(IAgVACalcObjectCollection._metadata, IAgVACalcObjectCollection._GetItemByIndex_metadata, index, out_arg())

    _GetItemByName_metadata = { "name" : "GetItemByName",
            "arg_types" : (agcom.BSTR, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.AgInterface_out_arg,) }
    def GetItemByName(self, name:str) -> "IAgComponentInfo":
        """Retrieves a calc object found by the name."""
        return self._intf.invoke(IAgVACalcObjectCollection._metadata, IAgVACalcObjectCollection._GetItemByName_metadata, name, out_arg())

    __getitem__ = Item



agcls.AgClassCatalog.add_catalog_entry("{ECCA3BE7-235C-439B-8DE8-8A5010C4A484}", IAgVACalcObjectCollection)
agcls.AgTypeNameMap["IAgVACalcObjectCollection"] = IAgVACalcObjectCollection

class IAgVAManeuverFinitePropagator(object):
    """Properties for the propagation of a Finite Maneuver."""
    _num_methods = 21
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{6F8D5070-D155-4D40-A682-46EF2B69F1A3}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_PropagatorName" : 1,
                             "set_PropagatorName" : 2,
                             "get_StoppingConditions" : 3,
                             "get_MinPropagationTime" : 4,
                             "set_MinPropagationTime" : 5,
                             "get_MaxPropagationTime" : 6,
                             "set_MaxPropagationTime" : 7,
                             "get_EnableMaxPropagationTime" : 8,
                             "set_EnableMaxPropagationTime" : 9,
                             "get_EnableWarningMessage" : 10,
                             "set_EnableWarningMessage" : 11,
                             "get_EnableCenterBurn" : 12,
                             "set_EnableCenterBurn" : 13,
                             "get_Bias" : 14,
                             "set_Bias" : 15,
                             "get_OverrideMaxPropagationTime" : 16,
                             "set_OverrideMaxPropagationTime" : 17,
                             "get_ShouldStopForInitiallySurpassedEpochStoppingConditions" : 18,
                             "set_ShouldStopForInitiallySurpassedEpochStoppingConditions" : 19,
                             "get_ShouldReinitializeSTMAtStartOfSegmentPropagation" : 20,
                             "set_ShouldReinitializeSTMAtStartOfSegmentPropagation" : 21, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAManeuverFinitePropagator._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAManeuverFinitePropagator from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAManeuverFinitePropagator.__dict__ and type(IAgVAManeuverFinitePropagator.__dict__[attrname]) == property:
            return IAgVAManeuverFinitePropagator.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAManeuverFinitePropagator.")
    
    _get_PropagatorName_metadata = { "name" : "PropagatorName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def PropagatorName(self) -> str:
        """The propagator."""
        return self._intf.get_property(IAgVAManeuverFinitePropagator._metadata, IAgVAManeuverFinitePropagator._get_PropagatorName_metadata)

    _set_PropagatorName_metadata = { "name" : "PropagatorName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @PropagatorName.setter
    def PropagatorName(self, newVal:str) -> None:
        return self._intf.set_property(IAgVAManeuverFinitePropagator._metadata, IAgVAManeuverFinitePropagator._set_PropagatorName_metadata, newVal)

    _get_StoppingConditions_metadata = { "name" : "StoppingConditions",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def StoppingConditions(self) -> "IAgVAStoppingConditionCollection":
        """The stopping conditions list."""
        return self._intf.get_property(IAgVAManeuverFinitePropagator._metadata, IAgVAManeuverFinitePropagator._get_StoppingConditions_metadata)

    _get_MinPropagationTime_metadata = { "name" : "MinPropagationTime",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def MinPropagationTime(self) -> float:
        """Minimum Propagation Time - the minimum time that must elapse from the beginning of the segment until Astrogator will begin checking stopping conditions for satisfaction. Uses Time Dimension."""
        return self._intf.get_property(IAgVAManeuverFinitePropagator._metadata, IAgVAManeuverFinitePropagator._get_MinPropagationTime_metadata)

    _set_MinPropagationTime_metadata = { "name" : "MinPropagationTime",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @MinPropagationTime.setter
    def MinPropagationTime(self, newVal:float) -> None:
        return self._intf.set_property(IAgVAManeuverFinitePropagator._metadata, IAgVAManeuverFinitePropagator._set_MinPropagationTime_metadata, newVal)

    _get_MaxPropagationTime_metadata = { "name" : "MaxPropagationTime",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def MaxPropagationTime(self) -> float:
        """Maximum Propagation Time - the maximum propagation time, after which the segment will end regardless of whether the stopping conditions have been satisfied. Uses Time Dimension."""
        return self._intf.get_property(IAgVAManeuverFinitePropagator._metadata, IAgVAManeuverFinitePropagator._get_MaxPropagationTime_metadata)

    _set_MaxPropagationTime_metadata = { "name" : "MaxPropagationTime",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @MaxPropagationTime.setter
    def MaxPropagationTime(self, newVal:float) -> None:
        return self._intf.set_property(IAgVAManeuverFinitePropagator._metadata, IAgVAManeuverFinitePropagator._set_MaxPropagationTime_metadata, newVal)

    _get_EnableMaxPropagationTime_metadata = { "name" : "EnableMaxPropagationTime",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def EnableMaxPropagationTime(self) -> bool:
        """Enable Maximum Propagation Time - apply the maximum propagation time."""
        return self._intf.get_property(IAgVAManeuverFinitePropagator._metadata, IAgVAManeuverFinitePropagator._get_EnableMaxPropagationTime_metadata)

    _set_EnableMaxPropagationTime_metadata = { "name" : "EnableMaxPropagationTime",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @EnableMaxPropagationTime.setter
    def EnableMaxPropagationTime(self, newVal:bool) -> None:
        return self._intf.set_property(IAgVAManeuverFinitePropagator._metadata, IAgVAManeuverFinitePropagator._set_EnableMaxPropagationTime_metadata, newVal)

    _get_EnableWarningMessage_metadata = { "name" : "EnableWarningMessage",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def EnableWarningMessage(self) -> bool:
        """Issue a warning message if propagation is stopped by the Maximum Propagation Time parameter."""
        return self._intf.get_property(IAgVAManeuverFinitePropagator._metadata, IAgVAManeuverFinitePropagator._get_EnableWarningMessage_metadata)

    _set_EnableWarningMessage_metadata = { "name" : "EnableWarningMessage",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @EnableWarningMessage.setter
    def EnableWarningMessage(self, newVal:bool) -> None:
        return self._intf.set_property(IAgVAManeuverFinitePropagator._metadata, IAgVAManeuverFinitePropagator._set_EnableWarningMessage_metadata, newVal)

    _get_EnableCenterBurn_metadata = { "name" : "EnableCenterBurn",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def EnableCenterBurn(self) -> bool:
        """This property is only available for use with a duration stopping condition. If selected, you are setting the maneuver to start half the time before the previous segment ended."""
        return self._intf.get_property(IAgVAManeuverFinitePropagator._metadata, IAgVAManeuverFinitePropagator._get_EnableCenterBurn_metadata)

    _set_EnableCenterBurn_metadata = { "name" : "EnableCenterBurn",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @EnableCenterBurn.setter
    def EnableCenterBurn(self, newVal:bool) -> None:
        return self._intf.set_property(IAgVAManeuverFinitePropagator._metadata, IAgVAManeuverFinitePropagator._set_EnableCenterBurn_metadata, newVal)

    _get_Bias_metadata = { "name" : "Bias",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def Bias(self) -> float:
        """The value by which to adjust the centering of the burn. A positive value will center the burn after the previous segment ends by the amount specified in the Burn Center Bias field. Uses Time Dimension."""
        return self._intf.get_property(IAgVAManeuverFinitePropagator._metadata, IAgVAManeuverFinitePropagator._get_Bias_metadata)

    _set_Bias_metadata = { "name" : "Bias",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @Bias.setter
    def Bias(self, newVal:float) -> None:
        return self._intf.set_property(IAgVAManeuverFinitePropagator._metadata, IAgVAManeuverFinitePropagator._set_Bias_metadata, newVal)

    _get_OverrideMaxPropagationTime_metadata = { "name" : "OverrideMaxPropagationTime",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def OverrideMaxPropagationTime(self) -> bool:
        """Override Maximum Propagation Time - if there is a duration or epoch stopping condition that occurs after the maximum propagation time, ignore the maximum propagation time."""
        return self._intf.get_property(IAgVAManeuverFinitePropagator._metadata, IAgVAManeuverFinitePropagator._get_OverrideMaxPropagationTime_metadata)

    _set_OverrideMaxPropagationTime_metadata = { "name" : "OverrideMaxPropagationTime",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @OverrideMaxPropagationTime.setter
    def OverrideMaxPropagationTime(self, newVal:bool) -> None:
        return self._intf.set_property(IAgVAManeuverFinitePropagator._metadata, IAgVAManeuverFinitePropagator._set_OverrideMaxPropagationTime_metadata, newVal)

    _get_ShouldStopForInitiallySurpassedEpochStoppingConditions_metadata = { "name" : "ShouldStopForInitiallySurpassedEpochStoppingConditions",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def ShouldStopForInitiallySurpassedEpochStoppingConditions(self) -> bool:
        """Stop immediately if propagation begins beyond an active epoch stopping condition."""
        return self._intf.get_property(IAgVAManeuverFinitePropagator._metadata, IAgVAManeuverFinitePropagator._get_ShouldStopForInitiallySurpassedEpochStoppingConditions_metadata)

    _set_ShouldStopForInitiallySurpassedEpochStoppingConditions_metadata = { "name" : "ShouldStopForInitiallySurpassedEpochStoppingConditions",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @ShouldStopForInitiallySurpassedEpochStoppingConditions.setter
    def ShouldStopForInitiallySurpassedEpochStoppingConditions(self, newVal:bool) -> None:
        return self._intf.set_property(IAgVAManeuverFinitePropagator._metadata, IAgVAManeuverFinitePropagator._set_ShouldStopForInitiallySurpassedEpochStoppingConditions_metadata, newVal)

    _get_ShouldReinitializeSTMAtStartOfSegmentPropagation_metadata = { "name" : "ShouldReinitializeSTMAtStartOfSegmentPropagation",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def ShouldReinitializeSTMAtStartOfSegmentPropagation(self) -> bool:
        """If this segment is propagating the state transition matrix, reset it to the identity matrix at the start of the segment."""
        return self._intf.get_property(IAgVAManeuverFinitePropagator._metadata, IAgVAManeuverFinitePropagator._get_ShouldReinitializeSTMAtStartOfSegmentPropagation_metadata)

    _set_ShouldReinitializeSTMAtStartOfSegmentPropagation_metadata = { "name" : "ShouldReinitializeSTMAtStartOfSegmentPropagation",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @ShouldReinitializeSTMAtStartOfSegmentPropagation.setter
    def ShouldReinitializeSTMAtStartOfSegmentPropagation(self, newVal:bool) -> None:
        return self._intf.set_property(IAgVAManeuverFinitePropagator._metadata, IAgVAManeuverFinitePropagator._set_ShouldReinitializeSTMAtStartOfSegmentPropagation_metadata, newVal)


agcls.AgClassCatalog.add_catalog_entry("{6F8D5070-D155-4D40-A682-46EF2B69F1A3}", IAgVAManeuverFinitePropagator)
agcls.AgTypeNameMap["IAgVAManeuverFinitePropagator"] = IAgVAManeuverFinitePropagator

class IAgVABurnoutVelocity(object):
    """Properties for the burnout velocity of a Launch segment."""
    _num_methods = 10
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{A1EA8DE5-41D0-4419-988E-98EEACEECAE9}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_BurnoutOption" : 1,
                             "set_BurnoutOption" : 2,
                             "get_FixedVelocity" : 3,
                             "set_FixedVelocity" : 4,
                             "get_InertialVelocity" : 5,
                             "set_InertialVelocity" : 6,
                             "get_InertialVelocityAzimuth" : 7,
                             "set_InertialVelocityAzimuth" : 8,
                             "get_InertialHorizontalFPA" : 9,
                             "set_InertialHorizontalFPA" : 10, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVABurnoutVelocity._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVABurnoutVelocity from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVABurnoutVelocity.__dict__ and type(IAgVABurnoutVelocity.__dict__[attrname]) == property:
            return IAgVABurnoutVelocity.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVABurnoutVelocity.")
    
    _get_BurnoutOption_metadata = { "name" : "BurnoutOption",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVABurnoutOptions),) }
    @property
    def BurnoutOption(self) -> "AgEVABurnoutOptions":
        """Select to use the fixed or inertial frame."""
        return self._intf.get_property(IAgVABurnoutVelocity._metadata, IAgVABurnoutVelocity._get_BurnoutOption_metadata)

    _set_BurnoutOption_metadata = { "name" : "BurnoutOption",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVABurnoutOptions),) }
    @BurnoutOption.setter
    def BurnoutOption(self, newVal:"AgEVABurnoutOptions") -> None:
        return self._intf.set_property(IAgVABurnoutVelocity._metadata, IAgVABurnoutVelocity._set_BurnoutOption_metadata, newVal)

    _get_FixedVelocity_metadata = { "name" : "FixedVelocity",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def FixedVelocity(self) -> float:
        """The velocity magnitude . Uses Rate Dimension."""
        return self._intf.get_property(IAgVABurnoutVelocity._metadata, IAgVABurnoutVelocity._get_FixedVelocity_metadata)

    _set_FixedVelocity_metadata = { "name" : "FixedVelocity",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @FixedVelocity.setter
    def FixedVelocity(self, newVal:float) -> None:
        return self._intf.set_property(IAgVABurnoutVelocity._metadata, IAgVABurnoutVelocity._set_FixedVelocity_metadata, newVal)

    _get_InertialVelocity_metadata = { "name" : "InertialVelocity",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def InertialVelocity(self) -> float:
        """The velocity magnitude. Uses Rate Dimension."""
        return self._intf.get_property(IAgVABurnoutVelocity._metadata, IAgVABurnoutVelocity._get_InertialVelocity_metadata)

    _set_InertialVelocity_metadata = { "name" : "InertialVelocity",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @InertialVelocity.setter
    def InertialVelocity(self, newVal:float) -> None:
        return self._intf.set_property(IAgVABurnoutVelocity._metadata, IAgVABurnoutVelocity._set_InertialVelocity_metadata, newVal)

    _get_InertialVelocityAzimuth_metadata = { "name" : "InertialVelocityAzimuth",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def InertialVelocityAzimuth(self) -> typing.Any:
        """The inertial velocity azimuth. Inertial velocity azimuth is the angle from the projection of north in the local horizontal plane to the inertial velocity vector, right handed. Uses Angle Dimension."""
        return self._intf.get_property(IAgVABurnoutVelocity._metadata, IAgVABurnoutVelocity._get_InertialVelocityAzimuth_metadata)

    _set_InertialVelocityAzimuth_metadata = { "name" : "InertialVelocityAzimuth",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @InertialVelocityAzimuth.setter
    def InertialVelocityAzimuth(self, newVal:typing.Any) -> None:
        return self._intf.set_property(IAgVABurnoutVelocity._metadata, IAgVABurnoutVelocity._set_InertialVelocityAzimuth_metadata, newVal)

    _get_InertialHorizontalFPA_metadata = { "name" : "InertialHorizontalFPA",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def InertialHorizontalFPA(self) -> typing.Any:
        """Inertial horizontal flight path angle is the angle from the local horizontal to the inertial velocity vector, positive towards radius. It is also 90 degrees minus vertical flight path angle. Uses Angle Dimension."""
        return self._intf.get_property(IAgVABurnoutVelocity._metadata, IAgVABurnoutVelocity._get_InertialHorizontalFPA_metadata)

    _set_InertialHorizontalFPA_metadata = { "name" : "InertialHorizontalFPA",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @InertialHorizontalFPA.setter
    def InertialHorizontalFPA(self, newVal:typing.Any) -> None:
        return self._intf.set_property(IAgVABurnoutVelocity._metadata, IAgVABurnoutVelocity._set_InertialHorizontalFPA_metadata, newVal)


agcls.AgClassCatalog.add_catalog_entry("{A1EA8DE5-41D0-4419-988E-98EEACEECAE9}", IAgVABurnoutVelocity)
agcls.AgTypeNameMap["IAgVABurnoutVelocity"] = IAgVABurnoutVelocity

class IAgVAAttitudeControl(object):
    """Properties for attitude options for a maneuver segment."""
    _num_methods = 12
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{FC43EF22-B727-4538-9E97-B3CD445436CD}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_LeadDuration" : 1,
                             "set_LeadDuration" : 2,
                             "get_TrailDuration" : 3,
                             "set_TrailDuration" : 4,
                             "get_BodyAxis" : 5,
                             "set_BodyAxis" : 6,
                             "get_ConstraintSign" : 7,
                             "set_ConstraintSign" : 8,
                             "get_ConstraintVectorName" : 9,
                             "set_ConstraintVectorName" : 10,
                             "get_CustomFunction" : 11,
                             "set_CustomFunction" : 12, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAAttitudeControl._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAAttitudeControl from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAAttitudeControl.__dict__ and type(IAgVAAttitudeControl.__dict__[attrname]) == property:
            return IAgVAAttitudeControl.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAAttitudeControl.")
    
    _get_LeadDuration_metadata = { "name" : "LeadDuration",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def LeadDuration(self) -> float:
        """How long before the maneuver starts the maneuver attitude. Uses Time Dimension."""
        return self._intf.get_property(IAgVAAttitudeControl._metadata, IAgVAAttitudeControl._get_LeadDuration_metadata)

    _set_LeadDuration_metadata = { "name" : "LeadDuration",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @LeadDuration.setter
    def LeadDuration(self, newVal:float) -> None:
        return self._intf.set_property(IAgVAAttitudeControl._metadata, IAgVAAttitudeControl._set_LeadDuration_metadata, newVal)

    _get_TrailDuration_metadata = { "name" : "TrailDuration",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def TrailDuration(self) -> float:
        """How long to maintain that attitude after the maneuver. Uses Time Dimension."""
        return self._intf.get_property(IAgVAAttitudeControl._metadata, IAgVAAttitudeControl._get_TrailDuration_metadata)

    _set_TrailDuration_metadata = { "name" : "TrailDuration",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @TrailDuration.setter
    def TrailDuration(self, newVal:float) -> None:
        return self._intf.set_property(IAgVAAttitudeControl._metadata, IAgVAAttitudeControl._set_TrailDuration_metadata, newVal)

    _get_BodyAxis_metadata = { "name" : "BodyAxis",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVABodyAxis),) }
    @property
    def BodyAxis(self) -> "AgEVABodyAxis":
        """Whether the engine acceleration (the direction opposite the engine's exhaust) is aligned with positive or negative X, Y or Z body axis."""
        return self._intf.get_property(IAgVAAttitudeControl._metadata, IAgVAAttitudeControl._get_BodyAxis_metadata)

    _set_BodyAxis_metadata = { "name" : "BodyAxis",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVABodyAxis),) }
    @BodyAxis.setter
    def BodyAxis(self, newVal:"AgEVABodyAxis") -> None:
        return self._intf.set_property(IAgVAAttitudeControl._metadata, IAgVAAttitudeControl._set_BodyAxis_metadata, newVal)

    _get_ConstraintSign_metadata = { "name" : "ConstraintSign",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAConstraintSign),) }
    @property
    def ConstraintSign(self) -> "AgEVAConstraintSign":
        """Whether the Constraint Vector is positive or negative."""
        return self._intf.get_property(IAgVAAttitudeControl._metadata, IAgVAAttitudeControl._get_ConstraintSign_metadata)

    _set_ConstraintSign_metadata = { "name" : "ConstraintSign",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAConstraintSign),) }
    @ConstraintSign.setter
    def ConstraintSign(self, newVal:"AgEVAConstraintSign") -> None:
        return self._intf.set_property(IAgVAAttitudeControl._metadata, IAgVAAttitudeControl._set_ConstraintSign_metadata, newVal)

    _get_ConstraintVectorName_metadata = { "name" : "ConstraintVectorName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def ConstraintVectorName(self) -> str:
        """Constraint Vector - the vector toward which this body vector is constrained."""
        return self._intf.get_property(IAgVAAttitudeControl._metadata, IAgVAAttitudeControl._get_ConstraintVectorName_metadata)

    _set_ConstraintVectorName_metadata = { "name" : "ConstraintVectorName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @ConstraintVectorName.setter
    def ConstraintVectorName(self, newVal:str) -> None:
        return self._intf.set_property(IAgVAAttitudeControl._metadata, IAgVAAttitudeControl._set_ConstraintVectorName_metadata, newVal)

    _get_CustomFunction_metadata = { "name" : "CustomFunction",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVACustomFunction),) }
    @property
    def CustomFunction(self) -> "AgEVACustomFunction":
        """The attitude definition to use for other STK functions."""
        return self._intf.get_property(IAgVAAttitudeControl._metadata, IAgVAAttitudeControl._get_CustomFunction_metadata)

    _set_CustomFunction_metadata = { "name" : "CustomFunction",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVACustomFunction),) }
    @CustomFunction.setter
    def CustomFunction(self, newVal:"AgEVACustomFunction") -> None:
        return self._intf.set_property(IAgVAAttitudeControl._metadata, IAgVAAttitudeControl._set_CustomFunction_metadata, newVal)


agcls.AgClassCatalog.add_catalog_entry("{FC43EF22-B727-4538-9E97-B3CD445436CD}", IAgVAAttitudeControl)
agcls.AgTypeNameMap["IAgVAAttitudeControl"] = IAgVAAttitudeControl

class IAgVAAttitudeControlFinite(IAgVAAttitudeControl):
    """The attitude control of a finite maneuver"""
    _num_methods = 0
    _vtable_offset = IAgVAAttitudeControl._vtable_offset + IAgVAAttitudeControl._num_methods
    _metadata = {
        "uuid" : "{827F3B46-D066-462B-A3DB-1DCD56A816BA}",
        "vtable_reference" : IAgVAAttitudeControl._vtable_offset + IAgVAAttitudeControl._num_methods - 1,
        "method_offsets" : {  }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAAttitudeControlFinite._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAAttitudeControlFinite from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAAttitudeControl._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAAttitudeControlFinite.__dict__ and type(IAgVAAttitudeControlFinite.__dict__[attrname]) == property:
            return IAgVAAttitudeControlFinite.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            IAgVAAttitudeControl.__setattr__(self, attrname, value)
    

agcls.AgClassCatalog.add_catalog_entry("{827F3B46-D066-462B-A3DB-1DCD56A816BA}", IAgVAAttitudeControlFinite)
agcls.AgTypeNameMap["IAgVAAttitudeControlFinite"] = IAgVAAttitudeControlFinite

class IAgVAAttitudeControlImpulsive(IAgVAAttitudeControl):
    """The attitude control of an impulsive maneuver."""
    _num_methods = 0
    _vtable_offset = IAgVAAttitudeControl._vtable_offset + IAgVAAttitudeControl._num_methods
    _metadata = {
        "uuid" : "{0BD5E890-FBD8-415E-9E29-38731985F366}",
        "vtable_reference" : IAgVAAttitudeControl._vtable_offset + IAgVAAttitudeControl._num_methods - 1,
        "method_offsets" : {  }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAAttitudeControlImpulsive._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAAttitudeControlImpulsive from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAAttitudeControl._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAAttitudeControlImpulsive.__dict__ and type(IAgVAAttitudeControlImpulsive.__dict__[attrname]) == property:
            return IAgVAAttitudeControlImpulsive.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            IAgVAAttitudeControl.__setattr__(self, attrname, value)
    

agcls.AgClassCatalog.add_catalog_entry("{0BD5E890-FBD8-415E-9E29-38731985F366}", IAgVAAttitudeControlImpulsive)
agcls.AgTypeNameMap["IAgVAAttitudeControlImpulsive"] = IAgVAAttitudeControlImpulsive

class IAgVAAttitudeControlOptimalFinite(IAgVAAttitudeControl):
    """The attitude control of a optimal finite maneuver"""
    _num_methods = 0
    _vtable_offset = IAgVAAttitudeControl._vtable_offset + IAgVAAttitudeControl._num_methods
    _metadata = {
        "uuid" : "{EF8743CB-4A4F-4B89-AB50-D76843E4D618}",
        "vtable_reference" : IAgVAAttitudeControl._vtable_offset + IAgVAAttitudeControl._num_methods - 1,
        "method_offsets" : {  }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAAttitudeControlOptimalFinite._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAAttitudeControlOptimalFinite from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAAttitudeControl._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAAttitudeControlOptimalFinite.__dict__ and type(IAgVAAttitudeControlOptimalFinite.__dict__[attrname]) == property:
            return IAgVAAttitudeControlOptimalFinite.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            IAgVAAttitudeControl.__setattr__(self, attrname, value)
    

agcls.AgClassCatalog.add_catalog_entry("{EF8743CB-4A4F-4B89-AB50-D76843E4D618}", IAgVAAttitudeControlOptimalFinite)
agcls.AgTypeNameMap["IAgVAAttitudeControlOptimalFinite"] = IAgVAAttitudeControlOptimalFinite

class IAgVAManeuver(object):
    """Properties of an Impulsive Maneuver Segment."""
    _num_methods = 6
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{C70B417E-D1C4-40E8-8CDC-67EDED0B56AE}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_AttitudeControlType" : 1,
                             "SetAttitudeControlType" : 2,
                             "get_AttitudeControl" : 3,
                             "get_PropulsionMethod" : 4,
                             "SetPropulsionMethod" : 5,
                             "get_PropulsionMethodValue" : 6, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAManeuver._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAManeuver from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAManeuver.__dict__ and type(IAgVAManeuver.__dict__[attrname]) == property:
            return IAgVAManeuver.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAManeuver.")
    
    _get_AttitudeControlType_metadata = { "name" : "AttitudeControlType",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAAttitudeControl),) }
    @property
    def AttitudeControlType(self) -> "AgEVAAttitudeControl":
        """Determines the attitude parameters available for you to specify."""
        return self._intf.get_property(IAgVAManeuver._metadata, IAgVAManeuver._get_AttitudeControlType_metadata)

    _SetAttitudeControlType_metadata = { "name" : "SetAttitudeControlType",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAAttitudeControl),) }
    def SetAttitudeControlType(self, attitudeControlType:"AgEVAAttitudeControl") -> None:
        """Sets the attitude control type."""
        return self._intf.invoke(IAgVAManeuver._metadata, IAgVAManeuver._SetAttitudeControlType_metadata, attitudeControlType)

    _get_AttitudeControl_metadata = { "name" : "AttitudeControl",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def AttitudeControl(self) -> "IAgVAAttitudeControl":
        """The attitude control properties collection."""
        return self._intf.get_property(IAgVAManeuver._metadata, IAgVAManeuver._get_AttitudeControl_metadata)

    _get_PropulsionMethod_metadata = { "name" : "PropulsionMethod",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAPropulsionMethod),) }
    @property
    def PropulsionMethod(self) -> "AgEVAPropulsionMethod":
        """The propulsion type to be modeled."""
        return self._intf.get_property(IAgVAManeuver._metadata, IAgVAManeuver._get_PropulsionMethod_metadata)

    _SetPropulsionMethod_metadata = { "name" : "SetPropulsionMethod",
            "arg_types" : (agcom.LONG, agcom.BSTR,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAPropulsionMethod), agmarshall.BSTR_arg,) }
    def SetPropulsionMethod(self, propulsionMethod:"AgEVAPropulsionMethod", value:str) -> None:
        """Sets the propulsion type and associated engine/thruster set."""
        return self._intf.invoke(IAgVAManeuver._metadata, IAgVAManeuver._SetPropulsionMethod_metadata, propulsionMethod, value)

    _get_PropulsionMethodValue_metadata = { "name" : "PropulsionMethodValue",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def PropulsionMethodValue(self) -> str:
        """The specific engine model or thruster set to be used for the maneuver."""
        return self._intf.get_property(IAgVAManeuver._metadata, IAgVAManeuver._get_PropulsionMethodValue_metadata)


agcls.AgClassCatalog.add_catalog_entry("{C70B417E-D1C4-40E8-8CDC-67EDED0B56AE}", IAgVAManeuver)
agcls.AgTypeNameMap["IAgVAManeuver"] = IAgVAManeuver

class IAgVADisplaySystem(object):
    """The launch coordinate system."""
    _num_methods = 0
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{90BFC47C-35B5-4169-9543-36C65DFABB6A}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : {  }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVADisplaySystem._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVADisplaySystem from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVADisplaySystem.__dict__ and type(IAgVADisplaySystem.__dict__[attrname]) == property:
            return IAgVADisplaySystem.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVADisplaySystem.")
    

agcls.AgClassCatalog.add_catalog_entry("{90BFC47C-35B5-4169-9543-36C65DFABB6A}", IAgVADisplaySystem)
agcls.AgTypeNameMap["IAgVADisplaySystem"] = IAgVADisplaySystem

class IAgVABurnout(object):
    """The burnout point reference frame."""
    _num_methods = 0
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{0BEFC7BA-14CF-422D-BD67-352572ABB55F}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : {  }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVABurnout._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVABurnout from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVABurnout.__dict__ and type(IAgVABurnout.__dict__[attrname]) == property:
            return IAgVABurnout.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVABurnout.")
    

agcls.AgClassCatalog.add_catalog_entry("{0BEFC7BA-14CF-422D-BD67-352572ABB55F}", IAgVABurnout)
agcls.AgTypeNameMap["IAgVABurnout"] = IAgVABurnout

class IAgVAScriptingSegment(object):
    """Object properties for scripting options."""
    _num_methods = 12
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{08B0F341-8A54-43B8-A0B9-50A462E70C71}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_ComponentName" : 1,
                             "set_ComponentName" : 2,
                             "get_Attribute" : 3,
                             "set_Attribute" : 4,
                             "get_Unit" : 5,
                             "set_Unit" : 6,
                             "get_AvailableAttributeValues" : 7,
                             "get_ReadOnlyProperty" : 8,
                             "set_ReadOnlyProperty" : 9,
                             "get_ObjectName" : 10,
                             "set_ObjectName" : 11,
                             "get_AvailableObjectNames" : 12, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAScriptingSegment._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAScriptingSegment from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAScriptingSegment.__dict__ and type(IAgVAScriptingSegment.__dict__[attrname]) == property:
            return IAgVAScriptingSegment.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAScriptingSegment.")
    
    _get_ComponentName_metadata = { "name" : "ComponentName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def ComponentName(self) -> str:
        """The name of the component."""
        return self._intf.get_property(IAgVAScriptingSegment._metadata, IAgVAScriptingSegment._get_ComponentName_metadata)

    _set_ComponentName_metadata = { "name" : "ComponentName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @ComponentName.setter
    def ComponentName(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAScriptingSegment._metadata, IAgVAScriptingSegment._set_ComponentName_metadata, inVal)

    _get_Attribute_metadata = { "name" : "Attribute",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def Attribute(self) -> str:
        """The name of the attribute."""
        return self._intf.get_property(IAgVAScriptingSegment._metadata, IAgVAScriptingSegment._get_Attribute_metadata)

    _set_Attribute_metadata = { "name" : "Attribute",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @Attribute.setter
    def Attribute(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAScriptingSegment._metadata, IAgVAScriptingSegment._set_Attribute_metadata, inVal)

    _get_Unit_metadata = { "name" : "Unit",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def Unit(self) -> str:
        """The unit."""
        return self._intf.get_property(IAgVAScriptingSegment._metadata, IAgVAScriptingSegment._get_Unit_metadata)

    _set_Unit_metadata = { "name" : "Unit",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @Unit.setter
    def Unit(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAScriptingSegment._metadata, IAgVAScriptingSegment._set_Unit_metadata, inVal)

    _get_AvailableAttributeValues_metadata = { "name" : "AvailableAttributeValues",
            "arg_types" : (POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg,) }
    @property
    def AvailableAttributeValues(self) -> list:
        """Returns a list of available attribute values."""
        return self._intf.get_property(IAgVAScriptingSegment._metadata, IAgVAScriptingSegment._get_AvailableAttributeValues_metadata)

    _get_ReadOnlyProperty_metadata = { "name" : "ReadOnlyProperty",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def ReadOnlyProperty(self) -> bool:
        """True if it is a read-only property."""
        return self._intf.get_property(IAgVAScriptingSegment._metadata, IAgVAScriptingSegment._get_ReadOnlyProperty_metadata)

    _set_ReadOnlyProperty_metadata = { "name" : "ReadOnlyProperty",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @ReadOnlyProperty.setter
    def ReadOnlyProperty(self, inVal:bool) -> None:
        return self._intf.set_property(IAgVAScriptingSegment._metadata, IAgVAScriptingSegment._set_ReadOnlyProperty_metadata, inVal)

    _get_ObjectName_metadata = { "name" : "ObjectName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def ObjectName(self) -> str:
        """The profile/segment that contains the attribute."""
        return self._intf.get_property(IAgVAScriptingSegment._metadata, IAgVAScriptingSegment._get_ObjectName_metadata)

    _set_ObjectName_metadata = { "name" : "ObjectName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @ObjectName.setter
    def ObjectName(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAScriptingSegment._metadata, IAgVAScriptingSegment._set_ObjectName_metadata, inVal)

    _get_AvailableObjectNames_metadata = { "name" : "AvailableObjectNames",
            "arg_types" : (POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg,) }
    @property
    def AvailableObjectNames(self) -> list:
        """Returns a list of available profile/segment names."""
        return self._intf.get_property(IAgVAScriptingSegment._metadata, IAgVAScriptingSegment._get_AvailableObjectNames_metadata)


agcls.AgClassCatalog.add_catalog_entry("{08B0F341-8A54-43B8-A0B9-50A462E70C71}", IAgVAScriptingSegment)
agcls.AgTypeNameMap["IAgVAScriptingSegment"] = IAgVAScriptingSegment

class IAgVAScriptingSegmentCollection(object):
    """The list of object properties that the script can interact with."""
    _num_methods = 12
    _vtable_offset = IDispatch._vtable_offset + IDispatch._num_methods
    _metadata = {
        "uuid" : "{07549510-B2B9-4AA0-A9AA-E2FDFBC9BBEE}",
        "vtable_reference" : IDispatch._vtable_offset + IDispatch._num_methods - 1,
        "method_offsets" : { "Item" : 1,
                             "Add" : 2,
                             "Remove" : 3,
                             "RemoveAll" : 4,
                             "get__NewEnum" : 5,
                             "get_Count" : 6,
                             "get_ProvideRuntimeTypeInfo" : 7,
                             "Cut" : 8,
                             "Paste" : 9,
                             "InsertCopy" : 10,
                             "GetItemByIndex" : 11,
                             "GetItemByName" : 12, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAScriptingSegmentCollection._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAScriptingSegmentCollection from source object.")
        self.__dict__["_enumerator"] = None
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAScriptingSegmentCollection.__dict__ and type(IAgVAScriptingSegmentCollection.__dict__[attrname]) == property:
            return IAgVAScriptingSegmentCollection.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAScriptingSegmentCollection.")
    def __iter__(self):
        self.__dict__["_enumerator"] = self._NewEnum
        self._enumerator.reset()
        return self
    def __next__(self) -> "IAgVAScriptingSegment":
        if self._enumerator is None:
            raise StopIteration
        nextval = self._enumerator.next()
        if nextval is None:
            raise StopIteration
        return nextval
    
    _Item_metadata = { "name" : "Item",
            "arg_types" : (agcom.VARIANT, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.VARIANT_arg, agmarshall.AgInterface_out_arg,) }
    def Item(self, indexOrName:typing.Any) -> "IAgVAScriptingSegment":
        """Allows you to iterate through the collection."""
        return self._intf.invoke(IAgVAScriptingSegmentCollection._metadata, IAgVAScriptingSegmentCollection._Item_metadata, indexOrName, out_arg())

    _Add_metadata = { "name" : "Add",
            "arg_types" : (agcom.BSTR, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.AgInterface_out_arg,) }
    def Add(self, componentName:str) -> "IAgVAScriptingSegment":
        """Adds an object property to the collection."""
        return self._intf.invoke(IAgVAScriptingSegmentCollection._metadata, IAgVAScriptingSegmentCollection._Add_metadata, componentName, out_arg())

    _Remove_metadata = { "name" : "Remove",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    def Remove(self, indexOrName:typing.Any) -> None:
        """Removes a object property."""
        return self._intf.invoke(IAgVAScriptingSegmentCollection._metadata, IAgVAScriptingSegmentCollection._Remove_metadata, indexOrName)

    _RemoveAll_metadata = { "name" : "RemoveAll",
            "arg_types" : (),
            "marshallers" : () }
    def RemoveAll(self) -> None:
        """Removes all object properties."""
        return self._intf.invoke(IAgVAScriptingSegmentCollection._metadata, IAgVAScriptingSegmentCollection._RemoveAll_metadata, )

    _get__NewEnum_metadata = { "name" : "_NewEnum",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.IEnumVARIANT_arg,) }
    @property
    def _NewEnum(self) -> enumerator_proxy:
        """Allows you to enumerate through the collection."""
        return self._intf.get_property(IAgVAScriptingSegmentCollection._metadata, IAgVAScriptingSegmentCollection._get__NewEnum_metadata)

    _get_Count_metadata = { "name" : "Count",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.LONG_arg,) }
    @property
    def Count(self) -> int:
        """Returns the size of the collection."""
        return self._intf.get_property(IAgVAScriptingSegmentCollection._metadata, IAgVAScriptingSegmentCollection._get_Count_metadata)

    _get_ProvideRuntimeTypeInfo_metadata = { "name" : "ProvideRuntimeTypeInfo",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def ProvideRuntimeTypeInfo(self) -> "IAgRuntimeTypeInfo":
        """Returns the IAgRuntimeTypeInfo interface to access properties at runtime."""
        return self._intf.get_property(IAgVAScriptingSegmentCollection._metadata, IAgVAScriptingSegmentCollection._get_ProvideRuntimeTypeInfo_metadata)

    _Cut_metadata = { "name" : "Cut",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    def Cut(self, indexOrName:typing.Any) -> None:
        """Copies the object property into the clipboard and removes the object property from the list."""
        return self._intf.invoke(IAgVAScriptingSegmentCollection._metadata, IAgVAScriptingSegmentCollection._Cut_metadata, indexOrName)

    _Paste_metadata = { "name" : "Paste",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    def Paste(self) -> "IAgVAScriptingSegment":
        """Pastes the object property from the clipboard and inserts into the list."""
        return self._intf.invoke(IAgVAScriptingSegmentCollection._metadata, IAgVAScriptingSegmentCollection._Paste_metadata, out_arg())

    _InsertCopy_metadata = { "name" : "InsertCopy",
            "arg_types" : (agcom.PVOID, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_in_arg("IAgVAScriptingSegment"), agmarshall.AgInterface_out_arg,) }
    def InsertCopy(self, objProperty:"IAgVAScriptingSegment") -> "IAgVAScriptingSegment":
        """Copies the object property and inserts the copy into the list."""
        return self._intf.invoke(IAgVAScriptingSegmentCollection._metadata, IAgVAScriptingSegmentCollection._InsertCopy_metadata, objProperty, out_arg())

    _GetItemByIndex_metadata = { "name" : "GetItemByIndex",
            "arg_types" : (agcom.INT, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.INT_arg, agmarshall.AgInterface_out_arg,) }
    def GetItemByIndex(self, index:int) -> "IAgVAScriptingSegment":
        """Retrieves a scripting segment in the collection by index."""
        return self._intf.invoke(IAgVAScriptingSegmentCollection._metadata, IAgVAScriptingSegmentCollection._GetItemByIndex_metadata, index, out_arg())

    _GetItemByName_metadata = { "name" : "GetItemByName",
            "arg_types" : (agcom.BSTR, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.AgInterface_out_arg,) }
    def GetItemByName(self, name:str) -> "IAgVAScriptingSegment":
        """Retrieves a scripting segment in the collection by name."""
        return self._intf.invoke(IAgVAScriptingSegmentCollection._metadata, IAgVAScriptingSegmentCollection._GetItemByName_metadata, name, out_arg())

    __getitem__ = Item



agcls.AgClassCatalog.add_catalog_entry("{07549510-B2B9-4AA0-A9AA-E2FDFBC9BBEE}", IAgVAScriptingSegmentCollection)
agcls.AgTypeNameMap["IAgVAScriptingSegmentCollection"] = IAgVAScriptingSegmentCollection

class IAgVAScriptingParameterEnumerationChoice(object):
    """Enumeration choice."""
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{DED30CDF-730F-4125-AEB8-6A668248B484}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_Name" : 1,
                             "set_Name" : 2,
                             "get_Value" : 3,
                             "set_Value" : 4, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAScriptingParameterEnumerationChoice._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAScriptingParameterEnumerationChoice from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAScriptingParameterEnumerationChoice.__dict__ and type(IAgVAScriptingParameterEnumerationChoice.__dict__[attrname]) == property:
            return IAgVAScriptingParameterEnumerationChoice.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAScriptingParameterEnumerationChoice.")
    
    _get_Name_metadata = { "name" : "Name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def Name(self) -> str:
        """Name of the enumeration"""
        return self._intf.get_property(IAgVAScriptingParameterEnumerationChoice._metadata, IAgVAScriptingParameterEnumerationChoice._get_Name_metadata)

    _set_Name_metadata = { "name" : "Name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @Name.setter
    def Name(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAScriptingParameterEnumerationChoice._metadata, IAgVAScriptingParameterEnumerationChoice._set_Name_metadata, inVal)

    _get_Value_metadata = { "name" : "Value",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.LONG_arg,) }
    @property
    def Value(self) -> int:
        """Integer value of the enumeration"""
        return self._intf.get_property(IAgVAScriptingParameterEnumerationChoice._metadata, IAgVAScriptingParameterEnumerationChoice._get_Value_metadata)

    _set_Value_metadata = { "name" : "Value",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.LONG_arg,) }
    @Value.setter
    def Value(self, inVal:int) -> None:
        return self._intf.set_property(IAgVAScriptingParameterEnumerationChoice._metadata, IAgVAScriptingParameterEnumerationChoice._set_Value_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{DED30CDF-730F-4125-AEB8-6A668248B484}", IAgVAScriptingParameterEnumerationChoice)
agcls.AgTypeNameMap["IAgVAScriptingParameterEnumerationChoice"] = IAgVAScriptingParameterEnumerationChoice

class IAgVAScriptingParameterEnumerationChoiceCollection(object):
    """The list of enumeration choices available when parameter type is Enumeration."""
    _num_methods = 11
    _vtable_offset = IDispatch._vtable_offset + IDispatch._num_methods
    _metadata = {
        "uuid" : "{FF132A94-418D-41DB-8AA2-9DA77625A1A0}",
        "vtable_reference" : IDispatch._vtable_offset + IDispatch._num_methods - 1,
        "method_offsets" : { "Item" : 1,
                             "Add" : 2,
                             "Remove" : 3,
                             "get__NewEnum" : 4,
                             "get_Count" : 5,
                             "Cut" : 6,
                             "Paste" : 7,
                             "InsertCopy" : 8,
                             "get_ProvideRuntimeTypeInfo" : 9,
                             "GetItemByIndex" : 10,
                             "GetItemByName" : 11, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAScriptingParameterEnumerationChoiceCollection._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAScriptingParameterEnumerationChoiceCollection from source object.")
        self.__dict__["_enumerator"] = None
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAScriptingParameterEnumerationChoiceCollection.__dict__ and type(IAgVAScriptingParameterEnumerationChoiceCollection.__dict__[attrname]) == property:
            return IAgVAScriptingParameterEnumerationChoiceCollection.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAScriptingParameterEnumerationChoiceCollection.")
    def __iter__(self):
        self.__dict__["_enumerator"] = self._NewEnum
        self._enumerator.reset()
        return self
    def __next__(self) -> "IAgVAScriptingParameterEnumerationChoice":
        if self._enumerator is None:
            raise StopIteration
        nextval = self._enumerator.next()
        if nextval is None:
            raise StopIteration
        return nextval
    
    _Item_metadata = { "name" : "Item",
            "arg_types" : (agcom.VARIANT, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.VARIANT_arg, agmarshall.AgInterface_out_arg,) }
    def Item(self, indexOrName:typing.Any) -> "IAgVAScriptingParameterEnumerationChoice":
        """Allows you to iterate through the collection."""
        return self._intf.invoke(IAgVAScriptingParameterEnumerationChoiceCollection._metadata, IAgVAScriptingParameterEnumerationChoiceCollection._Item_metadata, indexOrName, out_arg())

    _Add_metadata = { "name" : "Add",
            "arg_types" : (agcom.BSTR, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.AgInterface_out_arg,) }
    def Add(self, choiceName:str) -> "IAgVAScriptingParameterEnumerationChoice":
        """Adds an enumeration choice to the collection."""
        return self._intf.invoke(IAgVAScriptingParameterEnumerationChoiceCollection._metadata, IAgVAScriptingParameterEnumerationChoiceCollection._Add_metadata, choiceName, out_arg())

    _Remove_metadata = { "name" : "Remove",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    def Remove(self, indexOrName:typing.Any) -> None:
        """Removes an enumeration choice."""
        return self._intf.invoke(IAgVAScriptingParameterEnumerationChoiceCollection._metadata, IAgVAScriptingParameterEnumerationChoiceCollection._Remove_metadata, indexOrName)

    _get__NewEnum_metadata = { "name" : "_NewEnum",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.IEnumVARIANT_arg,) }
    @property
    def _NewEnum(self) -> enumerator_proxy:
        """Allows you to enumerate through the collection."""
        return self._intf.get_property(IAgVAScriptingParameterEnumerationChoiceCollection._metadata, IAgVAScriptingParameterEnumerationChoiceCollection._get__NewEnum_metadata)

    _get_Count_metadata = { "name" : "Count",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.LONG_arg,) }
    @property
    def Count(self) -> int:
        """Returns the size of the collection."""
        return self._intf.get_property(IAgVAScriptingParameterEnumerationChoiceCollection._metadata, IAgVAScriptingParameterEnumerationChoiceCollection._get_Count_metadata)

    _Cut_metadata = { "name" : "Cut",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    def Cut(self, indexOrName:typing.Any) -> None:
        """Copies the enumeration choice into the clipboard and removes the enumeration choice from the list."""
        return self._intf.invoke(IAgVAScriptingParameterEnumerationChoiceCollection._metadata, IAgVAScriptingParameterEnumerationChoiceCollection._Cut_metadata, indexOrName)

    _Paste_metadata = { "name" : "Paste",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    def Paste(self) -> "IAgVAScriptingParameterEnumerationChoice":
        """Pastes the enumeration choice from the clipboard and inserts into the list."""
        return self._intf.invoke(IAgVAScriptingParameterEnumerationChoiceCollection._metadata, IAgVAScriptingParameterEnumerationChoiceCollection._Paste_metadata, out_arg())

    _InsertCopy_metadata = { "name" : "InsertCopy",
            "arg_types" : (agcom.PVOID, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_in_arg("IAgVAScriptingParameterEnumerationChoice"), agmarshall.AgInterface_out_arg,) }
    def InsertCopy(self, choice:"IAgVAScriptingParameterEnumerationChoice") -> "IAgVAScriptingParameterEnumerationChoice":
        """Copies the enumeration choice and inserts the copy into the list."""
        return self._intf.invoke(IAgVAScriptingParameterEnumerationChoiceCollection._metadata, IAgVAScriptingParameterEnumerationChoiceCollection._InsertCopy_metadata, choice, out_arg())

    _get_ProvideRuntimeTypeInfo_metadata = { "name" : "ProvideRuntimeTypeInfo",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def ProvideRuntimeTypeInfo(self) -> "IAgRuntimeTypeInfo":
        """Returns the IAgRuntimeTypeInfo interface to access properties at runtime."""
        return self._intf.get_property(IAgVAScriptingParameterEnumerationChoiceCollection._metadata, IAgVAScriptingParameterEnumerationChoiceCollection._get_ProvideRuntimeTypeInfo_metadata)

    _GetItemByIndex_metadata = { "name" : "GetItemByIndex",
            "arg_types" : (agcom.INT, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.INT_arg, agmarshall.AgInterface_out_arg,) }
    def GetItemByIndex(self, index:int) -> "IAgVAScriptingParameterEnumerationChoice":
        """Retrieves a scripting parameter enumeration choice in the collection by index."""
        return self._intf.invoke(IAgVAScriptingParameterEnumerationChoiceCollection._metadata, IAgVAScriptingParameterEnumerationChoiceCollection._GetItemByIndex_metadata, index, out_arg())

    _GetItemByName_metadata = { "name" : "GetItemByName",
            "arg_types" : (agcom.BSTR, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.AgInterface_out_arg,) }
    def GetItemByName(self, name:str) -> "IAgVAScriptingParameterEnumerationChoice":
        """Retrieves a scripting parameter enumeration choice in the collection by name."""
        return self._intf.invoke(IAgVAScriptingParameterEnumerationChoiceCollection._metadata, IAgVAScriptingParameterEnumerationChoiceCollection._GetItemByName_metadata, name, out_arg())

    __getitem__ = Item



agcls.AgClassCatalog.add_catalog_entry("{FF132A94-418D-41DB-8AA2-9DA77625A1A0}", IAgVAScriptingParameterEnumerationChoiceCollection)
agcls.AgTypeNameMap["IAgVAScriptingParameterEnumerationChoiceCollection"] = IAgVAScriptingParameterEnumerationChoiceCollection

class IAgVAScriptingParameter(object):
    """Parameter properties for scripting options."""
    _num_methods = 23
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{9E855CDD-3359-4D5D-AE7D-5C260E0EE4B3}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_Name" : 1,
                             "set_Name" : 2,
                             "get_ParamValue" : 3,
                             "set_ParamValue" : 4,
                             "get_Unit" : 5,
                             "set_Unit" : 6,
                             "get_Type" : 7,
                             "set_Type" : 8,
                             "get_InheritValue" : 9,
                             "set_InheritValue" : 10,
                             "get_UserComment" : 11,
                             "set_UserComment" : 12,
                             "get_Dimension" : 13,
                             "set_Dimension" : 14,
                             "get_EnumerationChoices" : 15,
                             "get_UseMinValue" : 16,
                             "set_UseMinValue" : 17,
                             "get_MinValue" : 18,
                             "set_MinValue" : 19,
                             "get_UseMaxValue" : 20,
                             "set_UseMaxValue" : 21,
                             "get_MaxValue" : 22,
                             "set_MaxValue" : 23, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAScriptingParameter._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAScriptingParameter from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAScriptingParameter.__dict__ and type(IAgVAScriptingParameter.__dict__[attrname]) == property:
            return IAgVAScriptingParameter.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAScriptingParameter.")
    
    _get_Name_metadata = { "name" : "Name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def Name(self) -> str:
        """The parameter name."""
        return self._intf.get_property(IAgVAScriptingParameter._metadata, IAgVAScriptingParameter._get_Name_metadata)

    _set_Name_metadata = { "name" : "Name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @Name.setter
    def Name(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAScriptingParameter._metadata, IAgVAScriptingParameter._set_Name_metadata, inVal)

    _get_ParamValue_metadata = { "name" : "ParamValue",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def ParamValue(self) -> typing.Any:
        """The parameter value.  Set in Object Model unit preference for selected dimension."""
        return self._intf.get_property(IAgVAScriptingParameter._metadata, IAgVAScriptingParameter._get_ParamValue_metadata)

    _set_ParamValue_metadata = { "name" : "ParamValue",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @ParamValue.setter
    def ParamValue(self, inVal:typing.Any) -> None:
        return self._intf.set_property(IAgVAScriptingParameter._metadata, IAgVAScriptingParameter._set_ParamValue_metadata, inVal)

    _get_Unit_metadata = { "name" : "Unit",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def Unit(self) -> str:
        """The parameter's unit that is used to represent ParamValue during the scripting tool script execution. ParamValue is set in Object Model unit preference for selected dimension and not this unit. As with other units configurable in the desktop environment for STK, this unit is separate (and may differ) from the Object Model unit preference."""
        return self._intf.get_property(IAgVAScriptingParameter._metadata, IAgVAScriptingParameter._get_Unit_metadata)

    _set_Unit_metadata = { "name" : "Unit",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @Unit.setter
    def Unit(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAScriptingParameter._metadata, IAgVAScriptingParameter._set_Unit_metadata, inVal)

    _get_Type_metadata = { "name" : "Type",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAScriptingParameterType),) }
    @property
    def Type(self) -> "AgEVAScriptingParameterType":
        """The parameter's type."""
        return self._intf.get_property(IAgVAScriptingParameter._metadata, IAgVAScriptingParameter._get_Type_metadata)

    _set_Type_metadata = { "name" : "Type",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAScriptingParameterType),) }
    @Type.setter
    def Type(self, inVal:"AgEVAScriptingParameterType") -> None:
        return self._intf.set_property(IAgVAScriptingParameter._metadata, IAgVAScriptingParameter._set_Type_metadata, inVal)

    _get_InheritValue_metadata = { "name" : "InheritValue",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def InheritValue(self) -> bool:
        """If true, parameter value will be inherited from previous profile's value."""
        return self._intf.get_property(IAgVAScriptingParameter._metadata, IAgVAScriptingParameter._get_InheritValue_metadata)

    _set_InheritValue_metadata = { "name" : "InheritValue",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @InheritValue.setter
    def InheritValue(self, inVal:bool) -> None:
        return self._intf.set_property(IAgVAScriptingParameter._metadata, IAgVAScriptingParameter._set_InheritValue_metadata, inVal)

    _get_UserComment_metadata = { "name" : "UserComment",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def UserComment(self) -> str:
        """The parameter's comment."""
        return self._intf.get_property(IAgVAScriptingParameter._metadata, IAgVAScriptingParameter._get_UserComment_metadata)

    _set_UserComment_metadata = { "name" : "UserComment",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @UserComment.setter
    def UserComment(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAScriptingParameter._metadata, IAgVAScriptingParameter._set_UserComment_metadata, inVal)

    _get_Dimension_metadata = { "name" : "Dimension",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def Dimension(self) -> str:
        """The parameter's dimension."""
        return self._intf.get_property(IAgVAScriptingParameter._metadata, IAgVAScriptingParameter._get_Dimension_metadata)

    _set_Dimension_metadata = { "name" : "Dimension",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @Dimension.setter
    def Dimension(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAScriptingParameter._metadata, IAgVAScriptingParameter._set_Dimension_metadata, inVal)

    _get_EnumerationChoices_metadata = { "name" : "EnumerationChoices",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def EnumerationChoices(self) -> "IAgVAScriptingParameterEnumerationChoiceCollection":
        """The collection of enumerations to use when parameter type is eVAScriptingParameterTypeEnumeration."""
        return self._intf.get_property(IAgVAScriptingParameter._metadata, IAgVAScriptingParameter._get_EnumerationChoices_metadata)

    _get_UseMinValue_metadata = { "name" : "UseMinValue",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def UseMinValue(self) -> bool:
        """If true, a minimum value will be enforced for the parameter value"""
        return self._intf.get_property(IAgVAScriptingParameter._metadata, IAgVAScriptingParameter._get_UseMinValue_metadata)

    _set_UseMinValue_metadata = { "name" : "UseMinValue",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @UseMinValue.setter
    def UseMinValue(self, inVal:bool) -> None:
        return self._intf.set_property(IAgVAScriptingParameter._metadata, IAgVAScriptingParameter._set_UseMinValue_metadata, inVal)

    _get_MinValue_metadata = { "name" : "MinValue",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def MinValue(self) -> typing.Any:
        """The minimum value permitted for the parameter value"""
        return self._intf.get_property(IAgVAScriptingParameter._metadata, IAgVAScriptingParameter._get_MinValue_metadata)

    _set_MinValue_metadata = { "name" : "MinValue",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @MinValue.setter
    def MinValue(self, inVal:typing.Any) -> None:
        return self._intf.set_property(IAgVAScriptingParameter._metadata, IAgVAScriptingParameter._set_MinValue_metadata, inVal)

    _get_UseMaxValue_metadata = { "name" : "UseMaxValue",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def UseMaxValue(self) -> bool:
        """If true, a maximum value will be enforced for the parameter value"""
        return self._intf.get_property(IAgVAScriptingParameter._metadata, IAgVAScriptingParameter._get_UseMaxValue_metadata)

    _set_UseMaxValue_metadata = { "name" : "UseMaxValue",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @UseMaxValue.setter
    def UseMaxValue(self, inVal:bool) -> None:
        return self._intf.set_property(IAgVAScriptingParameter._metadata, IAgVAScriptingParameter._set_UseMaxValue_metadata, inVal)

    _get_MaxValue_metadata = { "name" : "MaxValue",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def MaxValue(self) -> typing.Any:
        """The maximum value permitted for the parameter value"""
        return self._intf.get_property(IAgVAScriptingParameter._metadata, IAgVAScriptingParameter._get_MaxValue_metadata)

    _set_MaxValue_metadata = { "name" : "MaxValue",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @MaxValue.setter
    def MaxValue(self, inVal:typing.Any) -> None:
        return self._intf.set_property(IAgVAScriptingParameter._metadata, IAgVAScriptingParameter._set_MaxValue_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{9E855CDD-3359-4D5D-AE7D-5C260E0EE4B3}", IAgVAScriptingParameter)
agcls.AgTypeNameMap["IAgVAScriptingParameter"] = IAgVAScriptingParameter

class IAgVAScriptingParameterCollection(object):
    """The list of parameters that the script can interact with."""
    _num_methods = 12
    _vtable_offset = IDispatch._vtable_offset + IDispatch._num_methods
    _metadata = {
        "uuid" : "{57FC26AA-550D-4408-844E-24F983C94671}",
        "vtable_reference" : IDispatch._vtable_offset + IDispatch._num_methods - 1,
        "method_offsets" : { "Item" : 1,
                             "Add" : 2,
                             "Remove" : 3,
                             "RemoveAll" : 4,
                             "get__NewEnum" : 5,
                             "get_Count" : 6,
                             "get_ProvideRuntimeTypeInfo" : 7,
                             "Cut" : 8,
                             "Paste" : 9,
                             "InsertCopy" : 10,
                             "GetItemByIndex" : 11,
                             "GetItemByName" : 12, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAScriptingParameterCollection._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAScriptingParameterCollection from source object.")
        self.__dict__["_enumerator"] = None
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAScriptingParameterCollection.__dict__ and type(IAgVAScriptingParameterCollection.__dict__[attrname]) == property:
            return IAgVAScriptingParameterCollection.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAScriptingParameterCollection.")
    def __iter__(self):
        self.__dict__["_enumerator"] = self._NewEnum
        self._enumerator.reset()
        return self
    def __next__(self) -> "IAgVAScriptingParameter":
        if self._enumerator is None:
            raise StopIteration
        nextval = self._enumerator.next()
        if nextval is None:
            raise StopIteration
        return nextval
    
    _Item_metadata = { "name" : "Item",
            "arg_types" : (agcom.VARIANT, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.VARIANT_arg, agmarshall.AgInterface_out_arg,) }
    def Item(self, indexOrName:typing.Any) -> "IAgVAScriptingParameter":
        """Allows you to iterate through the collection."""
        return self._intf.invoke(IAgVAScriptingParameterCollection._metadata, IAgVAScriptingParameterCollection._Item_metadata, indexOrName, out_arg())

    _Add_metadata = { "name" : "Add",
            "arg_types" : (agcom.BSTR, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.AgInterface_out_arg,) }
    def Add(self, parameterName:str) -> "IAgVAScriptingParameter":
        """Adds a parameter to the collection."""
        return self._intf.invoke(IAgVAScriptingParameterCollection._metadata, IAgVAScriptingParameterCollection._Add_metadata, parameterName, out_arg())

    _Remove_metadata = { "name" : "Remove",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    def Remove(self, indexOrName:typing.Any) -> None:
        """Removes a parameter."""
        return self._intf.invoke(IAgVAScriptingParameterCollection._metadata, IAgVAScriptingParameterCollection._Remove_metadata, indexOrName)

    _RemoveAll_metadata = { "name" : "RemoveAll",
            "arg_types" : (),
            "marshallers" : () }
    def RemoveAll(self) -> None:
        """Removes all parameters."""
        return self._intf.invoke(IAgVAScriptingParameterCollection._metadata, IAgVAScriptingParameterCollection._RemoveAll_metadata, )

    _get__NewEnum_metadata = { "name" : "_NewEnum",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.IEnumVARIANT_arg,) }
    @property
    def _NewEnum(self) -> enumerator_proxy:
        """Allows you to enumerate through the collection."""
        return self._intf.get_property(IAgVAScriptingParameterCollection._metadata, IAgVAScriptingParameterCollection._get__NewEnum_metadata)

    _get_Count_metadata = { "name" : "Count",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.LONG_arg,) }
    @property
    def Count(self) -> int:
        """Returns the size of the collection."""
        return self._intf.get_property(IAgVAScriptingParameterCollection._metadata, IAgVAScriptingParameterCollection._get_Count_metadata)

    _get_ProvideRuntimeTypeInfo_metadata = { "name" : "ProvideRuntimeTypeInfo",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def ProvideRuntimeTypeInfo(self) -> "IAgRuntimeTypeInfo":
        """Returns the IAgRuntimeTypeInfo interface to access properties at runtime."""
        return self._intf.get_property(IAgVAScriptingParameterCollection._metadata, IAgVAScriptingParameterCollection._get_ProvideRuntimeTypeInfo_metadata)

    _Cut_metadata = { "name" : "Cut",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    def Cut(self, indexOrName:typing.Any) -> None:
        """Copies the parameter into the clipboard and removes the parameter from the list."""
        return self._intf.invoke(IAgVAScriptingParameterCollection._metadata, IAgVAScriptingParameterCollection._Cut_metadata, indexOrName)

    _Paste_metadata = { "name" : "Paste",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    def Paste(self) -> "IAgVAScriptingParameter":
        """Pastes the parameter from the clipboard and inserts into the list."""
        return self._intf.invoke(IAgVAScriptingParameterCollection._metadata, IAgVAScriptingParameterCollection._Paste_metadata, out_arg())

    _InsertCopy_metadata = { "name" : "InsertCopy",
            "arg_types" : (agcom.PVOID, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_in_arg("IAgVAScriptingParameter"), agmarshall.AgInterface_out_arg,) }
    def InsertCopy(self, parameter:"IAgVAScriptingParameter") -> "IAgVAScriptingParameter":
        """Copies the parameter and inserts the copy into the list."""
        return self._intf.invoke(IAgVAScriptingParameterCollection._metadata, IAgVAScriptingParameterCollection._InsertCopy_metadata, parameter, out_arg())

    _GetItemByIndex_metadata = { "name" : "GetItemByIndex",
            "arg_types" : (agcom.INT, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.INT_arg, agmarshall.AgInterface_out_arg,) }
    def GetItemByIndex(self, index:int) -> "IAgVAScriptingParameter":
        """Retrieves a scripting parameter in the collection by index."""
        return self._intf.invoke(IAgVAScriptingParameterCollection._metadata, IAgVAScriptingParameterCollection._GetItemByIndex_metadata, index, out_arg())

    _GetItemByName_metadata = { "name" : "GetItemByName",
            "arg_types" : (agcom.BSTR, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.AgInterface_out_arg,) }
    def GetItemByName(self, name:str) -> "IAgVAScriptingParameter":
        """Retrieves a scripting parameter in the collection by name."""
        return self._intf.invoke(IAgVAScriptingParameterCollection._metadata, IAgVAScriptingParameterCollection._GetItemByName_metadata, name, out_arg())

    __getitem__ = Item



agcls.AgClassCatalog.add_catalog_entry("{57FC26AA-550D-4408-844E-24F983C94671}", IAgVAScriptingParameterCollection)
agcls.AgTypeNameMap["IAgVAScriptingParameterCollection"] = IAgVAScriptingParameterCollection

class IAgVAScriptingCalcObject(object):
    """Calc Object properties for scripting options."""
    _num_methods = 10
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{6DDE7375-1872-436C-B2BE-ADBF1881FFF0}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_ComponentName" : 1,
                             "set_ComponentName" : 2,
                             "get_CalcObjectName" : 3,
                             "set_CalcObjectName" : 4,
                             "get_CalcObject" : 5,
                             "set_CalcObject" : 6,
                             "get_Unit" : 7,
                             "set_Unit" : 8,
                             "CopyCalcObjectToClipboard" : 9,
                             "PasteCalcObjectFromClipboard" : 10, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAScriptingCalcObject._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAScriptingCalcObject from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAScriptingCalcObject.__dict__ and type(IAgVAScriptingCalcObject.__dict__[attrname]) == property:
            return IAgVAScriptingCalcObject.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAScriptingCalcObject.")
    
    _get_ComponentName_metadata = { "name" : "ComponentName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def ComponentName(self) -> str:
        """The name of the component."""
        return self._intf.get_property(IAgVAScriptingCalcObject._metadata, IAgVAScriptingCalcObject._get_ComponentName_metadata)

    _set_ComponentName_metadata = { "name" : "ComponentName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @ComponentName.setter
    def ComponentName(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAScriptingCalcObject._metadata, IAgVAScriptingCalcObject._set_ComponentName_metadata, inVal)

    _get_CalcObjectName_metadata = { "name" : "CalcObjectName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def CalcObjectName(self) -> str:
        """The name of the calculation object."""
        return self._intf.get_property(IAgVAScriptingCalcObject._metadata, IAgVAScriptingCalcObject._get_CalcObjectName_metadata)

    _set_CalcObjectName_metadata = { "name" : "CalcObjectName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @CalcObjectName.setter
    def CalcObjectName(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAScriptingCalcObject._metadata, IAgVAScriptingCalcObject._set_CalcObjectName_metadata, inVal)

    _get_CalcObject_metadata = { "name" : "CalcObject",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def CalcObject(self) -> "IAgComponentInfo":
        """The calculation object type."""
        return self._intf.get_property(IAgVAScriptingCalcObject._metadata, IAgVAScriptingCalcObject._get_CalcObject_metadata)

    _set_CalcObject_metadata = { "name" : "CalcObject",
            "arg_types" : (agcom.PVOID,),
            "marshallers" : (agmarshall.AgInterface_in_arg("IAgComponentInfo"),) }
    @CalcObject.setter
    def CalcObject(self, inVal:"IAgComponentInfo") -> None:
        return self._intf.set_property(IAgVAScriptingCalcObject._metadata, IAgVAScriptingCalcObject._set_CalcObject_metadata, inVal)

    _get_Unit_metadata = { "name" : "Unit",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def Unit(self) -> str:
        """The unit."""
        return self._intf.get_property(IAgVAScriptingCalcObject._metadata, IAgVAScriptingCalcObject._get_Unit_metadata)

    _set_Unit_metadata = { "name" : "Unit",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @Unit.setter
    def Unit(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAScriptingCalcObject._metadata, IAgVAScriptingCalcObject._set_Unit_metadata, inVal)

    _CopyCalcObjectToClipboard_metadata = { "name" : "CopyCalcObjectToClipboard",
            "arg_types" : (),
            "marshallers" : () }
    def CopyCalcObjectToClipboard(self) -> None:
        """Copies the wrapped calc object to the clipboard."""
        return self._intf.invoke(IAgVAScriptingCalcObject._metadata, IAgVAScriptingCalcObject._CopyCalcObjectToClipboard_metadata, )

    _PasteCalcObjectFromClipboard_metadata = { "name" : "PasteCalcObjectFromClipboard",
            "arg_types" : (),
            "marshallers" : () }
    def PasteCalcObjectFromClipboard(self) -> None:
        """Replaces the wrapped calc object with the instance in the clipboard."""
        return self._intf.invoke(IAgVAScriptingCalcObject._metadata, IAgVAScriptingCalcObject._PasteCalcObjectFromClipboard_metadata, )


agcls.AgClassCatalog.add_catalog_entry("{6DDE7375-1872-436C-B2BE-ADBF1881FFF0}", IAgVAScriptingCalcObject)
agcls.AgTypeNameMap["IAgVAScriptingCalcObject"] = IAgVAScriptingCalcObject

class IAgVAScriptingCalcObjectCollection(object):
    """The list of calc objects that the script can interact with."""
    _num_methods = 11
    _vtable_offset = IDispatch._vtable_offset + IDispatch._num_methods
    _metadata = {
        "uuid" : "{C7742744-0197-46E3-AE3F-E6F60357FACD}",
        "vtable_reference" : IDispatch._vtable_offset + IDispatch._num_methods - 1,
        "method_offsets" : { "Item" : 1,
                             "Add" : 2,
                             "Remove" : 3,
                             "RemoveAll" : 4,
                             "get__NewEnum" : 5,
                             "get_Count" : 6,
                             "Cut" : 7,
                             "Paste" : 8,
                             "InsertCopy" : 9,
                             "GetItemByIndex" : 10,
                             "GetItemByName" : 11, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAScriptingCalcObjectCollection._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAScriptingCalcObjectCollection from source object.")
        self.__dict__["_enumerator"] = None
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAScriptingCalcObjectCollection.__dict__ and type(IAgVAScriptingCalcObjectCollection.__dict__[attrname]) == property:
            return IAgVAScriptingCalcObjectCollection.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAScriptingCalcObjectCollection.")
    def __iter__(self):
        self.__dict__["_enumerator"] = self._NewEnum
        self._enumerator.reset()
        return self
    def __next__(self) -> "IAgVAScriptingCalcObject":
        if self._enumerator is None:
            raise StopIteration
        nextval = self._enumerator.next()
        if nextval is None:
            raise StopIteration
        return nextval
    
    _Item_metadata = { "name" : "Item",
            "arg_types" : (agcom.VARIANT, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.VARIANT_arg, agmarshall.AgInterface_out_arg,) }
    def Item(self, indexOrName:typing.Any) -> "IAgVAScriptingCalcObject":
        """Allows you to iterate through the collection."""
        return self._intf.invoke(IAgVAScriptingCalcObjectCollection._metadata, IAgVAScriptingCalcObjectCollection._Item_metadata, indexOrName, out_arg())

    _Add_metadata = { "name" : "Add",
            "arg_types" : (agcom.BSTR, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.AgInterface_out_arg,) }
    def Add(self, componentName:str) -> "IAgVAScriptingCalcObject":
        """Adds a calculation object to the collection."""
        return self._intf.invoke(IAgVAScriptingCalcObjectCollection._metadata, IAgVAScriptingCalcObjectCollection._Add_metadata, componentName, out_arg())

    _Remove_metadata = { "name" : "Remove",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    def Remove(self, indexOrName:typing.Any) -> None:
        """Removes a calculation object."""
        return self._intf.invoke(IAgVAScriptingCalcObjectCollection._metadata, IAgVAScriptingCalcObjectCollection._Remove_metadata, indexOrName)

    _RemoveAll_metadata = { "name" : "RemoveAll",
            "arg_types" : (),
            "marshallers" : () }
    def RemoveAll(self) -> None:
        """Removes all calculation objects."""
        return self._intf.invoke(IAgVAScriptingCalcObjectCollection._metadata, IAgVAScriptingCalcObjectCollection._RemoveAll_metadata, )

    _get__NewEnum_metadata = { "name" : "_NewEnum",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.IEnumVARIANT_arg,) }
    @property
    def _NewEnum(self) -> enumerator_proxy:
        """Allows you to enumerate through the collection."""
        return self._intf.get_property(IAgVAScriptingCalcObjectCollection._metadata, IAgVAScriptingCalcObjectCollection._get__NewEnum_metadata)

    _get_Count_metadata = { "name" : "Count",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.LONG_arg,) }
    @property
    def Count(self) -> int:
        """Returns the size of the collection."""
        return self._intf.get_property(IAgVAScriptingCalcObjectCollection._metadata, IAgVAScriptingCalcObjectCollection._get_Count_metadata)

    _Cut_metadata = { "name" : "Cut",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    def Cut(self, indexOrName:typing.Any) -> None:
        """Copies the calc object into the clipboard and removes the calc object from the list."""
        return self._intf.invoke(IAgVAScriptingCalcObjectCollection._metadata, IAgVAScriptingCalcObjectCollection._Cut_metadata, indexOrName)

    _Paste_metadata = { "name" : "Paste",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    def Paste(self) -> "IAgVAScriptingCalcObject":
        """Pastes the calc object from the clipboard and inserts into the list."""
        return self._intf.invoke(IAgVAScriptingCalcObjectCollection._metadata, IAgVAScriptingCalcObjectCollection._Paste_metadata, out_arg())

    _InsertCopy_metadata = { "name" : "InsertCopy",
            "arg_types" : (agcom.PVOID, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_in_arg("IAgVAScriptingCalcObject"), agmarshall.AgInterface_out_arg,) }
    def InsertCopy(self, calcObj:"IAgVAScriptingCalcObject") -> "IAgVAScriptingCalcObject":
        """Copies the calc object and inserts the copy into the list."""
        return self._intf.invoke(IAgVAScriptingCalcObjectCollection._metadata, IAgVAScriptingCalcObjectCollection._InsertCopy_metadata, calcObj, out_arg())

    _GetItemByIndex_metadata = { "name" : "GetItemByIndex",
            "arg_types" : (agcom.INT, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.INT_arg, agmarshall.AgInterface_out_arg,) }
    def GetItemByIndex(self, index:int) -> "IAgVAScriptingCalcObject":
        """Retrieves a scripting calc object from the collection by index."""
        return self._intf.invoke(IAgVAScriptingCalcObjectCollection._metadata, IAgVAScriptingCalcObjectCollection._GetItemByIndex_metadata, index, out_arg())

    _GetItemByName_metadata = { "name" : "GetItemByName",
            "arg_types" : (agcom.BSTR, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.AgInterface_out_arg,) }
    def GetItemByName(self, componentName:str) -> "IAgVAScriptingCalcObject":
        """Retrieves a scripting calc object from the collection by name."""
        return self._intf.invoke(IAgVAScriptingCalcObjectCollection._metadata, IAgVAScriptingCalcObjectCollection._GetItemByName_metadata, componentName, out_arg())

    __getitem__ = Item



agcls.AgClassCatalog.add_catalog_entry("{C7742744-0197-46E3-AE3F-E6F60357FACD}", IAgVAScriptingCalcObjectCollection)
agcls.AgTypeNameMap["IAgVAScriptingCalcObjectCollection"] = IAgVAScriptingCalcObjectCollection

class IAgVAScriptingTool(object):
    """Properties for the Scripting Tool."""
    _num_methods = 12
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{BA2389F3-C687-40B6-B4FC-F61F2BF80E6E}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_Enable" : 1,
                             "set_Enable" : 2,
                             "get_SegmentProperties" : 3,
                             "get_CalcObjects" : 4,
                             "get_Parameters" : 5,
                             "get_LanguageType" : 6,
                             "set_LanguageType" : 7,
                             "ScriptText" : 8,
                             "CopyToClipboard" : 9,
                             "PasteFromClipboard" : 10,
                             "get_PreIterate" : 11,
                             "set_PreIterate" : 12, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAScriptingTool._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAScriptingTool from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAScriptingTool.__dict__ and type(IAgVAScriptingTool.__dict__[attrname]) == property:
            return IAgVAScriptingTool.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAScriptingTool.")
    
    _get_Enable_metadata = { "name" : "Enable",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def Enable(self) -> bool:
        """If true, the scripting tool is enabled."""
        return self._intf.get_property(IAgVAScriptingTool._metadata, IAgVAScriptingTool._get_Enable_metadata)

    _set_Enable_metadata = { "name" : "Enable",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @Enable.setter
    def Enable(self, inVal:bool) -> None:
        return self._intf.set_property(IAgVAScriptingTool._metadata, IAgVAScriptingTool._set_Enable_metadata, inVal)

    _get_SegmentProperties_metadata = { "name" : "SegmentProperties",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def SegmentProperties(self) -> "IAgVAScriptingSegmentCollection":
        """Returns the collection of the segment properties."""
        return self._intf.get_property(IAgVAScriptingTool._metadata, IAgVAScriptingTool._get_SegmentProperties_metadata)

    _get_CalcObjects_metadata = { "name" : "CalcObjects",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def CalcObjects(self) -> "IAgVAScriptingCalcObjectCollection":
        """Returns the collection of the calculation objects."""
        return self._intf.get_property(IAgVAScriptingTool._metadata, IAgVAScriptingTool._get_CalcObjects_metadata)

    _get_Parameters_metadata = { "name" : "Parameters",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def Parameters(self) -> "IAgVAScriptingParameterCollection":
        """Returns the collection of parameters."""
        return self._intf.get_property(IAgVAScriptingTool._metadata, IAgVAScriptingTool._get_Parameters_metadata)

    _get_LanguageType_metadata = { "name" : "LanguageType",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVALanguage),) }
    @property
    def LanguageType(self) -> "AgEVALanguage":
        """The scripting language being used."""
        return self._intf.get_property(IAgVAScriptingTool._metadata, IAgVAScriptingTool._get_LanguageType_metadata)

    _set_LanguageType_metadata = { "name" : "LanguageType",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVALanguage),) }
    @LanguageType.setter
    def LanguageType(self, inVal:"AgEVALanguage") -> None:
        return self._intf.set_property(IAgVAScriptingTool._metadata, IAgVAScriptingTool._set_LanguageType_metadata, inVal)

    _ScriptText_metadata = { "name" : "ScriptText",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    def ScriptText(self, script:str) -> None:
        """Injects the script into the scripting tool."""
        return self._intf.invoke(IAgVAScriptingTool._metadata, IAgVAScriptingTool._ScriptText_metadata, script)

    _CopyToClipboard_metadata = { "name" : "CopyToClipboard",
            "arg_types" : (),
            "marshallers" : () }
    def CopyToClipboard(self) -> None:
        """Copies entire scripting tool to clipboard."""
        return self._intf.invoke(IAgVAScriptingTool._metadata, IAgVAScriptingTool._CopyToClipboard_metadata, )

    _PasteFromClipboard_metadata = { "name" : "PasteFromClipboard",
            "arg_types" : (),
            "marshallers" : () }
    def PasteFromClipboard(self) -> None:
        """Replaces entire scripting tool with scripting tool in clipboard."""
        return self._intf.invoke(IAgVAScriptingTool._metadata, IAgVAScriptingTool._PasteFromClipboard_metadata, )

    _get_PreIterate_metadata = { "name" : "PreIterate",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def PreIterate(self) -> bool:
        """If true, the sequence will run once before executing the script."""
        return self._intf.get_property(IAgVAScriptingTool._metadata, IAgVAScriptingTool._get_PreIterate_metadata)

    _set_PreIterate_metadata = { "name" : "PreIterate",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @PreIterate.setter
    def PreIterate(self, inVal:bool) -> None:
        return self._intf.set_property(IAgVAScriptingTool._metadata, IAgVAScriptingTool._set_PreIterate_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{BA2389F3-C687-40B6-B4FC-F61F2BF80E6E}", IAgVAScriptingTool)
agcls.AgTypeNameMap["IAgVAScriptingTool"] = IAgVAScriptingTool

class IAgVAElement(object):
    """The elements of the selected coordinate type."""
    _num_methods = 0
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{D1D2C328-052A-4C2A-BC2F-739B55556384}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : {  }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAElement._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAElement from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAElement.__dict__ and type(IAgVAElement.__dict__[attrname]) == property:
            return IAgVAElement.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAElement.")
    

agcls.AgClassCatalog.add_catalog_entry("{D1D2C328-052A-4C2A-BC2F-739B55556384}", IAgVAElement)
agcls.AgTypeNameMap["IAgVAElement"] = IAgVAElement

class IAgVASpacecraftParameters(object):
    """Properties for spacecraft configuration."""
    _num_methods = 18
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{6642A93A-65F8-4D50-A3E8-51B17A9AE3CF}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_DryMass" : 1,
                             "set_DryMass" : 2,
                             "get_Cd" : 3,
                             "set_Cd" : 4,
                             "get_DragArea" : 5,
                             "set_DragArea" : 6,
                             "get_Cr" : 7,
                             "set_Cr" : 8,
                             "get_SolarRadiationPressureArea" : 9,
                             "set_SolarRadiationPressureArea" : 10,
                             "get_Ck" : 11,
                             "set_Ck" : 12,
                             "get_RadiationPressureArea" : 13,
                             "set_RadiationPressureArea" : 14,
                             "get_K1" : 15,
                             "set_K1" : 16,
                             "get_K2" : 17,
                             "set_K2" : 18, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVASpacecraftParameters._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVASpacecraftParameters from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVASpacecraftParameters.__dict__ and type(IAgVASpacecraftParameters.__dict__[attrname]) == property:
            return IAgVASpacecraftParameters.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVASpacecraftParameters.")
    
    _get_DryMass_metadata = { "name" : "DryMass",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def DryMass(self) -> float:
        """The mass of the spacecraft exclusive of propellant. Uses Mass Dimension."""
        return self._intf.get_property(IAgVASpacecraftParameters._metadata, IAgVASpacecraftParameters._get_DryMass_metadata)

    _set_DryMass_metadata = { "name" : "DryMass",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @DryMass.setter
    def DryMass(self, newVal:float) -> None:
        return self._intf.set_property(IAgVASpacecraftParameters._metadata, IAgVASpacecraftParameters._set_DryMass_metadata, newVal)

    _get_Cd_metadata = { "name" : "Cd",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def Cd(self) -> float:
        """The dimensionless drag coefficient associated with the drag area. Dimensionless."""
        return self._intf.get_property(IAgVASpacecraftParameters._metadata, IAgVASpacecraftParameters._get_Cd_metadata)

    _set_Cd_metadata = { "name" : "Cd",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @Cd.setter
    def Cd(self, newVal:float) -> None:
        return self._intf.set_property(IAgVASpacecraftParameters._metadata, IAgVASpacecraftParameters._set_Cd_metadata, newVal)

    _get_DragArea_metadata = { "name" : "DragArea",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def DragArea(self) -> float:
        """The cross-sectional area of the spacecraft assumed perpendicular to the direction of motion, used for atmospheric drag calculations. Uses SmallArea Dimension."""
        return self._intf.get_property(IAgVASpacecraftParameters._metadata, IAgVASpacecraftParameters._get_DragArea_metadata)

    _set_DragArea_metadata = { "name" : "DragArea",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @DragArea.setter
    def DragArea(self, newVal:float) -> None:
        return self._intf.set_property(IAgVASpacecraftParameters._metadata, IAgVASpacecraftParameters._set_DragArea_metadata, newVal)

    _get_Cr_metadata = { "name" : "Cr",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def Cr(self) -> float:
        """The reflectivity of the spacecraft used for solar radiation pressure calculations, where 2.0 is fully reflective and 1.0 is not reflective at all. Dimensionless."""
        return self._intf.get_property(IAgVASpacecraftParameters._metadata, IAgVASpacecraftParameters._get_Cr_metadata)

    _set_Cr_metadata = { "name" : "Cr",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @Cr.setter
    def Cr(self, newVal:float) -> None:
        return self._intf.set_property(IAgVASpacecraftParameters._metadata, IAgVASpacecraftParameters._set_Cr_metadata, newVal)

    _get_SolarRadiationPressureArea_metadata = { "name" : "SolarRadiationPressureArea",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def SolarRadiationPressureArea(self) -> float:
        """The cross-sectional area of the spacecraft assumed perpendicular to the direction of solar radiation, used for solar radiation calculations. Uses SmallArea Dimension."""
        return self._intf.get_property(IAgVASpacecraftParameters._metadata, IAgVASpacecraftParameters._get_SolarRadiationPressureArea_metadata)

    _set_SolarRadiationPressureArea_metadata = { "name" : "SolarRadiationPressureArea",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @SolarRadiationPressureArea.setter
    def SolarRadiationPressureArea(self, newVal:float) -> None:
        return self._intf.set_property(IAgVASpacecraftParameters._metadata, IAgVASpacecraftParameters._set_SolarRadiationPressureArea_metadata, newVal)

    _get_Ck_metadata = { "name" : "Ck",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def Ck(self) -> float:
        """The reflectivity of the spacecraft used for central body radiation pressure (albedo / thermal pressure) calculations, where 2.0 is fully reflective and 1.0 is not reflective at all. Dimensionless."""
        return self._intf.get_property(IAgVASpacecraftParameters._metadata, IAgVASpacecraftParameters._get_Ck_metadata)

    _set_Ck_metadata = { "name" : "Ck",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @Ck.setter
    def Ck(self, newVal:float) -> None:
        return self._intf.set_property(IAgVASpacecraftParameters._metadata, IAgVASpacecraftParameters._set_Ck_metadata, newVal)

    _get_RadiationPressureArea_metadata = { "name" : "RadiationPressureArea",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def RadiationPressureArea(self) -> float:
        """The cross-sectional area of the spacecraft assumed perpendicular to the direction of central body radiation, used for central body radiation (albedo / thermal pressure) calculations. Uses SmallArea Dimension."""
        return self._intf.get_property(IAgVASpacecraftParameters._metadata, IAgVASpacecraftParameters._get_RadiationPressureArea_metadata)

    _set_RadiationPressureArea_metadata = { "name" : "RadiationPressureArea",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @RadiationPressureArea.setter
    def RadiationPressureArea(self, newVal:float) -> None:
        return self._intf.set_property(IAgVASpacecraftParameters._metadata, IAgVASpacecraftParameters._set_RadiationPressureArea_metadata, newVal)

    _get_K1_metadata = { "name" : "K1",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def K1(self) -> float:
        """If you are using a non-spherical SRP model, this field defines the model's GPS solar radiation pressure K1 (scale) value. Dimensionless."""
        return self._intf.get_property(IAgVASpacecraftParameters._metadata, IAgVASpacecraftParameters._get_K1_metadata)

    _set_K1_metadata = { "name" : "K1",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @K1.setter
    def K1(self, newVal:float) -> None:
        return self._intf.set_property(IAgVASpacecraftParameters._metadata, IAgVASpacecraftParameters._set_K1_metadata, newVal)

    _get_K2_metadata = { "name" : "K2",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def K2(self) -> float:
        """If you are using a non-spherical SRP model, this field defines the model's GPS solar radiation pressure K2 (scale) value. Dimensionless."""
        return self._intf.get_property(IAgVASpacecraftParameters._metadata, IAgVASpacecraftParameters._get_K2_metadata)

    _set_K2_metadata = { "name" : "K2",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @K2.setter
    def K2(self, newVal:float) -> None:
        return self._intf.set_property(IAgVASpacecraftParameters._metadata, IAgVASpacecraftParameters._set_K2_metadata, newVal)


agcls.AgClassCatalog.add_catalog_entry("{6642A93A-65F8-4D50-A3E8-51B17A9AE3CF}", IAgVASpacecraftParameters)
agcls.AgTypeNameMap["IAgVASpacecraftParameters"] = IAgVASpacecraftParameters

class IAgVAFuelTank(object):
    """Properties for fuel tank configuration."""
    _num_methods = 12
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{6CB64830-3EDB-4E0E-A55B-DAC26DCCCA47}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_TankPressure" : 1,
                             "set_TankPressure" : 2,
                             "get_TankVolume" : 3,
                             "set_TankVolume" : 4,
                             "get_TankTemperature" : 5,
                             "set_TankTemperature" : 6,
                             "get_FuelDensity" : 7,
                             "set_FuelDensity" : 8,
                             "get_FuelMass" : 9,
                             "set_FuelMass" : 10,
                             "get_MaximumFuelMass" : 11,
                             "set_MaximumFuelMass" : 12, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAFuelTank._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAFuelTank from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAFuelTank.__dict__ and type(IAgVAFuelTank.__dict__[attrname]) == property:
            return IAgVAFuelTank.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAFuelTank.")
    
    _get_TankPressure_metadata = { "name" : "TankPressure",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def TankPressure(self) -> float:
        """The fuel tank pressure. Uses Pressure Dimension."""
        return self._intf.get_property(IAgVAFuelTank._metadata, IAgVAFuelTank._get_TankPressure_metadata)

    _set_TankPressure_metadata = { "name" : "TankPressure",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @TankPressure.setter
    def TankPressure(self, newVal:float) -> None:
        return self._intf.set_property(IAgVAFuelTank._metadata, IAgVAFuelTank._set_TankPressure_metadata, newVal)

    _get_TankVolume_metadata = { "name" : "TankVolume",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def TankVolume(self) -> float:
        """The volume of the fuel tank. Uses SmallVolume Dimension."""
        return self._intf.get_property(IAgVAFuelTank._metadata, IAgVAFuelTank._get_TankVolume_metadata)

    _set_TankVolume_metadata = { "name" : "TankVolume",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @TankVolume.setter
    def TankVolume(self, newVal:float) -> None:
        return self._intf.set_property(IAgVAFuelTank._metadata, IAgVAFuelTank._set_TankVolume_metadata, newVal)

    _get_TankTemperature_metadata = { "name" : "TankTemperature",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def TankTemperature(self) -> float:
        """The temperature of the fuel tank. Uses Temperature Dimension."""
        return self._intf.get_property(IAgVAFuelTank._metadata, IAgVAFuelTank._get_TankTemperature_metadata)

    _set_TankTemperature_metadata = { "name" : "TankTemperature",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @TankTemperature.setter
    def TankTemperature(self, newVal:float) -> None:
        return self._intf.set_property(IAgVAFuelTank._metadata, IAgVAFuelTank._set_TankTemperature_metadata, newVal)

    _get_FuelDensity_metadata = { "name" : "FuelDensity",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def FuelDensity(self) -> float:
        """The density of the fuel. Uses SmallDensity Dimension."""
        return self._intf.get_property(IAgVAFuelTank._metadata, IAgVAFuelTank._get_FuelDensity_metadata)

    _set_FuelDensity_metadata = { "name" : "FuelDensity",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @FuelDensity.setter
    def FuelDensity(self, newVal:float) -> None:
        return self._intf.set_property(IAgVAFuelTank._metadata, IAgVAFuelTank._set_FuelDensity_metadata, newVal)

    _get_FuelMass_metadata = { "name" : "FuelMass",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def FuelMass(self) -> float:
        """The mass of the spacecraft propellant. Uses Mass Dimension."""
        return self._intf.get_property(IAgVAFuelTank._metadata, IAgVAFuelTank._get_FuelMass_metadata)

    _set_FuelMass_metadata = { "name" : "FuelMass",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @FuelMass.setter
    def FuelMass(self, newVal:float) -> None:
        return self._intf.set_property(IAgVAFuelTank._metadata, IAgVAFuelTank._set_FuelMass_metadata, newVal)

    _get_MaximumFuelMass_metadata = { "name" : "MaximumFuelMass",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def MaximumFuelMass(self) -> float:
        """The maximum fuel mass of the spacecraft; this parameter specifically applies to Finite Maneuver segments that are being executed in Backward Sequences. Uses Mass Dimension."""
        return self._intf.get_property(IAgVAFuelTank._metadata, IAgVAFuelTank._get_MaximumFuelMass_metadata)

    _set_MaximumFuelMass_metadata = { "name" : "MaximumFuelMass",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @MaximumFuelMass.setter
    def MaximumFuelMass(self, newVal:float) -> None:
        return self._intf.set_property(IAgVAFuelTank._metadata, IAgVAFuelTank._set_MaximumFuelMass_metadata, newVal)


agcls.AgClassCatalog.add_catalog_entry("{6CB64830-3EDB-4E0E-A55B-DAC26DCCCA47}", IAgVAFuelTank)
agcls.AgTypeNameMap["IAgVAFuelTank"] = IAgVAFuelTank

class IAgVAMCSSegmentProperties(object):
    """The segment properties."""
    _num_methods = 9
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{B8C99C10-CB59-4C72-A97C-CBF561C41D4D}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_DisplayCoordinateSystem" : 1,
                             "set_DisplayCoordinateSystem" : 2,
                             "get_Color" : 3,
                             "set_Color" : 4,
                             "get_UpdateAnimationTimeAfterRun" : 5,
                             "set_UpdateAnimationTimeAfterRun" : 6,
                             "ApplyFinalStateToBPlanes" : 7,
                             "get_BPlanes" : 8,
                             "get_LastRunCode" : 9, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAMCSSegmentProperties._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAMCSSegmentProperties from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAMCSSegmentProperties.__dict__ and type(IAgVAMCSSegmentProperties.__dict__[attrname]) == property:
            return IAgVAMCSSegmentProperties.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAMCSSegmentProperties.")
    
    _get_DisplayCoordinateSystem_metadata = { "name" : "DisplayCoordinateSystem",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def DisplayCoordinateSystem(self) -> str:
        """The coordinate system that will be used in the segment summary report."""
        return self._intf.get_property(IAgVAMCSSegmentProperties._metadata, IAgVAMCSSegmentProperties._get_DisplayCoordinateSystem_metadata)

    _set_DisplayCoordinateSystem_metadata = { "name" : "DisplayCoordinateSystem",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @DisplayCoordinateSystem.setter
    def DisplayCoordinateSystem(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAMCSSegmentProperties._metadata, IAgVAMCSSegmentProperties._set_DisplayCoordinateSystem_metadata, inVal)

    _get_Color_metadata = { "name" : "Color",
            "arg_types" : (POINTER(agcom.OLE_COLOR),),
            "marshallers" : (agmarshall.OLE_COLOR_arg,) }
    @property
    def Color(self) -> agcolor.Color:
        """The display color of the segment."""
        return self._intf.get_property(IAgVAMCSSegmentProperties._metadata, IAgVAMCSSegmentProperties._get_Color_metadata)

    _set_Color_metadata = { "name" : "Color",
            "arg_types" : (agcom.OLE_COLOR,),
            "marshallers" : (agmarshall.OLE_COLOR_arg,) }
    @Color.setter
    def Color(self, inVal:agcolor.Color) -> None:
        return self._intf.set_property(IAgVAMCSSegmentProperties._metadata, IAgVAMCSSegmentProperties._set_Color_metadata, inVal)

    _get_UpdateAnimationTimeAfterRun_metadata = { "name" : "UpdateAnimationTimeAfterRun",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def UpdateAnimationTimeAfterRun(self) -> bool:
        """If true, Astrogator will set the animation time to the final epoch of the segment when the segment finishes running."""
        return self._intf.get_property(IAgVAMCSSegmentProperties._metadata, IAgVAMCSSegmentProperties._get_UpdateAnimationTimeAfterRun_metadata)

    _set_UpdateAnimationTimeAfterRun_metadata = { "name" : "UpdateAnimationTimeAfterRun",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @UpdateAnimationTimeAfterRun.setter
    def UpdateAnimationTimeAfterRun(self, inVal:bool) -> None:
        return self._intf.set_property(IAgVAMCSSegmentProperties._metadata, IAgVAMCSSegmentProperties._set_UpdateAnimationTimeAfterRun_metadata, inVal)

    _ApplyFinalStateToBPlanes_metadata = { "name" : "ApplyFinalStateToBPlanes",
            "arg_types" : (),
            "marshallers" : () }
    def ApplyFinalStateToBPlanes(self) -> None:
        """Applies the last calculated final state of the segment to all selected B-Planes."""
        return self._intf.invoke(IAgVAMCSSegmentProperties._metadata, IAgVAMCSSegmentProperties._ApplyFinalStateToBPlanes_metadata, )

    _get_BPlanes_metadata = { "name" : "BPlanes",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def BPlanes(self) -> "IAgVABPlaneCollection":
        """The B-Plane or B-Planes to which the epoch, position, and velocity of the segment's final state will be applied, according to the B-Plane's definition."""
        return self._intf.get_property(IAgVAMCSSegmentProperties._metadata, IAgVAMCSSegmentProperties._get_BPlanes_metadata)

    _get_LastRunCode_metadata = { "name" : "LastRunCode",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVARunCode),) }
    @property
    def LastRunCode(self) -> "AgEVARunCode":
        """The last run code returned by the segment."""
        return self._intf.get_property(IAgVAMCSSegmentProperties._metadata, IAgVAMCSSegmentProperties._get_LastRunCode_metadata)


agcls.AgClassCatalog.add_catalog_entry("{B8C99C10-CB59-4C72-A97C-CBF561C41D4D}", IAgVAMCSSegmentProperties)
agcls.AgTypeNameMap["IAgVAMCSSegmentProperties"] = IAgVAMCSSegmentProperties

class IAgVAMCSEnd(object):
    """Properties for an End segment."""
    _num_methods = 0
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{7AE91388-7900-4AA0-BF30-546957ACFE94}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : {  }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAMCSEnd._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAMCSEnd from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAMCSEnd.__dict__ and type(IAgVAMCSEnd.__dict__[attrname]) == property:
            return IAgVAMCSEnd.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAMCSEnd.")
    

agcls.AgClassCatalog.add_catalog_entry("{7AE91388-7900-4AA0-BF30-546957ACFE94}", IAgVAMCSEnd)
agcls.AgTypeNameMap["IAgVAMCSEnd"] = IAgVAMCSEnd

class IAgVAMCSInitialState(object):
    """Properties for an Initial State segment."""
    _num_methods = 14
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{D7458E20-A5E4-45C8-81A1-38A29F4131FD}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_CoordSystemName" : 1,
                             "set_CoordSystemName" : 2,
                             "get_OrbitEpoch" : 3,
                             "set_OrbitEpoch" : 4,
                             "get_SpacecraftParameters" : 5,
                             "get_FuelTank" : 6,
                             "get_ElementType" : 7,
                             "SetElementType" : 8,
                             "get_Element" : 9,
                             "EnableControlParameter" : 10,
                             "DisableControlParameter" : 11,
                             "IsControlParameterEnabled" : 12,
                             "get_ControlParametersAvailable" : 13,
                             "get_UserVariables" : 14, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAMCSInitialState._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAMCSInitialState from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAMCSInitialState.__dict__ and type(IAgVAMCSInitialState.__dict__[attrname]) == property:
            return IAgVAMCSInitialState.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAMCSInitialState.")
    
    _get_CoordSystemName_metadata = { "name" : "CoordSystemName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def CoordSystemName(self) -> str:
        """The coordinate system."""
        return self._intf.get_property(IAgVAMCSInitialState._metadata, IAgVAMCSInitialState._get_CoordSystemName_metadata)

    _set_CoordSystemName_metadata = { "name" : "CoordSystemName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @CoordSystemName.setter
    def CoordSystemName(self, newVal:str) -> None:
        return self._intf.set_property(IAgVAMCSInitialState._metadata, IAgVAMCSInitialState._set_CoordSystemName_metadata, newVal)

    _get_OrbitEpoch_metadata = { "name" : "OrbitEpoch",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def OrbitEpoch(self) -> typing.Any:
        """The orbit epoch. Uses DateFormat Dimension."""
        return self._intf.get_property(IAgVAMCSInitialState._metadata, IAgVAMCSInitialState._get_OrbitEpoch_metadata)

    _set_OrbitEpoch_metadata = { "name" : "OrbitEpoch",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @OrbitEpoch.setter
    def OrbitEpoch(self, newVal:typing.Any) -> None:
        return self._intf.set_property(IAgVAMCSInitialState._metadata, IAgVAMCSInitialState._set_OrbitEpoch_metadata, newVal)

    _get_SpacecraftParameters_metadata = { "name" : "SpacecraftParameters",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def SpacecraftParameters(self) -> "IAgVASpacecraftParameters":
        """The spacecraft  parameters."""
        return self._intf.get_property(IAgVAMCSInitialState._metadata, IAgVAMCSInitialState._get_SpacecraftParameters_metadata)

    _get_FuelTank_metadata = { "name" : "FuelTank",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def FuelTank(self) -> "IAgVAFuelTank":
        """The fuel tank parameters."""
        return self._intf.get_property(IAgVAMCSInitialState._metadata, IAgVAMCSInitialState._get_FuelTank_metadata)

    _get_ElementType_metadata = { "name" : "ElementType",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAElementType),) }
    @property
    def ElementType(self) -> "AgEVAElementType":
        """The coordinate type."""
        return self._intf.get_property(IAgVAMCSInitialState._metadata, IAgVAMCSInitialState._get_ElementType_metadata)

    _SetElementType_metadata = { "name" : "SetElementType",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAElementType),) }
    def SetElementType(self, elementType:"AgEVAElementType") -> None:
        """Selects an coordinate type."""
        return self._intf.invoke(IAgVAMCSInitialState._metadata, IAgVAMCSInitialState._SetElementType_metadata, elementType)

    _get_Element_metadata = { "name" : "Element",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def Element(self) -> "IAgVAElement":
        """The elements of the selected coordinate type."""
        return self._intf.get_property(IAgVAMCSInitialState._metadata, IAgVAMCSInitialState._get_Element_metadata)

    _EnableControlParameter_metadata = { "name" : "EnableControlParameter",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAControlInitState),) }
    def EnableControlParameter(self, param:"AgEVAControlInitState") -> None:
        """Enables a control parameter."""
        return self._intf.invoke(IAgVAMCSInitialState._metadata, IAgVAMCSInitialState._EnableControlParameter_metadata, param)

    _DisableControlParameter_metadata = { "name" : "DisableControlParameter",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAControlInitState),) }
    def DisableControlParameter(self, param:"AgEVAControlInitState") -> None:
        """Disables a control parameter."""
        return self._intf.invoke(IAgVAMCSInitialState._metadata, IAgVAMCSInitialState._DisableControlParameter_metadata, param)

    _IsControlParameterEnabled_metadata = { "name" : "IsControlParameterEnabled",
            "arg_types" : (agcom.LONG, POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAControlInitState), agmarshall.VARIANT_BOOL_arg,) }
    def IsControlParameterEnabled(self, param:"AgEVAControlInitState") -> bool:
        """Sees if a control is enabled."""
        return self._intf.invoke(IAgVAMCSInitialState._metadata, IAgVAMCSInitialState._IsControlParameterEnabled_metadata, param, out_arg())

    _get_ControlParametersAvailable_metadata = { "name" : "ControlParametersAvailable",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def ControlParametersAvailable(self) -> bool:
        """Returns whether or not the control parameters can be set."""
        return self._intf.get_property(IAgVAMCSInitialState._metadata, IAgVAMCSInitialState._get_ControlParametersAvailable_metadata)

    _get_UserVariables_metadata = { "name" : "UserVariables",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def UserVariables(self) -> "IAgVAUserVariableCollection":
        """Interface used to modify user variables for the initial state segment."""
        return self._intf.get_property(IAgVAMCSInitialState._metadata, IAgVAMCSInitialState._get_UserVariables_metadata)


agcls.AgClassCatalog.add_catalog_entry("{D7458E20-A5E4-45C8-81A1-38A29F4131FD}", IAgVAMCSInitialState)
agcls.AgTypeNameMap["IAgVAMCSInitialState"] = IAgVAMCSInitialState

class IAgVAMCSSegment(object):
    """General properties for segments."""
    _num_methods = 8
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{46F093C1-5138-4A6F-A79C-7F4DB8E7BCB4}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_Type" : 1,
                             "get_Properties" : 2,
                             "get_InitialState" : 3,
                             "get_FinalState" : 4,
                             "GetResultValue" : 5,
                             "Run" : 6,
                             "get_Results" : 7,
                             "get_ExecSummary" : 8, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAMCSSegment._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAMCSSegment from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAMCSSegment.__dict__ and type(IAgVAMCSSegment.__dict__[attrname]) == property:
            return IAgVAMCSSegment.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAMCSSegment.")
    
    _get_Type_metadata = { "name" : "Type",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVASegmentType),) }
    @property
    def Type(self) -> "AgEVASegmentType":
        """Returns the type of segment."""
        return self._intf.get_property(IAgVAMCSSegment._metadata, IAgVAMCSSegment._get_Type_metadata)

    _get_Properties_metadata = { "name" : "Properties",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def Properties(self) -> "IAgVAMCSSegmentProperties":
        """Returns the properties of the segment."""
        return self._intf.get_property(IAgVAMCSSegment._metadata, IAgVAMCSSegment._get_Properties_metadata)

    _get_InitialState_metadata = { "name" : "InitialState",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def InitialState(self) -> "IAgVAState":
        """The initial state of the segment."""
        return self._intf.get_property(IAgVAMCSSegment._metadata, IAgVAMCSSegment._get_InitialState_metadata)

    _get_FinalState_metadata = { "name" : "FinalState",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def FinalState(self) -> "IAgVAState":
        """The final state of the segment."""
        return self._intf.get_property(IAgVAMCSSegment._metadata, IAgVAMCSSegment._get_FinalState_metadata)

    _GetResultValue_metadata = { "name" : "GetResultValue",
            "arg_types" : (agcom.BSTR, POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.VARIANT_arg,) }
    def GetResultValue(self, resultName:str) -> typing.Any:
        """Returns a result value."""
        return self._intf.invoke(IAgVAMCSSegment._metadata, IAgVAMCSSegment._GetResultValue_metadata, resultName, out_arg())

    _Run_metadata = { "name" : "Run",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    def Run(self) -> "IAgVAState":
        """Runs the segment in individual segment mode.  See IAgVADriverMCS."""
        return self._intf.invoke(IAgVAMCSSegment._metadata, IAgVAMCSSegment._Run_metadata, out_arg())

    _get_Results_metadata = { "name" : "Results",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def Results(self) -> "IAgVACalcObjectCollection":
        """The results of the segment."""
        return self._intf.get_property(IAgVAMCSSegment._metadata, IAgVAMCSSegment._get_Results_metadata)

    _get_ExecSummary_metadata = { "name" : "ExecSummary",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def ExecSummary(self) -> "IAgDrResult":
        """The segment summary report."""
        return self._intf.get_property(IAgVAMCSSegment._metadata, IAgVAMCSSegment._get_ExecSummary_metadata)


agcls.AgClassCatalog.add_catalog_entry("{46F093C1-5138-4A6F-A79C-7F4DB8E7BCB4}", IAgVAMCSSegment)
agcls.AgTypeNameMap["IAgVAMCSSegment"] = IAgVAMCSSegment

class IAgVAMCSOptions(object):
    """Properties for the MCS Options."""
    _num_methods = 37
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{81715712-591E-4553-9DC7-A1266F82E7D9}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_DrawTrajectoryIn2D" : 1,
                             "set_DrawTrajectoryIn2D" : 2,
                             "get_DrawTrajectoryIn3D" : 3,
                             "set_DrawTrajectoryIn3D" : 4,
                             "get_UpdateAnimationTimeForAllObjects" : 5,
                             "set_UpdateAnimationTimeForAllObjects" : 6,
                             "get_ClearDWCGraphicsBeforeEachRun" : 7,
                             "set_ClearDWCGraphicsBeforeEachRun" : 8,
                             "get_ClearAdditionalBPlanePoints" : 9,
                             "set_ClearAdditionalBPlanePoints" : 10,
                             "get_PropagateOnApply" : 11,
                             "set_PropagateOnApply" : 12,
                             "get_EnableTrajectorySegmentColors" : 13,
                             "set_EnableTrajectorySegmentColors" : 14,
                             "get_SaveNumbersInRawFormat" : 15,
                             "set_SaveNumbersInRawFormat" : 16,
                             "get_StoppingConditionTimeTolerance" : 17,
                             "set_StoppingConditionTimeTolerance" : 18,
                             "get_EnableSegmentControls" : 19,
                             "set_EnableSegmentControls" : 20,
                             "get_EnableSegmentResults" : 21,
                             "set_EnableSegmentResults" : 22,
                             "get_EnableLogging" : 23,
                             "set_EnableLogging" : 24,
                             "get_GraphicsUpdateRate" : 25,
                             "set_GraphicsUpdateRate" : 26,
                             "get_PromoteControls" : 27,
                             "set_PromoteControls" : 28,
                             "get_UseNominalSettings" : 29,
                             "set_UseNominalSettings" : 30,
                             "get_MinEphemStep" : 31,
                             "set_MinEphemStep" : 32,
                             "get_GenerateEphemeris" : 33,
                             "set_GenerateEphemeris" : 34,
                             "get_UserVariables" : 35,
                             "get_SmartRunMode" : 36,
                             "set_SmartRunMode" : 37, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAMCSOptions._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAMCSOptions from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAMCSOptions.__dict__ and type(IAgVAMCSOptions.__dict__[attrname]) == property:
            return IAgVAMCSOptions.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAMCSOptions.")
    
    _get_DrawTrajectoryIn2D_metadata = { "name" : "DrawTrajectoryIn2D",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def DrawTrajectoryIn2D(self) -> bool:
        """If true, Astrogator will draw the trajectory in the 2D Graphics windows as the ephemeris is calculated during the current run."""
        return self._intf.get_property(IAgVAMCSOptions._metadata, IAgVAMCSOptions._get_DrawTrajectoryIn2D_metadata)

    _set_DrawTrajectoryIn2D_metadata = { "name" : "DrawTrajectoryIn2D",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @DrawTrajectoryIn2D.setter
    def DrawTrajectoryIn2D(self, newVal:bool) -> None:
        return self._intf.set_property(IAgVAMCSOptions._metadata, IAgVAMCSOptions._set_DrawTrajectoryIn2D_metadata, newVal)

    _get_DrawTrajectoryIn3D_metadata = { "name" : "DrawTrajectoryIn3D",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def DrawTrajectoryIn3D(self) -> bool:
        """If true, Astrogator will draw the trajectory in the 3D Graphics windows as the ephemeris is calculated during the current run."""
        return self._intf.get_property(IAgVAMCSOptions._metadata, IAgVAMCSOptions._get_DrawTrajectoryIn3D_metadata)

    _set_DrawTrajectoryIn3D_metadata = { "name" : "DrawTrajectoryIn3D",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @DrawTrajectoryIn3D.setter
    def DrawTrajectoryIn3D(self, newVal:bool) -> None:
        return self._intf.set_property(IAgVAMCSOptions._metadata, IAgVAMCSOptions._set_DrawTrajectoryIn3D_metadata, newVal)

    _get_UpdateAnimationTimeForAllObjects_metadata = { "name" : "UpdateAnimationTimeForAllObjects",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def UpdateAnimationTimeForAllObjects(self) -> bool:
        """If true, all other objects will be animated so that they appear at the proper position for the time being computed as the trajectory is calculated."""
        return self._intf.get_property(IAgVAMCSOptions._metadata, IAgVAMCSOptions._get_UpdateAnimationTimeForAllObjects_metadata)

    _set_UpdateAnimationTimeForAllObjects_metadata = { "name" : "UpdateAnimationTimeForAllObjects",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @UpdateAnimationTimeForAllObjects.setter
    def UpdateAnimationTimeForAllObjects(self, newVal:bool) -> None:
        return self._intf.set_property(IAgVAMCSOptions._metadata, IAgVAMCSOptions._set_UpdateAnimationTimeForAllObjects_metadata, newVal)

    _get_ClearDWCGraphicsBeforeEachRun_metadata = { "name" : "ClearDWCGraphicsBeforeEachRun",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def ClearDWCGraphicsBeforeEachRun(self) -> bool:
        """If true, Astrogator will automatically clear all target iteration graphics of the previous run - in all graphics windows - before the current run draws new calculations."""
        return self._intf.get_property(IAgVAMCSOptions._metadata, IAgVAMCSOptions._get_ClearDWCGraphicsBeforeEachRun_metadata)

    _set_ClearDWCGraphicsBeforeEachRun_metadata = { "name" : "ClearDWCGraphicsBeforeEachRun",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @ClearDWCGraphicsBeforeEachRun.setter
    def ClearDWCGraphicsBeforeEachRun(self, newVal:bool) -> None:
        return self._intf.set_property(IAgVAMCSOptions._metadata, IAgVAMCSOptions._set_ClearDWCGraphicsBeforeEachRun_metadata, newVal)

    _get_ClearAdditionalBPlanePoints_metadata = { "name" : "ClearAdditionalBPlanePoints",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def ClearAdditionalBPlanePoints(self) -> bool:
        """If true, Astrogator will clear all additional B-Plane points from any previous run - in all graphics windows - before the current run."""
        return self._intf.get_property(IAgVAMCSOptions._metadata, IAgVAMCSOptions._get_ClearAdditionalBPlanePoints_metadata)

    _set_ClearAdditionalBPlanePoints_metadata = { "name" : "ClearAdditionalBPlanePoints",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @ClearAdditionalBPlanePoints.setter
    def ClearAdditionalBPlanePoints(self, newVal:bool) -> None:
        return self._intf.set_property(IAgVAMCSOptions._metadata, IAgVAMCSOptions._set_ClearAdditionalBPlanePoints_metadata, newVal)

    _get_PropagateOnApply_metadata = { "name" : "PropagateOnApply",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def PropagateOnApply(self) -> bool:
        """If true, Astrogator will propagate trajectories whenever you click OK or Apply on the Orbit page. If you want to close the Properties Browser for the satellite without running the MCS, make certain this option is disabled."""
        return self._intf.get_property(IAgVAMCSOptions._metadata, IAgVAMCSOptions._get_PropagateOnApply_metadata)

    _set_PropagateOnApply_metadata = { "name" : "PropagateOnApply",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @PropagateOnApply.setter
    def PropagateOnApply(self, newVal:bool) -> None:
        return self._intf.set_property(IAgVAMCSOptions._metadata, IAgVAMCSOptions._set_PropagateOnApply_metadata, newVal)

    _get_EnableTrajectorySegmentColors_metadata = { "name" : "EnableTrajectorySegmentColors",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def EnableTrajectorySegmentColors(self) -> bool:
        """If true, trajectory segments are displayed in the 2D Graphics window in the colors selected for the respective segments; otherwise the color of the trajectory is defined by the 2D Graphics Attributes page."""
        return self._intf.get_property(IAgVAMCSOptions._metadata, IAgVAMCSOptions._get_EnableTrajectorySegmentColors_metadata)

    _set_EnableTrajectorySegmentColors_metadata = { "name" : "EnableTrajectorySegmentColors",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @EnableTrajectorySegmentColors.setter
    def EnableTrajectorySegmentColors(self, newVal:bool) -> None:
        return self._intf.set_property(IAgVAMCSOptions._metadata, IAgVAMCSOptions._set_EnableTrajectorySegmentColors_metadata, newVal)

    _get_SaveNumbersInRawFormat_metadata = { "name" : "SaveNumbersInRawFormat",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def SaveNumbersInRawFormat(self) -> bool:
        """If true, Astrogator will store satellite information in binary format - to preserve the maximum amount of precision."""
        return self._intf.get_property(IAgVAMCSOptions._metadata, IAgVAMCSOptions._get_SaveNumbersInRawFormat_metadata)

    _set_SaveNumbersInRawFormat_metadata = { "name" : "SaveNumbersInRawFormat",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @SaveNumbersInRawFormat.setter
    def SaveNumbersInRawFormat(self, newVal:bool) -> None:
        return self._intf.set_property(IAgVAMCSOptions._metadata, IAgVAMCSOptions._set_SaveNumbersInRawFormat_metadata, newVal)

    _get_StoppingConditionTimeTolerance_metadata = { "name" : "StoppingConditionTimeTolerance",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def StoppingConditionTimeTolerance(self) -> float:
        """The time tolerance, which will be applied with respect to desired trip values throughout the MCS. If this value is set to zero, time tolerance will not be applied."""
        return self._intf.get_property(IAgVAMCSOptions._metadata, IAgVAMCSOptions._get_StoppingConditionTimeTolerance_metadata)

    _set_StoppingConditionTimeTolerance_metadata = { "name" : "StoppingConditionTimeTolerance",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @StoppingConditionTimeTolerance.setter
    def StoppingConditionTimeTolerance(self, newVal:float) -> None:
        return self._intf.set_property(IAgVAMCSOptions._metadata, IAgVAMCSOptions._set_StoppingConditionTimeTolerance_metadata, newVal)

    _get_EnableSegmentControls_metadata = { "name" : "EnableSegmentControls",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def EnableSegmentControls(self) -> bool:
        """If true, Astrogator will automatically add independent variables to differential correctors."""
        return self._intf.get_property(IAgVAMCSOptions._metadata, IAgVAMCSOptions._get_EnableSegmentControls_metadata)

    _set_EnableSegmentControls_metadata = { "name" : "EnableSegmentControls",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @EnableSegmentControls.setter
    def EnableSegmentControls(self, newVal:bool) -> None:
        return self._intf.set_property(IAgVAMCSOptions._metadata, IAgVAMCSOptions._set_EnableSegmentControls_metadata, newVal)

    _get_EnableSegmentResults_metadata = { "name" : "EnableSegmentResults",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def EnableSegmentResults(self) -> bool:
        """If true, Astrogator will automatically add dependent variables to differential correctors."""
        return self._intf.get_property(IAgVAMCSOptions._metadata, IAgVAMCSOptions._get_EnableSegmentResults_metadata)

    _set_EnableSegmentResults_metadata = { "name" : "EnableSegmentResults",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @EnableSegmentResults.setter
    def EnableSegmentResults(self, newVal:bool) -> None:
        return self._intf.set_property(IAgVAMCSOptions._metadata, IAgVAMCSOptions._set_EnableSegmentResults_metadata, newVal)

    _get_EnableLogging_metadata = { "name" : "EnableLogging",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def EnableLogging(self) -> bool:
        """If true, target sequences can be set to produce 'run history' log files for differential corrector profiles. By default, a target sequence does not produce a log file."""
        return self._intf.get_property(IAgVAMCSOptions._metadata, IAgVAMCSOptions._get_EnableLogging_metadata)

    _set_EnableLogging_metadata = { "name" : "EnableLogging",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @EnableLogging.setter
    def EnableLogging(self, newVal:bool) -> None:
        return self._intf.set_property(IAgVAMCSOptions._metadata, IAgVAMCSOptions._set_EnableLogging_metadata, newVal)

    _get_GraphicsUpdateRate_metadata = { "name" : "GraphicsUpdateRate",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def GraphicsUpdateRate(self) -> float:
        """The rate (between 0 and 1) at which to update graphics. Dimensionless."""
        return self._intf.get_property(IAgVAMCSOptions._metadata, IAgVAMCSOptions._get_GraphicsUpdateRate_metadata)

    _set_GraphicsUpdateRate_metadata = { "name" : "GraphicsUpdateRate",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @GraphicsUpdateRate.setter
    def GraphicsUpdateRate(self, newVal:float) -> None:
        return self._intf.set_property(IAgVAMCSOptions._metadata, IAgVAMCSOptions._set_GraphicsUpdateRate_metadata, newVal)

    _get_PromoteControls_metadata = { "name" : "PromoteControls",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def PromoteControls(self) -> bool:
        """If true, a target sequence will be able to affect controls and results within a nested target sequence in addition to its own."""
        return self._intf.get_property(IAgVAMCSOptions._metadata, IAgVAMCSOptions._get_PromoteControls_metadata)

    _set_PromoteControls_metadata = { "name" : "PromoteControls",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @PromoteControls.setter
    def PromoteControls(self, inVal:bool) -> None:
        return self._intf.set_property(IAgVAMCSOptions._metadata, IAgVAMCSOptions._set_PromoteControls_metadata, inVal)

    _get_UseNominalSettings_metadata = { "name" : "UseNominalSettings",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def UseNominalSettings(self) -> bool:
        """If true, components or segments that are modified by a target sequence will be restored to their nominal values as soon as the target sequence completes its run."""
        return self._intf.get_property(IAgVAMCSOptions._metadata, IAgVAMCSOptions._get_UseNominalSettings_metadata)

    _set_UseNominalSettings_metadata = { "name" : "UseNominalSettings",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @UseNominalSettings.setter
    def UseNominalSettings(self, inVal:bool) -> None:
        return self._intf.set_property(IAgVAMCSOptions._metadata, IAgVAMCSOptions._set_UseNominalSettings_metadata, inVal)

    _get_MinEphemStep_metadata = { "name" : "MinEphemStep",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def MinEphemStep(self) -> float:
        """The minimum step size for saving ephemeris. Uses Time Dimension."""
        return self._intf.get_property(IAgVAMCSOptions._metadata, IAgVAMCSOptions._get_MinEphemStep_metadata)

    _set_MinEphemStep_metadata = { "name" : "MinEphemStep",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @MinEphemStep.setter
    def MinEphemStep(self, newVal:float) -> None:
        return self._intf.set_property(IAgVAMCSOptions._metadata, IAgVAMCSOptions._set_MinEphemStep_metadata, newVal)

    _get_GenerateEphemeris_metadata = { "name" : "GenerateEphemeris",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def GenerateEphemeris(self) -> bool:
        """If true, Astrogator will generate ephemeris."""
        return self._intf.get_property(IAgVAMCSOptions._metadata, IAgVAMCSOptions._get_GenerateEphemeris_metadata)

    _set_GenerateEphemeris_metadata = { "name" : "GenerateEphemeris",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @GenerateEphemeris.setter
    def GenerateEphemeris(self, newVal:bool) -> None:
        return self._intf.set_property(IAgVAMCSOptions._metadata, IAgVAMCSOptions._set_GenerateEphemeris_metadata, newVal)

    _get_UserVariables_metadata = { "name" : "UserVariables",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def UserVariables(self) -> "IAgVAUserVariableDefinitionCollection":
        """Interface used to add/remove user variables."""
        return self._intf.get_property(IAgVAMCSOptions._metadata, IAgVAMCSOptions._get_UserVariables_metadata)

    _get_SmartRunMode_metadata = { "name" : "SmartRunMode",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVASmartRunMode),) }
    @property
    def SmartRunMode(self) -> "AgEVASmartRunMode":
        """Controls whether the run will attempt to only run changed segments."""
        return self._intf.get_property(IAgVAMCSOptions._metadata, IAgVAMCSOptions._get_SmartRunMode_metadata)

    _set_SmartRunMode_metadata = { "name" : "SmartRunMode",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVASmartRunMode),) }
    @SmartRunMode.setter
    def SmartRunMode(self, inVal:"AgEVASmartRunMode") -> None:
        """Controls whether the run will attempt to only run changed segments."""
        return self._intf.set_property(IAgVAMCSOptions._metadata, IAgVAMCSOptions._set_SmartRunMode_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{81715712-591E-4553-9DC7-A1266F82E7D9}", IAgVAMCSOptions)
agcls.AgTypeNameMap["IAgVAMCSOptions"] = IAgVAMCSOptions

class IAgVADriverMCS(object):
    """Properties for the Mission Control Sequence."""
    _num_methods = 14
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{109E17B9-8E27-4B6B-A8BE-33DFF19A2C89}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_MainSequence" : 1,
                             "get_Options" : 2,
                             "get_AutoSequence" : 3,
                             "RunMCS" : 4,
                             "BeginRun" : 5,
                             "EndRun" : 6,
                             "ClearDWCGraphics" : 7,
                             "ResetAllProfiles" : 8,
                             "ApplyAllProfileChanges" : 9,
                             "AppendRun" : 10,
                             "AppendRunFromTime" : 11,
                             "AppendRunFromState" : 12,
                             "RunMCS2" : 13,
                             "get_CalculationGraphs" : 14, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVADriverMCS._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVADriverMCS from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVADriverMCS.__dict__ and type(IAgVADriverMCS.__dict__[attrname]) == property:
            return IAgVADriverMCS.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVADriverMCS.")
    
    _get_MainSequence_metadata = { "name" : "MainSequence",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def MainSequence(self) -> "IAgVAMCSSegmentCollection":
        """The Mission Control Sequence."""
        return self._intf.get_property(IAgVADriverMCS._metadata, IAgVADriverMCS._get_MainSequence_metadata)

    _get_Options_metadata = { "name" : "Options",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def Options(self) -> "IAgVAMCSOptions":
        """The Mission Control Sequence options."""
        return self._intf.get_property(IAgVADriverMCS._metadata, IAgVADriverMCS._get_Options_metadata)

    _get_AutoSequence_metadata = { "name" : "AutoSequence",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def AutoSequence(self) -> "IAgVAAutomaticSequenceCollection":
        """The Automatic Sequences."""
        return self._intf.get_property(IAgVADriverMCS._metadata, IAgVADriverMCS._get_AutoSequence_metadata)

    _RunMCS_metadata = { "name" : "RunMCS",
            "arg_types" : (),
            "marshallers" : () }
    def RunMCS(self) -> None:
        """Runs the current MCS."""
        return self._intf.invoke(IAgVADriverMCS._metadata, IAgVADriverMCS._RunMCS_metadata, )

    _BeginRun_metadata = { "name" : "BeginRun",
            "arg_types" : (),
            "marshallers" : () }
    def BeginRun(self) -> None:
        """Begins an individual segment mode run."""
        return self._intf.invoke(IAgVADriverMCS._metadata, IAgVADriverMCS._BeginRun_metadata, )

    _EndRun_metadata = { "name" : "EndRun",
            "arg_types" : (),
            "marshallers" : () }
    def EndRun(self) -> None:
        """Ends an individual segment mode run."""
        return self._intf.invoke(IAgVADriverMCS._metadata, IAgVADriverMCS._EndRun_metadata, )

    _ClearDWCGraphics_metadata = { "name" : "ClearDWCGraphics",
            "arg_types" : (),
            "marshallers" : () }
    def ClearDWCGraphics(self) -> None:
        """Clears the draw while calculating graphics"""
        return self._intf.invoke(IAgVADriverMCS._metadata, IAgVADriverMCS._ClearDWCGraphics_metadata, )

    _ResetAllProfiles_metadata = { "name" : "ResetAllProfiles",
            "arg_types" : (),
            "marshallers" : () }
    def ResetAllProfiles(self) -> None:
        """Resets all active profiles in all target sequences."""
        return self._intf.invoke(IAgVADriverMCS._metadata, IAgVADriverMCS._ResetAllProfiles_metadata, )

    _ApplyAllProfileChanges_metadata = { "name" : "ApplyAllProfileChanges",
            "arg_types" : (),
            "marshallers" : () }
    def ApplyAllProfileChanges(self) -> None:
        """Applies all active profile changes in all target sequences."""
        return self._intf.invoke(IAgVADriverMCS._metadata, IAgVADriverMCS._ApplyAllProfileChanges_metadata, )

    _AppendRun_metadata = { "name" : "AppendRun",
            "arg_types" : (),
            "marshallers" : () }
    def AppendRun(self) -> None:
        """Append the existing ephemeris with another individual segment mode run"""
        return self._intf.invoke(IAgVADriverMCS._metadata, IAgVADriverMCS._AppendRun_metadata, )

    _AppendRunFromTime_metadata = { "name" : "AppendRunFromTime",
            "arg_types" : (agcom.VARIANT, agcom.LONG,),
            "marshallers" : (agmarshall.VARIANT_arg, agmarshall.AgEnum_arg(AgEVAClearEphemerisDirection),) }
    def AppendRunFromTime(self, epoch:typing.Any, clearEphemerisDirection:"AgEVAClearEphemerisDirection") -> None:
        """Append the existing ephemeris with another individual segment mode run, starting at a specified time. Ephemeris is cleared from time based on clear direction."""
        return self._intf.invoke(IAgVADriverMCS._metadata, IAgVADriverMCS._AppendRunFromTime_metadata, epoch, clearEphemerisDirection)

    _AppendRunFromState_metadata = { "name" : "AppendRunFromState",
            "arg_types" : (agcom.PVOID, agcom.LONG,),
            "marshallers" : (agmarshall.AgInterface_in_arg("IAgVAState"), agmarshall.AgEnum_arg(AgEVAClearEphemerisDirection),) }
    def AppendRunFromState(self, appendState:"IAgVAState", clearEphemerisDirection:"AgEVAClearEphemerisDirection") -> None:
        """Append the existing ephemeris with another individual segment mode run, starting at a specified state. Ephemeris is cleared from time based on clear direction."""
        return self._intf.invoke(IAgVADriverMCS._metadata, IAgVADriverMCS._AppendRunFromState_metadata, appendState, clearEphemerisDirection)

    _RunMCS2_metadata = { "name" : "RunMCS2",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVARunCode),) }
    def RunMCS2(self) -> "AgEVARunCode":
        """Runs the current MCS and returns an error code."""
        return self._intf.invoke(IAgVADriverMCS._metadata, IAgVADriverMCS._RunMCS2_metadata, out_arg())

    _get_CalculationGraphs_metadata = { "name" : "CalculationGraphs",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def CalculationGraphs(self) -> "IAgVACalculationGraphCollection":
        """The calculation graphs."""
        return self._intf.get_property(IAgVADriverMCS._metadata, IAgVADriverMCS._get_CalculationGraphs_metadata)


agcls.AgClassCatalog.add_catalog_entry("{109E17B9-8E27-4B6B-A8BE-33DFF19A2C89}", IAgVADriverMCS)
agcls.AgTypeNameMap["IAgVADriverMCS"] = IAgVADriverMCS

class IAgVAElementCartesian(IAgVAElement):
    """Properties for Cartesian elements."""
    _num_methods = 12
    _vtable_offset = IAgVAElement._vtable_offset + IAgVAElement._num_methods
    _metadata = {
        "uuid" : "{63C45864-E165-498E-A88E-8104FABF50B9}",
        "vtable_reference" : IAgVAElement._vtable_offset + IAgVAElement._num_methods - 1,
        "method_offsets" : { "get_X" : 1,
                             "set_X" : 2,
                             "get_Y" : 3,
                             "set_Y" : 4,
                             "get_Z" : 5,
                             "set_Z" : 6,
                             "get_Vx" : 7,
                             "set_Vx" : 8,
                             "get_Vy" : 9,
                             "set_Vy" : 10,
                             "get_Vz" : 11,
                             "set_Vz" : 12, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAElementCartesian._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAElementCartesian from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAElement._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAElementCartesian.__dict__ and type(IAgVAElementCartesian.__dict__[attrname]) == property:
            return IAgVAElementCartesian.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            IAgVAElement.__setattr__(self, attrname, value)
    
    _get_X_metadata = { "name" : "X",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def X(self) -> float:
        """X position component. Uses Distance Dimension."""
        return self._intf.get_property(IAgVAElementCartesian._metadata, IAgVAElementCartesian._get_X_metadata)

    _set_X_metadata = { "name" : "X",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @X.setter
    def X(self, newVal:float) -> None:
        return self._intf.set_property(IAgVAElementCartesian._metadata, IAgVAElementCartesian._set_X_metadata, newVal)

    _get_Y_metadata = { "name" : "Y",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def Y(self) -> float:
        """Y position component. Uses Distance Dimension."""
        return self._intf.get_property(IAgVAElementCartesian._metadata, IAgVAElementCartesian._get_Y_metadata)

    _set_Y_metadata = { "name" : "Y",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @Y.setter
    def Y(self, newVal:float) -> None:
        return self._intf.set_property(IAgVAElementCartesian._metadata, IAgVAElementCartesian._set_Y_metadata, newVal)

    _get_Z_metadata = { "name" : "Z",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def Z(self) -> float:
        """Z position component. Uses Distance Dimension."""
        return self._intf.get_property(IAgVAElementCartesian._metadata, IAgVAElementCartesian._get_Z_metadata)

    _set_Z_metadata = { "name" : "Z",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @Z.setter
    def Z(self, newVal:float) -> None:
        return self._intf.set_property(IAgVAElementCartesian._metadata, IAgVAElementCartesian._set_Z_metadata, newVal)

    _get_Vx_metadata = { "name" : "Vx",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def Vx(self) -> float:
        """Vx velocity component. Uses Rate Dimension."""
        return self._intf.get_property(IAgVAElementCartesian._metadata, IAgVAElementCartesian._get_Vx_metadata)

    _set_Vx_metadata = { "name" : "Vx",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @Vx.setter
    def Vx(self, newVal:float) -> None:
        return self._intf.set_property(IAgVAElementCartesian._metadata, IAgVAElementCartesian._set_Vx_metadata, newVal)

    _get_Vy_metadata = { "name" : "Vy",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def Vy(self) -> float:
        """Vy velocity component. Uses Rate Dimension."""
        return self._intf.get_property(IAgVAElementCartesian._metadata, IAgVAElementCartesian._get_Vy_metadata)

    _set_Vy_metadata = { "name" : "Vy",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @Vy.setter
    def Vy(self, newVal:float) -> None:
        return self._intf.set_property(IAgVAElementCartesian._metadata, IAgVAElementCartesian._set_Vy_metadata, newVal)

    _get_Vz_metadata = { "name" : "Vz",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def Vz(self) -> float:
        """Vz velocity component. Uses Rate Dimension."""
        return self._intf.get_property(IAgVAElementCartesian._metadata, IAgVAElementCartesian._get_Vz_metadata)

    _set_Vz_metadata = { "name" : "Vz",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @Vz.setter
    def Vz(self, newVal:float) -> None:
        return self._intf.set_property(IAgVAElementCartesian._metadata, IAgVAElementCartesian._set_Vz_metadata, newVal)


agcls.AgClassCatalog.add_catalog_entry("{63C45864-E165-498E-A88E-8104FABF50B9}", IAgVAElementCartesian)
agcls.AgTypeNameMap["IAgVAElementCartesian"] = IAgVAElementCartesian

class IAgVAElementKeplerian(IAgVAElement):
    """Properties for Keplerian elements"""
    _num_methods = 46
    _vtable_offset = IAgVAElement._vtable_offset + IAgVAElement._num_methods
    _metadata = {
        "uuid" : "{3550E5F6-FDEF-4325-BDBA-2BA984208ECB}",
        "vtable_reference" : IAgVAElement._vtable_offset + IAgVAElement._num_methods - 1,
        "method_offsets" : { "get_SemiMajorAxis" : 1,
                             "set_SemiMajorAxis" : 2,
                             "get_Eccentricity" : 3,
                             "set_Eccentricity" : 4,
                             "get_Inclination" : 5,
                             "set_Inclination" : 6,
                             "get_RAAN" : 7,
                             "set_RAAN" : 8,
                             "get_ArgOfPeriapsis" : 9,
                             "set_ArgOfPeriapsis" : 10,
                             "get_TrueAnomaly" : 11,
                             "set_TrueAnomaly" : 12,
                             "get_ApoapsisAltitudeSize" : 13,
                             "set_ApoapsisAltitudeSize" : 14,
                             "get_ApoapsisRadiusSize" : 15,
                             "set_ApoapsisRadiusSize" : 16,
                             "get_MeanMotion" : 17,
                             "set_MeanMotion" : 18,
                             "get_PeriapsisAltitudeSize" : 19,
                             "set_PeriapsisAltitudeSize" : 20,
                             "get_PeriapsisRadiusSize" : 21,
                             "set_PeriapsisRadiusSize" : 22,
                             "get_Period" : 23,
                             "set_Period" : 24,
                             "get_LAN" : 25,
                             "set_LAN" : 26,
                             "get_ArgOfLatitude" : 27,
                             "set_ArgOfLatitude" : 28,
                             "get_EccentricAnomaly" : 29,
                             "set_EccentricAnomaly" : 30,
                             "get_MeanAnomaly" : 31,
                             "set_MeanAnomaly" : 32,
                             "get_TimePastAscNode" : 33,
                             "set_TimePastAscNode" : 34,
                             "get_TimePastPeriapsis" : 35,
                             "set_TimePastPeriapsis" : 36,
                             "get_ElementType" : 37,
                             "set_ElementType" : 38,
                             "get_ApoapsisAltitudeShape" : 39,
                             "set_ApoapsisAltitudeShape" : 40,
                             "get_ApoapsisRadiusShape" : 41,
                             "set_ApoapsisRadiusShape" : 42,
                             "get_PeriapsisAltitudeShape" : 43,
                             "set_PeriapsisAltitudeShape" : 44,
                             "get_PeriapsisRadiusShape" : 45,
                             "set_PeriapsisRadiusShape" : 46, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAElementKeplerian._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAElementKeplerian from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAElement._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAElementKeplerian.__dict__ and type(IAgVAElementKeplerian.__dict__[attrname]) == property:
            return IAgVAElementKeplerian.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            IAgVAElement.__setattr__(self, attrname, value)
    
    _get_SemiMajorAxis_metadata = { "name" : "SemiMajorAxis",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def SemiMajorAxis(self) -> float:
        """One-half the distance along the long axis of the elliptical orbit. Uses Distance Dimension."""
        return self._intf.get_property(IAgVAElementKeplerian._metadata, IAgVAElementKeplerian._get_SemiMajorAxis_metadata)

    _set_SemiMajorAxis_metadata = { "name" : "SemiMajorAxis",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @SemiMajorAxis.setter
    def SemiMajorAxis(self, newVal:float) -> None:
        return self._intf.set_property(IAgVAElementKeplerian._metadata, IAgVAElementKeplerian._set_SemiMajorAxis_metadata, newVal)

    _get_Eccentricity_metadata = { "name" : "Eccentricity",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def Eccentricity(self) -> float:
        """Describes the shape of the ellipse (a real number >= 0 and <1, where 0 = a circular orbit). Dimensionless."""
        return self._intf.get_property(IAgVAElementKeplerian._metadata, IAgVAElementKeplerian._get_Eccentricity_metadata)

    _set_Eccentricity_metadata = { "name" : "Eccentricity",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @Eccentricity.setter
    def Eccentricity(self, newVal:float) -> None:
        return self._intf.set_property(IAgVAElementKeplerian._metadata, IAgVAElementKeplerian._set_Eccentricity_metadata, newVal)

    _get_Inclination_metadata = { "name" : "Inclination",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def Inclination(self) -> typing.Any:
        """The angle between the angular momentum vector (perpendicular to the plane of the orbit) and the inertial Z axis. Uses Angle Dimension."""
        return self._intf.get_property(IAgVAElementKeplerian._metadata, IAgVAElementKeplerian._get_Inclination_metadata)

    _set_Inclination_metadata = { "name" : "Inclination",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @Inclination.setter
    def Inclination(self, newVal:typing.Any) -> None:
        return self._intf.set_property(IAgVAElementKeplerian._metadata, IAgVAElementKeplerian._set_Inclination_metadata, newVal)

    _get_RAAN_metadata = { "name" : "RAAN",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def RAAN(self) -> typing.Any:
        """The angle from the inertial X axis to the ascending node measured in a right-handed sense about the inertial Z axis in the equatorial plane. Uses Angle Dimension."""
        return self._intf.get_property(IAgVAElementKeplerian._metadata, IAgVAElementKeplerian._get_RAAN_metadata)

    _set_RAAN_metadata = { "name" : "RAAN",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @RAAN.setter
    def RAAN(self, newVal:typing.Any) -> None:
        return self._intf.set_property(IAgVAElementKeplerian._metadata, IAgVAElementKeplerian._set_RAAN_metadata, newVal)

    _get_ArgOfPeriapsis_metadata = { "name" : "ArgOfPeriapsis",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def ArgOfPeriapsis(self) -> typing.Any:
        """The angle from the ascending node to the eccentricity vector (lowest point of orbit) measured in the direction of the satellite's motion and in the orbit plane. Uses Angle Dimension."""
        return self._intf.get_property(IAgVAElementKeplerian._metadata, IAgVAElementKeplerian._get_ArgOfPeriapsis_metadata)

    _set_ArgOfPeriapsis_metadata = { "name" : "ArgOfPeriapsis",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @ArgOfPeriapsis.setter
    def ArgOfPeriapsis(self, newVal:typing.Any) -> None:
        return self._intf.set_property(IAgVAElementKeplerian._metadata, IAgVAElementKeplerian._set_ArgOfPeriapsis_metadata, newVal)

    _get_TrueAnomaly_metadata = { "name" : "TrueAnomaly",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def TrueAnomaly(self) -> typing.Any:
        """The angle from the eccentricity vector (points toward perigee) to the satellite position vector, measured in the direction of satellite motion and in the orbit plane. Uses Angle Dimension."""
        return self._intf.get_property(IAgVAElementKeplerian._metadata, IAgVAElementKeplerian._get_TrueAnomaly_metadata)

    _set_TrueAnomaly_metadata = { "name" : "TrueAnomaly",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @TrueAnomaly.setter
    def TrueAnomaly(self, newVal:typing.Any) -> None:
        return self._intf.set_property(IAgVAElementKeplerian._metadata, IAgVAElementKeplerian._set_TrueAnomaly_metadata, newVal)

    _get_ApoapsisAltitudeSize_metadata = { "name" : "ApoapsisAltitudeSize",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def ApoapsisAltitudeSize(self) -> float:
        """Measured from the ``surface`` of the Earth to the points of maximum and minimum radius in the orbit. For these values, the surface of the Earth is modeled as a sphere whose radius equals the equatorial radius of the Earth. Uses Distance dimension."""
        return self._intf.get_property(IAgVAElementKeplerian._metadata, IAgVAElementKeplerian._get_ApoapsisAltitudeSize_metadata)

    _set_ApoapsisAltitudeSize_metadata = { "name" : "ApoapsisAltitudeSize",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @ApoapsisAltitudeSize.setter
    def ApoapsisAltitudeSize(self, inVal:float) -> None:
        return self._intf.set_property(IAgVAElementKeplerian._metadata, IAgVAElementKeplerian._set_ApoapsisAltitudeSize_metadata, inVal)

    _get_ApoapsisRadiusSize_metadata = { "name" : "ApoapsisRadiusSize",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def ApoapsisRadiusSize(self) -> float:
        """Measured from the center of the Earth to the points of maximum and minimum radius in the orbit. Uses Distance dimension."""
        return self._intf.get_property(IAgVAElementKeplerian._metadata, IAgVAElementKeplerian._get_ApoapsisRadiusSize_metadata)

    _set_ApoapsisRadiusSize_metadata = { "name" : "ApoapsisRadiusSize",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @ApoapsisRadiusSize.setter
    def ApoapsisRadiusSize(self, inVal:float) -> None:
        return self._intf.set_property(IAgVAElementKeplerian._metadata, IAgVAElementKeplerian._set_ApoapsisRadiusSize_metadata, inVal)

    _get_MeanMotion_metadata = { "name" : "MeanMotion",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def MeanMotion(self) -> float:
        """The uniform rate of the satellite in a circular orbit of the same period, typically expressed as degrees or radians per second, or as revolutions per day. Uses AngleRate dimension."""
        return self._intf.get_property(IAgVAElementKeplerian._metadata, IAgVAElementKeplerian._get_MeanMotion_metadata)

    _set_MeanMotion_metadata = { "name" : "MeanMotion",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @MeanMotion.setter
    def MeanMotion(self, inVal:float) -> None:
        """."""
        return self._intf.set_property(IAgVAElementKeplerian._metadata, IAgVAElementKeplerian._set_MeanMotion_metadata, inVal)

    _get_PeriapsisAltitudeSize_metadata = { "name" : "PeriapsisAltitudeSize",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def PeriapsisAltitudeSize(self) -> float:
        """Measured from the ``surface`` of the Earth to the points of maximum and minimum radius in the orbit. For these values, the surface of the Earth is modeled as a sphere whose radius equals the equatorial radius of the Earth. Uses Distance dimension."""
        return self._intf.get_property(IAgVAElementKeplerian._metadata, IAgVAElementKeplerian._get_PeriapsisAltitudeSize_metadata)

    _set_PeriapsisAltitudeSize_metadata = { "name" : "PeriapsisAltitudeSize",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @PeriapsisAltitudeSize.setter
    def PeriapsisAltitudeSize(self, inVal:float) -> None:
        return self._intf.set_property(IAgVAElementKeplerian._metadata, IAgVAElementKeplerian._set_PeriapsisAltitudeSize_metadata, inVal)

    _get_PeriapsisRadiusSize_metadata = { "name" : "PeriapsisRadiusSize",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def PeriapsisRadiusSize(self) -> float:
        """Measured from the center of the Earth to the points of maximum and minimum radius in the orbit. Uses Distance dimension."""
        return self._intf.get_property(IAgVAElementKeplerian._metadata, IAgVAElementKeplerian._get_PeriapsisRadiusSize_metadata)

    _set_PeriapsisRadiusSize_metadata = { "name" : "PeriapsisRadiusSize",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @PeriapsisRadiusSize.setter
    def PeriapsisRadiusSize(self, inVal:float) -> None:
        return self._intf.set_property(IAgVAElementKeplerian._metadata, IAgVAElementKeplerian._set_PeriapsisRadiusSize_metadata, inVal)

    _get_Period_metadata = { "name" : "Period",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def Period(self) -> float:
        """The duration of one orbit, based on assumed two-body motion. Uses Time dimension."""
        return self._intf.get_property(IAgVAElementKeplerian._metadata, IAgVAElementKeplerian._get_Period_metadata)

    _set_Period_metadata = { "name" : "Period",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @Period.setter
    def Period(self, inVal:float) -> None:
        return self._intf.set_property(IAgVAElementKeplerian._metadata, IAgVAElementKeplerian._set_Period_metadata, inVal)

    _get_LAN_metadata = { "name" : "LAN",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def LAN(self) -> typing.Any:
        """The Earth-fixed longitude where the satellite has crossed the inertial equator (the intersection of the ground track and the inertial equator) from south to north based on an assumption of two-body motion. Uses Angle dimension."""
        return self._intf.get_property(IAgVAElementKeplerian._metadata, IAgVAElementKeplerian._get_LAN_metadata)

    _set_LAN_metadata = { "name" : "LAN",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @LAN.setter
    def LAN(self, inVal:typing.Any) -> None:
        return self._intf.set_property(IAgVAElementKeplerian._metadata, IAgVAElementKeplerian._set_LAN_metadata, inVal)

    _get_ArgOfLatitude_metadata = { "name" : "ArgOfLatitude",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def ArgOfLatitude(self) -> typing.Any:
        """The sum of the True Anomaly and the Argument of Perigee. Uses Angle Dimension."""
        return self._intf.get_property(IAgVAElementKeplerian._metadata, IAgVAElementKeplerian._get_ArgOfLatitude_metadata)

    _set_ArgOfLatitude_metadata = { "name" : "ArgOfLatitude",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @ArgOfLatitude.setter
    def ArgOfLatitude(self, newVal:typing.Any) -> None:
        return self._intf.set_property(IAgVAElementKeplerian._metadata, IAgVAElementKeplerian._set_ArgOfLatitude_metadata, newVal)

    _get_EccentricAnomaly_metadata = { "name" : "EccentricAnomaly",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def EccentricAnomaly(self) -> typing.Any:
        """Angle measured with origin at the center of the ellipse from the direction of perigee to a point on a circumscribing circle from which a line perpendicular to the SMA intersects the position of the satellite on the ellipse. Uses Angle Dimension."""
        return self._intf.get_property(IAgVAElementKeplerian._metadata, IAgVAElementKeplerian._get_EccentricAnomaly_metadata)

    _set_EccentricAnomaly_metadata = { "name" : "EccentricAnomaly",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @EccentricAnomaly.setter
    def EccentricAnomaly(self, newVal:typing.Any) -> None:
        return self._intf.set_property(IAgVAElementKeplerian._metadata, IAgVAElementKeplerian._set_EccentricAnomaly_metadata, newVal)

    _get_MeanAnomaly_metadata = { "name" : "MeanAnomaly",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def MeanAnomaly(self) -> typing.Any:
        """The angle from the eccentricity vector to a position vector where the satellite would be if it were always moving at its average angular rate. Uses Angle Dimension."""
        return self._intf.get_property(IAgVAElementKeplerian._metadata, IAgVAElementKeplerian._get_MeanAnomaly_metadata)

    _set_MeanAnomaly_metadata = { "name" : "MeanAnomaly",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @MeanAnomaly.setter
    def MeanAnomaly(self, newVal:typing.Any) -> None:
        return self._intf.set_property(IAgVAElementKeplerian._metadata, IAgVAElementKeplerian._set_MeanAnomaly_metadata, newVal)

    _get_TimePastAscNode_metadata = { "name" : "TimePastAscNode",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def TimePastAscNode(self) -> float:
        """The elapsed time since the last ascending node crossing based on assumed two-body motion. Uses Time Dimension."""
        return self._intf.get_property(IAgVAElementKeplerian._metadata, IAgVAElementKeplerian._get_TimePastAscNode_metadata)

    _set_TimePastAscNode_metadata = { "name" : "TimePastAscNode",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @TimePastAscNode.setter
    def TimePastAscNode(self, newVal:float) -> None:
        return self._intf.set_property(IAgVAElementKeplerian._metadata, IAgVAElementKeplerian._set_TimePastAscNode_metadata, newVal)

    _get_TimePastPeriapsis_metadata = { "name" : "TimePastPeriapsis",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def TimePastPeriapsis(self) -> float:
        """The elapsed time since the last perigee passage based on assumed two-body motion. Uses Time Dimension."""
        return self._intf.get_property(IAgVAElementKeplerian._metadata, IAgVAElementKeplerian._get_TimePastPeriapsis_metadata)

    _set_TimePastPeriapsis_metadata = { "name" : "TimePastPeriapsis",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @TimePastPeriapsis.setter
    def TimePastPeriapsis(self, newVal:float) -> None:
        return self._intf.set_property(IAgVAElementKeplerian._metadata, IAgVAElementKeplerian._set_TimePastPeriapsis_metadata, newVal)

    _get_ElementType_metadata = { "name" : "ElementType",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAElement),) }
    @property
    def ElementType(self) -> "AgEVAElement":
        """Which type of element (osculating or mean)."""
        return self._intf.get_property(IAgVAElementKeplerian._metadata, IAgVAElementKeplerian._get_ElementType_metadata)

    _set_ElementType_metadata = { "name" : "ElementType",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAElement),) }
    @ElementType.setter
    def ElementType(self, inVal:"AgEVAElement") -> None:
        """."""
        return self._intf.set_property(IAgVAElementKeplerian._metadata, IAgVAElementKeplerian._set_ElementType_metadata, inVal)

    _get_ApoapsisAltitudeShape_metadata = { "name" : "ApoapsisAltitudeShape",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def ApoapsisAltitudeShape(self) -> float:
        """Describes the shape of the ellipse. Uses Distance dimension."""
        return self._intf.get_property(IAgVAElementKeplerian._metadata, IAgVAElementKeplerian._get_ApoapsisAltitudeShape_metadata)

    _set_ApoapsisAltitudeShape_metadata = { "name" : "ApoapsisAltitudeShape",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @ApoapsisAltitudeShape.setter
    def ApoapsisAltitudeShape(self, inVal:float) -> None:
        return self._intf.set_property(IAgVAElementKeplerian._metadata, IAgVAElementKeplerian._set_ApoapsisAltitudeShape_metadata, inVal)

    _get_ApoapsisRadiusShape_metadata = { "name" : "ApoapsisRadiusShape",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def ApoapsisRadiusShape(self) -> float:
        """Describes the shape of the ellipse. Uses Distance dimension."""
        return self._intf.get_property(IAgVAElementKeplerian._metadata, IAgVAElementKeplerian._get_ApoapsisRadiusShape_metadata)

    _set_ApoapsisRadiusShape_metadata = { "name" : "ApoapsisRadiusShape",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @ApoapsisRadiusShape.setter
    def ApoapsisRadiusShape(self, inVal:float) -> None:
        return self._intf.set_property(IAgVAElementKeplerian._metadata, IAgVAElementKeplerian._set_ApoapsisRadiusShape_metadata, inVal)

    _get_PeriapsisAltitudeShape_metadata = { "name" : "PeriapsisAltitudeShape",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def PeriapsisAltitudeShape(self) -> float:
        """Describes the shape of the ellipse. Uses Distance dimension."""
        return self._intf.get_property(IAgVAElementKeplerian._metadata, IAgVAElementKeplerian._get_PeriapsisAltitudeShape_metadata)

    _set_PeriapsisAltitudeShape_metadata = { "name" : "PeriapsisAltitudeShape",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @PeriapsisAltitudeShape.setter
    def PeriapsisAltitudeShape(self, inVal:float) -> None:
        return self._intf.set_property(IAgVAElementKeplerian._metadata, IAgVAElementKeplerian._set_PeriapsisAltitudeShape_metadata, inVal)

    _get_PeriapsisRadiusShape_metadata = { "name" : "PeriapsisRadiusShape",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def PeriapsisRadiusShape(self) -> float:
        """Describes the shape of the ellipse. Uses Distance dimension."""
        return self._intf.get_property(IAgVAElementKeplerian._metadata, IAgVAElementKeplerian._get_PeriapsisRadiusShape_metadata)

    _set_PeriapsisRadiusShape_metadata = { "name" : "PeriapsisRadiusShape",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @PeriapsisRadiusShape.setter
    def PeriapsisRadiusShape(self, inVal:float) -> None:
        return self._intf.set_property(IAgVAElementKeplerian._metadata, IAgVAElementKeplerian._set_PeriapsisRadiusShape_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{3550E5F6-FDEF-4325-BDBA-2BA984208ECB}", IAgVAElementKeplerian)
agcls.AgTypeNameMap["IAgVAElementKeplerian"] = IAgVAElementKeplerian

class IAgVAElementDelaunay(IAgVAElement):
    """Properties for Delaunay elements"""
    _num_methods = 18
    _vtable_offset = IAgVAElement._vtable_offset + IAgVAElement._num_methods
    _metadata = {
        "uuid" : "{2D09DD04-C97C-43DB-B01A-D78DDD52FE1F}",
        "vtable_reference" : IAgVAElement._vtable_offset + IAgVAElement._num_methods - 1,
        "method_offsets" : { "get_MeanAnomaly" : 1,
                             "set_MeanAnomaly" : 2,
                             "get_ArgOfPeriapsis" : 3,
                             "set_ArgOfPeriapsis" : 4,
                             "get_RAAN" : 5,
                             "set_RAAN" : 6,
                             "get_DelaunayL" : 7,
                             "set_DelaunayL" : 8,
                             "get_SemiMajorAxis" : 9,
                             "set_SemiMajorAxis" : 10,
                             "get_DelaunayG" : 11,
                             "set_DelaunayG" : 12,
                             "get_SemilatusRectum" : 13,
                             "set_SemilatusRectum" : 14,
                             "get_DelaunayH" : 15,
                             "set_DelaunayH" : 16,
                             "get_Inclination" : 17,
                             "set_Inclination" : 18, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAElementDelaunay._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAElementDelaunay from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAElement._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAElementDelaunay.__dict__ and type(IAgVAElementDelaunay.__dict__[attrname]) == property:
            return IAgVAElementDelaunay.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            IAgVAElement.__setattr__(self, attrname, value)
    
    _get_MeanAnomaly_metadata = { "name" : "MeanAnomaly",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def MeanAnomaly(self) -> typing.Any:
        """The angle from the eccentricity vector to a position vector where the satellite would be if it were always moving at its average angular rate (l). Uses Angle Dimension."""
        return self._intf.get_property(IAgVAElementDelaunay._metadata, IAgVAElementDelaunay._get_MeanAnomaly_metadata)

    _set_MeanAnomaly_metadata = { "name" : "MeanAnomaly",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @MeanAnomaly.setter
    def MeanAnomaly(self, newVal:typing.Any) -> None:
        return self._intf.set_property(IAgVAElementDelaunay._metadata, IAgVAElementDelaunay._set_MeanAnomaly_metadata, newVal)

    _get_ArgOfPeriapsis_metadata = { "name" : "ArgOfPeriapsis",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def ArgOfPeriapsis(self) -> typing.Any:
        """The angle from the ascending node to the eccentricity vector (lowest point of orbit) measured in the direction of the satellite's motion and in the orbit plane (g). Uses Angle Dimension."""
        return self._intf.get_property(IAgVAElementDelaunay._metadata, IAgVAElementDelaunay._get_ArgOfPeriapsis_metadata)

    _set_ArgOfPeriapsis_metadata = { "name" : "ArgOfPeriapsis",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @ArgOfPeriapsis.setter
    def ArgOfPeriapsis(self, newVal:typing.Any) -> None:
        return self._intf.set_property(IAgVAElementDelaunay._metadata, IAgVAElementDelaunay._set_ArgOfPeriapsis_metadata, newVal)

    _get_RAAN_metadata = { "name" : "RAAN",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def RAAN(self) -> typing.Any:
        """The angle from the inertial X axis to the ascending node measured in a right-handed sense about the inertial Z axis in the equatorial plane (h). Uses Angle Dimension."""
        return self._intf.get_property(IAgVAElementDelaunay._metadata, IAgVAElementDelaunay._get_RAAN_metadata)

    _set_RAAN_metadata = { "name" : "RAAN",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @RAAN.setter
    def RAAN(self, newVal:typing.Any) -> None:
        return self._intf.set_property(IAgVAElementDelaunay._metadata, IAgVAElementDelaunay._set_RAAN_metadata, newVal)

    _get_DelaunayL_metadata = { "name" : "DelaunayL",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def DelaunayL(self) -> float:
        """Related to the two-body orbital energy. Defined as sqrt(GM * a).   Uses AreaRate Dimension."""
        return self._intf.get_property(IAgVAElementDelaunay._metadata, IAgVAElementDelaunay._get_DelaunayL_metadata)

    _set_DelaunayL_metadata = { "name" : "DelaunayL",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @DelaunayL.setter
    def DelaunayL(self, newVal:float) -> None:
        return self._intf.set_property(IAgVAElementDelaunay._metadata, IAgVAElementDelaunay._set_DelaunayL_metadata, newVal)

    _get_SemiMajorAxis_metadata = { "name" : "SemiMajorAxis",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def SemiMajorAxis(self) -> float:
        """One-half the distance along the long axis of the elliptical orbit. Uses Distance Dimension."""
        return self._intf.get_property(IAgVAElementDelaunay._metadata, IAgVAElementDelaunay._get_SemiMajorAxis_metadata)

    _set_SemiMajorAxis_metadata = { "name" : "SemiMajorAxis",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @SemiMajorAxis.setter
    def SemiMajorAxis(self, newVal:float) -> None:
        return self._intf.set_property(IAgVAElementDelaunay._metadata, IAgVAElementDelaunay._set_SemiMajorAxis_metadata, newVal)

    _get_DelaunayG_metadata = { "name" : "DelaunayG",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def DelaunayG(self) -> float:
        """The magnitude of the orbital angular momentum. Defined as sqrt(GM * p). Uses AreaRate Dimension."""
        return self._intf.get_property(IAgVAElementDelaunay._metadata, IAgVAElementDelaunay._get_DelaunayG_metadata)

    _set_DelaunayG_metadata = { "name" : "DelaunayG",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @DelaunayG.setter
    def DelaunayG(self, newVal:float) -> None:
        return self._intf.set_property(IAgVAElementDelaunay._metadata, IAgVAElementDelaunay._set_DelaunayG_metadata, newVal)

    _get_SemilatusRectum_metadata = { "name" : "SemilatusRectum",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def SemilatusRectum(self) -> float:
        """Semi-latus Rectum. Uses Distance Dimension."""
        return self._intf.get_property(IAgVAElementDelaunay._metadata, IAgVAElementDelaunay._get_SemilatusRectum_metadata)

    _set_SemilatusRectum_metadata = { "name" : "SemilatusRectum",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @SemilatusRectum.setter
    def SemilatusRectum(self, newVal:float) -> None:
        return self._intf.set_property(IAgVAElementDelaunay._metadata, IAgVAElementDelaunay._set_SemilatusRectum_metadata, newVal)

    _get_DelaunayH_metadata = { "name" : "DelaunayH",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def DelaunayH(self) -> float:
        """The Z component of the orbital angular momentum. Defined as G cos(inc).  Uses AreaRate Dimension."""
        return self._intf.get_property(IAgVAElementDelaunay._metadata, IAgVAElementDelaunay._get_DelaunayH_metadata)

    _set_DelaunayH_metadata = { "name" : "DelaunayH",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @DelaunayH.setter
    def DelaunayH(self, newVal:float) -> None:
        return self._intf.set_property(IAgVAElementDelaunay._metadata, IAgVAElementDelaunay._set_DelaunayH_metadata, newVal)

    _get_Inclination_metadata = { "name" : "Inclination",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def Inclination(self) -> typing.Any:
        """The angle between the angular momentum vector (perpendicular to the plane of the orbit) and the inertial Z axis. Uses Angle Dimension."""
        return self._intf.get_property(IAgVAElementDelaunay._metadata, IAgVAElementDelaunay._get_Inclination_metadata)

    _set_Inclination_metadata = { "name" : "Inclination",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @Inclination.setter
    def Inclination(self, newVal:typing.Any) -> None:
        return self._intf.set_property(IAgVAElementDelaunay._metadata, IAgVAElementDelaunay._set_Inclination_metadata, newVal)


agcls.AgClassCatalog.add_catalog_entry("{2D09DD04-C97C-43DB-B01A-D78DDD52FE1F}", IAgVAElementDelaunay)
agcls.AgTypeNameMap["IAgVAElementDelaunay"] = IAgVAElementDelaunay

class IAgVAElementEquinoctial(IAgVAElement):
    """Properties for Equinoctial elements"""
    _num_methods = 16
    _vtable_offset = IAgVAElement._vtable_offset + IAgVAElement._num_methods
    _metadata = {
        "uuid" : "{90FA8C03-AA29-446A-A23A-085B71502DAA}",
        "vtable_reference" : IAgVAElement._vtable_offset + IAgVAElement._num_methods - 1,
        "method_offsets" : { "get_SemiMajorAxis" : 1,
                             "set_SemiMajorAxis" : 2,
                             "get_MeanMotion" : 3,
                             "set_MeanMotion" : 4,
                             "get_h" : 5,
                             "set_h" : 6,
                             "get_k" : 7,
                             "set_k" : 8,
                             "get_p" : 9,
                             "set_p" : 10,
                             "get_q" : 11,
                             "set_q" : 12,
                             "get_MeanLongitude" : 13,
                             "set_MeanLongitude" : 14,
                             "get_Formulation" : 15,
                             "set_Formulation" : 16, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAElementEquinoctial._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAElementEquinoctial from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAElement._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAElementEquinoctial.__dict__ and type(IAgVAElementEquinoctial.__dict__[attrname]) == property:
            return IAgVAElementEquinoctial.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            IAgVAElement.__setattr__(self, attrname, value)
    
    _get_SemiMajorAxis_metadata = { "name" : "SemiMajorAxis",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def SemiMajorAxis(self) -> float:
        """Half the length of the major axis of the orbital ellipse. Uses Distance Dimension."""
        return self._intf.get_property(IAgVAElementEquinoctial._metadata, IAgVAElementEquinoctial._get_SemiMajorAxis_metadata)

    _set_SemiMajorAxis_metadata = { "name" : "SemiMajorAxis",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @SemiMajorAxis.setter
    def SemiMajorAxis(self, newVal:float) -> None:
        return self._intf.set_property(IAgVAElementEquinoctial._metadata, IAgVAElementEquinoctial._set_SemiMajorAxis_metadata, newVal)

    _get_MeanMotion_metadata = { "name" : "MeanMotion",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def MeanMotion(self) -> float:
        """The average angular rate of the satellite based on 2 body motion. Uses Rate Dimension."""
        return self._intf.get_property(IAgVAElementEquinoctial._metadata, IAgVAElementEquinoctial._get_MeanMotion_metadata)

    _set_MeanMotion_metadata = { "name" : "MeanMotion",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @MeanMotion.setter
    def MeanMotion(self, newVal:float) -> None:
        return self._intf.set_property(IAgVAElementEquinoctial._metadata, IAgVAElementEquinoctial._set_MeanMotion_metadata, newVal)

    _get_h_metadata = { "name" : "h",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def h(self) -> float:
        """h/k collectively describe the shape of the satellite's orbit and the position of perigee. Dimensionless."""
        return self._intf.get_property(IAgVAElementEquinoctial._metadata, IAgVAElementEquinoctial._get_h_metadata)

    _set_h_metadata = { "name" : "h",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @h.setter
    def h(self, newVal:float) -> None:
        return self._intf.set_property(IAgVAElementEquinoctial._metadata, IAgVAElementEquinoctial._set_h_metadata, newVal)

    _get_k_metadata = { "name" : "k",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def k(self) -> float:
        """h/k collectively describe the shape of the satellite's orbit and the position of perigee. Dimensionless."""
        return self._intf.get_property(IAgVAElementEquinoctial._metadata, IAgVAElementEquinoctial._get_k_metadata)

    _set_k_metadata = { "name" : "k",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @k.setter
    def k(self, newVal:float) -> None:
        return self._intf.set_property(IAgVAElementEquinoctial._metadata, IAgVAElementEquinoctial._set_k_metadata, newVal)

    _get_p_metadata = { "name" : "p",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def p(self) -> float:
        """p/q collectively describe the orientation of the satellite's orbit plane. Dimensionless."""
        return self._intf.get_property(IAgVAElementEquinoctial._metadata, IAgVAElementEquinoctial._get_p_metadata)

    _set_p_metadata = { "name" : "p",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @p.setter
    def p(self, newVal:float) -> None:
        return self._intf.set_property(IAgVAElementEquinoctial._metadata, IAgVAElementEquinoctial._set_p_metadata, newVal)

    _get_q_metadata = { "name" : "q",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def q(self) -> float:
        """p/q collectively describe the orientation of the satellite's orbit plane. Dimensionless."""
        return self._intf.get_property(IAgVAElementEquinoctial._metadata, IAgVAElementEquinoctial._get_q_metadata)

    _set_q_metadata = { "name" : "q",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @q.setter
    def q(self, newVal:float) -> None:
        return self._intf.set_property(IAgVAElementEquinoctial._metadata, IAgVAElementEquinoctial._set_q_metadata, newVal)

    _get_MeanLongitude_metadata = { "name" : "MeanLongitude",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def MeanLongitude(self) -> typing.Any:
        """Specifies a satellite's position within its orbit at epoch and equals the sum of the classical Right Ascension of the Ascending Node, Argument of Perigee, and Mean Anomaly. Uses Angle Dimension."""
        return self._intf.get_property(IAgVAElementEquinoctial._metadata, IAgVAElementEquinoctial._get_MeanLongitude_metadata)

    _set_MeanLongitude_metadata = { "name" : "MeanLongitude",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @MeanLongitude.setter
    def MeanLongitude(self, newVal:typing.Any) -> None:
        return self._intf.set_property(IAgVAElementEquinoctial._metadata, IAgVAElementEquinoctial._set_MeanLongitude_metadata, newVal)

    _get_Formulation_metadata = { "name" : "Formulation",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAFormulation),) }
    @property
    def Formulation(self) -> "AgEVAFormulation":
        """Retrograde, which has its singularity at an inclination of 0 deg. Posigrade, which has its singularity at an inclination of 180 deg."""
        return self._intf.get_property(IAgVAElementEquinoctial._metadata, IAgVAElementEquinoctial._get_Formulation_metadata)

    _set_Formulation_metadata = { "name" : "Formulation",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAFormulation),) }
    @Formulation.setter
    def Formulation(self, inVal:"AgEVAFormulation") -> None:
        return self._intf.set_property(IAgVAElementEquinoctial._metadata, IAgVAElementEquinoctial._set_Formulation_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{90FA8C03-AA29-446A-A23A-085B71502DAA}", IAgVAElementEquinoctial)
agcls.AgTypeNameMap["IAgVAElementEquinoctial"] = IAgVAElementEquinoctial

class IAgVAElementMixedSpherical(IAgVAElement):
    """Properties for Mixed Spherical elements"""
    _num_methods = 14
    _vtable_offset = IAgVAElement._vtable_offset + IAgVAElement._num_methods
    _metadata = {
        "uuid" : "{8A1D2A11-5A9D-49D8-9CE6-6435B1173292}",
        "vtable_reference" : IAgVAElement._vtable_offset + IAgVAElement._num_methods - 1,
        "method_offsets" : { "get_Longitude" : 1,
                             "set_Longitude" : 2,
                             "get_Latitude" : 3,
                             "set_Latitude" : 4,
                             "get_Altitude" : 5,
                             "set_Altitude" : 6,
                             "get_HorizontalFlightPathAngle" : 7,
                             "set_HorizontalFlightPathAngle" : 8,
                             "get_VelocityAzimuth" : 9,
                             "set_VelocityAzimuth" : 10,
                             "get_VelocityMagnitude" : 11,
                             "set_VelocityMagnitude" : 12,
                             "get_VerticalFlightPathAngle" : 13,
                             "set_VerticalFlightPathAngle" : 14, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAElementMixedSpherical._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAElementMixedSpherical from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAElement._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAElementMixedSpherical.__dict__ and type(IAgVAElementMixedSpherical.__dict__[attrname]) == property:
            return IAgVAElementMixedSpherical.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            IAgVAElement.__setattr__(self, attrname, value)
    
    _get_Longitude_metadata = { "name" : "Longitude",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def Longitude(self) -> typing.Any:
        """Measured from -180.0 deg to +360.0 deg. Uses Angle Dimension."""
        return self._intf.get_property(IAgVAElementMixedSpherical._metadata, IAgVAElementMixedSpherical._get_Longitude_metadata)

    _set_Longitude_metadata = { "name" : "Longitude",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @Longitude.setter
    def Longitude(self, newVal:typing.Any) -> None:
        return self._intf.set_property(IAgVAElementMixedSpherical._metadata, IAgVAElementMixedSpherical._set_Longitude_metadata, newVal)

    _get_Latitude_metadata = { "name" : "Latitude",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def Latitude(self) -> typing.Any:
        """Measured from -90.0 deg to +90.0 deg. The geodetic latitude of a point is the angle between (1) the normal to the reference ellipsoid that passes through the satellite position and (2) the equatorial plane. Uses Angle Dimension."""
        return self._intf.get_property(IAgVAElementMixedSpherical._metadata, IAgVAElementMixedSpherical._get_Latitude_metadata)

    _set_Latitude_metadata = { "name" : "Latitude",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @Latitude.setter
    def Latitude(self, newVal:typing.Any) -> None:
        return self._intf.set_property(IAgVAElementMixedSpherical._metadata, IAgVAElementMixedSpherical._set_Latitude_metadata, newVal)

    _get_Altitude_metadata = { "name" : "Altitude",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def Altitude(self) -> float:
        """The object's position above or below the reference ellipsoid. Altitude is measured along a normal to the surface of the reference ellipsoid. Uses Distance Dimension."""
        return self._intf.get_property(IAgVAElementMixedSpherical._metadata, IAgVAElementMixedSpherical._get_Altitude_metadata)

    _set_Altitude_metadata = { "name" : "Altitude",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @Altitude.setter
    def Altitude(self, newVal:float) -> None:
        return self._intf.set_property(IAgVAElementMixedSpherical._metadata, IAgVAElementMixedSpherical._set_Altitude_metadata, newVal)

    _get_HorizontalFlightPathAngle_metadata = { "name" : "HorizontalFlightPathAngle",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def HorizontalFlightPathAngle(self) -> typing.Any:
        """Horizontal (Hor FPA) or vertical (Ver FPA) flight path angle. The angle between the inertial velocity vector and the radius vector (vertical) or the complement of this angle (horizontal). Uses Angle Dimension."""
        return self._intf.get_property(IAgVAElementMixedSpherical._metadata, IAgVAElementMixedSpherical._get_HorizontalFlightPathAngle_metadata)

    _set_HorizontalFlightPathAngle_metadata = { "name" : "HorizontalFlightPathAngle",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @HorizontalFlightPathAngle.setter
    def HorizontalFlightPathAngle(self, newVal:typing.Any) -> None:
        return self._intf.set_property(IAgVAElementMixedSpherical._metadata, IAgVAElementMixedSpherical._set_HorizontalFlightPathAngle_metadata, newVal)

    _get_VelocityAzimuth_metadata = { "name" : "VelocityAzimuth",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def VelocityAzimuth(self) -> typing.Any:
        """The angle in the satellite local horizontal plane between the projection of the inertial velocity vector onto this plane and the local north direction measured as positive in the clockwise direction. Uses Angle Dimension."""
        return self._intf.get_property(IAgVAElementMixedSpherical._metadata, IAgVAElementMixedSpherical._get_VelocityAzimuth_metadata)

    _set_VelocityAzimuth_metadata = { "name" : "VelocityAzimuth",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @VelocityAzimuth.setter
    def VelocityAzimuth(self, newVal:typing.Any) -> None:
        return self._intf.set_property(IAgVAElementMixedSpherical._metadata, IAgVAElementMixedSpherical._set_VelocityAzimuth_metadata, newVal)

    _get_VelocityMagnitude_metadata = { "name" : "VelocityMagnitude",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def VelocityMagnitude(self) -> float:
        """The angle in the satellite local horizontal plane between the projection of the inertial velocity vector onto this plane and the local north direction measured as positive in the clockwise direction. Uses Rate Dimension."""
        return self._intf.get_property(IAgVAElementMixedSpherical._metadata, IAgVAElementMixedSpherical._get_VelocityMagnitude_metadata)

    _set_VelocityMagnitude_metadata = { "name" : "VelocityMagnitude",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @VelocityMagnitude.setter
    def VelocityMagnitude(self, newVal:float) -> None:
        return self._intf.set_property(IAgVAElementMixedSpherical._metadata, IAgVAElementMixedSpherical._set_VelocityMagnitude_metadata, newVal)

    _get_VerticalFlightPathAngle_metadata = { "name" : "VerticalFlightPathAngle",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def VerticalFlightPathAngle(self) -> typing.Any:
        """Horizontal (Hor FPA) or vertical (Ver FPA) flight path angle. The angle between the inertial velocity vector and the radius vector (vertical) or the complement of this angle (horizontal). Uses Angle Dimension."""
        return self._intf.get_property(IAgVAElementMixedSpherical._metadata, IAgVAElementMixedSpherical._get_VerticalFlightPathAngle_metadata)

    _set_VerticalFlightPathAngle_metadata = { "name" : "VerticalFlightPathAngle",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @VerticalFlightPathAngle.setter
    def VerticalFlightPathAngle(self, newVal:typing.Any) -> None:
        return self._intf.set_property(IAgVAElementMixedSpherical._metadata, IAgVAElementMixedSpherical._set_VerticalFlightPathAngle_metadata, newVal)


agcls.AgClassCatalog.add_catalog_entry("{8A1D2A11-5A9D-49D8-9CE6-6435B1173292}", IAgVAElementMixedSpherical)
agcls.AgTypeNameMap["IAgVAElementMixedSpherical"] = IAgVAElementMixedSpherical

class IAgVAElementSpherical(IAgVAElement):
    """Properties for Spherical elements"""
    _num_methods = 14
    _vtable_offset = IAgVAElement._vtable_offset + IAgVAElement._num_methods
    _metadata = {
        "uuid" : "{C2B6D754-C55A-4FE1-88AE-976A54FD0C75}",
        "vtable_reference" : IAgVAElement._vtable_offset + IAgVAElement._num_methods - 1,
        "method_offsets" : { "get_RightAscension" : 1,
                             "set_RightAscension" : 2,
                             "get_Declination" : 3,
                             "set_Declination" : 4,
                             "get_RadiusMagnitude" : 5,
                             "set_RadiusMagnitude" : 6,
                             "get_HorizontalFlightPathAngle" : 7,
                             "set_HorizontalFlightPathAngle" : 8,
                             "get_VelocityAzimuth" : 9,
                             "set_VelocityAzimuth" : 10,
                             "get_VelocityMagnitude" : 11,
                             "set_VelocityMagnitude" : 12,
                             "get_VerticalFlightPathAngle" : 13,
                             "set_VerticalFlightPathAngle" : 14, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAElementSpherical._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAElementSpherical from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAElement._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAElementSpherical.__dict__ and type(IAgVAElementSpherical.__dict__[attrname]) == property:
            return IAgVAElementSpherical.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            IAgVAElement.__setattr__(self, attrname, value)
    
    _get_RightAscension_metadata = { "name" : "RightAscension",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def RightAscension(self) -> typing.Any:
        """Defined as the angle from the X axis to the projection of the satellite position vector in the equatorial plane measured as positive in the direction of the Y axis. Uses Angle Dimension."""
        return self._intf.get_property(IAgVAElementSpherical._metadata, IAgVAElementSpherical._get_RightAscension_metadata)

    _set_RightAscension_metadata = { "name" : "RightAscension",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @RightAscension.setter
    def RightAscension(self, newVal:typing.Any) -> None:
        return self._intf.set_property(IAgVAElementSpherical._metadata, IAgVAElementSpherical._set_RightAscension_metadata, newVal)

    _get_Declination_metadata = { "name" : "Declination",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def Declination(self) -> typing.Any:
        """Defined as the angle between the satellite position vector and the inertial equatorial plane measured as positive toward the positive inertial Z axis. Uses Angle Dimension."""
        return self._intf.get_property(IAgVAElementSpherical._metadata, IAgVAElementSpherical._get_Declination_metadata)

    _set_Declination_metadata = { "name" : "Declination",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @Declination.setter
    def Declination(self, newVal:typing.Any) -> None:
        return self._intf.set_property(IAgVAElementSpherical._metadata, IAgVAElementSpherical._set_Declination_metadata, newVal)

    _get_RadiusMagnitude_metadata = { "name" : "RadiusMagnitude",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def RadiusMagnitude(self) -> float:
        """The magnitude of the satellite position vector. Uses Distance Dimension."""
        return self._intf.get_property(IAgVAElementSpherical._metadata, IAgVAElementSpherical._get_RadiusMagnitude_metadata)

    _set_RadiusMagnitude_metadata = { "name" : "RadiusMagnitude",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @RadiusMagnitude.setter
    def RadiusMagnitude(self, newVal:float) -> None:
        return self._intf.set_property(IAgVAElementSpherical._metadata, IAgVAElementSpherical._set_RadiusMagnitude_metadata, newVal)

    _get_HorizontalFlightPathAngle_metadata = { "name" : "HorizontalFlightPathAngle",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def HorizontalFlightPathAngle(self) -> typing.Any:
        """Horizontal (Hor FPA) or vertical (Ver FPA) flight path angle. The angle between the velocity vector and the radius vector (vertical) or the complement of this angle (horizontal). Uses Angle Dimension."""
        return self._intf.get_property(IAgVAElementSpherical._metadata, IAgVAElementSpherical._get_HorizontalFlightPathAngle_metadata)

    _set_HorizontalFlightPathAngle_metadata = { "name" : "HorizontalFlightPathAngle",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @HorizontalFlightPathAngle.setter
    def HorizontalFlightPathAngle(self, newVal:typing.Any) -> None:
        return self._intf.set_property(IAgVAElementSpherical._metadata, IAgVAElementSpherical._set_HorizontalFlightPathAngle_metadata, newVal)

    _get_VelocityAzimuth_metadata = { "name" : "VelocityAzimuth",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def VelocityAzimuth(self) -> typing.Any:
        """The angle in the satellite local horizontal plane between the projection of the velocity vector onto this plane and the local north direction measured as positive in the clockwise direction. Uses Angle Dimension."""
        return self._intf.get_property(IAgVAElementSpherical._metadata, IAgVAElementSpherical._get_VelocityAzimuth_metadata)

    _set_VelocityAzimuth_metadata = { "name" : "VelocityAzimuth",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @VelocityAzimuth.setter
    def VelocityAzimuth(self, newVal:typing.Any) -> None:
        return self._intf.set_property(IAgVAElementSpherical._metadata, IAgVAElementSpherical._set_VelocityAzimuth_metadata, newVal)

    _get_VelocityMagnitude_metadata = { "name" : "VelocityMagnitude",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def VelocityMagnitude(self) -> float:
        """The magnitude of the velocity vector. Uses Rate Dimension."""
        return self._intf.get_property(IAgVAElementSpherical._metadata, IAgVAElementSpherical._get_VelocityMagnitude_metadata)

    _set_VelocityMagnitude_metadata = { "name" : "VelocityMagnitude",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @VelocityMagnitude.setter
    def VelocityMagnitude(self, newVal:float) -> None:
        return self._intf.set_property(IAgVAElementSpherical._metadata, IAgVAElementSpherical._set_VelocityMagnitude_metadata, newVal)

    _get_VerticalFlightPathAngle_metadata = { "name" : "VerticalFlightPathAngle",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def VerticalFlightPathAngle(self) -> typing.Any:
        """Horizontal (Hor FPA) or vertical (Ver FPA) flight path angle. The angle between the velocity vector and the radius vector (vertical) or the complement of this angle (horizontal). Uses Angle Dimension."""
        return self._intf.get_property(IAgVAElementSpherical._metadata, IAgVAElementSpherical._get_VerticalFlightPathAngle_metadata)

    _set_VerticalFlightPathAngle_metadata = { "name" : "VerticalFlightPathAngle",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @VerticalFlightPathAngle.setter
    def VerticalFlightPathAngle(self, newVal:typing.Any) -> None:
        return self._intf.set_property(IAgVAElementSpherical._metadata, IAgVAElementSpherical._set_VerticalFlightPathAngle_metadata, newVal)


agcls.AgClassCatalog.add_catalog_entry("{C2B6D754-C55A-4FE1-88AE-976A54FD0C75}", IAgVAElementSpherical)
agcls.AgTypeNameMap["IAgVAElementSpherical"] = IAgVAElementSpherical

class IAgVAElementTargetVectorIncomingAsymptote(IAgVAElement):
    """Properties for Target Vector Incoming Asymptote elements."""
    _num_methods = 12
    _vtable_offset = IAgVAElement._vtable_offset + IAgVAElement._num_methods
    _metadata = {
        "uuid" : "{B7EA61B2-6910-43E7-B4F7-CBA647EC19A3}",
        "vtable_reference" : IAgVAElement._vtable_offset + IAgVAElement._num_methods - 1,
        "method_offsets" : { "get_RadiusOfPeriapsis" : 1,
                             "set_RadiusOfPeriapsis" : 2,
                             "get_C3Energy" : 3,
                             "set_C3Energy" : 4,
                             "get_RAIncomingAsymptote" : 5,
                             "set_RAIncomingAsymptote" : 6,
                             "get_DeclinationIncomingAsymptote" : 7,
                             "set_DeclinationIncomingAsymptote" : 8,
                             "get_VelocityAzimuthPeriapsis" : 9,
                             "set_VelocityAzimuthPeriapsis" : 10,
                             "get_TrueAnomaly" : 11,
                             "set_TrueAnomaly" : 12, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAElementTargetVectorIncomingAsymptote._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAElementTargetVectorIncomingAsymptote from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAElement._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAElementTargetVectorIncomingAsymptote.__dict__ and type(IAgVAElementTargetVectorIncomingAsymptote.__dict__[attrname]) == property:
            return IAgVAElementTargetVectorIncomingAsymptote.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            IAgVAElement.__setattr__(self, attrname, value)
    
    _get_RadiusOfPeriapsis_metadata = { "name" : "RadiusOfPeriapsis",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def RadiusOfPeriapsis(self) -> float:
        """Radius of Periapsis. Uses Distance Dimension."""
        return self._intf.get_property(IAgVAElementTargetVectorIncomingAsymptote._metadata, IAgVAElementTargetVectorIncomingAsymptote._get_RadiusOfPeriapsis_metadata)

    _set_RadiusOfPeriapsis_metadata = { "name" : "RadiusOfPeriapsis",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @RadiusOfPeriapsis.setter
    def RadiusOfPeriapsis(self, newVal:float) -> None:
        return self._intf.set_property(IAgVAElementTargetVectorIncomingAsymptote._metadata, IAgVAElementTargetVectorIncomingAsymptote._set_RadiusOfPeriapsis_metadata, newVal)

    _get_C3Energy_metadata = { "name" : "C3Energy",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def C3Energy(self) -> float:
        """C3Energy (Rate squared)."""
        return self._intf.get_property(IAgVAElementTargetVectorIncomingAsymptote._metadata, IAgVAElementTargetVectorIncomingAsymptote._get_C3Energy_metadata)

    _set_C3Energy_metadata = { "name" : "C3Energy",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @C3Energy.setter
    def C3Energy(self, newVal:float) -> None:
        return self._intf.set_property(IAgVAElementTargetVectorIncomingAsymptote._metadata, IAgVAElementTargetVectorIncomingAsymptote._set_C3Energy_metadata, newVal)

    _get_RAIncomingAsymptote_metadata = { "name" : "RAIncomingAsymptote",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def RAIncomingAsymptote(self) -> typing.Any:
        """Right Ascension of Incoming Asymptote. Uses Angle Dimension."""
        return self._intf.get_property(IAgVAElementTargetVectorIncomingAsymptote._metadata, IAgVAElementTargetVectorIncomingAsymptote._get_RAIncomingAsymptote_metadata)

    _set_RAIncomingAsymptote_metadata = { "name" : "RAIncomingAsymptote",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @RAIncomingAsymptote.setter
    def RAIncomingAsymptote(self, newVal:typing.Any) -> None:
        return self._intf.set_property(IAgVAElementTargetVectorIncomingAsymptote._metadata, IAgVAElementTargetVectorIncomingAsymptote._set_RAIncomingAsymptote_metadata, newVal)

    _get_DeclinationIncomingAsymptote_metadata = { "name" : "DeclinationIncomingAsymptote",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def DeclinationIncomingAsymptote(self) -> typing.Any:
        """Declination of Incoming Asymptote. Uses Angle Dimension."""
        return self._intf.get_property(IAgVAElementTargetVectorIncomingAsymptote._metadata, IAgVAElementTargetVectorIncomingAsymptote._get_DeclinationIncomingAsymptote_metadata)

    _set_DeclinationIncomingAsymptote_metadata = { "name" : "DeclinationIncomingAsymptote",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @DeclinationIncomingAsymptote.setter
    def DeclinationIncomingAsymptote(self, newVal:typing.Any) -> None:
        return self._intf.set_property(IAgVAElementTargetVectorIncomingAsymptote._metadata, IAgVAElementTargetVectorIncomingAsymptote._set_DeclinationIncomingAsymptote_metadata, newVal)

    _get_VelocityAzimuthPeriapsis_metadata = { "name" : "VelocityAzimuthPeriapsis",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def VelocityAzimuthPeriapsis(self) -> typing.Any:
        """Velocity Azimuth at Periapsis. Uses Angle Dimension."""
        return self._intf.get_property(IAgVAElementTargetVectorIncomingAsymptote._metadata, IAgVAElementTargetVectorIncomingAsymptote._get_VelocityAzimuthPeriapsis_metadata)

    _set_VelocityAzimuthPeriapsis_metadata = { "name" : "VelocityAzimuthPeriapsis",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @VelocityAzimuthPeriapsis.setter
    def VelocityAzimuthPeriapsis(self, newVal:typing.Any) -> None:
        return self._intf.set_property(IAgVAElementTargetVectorIncomingAsymptote._metadata, IAgVAElementTargetVectorIncomingAsymptote._set_VelocityAzimuthPeriapsis_metadata, newVal)

    _get_TrueAnomaly_metadata = { "name" : "TrueAnomaly",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def TrueAnomaly(self) -> typing.Any:
        """True Anomaly. Uses Angle Dimension."""
        return self._intf.get_property(IAgVAElementTargetVectorIncomingAsymptote._metadata, IAgVAElementTargetVectorIncomingAsymptote._get_TrueAnomaly_metadata)

    _set_TrueAnomaly_metadata = { "name" : "TrueAnomaly",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @TrueAnomaly.setter
    def TrueAnomaly(self, newVal:typing.Any) -> None:
        return self._intf.set_property(IAgVAElementTargetVectorIncomingAsymptote._metadata, IAgVAElementTargetVectorIncomingAsymptote._set_TrueAnomaly_metadata, newVal)


agcls.AgClassCatalog.add_catalog_entry("{B7EA61B2-6910-43E7-B4F7-CBA647EC19A3}", IAgVAElementTargetVectorIncomingAsymptote)
agcls.AgTypeNameMap["IAgVAElementTargetVectorIncomingAsymptote"] = IAgVAElementTargetVectorIncomingAsymptote

class IAgVAElementTargetVectorOutgoingAsymptote(IAgVAElement):
    """Properties for Target Vector Outgoing Asymptote elements."""
    _num_methods = 12
    _vtable_offset = IAgVAElement._vtable_offset + IAgVAElement._num_methods
    _metadata = {
        "uuid" : "{BE7E87B6-AC1F-4A19-A1C8-15272B707777}",
        "vtable_reference" : IAgVAElement._vtable_offset + IAgVAElement._num_methods - 1,
        "method_offsets" : { "get_RadiusOfPeriapsis" : 1,
                             "set_RadiusOfPeriapsis" : 2,
                             "get_C3Energy" : 3,
                             "set_C3Energy" : 4,
                             "get_RAOutgoingAsymptote" : 5,
                             "set_RAOutgoingAsymptote" : 6,
                             "get_DeclinationOutgoingAsymptote" : 7,
                             "set_DeclinationOutgoingAsymptote" : 8,
                             "get_VelocityAzimuthPeriapsis" : 9,
                             "set_VelocityAzimuthPeriapsis" : 10,
                             "get_TrueAnomaly" : 11,
                             "set_TrueAnomaly" : 12, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAElementTargetVectorOutgoingAsymptote._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAElementTargetVectorOutgoingAsymptote from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAElement._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAElementTargetVectorOutgoingAsymptote.__dict__ and type(IAgVAElementTargetVectorOutgoingAsymptote.__dict__[attrname]) == property:
            return IAgVAElementTargetVectorOutgoingAsymptote.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            IAgVAElement.__setattr__(self, attrname, value)
    
    _get_RadiusOfPeriapsis_metadata = { "name" : "RadiusOfPeriapsis",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def RadiusOfPeriapsis(self) -> float:
        """Radius of Periapsis. Uses Distance Dimension."""
        return self._intf.get_property(IAgVAElementTargetVectorOutgoingAsymptote._metadata, IAgVAElementTargetVectorOutgoingAsymptote._get_RadiusOfPeriapsis_metadata)

    _set_RadiusOfPeriapsis_metadata = { "name" : "RadiusOfPeriapsis",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @RadiusOfPeriapsis.setter
    def RadiusOfPeriapsis(self, newVal:float) -> None:
        return self._intf.set_property(IAgVAElementTargetVectorOutgoingAsymptote._metadata, IAgVAElementTargetVectorOutgoingAsymptote._set_RadiusOfPeriapsis_metadata, newVal)

    _get_C3Energy_metadata = { "name" : "C3Energy",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def C3Energy(self) -> float:
        """C3Energy (Rate Squared)."""
        return self._intf.get_property(IAgVAElementTargetVectorOutgoingAsymptote._metadata, IAgVAElementTargetVectorOutgoingAsymptote._get_C3Energy_metadata)

    _set_C3Energy_metadata = { "name" : "C3Energy",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @C3Energy.setter
    def C3Energy(self, newVal:float) -> None:
        return self._intf.set_property(IAgVAElementTargetVectorOutgoingAsymptote._metadata, IAgVAElementTargetVectorOutgoingAsymptote._set_C3Energy_metadata, newVal)

    _get_RAOutgoingAsymptote_metadata = { "name" : "RAOutgoingAsymptote",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def RAOutgoingAsymptote(self) -> typing.Any:
        """Right Ascension of Incoming Asymptote. Uses Angle Dimension."""
        return self._intf.get_property(IAgVAElementTargetVectorOutgoingAsymptote._metadata, IAgVAElementTargetVectorOutgoingAsymptote._get_RAOutgoingAsymptote_metadata)

    _set_RAOutgoingAsymptote_metadata = { "name" : "RAOutgoingAsymptote",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @RAOutgoingAsymptote.setter
    def RAOutgoingAsymptote(self, newVal:typing.Any) -> None:
        return self._intf.set_property(IAgVAElementTargetVectorOutgoingAsymptote._metadata, IAgVAElementTargetVectorOutgoingAsymptote._set_RAOutgoingAsymptote_metadata, newVal)

    _get_DeclinationOutgoingAsymptote_metadata = { "name" : "DeclinationOutgoingAsymptote",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def DeclinationOutgoingAsymptote(self) -> typing.Any:
        """Declination of Incoming Asymptote. Uses Angle Dimension."""
        return self._intf.get_property(IAgVAElementTargetVectorOutgoingAsymptote._metadata, IAgVAElementTargetVectorOutgoingAsymptote._get_DeclinationOutgoingAsymptote_metadata)

    _set_DeclinationOutgoingAsymptote_metadata = { "name" : "DeclinationOutgoingAsymptote",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @DeclinationOutgoingAsymptote.setter
    def DeclinationOutgoingAsymptote(self, newVal:typing.Any) -> None:
        return self._intf.set_property(IAgVAElementTargetVectorOutgoingAsymptote._metadata, IAgVAElementTargetVectorOutgoingAsymptote._set_DeclinationOutgoingAsymptote_metadata, newVal)

    _get_VelocityAzimuthPeriapsis_metadata = { "name" : "VelocityAzimuthPeriapsis",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def VelocityAzimuthPeriapsis(self) -> typing.Any:
        """Velocity Azimuth at Periapsis. Uses Angle Dimension."""
        return self._intf.get_property(IAgVAElementTargetVectorOutgoingAsymptote._metadata, IAgVAElementTargetVectorOutgoingAsymptote._get_VelocityAzimuthPeriapsis_metadata)

    _set_VelocityAzimuthPeriapsis_metadata = { "name" : "VelocityAzimuthPeriapsis",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @VelocityAzimuthPeriapsis.setter
    def VelocityAzimuthPeriapsis(self, newVal:typing.Any) -> None:
        return self._intf.set_property(IAgVAElementTargetVectorOutgoingAsymptote._metadata, IAgVAElementTargetVectorOutgoingAsymptote._set_VelocityAzimuthPeriapsis_metadata, newVal)

    _get_TrueAnomaly_metadata = { "name" : "TrueAnomaly",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def TrueAnomaly(self) -> typing.Any:
        """True Anomaly. Uses Angle Dimension."""
        return self._intf.get_property(IAgVAElementTargetVectorOutgoingAsymptote._metadata, IAgVAElementTargetVectorOutgoingAsymptote._get_TrueAnomaly_metadata)

    _set_TrueAnomaly_metadata = { "name" : "TrueAnomaly",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @TrueAnomaly.setter
    def TrueAnomaly(self, newVal:typing.Any) -> None:
        return self._intf.set_property(IAgVAElementTargetVectorOutgoingAsymptote._metadata, IAgVAElementTargetVectorOutgoingAsymptote._set_TrueAnomaly_metadata, newVal)


agcls.AgClassCatalog.add_catalog_entry("{BE7E87B6-AC1F-4A19-A1C8-15272B707777}", IAgVAElementTargetVectorOutgoingAsymptote)
agcls.AgTypeNameMap["IAgVAElementTargetVectorOutgoingAsymptote"] = IAgVAElementTargetVectorOutgoingAsymptote

class IAgVAElementGeodetic(IAgVAElement):
    """Properties for Geodetic elements"""
    _num_methods = 16
    _vtable_offset = IAgVAElement._vtable_offset + IAgVAElement._num_methods
    _metadata = {
        "uuid" : "{091F376E-6C32-4567-BE00-D1CE1857B50F}",
        "vtable_reference" : IAgVAElement._vtable_offset + IAgVAElement._num_methods - 1,
        "method_offsets" : { "get_Latitude" : 1,
                             "set_Latitude" : 2,
                             "get_Longitude" : 3,
                             "set_Longitude" : 4,
                             "get_Altitude" : 5,
                             "set_Altitude" : 6,
                             "get_RadiusMagnitude" : 7,
                             "set_RadiusMagnitude" : 8,
                             "get_LatitudeRate" : 9,
                             "set_LatitudeRate" : 10,
                             "get_LongitudeRate" : 11,
                             "set_LongitudeRate" : 12,
                             "get_AltitudeRate" : 13,
                             "set_AltitudeRate" : 14,
                             "get_RadiusRate" : 15,
                             "set_RadiusRate" : 16, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAElementGeodetic._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAElementGeodetic from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAElement._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAElementGeodetic.__dict__ and type(IAgVAElementGeodetic.__dict__[attrname]) == property:
            return IAgVAElementGeodetic.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            IAgVAElement.__setattr__(self, attrname, value)
    
    _get_Latitude_metadata = { "name" : "Latitude",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def Latitude(self) -> typing.Any:
        """Measured in degrees from -90.0 deg to +90.0 deg. The geodetic latitude of a point is the angle between the normal to the reference ellipsoid and the equatorial plane. Uses Angle Dimension."""
        return self._intf.get_property(IAgVAElementGeodetic._metadata, IAgVAElementGeodetic._get_Latitude_metadata)

    _set_Latitude_metadata = { "name" : "Latitude",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @Latitude.setter
    def Latitude(self, newVal:typing.Any) -> None:
        return self._intf.set_property(IAgVAElementGeodetic._metadata, IAgVAElementGeodetic._set_Latitude_metadata, newVal)

    _get_Longitude_metadata = { "name" : "Longitude",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def Longitude(self) -> typing.Any:
        """Measured in degrees from -360.0 deg to +360.0 deg. The longitude of a point is the angle between the projection of the position vector in the equatorial plane and the prime meridian. Uses Angle Dimension."""
        return self._intf.get_property(IAgVAElementGeodetic._metadata, IAgVAElementGeodetic._get_Longitude_metadata)

    _set_Longitude_metadata = { "name" : "Longitude",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @Longitude.setter
    def Longitude(self, newVal:typing.Any) -> None:
        return self._intf.set_property(IAgVAElementGeodetic._metadata, IAgVAElementGeodetic._set_Longitude_metadata, newVal)

    _get_Altitude_metadata = { "name" : "Altitude",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def Altitude(self) -> float:
        """Measured along an outward normal to the surface of the ellipsoid. Uses Distance Dimension."""
        return self._intf.get_property(IAgVAElementGeodetic._metadata, IAgVAElementGeodetic._get_Altitude_metadata)

    _set_Altitude_metadata = { "name" : "Altitude",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @Altitude.setter
    def Altitude(self, newVal:float) -> None:
        return self._intf.set_property(IAgVAElementGeodetic._metadata, IAgVAElementGeodetic._set_Altitude_metadata, newVal)

    _get_RadiusMagnitude_metadata = { "name" : "RadiusMagnitude",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def RadiusMagnitude(self) -> float:
        """Measured from the center of the Earth. Specified as distance above or below the reference ellipsoid. Uses Distance Dimension."""
        return self._intf.get_property(IAgVAElementGeodetic._metadata, IAgVAElementGeodetic._get_RadiusMagnitude_metadata)

    _set_RadiusMagnitude_metadata = { "name" : "RadiusMagnitude",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @RadiusMagnitude.setter
    def RadiusMagnitude(self, newVal:float) -> None:
        return self._intf.set_property(IAgVAElementGeodetic._metadata, IAgVAElementGeodetic._set_RadiusMagnitude_metadata, newVal)

    _get_LatitudeRate_metadata = { "name" : "LatitudeRate",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def LatitudeRate(self) -> float:
        """The rate of change of the satellite's latitude. Uses Rate Dimension."""
        return self._intf.get_property(IAgVAElementGeodetic._metadata, IAgVAElementGeodetic._get_LatitudeRate_metadata)

    _set_LatitudeRate_metadata = { "name" : "LatitudeRate",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @LatitudeRate.setter
    def LatitudeRate(self, newVal:float) -> None:
        return self._intf.set_property(IAgVAElementGeodetic._metadata, IAgVAElementGeodetic._set_LatitudeRate_metadata, newVal)

    _get_LongitudeRate_metadata = { "name" : "LongitudeRate",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def LongitudeRate(self) -> float:
        """The rate of change of the satellite's longitude. Uses Rate Dimension."""
        return self._intf.get_property(IAgVAElementGeodetic._metadata, IAgVAElementGeodetic._get_LongitudeRate_metadata)

    _set_LongitudeRate_metadata = { "name" : "LongitudeRate",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @LongitudeRate.setter
    def LongitudeRate(self, newVal:float) -> None:
        return self._intf.set_property(IAgVAElementGeodetic._metadata, IAgVAElementGeodetic._set_LongitudeRate_metadata, newVal)

    _get_AltitudeRate_metadata = { "name" : "AltitudeRate",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def AltitudeRate(self) -> float:
        """The rate of change of the altitude. Uses Rate Dimension."""
        return self._intf.get_property(IAgVAElementGeodetic._metadata, IAgVAElementGeodetic._get_AltitudeRate_metadata)

    _set_AltitudeRate_metadata = { "name" : "AltitudeRate",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @AltitudeRate.setter
    def AltitudeRate(self, newVal:float) -> None:
        return self._intf.set_property(IAgVAElementGeodetic._metadata, IAgVAElementGeodetic._set_AltitudeRate_metadata, newVal)

    _get_RadiusRate_metadata = { "name" : "RadiusRate",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def RadiusRate(self) -> float:
        """The rate of change of the radius. Uses Rate Dimension."""
        return self._intf.get_property(IAgVAElementGeodetic._metadata, IAgVAElementGeodetic._get_RadiusRate_metadata)

    _set_RadiusRate_metadata = { "name" : "RadiusRate",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @RadiusRate.setter
    def RadiusRate(self, newVal:float) -> None:
        return self._intf.set_property(IAgVAElementGeodetic._metadata, IAgVAElementGeodetic._set_RadiusRate_metadata, newVal)


agcls.AgClassCatalog.add_catalog_entry("{091F376E-6C32-4567-BE00-D1CE1857B50F}", IAgVAElementGeodetic)
agcls.AgTypeNameMap["IAgVAElementGeodetic"] = IAgVAElementGeodetic

class IAgVAElementBPlane(IAgVAElement):
    """Properties for BPlane elements"""
    _num_methods = 26
    _vtable_offset = IAgVAElement._vtable_offset + IAgVAElement._num_methods
    _metadata = {
        "uuid" : "{83490C08-4958-4B0E-8AE9-E6795F70211A}",
        "vtable_reference" : IAgVAElement._vtable_offset + IAgVAElement._num_methods - 1,
        "method_offsets" : { "get_RightAscensionOfBPlane" : 1,
                             "set_RightAscensionOfBPlane" : 2,
                             "get_DeclinationOfBPlane" : 3,
                             "set_DeclinationOfBPlane" : 4,
                             "get_BDotRFirstBVector" : 5,
                             "set_BDotRFirstBVector" : 6,
                             "get_BDotTSecondBVector" : 7,
                             "set_BDotTSecondBVector" : 8,
                             "get_HyperbolicTurningAngle" : 9,
                             "set_HyperbolicTurningAngle" : 10,
                             "get_OrbitalC3Energy" : 11,
                             "set_OrbitalC3Energy" : 12,
                             "get_HyperbolicVInfinity" : 13,
                             "set_HyperbolicVInfinity" : 14,
                             "get_SemiMajorAxis" : 15,
                             "set_SemiMajorAxis" : 16,
                             "get_BDotTFirstBVector" : 17,
                             "set_BDotTFirstBVector" : 18,
                             "get_BThetaFirstBVector" : 19,
                             "set_BThetaFirstBVector" : 20,
                             "get_BDotRSecondBVector" : 21,
                             "set_BDotRSecondBVector" : 22,
                             "get_BMagSecondBVector" : 23,
                             "set_BMagSecondBVector" : 24,
                             "get_TrueAnomaly" : 25,
                             "set_TrueAnomaly" : 26, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAElementBPlane._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAElementBPlane from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAElement._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAElementBPlane.__dict__ and type(IAgVAElementBPlane.__dict__[attrname]) == property:
            return IAgVAElementBPlane.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            IAgVAElement.__setattr__(self, attrname, value)
    
    _get_RightAscensionOfBPlane_metadata = { "name" : "RightAscensionOfBPlane",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def RightAscensionOfBPlane(self) -> float:
        """Right Ascension of the B-Plane Normal."""
        return self._intf.get_property(IAgVAElementBPlane._metadata, IAgVAElementBPlane._get_RightAscensionOfBPlane_metadata)

    _set_RightAscensionOfBPlane_metadata = { "name" : "RightAscensionOfBPlane",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @RightAscensionOfBPlane.setter
    def RightAscensionOfBPlane(self, newVal:float) -> None:
        return self._intf.set_property(IAgVAElementBPlane._metadata, IAgVAElementBPlane._set_RightAscensionOfBPlane_metadata, newVal)

    _get_DeclinationOfBPlane_metadata = { "name" : "DeclinationOfBPlane",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def DeclinationOfBPlane(self) -> float:
        """Declination of the B-Plane Normal."""
        return self._intf.get_property(IAgVAElementBPlane._metadata, IAgVAElementBPlane._get_DeclinationOfBPlane_metadata)

    _set_DeclinationOfBPlane_metadata = { "name" : "DeclinationOfBPlane",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @DeclinationOfBPlane.setter
    def DeclinationOfBPlane(self, newVal:float) -> None:
        return self._intf.set_property(IAgVAElementBPlane._metadata, IAgVAElementBPlane._set_DeclinationOfBPlane_metadata, newVal)

    _get_BDotRFirstBVector_metadata = { "name" : "BDotRFirstBVector",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def BDotRFirstBVector(self) -> float:
        """B vector dotted with R vector."""
        return self._intf.get_property(IAgVAElementBPlane._metadata, IAgVAElementBPlane._get_BDotRFirstBVector_metadata)

    _set_BDotRFirstBVector_metadata = { "name" : "BDotRFirstBVector",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @BDotRFirstBVector.setter
    def BDotRFirstBVector(self, newVal:float) -> None:
        return self._intf.set_property(IAgVAElementBPlane._metadata, IAgVAElementBPlane._set_BDotRFirstBVector_metadata, newVal)

    _get_BDotTSecondBVector_metadata = { "name" : "BDotTSecondBVector",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def BDotTSecondBVector(self) -> float:
        """B vector dotted with T vector."""
        return self._intf.get_property(IAgVAElementBPlane._metadata, IAgVAElementBPlane._get_BDotTSecondBVector_metadata)

    _set_BDotTSecondBVector_metadata = { "name" : "BDotTSecondBVector",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @BDotTSecondBVector.setter
    def BDotTSecondBVector(self, newVal:float) -> None:
        return self._intf.set_property(IAgVAElementBPlane._metadata, IAgVAElementBPlane._set_BDotTSecondBVector_metadata, newVal)

    _get_HyperbolicTurningAngle_metadata = { "name" : "HyperbolicTurningAngle",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def HyperbolicTurningAngle(self) -> float:
        """Hyperbolic turning angle."""
        return self._intf.get_property(IAgVAElementBPlane._metadata, IAgVAElementBPlane._get_HyperbolicTurningAngle_metadata)

    _set_HyperbolicTurningAngle_metadata = { "name" : "HyperbolicTurningAngle",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @HyperbolicTurningAngle.setter
    def HyperbolicTurningAngle(self, newVal:float) -> None:
        return self._intf.set_property(IAgVAElementBPlane._metadata, IAgVAElementBPlane._set_HyperbolicTurningAngle_metadata, newVal)

    _get_OrbitalC3Energy_metadata = { "name" : "OrbitalC3Energy",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def OrbitalC3Energy(self) -> float:
        """Orbital C3 Energy."""
        return self._intf.get_property(IAgVAElementBPlane._metadata, IAgVAElementBPlane._get_OrbitalC3Energy_metadata)

    _set_OrbitalC3Energy_metadata = { "name" : "OrbitalC3Energy",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @OrbitalC3Energy.setter
    def OrbitalC3Energy(self, newVal:float) -> None:
        return self._intf.set_property(IAgVAElementBPlane._metadata, IAgVAElementBPlane._set_OrbitalC3Energy_metadata, newVal)

    _get_HyperbolicVInfinity_metadata = { "name" : "HyperbolicVInfinity",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def HyperbolicVInfinity(self) -> float:
        """Hyperbolic V infinity."""
        return self._intf.get_property(IAgVAElementBPlane._metadata, IAgVAElementBPlane._get_HyperbolicVInfinity_metadata)

    _set_HyperbolicVInfinity_metadata = { "name" : "HyperbolicVInfinity",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @HyperbolicVInfinity.setter
    def HyperbolicVInfinity(self, newVal:float) -> None:
        return self._intf.set_property(IAgVAElementBPlane._metadata, IAgVAElementBPlane._set_HyperbolicVInfinity_metadata, newVal)

    _get_SemiMajorAxis_metadata = { "name" : "SemiMajorAxis",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def SemiMajorAxis(self) -> float:
        """Semi-major axis."""
        return self._intf.get_property(IAgVAElementBPlane._metadata, IAgVAElementBPlane._get_SemiMajorAxis_metadata)

    _set_SemiMajorAxis_metadata = { "name" : "SemiMajorAxis",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @SemiMajorAxis.setter
    def SemiMajorAxis(self, newVal:float) -> None:
        return self._intf.set_property(IAgVAElementBPlane._metadata, IAgVAElementBPlane._set_SemiMajorAxis_metadata, newVal)

    _get_BDotTFirstBVector_metadata = { "name" : "BDotTFirstBVector",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def BDotTFirstBVector(self) -> float:
        """B vector dotted with T vector used as the first quantity to define the B vector."""
        return self._intf.get_property(IAgVAElementBPlane._metadata, IAgVAElementBPlane._get_BDotTFirstBVector_metadata)

    _set_BDotTFirstBVector_metadata = { "name" : "BDotTFirstBVector",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @BDotTFirstBVector.setter
    def BDotTFirstBVector(self, newVal:float) -> None:
        return self._intf.set_property(IAgVAElementBPlane._metadata, IAgVAElementBPlane._set_BDotTFirstBVector_metadata, newVal)

    _get_BThetaFirstBVector_metadata = { "name" : "BThetaFirstBVector",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def BThetaFirstBVector(self) -> float:
        """Angle between the B vector and T vector used as the first quantity to define the B vector."""
        return self._intf.get_property(IAgVAElementBPlane._metadata, IAgVAElementBPlane._get_BThetaFirstBVector_metadata)

    _set_BThetaFirstBVector_metadata = { "name" : "BThetaFirstBVector",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @BThetaFirstBVector.setter
    def BThetaFirstBVector(self, newVal:float) -> None:
        return self._intf.set_property(IAgVAElementBPlane._metadata, IAgVAElementBPlane._set_BThetaFirstBVector_metadata, newVal)

    _get_BDotRSecondBVector_metadata = { "name" : "BDotRSecondBVector",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def BDotRSecondBVector(self) -> float:
        """B vector dotted with T vector used as the second quantity to define the B vector."""
        return self._intf.get_property(IAgVAElementBPlane._metadata, IAgVAElementBPlane._get_BDotRSecondBVector_metadata)

    _set_BDotRSecondBVector_metadata = { "name" : "BDotRSecondBVector",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @BDotRSecondBVector.setter
    def BDotRSecondBVector(self, newVal:float) -> None:
        return self._intf.set_property(IAgVAElementBPlane._metadata, IAgVAElementBPlane._set_BDotRSecondBVector_metadata, newVal)

    _get_BMagSecondBVector_metadata = { "name" : "BMagSecondBVector",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def BMagSecondBVector(self) -> float:
        """Magnitude of the B vector used as the second quantity to define the B vector."""
        return self._intf.get_property(IAgVAElementBPlane._metadata, IAgVAElementBPlane._get_BMagSecondBVector_metadata)

    _set_BMagSecondBVector_metadata = { "name" : "BMagSecondBVector",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @BMagSecondBVector.setter
    def BMagSecondBVector(self, newVal:float) -> None:
        return self._intf.set_property(IAgVAElementBPlane._metadata, IAgVAElementBPlane._set_BMagSecondBVector_metadata, newVal)

    _get_TrueAnomaly_metadata = { "name" : "TrueAnomaly",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def TrueAnomaly(self) -> float:
        """True Anomaly."""
        return self._intf.get_property(IAgVAElementBPlane._metadata, IAgVAElementBPlane._get_TrueAnomaly_metadata)

    _set_TrueAnomaly_metadata = { "name" : "TrueAnomaly",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @TrueAnomaly.setter
    def TrueAnomaly(self, newVal:float) -> None:
        return self._intf.set_property(IAgVAElementBPlane._metadata, IAgVAElementBPlane._set_TrueAnomaly_metadata, newVal)


agcls.AgClassCatalog.add_catalog_entry("{83490C08-4958-4B0E-8AE9-E6795F70211A}", IAgVAElementBPlane)
agcls.AgTypeNameMap["IAgVAElementBPlane"] = IAgVAElementBPlane

class IAgVAStoppingCondition(IAgVAStoppingConditionComponent):
    """Basic properties for a stopping condition."""
    _num_methods = 30
    _vtable_offset = IAgVAStoppingConditionComponent._vtable_offset + IAgVAStoppingConditionComponent._num_methods
    _metadata = {
        "uuid" : "{7B18D549-E67A-4532-9767-ECC78418475D}",
        "vtable_reference" : IAgVAStoppingConditionComponent._vtable_offset + IAgVAStoppingConditionComponent._num_methods - 1,
        "method_offsets" : { "get_Trip" : 1,
                             "set_Trip" : 2,
                             "get_Tolerance" : 3,
                             "set_Tolerance" : 4,
                             "get_RepeatCount" : 5,
                             "set_RepeatCount" : 6,
                             "get_Inherited" : 7,
                             "set_Inherited" : 8,
                             "get_MaxTripTimes" : 9,
                             "set_MaxTripTimes" : 10,
                             "get_CoordSystem" : 11,
                             "set_CoordSystem" : 12,
                             "get_Sequence" : 13,
                             "set_Sequence" : 14,
                             "get_Constraints" : 15,
                             "get_UserCalcObjectName" : 16,
                             "set_UserCalcObjectName" : 17,
                             "get_UserCalcObject" : 18,
                             "set_UserCalcObject" : 19,
                             "get_CentralBodyName" : 20,
                             "set_CentralBodyName" : 21,
                             "get_Criterion" : 22,
                             "set_Criterion" : 23,
                             "get_BeforeConditions" : 24,
                             "get_Dimension" : 25,
                             "get_ReferencePoint" : 26,
                             "set_ReferencePoint" : 27,
                             "CopyUserCalcObjectToClipboard" : 28,
                             "PasteUserCalcObjectFromClipboard" : 29,
                             "get_UserCalcObjectLinkEmbedControl" : 30, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAStoppingCondition._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStoppingCondition from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAStoppingConditionComponent._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStoppingCondition.__dict__ and type(IAgVAStoppingCondition.__dict__[attrname]) == property:
            return IAgVAStoppingCondition.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            IAgVAStoppingConditionComponent.__setattr__(self, attrname, value)
    
    _get_Trip_metadata = { "name" : "Trip",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def Trip(self) -> typing.Any:
        """The desired value - the value at which the condition will be satisfied. Dimension depends on context."""
        return self._intf.get_property(IAgVAStoppingCondition._metadata, IAgVAStoppingCondition._get_Trip_metadata)

    _set_Trip_metadata = { "name" : "Trip",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @Trip.setter
    def Trip(self, newVal:typing.Any) -> None:
        return self._intf.set_property(IAgVAStoppingCondition._metadata, IAgVAStoppingCondition._set_Trip_metadata, newVal)

    _get_Tolerance_metadata = { "name" : "Tolerance",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def Tolerance(self) -> float:
        """The desired tolerance for achieving the stopping condition. Dimension depends on context."""
        return self._intf.get_property(IAgVAStoppingCondition._metadata, IAgVAStoppingCondition._get_Tolerance_metadata)

    _set_Tolerance_metadata = { "name" : "Tolerance",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @Tolerance.setter
    def Tolerance(self, newVal:float) -> None:
        return self._intf.set_property(IAgVAStoppingCondition._metadata, IAgVAStoppingCondition._set_Tolerance_metadata, newVal)

    _get_RepeatCount_metadata = { "name" : "RepeatCount",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def RepeatCount(self) -> float:
        """The number of times the condition must be satisfied before the propagation ends or moves on to the designated automatic sequence. Dimensionless."""
        return self._intf.get_property(IAgVAStoppingCondition._metadata, IAgVAStoppingCondition._get_RepeatCount_metadata)

    _set_RepeatCount_metadata = { "name" : "RepeatCount",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @RepeatCount.setter
    def RepeatCount(self, newVal:float) -> None:
        return self._intf.set_property(IAgVAStoppingCondition._metadata, IAgVAStoppingCondition._set_RepeatCount_metadata, newVal)

    _get_Inherited_metadata = { "name" : "Inherited",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def Inherited(self) -> bool:
        """Condition Inherited by Automatic Sequences - if true, the stopping condition will be applied to any automatic sequences activated within the same segment."""
        return self._intf.get_property(IAgVAStoppingCondition._metadata, IAgVAStoppingCondition._get_Inherited_metadata)

    _set_Inherited_metadata = { "name" : "Inherited",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @Inherited.setter
    def Inherited(self, newVal:bool) -> None:
        return self._intf.set_property(IAgVAStoppingCondition._metadata, IAgVAStoppingCondition._set_Inherited_metadata, newVal)

    _get_MaxTripTimes_metadata = { "name" : "MaxTripTimes",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def MaxTripTimes(self) -> float:
        """The maximum number of times that the stopping condition will be applied - and any resulting automatic sequences executed. Dimensionless."""
        return self._intf.get_property(IAgVAStoppingCondition._metadata, IAgVAStoppingCondition._get_MaxTripTimes_metadata)

    _set_MaxTripTimes_metadata = { "name" : "MaxTripTimes",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @MaxTripTimes.setter
    def MaxTripTimes(self, inVal:float) -> None:
        return self._intf.set_property(IAgVAStoppingCondition._metadata, IAgVAStoppingCondition._set_MaxTripTimes_metadata, inVal)

    _get_CoordSystem_metadata = { "name" : "CoordSystem",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def CoordSystem(self) -> str:
        """The coordinate system. The default coordinate system of a stopping condition is Earth Inertial."""
        return self._intf.get_property(IAgVAStoppingCondition._metadata, IAgVAStoppingCondition._get_CoordSystem_metadata)

    _set_CoordSystem_metadata = { "name" : "CoordSystem",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @CoordSystem.setter
    def CoordSystem(self, newVal:str) -> None:
        return self._intf.set_property(IAgVAStoppingCondition._metadata, IAgVAStoppingCondition._set_CoordSystem_metadata, newVal)

    _get_Sequence_metadata = { "name" : "Sequence",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def Sequence(self) -> str:
        """The automatic sequence to trigger if the highlighted stopping condition is satisfied."""
        return self._intf.get_property(IAgVAStoppingCondition._metadata, IAgVAStoppingCondition._get_Sequence_metadata)

    _set_Sequence_metadata = { "name" : "Sequence",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @Sequence.setter
    def Sequence(self, newVal:str) -> None:
        return self._intf.set_property(IAgVAStoppingCondition._metadata, IAgVAStoppingCondition._set_Sequence_metadata, newVal)

    _get_Constraints_metadata = { "name" : "Constraints",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def Constraints(self) -> "IAgVAConstraintCollection":
        """Further conditions that must be met in order for the stopping condition to be deemed satisfied."""
        return self._intf.get_property(IAgVAStoppingCondition._metadata, IAgVAStoppingCondition._get_Constraints_metadata)

    _get_UserCalcObjectName_metadata = { "name" : "UserCalcObjectName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def UserCalcObjectName(self) -> str:
        """User Calc Object - a User Calculation Object for the highlighted stopping condition. For user-defined stopping conditions, use this field to specify what kind of value you want to stop on."""
        return self._intf.get_property(IAgVAStoppingCondition._metadata, IAgVAStoppingCondition._get_UserCalcObjectName_metadata)

    _set_UserCalcObjectName_metadata = { "name" : "UserCalcObjectName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @UserCalcObjectName.setter
    def UserCalcObjectName(self, newVal:str) -> None:
        return self._intf.set_property(IAgVAStoppingCondition._metadata, IAgVAStoppingCondition._set_UserCalcObjectName_metadata, newVal)

    _get_UserCalcObject_metadata = { "name" : "UserCalcObject",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def UserCalcObject(self) -> "IAgComponentInfo":
        """A User Calculation Object for the highlighted stopping condition. For user-defined stopping conditions, use this field to specify what kind of value you want to stop on."""
        return self._intf.get_property(IAgVAStoppingCondition._metadata, IAgVAStoppingCondition._get_UserCalcObject_metadata)

    _set_UserCalcObject_metadata = { "name" : "UserCalcObject",
            "arg_types" : (agcom.PVOID,),
            "marshallers" : (agmarshall.AgInterface_in_arg("IAgComponentInfo"),) }
    @UserCalcObject.setter
    def UserCalcObject(self, newVal:"IAgComponentInfo") -> None:
        return self._intf.set_property(IAgVAStoppingCondition._metadata, IAgVAStoppingCondition._set_UserCalcObject_metadata, newVal)

    _get_CentralBodyName_metadata = { "name" : "CentralBodyName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def CentralBodyName(self) -> str:
        """The central body. The default central body of a stopping condition is the Earth."""
        return self._intf.get_property(IAgVAStoppingCondition._metadata, IAgVAStoppingCondition._get_CentralBodyName_metadata)

    _set_CentralBodyName_metadata = { "name" : "CentralBodyName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @CentralBodyName.setter
    def CentralBodyName(self, newVal:str) -> None:
        return self._intf.set_property(IAgVAStoppingCondition._metadata, IAgVAStoppingCondition._set_CentralBodyName_metadata, newVal)

    _get_Criterion_metadata = { "name" : "Criterion",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVACriterion),) }
    @property
    def Criterion(self) -> "AgEVACriterion":
        """Specifies the direction from which the stopping condition value must be achieved."""
        return self._intf.get_property(IAgVAStoppingCondition._metadata, IAgVAStoppingCondition._get_Criterion_metadata)

    _set_Criterion_metadata = { "name" : "Criterion",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVACriterion),) }
    @Criterion.setter
    def Criterion(self, newVal:"AgEVACriterion") -> None:
        return self._intf.set_property(IAgVAStoppingCondition._metadata, IAgVAStoppingCondition._set_Criterion_metadata, newVal)

    _get_BeforeConditions_metadata = { "name" : "BeforeConditions",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def BeforeConditions(self) -> "IAgVAStoppingConditionCollection":
        """A 'before' stopping condition is used to define a stopping condition that depends on two events. Astrogator will ignore a stopping condition until its 'before' conditions are met. Astrogator then interpolates backwards to the normal stopping condition."""
        return self._intf.get_property(IAgVAStoppingCondition._metadata, IAgVAStoppingCondition._get_BeforeConditions_metadata)

    _get_Dimension_metadata = { "name" : "Dimension",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def Dimension(self) -> str:
        """The dimension of the stopping condition."""
        return self._intf.get_property(IAgVAStoppingCondition._metadata, IAgVAStoppingCondition._get_Dimension_metadata)

    _get_ReferencePoint_metadata = { "name" : "ReferencePoint",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def ReferencePoint(self) -> str:
        """Reference point used for calculation."""
        return self._intf.get_property(IAgVAStoppingCondition._metadata, IAgVAStoppingCondition._get_ReferencePoint_metadata)

    _set_ReferencePoint_metadata = { "name" : "ReferencePoint",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @ReferencePoint.setter
    def ReferencePoint(self, inVal:str) -> None:
        """Reference point used for calculation."""
        return self._intf.set_property(IAgVAStoppingCondition._metadata, IAgVAStoppingCondition._set_ReferencePoint_metadata, inVal)

    _CopyUserCalcObjectToClipboard_metadata = { "name" : "CopyUserCalcObjectToClipboard",
            "arg_types" : (),
            "marshallers" : () }
    def CopyUserCalcObjectToClipboard(self) -> None:
        """Copies the user-defined stopping condition calc object to the clipboard."""
        return self._intf.invoke(IAgVAStoppingCondition._metadata, IAgVAStoppingCondition._CopyUserCalcObjectToClipboard_metadata, )

    _PasteUserCalcObjectFromClipboard_metadata = { "name" : "PasteUserCalcObjectFromClipboard",
            "arg_types" : (),
            "marshallers" : () }
    def PasteUserCalcObjectFromClipboard(self) -> None:
        """Replaces the user-defined stopping condition calc object with the calc object in the clipboard."""
        return self._intf.invoke(IAgVAStoppingCondition._metadata, IAgVAStoppingCondition._PasteUserCalcObjectFromClipboard_metadata, )

    _get_UserCalcObjectLinkEmbedControl_metadata = { "name" : "UserCalcObjectLinkEmbedControl",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def UserCalcObjectLinkEmbedControl(self) -> "IAgComponentLinkEmbedControl":
        """Gets the link / embed controller for managing the user calc. object."""
        return self._intf.get_property(IAgVAStoppingCondition._metadata, IAgVAStoppingCondition._get_UserCalcObjectLinkEmbedControl_metadata)


agcls.AgClassCatalog.add_catalog_entry("{7B18D549-E67A-4532-9767-ECC78418475D}", IAgVAStoppingCondition)
agcls.AgTypeNameMap["IAgVAStoppingCondition"] = IAgVAStoppingCondition

class IAgVALightingStoppingCondition(IAgVAStoppingConditionComponent):
    """Properties for a lighting stopping condition."""
    _num_methods = 18
    _vtable_offset = IAgVAStoppingConditionComponent._vtable_offset + IAgVAStoppingConditionComponent._num_methods
    _metadata = {
        "uuid" : "{05642E87-6580-4E1F-82EF-BA6406DBAC65}",
        "vtable_reference" : IAgVAStoppingConditionComponent._vtable_offset + IAgVAStoppingConditionComponent._num_methods - 1,
        "method_offsets" : { "get_MaxTripTimes" : 1,
                             "set_MaxTripTimes" : 2,
                             "get_RepeatCount" : 3,
                             "set_RepeatCount" : 4,
                             "get_Constraints" : 5,
                             "get_BeforeConditions" : 6,
                             "get_Inherited" : 7,
                             "set_Inherited" : 8,
                             "get_Sequence" : 9,
                             "set_Sequence" : 10,
                             "get_Condition" : 11,
                             "set_Condition" : 12,
                             "get_EclipsingBodiesListSource" : 13,
                             "set_EclipsingBodiesListSource" : 14,
                             "AddEclipsingBody" : 15,
                             "RemoveEclipsingBody" : 16,
                             "get_EclipsingBodies" : 17,
                             "get_AvailableEclipsingBodies" : 18, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVALightingStoppingCondition._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVALightingStoppingCondition from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAStoppingConditionComponent._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVALightingStoppingCondition.__dict__ and type(IAgVALightingStoppingCondition.__dict__[attrname]) == property:
            return IAgVALightingStoppingCondition.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            IAgVAStoppingConditionComponent.__setattr__(self, attrname, value)
    
    _get_MaxTripTimes_metadata = { "name" : "MaxTripTimes",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def MaxTripTimes(self) -> float:
        """Rhe maximum number of times that the stopping condition will be applied - and any resulting automatic sequences executed. Dimensionless."""
        return self._intf.get_property(IAgVALightingStoppingCondition._metadata, IAgVALightingStoppingCondition._get_MaxTripTimes_metadata)

    _set_MaxTripTimes_metadata = { "name" : "MaxTripTimes",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @MaxTripTimes.setter
    def MaxTripTimes(self, inVal:float) -> None:
        return self._intf.set_property(IAgVALightingStoppingCondition._metadata, IAgVALightingStoppingCondition._set_MaxTripTimes_metadata, inVal)

    _get_RepeatCount_metadata = { "name" : "RepeatCount",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def RepeatCount(self) -> float:
        """The number of times the condition must be satisfied before the propagation ends or moves on to the designated automatic sequence. Dimensionless."""
        return self._intf.get_property(IAgVALightingStoppingCondition._metadata, IAgVALightingStoppingCondition._get_RepeatCount_metadata)

    _set_RepeatCount_metadata = { "name" : "RepeatCount",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @RepeatCount.setter
    def RepeatCount(self, newVal:float) -> None:
        return self._intf.set_property(IAgVALightingStoppingCondition._metadata, IAgVALightingStoppingCondition._set_RepeatCount_metadata, newVal)

    _get_Constraints_metadata = { "name" : "Constraints",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def Constraints(self) -> "IAgVAConstraintCollection":
        """Further conditions that must be met in order for the stopping condition to be deemed satisfied."""
        return self._intf.get_property(IAgVALightingStoppingCondition._metadata, IAgVALightingStoppingCondition._get_Constraints_metadata)

    _get_BeforeConditions_metadata = { "name" : "BeforeConditions",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def BeforeConditions(self) -> "IAgVAStoppingConditionCollection":
        """A 'before' stopping condition is used to define a stopping condition that depends on two events. Astrogator will ignore a stopping condition until its 'before' conditions are met. Astrogator then interpolates backwards to the normal stopping condition."""
        return self._intf.get_property(IAgVALightingStoppingCondition._metadata, IAgVALightingStoppingCondition._get_BeforeConditions_metadata)

    _get_Inherited_metadata = { "name" : "Inherited",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def Inherited(self) -> bool:
        """Condition Inherited by Automatic Sequences - if true, the stopping condition will be applied to any automatic sequences activated within the same segment."""
        return self._intf.get_property(IAgVALightingStoppingCondition._metadata, IAgVALightingStoppingCondition._get_Inherited_metadata)

    _set_Inherited_metadata = { "name" : "Inherited",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @Inherited.setter
    def Inherited(self, newVal:bool) -> None:
        return self._intf.set_property(IAgVALightingStoppingCondition._metadata, IAgVALightingStoppingCondition._set_Inherited_metadata, newVal)

    _get_Sequence_metadata = { "name" : "Sequence",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def Sequence(self) -> str:
        """The automatic sequence to trigger if the highlighted stopping condition is satisfied."""
        return self._intf.get_property(IAgVALightingStoppingCondition._metadata, IAgVALightingStoppingCondition._get_Sequence_metadata)

    _set_Sequence_metadata = { "name" : "Sequence",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @Sequence.setter
    def Sequence(self, newVal:str) -> None:
        return self._intf.set_property(IAgVALightingStoppingCondition._metadata, IAgVALightingStoppingCondition._set_Sequence_metadata, newVal)

    _get_Condition_metadata = { "name" : "Condition",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVALightingCondition),) }
    @property
    def Condition(self) -> "AgEVALightingCondition":
        """Specifies the direction from which the stopping condition value must be achieved."""
        return self._intf.get_property(IAgVALightingStoppingCondition._metadata, IAgVALightingStoppingCondition._get_Condition_metadata)

    _set_Condition_metadata = { "name" : "Condition",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVALightingCondition),) }
    @Condition.setter
    def Condition(self, newVal:"AgEVALightingCondition") -> None:
        return self._intf.set_property(IAgVALightingStoppingCondition._metadata, IAgVALightingStoppingCondition._set_Condition_metadata, newVal)

    _get_EclipsingBodiesListSource_metadata = { "name" : "EclipsingBodiesListSource",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAEclipsingBodiesSource),) }
    @property
    def EclipsingBodiesListSource(self) -> "AgEVAEclipsingBodiesSource":
        """Eclipsing Bodies List Source."""
        return self._intf.get_property(IAgVALightingStoppingCondition._metadata, IAgVALightingStoppingCondition._get_EclipsingBodiesListSource_metadata)

    _set_EclipsingBodiesListSource_metadata = { "name" : "EclipsingBodiesListSource",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAEclipsingBodiesSource),) }
    @EclipsingBodiesListSource.setter
    def EclipsingBodiesListSource(self, newVal:"AgEVAEclipsingBodiesSource") -> None:
        return self._intf.set_property(IAgVALightingStoppingCondition._metadata, IAgVALightingStoppingCondition._set_EclipsingBodiesListSource_metadata, newVal)

    _AddEclipsingBody_metadata = { "name" : "AddEclipsingBody",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    def AddEclipsingBody(self, eclipsingBody:str) -> None:
        """Adds an eclipsing body."""
        return self._intf.invoke(IAgVALightingStoppingCondition._metadata, IAgVALightingStoppingCondition._AddEclipsingBody_metadata, eclipsingBody)

    _RemoveEclipsingBody_metadata = { "name" : "RemoveEclipsingBody",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    def RemoveEclipsingBody(self, eclipsingBody:str) -> None:
        """Removes an eclipsing body."""
        return self._intf.invoke(IAgVALightingStoppingCondition._metadata, IAgVALightingStoppingCondition._RemoveEclipsingBody_metadata, eclipsingBody)

    _get_EclipsingBodies_metadata = { "name" : "EclipsingBodies",
            "arg_types" : (POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg,) }
    @property
    def EclipsingBodies(self) -> list:
        """Returns a list of user selected eclipsing bodies."""
        return self._intf.get_property(IAgVALightingStoppingCondition._metadata, IAgVALightingStoppingCondition._get_EclipsingBodies_metadata)

    _get_AvailableEclipsingBodies_metadata = { "name" : "AvailableEclipsingBodies",
            "arg_types" : (POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg,) }
    @property
    def AvailableEclipsingBodies(self) -> list:
        """Returns a list of available eclipsing bodies."""
        return self._intf.get_property(IAgVALightingStoppingCondition._metadata, IAgVALightingStoppingCondition._get_AvailableEclipsingBodies_metadata)


agcls.AgClassCatalog.add_catalog_entry("{05642E87-6580-4E1F-82EF-BA6406DBAC65}", IAgVALightingStoppingCondition)
agcls.AgTypeNameMap["IAgVALightingStoppingCondition"] = IAgVALightingStoppingCondition

class IAgVAAccessStoppingCondition(IAgVAStoppingConditionComponent):
    """Properties for an access stopping condition."""
    _num_methods = 28
    _vtable_offset = IAgVAStoppingConditionComponent._vtable_offset + IAgVAStoppingConditionComponent._num_methods
    _metadata = {
        "uuid" : "{2A2D2F12-9F9B-43F6-B6B0-00088C006504}",
        "vtable_reference" : IAgVAStoppingConditionComponent._vtable_offset + IAgVAStoppingConditionComponent._num_methods - 1,
        "method_offsets" : { "get_TimeConvergence" : 1,
                             "set_TimeConvergence" : 2,
                             "get_RepeatCount" : 3,
                             "set_RepeatCount" : 4,
                             "get_Inherited" : 5,
                             "set_Inherited" : 6,
                             "get_MaxTripTimes" : 7,
                             "set_MaxTripTimes" : 8,
                             "get_Sequence" : 9,
                             "set_Sequence" : 10,
                             "get_Constraints" : 11,
                             "get_Criterion" : 12,
                             "set_Criterion" : 13,
                             "get_BeforeConditions" : 14,
                             "get_AberrationType" : 15,
                             "set_AberrationType" : 16,
                             "SetBaseSelection" : 17,
                             "get_BaseSelectionType" : 18,
                             "get_BaseSelection" : 19,
                             "get_ClockHost" : 20,
                             "set_ClockHost" : 21,
                             "get_SignalSense" : 22,
                             "set_SignalSense" : 23,
                             "get_TargetObject" : 24,
                             "get_TimeDelayConvergenceTolerance" : 25,
                             "set_TimeDelayConvergenceTolerance" : 26,
                             "get_UseLightTimeDelay" : 27,
                             "set_UseLightTimeDelay" : 28, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAAccessStoppingCondition._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAAccessStoppingCondition from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAStoppingConditionComponent._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAAccessStoppingCondition.__dict__ and type(IAgVAAccessStoppingCondition.__dict__[attrname]) == property:
            return IAgVAAccessStoppingCondition.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            IAgVAStoppingConditionComponent.__setattr__(self, attrname, value)
    
    _get_TimeConvergence_metadata = { "name" : "TimeConvergence",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def TimeConvergence(self) -> float:
        """Sets the time tolerance that is used by the access algorithms to determine the start times and stop times of access intervals. Uses Time dimension."""
        return self._intf.get_property(IAgVAAccessStoppingCondition._metadata, IAgVAAccessStoppingCondition._get_TimeConvergence_metadata)

    _set_TimeConvergence_metadata = { "name" : "TimeConvergence",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @TimeConvergence.setter
    def TimeConvergence(self, newVal:float) -> None:
        return self._intf.set_property(IAgVAAccessStoppingCondition._metadata, IAgVAAccessStoppingCondition._set_TimeConvergence_metadata, newVal)

    _get_RepeatCount_metadata = { "name" : "RepeatCount",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def RepeatCount(self) -> float:
        """The number of times the condition must be satisfied before the propagation ends or moves on to the designated automatic sequence. Dimensionless."""
        return self._intf.get_property(IAgVAAccessStoppingCondition._metadata, IAgVAAccessStoppingCondition._get_RepeatCount_metadata)

    _set_RepeatCount_metadata = { "name" : "RepeatCount",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @RepeatCount.setter
    def RepeatCount(self, newVal:float) -> None:
        return self._intf.set_property(IAgVAAccessStoppingCondition._metadata, IAgVAAccessStoppingCondition._set_RepeatCount_metadata, newVal)

    _get_Inherited_metadata = { "name" : "Inherited",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def Inherited(self) -> bool:
        """Condition Inherited by Automatic Sequences - if true, the stopping condition will be applied to any automatic sequences activated within the same segment."""
        return self._intf.get_property(IAgVAAccessStoppingCondition._metadata, IAgVAAccessStoppingCondition._get_Inherited_metadata)

    _set_Inherited_metadata = { "name" : "Inherited",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @Inherited.setter
    def Inherited(self, newVal:bool) -> None:
        return self._intf.set_property(IAgVAAccessStoppingCondition._metadata, IAgVAAccessStoppingCondition._set_Inherited_metadata, newVal)

    _get_MaxTripTimes_metadata = { "name" : "MaxTripTimes",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def MaxTripTimes(self) -> float:
        """The maximum number of times that the stopping condition will be applied - and any resulting automatic sequences executed. Dimensionless."""
        return self._intf.get_property(IAgVAAccessStoppingCondition._metadata, IAgVAAccessStoppingCondition._get_MaxTripTimes_metadata)

    _set_MaxTripTimes_metadata = { "name" : "MaxTripTimes",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @MaxTripTimes.setter
    def MaxTripTimes(self, inVal:float) -> None:
        return self._intf.set_property(IAgVAAccessStoppingCondition._metadata, IAgVAAccessStoppingCondition._set_MaxTripTimes_metadata, inVal)

    _get_Sequence_metadata = { "name" : "Sequence",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def Sequence(self) -> str:
        """The automatic sequence to trigger if the highlighted stopping condition is satisfied."""
        return self._intf.get_property(IAgVAAccessStoppingCondition._metadata, IAgVAAccessStoppingCondition._get_Sequence_metadata)

    _set_Sequence_metadata = { "name" : "Sequence",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @Sequence.setter
    def Sequence(self, newVal:str) -> None:
        return self._intf.set_property(IAgVAAccessStoppingCondition._metadata, IAgVAAccessStoppingCondition._set_Sequence_metadata, newVal)

    _get_Constraints_metadata = { "name" : "Constraints",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def Constraints(self) -> "IAgVAConstraintCollection":
        """Further conditions that must be met in order for the stopping condition to be deemed satisfied."""
        return self._intf.get_property(IAgVAAccessStoppingCondition._metadata, IAgVAAccessStoppingCondition._get_Constraints_metadata)

    _get_Criterion_metadata = { "name" : "Criterion",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAAccessCriterion),) }
    @property
    def Criterion(self) -> "AgEVAAccessCriterion":
        """Specifies the direction from which the stopping condition value must be achieved."""
        return self._intf.get_property(IAgVAAccessStoppingCondition._metadata, IAgVAAccessStoppingCondition._get_Criterion_metadata)

    _set_Criterion_metadata = { "name" : "Criterion",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAAccessCriterion),) }
    @Criterion.setter
    def Criterion(self, newVal:"AgEVAAccessCriterion") -> None:
        return self._intf.set_property(IAgVAAccessStoppingCondition._metadata, IAgVAAccessStoppingCondition._set_Criterion_metadata, newVal)

    _get_BeforeConditions_metadata = { "name" : "BeforeConditions",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def BeforeConditions(self) -> "IAgVAStoppingConditionCollection":
        """A 'before' stopping condition is used to define a stopping condition that depends on two events. Astrogator will ignore a stopping condition until its 'before' conditions are met. Astrogator then interpolates backwards to the normal stopping condition."""
        return self._intf.get_property(IAgVAAccessStoppingCondition._metadata, IAgVAAccessStoppingCondition._get_BeforeConditions_metadata)

    _get_AberrationType_metadata = { "name" : "AberrationType",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAberrationType),) }
    @property
    def AberrationType(self) -> "AgEAberrationType":
        """Sets the model of aberration to be used in access computations."""
        return self._intf.get_property(IAgVAAccessStoppingCondition._metadata, IAgVAAccessStoppingCondition._get_AberrationType_metadata)

    _set_AberrationType_metadata = { "name" : "AberrationType",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAberrationType),) }
    @AberrationType.setter
    def AberrationType(self, inVal:"AgEAberrationType") -> None:
        return self._intf.set_property(IAgVAAccessStoppingCondition._metadata, IAgVAAccessStoppingCondition._set_AberrationType_metadata, inVal)

    _SetBaseSelection_metadata = { "name" : "SetBaseSelection",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVABaseSelection),) }
    def SetBaseSelection(self, selection:"AgEVABaseSelection") -> None:
        """BaseSelection"""
        return self._intf.invoke(IAgVAAccessStoppingCondition._metadata, IAgVAAccessStoppingCondition._SetBaseSelection_metadata, selection)

    _get_BaseSelectionType_metadata = { "name" : "BaseSelectionType",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVABaseSelection),) }
    @property
    def BaseSelectionType(self) -> "AgEVABaseSelection":
        """The base object for the access calculation."""
        return self._intf.get_property(IAgVAAccessStoppingCondition._metadata, IAgVAAccessStoppingCondition._get_BaseSelectionType_metadata)

    _get_BaseSelection_metadata = { "name" : "BaseSelection",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def BaseSelection(self) -> "IAgLinkToObject":
        """Returns the base selection object."""
        return self._intf.get_property(IAgVAAccessStoppingCondition._metadata, IAgVAAccessStoppingCondition._get_BaseSelection_metadata)

    _get_ClockHost_metadata = { "name" : "ClockHost",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEIvClockHost),) }
    @property
    def ClockHost(self) -> "AgEIvClockHost":
        """Time values are reported with a clock colocated with the clock host object."""
        return self._intf.get_property(IAgVAAccessStoppingCondition._metadata, IAgVAAccessStoppingCondition._get_ClockHost_metadata)

    _set_ClockHost_metadata = { "name" : "ClockHost",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEIvClockHost),) }
    @ClockHost.setter
    def ClockHost(self, inVal:"AgEIvClockHost") -> None:
        return self._intf.set_property(IAgVAAccessStoppingCondition._metadata, IAgVAAccessStoppingCondition._set_ClockHost_metadata, inVal)

    _get_SignalSense_metadata = { "name" : "SignalSense",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEIvTimeSense),) }
    @property
    def SignalSense(self) -> "AgEIvTimeSense":
        """Sets the direction of the signal."""
        return self._intf.get_property(IAgVAAccessStoppingCondition._metadata, IAgVAAccessStoppingCondition._get_SignalSense_metadata)

    _set_SignalSense_metadata = { "name" : "SignalSense",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEIvTimeSense),) }
    @SignalSense.setter
    def SignalSense(self, inVal:"AgEIvTimeSense") -> None:
        return self._intf.set_property(IAgVAAccessStoppingCondition._metadata, IAgVAAccessStoppingCondition._set_SignalSense_metadata, inVal)

    _get_TargetObject_metadata = { "name" : "TargetObject",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def TargetObject(self) -> "IAgLinkToObject":
        """The target object for the access calculation."""
        return self._intf.get_property(IAgVAAccessStoppingCondition._metadata, IAgVAAccessStoppingCondition._get_TargetObject_metadata)

    _get_TimeDelayConvergenceTolerance_metadata = { "name" : "TimeDelayConvergenceTolerance",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def TimeDelayConvergenceTolerance(self) -> float:
        """The tolerance used when iterating to determine the light time delay. The iteration stops when the improvement in the value is less than this tolerance. Uses Time Dimension."""
        return self._intf.get_property(IAgVAAccessStoppingCondition._metadata, IAgVAAccessStoppingCondition._get_TimeDelayConvergenceTolerance_metadata)

    _set_TimeDelayConvergenceTolerance_metadata = { "name" : "TimeDelayConvergenceTolerance",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @TimeDelayConvergenceTolerance.setter
    def TimeDelayConvergenceTolerance(self, inVal:float) -> None:
        return self._intf.set_property(IAgVAAccessStoppingCondition._metadata, IAgVAAccessStoppingCondition._set_TimeDelayConvergenceTolerance_metadata, inVal)

    _get_UseLightTimeDelay_metadata = { "name" : "UseLightTimeDelay",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def UseLightTimeDelay(self) -> bool:
        """Whether to consider light time delay in access computations."""
        return self._intf.get_property(IAgVAAccessStoppingCondition._metadata, IAgVAAccessStoppingCondition._get_UseLightTimeDelay_metadata)

    _set_UseLightTimeDelay_metadata = { "name" : "UseLightTimeDelay",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @UseLightTimeDelay.setter
    def UseLightTimeDelay(self, inVal:bool) -> None:
        return self._intf.set_property(IAgVAAccessStoppingCondition._metadata, IAgVAAccessStoppingCondition._set_UseLightTimeDelay_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{2A2D2F12-9F9B-43F6-B6B0-00088C006504}", IAgVAAccessStoppingCondition)
agcls.AgTypeNameMap["IAgVAAccessStoppingCondition"] = IAgVAAccessStoppingCondition

class IAgVAMCSPropagate(object):
    """Properties for a Propagate segment."""
    _num_methods = 21
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{41E66E06-FD6A-4523-8956-B0DF0BE5479E}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_PropagatorName" : 1,
                             "set_PropagatorName" : 2,
                             "get_StoppingConditions" : 3,
                             "get_MinPropagationTime" : 4,
                             "set_MinPropagationTime" : 5,
                             "get_MaxPropagationTime" : 6,
                             "set_MaxPropagationTime" : 7,
                             "get_EnableMaxPropagationTime" : 8,
                             "set_EnableMaxPropagationTime" : 9,
                             "get_EnableWarningMessage" : 10,
                             "set_EnableWarningMessage" : 11,
                             "EnableControlParameter" : 12,
                             "DisableControlParameter" : 13,
                             "IsControlParameterEnabled" : 14,
                             "get_ControlParametersAvailable" : 15,
                             "get_OverrideMaxPropagationTime" : 16,
                             "set_OverrideMaxPropagationTime" : 17,
                             "get_ShouldStopForInitiallySurpassedEpochStoppingConditions" : 18,
                             "set_ShouldStopForInitiallySurpassedEpochStoppingConditions" : 19,
                             "get_ShouldReinitializeSTMAtStartOfSegmentPropagation" : 20,
                             "set_ShouldReinitializeSTMAtStartOfSegmentPropagation" : 21, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAMCSPropagate._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAMCSPropagate from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAMCSPropagate.__dict__ and type(IAgVAMCSPropagate.__dict__[attrname]) == property:
            return IAgVAMCSPropagate.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAMCSPropagate.")
    
    _get_PropagatorName_metadata = { "name" : "PropagatorName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def PropagatorName(self) -> str:
        """The propagator."""
        return self._intf.get_property(IAgVAMCSPropagate._metadata, IAgVAMCSPropagate._get_PropagatorName_metadata)

    _set_PropagatorName_metadata = { "name" : "PropagatorName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @PropagatorName.setter
    def PropagatorName(self, newVal:str) -> None:
        return self._intf.set_property(IAgVAMCSPropagate._metadata, IAgVAMCSPropagate._set_PropagatorName_metadata, newVal)

    _get_StoppingConditions_metadata = { "name" : "StoppingConditions",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def StoppingConditions(self) -> "IAgVAStoppingConditionCollection":
        """The list of stopping conditions defined for the segment."""
        return self._intf.get_property(IAgVAMCSPropagate._metadata, IAgVAMCSPropagate._get_StoppingConditions_metadata)

    _get_MinPropagationTime_metadata = { "name" : "MinPropagationTime",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def MinPropagationTime(self) -> float:
        """The minimum time that must elapse from the beginning of the segment until Astrogator will begin checking stopping conditions for satisfaction. Uses Time Dimension."""
        return self._intf.get_property(IAgVAMCSPropagate._metadata, IAgVAMCSPropagate._get_MinPropagationTime_metadata)

    _set_MinPropagationTime_metadata = { "name" : "MinPropagationTime",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @MinPropagationTime.setter
    def MinPropagationTime(self, newVal:float) -> None:
        return self._intf.set_property(IAgVAMCSPropagate._metadata, IAgVAMCSPropagate._set_MinPropagationTime_metadata, newVal)

    _get_MaxPropagationTime_metadata = { "name" : "MaxPropagationTime",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def MaxPropagationTime(self) -> float:
        """The maximum propagation time, after which the segment will end regardless of whether the stopping conditions have been satisfied. Uses Time Dimension."""
        return self._intf.get_property(IAgVAMCSPropagate._metadata, IAgVAMCSPropagate._get_MaxPropagationTime_metadata)

    _set_MaxPropagationTime_metadata = { "name" : "MaxPropagationTime",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @MaxPropagationTime.setter
    def MaxPropagationTime(self, newVal:float) -> None:
        return self._intf.set_property(IAgVAMCSPropagate._metadata, IAgVAMCSPropagate._set_MaxPropagationTime_metadata, newVal)

    _get_EnableMaxPropagationTime_metadata = { "name" : "EnableMaxPropagationTime",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def EnableMaxPropagationTime(self) -> bool:
        """If true, the maximum propagation time is enforced."""
        return self._intf.get_property(IAgVAMCSPropagate._metadata, IAgVAMCSPropagate._get_EnableMaxPropagationTime_metadata)

    _set_EnableMaxPropagationTime_metadata = { "name" : "EnableMaxPropagationTime",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @EnableMaxPropagationTime.setter
    def EnableMaxPropagationTime(self, newVal:bool) -> None:
        return self._intf.set_property(IAgVAMCSPropagate._metadata, IAgVAMCSPropagate._set_EnableMaxPropagationTime_metadata, newVal)

    _get_EnableWarningMessage_metadata = { "name" : "EnableWarningMessage",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def EnableWarningMessage(self) -> bool:
        """If true, Astrogator will issue a warning message if propagation is stopped by the Maximum Propagation Time parameter."""
        return self._intf.get_property(IAgVAMCSPropagate._metadata, IAgVAMCSPropagate._get_EnableWarningMessage_metadata)

    _set_EnableWarningMessage_metadata = { "name" : "EnableWarningMessage",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @EnableWarningMessage.setter
    def EnableWarningMessage(self, newVal:bool) -> None:
        return self._intf.set_property(IAgVAMCSPropagate._metadata, IAgVAMCSPropagate._set_EnableWarningMessage_metadata, newVal)

    _EnableControlParameter_metadata = { "name" : "EnableControlParameter",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAControlAdvanced),) }
    def EnableControlParameter(self, param:"AgEVAControlAdvanced") -> None:
        """Enables or disables the specified control parameter."""
        return self._intf.invoke(IAgVAMCSPropagate._metadata, IAgVAMCSPropagate._EnableControlParameter_metadata, param)

    _DisableControlParameter_metadata = { "name" : "DisableControlParameter",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAControlAdvanced),) }
    def DisableControlParameter(self, param:"AgEVAControlAdvanced") -> None:
        """Disables the specified control parameter."""
        return self._intf.invoke(IAgVAMCSPropagate._metadata, IAgVAMCSPropagate._DisableControlParameter_metadata, param)

    _IsControlParameterEnabled_metadata = { "name" : "IsControlParameterEnabled",
            "arg_types" : (agcom.LONG, POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAControlAdvanced), agmarshall.VARIANT_BOOL_arg,) }
    def IsControlParameterEnabled(self, param:"AgEVAControlAdvanced") -> bool:
        """Sees if the specified control is enabled."""
        return self._intf.invoke(IAgVAMCSPropagate._metadata, IAgVAMCSPropagate._IsControlParameterEnabled_metadata, param, out_arg())

    _get_ControlParametersAvailable_metadata = { "name" : "ControlParametersAvailable",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def ControlParametersAvailable(self) -> bool:
        """Returns whether or not the control parameters can be set."""
        return self._intf.get_property(IAgVAMCSPropagate._metadata, IAgVAMCSPropagate._get_ControlParametersAvailable_metadata)

    _get_OverrideMaxPropagationTime_metadata = { "name" : "OverrideMaxPropagationTime",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def OverrideMaxPropagationTime(self) -> bool:
        """Override Maximum Propagation Time - if there is a duration or epoch stopping condition that occurs after the maximum propagation time, ignore the maximum propagation time."""
        return self._intf.get_property(IAgVAMCSPropagate._metadata, IAgVAMCSPropagate._get_OverrideMaxPropagationTime_metadata)

    _set_OverrideMaxPropagationTime_metadata = { "name" : "OverrideMaxPropagationTime",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @OverrideMaxPropagationTime.setter
    def OverrideMaxPropagationTime(self, newVal:bool) -> None:
        return self._intf.set_property(IAgVAMCSPropagate._metadata, IAgVAMCSPropagate._set_OverrideMaxPropagationTime_metadata, newVal)

    _get_ShouldStopForInitiallySurpassedEpochStoppingConditions_metadata = { "name" : "ShouldStopForInitiallySurpassedEpochStoppingConditions",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def ShouldStopForInitiallySurpassedEpochStoppingConditions(self) -> bool:
        """Stop immediately if propagation begins beyond an active epoch stopping condition."""
        return self._intf.get_property(IAgVAMCSPropagate._metadata, IAgVAMCSPropagate._get_ShouldStopForInitiallySurpassedEpochStoppingConditions_metadata)

    _set_ShouldStopForInitiallySurpassedEpochStoppingConditions_metadata = { "name" : "ShouldStopForInitiallySurpassedEpochStoppingConditions",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @ShouldStopForInitiallySurpassedEpochStoppingConditions.setter
    def ShouldStopForInitiallySurpassedEpochStoppingConditions(self, newVal:bool) -> None:
        return self._intf.set_property(IAgVAMCSPropagate._metadata, IAgVAMCSPropagate._set_ShouldStopForInitiallySurpassedEpochStoppingConditions_metadata, newVal)

    _get_ShouldReinitializeSTMAtStartOfSegmentPropagation_metadata = { "name" : "ShouldReinitializeSTMAtStartOfSegmentPropagation",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def ShouldReinitializeSTMAtStartOfSegmentPropagation(self) -> bool:
        """If this segment is propagating the state transition matrix, reset it to the identity matrix at the start of the segment."""
        return self._intf.get_property(IAgVAMCSPropagate._metadata, IAgVAMCSPropagate._get_ShouldReinitializeSTMAtStartOfSegmentPropagation_metadata)

    _set_ShouldReinitializeSTMAtStartOfSegmentPropagation_metadata = { "name" : "ShouldReinitializeSTMAtStartOfSegmentPropagation",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @ShouldReinitializeSTMAtStartOfSegmentPropagation.setter
    def ShouldReinitializeSTMAtStartOfSegmentPropagation(self, newVal:bool) -> None:
        return self._intf.set_property(IAgVAMCSPropagate._metadata, IAgVAMCSPropagate._set_ShouldReinitializeSTMAtStartOfSegmentPropagation_metadata, newVal)


agcls.AgClassCatalog.add_catalog_entry("{41E66E06-FD6A-4523-8956-B0DF0BE5479E}", IAgVAMCSPropagate)
agcls.AgTypeNameMap["IAgVAMCSPropagate"] = IAgVAMCSPropagate

class IAgVAMCSSequence(object):
    """Properties for a Sequence segment."""
    _num_methods = 9
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{0FE48F27-40D3-4D78-9B87-6539D1977696}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_RepeatCount" : 1,
                             "set_RepeatCount" : 2,
                             "get_GenerateEphemeris" : 3,
                             "set_GenerateEphemeris" : 4,
                             "get_Segments" : 5,
                             "get_SequenceStateToPass" : 6,
                             "set_SequenceStateToPass" : 7,
                             "get_ScriptingTool" : 8,
                             "ApplyScript" : 9, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAMCSSequence._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAMCSSequence from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAMCSSequence.__dict__ and type(IAgVAMCSSequence.__dict__[attrname]) == property:
            return IAgVAMCSSequence.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAMCSSequence.")
    
    _get_RepeatCount_metadata = { "name" : "RepeatCount",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.LONG_arg,) }
    @property
    def RepeatCount(self) -> int:
        """The number of times that the sequence will be executed. A sequence that is repeated is executed immediately subsequent to the previous execution of the sequence. Dimensionless."""
        return self._intf.get_property(IAgVAMCSSequence._metadata, IAgVAMCSSequence._get_RepeatCount_metadata)

    _set_RepeatCount_metadata = { "name" : "RepeatCount",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.LONG_arg,) }
    @RepeatCount.setter
    def RepeatCount(self, newVal:int) -> None:
        return self._intf.set_property(IAgVAMCSSequence._metadata, IAgVAMCSSequence._set_RepeatCount_metadata, newVal)

    _get_GenerateEphemeris_metadata = { "name" : "GenerateEphemeris",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def GenerateEphemeris(self) -> bool:
        """If true, the sequence generates ephemeris and displays it in the 2D and 3D Graphics windows."""
        return self._intf.get_property(IAgVAMCSSequence._metadata, IAgVAMCSSequence._get_GenerateEphemeris_metadata)

    _set_GenerateEphemeris_metadata = { "name" : "GenerateEphemeris",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @GenerateEphemeris.setter
    def GenerateEphemeris(self, newVal:bool) -> None:
        return self._intf.set_property(IAgVAMCSSequence._metadata, IAgVAMCSSequence._set_GenerateEphemeris_metadata, newVal)

    _get_Segments_metadata = { "name" : "Segments",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def Segments(self) -> "IAgVAMCSSegmentCollection":
        """The list of segments defined for the sequence."""
        return self._intf.get_property(IAgVAMCSSequence._metadata, IAgVAMCSSequence._get_Segments_metadata)

    _get_SequenceStateToPass_metadata = { "name" : "SequenceStateToPass",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVASequenceStateToPass),) }
    @property
    def SequenceStateToPass(self) -> "AgEVASequenceStateToPass":
        """State To Pass To Next Segment - the state of the sequence to pass."""
        return self._intf.get_property(IAgVAMCSSequence._metadata, IAgVAMCSSequence._get_SequenceStateToPass_metadata)

    _set_SequenceStateToPass_metadata = { "name" : "SequenceStateToPass",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVASequenceStateToPass),) }
    @SequenceStateToPass.setter
    def SequenceStateToPass(self, inVal:"AgEVASequenceStateToPass") -> None:
        return self._intf.set_property(IAgVAMCSSequence._metadata, IAgVAMCSSequence._set_SequenceStateToPass_metadata, inVal)

    _get_ScriptingTool_metadata = { "name" : "ScriptingTool",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def ScriptingTool(self) -> "IAgVAScriptingTool":
        """Returns the Scripting tool for the sequence."""
        return self._intf.get_property(IAgVAMCSSequence._metadata, IAgVAMCSSequence._get_ScriptingTool_metadata)

    _ApplyScript_metadata = { "name" : "ApplyScript",
            "arg_types" : (),
            "marshallers" : () }
    def ApplyScript(self) -> None:
        """Apply the script."""
        return self._intf.invoke(IAgVAMCSSequence._metadata, IAgVAMCSSequence._ApplyScript_metadata, )


agcls.AgClassCatalog.add_catalog_entry("{0FE48F27-40D3-4D78-9B87-6539D1977696}", IAgVAMCSSequence)
agcls.AgTypeNameMap["IAgVAMCSSequence"] = IAgVAMCSSequence

class IAgVAMCSBackwardSequence(IAgVAMCSSequence):
    """Properties for a Backward Sequence segment."""
    _num_methods = 0
    _vtable_offset = IAgVAMCSSequence._vtable_offset + IAgVAMCSSequence._num_methods
    _metadata = {
        "uuid" : "{F9AF6E49-B8E0-4E5E-91CC-04E622CBC9EF}",
        "vtable_reference" : IAgVAMCSSequence._vtable_offset + IAgVAMCSSequence._num_methods - 1,
        "method_offsets" : {  }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAMCSBackwardSequence._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAMCSBackwardSequence from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAMCSSequence._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAMCSBackwardSequence.__dict__ and type(IAgVAMCSBackwardSequence.__dict__[attrname]) == property:
            return IAgVAMCSBackwardSequence.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            IAgVAMCSSequence.__setattr__(self, attrname, value)
    

agcls.AgClassCatalog.add_catalog_entry("{F9AF6E49-B8E0-4E5E-91CC-04E622CBC9EF}", IAgVAMCSBackwardSequence)
agcls.AgTypeNameMap["IAgVAMCSBackwardSequence"] = IAgVAMCSBackwardSequence

class IAgVAMCSLaunch(object):
    """Properties for a Launch segment."""
    _num_methods = 32
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{C342C18C-80EF-4E1F-8363-90181B755E66}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_CentralBodyName" : 1,
                             "set_CentralBodyName" : 2,
                             "get_StepSize" : 3,
                             "set_StepSize" : 4,
                             "get_PreLaunchTime" : 5,
                             "set_PreLaunchTime" : 6,
                             "get_Epoch" : 7,
                             "set_Epoch" : 8,
                             "EnableControlParameter" : 9,
                             "DisableControlParameter" : 10,
                             "IsControlParameterEnabled" : 11,
                             "get_ControlParametersAvailable" : 12,
                             "get_InitialAcceleration" : 13,
                             "set_InitialAcceleration" : 14,
                             "get_SpacecraftParameters" : 15,
                             "get_FuelTank" : 16,
                             "get_DisplaySystemType" : 17,
                             "SetDisplaySystemType" : 18,
                             "get_DisplaySystem" : 19,
                             "get_AscentType" : 20,
                             "set_AscentType" : 21,
                             "get_TimeOfFlight" : 22,
                             "set_TimeOfFlight" : 23,
                             "get_BurnoutType" : 24,
                             "SetBurnoutType" : 25,
                             "get_Burnout" : 26,
                             "get_BurnoutVelocity" : 27,
                             "get_UsePreviousSegmentState" : 28,
                             "set_UsePreviousSegmentState" : 29,
                             "get_SetMetEpoch" : 30,
                             "set_SetMetEpoch" : 31,
                             "get_UserVariables" : 32, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAMCSLaunch._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAMCSLaunch from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAMCSLaunch.__dict__ and type(IAgVAMCSLaunch.__dict__[attrname]) == property:
            return IAgVAMCSLaunch.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAMCSLaunch.")
    
    _get_CentralBodyName_metadata = { "name" : "CentralBodyName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def CentralBodyName(self) -> str:
        """The central body."""
        return self._intf.get_property(IAgVAMCSLaunch._metadata, IAgVAMCSLaunch._get_CentralBodyName_metadata)

    _set_CentralBodyName_metadata = { "name" : "CentralBodyName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @CentralBodyName.setter
    def CentralBodyName(self, newVal:str) -> None:
        return self._intf.set_property(IAgVAMCSLaunch._metadata, IAgVAMCSLaunch._set_CentralBodyName_metadata, newVal)

    _get_StepSize_metadata = { "name" : "StepSize",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def StepSize(self) -> float:
        """The time interval between calculated ephemeris output points. Uses Time Dimension."""
        return self._intf.get_property(IAgVAMCSLaunch._metadata, IAgVAMCSLaunch._get_StepSize_metadata)

    _set_StepSize_metadata = { "name" : "StepSize",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @StepSize.setter
    def StepSize(self, newVal:float) -> None:
        return self._intf.set_property(IAgVAMCSLaunch._metadata, IAgVAMCSLaunch._set_StepSize_metadata, newVal)

    _get_PreLaunchTime_metadata = { "name" : "PreLaunchTime",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def PreLaunchTime(self) -> float:
        """The amount of time before the spacecraft's launch that it will be created in the scenario. The vehicle will remain at the launch position until beginning of the launch epoch. Uses Time Dimension."""
        return self._intf.get_property(IAgVAMCSLaunch._metadata, IAgVAMCSLaunch._get_PreLaunchTime_metadata)

    _set_PreLaunchTime_metadata = { "name" : "PreLaunchTime",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @PreLaunchTime.setter
    def PreLaunchTime(self, newVal:float) -> None:
        return self._intf.set_property(IAgVAMCSLaunch._metadata, IAgVAMCSLaunch._set_PreLaunchTime_metadata, newVal)

    _get_Epoch_metadata = { "name" : "Epoch",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def Epoch(self) -> typing.Any:
        """The date and time of the launch. Uses DateFormat Dimension."""
        return self._intf.get_property(IAgVAMCSLaunch._metadata, IAgVAMCSLaunch._get_Epoch_metadata)

    _set_Epoch_metadata = { "name" : "Epoch",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @Epoch.setter
    def Epoch(self, newVal:typing.Any) -> None:
        return self._intf.set_property(IAgVAMCSLaunch._metadata, IAgVAMCSLaunch._set_Epoch_metadata, newVal)

    _EnableControlParameter_metadata = { "name" : "EnableControlParameter",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAControlLaunch),) }
    def EnableControlParameter(self, param:"AgEVAControlLaunch") -> None:
        """Enables the specified control parameter."""
        return self._intf.invoke(IAgVAMCSLaunch._metadata, IAgVAMCSLaunch._EnableControlParameter_metadata, param)

    _DisableControlParameter_metadata = { "name" : "DisableControlParameter",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAControlLaunch),) }
    def DisableControlParameter(self, param:"AgEVAControlLaunch") -> None:
        """Disables the specified control parameter."""
        return self._intf.invoke(IAgVAMCSLaunch._metadata, IAgVAMCSLaunch._DisableControlParameter_metadata, param)

    _IsControlParameterEnabled_metadata = { "name" : "IsControlParameterEnabled",
            "arg_types" : (agcom.LONG, POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAControlLaunch), agmarshall.VARIANT_BOOL_arg,) }
    def IsControlParameterEnabled(self, param:"AgEVAControlLaunch") -> bool:
        """Sees if the specified control is enabled."""
        return self._intf.invoke(IAgVAMCSLaunch._metadata, IAgVAMCSLaunch._IsControlParameterEnabled_metadata, param, out_arg())

    _get_ControlParametersAvailable_metadata = { "name" : "ControlParametersAvailable",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def ControlParametersAvailable(self) -> bool:
        """Returns whether or not the control parameters can be set."""
        return self._intf.get_property(IAgVAMCSLaunch._metadata, IAgVAMCSLaunch._get_ControlParametersAvailable_metadata)

    _get_InitialAcceleration_metadata = { "name" : "InitialAcceleration",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def InitialAcceleration(self) -> float:
        """The initial acceleration, for the Quartic Motion Ascent Type. Uses Acceleration Dimension."""
        return self._intf.get_property(IAgVAMCSLaunch._metadata, IAgVAMCSLaunch._get_InitialAcceleration_metadata)

    _set_InitialAcceleration_metadata = { "name" : "InitialAcceleration",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @InitialAcceleration.setter
    def InitialAcceleration(self, newVal:float) -> None:
        return self._intf.set_property(IAgVAMCSLaunch._metadata, IAgVAMCSLaunch._set_InitialAcceleration_metadata, newVal)

    _get_SpacecraftParameters_metadata = { "name" : "SpacecraftParameters",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def SpacecraftParameters(self) -> "IAgVASpacecraftParameters":
        """Satellite Properties - the spacecraft's physical properties."""
        return self._intf.get_property(IAgVAMCSLaunch._metadata, IAgVAMCSLaunch._get_SpacecraftParameters_metadata)

    _get_FuelTank_metadata = { "name" : "FuelTank",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def FuelTank(self) -> "IAgVAFuelTank":
        """The spacecraft's fuel tank properties."""
        return self._intf.get_property(IAgVAMCSLaunch._metadata, IAgVAMCSLaunch._get_FuelTank_metadata)

    _get_DisplaySystemType_metadata = { "name" : "DisplaySystemType",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVALaunchDisplaySystem),) }
    @property
    def DisplaySystemType(self) -> "AgEVALaunchDisplaySystem":
        """The launch coordinate type."""
        return self._intf.get_property(IAgVAMCSLaunch._metadata, IAgVAMCSLaunch._get_DisplaySystemType_metadata)

    _SetDisplaySystemType_metadata = { "name" : "SetDisplaySystemType",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVALaunchDisplaySystem),) }
    def SetDisplaySystemType(self, displaySystemType:"AgEVALaunchDisplaySystem") -> None:
        """Sets the display system type."""
        return self._intf.invoke(IAgVAMCSLaunch._metadata, IAgVAMCSLaunch._SetDisplaySystemType_metadata, displaySystemType)

    _get_DisplaySystem_metadata = { "name" : "DisplaySystem",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def DisplaySystem(self) -> "IAgVADisplaySystem":
        """Gets the current Display System."""
        return self._intf.get_property(IAgVAMCSLaunch._metadata, IAgVAMCSLaunch._get_DisplaySystem_metadata)

    _get_AscentType_metadata = { "name" : "AscentType",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAAscentType),) }
    @property
    def AscentType(self) -> "AgEVAAscentType":
        """The order of the spline used to generate the motion along the ellipse."""
        return self._intf.get_property(IAgVAMCSLaunch._metadata, IAgVAMCSLaunch._get_AscentType_metadata)

    _set_AscentType_metadata = { "name" : "AscentType",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAAscentType),) }
    @AscentType.setter
    def AscentType(self, newVal:"AgEVAAscentType") -> None:
        return self._intf.set_property(IAgVAMCSLaunch._metadata, IAgVAMCSLaunch._set_AscentType_metadata, newVal)

    _get_TimeOfFlight_metadata = { "name" : "TimeOfFlight",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def TimeOfFlight(self) -> float:
        """The time of flight (the time from launch to burnout). Uses Time Dimension."""
        return self._intf.get_property(IAgVAMCSLaunch._metadata, IAgVAMCSLaunch._get_TimeOfFlight_metadata)

    _set_TimeOfFlight_metadata = { "name" : "TimeOfFlight",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @TimeOfFlight.setter
    def TimeOfFlight(self, newVal:float) -> None:
        return self._intf.set_property(IAgVAMCSLaunch._metadata, IAgVAMCSLaunch._set_TimeOfFlight_metadata, newVal)

    _get_BurnoutType_metadata = { "name" : "BurnoutType",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVABurnoutType),) }
    @property
    def BurnoutType(self) -> "AgEVABurnoutType":
        """The burnout type."""
        return self._intf.get_property(IAgVAMCSLaunch._metadata, IAgVAMCSLaunch._get_BurnoutType_metadata)

    _SetBurnoutType_metadata = { "name" : "SetBurnoutType",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVABurnoutType),) }
    def SetBurnoutType(self, burnoutType:"AgEVABurnoutType") -> None:
        """Sets the burnout type."""
        return self._intf.invoke(IAgVAMCSLaunch._metadata, IAgVAMCSLaunch._SetBurnoutType_metadata, burnoutType)

    _get_Burnout_metadata = { "name" : "Burnout",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def Burnout(self) -> "IAgVABurnout":
        """The burnout point definition."""
        return self._intf.get_property(IAgVAMCSLaunch._metadata, IAgVAMCSLaunch._get_Burnout_metadata)

    _get_BurnoutVelocity_metadata = { "name" : "BurnoutVelocity",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def BurnoutVelocity(self) -> "IAgVABurnoutVelocity":
        """The burnout velocity definition."""
        return self._intf.get_property(IAgVAMCSLaunch._metadata, IAgVAMCSLaunch._get_BurnoutVelocity_metadata)

    _get_UsePreviousSegmentState_metadata = { "name" : "UsePreviousSegmentState",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def UsePreviousSegmentState(self) -> bool:
        """If true, the previous segment state is used to define the launch location parameters."""
        return self._intf.get_property(IAgVAMCSLaunch._metadata, IAgVAMCSLaunch._get_UsePreviousSegmentState_metadata)

    _set_UsePreviousSegmentState_metadata = { "name" : "UsePreviousSegmentState",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @UsePreviousSegmentState.setter
    def UsePreviousSegmentState(self, newVal:bool) -> None:
        return self._intf.set_property(IAgVAMCSLaunch._metadata, IAgVAMCSLaunch._set_UsePreviousSegmentState_metadata, newVal)

    _get_SetMetEpoch_metadata = { "name" : "SetMetEpoch",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def SetMetEpoch(self) -> bool:
        """If true, the Mission Elapsed Time epoch will be set to the launch epoch."""
        return self._intf.get_property(IAgVAMCSLaunch._metadata, IAgVAMCSLaunch._get_SetMetEpoch_metadata)

    _set_SetMetEpoch_metadata = { "name" : "SetMetEpoch",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @SetMetEpoch.setter
    def SetMetEpoch(self, newVal:bool) -> None:
        return self._intf.set_property(IAgVAMCSLaunch._metadata, IAgVAMCSLaunch._set_SetMetEpoch_metadata, newVal)

    _get_UserVariables_metadata = { "name" : "UserVariables",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def UserVariables(self) -> "IAgVAUserVariableCollection":
        """Interface used to modify user variables for the launch segment."""
        return self._intf.get_property(IAgVAMCSLaunch._metadata, IAgVAMCSLaunch._get_UserVariables_metadata)


agcls.AgClassCatalog.add_catalog_entry("{C342C18C-80EF-4E1F-8363-90181B755E66}", IAgVAMCSLaunch)
agcls.AgTypeNameMap["IAgVAMCSLaunch"] = IAgVAMCSLaunch

class IAgVADisplaySystemGeodetic(IAgVADisplaySystem):
    """Properties for a geodetic launch coordinate system."""
    _num_methods = 6
    _vtable_offset = IAgVADisplaySystem._vtable_offset + IAgVADisplaySystem._num_methods
    _metadata = {
        "uuid" : "{3A9597F2-E224-44C9-801F-60CA7A1CB2A1}",
        "vtable_reference" : IAgVADisplaySystem._vtable_offset + IAgVADisplaySystem._num_methods - 1,
        "method_offsets" : { "get_Latitude" : 1,
                             "set_Latitude" : 2,
                             "get_Longitude" : 3,
                             "set_Longitude" : 4,
                             "get_Altitude" : 5,
                             "set_Altitude" : 6, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVADisplaySystemGeodetic._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVADisplaySystemGeodetic from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVADisplaySystem._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVADisplaySystemGeodetic.__dict__ and type(IAgVADisplaySystemGeodetic.__dict__[attrname]) == property:
            return IAgVADisplaySystemGeodetic.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            IAgVADisplaySystem.__setattr__(self, attrname, value)
    
    _get_Latitude_metadata = { "name" : "Latitude",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def Latitude(self) -> typing.Any:
        """The latitude of the launch location. Uses Angle Dimension."""
        return self._intf.get_property(IAgVADisplaySystemGeodetic._metadata, IAgVADisplaySystemGeodetic._get_Latitude_metadata)

    _set_Latitude_metadata = { "name" : "Latitude",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @Latitude.setter
    def Latitude(self, newVal:typing.Any) -> None:
        return self._intf.set_property(IAgVADisplaySystemGeodetic._metadata, IAgVADisplaySystemGeodetic._set_Latitude_metadata, newVal)

    _get_Longitude_metadata = { "name" : "Longitude",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def Longitude(self) -> typing.Any:
        """The longitude of the launch location. Uses Angle Dimension."""
        return self._intf.get_property(IAgVADisplaySystemGeodetic._metadata, IAgVADisplaySystemGeodetic._get_Longitude_metadata)

    _set_Longitude_metadata = { "name" : "Longitude",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @Longitude.setter
    def Longitude(self, newVal:typing.Any) -> None:
        return self._intf.set_property(IAgVADisplaySystemGeodetic._metadata, IAgVADisplaySystemGeodetic._set_Longitude_metadata, newVal)

    _get_Altitude_metadata = { "name" : "Altitude",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def Altitude(self) -> float:
        """The altitude of the launch location. Uses Distance Dimension."""
        return self._intf.get_property(IAgVADisplaySystemGeodetic._metadata, IAgVADisplaySystemGeodetic._get_Altitude_metadata)

    _set_Altitude_metadata = { "name" : "Altitude",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @Altitude.setter
    def Altitude(self, newVal:float) -> None:
        return self._intf.set_property(IAgVADisplaySystemGeodetic._metadata, IAgVADisplaySystemGeodetic._set_Altitude_metadata, newVal)


agcls.AgClassCatalog.add_catalog_entry("{3A9597F2-E224-44C9-801F-60CA7A1CB2A1}", IAgVADisplaySystemGeodetic)
agcls.AgTypeNameMap["IAgVADisplaySystemGeodetic"] = IAgVADisplaySystemGeodetic

class IAgVADisplaySystemGeocentric(IAgVADisplaySystem):
    """Properties for a geocentric launch coordinate system."""
    _num_methods = 6
    _vtable_offset = IAgVADisplaySystem._vtable_offset + IAgVADisplaySystem._num_methods
    _metadata = {
        "uuid" : "{FD9BAAFA-0CDC-481C-A76C-9F25698C468A}",
        "vtable_reference" : IAgVADisplaySystem._vtable_offset + IAgVADisplaySystem._num_methods - 1,
        "method_offsets" : { "get_Latitude" : 1,
                             "set_Latitude" : 2,
                             "get_Longitude" : 3,
                             "set_Longitude" : 4,
                             "get_Radius" : 5,
                             "set_Radius" : 6, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVADisplaySystemGeocentric._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVADisplaySystemGeocentric from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVADisplaySystem._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVADisplaySystemGeocentric.__dict__ and type(IAgVADisplaySystemGeocentric.__dict__[attrname]) == property:
            return IAgVADisplaySystemGeocentric.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            IAgVADisplaySystem.__setattr__(self, attrname, value)
    
    _get_Latitude_metadata = { "name" : "Latitude",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def Latitude(self) -> typing.Any:
        """The latitude of the launch location. Uses Angle Dimension."""
        return self._intf.get_property(IAgVADisplaySystemGeocentric._metadata, IAgVADisplaySystemGeocentric._get_Latitude_metadata)

    _set_Latitude_metadata = { "name" : "Latitude",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @Latitude.setter
    def Latitude(self, newVal:typing.Any) -> None:
        return self._intf.set_property(IAgVADisplaySystemGeocentric._metadata, IAgVADisplaySystemGeocentric._set_Latitude_metadata, newVal)

    _get_Longitude_metadata = { "name" : "Longitude",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def Longitude(self) -> typing.Any:
        """The longitude of the launch location. Uses Angle Dimension."""
        return self._intf.get_property(IAgVADisplaySystemGeocentric._metadata, IAgVADisplaySystemGeocentric._get_Longitude_metadata)

    _set_Longitude_metadata = { "name" : "Longitude",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @Longitude.setter
    def Longitude(self, newVal:typing.Any) -> None:
        return self._intf.set_property(IAgVADisplaySystemGeocentric._metadata, IAgVADisplaySystemGeocentric._set_Longitude_metadata, newVal)

    _get_Radius_metadata = { "name" : "Radius",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def Radius(self) -> float:
        """The radius of the launch location. Uses Distance Dimension."""
        return self._intf.get_property(IAgVADisplaySystemGeocentric._metadata, IAgVADisplaySystemGeocentric._get_Radius_metadata)

    _set_Radius_metadata = { "name" : "Radius",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @Radius.setter
    def Radius(self, newVal:float) -> None:
        return self._intf.set_property(IAgVADisplaySystemGeocentric._metadata, IAgVADisplaySystemGeocentric._set_Radius_metadata, newVal)


agcls.AgClassCatalog.add_catalog_entry("{FD9BAAFA-0CDC-481C-A76C-9F25698C468A}", IAgVADisplaySystemGeocentric)
agcls.AgTypeNameMap["IAgVADisplaySystemGeocentric"] = IAgVADisplaySystemGeocentric

class IAgVABurnoutCBFCartesian(IAgVABurnout):
    """Properties for a Cartesian CBF burnout state definition."""
    _num_methods = 12
    _vtable_offset = IAgVABurnout._vtable_offset + IAgVABurnout._num_methods
    _metadata = {
        "uuid" : "{A45DD94F-A384-4CCB-B803-F29F2DA41A39}",
        "vtable_reference" : IAgVABurnout._vtable_offset + IAgVABurnout._num_methods - 1,
        "method_offsets" : { "get_CartesianBurnoutX" : 1,
                             "set_CartesianBurnoutX" : 2,
                             "get_CartesianBurnoutY" : 3,
                             "set_CartesianBurnoutY" : 4,
                             "get_CartesianBurnoutZ" : 5,
                             "set_CartesianBurnoutZ" : 6,
                             "get_CartesianBurnoutVX" : 7,
                             "set_CartesianBurnoutVX" : 8,
                             "get_CartesianBurnoutVY" : 9,
                             "set_CartesianBurnoutVY" : 10,
                             "get_CartesianBurnoutVZ" : 11,
                             "set_CartesianBurnoutVZ" : 12, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVABurnoutCBFCartesian._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVABurnoutCBFCartesian from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVABurnout._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVABurnoutCBFCartesian.__dict__ and type(IAgVABurnoutCBFCartesian.__dict__[attrname]) == property:
            return IAgVABurnoutCBFCartesian.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            IAgVABurnout.__setattr__(self, attrname, value)
    
    _get_CartesianBurnoutX_metadata = { "name" : "CartesianBurnoutX",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def CartesianBurnoutX(self) -> float:
        """The CBF x component of the spacecraft burnout location. Uses Distance Dimension."""
        return self._intf.get_property(IAgVABurnoutCBFCartesian._metadata, IAgVABurnoutCBFCartesian._get_CartesianBurnoutX_metadata)

    _set_CartesianBurnoutX_metadata = { "name" : "CartesianBurnoutX",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @CartesianBurnoutX.setter
    def CartesianBurnoutX(self, newVal:float) -> None:
        return self._intf.set_property(IAgVABurnoutCBFCartesian._metadata, IAgVABurnoutCBFCartesian._set_CartesianBurnoutX_metadata, newVal)

    _get_CartesianBurnoutY_metadata = { "name" : "CartesianBurnoutY",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def CartesianBurnoutY(self) -> float:
        """The CBF y component of the spacecraft burnout location. Uses Distance Dimension."""
        return self._intf.get_property(IAgVABurnoutCBFCartesian._metadata, IAgVABurnoutCBFCartesian._get_CartesianBurnoutY_metadata)

    _set_CartesianBurnoutY_metadata = { "name" : "CartesianBurnoutY",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @CartesianBurnoutY.setter
    def CartesianBurnoutY(self, newVal:float) -> None:
        return self._intf.set_property(IAgVABurnoutCBFCartesian._metadata, IAgVABurnoutCBFCartesian._set_CartesianBurnoutY_metadata, newVal)

    _get_CartesianBurnoutZ_metadata = { "name" : "CartesianBurnoutZ",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def CartesianBurnoutZ(self) -> float:
        """The CBF z component of the spacecraft burnout location. Uses Distance Dimension."""
        return self._intf.get_property(IAgVABurnoutCBFCartesian._metadata, IAgVABurnoutCBFCartesian._get_CartesianBurnoutZ_metadata)

    _set_CartesianBurnoutZ_metadata = { "name" : "CartesianBurnoutZ",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @CartesianBurnoutZ.setter
    def CartesianBurnoutZ(self, newVal:float) -> None:
        return self._intf.set_property(IAgVABurnoutCBFCartesian._metadata, IAgVABurnoutCBFCartesian._set_CartesianBurnoutZ_metadata, newVal)

    _get_CartesianBurnoutVX_metadata = { "name" : "CartesianBurnoutVX",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def CartesianBurnoutVX(self) -> float:
        """The CBF x component of the spacecraft burnout velocity. Uses Rate Dimension."""
        return self._intf.get_property(IAgVABurnoutCBFCartesian._metadata, IAgVABurnoutCBFCartesian._get_CartesianBurnoutVX_metadata)

    _set_CartesianBurnoutVX_metadata = { "name" : "CartesianBurnoutVX",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @CartesianBurnoutVX.setter
    def CartesianBurnoutVX(self, newVal:float) -> None:
        return self._intf.set_property(IAgVABurnoutCBFCartesian._metadata, IAgVABurnoutCBFCartesian._set_CartesianBurnoutVX_metadata, newVal)

    _get_CartesianBurnoutVY_metadata = { "name" : "CartesianBurnoutVY",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def CartesianBurnoutVY(self) -> float:
        """The CBF y component of the spacecraft burnout velocity. Uses Rate Dimension."""
        return self._intf.get_property(IAgVABurnoutCBFCartesian._metadata, IAgVABurnoutCBFCartesian._get_CartesianBurnoutVY_metadata)

    _set_CartesianBurnoutVY_metadata = { "name" : "CartesianBurnoutVY",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @CartesianBurnoutVY.setter
    def CartesianBurnoutVY(self, newVal:float) -> None:
        return self._intf.set_property(IAgVABurnoutCBFCartesian._metadata, IAgVABurnoutCBFCartesian._set_CartesianBurnoutVY_metadata, newVal)

    _get_CartesianBurnoutVZ_metadata = { "name" : "CartesianBurnoutVZ",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def CartesianBurnoutVZ(self) -> float:
        """The CBF z component of the spacecraft burnout velocity. Uses Rate Dimension."""
        return self._intf.get_property(IAgVABurnoutCBFCartesian._metadata, IAgVABurnoutCBFCartesian._get_CartesianBurnoutVZ_metadata)

    _set_CartesianBurnoutVZ_metadata = { "name" : "CartesianBurnoutVZ",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @CartesianBurnoutVZ.setter
    def CartesianBurnoutVZ(self, newVal:float) -> None:
        return self._intf.set_property(IAgVABurnoutCBFCartesian._metadata, IAgVABurnoutCBFCartesian._set_CartesianBurnoutVZ_metadata, newVal)


agcls.AgClassCatalog.add_catalog_entry("{A45DD94F-A384-4CCB-B803-F29F2DA41A39}", IAgVABurnoutCBFCartesian)
agcls.AgTypeNameMap["IAgVABurnoutCBFCartesian"] = IAgVABurnoutCBFCartesian

class IAgVABurnoutGeodetic(IAgVABurnout):
    """Properties for a geodetic burnout point definition."""
    _num_methods = 6
    _vtable_offset = IAgVABurnout._vtable_offset + IAgVABurnout._num_methods
    _metadata = {
        "uuid" : "{CA74E0CB-01D7-4D65-BC0D-82A469B5E320}",
        "vtable_reference" : IAgVABurnout._vtable_offset + IAgVABurnout._num_methods - 1,
        "method_offsets" : { "get_Latitude" : 1,
                             "set_Latitude" : 2,
                             "get_Longitude" : 3,
                             "set_Longitude" : 4,
                             "get_Altitude" : 5,
                             "set_Altitude" : 6, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVABurnoutGeodetic._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVABurnoutGeodetic from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVABurnout._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVABurnoutGeodetic.__dict__ and type(IAgVABurnoutGeodetic.__dict__[attrname]) == property:
            return IAgVABurnoutGeodetic.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            IAgVABurnout.__setattr__(self, attrname, value)
    
    _get_Latitude_metadata = { "name" : "Latitude",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def Latitude(self) -> typing.Any:
        """The latitude of the spacecraft burnout. Uses Angle Dimension."""
        return self._intf.get_property(IAgVABurnoutGeodetic._metadata, IAgVABurnoutGeodetic._get_Latitude_metadata)

    _set_Latitude_metadata = { "name" : "Latitude",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @Latitude.setter
    def Latitude(self, newVal:typing.Any) -> None:
        return self._intf.set_property(IAgVABurnoutGeodetic._metadata, IAgVABurnoutGeodetic._set_Latitude_metadata, newVal)

    _get_Longitude_metadata = { "name" : "Longitude",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def Longitude(self) -> typing.Any:
        """The longitude of the spacecraft burnout. Uses Angle Dimension."""
        return self._intf.get_property(IAgVABurnoutGeodetic._metadata, IAgVABurnoutGeodetic._get_Longitude_metadata)

    _set_Longitude_metadata = { "name" : "Longitude",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @Longitude.setter
    def Longitude(self, newVal:typing.Any) -> None:
        return self._intf.set_property(IAgVABurnoutGeodetic._metadata, IAgVABurnoutGeodetic._set_Longitude_metadata, newVal)

    _get_Altitude_metadata = { "name" : "Altitude",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def Altitude(self) -> float:
        """The altitude of the spacecraft burnout. Uses Distance Dimension."""
        return self._intf.get_property(IAgVABurnoutGeodetic._metadata, IAgVABurnoutGeodetic._get_Altitude_metadata)

    _set_Altitude_metadata = { "name" : "Altitude",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @Altitude.setter
    def Altitude(self, newVal:float) -> None:
        return self._intf.set_property(IAgVABurnoutGeodetic._metadata, IAgVABurnoutGeodetic._set_Altitude_metadata, newVal)


agcls.AgClassCatalog.add_catalog_entry("{CA74E0CB-01D7-4D65-BC0D-82A469B5E320}", IAgVABurnoutGeodetic)
agcls.AgTypeNameMap["IAgVABurnoutGeodetic"] = IAgVABurnoutGeodetic

class IAgVABurnoutGeocentric(IAgVABurnout):
    """{Properties for a geocentric burnout point definition."""
    _num_methods = 6
    _vtable_offset = IAgVABurnout._vtable_offset + IAgVABurnout._num_methods
    _metadata = {
        "uuid" : "{BFFA4B30-4A19-4FF9-849D-E6DD6534116D}",
        "vtable_reference" : IAgVABurnout._vtable_offset + IAgVABurnout._num_methods - 1,
        "method_offsets" : { "get_Latitude" : 1,
                             "set_Latitude" : 2,
                             "get_Longitude" : 3,
                             "set_Longitude" : 4,
                             "get_Radius" : 5,
                             "set_Radius" : 6, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVABurnoutGeocentric._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVABurnoutGeocentric from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVABurnout._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVABurnoutGeocentric.__dict__ and type(IAgVABurnoutGeocentric.__dict__[attrname]) == property:
            return IAgVABurnoutGeocentric.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            IAgVABurnout.__setattr__(self, attrname, value)
    
    _get_Latitude_metadata = { "name" : "Latitude",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def Latitude(self) -> typing.Any:
        """The latitude of the spacecraft burnout. Uses Angle Dimension."""
        return self._intf.get_property(IAgVABurnoutGeocentric._metadata, IAgVABurnoutGeocentric._get_Latitude_metadata)

    _set_Latitude_metadata = { "name" : "Latitude",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @Latitude.setter
    def Latitude(self, newVal:typing.Any) -> None:
        return self._intf.set_property(IAgVABurnoutGeocentric._metadata, IAgVABurnoutGeocentric._set_Latitude_metadata, newVal)

    _get_Longitude_metadata = { "name" : "Longitude",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def Longitude(self) -> typing.Any:
        """The longitude of the spacecraft burnout. Uses Angle Dimension."""
        return self._intf.get_property(IAgVABurnoutGeocentric._metadata, IAgVABurnoutGeocentric._get_Longitude_metadata)

    _set_Longitude_metadata = { "name" : "Longitude",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @Longitude.setter
    def Longitude(self, newVal:typing.Any) -> None:
        return self._intf.set_property(IAgVABurnoutGeocentric._metadata, IAgVABurnoutGeocentric._set_Longitude_metadata, newVal)

    _get_Radius_metadata = { "name" : "Radius",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def Radius(self) -> float:
        """The radius of the spacecraft burnout. Uses Distance Dimension."""
        return self._intf.get_property(IAgVABurnoutGeocentric._metadata, IAgVABurnoutGeocentric._get_Radius_metadata)

    _set_Radius_metadata = { "name" : "Radius",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @Radius.setter
    def Radius(self, newVal:float) -> None:
        return self._intf.set_property(IAgVABurnoutGeocentric._metadata, IAgVABurnoutGeocentric._set_Radius_metadata, newVal)


agcls.AgClassCatalog.add_catalog_entry("{BFFA4B30-4A19-4FF9-849D-E6DD6534116D}", IAgVABurnoutGeocentric)
agcls.AgTypeNameMap["IAgVABurnoutGeocentric"] = IAgVABurnoutGeocentric

class IAgVABurnoutLaunchAzAlt(IAgVABurnout):
    """Properties for a launch azimuth / altitude burnout point definition."""
    _num_methods = 6
    _vtable_offset = IAgVABurnout._vtable_offset + IAgVABurnout._num_methods
    _metadata = {
        "uuid" : "{FCE8CBAF-46BE-4F76-AB1A-E2116127A402}",
        "vtable_reference" : IAgVABurnout._vtable_offset + IAgVABurnout._num_methods - 1,
        "method_offsets" : { "get_Azimuth" : 1,
                             "set_Azimuth" : 2,
                             "get_DownRangeDist" : 3,
                             "set_DownRangeDist" : 4,
                             "get_AltitudeRadius" : 5,
                             "set_AltitudeRadius" : 6, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVABurnoutLaunchAzAlt._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVABurnoutLaunchAzAlt from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVABurnout._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVABurnoutLaunchAzAlt.__dict__ and type(IAgVABurnoutLaunchAzAlt.__dict__[attrname]) == property:
            return IAgVABurnoutLaunchAzAlt.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            IAgVABurnout.__setattr__(self, attrname, value)
    
    _get_Azimuth_metadata = { "name" : "Azimuth",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def Azimuth(self) -> typing.Any:
        """The azimuth of the launch trajectory. Uses Angle Dimension."""
        return self._intf.get_property(IAgVABurnoutLaunchAzAlt._metadata, IAgVABurnoutLaunchAzAlt._get_Azimuth_metadata)

    _set_Azimuth_metadata = { "name" : "Azimuth",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @Azimuth.setter
    def Azimuth(self, newVal:typing.Any) -> None:
        return self._intf.set_property(IAgVABurnoutLaunchAzAlt._metadata, IAgVABurnoutLaunchAzAlt._set_Azimuth_metadata, newVal)

    _get_DownRangeDist_metadata = { "name" : "DownRangeDist",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def DownRangeDist(self) -> float:
        """The downrange distance of the spacecraft from launch at burnout. Uses Distance Dimension."""
        return self._intf.get_property(IAgVABurnoutLaunchAzAlt._metadata, IAgVABurnoutLaunchAzAlt._get_DownRangeDist_metadata)

    _set_DownRangeDist_metadata = { "name" : "DownRangeDist",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @DownRangeDist.setter
    def DownRangeDist(self, newVal:float) -> None:
        return self._intf.set_property(IAgVABurnoutLaunchAzAlt._metadata, IAgVABurnoutLaunchAzAlt._set_DownRangeDist_metadata, newVal)

    _get_AltitudeRadius_metadata = { "name" : "AltitudeRadius",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def AltitudeRadius(self) -> float:
        """The altitude of the spacecraft at burnout. Uses Distance Dimension."""
        return self._intf.get_property(IAgVABurnoutLaunchAzAlt._metadata, IAgVABurnoutLaunchAzAlt._get_AltitudeRadius_metadata)

    _set_AltitudeRadius_metadata = { "name" : "AltitudeRadius",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @AltitudeRadius.setter
    def AltitudeRadius(self, newVal:float) -> None:
        return self._intf.set_property(IAgVABurnoutLaunchAzAlt._metadata, IAgVABurnoutLaunchAzAlt._set_AltitudeRadius_metadata, newVal)


agcls.AgClassCatalog.add_catalog_entry("{FCE8CBAF-46BE-4F76-AB1A-E2116127A402}", IAgVABurnoutLaunchAzAlt)
agcls.AgTypeNameMap["IAgVABurnoutLaunchAzAlt"] = IAgVABurnoutLaunchAzAlt

class IAgVABurnoutLaunchAzRadius(IAgVABurnout):
    """Properties for a launch azimuth / radius burnout point definition."""
    _num_methods = 6
    _vtable_offset = IAgVABurnout._vtable_offset + IAgVABurnout._num_methods
    _metadata = {
        "uuid" : "{623DDE08-539E-4BAD-A63D-FCC195094F14}",
        "vtable_reference" : IAgVABurnout._vtable_offset + IAgVABurnout._num_methods - 1,
        "method_offsets" : { "get_Azimuth" : 1,
                             "set_Azimuth" : 2,
                             "get_DownRangeDist" : 3,
                             "set_DownRangeDist" : 4,
                             "get_Radius" : 5,
                             "set_Radius" : 6, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVABurnoutLaunchAzRadius._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVABurnoutLaunchAzRadius from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVABurnout._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVABurnoutLaunchAzRadius.__dict__ and type(IAgVABurnoutLaunchAzRadius.__dict__[attrname]) == property:
            return IAgVABurnoutLaunchAzRadius.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            IAgVABurnout.__setattr__(self, attrname, value)
    
    _get_Azimuth_metadata = { "name" : "Azimuth",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def Azimuth(self) -> typing.Any:
        """The azimuth of the launch trajectory. Uses Angle Dimension."""
        return self._intf.get_property(IAgVABurnoutLaunchAzRadius._metadata, IAgVABurnoutLaunchAzRadius._get_Azimuth_metadata)

    _set_Azimuth_metadata = { "name" : "Azimuth",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @Azimuth.setter
    def Azimuth(self, newVal:typing.Any) -> None:
        return self._intf.set_property(IAgVABurnoutLaunchAzRadius._metadata, IAgVABurnoutLaunchAzRadius._set_Azimuth_metadata, newVal)

    _get_DownRangeDist_metadata = { "name" : "DownRangeDist",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def DownRangeDist(self) -> float:
        """The downrange distance of the spacecraft from launch at burnout. Uses Distance Dimension."""
        return self._intf.get_property(IAgVABurnoutLaunchAzRadius._metadata, IAgVABurnoutLaunchAzRadius._get_DownRangeDist_metadata)

    _set_DownRangeDist_metadata = { "name" : "DownRangeDist",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @DownRangeDist.setter
    def DownRangeDist(self, newVal:float) -> None:
        return self._intf.set_property(IAgVABurnoutLaunchAzRadius._metadata, IAgVABurnoutLaunchAzRadius._set_DownRangeDist_metadata, newVal)

    _get_Radius_metadata = { "name" : "Radius",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def Radius(self) -> float:
        """The radius of the spacecraft at burnout. Uses Distance Dimension."""
        return self._intf.get_property(IAgVABurnoutLaunchAzRadius._metadata, IAgVABurnoutLaunchAzRadius._get_Radius_metadata)

    _set_Radius_metadata = { "name" : "Radius",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @Radius.setter
    def Radius(self, newVal:float) -> None:
        return self._intf.set_property(IAgVABurnoutLaunchAzRadius._metadata, IAgVABurnoutLaunchAzRadius._set_Radius_metadata, newVal)


agcls.AgClassCatalog.add_catalog_entry("{623DDE08-539E-4BAD-A63D-FCC195094F14}", IAgVABurnoutLaunchAzRadius)
agcls.AgTypeNameMap["IAgVABurnoutLaunchAzRadius"] = IAgVABurnoutLaunchAzRadius

class IAgVAMCSFollow(object):
    """Properties for a Follow segment."""
    _num_methods = 22
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{88C0BA74-B2B8-4B69-85B5-94B6CC7DEACE}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_Leader" : 1,
                             "get_XOffset" : 2,
                             "set_XOffset" : 3,
                             "get_YOffset" : 4,
                             "set_YOffset" : 5,
                             "get_ZOffset" : 6,
                             "set_ZOffset" : 7,
                             "get_SeparationConditions" : 8,
                             "get_SpacecraftParameters" : 9,
                             "get_FuelTank" : 10,
                             "get_JoiningType" : 11,
                             "set_JoiningType" : 12,
                             "get_SeparationType" : 13,
                             "set_SeparationType" : 14,
                             "get_SpacecraftAndFuelTankType" : 15,
                             "set_SpacecraftAndFuelTankType" : 16,
                             "get_JoiningConditions" : 17,
                             "EnableControlParameter" : 18,
                             "DisableControlParameter" : 19,
                             "IsControlParameterEnabled" : 20,
                             "get_ControlParametersAvailable" : 21,
                             "get_UserVariables" : 22, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAMCSFollow._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAMCSFollow from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAMCSFollow.__dict__ and type(IAgVAMCSFollow.__dict__[attrname]) == property:
            return IAgVAMCSFollow.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAMCSFollow.")
    
    _get_Leader_metadata = { "name" : "Leader",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def Leader(self) -> "IAgLinkToObject":
        """The leader object."""
        return self._intf.get_property(IAgVAMCSFollow._metadata, IAgVAMCSFollow._get_Leader_metadata)

    _get_XOffset_metadata = { "name" : "XOffset",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def XOffset(self) -> float:
        """The distance that the spacecraft will be offset from the leader's body frame along the X axis. Uses Distance Dimension."""
        return self._intf.get_property(IAgVAMCSFollow._metadata, IAgVAMCSFollow._get_XOffset_metadata)

    _set_XOffset_metadata = { "name" : "XOffset",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @XOffset.setter
    def XOffset(self, newVal:float) -> None:
        return self._intf.set_property(IAgVAMCSFollow._metadata, IAgVAMCSFollow._set_XOffset_metadata, newVal)

    _get_YOffset_metadata = { "name" : "YOffset",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def YOffset(self) -> float:
        """The distance that the spacecraft will be offset from the leader's body frame along the Y axis. Uses Distance Dimension."""
        return self._intf.get_property(IAgVAMCSFollow._metadata, IAgVAMCSFollow._get_YOffset_metadata)

    _set_YOffset_metadata = { "name" : "YOffset",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @YOffset.setter
    def YOffset(self, newVal:float) -> None:
        return self._intf.set_property(IAgVAMCSFollow._metadata, IAgVAMCSFollow._set_YOffset_metadata, newVal)

    _get_ZOffset_metadata = { "name" : "ZOffset",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def ZOffset(self) -> float:
        """The distance that the spacecraft will be offset from the leader's body frame along the Z axis. Uses Distance Dimension."""
        return self._intf.get_property(IAgVAMCSFollow._metadata, IAgVAMCSFollow._get_ZOffset_metadata)

    _set_ZOffset_metadata = { "name" : "ZOffset",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @ZOffset.setter
    def ZOffset(self, newVal:float) -> None:
        return self._intf.set_property(IAgVAMCSFollow._metadata, IAgVAMCSFollow._set_ZOffset_metadata, newVal)

    _get_SeparationConditions_metadata = { "name" : "SeparationConditions",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def SeparationConditions(self) -> "IAgVAStoppingConditionCollection":
        """If separation conditions are specified, the list of separation conditions."""
        return self._intf.get_property(IAgVAMCSFollow._metadata, IAgVAMCSFollow._get_SeparationConditions_metadata)

    _get_SpacecraftParameters_metadata = { "name" : "SpacecraftParameters",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def SpacecraftParameters(self) -> "IAgVASpacecraftParameters":
        """The spacecraft's physical properties."""
        return self._intf.get_property(IAgVAMCSFollow._metadata, IAgVAMCSFollow._get_SpacecraftParameters_metadata)

    _get_FuelTank_metadata = { "name" : "FuelTank",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def FuelTank(self) -> "IAgVAFuelTank":
        """The spacecraft's fuel tank properties."""
        return self._intf.get_property(IAgVAMCSFollow._metadata, IAgVAMCSFollow._get_FuelTank_metadata)

    _get_JoiningType_metadata = { "name" : "JoiningType",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAFollowJoin),) }
    @property
    def JoiningType(self) -> "AgEVAFollowJoin":
        """The joining type."""
        return self._intf.get_property(IAgVAMCSFollow._metadata, IAgVAMCSFollow._get_JoiningType_metadata)

    _set_JoiningType_metadata = { "name" : "JoiningType",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAFollowJoin),) }
    @JoiningType.setter
    def JoiningType(self, newVal:"AgEVAFollowJoin") -> None:
        return self._intf.set_property(IAgVAMCSFollow._metadata, IAgVAMCSFollow._set_JoiningType_metadata, newVal)

    _get_SeparationType_metadata = { "name" : "SeparationType",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAFollowSeparation),) }
    @property
    def SeparationType(self) -> "AgEVAFollowSeparation":
        """The separation type."""
        return self._intf.get_property(IAgVAMCSFollow._metadata, IAgVAMCSFollow._get_SeparationType_metadata)

    _set_SeparationType_metadata = { "name" : "SeparationType",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAFollowSeparation),) }
    @SeparationType.setter
    def SeparationType(self, newVal:"AgEVAFollowSeparation") -> None:
        return self._intf.set_property(IAgVAMCSFollow._metadata, IAgVAMCSFollow._set_SeparationType_metadata, newVal)

    _get_SpacecraftAndFuelTankType_metadata = { "name" : "SpacecraftAndFuelTankType",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAFollowSpacecraftAndFuelTank),) }
    @property
    def SpacecraftAndFuelTankType(self) -> "AgEVAFollowSpacecraftAndFuelTank":
        """The spacecraft snd fuel tank configuration type."""
        return self._intf.get_property(IAgVAMCSFollow._metadata, IAgVAMCSFollow._get_SpacecraftAndFuelTankType_metadata)

    _set_SpacecraftAndFuelTankType_metadata = { "name" : "SpacecraftAndFuelTankType",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAFollowSpacecraftAndFuelTank),) }
    @SpacecraftAndFuelTankType.setter
    def SpacecraftAndFuelTankType(self, newVal:"AgEVAFollowSpacecraftAndFuelTank") -> None:
        return self._intf.set_property(IAgVAMCSFollow._metadata, IAgVAMCSFollow._set_SpacecraftAndFuelTankType_metadata, newVal)

    _get_JoiningConditions_metadata = { "name" : "JoiningConditions",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def JoiningConditions(self) -> "IAgVAStoppingConditionCollection":
        """If joining conditions are specified, the list of joining conditions."""
        return self._intf.get_property(IAgVAMCSFollow._metadata, IAgVAMCSFollow._get_JoiningConditions_metadata)

    _EnableControlParameter_metadata = { "name" : "EnableControlParameter",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAControlFollow),) }
    def EnableControlParameter(self, param:"AgEVAControlFollow") -> None:
        """Enables the specified control parameter."""
        return self._intf.invoke(IAgVAMCSFollow._metadata, IAgVAMCSFollow._EnableControlParameter_metadata, param)

    _DisableControlParameter_metadata = { "name" : "DisableControlParameter",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAControlFollow),) }
    def DisableControlParameter(self, param:"AgEVAControlFollow") -> None:
        """Disables the specified control parameter."""
        return self._intf.invoke(IAgVAMCSFollow._metadata, IAgVAMCSFollow._DisableControlParameter_metadata, param)

    _IsControlParameterEnabled_metadata = { "name" : "IsControlParameterEnabled",
            "arg_types" : (agcom.LONG, POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAControlFollow), agmarshall.VARIANT_BOOL_arg,) }
    def IsControlParameterEnabled(self, param:"AgEVAControlFollow") -> bool:
        """Sees if the specified control is enabled."""
        return self._intf.invoke(IAgVAMCSFollow._metadata, IAgVAMCSFollow._IsControlParameterEnabled_metadata, param, out_arg())

    _get_ControlParametersAvailable_metadata = { "name" : "ControlParametersAvailable",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def ControlParametersAvailable(self) -> bool:
        """Returns whether or not the control parameters can be set."""
        return self._intf.get_property(IAgVAMCSFollow._metadata, IAgVAMCSFollow._get_ControlParametersAvailable_metadata)

    _get_UserVariables_metadata = { "name" : "UserVariables",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def UserVariables(self) -> "IAgVAUserVariableCollection":
        """Interface used to modify user variables for the follow segment."""
        return self._intf.get_property(IAgVAMCSFollow._metadata, IAgVAMCSFollow._get_UserVariables_metadata)


agcls.AgClassCatalog.add_catalog_entry("{88C0BA74-B2B8-4B69-85B5-94B6CC7DEACE}", IAgVAMCSFollow)
agcls.AgTypeNameMap["IAgVAMCSFollow"] = IAgVAMCSFollow

class IAgVAMCSManeuver(object):
    """General properties for a Maneuver segment."""
    _num_methods = 7
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{B640A28E-36A1-4934-ABC6-1A74C1A1B9E5}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_ManeuverType" : 1,
                             "SetManeuverType" : 2,
                             "get_Maneuver" : 3,
                             "EnableControlParameter" : 4,
                             "DisableControlParameter" : 5,
                             "IsControlParameterEnabled" : 6,
                             "get_ControlParametersAvailable" : 7, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAMCSManeuver._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAMCSManeuver from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAMCSManeuver.__dict__ and type(IAgVAMCSManeuver.__dict__[attrname]) == property:
            return IAgVAMCSManeuver.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAMCSManeuver.")
    
    _get_ManeuverType_metadata = { "name" : "ManeuverType",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAManeuverType),) }
    @property
    def ManeuverType(self) -> "AgEVAManeuverType":
        """The maneuver type."""
        return self._intf.get_property(IAgVAMCSManeuver._metadata, IAgVAMCSManeuver._get_ManeuverType_metadata)

    _SetManeuverType_metadata = { "name" : "SetManeuverType",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAManeuverType),) }
    def SetManeuverType(self, maneuverType:"AgEVAManeuverType") -> None:
        """Sets the maneuver type"""
        return self._intf.invoke(IAgVAMCSManeuver._metadata, IAgVAMCSManeuver._SetManeuverType_metadata, maneuverType)

    _get_Maneuver_metadata = { "name" : "Maneuver",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def Maneuver(self) -> "IAgVAManeuver":
        """The Maneuver properties."""
        return self._intf.get_property(IAgVAMCSManeuver._metadata, IAgVAMCSManeuver._get_Maneuver_metadata)

    _EnableControlParameter_metadata = { "name" : "EnableControlParameter",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAControlManeuver),) }
    def EnableControlParameter(self, param:"AgEVAControlManeuver") -> None:
        """Enables the specified control parameter."""
        return self._intf.invoke(IAgVAMCSManeuver._metadata, IAgVAMCSManeuver._EnableControlParameter_metadata, param)

    _DisableControlParameter_metadata = { "name" : "DisableControlParameter",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAControlManeuver),) }
    def DisableControlParameter(self, param:"AgEVAControlManeuver") -> None:
        """Disables the specified control parameter."""
        return self._intf.invoke(IAgVAMCSManeuver._metadata, IAgVAMCSManeuver._DisableControlParameter_metadata, param)

    _IsControlParameterEnabled_metadata = { "name" : "IsControlParameterEnabled",
            "arg_types" : (agcom.LONG, POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAControlManeuver), agmarshall.VARIANT_BOOL_arg,) }
    def IsControlParameterEnabled(self, param:"AgEVAControlManeuver") -> bool:
        """Sees if the specified control is enabled."""
        return self._intf.invoke(IAgVAMCSManeuver._metadata, IAgVAMCSManeuver._IsControlParameterEnabled_metadata, param, out_arg())

    _get_ControlParametersAvailable_metadata = { "name" : "ControlParametersAvailable",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def ControlParametersAvailable(self) -> bool:
        """Returns whether or not the control parameters can be set."""
        return self._intf.get_property(IAgVAMCSManeuver._metadata, IAgVAMCSManeuver._get_ControlParametersAvailable_metadata)


agcls.AgClassCatalog.add_catalog_entry("{B640A28E-36A1-4934-ABC6-1A74C1A1B9E5}", IAgVAMCSManeuver)
agcls.AgTypeNameMap["IAgVAMCSManeuver"] = IAgVAMCSManeuver

class IAgVAManeuverFinite(IAgVAManeuver):
    """Engine properties for a Finite Maneuver."""
    _num_methods = 7
    _vtable_offset = IAgVAManeuver._vtable_offset + IAgVAManeuver._num_methods
    _metadata = {
        "uuid" : "{2BE095B5-A674-4868-9178-6ADB00753CBF}",
        "vtable_reference" : IAgVAManeuver._vtable_offset + IAgVAManeuver._num_methods - 1,
        "method_offsets" : { "get_PressureMode" : 1,
                             "set_PressureMode" : 2,
                             "get_ThrustEfficiency" : 3,
                             "set_ThrustEfficiency" : 4,
                             "get_ThrustEfficiencyMode" : 5,
                             "set_ThrustEfficiencyMode" : 6,
                             "get_Propagator" : 7, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAManeuverFinite._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAManeuverFinite from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAManeuver._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAManeuverFinite.__dict__ and type(IAgVAManeuverFinite.__dict__[attrname]) == property:
            return IAgVAManeuverFinite.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            IAgVAManeuver.__setattr__(self, attrname, value)
    
    _get_PressureMode_metadata = { "name" : "PressureMode",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAPressureMode),) }
    @property
    def PressureMode(self) -> "AgEVAPressureMode":
        """The pressure mode."""
        return self._intf.get_property(IAgVAManeuverFinite._metadata, IAgVAManeuverFinite._get_PressureMode_metadata)

    _set_PressureMode_metadata = { "name" : "PressureMode",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAPressureMode),) }
    @PressureMode.setter
    def PressureMode(self, newVal:"AgEVAPressureMode") -> None:
        return self._intf.set_property(IAgVAManeuverFinite._metadata, IAgVAManeuverFinite._set_PressureMode_metadata, newVal)

    _get_ThrustEfficiency_metadata = { "name" : "ThrustEfficiency",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def ThrustEfficiency(self) -> float:
        """The thrust efficiency value. Any number above zero is valid, with typical values around 0.98 to 1.02. Dimensionless."""
        return self._intf.get_property(IAgVAManeuverFinite._metadata, IAgVAManeuverFinite._get_ThrustEfficiency_metadata)

    _set_ThrustEfficiency_metadata = { "name" : "ThrustEfficiency",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @ThrustEfficiency.setter
    def ThrustEfficiency(self, newVal:float) -> None:
        return self._intf.set_property(IAgVAManeuverFinite._metadata, IAgVAManeuverFinite._set_ThrustEfficiency_metadata, newVal)

    _get_ThrustEfficiencyMode_metadata = { "name" : "ThrustEfficiencyMode",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAThrustType),) }
    @property
    def ThrustEfficiencyMode(self) -> "AgEVAThrustType":
        """Thrust - the calculations that are effected by the thrust efficiency value."""
        return self._intf.get_property(IAgVAManeuverFinite._metadata, IAgVAManeuverFinite._get_ThrustEfficiencyMode_metadata)

    _set_ThrustEfficiencyMode_metadata = { "name" : "ThrustEfficiencyMode",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAThrustType),) }
    @ThrustEfficiencyMode.setter
    def ThrustEfficiencyMode(self, newVal:"AgEVAThrustType") -> None:
        return self._intf.set_property(IAgVAManeuverFinite._metadata, IAgVAManeuverFinite._set_ThrustEfficiencyMode_metadata, newVal)

    _get_Propagator_metadata = { "name" : "Propagator",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def Propagator(self) -> "IAgVAManeuverFinitePropagator":
        """The propagator."""
        return self._intf.get_property(IAgVAManeuverFinite._metadata, IAgVAManeuverFinite._get_Propagator_metadata)


agcls.AgClassCatalog.add_catalog_entry("{2BE095B5-A674-4868-9178-6ADB00753CBF}", IAgVAManeuverFinite)
agcls.AgTypeNameMap["IAgVAManeuverFinite"] = IAgVAManeuverFinite

class IAgVAManeuverImpulsive(IAgVAManeuver):
    """Properties for an Impulsive Maneuver."""
    _num_methods = 2
    _vtable_offset = IAgVAManeuver._vtable_offset + IAgVAManeuver._num_methods
    _metadata = {
        "uuid" : "{41595314-A798-41ED-80DD-0DA873CCF8A0}",
        "vtable_reference" : IAgVAManeuver._vtable_offset + IAgVAManeuver._num_methods - 1,
        "method_offsets" : { "get_UpdateMass" : 1,
                             "set_UpdateMass" : 2, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAManeuverImpulsive._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAManeuverImpulsive from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAManeuver._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAManeuverImpulsive.__dict__ and type(IAgVAManeuverImpulsive.__dict__[attrname]) == property:
            return IAgVAManeuverImpulsive.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            IAgVAManeuver.__setattr__(self, attrname, value)
    
    _get_UpdateMass_metadata = { "name" : "UpdateMass",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def UpdateMass(self) -> bool:
        """True if the mass of the spacecraft will be updated on the basis of fuel usage."""
        return self._intf.get_property(IAgVAManeuverImpulsive._metadata, IAgVAManeuverImpulsive._get_UpdateMass_metadata)

    _set_UpdateMass_metadata = { "name" : "UpdateMass",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @UpdateMass.setter
    def UpdateMass(self, pVal:bool) -> None:
        return self._intf.set_property(IAgVAManeuverImpulsive._metadata, IAgVAManeuverImpulsive._set_UpdateMass_metadata, pVal)


agcls.AgClassCatalog.add_catalog_entry("{41595314-A798-41ED-80DD-0DA873CCF8A0}", IAgVAManeuverImpulsive)
agcls.AgTypeNameMap["IAgVAManeuverImpulsive"] = IAgVAManeuverImpulsive

class IAgVAAttitudeControlImpulsiveVelocityVector(IAgVAAttitudeControlImpulsive):
    """Properties for the Velocity Vector attitude control for an Impulsive Maneuver."""
    _num_methods = 3
    _vtable_offset = IAgVAAttitudeControlImpulsive._vtable_offset + IAgVAAttitudeControlImpulsive._num_methods
    _metadata = {
        "uuid" : "{EF098B53-D99D-4AB6-A227-DED98E48B4DB}",
        "vtable_reference" : IAgVAAttitudeControlImpulsive._vtable_offset + IAgVAAttitudeControlImpulsive._num_methods - 1,
        "method_offsets" : { "get_DeltaVMagnitude" : 1,
                             "set_DeltaVMagnitude" : 2,
                             "get_BodyConstraintVector" : 3, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAAttitudeControlImpulsiveVelocityVector._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAAttitudeControlImpulsiveVelocityVector from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAAttitudeControlImpulsive._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAAttitudeControlImpulsiveVelocityVector.__dict__ and type(IAgVAAttitudeControlImpulsiveVelocityVector.__dict__[attrname]) == property:
            return IAgVAAttitudeControlImpulsiveVelocityVector.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            IAgVAAttitudeControlImpulsive.__setattr__(self, attrname, value)
    
    _get_DeltaVMagnitude_metadata = { "name" : "DeltaVMagnitude",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def DeltaVMagnitude(self) -> float:
        """The size of the delta-V to be applied to the orbit along the velocity vector. Uses Rate Dimension."""
        return self._intf.get_property(IAgVAAttitudeControlImpulsiveVelocityVector._metadata, IAgVAAttitudeControlImpulsiveVelocityVector._get_DeltaVMagnitude_metadata)

    _set_DeltaVMagnitude_metadata = { "name" : "DeltaVMagnitude",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @DeltaVMagnitude.setter
    def DeltaVMagnitude(self, newVal:float) -> None:
        return self._intf.set_property(IAgVAAttitudeControlImpulsiveVelocityVector._metadata, IAgVAAttitudeControlImpulsiveVelocityVector._set_DeltaVMagnitude_metadata, newVal)

    _get_BodyConstraintVector_metadata = { "name" : "BodyConstraintVector",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def BodyConstraintVector(self) -> "IAgDirection":
        """Defines a constraint vector in spacecraft body coordinates to complete the attitude definition."""
        return self._intf.get_property(IAgVAAttitudeControlImpulsiveVelocityVector._metadata, IAgVAAttitudeControlImpulsiveVelocityVector._get_BodyConstraintVector_metadata)


agcls.AgClassCatalog.add_catalog_entry("{EF098B53-D99D-4AB6-A227-DED98E48B4DB}", IAgVAAttitudeControlImpulsiveVelocityVector)
agcls.AgTypeNameMap["IAgVAAttitudeControlImpulsiveVelocityVector"] = IAgVAAttitudeControlImpulsiveVelocityVector

class IAgVAAttitudeControlImpulsiveAntiVelocityVector(IAgVAAttitudeControlImpulsive):
    """Properties for the Anti-Velocity Vector attitude control for an Impulsive Maneuver."""
    _num_methods = 3
    _vtable_offset = IAgVAAttitudeControlImpulsive._vtable_offset + IAgVAAttitudeControlImpulsive._num_methods
    _metadata = {
        "uuid" : "{711B2692-73A2-4C08-9AF3-CC1F93317DF2}",
        "vtable_reference" : IAgVAAttitudeControlImpulsive._vtable_offset + IAgVAAttitudeControlImpulsive._num_methods - 1,
        "method_offsets" : { "get_DeltaVMagnitude" : 1,
                             "set_DeltaVMagnitude" : 2,
                             "get_BodyConstraintVector" : 3, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAAttitudeControlImpulsiveAntiVelocityVector._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAAttitudeControlImpulsiveAntiVelocityVector from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAAttitudeControlImpulsive._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAAttitudeControlImpulsiveAntiVelocityVector.__dict__ and type(IAgVAAttitudeControlImpulsiveAntiVelocityVector.__dict__[attrname]) == property:
            return IAgVAAttitudeControlImpulsiveAntiVelocityVector.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            IAgVAAttitudeControlImpulsive.__setattr__(self, attrname, value)
    
    _get_DeltaVMagnitude_metadata = { "name" : "DeltaVMagnitude",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def DeltaVMagnitude(self) -> float:
        """The size of the delta-V to be applied to the orbit along the velocity vector. Uses Rate Dimension."""
        return self._intf.get_property(IAgVAAttitudeControlImpulsiveAntiVelocityVector._metadata, IAgVAAttitudeControlImpulsiveAntiVelocityVector._get_DeltaVMagnitude_metadata)

    _set_DeltaVMagnitude_metadata = { "name" : "DeltaVMagnitude",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @DeltaVMagnitude.setter
    def DeltaVMagnitude(self, newVal:float) -> None:
        return self._intf.set_property(IAgVAAttitudeControlImpulsiveAntiVelocityVector._metadata, IAgVAAttitudeControlImpulsiveAntiVelocityVector._set_DeltaVMagnitude_metadata, newVal)

    _get_BodyConstraintVector_metadata = { "name" : "BodyConstraintVector",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def BodyConstraintVector(self) -> "IAgDirection":
        """Defines a constraint vector in spacecraft body coordinates to complete the attitude definition."""
        return self._intf.get_property(IAgVAAttitudeControlImpulsiveAntiVelocityVector._metadata, IAgVAAttitudeControlImpulsiveAntiVelocityVector._get_BodyConstraintVector_metadata)


agcls.AgClassCatalog.add_catalog_entry("{711B2692-73A2-4C08-9AF3-CC1F93317DF2}", IAgVAAttitudeControlImpulsiveAntiVelocityVector)
agcls.AgTypeNameMap["IAgVAAttitudeControlImpulsiveAntiVelocityVector"] = IAgVAAttitudeControlImpulsiveAntiVelocityVector

class IAgVAAttitudeControlImpulsiveAttitude(IAgVAAttitudeControlImpulsive):
    """Properties for the Attitude attitude control for an Impulsive Maneuver."""
    _num_methods = 5
    _vtable_offset = IAgVAAttitudeControlImpulsive._vtable_offset + IAgVAAttitudeControlImpulsive._num_methods
    _metadata = {
        "uuid" : "{D9334B8B-9016-4F73-A134-0C61C91060E1}",
        "vtable_reference" : IAgVAAttitudeControlImpulsive._vtable_offset + IAgVAAttitudeControlImpulsive._num_methods - 1,
        "method_offsets" : { "get_DeltaVMagnitude" : 1,
                             "set_DeltaVMagnitude" : 2,
                             "get_RefAxesName" : 3,
                             "set_RefAxesName" : 4,
                             "get_Orientation" : 5, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAAttitudeControlImpulsiveAttitude._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAAttitudeControlImpulsiveAttitude from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAAttitudeControlImpulsive._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAAttitudeControlImpulsiveAttitude.__dict__ and type(IAgVAAttitudeControlImpulsiveAttitude.__dict__[attrname]) == property:
            return IAgVAAttitudeControlImpulsiveAttitude.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            IAgVAAttitudeControlImpulsive.__setattr__(self, attrname, value)
    
    _get_DeltaVMagnitude_metadata = { "name" : "DeltaVMagnitude",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def DeltaVMagnitude(self) -> float:
        """The size of the delta-V to be applied along the X axis - as defined by the selected axes and rotation. Uses Rate Dimension."""
        return self._intf.get_property(IAgVAAttitudeControlImpulsiveAttitude._metadata, IAgVAAttitudeControlImpulsiveAttitude._get_DeltaVMagnitude_metadata)

    _set_DeltaVMagnitude_metadata = { "name" : "DeltaVMagnitude",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @DeltaVMagnitude.setter
    def DeltaVMagnitude(self, newVal:float) -> None:
        return self._intf.set_property(IAgVAAttitudeControlImpulsiveAttitude._metadata, IAgVAAttitudeControlImpulsiveAttitude._set_DeltaVMagnitude_metadata, newVal)

    _get_RefAxesName_metadata = { "name" : "RefAxesName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def RefAxesName(self) -> str:
        """Ref Axes - the reference axes to be used in modeling this maneuver."""
        return self._intf.get_property(IAgVAAttitudeControlImpulsiveAttitude._metadata, IAgVAAttitudeControlImpulsiveAttitude._get_RefAxesName_metadata)

    _set_RefAxesName_metadata = { "name" : "RefAxesName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @RefAxesName.setter
    def RefAxesName(self, newVal:str) -> None:
        return self._intf.set_property(IAgVAAttitudeControlImpulsiveAttitude._metadata, IAgVAAttitudeControlImpulsiveAttitude._set_RefAxesName_metadata, newVal)

    _get_Orientation_metadata = { "name" : "Orientation",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def Orientation(self) -> "IAgOrientation":
        """The orientation of the attitude."""
        return self._intf.get_property(IAgVAAttitudeControlImpulsiveAttitude._metadata, IAgVAAttitudeControlImpulsiveAttitude._get_Orientation_metadata)


agcls.AgClassCatalog.add_catalog_entry("{D9334B8B-9016-4F73-A134-0C61C91060E1}", IAgVAAttitudeControlImpulsiveAttitude)
agcls.AgTypeNameMap["IAgVAAttitudeControlImpulsiveAttitude"] = IAgVAAttitudeControlImpulsiveAttitude

class IAgVAAttitudeControlImpulsiveFile(IAgVAAttitudeControlImpulsive):
    """Properties for the File attitude control for an Impulsive Maneuver."""
    _num_methods = 7
    _vtable_offset = IAgVAAttitudeControlImpulsive._vtable_offset + IAgVAAttitudeControlImpulsive._num_methods
    _metadata = {
        "uuid" : "{24B73A06-3F9E-4409-AE5E-00504C6A2AD7}",
        "vtable_reference" : IAgVAAttitudeControlImpulsive._vtable_offset + IAgVAAttitudeControlImpulsive._num_methods - 1,
        "method_offsets" : { "get_DeltaVMagnitude" : 1,
                             "set_DeltaVMagnitude" : 2,
                             "get_Filename" : 3,
                             "set_Filename" : 4,
                             "get_FileTimeOffset" : 5,
                             "set_FileTimeOffset" : 6,
                             "get_FullFilename" : 7, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAAttitudeControlImpulsiveFile._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAAttitudeControlImpulsiveFile from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAAttitudeControlImpulsive._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAAttitudeControlImpulsiveFile.__dict__ and type(IAgVAAttitudeControlImpulsiveFile.__dict__[attrname]) == property:
            return IAgVAAttitudeControlImpulsiveFile.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            IAgVAAttitudeControlImpulsive.__setattr__(self, attrname, value)
    
    _get_DeltaVMagnitude_metadata = { "name" : "DeltaVMagnitude",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def DeltaVMagnitude(self) -> float:
        """The size of the delta-V to be applied to the orbit along the specified direction. Uses Rate Dimension."""
        return self._intf.get_property(IAgVAAttitudeControlImpulsiveFile._metadata, IAgVAAttitudeControlImpulsiveFile._get_DeltaVMagnitude_metadata)

    _set_DeltaVMagnitude_metadata = { "name" : "DeltaVMagnitude",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @DeltaVMagnitude.setter
    def DeltaVMagnitude(self, newVal:float) -> None:
        return self._intf.set_property(IAgVAAttitudeControlImpulsiveFile._metadata, IAgVAAttitudeControlImpulsiveFile._set_DeltaVMagnitude_metadata, newVal)

    _get_Filename_metadata = { "name" : "Filename",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def Filename(self) -> str:
        """The attitude file to use."""
        return self._intf.get_property(IAgVAAttitudeControlImpulsiveFile._metadata, IAgVAAttitudeControlImpulsiveFile._get_Filename_metadata)

    _set_Filename_metadata = { "name" : "Filename",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @Filename.setter
    def Filename(self, newVal:str) -> None:
        return self._intf.set_property(IAgVAAttitudeControlImpulsiveFile._metadata, IAgVAAttitudeControlImpulsiveFile._set_Filename_metadata, newVal)

    _get_FileTimeOffset_metadata = { "name" : "FileTimeOffset",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def FileTimeOffset(self) -> float:
        """The time offset can be used to adjust the time stored in the attitude file. Dimensionless."""
        return self._intf.get_property(IAgVAAttitudeControlImpulsiveFile._metadata, IAgVAAttitudeControlImpulsiveFile._get_FileTimeOffset_metadata)

    _set_FileTimeOffset_metadata = { "name" : "FileTimeOffset",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @FileTimeOffset.setter
    def FileTimeOffset(self, newVal:float) -> None:
        return self._intf.set_property(IAgVAAttitudeControlImpulsiveFile._metadata, IAgVAAttitudeControlImpulsiveFile._set_FileTimeOffset_metadata, newVal)

    _get_FullFilename_metadata = { "name" : "FullFilename",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def FullFilename(self) -> str:
        """The full path and name of the attitude file to use."""
        return self._intf.get_property(IAgVAAttitudeControlImpulsiveFile._metadata, IAgVAAttitudeControlImpulsiveFile._get_FullFilename_metadata)


agcls.AgClassCatalog.add_catalog_entry("{24B73A06-3F9E-4409-AE5E-00504C6A2AD7}", IAgVAAttitudeControlImpulsiveFile)
agcls.AgTypeNameMap["IAgVAAttitudeControlImpulsiveFile"] = IAgVAAttitudeControlImpulsiveFile

class IAgVAAttitudeControlImpulsiveThrustVector(IAgVAAttitudeControlImpulsive):
    """Properties for the Thrust Vector attitude control for an Impulsive Maneuver."""
    _num_methods = 23
    _vtable_offset = IAgVAAttitudeControlImpulsive._vtable_offset + IAgVAAttitudeControlImpulsive._num_methods
    _metadata = {
        "uuid" : "{3C985D0B-4049-4C5E-81BC-E394CCE17787}",
        "vtable_reference" : IAgVAAttitudeControlImpulsive._vtable_offset + IAgVAAttitudeControlImpulsive._num_methods - 1,
        "method_offsets" : { "get_ThrustAxesName" : 1,
                             "set_ThrustAxesName" : 2,
                             "get_BodyConstraintVector" : 3,
                             "get_AllowNegativeSphericalMagnitude" : 4,
                             "set_AllowNegativeSphericalMagnitude" : 5,
                             "get_CoordType" : 6,
                             "set_CoordType" : 7,
                             "get_X" : 8,
                             "set_X" : 9,
                             "get_Y" : 10,
                             "set_Y" : 11,
                             "get_Z" : 12,
                             "set_Z" : 13,
                             "get_Azimuth" : 14,
                             "set_Azimuth" : 15,
                             "get_Elevation" : 16,
                             "set_Elevation" : 17,
                             "get_Magnitude" : 18,
                             "set_Magnitude" : 19,
                             "AssignCartesian" : 20,
                             "QueryCartesian" : 21,
                             "AssignSpherical" : 22,
                             "QuerySpherical" : 23, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAAttitudeControlImpulsiveThrustVector._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAAttitudeControlImpulsiveThrustVector from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAAttitudeControlImpulsive._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAAttitudeControlImpulsiveThrustVector.__dict__ and type(IAgVAAttitudeControlImpulsiveThrustVector.__dict__[attrname]) == property:
            return IAgVAAttitudeControlImpulsiveThrustVector.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            IAgVAAttitudeControlImpulsive.__setattr__(self, attrname, value)
    
    _get_ThrustAxesName_metadata = { "name" : "ThrustAxesName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def ThrustAxesName(self) -> str:
        """The thrust axes."""
        return self._intf.get_property(IAgVAAttitudeControlImpulsiveThrustVector._metadata, IAgVAAttitudeControlImpulsiveThrustVector._get_ThrustAxesName_metadata)

    _set_ThrustAxesName_metadata = { "name" : "ThrustAxesName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @ThrustAxesName.setter
    def ThrustAxesName(self, newVal:str) -> None:
        return self._intf.set_property(IAgVAAttitudeControlImpulsiveThrustVector._metadata, IAgVAAttitudeControlImpulsiveThrustVector._set_ThrustAxesName_metadata, newVal)

    _get_BodyConstraintVector_metadata = { "name" : "BodyConstraintVector",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def BodyConstraintVector(self) -> "IAgDirection":
        """Defines a constraint vector in spacecraft body coordinates to complete the attitude definition."""
        return self._intf.get_property(IAgVAAttitudeControlImpulsiveThrustVector._metadata, IAgVAAttitudeControlImpulsiveThrustVector._get_BodyConstraintVector_metadata)

    _get_AllowNegativeSphericalMagnitude_metadata = { "name" : "AllowNegativeSphericalMagnitude",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def AllowNegativeSphericalMagnitude(self) -> bool:
        """True if the spherical magnitude should be allowed to be less than zero."""
        return self._intf.get_property(IAgVAAttitudeControlImpulsiveThrustVector._metadata, IAgVAAttitudeControlImpulsiveThrustVector._get_AllowNegativeSphericalMagnitude_metadata)

    _set_AllowNegativeSphericalMagnitude_metadata = { "name" : "AllowNegativeSphericalMagnitude",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @AllowNegativeSphericalMagnitude.setter
    def AllowNegativeSphericalMagnitude(self, newVal:bool) -> None:
        return self._intf.set_property(IAgVAAttitudeControlImpulsiveThrustVector._metadata, IAgVAAttitudeControlImpulsiveThrustVector._set_AllowNegativeSphericalMagnitude_metadata, newVal)

    _get_CoordType_metadata = { "name" : "CoordType",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAImpDeltaVRep),) }
    @property
    def CoordType(self) -> "AgEVAImpDeltaVRep":
        """The coordinate representation for the DeltaV."""
        return self._intf.get_property(IAgVAAttitudeControlImpulsiveThrustVector._metadata, IAgVAAttitudeControlImpulsiveThrustVector._get_CoordType_metadata)

    _set_CoordType_metadata = { "name" : "CoordType",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAImpDeltaVRep),) }
    @CoordType.setter
    def CoordType(self, newVal:"AgEVAImpDeltaVRep") -> None:
        return self._intf.set_property(IAgVAAttitudeControlImpulsiveThrustVector._metadata, IAgVAAttitudeControlImpulsiveThrustVector._set_CoordType_metadata, newVal)

    _get_X_metadata = { "name" : "X",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def X(self) -> float:
        """The Cartesian X component of the impulsive DeltaV (dimension: SmallDistance/Time)."""
        return self._intf.get_property(IAgVAAttitudeControlImpulsiveThrustVector._metadata, IAgVAAttitudeControlImpulsiveThrustVector._get_X_metadata)

    _set_X_metadata = { "name" : "X",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @X.setter
    def X(self, newVal:float) -> None:
        return self._intf.set_property(IAgVAAttitudeControlImpulsiveThrustVector._metadata, IAgVAAttitudeControlImpulsiveThrustVector._set_X_metadata, newVal)

    _get_Y_metadata = { "name" : "Y",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def Y(self) -> float:
        """The Cartesian Y component of the impulsive DeltaV (dimension: SmallDistance/Time)."""
        return self._intf.get_property(IAgVAAttitudeControlImpulsiveThrustVector._metadata, IAgVAAttitudeControlImpulsiveThrustVector._get_Y_metadata)

    _set_Y_metadata = { "name" : "Y",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @Y.setter
    def Y(self, newVal:float) -> None:
        return self._intf.set_property(IAgVAAttitudeControlImpulsiveThrustVector._metadata, IAgVAAttitudeControlImpulsiveThrustVector._set_Y_metadata, newVal)

    _get_Z_metadata = { "name" : "Z",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def Z(self) -> float:
        """The Cartesian Z component of the impulsive DeltaV (dimension: SmallDistance/Time)."""
        return self._intf.get_property(IAgVAAttitudeControlImpulsiveThrustVector._metadata, IAgVAAttitudeControlImpulsiveThrustVector._get_Z_metadata)

    _set_Z_metadata = { "name" : "Z",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @Z.setter
    def Z(self, newVal:float) -> None:
        return self._intf.set_property(IAgVAAttitudeControlImpulsiveThrustVector._metadata, IAgVAAttitudeControlImpulsiveThrustVector._set_Z_metadata, newVal)

    _get_Azimuth_metadata = { "name" : "Azimuth",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def Azimuth(self) -> typing.Any:
        """The spherical Azimuth angle of the impulsive DeltaV (dimension: Angle)."""
        return self._intf.get_property(IAgVAAttitudeControlImpulsiveThrustVector._metadata, IAgVAAttitudeControlImpulsiveThrustVector._get_Azimuth_metadata)

    _set_Azimuth_metadata = { "name" : "Azimuth",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @Azimuth.setter
    def Azimuth(self, newVal:typing.Any) -> None:
        return self._intf.set_property(IAgVAAttitudeControlImpulsiveThrustVector._metadata, IAgVAAttitudeControlImpulsiveThrustVector._set_Azimuth_metadata, newVal)

    _get_Elevation_metadata = { "name" : "Elevation",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def Elevation(self) -> typing.Any:
        """The spherical Elevation angle of the impulsive DeltaV (dimension: Angle)."""
        return self._intf.get_property(IAgVAAttitudeControlImpulsiveThrustVector._metadata, IAgVAAttitudeControlImpulsiveThrustVector._get_Elevation_metadata)

    _set_Elevation_metadata = { "name" : "Elevation",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @Elevation.setter
    def Elevation(self, newVal:typing.Any) -> None:
        return self._intf.set_property(IAgVAAttitudeControlImpulsiveThrustVector._metadata, IAgVAAttitudeControlImpulsiveThrustVector._set_Elevation_metadata, newVal)

    _get_Magnitude_metadata = { "name" : "Magnitude",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def Magnitude(self) -> float:
        """The spherical Magnitude of the impulsive DeltaV (dimension: SmallDistance/Time)."""
        return self._intf.get_property(IAgVAAttitudeControlImpulsiveThrustVector._metadata, IAgVAAttitudeControlImpulsiveThrustVector._get_Magnitude_metadata)

    _set_Magnitude_metadata = { "name" : "Magnitude",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @Magnitude.setter
    def Magnitude(self, newVal:float) -> None:
        return self._intf.set_property(IAgVAAttitudeControlImpulsiveThrustVector._metadata, IAgVAAttitudeControlImpulsiveThrustVector._set_Magnitude_metadata, newVal)

    _AssignCartesian_metadata = { "name" : "AssignCartesian",
            "arg_types" : (agcom.DOUBLE, agcom.DOUBLE, agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg,) }
    def AssignCartesian(self, xVal:float, yVal:float, zVal:float) -> None:
        """Assign all three Cartesian components of the DeltaV vector (dimension: SmallDistance/Time)"""
        return self._intf.invoke(IAgVAAttitudeControlImpulsiveThrustVector._metadata, IAgVAAttitudeControlImpulsiveThrustVector._AssignCartesian_metadata, xVal, yVal, zVal)

    _QueryCartesian_metadata = { "name" : "QueryCartesian",
            "arg_types" : (POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg,) }
    def QueryCartesian(self) -> list:
        """Get all three Cartesian components of the DeltaV vector as an array (dimension: SmallDistance/Time)"""
        return self._intf.invoke(IAgVAAttitudeControlImpulsiveThrustVector._metadata, IAgVAAttitudeControlImpulsiveThrustVector._QueryCartesian_metadata, out_arg())

    _AssignSpherical_metadata = { "name" : "AssignSpherical",
            "arg_types" : (agcom.VARIANT, agcom.VARIANT, agcom.DOUBLE,),
            "marshallers" : (agmarshall.VARIANT_arg, agmarshall.VARIANT_arg, agmarshall.DOUBLE_arg,) }
    def AssignSpherical(self, azVal:typing.Any, elVal:typing.Any, magVal:float) -> None:
        """Assign all three spherical components of the DeltaV vector (order Az, El, Mag; dimensions: Angle, Angle, SmallDistance/Time)"""
        return self._intf.invoke(IAgVAAttitudeControlImpulsiveThrustVector._metadata, IAgVAAttitudeControlImpulsiveThrustVector._AssignSpherical_metadata, azVal, elVal, magVal)

    _QuerySpherical_metadata = { "name" : "QuerySpherical",
            "arg_types" : (POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg,) }
    def QuerySpherical(self) -> list:
        """Get all three spherical components of the DeltaV vector as an array (order Az, El, Mag; dimensions: Angle, Angle, SmallDistance/Time)"""
        return self._intf.invoke(IAgVAAttitudeControlImpulsiveThrustVector._metadata, IAgVAAttitudeControlImpulsiveThrustVector._QuerySpherical_metadata, out_arg())


agcls.AgClassCatalog.add_catalog_entry("{3C985D0B-4049-4C5E-81BC-E394CCE17787}", IAgVAAttitudeControlImpulsiveThrustVector)
agcls.AgTypeNameMap["IAgVAAttitudeControlImpulsiveThrustVector"] = IAgVAAttitudeControlImpulsiveThrustVector

class IAgVAAttitudeControlFiniteAntiVelocityVector(IAgVAAttitudeControlFinite):
    """Properties for the Anti-Velocity Vector attitude control for a Finite Maneuver."""
    _num_methods = 3
    _vtable_offset = IAgVAAttitudeControlFinite._vtable_offset + IAgVAAttitudeControlFinite._num_methods
    _metadata = {
        "uuid" : "{DB9276FA-2033-425D-9453-A0862C3DC715}",
        "vtable_reference" : IAgVAAttitudeControlFinite._vtable_offset + IAgVAAttitudeControlFinite._num_methods - 1,
        "method_offsets" : { "get_AttitudeUpdate" : 1,
                             "set_AttitudeUpdate" : 2,
                             "get_BodyConstraintVector" : 3, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAAttitudeControlFiniteAntiVelocityVector._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAAttitudeControlFiniteAntiVelocityVector from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAAttitudeControlFinite._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAAttitudeControlFiniteAntiVelocityVector.__dict__ and type(IAgVAAttitudeControlFiniteAntiVelocityVector.__dict__[attrname]) == property:
            return IAgVAAttitudeControlFiniteAntiVelocityVector.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            IAgVAAttitudeControlFinite.__setattr__(self, attrname, value)
    
    _get_AttitudeUpdate_metadata = { "name" : "AttitudeUpdate",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAAttitudeUpdate),) }
    @property
    def AttitudeUpdate(self) -> "AgEVAAttitudeUpdate":
        """How and when the attitude will be updated."""
        return self._intf.get_property(IAgVAAttitudeControlFiniteAntiVelocityVector._metadata, IAgVAAttitudeControlFiniteAntiVelocityVector._get_AttitudeUpdate_metadata)

    _set_AttitudeUpdate_metadata = { "name" : "AttitudeUpdate",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAAttitudeUpdate),) }
    @AttitudeUpdate.setter
    def AttitudeUpdate(self, newVal:"AgEVAAttitudeUpdate") -> None:
        return self._intf.set_property(IAgVAAttitudeControlFiniteAntiVelocityVector._metadata, IAgVAAttitudeControlFiniteAntiVelocityVector._set_AttitudeUpdate_metadata, newVal)

    _get_BodyConstraintVector_metadata = { "name" : "BodyConstraintVector",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def BodyConstraintVector(self) -> "IAgDirection":
        """Defines a constraint vector in spacecraft body coordinates to complete the attitude definition."""
        return self._intf.get_property(IAgVAAttitudeControlFiniteAntiVelocityVector._metadata, IAgVAAttitudeControlFiniteAntiVelocityVector._get_BodyConstraintVector_metadata)


agcls.AgClassCatalog.add_catalog_entry("{DB9276FA-2033-425D-9453-A0862C3DC715}", IAgVAAttitudeControlFiniteAntiVelocityVector)
agcls.AgTypeNameMap["IAgVAAttitudeControlFiniteAntiVelocityVector"] = IAgVAAttitudeControlFiniteAntiVelocityVector

class IAgVAAttitudeControlFiniteAttitude(IAgVAAttitudeControlFinite):
    """Properties for the Attitude attitude control for a Finite Maneuver."""
    _num_methods = 5
    _vtable_offset = IAgVAAttitudeControlFinite._vtable_offset + IAgVAAttitudeControlFinite._num_methods
    _metadata = {
        "uuid" : "{BE7E2121-2A2E-4045-BE6F-E75256FDD287}",
        "vtable_reference" : IAgVAAttitudeControlFinite._vtable_offset + IAgVAAttitudeControlFinite._num_methods - 1,
        "method_offsets" : { "get_AttitudeUpdate" : 1,
                             "set_AttitudeUpdate" : 2,
                             "get_RefAxesName" : 3,
                             "set_RefAxesName" : 4,
                             "get_Orientation" : 5, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAAttitudeControlFiniteAttitude._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAAttitudeControlFiniteAttitude from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAAttitudeControlFinite._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAAttitudeControlFiniteAttitude.__dict__ and type(IAgVAAttitudeControlFiniteAttitude.__dict__[attrname]) == property:
            return IAgVAAttitudeControlFiniteAttitude.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            IAgVAAttitudeControlFinite.__setattr__(self, attrname, value)
    
    _get_AttitudeUpdate_metadata = { "name" : "AttitudeUpdate",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAAttitudeUpdate),) }
    @property
    def AttitudeUpdate(self) -> "AgEVAAttitudeUpdate":
        """How and when the attitude will be updated."""
        return self._intf.get_property(IAgVAAttitudeControlFiniteAttitude._metadata, IAgVAAttitudeControlFiniteAttitude._get_AttitudeUpdate_metadata)

    _set_AttitudeUpdate_metadata = { "name" : "AttitudeUpdate",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAAttitudeUpdate),) }
    @AttitudeUpdate.setter
    def AttitudeUpdate(self, newVal:"AgEVAAttitudeUpdate") -> None:
        return self._intf.set_property(IAgVAAttitudeControlFiniteAttitude._metadata, IAgVAAttitudeControlFiniteAttitude._set_AttitudeUpdate_metadata, newVal)

    _get_RefAxesName_metadata = { "name" : "RefAxesName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def RefAxesName(self) -> str:
        """Ref Axes - the reference axes to be used in modeling this maneuver."""
        return self._intf.get_property(IAgVAAttitudeControlFiniteAttitude._metadata, IAgVAAttitudeControlFiniteAttitude._get_RefAxesName_metadata)

    _set_RefAxesName_metadata = { "name" : "RefAxesName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @RefAxesName.setter
    def RefAxesName(self, newVal:str) -> None:
        return self._intf.set_property(IAgVAAttitudeControlFiniteAttitude._metadata, IAgVAAttitudeControlFiniteAttitude._set_RefAxesName_metadata, newVal)

    _get_Orientation_metadata = { "name" : "Orientation",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def Orientation(self) -> "IAgOrientation":
        """The orientation of the attitude."""
        return self._intf.get_property(IAgVAAttitudeControlFiniteAttitude._metadata, IAgVAAttitudeControlFiniteAttitude._get_Orientation_metadata)


agcls.AgClassCatalog.add_catalog_entry("{BE7E2121-2A2E-4045-BE6F-E75256FDD287}", IAgVAAttitudeControlFiniteAttitude)
agcls.AgTypeNameMap["IAgVAAttitudeControlFiniteAttitude"] = IAgVAAttitudeControlFiniteAttitude

class IAgVAAttitudeControlFiniteFile(IAgVAAttitudeControlFinite):
    """Properties for the File attitude control for a Finite Maneuver."""
    _num_methods = 5
    _vtable_offset = IAgVAAttitudeControlFinite._vtable_offset + IAgVAAttitudeControlFinite._num_methods
    _metadata = {
        "uuid" : "{B2B44C74-C8D0-4AE0-A259-F73CD60AEC97}",
        "vtable_reference" : IAgVAAttitudeControlFinite._vtable_offset + IAgVAAttitudeControlFinite._num_methods - 1,
        "method_offsets" : { "get_Filename" : 1,
                             "set_Filename" : 2,
                             "get_FileTimeOffset" : 3,
                             "set_FileTimeOffset" : 4,
                             "get_FullFilename" : 5, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAAttitudeControlFiniteFile._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAAttitudeControlFiniteFile from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAAttitudeControlFinite._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAAttitudeControlFiniteFile.__dict__ and type(IAgVAAttitudeControlFiniteFile.__dict__[attrname]) == property:
            return IAgVAAttitudeControlFiniteFile.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            IAgVAAttitudeControlFinite.__setattr__(self, attrname, value)
    
    _get_Filename_metadata = { "name" : "Filename",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def Filename(self) -> str:
        """The attitude file to use."""
        return self._intf.get_property(IAgVAAttitudeControlFiniteFile._metadata, IAgVAAttitudeControlFiniteFile._get_Filename_metadata)

    _set_Filename_metadata = { "name" : "Filename",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @Filename.setter
    def Filename(self, newVal:str) -> None:
        return self._intf.set_property(IAgVAAttitudeControlFiniteFile._metadata, IAgVAAttitudeControlFiniteFile._set_Filename_metadata, newVal)

    _get_FileTimeOffset_metadata = { "name" : "FileTimeOffset",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def FileTimeOffset(self) -> float:
        """The time offset can be used to adjust the time stored in the attitude file. Dimensionless."""
        return self._intf.get_property(IAgVAAttitudeControlFiniteFile._metadata, IAgVAAttitudeControlFiniteFile._get_FileTimeOffset_metadata)

    _set_FileTimeOffset_metadata = { "name" : "FileTimeOffset",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @FileTimeOffset.setter
    def FileTimeOffset(self, newVal:float) -> None:
        return self._intf.set_property(IAgVAAttitudeControlFiniteFile._metadata, IAgVAAttitudeControlFiniteFile._set_FileTimeOffset_metadata, newVal)

    _get_FullFilename_metadata = { "name" : "FullFilename",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def FullFilename(self) -> str:
        """The full path and name of the attitude file to use."""
        return self._intf.get_property(IAgVAAttitudeControlFiniteFile._metadata, IAgVAAttitudeControlFiniteFile._get_FullFilename_metadata)


agcls.AgClassCatalog.add_catalog_entry("{B2B44C74-C8D0-4AE0-A259-F73CD60AEC97}", IAgVAAttitudeControlFiniteFile)
agcls.AgTypeNameMap["IAgVAAttitudeControlFiniteFile"] = IAgVAAttitudeControlFiniteFile

class IAgVAAttitudeControlFiniteThrustVector(IAgVAAttitudeControlFinite):
    """Properties for the Thrust Vector attitude control for a Finite Maneuver."""
    _num_methods = 6
    _vtable_offset = IAgVAAttitudeControlFinite._vtable_offset + IAgVAAttitudeControlFinite._num_methods
    _metadata = {
        "uuid" : "{5928D05A-399E-4773-A934-23E9B9EEF39E}",
        "vtable_reference" : IAgVAAttitudeControlFinite._vtable_offset + IAgVAAttitudeControlFinite._num_methods - 1,
        "method_offsets" : { "get_AttitudeUpdate" : 1,
                             "set_AttitudeUpdate" : 2,
                             "get_ThrustAxesName" : 3,
                             "set_ThrustAxesName" : 4,
                             "get_BodyConstraintVector" : 5,
                             "get_ThrustVector" : 6, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAAttitudeControlFiniteThrustVector._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAAttitudeControlFiniteThrustVector from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAAttitudeControlFinite._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAAttitudeControlFiniteThrustVector.__dict__ and type(IAgVAAttitudeControlFiniteThrustVector.__dict__[attrname]) == property:
            return IAgVAAttitudeControlFiniteThrustVector.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            IAgVAAttitudeControlFinite.__setattr__(self, attrname, value)
    
    _get_AttitudeUpdate_metadata = { "name" : "AttitudeUpdate",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAAttitudeUpdate),) }
    @property
    def AttitudeUpdate(self) -> "AgEVAAttitudeUpdate":
        """How and when the attitude will be updated."""
        return self._intf.get_property(IAgVAAttitudeControlFiniteThrustVector._metadata, IAgVAAttitudeControlFiniteThrustVector._get_AttitudeUpdate_metadata)

    _set_AttitudeUpdate_metadata = { "name" : "AttitudeUpdate",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAAttitudeUpdate),) }
    @AttitudeUpdate.setter
    def AttitudeUpdate(self, newVal:"AgEVAAttitudeUpdate") -> None:
        return self._intf.set_property(IAgVAAttitudeControlFiniteThrustVector._metadata, IAgVAAttitudeControlFiniteThrustVector._set_AttitudeUpdate_metadata, newVal)

    _get_ThrustAxesName_metadata = { "name" : "ThrustAxesName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def ThrustAxesName(self) -> str:
        """The thrust axes."""
        return self._intf.get_property(IAgVAAttitudeControlFiniteThrustVector._metadata, IAgVAAttitudeControlFiniteThrustVector._get_ThrustAxesName_metadata)

    _set_ThrustAxesName_metadata = { "name" : "ThrustAxesName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @ThrustAxesName.setter
    def ThrustAxesName(self, newVal:str) -> None:
        return self._intf.set_property(IAgVAAttitudeControlFiniteThrustVector._metadata, IAgVAAttitudeControlFiniteThrustVector._set_ThrustAxesName_metadata, newVal)

    _get_BodyConstraintVector_metadata = { "name" : "BodyConstraintVector",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def BodyConstraintVector(self) -> "IAgDirection":
        """Defines a constraint vector in spacecraft body coordinates to complete the attitude definition."""
        return self._intf.get_property(IAgVAAttitudeControlFiniteThrustVector._metadata, IAgVAAttitudeControlFiniteThrustVector._get_BodyConstraintVector_metadata)

    _get_ThrustVector_metadata = { "name" : "ThrustVector",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def ThrustVector(self) -> "IAgDirection":
        """Defines the thrust vector in the reference axes."""
        return self._intf.get_property(IAgVAAttitudeControlFiniteThrustVector._metadata, IAgVAAttitudeControlFiniteThrustVector._get_ThrustVector_metadata)


agcls.AgClassCatalog.add_catalog_entry("{5928D05A-399E-4773-A934-23E9B9EEF39E}", IAgVAAttitudeControlFiniteThrustVector)
agcls.AgTypeNameMap["IAgVAAttitudeControlFiniteThrustVector"] = IAgVAAttitudeControlFiniteThrustVector

class IAgVAAttitudeControlFiniteTimeVarying(IAgVAAttitudeControlFinite):
    """Properties for the Time Varying attitude control for a Finite Maneuver."""
    _num_methods = 35
    _vtable_offset = IAgVAAttitudeControlFinite._vtable_offset + IAgVAAttitudeControlFinite._num_methods
    _metadata = {
        "uuid" : "{52E48F6D-0FD1-4E30-9398-DCCA988454CE}",
        "vtable_reference" : IAgVAAttitudeControlFinite._vtable_offset + IAgVAAttitudeControlFinite._num_methods - 1,
        "method_offsets" : { "get_ThrustAxesName" : 1,
                             "set_ThrustAxesName" : 2,
                             "get_BodyConstraintVector" : 3,
                             "get_Az0" : 4,
                             "set_Az0" : 5,
                             "get_Az1" : 6,
                             "set_Az1" : 7,
                             "get_Az2" : 8,
                             "set_Az2" : 9,
                             "get_Az3" : 10,
                             "set_Az3" : 11,
                             "get_Az4" : 12,
                             "set_Az4" : 13,
                             "get_AzA" : 14,
                             "set_AzA" : 15,
                             "get_AzF" : 16,
                             "set_AzF" : 17,
                             "get_AzP" : 18,
                             "set_AzP" : 19,
                             "get_El0" : 20,
                             "set_El0" : 21,
                             "get_El1" : 22,
                             "set_El1" : 23,
                             "get_El2" : 24,
                             "set_El2" : 25,
                             "get_El3" : 26,
                             "set_El3" : 27,
                             "get_El4" : 28,
                             "set_El4" : 29,
                             "get_ElA" : 30,
                             "set_ElA" : 31,
                             "get_ElF" : 32,
                             "set_ElF" : 33,
                             "get_ElP" : 34,
                             "set_ElP" : 35, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAAttitudeControlFiniteTimeVarying._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAAttitudeControlFiniteTimeVarying from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAAttitudeControlFinite._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAAttitudeControlFiniteTimeVarying.__dict__ and type(IAgVAAttitudeControlFiniteTimeVarying.__dict__[attrname]) == property:
            return IAgVAAttitudeControlFiniteTimeVarying.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            IAgVAAttitudeControlFinite.__setattr__(self, attrname, value)
    
    _get_ThrustAxesName_metadata = { "name" : "ThrustAxesName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def ThrustAxesName(self) -> str:
        """The thrust axes."""
        return self._intf.get_property(IAgVAAttitudeControlFiniteTimeVarying._metadata, IAgVAAttitudeControlFiniteTimeVarying._get_ThrustAxesName_metadata)

    _set_ThrustAxesName_metadata = { "name" : "ThrustAxesName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @ThrustAxesName.setter
    def ThrustAxesName(self, newVal:str) -> None:
        return self._intf.set_property(IAgVAAttitudeControlFiniteTimeVarying._metadata, IAgVAAttitudeControlFiniteTimeVarying._set_ThrustAxesName_metadata, newVal)

    _get_BodyConstraintVector_metadata = { "name" : "BodyConstraintVector",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def BodyConstraintVector(self) -> "IAgDirection":
        """Defines a constraint vector in spacecraft body coordinates to complete the attitude definition."""
        return self._intf.get_property(IAgVAAttitudeControlFiniteTimeVarying._metadata, IAgVAAttitudeControlFiniteTimeVarying._get_BodyConstraintVector_metadata)

    _get_Az0_metadata = { "name" : "Az0",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def Az0(self) -> float:
        """Azimuth constant term (dimension: angle)"""
        return self._intf.get_property(IAgVAAttitudeControlFiniteTimeVarying._metadata, IAgVAAttitudeControlFiniteTimeVarying._get_Az0_metadata)

    _set_Az0_metadata = { "name" : "Az0",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @Az0.setter
    def Az0(self, pVal:float) -> None:
        return self._intf.set_property(IAgVAAttitudeControlFiniteTimeVarying._metadata, IAgVAAttitudeControlFiniteTimeVarying._set_Az0_metadata, pVal)

    _get_Az1_metadata = { "name" : "Az1",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def Az1(self) -> float:
        """Azimuth linear term (dimension: angle/time)"""
        return self._intf.get_property(IAgVAAttitudeControlFiniteTimeVarying._metadata, IAgVAAttitudeControlFiniteTimeVarying._get_Az1_metadata)

    _set_Az1_metadata = { "name" : "Az1",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @Az1.setter
    def Az1(self, pVal:float) -> None:
        return self._intf.set_property(IAgVAAttitudeControlFiniteTimeVarying._metadata, IAgVAAttitudeControlFiniteTimeVarying._set_Az1_metadata, pVal)

    _get_Az2_metadata = { "name" : "Az2",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def Az2(self) -> float:
        """Azimuth quadratic term (dimension: angle/time^2)"""
        return self._intf.get_property(IAgVAAttitudeControlFiniteTimeVarying._metadata, IAgVAAttitudeControlFiniteTimeVarying._get_Az2_metadata)

    _set_Az2_metadata = { "name" : "Az2",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @Az2.setter
    def Az2(self, pVal:float) -> None:
        return self._intf.set_property(IAgVAAttitudeControlFiniteTimeVarying._metadata, IAgVAAttitudeControlFiniteTimeVarying._set_Az2_metadata, pVal)

    _get_Az3_metadata = { "name" : "Az3",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def Az3(self) -> float:
        """Azimuth cubic term (dimension: angle/time^3)"""
        return self._intf.get_property(IAgVAAttitudeControlFiniteTimeVarying._metadata, IAgVAAttitudeControlFiniteTimeVarying._get_Az3_metadata)

    _set_Az3_metadata = { "name" : "Az3",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @Az3.setter
    def Az3(self, pVal:float) -> None:
        return self._intf.set_property(IAgVAAttitudeControlFiniteTimeVarying._metadata, IAgVAAttitudeControlFiniteTimeVarying._set_Az3_metadata, pVal)

    _get_Az4_metadata = { "name" : "Az4",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def Az4(self) -> float:
        """Azimuth quartic term (dimension: angle/time^4)"""
        return self._intf.get_property(IAgVAAttitudeControlFiniteTimeVarying._metadata, IAgVAAttitudeControlFiniteTimeVarying._get_Az4_metadata)

    _set_Az4_metadata = { "name" : "Az4",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @Az4.setter
    def Az4(self, pVal:float) -> None:
        return self._intf.set_property(IAgVAAttitudeControlFiniteTimeVarying._metadata, IAgVAAttitudeControlFiniteTimeVarying._set_Az4_metadata, pVal)

    _get_AzA_metadata = { "name" : "AzA",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def AzA(self) -> float:
        """Azimuth sine term amplitude (dimension: angle)"""
        return self._intf.get_property(IAgVAAttitudeControlFiniteTimeVarying._metadata, IAgVAAttitudeControlFiniteTimeVarying._get_AzA_metadata)

    _set_AzA_metadata = { "name" : "AzA",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @AzA.setter
    def AzA(self, pVal:float) -> None:
        return self._intf.set_property(IAgVAAttitudeControlFiniteTimeVarying._metadata, IAgVAAttitudeControlFiniteTimeVarying._set_AzA_metadata, pVal)

    _get_AzF_metadata = { "name" : "AzF",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def AzF(self) -> float:
        """Azimuth sine term frequency (dimension: angle/time)"""
        return self._intf.get_property(IAgVAAttitudeControlFiniteTimeVarying._metadata, IAgVAAttitudeControlFiniteTimeVarying._get_AzF_metadata)

    _set_AzF_metadata = { "name" : "AzF",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @AzF.setter
    def AzF(self, pVal:float) -> None:
        return self._intf.set_property(IAgVAAttitudeControlFiniteTimeVarying._metadata, IAgVAAttitudeControlFiniteTimeVarying._set_AzF_metadata, pVal)

    _get_AzP_metadata = { "name" : "AzP",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def AzP(self) -> float:
        """Azimuth sine term phase (dimension: angle)"""
        return self._intf.get_property(IAgVAAttitudeControlFiniteTimeVarying._metadata, IAgVAAttitudeControlFiniteTimeVarying._get_AzP_metadata)

    _set_AzP_metadata = { "name" : "AzP",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @AzP.setter
    def AzP(self, pVal:float) -> None:
        return self._intf.set_property(IAgVAAttitudeControlFiniteTimeVarying._metadata, IAgVAAttitudeControlFiniteTimeVarying._set_AzP_metadata, pVal)

    _get_El0_metadata = { "name" : "El0",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def El0(self) -> float:
        """Elevation constant term (dimension: angle)"""
        return self._intf.get_property(IAgVAAttitudeControlFiniteTimeVarying._metadata, IAgVAAttitudeControlFiniteTimeVarying._get_El0_metadata)

    _set_El0_metadata = { "name" : "El0",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @El0.setter
    def El0(self, pVal:float) -> None:
        return self._intf.set_property(IAgVAAttitudeControlFiniteTimeVarying._metadata, IAgVAAttitudeControlFiniteTimeVarying._set_El0_metadata, pVal)

    _get_El1_metadata = { "name" : "El1",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def El1(self) -> float:
        """Elevation linear term (dimension: angle/time)"""
        return self._intf.get_property(IAgVAAttitudeControlFiniteTimeVarying._metadata, IAgVAAttitudeControlFiniteTimeVarying._get_El1_metadata)

    _set_El1_metadata = { "name" : "El1",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @El1.setter
    def El1(self, pVal:float) -> None:
        return self._intf.set_property(IAgVAAttitudeControlFiniteTimeVarying._metadata, IAgVAAttitudeControlFiniteTimeVarying._set_El1_metadata, pVal)

    _get_El2_metadata = { "name" : "El2",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def El2(self) -> float:
        """Elevation quadratic term (dimension: angle/time^2)"""
        return self._intf.get_property(IAgVAAttitudeControlFiniteTimeVarying._metadata, IAgVAAttitudeControlFiniteTimeVarying._get_El2_metadata)

    _set_El2_metadata = { "name" : "El2",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @El2.setter
    def El2(self, pVal:float) -> None:
        return self._intf.set_property(IAgVAAttitudeControlFiniteTimeVarying._metadata, IAgVAAttitudeControlFiniteTimeVarying._set_El2_metadata, pVal)

    _get_El3_metadata = { "name" : "El3",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def El3(self) -> float:
        """Elevation cubic term (dimension: angle/time^3)"""
        return self._intf.get_property(IAgVAAttitudeControlFiniteTimeVarying._metadata, IAgVAAttitudeControlFiniteTimeVarying._get_El3_metadata)

    _set_El3_metadata = { "name" : "El3",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @El3.setter
    def El3(self, pVal:float) -> None:
        return self._intf.set_property(IAgVAAttitudeControlFiniteTimeVarying._metadata, IAgVAAttitudeControlFiniteTimeVarying._set_El3_metadata, pVal)

    _get_El4_metadata = { "name" : "El4",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def El4(self) -> float:
        """Elevation quartic term (dimension: angle/time^4)"""
        return self._intf.get_property(IAgVAAttitudeControlFiniteTimeVarying._metadata, IAgVAAttitudeControlFiniteTimeVarying._get_El4_metadata)

    _set_El4_metadata = { "name" : "El4",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @El4.setter
    def El4(self, pVal:float) -> None:
        return self._intf.set_property(IAgVAAttitudeControlFiniteTimeVarying._metadata, IAgVAAttitudeControlFiniteTimeVarying._set_El4_metadata, pVal)

    _get_ElA_metadata = { "name" : "ElA",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def ElA(self) -> float:
        """Elevation sine term amplitude (dimension: angle)"""
        return self._intf.get_property(IAgVAAttitudeControlFiniteTimeVarying._metadata, IAgVAAttitudeControlFiniteTimeVarying._get_ElA_metadata)

    _set_ElA_metadata = { "name" : "ElA",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @ElA.setter
    def ElA(self, pVal:float) -> None:
        return self._intf.set_property(IAgVAAttitudeControlFiniteTimeVarying._metadata, IAgVAAttitudeControlFiniteTimeVarying._set_ElA_metadata, pVal)

    _get_ElF_metadata = { "name" : "ElF",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def ElF(self) -> float:
        """Elevation sine term frequency (dimension: angle/time)"""
        return self._intf.get_property(IAgVAAttitudeControlFiniteTimeVarying._metadata, IAgVAAttitudeControlFiniteTimeVarying._get_ElF_metadata)

    _set_ElF_metadata = { "name" : "ElF",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @ElF.setter
    def ElF(self, pVal:float) -> None:
        return self._intf.set_property(IAgVAAttitudeControlFiniteTimeVarying._metadata, IAgVAAttitudeControlFiniteTimeVarying._set_ElF_metadata, pVal)

    _get_ElP_metadata = { "name" : "ElP",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def ElP(self) -> float:
        """Elevation sine term phase (dimension: angle)"""
        return self._intf.get_property(IAgVAAttitudeControlFiniteTimeVarying._metadata, IAgVAAttitudeControlFiniteTimeVarying._get_ElP_metadata)

    _set_ElP_metadata = { "name" : "ElP",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @ElP.setter
    def ElP(self, pVal:float) -> None:
        return self._intf.set_property(IAgVAAttitudeControlFiniteTimeVarying._metadata, IAgVAAttitudeControlFiniteTimeVarying._set_ElP_metadata, pVal)


agcls.AgClassCatalog.add_catalog_entry("{52E48F6D-0FD1-4E30-9398-DCCA988454CE}", IAgVAAttitudeControlFiniteTimeVarying)
agcls.AgTypeNameMap["IAgVAAttitudeControlFiniteTimeVarying"] = IAgVAAttitudeControlFiniteTimeVarying

class IAgVAAttitudeControlFiniteVelocityVector(IAgVAAttitudeControlFinite):
    """Properties for the Velocity Vector attitude control for a Finite Maneuver."""
    _num_methods = 3
    _vtable_offset = IAgVAAttitudeControlFinite._vtable_offset + IAgVAAttitudeControlFinite._num_methods
    _metadata = {
        "uuid" : "{0AD7345F-8B3C-474A-A1FC-AF0BA8BE4F38}",
        "vtable_reference" : IAgVAAttitudeControlFinite._vtable_offset + IAgVAAttitudeControlFinite._num_methods - 1,
        "method_offsets" : { "get_AttitudeUpdate" : 1,
                             "set_AttitudeUpdate" : 2,
                             "get_BodyConstraintVector" : 3, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAAttitudeControlFiniteVelocityVector._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAAttitudeControlFiniteVelocityVector from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAAttitudeControlFinite._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAAttitudeControlFiniteVelocityVector.__dict__ and type(IAgVAAttitudeControlFiniteVelocityVector.__dict__[attrname]) == property:
            return IAgVAAttitudeControlFiniteVelocityVector.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            IAgVAAttitudeControlFinite.__setattr__(self, attrname, value)
    
    _get_AttitudeUpdate_metadata = { "name" : "AttitudeUpdate",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAAttitudeUpdate),) }
    @property
    def AttitudeUpdate(self) -> "AgEVAAttitudeUpdate":
        """How and when the attitude will be updated."""
        return self._intf.get_property(IAgVAAttitudeControlFiniteVelocityVector._metadata, IAgVAAttitudeControlFiniteVelocityVector._get_AttitudeUpdate_metadata)

    _set_AttitudeUpdate_metadata = { "name" : "AttitudeUpdate",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAAttitudeUpdate),) }
    @AttitudeUpdate.setter
    def AttitudeUpdate(self, newVal:"AgEVAAttitudeUpdate") -> None:
        return self._intf.set_property(IAgVAAttitudeControlFiniteVelocityVector._metadata, IAgVAAttitudeControlFiniteVelocityVector._set_AttitudeUpdate_metadata, newVal)

    _get_BodyConstraintVector_metadata = { "name" : "BodyConstraintVector",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def BodyConstraintVector(self) -> "IAgDirection":
        """Defines a constraint vector in spacecraft body coordinates to complete the attitude definition."""
        return self._intf.get_property(IAgVAAttitudeControlFiniteVelocityVector._metadata, IAgVAAttitudeControlFiniteVelocityVector._get_BodyConstraintVector_metadata)


agcls.AgClassCatalog.add_catalog_entry("{0AD7345F-8B3C-474A-A1FC-AF0BA8BE4F38}", IAgVAAttitudeControlFiniteVelocityVector)
agcls.AgTypeNameMap["IAgVAAttitudeControlFiniteVelocityVector"] = IAgVAAttitudeControlFiniteVelocityVector

class IAgVAAttitudeControlFinitePlugin(IAgVAAttitudeControlFinite):
    """Properties for the Plugin attitude control for a Finite Maneuver."""
    _num_methods = 3
    _vtable_offset = IAgVAAttitudeControlFinite._vtable_offset + IAgVAAttitudeControlFinite._num_methods
    _metadata = {
        "uuid" : "{97762200-0ECD-423E-83FA-128D9DBC9C59}",
        "vtable_reference" : IAgVAAttitudeControlFinite._vtable_offset + IAgVAAttitudeControlFinite._num_methods - 1,
        "method_offsets" : { "SelectPluginByName" : 1,
                             "get_PluginName" : 2,
                             "get_PluginConfig" : 3, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAAttitudeControlFinitePlugin._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAAttitudeControlFinitePlugin from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAAttitudeControlFinite._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAAttitudeControlFinitePlugin.__dict__ and type(IAgVAAttitudeControlFinitePlugin.__dict__[attrname]) == property:
            return IAgVAAttitudeControlFinitePlugin.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            IAgVAAttitudeControlFinite.__setattr__(self, attrname, value)
    
    _SelectPluginByName_metadata = { "name" : "SelectPluginByName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    def SelectPluginByName(self, name:str) -> None:
        """Selects plugin using the plugin name."""
        return self._intf.invoke(IAgVAAttitudeControlFinitePlugin._metadata, IAgVAAttitudeControlFinitePlugin._SelectPluginByName_metadata, name)

    _get_PluginName_metadata = { "name" : "PluginName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def PluginName(self) -> str:
        """The selected plugin's name."""
        return self._intf.get_property(IAgVAAttitudeControlFinitePlugin._metadata, IAgVAAttitudeControlFinitePlugin._get_PluginName_metadata)

    _get_PluginConfig_metadata = { "name" : "PluginConfig",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def PluginConfig(self) -> "IAgVAPluginProperties":
        """The properties of the selected plugin."""
        return self._intf.get_property(IAgVAAttitudeControlFinitePlugin._metadata, IAgVAAttitudeControlFinitePlugin._get_PluginConfig_metadata)


agcls.AgClassCatalog.add_catalog_entry("{97762200-0ECD-423E-83FA-128D9DBC9C59}", IAgVAAttitudeControlFinitePlugin)
agcls.AgTypeNameMap["IAgVAAttitudeControlFinitePlugin"] = IAgVAAttitudeControlFinitePlugin

class IAgVAAttitudeControlOptimalFiniteLagrange(IAgVAAttitudeControlOptimalFinite):
    """Properties for the Lagrange Interpolation attitude control for a Optimal Finite Maneuver."""
    _num_methods = 1
    _vtable_offset = IAgVAAttitudeControlOptimalFinite._vtable_offset + IAgVAAttitudeControlOptimalFinite._num_methods
    _metadata = {
        "uuid" : "{5E65B4C8-BFDB-4812-BE54-FF94FEDFDB12}",
        "vtable_reference" : IAgVAAttitudeControlOptimalFinite._vtable_offset + IAgVAAttitudeControlOptimalFinite._num_methods - 1,
        "method_offsets" : { "get_BodyConstraintVector" : 1, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAAttitudeControlOptimalFiniteLagrange._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAAttitudeControlOptimalFiniteLagrange from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAAttitudeControlOptimalFinite._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAAttitudeControlOptimalFiniteLagrange.__dict__ and type(IAgVAAttitudeControlOptimalFiniteLagrange.__dict__[attrname]) == property:
            return IAgVAAttitudeControlOptimalFiniteLagrange.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            IAgVAAttitudeControlOptimalFinite.__setattr__(self, attrname, value)
    
    _get_BodyConstraintVector_metadata = { "name" : "BodyConstraintVector",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def BodyConstraintVector(self) -> "IAgDirection":
        """Defines a constraint vector in spacecraft body coordinates to complete the attitude definition."""
        return self._intf.get_property(IAgVAAttitudeControlOptimalFiniteLagrange._metadata, IAgVAAttitudeControlOptimalFiniteLagrange._get_BodyConstraintVector_metadata)


agcls.AgClassCatalog.add_catalog_entry("{5E65B4C8-BFDB-4812-BE54-FF94FEDFDB12}", IAgVAAttitudeControlOptimalFiniteLagrange)
agcls.AgTypeNameMap["IAgVAAttitudeControlOptimalFiniteLagrange"] = IAgVAAttitudeControlOptimalFiniteLagrange

class IAgVAMCSHold(object):
    """Properties for a Hold segment."""
    _num_methods = 23
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{E53CB41B-2AFA-40B5-97AE-079CA69F0779}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_StepSize" : 1,
                             "set_StepSize" : 2,
                             "get_HoldFrameName" : 3,
                             "set_HoldFrameName" : 4,
                             "get_EnableHoldAttitude" : 5,
                             "set_EnableHoldAttitude" : 6,
                             "get_StoppingConditions" : 7,
                             "get_MinPropagationTime" : 8,
                             "set_MinPropagationTime" : 9,
                             "get_MaxPropagationTime" : 10,
                             "set_MaxPropagationTime" : 11,
                             "get_EnableMaxPropagationTime" : 12,
                             "set_EnableMaxPropagationTime" : 13,
                             "get_EnableWarningMessage" : 14,
                             "set_EnableWarningMessage" : 15,
                             "EnableControlParameter" : 16,
                             "DisableControlParameter" : 17,
                             "IsControlParameterEnabled" : 18,
                             "get_ControlParametersAvailable" : 19,
                             "get_OverrideMaxPropagationTime" : 20,
                             "set_OverrideMaxPropagationTime" : 21,
                             "get_ShouldStopForInitiallySurpassedEpochStoppingConditions" : 22,
                             "set_ShouldStopForInitiallySurpassedEpochStoppingConditions" : 23, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAMCSHold._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAMCSHold from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAMCSHold.__dict__ and type(IAgVAMCSHold.__dict__[attrname]) == property:
            return IAgVAMCSHold.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAMCSHold.")
    
    _get_StepSize_metadata = { "name" : "StepSize",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def StepSize(self) -> float:
        """The time interval between calculated ephemeris output points. Uses Time Dimension."""
        return self._intf.get_property(IAgVAMCSHold._metadata, IAgVAMCSHold._get_StepSize_metadata)

    _set_StepSize_metadata = { "name" : "StepSize",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @StepSize.setter
    def StepSize(self, newVal:float) -> None:
        return self._intf.set_property(IAgVAMCSHold._metadata, IAgVAMCSHold._set_StepSize_metadata, newVal)

    _get_HoldFrameName_metadata = { "name" : "HoldFrameName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def HoldFrameName(self) -> str:
        """Hold Frame - the reference frame of the Hold segment."""
        return self._intf.get_property(IAgVAMCSHold._metadata, IAgVAMCSHold._get_HoldFrameName_metadata)

    _set_HoldFrameName_metadata = { "name" : "HoldFrameName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @HoldFrameName.setter
    def HoldFrameName(self, newVal:str) -> None:
        return self._intf.set_property(IAgVAMCSHold._metadata, IAgVAMCSHold._set_HoldFrameName_metadata, newVal)

    _get_EnableHoldAttitude_metadata = { "name" : "EnableHoldAttitude",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def EnableHoldAttitude(self) -> bool:
        """Enable Hold Altitude - if true, the spacecraft's attitude is fixed within the hold frame."""
        return self._intf.get_property(IAgVAMCSHold._metadata, IAgVAMCSHold._get_EnableHoldAttitude_metadata)

    _set_EnableHoldAttitude_metadata = { "name" : "EnableHoldAttitude",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @EnableHoldAttitude.setter
    def EnableHoldAttitude(self, newVal:bool) -> None:
        return self._intf.set_property(IAgVAMCSHold._metadata, IAgVAMCSHold._set_EnableHoldAttitude_metadata, newVal)

    _get_StoppingConditions_metadata = { "name" : "StoppingConditions",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def StoppingConditions(self) -> "IAgVAStoppingConditionCollection":
        """The stopping conditions defined for the segment."""
        return self._intf.get_property(IAgVAMCSHold._metadata, IAgVAMCSHold._get_StoppingConditions_metadata)

    _get_MinPropagationTime_metadata = { "name" : "MinPropagationTime",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def MinPropagationTime(self) -> float:
        """Minimum Propagation Time - the minimum time that must elapse from the beginning of the segment until Astrogator will begin checking stopping conditions for satisfaction. Uses Time Dimension."""
        return self._intf.get_property(IAgVAMCSHold._metadata, IAgVAMCSHold._get_MinPropagationTime_metadata)

    _set_MinPropagationTime_metadata = { "name" : "MinPropagationTime",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @MinPropagationTime.setter
    def MinPropagationTime(self, newVal:float) -> None:
        return self._intf.set_property(IAgVAMCSHold._metadata, IAgVAMCSHold._set_MinPropagationTime_metadata, newVal)

    _get_MaxPropagationTime_metadata = { "name" : "MaxPropagationTime",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def MaxPropagationTime(self) -> float:
        """Maximum Propagation Time - the maximum propagation time, after which the segment will end regardless of whether the stopping conditions have been satisfied. Uses Time Dimension."""
        return self._intf.get_property(IAgVAMCSHold._metadata, IAgVAMCSHold._get_MaxPropagationTime_metadata)

    _set_MaxPropagationTime_metadata = { "name" : "MaxPropagationTime",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @MaxPropagationTime.setter
    def MaxPropagationTime(self, newVal:float) -> None:
        return self._intf.set_property(IAgVAMCSHold._metadata, IAgVAMCSHold._set_MaxPropagationTime_metadata, newVal)

    _get_EnableMaxPropagationTime_metadata = { "name" : "EnableMaxPropagationTime",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def EnableMaxPropagationTime(self) -> bool:
        """Enable Maximum Propagation Time - if true, the maximum propagation time will be enforced."""
        return self._intf.get_property(IAgVAMCSHold._metadata, IAgVAMCSHold._get_EnableMaxPropagationTime_metadata)

    _set_EnableMaxPropagationTime_metadata = { "name" : "EnableMaxPropagationTime",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @EnableMaxPropagationTime.setter
    def EnableMaxPropagationTime(self, newVal:bool) -> None:
        return self._intf.set_property(IAgVAMCSHold._metadata, IAgVAMCSHold._set_EnableMaxPropagationTime_metadata, newVal)

    _get_EnableWarningMessage_metadata = { "name" : "EnableWarningMessage",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def EnableWarningMessage(self) -> bool:
        """If true, Astrogator will issue a warning message if propagation is stopped by the Maximum Propagation Time parameter."""
        return self._intf.get_property(IAgVAMCSHold._metadata, IAgVAMCSHold._get_EnableWarningMessage_metadata)

    _set_EnableWarningMessage_metadata = { "name" : "EnableWarningMessage",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @EnableWarningMessage.setter
    def EnableWarningMessage(self, newVal:bool) -> None:
        return self._intf.set_property(IAgVAMCSHold._metadata, IAgVAMCSHold._set_EnableWarningMessage_metadata, newVal)

    _EnableControlParameter_metadata = { "name" : "EnableControlParameter",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAControlAdvanced),) }
    def EnableControlParameter(self, param:"AgEVAControlAdvanced") -> None:
        """Enables or disables the specified control parameter."""
        return self._intf.invoke(IAgVAMCSHold._metadata, IAgVAMCSHold._EnableControlParameter_metadata, param)

    _DisableControlParameter_metadata = { "name" : "DisableControlParameter",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAControlAdvanced),) }
    def DisableControlParameter(self, param:"AgEVAControlAdvanced") -> None:
        """Disables the specified control parameter."""
        return self._intf.invoke(IAgVAMCSHold._metadata, IAgVAMCSHold._DisableControlParameter_metadata, param)

    _IsControlParameterEnabled_metadata = { "name" : "IsControlParameterEnabled",
            "arg_types" : (agcom.LONG, POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAControlAdvanced), agmarshall.VARIANT_BOOL_arg,) }
    def IsControlParameterEnabled(self, param:"AgEVAControlAdvanced") -> bool:
        """Sees if the specified control is enabled."""
        return self._intf.invoke(IAgVAMCSHold._metadata, IAgVAMCSHold._IsControlParameterEnabled_metadata, param, out_arg())

    _get_ControlParametersAvailable_metadata = { "name" : "ControlParametersAvailable",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def ControlParametersAvailable(self) -> bool:
        """Returns whether or not the control parameters can be set."""
        return self._intf.get_property(IAgVAMCSHold._metadata, IAgVAMCSHold._get_ControlParametersAvailable_metadata)

    _get_OverrideMaxPropagationTime_metadata = { "name" : "OverrideMaxPropagationTime",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def OverrideMaxPropagationTime(self) -> bool:
        """Override Maximum Propagation Time - if there is a duration or epoch stopping condition that occurs after the maximum propagation time, ignore the maximum propagation time."""
        return self._intf.get_property(IAgVAMCSHold._metadata, IAgVAMCSHold._get_OverrideMaxPropagationTime_metadata)

    _set_OverrideMaxPropagationTime_metadata = { "name" : "OverrideMaxPropagationTime",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @OverrideMaxPropagationTime.setter
    def OverrideMaxPropagationTime(self, newVal:bool) -> None:
        return self._intf.set_property(IAgVAMCSHold._metadata, IAgVAMCSHold._set_OverrideMaxPropagationTime_metadata, newVal)

    _get_ShouldStopForInitiallySurpassedEpochStoppingConditions_metadata = { "name" : "ShouldStopForInitiallySurpassedEpochStoppingConditions",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def ShouldStopForInitiallySurpassedEpochStoppingConditions(self) -> bool:
        """Stop immediately if propagation begins beyond an active epoch stopping condition."""
        return self._intf.get_property(IAgVAMCSHold._metadata, IAgVAMCSHold._get_ShouldStopForInitiallySurpassedEpochStoppingConditions_metadata)

    _set_ShouldStopForInitiallySurpassedEpochStoppingConditions_metadata = { "name" : "ShouldStopForInitiallySurpassedEpochStoppingConditions",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @ShouldStopForInitiallySurpassedEpochStoppingConditions.setter
    def ShouldStopForInitiallySurpassedEpochStoppingConditions(self, newVal:bool) -> None:
        return self._intf.set_property(IAgVAMCSHold._metadata, IAgVAMCSHold._set_ShouldStopForInitiallySurpassedEpochStoppingConditions_metadata, newVal)


agcls.AgClassCatalog.add_catalog_entry("{E53CB41B-2AFA-40B5-97AE-079CA69F0779}", IAgVAMCSHold)
agcls.AgTypeNameMap["IAgVAMCSHold"] = IAgVAMCSHold

class IAgVAMCSUpdate(object):
    """Properties for an Update segment."""
    _num_methods = 10
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{070D13DE-2D3C-4002-8D20-A8483EA1F8E3}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "SetActionAndValue" : 1,
                             "GetAction" : 2,
                             "GetValue" : 3,
                             "SetAction" : 4,
                             "SetValue" : 5,
                             "DisableControlParameter" : 6,
                             "EnableControlParameter" : 7,
                             "IsControlParameterEnabled" : 8,
                             "get_ControlParametersAvailable" : 9,
                             "get_UserVariables" : 10, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAMCSUpdate._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAMCSUpdate from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAMCSUpdate.__dict__ and type(IAgVAMCSUpdate.__dict__[attrname]) == property:
            return IAgVAMCSUpdate.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAMCSUpdate.")
    
    _SetActionAndValue_metadata = { "name" : "SetActionAndValue",
            "arg_types" : (agcom.LONG, agcom.LONG, agcom.DOUBLE,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAUpdateParam), agmarshall.AgEnum_arg(AgEVAUpdateAction), agmarshall.DOUBLE_arg,) }
    def SetActionAndValue(self, parameterType:"AgEVAUpdateParam", actionType:"AgEVAUpdateAction", value:float) -> None:
        """Sets an action and the new value."""
        return self._intf.invoke(IAgVAMCSUpdate._metadata, IAgVAMCSUpdate._SetActionAndValue_metadata, parameterType, actionType, value)

    _GetAction_metadata = { "name" : "GetAction",
            "arg_types" : (agcom.LONG, POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAUpdateParam), agmarshall.AgEnum_arg(AgEVAUpdateAction),) }
    def GetAction(self, parameterType:"AgEVAUpdateParam") -> "AgEVAUpdateAction":
        """Gets the action type for a parameter."""
        return self._intf.invoke(IAgVAMCSUpdate._metadata, IAgVAMCSUpdate._GetAction_metadata, parameterType, out_arg())

    _GetValue_metadata = { "name" : "GetValue",
            "arg_types" : (agcom.LONG, POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAUpdateParam), agmarshall.DOUBLE_arg,) }
    def GetValue(self, parameterType:"AgEVAUpdateParam") -> float:
        """Gets the value type for a parameter."""
        return self._intf.invoke(IAgVAMCSUpdate._metadata, IAgVAMCSUpdate._GetValue_metadata, parameterType, out_arg())

    _SetAction_metadata = { "name" : "SetAction",
            "arg_types" : (agcom.LONG, agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAUpdateParam), agmarshall.AgEnum_arg(AgEVAUpdateAction),) }
    def SetAction(self, parameterName:"AgEVAUpdateParam", actionType:"AgEVAUpdateAction") -> None:
        """Sets the update action type."""
        return self._intf.invoke(IAgVAMCSUpdate._metadata, IAgVAMCSUpdate._SetAction_metadata, parameterName, actionType)

    _SetValue_metadata = { "name" : "SetValue",
            "arg_types" : (agcom.LONG, agcom.DOUBLE,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAUpdateParam), agmarshall.DOUBLE_arg,) }
    def SetValue(self, parameterName:"AgEVAUpdateParam", value:float) -> None:
        """Sets the update value."""
        return self._intf.invoke(IAgVAMCSUpdate._metadata, IAgVAMCSUpdate._SetValue_metadata, parameterName, value)

    _DisableControlParameter_metadata = { "name" : "DisableControlParameter",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAControlUpdate),) }
    def DisableControlParameter(self, param:"AgEVAControlUpdate") -> None:
        """Disables the specified control parameter."""
        return self._intf.invoke(IAgVAMCSUpdate._metadata, IAgVAMCSUpdate._DisableControlParameter_metadata, param)

    _EnableControlParameter_metadata = { "name" : "EnableControlParameter",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAControlUpdate),) }
    def EnableControlParameter(self, param:"AgEVAControlUpdate") -> None:
        """Enables the specified control parameter."""
        return self._intf.invoke(IAgVAMCSUpdate._metadata, IAgVAMCSUpdate._EnableControlParameter_metadata, param)

    _IsControlParameterEnabled_metadata = { "name" : "IsControlParameterEnabled",
            "arg_types" : (agcom.LONG, POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAControlUpdate), agmarshall.VARIANT_BOOL_arg,) }
    def IsControlParameterEnabled(self, param:"AgEVAControlUpdate") -> bool:
        """Sees if the specified control is enabled."""
        return self._intf.invoke(IAgVAMCSUpdate._metadata, IAgVAMCSUpdate._IsControlParameterEnabled_metadata, param, out_arg())

    _get_ControlParametersAvailable_metadata = { "name" : "ControlParametersAvailable",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def ControlParametersAvailable(self) -> bool:
        """Returns whether or not the control parameters can be set."""
        return self._intf.get_property(IAgVAMCSUpdate._metadata, IAgVAMCSUpdate._get_ControlParametersAvailable_metadata)

    _get_UserVariables_metadata = { "name" : "UserVariables",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def UserVariables(self) -> "IAgVAUserVariableUpdateCollection":
        """Interface used to modify user variables for the update segment."""
        return self._intf.get_property(IAgVAMCSUpdate._metadata, IAgVAMCSUpdate._get_UserVariables_metadata)


agcls.AgClassCatalog.add_catalog_entry("{070D13DE-2D3C-4002-8D20-A8483EA1F8E3}", IAgVAMCSUpdate)
agcls.AgTypeNameMap["IAgVAMCSUpdate"] = IAgVAMCSUpdate

class IAgVAMCSReturn(object):
    """Properties for a Return segment."""
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{9C9AB217-64E6-4697-98F8-3B4BCB34AD62}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_ReturnControlToParentSequence" : 1,
                             "set_ReturnControlToParentSequence" : 2, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAMCSReturn._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAMCSReturn from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAMCSReturn.__dict__ and type(IAgVAMCSReturn.__dict__[attrname]) == property:
            return IAgVAMCSReturn.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAMCSReturn.")
    
    _get_ReturnControlToParentSequence_metadata = { "name" : "ReturnControlToParentSequence",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAReturnControl),) }
    @property
    def ReturnControlToParentSequence(self) -> "AgEVAReturnControl":
        """The state of the segment."""
        return self._intf.get_property(IAgVAMCSReturn._metadata, IAgVAMCSReturn._get_ReturnControlToParentSequence_metadata)

    _set_ReturnControlToParentSequence_metadata = { "name" : "ReturnControlToParentSequence",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAReturnControl),) }
    @ReturnControlToParentSequence.setter
    def ReturnControlToParentSequence(self, newVal:"AgEVAReturnControl") -> None:
        return self._intf.set_property(IAgVAMCSReturn._metadata, IAgVAMCSReturn._set_ReturnControlToParentSequence_metadata, newVal)


agcls.AgClassCatalog.add_catalog_entry("{9C9AB217-64E6-4697-98F8-3B4BCB34AD62}", IAgVAMCSReturn)
agcls.AgTypeNameMap["IAgVAMCSReturn"] = IAgVAMCSReturn

class IAgVAMCSStop(object):
    """Properties for a Stop segment."""
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{E6CFAA75-3E0C-4B68-9897-66B5556DCD5B}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_Enabled" : 1,
                             "set_Enabled" : 2, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAMCSStop._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAMCSStop from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAMCSStop.__dict__ and type(IAgVAMCSStop.__dict__[attrname]) == property:
            return IAgVAMCSStop.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAMCSStop.")
    
    _get_Enabled_metadata = { "name" : "Enabled",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def Enabled(self) -> bool:
        """If true, the segment will stop the execution of the MCS."""
        return self._intf.get_property(IAgVAMCSStop._metadata, IAgVAMCSStop._get_Enabled_metadata)

    _set_Enabled_metadata = { "name" : "Enabled",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @Enabled.setter
    def Enabled(self, newVal:bool) -> None:
        return self._intf.set_property(IAgVAMCSStop._metadata, IAgVAMCSStop._set_Enabled_metadata, newVal)


agcls.AgClassCatalog.add_catalog_entry("{E6CFAA75-3E0C-4B68-9897-66B5556DCD5B}", IAgVAMCSStop)
agcls.AgTypeNameMap["IAgVAMCSStop"] = IAgVAMCSStop

class IAgVAProfile(object):
    """General properties for target sequence profiles."""
    _num_methods = 9
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{CA331A4E-223E-410B-987C-9BE49AEC33A2}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "Copy" : 1,
                             "get_Name" : 2,
                             "set_Name" : 3,
                             "get_Status" : 4,
                             "get_UserComment" : 5,
                             "set_UserComment" : 6,
                             "get_Mode" : 7,
                             "set_Mode" : 8,
                             "get_Type" : 9, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAProfile._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAProfile from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAProfile.__dict__ and type(IAgVAProfile.__dict__[attrname]) == property:
            return IAgVAProfile.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAProfile.")
    
    _Copy_metadata = { "name" : "Copy",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    def Copy(self) -> "IAgVAProfile":
        """Makes a copy of the profile."""
        return self._intf.invoke(IAgVAProfile._metadata, IAgVAProfile._Copy_metadata, out_arg())

    _get_Name_metadata = { "name" : "Name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def Name(self) -> str:
        """The name of the profile."""
        return self._intf.get_property(IAgVAProfile._metadata, IAgVAProfile._get_Name_metadata)

    _set_Name_metadata = { "name" : "Name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @Name.setter
    def Name(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAProfile._metadata, IAgVAProfile._set_Name_metadata, inVal)

    _get_Status_metadata = { "name" : "Status",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def Status(self) -> str:
        """The status of the profile."""
        return self._intf.get_property(IAgVAProfile._metadata, IAgVAProfile._get_Status_metadata)

    _get_UserComment_metadata = { "name" : "UserComment",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def UserComment(self) -> str:
        """A user comment."""
        return self._intf.get_property(IAgVAProfile._metadata, IAgVAProfile._get_UserComment_metadata)

    _set_UserComment_metadata = { "name" : "UserComment",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @UserComment.setter
    def UserComment(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAProfile._metadata, IAgVAProfile._set_UserComment_metadata, inVal)

    _get_Mode_metadata = { "name" : "Mode",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAProfileMode),) }
    @property
    def Mode(self) -> "AgEVAProfileMode":
        """The profile's mode."""
        return self._intf.get_property(IAgVAProfile._metadata, IAgVAProfile._get_Mode_metadata)

    _set_Mode_metadata = { "name" : "Mode",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAProfileMode),) }
    @Mode.setter
    def Mode(self, inVal:"AgEVAProfileMode") -> None:
        return self._intf.set_property(IAgVAProfile._metadata, IAgVAProfile._set_Mode_metadata, inVal)

    _get_Type_metadata = { "name" : "Type",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAProfile),) }
    @property
    def Type(self) -> "AgEVAProfile":
        """Return the current profile type."""
        return self._intf.get_property(IAgVAProfile._metadata, IAgVAProfile._get_Type_metadata)


agcls.AgClassCatalog.add_catalog_entry("{CA331A4E-223E-410B-987C-9BE49AEC33A2}", IAgVAProfile)
agcls.AgTypeNameMap["IAgVAProfile"] = IAgVAProfile

class IAgVAProfileCollection(object):
    """Properties for a list of target sequence profiles."""
    _num_methods = 14
    _vtable_offset = IDispatch._vtable_offset + IDispatch._num_methods
    _metadata = {
        "uuid" : "{BA4A3DD4-79DF-4E22-A71B-A0F0A484CA5A}",
        "vtable_reference" : IDispatch._vtable_offset + IDispatch._num_methods - 1,
        "method_offsets" : { "Add" : 1,
                             "Item" : 2,
                             "get__NewEnum" : 3,
                             "get_Count" : 4,
                             "get_AvailableProfiles" : 5,
                             "Remove" : 6,
                             "RemoveAll" : 7,
                             "get_ProvideRuntimeTypeInfo" : 8,
                             "Cut" : 9,
                             "Paste" : 10,
                             "InsertCopy" : 11,
                             "Add2" : 12,
                             "GetItemByIndex" : 13,
                             "GetItemByName" : 14, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAProfileCollection._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAProfileCollection from source object.")
        self.__dict__["_enumerator"] = None
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAProfileCollection.__dict__ and type(IAgVAProfileCollection.__dict__[attrname]) == property:
            return IAgVAProfileCollection.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAProfileCollection.")
    def __iter__(self):
        self.__dict__["_enumerator"] = self._NewEnum
        self._enumerator.reset()
        return self
    def __next__(self) -> "IAgVAProfile":
        if self._enumerator is None:
            raise StopIteration
        nextval = self._enumerator.next()
        if nextval is None:
            raise StopIteration
        return nextval
    
    _Add_metadata = { "name" : "Add",
            "arg_types" : (agcom.BSTR, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.AgInterface_out_arg,) }
    def Add(self, profileName:str) -> "IAgVAProfile":
        """Adds a profile."""
        return self._intf.invoke(IAgVAProfileCollection._metadata, IAgVAProfileCollection._Add_metadata, profileName, out_arg())

    _Item_metadata = { "name" : "Item",
            "arg_types" : (agcom.VARIANT, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.VARIANT_arg, agmarshall.AgInterface_out_arg,) }
    def Item(self, indexOrName:typing.Any) -> "IAgVAProfile":
        """Allows you to iterate through the collection."""
        return self._intf.invoke(IAgVAProfileCollection._metadata, IAgVAProfileCollection._Item_metadata, indexOrName, out_arg())

    _get__NewEnum_metadata = { "name" : "_NewEnum",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.IEnumVARIANT_arg,) }
    @property
    def _NewEnum(self) -> enumerator_proxy:
        """Allows you to enumerate through the collection."""
        return self._intf.get_property(IAgVAProfileCollection._metadata, IAgVAProfileCollection._get__NewEnum_metadata)

    _get_Count_metadata = { "name" : "Count",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.LONG_arg,) }
    @property
    def Count(self) -> int:
        """Returns the size of the collection."""
        return self._intf.get_property(IAgVAProfileCollection._metadata, IAgVAProfileCollection._get_Count_metadata)

    _get_AvailableProfiles_metadata = { "name" : "AvailableProfiles",
            "arg_types" : (POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg,) }
    @property
    def AvailableProfiles(self) -> list:
        """Returns a list of available profiles."""
        return self._intf.get_property(IAgVAProfileCollection._metadata, IAgVAProfileCollection._get_AvailableProfiles_metadata)

    _Remove_metadata = { "name" : "Remove",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    def Remove(self, indexOrProfileName:typing.Any) -> None:
        """Removes an item from the profile collection."""
        return self._intf.invoke(IAgVAProfileCollection._metadata, IAgVAProfileCollection._Remove_metadata, indexOrProfileName)

    _RemoveAll_metadata = { "name" : "RemoveAll",
            "arg_types" : (),
            "marshallers" : () }
    def RemoveAll(self) -> None:
        """Removes all profiles from the profile collection."""
        return self._intf.invoke(IAgVAProfileCollection._metadata, IAgVAProfileCollection._RemoveAll_metadata, )

    _get_ProvideRuntimeTypeInfo_metadata = { "name" : "ProvideRuntimeTypeInfo",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def ProvideRuntimeTypeInfo(self) -> "IAgRuntimeTypeInfo":
        """Returns the IAgRuntimeTypeInfo interface to access properties at runtime."""
        return self._intf.get_property(IAgVAProfileCollection._metadata, IAgVAProfileCollection._get_ProvideRuntimeTypeInfo_metadata)

    _Cut_metadata = { "name" : "Cut",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    def Cut(self, indexOrName:typing.Any) -> None:
        """Copies the profile into the clipboard and removes profile from the list."""
        return self._intf.invoke(IAgVAProfileCollection._metadata, IAgVAProfileCollection._Cut_metadata, indexOrName)

    _Paste_metadata = { "name" : "Paste",
            "arg_types" : (agcom.VARIANT, agcom.LONG, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.VARIANT_arg, agmarshall.AgEnum_arg(AgEVAProfileInsertDirection), agmarshall.AgInterface_out_arg,) }
    def Paste(self, indexOrName:typing.Any, direction:"AgEVAProfileInsertDirection") -> "IAgVAProfile":
        """Pastes the profile from the clipboard and inserts into the list."""
        return self._intf.invoke(IAgVAProfileCollection._metadata, IAgVAProfileCollection._Paste_metadata, indexOrName, direction, out_arg())

    _InsertCopy_metadata = { "name" : "InsertCopy",
            "arg_types" : (agcom.PVOID, agcom.VARIANT, agcom.LONG, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_in_arg("IAgVAProfile"), agmarshall.VARIANT_arg, agmarshall.AgEnum_arg(AgEVAProfileInsertDirection), agmarshall.AgInterface_out_arg,) }
    def InsertCopy(self, profile:"IAgVAProfile", indexOrName:typing.Any, direction:"AgEVAProfileInsertDirection") -> "IAgVAProfile":
        """Copies the profile and inserts the copy into the list."""
        return self._intf.invoke(IAgVAProfileCollection._metadata, IAgVAProfileCollection._InsertCopy_metadata, profile, indexOrName, direction, out_arg())

    _Add2_metadata = { "name" : "Add2",
            "arg_types" : (agcom.BSTR, agcom.VARIANT, agcom.LONG, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.VARIANT_arg, agmarshall.AgEnum_arg(AgEVAProfileInsertDirection), agmarshall.AgInterface_out_arg,) }
    def Add2(self, profileName:str, indexOrName:typing.Any, direction:"AgEVAProfileInsertDirection") -> "IAgVAProfile":
        """Adds a profile."""
        return self._intf.invoke(IAgVAProfileCollection._metadata, IAgVAProfileCollection._Add2_metadata, profileName, indexOrName, direction, out_arg())

    _GetItemByIndex_metadata = { "name" : "GetItemByIndex",
            "arg_types" : (agcom.INT, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.INT_arg, agmarshall.AgInterface_out_arg,) }
    def GetItemByIndex(self, index:int) -> "IAgVAProfile":
        """Retrieves a profile from the collection by index."""
        return self._intf.invoke(IAgVAProfileCollection._metadata, IAgVAProfileCollection._GetItemByIndex_metadata, index, out_arg())

    _GetItemByName_metadata = { "name" : "GetItemByName",
            "arg_types" : (agcom.BSTR, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.AgInterface_out_arg,) }
    def GetItemByName(self, name:str) -> "IAgVAProfile":
        """Retrieves a profile from the collection by name."""
        return self._intf.invoke(IAgVAProfileCollection._metadata, IAgVAProfileCollection._GetItemByName_metadata, name, out_arg())

    __getitem__ = Item



agcls.AgClassCatalog.add_catalog_entry("{BA4A3DD4-79DF-4E22-A71B-A0F0A484CA5A}", IAgVAProfileCollection)
agcls.AgTypeNameMap["IAgVAProfileCollection"] = IAgVAProfileCollection

class IAgVAMCSTargetSequence(object):
    """General properties of a TargetSequence segment."""
    _num_methods = 16
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{703A8064-AB76-41FC-AADA-5134C30DB1C9}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_Action" : 1,
                             "set_Action" : 2,
                             "get_WhenProfilesFinish" : 3,
                             "set_WhenProfilesFinish" : 4,
                             "get_ContinueOnFailure" : 5,
                             "set_ContinueOnFailure" : 6,
                             "get_Segments" : 7,
                             "get_Profiles" : 8,
                             "ApplyProfiles" : 9,
                             "ResetProfiles" : 10,
                             "ApplyProfile" : 11,
                             "ResetProfile" : 12,
                             "ApplyProfileByName" : 13,
                             "ResetProfileByName" : 14,
                             "get_ResetInnerTargeters" : 15,
                             "set_ResetInnerTargeters" : 16, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAMCSTargetSequence._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAMCSTargetSequence from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAMCSTargetSequence.__dict__ and type(IAgVAMCSTargetSequence.__dict__[attrname]) == property:
            return IAgVAMCSTargetSequence.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAMCSTargetSequence.")
    
    _get_Action_metadata = { "name" : "Action",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVATargetSeqAction),) }
    @property
    def Action(self) -> "AgEVATargetSeqAction":
        """Whether to run the sequence nominally or using profiles."""
        return self._intf.get_property(IAgVAMCSTargetSequence._metadata, IAgVAMCSTargetSequence._get_Action_metadata)

    _set_Action_metadata = { "name" : "Action",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVATargetSeqAction),) }
    @Action.setter
    def Action(self, newVal:"AgEVATargetSeqAction") -> None:
        return self._intf.set_property(IAgVAMCSTargetSequence._metadata, IAgVAMCSTargetSequence._set_Action_metadata, newVal)

    _get_WhenProfilesFinish_metadata = { "name" : "WhenProfilesFinish",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAProfilesFinish),) }
    @property
    def WhenProfilesFinish(self) -> "AgEVAProfilesFinish":
        """When Profiles Converge - the action to be carried out if targeting has converged."""
        return self._intf.get_property(IAgVAMCSTargetSequence._metadata, IAgVAMCSTargetSequence._get_WhenProfilesFinish_metadata)

    _set_WhenProfilesFinish_metadata = { "name" : "WhenProfilesFinish",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAProfilesFinish),) }
    @WhenProfilesFinish.setter
    def WhenProfilesFinish(self, newVal:"AgEVAProfilesFinish") -> None:
        return self._intf.set_property(IAgVAMCSTargetSequence._metadata, IAgVAMCSTargetSequence._set_WhenProfilesFinish_metadata, newVal)

    _get_ContinueOnFailure_metadata = { "name" : "ContinueOnFailure",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def ContinueOnFailure(self) -> bool:
        """Continue if profiles don't converge - if true, the target sequence continues if a profile fails to converge; otherwise, the MCS will stop upon the failure of a search profile."""
        return self._intf.get_property(IAgVAMCSTargetSequence._metadata, IAgVAMCSTargetSequence._get_ContinueOnFailure_metadata)

    _set_ContinueOnFailure_metadata = { "name" : "ContinueOnFailure",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @ContinueOnFailure.setter
    def ContinueOnFailure(self, newVal:bool) -> None:
        return self._intf.set_property(IAgVAMCSTargetSequence._metadata, IAgVAMCSTargetSequence._set_ContinueOnFailure_metadata, newVal)

    _get_Segments_metadata = { "name" : "Segments",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def Segments(self) -> "IAgVAMCSSegmentCollection":
        """Returns the segments contained within the target sequence."""
        return self._intf.get_property(IAgVAMCSTargetSequence._metadata, IAgVAMCSTargetSequence._get_Segments_metadata)

    _get_Profiles_metadata = { "name" : "Profiles",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def Profiles(self) -> "IAgVAProfileCollection":
        """Returns the profiles used within the target sequence."""
        return self._intf.get_property(IAgVAMCSTargetSequence._metadata, IAgVAMCSTargetSequence._get_Profiles_metadata)

    _ApplyProfiles_metadata = { "name" : "ApplyProfiles",
            "arg_types" : (),
            "marshallers" : () }
    def ApplyProfiles(self) -> None:
        """Apply Changes - applies the current values of search profiles' controls and the changes specified by the segment configuration profiles to the segments within the target sequence."""
        return self._intf.invoke(IAgVAMCSTargetSequence._metadata, IAgVAMCSTargetSequence._ApplyProfiles_metadata, )

    _ResetProfiles_metadata = { "name" : "ResetProfiles",
            "arg_types" : (),
            "marshallers" : () }
    def ResetProfiles(self) -> None:
        """Reset - resets the controls of the search profiles to the segments' values."""
        return self._intf.invoke(IAgVAMCSTargetSequence._metadata, IAgVAMCSTargetSequence._ResetProfiles_metadata, )

    _ApplyProfile_metadata = { "name" : "ApplyProfile",
            "arg_types" : (agcom.PVOID,),
            "marshallers" : (agmarshall.AgInterface_in_arg("IAgVAProfile"),) }
    def ApplyProfile(self, profile:"IAgVAProfile") -> None:
        """Apply Changes - applies the current values of specified profile to the segments within the target sequence."""
        return self._intf.invoke(IAgVAMCSTargetSequence._metadata, IAgVAMCSTargetSequence._ApplyProfile_metadata, profile)

    _ResetProfile_metadata = { "name" : "ResetProfile",
            "arg_types" : (agcom.PVOID,),
            "marshallers" : (agmarshall.AgInterface_in_arg("IAgVAProfile"),) }
    def ResetProfile(self, profile:"IAgVAProfile") -> None:
        """Reset - resets the current values of specified profile."""
        return self._intf.invoke(IAgVAMCSTargetSequence._metadata, IAgVAMCSTargetSequence._ResetProfile_metadata, profile)

    _ApplyProfileByName_metadata = { "name" : "ApplyProfileByName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    def ApplyProfileByName(self, profile:str) -> None:
        """Apply Changes - applies the current values of specified profile to the segments within the target sequence."""
        return self._intf.invoke(IAgVAMCSTargetSequence._metadata, IAgVAMCSTargetSequence._ApplyProfileByName_metadata, profile)

    _ResetProfileByName_metadata = { "name" : "ResetProfileByName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    def ResetProfileByName(self, profile:str) -> None:
        """Reset - resets the current values of specified profile."""
        return self._intf.invoke(IAgVAMCSTargetSequence._metadata, IAgVAMCSTargetSequence._ResetProfileByName_metadata, profile)

    _get_ResetInnerTargeters_metadata = { "name" : "ResetInnerTargeters",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def ResetInnerTargeters(self) -> bool:
        """If true, inner target sequences will have their profiles reset before each run."""
        return self._intf.get_property(IAgVAMCSTargetSequence._metadata, IAgVAMCSTargetSequence._get_ResetInnerTargeters_metadata)

    _set_ResetInnerTargeters_metadata = { "name" : "ResetInnerTargeters",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @ResetInnerTargeters.setter
    def ResetInnerTargeters(self, newVal:bool) -> None:
        return self._intf.set_property(IAgVAMCSTargetSequence._metadata, IAgVAMCSTargetSequence._set_ResetInnerTargeters_metadata, newVal)


agcls.AgClassCatalog.add_catalog_entry("{703A8064-AB76-41FC-AADA-5134C30DB1C9}", IAgVAMCSTargetSequence)
agcls.AgTypeNameMap["IAgVAMCSTargetSequence"] = IAgVAMCSTargetSequence

class IAgVADCControl(object):
    """Properties for control parameters of a differential corrector profile."""
    _num_methods = 25
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{5F55DF8A-688A-48E6-A084-48E270AB766E}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_Enable" : 1,
                             "set_Enable" : 2,
                             "get_Name" : 3,
                             "get_FinalValue" : 4,
                             "get_LastUpdate" : 5,
                             "get_ParentName" : 6,
                             "get_InitialValue" : 7,
                             "get_Perturbation" : 8,
                             "set_Perturbation" : 9,
                             "get_Correction" : 10,
                             "set_Correction" : 11,
                             "get_Tolerance" : 12,
                             "set_Tolerance" : 13,
                             "get_MaxStep" : 14,
                             "set_MaxStep" : 15,
                             "get_ScalingMethod" : 16,
                             "set_ScalingMethod" : 17,
                             "get_ScalingValue" : 18,
                             "set_ScalingValue" : 19,
                             "get_Dimension" : 20,
                             "get_UseCustomDisplayUnit" : 21,
                             "set_UseCustomDisplayUnit" : 22,
                             "get_CustomDisplayUnit" : 23,
                             "set_CustomDisplayUnit" : 24,
                             "get_Values" : 25, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVADCControl._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVADCControl from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVADCControl.__dict__ and type(IAgVADCControl.__dict__[attrname]) == property:
            return IAgVADCControl.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVADCControl.")
    
    _get_Enable_metadata = { "name" : "Enable",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def Enable(self) -> bool:
        """If true, the variable is being used."""
        return self._intf.get_property(IAgVADCControl._metadata, IAgVADCControl._get_Enable_metadata)

    _set_Enable_metadata = { "name" : "Enable",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @Enable.setter
    def Enable(self, newVal:bool) -> None:
        return self._intf.set_property(IAgVADCControl._metadata, IAgVADCControl._set_Enable_metadata, newVal)

    _get_Name_metadata = { "name" : "Name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def Name(self) -> str:
        """The name of the parameter."""
        return self._intf.get_property(IAgVADCControl._metadata, IAgVADCControl._get_Name_metadata)

    _get_FinalValue_metadata = { "name" : "FinalValue",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def FinalValue(self) -> typing.Any:
        """The value of the independent variable after the last targeter run."""
        return self._intf.get_property(IAgVADCControl._metadata, IAgVADCControl._get_FinalValue_metadata)

    _get_LastUpdate_metadata = { "name" : "LastUpdate",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def LastUpdate(self) -> typing.Any:
        """The amount by which the value of the independent variable changed during the last targeter run."""
        return self._intf.get_property(IAgVADCControl._metadata, IAgVADCControl._get_LastUpdate_metadata)

    _get_ParentName_metadata = { "name" : "ParentName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def ParentName(self) -> str:
        """The name of the segment to which the parameter belongs."""
        return self._intf.get_property(IAgVADCControl._metadata, IAgVADCControl._get_ParentName_metadata)

    _get_InitialValue_metadata = { "name" : "InitialValue",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def InitialValue(self) -> typing.Any:
        """The nominal value of the element selected as a parameter. Dimension depends on context."""
        return self._intf.get_property(IAgVADCControl._metadata, IAgVADCControl._get_InitialValue_metadata)

    _get_Perturbation_metadata = { "name" : "Perturbation",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def Perturbation(self) -> typing.Any:
        """The value to be used in calculating numerical derivatives. Dimension depends on context."""
        return self._intf.get_property(IAgVADCControl._metadata, IAgVADCControl._get_Perturbation_metadata)

    _set_Perturbation_metadata = { "name" : "Perturbation",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @Perturbation.setter
    def Perturbation(self, newVal:typing.Any) -> None:
        return self._intf.set_property(IAgVADCControl._metadata, IAgVADCControl._set_Perturbation_metadata, newVal)

    _get_Correction_metadata = { "name" : "Correction",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def Correction(self) -> typing.Any:
        """The amount by which the nominal value of the parameter should be corrected to achieve the selected goals. Dimension depends on context."""
        return self._intf.get_property(IAgVADCControl._metadata, IAgVADCControl._get_Correction_metadata)

    _set_Correction_metadata = { "name" : "Correction",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @Correction.setter
    def Correction(self, newVal:typing.Any) -> None:
        return self._intf.set_property(IAgVADCControl._metadata, IAgVADCControl._set_Correction_metadata, newVal)

    _get_Tolerance_metadata = { "name" : "Tolerance",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def Tolerance(self) -> typing.Any:
        """The smallest update to the parameter to be made before the targeter stops. Only used if the convergence criteria is set to 'Either equality constraints or last control parameter updates within tolerance'. Dimension depends on context."""
        return self._intf.get_property(IAgVADCControl._metadata, IAgVADCControl._get_Tolerance_metadata)

    _set_Tolerance_metadata = { "name" : "Tolerance",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @Tolerance.setter
    def Tolerance(self, newVal:typing.Any) -> None:
        return self._intf.set_property(IAgVADCControl._metadata, IAgVADCControl._set_Tolerance_metadata, newVal)

    _get_MaxStep_metadata = { "name" : "MaxStep",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def MaxStep(self) -> typing.Any:
        """The maximum increment to make to the value of the parameter in any one step. Dimension depends on context."""
        return self._intf.get_property(IAgVADCControl._metadata, IAgVADCControl._get_MaxStep_metadata)

    _set_MaxStep_metadata = { "name" : "MaxStep",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @MaxStep.setter
    def MaxStep(self, newVal:typing.Any) -> None:
        return self._intf.set_property(IAgVADCControl._metadata, IAgVADCControl._set_MaxStep_metadata, newVal)

    _get_ScalingMethod_metadata = { "name" : "ScalingMethod",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVADCScalingMethod),) }
    @property
    def ScalingMethod(self) -> "AgEVADCScalingMethod":
        """Allows better numerical behavior if the parameters have very different magnitudes. The same scaling method is applied to all parameters."""
        return self._intf.get_property(IAgVADCControl._metadata, IAgVADCControl._get_ScalingMethod_metadata)

    _set_ScalingMethod_metadata = { "name" : "ScalingMethod",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVADCScalingMethod),) }
    @ScalingMethod.setter
    def ScalingMethod(self, newVal:"AgEVADCScalingMethod") -> None:
        return self._intf.set_property(IAgVADCControl._metadata, IAgVADCControl._set_ScalingMethod_metadata, newVal)

    _get_ScalingValue_metadata = { "name" : "ScalingValue",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def ScalingValue(self) -> typing.Any:
        """Applies to the Specified Value scaling method. Dimension depends on context."""
        return self._intf.get_property(IAgVADCControl._metadata, IAgVADCControl._get_ScalingValue_metadata)

    _set_ScalingValue_metadata = { "name" : "ScalingValue",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @ScalingValue.setter
    def ScalingValue(self, newVal:typing.Any) -> None:
        return self._intf.set_property(IAgVADCControl._metadata, IAgVADCControl._set_ScalingValue_metadata, newVal)

    _get_Dimension_metadata = { "name" : "Dimension",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def Dimension(self) -> str:
        """Dimension of the constraint."""
        return self._intf.get_property(IAgVADCControl._metadata, IAgVADCControl._get_Dimension_metadata)

    _get_UseCustomDisplayUnit_metadata = { "name" : "UseCustomDisplayUnit",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def UseCustomDisplayUnit(self) -> bool:
        """If true, allows display of values in another unit."""
        return self._intf.get_property(IAgVADCControl._metadata, IAgVADCControl._get_UseCustomDisplayUnit_metadata)

    _set_UseCustomDisplayUnit_metadata = { "name" : "UseCustomDisplayUnit",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @UseCustomDisplayUnit.setter
    def UseCustomDisplayUnit(self, newVal:bool) -> None:
        return self._intf.set_property(IAgVADCControl._metadata, IAgVADCControl._set_UseCustomDisplayUnit_metadata, newVal)

    _get_CustomDisplayUnit_metadata = { "name" : "CustomDisplayUnit",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def CustomDisplayUnit(self) -> str:
        """The unit in which the value will be displayed in the GUI."""
        return self._intf.get_property(IAgVADCControl._metadata, IAgVADCControl._get_CustomDisplayUnit_metadata)

    _set_CustomDisplayUnit_metadata = { "name" : "CustomDisplayUnit",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @CustomDisplayUnit.setter
    def CustomDisplayUnit(self, newVal:str) -> None:
        return self._intf.set_property(IAgVADCControl._metadata, IAgVADCControl._set_CustomDisplayUnit_metadata, newVal)

    _get_Values_metadata = { "name" : "Values",
            "arg_types" : (POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg,) }
    @property
    def Values(self) -> list:
        """List of values of this independent variable at each iteration, including nominal run. Dimension depends on context."""
        return self._intf.get_property(IAgVADCControl._metadata, IAgVADCControl._get_Values_metadata)


agcls.AgClassCatalog.add_catalog_entry("{5F55DF8A-688A-48E6-A084-48E270AB766E}", IAgVADCControl)
agcls.AgTypeNameMap["IAgVADCControl"] = IAgVADCControl

class IAgVADCResult(object):
    """Properties for equality constraints of a differential corrector profile."""
    _num_methods = 22
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{F55E0916-7FAE-469B-AB4F-9D09C26BB554}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_Enable" : 1,
                             "set_Enable" : 2,
                             "get_Name" : 3,
                             "get_DesiredValue" : 4,
                             "set_DesiredValue" : 5,
                             "get_CurrentValue" : 6,
                             "get_ParentName" : 7,
                             "get_Difference" : 8,
                             "get_Tolerance" : 9,
                             "set_Tolerance" : 10,
                             "get_ScalingMethod" : 11,
                             "set_ScalingMethod" : 12,
                             "get_ScalingValue" : 13,
                             "set_ScalingValue" : 14,
                             "get_Weight" : 15,
                             "set_Weight" : 16,
                             "get_Dimension" : 17,
                             "get_UseCustomDisplayUnit" : 18,
                             "set_UseCustomDisplayUnit" : 19,
                             "get_CustomDisplayUnit" : 20,
                             "set_CustomDisplayUnit" : 21,
                             "get_Values" : 22, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVADCResult._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVADCResult from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVADCResult.__dict__ and type(IAgVADCResult.__dict__[attrname]) == property:
            return IAgVADCResult.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVADCResult.")
    
    _get_Enable_metadata = { "name" : "Enable",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def Enable(self) -> bool:
        """If true, the variable is being used."""
        return self._intf.get_property(IAgVADCResult._metadata, IAgVADCResult._get_Enable_metadata)

    _set_Enable_metadata = { "name" : "Enable",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @Enable.setter
    def Enable(self, newVal:bool) -> None:
        return self._intf.set_property(IAgVADCResult._metadata, IAgVADCResult._set_Enable_metadata, newVal)

    _get_Name_metadata = { "name" : "Name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def Name(self) -> str:
        """The name of the parameter."""
        return self._intf.get_property(IAgVADCResult._metadata, IAgVADCResult._get_Name_metadata)

    _get_DesiredValue_metadata = { "name" : "DesiredValue",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def DesiredValue(self) -> typing.Any:
        """The desired value. Dimension depends on context."""
        return self._intf.get_property(IAgVADCResult._metadata, IAgVADCResult._get_DesiredValue_metadata)

    _set_DesiredValue_metadata = { "name" : "DesiredValue",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @DesiredValue.setter
    def DesiredValue(self, newVal:typing.Any) -> None:
        return self._intf.set_property(IAgVADCResult._metadata, IAgVADCResult._set_DesiredValue_metadata, newVal)

    _get_CurrentValue_metadata = { "name" : "CurrentValue",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def CurrentValue(self) -> typing.Any:
        """The value achieved for this dependent variable in the last targeter run. Dimension depends on context."""
        return self._intf.get_property(IAgVADCResult._metadata, IAgVADCResult._get_CurrentValue_metadata)

    _get_ParentName_metadata = { "name" : "ParentName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def ParentName(self) -> str:
        """Object - the name of the segment to which the parameter belongs."""
        return self._intf.get_property(IAgVADCResult._metadata, IAgVADCResult._get_ParentName_metadata)

    _get_Difference_metadata = { "name" : "Difference",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def Difference(self) -> typing.Any:
        """The difference between the current and desired value for this dependent variable. Dimension depends on context."""
        return self._intf.get_property(IAgVADCResult._metadata, IAgVADCResult._get_Difference_metadata)

    _get_Tolerance_metadata = { "name" : "Tolerance",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def Tolerance(self) -> typing.Any:
        """How close the targeter should come to the desired value before stopping. Dimension depends on context."""
        return self._intf.get_property(IAgVADCResult._metadata, IAgVADCResult._get_Tolerance_metadata)

    _set_Tolerance_metadata = { "name" : "Tolerance",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @Tolerance.setter
    def Tolerance(self, newVal:typing.Any) -> None:
        return self._intf.set_property(IAgVADCResult._metadata, IAgVADCResult._set_Tolerance_metadata, newVal)

    _get_ScalingMethod_metadata = { "name" : "ScalingMethod",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVADCScalingMethod),) }
    @property
    def ScalingMethod(self) -> "AgEVADCScalingMethod":
        """Allows better numerical behavior if the constraints have very different magnitudes. The same scaling method is applied to all constraints."""
        return self._intf.get_property(IAgVADCResult._metadata, IAgVADCResult._get_ScalingMethod_metadata)

    _set_ScalingMethod_metadata = { "name" : "ScalingMethod",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVADCScalingMethod),) }
    @ScalingMethod.setter
    def ScalingMethod(self, newVal:"AgEVADCScalingMethod") -> None:
        return self._intf.set_property(IAgVADCResult._metadata, IAgVADCResult._set_ScalingMethod_metadata, newVal)

    _get_ScalingValue_metadata = { "name" : "ScalingValue",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def ScalingValue(self) -> typing.Any:
        """Applies to the Specified Value scaling method. Dimension depends on context."""
        return self._intf.get_property(IAgVADCResult._metadata, IAgVADCResult._get_ScalingValue_metadata)

    _set_ScalingValue_metadata = { "name" : "ScalingValue",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @ScalingValue.setter
    def ScalingValue(self, newVal:typing.Any) -> None:
        return self._intf.set_property(IAgVADCResult._metadata, IAgVADCResult._set_ScalingValue_metadata, newVal)

    _get_Weight_metadata = { "name" : "Weight",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def Weight(self) -> float:
        """The factor by which the constraint error is to be multiplied. This is used to emphasize/de-emphasize the importance of one constraint relative to the others. Dimensionless."""
        return self._intf.get_property(IAgVADCResult._metadata, IAgVADCResult._get_Weight_metadata)

    _set_Weight_metadata = { "name" : "Weight",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @Weight.setter
    def Weight(self, newVal:float) -> None:
        return self._intf.set_property(IAgVADCResult._metadata, IAgVADCResult._set_Weight_metadata, newVal)

    _get_Dimension_metadata = { "name" : "Dimension",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def Dimension(self) -> str:
        """The dimension of the values."""
        return self._intf.get_property(IAgVADCResult._metadata, IAgVADCResult._get_Dimension_metadata)

    _get_UseCustomDisplayUnit_metadata = { "name" : "UseCustomDisplayUnit",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def UseCustomDisplayUnit(self) -> bool:
        """If true, allows display of values in another unit."""
        return self._intf.get_property(IAgVADCResult._metadata, IAgVADCResult._get_UseCustomDisplayUnit_metadata)

    _set_UseCustomDisplayUnit_metadata = { "name" : "UseCustomDisplayUnit",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @UseCustomDisplayUnit.setter
    def UseCustomDisplayUnit(self, newVal:bool) -> None:
        return self._intf.set_property(IAgVADCResult._metadata, IAgVADCResult._set_UseCustomDisplayUnit_metadata, newVal)

    _get_CustomDisplayUnit_metadata = { "name" : "CustomDisplayUnit",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def CustomDisplayUnit(self) -> str:
        """The unit in which the value will be displayed in the GUI."""
        return self._intf.get_property(IAgVADCResult._metadata, IAgVADCResult._get_CustomDisplayUnit_metadata)

    _set_CustomDisplayUnit_metadata = { "name" : "CustomDisplayUnit",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @CustomDisplayUnit.setter
    def CustomDisplayUnit(self, newVal:str) -> None:
        return self._intf.set_property(IAgVADCResult._metadata, IAgVADCResult._set_CustomDisplayUnit_metadata, newVal)

    _get_Values_metadata = { "name" : "Values",
            "arg_types" : (POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg,) }
    @property
    def Values(self) -> list:
        """List of values of this dependent variable at each iteration, including nominal run. Dimension depends on context."""
        return self._intf.get_property(IAgVADCResult._metadata, IAgVADCResult._get_Values_metadata)


agcls.AgClassCatalog.add_catalog_entry("{F55E0916-7FAE-469B-AB4F-9D09C26BB554}", IAgVADCResult)
agcls.AgTypeNameMap["IAgVADCResult"] = IAgVADCResult

class IAgVASearchPluginControl(object):
    """Properties of search plugin control parameters."""
    _num_methods = 13
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{71AB197F-79CB-438C-8F0A-A48FA0069865}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_ControlName" : 1,
                             "get_CurrentValue" : 2,
                             "get_ParentSegmentName" : 3,
                             "get_InitialValue" : 4,
                             "get_PluginIdentifier" : 5,
                             "get_PluginConfig" : 6,
                             "get_Dimension" : 7,
                             "get_UseCustomDisplayUnit" : 8,
                             "set_UseCustomDisplayUnit" : 9,
                             "get_CustomDisplayUnit" : 10,
                             "set_CustomDisplayUnit" : 11,
                             "get_Values" : 12,
                             "set_CurrentValue" : 13, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVASearchPluginControl._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVASearchPluginControl from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVASearchPluginControl.__dict__ and type(IAgVASearchPluginControl.__dict__[attrname]) == property:
            return IAgVASearchPluginControl.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVASearchPluginControl.")
    
    _get_ControlName_metadata = { "name" : "ControlName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def ControlName(self) -> str:
        """The name of the control parameter."""
        return self._intf.get_property(IAgVASearchPluginControl._metadata, IAgVASearchPluginControl._get_ControlName_metadata)

    _get_CurrentValue_metadata = { "name" : "CurrentValue",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def CurrentValue(self) -> typing.Any:
        """The current value of the control parameter."""
        return self._intf.get_property(IAgVASearchPluginControl._metadata, IAgVASearchPluginControl._get_CurrentValue_metadata)

    _get_ParentSegmentName_metadata = { "name" : "ParentSegmentName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def ParentSegmentName(self) -> str:
        """The parent segment of the control parameter."""
        return self._intf.get_property(IAgVASearchPluginControl._metadata, IAgVASearchPluginControl._get_ParentSegmentName_metadata)

    _get_InitialValue_metadata = { "name" : "InitialValue",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def InitialValue(self) -> typing.Any:
        """The initial value of the control parameter. Dimension depends on context."""
        return self._intf.get_property(IAgVASearchPluginControl._metadata, IAgVASearchPluginControl._get_InitialValue_metadata)

    _get_PluginIdentifier_metadata = { "name" : "PluginIdentifier",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def PluginIdentifier(self) -> str:
        """The plugin identifier."""
        return self._intf.get_property(IAgVASearchPluginControl._metadata, IAgVASearchPluginControl._get_PluginIdentifier_metadata)

    _get_PluginConfig_metadata = { "name" : "PluginConfig",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def PluginConfig(self) -> "IAgVAPluginProperties":
        """The properties of the selected plugin."""
        return self._intf.get_property(IAgVASearchPluginControl._metadata, IAgVASearchPluginControl._get_PluginConfig_metadata)

    _get_Dimension_metadata = { "name" : "Dimension",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def Dimension(self) -> str:
        """The dimension of the values."""
        return self._intf.get_property(IAgVASearchPluginControl._metadata, IAgVASearchPluginControl._get_Dimension_metadata)

    _get_UseCustomDisplayUnit_metadata = { "name" : "UseCustomDisplayUnit",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def UseCustomDisplayUnit(self) -> bool:
        """If true, allows display of values in another unit."""
        return self._intf.get_property(IAgVASearchPluginControl._metadata, IAgVASearchPluginControl._get_UseCustomDisplayUnit_metadata)

    _set_UseCustomDisplayUnit_metadata = { "name" : "UseCustomDisplayUnit",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @UseCustomDisplayUnit.setter
    def UseCustomDisplayUnit(self, newVal:bool) -> None:
        return self._intf.set_property(IAgVASearchPluginControl._metadata, IAgVASearchPluginControl._set_UseCustomDisplayUnit_metadata, newVal)

    _get_CustomDisplayUnit_metadata = { "name" : "CustomDisplayUnit",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def CustomDisplayUnit(self) -> str:
        """The unit in which the value will be displayed in the GUI."""
        return self._intf.get_property(IAgVASearchPluginControl._metadata, IAgVASearchPluginControl._get_CustomDisplayUnit_metadata)

    _set_CustomDisplayUnit_metadata = { "name" : "CustomDisplayUnit",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @CustomDisplayUnit.setter
    def CustomDisplayUnit(self, newVal:str) -> None:
        return self._intf.set_property(IAgVASearchPluginControl._metadata, IAgVASearchPluginControl._set_CustomDisplayUnit_metadata, newVal)

    _get_Values_metadata = { "name" : "Values",
            "arg_types" : (POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg,) }
    @property
    def Values(self) -> list:
        """List of values of this independent variable at each iteration, including nominal run. Dimension depends on context."""
        return self._intf.get_property(IAgVASearchPluginControl._metadata, IAgVASearchPluginControl._get_Values_metadata)

    _set_CurrentValue_metadata = { "name" : "CurrentValue",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @CurrentValue.setter
    def CurrentValue(self, newVal:typing.Any) -> None:
        return self._intf.set_property(IAgVASearchPluginControl._metadata, IAgVASearchPluginControl._set_CurrentValue_metadata, newVal)


agcls.AgClassCatalog.add_catalog_entry("{71AB197F-79CB-438C-8F0A-A48FA0069865}", IAgVASearchPluginControl)
agcls.AgTypeNameMap["IAgVASearchPluginControl"] = IAgVASearchPluginControl

class IAgVASearchPluginResult(object):
    """Properties of search plugin equality constraints."""
    _num_methods = 11
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{7881FB30-0FB9-43EF-98A1-9CF84D69A23F}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_ResultName" : 1,
                             "get_CurrentValue" : 2,
                             "get_ParentSegmentName" : 3,
                             "get_PluginIdentifier" : 4,
                             "get_PluginConfig" : 5,
                             "get_Dimension" : 6,
                             "get_UseCustomDisplayUnit" : 7,
                             "set_UseCustomDisplayUnit" : 8,
                             "get_CustomDisplayUnit" : 9,
                             "set_CustomDisplayUnit" : 10,
                             "get_Values" : 11, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVASearchPluginResult._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVASearchPluginResult from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVASearchPluginResult.__dict__ and type(IAgVASearchPluginResult.__dict__[attrname]) == property:
            return IAgVASearchPluginResult.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVASearchPluginResult.")
    
    _get_ResultName_metadata = { "name" : "ResultName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def ResultName(self) -> str:
        """The name of the equality constraint."""
        return self._intf.get_property(IAgVASearchPluginResult._metadata, IAgVASearchPluginResult._get_ResultName_metadata)

    _get_CurrentValue_metadata = { "name" : "CurrentValue",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def CurrentValue(self) -> typing.Any:
        """The current value of the result variable."""
        return self._intf.get_property(IAgVASearchPluginResult._metadata, IAgVASearchPluginResult._get_CurrentValue_metadata)

    _get_ParentSegmentName_metadata = { "name" : "ParentSegmentName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def ParentSegmentName(self) -> str:
        """The parent segment of the result variable."""
        return self._intf.get_property(IAgVASearchPluginResult._metadata, IAgVASearchPluginResult._get_ParentSegmentName_metadata)

    _get_PluginIdentifier_metadata = { "name" : "PluginIdentifier",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def PluginIdentifier(self) -> str:
        """The plugin identifier."""
        return self._intf.get_property(IAgVASearchPluginResult._metadata, IAgVASearchPluginResult._get_PluginIdentifier_metadata)

    _get_PluginConfig_metadata = { "name" : "PluginConfig",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def PluginConfig(self) -> "IAgVAPluginProperties":
        """The properties of the selected plugin."""
        return self._intf.get_property(IAgVASearchPluginResult._metadata, IAgVASearchPluginResult._get_PluginConfig_metadata)

    _get_Dimension_metadata = { "name" : "Dimension",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def Dimension(self) -> str:
        """The dimension of the values."""
        return self._intf.get_property(IAgVASearchPluginResult._metadata, IAgVASearchPluginResult._get_Dimension_metadata)

    _get_UseCustomDisplayUnit_metadata = { "name" : "UseCustomDisplayUnit",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def UseCustomDisplayUnit(self) -> bool:
        """If true, allows display of values in another unit."""
        return self._intf.get_property(IAgVASearchPluginResult._metadata, IAgVASearchPluginResult._get_UseCustomDisplayUnit_metadata)

    _set_UseCustomDisplayUnit_metadata = { "name" : "UseCustomDisplayUnit",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @UseCustomDisplayUnit.setter
    def UseCustomDisplayUnit(self, newVal:bool) -> None:
        return self._intf.set_property(IAgVASearchPluginResult._metadata, IAgVASearchPluginResult._set_UseCustomDisplayUnit_metadata, newVal)

    _get_CustomDisplayUnit_metadata = { "name" : "CustomDisplayUnit",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def CustomDisplayUnit(self) -> str:
        """The unit in which the value will be displayed in the GUI."""
        return self._intf.get_property(IAgVASearchPluginResult._metadata, IAgVASearchPluginResult._get_CustomDisplayUnit_metadata)

    _set_CustomDisplayUnit_metadata = { "name" : "CustomDisplayUnit",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @CustomDisplayUnit.setter
    def CustomDisplayUnit(self, newVal:str) -> None:
        return self._intf.set_property(IAgVASearchPluginResult._metadata, IAgVASearchPluginResult._set_CustomDisplayUnit_metadata, newVal)

    _get_Values_metadata = { "name" : "Values",
            "arg_types" : (POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg,) }
    @property
    def Values(self) -> list:
        """List of values of this dependent variable at each iteration, including nominal run. Dimension depends on context."""
        return self._intf.get_property(IAgVASearchPluginResult._metadata, IAgVASearchPluginResult._get_Values_metadata)


agcls.AgClassCatalog.add_catalog_entry("{7881FB30-0FB9-43EF-98A1-9CF84D69A23F}", IAgVASearchPluginResult)
agcls.AgTypeNameMap["IAgVASearchPluginResult"] = IAgVASearchPluginResult

class IAgVASearchPluginResultCollection(object):
    """Properties for the list of search plugin equality constraints."""
    _num_methods = 4
    _vtable_offset = IDispatch._vtable_offset + IDispatch._num_methods
    _metadata = {
        "uuid" : "{48F5FEA5-9306-4115-B120-E479FD31A601}",
        "vtable_reference" : IDispatch._vtable_offset + IDispatch._num_methods - 1,
        "method_offsets" : { "Item" : 1,
                             "get__NewEnum" : 2,
                             "get_Count" : 3,
                             "GetResultByPaths" : 4, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVASearchPluginResultCollection._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVASearchPluginResultCollection from source object.")
        self.__dict__["_enumerator"] = None
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVASearchPluginResultCollection.__dict__ and type(IAgVASearchPluginResultCollection.__dict__[attrname]) == property:
            return IAgVASearchPluginResultCollection.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVASearchPluginResultCollection.")
    def __iter__(self):
        self.__dict__["_enumerator"] = self._NewEnum
        self._enumerator.reset()
        return self
    def __next__(self) -> "IAgVASearchPluginResult":
        if self._enumerator is None:
            raise StopIteration
        nextval = self._enumerator.next()
        if nextval is None:
            raise StopIteration
        return nextval
    
    _Item_metadata = { "name" : "Item",
            "arg_types" : (agcom.LONG, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.LONG_arg, agmarshall.AgInterface_out_arg,) }
    def Item(self, index:int) -> "IAgVASearchPluginResult":
        """Allows you to iterate through the collection."""
        return self._intf.invoke(IAgVASearchPluginResultCollection._metadata, IAgVASearchPluginResultCollection._Item_metadata, index, out_arg())

    _get__NewEnum_metadata = { "name" : "_NewEnum",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.IEnumVARIANT_arg,) }
    @property
    def _NewEnum(self) -> enumerator_proxy:
        """Function to enumerate through the collection"""
        return self._intf.get_property(IAgVASearchPluginResultCollection._metadata, IAgVASearchPluginResultCollection._get__NewEnum_metadata)

    _get_Count_metadata = { "name" : "Count",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.LONG_arg,) }
    @property
    def Count(self) -> int:
        """Size of the collection"""
        return self._intf.get_property(IAgVASearchPluginResultCollection._metadata, IAgVASearchPluginResultCollection._get_Count_metadata)

    _GetResultByPaths_metadata = { "name" : "GetResultByPaths",
            "arg_types" : (agcom.BSTR, agcom.BSTR, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.BSTR_arg, agmarshall.AgInterface_out_arg,) }
    def GetResultByPaths(self, objectPath:str, resultPath:str) -> "IAgVASearchPluginResult":
        """Returns the result specified by the object/result path."""
        return self._intf.invoke(IAgVASearchPluginResultCollection._metadata, IAgVASearchPluginResultCollection._GetResultByPaths_metadata, objectPath, resultPath, out_arg())

    __getitem__ = Item



agcls.AgClassCatalog.add_catalog_entry("{48F5FEA5-9306-4115-B120-E479FD31A601}", IAgVASearchPluginResultCollection)
agcls.AgTypeNameMap["IAgVASearchPluginResultCollection"] = IAgVASearchPluginResultCollection

class IAgVASearchPluginControlCollection(object):
    """Properties for the list of search plugin control parameters."""
    _num_methods = 4
    _vtable_offset = IDispatch._vtable_offset + IDispatch._num_methods
    _metadata = {
        "uuid" : "{6DAD8352-416A-402F-BD38-40CEF9E0CE4C}",
        "vtable_reference" : IDispatch._vtable_offset + IDispatch._num_methods - 1,
        "method_offsets" : { "Item" : 1,
                             "get__NewEnum" : 2,
                             "get_Count" : 3,
                             "GetControlByPaths" : 4, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVASearchPluginControlCollection._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVASearchPluginControlCollection from source object.")
        self.__dict__["_enumerator"] = None
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVASearchPluginControlCollection.__dict__ and type(IAgVASearchPluginControlCollection.__dict__[attrname]) == property:
            return IAgVASearchPluginControlCollection.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVASearchPluginControlCollection.")
    def __iter__(self):
        self.__dict__["_enumerator"] = self._NewEnum
        self._enumerator.reset()
        return self
    def __next__(self) -> "IAgVASearchPluginControl":
        if self._enumerator is None:
            raise StopIteration
        nextval = self._enumerator.next()
        if nextval is None:
            raise StopIteration
        return nextval
    
    _Item_metadata = { "name" : "Item",
            "arg_types" : (agcom.LONG, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.LONG_arg, agmarshall.AgInterface_out_arg,) }
    def Item(self, index:int) -> "IAgVASearchPluginControl":
        """Allows you to iterate through the collection."""
        return self._intf.invoke(IAgVASearchPluginControlCollection._metadata, IAgVASearchPluginControlCollection._Item_metadata, index, out_arg())

    _get__NewEnum_metadata = { "name" : "_NewEnum",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.IEnumVARIANT_arg,) }
    @property
    def _NewEnum(self) -> enumerator_proxy:
        """Property that allows you to enumerate through the collection."""
        return self._intf.get_property(IAgVASearchPluginControlCollection._metadata, IAgVASearchPluginControlCollection._get__NewEnum_metadata)

    _get_Count_metadata = { "name" : "Count",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.LONG_arg,) }
    @property
    def Count(self) -> int:
        """Returns the size of the collection."""
        return self._intf.get_property(IAgVASearchPluginControlCollection._metadata, IAgVASearchPluginControlCollection._get_Count_metadata)

    _GetControlByPaths_metadata = { "name" : "GetControlByPaths",
            "arg_types" : (agcom.BSTR, agcom.BSTR, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.BSTR_arg, agmarshall.AgInterface_out_arg,) }
    def GetControlByPaths(self, objectPath:str, controlPath:str) -> "IAgVASearchPluginControl":
        """Returns the control specified by the object/control path."""
        return self._intf.invoke(IAgVASearchPluginControlCollection._metadata, IAgVASearchPluginControlCollection._GetControlByPaths_metadata, objectPath, controlPath, out_arg())

    __getitem__ = Item



agcls.AgClassCatalog.add_catalog_entry("{6DAD8352-416A-402F-BD38-40CEF9E0CE4C}", IAgVASearchPluginControlCollection)
agcls.AgTypeNameMap["IAgVASearchPluginControlCollection"] = IAgVASearchPluginControlCollection

class IAgVADCControlCollection(object):
    """Properties for the list of control parameters for a differential corrector profile."""
    _num_methods = 5
    _vtable_offset = IDispatch._vtable_offset + IDispatch._num_methods
    _metadata = {
        "uuid" : "{271A0046-EC08-49FC-A75A-4D49B6E7AD3A}",
        "vtable_reference" : IDispatch._vtable_offset + IDispatch._num_methods - 1,
        "method_offsets" : { "Item" : 1,
                             "get__NewEnum" : 2,
                             "get_Count" : 3,
                             "GetControlByPaths" : 4,
                             "get_ProvideRuntimeTypeInfo" : 5, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVADCControlCollection._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVADCControlCollection from source object.")
        self.__dict__["_enumerator"] = None
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVADCControlCollection.__dict__ and type(IAgVADCControlCollection.__dict__[attrname]) == property:
            return IAgVADCControlCollection.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVADCControlCollection.")
    def __iter__(self):
        self.__dict__["_enumerator"] = self._NewEnum
        self._enumerator.reset()
        return self
    def __next__(self) -> "IAgVADCControl":
        if self._enumerator is None:
            raise StopIteration
        nextval = self._enumerator.next()
        if nextval is None:
            raise StopIteration
        return nextval
    
    _Item_metadata = { "name" : "Item",
            "arg_types" : (agcom.LONG, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.LONG_arg, agmarshall.AgInterface_out_arg,) }
    def Item(self, index:int) -> "IAgVADCControl":
        """Allows you to iterate through the collection."""
        return self._intf.invoke(IAgVADCControlCollection._metadata, IAgVADCControlCollection._Item_metadata, index, out_arg())

    _get__NewEnum_metadata = { "name" : "_NewEnum",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.IEnumVARIANT_arg,) }
    @property
    def _NewEnum(self) -> enumerator_proxy:
        """Allows you to enumerate through the collection."""
        return self._intf.get_property(IAgVADCControlCollection._metadata, IAgVADCControlCollection._get__NewEnum_metadata)

    _get_Count_metadata = { "name" : "Count",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.LONG_arg,) }
    @property
    def Count(self) -> int:
        """Returns the size of the collection."""
        return self._intf.get_property(IAgVADCControlCollection._metadata, IAgVADCControlCollection._get_Count_metadata)

    _GetControlByPaths_metadata = { "name" : "GetControlByPaths",
            "arg_types" : (agcom.BSTR, agcom.BSTR, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.BSTR_arg, agmarshall.AgInterface_out_arg,) }
    def GetControlByPaths(self, objectPath:str, controlPath:str) -> "IAgVADCControl":
        """Returns the control specified by the object/control path."""
        return self._intf.invoke(IAgVADCControlCollection._metadata, IAgVADCControlCollection._GetControlByPaths_metadata, objectPath, controlPath, out_arg())

    _get_ProvideRuntimeTypeInfo_metadata = { "name" : "ProvideRuntimeTypeInfo",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def ProvideRuntimeTypeInfo(self) -> "IAgRuntimeTypeInfo":
        """Returns the IAgRuntimeTypeInfo interface to access properties at runtime."""
        return self._intf.get_property(IAgVADCControlCollection._metadata, IAgVADCControlCollection._get_ProvideRuntimeTypeInfo_metadata)

    __getitem__ = Item



agcls.AgClassCatalog.add_catalog_entry("{271A0046-EC08-49FC-A75A-4D49B6E7AD3A}", IAgVADCControlCollection)
agcls.AgTypeNameMap["IAgVADCControlCollection"] = IAgVADCControlCollection

class IAgVADCResultCollection(object):
    """Differential Corrector result collection."""
    _num_methods = 5
    _vtable_offset = IDispatch._vtable_offset + IDispatch._num_methods
    _metadata = {
        "uuid" : "{1AB78F87-F0BC-42DF-80C9-AAACF11FE5D4}",
        "vtable_reference" : IDispatch._vtable_offset + IDispatch._num_methods - 1,
        "method_offsets" : { "Item" : 1,
                             "get__NewEnum" : 2,
                             "get_Count" : 3,
                             "GetResultByPaths" : 4,
                             "get_ProvideRuntimeTypeInfo" : 5, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVADCResultCollection._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVADCResultCollection from source object.")
        self.__dict__["_enumerator"] = None
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVADCResultCollection.__dict__ and type(IAgVADCResultCollection.__dict__[attrname]) == property:
            return IAgVADCResultCollection.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVADCResultCollection.")
    def __iter__(self):
        self.__dict__["_enumerator"] = self._NewEnum
        self._enumerator.reset()
        return self
    def __next__(self) -> "IAgVADCResult":
        if self._enumerator is None:
            raise StopIteration
        nextval = self._enumerator.next()
        if nextval is None:
            raise StopIteration
        return nextval
    
    _Item_metadata = { "name" : "Item",
            "arg_types" : (agcom.LONG, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.LONG_arg, agmarshall.AgInterface_out_arg,) }
    def Item(self, index:int) -> "IAgVADCResult":
        """Allows you to iterate through the collection."""
        return self._intf.invoke(IAgVADCResultCollection._metadata, IAgVADCResultCollection._Item_metadata, index, out_arg())

    _get__NewEnum_metadata = { "name" : "_NewEnum",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.IEnumVARIANT_arg,) }
    @property
    def _NewEnum(self) -> enumerator_proxy:
        """Allows you to enumerate through the collection."""
        return self._intf.get_property(IAgVADCResultCollection._metadata, IAgVADCResultCollection._get__NewEnum_metadata)

    _get_Count_metadata = { "name" : "Count",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.LONG_arg,) }
    @property
    def Count(self) -> int:
        """Returns the size of the collection."""
        return self._intf.get_property(IAgVADCResultCollection._metadata, IAgVADCResultCollection._get_Count_metadata)

    _GetResultByPaths_metadata = { "name" : "GetResultByPaths",
            "arg_types" : (agcom.BSTR, agcom.BSTR, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.BSTR_arg, agmarshall.AgInterface_out_arg,) }
    def GetResultByPaths(self, objectPath:str, resultPath:str) -> "IAgVADCResult":
        """Returns the result specified by the object/result path."""
        return self._intf.invoke(IAgVADCResultCollection._metadata, IAgVADCResultCollection._GetResultByPaths_metadata, objectPath, resultPath, out_arg())

    _get_ProvideRuntimeTypeInfo_metadata = { "name" : "ProvideRuntimeTypeInfo",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def ProvideRuntimeTypeInfo(self) -> "IAgRuntimeTypeInfo":
        """Returns the IAgRuntimeTypeInfo interface to access properties at runtime."""
        return self._intf.get_property(IAgVADCResultCollection._metadata, IAgVADCResultCollection._get_ProvideRuntimeTypeInfo_metadata)

    __getitem__ = Item



agcls.AgClassCatalog.add_catalog_entry("{1AB78F87-F0BC-42DF-80C9-AAACF11FE5D4}", IAgVADCResultCollection)
agcls.AgTypeNameMap["IAgVADCResultCollection"] = IAgVADCResultCollection

class IAgVATargeterGraphActiveControl(object):
    """Properties for targeter graph active control."""
    _num_methods = 10
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{341791C5-446F-4812-BDE8-702EE9D3D980}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_Name" : 1,
                             "get_ParentName" : 2,
                             "get_ShowGraphValue" : 3,
                             "set_ShowGraphValue" : 4,
                             "get_LineColor" : 5,
                             "set_LineColor" : 6,
                             "get_PointStyle" : 7,
                             "set_PointStyle" : 8,
                             "get_YAxis" : 9,
                             "set_YAxis" : 10, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVATargeterGraphActiveControl._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVATargeterGraphActiveControl from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVATargeterGraphActiveControl.__dict__ and type(IAgVATargeterGraphActiveControl.__dict__[attrname]) == property:
            return IAgVATargeterGraphActiveControl.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVATargeterGraphActiveControl.")
    
    _get_Name_metadata = { "name" : "Name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def Name(self) -> str:
        """The name of the active control."""
        return self._intf.get_property(IAgVATargeterGraphActiveControl._metadata, IAgVATargeterGraphActiveControl._get_Name_metadata)

    _get_ParentName_metadata = { "name" : "ParentName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def ParentName(self) -> str:
        """The segment or component to which the element belongs."""
        return self._intf.get_property(IAgVATargeterGraphActiveControl._metadata, IAgVATargeterGraphActiveControl._get_ParentName_metadata)

    _get_ShowGraphValue_metadata = { "name" : "ShowGraphValue",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def ShowGraphValue(self) -> bool:
        """Show the value."""
        return self._intf.get_property(IAgVATargeterGraphActiveControl._metadata, IAgVATargeterGraphActiveControl._get_ShowGraphValue_metadata)

    _set_ShowGraphValue_metadata = { "name" : "ShowGraphValue",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @ShowGraphValue.setter
    def ShowGraphValue(self, inVal:bool) -> None:
        """Show the value."""
        return self._intf.set_property(IAgVATargeterGraphActiveControl._metadata, IAgVATargeterGraphActiveControl._set_ShowGraphValue_metadata, inVal)

    _get_LineColor_metadata = { "name" : "LineColor",
            "arg_types" : (POINTER(agcom.OLE_COLOR),),
            "marshallers" : (agmarshall.OLE_COLOR_arg,) }
    @property
    def LineColor(self) -> agcolor.Color:
        """Line Color."""
        return self._intf.get_property(IAgVATargeterGraphActiveControl._metadata, IAgVATargeterGraphActiveControl._get_LineColor_metadata)

    _set_LineColor_metadata = { "name" : "LineColor",
            "arg_types" : (agcom.OLE_COLOR,),
            "marshallers" : (agmarshall.OLE_COLOR_arg,) }
    @LineColor.setter
    def LineColor(self, inVal:agcolor.Color) -> None:
        """Line Color."""
        return self._intf.set_property(IAgVATargeterGraphActiveControl._metadata, IAgVATargeterGraphActiveControl._set_LineColor_metadata, inVal)

    _get_PointStyle_metadata = { "name" : "PointStyle",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def PointStyle(self) -> str:
        """Point Style."""
        return self._intf.get_property(IAgVATargeterGraphActiveControl._metadata, IAgVATargeterGraphActiveControl._get_PointStyle_metadata)

    _set_PointStyle_metadata = { "name" : "PointStyle",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @PointStyle.setter
    def PointStyle(self, inVal:str) -> None:
        """Point Style."""
        return self._intf.set_property(IAgVATargeterGraphActiveControl._metadata, IAgVATargeterGraphActiveControl._set_PointStyle_metadata, inVal)

    _get_YAxis_metadata = { "name" : "YAxis",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def YAxis(self) -> str:
        """Select whether to display the control's value range on the left or right side of the graph."""
        return self._intf.get_property(IAgVATargeterGraphActiveControl._metadata, IAgVATargeterGraphActiveControl._get_YAxis_metadata)

    _set_YAxis_metadata = { "name" : "YAxis",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @YAxis.setter
    def YAxis(self, inVal:str) -> None:
        """Select whether to display the control's value range on the left or right side of the graph."""
        return self._intf.set_property(IAgVATargeterGraphActiveControl._metadata, IAgVATargeterGraphActiveControl._set_YAxis_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{341791C5-446F-4812-BDE8-702EE9D3D980}", IAgVATargeterGraphActiveControl)
agcls.AgTypeNameMap["IAgVATargeterGraphActiveControl"] = IAgVATargeterGraphActiveControl

class IAgVATargeterGraphResult(object):
    """Properties for targeter graph result."""
    _num_methods = 14
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{16985A6D-61AE-467F-9A66-255556F9C8E1}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_Name" : 1,
                             "get_ParentName" : 2,
                             "get_ShowDesiredValue" : 3,
                             "set_ShowDesiredValue" : 4,
                             "get_LineColor" : 5,
                             "set_LineColor" : 6,
                             "get_PointStyle" : 7,
                             "set_PointStyle" : 8,
                             "get_YAxis" : 9,
                             "set_YAxis" : 10,
                             "get_GraphOption" : 11,
                             "set_GraphOption" : 12,
                             "get_ShowToleranceBand" : 13,
                             "set_ShowToleranceBand" : 14, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVATargeterGraphResult._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVATargeterGraphResult from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVATargeterGraphResult.__dict__ and type(IAgVATargeterGraphResult.__dict__[attrname]) == property:
            return IAgVATargeterGraphResult.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVATargeterGraphResult.")
    
    _get_Name_metadata = { "name" : "Name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def Name(self) -> str:
        """The name of the result."""
        return self._intf.get_property(IAgVATargeterGraphResult._metadata, IAgVATargeterGraphResult._get_Name_metadata)

    _get_ParentName_metadata = { "name" : "ParentName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def ParentName(self) -> str:
        """The segment or component for which this result has been selected."""
        return self._intf.get_property(IAgVATargeterGraphResult._metadata, IAgVATargeterGraphResult._get_ParentName_metadata)

    _get_ShowDesiredValue_metadata = { "name" : "ShowDesiredValue",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def ShowDesiredValue(self) -> bool:
        """Show the desired value."""
        return self._intf.get_property(IAgVATargeterGraphResult._metadata, IAgVATargeterGraphResult._get_ShowDesiredValue_metadata)

    _set_ShowDesiredValue_metadata = { "name" : "ShowDesiredValue",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @ShowDesiredValue.setter
    def ShowDesiredValue(self, inVal:bool) -> None:
        """Show the desired value."""
        return self._intf.set_property(IAgVATargeterGraphResult._metadata, IAgVATargeterGraphResult._set_ShowDesiredValue_metadata, inVal)

    _get_LineColor_metadata = { "name" : "LineColor",
            "arg_types" : (POINTER(agcom.OLE_COLOR),),
            "marshallers" : (agmarshall.OLE_COLOR_arg,) }
    @property
    def LineColor(self) -> agcolor.Color:
        """Line Color."""
        return self._intf.get_property(IAgVATargeterGraphResult._metadata, IAgVATargeterGraphResult._get_LineColor_metadata)

    _set_LineColor_metadata = { "name" : "LineColor",
            "arg_types" : (agcom.OLE_COLOR,),
            "marshallers" : (agmarshall.OLE_COLOR_arg,) }
    @LineColor.setter
    def LineColor(self, inVal:agcolor.Color) -> None:
        """Line Color."""
        return self._intf.set_property(IAgVATargeterGraphResult._metadata, IAgVATargeterGraphResult._set_LineColor_metadata, inVal)

    _get_PointStyle_metadata = { "name" : "PointStyle",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def PointStyle(self) -> str:
        """Point Style."""
        return self._intf.get_property(IAgVATargeterGraphResult._metadata, IAgVATargeterGraphResult._get_PointStyle_metadata)

    _set_PointStyle_metadata = { "name" : "PointStyle",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @PointStyle.setter
    def PointStyle(self, inVal:str) -> None:
        """Point Style."""
        return self._intf.set_property(IAgVATargeterGraphResult._metadata, IAgVATargeterGraphResult._set_PointStyle_metadata, inVal)

    _get_YAxis_metadata = { "name" : "YAxis",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def YAxis(self) -> str:
        """Select whether to display the result's value range on the left or right side of the graph."""
        return self._intf.get_property(IAgVATargeterGraphResult._metadata, IAgVATargeterGraphResult._get_YAxis_metadata)

    _set_YAxis_metadata = { "name" : "YAxis",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @YAxis.setter
    def YAxis(self, inVal:str) -> None:
        """Select whether to display the result's value range on the left or right side of the graph."""
        return self._intf.set_property(IAgVATargeterGraphResult._metadata, IAgVATargeterGraphResult._set_YAxis_metadata, inVal)

    _get_GraphOption_metadata = { "name" : "GraphOption",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAGraphOption),) }
    @property
    def GraphOption(self) -> "AgEVAGraphOption":
        """Graph option."""
        return self._intf.get_property(IAgVATargeterGraphResult._metadata, IAgVATargeterGraphResult._get_GraphOption_metadata)

    _set_GraphOption_metadata = { "name" : "GraphOption",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAGraphOption),) }
    @GraphOption.setter
    def GraphOption(self, inVal:"AgEVAGraphOption") -> None:
        """Graph option."""
        return self._intf.set_property(IAgVATargeterGraphResult._metadata, IAgVATargeterGraphResult._set_GraphOption_metadata, inVal)

    _get_ShowToleranceBand_metadata = { "name" : "ShowToleranceBand",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def ShowToleranceBand(self) -> bool:
        """Show the tolerance band."""
        return self._intf.get_property(IAgVATargeterGraphResult._metadata, IAgVATargeterGraphResult._get_ShowToleranceBand_metadata)

    _set_ShowToleranceBand_metadata = { "name" : "ShowToleranceBand",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @ShowToleranceBand.setter
    def ShowToleranceBand(self, inVal:bool) -> None:
        """Show the tolerance band."""
        return self._intf.set_property(IAgVATargeterGraphResult._metadata, IAgVATargeterGraphResult._set_ShowToleranceBand_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{16985A6D-61AE-467F-9A66-255556F9C8E1}", IAgVATargeterGraphResult)
agcls.AgTypeNameMap["IAgVATargeterGraphResult"] = IAgVATargeterGraphResult

class IAgVATargeterGraphActiveControlCollection(object):
    """Targeter graph active controls."""
    _num_methods = 4
    _vtable_offset = IDispatch._vtable_offset + IDispatch._num_methods
    _metadata = {
        "uuid" : "{57FE9616-8C44-4F5B-8B31-F005C0B678A2}",
        "vtable_reference" : IDispatch._vtable_offset + IDispatch._num_methods - 1,
        "method_offsets" : { "Item" : 1,
                             "get__NewEnum" : 2,
                             "get_Count" : 3,
                             "get_ProvideRuntimeTypeInfo" : 4, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVATargeterGraphActiveControlCollection._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVATargeterGraphActiveControlCollection from source object.")
        self.__dict__["_enumerator"] = None
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVATargeterGraphActiveControlCollection.__dict__ and type(IAgVATargeterGraphActiveControlCollection.__dict__[attrname]) == property:
            return IAgVATargeterGraphActiveControlCollection.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVATargeterGraphActiveControlCollection.")
    def __iter__(self):
        self.__dict__["_enumerator"] = self._NewEnum
        self._enumerator.reset()
        return self
    def __next__(self) -> "IAgVATargeterGraphActiveControl":
        if self._enumerator is None:
            raise StopIteration
        nextval = self._enumerator.next()
        if nextval is None:
            raise StopIteration
        return nextval
    
    _Item_metadata = { "name" : "Item",
            "arg_types" : (agcom.LONG, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.LONG_arg, agmarshall.AgInterface_out_arg,) }
    def Item(self, index:int) -> "IAgVATargeterGraphActiveControl":
        """Allows you to iterate through the collection."""
        return self._intf.invoke(IAgVATargeterGraphActiveControlCollection._metadata, IAgVATargeterGraphActiveControlCollection._Item_metadata, index, out_arg())

    _get__NewEnum_metadata = { "name" : "_NewEnum",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.IEnumVARIANT_arg,) }
    @property
    def _NewEnum(self) -> enumerator_proxy:
        """Allows you to enumerate through the collection."""
        return self._intf.get_property(IAgVATargeterGraphActiveControlCollection._metadata, IAgVATargeterGraphActiveControlCollection._get__NewEnum_metadata)

    _get_Count_metadata = { "name" : "Count",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.LONG_arg,) }
    @property
    def Count(self) -> int:
        """Returns the size of the collection."""
        return self._intf.get_property(IAgVATargeterGraphActiveControlCollection._metadata, IAgVATargeterGraphActiveControlCollection._get_Count_metadata)

    _get_ProvideRuntimeTypeInfo_metadata = { "name" : "ProvideRuntimeTypeInfo",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def ProvideRuntimeTypeInfo(self) -> "IAgRuntimeTypeInfo":
        """Returns the IAgRuntimeTypeInfo interface to access properties at runtime."""
        return self._intf.get_property(IAgVATargeterGraphActiveControlCollection._metadata, IAgVATargeterGraphActiveControlCollection._get_ProvideRuntimeTypeInfo_metadata)

    __getitem__ = Item



agcls.AgClassCatalog.add_catalog_entry("{57FE9616-8C44-4F5B-8B31-F005C0B678A2}", IAgVATargeterGraphActiveControlCollection)
agcls.AgTypeNameMap["IAgVATargeterGraphActiveControlCollection"] = IAgVATargeterGraphActiveControlCollection

class IAgVATargeterGraphResultCollection(object):
    """Targeter graph results."""
    _num_methods = 4
    _vtable_offset = IDispatch._vtable_offset + IDispatch._num_methods
    _metadata = {
        "uuid" : "{00E250BC-BA84-4ED7-A6A8-43FA17EF2731}",
        "vtable_reference" : IDispatch._vtable_offset + IDispatch._num_methods - 1,
        "method_offsets" : { "Item" : 1,
                             "get__NewEnum" : 2,
                             "get_Count" : 3,
                             "get_ProvideRuntimeTypeInfo" : 4, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVATargeterGraphResultCollection._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVATargeterGraphResultCollection from source object.")
        self.__dict__["_enumerator"] = None
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVATargeterGraphResultCollection.__dict__ and type(IAgVATargeterGraphResultCollection.__dict__[attrname]) == property:
            return IAgVATargeterGraphResultCollection.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVATargeterGraphResultCollection.")
    def __iter__(self):
        self.__dict__["_enumerator"] = self._NewEnum
        self._enumerator.reset()
        return self
    def __next__(self) -> "IAgVATargeterGraphResult":
        if self._enumerator is None:
            raise StopIteration
        nextval = self._enumerator.next()
        if nextval is None:
            raise StopIteration
        return nextval
    
    _Item_metadata = { "name" : "Item",
            "arg_types" : (agcom.LONG, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.LONG_arg, agmarshall.AgInterface_out_arg,) }
    def Item(self, index:int) -> "IAgVATargeterGraphResult":
        """Allows you to iterate through the collection."""
        return self._intf.invoke(IAgVATargeterGraphResultCollection._metadata, IAgVATargeterGraphResultCollection._Item_metadata, index, out_arg())

    _get__NewEnum_metadata = { "name" : "_NewEnum",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.IEnumVARIANT_arg,) }
    @property
    def _NewEnum(self) -> enumerator_proxy:
        """Allows you to enumerate through the collection."""
        return self._intf.get_property(IAgVATargeterGraphResultCollection._metadata, IAgVATargeterGraphResultCollection._get__NewEnum_metadata)

    _get_Count_metadata = { "name" : "Count",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.LONG_arg,) }
    @property
    def Count(self) -> int:
        """Returns the size of the collection."""
        return self._intf.get_property(IAgVATargeterGraphResultCollection._metadata, IAgVATargeterGraphResultCollection._get_Count_metadata)

    _get_ProvideRuntimeTypeInfo_metadata = { "name" : "ProvideRuntimeTypeInfo",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def ProvideRuntimeTypeInfo(self) -> "IAgRuntimeTypeInfo":
        """Returns the IAgRuntimeTypeInfo interface to access properties at runtime."""
        return self._intf.get_property(IAgVATargeterGraphResultCollection._metadata, IAgVATargeterGraphResultCollection._get_ProvideRuntimeTypeInfo_metadata)

    __getitem__ = Item



agcls.AgClassCatalog.add_catalog_entry("{00E250BC-BA84-4ED7-A6A8-43FA17EF2731}", IAgVATargeterGraphResultCollection)
agcls.AgTypeNameMap["IAgVATargeterGraphResultCollection"] = IAgVATargeterGraphResultCollection

class IAgVATargeterGraph(object):
    """Properties for a Targeter Graph."""
    _num_methods = 16
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{418A2587-7803-4746-9A49-1B1A87BB906A}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_Name" : 1,
                             "set_Name" : 2,
                             "get_GenerateOnRun" : 3,
                             "set_GenerateOnRun" : 4,
                             "get_UserComment" : 5,
                             "set_UserComment" : 6,
                             "get_ShowLabelIterations" : 7,
                             "set_ShowLabelIterations" : 8,
                             "get_ShowDesiredValue" : 9,
                             "set_ShowDesiredValue" : 10,
                             "get_ShowToleranceBand" : 11,
                             "set_ShowToleranceBand" : 12,
                             "get_IndependentVariable" : 13,
                             "set_IndependentVariable" : 14,
                             "get_ActiveControls" : 15,
                             "get_Results" : 16, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVATargeterGraph._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVATargeterGraph from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVATargeterGraph.__dict__ and type(IAgVATargeterGraph.__dict__[attrname]) == property:
            return IAgVATargeterGraph.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVATargeterGraph.")
    
    _get_Name_metadata = { "name" : "Name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def Name(self) -> str:
        """The name of the graph."""
        return self._intf.get_property(IAgVATargeterGraph._metadata, IAgVATargeterGraph._get_Name_metadata)

    _set_Name_metadata = { "name" : "Name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @Name.setter
    def Name(self, inVal:str) -> None:
        """The name of the graph."""
        return self._intf.set_property(IAgVATargeterGraph._metadata, IAgVATargeterGraph._set_Name_metadata, inVal)

    _get_GenerateOnRun_metadata = { "name" : "GenerateOnRun",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def GenerateOnRun(self) -> bool:
        """Generate the graph while MCS is being run."""
        return self._intf.get_property(IAgVATargeterGraph._metadata, IAgVATargeterGraph._get_GenerateOnRun_metadata)

    _set_GenerateOnRun_metadata = { "name" : "GenerateOnRun",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @GenerateOnRun.setter
    def GenerateOnRun(self, inVal:bool) -> None:
        """Generate the graph while MCS is being run."""
        return self._intf.set_property(IAgVATargeterGraph._metadata, IAgVATargeterGraph._set_GenerateOnRun_metadata, inVal)

    _get_UserComment_metadata = { "name" : "UserComment",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def UserComment(self) -> str:
        """User Comment."""
        return self._intf.get_property(IAgVATargeterGraph._metadata, IAgVATargeterGraph._get_UserComment_metadata)

    _set_UserComment_metadata = { "name" : "UserComment",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @UserComment.setter
    def UserComment(self, inVal:str) -> None:
        """User Comment."""
        return self._intf.set_property(IAgVATargeterGraph._metadata, IAgVATargeterGraph._set_UserComment_metadata, inVal)

    _get_ShowLabelIterations_metadata = { "name" : "ShowLabelIterations",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def ShowLabelIterations(self) -> bool:
        """Label each of the points on the graph labeled according to its iteration number."""
        return self._intf.get_property(IAgVATargeterGraph._metadata, IAgVATargeterGraph._get_ShowLabelIterations_metadata)

    _set_ShowLabelIterations_metadata = { "name" : "ShowLabelIterations",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @ShowLabelIterations.setter
    def ShowLabelIterations(self, inVal:bool) -> None:
        """Label each of the points on the graph labeled according to its iteration number."""
        return self._intf.set_property(IAgVATargeterGraph._metadata, IAgVATargeterGraph._set_ShowLabelIterations_metadata, inVal)

    _get_ShowDesiredValue_metadata = { "name" : "ShowDesiredValue",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def ShowDesiredValue(self) -> bool:
        """Show the desired equality constraint value(s) on the graph. Not applicable to SNOPT and IPOPT search profiles."""
        return self._intf.get_property(IAgVATargeterGraph._metadata, IAgVATargeterGraph._get_ShowDesiredValue_metadata)

    _set_ShowDesiredValue_metadata = { "name" : "ShowDesiredValue",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @ShowDesiredValue.setter
    def ShowDesiredValue(self, inVal:bool) -> None:
        """Show the desired equality constraint value(s) on the graph. Not applicable to SNOPT and IPOPT search profiles."""
        return self._intf.set_property(IAgVATargeterGraph._metadata, IAgVATargeterGraph._set_ShowDesiredValue_metadata, inVal)

    _get_ShowToleranceBand_metadata = { "name" : "ShowToleranceBand",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def ShowToleranceBand(self) -> bool:
        """Show the tolerance band on the graph. Not applicable to SNOPT and IPOPT search profiles."""
        return self._intf.get_property(IAgVATargeterGraph._metadata, IAgVATargeterGraph._get_ShowToleranceBand_metadata)

    _set_ShowToleranceBand_metadata = { "name" : "ShowToleranceBand",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @ShowToleranceBand.setter
    def ShowToleranceBand(self, inVal:bool) -> None:
        """Show the tolerance band on the graph. Not applicable to SNOPT and IPOPT search profiles."""
        return self._intf.set_property(IAgVATargeterGraph._metadata, IAgVATargeterGraph._set_ShowToleranceBand_metadata, inVal)

    _get_IndependentVariable_metadata = { "name" : "IndependentVariable",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def IndependentVariable(self) -> str:
        """Select the graph's X axis."""
        return self._intf.get_property(IAgVATargeterGraph._metadata, IAgVATargeterGraph._get_IndependentVariable_metadata)

    _set_IndependentVariable_metadata = { "name" : "IndependentVariable",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @IndependentVariable.setter
    def IndependentVariable(self, inVal:str) -> None:
        """Select the graph's X axis."""
        return self._intf.set_property(IAgVATargeterGraph._metadata, IAgVATargeterGraph._set_IndependentVariable_metadata, inVal)

    _get_ActiveControls_metadata = { "name" : "ActiveControls",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def ActiveControls(self) -> "IAgVATargeterGraphActiveControlCollection":
        """Active Controls."""
        return self._intf.get_property(IAgVATargeterGraph._metadata, IAgVATargeterGraph._get_ActiveControls_metadata)

    _get_Results_metadata = { "name" : "Results",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def Results(self) -> "IAgVATargeterGraphResultCollection":
        """Results."""
        return self._intf.get_property(IAgVATargeterGraph._metadata, IAgVATargeterGraph._get_Results_metadata)


agcls.AgClassCatalog.add_catalog_entry("{418A2587-7803-4746-9A49-1B1A87BB906A}", IAgVATargeterGraph)
agcls.AgTypeNameMap["IAgVATargeterGraph"] = IAgVATargeterGraph

class IAgVATargeterGraphCollection(object):
    """The list of User Variables accessed through the Driver."""
    _num_methods = 11
    _vtable_offset = IDispatch._vtable_offset + IDispatch._num_methods
    _metadata = {
        "uuid" : "{10EA0426-F62C-40C1-B1C6-A5B5E0BD0414}",
        "vtable_reference" : IDispatch._vtable_offset + IDispatch._num_methods - 1,
        "method_offsets" : { "Item" : 1,
                             "get__NewEnum" : 2,
                             "get_Count" : 3,
                             "AddGraph" : 4,
                             "RemoveGraph" : 5,
                             "get_ProvideRuntimeTypeInfo" : 6,
                             "Cut" : 7,
                             "Paste" : 8,
                             "InsertCopy" : 9,
                             "GetItemByIndex" : 10,
                             "GetItemByName" : 11, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVATargeterGraphCollection._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVATargeterGraphCollection from source object.")
        self.__dict__["_enumerator"] = None
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVATargeterGraphCollection.__dict__ and type(IAgVATargeterGraphCollection.__dict__[attrname]) == property:
            return IAgVATargeterGraphCollection.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVATargeterGraphCollection.")
    def __iter__(self):
        self.__dict__["_enumerator"] = self._NewEnum
        self._enumerator.reset()
        return self
    def __next__(self) -> "IAgVATargeterGraph":
        if self._enumerator is None:
            raise StopIteration
        nextval = self._enumerator.next()
        if nextval is None:
            raise StopIteration
        return nextval
    
    _Item_metadata = { "name" : "Item",
            "arg_types" : (agcom.VARIANT, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.VARIANT_arg, agmarshall.AgInterface_out_arg,) }
    def Item(self, indexOrName:typing.Any) -> "IAgVATargeterGraph":
        """Allows you to iterate through the collection."""
        return self._intf.invoke(IAgVATargeterGraphCollection._metadata, IAgVATargeterGraphCollection._Item_metadata, indexOrName, out_arg())

    _get__NewEnum_metadata = { "name" : "_NewEnum",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.IEnumVARIANT_arg,) }
    @property
    def _NewEnum(self) -> enumerator_proxy:
        """Allows you to enumerate through the collection."""
        return self._intf.get_property(IAgVATargeterGraphCollection._metadata, IAgVATargeterGraphCollection._get__NewEnum_metadata)

    _get_Count_metadata = { "name" : "Count",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.LONG_arg,) }
    @property
    def Count(self) -> int:
        """Returns the size of the collection."""
        return self._intf.get_property(IAgVATargeterGraphCollection._metadata, IAgVATargeterGraphCollection._get_Count_metadata)

    _AddGraph_metadata = { "name" : "AddGraph",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    def AddGraph(self) -> "IAgVATargeterGraph":
        """Adds a new targeter graph."""
        return self._intf.invoke(IAgVATargeterGraphCollection._metadata, IAgVATargeterGraphCollection._AddGraph_metadata, out_arg())

    _RemoveGraph_metadata = { "name" : "RemoveGraph",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    def RemoveGraph(self, indexOrName:typing.Any) -> None:
        """Removes a targeter graph."""
        return self._intf.invoke(IAgVATargeterGraphCollection._metadata, IAgVATargeterGraphCollection._RemoveGraph_metadata, indexOrName)

    _get_ProvideRuntimeTypeInfo_metadata = { "name" : "ProvideRuntimeTypeInfo",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def ProvideRuntimeTypeInfo(self) -> "IAgRuntimeTypeInfo":
        """Returns the IAgRuntimeTypeInfo interface to access properties at runtime."""
        return self._intf.get_property(IAgVATargeterGraphCollection._metadata, IAgVATargeterGraphCollection._get_ProvideRuntimeTypeInfo_metadata)

    _Cut_metadata = { "name" : "Cut",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    def Cut(self, indexOrName:typing.Any) -> None:
        """Copies a targeter graph to the clipboard and removes the targeter graph from the list."""
        return self._intf.invoke(IAgVATargeterGraphCollection._metadata, IAgVATargeterGraphCollection._Cut_metadata, indexOrName)

    _Paste_metadata = { "name" : "Paste",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    def Paste(self) -> "IAgVATargeterGraph":
        """Pastes a targeter graph from the clipboard into the list."""
        return self._intf.invoke(IAgVATargeterGraphCollection._metadata, IAgVATargeterGraphCollection._Paste_metadata, out_arg())

    _InsertCopy_metadata = { "name" : "InsertCopy",
            "arg_types" : (agcom.PVOID, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_in_arg("IAgVATargeterGraph"), agmarshall.AgInterface_out_arg,) }
    def InsertCopy(self, graph:"IAgVATargeterGraph") -> "IAgVATargeterGraph":
        """Copies a targeter graph and inserts the copy into the list."""
        return self._intf.invoke(IAgVATargeterGraphCollection._metadata, IAgVATargeterGraphCollection._InsertCopy_metadata, graph, out_arg())

    _GetItemByIndex_metadata = { "name" : "GetItemByIndex",
            "arg_types" : (agcom.INT, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.INT_arg, agmarshall.AgInterface_out_arg,) }
    def GetItemByIndex(self, index:int) -> "IAgVATargeterGraph":
        """Retrieves a targeter graph from the collection by index."""
        return self._intf.invoke(IAgVATargeterGraphCollection._metadata, IAgVATargeterGraphCollection._GetItemByIndex_metadata, index, out_arg())

    _GetItemByName_metadata = { "name" : "GetItemByName",
            "arg_types" : (agcom.BSTR, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.AgInterface_out_arg,) }
    def GetItemByName(self, name:str) -> "IAgVATargeterGraph":
        """Retrieves a targeter graph from the collection by name."""
        return self._intf.invoke(IAgVATargeterGraphCollection._metadata, IAgVATargeterGraphCollection._GetItemByName_metadata, name, out_arg())

    __getitem__ = Item



agcls.AgClassCatalog.add_catalog_entry("{10EA0426-F62C-40C1-B1C6-A5B5E0BD0414}", IAgVATargeterGraphCollection)
agcls.AgTypeNameMap["IAgVATargeterGraphCollection"] = IAgVATargeterGraphCollection

class IAgVAProfileSearchPlugin(IAgVAProfile):
    """Properties of a plugin search profile."""
    _num_methods = 9
    _vtable_offset = IAgVAProfile._vtable_offset + IAgVAProfile._num_methods
    _metadata = {
        "uuid" : "{9380509D-A189-453D-B1EF-D1D8E34420FF}",
        "vtable_reference" : IAgVAProfile._vtable_offset + IAgVAProfile._num_methods - 1,
        "method_offsets" : { "get_Controls" : 1,
                             "get_Results" : 2,
                             "get_PluginConfig" : 3,
                             "get_PluginIdentifier" : 4,
                             "get_ScriptingTool" : 5,
                             "get_ResetControlsBeforeRun" : 6,
                             "set_ResetControlsBeforeRun" : 7,
                             "get_TargeterGraphs" : 8,
                             "get_LogFile" : 9, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAProfileSearchPlugin._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAProfileSearchPlugin from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAProfile._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAProfileSearchPlugin.__dict__ and type(IAgVAProfileSearchPlugin.__dict__[attrname]) == property:
            return IAgVAProfileSearchPlugin.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            IAgVAProfile.__setattr__(self, attrname, value)
    
    _get_Controls_metadata = { "name" : "Controls",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def Controls(self) -> "IAgVASearchPluginControlCollection":
        """The selected control parameters."""
        return self._intf.get_property(IAgVAProfileSearchPlugin._metadata, IAgVAProfileSearchPlugin._get_Controls_metadata)

    _get_Results_metadata = { "name" : "Results",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def Results(self) -> "IAgVASearchPluginResultCollection":
        """The selected equality constraints."""
        return self._intf.get_property(IAgVAProfileSearchPlugin._metadata, IAgVAProfileSearchPlugin._get_Results_metadata)

    _get_PluginConfig_metadata = { "name" : "PluginConfig",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def PluginConfig(self) -> "IAgVAPluginProperties":
        """The properties of the selected plugin."""
        return self._intf.get_property(IAgVAProfileSearchPlugin._metadata, IAgVAProfileSearchPlugin._get_PluginConfig_metadata)

    _get_PluginIdentifier_metadata = { "name" : "PluginIdentifier",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def PluginIdentifier(self) -> str:
        """The plugin identifier."""
        return self._intf.get_property(IAgVAProfileSearchPlugin._metadata, IAgVAProfileSearchPlugin._get_PluginIdentifier_metadata)

    _get_ScriptingTool_metadata = { "name" : "ScriptingTool",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def ScriptingTool(self) -> "IAgVAScriptingTool":
        """Returns the Scripting tool for the sequence."""
        return self._intf.get_property(IAgVAProfileSearchPlugin._metadata, IAgVAProfileSearchPlugin._get_ScriptingTool_metadata)

    _get_ResetControlsBeforeRun_metadata = { "name" : "ResetControlsBeforeRun",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def ResetControlsBeforeRun(self) -> bool:
        """Reset controls before each run."""
        return self._intf.get_property(IAgVAProfileSearchPlugin._metadata, IAgVAProfileSearchPlugin._get_ResetControlsBeforeRun_metadata)

    _set_ResetControlsBeforeRun_metadata = { "name" : "ResetControlsBeforeRun",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @ResetControlsBeforeRun.setter
    def ResetControlsBeforeRun(self, newVal:bool) -> None:
        return self._intf.set_property(IAgVAProfileSearchPlugin._metadata, IAgVAProfileSearchPlugin._set_ResetControlsBeforeRun_metadata, newVal)

    _get_TargeterGraphs_metadata = { "name" : "TargeterGraphs",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def TargeterGraphs(self) -> "IAgVATargeterGraphCollection":
        """Graphs"""
        return self._intf.get_property(IAgVAProfileSearchPlugin._metadata, IAgVAProfileSearchPlugin._get_TargeterGraphs_metadata)

    _get_LogFile_metadata = { "name" : "LogFile",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def LogFile(self) -> str:
        """Name of the log file for this profile."""
        return self._intf.get_property(IAgVAProfileSearchPlugin._metadata, IAgVAProfileSearchPlugin._get_LogFile_metadata)


agcls.AgClassCatalog.add_catalog_entry("{9380509D-A189-453D-B1EF-D1D8E34420FF}", IAgVAProfileSearchPlugin)
agcls.AgTypeNameMap["IAgVAProfileSearchPlugin"] = IAgVAProfileSearchPlugin

class IAgVAProfileDifferentialCorrector(IAgVAProfile):
    """Properties for a Differential Corrector profile."""
    _num_methods = 39
    _vtable_offset = IAgVAProfile._vtable_offset + IAgVAProfile._num_methods
    _metadata = {
        "uuid" : "{E131F674-A7BA-408C-9109-BF50D16BE4F0}",
        "vtable_reference" : IAgVAProfile._vtable_offset + IAgVAProfile._num_methods - 1,
        "method_offsets" : { "get_ControlParameters" : 1,
                             "get_Results" : 2,
                             "get_MaxIterations" : 3,
                             "set_MaxIterations" : 4,
                             "get_EnableDisplayStatus" : 5,
                             "set_EnableDisplayStatus" : 6,
                             "get_ConvergenceCriteria" : 7,
                             "set_ConvergenceCriteria" : 8,
                             "get_EnableLineSearch" : 9,
                             "set_EnableLineSearch" : 10,
                             "get_MaxLineSearchIterations" : 11,
                             "set_MaxLineSearchIterations" : 12,
                             "get_LineSearchLowerBound" : 13,
                             "set_LineSearchLowerBound" : 14,
                             "get_LineSearchUpperBound" : 15,
                             "set_LineSearchUpperBound" : 16,
                             "get_LineSearchTolerance" : 17,
                             "set_LineSearchTolerance" : 18,
                             "get_EnableHomotopy" : 19,
                             "set_EnableHomotopy" : 20,
                             "get_HomotopySteps" : 21,
                             "set_HomotopySteps" : 22,
                             "get_DerivativeCalcMethod" : 23,
                             "set_DerivativeCalcMethod" : 24,
                             "get_ClearCorrectionsBeforeRun" : 25,
                             "set_ClearCorrectionsBeforeRun" : 26,
                             "get_EnableBPlaneNominal" : 27,
                             "set_EnableBPlaneNominal" : 28,
                             "get_EnableBPlanePerturbations" : 29,
                             "set_EnableBPlanePerturbations" : 30,
                             "get_DrawPerturbation" : 31,
                             "set_DrawPerturbation" : 32,
                             "get_ScriptingTool" : 33,
                             "get_RootFindingAlgorithm" : 34,
                             "set_RootFindingAlgorithm" : 35,
                             "get_NumIterations" : 36,
                             "get_TargeterGraphs" : 37,
                             "get_StopOnLimitCycleDetection" : 38,
                             "set_StopOnLimitCycleDetection" : 39, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAProfileDifferentialCorrector._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAProfileDifferentialCorrector from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAProfile._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAProfileDifferentialCorrector.__dict__ and type(IAgVAProfileDifferentialCorrector.__dict__[attrname]) == property:
            return IAgVAProfileDifferentialCorrector.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            IAgVAProfile.__setattr__(self, attrname, value)
    
    _get_ControlParameters_metadata = { "name" : "ControlParameters",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def ControlParameters(self) -> "IAgVADCControlCollection":
        """The list of control parameters defined for the profile."""
        return self._intf.get_property(IAgVAProfileDifferentialCorrector._metadata, IAgVAProfileDifferentialCorrector._get_ControlParameters_metadata)

    _get_Results_metadata = { "name" : "Results",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def Results(self) -> "IAgVADCResultCollection":
        """The list of results defined for the profile."""
        return self._intf.get_property(IAgVAProfileDifferentialCorrector._metadata, IAgVAProfileDifferentialCorrector._get_Results_metadata)

    _get_MaxIterations_metadata = { "name" : "MaxIterations",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.LONG_arg,) }
    @property
    def MaxIterations(self) -> int:
        """The number of complete iterations of the profile to try before stopping. Dimensionless."""
        return self._intf.get_property(IAgVAProfileDifferentialCorrector._metadata, IAgVAProfileDifferentialCorrector._get_MaxIterations_metadata)

    _set_MaxIterations_metadata = { "name" : "MaxIterations",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.LONG_arg,) }
    @MaxIterations.setter
    def MaxIterations(self, newVal:int) -> None:
        return self._intf.set_property(IAgVAProfileDifferentialCorrector._metadata, IAgVAProfileDifferentialCorrector._set_MaxIterations_metadata, newVal)

    _get_EnableDisplayStatus_metadata = { "name" : "EnableDisplayStatus",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def EnableDisplayStatus(self) -> bool:
        """If true, a page will appear during the targeting run to report the status of the targeting effort in terms of proximity to the desired value for each dependent variable in the profile."""
        return self._intf.get_property(IAgVAProfileDifferentialCorrector._metadata, IAgVAProfileDifferentialCorrector._get_EnableDisplayStatus_metadata)

    _set_EnableDisplayStatus_metadata = { "name" : "EnableDisplayStatus",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @EnableDisplayStatus.setter
    def EnableDisplayStatus(self, newVal:bool) -> None:
        return self._intf.set_property(IAgVAProfileDifferentialCorrector._metadata, IAgVAProfileDifferentialCorrector._set_EnableDisplayStatus_metadata, newVal)

    _get_ConvergenceCriteria_metadata = { "name" : "ConvergenceCriteria",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAConvergenceCriteria),) }
    @property
    def ConvergenceCriteria(self) -> "AgEVAConvergenceCriteria":
        """The convergence criteria."""
        return self._intf.get_property(IAgVAProfileDifferentialCorrector._metadata, IAgVAProfileDifferentialCorrector._get_ConvergenceCriteria_metadata)

    _set_ConvergenceCriteria_metadata = { "name" : "ConvergenceCriteria",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAConvergenceCriteria),) }
    @ConvergenceCriteria.setter
    def ConvergenceCriteria(self, newVal:"AgEVAConvergenceCriteria") -> None:
        return self._intf.set_property(IAgVAProfileDifferentialCorrector._metadata, IAgVAProfileDifferentialCorrector._set_ConvergenceCriteria_metadata, newVal)

    _get_EnableLineSearch_metadata = { "name" : "EnableLineSearch",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def EnableLineSearch(self) -> bool:
        """If true, the profile will perform a line search."""
        return self._intf.get_property(IAgVAProfileDifferentialCorrector._metadata, IAgVAProfileDifferentialCorrector._get_EnableLineSearch_metadata)

    _set_EnableLineSearch_metadata = { "name" : "EnableLineSearch",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @EnableLineSearch.setter
    def EnableLineSearch(self, newVal:bool) -> None:
        return self._intf.set_property(IAgVAProfileDifferentialCorrector._metadata, IAgVAProfileDifferentialCorrector._set_EnableLineSearch_metadata, newVal)

    _get_MaxLineSearchIterations_metadata = { "name" : "MaxLineSearchIterations",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.LONG_arg,) }
    @property
    def MaxLineSearchIterations(self) -> int:
        """The number of line search iterations to try before stopping. Dimensionless."""
        return self._intf.get_property(IAgVAProfileDifferentialCorrector._metadata, IAgVAProfileDifferentialCorrector._get_MaxLineSearchIterations_metadata)

    _set_MaxLineSearchIterations_metadata = { "name" : "MaxLineSearchIterations",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.LONG_arg,) }
    @MaxLineSearchIterations.setter
    def MaxLineSearchIterations(self, newVal:int) -> None:
        return self._intf.set_property(IAgVAProfileDifferentialCorrector._metadata, IAgVAProfileDifferentialCorrector._set_MaxLineSearchIterations_metadata, newVal)

    _get_LineSearchLowerBound_metadata = { "name" : "LineSearchLowerBound",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def LineSearchLowerBound(self) -> float:
        """The low boundary for the line search. Dimensionless."""
        return self._intf.get_property(IAgVAProfileDifferentialCorrector._metadata, IAgVAProfileDifferentialCorrector._get_LineSearchLowerBound_metadata)

    _set_LineSearchLowerBound_metadata = { "name" : "LineSearchLowerBound",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @LineSearchLowerBound.setter
    def LineSearchLowerBound(self, newVal:float) -> None:
        return self._intf.set_property(IAgVAProfileDifferentialCorrector._metadata, IAgVAProfileDifferentialCorrector._set_LineSearchLowerBound_metadata, newVal)

    _get_LineSearchUpperBound_metadata = { "name" : "LineSearchUpperBound",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def LineSearchUpperBound(self) -> float:
        """The high boundary for the line search. Dimensionless."""
        return self._intf.get_property(IAgVAProfileDifferentialCorrector._metadata, IAgVAProfileDifferentialCorrector._get_LineSearchUpperBound_metadata)

    _set_LineSearchUpperBound_metadata = { "name" : "LineSearchUpperBound",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @LineSearchUpperBound.setter
    def LineSearchUpperBound(self, newVal:float) -> None:
        return self._intf.set_property(IAgVAProfileDifferentialCorrector._metadata, IAgVAProfileDifferentialCorrector._set_LineSearchUpperBound_metadata, newVal)

    _get_LineSearchTolerance_metadata = { "name" : "LineSearchTolerance",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def LineSearchTolerance(self) -> float:
        """The tolerance for the line search. Dimensionless."""
        return self._intf.get_property(IAgVAProfileDifferentialCorrector._metadata, IAgVAProfileDifferentialCorrector._get_LineSearchTolerance_metadata)

    _set_LineSearchTolerance_metadata = { "name" : "LineSearchTolerance",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @LineSearchTolerance.setter
    def LineSearchTolerance(self, newVal:float) -> None:
        return self._intf.set_property(IAgVAProfileDifferentialCorrector._metadata, IAgVAProfileDifferentialCorrector._set_LineSearchTolerance_metadata, newVal)

    _get_EnableHomotopy_metadata = { "name" : "EnableHomotopy",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def EnableHomotopy(self) -> bool:
        """If true, the profile will divide the problem into steps to solve it."""
        return self._intf.get_property(IAgVAProfileDifferentialCorrector._metadata, IAgVAProfileDifferentialCorrector._get_EnableHomotopy_metadata)

    _set_EnableHomotopy_metadata = { "name" : "EnableHomotopy",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @EnableHomotopy.setter
    def EnableHomotopy(self, newVal:bool) -> None:
        return self._intf.set_property(IAgVAProfileDifferentialCorrector._metadata, IAgVAProfileDifferentialCorrector._set_EnableHomotopy_metadata, newVal)

    _get_HomotopySteps_metadata = { "name" : "HomotopySteps",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.LONG_arg,) }
    @property
    def HomotopySteps(self) -> int:
        """The number of steps to divide a problem into for a homotopic calculation. Dimensionless - ."""
        return self._intf.get_property(IAgVAProfileDifferentialCorrector._metadata, IAgVAProfileDifferentialCorrector._get_HomotopySteps_metadata)

    _set_HomotopySteps_metadata = { "name" : "HomotopySteps",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.LONG_arg,) }
    @HomotopySteps.setter
    def HomotopySteps(self, newVal:int) -> None:
        return self._intf.set_property(IAgVAProfileDifferentialCorrector._metadata, IAgVAProfileDifferentialCorrector._set_HomotopySteps_metadata, newVal)

    _get_DerivativeCalcMethod_metadata = { "name" : "DerivativeCalcMethod",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVADeriveCalcMethod),) }
    @property
    def DerivativeCalcMethod(self) -> "AgEVADeriveCalcMethod":
        """The derivative calculation method."""
        return self._intf.get_property(IAgVAProfileDifferentialCorrector._metadata, IAgVAProfileDifferentialCorrector._get_DerivativeCalcMethod_metadata)

    _set_DerivativeCalcMethod_metadata = { "name" : "DerivativeCalcMethod",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVADeriveCalcMethod),) }
    @DerivativeCalcMethod.setter
    def DerivativeCalcMethod(self, newVal:"AgEVADeriveCalcMethod") -> None:
        return self._intf.set_property(IAgVAProfileDifferentialCorrector._metadata, IAgVAProfileDifferentialCorrector._set_DerivativeCalcMethod_metadata, newVal)

    _get_ClearCorrectionsBeforeRun_metadata = { "name" : "ClearCorrectionsBeforeRun",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def ClearCorrectionsBeforeRun(self) -> bool:
        """Clear Corrections Before Each Run - if true, the differential corrector is automatically reset each time that it is run, discarding information that was computed the last time it was run."""
        return self._intf.get_property(IAgVAProfileDifferentialCorrector._metadata, IAgVAProfileDifferentialCorrector._get_ClearCorrectionsBeforeRun_metadata)

    _set_ClearCorrectionsBeforeRun_metadata = { "name" : "ClearCorrectionsBeforeRun",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @ClearCorrectionsBeforeRun.setter
    def ClearCorrectionsBeforeRun(self, newVal:bool) -> None:
        return self._intf.set_property(IAgVAProfileDifferentialCorrector._metadata, IAgVAProfileDifferentialCorrector._set_ClearCorrectionsBeforeRun_metadata, newVal)

    _get_EnableBPlaneNominal_metadata = { "name" : "EnableBPlaneNominal",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def EnableBPlaneNominal(self) -> bool:
        """If true, Astrogator will update the display of B-Planes for the nominal run of each iteration during the targeting process."""
        return self._intf.get_property(IAgVAProfileDifferentialCorrector._metadata, IAgVAProfileDifferentialCorrector._get_EnableBPlaneNominal_metadata)

    _set_EnableBPlaneNominal_metadata = { "name" : "EnableBPlaneNominal",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @EnableBPlaneNominal.setter
    def EnableBPlaneNominal(self, newVal:bool) -> None:
        return self._intf.set_property(IAgVAProfileDifferentialCorrector._metadata, IAgVAProfileDifferentialCorrector._set_EnableBPlaneNominal_metadata, newVal)

    _get_EnableBPlanePerturbations_metadata = { "name" : "EnableBPlanePerturbations",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def EnableBPlanePerturbations(self) -> bool:
        """If true, Astrogator will update the display of B-Planes for both of the perturbations of each iteration during the targeting process."""
        return self._intf.get_property(IAgVAProfileDifferentialCorrector._metadata, IAgVAProfileDifferentialCorrector._get_EnableBPlanePerturbations_metadata)

    _set_EnableBPlanePerturbations_metadata = { "name" : "EnableBPlanePerturbations",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @EnableBPlanePerturbations.setter
    def EnableBPlanePerturbations(self, newVal:bool) -> None:
        return self._intf.set_property(IAgVAProfileDifferentialCorrector._metadata, IAgVAProfileDifferentialCorrector._set_EnableBPlanePerturbations_metadata, newVal)

    _get_DrawPerturbation_metadata = { "name" : "DrawPerturbation",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVADrawPerturbation),) }
    @property
    def DrawPerturbation(self) -> "AgEVADrawPerturbation":
        """Defines the display of perturbations in the 2D and 3D Graphics windows, if you have set Astrogator to draw while calculating."""
        return self._intf.get_property(IAgVAProfileDifferentialCorrector._metadata, IAgVAProfileDifferentialCorrector._get_DrawPerturbation_metadata)

    _set_DrawPerturbation_metadata = { "name" : "DrawPerturbation",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVADrawPerturbation),) }
    @DrawPerturbation.setter
    def DrawPerturbation(self, newVal:"AgEVADrawPerturbation") -> None:
        return self._intf.set_property(IAgVAProfileDifferentialCorrector._metadata, IAgVAProfileDifferentialCorrector._set_DrawPerturbation_metadata, newVal)

    _get_ScriptingTool_metadata = { "name" : "ScriptingTool",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def ScriptingTool(self) -> "IAgVAScriptingTool":
        """Returns the Scripting tool for the sequence."""
        return self._intf.get_property(IAgVAProfileDifferentialCorrector._metadata, IAgVAProfileDifferentialCorrector._get_ScriptingTool_metadata)

    _get_RootFindingAlgorithm_metadata = { "name" : "RootFindingAlgorithm",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVARootFindingAlgorithm),) }
    @property
    def RootFindingAlgorithm(self) -> "AgEVARootFindingAlgorithm":
        """The root-finding algorithm to use."""
        return self._intf.get_property(IAgVAProfileDifferentialCorrector._metadata, IAgVAProfileDifferentialCorrector._get_RootFindingAlgorithm_metadata)

    _set_RootFindingAlgorithm_metadata = { "name" : "RootFindingAlgorithm",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVARootFindingAlgorithm),) }
    @RootFindingAlgorithm.setter
    def RootFindingAlgorithm(self, pVal:"AgEVARootFindingAlgorithm") -> None:
        return self._intf.set_property(IAgVAProfileDifferentialCorrector._metadata, IAgVAProfileDifferentialCorrector._set_RootFindingAlgorithm_metadata, pVal)

    _get_NumIterations_metadata = { "name" : "NumIterations",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.LONG_arg,) }
    @property
    def NumIterations(self) -> int:
        """The number of iterations of the last run"""
        return self._intf.get_property(IAgVAProfileDifferentialCorrector._metadata, IAgVAProfileDifferentialCorrector._get_NumIterations_metadata)

    _get_TargeterGraphs_metadata = { "name" : "TargeterGraphs",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def TargeterGraphs(self) -> "IAgVATargeterGraphCollection":
        """Graphs"""
        return self._intf.get_property(IAgVAProfileDifferentialCorrector._metadata, IAgVAProfileDifferentialCorrector._get_TargeterGraphs_metadata)

    _get_StopOnLimitCycleDetection_metadata = { "name" : "StopOnLimitCycleDetection",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def StopOnLimitCycleDetection(self) -> bool:
        """If true, Astrogator will stop targeting if a limit cycle is detected."""
        return self._intf.get_property(IAgVAProfileDifferentialCorrector._metadata, IAgVAProfileDifferentialCorrector._get_StopOnLimitCycleDetection_metadata)

    _set_StopOnLimitCycleDetection_metadata = { "name" : "StopOnLimitCycleDetection",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @StopOnLimitCycleDetection.setter
    def StopOnLimitCycleDetection(self, newVal:bool) -> None:
        return self._intf.set_property(IAgVAProfileDifferentialCorrector._metadata, IAgVAProfileDifferentialCorrector._set_StopOnLimitCycleDetection_metadata, newVal)


agcls.AgClassCatalog.add_catalog_entry("{E131F674-A7BA-408C-9109-BF50D16BE4F0}", IAgVAProfileDifferentialCorrector)
agcls.AgTypeNameMap["IAgVAProfileDifferentialCorrector"] = IAgVAProfileDifferentialCorrector

class IAgVAProfileChangeManeuverType(IAgVAProfile):
    """Properties for a Change Maneuver Type profile."""
    _num_methods = 4
    _vtable_offset = IAgVAProfile._vtable_offset + IAgVAProfile._num_methods
    _metadata = {
        "uuid" : "{17F50A61-1E84-4060-A86A-93434A5522D5}",
        "vtable_reference" : IAgVAProfile._vtable_offset + IAgVAProfile._num_methods - 1,
        "method_offsets" : { "get_Segment" : 1,
                             "set_Segment" : 2,
                             "get_ManeuverType" : 3,
                             "set_ManeuverType" : 4, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAProfileChangeManeuverType._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAProfileChangeManeuverType from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAProfile._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAProfileChangeManeuverType.__dict__ and type(IAgVAProfileChangeManeuverType.__dict__[attrname]) == property:
            return IAgVAProfileChangeManeuverType.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            IAgVAProfile.__setattr__(self, attrname, value)
    
    _get_Segment_metadata = { "name" : "Segment",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def Segment(self) -> "IAgVAMCSManeuver":
        """The targeted maneuver segment."""
        return self._intf.get_property(IAgVAProfileChangeManeuverType._metadata, IAgVAProfileChangeManeuverType._get_Segment_metadata)

    _set_Segment_metadata = { "name" : "Segment",
            "arg_types" : (agcom.PVOID,),
            "marshallers" : (agmarshall.AgInterface_in_arg("IAgVAMCSManeuver"),) }
    @Segment.setter
    def Segment(self, pSegment:"IAgVAMCSManeuver") -> None:
        return self._intf.set_property(IAgVAProfileChangeManeuverType._metadata, IAgVAProfileChangeManeuverType._set_Segment_metadata, pSegment)

    _get_ManeuverType_metadata = { "name" : "ManeuverType",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAManeuverType),) }
    @property
    def ManeuverType(self) -> "AgEVAManeuverType":
        """The new maneuver type for the targeted segment."""
        return self._intf.get_property(IAgVAProfileChangeManeuverType._metadata, IAgVAProfileChangeManeuverType._get_ManeuverType_metadata)

    _set_ManeuverType_metadata = { "name" : "ManeuverType",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAManeuverType),) }
    @ManeuverType.setter
    def ManeuverType(self, newVal:"AgEVAManeuverType") -> None:
        return self._intf.set_property(IAgVAProfileChangeManeuverType._metadata, IAgVAProfileChangeManeuverType._set_ManeuverType_metadata, newVal)


agcls.AgClassCatalog.add_catalog_entry("{17F50A61-1E84-4060-A86A-93434A5522D5}", IAgVAProfileChangeManeuverType)
agcls.AgTypeNameMap["IAgVAProfileChangeManeuverType"] = IAgVAProfileChangeManeuverType

class IAgVAProfileScriptingTool(IAgVAProfile):
    """Properties for a Scripting Tool profile."""
    _num_methods = 10
    _vtable_offset = IAgVAProfile._vtable_offset + IAgVAProfile._num_methods
    _metadata = {
        "uuid" : "{8D1192C7-8230-4475-BAFF-A135F9EE0ABD}",
        "vtable_reference" : IAgVAProfile._vtable_offset + IAgVAProfile._num_methods - 1,
        "method_offsets" : { "get_Enable" : 1,
                             "set_Enable" : 2,
                             "get_SegmentProperties" : 3,
                             "get_CalcObjects" : 4,
                             "get_Parameters" : 5,
                             "get_LanguageType" : 6,
                             "set_LanguageType" : 7,
                             "ScriptText" : 8,
                             "CopyToClipboard" : 9,
                             "PasteFromClipboard" : 10, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAProfileScriptingTool._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAProfileScriptingTool from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAProfile._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAProfileScriptingTool.__dict__ and type(IAgVAProfileScriptingTool.__dict__[attrname]) == property:
            return IAgVAProfileScriptingTool.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            IAgVAProfile.__setattr__(self, attrname, value)
    
    _get_Enable_metadata = { "name" : "Enable",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def Enable(self) -> bool:
        """If true, the scripting tool will be used."""
        return self._intf.get_property(IAgVAProfileScriptingTool._metadata, IAgVAProfileScriptingTool._get_Enable_metadata)

    _set_Enable_metadata = { "name" : "Enable",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @Enable.setter
    def Enable(self, inVal:bool) -> None:
        return self._intf.set_property(IAgVAProfileScriptingTool._metadata, IAgVAProfileScriptingTool._set_Enable_metadata, inVal)

    _get_SegmentProperties_metadata = { "name" : "SegmentProperties",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def SegmentProperties(self) -> "IAgVAScriptingSegmentCollection":
        """Returns the collection of the segment properties."""
        return self._intf.get_property(IAgVAProfileScriptingTool._metadata, IAgVAProfileScriptingTool._get_SegmentProperties_metadata)

    _get_CalcObjects_metadata = { "name" : "CalcObjects",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def CalcObjects(self) -> "IAgVAScriptingCalcObjectCollection":
        """Returns the collection of the calc objects."""
        return self._intf.get_property(IAgVAProfileScriptingTool._metadata, IAgVAProfileScriptingTool._get_CalcObjects_metadata)

    _get_Parameters_metadata = { "name" : "Parameters",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def Parameters(self) -> "IAgVAScriptingParameterCollection":
        """Returns the collection of parameters."""
        return self._intf.get_property(IAgVAProfileScriptingTool._metadata, IAgVAProfileScriptingTool._get_Parameters_metadata)

    _get_LanguageType_metadata = { "name" : "LanguageType",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVALanguage),) }
    @property
    def LanguageType(self) -> "AgEVALanguage":
        """The scripting language being used."""
        return self._intf.get_property(IAgVAProfileScriptingTool._metadata, IAgVAProfileScriptingTool._get_LanguageType_metadata)

    _set_LanguageType_metadata = { "name" : "LanguageType",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVALanguage),) }
    @LanguageType.setter
    def LanguageType(self, inVal:"AgEVALanguage") -> None:
        return self._intf.set_property(IAgVAProfileScriptingTool._metadata, IAgVAProfileScriptingTool._set_LanguageType_metadata, inVal)

    _ScriptText_metadata = { "name" : "ScriptText",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    def ScriptText(self, script:str) -> None:
        """Injects the script into the scripting tool."""
        return self._intf.invoke(IAgVAProfileScriptingTool._metadata, IAgVAProfileScriptingTool._ScriptText_metadata, script)

    _CopyToClipboard_metadata = { "name" : "CopyToClipboard",
            "arg_types" : (),
            "marshallers" : () }
    def CopyToClipboard(self) -> None:
        """Copies entire scripting tool to clipboard."""
        return self._intf.invoke(IAgVAProfileScriptingTool._metadata, IAgVAProfileScriptingTool._CopyToClipboard_metadata, )

    _PasteFromClipboard_metadata = { "name" : "PasteFromClipboard",
            "arg_types" : (),
            "marshallers" : () }
    def PasteFromClipboard(self) -> None:
        """Replaces entire scripting tool with scripting tool in clipboard."""
        return self._intf.invoke(IAgVAProfileScriptingTool._metadata, IAgVAProfileScriptingTool._PasteFromClipboard_metadata, )


agcls.AgClassCatalog.add_catalog_entry("{8D1192C7-8230-4475-BAFF-A135F9EE0ABD}", IAgVAProfileScriptingTool)
agcls.AgTypeNameMap["IAgVAProfileScriptingTool"] = IAgVAProfileScriptingTool

class IAgVAProfileChangeReturnSegment(IAgVAProfile):
    """Properties for a Change Return Segment profile."""
    _num_methods = 5
    _vtable_offset = IAgVAProfile._vtable_offset + IAgVAProfile._num_methods
    _metadata = {
        "uuid" : "{B65E05D2-1B1C-414C-A57E-A93333A5D57C}",
        "vtable_reference" : IAgVAProfile._vtable_offset + IAgVAProfile._num_methods - 1,
        "method_offsets" : { "get_SegmentName" : 1,
                             "set_SegmentName" : 2,
                             "SetSegment" : 3,
                             "get_State" : 4,
                             "set_State" : 5, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAProfileChangeReturnSegment._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAProfileChangeReturnSegment from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAProfile._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAProfileChangeReturnSegment.__dict__ and type(IAgVAProfileChangeReturnSegment.__dict__[attrname]) == property:
            return IAgVAProfileChangeReturnSegment.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            IAgVAProfile.__setattr__(self, attrname, value)
    
    _get_SegmentName_metadata = { "name" : "SegmentName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def SegmentName(self) -> str:
        """The targeted return segment."""
        return self._intf.get_property(IAgVAProfileChangeReturnSegment._metadata, IAgVAProfileChangeReturnSegment._get_SegmentName_metadata)

    _set_SegmentName_metadata = { "name" : "SegmentName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @SegmentName.setter
    def SegmentName(self, newVal:str) -> None:
        return self._intf.set_property(IAgVAProfileChangeReturnSegment._metadata, IAgVAProfileChangeReturnSegment._set_SegmentName_metadata, newVal)

    _SetSegment_metadata = { "name" : "SetSegment",
            "arg_types" : (agcom.PVOID,),
            "marshallers" : (agmarshall.AgInterface_in_arg("IAgVAMCSReturn"),) }
    def SetSegment(self, pVAMCSReturn:"IAgVAMCSReturn") -> None:
        """Sets the return segment to target."""
        return self._intf.invoke(IAgVAProfileChangeReturnSegment._metadata, IAgVAProfileChangeReturnSegment._SetSegment_metadata, pVAMCSReturn)

    _get_State_metadata = { "name" : "State",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAReturnControl),) }
    @property
    def State(self) -> "AgEVAReturnControl":
        """The new state for the targeted return segment."""
        return self._intf.get_property(IAgVAProfileChangeReturnSegment._metadata, IAgVAProfileChangeReturnSegment._get_State_metadata)

    _set_State_metadata = { "name" : "State",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAReturnControl),) }
    @State.setter
    def State(self, newVal:"AgEVAReturnControl") -> None:
        return self._intf.set_property(IAgVAProfileChangeReturnSegment._metadata, IAgVAProfileChangeReturnSegment._set_State_metadata, newVal)


agcls.AgClassCatalog.add_catalog_entry("{B65E05D2-1B1C-414C-A57E-A93333A5D57C}", IAgVAProfileChangeReturnSegment)
agcls.AgTypeNameMap["IAgVAProfileChangeReturnSegment"] = IAgVAProfileChangeReturnSegment

class IAgVAProfileChangePropagator(IAgVAProfile):
    """Properties for a Change Propagator profile."""
    _num_methods = 5
    _vtable_offset = IAgVAProfile._vtable_offset + IAgVAProfile._num_methods
    _metadata = {
        "uuid" : "{FB6704EC-C787-4051-BE39-1584C5CAD0F6}",
        "vtable_reference" : IAgVAProfile._vtable_offset + IAgVAProfile._num_methods - 1,
        "method_offsets" : { "get_SegmentName" : 1,
                             "set_SegmentName" : 2,
                             "SetSegment" : 3,
                             "get_PropagatorName" : 4,
                             "set_PropagatorName" : 5, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAProfileChangePropagator._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAProfileChangePropagator from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAProfile._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAProfileChangePropagator.__dict__ and type(IAgVAProfileChangePropagator.__dict__[attrname]) == property:
            return IAgVAProfileChangePropagator.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            IAgVAProfile.__setattr__(self, attrname, value)
    
    _get_SegmentName_metadata = { "name" : "SegmentName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def SegmentName(self) -> str:
        """The name of the profile."""
        return self._intf.get_property(IAgVAProfileChangePropagator._metadata, IAgVAProfileChangePropagator._get_SegmentName_metadata)

    _set_SegmentName_metadata = { "name" : "SegmentName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @SegmentName.setter
    def SegmentName(self, newVal:str) -> None:
        return self._intf.set_property(IAgVAProfileChangePropagator._metadata, IAgVAProfileChangePropagator._set_SegmentName_metadata, newVal)

    _SetSegment_metadata = { "name" : "SetSegment",
            "arg_types" : (agcom.PVOID,),
            "marshallers" : (agmarshall.AgInterface_in_arg("IAgVAMCSSegment"),) }
    def SetSegment(self, pVAMCSSegment:"IAgVAMCSSegment") -> None:
        """The targeted segment."""
        return self._intf.invoke(IAgVAProfileChangePropagator._metadata, IAgVAProfileChangePropagator._SetSegment_metadata, pVAMCSSegment)

    _get_PropagatorName_metadata = { "name" : "PropagatorName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def PropagatorName(self) -> str:
        """The new propagator's name."""
        return self._intf.get_property(IAgVAProfileChangePropagator._metadata, IAgVAProfileChangePropagator._get_PropagatorName_metadata)

    _set_PropagatorName_metadata = { "name" : "PropagatorName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @PropagatorName.setter
    def PropagatorName(self, newVal:str) -> None:
        return self._intf.set_property(IAgVAProfileChangePropagator._metadata, IAgVAProfileChangePropagator._set_PropagatorName_metadata, newVal)


agcls.AgClassCatalog.add_catalog_entry("{FB6704EC-C787-4051-BE39-1584C5CAD0F6}", IAgVAProfileChangePropagator)
agcls.AgTypeNameMap["IAgVAProfileChangePropagator"] = IAgVAProfileChangePropagator

class IAgVAProfileChangeStopSegment(IAgVAProfile):
    """Properties for a Change Stop Segment profile."""
    _num_methods = 5
    _vtable_offset = IAgVAProfile._vtable_offset + IAgVAProfile._num_methods
    _metadata = {
        "uuid" : "{1B9A0E28-8C19-448D-9CD1-AB10B492C767}",
        "vtable_reference" : IAgVAProfile._vtable_offset + IAgVAProfile._num_methods - 1,
        "method_offsets" : { "get_SegmentName" : 1,
                             "set_SegmentName" : 2,
                             "SetSegment" : 3,
                             "get_State" : 4,
                             "set_State" : 5, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAProfileChangeStopSegment._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAProfileChangeStopSegment from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAProfile._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAProfileChangeStopSegment.__dict__ and type(IAgVAProfileChangeStopSegment.__dict__[attrname]) == property:
            return IAgVAProfileChangeStopSegment.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            IAgVAProfile.__setattr__(self, attrname, value)
    
    _get_SegmentName_metadata = { "name" : "SegmentName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def SegmentName(self) -> str:
        """The targeted stop segment."""
        return self._intf.get_property(IAgVAProfileChangeStopSegment._metadata, IAgVAProfileChangeStopSegment._get_SegmentName_metadata)

    _set_SegmentName_metadata = { "name" : "SegmentName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @SegmentName.setter
    def SegmentName(self, newVal:str) -> None:
        return self._intf.set_property(IAgVAProfileChangeStopSegment._metadata, IAgVAProfileChangeStopSegment._set_SegmentName_metadata, newVal)

    _SetSegment_metadata = { "name" : "SetSegment",
            "arg_types" : (agcom.PVOID,),
            "marshallers" : (agmarshall.AgInterface_in_arg("IAgVAMCSStop"),) }
    def SetSegment(self, pVAMCSStop:"IAgVAMCSStop") -> None:
        """Sets the stop segment to target."""
        return self._intf.invoke(IAgVAProfileChangeStopSegment._metadata, IAgVAProfileChangeStopSegment._SetSegment_metadata, pVAMCSStop)

    _get_State_metadata = { "name" : "State",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAState),) }
    @property
    def State(self) -> "AgEVAState":
        """The new state of the targeted stop segment."""
        return self._intf.get_property(IAgVAProfileChangeStopSegment._metadata, IAgVAProfileChangeStopSegment._get_State_metadata)

    _set_State_metadata = { "name" : "State",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAState),) }
    @State.setter
    def State(self, newVal:"AgEVAState") -> None:
        return self._intf.set_property(IAgVAProfileChangeStopSegment._metadata, IAgVAProfileChangeStopSegment._set_State_metadata, newVal)


agcls.AgClassCatalog.add_catalog_entry("{1B9A0E28-8C19-448D-9CD1-AB10B492C767}", IAgVAProfileChangeStopSegment)
agcls.AgTypeNameMap["IAgVAProfileChangeStopSegment"] = IAgVAProfileChangeStopSegment

class IAgVAProfileChangeStoppingConditionState(IAgVAProfile):
    """Properties for a Change Stopping Condition State profile."""
    _num_methods = 8
    _vtable_offset = IAgVAProfile._vtable_offset + IAgVAProfile._num_methods
    _metadata = {
        "uuid" : "{977C9F84-852A-4B5D-861B-8F9E3809CE7D}",
        "vtable_reference" : IAgVAProfile._vtable_offset + IAgVAProfile._num_methods - 1,
        "method_offsets" : { "get_SegmentName" : 1,
                             "set_SegmentName" : 2,
                             "SetSegment" : 3,
                             "get_State" : 4,
                             "set_State" : 5,
                             "SetTrigger" : 6,
                             "get_TriggerName" : 7,
                             "set_TriggerName" : 8, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAProfileChangeStoppingConditionState._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAProfileChangeStoppingConditionState from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAProfile._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAProfileChangeStoppingConditionState.__dict__ and type(IAgVAProfileChangeStoppingConditionState.__dict__[attrname]) == property:
            return IAgVAProfileChangeStoppingConditionState.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            IAgVAProfile.__setattr__(self, attrname, value)
    
    _get_SegmentName_metadata = { "name" : "SegmentName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def SegmentName(self) -> str:
        """The segment that contains the targeted stopping condition."""
        return self._intf.get_property(IAgVAProfileChangeStoppingConditionState._metadata, IAgVAProfileChangeStoppingConditionState._get_SegmentName_metadata)

    _set_SegmentName_metadata = { "name" : "SegmentName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @SegmentName.setter
    def SegmentName(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAProfileChangeStoppingConditionState._metadata, IAgVAProfileChangeStoppingConditionState._set_SegmentName_metadata, inVal)

    _SetSegment_metadata = { "name" : "SetSegment",
            "arg_types" : (agcom.PVOID,),
            "marshallers" : (agmarshall.AgInterface_in_arg("IAgVAMCSSegment"),) }
    def SetSegment(self, mCSSegment:"IAgVAMCSSegment") -> None:
        """Sets the targeted segment."""
        return self._intf.invoke(IAgVAProfileChangeStoppingConditionState._metadata, IAgVAProfileChangeStoppingConditionState._SetSegment_metadata, mCSSegment)

    _get_State_metadata = { "name" : "State",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAState),) }
    @property
    def State(self) -> "AgEVAState":
        """The new state of the targeted stopping condition."""
        return self._intf.get_property(IAgVAProfileChangeStoppingConditionState._metadata, IAgVAProfileChangeStoppingConditionState._get_State_metadata)

    _set_State_metadata = { "name" : "State",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAState),) }
    @State.setter
    def State(self, newVal:"AgEVAState") -> None:
        return self._intf.set_property(IAgVAProfileChangeStoppingConditionState._metadata, IAgVAProfileChangeStoppingConditionState._set_State_metadata, newVal)

    _SetTrigger_metadata = { "name" : "SetTrigger",
            "arg_types" : (agcom.PVOID,),
            "marshallers" : (agmarshall.AgInterface_in_arg("IAgVAStoppingCondition"),) }
    def SetTrigger(self, stoppingCondition:"IAgVAStoppingCondition") -> None:
        """The targeted stopping condition."""
        return self._intf.invoke(IAgVAProfileChangeStoppingConditionState._metadata, IAgVAProfileChangeStoppingConditionState._SetTrigger_metadata, stoppingCondition)

    _get_TriggerName_metadata = { "name" : "TriggerName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def TriggerName(self) -> str:
        """The name of the targeted stopping condition."""
        return self._intf.get_property(IAgVAProfileChangeStoppingConditionState._metadata, IAgVAProfileChangeStoppingConditionState._get_TriggerName_metadata)

    _set_TriggerName_metadata = { "name" : "TriggerName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @TriggerName.setter
    def TriggerName(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAProfileChangeStoppingConditionState._metadata, IAgVAProfileChangeStoppingConditionState._set_TriggerName_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{977C9F84-852A-4B5D-861B-8F9E3809CE7D}", IAgVAProfileChangeStoppingConditionState)
agcls.AgTypeNameMap["IAgVAProfileChangeStoppingConditionState"] = IAgVAProfileChangeStoppingConditionState

class IAgVAProfileSeedFiniteManeuver(IAgVAProfile):
    """Properties for a Seed Finite Maneuver segment."""
    _num_methods = 5
    _vtable_offset = IAgVAProfile._vtable_offset + IAgVAProfile._num_methods
    _metadata = {
        "uuid" : "{C56665D5-CEF3-47A1-854E-64CB0A8CA9CA}",
        "vtable_reference" : IAgVAProfile._vtable_offset + IAgVAProfile._num_methods - 1,
        "method_offsets" : { "get_SegmentName" : 1,
                             "set_SegmentName" : 2,
                             "SetSegment" : 3,
                             "get_LeaveAllActiveStoppingConditionsActive" : 4,
                             "set_LeaveAllActiveStoppingConditionsActive" : 5, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAProfileSeedFiniteManeuver._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAProfileSeedFiniteManeuver from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAProfile._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAProfileSeedFiniteManeuver.__dict__ and type(IAgVAProfileSeedFiniteManeuver.__dict__[attrname]) == property:
            return IAgVAProfileSeedFiniteManeuver.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            IAgVAProfile.__setattr__(self, attrname, value)
    
    _get_SegmentName_metadata = { "name" : "SegmentName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def SegmentName(self) -> str:
        """The targeted maneuver segment."""
        return self._intf.get_property(IAgVAProfileSeedFiniteManeuver._metadata, IAgVAProfileSeedFiniteManeuver._get_SegmentName_metadata)

    _set_SegmentName_metadata = { "name" : "SegmentName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @SegmentName.setter
    def SegmentName(self, newVal:str) -> None:
        return self._intf.set_property(IAgVAProfileSeedFiniteManeuver._metadata, IAgVAProfileSeedFiniteManeuver._set_SegmentName_metadata, newVal)

    _SetSegment_metadata = { "name" : "SetSegment",
            "arg_types" : (agcom.PVOID,),
            "marshallers" : (agmarshall.AgInterface_in_arg("IAgVAMCSManeuver"),) }
    def SetSegment(self, pVAMCSManeuver:"IAgVAMCSManeuver") -> None:
        """Sets the maneuver segment to target."""
        return self._intf.invoke(IAgVAProfileSeedFiniteManeuver._metadata, IAgVAProfileSeedFiniteManeuver._SetSegment_metadata, pVAMCSManeuver)

    _get_LeaveAllActiveStoppingConditionsActive_metadata = { "name" : "LeaveAllActiveStoppingConditionsActive",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def LeaveAllActiveStoppingConditionsActive(self) -> bool:
        """If true, all active stopping conditions on the seeded maneuver will remain active during run."""
        return self._intf.get_property(IAgVAProfileSeedFiniteManeuver._metadata, IAgVAProfileSeedFiniteManeuver._get_LeaveAllActiveStoppingConditionsActive_metadata)

    _set_LeaveAllActiveStoppingConditionsActive_metadata = { "name" : "LeaveAllActiveStoppingConditionsActive",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @LeaveAllActiveStoppingConditionsActive.setter
    def LeaveAllActiveStoppingConditionsActive(self, newVal:bool) -> None:
        return self._intf.set_property(IAgVAProfileSeedFiniteManeuver._metadata, IAgVAProfileSeedFiniteManeuver._set_LeaveAllActiveStoppingConditionsActive_metadata, newVal)


agcls.AgClassCatalog.add_catalog_entry("{C56665D5-CEF3-47A1-854E-64CB0A8CA9CA}", IAgVAProfileSeedFiniteManeuver)
agcls.AgTypeNameMap["IAgVAProfileSeedFiniteManeuver"] = IAgVAProfileSeedFiniteManeuver

class IAgVAProfileRunOnce(IAgVAProfile):
    """Properties for a Run Once profile."""
    _num_methods = 0
    _vtable_offset = IAgVAProfile._vtable_offset + IAgVAProfile._num_methods
    _metadata = {
        "uuid" : "{75574EA3-277E-4A6D-9529-3342088679DB}",
        "vtable_reference" : IAgVAProfile._vtable_offset + IAgVAProfile._num_methods - 1,
        "method_offsets" : {  }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAProfileRunOnce._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAProfileRunOnce from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAProfile._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAProfileRunOnce.__dict__ and type(IAgVAProfileRunOnce.__dict__[attrname]) == property:
            return IAgVAProfileRunOnce.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            IAgVAProfile.__setattr__(self, attrname, value)
    

agcls.AgClassCatalog.add_catalog_entry("{75574EA3-277E-4A6D-9529-3342088679DB}", IAgVAProfileRunOnce)
agcls.AgTypeNameMap["IAgVAProfileRunOnce"] = IAgVAProfileRunOnce

class IAgVAUserVariableDefinition(object):
    """Properties for a User Variable definition."""
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{25F2A622-8F6A-4CBB-91C6-ED5AD9C24028}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_UnitDimension" : 1,
                             "set_UnitDimension" : 2,
                             "get_VariableName" : 3,
                             "set_VariableName" : 4, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAUserVariableDefinition._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAUserVariableDefinition from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAUserVariableDefinition.__dict__ and type(IAgVAUserVariableDefinition.__dict__[attrname]) == property:
            return IAgVAUserVariableDefinition.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAUserVariableDefinition.")
    
    _get_UnitDimension_metadata = { "name" : "UnitDimension",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def UnitDimension(self) -> str:
        """The dimension of the user variable."""
        return self._intf.get_property(IAgVAUserVariableDefinition._metadata, IAgVAUserVariableDefinition._get_UnitDimension_metadata)

    _set_UnitDimension_metadata = { "name" : "UnitDimension",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @UnitDimension.setter
    def UnitDimension(self, inVal:str) -> None:
        """The dimension of the user variable."""
        return self._intf.set_property(IAgVAUserVariableDefinition._metadata, IAgVAUserVariableDefinition._set_UnitDimension_metadata, inVal)

    _get_VariableName_metadata = { "name" : "VariableName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def VariableName(self) -> str:
        """The name of the user variable."""
        return self._intf.get_property(IAgVAUserVariableDefinition._metadata, IAgVAUserVariableDefinition._get_VariableName_metadata)

    _set_VariableName_metadata = { "name" : "VariableName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @VariableName.setter
    def VariableName(self, inVal:str) -> None:
        """The name of the user variable."""
        return self._intf.set_property(IAgVAUserVariableDefinition._metadata, IAgVAUserVariableDefinition._set_VariableName_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{25F2A622-8F6A-4CBB-91C6-ED5AD9C24028}", IAgVAUserVariableDefinition)
agcls.AgTypeNameMap["IAgVAUserVariableDefinition"] = IAgVAUserVariableDefinition

class IAgVAUserVariable(object):
    """The properties for a User Variable initial value."""
    _num_methods = 8
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{31B617D6-AE6D-46CE-845D-90FFCD7A5B13}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_UnitDimension" : 1,
                             "get_VariableName" : 2,
                             "get_VariableValue" : 3,
                             "set_VariableValue" : 4,
                             "EnableControlParameter" : 5,
                             "DisableControlParameter" : 6,
                             "IsControlParameterEnabled" : 7,
                             "get_ControlParametersAvailable" : 8, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAUserVariable._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAUserVariable from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAUserVariable.__dict__ and type(IAgVAUserVariable.__dict__[attrname]) == property:
            return IAgVAUserVariable.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAUserVariable.")
    
    _get_UnitDimension_metadata = { "name" : "UnitDimension",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def UnitDimension(self) -> str:
        """The dimension of the user variable."""
        return self._intf.get_property(IAgVAUserVariable._metadata, IAgVAUserVariable._get_UnitDimension_metadata)

    _get_VariableName_metadata = { "name" : "VariableName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def VariableName(self) -> str:
        """The name of the user variable."""
        return self._intf.get_property(IAgVAUserVariable._metadata, IAgVAUserVariable._get_VariableName_metadata)

    _get_VariableValue_metadata = { "name" : "VariableValue",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def VariableValue(self) -> typing.Any:
        """The initial value of the user variable."""
        return self._intf.get_property(IAgVAUserVariable._metadata, IAgVAUserVariable._get_VariableValue_metadata)

    _set_VariableValue_metadata = { "name" : "VariableValue",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @VariableValue.setter
    def VariableValue(self, inVal:typing.Any) -> None:
        """The initial value of the user variable."""
        return self._intf.set_property(IAgVAUserVariable._metadata, IAgVAUserVariable._set_VariableValue_metadata, inVal)

    _EnableControlParameter_metadata = { "name" : "EnableControlParameter",
            "arg_types" : (),
            "marshallers" : () }
    def EnableControlParameter(self) -> None:
        """Enables or disables the specified control parameter."""
        return self._intf.invoke(IAgVAUserVariable._metadata, IAgVAUserVariable._EnableControlParameter_metadata, )

    _DisableControlParameter_metadata = { "name" : "DisableControlParameter",
            "arg_types" : (),
            "marshallers" : () }
    def DisableControlParameter(self) -> None:
        """Disables the specified control parameter."""
        return self._intf.invoke(IAgVAUserVariable._metadata, IAgVAUserVariable._DisableControlParameter_metadata, )

    _IsControlParameterEnabled_metadata = { "name" : "IsControlParameterEnabled",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    def IsControlParameterEnabled(self) -> bool:
        """Sees if the specified control is enabled."""
        return self._intf.invoke(IAgVAUserVariable._metadata, IAgVAUserVariable._IsControlParameterEnabled_metadata, out_arg())

    _get_ControlParametersAvailable_metadata = { "name" : "ControlParametersAvailable",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def ControlParametersAvailable(self) -> bool:
        """Returns whether or not the control parameters can be set."""
        return self._intf.get_property(IAgVAUserVariable._metadata, IAgVAUserVariable._get_ControlParametersAvailable_metadata)


agcls.AgClassCatalog.add_catalog_entry("{31B617D6-AE6D-46CE-845D-90FFCD7A5B13}", IAgVAUserVariable)
agcls.AgTypeNameMap["IAgVAUserVariable"] = IAgVAUserVariable

class IAgVAUserVariableUpdate(object):
    """Properties for a User Variable update."""
    _num_methods = 10
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{14F87E74-D85B-40D1-86FF-97E7F514FCF7}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_UnitDimension" : 1,
                             "get_VariableName" : 2,
                             "get_VariableValue" : 3,
                             "set_VariableValue" : 4,
                             "get_VariableAction" : 5,
                             "set_VariableAction" : 6,
                             "EnableControlParameter" : 7,
                             "DisableControlParameter" : 8,
                             "IsControlParameterEnabled" : 9,
                             "get_ControlParametersAvailable" : 10, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAUserVariableUpdate._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAUserVariableUpdate from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAUserVariableUpdate.__dict__ and type(IAgVAUserVariableUpdate.__dict__[attrname]) == property:
            return IAgVAUserVariableUpdate.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAUserVariableUpdate.")
    
    _get_UnitDimension_metadata = { "name" : "UnitDimension",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def UnitDimension(self) -> str:
        """The dimension of the user variable."""
        return self._intf.get_property(IAgVAUserVariableUpdate._metadata, IAgVAUserVariableUpdate._get_UnitDimension_metadata)

    _get_VariableName_metadata = { "name" : "VariableName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def VariableName(self) -> str:
        """The name of the user variable."""
        return self._intf.get_property(IAgVAUserVariableUpdate._metadata, IAgVAUserVariableUpdate._get_VariableName_metadata)

    _get_VariableValue_metadata = { "name" : "VariableValue",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def VariableValue(self) -> typing.Any:
        """Update value of the user variable."""
        return self._intf.get_property(IAgVAUserVariableUpdate._metadata, IAgVAUserVariableUpdate._get_VariableValue_metadata)

    _set_VariableValue_metadata = { "name" : "VariableValue",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @VariableValue.setter
    def VariableValue(self, inVal:typing.Any) -> None:
        return self._intf.set_property(IAgVAUserVariableUpdate._metadata, IAgVAUserVariableUpdate._set_VariableValue_metadata, inVal)

    _get_VariableAction_metadata = { "name" : "VariableAction",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAUpdateAction),) }
    @property
    def VariableAction(self) -> "AgEVAUpdateAction":
        """Action to be performed using the value."""
        return self._intf.get_property(IAgVAUserVariableUpdate._metadata, IAgVAUserVariableUpdate._get_VariableAction_metadata)

    _set_VariableAction_metadata = { "name" : "VariableAction",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAUpdateAction),) }
    @VariableAction.setter
    def VariableAction(self, inVal:"AgEVAUpdateAction") -> None:
        return self._intf.set_property(IAgVAUserVariableUpdate._metadata, IAgVAUserVariableUpdate._set_VariableAction_metadata, inVal)

    _EnableControlParameter_metadata = { "name" : "EnableControlParameter",
            "arg_types" : (),
            "marshallers" : () }
    def EnableControlParameter(self) -> None:
        """Enables or disables the specified control parameter."""
        return self._intf.invoke(IAgVAUserVariableUpdate._metadata, IAgVAUserVariableUpdate._EnableControlParameter_metadata, )

    _DisableControlParameter_metadata = { "name" : "DisableControlParameter",
            "arg_types" : (),
            "marshallers" : () }
    def DisableControlParameter(self) -> None:
        """Disables the specified control parameter."""
        return self._intf.invoke(IAgVAUserVariableUpdate._metadata, IAgVAUserVariableUpdate._DisableControlParameter_metadata, )

    _IsControlParameterEnabled_metadata = { "name" : "IsControlParameterEnabled",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    def IsControlParameterEnabled(self) -> bool:
        """Sees if the specified control is enabled."""
        return self._intf.invoke(IAgVAUserVariableUpdate._metadata, IAgVAUserVariableUpdate._IsControlParameterEnabled_metadata, out_arg())

    _get_ControlParametersAvailable_metadata = { "name" : "ControlParametersAvailable",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def ControlParametersAvailable(self) -> bool:
        """Returns whether or not the control parameters can be set."""
        return self._intf.get_property(IAgVAUserVariableUpdate._metadata, IAgVAUserVariableUpdate._get_ControlParametersAvailable_metadata)


agcls.AgClassCatalog.add_catalog_entry("{14F87E74-D85B-40D1-86FF-97E7F514FCF7}", IAgVAUserVariableUpdate)
agcls.AgTypeNameMap["IAgVAUserVariableUpdate"] = IAgVAUserVariableUpdate

class IAgVAProfileSNOPTOptimizer(IAgVAProfile):
    """Properties of SNOPT Optimizer profile."""
    _num_methods = 22
    _vtable_offset = IAgVAProfile._vtable_offset + IAgVAProfile._num_methods
    _metadata = {
        "uuid" : "{6BE54C72-2B85-4925-B969-5602527616A1}",
        "vtable_reference" : IAgVAProfile._vtable_offset + IAgVAProfile._num_methods - 1,
        "method_offsets" : { "get_ControlParameters" : 1,
                             "get_Results" : 2,
                             "get_TargeterGraphs" : 3,
                             "get_ScriptingTool" : 4,
                             "get_ResetControlsBeforeRun" : 5,
                             "set_ResetControlsBeforeRun" : 6,
                             "get_MaxMajorIterations" : 7,
                             "set_MaxMajorIterations" : 8,
                             "get_ToleranceOnMajorFeasibility" : 9,
                             "set_ToleranceOnMajorFeasibility" : 10,
                             "get_ToleranceOnMajorOptimality" : 11,
                             "set_ToleranceOnMajorOptimality" : 12,
                             "get_MaxMinorIterations" : 13,
                             "set_MaxMinorIterations" : 14,
                             "get_ToleranceOnMinorFeasibility" : 15,
                             "set_ToleranceOnMinorFeasibility" : 16,
                             "get_ToleranceOnMinorOptimality" : 17,
                             "set_ToleranceOnMinorOptimality" : 18,
                             "get_OptionsFilename" : 19,
                             "set_OptionsFilename" : 20,
                             "get_AllowInternalPrimalInfeasibilityMeasureNormalization" : 21,
                             "set_AllowInternalPrimalInfeasibilityMeasureNormalization" : 22, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAProfileSNOPTOptimizer._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAProfileSNOPTOptimizer from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAProfile._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAProfileSNOPTOptimizer.__dict__ and type(IAgVAProfileSNOPTOptimizer.__dict__[attrname]) == property:
            return IAgVAProfileSNOPTOptimizer.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            IAgVAProfile.__setattr__(self, attrname, value)
    
    _get_ControlParameters_metadata = { "name" : "ControlParameters",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def ControlParameters(self) -> "IAgVASNOPTControlCollection":
        """The list of control parameters defined for the profile."""
        return self._intf.get_property(IAgVAProfileSNOPTOptimizer._metadata, IAgVAProfileSNOPTOptimizer._get_ControlParameters_metadata)

    _get_Results_metadata = { "name" : "Results",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def Results(self) -> "IAgVASNOPTResultCollection":
        """The list of results defined for the profile."""
        return self._intf.get_property(IAgVAProfileSNOPTOptimizer._metadata, IAgVAProfileSNOPTOptimizer._get_Results_metadata)

    _get_TargeterGraphs_metadata = { "name" : "TargeterGraphs",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def TargeterGraphs(self) -> "IAgVATargeterGraphCollection":
        """Graphs"""
        return self._intf.get_property(IAgVAProfileSNOPTOptimizer._metadata, IAgVAProfileSNOPTOptimizer._get_TargeterGraphs_metadata)

    _get_ScriptingTool_metadata = { "name" : "ScriptingTool",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def ScriptingTool(self) -> "IAgVAScriptingTool":
        """Returns the Scripting tool for the sequence."""
        return self._intf.get_property(IAgVAProfileSNOPTOptimizer._metadata, IAgVAProfileSNOPTOptimizer._get_ScriptingTool_metadata)

    _get_ResetControlsBeforeRun_metadata = { "name" : "ResetControlsBeforeRun",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def ResetControlsBeforeRun(self) -> bool:
        """Reset controls before each run."""
        return self._intf.get_property(IAgVAProfileSNOPTOptimizer._metadata, IAgVAProfileSNOPTOptimizer._get_ResetControlsBeforeRun_metadata)

    _set_ResetControlsBeforeRun_metadata = { "name" : "ResetControlsBeforeRun",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @ResetControlsBeforeRun.setter
    def ResetControlsBeforeRun(self, newVal:bool) -> None:
        return self._intf.set_property(IAgVAProfileSNOPTOptimizer._metadata, IAgVAProfileSNOPTOptimizer._set_ResetControlsBeforeRun_metadata, newVal)

    _get_MaxMajorIterations_metadata = { "name" : "MaxMajorIterations",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.LONG_arg,) }
    @property
    def MaxMajorIterations(self) -> int:
        """The maximum number of major iterations allowed."""
        return self._intf.get_property(IAgVAProfileSNOPTOptimizer._metadata, IAgVAProfileSNOPTOptimizer._get_MaxMajorIterations_metadata)

    _set_MaxMajorIterations_metadata = { "name" : "MaxMajorIterations",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.LONG_arg,) }
    @MaxMajorIterations.setter
    def MaxMajorIterations(self, newVal:int) -> None:
        return self._intf.set_property(IAgVAProfileSNOPTOptimizer._metadata, IAgVAProfileSNOPTOptimizer._set_MaxMajorIterations_metadata, newVal)

    _get_ToleranceOnMajorFeasibility_metadata = { "name" : "ToleranceOnMajorFeasibility",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def ToleranceOnMajorFeasibility(self) -> float:
        """Specifies how accurately the nonlinear constraints should be satisfied."""
        return self._intf.get_property(IAgVAProfileSNOPTOptimizer._metadata, IAgVAProfileSNOPTOptimizer._get_ToleranceOnMajorFeasibility_metadata)

    _set_ToleranceOnMajorFeasibility_metadata = { "name" : "ToleranceOnMajorFeasibility",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @ToleranceOnMajorFeasibility.setter
    def ToleranceOnMajorFeasibility(self, newVal:float) -> None:
        return self._intf.set_property(IAgVAProfileSNOPTOptimizer._metadata, IAgVAProfileSNOPTOptimizer._set_ToleranceOnMajorFeasibility_metadata, newVal)

    _get_ToleranceOnMajorOptimality_metadata = { "name" : "ToleranceOnMajorOptimality",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def ToleranceOnMajorOptimality(self) -> float:
        """Specifies the final accuracy of the dual variables."""
        return self._intf.get_property(IAgVAProfileSNOPTOptimizer._metadata, IAgVAProfileSNOPTOptimizer._get_ToleranceOnMajorOptimality_metadata)

    _set_ToleranceOnMajorOptimality_metadata = { "name" : "ToleranceOnMajorOptimality",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @ToleranceOnMajorOptimality.setter
    def ToleranceOnMajorOptimality(self, newVal:float) -> None:
        return self._intf.set_property(IAgVAProfileSNOPTOptimizer._metadata, IAgVAProfileSNOPTOptimizer._set_ToleranceOnMajorOptimality_metadata, newVal)

    _get_MaxMinorIterations_metadata = { "name" : "MaxMinorIterations",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.LONG_arg,) }
    @property
    def MaxMinorIterations(self) -> int:
        """The maximum number of iterations for the QP subproblem allowed during a single major iteration."""
        return self._intf.get_property(IAgVAProfileSNOPTOptimizer._metadata, IAgVAProfileSNOPTOptimizer._get_MaxMinorIterations_metadata)

    _set_MaxMinorIterations_metadata = { "name" : "MaxMinorIterations",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.LONG_arg,) }
    @MaxMinorIterations.setter
    def MaxMinorIterations(self, newVal:int) -> None:
        return self._intf.set_property(IAgVAProfileSNOPTOptimizer._metadata, IAgVAProfileSNOPTOptimizer._set_MaxMinorIterations_metadata, newVal)

    _get_ToleranceOnMinorFeasibility_metadata = { "name" : "ToleranceOnMinorFeasibility",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def ToleranceOnMinorFeasibility(self) -> float:
        """The tolerance which the QP subproblem must meet before being considered feasible."""
        return self._intf.get_property(IAgVAProfileSNOPTOptimizer._metadata, IAgVAProfileSNOPTOptimizer._get_ToleranceOnMinorFeasibility_metadata)

    _set_ToleranceOnMinorFeasibility_metadata = { "name" : "ToleranceOnMinorFeasibility",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @ToleranceOnMinorFeasibility.setter
    def ToleranceOnMinorFeasibility(self, newVal:float) -> None:
        return self._intf.set_property(IAgVAProfileSNOPTOptimizer._metadata, IAgVAProfileSNOPTOptimizer._set_ToleranceOnMinorFeasibility_metadata, newVal)

    _get_ToleranceOnMinorOptimality_metadata = { "name" : "ToleranceOnMinorOptimality",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def ToleranceOnMinorOptimality(self) -> float:
        """This option is undocumented in the SNOPT literature, and included here for completeness in terms of tolerance options."""
        return self._intf.get_property(IAgVAProfileSNOPTOptimizer._metadata, IAgVAProfileSNOPTOptimizer._get_ToleranceOnMinorOptimality_metadata)

    _set_ToleranceOnMinorOptimality_metadata = { "name" : "ToleranceOnMinorOptimality",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @ToleranceOnMinorOptimality.setter
    def ToleranceOnMinorOptimality(self, newVal:float) -> None:
        return self._intf.set_property(IAgVAProfileSNOPTOptimizer._metadata, IAgVAProfileSNOPTOptimizer._set_ToleranceOnMinorOptimality_metadata, newVal)

    _get_OptionsFilename_metadata = { "name" : "OptionsFilename",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def OptionsFilename(self) -> str:
        """If used, the associated SNOPT specifications file may define any of the various SNOPT options. Options in the file that conflict with options specified elsewhere will take precedence."""
        return self._intf.get_property(IAgVAProfileSNOPTOptimizer._metadata, IAgVAProfileSNOPTOptimizer._get_OptionsFilename_metadata)

    _set_OptionsFilename_metadata = { "name" : "OptionsFilename",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @OptionsFilename.setter
    def OptionsFilename(self, newVal:str) -> None:
        return self._intf.set_property(IAgVAProfileSNOPTOptimizer._metadata, IAgVAProfileSNOPTOptimizer._set_OptionsFilename_metadata, newVal)

    _get_AllowInternalPrimalInfeasibilityMeasureNormalization_metadata = { "name" : "AllowInternalPrimalInfeasibilityMeasureNormalization",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def AllowInternalPrimalInfeasibilityMeasureNormalization(self) -> bool:
        """Whether to allow internal normalization of the primal infeasibility measure."""
        return self._intf.get_property(IAgVAProfileSNOPTOptimizer._metadata, IAgVAProfileSNOPTOptimizer._get_AllowInternalPrimalInfeasibilityMeasureNormalization_metadata)

    _set_AllowInternalPrimalInfeasibilityMeasureNormalization_metadata = { "name" : "AllowInternalPrimalInfeasibilityMeasureNormalization",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @AllowInternalPrimalInfeasibilityMeasureNormalization.setter
    def AllowInternalPrimalInfeasibilityMeasureNormalization(self, newVal:bool) -> None:
        return self._intf.set_property(IAgVAProfileSNOPTOptimizer._metadata, IAgVAProfileSNOPTOptimizer._set_AllowInternalPrimalInfeasibilityMeasureNormalization_metadata, newVal)


agcls.AgClassCatalog.add_catalog_entry("{6BE54C72-2B85-4925-B969-5602527616A1}", IAgVAProfileSNOPTOptimizer)
agcls.AgTypeNameMap["IAgVAProfileSNOPTOptimizer"] = IAgVAProfileSNOPTOptimizer

class IAgVASNOPTControl(object):
    """Properties for control parameters of a SNOPT profile."""
    _num_methods = 17
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{4C637192-8687-4218-9BD6-A7B7C7B6E720}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_Enable" : 1,
                             "set_Enable" : 2,
                             "get_Name" : 3,
                             "get_ParentName" : 4,
                             "get_InitialValue" : 5,
                             "get_CurrentValue" : 6,
                             "set_CurrentValue" : 7,
                             "get_LowerBound" : 8,
                             "set_LowerBound" : 9,
                             "get_UpperBound" : 10,
                             "set_UpperBound" : 11,
                             "get_ScalingValue" : 12,
                             "set_ScalingValue" : 13,
                             "get_UseCustomDisplayUnit" : 14,
                             "set_UseCustomDisplayUnit" : 15,
                             "get_CustomDisplayUnit" : 16,
                             "set_CustomDisplayUnit" : 17, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVASNOPTControl._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVASNOPTControl from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVASNOPTControl.__dict__ and type(IAgVASNOPTControl.__dict__[attrname]) == property:
            return IAgVASNOPTControl.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVASNOPTControl.")
    
    _get_Enable_metadata = { "name" : "Enable",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def Enable(self) -> bool:
        """If true, the variable is being used."""
        return self._intf.get_property(IAgVASNOPTControl._metadata, IAgVASNOPTControl._get_Enable_metadata)

    _set_Enable_metadata = { "name" : "Enable",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @Enable.setter
    def Enable(self, newVal:bool) -> None:
        return self._intf.set_property(IAgVASNOPTControl._metadata, IAgVASNOPTControl._set_Enable_metadata, newVal)

    _get_Name_metadata = { "name" : "Name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def Name(self) -> str:
        """The name of the parameter."""
        return self._intf.get_property(IAgVASNOPTControl._metadata, IAgVASNOPTControl._get_Name_metadata)

    _get_ParentName_metadata = { "name" : "ParentName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def ParentName(self) -> str:
        """The name of the segment to which the parameter belongs."""
        return self._intf.get_property(IAgVASNOPTControl._metadata, IAgVASNOPTControl._get_ParentName_metadata)

    _get_InitialValue_metadata = { "name" : "InitialValue",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def InitialValue(self) -> typing.Any:
        """The nominal value of the element selected as a parameter. Dimension depends on context."""
        return self._intf.get_property(IAgVASNOPTControl._metadata, IAgVASNOPTControl._get_InitialValue_metadata)

    _get_CurrentValue_metadata = { "name" : "CurrentValue",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def CurrentValue(self) -> typing.Any:
        """The value of the independent variable after the last targeter run."""
        return self._intf.get_property(IAgVASNOPTControl._metadata, IAgVASNOPTControl._get_CurrentValue_metadata)

    _set_CurrentValue_metadata = { "name" : "CurrentValue",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @CurrentValue.setter
    def CurrentValue(self, newVal:typing.Any) -> None:
        return self._intf.set_property(IAgVASNOPTControl._metadata, IAgVASNOPTControl._set_CurrentValue_metadata, newVal)

    _get_LowerBound_metadata = { "name" : "LowerBound",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def LowerBound(self) -> typing.Any:
        """Dimension depends on context."""
        return self._intf.get_property(IAgVASNOPTControl._metadata, IAgVASNOPTControl._get_LowerBound_metadata)

    _set_LowerBound_metadata = { "name" : "LowerBound",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @LowerBound.setter
    def LowerBound(self, newVal:typing.Any) -> None:
        return self._intf.set_property(IAgVASNOPTControl._metadata, IAgVASNOPTControl._set_LowerBound_metadata, newVal)

    _get_UpperBound_metadata = { "name" : "UpperBound",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def UpperBound(self) -> typing.Any:
        """Dimension depends on context."""
        return self._intf.get_property(IAgVASNOPTControl._metadata, IAgVASNOPTControl._get_UpperBound_metadata)

    _set_UpperBound_metadata = { "name" : "UpperBound",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @UpperBound.setter
    def UpperBound(self, newVal:typing.Any) -> None:
        return self._intf.set_property(IAgVASNOPTControl._metadata, IAgVASNOPTControl._set_UpperBound_metadata, newVal)

    _get_ScalingValue_metadata = { "name" : "ScalingValue",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def ScalingValue(self) -> typing.Any:
        """Applies to the Specified Value scaling method. Dimension depends on context."""
        return self._intf.get_property(IAgVASNOPTControl._metadata, IAgVASNOPTControl._get_ScalingValue_metadata)

    _set_ScalingValue_metadata = { "name" : "ScalingValue",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @ScalingValue.setter
    def ScalingValue(self, newVal:typing.Any) -> None:
        return self._intf.set_property(IAgVASNOPTControl._metadata, IAgVASNOPTControl._set_ScalingValue_metadata, newVal)

    _get_UseCustomDisplayUnit_metadata = { "name" : "UseCustomDisplayUnit",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def UseCustomDisplayUnit(self) -> bool:
        """If true, allows display of values in another unit."""
        return self._intf.get_property(IAgVASNOPTControl._metadata, IAgVASNOPTControl._get_UseCustomDisplayUnit_metadata)

    _set_UseCustomDisplayUnit_metadata = { "name" : "UseCustomDisplayUnit",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @UseCustomDisplayUnit.setter
    def UseCustomDisplayUnit(self, newVal:bool) -> None:
        return self._intf.set_property(IAgVASNOPTControl._metadata, IAgVASNOPTControl._set_UseCustomDisplayUnit_metadata, newVal)

    _get_CustomDisplayUnit_metadata = { "name" : "CustomDisplayUnit",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def CustomDisplayUnit(self) -> str:
        """The unit in which the value will be displayed in the GUI."""
        return self._intf.get_property(IAgVASNOPTControl._metadata, IAgVASNOPTControl._get_CustomDisplayUnit_metadata)

    _set_CustomDisplayUnit_metadata = { "name" : "CustomDisplayUnit",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @CustomDisplayUnit.setter
    def CustomDisplayUnit(self, newVal:str) -> None:
        return self._intf.set_property(IAgVASNOPTControl._metadata, IAgVASNOPTControl._set_CustomDisplayUnit_metadata, newVal)


agcls.AgClassCatalog.add_catalog_entry("{4C637192-8687-4218-9BD6-A7B7C7B6E720}", IAgVASNOPTControl)
agcls.AgTypeNameMap["IAgVASNOPTControl"] = IAgVASNOPTControl

class IAgVASNOPTResult(object):
    """Properties for objecvtive and constraints of a SNOPT profile."""
    _num_methods = 19
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{79392E1D-E3C7-4403-9D4C-1C13AB8368A9}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_Enable" : 1,
                             "set_Enable" : 2,
                             "get_Name" : 3,
                             "get_CurrentValue" : 4,
                             "get_ParentName" : 5,
                             "get_LowerBound" : 6,
                             "set_LowerBound" : 7,
                             "get_UpperBound" : 8,
                             "set_UpperBound" : 9,
                             "get_ScalingValue" : 10,
                             "set_ScalingValue" : 11,
                             "get_Weight" : 12,
                             "set_Weight" : 13,
                             "get_Goal" : 14,
                             "set_Goal" : 15,
                             "get_UseCustomDisplayUnit" : 16,
                             "set_UseCustomDisplayUnit" : 17,
                             "get_CustomDisplayUnit" : 18,
                             "set_CustomDisplayUnit" : 19, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVASNOPTResult._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVASNOPTResult from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVASNOPTResult.__dict__ and type(IAgVASNOPTResult.__dict__[attrname]) == property:
            return IAgVASNOPTResult.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVASNOPTResult.")
    
    _get_Enable_metadata = { "name" : "Enable",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def Enable(self) -> bool:
        """If true, the variable is being used."""
        return self._intf.get_property(IAgVASNOPTResult._metadata, IAgVASNOPTResult._get_Enable_metadata)

    _set_Enable_metadata = { "name" : "Enable",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @Enable.setter
    def Enable(self, newVal:bool) -> None:
        return self._intf.set_property(IAgVASNOPTResult._metadata, IAgVASNOPTResult._set_Enable_metadata, newVal)

    _get_Name_metadata = { "name" : "Name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def Name(self) -> str:
        """The name of the parameter."""
        return self._intf.get_property(IAgVASNOPTResult._metadata, IAgVASNOPTResult._get_Name_metadata)

    _get_CurrentValue_metadata = { "name" : "CurrentValue",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def CurrentValue(self) -> typing.Any:
        """The value achieved for this dependent variable in the last targeter run. Dimension depends on context."""
        return self._intf.get_property(IAgVASNOPTResult._metadata, IAgVASNOPTResult._get_CurrentValue_metadata)

    _get_ParentName_metadata = { "name" : "ParentName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def ParentName(self) -> str:
        """Object - the name of the segment to which the parameter belongs."""
        return self._intf.get_property(IAgVASNOPTResult._metadata, IAgVASNOPTResult._get_ParentName_metadata)

    _get_LowerBound_metadata = { "name" : "LowerBound",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def LowerBound(self) -> typing.Any:
        """The lower limit achievable by this quantity in the optimizer's iteration history. Dimension depends on context."""
        return self._intf.get_property(IAgVASNOPTResult._metadata, IAgVASNOPTResult._get_LowerBound_metadata)

    _set_LowerBound_metadata = { "name" : "LowerBound",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @LowerBound.setter
    def LowerBound(self, newVal:typing.Any) -> None:
        return self._intf.set_property(IAgVASNOPTResult._metadata, IAgVASNOPTResult._set_LowerBound_metadata, newVal)

    _get_UpperBound_metadata = { "name" : "UpperBound",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def UpperBound(self) -> typing.Any:
        """The upper limit achievable by this quantity in the optimizer's iteration history. Dimension depends on context."""
        return self._intf.get_property(IAgVASNOPTResult._metadata, IAgVASNOPTResult._get_UpperBound_metadata)

    _set_UpperBound_metadata = { "name" : "UpperBound",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @UpperBound.setter
    def UpperBound(self, newVal:typing.Any) -> None:
        return self._intf.set_property(IAgVASNOPTResult._metadata, IAgVASNOPTResult._set_UpperBound_metadata, newVal)

    _get_ScalingValue_metadata = { "name" : "ScalingValue",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def ScalingValue(self) -> typing.Any:
        """Applies to the Specified Value scaling method. Dimension depends on context."""
        return self._intf.get_property(IAgVASNOPTResult._metadata, IAgVASNOPTResult._get_ScalingValue_metadata)

    _set_ScalingValue_metadata = { "name" : "ScalingValue",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @ScalingValue.setter
    def ScalingValue(self, newVal:typing.Any) -> None:
        return self._intf.set_property(IAgVASNOPTResult._metadata, IAgVASNOPTResult._set_ScalingValue_metadata, newVal)

    _get_Weight_metadata = { "name" : "Weight",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def Weight(self) -> float:
        """The factor by which the constraint error is to be multiplied."""
        return self._intf.get_property(IAgVASNOPTResult._metadata, IAgVASNOPTResult._get_Weight_metadata)

    _set_Weight_metadata = { "name" : "Weight",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @Weight.setter
    def Weight(self, newVal:float) -> None:
        return self._intf.set_property(IAgVASNOPTResult._metadata, IAgVASNOPTResult._set_Weight_metadata, newVal)

    _get_Goal_metadata = { "name" : "Goal",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVASNOPTGoal),) }
    @property
    def Goal(self) -> "AgEVASNOPTGoal":
        """The purpose of the element in the problem."""
        return self._intf.get_property(IAgVASNOPTResult._metadata, IAgVASNOPTResult._get_Goal_metadata)

    _set_Goal_metadata = { "name" : "Goal",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVASNOPTGoal),) }
    @Goal.setter
    def Goal(self, inVal:"AgEVASNOPTGoal") -> None:
        return self._intf.set_property(IAgVASNOPTResult._metadata, IAgVASNOPTResult._set_Goal_metadata, inVal)

    _get_UseCustomDisplayUnit_metadata = { "name" : "UseCustomDisplayUnit",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def UseCustomDisplayUnit(self) -> bool:
        """If true, allows display of values in another unit."""
        return self._intf.get_property(IAgVASNOPTResult._metadata, IAgVASNOPTResult._get_UseCustomDisplayUnit_metadata)

    _set_UseCustomDisplayUnit_metadata = { "name" : "UseCustomDisplayUnit",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @UseCustomDisplayUnit.setter
    def UseCustomDisplayUnit(self, newVal:bool) -> None:
        return self._intf.set_property(IAgVASNOPTResult._metadata, IAgVASNOPTResult._set_UseCustomDisplayUnit_metadata, newVal)

    _get_CustomDisplayUnit_metadata = { "name" : "CustomDisplayUnit",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def CustomDisplayUnit(self) -> str:
        """The unit in which the value will be displayed in the GUI."""
        return self._intf.get_property(IAgVASNOPTResult._metadata, IAgVASNOPTResult._get_CustomDisplayUnit_metadata)

    _set_CustomDisplayUnit_metadata = { "name" : "CustomDisplayUnit",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @CustomDisplayUnit.setter
    def CustomDisplayUnit(self, newVal:str) -> None:
        return self._intf.set_property(IAgVASNOPTResult._metadata, IAgVASNOPTResult._set_CustomDisplayUnit_metadata, newVal)


agcls.AgClassCatalog.add_catalog_entry("{79392E1D-E3C7-4403-9D4C-1C13AB8368A9}", IAgVASNOPTResult)
agcls.AgTypeNameMap["IAgVASNOPTResult"] = IAgVASNOPTResult

class IAgVAProfileIPOPTOptimizer(IAgVAProfile):
    """Properties of IPOPT Optimizer profile."""
    _num_methods = 18
    _vtable_offset = IAgVAProfile._vtable_offset + IAgVAProfile._num_methods
    _metadata = {
        "uuid" : "{23DCC03E-E187-41EF-85C8-FC3DCA09E7A8}",
        "vtable_reference" : IAgVAProfile._vtable_offset + IAgVAProfile._num_methods - 1,
        "method_offsets" : { "get_ControlParameters" : 1,
                             "get_Results" : 2,
                             "get_TargeterGraphs" : 3,
                             "get_ScriptingTool" : 4,
                             "get_ResetControlsBeforeRun" : 5,
                             "set_ResetControlsBeforeRun" : 6,
                             "get_ToleranceOnConvergence" : 7,
                             "set_ToleranceOnConvergence" : 8,
                             "get_MaximumIterations" : 9,
                             "set_MaximumIterations" : 10,
                             "get_ToleranceOnConstraintViolation" : 11,
                             "set_ToleranceOnConstraintViolation" : 12,
                             "get_ToleranceOnDualInfeasibility" : 13,
                             "set_ToleranceOnDualInfeasibility" : 14,
                             "get_ToleranceOnComplementaryInfeasibility" : 15,
                             "set_ToleranceOnComplementaryInfeasibility" : 16,
                             "get_OptionsFilename" : 17,
                             "set_OptionsFilename" : 18, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAProfileIPOPTOptimizer._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAProfileIPOPTOptimizer from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAProfile._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAProfileIPOPTOptimizer.__dict__ and type(IAgVAProfileIPOPTOptimizer.__dict__[attrname]) == property:
            return IAgVAProfileIPOPTOptimizer.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            IAgVAProfile.__setattr__(self, attrname, value)
    
    _get_ControlParameters_metadata = { "name" : "ControlParameters",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def ControlParameters(self) -> "IAgVAIPOPTControlCollection":
        """The list of control parameters defined for the profile."""
        return self._intf.get_property(IAgVAProfileIPOPTOptimizer._metadata, IAgVAProfileIPOPTOptimizer._get_ControlParameters_metadata)

    _get_Results_metadata = { "name" : "Results",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def Results(self) -> "IAgVAIPOPTResultCollection":
        """The list of results defined for the profile."""
        return self._intf.get_property(IAgVAProfileIPOPTOptimizer._metadata, IAgVAProfileIPOPTOptimizer._get_Results_metadata)

    _get_TargeterGraphs_metadata = { "name" : "TargeterGraphs",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def TargeterGraphs(self) -> "IAgVATargeterGraphCollection":
        """Graphs"""
        return self._intf.get_property(IAgVAProfileIPOPTOptimizer._metadata, IAgVAProfileIPOPTOptimizer._get_TargeterGraphs_metadata)

    _get_ScriptingTool_metadata = { "name" : "ScriptingTool",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def ScriptingTool(self) -> "IAgVAScriptingTool":
        """Returns the Scripting tool for the sequence."""
        return self._intf.get_property(IAgVAProfileIPOPTOptimizer._metadata, IAgVAProfileIPOPTOptimizer._get_ScriptingTool_metadata)

    _get_ResetControlsBeforeRun_metadata = { "name" : "ResetControlsBeforeRun",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def ResetControlsBeforeRun(self) -> bool:
        """Reset controls before each run."""
        return self._intf.get_property(IAgVAProfileIPOPTOptimizer._metadata, IAgVAProfileIPOPTOptimizer._get_ResetControlsBeforeRun_metadata)

    _set_ResetControlsBeforeRun_metadata = { "name" : "ResetControlsBeforeRun",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @ResetControlsBeforeRun.setter
    def ResetControlsBeforeRun(self, newVal:bool) -> None:
        return self._intf.set_property(IAgVAProfileIPOPTOptimizer._metadata, IAgVAProfileIPOPTOptimizer._set_ResetControlsBeforeRun_metadata, newVal)

    _get_ToleranceOnConvergence_metadata = { "name" : "ToleranceOnConvergence",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def ToleranceOnConvergence(self) -> float:
        """The tolerance by which the optimality conditions must be satisfied for the problem to be considered converged. The default value is 1E-8."""
        return self._intf.get_property(IAgVAProfileIPOPTOptimizer._metadata, IAgVAProfileIPOPTOptimizer._get_ToleranceOnConvergence_metadata)

    _set_ToleranceOnConvergence_metadata = { "name" : "ToleranceOnConvergence",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @ToleranceOnConvergence.setter
    def ToleranceOnConvergence(self, newVal:float) -> None:
        return self._intf.set_property(IAgVAProfileIPOPTOptimizer._metadata, IAgVAProfileIPOPTOptimizer._set_ToleranceOnConvergence_metadata, newVal)

    _get_MaximumIterations_metadata = { "name" : "MaximumIterations",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.LONG_arg,) }
    @property
    def MaximumIterations(self) -> int:
        """The maximum number of iterations before IPOPT should give up if it hasn't yet converged on a solution. The default value is 3000."""
        return self._intf.get_property(IAgVAProfileIPOPTOptimizer._metadata, IAgVAProfileIPOPTOptimizer._get_MaximumIterations_metadata)

    _set_MaximumIterations_metadata = { "name" : "MaximumIterations",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.LONG_arg,) }
    @MaximumIterations.setter
    def MaximumIterations(self, newVal:int) -> None:
        return self._intf.set_property(IAgVAProfileIPOPTOptimizer._metadata, IAgVAProfileIPOPTOptimizer._set_MaximumIterations_metadata, newVal)

    _get_ToleranceOnConstraintViolation_metadata = { "name" : "ToleranceOnConstraintViolation",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def ToleranceOnConstraintViolation(self) -> float:
        """The tolerance by which user-specified constraints are allowed to be violated with the solution still considered feasible. The default value is 1.0E-4."""
        return self._intf.get_property(IAgVAProfileIPOPTOptimizer._metadata, IAgVAProfileIPOPTOptimizer._get_ToleranceOnConstraintViolation_metadata)

    _set_ToleranceOnConstraintViolation_metadata = { "name" : "ToleranceOnConstraintViolation",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @ToleranceOnConstraintViolation.setter
    def ToleranceOnConstraintViolation(self, newVal:float) -> None:
        return self._intf.set_property(IAgVAProfileIPOPTOptimizer._metadata, IAgVAProfileIPOPTOptimizer._set_ToleranceOnConstraintViolation_metadata, newVal)

    _get_ToleranceOnDualInfeasibility_metadata = { "name" : "ToleranceOnDualInfeasibility",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def ToleranceOnDualInfeasibility(self) -> float:
        """The desired absolute tolerance on the maximum norm of the dual infeasibility. The default value is 1."""
        return self._intf.get_property(IAgVAProfileIPOPTOptimizer._metadata, IAgVAProfileIPOPTOptimizer._get_ToleranceOnDualInfeasibility_metadata)

    _set_ToleranceOnDualInfeasibility_metadata = { "name" : "ToleranceOnDualInfeasibility",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @ToleranceOnDualInfeasibility.setter
    def ToleranceOnDualInfeasibility(self, newVal:float) -> None:
        return self._intf.set_property(IAgVAProfileIPOPTOptimizer._metadata, IAgVAProfileIPOPTOptimizer._set_ToleranceOnDualInfeasibility_metadata, newVal)

    _get_ToleranceOnComplementaryInfeasibility_metadata = { "name" : "ToleranceOnComplementaryInfeasibility",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def ToleranceOnComplementaryInfeasibility(self) -> float:
        """The desired absolute tolerance on the maximum norm of the complementarity conditions. The default value is 1.0E-4."""
        return self._intf.get_property(IAgVAProfileIPOPTOptimizer._metadata, IAgVAProfileIPOPTOptimizer._get_ToleranceOnComplementaryInfeasibility_metadata)

    _set_ToleranceOnComplementaryInfeasibility_metadata = { "name" : "ToleranceOnComplementaryInfeasibility",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @ToleranceOnComplementaryInfeasibility.setter
    def ToleranceOnComplementaryInfeasibility(self, newVal:float) -> None:
        return self._intf.set_property(IAgVAProfileIPOPTOptimizer._metadata, IAgVAProfileIPOPTOptimizer._set_ToleranceOnComplementaryInfeasibility_metadata, newVal)

    _get_OptionsFilename_metadata = { "name" : "OptionsFilename",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def OptionsFilename(self) -> str:
        """If used, the associated IPOPT specifications file may define any of the various IPOPT options. Options in the file that conflict with options specified elsewhere will take precedence."""
        return self._intf.get_property(IAgVAProfileIPOPTOptimizer._metadata, IAgVAProfileIPOPTOptimizer._get_OptionsFilename_metadata)

    _set_OptionsFilename_metadata = { "name" : "OptionsFilename",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @OptionsFilename.setter
    def OptionsFilename(self, newVal:str) -> None:
        return self._intf.set_property(IAgVAProfileIPOPTOptimizer._metadata, IAgVAProfileIPOPTOptimizer._set_OptionsFilename_metadata, newVal)


agcls.AgClassCatalog.add_catalog_entry("{23DCC03E-E187-41EF-85C8-FC3DCA09E7A8}", IAgVAProfileIPOPTOptimizer)
agcls.AgTypeNameMap["IAgVAProfileIPOPTOptimizer"] = IAgVAProfileIPOPTOptimizer

class IAgVAIPOPTControl(object):
    """Properties for control parameters of a IPOPT profile."""
    _num_methods = 17
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{EBDE767F-00E7-4779-ABB9-23DB3B87FE54}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_Enable" : 1,
                             "set_Enable" : 2,
                             "get_Name" : 3,
                             "get_ParentName" : 4,
                             "get_InitialValue" : 5,
                             "get_CurrentValue" : 6,
                             "set_CurrentValue" : 7,
                             "get_LowerBound" : 8,
                             "set_LowerBound" : 9,
                             "get_UpperBound" : 10,
                             "set_UpperBound" : 11,
                             "get_ScalingValue" : 12,
                             "set_ScalingValue" : 13,
                             "get_UseCustomDisplayUnit" : 14,
                             "set_UseCustomDisplayUnit" : 15,
                             "get_CustomDisplayUnit" : 16,
                             "set_CustomDisplayUnit" : 17, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAIPOPTControl._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAIPOPTControl from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAIPOPTControl.__dict__ and type(IAgVAIPOPTControl.__dict__[attrname]) == property:
            return IAgVAIPOPTControl.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAIPOPTControl.")
    
    _get_Enable_metadata = { "name" : "Enable",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def Enable(self) -> bool:
        """If true, the variable is being used."""
        return self._intf.get_property(IAgVAIPOPTControl._metadata, IAgVAIPOPTControl._get_Enable_metadata)

    _set_Enable_metadata = { "name" : "Enable",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @Enable.setter
    def Enable(self, newVal:bool) -> None:
        return self._intf.set_property(IAgVAIPOPTControl._metadata, IAgVAIPOPTControl._set_Enable_metadata, newVal)

    _get_Name_metadata = { "name" : "Name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def Name(self) -> str:
        """The name of the parameter."""
        return self._intf.get_property(IAgVAIPOPTControl._metadata, IAgVAIPOPTControl._get_Name_metadata)

    _get_ParentName_metadata = { "name" : "ParentName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def ParentName(self) -> str:
        """The name of the segment to which the parameter belongs."""
        return self._intf.get_property(IAgVAIPOPTControl._metadata, IAgVAIPOPTControl._get_ParentName_metadata)

    _get_InitialValue_metadata = { "name" : "InitialValue",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def InitialValue(self) -> typing.Any:
        """The nominal value of the element selected as a parameter. Dimension depends on context."""
        return self._intf.get_property(IAgVAIPOPTControl._metadata, IAgVAIPOPTControl._get_InitialValue_metadata)

    _get_CurrentValue_metadata = { "name" : "CurrentValue",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def CurrentValue(self) -> typing.Any:
        """The value of the independent variable after the last targeter run."""
        return self._intf.get_property(IAgVAIPOPTControl._metadata, IAgVAIPOPTControl._get_CurrentValue_metadata)

    _set_CurrentValue_metadata = { "name" : "CurrentValue",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @CurrentValue.setter
    def CurrentValue(self, newVal:typing.Any) -> None:
        return self._intf.set_property(IAgVAIPOPTControl._metadata, IAgVAIPOPTControl._set_CurrentValue_metadata, newVal)

    _get_LowerBound_metadata = { "name" : "LowerBound",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def LowerBound(self) -> typing.Any:
        """Dimension depends on context."""
        return self._intf.get_property(IAgVAIPOPTControl._metadata, IAgVAIPOPTControl._get_LowerBound_metadata)

    _set_LowerBound_metadata = { "name" : "LowerBound",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @LowerBound.setter
    def LowerBound(self, newVal:typing.Any) -> None:
        return self._intf.set_property(IAgVAIPOPTControl._metadata, IAgVAIPOPTControl._set_LowerBound_metadata, newVal)

    _get_UpperBound_metadata = { "name" : "UpperBound",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def UpperBound(self) -> typing.Any:
        """Dimension depends on context."""
        return self._intf.get_property(IAgVAIPOPTControl._metadata, IAgVAIPOPTControl._get_UpperBound_metadata)

    _set_UpperBound_metadata = { "name" : "UpperBound",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @UpperBound.setter
    def UpperBound(self, newVal:typing.Any) -> None:
        return self._intf.set_property(IAgVAIPOPTControl._metadata, IAgVAIPOPTControl._set_UpperBound_metadata, newVal)

    _get_ScalingValue_metadata = { "name" : "ScalingValue",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def ScalingValue(self) -> typing.Any:
        """Applies to the Specified Value scaling method. Dimension depends on context."""
        return self._intf.get_property(IAgVAIPOPTControl._metadata, IAgVAIPOPTControl._get_ScalingValue_metadata)

    _set_ScalingValue_metadata = { "name" : "ScalingValue",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @ScalingValue.setter
    def ScalingValue(self, newVal:typing.Any) -> None:
        return self._intf.set_property(IAgVAIPOPTControl._metadata, IAgVAIPOPTControl._set_ScalingValue_metadata, newVal)

    _get_UseCustomDisplayUnit_metadata = { "name" : "UseCustomDisplayUnit",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def UseCustomDisplayUnit(self) -> bool:
        """If true, allows display of values in another unit."""
        return self._intf.get_property(IAgVAIPOPTControl._metadata, IAgVAIPOPTControl._get_UseCustomDisplayUnit_metadata)

    _set_UseCustomDisplayUnit_metadata = { "name" : "UseCustomDisplayUnit",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @UseCustomDisplayUnit.setter
    def UseCustomDisplayUnit(self, newVal:bool) -> None:
        return self._intf.set_property(IAgVAIPOPTControl._metadata, IAgVAIPOPTControl._set_UseCustomDisplayUnit_metadata, newVal)

    _get_CustomDisplayUnit_metadata = { "name" : "CustomDisplayUnit",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def CustomDisplayUnit(self) -> str:
        """The unit in which the value will be displayed in the GUI."""
        return self._intf.get_property(IAgVAIPOPTControl._metadata, IAgVAIPOPTControl._get_CustomDisplayUnit_metadata)

    _set_CustomDisplayUnit_metadata = { "name" : "CustomDisplayUnit",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @CustomDisplayUnit.setter
    def CustomDisplayUnit(self, newVal:str) -> None:
        return self._intf.set_property(IAgVAIPOPTControl._metadata, IAgVAIPOPTControl._set_CustomDisplayUnit_metadata, newVal)


agcls.AgClassCatalog.add_catalog_entry("{EBDE767F-00E7-4779-ABB9-23DB3B87FE54}", IAgVAIPOPTControl)
agcls.AgTypeNameMap["IAgVAIPOPTControl"] = IAgVAIPOPTControl

class IAgVAIPOPTResult(object):
    """Properties for objecvtive and constraints of a IPOPT profile."""
    _num_methods = 19
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{CBBEA11D-662A-4218-A9DC-84A16ABAE3D4}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_Enable" : 1,
                             "set_Enable" : 2,
                             "get_Name" : 3,
                             "get_CurrentValue" : 4,
                             "get_ParentName" : 5,
                             "get_LowerBound" : 6,
                             "set_LowerBound" : 7,
                             "get_UpperBound" : 8,
                             "set_UpperBound" : 9,
                             "get_ScalingValue" : 10,
                             "set_ScalingValue" : 11,
                             "get_Weight" : 12,
                             "set_Weight" : 13,
                             "get_Goal" : 14,
                             "set_Goal" : 15,
                             "get_UseCustomDisplayUnit" : 16,
                             "set_UseCustomDisplayUnit" : 17,
                             "get_CustomDisplayUnit" : 18,
                             "set_CustomDisplayUnit" : 19, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAIPOPTResult._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAIPOPTResult from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAIPOPTResult.__dict__ and type(IAgVAIPOPTResult.__dict__[attrname]) == property:
            return IAgVAIPOPTResult.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAIPOPTResult.")
    
    _get_Enable_metadata = { "name" : "Enable",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def Enable(self) -> bool:
        """If true, the variable is being used."""
        return self._intf.get_property(IAgVAIPOPTResult._metadata, IAgVAIPOPTResult._get_Enable_metadata)

    _set_Enable_metadata = { "name" : "Enable",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @Enable.setter
    def Enable(self, newVal:bool) -> None:
        return self._intf.set_property(IAgVAIPOPTResult._metadata, IAgVAIPOPTResult._set_Enable_metadata, newVal)

    _get_Name_metadata = { "name" : "Name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def Name(self) -> str:
        """The name of the parameter."""
        return self._intf.get_property(IAgVAIPOPTResult._metadata, IAgVAIPOPTResult._get_Name_metadata)

    _get_CurrentValue_metadata = { "name" : "CurrentValue",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def CurrentValue(self) -> typing.Any:
        """The value achieved for this dependent variable in the last targeter run. Dimension depends on context."""
        return self._intf.get_property(IAgVAIPOPTResult._metadata, IAgVAIPOPTResult._get_CurrentValue_metadata)

    _get_ParentName_metadata = { "name" : "ParentName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def ParentName(self) -> str:
        """Object - the name of the segment to which the parameter belongs."""
        return self._intf.get_property(IAgVAIPOPTResult._metadata, IAgVAIPOPTResult._get_ParentName_metadata)

    _get_LowerBound_metadata = { "name" : "LowerBound",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def LowerBound(self) -> typing.Any:
        """The lower limit achievable by this quantity in the optimizer's iteration history. Dimension depends on context."""
        return self._intf.get_property(IAgVAIPOPTResult._metadata, IAgVAIPOPTResult._get_LowerBound_metadata)

    _set_LowerBound_metadata = { "name" : "LowerBound",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @LowerBound.setter
    def LowerBound(self, newVal:typing.Any) -> None:
        return self._intf.set_property(IAgVAIPOPTResult._metadata, IAgVAIPOPTResult._set_LowerBound_metadata, newVal)

    _get_UpperBound_metadata = { "name" : "UpperBound",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def UpperBound(self) -> typing.Any:
        """The upper limit achievable by this quantity in the optimizer's iteration history. Dimension depends on context."""
        return self._intf.get_property(IAgVAIPOPTResult._metadata, IAgVAIPOPTResult._get_UpperBound_metadata)

    _set_UpperBound_metadata = { "name" : "UpperBound",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @UpperBound.setter
    def UpperBound(self, newVal:typing.Any) -> None:
        return self._intf.set_property(IAgVAIPOPTResult._metadata, IAgVAIPOPTResult._set_UpperBound_metadata, newVal)

    _get_ScalingValue_metadata = { "name" : "ScalingValue",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def ScalingValue(self) -> typing.Any:
        """Applies to the Specified Value scaling method. Dimension depends on context."""
        return self._intf.get_property(IAgVAIPOPTResult._metadata, IAgVAIPOPTResult._get_ScalingValue_metadata)

    _set_ScalingValue_metadata = { "name" : "ScalingValue",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @ScalingValue.setter
    def ScalingValue(self, newVal:typing.Any) -> None:
        return self._intf.set_property(IAgVAIPOPTResult._metadata, IAgVAIPOPTResult._set_ScalingValue_metadata, newVal)

    _get_Weight_metadata = { "name" : "Weight",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def Weight(self) -> float:
        """The factor by which the constraint error is to be multiplied."""
        return self._intf.get_property(IAgVAIPOPTResult._metadata, IAgVAIPOPTResult._get_Weight_metadata)

    _set_Weight_metadata = { "name" : "Weight",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @Weight.setter
    def Weight(self, newVal:float) -> None:
        return self._intf.set_property(IAgVAIPOPTResult._metadata, IAgVAIPOPTResult._set_Weight_metadata, newVal)

    _get_Goal_metadata = { "name" : "Goal",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAIPOPTGoal),) }
    @property
    def Goal(self) -> "AgEVAIPOPTGoal":
        """The purpose of the element in the problem."""
        return self._intf.get_property(IAgVAIPOPTResult._metadata, IAgVAIPOPTResult._get_Goal_metadata)

    _set_Goal_metadata = { "name" : "Goal",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAIPOPTGoal),) }
    @Goal.setter
    def Goal(self, inVal:"AgEVAIPOPTGoal") -> None:
        return self._intf.set_property(IAgVAIPOPTResult._metadata, IAgVAIPOPTResult._set_Goal_metadata, inVal)

    _get_UseCustomDisplayUnit_metadata = { "name" : "UseCustomDisplayUnit",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def UseCustomDisplayUnit(self) -> bool:
        """If true, allows display of values in another unit."""
        return self._intf.get_property(IAgVAIPOPTResult._metadata, IAgVAIPOPTResult._get_UseCustomDisplayUnit_metadata)

    _set_UseCustomDisplayUnit_metadata = { "name" : "UseCustomDisplayUnit",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @UseCustomDisplayUnit.setter
    def UseCustomDisplayUnit(self, newVal:bool) -> None:
        return self._intf.set_property(IAgVAIPOPTResult._metadata, IAgVAIPOPTResult._set_UseCustomDisplayUnit_metadata, newVal)

    _get_CustomDisplayUnit_metadata = { "name" : "CustomDisplayUnit",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def CustomDisplayUnit(self) -> str:
        """The unit in which the value will be displayed in the GUI."""
        return self._intf.get_property(IAgVAIPOPTResult._metadata, IAgVAIPOPTResult._get_CustomDisplayUnit_metadata)

    _set_CustomDisplayUnit_metadata = { "name" : "CustomDisplayUnit",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @CustomDisplayUnit.setter
    def CustomDisplayUnit(self, newVal:str) -> None:
        return self._intf.set_property(IAgVAIPOPTResult._metadata, IAgVAIPOPTResult._set_CustomDisplayUnit_metadata, newVal)


agcls.AgClassCatalog.add_catalog_entry("{CBBEA11D-662A-4218-A9DC-84A16ABAE3D4}", IAgVAIPOPTResult)
agcls.AgTypeNameMap["IAgVAIPOPTResult"] = IAgVAIPOPTResult

class IAgVAManeuverOptimalFinite(IAgVAManeuver):
    """Engine properties for a Optimal Finite Maneuver."""
    _num_methods = 40
    _vtable_offset = IAgVAManeuver._vtable_offset + IAgVAManeuver._num_methods
    _metadata = {
        "uuid" : "{FDEE9E11-C6ED-495E-9DC3-F3674F0D4813}",
        "vtable_reference" : IAgVAManeuver._vtable_offset + IAgVAManeuver._num_methods - 1,
        "method_offsets" : { "get_PressureMode" : 1,
                             "set_PressureMode" : 2,
                             "get_ThrustEfficiency" : 3,
                             "set_ThrustEfficiency" : 4,
                             "get_ThrustEfficiencyMode" : 5,
                             "set_ThrustEfficiencyMode" : 6,
                             "get_NumberOfNodes" : 7,
                             "set_NumberOfNodes" : 8,
                             "get_InitialGuessFileName" : 9,
                             "set_InitialGuessFileName" : 10,
                             "get_SeedMethod" : 11,
                             "set_SeedMethod" : 12,
                             "RunSeed" : 13,
                             "get_NodeStatusMessage" : 14,
                             "get_RunMode" : 15,
                             "set_RunMode" : 16,
                             "get_HaltMCSWhenNoConvergence" : 17,
                             "set_HaltMCSWhenNoConvergence" : 18,
                             "get_DiscretizationStrategy" : 19,
                             "set_DiscretizationStrategy" : 20,
                             "get_WorkingVariables" : 21,
                             "set_WorkingVariables" : 22,
                             "get_ScalingOptions" : 23,
                             "set_ScalingOptions" : 24,
                             "get_EnableUnitVectorControls" : 25,
                             "set_EnableUnitVectorControls" : 26,
                             "get_ThrustAxes" : 27,
                             "get_SNOPTOptimizer" : 28,
                             "get_InitialBoundaryConditions" : 29,
                             "get_FinalBoundaryConditions" : 30,
                             "get_PathBoundaryConditions" : 31,
                             "get_LogFileName" : 32,
                             "get_ExportFormat" : 33,
                             "set_ExportFormat" : 34,
                             "get_SteeringNodes" : 35,
                             "ExportNodes" : 36,
                             "get_InitialGuessInterpolationMethod" : 37,
                             "set_InitialGuessInterpolationMethod" : 38,
                             "get_ShouldReinitializeSTMAtStartOfSegmentPropagation" : 39,
                             "set_ShouldReinitializeSTMAtStartOfSegmentPropagation" : 40, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAManeuverOptimalFinite._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAManeuverOptimalFinite from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAManeuver._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAManeuverOptimalFinite.__dict__ and type(IAgVAManeuverOptimalFinite.__dict__[attrname]) == property:
            return IAgVAManeuverOptimalFinite.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            IAgVAManeuver.__setattr__(self, attrname, value)
    
    _get_PressureMode_metadata = { "name" : "PressureMode",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAPressureMode),) }
    @property
    def PressureMode(self) -> "AgEVAPressureMode":
        """The pressure mode."""
        return self._intf.get_property(IAgVAManeuverOptimalFinite._metadata, IAgVAManeuverOptimalFinite._get_PressureMode_metadata)

    _set_PressureMode_metadata = { "name" : "PressureMode",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAPressureMode),) }
    @PressureMode.setter
    def PressureMode(self, newVal:"AgEVAPressureMode") -> None:
        return self._intf.set_property(IAgVAManeuverOptimalFinite._metadata, IAgVAManeuverOptimalFinite._set_PressureMode_metadata, newVal)

    _get_ThrustEfficiency_metadata = { "name" : "ThrustEfficiency",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def ThrustEfficiency(self) -> float:
        """The fraction of ideal thrust applied. Any number above zero is valid, with typical values around 0.98 to 1.02. Dimensionless."""
        return self._intf.get_property(IAgVAManeuverOptimalFinite._metadata, IAgVAManeuverOptimalFinite._get_ThrustEfficiency_metadata)

    _set_ThrustEfficiency_metadata = { "name" : "ThrustEfficiency",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @ThrustEfficiency.setter
    def ThrustEfficiency(self, newVal:float) -> None:
        return self._intf.set_property(IAgVAManeuverOptimalFinite._metadata, IAgVAManeuverOptimalFinite._set_ThrustEfficiency_metadata, newVal)

    _get_ThrustEfficiencyMode_metadata = { "name" : "ThrustEfficiencyMode",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAThrustType),) }
    @property
    def ThrustEfficiencyMode(self) -> "AgEVAThrustType":
        """Thrust - the calculations that are effected by the thrust efficiency value."""
        return self._intf.get_property(IAgVAManeuverOptimalFinite._metadata, IAgVAManeuverOptimalFinite._get_ThrustEfficiencyMode_metadata)

    _set_ThrustEfficiencyMode_metadata = { "name" : "ThrustEfficiencyMode",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAThrustType),) }
    @ThrustEfficiencyMode.setter
    def ThrustEfficiencyMode(self, newVal:"AgEVAThrustType") -> None:
        """Mode indicating fraction of ideal thrust applied."""
        return self._intf.set_property(IAgVAManeuverOptimalFinite._metadata, IAgVAManeuverOptimalFinite._set_ThrustEfficiencyMode_metadata, newVal)

    _get_NumberOfNodes_metadata = { "name" : "NumberOfNodes",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.LONG_arg,) }
    @property
    def NumberOfNodes(self) -> int:
        """Number of nodes to discretize collocation problem into."""
        return self._intf.get_property(IAgVAManeuverOptimalFinite._metadata, IAgVAManeuverOptimalFinite._get_NumberOfNodes_metadata)

    _set_NumberOfNodes_metadata = { "name" : "NumberOfNodes",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.LONG_arg,) }
    @NumberOfNodes.setter
    def NumberOfNodes(self, newVal:int) -> None:
        return self._intf.set_property(IAgVAManeuverOptimalFinite._metadata, IAgVAManeuverOptimalFinite._set_NumberOfNodes_metadata, newVal)

    _get_InitialGuessFileName_metadata = { "name" : "InitialGuessFileName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def InitialGuessFileName(self) -> str:
        """File containing ephemeris for nodes that serve as an initial guess."""
        return self._intf.get_property(IAgVAManeuverOptimalFinite._metadata, IAgVAManeuverOptimalFinite._get_InitialGuessFileName_metadata)

    _set_InitialGuessFileName_metadata = { "name" : "InitialGuessFileName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @InitialGuessFileName.setter
    def InitialGuessFileName(self, newVal:str) -> None:
        return self._intf.set_property(IAgVAManeuverOptimalFinite._metadata, IAgVAManeuverOptimalFinite._set_InitialGuessFileName_metadata, newVal)

    _get_SeedMethod_metadata = { "name" : "SeedMethod",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAOptimalFiniteSeedMethod),) }
    @property
    def SeedMethod(self) -> "AgEVAOptimalFiniteSeedMethod":
        """Initial seed method."""
        return self._intf.get_property(IAgVAManeuverOptimalFinite._metadata, IAgVAManeuverOptimalFinite._get_SeedMethod_metadata)

    _set_SeedMethod_metadata = { "name" : "SeedMethod",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAOptimalFiniteSeedMethod),) }
    @SeedMethod.setter
    def SeedMethod(self, newVal:"AgEVAOptimalFiniteSeedMethod") -> None:
        return self._intf.set_property(IAgVAManeuverOptimalFinite._metadata, IAgVAManeuverOptimalFinite._set_SeedMethod_metadata, newVal)

    _RunSeed_metadata = { "name" : "RunSeed",
            "arg_types" : (),
            "marshallers" : () }
    def RunSeed(self) -> None:
        """Run seed."""
        return self._intf.invoke(IAgVAManeuverOptimalFinite._metadata, IAgVAManeuverOptimalFinite._RunSeed_metadata, )

    _get_NodeStatusMessage_metadata = { "name" : "NodeStatusMessage",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def NodeStatusMessage(self) -> str:
        """A message that indicates what nodes are currently held by the segment."""
        return self._intf.get_property(IAgVAManeuverOptimalFinite._metadata, IAgVAManeuverOptimalFinite._get_NodeStatusMessage_metadata)

    _get_RunMode_metadata = { "name" : "RunMode",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAOptimalFiniteRunMode),) }
    @property
    def RunMode(self) -> "AgEVAOptimalFiniteRunMode":
        """Run mode."""
        return self._intf.get_property(IAgVAManeuverOptimalFinite._metadata, IAgVAManeuverOptimalFinite._get_RunMode_metadata)

    _set_RunMode_metadata = { "name" : "RunMode",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAOptimalFiniteRunMode),) }
    @RunMode.setter
    def RunMode(self, newVal:"AgEVAOptimalFiniteRunMode") -> None:
        return self._intf.set_property(IAgVAManeuverOptimalFinite._metadata, IAgVAManeuverOptimalFinite._set_RunMode_metadata, newVal)

    _get_HaltMCSWhenNoConvergence_metadata = { "name" : "HaltMCSWhenNoConvergence",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def HaltMCSWhenNoConvergence(self) -> bool:
        """Halt MCS and discard result if optimization is unsuccessful."""
        return self._intf.get_property(IAgVAManeuverOptimalFinite._metadata, IAgVAManeuverOptimalFinite._get_HaltMCSWhenNoConvergence_metadata)

    _set_HaltMCSWhenNoConvergence_metadata = { "name" : "HaltMCSWhenNoConvergence",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @HaltMCSWhenNoConvergence.setter
    def HaltMCSWhenNoConvergence(self, newVal:bool) -> None:
        return self._intf.set_property(IAgVAManeuverOptimalFinite._metadata, IAgVAManeuverOptimalFinite._set_HaltMCSWhenNoConvergence_metadata, newVal)

    _get_DiscretizationStrategy_metadata = { "name" : "DiscretizationStrategy",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAOptimalFiniteDiscretizationStrategy),) }
    @property
    def DiscretizationStrategy(self) -> "AgEVAOptimalFiniteDiscretizationStrategy":
        """Discretization Strategy."""
        return self._intf.get_property(IAgVAManeuverOptimalFinite._metadata, IAgVAManeuverOptimalFinite._get_DiscretizationStrategy_metadata)

    _set_DiscretizationStrategy_metadata = { "name" : "DiscretizationStrategy",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAOptimalFiniteDiscretizationStrategy),) }
    @DiscretizationStrategy.setter
    def DiscretizationStrategy(self, newVal:"AgEVAOptimalFiniteDiscretizationStrategy") -> None:
        return self._intf.set_property(IAgVAManeuverOptimalFinite._metadata, IAgVAManeuverOptimalFinite._set_DiscretizationStrategy_metadata, newVal)

    _get_WorkingVariables_metadata = { "name" : "WorkingVariables",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAOptimalFiniteWorkingVariables),) }
    @property
    def WorkingVariables(self) -> "AgEVAOptimalFiniteWorkingVariables":
        """Working Variables."""
        return self._intf.get_property(IAgVAManeuverOptimalFinite._metadata, IAgVAManeuverOptimalFinite._get_WorkingVariables_metadata)

    _set_WorkingVariables_metadata = { "name" : "WorkingVariables",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAOptimalFiniteWorkingVariables),) }
    @WorkingVariables.setter
    def WorkingVariables(self, newVal:"AgEVAOptimalFiniteWorkingVariables") -> None:
        return self._intf.set_property(IAgVAManeuverOptimalFinite._metadata, IAgVAManeuverOptimalFinite._set_WorkingVariables_metadata, newVal)

    _get_ScalingOptions_metadata = { "name" : "ScalingOptions",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAOptimalFiniteScalingOptions),) }
    @property
    def ScalingOptions(self) -> "AgEVAOptimalFiniteScalingOptions":
        """Scaling Options."""
        return self._intf.get_property(IAgVAManeuverOptimalFinite._metadata, IAgVAManeuverOptimalFinite._get_ScalingOptions_metadata)

    _set_ScalingOptions_metadata = { "name" : "ScalingOptions",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAOptimalFiniteScalingOptions),) }
    @ScalingOptions.setter
    def ScalingOptions(self, newVal:"AgEVAOptimalFiniteScalingOptions") -> None:
        return self._intf.set_property(IAgVAManeuverOptimalFinite._metadata, IAgVAManeuverOptimalFinite._set_ScalingOptions_metadata, newVal)

    _get_EnableUnitVectorControls_metadata = { "name" : "EnableUnitVectorControls",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def EnableUnitVectorControls(self) -> bool:
        """Enable unit vector for thrust direction."""
        return self._intf.get_property(IAgVAManeuverOptimalFinite._metadata, IAgVAManeuverOptimalFinite._get_EnableUnitVectorControls_metadata)

    _set_EnableUnitVectorControls_metadata = { "name" : "EnableUnitVectorControls",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @EnableUnitVectorControls.setter
    def EnableUnitVectorControls(self, newVal:bool) -> None:
        return self._intf.set_property(IAgVAManeuverOptimalFinite._metadata, IAgVAManeuverOptimalFinite._set_EnableUnitVectorControls_metadata, newVal)

    _get_ThrustAxes_metadata = { "name" : "ThrustAxes",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def ThrustAxes(self) -> str:
        """Label reflecting coordinate axes for the thrust vector"""
        return self._intf.get_property(IAgVAManeuverOptimalFinite._metadata, IAgVAManeuverOptimalFinite._get_ThrustAxes_metadata)

    _get_SNOPTOptimizer_metadata = { "name" : "SNOPTOptimizer",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def SNOPTOptimizer(self) -> "IAgVAManeuverOptimalFiniteSNOPTOptimizer":
        """SNOPT Optimizer Options."""
        return self._intf.get_property(IAgVAManeuverOptimalFinite._metadata, IAgVAManeuverOptimalFinite._get_SNOPTOptimizer_metadata)

    _get_InitialBoundaryConditions_metadata = { "name" : "InitialBoundaryConditions",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def InitialBoundaryConditions(self) -> "IAgVAManeuverOptimalFiniteInitialBoundaryConditions":
        """Initial Boundary Conditions."""
        return self._intf.get_property(IAgVAManeuverOptimalFinite._metadata, IAgVAManeuverOptimalFinite._get_InitialBoundaryConditions_metadata)

    _get_FinalBoundaryConditions_metadata = { "name" : "FinalBoundaryConditions",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def FinalBoundaryConditions(self) -> "IAgVAManeuverOptimalFiniteFinalBoundaryConditions":
        """Final Boundary Conditions."""
        return self._intf.get_property(IAgVAManeuverOptimalFinite._metadata, IAgVAManeuverOptimalFinite._get_FinalBoundaryConditions_metadata)

    _get_PathBoundaryConditions_metadata = { "name" : "PathBoundaryConditions",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def PathBoundaryConditions(self) -> "IAgVAManeuverOptimalFinitePathBoundaryConditions":
        """Path Boundary Conditions."""
        return self._intf.get_property(IAgVAManeuverOptimalFinite._metadata, IAgVAManeuverOptimalFinite._get_PathBoundaryConditions_metadata)

    _get_LogFileName_metadata = { "name" : "LogFileName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def LogFileName(self) -> str:
        """Log file name for optimal finite maneuver."""
        return self._intf.get_property(IAgVAManeuverOptimalFinite._metadata, IAgVAManeuverOptimalFinite._get_LogFileName_metadata)

    _get_ExportFormat_metadata = { "name" : "ExportFormat",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAOptimalFiniteExportNodesFormat),) }
    @property
    def ExportFormat(self) -> "AgEVAOptimalFiniteExportNodesFormat":
        """Format for exporting collocation control variables."""
        return self._intf.get_property(IAgVAManeuverOptimalFinite._metadata, IAgVAManeuverOptimalFinite._get_ExportFormat_metadata)

    _set_ExportFormat_metadata = { "name" : "ExportFormat",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAOptimalFiniteExportNodesFormat),) }
    @ExportFormat.setter
    def ExportFormat(self, newVal:"AgEVAOptimalFiniteExportNodesFormat") -> None:
        return self._intf.set_property(IAgVAManeuverOptimalFinite._metadata, IAgVAManeuverOptimalFinite._set_ExportFormat_metadata, newVal)

    _get_SteeringNodes_metadata = { "name" : "SteeringNodes",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def SteeringNodes(self) -> "IAgVAManeuverOptimalFiniteSteeringNodeCollection":
        """The list of steering nodes."""
        return self._intf.get_property(IAgVAManeuverOptimalFinite._metadata, IAgVAManeuverOptimalFinite._get_SteeringNodes_metadata)

    _ExportNodes_metadata = { "name" : "ExportNodes",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    def ExportNodes(self, fileName:str) -> None:
        """Exports the current set of collocation nodes to a file."""
        return self._intf.invoke(IAgVAManeuverOptimalFinite._metadata, IAgVAManeuverOptimalFinite._ExportNodes_metadata, fileName)

    _get_InitialGuessInterpolationMethod_metadata = { "name" : "InitialGuessInterpolationMethod",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAOptimalFiniteGuessMethod),) }
    @property
    def InitialGuessInterpolationMethod(self) -> "AgEVAOptimalFiniteGuessMethod":
        """Guess interpolation method."""
        return self._intf.get_property(IAgVAManeuverOptimalFinite._metadata, IAgVAManeuverOptimalFinite._get_InitialGuessInterpolationMethod_metadata)

    _set_InitialGuessInterpolationMethod_metadata = { "name" : "InitialGuessInterpolationMethod",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAOptimalFiniteGuessMethod),) }
    @InitialGuessInterpolationMethod.setter
    def InitialGuessInterpolationMethod(self, newVal:"AgEVAOptimalFiniteGuessMethod") -> None:
        return self._intf.set_property(IAgVAManeuverOptimalFinite._metadata, IAgVAManeuverOptimalFinite._set_InitialGuessInterpolationMethod_metadata, newVal)

    _get_ShouldReinitializeSTMAtStartOfSegmentPropagation_metadata = { "name" : "ShouldReinitializeSTMAtStartOfSegmentPropagation",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def ShouldReinitializeSTMAtStartOfSegmentPropagation(self) -> bool:
        """If this segment is propagating the state transition matrix, reset it to the identity matrix at the start of the segment."""
        return self._intf.get_property(IAgVAManeuverOptimalFinite._metadata, IAgVAManeuverOptimalFinite._get_ShouldReinitializeSTMAtStartOfSegmentPropagation_metadata)

    _set_ShouldReinitializeSTMAtStartOfSegmentPropagation_metadata = { "name" : "ShouldReinitializeSTMAtStartOfSegmentPropagation",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @ShouldReinitializeSTMAtStartOfSegmentPropagation.setter
    def ShouldReinitializeSTMAtStartOfSegmentPropagation(self, newVal:bool) -> None:
        return self._intf.set_property(IAgVAManeuverOptimalFinite._metadata, IAgVAManeuverOptimalFinite._set_ShouldReinitializeSTMAtStartOfSegmentPropagation_metadata, newVal)


agcls.AgClassCatalog.add_catalog_entry("{FDEE9E11-C6ED-495E-9DC3-F3674F0D4813}", IAgVAManeuverOptimalFinite)
agcls.AgTypeNameMap["IAgVAManeuverOptimalFinite"] = IAgVAManeuverOptimalFinite

class IAgVAManeuverOptimalFiniteSteeringNodeElement(object):
    """The elements of the steering node."""
    _num_methods = 14
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{428CDEC6-6E07-4EDA-B656-AF669F95BB8E}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_NodeIndex" : 1,
                             "get_Time" : 2,
                             "get_Mass" : 3,
                             "get_Azimuth" : 4,
                             "get_Elevation" : 5,
                             "get_DirCosX" : 6,
                             "get_DirCosY" : 7,
                             "get_DirCosZ" : 8,
                             "get_PosX" : 9,
                             "get_PosY" : 10,
                             "get_PosZ" : 11,
                             "get_VelX" : 12,
                             "get_VelY" : 13,
                             "get_VelZ" : 14, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAManeuverOptimalFiniteSteeringNodeElement._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAManeuverOptimalFiniteSteeringNodeElement from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAManeuverOptimalFiniteSteeringNodeElement.__dict__ and type(IAgVAManeuverOptimalFiniteSteeringNodeElement.__dict__[attrname]) == property:
            return IAgVAManeuverOptimalFiniteSteeringNodeElement.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAManeuverOptimalFiniteSteeringNodeElement.")
    
    _get_NodeIndex_metadata = { "name" : "NodeIndex",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.LONG_arg,) }
    @property
    def NodeIndex(self) -> int:
        """The index of the node in the array of nodes."""
        return self._intf.get_property(IAgVAManeuverOptimalFiniteSteeringNodeElement._metadata, IAgVAManeuverOptimalFiniteSteeringNodeElement._get_NodeIndex_metadata)

    _get_Time_metadata = { "name" : "Time",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def Time(self) -> float:
        """The time associated with the node."""
        return self._intf.get_property(IAgVAManeuverOptimalFiniteSteeringNodeElement._metadata, IAgVAManeuverOptimalFiniteSteeringNodeElement._get_Time_metadata)

    _get_Mass_metadata = { "name" : "Mass",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def Mass(self) -> float:
        """The mass at the node."""
        return self._intf.get_property(IAgVAManeuverOptimalFiniteSteeringNodeElement._metadata, IAgVAManeuverOptimalFiniteSteeringNodeElement._get_Mass_metadata)

    _get_Azimuth_metadata = { "name" : "Azimuth",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def Azimuth(self) -> float:
        """The azimuth of the steering angle."""
        return self._intf.get_property(IAgVAManeuverOptimalFiniteSteeringNodeElement._metadata, IAgVAManeuverOptimalFiniteSteeringNodeElement._get_Azimuth_metadata)

    _get_Elevation_metadata = { "name" : "Elevation",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def Elevation(self) -> float:
        """The elevation of the steering angle."""
        return self._intf.get_property(IAgVAManeuverOptimalFiniteSteeringNodeElement._metadata, IAgVAManeuverOptimalFiniteSteeringNodeElement._get_Elevation_metadata)

    _get_DirCosX_metadata = { "name" : "DirCosX",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def DirCosX(self) -> float:
        """The first component of the steering unit vector."""
        return self._intf.get_property(IAgVAManeuverOptimalFiniteSteeringNodeElement._metadata, IAgVAManeuverOptimalFiniteSteeringNodeElement._get_DirCosX_metadata)

    _get_DirCosY_metadata = { "name" : "DirCosY",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def DirCosY(self) -> float:
        """The second component of the steering unit vector."""
        return self._intf.get_property(IAgVAManeuverOptimalFiniteSteeringNodeElement._metadata, IAgVAManeuverOptimalFiniteSteeringNodeElement._get_DirCosY_metadata)

    _get_DirCosZ_metadata = { "name" : "DirCosZ",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def DirCosZ(self) -> float:
        """The third component of the steering unit vector."""
        return self._intf.get_property(IAgVAManeuverOptimalFiniteSteeringNodeElement._metadata, IAgVAManeuverOptimalFiniteSteeringNodeElement._get_DirCosZ_metadata)

    _get_PosX_metadata = { "name" : "PosX",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def PosX(self) -> float:
        """The X component of the position vector."""
        return self._intf.get_property(IAgVAManeuverOptimalFiniteSteeringNodeElement._metadata, IAgVAManeuverOptimalFiniteSteeringNodeElement._get_PosX_metadata)

    _get_PosY_metadata = { "name" : "PosY",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def PosY(self) -> float:
        """The Y component of the position vector."""
        return self._intf.get_property(IAgVAManeuverOptimalFiniteSteeringNodeElement._metadata, IAgVAManeuverOptimalFiniteSteeringNodeElement._get_PosY_metadata)

    _get_PosZ_metadata = { "name" : "PosZ",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def PosZ(self) -> float:
        """The Z component of the position vector."""
        return self._intf.get_property(IAgVAManeuverOptimalFiniteSteeringNodeElement._metadata, IAgVAManeuverOptimalFiniteSteeringNodeElement._get_PosZ_metadata)

    _get_VelX_metadata = { "name" : "VelX",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def VelX(self) -> float:
        """The X component of the velocity vector."""
        return self._intf.get_property(IAgVAManeuverOptimalFiniteSteeringNodeElement._metadata, IAgVAManeuverOptimalFiniteSteeringNodeElement._get_VelX_metadata)

    _get_VelY_metadata = { "name" : "VelY",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def VelY(self) -> float:
        """The Y component of the velocity vector."""
        return self._intf.get_property(IAgVAManeuverOptimalFiniteSteeringNodeElement._metadata, IAgVAManeuverOptimalFiniteSteeringNodeElement._get_VelY_metadata)

    _get_VelZ_metadata = { "name" : "VelZ",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def VelZ(self) -> float:
        """The Z component of the velocity vector."""
        return self._intf.get_property(IAgVAManeuverOptimalFiniteSteeringNodeElement._metadata, IAgVAManeuverOptimalFiniteSteeringNodeElement._get_VelZ_metadata)


agcls.AgClassCatalog.add_catalog_entry("{428CDEC6-6E07-4EDA-B656-AF669F95BB8E}", IAgVAManeuverOptimalFiniteSteeringNodeElement)
agcls.AgTypeNameMap["IAgVAManeuverOptimalFiniteSteeringNodeElement"] = IAgVAManeuverOptimalFiniteSteeringNodeElement

class IAgVAProfileLambertProfile(IAgVAProfile):
    """Properties for a Lambert profile."""
    _num_methods = 56
    _vtable_offset = IAgVAProfile._vtable_offset + IAgVAProfile._num_methods
    _metadata = {
        "uuid" : "{6F736B1F-850D-4736-9106-8BDC4FE52A30}",
        "vtable_reference" : IAgVAProfile._vtable_offset + IAgVAProfile._num_methods - 1,
        "method_offsets" : { "get_CoordSystemName" : 1,
                             "set_CoordSystemName" : 2,
                             "get_TargetCoordType" : 3,
                             "SetTargetCoordType" : 4,
                             "get_EnableSecondManeuver" : 5,
                             "set_EnableSecondManeuver" : 6,
                             "get_TargetPositionX" : 7,
                             "set_TargetPositionX" : 8,
                             "get_TargetPositionY" : 9,
                             "set_TargetPositionY" : 10,
                             "get_TargetPositionZ" : 11,
                             "set_TargetPositionZ" : 12,
                             "get_TargetVelocityX" : 13,
                             "set_TargetVelocityX" : 14,
                             "get_TargetVelocityY" : 15,
                             "set_TargetVelocityY" : 16,
                             "get_TargetVelocityZ" : 17,
                             "set_TargetVelocityZ" : 18,
                             "get_TargetSemimajorAxis" : 19,
                             "set_TargetSemimajorAxis" : 20,
                             "get_TargetEccentricity" : 21,
                             "set_TargetEccentricity" : 22,
                             "get_TargetInclination" : 23,
                             "set_TargetInclination" : 24,
                             "get_TargetRightAscensionOfAscendingNode" : 25,
                             "set_TargetRightAscensionOfAscendingNode" : 26,
                             "get_TargetArgumentOfPeriapsis" : 27,
                             "set_TargetArgumentOfPeriapsis" : 28,
                             "get_TargetTrueAnomaly" : 29,
                             "set_TargetTrueAnomaly" : 30,
                             "get_SolutionOption" : 31,
                             "set_SolutionOption" : 32,
                             "get_TimeOfFlight" : 33,
                             "set_TimeOfFlight" : 34,
                             "get_Revolutions" : 35,
                             "set_Revolutions" : 36,
                             "get_OrbitalEnergy" : 37,
                             "set_OrbitalEnergy" : 38,
                             "get_DirectionOfMotion" : 39,
                             "set_DirectionOfMotion" : 40,
                             "get_CentralBodyCollisionAltitudePadding" : 41,
                             "set_CentralBodyCollisionAltitudePadding" : 42,
                             "get_EnableWriteToFirstManeuver" : 43,
                             "set_EnableWriteToFirstManeuver" : 44,
                             "get_FirstManeuverSegment" : 45,
                             "set_FirstManeuverSegment" : 46,
                             "get_EnableWriteDurationToPropagate" : 47,
                             "set_EnableWriteDurationToPropagate" : 48,
                             "get_DisableNonLambertPropagateStopConditions" : 49,
                             "set_DisableNonLambertPropagateStopConditions" : 50,
                             "get_PropagateSegment" : 51,
                             "set_PropagateSegment" : 52,
                             "get_EnableWriteToSecondManeuver" : 53,
                             "set_EnableWriteToSecondManeuver" : 54,
                             "get_SecondManeuverSegment" : 55,
                             "set_SecondManeuverSegment" : 56, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAProfileLambertProfile._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAProfileLambertProfile from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAProfile._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAProfileLambertProfile.__dict__ and type(IAgVAProfileLambertProfile.__dict__[attrname]) == property:
            return IAgVAProfileLambertProfile.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            IAgVAProfile.__setattr__(self, attrname, value)
    
    _get_CoordSystemName_metadata = { "name" : "CoordSystemName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def CoordSystemName(self) -> str:
        """The coordinate system."""
        return self._intf.get_property(IAgVAProfileLambertProfile._metadata, IAgVAProfileLambertProfile._get_CoordSystemName_metadata)

    _set_CoordSystemName_metadata = { "name" : "CoordSystemName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @CoordSystemName.setter
    def CoordSystemName(self, newVal:str) -> None:
        return self._intf.set_property(IAgVAProfileLambertProfile._metadata, IAgVAProfileLambertProfile._set_CoordSystemName_metadata, newVal)

    _get_TargetCoordType_metadata = { "name" : "TargetCoordType",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVALambertTargetCoordType),) }
    @property
    def TargetCoordType(self) -> "AgEVALambertTargetCoordType":
        """The target coordinate type."""
        return self._intf.get_property(IAgVAProfileLambertProfile._metadata, IAgVAProfileLambertProfile._get_TargetCoordType_metadata)

    _SetTargetCoordType_metadata = { "name" : "SetTargetCoordType",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVALambertTargetCoordType),) }
    def SetTargetCoordType(self, elementType:"AgEVALambertTargetCoordType") -> None:
        """Selects a target coordinate type."""
        return self._intf.invoke(IAgVAProfileLambertProfile._metadata, IAgVAProfileLambertProfile._SetTargetCoordType_metadata, elementType)

    _get_EnableSecondManeuver_metadata = { "name" : "EnableSecondManeuver",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def EnableSecondManeuver(self) -> bool:
        """Enable to calculate second maneuver at destination."""
        return self._intf.get_property(IAgVAProfileLambertProfile._metadata, IAgVAProfileLambertProfile._get_EnableSecondManeuver_metadata)

    _set_EnableSecondManeuver_metadata = { "name" : "EnableSecondManeuver",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @EnableSecondManeuver.setter
    def EnableSecondManeuver(self, newVal:bool) -> None:
        return self._intf.set_property(IAgVAProfileLambertProfile._metadata, IAgVAProfileLambertProfile._set_EnableSecondManeuver_metadata, newVal)

    _get_TargetPositionX_metadata = { "name" : "TargetPositionX",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def TargetPositionX(self) -> float:
        """The X component of the target position for the end of the Lambert transfer."""
        return self._intf.get_property(IAgVAProfileLambertProfile._metadata, IAgVAProfileLambertProfile._get_TargetPositionX_metadata)

    _set_TargetPositionX_metadata = { "name" : "TargetPositionX",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @TargetPositionX.setter
    def TargetPositionX(self, newVal:float) -> None:
        return self._intf.set_property(IAgVAProfileLambertProfile._metadata, IAgVAProfileLambertProfile._set_TargetPositionX_metadata, newVal)

    _get_TargetPositionY_metadata = { "name" : "TargetPositionY",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def TargetPositionY(self) -> float:
        """The Y component of the target position for the end of the Lambert transfer."""
        return self._intf.get_property(IAgVAProfileLambertProfile._metadata, IAgVAProfileLambertProfile._get_TargetPositionY_metadata)

    _set_TargetPositionY_metadata = { "name" : "TargetPositionY",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @TargetPositionY.setter
    def TargetPositionY(self, newVal:float) -> None:
        return self._intf.set_property(IAgVAProfileLambertProfile._metadata, IAgVAProfileLambertProfile._set_TargetPositionY_metadata, newVal)

    _get_TargetPositionZ_metadata = { "name" : "TargetPositionZ",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def TargetPositionZ(self) -> float:
        """The Z component of the target position for the end of the Lambert transfer."""
        return self._intf.get_property(IAgVAProfileLambertProfile._metadata, IAgVAProfileLambertProfile._get_TargetPositionZ_metadata)

    _set_TargetPositionZ_metadata = { "name" : "TargetPositionZ",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @TargetPositionZ.setter
    def TargetPositionZ(self, newVal:float) -> None:
        return self._intf.set_property(IAgVAProfileLambertProfile._metadata, IAgVAProfileLambertProfile._set_TargetPositionZ_metadata, newVal)

    _get_TargetVelocityX_metadata = { "name" : "TargetVelocityX",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def TargetVelocityX(self) -> float:
        """The X component of the target velocity for the end of the Lambert transfer."""
        return self._intf.get_property(IAgVAProfileLambertProfile._metadata, IAgVAProfileLambertProfile._get_TargetVelocityX_metadata)

    _set_TargetVelocityX_metadata = { "name" : "TargetVelocityX",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @TargetVelocityX.setter
    def TargetVelocityX(self, newVal:float) -> None:
        return self._intf.set_property(IAgVAProfileLambertProfile._metadata, IAgVAProfileLambertProfile._set_TargetVelocityX_metadata, newVal)

    _get_TargetVelocityY_metadata = { "name" : "TargetVelocityY",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def TargetVelocityY(self) -> float:
        """The Y component of the target velocity for the end of the Lambert transfer."""
        return self._intf.get_property(IAgVAProfileLambertProfile._metadata, IAgVAProfileLambertProfile._get_TargetVelocityY_metadata)

    _set_TargetVelocityY_metadata = { "name" : "TargetVelocityY",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @TargetVelocityY.setter
    def TargetVelocityY(self, newVal:float) -> None:
        return self._intf.set_property(IAgVAProfileLambertProfile._metadata, IAgVAProfileLambertProfile._set_TargetVelocityY_metadata, newVal)

    _get_TargetVelocityZ_metadata = { "name" : "TargetVelocityZ",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def TargetVelocityZ(self) -> float:
        """The Z component of the target velocity for the end of the Lambert transfer."""
        return self._intf.get_property(IAgVAProfileLambertProfile._metadata, IAgVAProfileLambertProfile._get_TargetVelocityZ_metadata)

    _set_TargetVelocityZ_metadata = { "name" : "TargetVelocityZ",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @TargetVelocityZ.setter
    def TargetVelocityZ(self, newVal:float) -> None:
        return self._intf.set_property(IAgVAProfileLambertProfile._metadata, IAgVAProfileLambertProfile._set_TargetVelocityZ_metadata, newVal)

    _get_TargetSemimajorAxis_metadata = { "name" : "TargetSemimajorAxis",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def TargetSemimajorAxis(self) -> float:
        """The target semimajor axis for the end of the Lambert transfer."""
        return self._intf.get_property(IAgVAProfileLambertProfile._metadata, IAgVAProfileLambertProfile._get_TargetSemimajorAxis_metadata)

    _set_TargetSemimajorAxis_metadata = { "name" : "TargetSemimajorAxis",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @TargetSemimajorAxis.setter
    def TargetSemimajorAxis(self, newVal:float) -> None:
        return self._intf.set_property(IAgVAProfileLambertProfile._metadata, IAgVAProfileLambertProfile._set_TargetSemimajorAxis_metadata, newVal)

    _get_TargetEccentricity_metadata = { "name" : "TargetEccentricity",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def TargetEccentricity(self) -> float:
        """The target eccentricity for the end of the Lambert transfer."""
        return self._intf.get_property(IAgVAProfileLambertProfile._metadata, IAgVAProfileLambertProfile._get_TargetEccentricity_metadata)

    _set_TargetEccentricity_metadata = { "name" : "TargetEccentricity",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @TargetEccentricity.setter
    def TargetEccentricity(self, newVal:float) -> None:
        return self._intf.set_property(IAgVAProfileLambertProfile._metadata, IAgVAProfileLambertProfile._set_TargetEccentricity_metadata, newVal)

    _get_TargetInclination_metadata = { "name" : "TargetInclination",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def TargetInclination(self) -> float:
        """The target inclination for the end of the Lambert transfer."""
        return self._intf.get_property(IAgVAProfileLambertProfile._metadata, IAgVAProfileLambertProfile._get_TargetInclination_metadata)

    _set_TargetInclination_metadata = { "name" : "TargetInclination",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @TargetInclination.setter
    def TargetInclination(self, newVal:float) -> None:
        return self._intf.set_property(IAgVAProfileLambertProfile._metadata, IAgVAProfileLambertProfile._set_TargetInclination_metadata, newVal)

    _get_TargetRightAscensionOfAscendingNode_metadata = { "name" : "TargetRightAscensionOfAscendingNode",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def TargetRightAscensionOfAscendingNode(self) -> float:
        """The target right ascension of the ascending node for the end of the Lambert transfer."""
        return self._intf.get_property(IAgVAProfileLambertProfile._metadata, IAgVAProfileLambertProfile._get_TargetRightAscensionOfAscendingNode_metadata)

    _set_TargetRightAscensionOfAscendingNode_metadata = { "name" : "TargetRightAscensionOfAscendingNode",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @TargetRightAscensionOfAscendingNode.setter
    def TargetRightAscensionOfAscendingNode(self, newVal:float) -> None:
        return self._intf.set_property(IAgVAProfileLambertProfile._metadata, IAgVAProfileLambertProfile._set_TargetRightAscensionOfAscendingNode_metadata, newVal)

    _get_TargetArgumentOfPeriapsis_metadata = { "name" : "TargetArgumentOfPeriapsis",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def TargetArgumentOfPeriapsis(self) -> float:
        """The target argument of periapsis for the end of the Lambert transfer."""
        return self._intf.get_property(IAgVAProfileLambertProfile._metadata, IAgVAProfileLambertProfile._get_TargetArgumentOfPeriapsis_metadata)

    _set_TargetArgumentOfPeriapsis_metadata = { "name" : "TargetArgumentOfPeriapsis",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @TargetArgumentOfPeriapsis.setter
    def TargetArgumentOfPeriapsis(self, newVal:float) -> None:
        return self._intf.set_property(IAgVAProfileLambertProfile._metadata, IAgVAProfileLambertProfile._set_TargetArgumentOfPeriapsis_metadata, newVal)

    _get_TargetTrueAnomaly_metadata = { "name" : "TargetTrueAnomaly",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def TargetTrueAnomaly(self) -> float:
        """The target true anomaly for the end of the Lambert transfer."""
        return self._intf.get_property(IAgVAProfileLambertProfile._metadata, IAgVAProfileLambertProfile._get_TargetTrueAnomaly_metadata)

    _set_TargetTrueAnomaly_metadata = { "name" : "TargetTrueAnomaly",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @TargetTrueAnomaly.setter
    def TargetTrueAnomaly(self, newVal:float) -> None:
        return self._intf.set_property(IAgVAProfileLambertProfile._metadata, IAgVAProfileLambertProfile._set_TargetTrueAnomaly_metadata, newVal)

    _get_SolutionOption_metadata = { "name" : "SolutionOption",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVALambertSolutionOptionType),) }
    @property
    def SolutionOption(self) -> "AgEVALambertSolutionOptionType":
        """Lambert solution calculation type."""
        return self._intf.get_property(IAgVAProfileLambertProfile._metadata, IAgVAProfileLambertProfile._get_SolutionOption_metadata)

    _set_SolutionOption_metadata = { "name" : "SolutionOption",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVALambertSolutionOptionType),) }
    @SolutionOption.setter
    def SolutionOption(self, newVal:"AgEVALambertSolutionOptionType") -> None:
        return self._intf.set_property(IAgVAProfileLambertProfile._metadata, IAgVAProfileLambertProfile._set_SolutionOption_metadata, newVal)

    _get_TimeOfFlight_metadata = { "name" : "TimeOfFlight",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def TimeOfFlight(self) -> float:
        """The time of flight between departure and arrival for the Lambert solution."""
        return self._intf.get_property(IAgVAProfileLambertProfile._metadata, IAgVAProfileLambertProfile._get_TimeOfFlight_metadata)

    _set_TimeOfFlight_metadata = { "name" : "TimeOfFlight",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @TimeOfFlight.setter
    def TimeOfFlight(self, newVal:float) -> None:
        return self._intf.set_property(IAgVAProfileLambertProfile._metadata, IAgVAProfileLambertProfile._set_TimeOfFlight_metadata, newVal)

    _get_Revolutions_metadata = { "name" : "Revolutions",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.LONG_arg,) }
    @property
    def Revolutions(self) -> int:
        """The number of revolutions. Dimensionless."""
        return self._intf.get_property(IAgVAProfileLambertProfile._metadata, IAgVAProfileLambertProfile._get_Revolutions_metadata)

    _set_Revolutions_metadata = { "name" : "Revolutions",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.LONG_arg,) }
    @Revolutions.setter
    def Revolutions(self, newVal:int) -> None:
        return self._intf.set_property(IAgVAProfileLambertProfile._metadata, IAgVAProfileLambertProfile._set_Revolutions_metadata, newVal)

    _get_OrbitalEnergy_metadata = { "name" : "OrbitalEnergy",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVALambertOrbitalEnergyType),) }
    @property
    def OrbitalEnergy(self) -> "AgEVALambertOrbitalEnergyType":
        """The orbital energy for the Lambert solution."""
        return self._intf.get_property(IAgVAProfileLambertProfile._metadata, IAgVAProfileLambertProfile._get_OrbitalEnergy_metadata)

    _set_OrbitalEnergy_metadata = { "name" : "OrbitalEnergy",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVALambertOrbitalEnergyType),) }
    @OrbitalEnergy.setter
    def OrbitalEnergy(self, newVal:"AgEVALambertOrbitalEnergyType") -> None:
        return self._intf.set_property(IAgVAProfileLambertProfile._metadata, IAgVAProfileLambertProfile._set_OrbitalEnergy_metadata, newVal)

    _get_DirectionOfMotion_metadata = { "name" : "DirectionOfMotion",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVALambertDirectionOfMotionType),) }
    @property
    def DirectionOfMotion(self) -> "AgEVALambertDirectionOfMotionType":
        """The direction of motion (long or short) for the Lambert solution."""
        return self._intf.get_property(IAgVAProfileLambertProfile._metadata, IAgVAProfileLambertProfile._get_DirectionOfMotion_metadata)

    _set_DirectionOfMotion_metadata = { "name" : "DirectionOfMotion",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVALambertDirectionOfMotionType),) }
    @DirectionOfMotion.setter
    def DirectionOfMotion(self, newVal:"AgEVALambertDirectionOfMotionType") -> None:
        return self._intf.set_property(IAgVAProfileLambertProfile._metadata, IAgVAProfileLambertProfile._set_DirectionOfMotion_metadata, newVal)

    _get_CentralBodyCollisionAltitudePadding_metadata = { "name" : "CentralBodyCollisionAltitudePadding",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def CentralBodyCollisionAltitudePadding(self) -> float:
        """The minimum altitude below which the Lambert algorithm will consider the spacecraft to have hit the central body."""
        return self._intf.get_property(IAgVAProfileLambertProfile._metadata, IAgVAProfileLambertProfile._get_CentralBodyCollisionAltitudePadding_metadata)

    _set_CentralBodyCollisionAltitudePadding_metadata = { "name" : "CentralBodyCollisionAltitudePadding",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @CentralBodyCollisionAltitudePadding.setter
    def CentralBodyCollisionAltitudePadding(self, newVal:float) -> None:
        return self._intf.set_property(IAgVAProfileLambertProfile._metadata, IAgVAProfileLambertProfile._set_CentralBodyCollisionAltitudePadding_metadata, newVal)

    _get_EnableWriteToFirstManeuver_metadata = { "name" : "EnableWriteToFirstManeuver",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def EnableWriteToFirstManeuver(self) -> bool:
        """Set this to true to write the Delta-V solution from Lambert at the start of the transfer to the linked maneuver."""
        return self._intf.get_property(IAgVAProfileLambertProfile._metadata, IAgVAProfileLambertProfile._get_EnableWriteToFirstManeuver_metadata)

    _set_EnableWriteToFirstManeuver_metadata = { "name" : "EnableWriteToFirstManeuver",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @EnableWriteToFirstManeuver.setter
    def EnableWriteToFirstManeuver(self, newVal:bool) -> None:
        return self._intf.set_property(IAgVAProfileLambertProfile._metadata, IAgVAProfileLambertProfile._set_EnableWriteToFirstManeuver_metadata, newVal)

    _get_FirstManeuverSegment_metadata = { "name" : "FirstManeuverSegment",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def FirstManeuverSegment(self) -> str:
        """The first maneuver segment to manipulate that occurs at the start of the transfer."""
        return self._intf.get_property(IAgVAProfileLambertProfile._metadata, IAgVAProfileLambertProfile._get_FirstManeuverSegment_metadata)

    _set_FirstManeuverSegment_metadata = { "name" : "FirstManeuverSegment",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @FirstManeuverSegment.setter
    def FirstManeuverSegment(self, newVal:str) -> None:
        return self._intf.set_property(IAgVAProfileLambertProfile._metadata, IAgVAProfileLambertProfile._set_FirstManeuverSegment_metadata, newVal)

    _get_EnableWriteDurationToPropagate_metadata = { "name" : "EnableWriteDurationToPropagate",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def EnableWriteDurationToPropagate(self) -> bool:
        """Set this to true to write the Lambert duration of transfer to the 'LambertDuration' stopping condition in the linked propagate segment."""
        return self._intf.get_property(IAgVAProfileLambertProfile._metadata, IAgVAProfileLambertProfile._get_EnableWriteDurationToPropagate_metadata)

    _set_EnableWriteDurationToPropagate_metadata = { "name" : "EnableWriteDurationToPropagate",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @EnableWriteDurationToPropagate.setter
    def EnableWriteDurationToPropagate(self, newVal:bool) -> None:
        return self._intf.set_property(IAgVAProfileLambertProfile._metadata, IAgVAProfileLambertProfile._set_EnableWriteDurationToPropagate_metadata, newVal)

    _get_DisableNonLambertPropagateStopConditions_metadata = { "name" : "DisableNonLambertPropagateStopConditions",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def DisableNonLambertPropagateStopConditions(self) -> bool:
        """Set this to true to disable all non-LambertDuration stopping conditions in the propagate segment."""
        return self._intf.get_property(IAgVAProfileLambertProfile._metadata, IAgVAProfileLambertProfile._get_DisableNonLambertPropagateStopConditions_metadata)

    _set_DisableNonLambertPropagateStopConditions_metadata = { "name" : "DisableNonLambertPropagateStopConditions",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @DisableNonLambertPropagateStopConditions.setter
    def DisableNonLambertPropagateStopConditions(self, newVal:bool) -> None:
        return self._intf.set_property(IAgVAProfileLambertProfile._metadata, IAgVAProfileLambertProfile._set_DisableNonLambertPropagateStopConditions_metadata, newVal)

    _get_PropagateSegment_metadata = { "name" : "PropagateSegment",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def PropagateSegment(self) -> str:
        """This is the propagate segment to manipulate that contains the transfer duration."""
        return self._intf.get_property(IAgVAProfileLambertProfile._metadata, IAgVAProfileLambertProfile._get_PropagateSegment_metadata)

    _set_PropagateSegment_metadata = { "name" : "PropagateSegment",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @PropagateSegment.setter
    def PropagateSegment(self, newVal:str) -> None:
        return self._intf.set_property(IAgVAProfileLambertProfile._metadata, IAgVAProfileLambertProfile._set_PropagateSegment_metadata, newVal)

    _get_EnableWriteToSecondManeuver_metadata = { "name" : "EnableWriteToSecondManeuver",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def EnableWriteToSecondManeuver(self) -> bool:
        """Set this to true to write the Delta-V solution from Lambert at the end of the transfer to the linked maneuver."""
        return self._intf.get_property(IAgVAProfileLambertProfile._metadata, IAgVAProfileLambertProfile._get_EnableWriteToSecondManeuver_metadata)

    _set_EnableWriteToSecondManeuver_metadata = { "name" : "EnableWriteToSecondManeuver",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @EnableWriteToSecondManeuver.setter
    def EnableWriteToSecondManeuver(self, newVal:bool) -> None:
        return self._intf.set_property(IAgVAProfileLambertProfile._metadata, IAgVAProfileLambertProfile._set_EnableWriteToSecondManeuver_metadata, newVal)

    _get_SecondManeuverSegment_metadata = { "name" : "SecondManeuverSegment",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def SecondManeuverSegment(self) -> str:
        """This is the second maneuver segment to manipulate that occurs at the end of the transfer."""
        return self._intf.get_property(IAgVAProfileLambertProfile._metadata, IAgVAProfileLambertProfile._get_SecondManeuverSegment_metadata)

    _set_SecondManeuverSegment_metadata = { "name" : "SecondManeuverSegment",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @SecondManeuverSegment.setter
    def SecondManeuverSegment(self, newVal:str) -> None:
        return self._intf.set_property(IAgVAProfileLambertProfile._metadata, IAgVAProfileLambertProfile._set_SecondManeuverSegment_metadata, newVal)


agcls.AgClassCatalog.add_catalog_entry("{6F736B1F-850D-4736-9106-8BDC4FE52A30}", IAgVAProfileLambertProfile)
agcls.AgTypeNameMap["IAgVAProfileLambertProfile"] = IAgVAProfileLambertProfile

class IAgVAProfileLambertSearchProfile(IAgVAProfile):
    """Properties for a Lambert Search Profile."""
    _num_methods = 64
    _vtable_offset = IAgVAProfile._vtable_offset + IAgVAProfile._num_methods
    _metadata = {
        "uuid" : "{22C5891F-AD49-40BE-9C99-58E23CCFD106}",
        "vtable_reference" : IAgVAProfile._vtable_offset + IAgVAProfile._num_methods - 1,
        "method_offsets" : { "get_CoordSystemName" : 1,
                             "set_CoordSystemName" : 2,
                             "get_TargetCoordType" : 3,
                             "SetTargetCoordType" : 4,
                             "get_EnableSecondManeuver" : 5,
                             "set_EnableSecondManeuver" : 6,
                             "get_EnableTargetMatchPhase" : 7,
                             "set_EnableTargetMatchPhase" : 8,
                             "get_TargetPositionX" : 9,
                             "set_TargetPositionX" : 10,
                             "get_TargetPositionY" : 11,
                             "set_TargetPositionY" : 12,
                             "get_TargetPositionZ" : 13,
                             "set_TargetPositionZ" : 14,
                             "get_TargetVelocityX" : 15,
                             "set_TargetVelocityX" : 16,
                             "get_TargetVelocityY" : 17,
                             "set_TargetVelocityY" : 18,
                             "get_TargetVelocityZ" : 19,
                             "set_TargetVelocityZ" : 20,
                             "get_TargetSemimajorAxis" : 21,
                             "set_TargetSemimajorAxis" : 22,
                             "get_TargetEccentricity" : 23,
                             "set_TargetEccentricity" : 24,
                             "get_TargetInclination" : 25,
                             "set_TargetInclination" : 26,
                             "get_TargetRightAscensionOfAscendingNode" : 27,
                             "set_TargetRightAscensionOfAscendingNode" : 28,
                             "get_TargetArgumentOfPeriapsis" : 29,
                             "set_TargetArgumentOfPeriapsis" : 30,
                             "get_TargetTrueAnomaly" : 31,
                             "set_TargetTrueAnomaly" : 32,
                             "get_EnableWriteDepartureDelayToFirstPropagate" : 33,
                             "set_EnableWriteDepartureDelayToFirstPropagate" : 34,
                             "get_DisableFirstPropagateNonLambertStopConditions" : 35,
                             "set_DisableFirstPropagateNonLambertStopConditions" : 36,
                             "get_FirstPropagateSegment" : 37,
                             "set_FirstPropagateSegment" : 38,
                             "get_EnableWriteToFirstManeuver" : 39,
                             "set_EnableWriteToFirstManeuver" : 40,
                             "get_FirstManeuverSegment" : 41,
                             "set_FirstManeuverSegment" : 42,
                             "get_LatestDepartureTime" : 43,
                             "set_LatestDepartureTime" : 44,
                             "get_EarliestArrivalTime" : 45,
                             "set_EarliestArrivalTime" : 46,
                             "get_LatestArrivalTime" : 47,
                             "set_LatestArrivalTime" : 48,
                             "get_GridSearchTimeStep" : 49,
                             "set_GridSearchTimeStep" : 50,
                             "get_MaxRevolutions" : 51,
                             "set_MaxRevolutions" : 52,
                             "get_CentralBodyCollisionAltitudePadding" : 53,
                             "set_CentralBodyCollisionAltitudePadding" : 54,
                             "get_EnableWriteDurationToSecondPropagate" : 55,
                             "set_EnableWriteDurationToSecondPropagate" : 56,
                             "get_DisableSecondPropagateNonLambertStopConditions" : 57,
                             "set_DisableSecondPropagateNonLambertStopConditions" : 58,
                             "get_SecondPropagateSegment" : 59,
                             "set_SecondPropagateSegment" : 60,
                             "get_EnableWriteToSecondManeuver" : 61,
                             "set_EnableWriteToSecondManeuver" : 62,
                             "get_SecondManeuverSegment" : 63,
                             "set_SecondManeuverSegment" : 64, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAProfileLambertSearchProfile._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAProfileLambertSearchProfile from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAProfile._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAProfileLambertSearchProfile.__dict__ and type(IAgVAProfileLambertSearchProfile.__dict__[attrname]) == property:
            return IAgVAProfileLambertSearchProfile.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            IAgVAProfile.__setattr__(self, attrname, value)
    
    _get_CoordSystemName_metadata = { "name" : "CoordSystemName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def CoordSystemName(self) -> str:
        """The coordinate system."""
        return self._intf.get_property(IAgVAProfileLambertSearchProfile._metadata, IAgVAProfileLambertSearchProfile._get_CoordSystemName_metadata)

    _set_CoordSystemName_metadata = { "name" : "CoordSystemName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @CoordSystemName.setter
    def CoordSystemName(self, newVal:str) -> None:
        return self._intf.set_property(IAgVAProfileLambertSearchProfile._metadata, IAgVAProfileLambertSearchProfile._set_CoordSystemName_metadata, newVal)

    _get_TargetCoordType_metadata = { "name" : "TargetCoordType",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVALambertTargetCoordType),) }
    @property
    def TargetCoordType(self) -> "AgEVALambertTargetCoordType":
        """The target coordinate type."""
        return self._intf.get_property(IAgVAProfileLambertSearchProfile._metadata, IAgVAProfileLambertSearchProfile._get_TargetCoordType_metadata)

    _SetTargetCoordType_metadata = { "name" : "SetTargetCoordType",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVALambertTargetCoordType),) }
    def SetTargetCoordType(self, elementType:"AgEVALambertTargetCoordType") -> None:
        """Selects a target coordinate type."""
        return self._intf.invoke(IAgVAProfileLambertSearchProfile._metadata, IAgVAProfileLambertSearchProfile._SetTargetCoordType_metadata, elementType)

    _get_EnableSecondManeuver_metadata = { "name" : "EnableSecondManeuver",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def EnableSecondManeuver(self) -> bool:
        """Enable to calculate second maneuver at destination."""
        return self._intf.get_property(IAgVAProfileLambertSearchProfile._metadata, IAgVAProfileLambertSearchProfile._get_EnableSecondManeuver_metadata)

    _set_EnableSecondManeuver_metadata = { "name" : "EnableSecondManeuver",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @EnableSecondManeuver.setter
    def EnableSecondManeuver(self, newVal:bool) -> None:
        return self._intf.set_property(IAgVAProfileLambertSearchProfile._metadata, IAgVAProfileLambertSearchProfile._set_EnableSecondManeuver_metadata, newVal)

    _get_EnableTargetMatchPhase_metadata = { "name" : "EnableTargetMatchPhase",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def EnableTargetMatchPhase(self) -> bool:
        """Set this to true if the satellite should match the phase of the orbit at the target."""
        return self._intf.get_property(IAgVAProfileLambertSearchProfile._metadata, IAgVAProfileLambertSearchProfile._get_EnableTargetMatchPhase_metadata)

    _set_EnableTargetMatchPhase_metadata = { "name" : "EnableTargetMatchPhase",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @EnableTargetMatchPhase.setter
    def EnableTargetMatchPhase(self, newVal:bool) -> None:
        return self._intf.set_property(IAgVAProfileLambertSearchProfile._metadata, IAgVAProfileLambertSearchProfile._set_EnableTargetMatchPhase_metadata, newVal)

    _get_TargetPositionX_metadata = { "name" : "TargetPositionX",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def TargetPositionX(self) -> float:
        """The X component of the target position for the end of the Lambert transfer."""
        return self._intf.get_property(IAgVAProfileLambertSearchProfile._metadata, IAgVAProfileLambertSearchProfile._get_TargetPositionX_metadata)

    _set_TargetPositionX_metadata = { "name" : "TargetPositionX",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @TargetPositionX.setter
    def TargetPositionX(self, newVal:float) -> None:
        return self._intf.set_property(IAgVAProfileLambertSearchProfile._metadata, IAgVAProfileLambertSearchProfile._set_TargetPositionX_metadata, newVal)

    _get_TargetPositionY_metadata = { "name" : "TargetPositionY",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def TargetPositionY(self) -> float:
        """The Y component of the target position for the end of the Lambert transfer."""
        return self._intf.get_property(IAgVAProfileLambertSearchProfile._metadata, IAgVAProfileLambertSearchProfile._get_TargetPositionY_metadata)

    _set_TargetPositionY_metadata = { "name" : "TargetPositionY",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @TargetPositionY.setter
    def TargetPositionY(self, newVal:float) -> None:
        return self._intf.set_property(IAgVAProfileLambertSearchProfile._metadata, IAgVAProfileLambertSearchProfile._set_TargetPositionY_metadata, newVal)

    _get_TargetPositionZ_metadata = { "name" : "TargetPositionZ",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def TargetPositionZ(self) -> float:
        """The Z component of the target position for the end of the Lambert transfer."""
        return self._intf.get_property(IAgVAProfileLambertSearchProfile._metadata, IAgVAProfileLambertSearchProfile._get_TargetPositionZ_metadata)

    _set_TargetPositionZ_metadata = { "name" : "TargetPositionZ",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @TargetPositionZ.setter
    def TargetPositionZ(self, newVal:float) -> None:
        return self._intf.set_property(IAgVAProfileLambertSearchProfile._metadata, IAgVAProfileLambertSearchProfile._set_TargetPositionZ_metadata, newVal)

    _get_TargetVelocityX_metadata = { "name" : "TargetVelocityX",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def TargetVelocityX(self) -> float:
        """The X component of the target velocity for the end of the Lambert transfer."""
        return self._intf.get_property(IAgVAProfileLambertSearchProfile._metadata, IAgVAProfileLambertSearchProfile._get_TargetVelocityX_metadata)

    _set_TargetVelocityX_metadata = { "name" : "TargetVelocityX",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @TargetVelocityX.setter
    def TargetVelocityX(self, newVal:float) -> None:
        return self._intf.set_property(IAgVAProfileLambertSearchProfile._metadata, IAgVAProfileLambertSearchProfile._set_TargetVelocityX_metadata, newVal)

    _get_TargetVelocityY_metadata = { "name" : "TargetVelocityY",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def TargetVelocityY(self) -> float:
        """The Y component of the target velocity for the end of the Lambert transfer."""
        return self._intf.get_property(IAgVAProfileLambertSearchProfile._metadata, IAgVAProfileLambertSearchProfile._get_TargetVelocityY_metadata)

    _set_TargetVelocityY_metadata = { "name" : "TargetVelocityY",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @TargetVelocityY.setter
    def TargetVelocityY(self, newVal:float) -> None:
        return self._intf.set_property(IAgVAProfileLambertSearchProfile._metadata, IAgVAProfileLambertSearchProfile._set_TargetVelocityY_metadata, newVal)

    _get_TargetVelocityZ_metadata = { "name" : "TargetVelocityZ",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def TargetVelocityZ(self) -> float:
        """The Z component of the target velocity for the end of the Lambert transfer."""
        return self._intf.get_property(IAgVAProfileLambertSearchProfile._metadata, IAgVAProfileLambertSearchProfile._get_TargetVelocityZ_metadata)

    _set_TargetVelocityZ_metadata = { "name" : "TargetVelocityZ",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @TargetVelocityZ.setter
    def TargetVelocityZ(self, newVal:float) -> None:
        return self._intf.set_property(IAgVAProfileLambertSearchProfile._metadata, IAgVAProfileLambertSearchProfile._set_TargetVelocityZ_metadata, newVal)

    _get_TargetSemimajorAxis_metadata = { "name" : "TargetSemimajorAxis",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def TargetSemimajorAxis(self) -> float:
        """The target semimajor axis for the end of the Lambert transfer."""
        return self._intf.get_property(IAgVAProfileLambertSearchProfile._metadata, IAgVAProfileLambertSearchProfile._get_TargetSemimajorAxis_metadata)

    _set_TargetSemimajorAxis_metadata = { "name" : "TargetSemimajorAxis",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @TargetSemimajorAxis.setter
    def TargetSemimajorAxis(self, newVal:float) -> None:
        return self._intf.set_property(IAgVAProfileLambertSearchProfile._metadata, IAgVAProfileLambertSearchProfile._set_TargetSemimajorAxis_metadata, newVal)

    _get_TargetEccentricity_metadata = { "name" : "TargetEccentricity",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def TargetEccentricity(self) -> float:
        """The target eccentricity for the end of the Lambert transfer."""
        return self._intf.get_property(IAgVAProfileLambertSearchProfile._metadata, IAgVAProfileLambertSearchProfile._get_TargetEccentricity_metadata)

    _set_TargetEccentricity_metadata = { "name" : "TargetEccentricity",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @TargetEccentricity.setter
    def TargetEccentricity(self, newVal:float) -> None:
        return self._intf.set_property(IAgVAProfileLambertSearchProfile._metadata, IAgVAProfileLambertSearchProfile._set_TargetEccentricity_metadata, newVal)

    _get_TargetInclination_metadata = { "name" : "TargetInclination",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def TargetInclination(self) -> float:
        """The target inclination for the end of the Lambert transfer."""
        return self._intf.get_property(IAgVAProfileLambertSearchProfile._metadata, IAgVAProfileLambertSearchProfile._get_TargetInclination_metadata)

    _set_TargetInclination_metadata = { "name" : "TargetInclination",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @TargetInclination.setter
    def TargetInclination(self, newVal:float) -> None:
        return self._intf.set_property(IAgVAProfileLambertSearchProfile._metadata, IAgVAProfileLambertSearchProfile._set_TargetInclination_metadata, newVal)

    _get_TargetRightAscensionOfAscendingNode_metadata = { "name" : "TargetRightAscensionOfAscendingNode",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def TargetRightAscensionOfAscendingNode(self) -> float:
        """The target right ascension of the ascending node for the end of the Lambert transfer."""
        return self._intf.get_property(IAgVAProfileLambertSearchProfile._metadata, IAgVAProfileLambertSearchProfile._get_TargetRightAscensionOfAscendingNode_metadata)

    _set_TargetRightAscensionOfAscendingNode_metadata = { "name" : "TargetRightAscensionOfAscendingNode",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @TargetRightAscensionOfAscendingNode.setter
    def TargetRightAscensionOfAscendingNode(self, newVal:float) -> None:
        return self._intf.set_property(IAgVAProfileLambertSearchProfile._metadata, IAgVAProfileLambertSearchProfile._set_TargetRightAscensionOfAscendingNode_metadata, newVal)

    _get_TargetArgumentOfPeriapsis_metadata = { "name" : "TargetArgumentOfPeriapsis",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def TargetArgumentOfPeriapsis(self) -> float:
        """The target argument of periapsis for the end of the Lambert transfer."""
        return self._intf.get_property(IAgVAProfileLambertSearchProfile._metadata, IAgVAProfileLambertSearchProfile._get_TargetArgumentOfPeriapsis_metadata)

    _set_TargetArgumentOfPeriapsis_metadata = { "name" : "TargetArgumentOfPeriapsis",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @TargetArgumentOfPeriapsis.setter
    def TargetArgumentOfPeriapsis(self, newVal:float) -> None:
        return self._intf.set_property(IAgVAProfileLambertSearchProfile._metadata, IAgVAProfileLambertSearchProfile._set_TargetArgumentOfPeriapsis_metadata, newVal)

    _get_TargetTrueAnomaly_metadata = { "name" : "TargetTrueAnomaly",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def TargetTrueAnomaly(self) -> float:
        """The target true anomaly for the end of the Lambert transfer."""
        return self._intf.get_property(IAgVAProfileLambertSearchProfile._metadata, IAgVAProfileLambertSearchProfile._get_TargetTrueAnomaly_metadata)

    _set_TargetTrueAnomaly_metadata = { "name" : "TargetTrueAnomaly",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @TargetTrueAnomaly.setter
    def TargetTrueAnomaly(self, newVal:float) -> None:
        return self._intf.set_property(IAgVAProfileLambertSearchProfile._metadata, IAgVAProfileLambertSearchProfile._set_TargetTrueAnomaly_metadata, newVal)

    _get_EnableWriteDepartureDelayToFirstPropagate_metadata = { "name" : "EnableWriteDepartureDelayToFirstPropagate",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def EnableWriteDepartureDelayToFirstPropagate(self) -> bool:
        """Set this to true to write the departure delay duration before the Lambert transfer to the 'LambertDuration' stopping condition in the first linked propagate segment."""
        return self._intf.get_property(IAgVAProfileLambertSearchProfile._metadata, IAgVAProfileLambertSearchProfile._get_EnableWriteDepartureDelayToFirstPropagate_metadata)

    _set_EnableWriteDepartureDelayToFirstPropagate_metadata = { "name" : "EnableWriteDepartureDelayToFirstPropagate",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @EnableWriteDepartureDelayToFirstPropagate.setter
    def EnableWriteDepartureDelayToFirstPropagate(self, newVal:bool) -> None:
        return self._intf.set_property(IAgVAProfileLambertSearchProfile._metadata, IAgVAProfileLambertSearchProfile._set_EnableWriteDepartureDelayToFirstPropagate_metadata, newVal)

    _get_DisableFirstPropagateNonLambertStopConditions_metadata = { "name" : "DisableFirstPropagateNonLambertStopConditions",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def DisableFirstPropagateNonLambertStopConditions(self) -> bool:
        """Set this to true to disable all non-LambertDuration stopping conditions in the first propagate segment."""
        return self._intf.get_property(IAgVAProfileLambertSearchProfile._metadata, IAgVAProfileLambertSearchProfile._get_DisableFirstPropagateNonLambertStopConditions_metadata)

    _set_DisableFirstPropagateNonLambertStopConditions_metadata = { "name" : "DisableFirstPropagateNonLambertStopConditions",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @DisableFirstPropagateNonLambertStopConditions.setter
    def DisableFirstPropagateNonLambertStopConditions(self, newVal:bool) -> None:
        return self._intf.set_property(IAgVAProfileLambertSearchProfile._metadata, IAgVAProfileLambertSearchProfile._set_DisableFirstPropagateNonLambertStopConditions_metadata, newVal)

    _get_FirstPropagateSegment_metadata = { "name" : "FirstPropagateSegment",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def FirstPropagateSegment(self) -> str:
        """This is the propagate segment to manipulate that contains the departure delay."""
        return self._intf.get_property(IAgVAProfileLambertSearchProfile._metadata, IAgVAProfileLambertSearchProfile._get_FirstPropagateSegment_metadata)

    _set_FirstPropagateSegment_metadata = { "name" : "FirstPropagateSegment",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @FirstPropagateSegment.setter
    def FirstPropagateSegment(self, newVal:str) -> None:
        return self._intf.set_property(IAgVAProfileLambertSearchProfile._metadata, IAgVAProfileLambertSearchProfile._set_FirstPropagateSegment_metadata, newVal)

    _get_EnableWriteToFirstManeuver_metadata = { "name" : "EnableWriteToFirstManeuver",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def EnableWriteToFirstManeuver(self) -> bool:
        """et this to true to write the Delta-V solution from Lambert at the start of the transfer to the linked maneuver."""
        return self._intf.get_property(IAgVAProfileLambertSearchProfile._metadata, IAgVAProfileLambertSearchProfile._get_EnableWriteToFirstManeuver_metadata)

    _set_EnableWriteToFirstManeuver_metadata = { "name" : "EnableWriteToFirstManeuver",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @EnableWriteToFirstManeuver.setter
    def EnableWriteToFirstManeuver(self, newVal:bool) -> None:
        return self._intf.set_property(IAgVAProfileLambertSearchProfile._metadata, IAgVAProfileLambertSearchProfile._set_EnableWriteToFirstManeuver_metadata, newVal)

    _get_FirstManeuverSegment_metadata = { "name" : "FirstManeuverSegment",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def FirstManeuverSegment(self) -> str:
        """This is the first maneuver segment to manipulate that occurs at the start of the transfer. It is visible when you select Write Initial Inertial Delta-V to Maneuver."""
        return self._intf.get_property(IAgVAProfileLambertSearchProfile._metadata, IAgVAProfileLambertSearchProfile._get_FirstManeuverSegment_metadata)

    _set_FirstManeuverSegment_metadata = { "name" : "FirstManeuverSegment",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @FirstManeuverSegment.setter
    def FirstManeuverSegment(self, newVal:str) -> None:
        return self._intf.set_property(IAgVAProfileLambertSearchProfile._metadata, IAgVAProfileLambertSearchProfile._set_FirstManeuverSegment_metadata, newVal)

    _get_LatestDepartureTime_metadata = { "name" : "LatestDepartureTime",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def LatestDepartureTime(self) -> float:
        """This is the latest time from the start of the target sequence for the first Lambert maneuver to occur."""
        return self._intf.get_property(IAgVAProfileLambertSearchProfile._metadata, IAgVAProfileLambertSearchProfile._get_LatestDepartureTime_metadata)

    _set_LatestDepartureTime_metadata = { "name" : "LatestDepartureTime",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @LatestDepartureTime.setter
    def LatestDepartureTime(self, newVal:float) -> None:
        return self._intf.set_property(IAgVAProfileLambertSearchProfile._metadata, IAgVAProfileLambertSearchProfile._set_LatestDepartureTime_metadata, newVal)

    _get_EarliestArrivalTime_metadata = { "name" : "EarliestArrivalTime",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def EarliestArrivalTime(self) -> float:
        """This is the earliest time from the start of the target sequence that the satellite should arrive at its destination."""
        return self._intf.get_property(IAgVAProfileLambertSearchProfile._metadata, IAgVAProfileLambertSearchProfile._get_EarliestArrivalTime_metadata)

    _set_EarliestArrivalTime_metadata = { "name" : "EarliestArrivalTime",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @EarliestArrivalTime.setter
    def EarliestArrivalTime(self, newVal:float) -> None:
        return self._intf.set_property(IAgVAProfileLambertSearchProfile._metadata, IAgVAProfileLambertSearchProfile._set_EarliestArrivalTime_metadata, newVal)

    _get_LatestArrivalTime_metadata = { "name" : "LatestArrivalTime",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def LatestArrivalTime(self) -> float:
        """This is the latest time from the start of the target sequence that the satellite should arrive at its destination."""
        return self._intf.get_property(IAgVAProfileLambertSearchProfile._metadata, IAgVAProfileLambertSearchProfile._get_LatestArrivalTime_metadata)

    _set_LatestArrivalTime_metadata = { "name" : "LatestArrivalTime",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @LatestArrivalTime.setter
    def LatestArrivalTime(self, newVal:float) -> None:
        return self._intf.set_property(IAgVAProfileLambertSearchProfile._metadata, IAgVAProfileLambertSearchProfile._set_LatestArrivalTime_metadata, newVal)

    _get_GridSearchTimeStep_metadata = { "name" : "GridSearchTimeStep",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def GridSearchTimeStep(self) -> float:
        """This is the time step between Lambert evaluations for searching over both the departure window and arrival window of time."""
        return self._intf.get_property(IAgVAProfileLambertSearchProfile._metadata, IAgVAProfileLambertSearchProfile._get_GridSearchTimeStep_metadata)

    _set_GridSearchTimeStep_metadata = { "name" : "GridSearchTimeStep",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @GridSearchTimeStep.setter
    def GridSearchTimeStep(self, newVal:float) -> None:
        return self._intf.set_property(IAgVAProfileLambertSearchProfile._metadata, IAgVAProfileLambertSearchProfile._set_GridSearchTimeStep_metadata, newVal)

    _get_MaxRevolutions_metadata = { "name" : "MaxRevolutions",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.LONG_arg,) }
    @property
    def MaxRevolutions(self) -> int:
        """This is the maximum number of revolutions for the Lambert solution."""
        return self._intf.get_property(IAgVAProfileLambertSearchProfile._metadata, IAgVAProfileLambertSearchProfile._get_MaxRevolutions_metadata)

    _set_MaxRevolutions_metadata = { "name" : "MaxRevolutions",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.LONG_arg,) }
    @MaxRevolutions.setter
    def MaxRevolutions(self, newVal:int) -> None:
        return self._intf.set_property(IAgVAProfileLambertSearchProfile._metadata, IAgVAProfileLambertSearchProfile._set_MaxRevolutions_metadata, newVal)

    _get_CentralBodyCollisionAltitudePadding_metadata = { "name" : "CentralBodyCollisionAltitudePadding",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def CentralBodyCollisionAltitudePadding(self) -> float:
        """The minimum altitude below which the Lambert algorithm will consider the spacecraft to have hit the central body."""
        return self._intf.get_property(IAgVAProfileLambertSearchProfile._metadata, IAgVAProfileLambertSearchProfile._get_CentralBodyCollisionAltitudePadding_metadata)

    _set_CentralBodyCollisionAltitudePadding_metadata = { "name" : "CentralBodyCollisionAltitudePadding",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @CentralBodyCollisionAltitudePadding.setter
    def CentralBodyCollisionAltitudePadding(self, newVal:float) -> None:
        return self._intf.set_property(IAgVAProfileLambertSearchProfile._metadata, IAgVAProfileLambertSearchProfile._set_CentralBodyCollisionAltitudePadding_metadata, newVal)

    _get_EnableWriteDurationToSecondPropagate_metadata = { "name" : "EnableWriteDurationToSecondPropagate",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def EnableWriteDurationToSecondPropagate(self) -> bool:
        """Set this to true to write the Lambert duration of transfer to the 'LambertDuration' stopping condition in the second linked propagate segment."""
        return self._intf.get_property(IAgVAProfileLambertSearchProfile._metadata, IAgVAProfileLambertSearchProfile._get_EnableWriteDurationToSecondPropagate_metadata)

    _set_EnableWriteDurationToSecondPropagate_metadata = { "name" : "EnableWriteDurationToSecondPropagate",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @EnableWriteDurationToSecondPropagate.setter
    def EnableWriteDurationToSecondPropagate(self, newVal:bool) -> None:
        return self._intf.set_property(IAgVAProfileLambertSearchProfile._metadata, IAgVAProfileLambertSearchProfile._set_EnableWriteDurationToSecondPropagate_metadata, newVal)

    _get_DisableSecondPropagateNonLambertStopConditions_metadata = { "name" : "DisableSecondPropagateNonLambertStopConditions",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def DisableSecondPropagateNonLambertStopConditions(self) -> bool:
        """Set this to true to disable all non-LambertDuration stopping conditions in the second propagate segment. This is visible when you select Write Flight Duration to Second Propagate."""
        return self._intf.get_property(IAgVAProfileLambertSearchProfile._metadata, IAgVAProfileLambertSearchProfile._get_DisableSecondPropagateNonLambertStopConditions_metadata)

    _set_DisableSecondPropagateNonLambertStopConditions_metadata = { "name" : "DisableSecondPropagateNonLambertStopConditions",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @DisableSecondPropagateNonLambertStopConditions.setter
    def DisableSecondPropagateNonLambertStopConditions(self, newVal:bool) -> None:
        return self._intf.set_property(IAgVAProfileLambertSearchProfile._metadata, IAgVAProfileLambertSearchProfile._set_DisableSecondPropagateNonLambertStopConditions_metadata, newVal)

    _get_SecondPropagateSegment_metadata = { "name" : "SecondPropagateSegment",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def SecondPropagateSegment(self) -> str:
        """This is the propagate segment to manipulate that contains the transfer duration. It is visible when you select Write Flight Duration to Second Propagate."""
        return self._intf.get_property(IAgVAProfileLambertSearchProfile._metadata, IAgVAProfileLambertSearchProfile._get_SecondPropagateSegment_metadata)

    _set_SecondPropagateSegment_metadata = { "name" : "SecondPropagateSegment",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @SecondPropagateSegment.setter
    def SecondPropagateSegment(self, newVal:str) -> None:
        return self._intf.set_property(IAgVAProfileLambertSearchProfile._metadata, IAgVAProfileLambertSearchProfile._set_SecondPropagateSegment_metadata, newVal)

    _get_EnableWriteToSecondManeuver_metadata = { "name" : "EnableWriteToSecondManeuver",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def EnableWriteToSecondManeuver(self) -> bool:
        """Set this to true to write the Delta-V solution from Lambert at the end of the transfer to the linked maneuver. It is visible when you select Calculate Second Maneuver At Destination ."""
        return self._intf.get_property(IAgVAProfileLambertSearchProfile._metadata, IAgVAProfileLambertSearchProfile._get_EnableWriteToSecondManeuver_metadata)

    _set_EnableWriteToSecondManeuver_metadata = { "name" : "EnableWriteToSecondManeuver",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @EnableWriteToSecondManeuver.setter
    def EnableWriteToSecondManeuver(self, newVal:bool) -> None:
        return self._intf.set_property(IAgVAProfileLambertSearchProfile._metadata, IAgVAProfileLambertSearchProfile._set_EnableWriteToSecondManeuver_metadata, newVal)

    _get_SecondManeuverSegment_metadata = { "name" : "SecondManeuverSegment",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def SecondManeuverSegment(self) -> str:
        """This is the second maneuver segment to manipulate that occurs at the end of the transfer. It is visible when you select Write Final Inertial Delta-V to Maneuver."""
        return self._intf.get_property(IAgVAProfileLambertSearchProfile._metadata, IAgVAProfileLambertSearchProfile._get_SecondManeuverSegment_metadata)

    _set_SecondManeuverSegment_metadata = { "name" : "SecondManeuverSegment",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @SecondManeuverSegment.setter
    def SecondManeuverSegment(self, newVal:str) -> None:
        return self._intf.set_property(IAgVAProfileLambertSearchProfile._metadata, IAgVAProfileLambertSearchProfile._set_SecondManeuverSegment_metadata, newVal)


agcls.AgClassCatalog.add_catalog_entry("{22C5891F-AD49-40BE-9C99-58E23CCFD106}", IAgVAProfileLambertSearchProfile)
agcls.AgTypeNameMap["IAgVAProfileLambertSearchProfile"] = IAgVAProfileLambertSearchProfile

class IAgVAProfileGoldenSection(IAgVAProfile):
    """Properties for a Golden Section profile."""
    _num_methods = 9
    _vtable_offset = IAgVAProfile._vtable_offset + IAgVAProfile._num_methods
    _metadata = {
        "uuid" : "{505EC87D-BE26-4477-B7E8-6586731428D0}",
        "vtable_reference" : IAgVAProfile._vtable_offset + IAgVAProfile._num_methods - 1,
        "method_offsets" : { "get_TargeterGraphs" : 1,
                             "get_ScriptingTool" : 2,
                             "get_Controls" : 3,
                             "get_Results" : 4,
                             "get_MaxIterations" : 5,
                             "set_MaxIterations" : 6,
                             "get_LogFile" : 7,
                             "get_EnableDisplayStatus" : 8,
                             "set_EnableDisplayStatus" : 9, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAProfileGoldenSection._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAProfileGoldenSection from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAProfile._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAProfileGoldenSection.__dict__ and type(IAgVAProfileGoldenSection.__dict__[attrname]) == property:
            return IAgVAProfileGoldenSection.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            IAgVAProfile.__setattr__(self, attrname, value)
    
    _get_TargeterGraphs_metadata = { "name" : "TargeterGraphs",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def TargeterGraphs(self) -> "IAgVATargeterGraphCollection":
        """Graphs"""
        return self._intf.get_property(IAgVAProfileGoldenSection._metadata, IAgVAProfileGoldenSection._get_TargeterGraphs_metadata)

    _get_ScriptingTool_metadata = { "name" : "ScriptingTool",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def ScriptingTool(self) -> "IAgVAScriptingTool":
        """Returns the Scripting tool for the sequence."""
        return self._intf.get_property(IAgVAProfileGoldenSection._metadata, IAgVAProfileGoldenSection._get_ScriptingTool_metadata)

    _get_Controls_metadata = { "name" : "Controls",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def Controls(self) -> "IAgVAGoldenSectionControlCollection":
        """The list of control parameters defined for the profile."""
        return self._intf.get_property(IAgVAProfileGoldenSection._metadata, IAgVAProfileGoldenSection._get_Controls_metadata)

    _get_Results_metadata = { "name" : "Results",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def Results(self) -> "IAgVAGoldenSectionResultCollection":
        """The list of results defined for the profile."""
        return self._intf.get_property(IAgVAProfileGoldenSection._metadata, IAgVAProfileGoldenSection._get_Results_metadata)

    _get_MaxIterations_metadata = { "name" : "MaxIterations",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.LONG_arg,) }
    @property
    def MaxIterations(self) -> int:
        """The number of complete iterations of the profile to try before stopping. Dimensionless."""
        return self._intf.get_property(IAgVAProfileGoldenSection._metadata, IAgVAProfileGoldenSection._get_MaxIterations_metadata)

    _set_MaxIterations_metadata = { "name" : "MaxIterations",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.LONG_arg,) }
    @MaxIterations.setter
    def MaxIterations(self, newVal:int) -> None:
        return self._intf.set_property(IAgVAProfileGoldenSection._metadata, IAgVAProfileGoldenSection._set_MaxIterations_metadata, newVal)

    _get_LogFile_metadata = { "name" : "LogFile",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def LogFile(self) -> str:
        """Name of the log file for this profile."""
        return self._intf.get_property(IAgVAProfileGoldenSection._metadata, IAgVAProfileGoldenSection._get_LogFile_metadata)

    _get_EnableDisplayStatus_metadata = { "name" : "EnableDisplayStatus",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def EnableDisplayStatus(self) -> bool:
        """If true, a page will appear during the targeting run to report the status of the targeting effort in terms of proximity to the desired value for each dependent variable in the profile."""
        return self._intf.get_property(IAgVAProfileGoldenSection._metadata, IAgVAProfileGoldenSection._get_EnableDisplayStatus_metadata)

    _set_EnableDisplayStatus_metadata = { "name" : "EnableDisplayStatus",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @EnableDisplayStatus.setter
    def EnableDisplayStatus(self, newVal:bool) -> None:
        return self._intf.set_property(IAgVAProfileGoldenSection._metadata, IAgVAProfileGoldenSection._set_EnableDisplayStatus_metadata, newVal)


agcls.AgClassCatalog.add_catalog_entry("{505EC87D-BE26-4477-B7E8-6586731428D0}", IAgVAProfileGoldenSection)
agcls.AgTypeNameMap["IAgVAProfileGoldenSection"] = IAgVAProfileGoldenSection

class IAgVAProfileGridSearch(IAgVAProfile):
    """Properties for a Grid Search profile."""
    _num_methods = 9
    _vtable_offset = IAgVAProfile._vtable_offset + IAgVAProfile._num_methods
    _metadata = {
        "uuid" : "{EDE96C58-0563-4B05-A7B6-735C3699FE87}",
        "vtable_reference" : IAgVAProfile._vtable_offset + IAgVAProfile._num_methods - 1,
        "method_offsets" : { "get_TargeterGraphs" : 1,
                             "get_ScriptingTool" : 2,
                             "get_Controls" : 3,
                             "get_Results" : 4,
                             "get_LogFile" : 5,
                             "get_EnableDisplayStatus" : 6,
                             "set_EnableDisplayStatus" : 7,
                             "get_ShouldGenerateGraph" : 8,
                             "set_ShouldGenerateGraph" : 9, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAProfileGridSearch._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAProfileGridSearch from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAProfile._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAProfileGridSearch.__dict__ and type(IAgVAProfileGridSearch.__dict__[attrname]) == property:
            return IAgVAProfileGridSearch.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            IAgVAProfile.__setattr__(self, attrname, value)
    
    _get_TargeterGraphs_metadata = { "name" : "TargeterGraphs",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def TargeterGraphs(self) -> "IAgVATargeterGraphCollection":
        """Graphs"""
        return self._intf.get_property(IAgVAProfileGridSearch._metadata, IAgVAProfileGridSearch._get_TargeterGraphs_metadata)

    _get_ScriptingTool_metadata = { "name" : "ScriptingTool",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def ScriptingTool(self) -> "IAgVAScriptingTool":
        """Returns the Scripting tool for the sequence."""
        return self._intf.get_property(IAgVAProfileGridSearch._metadata, IAgVAProfileGridSearch._get_ScriptingTool_metadata)

    _get_Controls_metadata = { "name" : "Controls",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def Controls(self) -> "IAgVAGridSearchControlCollection":
        """The list of control parameters defined for the profile."""
        return self._intf.get_property(IAgVAProfileGridSearch._metadata, IAgVAProfileGridSearch._get_Controls_metadata)

    _get_Results_metadata = { "name" : "Results",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def Results(self) -> "IAgVAGridSearchResultCollection":
        """The list of results defined for the profile."""
        return self._intf.get_property(IAgVAProfileGridSearch._metadata, IAgVAProfileGridSearch._get_Results_metadata)

    _get_LogFile_metadata = { "name" : "LogFile",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def LogFile(self) -> str:
        """Name of the log file for this profile."""
        return self._intf.get_property(IAgVAProfileGridSearch._metadata, IAgVAProfileGridSearch._get_LogFile_metadata)

    _get_EnableDisplayStatus_metadata = { "name" : "EnableDisplayStatus",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def EnableDisplayStatus(self) -> bool:
        """If true, a page will appear during the targeting run to report the status of the targeting effort in terms of proximity to the desired value for each dependent variable in the profile."""
        return self._intf.get_property(IAgVAProfileGridSearch._metadata, IAgVAProfileGridSearch._get_EnableDisplayStatus_metadata)

    _set_EnableDisplayStatus_metadata = { "name" : "EnableDisplayStatus",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @EnableDisplayStatus.setter
    def EnableDisplayStatus(self, newVal:bool) -> None:
        return self._intf.set_property(IAgVAProfileGridSearch._metadata, IAgVAProfileGridSearch._set_EnableDisplayStatus_metadata, newVal)

    _get_ShouldGenerateGraph_metadata = { "name" : "ShouldGenerateGraph",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def ShouldGenerateGraph(self) -> bool:
        """If true, a plot is automatically generate the selected result value versus the control value for the grid search when the profile runs."""
        return self._intf.get_property(IAgVAProfileGridSearch._metadata, IAgVAProfileGridSearch._get_ShouldGenerateGraph_metadata)

    _set_ShouldGenerateGraph_metadata = { "name" : "ShouldGenerateGraph",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @ShouldGenerateGraph.setter
    def ShouldGenerateGraph(self, newVal:bool) -> None:
        return self._intf.set_property(IAgVAProfileGridSearch._metadata, IAgVAProfileGridSearch._set_ShouldGenerateGraph_metadata, newVal)


agcls.AgClassCatalog.add_catalog_entry("{EDE96C58-0563-4B05-A7B6-735C3699FE87}", IAgVAProfileGridSearch)
agcls.AgTypeNameMap["IAgVAProfileGridSearch"] = IAgVAProfileGridSearch

class IAgVACalcObjectLinkEmbedControlCollection(object):
    """Collection of link/embed calculation objects."""
    _num_methods = 10
    _vtable_offset = IDispatch._vtable_offset + IDispatch._num_methods
    _metadata = {
        "uuid" : "{4294354A-2EF8-4D34-8FC9-DD360DFCF3EF}",
        "vtable_reference" : IDispatch._vtable_offset + IDispatch._num_methods - 1,
        "method_offsets" : { "Add" : 1,
                             "Item" : 2,
                             "Remove" : 3,
                             "get__NewEnum" : 4,
                             "get_Count" : 5,
                             "Cut" : 6,
                             "Paste" : 7,
                             "InsertCopy" : 8,
                             "GetItemByIndex" : 9,
                             "GetItemByName" : 10, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVACalcObjectLinkEmbedControlCollection._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVACalcObjectLinkEmbedControlCollection from source object.")
        self.__dict__["_enumerator"] = None
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVACalcObjectLinkEmbedControlCollection.__dict__ and type(IAgVACalcObjectLinkEmbedControlCollection.__dict__[attrname]) == property:
            return IAgVACalcObjectLinkEmbedControlCollection.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVACalcObjectLinkEmbedControlCollection.")
    def __iter__(self):
        self.__dict__["_enumerator"] = self._NewEnum
        self._enumerator.reset()
        return self
    def __next__(self) -> "IAgComponentLinkEmbedControl":
        if self._enumerator is None:
            raise StopIteration
        nextval = self._enumerator.next()
        if nextval is None:
            raise StopIteration
        return nextval
    
    _Add_metadata = { "name" : "Add",
            "arg_types" : (agcom.BSTR, agcom.LONG, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.AgEnum_arg(AgEComponentLinkEmbedControlReferenceType), agmarshall.AgInterface_out_arg,) }
    def Add(self, name:str, refType:"AgEComponentLinkEmbedControlReferenceType") -> "IAgComponentLinkEmbedControl":
        """Adds a link/embed calc object to the collection."""
        return self._intf.invoke(IAgVACalcObjectLinkEmbedControlCollection._metadata, IAgVACalcObjectLinkEmbedControlCollection._Add_metadata, name, refType, out_arg())

    _Item_metadata = { "name" : "Item",
            "arg_types" : (agcom.VARIANT, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.VARIANT_arg, agmarshall.AgInterface_out_arg,) }
    def Item(self, indexOrName:typing.Any) -> "IAgComponentLinkEmbedControl":
        """Returns a link/embed calc object."""
        return self._intf.invoke(IAgVACalcObjectLinkEmbedControlCollection._metadata, IAgVACalcObjectLinkEmbedControlCollection._Item_metadata, indexOrName, out_arg())

    _Remove_metadata = { "name" : "Remove",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    def Remove(self, indexOrName:typing.Any) -> None:
        """Removes a link/embed calc object from the collection."""
        return self._intf.invoke(IAgVACalcObjectLinkEmbedControlCollection._metadata, IAgVACalcObjectLinkEmbedControlCollection._Remove_metadata, indexOrName)

    _get__NewEnum_metadata = { "name" : "_NewEnum",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.IEnumVARIANT_arg,) }
    @property
    def _NewEnum(self) -> enumerator_proxy:
        """Allows you to enumerate through the collection."""
        return self._intf.get_property(IAgVACalcObjectLinkEmbedControlCollection._metadata, IAgVACalcObjectLinkEmbedControlCollection._get__NewEnum_metadata)

    _get_Count_metadata = { "name" : "Count",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.LONG_arg,) }
    @property
    def Count(self) -> int:
        """Returns the size of the collection."""
        return self._intf.get_property(IAgVACalcObjectLinkEmbedControlCollection._metadata, IAgVACalcObjectLinkEmbedControlCollection._get_Count_metadata)

    _Cut_metadata = { "name" : "Cut",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    def Cut(self, indexOrName:typing.Any) -> None:
        """Copies a link/embed calc object to the clipboard and removes the calc object from the list."""
        return self._intf.invoke(IAgVACalcObjectLinkEmbedControlCollection._metadata, IAgVACalcObjectLinkEmbedControlCollection._Cut_metadata, indexOrName)

    _Paste_metadata = { "name" : "Paste",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    def Paste(self) -> "IAgComponentLinkEmbedControl":
        """Pastes a link/embed calc object from the clipboard into the list."""
        return self._intf.invoke(IAgVACalcObjectLinkEmbedControlCollection._metadata, IAgVACalcObjectLinkEmbedControlCollection._Paste_metadata, out_arg())

    _InsertCopy_metadata = { "name" : "InsertCopy",
            "arg_types" : (agcom.PVOID, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_in_arg("IAgComponentLinkEmbedControl"), agmarshall.AgInterface_out_arg,) }
    def InsertCopy(self, calcObj:"IAgComponentLinkEmbedControl") -> "IAgComponentLinkEmbedControl":
        """Copies a link/embed calc object and inserts the copy into the list."""
        return self._intf.invoke(IAgVACalcObjectLinkEmbedControlCollection._metadata, IAgVACalcObjectLinkEmbedControlCollection._InsertCopy_metadata, calcObj, out_arg())

    _GetItemByIndex_metadata = { "name" : "GetItemByIndex",
            "arg_types" : (agcom.INT, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.INT_arg, agmarshall.AgInterface_out_arg,) }
    def GetItemByIndex(self, index:int) -> "IAgComponentLinkEmbedControl":
        """Retrieves a link/embed calc object found by the index."""
        return self._intf.invoke(IAgVACalcObjectLinkEmbedControlCollection._metadata, IAgVACalcObjectLinkEmbedControlCollection._GetItemByIndex_metadata, index, out_arg())

    _GetItemByName_metadata = { "name" : "GetItemByName",
            "arg_types" : (agcom.BSTR, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.AgInterface_out_arg,) }
    def GetItemByName(self, name:str) -> "IAgComponentLinkEmbedControl":
        """Retrieves a link/embed calc object found by the name."""
        return self._intf.invoke(IAgVACalcObjectLinkEmbedControlCollection._metadata, IAgVACalcObjectLinkEmbedControlCollection._GetItemByName_metadata, name, out_arg())

    __getitem__ = Item



agcls.AgClassCatalog.add_catalog_entry("{4294354A-2EF8-4D34-8FC9-DD360DFCF3EF}", IAgVACalcObjectLinkEmbedControlCollection)
agcls.AgTypeNameMap["IAgVACalcObjectLinkEmbedControlCollection"] = IAgVACalcObjectLinkEmbedControlCollection

class IAgVAProfileBisection(IAgVAProfile):
    """Properties of Single Parameter Bisection profile."""
    _num_methods = 8
    _vtable_offset = IAgVAProfile._vtable_offset + IAgVAProfile._num_methods
    _metadata = {
        "uuid" : "{F0B2CF95-1CC9-4394-9A19-00FF41B8E0FC}",
        "vtable_reference" : IAgVAProfile._vtable_offset + IAgVAProfile._num_methods - 1,
        "method_offsets" : { "get_ControlParameters" : 1,
                             "get_Results" : 2,
                             "get_TargeterGraphs" : 3,
                             "get_ScriptingTool" : 4,
                             "get_ResetControlsBeforeRun" : 5,
                             "set_ResetControlsBeforeRun" : 6,
                             "get_MaximumIterations" : 7,
                             "set_MaximumIterations" : 8, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAProfileBisection._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAProfileBisection from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAProfile._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAProfileBisection.__dict__ and type(IAgVAProfileBisection.__dict__[attrname]) == property:
            return IAgVAProfileBisection.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            IAgVAProfile.__setattr__(self, attrname, value)
    
    _get_ControlParameters_metadata = { "name" : "ControlParameters",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def ControlParameters(self) -> "IAgVABisectionControlCollection":
        """The list of control parameters defined for the profile."""
        return self._intf.get_property(IAgVAProfileBisection._metadata, IAgVAProfileBisection._get_ControlParameters_metadata)

    _get_Results_metadata = { "name" : "Results",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def Results(self) -> "IAgVABisectionResultCollection":
        """The list of results defined for the profile."""
        return self._intf.get_property(IAgVAProfileBisection._metadata, IAgVAProfileBisection._get_Results_metadata)

    _get_TargeterGraphs_metadata = { "name" : "TargeterGraphs",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def TargeterGraphs(self) -> "IAgVATargeterGraphCollection":
        """Graphs"""
        return self._intf.get_property(IAgVAProfileBisection._metadata, IAgVAProfileBisection._get_TargeterGraphs_metadata)

    _get_ScriptingTool_metadata = { "name" : "ScriptingTool",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def ScriptingTool(self) -> "IAgVAScriptingTool":
        """Returns the Scripting tool for the sequence."""
        return self._intf.get_property(IAgVAProfileBisection._metadata, IAgVAProfileBisection._get_ScriptingTool_metadata)

    _get_ResetControlsBeforeRun_metadata = { "name" : "ResetControlsBeforeRun",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def ResetControlsBeforeRun(self) -> bool:
        """Reset controls before each run."""
        return self._intf.get_property(IAgVAProfileBisection._metadata, IAgVAProfileBisection._get_ResetControlsBeforeRun_metadata)

    _set_ResetControlsBeforeRun_metadata = { "name" : "ResetControlsBeforeRun",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @ResetControlsBeforeRun.setter
    def ResetControlsBeforeRun(self, newVal:bool) -> None:
        return self._intf.set_property(IAgVAProfileBisection._metadata, IAgVAProfileBisection._set_ResetControlsBeforeRun_metadata, newVal)

    _get_MaximumIterations_metadata = { "name" : "MaximumIterations",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.LONG_arg,) }
    @property
    def MaximumIterations(self) -> int:
        """The maximum number of iterations allowed."""
        return self._intf.get_property(IAgVAProfileBisection._metadata, IAgVAProfileBisection._get_MaximumIterations_metadata)

    _set_MaximumIterations_metadata = { "name" : "MaximumIterations",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.LONG_arg,) }
    @MaximumIterations.setter
    def MaximumIterations(self, newVal:int) -> None:
        return self._intf.set_property(IAgVAProfileBisection._metadata, IAgVAProfileBisection._set_MaximumIterations_metadata, newVal)


agcls.AgClassCatalog.add_catalog_entry("{F0B2CF95-1CC9-4394-9A19-00FF41B8E0FC}", IAgVAProfileBisection)
agcls.AgTypeNameMap["IAgVAProfileBisection"] = IAgVAProfileBisection

class IAgVABisectionControl(object):
    """Properties for control parameters of a Bisection Search profile."""
    _num_methods = 13
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{F60B718A-09E3-4C6B-A05D-3562CFB5EF4E}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_Enable" : 1,
                             "set_Enable" : 2,
                             "get_Name" : 3,
                             "get_ParentName" : 4,
                             "get_InitialValue" : 5,
                             "get_CurrentValue" : 6,
                             "set_CurrentValue" : 7,
                             "get_BoundSearchStep" : 8,
                             "set_BoundSearchStep" : 9,
                             "get_UseCustomDisplayUnit" : 10,
                             "set_UseCustomDisplayUnit" : 11,
                             "get_CustomDisplayUnit" : 12,
                             "set_CustomDisplayUnit" : 13, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVABisectionControl._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVABisectionControl from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVABisectionControl.__dict__ and type(IAgVABisectionControl.__dict__[attrname]) == property:
            return IAgVABisectionControl.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVABisectionControl.")
    
    _get_Enable_metadata = { "name" : "Enable",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def Enable(self) -> bool:
        """If true, the variable is being used."""
        return self._intf.get_property(IAgVABisectionControl._metadata, IAgVABisectionControl._get_Enable_metadata)

    _set_Enable_metadata = { "name" : "Enable",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @Enable.setter
    def Enable(self, newVal:bool) -> None:
        return self._intf.set_property(IAgVABisectionControl._metadata, IAgVABisectionControl._set_Enable_metadata, newVal)

    _get_Name_metadata = { "name" : "Name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def Name(self) -> str:
        """The name of the parameter."""
        return self._intf.get_property(IAgVABisectionControl._metadata, IAgVABisectionControl._get_Name_metadata)

    _get_ParentName_metadata = { "name" : "ParentName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def ParentName(self) -> str:
        """The name of the segment to which the parameter belongs."""
        return self._intf.get_property(IAgVABisectionControl._metadata, IAgVABisectionControl._get_ParentName_metadata)

    _get_InitialValue_metadata = { "name" : "InitialValue",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def InitialValue(self) -> typing.Any:
        """The nominal value of the element selected as a parameter. Dimension depends on context."""
        return self._intf.get_property(IAgVABisectionControl._metadata, IAgVABisectionControl._get_InitialValue_metadata)

    _get_CurrentValue_metadata = { "name" : "CurrentValue",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def CurrentValue(self) -> typing.Any:
        """The value of the independent variable after the last targeter run."""
        return self._intf.get_property(IAgVABisectionControl._metadata, IAgVABisectionControl._get_CurrentValue_metadata)

    _set_CurrentValue_metadata = { "name" : "CurrentValue",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @CurrentValue.setter
    def CurrentValue(self, newVal:typing.Any) -> None:
        return self._intf.set_property(IAgVABisectionControl._metadata, IAgVABisectionControl._set_CurrentValue_metadata, newVal)

    _get_BoundSearchStep_metadata = { "name" : "BoundSearchStep",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def BoundSearchStep(self) -> typing.Any:
        """Dimension depends on context."""
        return self._intf.get_property(IAgVABisectionControl._metadata, IAgVABisectionControl._get_BoundSearchStep_metadata)

    _set_BoundSearchStep_metadata = { "name" : "BoundSearchStep",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @BoundSearchStep.setter
    def BoundSearchStep(self, newVal:typing.Any) -> None:
        return self._intf.set_property(IAgVABisectionControl._metadata, IAgVABisectionControl._set_BoundSearchStep_metadata, newVal)

    _get_UseCustomDisplayUnit_metadata = { "name" : "UseCustomDisplayUnit",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def UseCustomDisplayUnit(self) -> bool:
        """If true, allows display of values in another unit."""
        return self._intf.get_property(IAgVABisectionControl._metadata, IAgVABisectionControl._get_UseCustomDisplayUnit_metadata)

    _set_UseCustomDisplayUnit_metadata = { "name" : "UseCustomDisplayUnit",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @UseCustomDisplayUnit.setter
    def UseCustomDisplayUnit(self, newVal:bool) -> None:
        return self._intf.set_property(IAgVABisectionControl._metadata, IAgVABisectionControl._set_UseCustomDisplayUnit_metadata, newVal)

    _get_CustomDisplayUnit_metadata = { "name" : "CustomDisplayUnit",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def CustomDisplayUnit(self) -> str:
        """The unit in which the value will be displayed in the GUI."""
        return self._intf.get_property(IAgVABisectionControl._metadata, IAgVABisectionControl._get_CustomDisplayUnit_metadata)

    _set_CustomDisplayUnit_metadata = { "name" : "CustomDisplayUnit",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @CustomDisplayUnit.setter
    def CustomDisplayUnit(self, newVal:str) -> None:
        return self._intf.set_property(IAgVABisectionControl._metadata, IAgVABisectionControl._set_CustomDisplayUnit_metadata, newVal)


agcls.AgClassCatalog.add_catalog_entry("{F60B718A-09E3-4C6B-A05D-3562CFB5EF4E}", IAgVABisectionControl)
agcls.AgTypeNameMap["IAgVABisectionControl"] = IAgVABisectionControl

class IAgVAStateCalcHeightAboveTerrain(object):
    """Interface for StateCalcHeightAboveTerrain"""
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{30A4FAC3-1250-456A-BB29-689AA50F8D75}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_CentralBodyName" : 1,
                             "set_CentralBodyName" : 2, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAStateCalcHeightAboveTerrain._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcHeightAboveTerrain from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcHeightAboveTerrain.__dict__ and type(IAgVAStateCalcHeightAboveTerrain.__dict__[attrname]) == property:
            return IAgVAStateCalcHeightAboveTerrain.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcHeightAboveTerrain.")
    
    _get_CentralBodyName_metadata = { "name" : "CentralBodyName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def CentralBodyName(self) -> str:
        """Central Body used for calculation"""
        return self._intf.get_property(IAgVAStateCalcHeightAboveTerrain._metadata, IAgVAStateCalcHeightAboveTerrain._get_CentralBodyName_metadata)

    _set_CentralBodyName_metadata = { "name" : "CentralBodyName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @CentralBodyName.setter
    def CentralBodyName(self, inVal:str) -> None:
        """Central Body used for calculation"""
        return self._intf.set_property(IAgVAStateCalcHeightAboveTerrain._metadata, IAgVAStateCalcHeightAboveTerrain._set_CentralBodyName_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{30A4FAC3-1250-456A-BB29-689AA50F8D75}", IAgVAStateCalcHeightAboveTerrain)
agcls.AgTypeNameMap["IAgVAStateCalcHeightAboveTerrain"] = IAgVAStateCalcHeightAboveTerrain

class IAgVAStateCalcEpoch(object):
    """Properties for an Epoch calculation object."""
    _num_methods = 0
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{F23ADE47-91EF-41B9-9606-DA034C50F69D}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : {  }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAStateCalcEpoch._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcEpoch from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcEpoch.__dict__ and type(IAgVAStateCalcEpoch.__dict__[attrname]) == property:
            return IAgVAStateCalcEpoch.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcEpoch.")
    

agcls.AgClassCatalog.add_catalog_entry("{F23ADE47-91EF-41B9-9606-DA034C50F69D}", IAgVAStateCalcEpoch)
agcls.AgTypeNameMap["IAgVAStateCalcEpoch"] = IAgVAStateCalcEpoch

class IAgVAStateCalcOrbitDelaunayG(object):
    """Interface for AsStateCalcOrbitDelaunayG"""
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{8527A30E-E743-4040-8B0D-7AE1EB237279}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_CentralBodyName" : 1,
                             "set_CentralBodyName" : 2,
                             "get_ElementType" : 3,
                             "set_ElementType" : 4, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAStateCalcOrbitDelaunayG._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcOrbitDelaunayG from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcOrbitDelaunayG.__dict__ and type(IAgVAStateCalcOrbitDelaunayG.__dict__[attrname]) == property:
            return IAgVAStateCalcOrbitDelaunayG.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcOrbitDelaunayG.")
    
    _get_CentralBodyName_metadata = { "name" : "CentralBodyName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def CentralBodyName(self) -> str:
        """Central Body used for calculation"""
        return self._intf.get_property(IAgVAStateCalcOrbitDelaunayG._metadata, IAgVAStateCalcOrbitDelaunayG._get_CentralBodyName_metadata)

    _set_CentralBodyName_metadata = { "name" : "CentralBodyName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @CentralBodyName.setter
    def CentralBodyName(self, inVal:str) -> None:
        """Central Body used for calculation"""
        return self._intf.set_property(IAgVAStateCalcOrbitDelaunayG._metadata, IAgVAStateCalcOrbitDelaunayG._set_CentralBodyName_metadata, inVal)

    _get_ElementType_metadata = { "name" : "ElementType",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAElement),) }
    @property
    def ElementType(self) -> "AgEVAElement":
        """Choice of osculating or mean elements"""
        return self._intf.get_property(IAgVAStateCalcOrbitDelaunayG._metadata, IAgVAStateCalcOrbitDelaunayG._get_ElementType_metadata)

    _set_ElementType_metadata = { "name" : "ElementType",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAElement),) }
    @ElementType.setter
    def ElementType(self, inVal:"AgEVAElement") -> None:
        """Choice of osculating or mean elements"""
        return self._intf.set_property(IAgVAStateCalcOrbitDelaunayG._metadata, IAgVAStateCalcOrbitDelaunayG._set_ElementType_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{8527A30E-E743-4040-8B0D-7AE1EB237279}", IAgVAStateCalcOrbitDelaunayG)
agcls.AgTypeNameMap["IAgVAStateCalcOrbitDelaunayG"] = IAgVAStateCalcOrbitDelaunayG

class IAgVAStateCalcOrbitDelaunayH(object):
    """Interface for AsStateCalcOrbitDelaunayH"""
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{01E122E4-2B6D-4301-81D2-B83B6C169CB5}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_CentralBodyName" : 1,
                             "set_CentralBodyName" : 2,
                             "get_ElementType" : 3,
                             "set_ElementType" : 4, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAStateCalcOrbitDelaunayH._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcOrbitDelaunayH from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcOrbitDelaunayH.__dict__ and type(IAgVAStateCalcOrbitDelaunayH.__dict__[attrname]) == property:
            return IAgVAStateCalcOrbitDelaunayH.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcOrbitDelaunayH.")
    
    _get_CentralBodyName_metadata = { "name" : "CentralBodyName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def CentralBodyName(self) -> str:
        """Central Body used for calculation"""
        return self._intf.get_property(IAgVAStateCalcOrbitDelaunayH._metadata, IAgVAStateCalcOrbitDelaunayH._get_CentralBodyName_metadata)

    _set_CentralBodyName_metadata = { "name" : "CentralBodyName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @CentralBodyName.setter
    def CentralBodyName(self, inVal:str) -> None:
        """Central Body used for calculation"""
        return self._intf.set_property(IAgVAStateCalcOrbitDelaunayH._metadata, IAgVAStateCalcOrbitDelaunayH._set_CentralBodyName_metadata, inVal)

    _get_ElementType_metadata = { "name" : "ElementType",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAElement),) }
    @property
    def ElementType(self) -> "AgEVAElement":
        """Choice of osculating or mean elements"""
        return self._intf.get_property(IAgVAStateCalcOrbitDelaunayH._metadata, IAgVAStateCalcOrbitDelaunayH._get_ElementType_metadata)

    _set_ElementType_metadata = { "name" : "ElementType",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAElement),) }
    @ElementType.setter
    def ElementType(self, inVal:"AgEVAElement") -> None:
        """Choice of osculating or mean elements"""
        return self._intf.set_property(IAgVAStateCalcOrbitDelaunayH._metadata, IAgVAStateCalcOrbitDelaunayH._set_ElementType_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{01E122E4-2B6D-4301-81D2-B83B6C169CB5}", IAgVAStateCalcOrbitDelaunayH)
agcls.AgTypeNameMap["IAgVAStateCalcOrbitDelaunayH"] = IAgVAStateCalcOrbitDelaunayH

class IAgVAStateCalcOrbitDelaunayL(object):
    """Interface for AsStateCalcOrbitDelaunayL"""
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{10C517CA-1CF0-45FF-B36E-3E3181269745}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_CentralBodyName" : 1,
                             "set_CentralBodyName" : 2,
                             "get_ElementType" : 3,
                             "set_ElementType" : 4, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAStateCalcOrbitDelaunayL._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcOrbitDelaunayL from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcOrbitDelaunayL.__dict__ and type(IAgVAStateCalcOrbitDelaunayL.__dict__[attrname]) == property:
            return IAgVAStateCalcOrbitDelaunayL.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcOrbitDelaunayL.")
    
    _get_CentralBodyName_metadata = { "name" : "CentralBodyName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def CentralBodyName(self) -> str:
        """Central Body used for calculation"""
        return self._intf.get_property(IAgVAStateCalcOrbitDelaunayL._metadata, IAgVAStateCalcOrbitDelaunayL._get_CentralBodyName_metadata)

    _set_CentralBodyName_metadata = { "name" : "CentralBodyName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @CentralBodyName.setter
    def CentralBodyName(self, inVal:str) -> None:
        """Central Body used for calculation"""
        return self._intf.set_property(IAgVAStateCalcOrbitDelaunayL._metadata, IAgVAStateCalcOrbitDelaunayL._set_CentralBodyName_metadata, inVal)

    _get_ElementType_metadata = { "name" : "ElementType",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAElement),) }
    @property
    def ElementType(self) -> "AgEVAElement":
        """Choice of osculating or mean elements"""
        return self._intf.get_property(IAgVAStateCalcOrbitDelaunayL._metadata, IAgVAStateCalcOrbitDelaunayL._get_ElementType_metadata)

    _set_ElementType_metadata = { "name" : "ElementType",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAElement),) }
    @ElementType.setter
    def ElementType(self, inVal:"AgEVAElement") -> None:
        """Choice of osculating or mean elements"""
        return self._intf.set_property(IAgVAStateCalcOrbitDelaunayL._metadata, IAgVAStateCalcOrbitDelaunayL._set_ElementType_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{10C517CA-1CF0-45FF-B36E-3E3181269745}", IAgVAStateCalcOrbitDelaunayL)
agcls.AgTypeNameMap["IAgVAStateCalcOrbitDelaunayL"] = IAgVAStateCalcOrbitDelaunayL

class IAgVAStateCalcOrbitSemiLatusRectum(object):
    """Interface for AsStateCalcOrbitSemiLatusRectum"""
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{06396376-8F96-419A-86D4-32298E6A6087}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_CentralBodyName" : 1,
                             "set_CentralBodyName" : 2,
                             "get_ElementType" : 3,
                             "set_ElementType" : 4, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAStateCalcOrbitSemiLatusRectum._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcOrbitSemiLatusRectum from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcOrbitSemiLatusRectum.__dict__ and type(IAgVAStateCalcOrbitSemiLatusRectum.__dict__[attrname]) == property:
            return IAgVAStateCalcOrbitSemiLatusRectum.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcOrbitSemiLatusRectum.")
    
    _get_CentralBodyName_metadata = { "name" : "CentralBodyName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def CentralBodyName(self) -> str:
        """Central Body used for calculation"""
        return self._intf.get_property(IAgVAStateCalcOrbitSemiLatusRectum._metadata, IAgVAStateCalcOrbitSemiLatusRectum._get_CentralBodyName_metadata)

    _set_CentralBodyName_metadata = { "name" : "CentralBodyName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @CentralBodyName.setter
    def CentralBodyName(self, inVal:str) -> None:
        """Central Body used for calculation"""
        return self._intf.set_property(IAgVAStateCalcOrbitSemiLatusRectum._metadata, IAgVAStateCalcOrbitSemiLatusRectum._set_CentralBodyName_metadata, inVal)

    _get_ElementType_metadata = { "name" : "ElementType",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAElement),) }
    @property
    def ElementType(self) -> "AgEVAElement":
        """Choice of osculating or mean elements"""
        return self._intf.get_property(IAgVAStateCalcOrbitSemiLatusRectum._metadata, IAgVAStateCalcOrbitSemiLatusRectum._get_ElementType_metadata)

    _set_ElementType_metadata = { "name" : "ElementType",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAElement),) }
    @ElementType.setter
    def ElementType(self, inVal:"AgEVAElement") -> None:
        """Choice of osculating or mean elements"""
        return self._intf.set_property(IAgVAStateCalcOrbitSemiLatusRectum._metadata, IAgVAStateCalcOrbitSemiLatusRectum._set_ElementType_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{06396376-8F96-419A-86D4-32298E6A6087}", IAgVAStateCalcOrbitSemiLatusRectum)
agcls.AgTypeNameMap["IAgVAStateCalcOrbitSemiLatusRectum"] = IAgVAStateCalcOrbitSemiLatusRectum

class IAgVAStateCalcJacobiConstant(object):
    """Properties for a Jacobi Constant calculation object."""
    _num_methods = 0
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{12857E60-E0BF-49BE-84EA-F9A0C73DB557}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : {  }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAStateCalcJacobiConstant._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcJacobiConstant from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcJacobiConstant.__dict__ and type(IAgVAStateCalcJacobiConstant.__dict__[attrname]) == property:
            return IAgVAStateCalcJacobiConstant.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcJacobiConstant.")
    

agcls.AgClassCatalog.add_catalog_entry("{12857E60-E0BF-49BE-84EA-F9A0C73DB557}", IAgVAStateCalcJacobiConstant)
agcls.AgTypeNameMap["IAgVAStateCalcJacobiConstant"] = IAgVAStateCalcJacobiConstant

class IAgVAStateCalcCartesianElem(object):
    """Properties for a Cartesian Element calculation object."""
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{43611884-2507-4D9B-AFF2-9BC5AA0786BD}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_CoordSystemName" : 1,
                             "set_CoordSystemName" : 2, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAStateCalcCartesianElem._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcCartesianElem from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcCartesianElem.__dict__ and type(IAgVAStateCalcCartesianElem.__dict__[attrname]) == property:
            return IAgVAStateCalcCartesianElem.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcCartesianElem.")
    
    _get_CoordSystemName_metadata = { "name" : "CoordSystemName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def CoordSystemName(self) -> str:
        """The coordinate system within which the element is defined."""
        return self._intf.get_property(IAgVAStateCalcCartesianElem._metadata, IAgVAStateCalcCartesianElem._get_CoordSystemName_metadata)

    _set_CoordSystemName_metadata = { "name" : "CoordSystemName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @CoordSystemName.setter
    def CoordSystemName(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAStateCalcCartesianElem._metadata, IAgVAStateCalcCartesianElem._set_CoordSystemName_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{43611884-2507-4D9B-AFF2-9BC5AA0786BD}", IAgVAStateCalcCartesianElem)
agcls.AgTypeNameMap["IAgVAStateCalcCartesianElem"] = IAgVAStateCalcCartesianElem

class IAgVAStateCalcCartSTMElem(object):
    """Properties for a Cartesian STM Element calculation object."""
    _num_methods = 6
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{72B246C3-618A-40B7-8501-C39BF07E4B95}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_CoordSystemName" : 1,
                             "set_CoordSystemName" : 2,
                             "get_FinalVar" : 3,
                             "set_FinalVar" : 4,
                             "get_InitVar" : 5,
                             "set_InitVar" : 6, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAStateCalcCartSTMElem._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcCartSTMElem from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcCartSTMElem.__dict__ and type(IAgVAStateCalcCartSTMElem.__dict__[attrname]) == property:
            return IAgVAStateCalcCartSTMElem.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcCartSTMElem.")
    
    _get_CoordSystemName_metadata = { "name" : "CoordSystemName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def CoordSystemName(self) -> str:
        """The coordinate system within which the element is defined."""
        return self._intf.get_property(IAgVAStateCalcCartSTMElem._metadata, IAgVAStateCalcCartSTMElem._get_CoordSystemName_metadata)

    _set_CoordSystemName_metadata = { "name" : "CoordSystemName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @CoordSystemName.setter
    def CoordSystemName(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAStateCalcCartSTMElem._metadata, IAgVAStateCalcCartSTMElem._set_CoordSystemName_metadata, inVal)

    _get_FinalVar_metadata = { "name" : "FinalVar",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVASTMPertVariables),) }
    @property
    def FinalVar(self) -> "AgEVASTMPertVariables":
        """The final variation variable."""
        return self._intf.get_property(IAgVAStateCalcCartSTMElem._metadata, IAgVAStateCalcCartSTMElem._get_FinalVar_metadata)

    _set_FinalVar_metadata = { "name" : "FinalVar",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVASTMPertVariables),) }
    @FinalVar.setter
    def FinalVar(self, inVal:"AgEVASTMPertVariables") -> None:
        return self._intf.set_property(IAgVAStateCalcCartSTMElem._metadata, IAgVAStateCalcCartSTMElem._set_FinalVar_metadata, inVal)

    _get_InitVar_metadata = { "name" : "InitVar",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVASTMPertVariables),) }
    @property
    def InitVar(self) -> "AgEVASTMPertVariables":
        """The initial variation variable."""
        return self._intf.get_property(IAgVAStateCalcCartSTMElem._metadata, IAgVAStateCalcCartSTMElem._get_InitVar_metadata)

    _set_InitVar_metadata = { "name" : "InitVar",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVASTMPertVariables),) }
    @InitVar.setter
    def InitVar(self, inVal:"AgEVASTMPertVariables") -> None:
        return self._intf.set_property(IAgVAStateCalcCartSTMElem._metadata, IAgVAStateCalcCartSTMElem._set_InitVar_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{72B246C3-618A-40B7-8501-C39BF07E4B95}", IAgVAStateCalcCartSTMElem)
agcls.AgTypeNameMap["IAgVAStateCalcCartSTMElem"] = IAgVAStateCalcCartSTMElem

class IAgVAStateCalcSTMEigenval(object):
    """Properties for an STM Eigenvalue calculation object."""
    _num_methods = 6
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{24838E22-D7CE-40FF-8268-9E72AE39467B}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_CoordSystemName" : 1,
                             "set_CoordSystemName" : 2,
                             "get_EigenvalueNumber" : 3,
                             "set_EigenvalueNumber" : 4,
                             "get_EigenvalueComplexPart" : 5,
                             "set_EigenvalueComplexPart" : 6, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAStateCalcSTMEigenval._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcSTMEigenval from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcSTMEigenval.__dict__ and type(IAgVAStateCalcSTMEigenval.__dict__[attrname]) == property:
            return IAgVAStateCalcSTMEigenval.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcSTMEigenval.")
    
    _get_CoordSystemName_metadata = { "name" : "CoordSystemName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def CoordSystemName(self) -> str:
        """The coordinate system within which the element is defined."""
        return self._intf.get_property(IAgVAStateCalcSTMEigenval._metadata, IAgVAStateCalcSTMEigenval._get_CoordSystemName_metadata)

    _set_CoordSystemName_metadata = { "name" : "CoordSystemName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @CoordSystemName.setter
    def CoordSystemName(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAStateCalcSTMEigenval._metadata, IAgVAStateCalcSTMEigenval._set_CoordSystemName_metadata, inVal)

    _get_EigenvalueNumber_metadata = { "name" : "EigenvalueNumber",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVASTMEigenNumber),) }
    @property
    def EigenvalueNumber(self) -> "AgEVASTMEigenNumber":
        """The number identifying one of the six Eigenvalues."""
        return self._intf.get_property(IAgVAStateCalcSTMEigenval._metadata, IAgVAStateCalcSTMEigenval._get_EigenvalueNumber_metadata)

    _set_EigenvalueNumber_metadata = { "name" : "EigenvalueNumber",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVASTMEigenNumber),) }
    @EigenvalueNumber.setter
    def EigenvalueNumber(self, inVal:"AgEVASTMEigenNumber") -> None:
        return self._intf.set_property(IAgVAStateCalcSTMEigenval._metadata, IAgVAStateCalcSTMEigenval._set_EigenvalueNumber_metadata, inVal)

    _get_EigenvalueComplexPart_metadata = { "name" : "EigenvalueComplexPart",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAComplexNumber),) }
    @property
    def EigenvalueComplexPart(self) -> "AgEVAComplexNumber":
        """Whether this value represents the real or imaginary part of the Eigenvalue."""
        return self._intf.get_property(IAgVAStateCalcSTMEigenval._metadata, IAgVAStateCalcSTMEigenval._get_EigenvalueComplexPart_metadata)

    _set_EigenvalueComplexPart_metadata = { "name" : "EigenvalueComplexPart",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAComplexNumber),) }
    @EigenvalueComplexPart.setter
    def EigenvalueComplexPart(self, inVal:"AgEVAComplexNumber") -> None:
        return self._intf.set_property(IAgVAStateCalcSTMEigenval._metadata, IAgVAStateCalcSTMEigenval._set_EigenvalueComplexPart_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{24838E22-D7CE-40FF-8268-9E72AE39467B}", IAgVAStateCalcSTMEigenval)
agcls.AgTypeNameMap["IAgVAStateCalcSTMEigenval"] = IAgVAStateCalcSTMEigenval

class IAgVAStateCalcSTMEigenvecElem(object):
    """Properties for an STM Eigenvector element calculation object."""
    _num_methods = 8
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{7D28974A-19AF-4E80-889E-5CDA7E9DACEB}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_CoordSystemName" : 1,
                             "set_CoordSystemName" : 2,
                             "get_EigenvectorNumber" : 3,
                             "set_EigenvectorNumber" : 4,
                             "get_StateVariable" : 5,
                             "set_StateVariable" : 6,
                             "get_EigenvectorComplexPart" : 7,
                             "set_EigenvectorComplexPart" : 8, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAStateCalcSTMEigenvecElem._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcSTMEigenvecElem from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcSTMEigenvecElem.__dict__ and type(IAgVAStateCalcSTMEigenvecElem.__dict__[attrname]) == property:
            return IAgVAStateCalcSTMEigenvecElem.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcSTMEigenvecElem.")
    
    _get_CoordSystemName_metadata = { "name" : "CoordSystemName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def CoordSystemName(self) -> str:
        """The coordinate system within which the element is defined."""
        return self._intf.get_property(IAgVAStateCalcSTMEigenvecElem._metadata, IAgVAStateCalcSTMEigenvecElem._get_CoordSystemName_metadata)

    _set_CoordSystemName_metadata = { "name" : "CoordSystemName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @CoordSystemName.setter
    def CoordSystemName(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAStateCalcSTMEigenvecElem._metadata, IAgVAStateCalcSTMEigenvecElem._set_CoordSystemName_metadata, inVal)

    _get_EigenvectorNumber_metadata = { "name" : "EigenvectorNumber",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVASTMEigenNumber),) }
    @property
    def EigenvectorNumber(self) -> "AgEVASTMEigenNumber":
        """The number identifying one of the six Eigenvectors."""
        return self._intf.get_property(IAgVAStateCalcSTMEigenvecElem._metadata, IAgVAStateCalcSTMEigenvecElem._get_EigenvectorNumber_metadata)

    _set_EigenvectorNumber_metadata = { "name" : "EigenvectorNumber",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVASTMEigenNumber),) }
    @EigenvectorNumber.setter
    def EigenvectorNumber(self, inVal:"AgEVASTMEigenNumber") -> None:
        return self._intf.set_property(IAgVAStateCalcSTMEigenvecElem._metadata, IAgVAStateCalcSTMEigenvecElem._set_EigenvectorNumber_metadata, inVal)

    _get_StateVariable_metadata = { "name" : "StateVariable",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVASTMPertVariables),) }
    @property
    def StateVariable(self) -> "AgEVASTMPertVariables":
        """The variable identifying the component within an Eigenvector."""
        return self._intf.get_property(IAgVAStateCalcSTMEigenvecElem._metadata, IAgVAStateCalcSTMEigenvecElem._get_StateVariable_metadata)

    _set_StateVariable_metadata = { "name" : "StateVariable",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVASTMPertVariables),) }
    @StateVariable.setter
    def StateVariable(self, inVal:"AgEVASTMPertVariables") -> None:
        return self._intf.set_property(IAgVAStateCalcSTMEigenvecElem._metadata, IAgVAStateCalcSTMEigenvecElem._set_StateVariable_metadata, inVal)

    _get_EigenvectorComplexPart_metadata = { "name" : "EigenvectorComplexPart",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAComplexNumber),) }
    @property
    def EigenvectorComplexPart(self) -> "AgEVAComplexNumber":
        """Whether this value represents the real or imaginary part of an Eigenvector element."""
        return self._intf.get_property(IAgVAStateCalcSTMEigenvecElem._metadata, IAgVAStateCalcSTMEigenvecElem._get_EigenvectorComplexPart_metadata)

    _set_EigenvectorComplexPart_metadata = { "name" : "EigenvectorComplexPart",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAComplexNumber),) }
    @EigenvectorComplexPart.setter
    def EigenvectorComplexPart(self, inVal:"AgEVAComplexNumber") -> None:
        return self._intf.set_property(IAgVAStateCalcSTMEigenvecElem._metadata, IAgVAStateCalcSTMEigenvecElem._set_EigenvectorComplexPart_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{7D28974A-19AF-4E80-889E-5CDA7E9DACEB}", IAgVAStateCalcSTMEigenvecElem)
agcls.AgTypeNameMap["IAgVAStateCalcSTMEigenvecElem"] = IAgVAStateCalcSTMEigenvecElem

class IAgVAStateCalcEnvironment(object):
    """Properties for an Environment calculation object."""
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{BB89B6D8-34A3-42F2-B7B3-CFDAAA9BE00C}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_CentralBodyName" : 1,
                             "set_CentralBodyName" : 2,
                             "get_AtmosModelName" : 3,
                             "set_AtmosModelName" : 4, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAStateCalcEnvironment._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcEnvironment from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcEnvironment.__dict__ and type(IAgVAStateCalcEnvironment.__dict__[attrname]) == property:
            return IAgVAStateCalcEnvironment.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcEnvironment.")
    
    _get_CentralBodyName_metadata = { "name" : "CentralBodyName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def CentralBodyName(self) -> str:
        """The central body of the component."""
        return self._intf.get_property(IAgVAStateCalcEnvironment._metadata, IAgVAStateCalcEnvironment._get_CentralBodyName_metadata)

    _set_CentralBodyName_metadata = { "name" : "CentralBodyName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @CentralBodyName.setter
    def CentralBodyName(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAStateCalcEnvironment._metadata, IAgVAStateCalcEnvironment._set_CentralBodyName_metadata, inVal)

    _get_AtmosModelName_metadata = { "name" : "AtmosModelName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def AtmosModelName(self) -> str:
        """The atmospheric density model of the component."""
        return self._intf.get_property(IAgVAStateCalcEnvironment._metadata, IAgVAStateCalcEnvironment._get_AtmosModelName_metadata)

    _set_AtmosModelName_metadata = { "name" : "AtmosModelName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @AtmosModelName.setter
    def AtmosModelName(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAStateCalcEnvironment._metadata, IAgVAStateCalcEnvironment._set_AtmosModelName_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{BB89B6D8-34A3-42F2-B7B3-CFDAAA9BE00C}", IAgVAStateCalcEnvironment)
agcls.AgTypeNameMap["IAgVAStateCalcEnvironment"] = IAgVAStateCalcEnvironment

class IAgVAStateCalcEquinoctialElem(object):
    """Properties for an Equinoctial Element calculation object."""
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{A63BA51C-CE64-410D-832F-7BDCE13E5069}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_CoordSystemName" : 1,
                             "set_CoordSystemName" : 2,
                             "get_ElementType" : 3,
                             "set_ElementType" : 4, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAStateCalcEquinoctialElem._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcEquinoctialElem from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcEquinoctialElem.__dict__ and type(IAgVAStateCalcEquinoctialElem.__dict__[attrname]) == property:
            return IAgVAStateCalcEquinoctialElem.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcEquinoctialElem.")
    
    _get_CoordSystemName_metadata = { "name" : "CoordSystemName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def CoordSystemName(self) -> str:
        """The coordinate system within which the element is defined."""
        return self._intf.get_property(IAgVAStateCalcEquinoctialElem._metadata, IAgVAStateCalcEquinoctialElem._get_CoordSystemName_metadata)

    _set_CoordSystemName_metadata = { "name" : "CoordSystemName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @CoordSystemName.setter
    def CoordSystemName(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAStateCalcEquinoctialElem._metadata, IAgVAStateCalcEquinoctialElem._set_CoordSystemName_metadata, inVal)

    _get_ElementType_metadata = { "name" : "ElementType",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVACalcObjectElem),) }
    @property
    def ElementType(self) -> "AgEVACalcObjectElem":
        """The element type."""
        return self._intf.get_property(IAgVAStateCalcEquinoctialElem._metadata, IAgVAStateCalcEquinoctialElem._get_ElementType_metadata)

    _set_ElementType_metadata = { "name" : "ElementType",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVACalcObjectElem),) }
    @ElementType.setter
    def ElementType(self, inVal:"AgEVACalcObjectElem") -> None:
        return self._intf.set_property(IAgVAStateCalcEquinoctialElem._metadata, IAgVAStateCalcEquinoctialElem._set_ElementType_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{A63BA51C-CE64-410D-832F-7BDCE13E5069}", IAgVAStateCalcEquinoctialElem)
agcls.AgTypeNameMap["IAgVAStateCalcEquinoctialElem"] = IAgVAStateCalcEquinoctialElem

class IAgVAStateCalcDamageFlux(object):
    """Interface for AgAsStateCalcDamageFlux"""
    _num_methods = 0
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{5E7EBA7C-121F-4649-8599-A222F65BA10B}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : {  }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAStateCalcDamageFlux._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcDamageFlux from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcDamageFlux.__dict__ and type(IAgVAStateCalcDamageFlux.__dict__[attrname]) == property:
            return IAgVAStateCalcDamageFlux.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcDamageFlux.")
    

agcls.AgClassCatalog.add_catalog_entry("{5E7EBA7C-121F-4649-8599-A222F65BA10B}", IAgVAStateCalcDamageFlux)
agcls.AgTypeNameMap["IAgVAStateCalcDamageFlux"] = IAgVAStateCalcDamageFlux

class IAgVAStateCalcDamageMassFlux(object):
    """Interface for AgAsStateCalcDamageMassFlux"""
    _num_methods = 0
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{CDA309A6-91BD-49DF-BE71-E3F194AB73AE}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : {  }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAStateCalcDamageMassFlux._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcDamageMassFlux from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcDamageMassFlux.__dict__ and type(IAgVAStateCalcDamageMassFlux.__dict__[attrname]) == property:
            return IAgVAStateCalcDamageMassFlux.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcDamageMassFlux.")
    

agcls.AgClassCatalog.add_catalog_entry("{CDA309A6-91BD-49DF-BE71-E3F194AB73AE}", IAgVAStateCalcDamageMassFlux)
agcls.AgTypeNameMap["IAgVAStateCalcDamageMassFlux"] = IAgVAStateCalcDamageMassFlux

class IAgVAStateCalcMagFieldDipoleL(object):
    """Interface for AgAsStateCalcMagFieldDipoleL"""
    _num_methods = 0
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{46E20C5A-4030-4D57-AAA7-38CFFD65D91D}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : {  }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAStateCalcMagFieldDipoleL._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcMagFieldDipoleL from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcMagFieldDipoleL.__dict__ and type(IAgVAStateCalcMagFieldDipoleL.__dict__[attrname]) == property:
            return IAgVAStateCalcMagFieldDipoleL.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcMagFieldDipoleL.")
    

agcls.AgClassCatalog.add_catalog_entry("{46E20C5A-4030-4D57-AAA7-38CFFD65D91D}", IAgVAStateCalcMagFieldDipoleL)
agcls.AgTypeNameMap["IAgVAStateCalcMagFieldDipoleL"] = IAgVAStateCalcMagFieldDipoleL

class IAgVAStateCalcSEETMagFieldFieldLineSepAngle(object):
    """Properties for a SEETMagFieldFieldLineSepAngle calculation object."""
    _num_methods = 1
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{FFCDD5EA-7808-4A0C-BDA5-5E4BC504F968}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_TargetObject" : 1, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAStateCalcSEETMagFieldFieldLineSepAngle._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcSEETMagFieldFieldLineSepAngle from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcSEETMagFieldFieldLineSepAngle.__dict__ and type(IAgVAStateCalcSEETMagFieldFieldLineSepAngle.__dict__[attrname]) == property:
            return IAgVAStateCalcSEETMagFieldFieldLineSepAngle.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcSEETMagFieldFieldLineSepAngle.")
    
    _get_TargetObject_metadata = { "name" : "TargetObject",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def TargetObject(self) -> "IAgLinkToObject":
        """The reference object."""
        return self._intf.get_property(IAgVAStateCalcSEETMagFieldFieldLineSepAngle._metadata, IAgVAStateCalcSEETMagFieldFieldLineSepAngle._get_TargetObject_metadata)


agcls.AgClassCatalog.add_catalog_entry("{FFCDD5EA-7808-4A0C-BDA5-5E4BC504F968}", IAgVAStateCalcSEETMagFieldFieldLineSepAngle)
agcls.AgTypeNameMap["IAgVAStateCalcSEETMagFieldFieldLineSepAngle"] = IAgVAStateCalcSEETMagFieldFieldLineSepAngle

class IAgVAStateCalcImpactFlux(object):
    """Interface for AgAsStateCalcImpactFlux"""
    _num_methods = 0
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{70F6FCD6-139C-4166-B242-61652F690A89}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : {  }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAStateCalcImpactFlux._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcImpactFlux from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcImpactFlux.__dict__ and type(IAgVAStateCalcImpactFlux.__dict__[attrname]) == property:
            return IAgVAStateCalcImpactFlux.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcImpactFlux.")
    

agcls.AgClassCatalog.add_catalog_entry("{70F6FCD6-139C-4166-B242-61652F690A89}", IAgVAStateCalcImpactFlux)
agcls.AgTypeNameMap["IAgVAStateCalcImpactFlux"] = IAgVAStateCalcImpactFlux

class IAgVAStateCalcImpactMassFlux(object):
    """Interface for AgAsStateCalcImpactMassFlux"""
    _num_methods = 0
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{67D77299-1936-4E9A-A44F-C155686E4DB2}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : {  }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAStateCalcImpactMassFlux._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcImpactMassFlux from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcImpactMassFlux.__dict__ and type(IAgVAStateCalcImpactMassFlux.__dict__[attrname]) == property:
            return IAgVAStateCalcImpactMassFlux.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcImpactMassFlux.")
    

agcls.AgClassCatalog.add_catalog_entry("{67D77299-1936-4E9A-A44F-C155686E4DB2}", IAgVAStateCalcImpactMassFlux)
agcls.AgTypeNameMap["IAgVAStateCalcImpactMassFlux"] = IAgVAStateCalcImpactMassFlux

class IAgVAStateCalcSEETSAAFlux(object):
    """Interface for AgAsStateCalcSEETSAAFlux"""
    _num_methods = 0
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{3C633703-2759-4894-96EA-F6E3C2F98AA1}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : {  }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAStateCalcSEETSAAFlux._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcSEETSAAFlux from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcSEETSAAFlux.__dict__ and type(IAgVAStateCalcSEETSAAFlux.__dict__[attrname]) == property:
            return IAgVAStateCalcSEETSAAFlux.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcSEETSAAFlux.")
    

agcls.AgClassCatalog.add_catalog_entry("{3C633703-2759-4894-96EA-F6E3C2F98AA1}", IAgVAStateCalcSEETSAAFlux)
agcls.AgTypeNameMap["IAgVAStateCalcSEETSAAFlux"] = IAgVAStateCalcSEETSAAFlux

class IAgVAStateCalcSEETVehTemp(object):
    """Interface for AgAsStateCalcSEETVehTemp"""
    _num_methods = 0
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{4B70C4FB-3403-4F3F-9F3F-B2C0CF8DB393}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : {  }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAStateCalcSEETVehTemp._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcSEETVehTemp from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcSEETVehTemp.__dict__ and type(IAgVAStateCalcSEETVehTemp.__dict__[attrname]) == property:
            return IAgVAStateCalcSEETVehTemp.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcSEETVehTemp.")
    

agcls.AgClassCatalog.add_catalog_entry("{4B70C4FB-3403-4F3F-9F3F-B2C0CF8DB393}", IAgVAStateCalcSEETVehTemp)
agcls.AgTypeNameMap["IAgVAStateCalcSEETVehTemp"] = IAgVAStateCalcSEETVehTemp

class IAgVAStateCalcCloseApproachBearing(object):
    """Properties for a CloseApproachBearing calculation object."""
    _num_methods = 5
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{E7717197-6955-4ECB-BF98-DA50AD7547F3}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_CentralBodyName" : 1,
                             "set_CentralBodyName" : 2,
                             "get_ReferenceSelection" : 3,
                             "set_ReferenceSelection" : 4,
                             "get_Reference" : 5, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAStateCalcCloseApproachBearing._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcCloseApproachBearing from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcCloseApproachBearing.__dict__ and type(IAgVAStateCalcCloseApproachBearing.__dict__[attrname]) == property:
            return IAgVAStateCalcCloseApproachBearing.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcCloseApproachBearing.")
    
    _get_CentralBodyName_metadata = { "name" : "CentralBodyName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def CentralBodyName(self) -> str:
        """The central body of the component."""
        return self._intf.get_property(IAgVAStateCalcCloseApproachBearing._metadata, IAgVAStateCalcCloseApproachBearing._get_CentralBodyName_metadata)

    _set_CentralBodyName_metadata = { "name" : "CentralBodyName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @CentralBodyName.setter
    def CentralBodyName(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAStateCalcCloseApproachBearing._metadata, IAgVAStateCalcCloseApproachBearing._set_CentralBodyName_metadata, inVal)

    _get_ReferenceSelection_metadata = { "name" : "ReferenceSelection",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVACalcObjectReference),) }
    @property
    def ReferenceSelection(self) -> "AgEVACalcObjectReference":
        """The reference object selection."""
        return self._intf.get_property(IAgVAStateCalcCloseApproachBearing._metadata, IAgVAStateCalcCloseApproachBearing._get_ReferenceSelection_metadata)

    _set_ReferenceSelection_metadata = { "name" : "ReferenceSelection",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVACalcObjectReference),) }
    @ReferenceSelection.setter
    def ReferenceSelection(self, inVal:"AgEVACalcObjectReference") -> None:
        return self._intf.set_property(IAgVAStateCalcCloseApproachBearing._metadata, IAgVAStateCalcCloseApproachBearing._set_ReferenceSelection_metadata, inVal)

    _get_Reference_metadata = { "name" : "Reference",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def Reference(self) -> "IAgLinkToObject":
        """The reference object."""
        return self._intf.get_property(IAgVAStateCalcCloseApproachBearing._metadata, IAgVAStateCalcCloseApproachBearing._get_Reference_metadata)


agcls.AgClassCatalog.add_catalog_entry("{E7717197-6955-4ECB-BF98-DA50AD7547F3}", IAgVAStateCalcCloseApproachBearing)
agcls.AgTypeNameMap["IAgVAStateCalcCloseApproachBearing"] = IAgVAStateCalcCloseApproachBearing

class IAgVAStateCalcCloseApproachMag(object):
    """Properties for a CloseApproachMagnitude calculation object."""
    _num_methods = 5
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{DDACF6D7-29C0-46BB-A21A-123580E25161}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_CentralBodyName" : 1,
                             "set_CentralBodyName" : 2,
                             "get_ReferenceSelection" : 3,
                             "set_ReferenceSelection" : 4,
                             "get_Reference" : 5, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAStateCalcCloseApproachMag._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcCloseApproachMag from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcCloseApproachMag.__dict__ and type(IAgVAStateCalcCloseApproachMag.__dict__[attrname]) == property:
            return IAgVAStateCalcCloseApproachMag.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcCloseApproachMag.")
    
    _get_CentralBodyName_metadata = { "name" : "CentralBodyName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def CentralBodyName(self) -> str:
        """The central body of the component."""
        return self._intf.get_property(IAgVAStateCalcCloseApproachMag._metadata, IAgVAStateCalcCloseApproachMag._get_CentralBodyName_metadata)

    _set_CentralBodyName_metadata = { "name" : "CentralBodyName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @CentralBodyName.setter
    def CentralBodyName(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAStateCalcCloseApproachMag._metadata, IAgVAStateCalcCloseApproachMag._set_CentralBodyName_metadata, inVal)

    _get_ReferenceSelection_metadata = { "name" : "ReferenceSelection",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVACalcObjectReference),) }
    @property
    def ReferenceSelection(self) -> "AgEVACalcObjectReference":
        """The reference object selection."""
        return self._intf.get_property(IAgVAStateCalcCloseApproachMag._metadata, IAgVAStateCalcCloseApproachMag._get_ReferenceSelection_metadata)

    _set_ReferenceSelection_metadata = { "name" : "ReferenceSelection",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVACalcObjectReference),) }
    @ReferenceSelection.setter
    def ReferenceSelection(self, inVal:"AgEVACalcObjectReference") -> None:
        return self._intf.set_property(IAgVAStateCalcCloseApproachMag._metadata, IAgVAStateCalcCloseApproachMag._set_ReferenceSelection_metadata, inVal)

    _get_Reference_metadata = { "name" : "Reference",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def Reference(self) -> "IAgLinkToObject":
        """The reference object."""
        return self._intf.get_property(IAgVAStateCalcCloseApproachMag._metadata, IAgVAStateCalcCloseApproachMag._get_Reference_metadata)


agcls.AgClassCatalog.add_catalog_entry("{DDACF6D7-29C0-46BB-A21A-123580E25161}", IAgVAStateCalcCloseApproachMag)
agcls.AgTypeNameMap["IAgVAStateCalcCloseApproachMag"] = IAgVAStateCalcCloseApproachMag

class IAgVAStateCalcCloseApproachTheta(object):
    """Properties for a CloseApproachTheta calculation object."""
    _num_methods = 5
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{2F89E7F5-154B-4CED-807A-040A064F1A14}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_CentralBodyName" : 1,
                             "set_CentralBodyName" : 2,
                             "get_ReferenceSelection" : 3,
                             "set_ReferenceSelection" : 4,
                             "get_Reference" : 5, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAStateCalcCloseApproachTheta._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcCloseApproachTheta from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcCloseApproachTheta.__dict__ and type(IAgVAStateCalcCloseApproachTheta.__dict__[attrname]) == property:
            return IAgVAStateCalcCloseApproachTheta.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcCloseApproachTheta.")
    
    _get_CentralBodyName_metadata = { "name" : "CentralBodyName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def CentralBodyName(self) -> str:
        """The central body of the component."""
        return self._intf.get_property(IAgVAStateCalcCloseApproachTheta._metadata, IAgVAStateCalcCloseApproachTheta._get_CentralBodyName_metadata)

    _set_CentralBodyName_metadata = { "name" : "CentralBodyName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @CentralBodyName.setter
    def CentralBodyName(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAStateCalcCloseApproachTheta._metadata, IAgVAStateCalcCloseApproachTheta._set_CentralBodyName_metadata, inVal)

    _get_ReferenceSelection_metadata = { "name" : "ReferenceSelection",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVACalcObjectReference),) }
    @property
    def ReferenceSelection(self) -> "AgEVACalcObjectReference":
        """The reference object selection."""
        return self._intf.get_property(IAgVAStateCalcCloseApproachTheta._metadata, IAgVAStateCalcCloseApproachTheta._get_ReferenceSelection_metadata)

    _set_ReferenceSelection_metadata = { "name" : "ReferenceSelection",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVACalcObjectReference),) }
    @ReferenceSelection.setter
    def ReferenceSelection(self, inVal:"AgEVACalcObjectReference") -> None:
        return self._intf.set_property(IAgVAStateCalcCloseApproachTheta._metadata, IAgVAStateCalcCloseApproachTheta._set_ReferenceSelection_metadata, inVal)

    _get_Reference_metadata = { "name" : "Reference",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def Reference(self) -> "IAgLinkToObject":
        """The reference object."""
        return self._intf.get_property(IAgVAStateCalcCloseApproachTheta._metadata, IAgVAStateCalcCloseApproachTheta._get_Reference_metadata)


agcls.AgClassCatalog.add_catalog_entry("{2F89E7F5-154B-4CED-807A-040A064F1A14}", IAgVAStateCalcCloseApproachTheta)
agcls.AgTypeNameMap["IAgVAStateCalcCloseApproachTheta"] = IAgVAStateCalcCloseApproachTheta

class IAgVAStateCalcCloseApproachX(object):
    """Properties for a CloseApproachX calculation object."""
    _num_methods = 5
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{B57EFFE4-9742-4F26-989C-A8D64549F8ED}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_CentralBodyName" : 1,
                             "set_CentralBodyName" : 2,
                             "get_ReferenceSelection" : 3,
                             "set_ReferenceSelection" : 4,
                             "get_Reference" : 5, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAStateCalcCloseApproachX._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcCloseApproachX from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcCloseApproachX.__dict__ and type(IAgVAStateCalcCloseApproachX.__dict__[attrname]) == property:
            return IAgVAStateCalcCloseApproachX.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcCloseApproachX.")
    
    _get_CentralBodyName_metadata = { "name" : "CentralBodyName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def CentralBodyName(self) -> str:
        """The central body of the component."""
        return self._intf.get_property(IAgVAStateCalcCloseApproachX._metadata, IAgVAStateCalcCloseApproachX._get_CentralBodyName_metadata)

    _set_CentralBodyName_metadata = { "name" : "CentralBodyName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @CentralBodyName.setter
    def CentralBodyName(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAStateCalcCloseApproachX._metadata, IAgVAStateCalcCloseApproachX._set_CentralBodyName_metadata, inVal)

    _get_ReferenceSelection_metadata = { "name" : "ReferenceSelection",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVACalcObjectReference),) }
    @property
    def ReferenceSelection(self) -> "AgEVACalcObjectReference":
        """The reference object selection."""
        return self._intf.get_property(IAgVAStateCalcCloseApproachX._metadata, IAgVAStateCalcCloseApproachX._get_ReferenceSelection_metadata)

    _set_ReferenceSelection_metadata = { "name" : "ReferenceSelection",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVACalcObjectReference),) }
    @ReferenceSelection.setter
    def ReferenceSelection(self, inVal:"AgEVACalcObjectReference") -> None:
        return self._intf.set_property(IAgVAStateCalcCloseApproachX._metadata, IAgVAStateCalcCloseApproachX._set_ReferenceSelection_metadata, inVal)

    _get_Reference_metadata = { "name" : "Reference",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def Reference(self) -> "IAgLinkToObject":
        """The reference object."""
        return self._intf.get_property(IAgVAStateCalcCloseApproachX._metadata, IAgVAStateCalcCloseApproachX._get_Reference_metadata)


agcls.AgClassCatalog.add_catalog_entry("{B57EFFE4-9742-4F26-989C-A8D64549F8ED}", IAgVAStateCalcCloseApproachX)
agcls.AgTypeNameMap["IAgVAStateCalcCloseApproachX"] = IAgVAStateCalcCloseApproachX

class IAgVAStateCalcCloseApproachY(object):
    """Properties for a CloseApproachY calculation object."""
    _num_methods = 5
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{7C03BAD0-6CF8-4A20-ABA9-B16006A4016E}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_CentralBodyName" : 1,
                             "set_CentralBodyName" : 2,
                             "get_ReferenceSelection" : 3,
                             "set_ReferenceSelection" : 4,
                             "get_Reference" : 5, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAStateCalcCloseApproachY._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcCloseApproachY from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcCloseApproachY.__dict__ and type(IAgVAStateCalcCloseApproachY.__dict__[attrname]) == property:
            return IAgVAStateCalcCloseApproachY.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcCloseApproachY.")
    
    _get_CentralBodyName_metadata = { "name" : "CentralBodyName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def CentralBodyName(self) -> str:
        """The central body of the component."""
        return self._intf.get_property(IAgVAStateCalcCloseApproachY._metadata, IAgVAStateCalcCloseApproachY._get_CentralBodyName_metadata)

    _set_CentralBodyName_metadata = { "name" : "CentralBodyName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @CentralBodyName.setter
    def CentralBodyName(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAStateCalcCloseApproachY._metadata, IAgVAStateCalcCloseApproachY._set_CentralBodyName_metadata, inVal)

    _get_ReferenceSelection_metadata = { "name" : "ReferenceSelection",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVACalcObjectReference),) }
    @property
    def ReferenceSelection(self) -> "AgEVACalcObjectReference":
        """The reference object selection."""
        return self._intf.get_property(IAgVAStateCalcCloseApproachY._metadata, IAgVAStateCalcCloseApproachY._get_ReferenceSelection_metadata)

    _set_ReferenceSelection_metadata = { "name" : "ReferenceSelection",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVACalcObjectReference),) }
    @ReferenceSelection.setter
    def ReferenceSelection(self, inVal:"AgEVACalcObjectReference") -> None:
        return self._intf.set_property(IAgVAStateCalcCloseApproachY._metadata, IAgVAStateCalcCloseApproachY._set_ReferenceSelection_metadata, inVal)

    _get_Reference_metadata = { "name" : "Reference",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def Reference(self) -> "IAgLinkToObject":
        """The reference object."""
        return self._intf.get_property(IAgVAStateCalcCloseApproachY._metadata, IAgVAStateCalcCloseApproachY._get_Reference_metadata)


agcls.AgClassCatalog.add_catalog_entry("{7C03BAD0-6CF8-4A20-ABA9-B16006A4016E}", IAgVAStateCalcCloseApproachY)
agcls.AgTypeNameMap["IAgVAStateCalcCloseApproachY"] = IAgVAStateCalcCloseApproachY

class IAgVAStateCalcCloseApproachCosBearing(object):
    """Properties for a CosineOfCloseApproachBearing calculation object."""
    _num_methods = 5
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{ED9F8425-E6C7-49D0-842F-84FE096E6C27}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_CentralBodyName" : 1,
                             "set_CentralBodyName" : 2,
                             "get_ReferenceSelection" : 3,
                             "set_ReferenceSelection" : 4,
                             "get_Reference" : 5, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAStateCalcCloseApproachCosBearing._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcCloseApproachCosBearing from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcCloseApproachCosBearing.__dict__ and type(IAgVAStateCalcCloseApproachCosBearing.__dict__[attrname]) == property:
            return IAgVAStateCalcCloseApproachCosBearing.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcCloseApproachCosBearing.")
    
    _get_CentralBodyName_metadata = { "name" : "CentralBodyName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def CentralBodyName(self) -> str:
        """The central body of the component."""
        return self._intf.get_property(IAgVAStateCalcCloseApproachCosBearing._metadata, IAgVAStateCalcCloseApproachCosBearing._get_CentralBodyName_metadata)

    _set_CentralBodyName_metadata = { "name" : "CentralBodyName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @CentralBodyName.setter
    def CentralBodyName(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAStateCalcCloseApproachCosBearing._metadata, IAgVAStateCalcCloseApproachCosBearing._set_CentralBodyName_metadata, inVal)

    _get_ReferenceSelection_metadata = { "name" : "ReferenceSelection",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVACalcObjectReference),) }
    @property
    def ReferenceSelection(self) -> "AgEVACalcObjectReference":
        """The reference object selection."""
        return self._intf.get_property(IAgVAStateCalcCloseApproachCosBearing._metadata, IAgVAStateCalcCloseApproachCosBearing._get_ReferenceSelection_metadata)

    _set_ReferenceSelection_metadata = { "name" : "ReferenceSelection",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVACalcObjectReference),) }
    @ReferenceSelection.setter
    def ReferenceSelection(self, inVal:"AgEVACalcObjectReference") -> None:
        return self._intf.set_property(IAgVAStateCalcCloseApproachCosBearing._metadata, IAgVAStateCalcCloseApproachCosBearing._set_ReferenceSelection_metadata, inVal)

    _get_Reference_metadata = { "name" : "Reference",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def Reference(self) -> "IAgLinkToObject":
        """The reference object."""
        return self._intf.get_property(IAgVAStateCalcCloseApproachCosBearing._metadata, IAgVAStateCalcCloseApproachCosBearing._get_Reference_metadata)


agcls.AgClassCatalog.add_catalog_entry("{ED9F8425-E6C7-49D0-842F-84FE096E6C27}", IAgVAStateCalcCloseApproachCosBearing)
agcls.AgTypeNameMap["IAgVAStateCalcCloseApproachCosBearing"] = IAgVAStateCalcCloseApproachCosBearing

class IAgVAStateCalcRelGroundTrackError(object):
    """Properties for a RelGroundTrackError calculation object."""
    _num_methods = 9
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{F9BD881C-FBBF-4B59-AA64-8D303DBBCC44}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_CentralBodyName" : 1,
                             "set_CentralBodyName" : 2,
                             "get_Direction" : 3,
                             "set_Direction" : 4,
                             "get_Signed" : 5,
                             "set_Signed" : 6,
                             "get_ReferenceSelection" : 7,
                             "set_ReferenceSelection" : 8,
                             "get_Reference" : 9, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAStateCalcRelGroundTrackError._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcRelGroundTrackError from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcRelGroundTrackError.__dict__ and type(IAgVAStateCalcRelGroundTrackError.__dict__[attrname]) == property:
            return IAgVAStateCalcRelGroundTrackError.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcRelGroundTrackError.")
    
    _get_CentralBodyName_metadata = { "name" : "CentralBodyName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def CentralBodyName(self) -> str:
        """The central body of the component."""
        return self._intf.get_property(IAgVAStateCalcRelGroundTrackError._metadata, IAgVAStateCalcRelGroundTrackError._get_CentralBodyName_metadata)

    _set_CentralBodyName_metadata = { "name" : "CentralBodyName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @CentralBodyName.setter
    def CentralBodyName(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAStateCalcRelGroundTrackError._metadata, IAgVAStateCalcRelGroundTrackError._set_CentralBodyName_metadata, inVal)

    _get_Direction_metadata = { "name" : "Direction",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVACalcObjectDirection),) }
    @property
    def Direction(self) -> "AgEVACalcObjectDirection":
        """The direction to search for the desired value."""
        return self._intf.get_property(IAgVAStateCalcRelGroundTrackError._metadata, IAgVAStateCalcRelGroundTrackError._get_Direction_metadata)

    _set_Direction_metadata = { "name" : "Direction",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVACalcObjectDirection),) }
    @Direction.setter
    def Direction(self, inVal:"AgEVACalcObjectDirection") -> None:
        return self._intf.set_property(IAgVAStateCalcRelGroundTrackError._metadata, IAgVAStateCalcRelGroundTrackError._set_Direction_metadata, inVal)

    _get_Signed_metadata = { "name" : "Signed",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def Signed(self) -> bool:
        """True if signed based on RxV."""
        return self._intf.get_property(IAgVAStateCalcRelGroundTrackError._metadata, IAgVAStateCalcRelGroundTrackError._get_Signed_metadata)

    _set_Signed_metadata = { "name" : "Signed",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @Signed.setter
    def Signed(self, inVal:bool) -> None:
        return self._intf.set_property(IAgVAStateCalcRelGroundTrackError._metadata, IAgVAStateCalcRelGroundTrackError._set_Signed_metadata, inVal)

    _get_ReferenceSelection_metadata = { "name" : "ReferenceSelection",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVACalcObjectReference),) }
    @property
    def ReferenceSelection(self) -> "AgEVACalcObjectReference":
        """The reference object selection."""
        return self._intf.get_property(IAgVAStateCalcRelGroundTrackError._metadata, IAgVAStateCalcRelGroundTrackError._get_ReferenceSelection_metadata)

    _set_ReferenceSelection_metadata = { "name" : "ReferenceSelection",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVACalcObjectReference),) }
    @ReferenceSelection.setter
    def ReferenceSelection(self, inVal:"AgEVACalcObjectReference") -> None:
        return self._intf.set_property(IAgVAStateCalcRelGroundTrackError._metadata, IAgVAStateCalcRelGroundTrackError._set_ReferenceSelection_metadata, inVal)

    _get_Reference_metadata = { "name" : "Reference",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def Reference(self) -> "IAgLinkToObject":
        """The reference object."""
        return self._intf.get_property(IAgVAStateCalcRelGroundTrackError._metadata, IAgVAStateCalcRelGroundTrackError._get_Reference_metadata)


agcls.AgClassCatalog.add_catalog_entry("{F9BD881C-FBBF-4B59-AA64-8D303DBBCC44}", IAgVAStateCalcRelGroundTrackError)
agcls.AgTypeNameMap["IAgVAStateCalcRelGroundTrackError"] = IAgVAStateCalcRelGroundTrackError

class IAgVAStateCalcRelAtAOLMaster(object):
    """Properties for a RelativeAtAOL calculation object."""
    _num_methods = 9
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{8864FF20-53E7-4609-86A7-C9F7B113B651}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_CentralBodyName" : 1,
                             "set_CentralBodyName" : 2,
                             "get_CalcObjectName" : 3,
                             "set_CalcObjectName" : 4,
                             "get_Direction" : 5,
                             "set_Direction" : 6,
                             "get_ReferenceSelection" : 7,
                             "set_ReferenceSelection" : 8,
                             "get_Reference" : 9, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAStateCalcRelAtAOLMaster._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcRelAtAOLMaster from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcRelAtAOLMaster.__dict__ and type(IAgVAStateCalcRelAtAOLMaster.__dict__[attrname]) == property:
            return IAgVAStateCalcRelAtAOLMaster.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcRelAtAOLMaster.")
    
    _get_CentralBodyName_metadata = { "name" : "CentralBodyName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def CentralBodyName(self) -> str:
        """The central body of the component."""
        return self._intf.get_property(IAgVAStateCalcRelAtAOLMaster._metadata, IAgVAStateCalcRelAtAOLMaster._get_CentralBodyName_metadata)

    _set_CentralBodyName_metadata = { "name" : "CentralBodyName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @CentralBodyName.setter
    def CentralBodyName(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAStateCalcRelAtAOLMaster._metadata, IAgVAStateCalcRelAtAOLMaster._set_CentralBodyName_metadata, inVal)

    _get_CalcObjectName_metadata = { "name" : "CalcObjectName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def CalcObjectName(self) -> str:
        """The calculation object of interest."""
        return self._intf.get_property(IAgVAStateCalcRelAtAOLMaster._metadata, IAgVAStateCalcRelAtAOLMaster._get_CalcObjectName_metadata)

    _set_CalcObjectName_metadata = { "name" : "CalcObjectName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @CalcObjectName.setter
    def CalcObjectName(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAStateCalcRelAtAOLMaster._metadata, IAgVAStateCalcRelAtAOLMaster._set_CalcObjectName_metadata, inVal)

    _get_Direction_metadata = { "name" : "Direction",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVACalcObjectDirection),) }
    @property
    def Direction(self) -> "AgEVACalcObjectDirection":
        """The direction to search for the desired value."""
        return self._intf.get_property(IAgVAStateCalcRelAtAOLMaster._metadata, IAgVAStateCalcRelAtAOLMaster._get_Direction_metadata)

    _set_Direction_metadata = { "name" : "Direction",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVACalcObjectDirection),) }
    @Direction.setter
    def Direction(self, inVal:"AgEVACalcObjectDirection") -> None:
        return self._intf.set_property(IAgVAStateCalcRelAtAOLMaster._metadata, IAgVAStateCalcRelAtAOLMaster._set_Direction_metadata, inVal)

    _get_ReferenceSelection_metadata = { "name" : "ReferenceSelection",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVACalcObjectReference),) }
    @property
    def ReferenceSelection(self) -> "AgEVACalcObjectReference":
        """The reference object selection."""
        return self._intf.get_property(IAgVAStateCalcRelAtAOLMaster._metadata, IAgVAStateCalcRelAtAOLMaster._get_ReferenceSelection_metadata)

    _set_ReferenceSelection_metadata = { "name" : "ReferenceSelection",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVACalcObjectReference),) }
    @ReferenceSelection.setter
    def ReferenceSelection(self, inVal:"AgEVACalcObjectReference") -> None:
        return self._intf.set_property(IAgVAStateCalcRelAtAOLMaster._metadata, IAgVAStateCalcRelAtAOLMaster._set_ReferenceSelection_metadata, inVal)

    _get_Reference_metadata = { "name" : "Reference",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def Reference(self) -> "IAgLinkToObject":
        """The reference object."""
        return self._intf.get_property(IAgVAStateCalcRelAtAOLMaster._metadata, IAgVAStateCalcRelAtAOLMaster._get_Reference_metadata)


agcls.AgClassCatalog.add_catalog_entry("{8864FF20-53E7-4609-86A7-C9F7B113B651}", IAgVAStateCalcRelAtAOLMaster)
agcls.AgTypeNameMap["IAgVAStateCalcRelAtAOLMaster"] = IAgVAStateCalcRelAtAOLMaster

class IAgVAStateCalcDeltaFromMaster(object):
    """Properties for a Rel Mean Mean Anomaly calculation object."""
    _num_methods = 5
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{6203B45E-E2E8-42D1-BB22-9BBF57CC1FDE}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_CalcObjectName" : 1,
                             "set_CalcObjectName" : 2,
                             "get_ReferenceSelection" : 3,
                             "set_ReferenceSelection" : 4,
                             "get_Reference" : 5, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAStateCalcDeltaFromMaster._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcDeltaFromMaster from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcDeltaFromMaster.__dict__ and type(IAgVAStateCalcDeltaFromMaster.__dict__[attrname]) == property:
            return IAgVAStateCalcDeltaFromMaster.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcDeltaFromMaster.")
    
    _get_CalcObjectName_metadata = { "name" : "CalcObjectName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def CalcObjectName(self) -> str:
        """The calculation object of interest."""
        return self._intf.get_property(IAgVAStateCalcDeltaFromMaster._metadata, IAgVAStateCalcDeltaFromMaster._get_CalcObjectName_metadata)

    _set_CalcObjectName_metadata = { "name" : "CalcObjectName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @CalcObjectName.setter
    def CalcObjectName(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAStateCalcDeltaFromMaster._metadata, IAgVAStateCalcDeltaFromMaster._set_CalcObjectName_metadata, inVal)

    _get_ReferenceSelection_metadata = { "name" : "ReferenceSelection",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVACalcObjectReference),) }
    @property
    def ReferenceSelection(self) -> "AgEVACalcObjectReference":
        """The reference object selection."""
        return self._intf.get_property(IAgVAStateCalcDeltaFromMaster._metadata, IAgVAStateCalcDeltaFromMaster._get_ReferenceSelection_metadata)

    _set_ReferenceSelection_metadata = { "name" : "ReferenceSelection",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVACalcObjectReference),) }
    @ReferenceSelection.setter
    def ReferenceSelection(self, inVal:"AgEVACalcObjectReference") -> None:
        return self._intf.set_property(IAgVAStateCalcDeltaFromMaster._metadata, IAgVAStateCalcDeltaFromMaster._set_ReferenceSelection_metadata, inVal)

    _get_Reference_metadata = { "name" : "Reference",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def Reference(self) -> "IAgLinkToObject":
        """The reference object."""
        return self._intf.get_property(IAgVAStateCalcDeltaFromMaster._metadata, IAgVAStateCalcDeltaFromMaster._get_Reference_metadata)


agcls.AgClassCatalog.add_catalog_entry("{6203B45E-E2E8-42D1-BB22-9BBF57CC1FDE}", IAgVAStateCalcDeltaFromMaster)
agcls.AgTypeNameMap["IAgVAStateCalcDeltaFromMaster"] = IAgVAStateCalcDeltaFromMaster

class IAgVAStateCalcLonDriftRate(object):
    """Properties for a Longitude Drift Rate calculation object."""
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{D464DED3-3358-452D-B55C-2B017D04C8F9}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_CentralBodyName" : 1,
                             "set_CentralBodyName" : 2,
                             "get_ElementType" : 3,
                             "set_ElementType" : 4, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAStateCalcLonDriftRate._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcLonDriftRate from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcLonDriftRate.__dict__ and type(IAgVAStateCalcLonDriftRate.__dict__[attrname]) == property:
            return IAgVAStateCalcLonDriftRate.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcLonDriftRate.")
    
    _get_CentralBodyName_metadata = { "name" : "CentralBodyName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def CentralBodyName(self) -> str:
        """The central body of the component."""
        return self._intf.get_property(IAgVAStateCalcLonDriftRate._metadata, IAgVAStateCalcLonDriftRate._get_CentralBodyName_metadata)

    _set_CentralBodyName_metadata = { "name" : "CentralBodyName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @CentralBodyName.setter
    def CentralBodyName(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAStateCalcLonDriftRate._metadata, IAgVAStateCalcLonDriftRate._set_CentralBodyName_metadata, inVal)

    _get_ElementType_metadata = { "name" : "ElementType",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVACalcObjectElem),) }
    @property
    def ElementType(self) -> "AgEVACalcObjectElem":
        """The element type."""
        return self._intf.get_property(IAgVAStateCalcLonDriftRate._metadata, IAgVAStateCalcLonDriftRate._get_ElementType_metadata)

    _set_ElementType_metadata = { "name" : "ElementType",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVACalcObjectElem),) }
    @ElementType.setter
    def ElementType(self, inVal:"AgEVACalcObjectElem") -> None:
        return self._intf.set_property(IAgVAStateCalcLonDriftRate._metadata, IAgVAStateCalcLonDriftRate._set_ElementType_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{D464DED3-3358-452D-B55C-2B017D04C8F9}", IAgVAStateCalcLonDriftRate)
agcls.AgTypeNameMap["IAgVAStateCalcLonDriftRate"] = IAgVAStateCalcLonDriftRate

class IAgVAStateCalcMeanEarthLon(object):
    """Properties for a Mean Earth Longitude calculation object."""
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{49D6969B-42BD-4E55-9016-0F951FF34DEE}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_CentralBodyName" : 1,
                             "set_CentralBodyName" : 2, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAStateCalcMeanEarthLon._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcMeanEarthLon from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcMeanEarthLon.__dict__ and type(IAgVAStateCalcMeanEarthLon.__dict__[attrname]) == property:
            return IAgVAStateCalcMeanEarthLon.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcMeanEarthLon.")
    
    _get_CentralBodyName_metadata = { "name" : "CentralBodyName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def CentralBodyName(self) -> str:
        """The central body of the component."""
        return self._intf.get_property(IAgVAStateCalcMeanEarthLon._metadata, IAgVAStateCalcMeanEarthLon._get_CentralBodyName_metadata)

    _set_CentralBodyName_metadata = { "name" : "CentralBodyName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @CentralBodyName.setter
    def CentralBodyName(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAStateCalcMeanEarthLon._metadata, IAgVAStateCalcMeanEarthLon._set_CentralBodyName_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{49D6969B-42BD-4E55-9016-0F951FF34DEE}", IAgVAStateCalcMeanEarthLon)
agcls.AgTypeNameMap["IAgVAStateCalcMeanEarthLon"] = IAgVAStateCalcMeanEarthLon

class IAgVAStateCalcRectifiedLon(object):
    """Properties for a RectifiedLon calculation object."""
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{FD75BCCA-8F5C-49BA-AADE-040E1186385D}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_CentralBodyName" : 1,
                             "set_CentralBodyName" : 2, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAStateCalcRectifiedLon._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcRectifiedLon from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcRectifiedLon.__dict__ and type(IAgVAStateCalcRectifiedLon.__dict__[attrname]) == property:
            return IAgVAStateCalcRectifiedLon.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcRectifiedLon.")
    
    _get_CentralBodyName_metadata = { "name" : "CentralBodyName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def CentralBodyName(self) -> str:
        """The central body of the component."""
        return self._intf.get_property(IAgVAStateCalcRectifiedLon._metadata, IAgVAStateCalcRectifiedLon._get_CentralBodyName_metadata)

    _set_CentralBodyName_metadata = { "name" : "CentralBodyName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @CentralBodyName.setter
    def CentralBodyName(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAStateCalcRectifiedLon._metadata, IAgVAStateCalcRectifiedLon._set_CentralBodyName_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{FD75BCCA-8F5C-49BA-AADE-040E1186385D}", IAgVAStateCalcRectifiedLon)
agcls.AgTypeNameMap["IAgVAStateCalcRectifiedLon"] = IAgVAStateCalcRectifiedLon

class IAgVAStateCalcTrueLongitude(object):
    """Properties for a TrueLongitude calculation object."""
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{8D80A622-E99D-407B-A30D-44EE0B7FF577}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_CentralBodyName" : 1,
                             "set_CentralBodyName" : 2, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAStateCalcTrueLongitude._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcTrueLongitude from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcTrueLongitude.__dict__ and type(IAgVAStateCalcTrueLongitude.__dict__[attrname]) == property:
            return IAgVAStateCalcTrueLongitude.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcTrueLongitude.")
    
    _get_CentralBodyName_metadata = { "name" : "CentralBodyName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def CentralBodyName(self) -> str:
        """The central body of the component."""
        return self._intf.get_property(IAgVAStateCalcTrueLongitude._metadata, IAgVAStateCalcTrueLongitude._get_CentralBodyName_metadata)

    _set_CentralBodyName_metadata = { "name" : "CentralBodyName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @CentralBodyName.setter
    def CentralBodyName(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAStateCalcTrueLongitude._metadata, IAgVAStateCalcTrueLongitude._set_CentralBodyName_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{8D80A622-E99D-407B-A30D-44EE0B7FF577}", IAgVAStateCalcTrueLongitude)
agcls.AgTypeNameMap["IAgVAStateCalcTrueLongitude"] = IAgVAStateCalcTrueLongitude

class IAgVAStateCalcGeodeticTrueLongitude(object):
    """Properties for a GeodeticTrueLongitude calculation object."""
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{76BD7923-C04A-4789-885E-4643A30E9BB2}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_CentralBodyName" : 1,
                             "set_CentralBodyName" : 2, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAStateCalcGeodeticTrueLongitude._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcGeodeticTrueLongitude from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcGeodeticTrueLongitude.__dict__ and type(IAgVAStateCalcGeodeticTrueLongitude.__dict__[attrname]) == property:
            return IAgVAStateCalcGeodeticTrueLongitude.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcGeodeticTrueLongitude.")
    
    _get_CentralBodyName_metadata = { "name" : "CentralBodyName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def CentralBodyName(self) -> str:
        """The central body of the component."""
        return self._intf.get_property(IAgVAStateCalcGeodeticTrueLongitude._metadata, IAgVAStateCalcGeodeticTrueLongitude._get_CentralBodyName_metadata)

    _set_CentralBodyName_metadata = { "name" : "CentralBodyName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @CentralBodyName.setter
    def CentralBodyName(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAStateCalcGeodeticTrueLongitude._metadata, IAgVAStateCalcGeodeticTrueLongitude._set_CentralBodyName_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{76BD7923-C04A-4789-885E-4643A30E9BB2}", IAgVAStateCalcGeodeticTrueLongitude)
agcls.AgTypeNameMap["IAgVAStateCalcGeodeticTrueLongitude"] = IAgVAStateCalcGeodeticTrueLongitude

class IAgVAStateCalcGeodeticTrueLongitudeAtTimeOfPerigee(object):
    """Properties for a GeodeticTrueLongitudeAtTimeOfPerigee calculation object."""
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{9B9ACD2A-1A98-4D05-A8F1-2878918138E2}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_CentralBodyName" : 1,
                             "set_CentralBodyName" : 2, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAStateCalcGeodeticTrueLongitudeAtTimeOfPerigee._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcGeodeticTrueLongitudeAtTimeOfPerigee from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcGeodeticTrueLongitudeAtTimeOfPerigee.__dict__ and type(IAgVAStateCalcGeodeticTrueLongitudeAtTimeOfPerigee.__dict__[attrname]) == property:
            return IAgVAStateCalcGeodeticTrueLongitudeAtTimeOfPerigee.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcGeodeticTrueLongitudeAtTimeOfPerigee.")
    
    _get_CentralBodyName_metadata = { "name" : "CentralBodyName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def CentralBodyName(self) -> str:
        """The central body of the component."""
        return self._intf.get_property(IAgVAStateCalcGeodeticTrueLongitudeAtTimeOfPerigee._metadata, IAgVAStateCalcGeodeticTrueLongitudeAtTimeOfPerigee._get_CentralBodyName_metadata)

    _set_CentralBodyName_metadata = { "name" : "CentralBodyName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @CentralBodyName.setter
    def CentralBodyName(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAStateCalcGeodeticTrueLongitudeAtTimeOfPerigee._metadata, IAgVAStateCalcGeodeticTrueLongitudeAtTimeOfPerigee._set_CentralBodyName_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{9B9ACD2A-1A98-4D05-A8F1-2878918138E2}", IAgVAStateCalcGeodeticTrueLongitudeAtTimeOfPerigee)
agcls.AgTypeNameMap["IAgVAStateCalcGeodeticTrueLongitudeAtTimeOfPerigee"] = IAgVAStateCalcGeodeticTrueLongitudeAtTimeOfPerigee

class IAgVAStateCalcMeanRightAscension(object):
    """Properties for a MeanRightAscension calculation object."""
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{073A71DB-77AA-460E-8BD2-B5E4226029B2}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_CentralBodyName" : 1,
                             "set_CentralBodyName" : 2, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAStateCalcMeanRightAscension._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcMeanRightAscension from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcMeanRightAscension.__dict__ and type(IAgVAStateCalcMeanRightAscension.__dict__[attrname]) == property:
            return IAgVAStateCalcMeanRightAscension.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcMeanRightAscension.")
    
    _get_CentralBodyName_metadata = { "name" : "CentralBodyName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def CentralBodyName(self) -> str:
        """The central body of the component."""
        return self._intf.get_property(IAgVAStateCalcMeanRightAscension._metadata, IAgVAStateCalcMeanRightAscension._get_CentralBodyName_metadata)

    _set_CentralBodyName_metadata = { "name" : "CentralBodyName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @CentralBodyName.setter
    def CentralBodyName(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAStateCalcMeanRightAscension._metadata, IAgVAStateCalcMeanRightAscension._set_CentralBodyName_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{073A71DB-77AA-460E-8BD2-B5E4226029B2}", IAgVAStateCalcMeanRightAscension)
agcls.AgTypeNameMap["IAgVAStateCalcMeanRightAscension"] = IAgVAStateCalcMeanRightAscension

class IAgVAStateCalcGeodeticMeanRightAscension(object):
    """Properties for a GeodeticMeanRightAscension calculation object."""
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{9AF8C388-DBF6-4A2A-A728-6CE55CD774FC}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_CentralBodyName" : 1,
                             "set_CentralBodyName" : 2, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAStateCalcGeodeticMeanRightAscension._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcGeodeticMeanRightAscension from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcGeodeticMeanRightAscension.__dict__ and type(IAgVAStateCalcGeodeticMeanRightAscension.__dict__[attrname]) == property:
            return IAgVAStateCalcGeodeticMeanRightAscension.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcGeodeticMeanRightAscension.")
    
    _get_CentralBodyName_metadata = { "name" : "CentralBodyName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def CentralBodyName(self) -> str:
        """The central body of the component."""
        return self._intf.get_property(IAgVAStateCalcGeodeticMeanRightAscension._metadata, IAgVAStateCalcGeodeticMeanRightAscension._get_CentralBodyName_metadata)

    _set_CentralBodyName_metadata = { "name" : "CentralBodyName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @CentralBodyName.setter
    def CentralBodyName(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAStateCalcGeodeticMeanRightAscension._metadata, IAgVAStateCalcGeodeticMeanRightAscension._set_CentralBodyName_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{9AF8C388-DBF6-4A2A-A728-6CE55CD774FC}", IAgVAStateCalcGeodeticMeanRightAscension)
agcls.AgTypeNameMap["IAgVAStateCalcGeodeticMeanRightAscension"] = IAgVAStateCalcGeodeticMeanRightAscension

class IAgVAStateCalcTwoBodyDriftRate(object):
    """Properties for a TwoBodyDriftRate calculation object."""
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{9C9ADC21-B1EB-4BC8-A569-51B5F80A2DE1}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_CentralBodyName" : 1,
                             "set_CentralBodyName" : 2, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAStateCalcTwoBodyDriftRate._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcTwoBodyDriftRate from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcTwoBodyDriftRate.__dict__ and type(IAgVAStateCalcTwoBodyDriftRate.__dict__[attrname]) == property:
            return IAgVAStateCalcTwoBodyDriftRate.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcTwoBodyDriftRate.")
    
    _get_CentralBodyName_metadata = { "name" : "CentralBodyName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def CentralBodyName(self) -> str:
        """The central body of the component."""
        return self._intf.get_property(IAgVAStateCalcTwoBodyDriftRate._metadata, IAgVAStateCalcTwoBodyDriftRate._get_CentralBodyName_metadata)

    _set_CentralBodyName_metadata = { "name" : "CentralBodyName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @CentralBodyName.setter
    def CentralBodyName(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAStateCalcTwoBodyDriftRate._metadata, IAgVAStateCalcTwoBodyDriftRate._set_CentralBodyName_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{9C9ADC21-B1EB-4BC8-A569-51B5F80A2DE1}", IAgVAStateCalcTwoBodyDriftRate)
agcls.AgTypeNameMap["IAgVAStateCalcTwoBodyDriftRate"] = IAgVAStateCalcTwoBodyDriftRate

class IAgVAStateCalcDriftRateFactor(object):
    """Properties for a DriftRateFactor calculation object."""
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{D50B861F-D9B7-49F8-9B23-D89FBA4C334E}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_CentralBodyName" : 1,
                             "set_CentralBodyName" : 2,
                             "get_DriftRateModel" : 3,
                             "set_DriftRateModel" : 4, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAStateCalcDriftRateFactor._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcDriftRateFactor from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcDriftRateFactor.__dict__ and type(IAgVAStateCalcDriftRateFactor.__dict__[attrname]) == property:
            return IAgVAStateCalcDriftRateFactor.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcDriftRateFactor.")
    
    _get_CentralBodyName_metadata = { "name" : "CentralBodyName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def CentralBodyName(self) -> str:
        """The central body of the component."""
        return self._intf.get_property(IAgVAStateCalcDriftRateFactor._metadata, IAgVAStateCalcDriftRateFactor._get_CentralBodyName_metadata)

    _set_CentralBodyName_metadata = { "name" : "CentralBodyName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @CentralBodyName.setter
    def CentralBodyName(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAStateCalcDriftRateFactor._metadata, IAgVAStateCalcDriftRateFactor._set_CentralBodyName_metadata, inVal)

    _get_DriftRateModel_metadata = { "name" : "DriftRateModel",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAGeoStationaryDriftRateModel),) }
    @property
    def DriftRateModel(self) -> "AgEVAGeoStationaryDriftRateModel":
        """The gravity model used to compute drift rate."""
        return self._intf.get_property(IAgVAStateCalcDriftRateFactor._metadata, IAgVAStateCalcDriftRateFactor._get_DriftRateModel_metadata)

    _set_DriftRateModel_metadata = { "name" : "DriftRateModel",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAGeoStationaryDriftRateModel),) }
    @DriftRateModel.setter
    def DriftRateModel(self, val:"AgEVAGeoStationaryDriftRateModel") -> None:
        return self._intf.set_property(IAgVAStateCalcDriftRateFactor._metadata, IAgVAStateCalcDriftRateFactor._set_DriftRateModel_metadata, val)


agcls.AgClassCatalog.add_catalog_entry("{D50B861F-D9B7-49F8-9B23-D89FBA4C334E}", IAgVAStateCalcDriftRateFactor)
agcls.AgTypeNameMap["IAgVAStateCalcDriftRateFactor"] = IAgVAStateCalcDriftRateFactor

class IAgVAStateCalcEccentricityX(object):
    """Properties for a EccentricityX calculation object."""
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{0FB1B835-D3EB-43EB-A500-2FD1A15D8BF0}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_CentralBodyName" : 1,
                             "set_CentralBodyName" : 2, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAStateCalcEccentricityX._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcEccentricityX from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcEccentricityX.__dict__ and type(IAgVAStateCalcEccentricityX.__dict__[attrname]) == property:
            return IAgVAStateCalcEccentricityX.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcEccentricityX.")
    
    _get_CentralBodyName_metadata = { "name" : "CentralBodyName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def CentralBodyName(self) -> str:
        """The central body of the component."""
        return self._intf.get_property(IAgVAStateCalcEccentricityX._metadata, IAgVAStateCalcEccentricityX._get_CentralBodyName_metadata)

    _set_CentralBodyName_metadata = { "name" : "CentralBodyName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @CentralBodyName.setter
    def CentralBodyName(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAStateCalcEccentricityX._metadata, IAgVAStateCalcEccentricityX._set_CentralBodyName_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{0FB1B835-D3EB-43EB-A500-2FD1A15D8BF0}", IAgVAStateCalcEccentricityX)
agcls.AgTypeNameMap["IAgVAStateCalcEccentricityX"] = IAgVAStateCalcEccentricityX

class IAgVAStateCalcEccentricityY(object):
    """Properties for a EccentricityY calculation object."""
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{98C2F051-C83D-446E-A3CC-CE1FA96FAADB}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_CentralBodyName" : 1,
                             "set_CentralBodyName" : 2, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAStateCalcEccentricityY._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcEccentricityY from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcEccentricityY.__dict__ and type(IAgVAStateCalcEccentricityY.__dict__[attrname]) == property:
            return IAgVAStateCalcEccentricityY.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcEccentricityY.")
    
    _get_CentralBodyName_metadata = { "name" : "CentralBodyName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def CentralBodyName(self) -> str:
        """The central body of the component."""
        return self._intf.get_property(IAgVAStateCalcEccentricityY._metadata, IAgVAStateCalcEccentricityY._get_CentralBodyName_metadata)

    _set_CentralBodyName_metadata = { "name" : "CentralBodyName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @CentralBodyName.setter
    def CentralBodyName(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAStateCalcEccentricityY._metadata, IAgVAStateCalcEccentricityY._set_CentralBodyName_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{98C2F051-C83D-446E-A3CC-CE1FA96FAADB}", IAgVAStateCalcEccentricityY)
agcls.AgTypeNameMap["IAgVAStateCalcEccentricityY"] = IAgVAStateCalcEccentricityY

class IAgVAStateCalcInclinationX(object):
    """Properties for a InclinationX calculation object."""
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{A8646172-74A1-4998-AFE4-AF0AF5351478}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_CentralBodyName" : 1,
                             "set_CentralBodyName" : 2,
                             "get_InclinationMagnitudeType" : 3,
                             "set_InclinationMagnitudeType" : 4, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAStateCalcInclinationX._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcInclinationX from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcInclinationX.__dict__ and type(IAgVAStateCalcInclinationX.__dict__[attrname]) == property:
            return IAgVAStateCalcInclinationX.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcInclinationX.")
    
    _get_CentralBodyName_metadata = { "name" : "CentralBodyName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def CentralBodyName(self) -> str:
        """The central body of the component."""
        return self._intf.get_property(IAgVAStateCalcInclinationX._metadata, IAgVAStateCalcInclinationX._get_CentralBodyName_metadata)

    _set_CentralBodyName_metadata = { "name" : "CentralBodyName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @CentralBodyName.setter
    def CentralBodyName(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAStateCalcInclinationX._metadata, IAgVAStateCalcInclinationX._set_CentralBodyName_metadata, inVal)

    _get_InclinationMagnitudeType_metadata = { "name" : "InclinationMagnitudeType",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAGeoStationaryInclinationMag),) }
    @property
    def InclinationMagnitudeType(self) -> "AgEVAGeoStationaryInclinationMag":
        """Magnitude to use when computing the inclination vector."""
        return self._intf.get_property(IAgVAStateCalcInclinationX._metadata, IAgVAStateCalcInclinationX._get_InclinationMagnitudeType_metadata)

    _set_InclinationMagnitudeType_metadata = { "name" : "InclinationMagnitudeType",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAGeoStationaryInclinationMag),) }
    @InclinationMagnitudeType.setter
    def InclinationMagnitudeType(self, val:"AgEVAGeoStationaryInclinationMag") -> None:
        return self._intf.set_property(IAgVAStateCalcInclinationX._metadata, IAgVAStateCalcInclinationX._set_InclinationMagnitudeType_metadata, val)


agcls.AgClassCatalog.add_catalog_entry("{A8646172-74A1-4998-AFE4-AF0AF5351478}", IAgVAStateCalcInclinationX)
agcls.AgTypeNameMap["IAgVAStateCalcInclinationX"] = IAgVAStateCalcInclinationX

class IAgVAStateCalcInclinationY(object):
    """Properties for a InclinationY calculation object."""
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{5CEC75BB-28C3-4BA7-A96E-DC115619B093}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_CentralBodyName" : 1,
                             "set_CentralBodyName" : 2,
                             "get_InclinationMagnitudeType" : 3,
                             "set_InclinationMagnitudeType" : 4, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAStateCalcInclinationY._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcInclinationY from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcInclinationY.__dict__ and type(IAgVAStateCalcInclinationY.__dict__[attrname]) == property:
            return IAgVAStateCalcInclinationY.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcInclinationY.")
    
    _get_CentralBodyName_metadata = { "name" : "CentralBodyName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def CentralBodyName(self) -> str:
        """The central body of the component."""
        return self._intf.get_property(IAgVAStateCalcInclinationY._metadata, IAgVAStateCalcInclinationY._get_CentralBodyName_metadata)

    _set_CentralBodyName_metadata = { "name" : "CentralBodyName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @CentralBodyName.setter
    def CentralBodyName(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAStateCalcInclinationY._metadata, IAgVAStateCalcInclinationY._set_CentralBodyName_metadata, inVal)

    _get_InclinationMagnitudeType_metadata = { "name" : "InclinationMagnitudeType",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAGeoStationaryInclinationMag),) }
    @property
    def InclinationMagnitudeType(self) -> "AgEVAGeoStationaryInclinationMag":
        """Magnitude to use when computing the inclination vector."""
        return self._intf.get_property(IAgVAStateCalcInclinationY._metadata, IAgVAStateCalcInclinationY._get_InclinationMagnitudeType_metadata)

    _set_InclinationMagnitudeType_metadata = { "name" : "InclinationMagnitudeType",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAGeoStationaryInclinationMag),) }
    @InclinationMagnitudeType.setter
    def InclinationMagnitudeType(self, val:"AgEVAGeoStationaryInclinationMag") -> None:
        return self._intf.set_property(IAgVAStateCalcInclinationY._metadata, IAgVAStateCalcInclinationY._set_InclinationMagnitudeType_metadata, val)


agcls.AgClassCatalog.add_catalog_entry("{5CEC75BB-28C3-4BA7-A96E-DC115619B093}", IAgVAStateCalcInclinationY)
agcls.AgTypeNameMap["IAgVAStateCalcInclinationY"] = IAgVAStateCalcInclinationY

class IAgVAStateCalcUnitAngularMomentumX(object):
    """Properties for a UnitAngularMomentumX calculation object."""
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{7165CE29-2BAA-438B-BF73-49E4B5AFD22D}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_CentralBodyName" : 1,
                             "set_CentralBodyName" : 2, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAStateCalcUnitAngularMomentumX._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcUnitAngularMomentumX from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcUnitAngularMomentumX.__dict__ and type(IAgVAStateCalcUnitAngularMomentumX.__dict__[attrname]) == property:
            return IAgVAStateCalcUnitAngularMomentumX.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcUnitAngularMomentumX.")
    
    _get_CentralBodyName_metadata = { "name" : "CentralBodyName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def CentralBodyName(self) -> str:
        """The central body of the component."""
        return self._intf.get_property(IAgVAStateCalcUnitAngularMomentumX._metadata, IAgVAStateCalcUnitAngularMomentumX._get_CentralBodyName_metadata)

    _set_CentralBodyName_metadata = { "name" : "CentralBodyName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @CentralBodyName.setter
    def CentralBodyName(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAStateCalcUnitAngularMomentumX._metadata, IAgVAStateCalcUnitAngularMomentumX._set_CentralBodyName_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{7165CE29-2BAA-438B-BF73-49E4B5AFD22D}", IAgVAStateCalcUnitAngularMomentumX)
agcls.AgTypeNameMap["IAgVAStateCalcUnitAngularMomentumX"] = IAgVAStateCalcUnitAngularMomentumX

class IAgVAStateCalcUnitAngularMomentumY(object):
    """Properties for a UnitAngularMomentumY calculation object."""
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{F0A06177-01B3-401E-980F-B61774B91FD0}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_CentralBodyName" : 1,
                             "set_CentralBodyName" : 2, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAStateCalcUnitAngularMomentumY._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcUnitAngularMomentumY from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcUnitAngularMomentumY.__dict__ and type(IAgVAStateCalcUnitAngularMomentumY.__dict__[attrname]) == property:
            return IAgVAStateCalcUnitAngularMomentumY.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcUnitAngularMomentumY.")
    
    _get_CentralBodyName_metadata = { "name" : "CentralBodyName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def CentralBodyName(self) -> str:
        """The central body of the component."""
        return self._intf.get_property(IAgVAStateCalcUnitAngularMomentumY._metadata, IAgVAStateCalcUnitAngularMomentumY._get_CentralBodyName_metadata)

    _set_CentralBodyName_metadata = { "name" : "CentralBodyName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @CentralBodyName.setter
    def CentralBodyName(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAStateCalcUnitAngularMomentumY._metadata, IAgVAStateCalcUnitAngularMomentumY._set_CentralBodyName_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{F0A06177-01B3-401E-980F-B61774B91FD0}", IAgVAStateCalcUnitAngularMomentumY)
agcls.AgTypeNameMap["IAgVAStateCalcUnitAngularMomentumY"] = IAgVAStateCalcUnitAngularMomentumY

class IAgVAStateCalcUnitAngularMomentumZ(object):
    """Properties for a UnitAngularMomentumZ calculation object."""
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{7184F372-5CFE-4792-B30F-5DC69E9A6F01}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_CentralBodyName" : 1,
                             "set_CentralBodyName" : 2, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAStateCalcUnitAngularMomentumZ._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcUnitAngularMomentumZ from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcUnitAngularMomentumZ.__dict__ and type(IAgVAStateCalcUnitAngularMomentumZ.__dict__[attrname]) == property:
            return IAgVAStateCalcUnitAngularMomentumZ.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcUnitAngularMomentumZ.")
    
    _get_CentralBodyName_metadata = { "name" : "CentralBodyName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def CentralBodyName(self) -> str:
        """The central body of the component."""
        return self._intf.get_property(IAgVAStateCalcUnitAngularMomentumZ._metadata, IAgVAStateCalcUnitAngularMomentumZ._get_CentralBodyName_metadata)

    _set_CentralBodyName_metadata = { "name" : "CentralBodyName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @CentralBodyName.setter
    def CentralBodyName(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAStateCalcUnitAngularMomentumZ._metadata, IAgVAStateCalcUnitAngularMomentumZ._set_CentralBodyName_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{7184F372-5CFE-4792-B30F-5DC69E9A6F01}", IAgVAStateCalcUnitAngularMomentumZ)
agcls.AgTypeNameMap["IAgVAStateCalcUnitAngularMomentumZ"] = IAgVAStateCalcUnitAngularMomentumZ

class IAgVAStateCalcGeodeticElem(object):
    """Properties for a Geodetic Element calculation object."""
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{D827128C-F7C1-40CE-AE27-DDF0AAEBB150}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_CentralBodyName" : 1,
                             "set_CentralBodyName" : 2, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAStateCalcGeodeticElem._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcGeodeticElem from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcGeodeticElem.__dict__ and type(IAgVAStateCalcGeodeticElem.__dict__[attrname]) == property:
            return IAgVAStateCalcGeodeticElem.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcGeodeticElem.")
    
    _get_CentralBodyName_metadata = { "name" : "CentralBodyName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def CentralBodyName(self) -> str:
        """The central body of the component."""
        return self._intf.get_property(IAgVAStateCalcGeodeticElem._metadata, IAgVAStateCalcGeodeticElem._get_CentralBodyName_metadata)

    _set_CentralBodyName_metadata = { "name" : "CentralBodyName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @CentralBodyName.setter
    def CentralBodyName(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAStateCalcGeodeticElem._metadata, IAgVAStateCalcGeodeticElem._set_CentralBodyName_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{D827128C-F7C1-40CE-AE27-DDF0AAEBB150}", IAgVAStateCalcGeodeticElem)
agcls.AgTypeNameMap["IAgVAStateCalcGeodeticElem"] = IAgVAStateCalcGeodeticElem

class IAgVAStateCalcRepeatingGroundTrackErr(object):
    """Properties for a RepeatingGroundTrackEquatorError calculation object."""
    _num_methods = 10
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{53C25A30-1C1E-42F0-AEA5-D67EF1037A18}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_CentralBodyName" : 1,
                             "set_CentralBodyName" : 2,
                             "get_ReferenceLongitude" : 3,
                             "set_ReferenceLongitude" : 4,
                             "get_RepeatCount" : 5,
                             "set_RepeatCount" : 6,
                             "EnableControlParameter" : 7,
                             "DisableControlParameter" : 8,
                             "IsControlParameterEnabled" : 9,
                             "get_ControlParametersAvailable" : 10, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAStateCalcRepeatingGroundTrackErr._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcRepeatingGroundTrackErr from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcRepeatingGroundTrackErr.__dict__ and type(IAgVAStateCalcRepeatingGroundTrackErr.__dict__[attrname]) == property:
            return IAgVAStateCalcRepeatingGroundTrackErr.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcRepeatingGroundTrackErr.")
    
    _get_CentralBodyName_metadata = { "name" : "CentralBodyName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def CentralBodyName(self) -> str:
        """The central body of the component."""
        return self._intf.get_property(IAgVAStateCalcRepeatingGroundTrackErr._metadata, IAgVAStateCalcRepeatingGroundTrackErr._get_CentralBodyName_metadata)

    _set_CentralBodyName_metadata = { "name" : "CentralBodyName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @CentralBodyName.setter
    def CentralBodyName(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAStateCalcRepeatingGroundTrackErr._metadata, IAgVAStateCalcRepeatingGroundTrackErr._set_CentralBodyName_metadata, inVal)

    _get_ReferenceLongitude_metadata = { "name" : "ReferenceLongitude",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def ReferenceLongitude(self) -> typing.Any:
        """The longitude at the equator to be used as a reference for the repeating ground track. Uses Angle Dimension."""
        return self._intf.get_property(IAgVAStateCalcRepeatingGroundTrackErr._metadata, IAgVAStateCalcRepeatingGroundTrackErr._get_ReferenceLongitude_metadata)

    _set_ReferenceLongitude_metadata = { "name" : "ReferenceLongitude",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @ReferenceLongitude.setter
    def ReferenceLongitude(self, inVal:typing.Any) -> None:
        return self._intf.set_property(IAgVAStateCalcRepeatingGroundTrackErr._metadata, IAgVAStateCalcRepeatingGroundTrackErr._set_ReferenceLongitude_metadata, inVal)

    _get_RepeatCount_metadata = { "name" : "RepeatCount",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def RepeatCount(self) -> float:
        """The number of orbits before the ground track repeats over the same longitude. Dimensionless."""
        return self._intf.get_property(IAgVAStateCalcRepeatingGroundTrackErr._metadata, IAgVAStateCalcRepeatingGroundTrackErr._get_RepeatCount_metadata)

    _set_RepeatCount_metadata = { "name" : "RepeatCount",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @RepeatCount.setter
    def RepeatCount(self, inVal:float) -> None:
        return self._intf.set_property(IAgVAStateCalcRepeatingGroundTrackErr._metadata, IAgVAStateCalcRepeatingGroundTrackErr._set_RepeatCount_metadata, inVal)

    _EnableControlParameter_metadata = { "name" : "EnableControlParameter",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAControlRepeatingGroundTrackErr),) }
    def EnableControlParameter(self, param:"AgEVAControlRepeatingGroundTrackErr") -> None:
        """Enables the specified control parameter"""
        return self._intf.invoke(IAgVAStateCalcRepeatingGroundTrackErr._metadata, IAgVAStateCalcRepeatingGroundTrackErr._EnableControlParameter_metadata, param)

    _DisableControlParameter_metadata = { "name" : "DisableControlParameter",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAControlRepeatingGroundTrackErr),) }
    def DisableControlParameter(self, param:"AgEVAControlRepeatingGroundTrackErr") -> None:
        """Disables the specified control parameter"""
        return self._intf.invoke(IAgVAStateCalcRepeatingGroundTrackErr._metadata, IAgVAStateCalcRepeatingGroundTrackErr._DisableControlParameter_metadata, param)

    _IsControlParameterEnabled_metadata = { "name" : "IsControlParameterEnabled",
            "arg_types" : (agcom.LONG, POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAControlRepeatingGroundTrackErr), agmarshall.VARIANT_BOOL_arg,) }
    def IsControlParameterEnabled(self, param:"AgEVAControlRepeatingGroundTrackErr") -> bool:
        """Sees if the specified control is enabled"""
        return self._intf.invoke(IAgVAStateCalcRepeatingGroundTrackErr._metadata, IAgVAStateCalcRepeatingGroundTrackErr._IsControlParameterEnabled_metadata, param, out_arg())

    _get_ControlParametersAvailable_metadata = { "name" : "ControlParametersAvailable",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def ControlParametersAvailable(self) -> bool:
        """Returns whether or not the control parameters can be set."""
        return self._intf.get_property(IAgVAStateCalcRepeatingGroundTrackErr._metadata, IAgVAStateCalcRepeatingGroundTrackErr._get_ControlParametersAvailable_metadata)


agcls.AgClassCatalog.add_catalog_entry("{53C25A30-1C1E-42F0-AEA5-D67EF1037A18}", IAgVAStateCalcRepeatingGroundTrackErr)
agcls.AgTypeNameMap["IAgVAStateCalcRepeatingGroundTrackErr"] = IAgVAStateCalcRepeatingGroundTrackErr

class IAgVAStateCalcAltOfApoapsis(object):
    """Properties for an Altitude of Apoapsis calculation object."""
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{891F3D94-A765-42AE-9459-7575CD33E62E}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_CentralBodyName" : 1,
                             "set_CentralBodyName" : 2,
                             "get_ElementType" : 3,
                             "set_ElementType" : 4, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAStateCalcAltOfApoapsis._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcAltOfApoapsis from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcAltOfApoapsis.__dict__ and type(IAgVAStateCalcAltOfApoapsis.__dict__[attrname]) == property:
            return IAgVAStateCalcAltOfApoapsis.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcAltOfApoapsis.")
    
    _get_CentralBodyName_metadata = { "name" : "CentralBodyName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def CentralBodyName(self) -> str:
        """The central body of the component."""
        return self._intf.get_property(IAgVAStateCalcAltOfApoapsis._metadata, IAgVAStateCalcAltOfApoapsis._get_CentralBodyName_metadata)

    _set_CentralBodyName_metadata = { "name" : "CentralBodyName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @CentralBodyName.setter
    def CentralBodyName(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAStateCalcAltOfApoapsis._metadata, IAgVAStateCalcAltOfApoapsis._set_CentralBodyName_metadata, inVal)

    _get_ElementType_metadata = { "name" : "ElementType",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVACalcObjectElem),) }
    @property
    def ElementType(self) -> "AgEVACalcObjectElem":
        """The element type."""
        return self._intf.get_property(IAgVAStateCalcAltOfApoapsis._metadata, IAgVAStateCalcAltOfApoapsis._get_ElementType_metadata)

    _set_ElementType_metadata = { "name" : "ElementType",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVACalcObjectElem),) }
    @ElementType.setter
    def ElementType(self, inVal:"AgEVACalcObjectElem") -> None:
        return self._intf.set_property(IAgVAStateCalcAltOfApoapsis._metadata, IAgVAStateCalcAltOfApoapsis._set_ElementType_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{891F3D94-A765-42AE-9459-7575CD33E62E}", IAgVAStateCalcAltOfApoapsis)
agcls.AgTypeNameMap["IAgVAStateCalcAltOfApoapsis"] = IAgVAStateCalcAltOfApoapsis

class IAgVAStateCalcAltOfPeriapsis(object):
    """Properties for an Altitude Of Periapsis calculation object."""
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{3A81E388-64C2-41BD-88FC-19E318F08D5C}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_CentralBodyName" : 1,
                             "set_CentralBodyName" : 2,
                             "get_ElementType" : 3,
                             "set_ElementType" : 4, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAStateCalcAltOfPeriapsis._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcAltOfPeriapsis from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcAltOfPeriapsis.__dict__ and type(IAgVAStateCalcAltOfPeriapsis.__dict__[attrname]) == property:
            return IAgVAStateCalcAltOfPeriapsis.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcAltOfPeriapsis.")
    
    _get_CentralBodyName_metadata = { "name" : "CentralBodyName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def CentralBodyName(self) -> str:
        """The central body of the component."""
        return self._intf.get_property(IAgVAStateCalcAltOfPeriapsis._metadata, IAgVAStateCalcAltOfPeriapsis._get_CentralBodyName_metadata)

    _set_CentralBodyName_metadata = { "name" : "CentralBodyName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @CentralBodyName.setter
    def CentralBodyName(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAStateCalcAltOfPeriapsis._metadata, IAgVAStateCalcAltOfPeriapsis._set_CentralBodyName_metadata, inVal)

    _get_ElementType_metadata = { "name" : "ElementType",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVACalcObjectElem),) }
    @property
    def ElementType(self) -> "AgEVACalcObjectElem":
        """The element type."""
        return self._intf.get_property(IAgVAStateCalcAltOfPeriapsis._metadata, IAgVAStateCalcAltOfPeriapsis._get_ElementType_metadata)

    _set_ElementType_metadata = { "name" : "ElementType",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVACalcObjectElem),) }
    @ElementType.setter
    def ElementType(self, inVal:"AgEVACalcObjectElem") -> None:
        return self._intf.set_property(IAgVAStateCalcAltOfPeriapsis._metadata, IAgVAStateCalcAltOfPeriapsis._set_ElementType_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{3A81E388-64C2-41BD-88FC-19E318F08D5C}", IAgVAStateCalcAltOfPeriapsis)
agcls.AgTypeNameMap["IAgVAStateCalcAltOfPeriapsis"] = IAgVAStateCalcAltOfPeriapsis

class IAgVAStateCalcArgOfLat(object):
    """Properties for an Argument of Latitude calculation object."""
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{C5B93283-1CEB-407C-837F-21BB7C8227BD}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_CoordSystemName" : 1,
                             "set_CoordSystemName" : 2,
                             "get_ElementType" : 3,
                             "set_ElementType" : 4, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAStateCalcArgOfLat._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcArgOfLat from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcArgOfLat.__dict__ and type(IAgVAStateCalcArgOfLat.__dict__[attrname]) == property:
            return IAgVAStateCalcArgOfLat.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcArgOfLat.")
    
    _get_CoordSystemName_metadata = { "name" : "CoordSystemName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def CoordSystemName(self) -> str:
        """The coordinate system within which the element is defined."""
        return self._intf.get_property(IAgVAStateCalcArgOfLat._metadata, IAgVAStateCalcArgOfLat._get_CoordSystemName_metadata)

    _set_CoordSystemName_metadata = { "name" : "CoordSystemName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @CoordSystemName.setter
    def CoordSystemName(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAStateCalcArgOfLat._metadata, IAgVAStateCalcArgOfLat._set_CoordSystemName_metadata, inVal)

    _get_ElementType_metadata = { "name" : "ElementType",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVACalcObjectElem),) }
    @property
    def ElementType(self) -> "AgEVACalcObjectElem":
        """The element type."""
        return self._intf.get_property(IAgVAStateCalcArgOfLat._metadata, IAgVAStateCalcArgOfLat._get_ElementType_metadata)

    _set_ElementType_metadata = { "name" : "ElementType",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVACalcObjectElem),) }
    @ElementType.setter
    def ElementType(self, inVal:"AgEVACalcObjectElem") -> None:
        return self._intf.set_property(IAgVAStateCalcArgOfLat._metadata, IAgVAStateCalcArgOfLat._set_ElementType_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{C5B93283-1CEB-407C-837F-21BB7C8227BD}", IAgVAStateCalcArgOfLat)
agcls.AgTypeNameMap["IAgVAStateCalcArgOfLat"] = IAgVAStateCalcArgOfLat

class IAgVAStateCalcArgOfPeriapsis(object):
    """Properties for an Argument of Periapsis calculation object."""
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{30364B7E-BBCE-4FCF-BC76-7330A97ECE0F}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_CoordSystemName" : 1,
                             "set_CoordSystemName" : 2,
                             "get_ElementType" : 3,
                             "set_ElementType" : 4, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAStateCalcArgOfPeriapsis._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcArgOfPeriapsis from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcArgOfPeriapsis.__dict__ and type(IAgVAStateCalcArgOfPeriapsis.__dict__[attrname]) == property:
            return IAgVAStateCalcArgOfPeriapsis.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcArgOfPeriapsis.")
    
    _get_CoordSystemName_metadata = { "name" : "CoordSystemName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def CoordSystemName(self) -> str:
        """The coordinate system within which the element is defined."""
        return self._intf.get_property(IAgVAStateCalcArgOfPeriapsis._metadata, IAgVAStateCalcArgOfPeriapsis._get_CoordSystemName_metadata)

    _set_CoordSystemName_metadata = { "name" : "CoordSystemName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @CoordSystemName.setter
    def CoordSystemName(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAStateCalcArgOfPeriapsis._metadata, IAgVAStateCalcArgOfPeriapsis._set_CoordSystemName_metadata, inVal)

    _get_ElementType_metadata = { "name" : "ElementType",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVACalcObjectElem),) }
    @property
    def ElementType(self) -> "AgEVACalcObjectElem":
        """The element type."""
        return self._intf.get_property(IAgVAStateCalcArgOfPeriapsis._metadata, IAgVAStateCalcArgOfPeriapsis._get_ElementType_metadata)

    _set_ElementType_metadata = { "name" : "ElementType",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVACalcObjectElem),) }
    @ElementType.setter
    def ElementType(self, inVal:"AgEVACalcObjectElem") -> None:
        return self._intf.set_property(IAgVAStateCalcArgOfPeriapsis._metadata, IAgVAStateCalcArgOfPeriapsis._set_ElementType_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{30364B7E-BBCE-4FCF-BC76-7330A97ECE0F}", IAgVAStateCalcArgOfPeriapsis)
agcls.AgTypeNameMap["IAgVAStateCalcArgOfPeriapsis"] = IAgVAStateCalcArgOfPeriapsis

class IAgVAStateCalcEccAnomaly(object):
    """Properties for an Eccentric Anomaly calculation object."""
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{9655A1AA-233C-4E4C-9A2E-93B91A439947}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_CentralBodyName" : 1,
                             "set_CentralBodyName" : 2,
                             "get_ElementType" : 3,
                             "set_ElementType" : 4, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAStateCalcEccAnomaly._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcEccAnomaly from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcEccAnomaly.__dict__ and type(IAgVAStateCalcEccAnomaly.__dict__[attrname]) == property:
            return IAgVAStateCalcEccAnomaly.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcEccAnomaly.")
    
    _get_CentralBodyName_metadata = { "name" : "CentralBodyName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def CentralBodyName(self) -> str:
        """The central body of the component."""
        return self._intf.get_property(IAgVAStateCalcEccAnomaly._metadata, IAgVAStateCalcEccAnomaly._get_CentralBodyName_metadata)

    _set_CentralBodyName_metadata = { "name" : "CentralBodyName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @CentralBodyName.setter
    def CentralBodyName(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAStateCalcEccAnomaly._metadata, IAgVAStateCalcEccAnomaly._set_CentralBodyName_metadata, inVal)

    _get_ElementType_metadata = { "name" : "ElementType",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVACalcObjectElem),) }
    @property
    def ElementType(self) -> "AgEVACalcObjectElem":
        """The element type."""
        return self._intf.get_property(IAgVAStateCalcEccAnomaly._metadata, IAgVAStateCalcEccAnomaly._get_ElementType_metadata)

    _set_ElementType_metadata = { "name" : "ElementType",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVACalcObjectElem),) }
    @ElementType.setter
    def ElementType(self, inVal:"AgEVACalcObjectElem") -> None:
        return self._intf.set_property(IAgVAStateCalcEccAnomaly._metadata, IAgVAStateCalcEccAnomaly._set_ElementType_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{9655A1AA-233C-4E4C-9A2E-93B91A439947}", IAgVAStateCalcEccAnomaly)
agcls.AgTypeNameMap["IAgVAStateCalcEccAnomaly"] = IAgVAStateCalcEccAnomaly

class IAgVAStateCalcEccentricity(object):
    """Properties for an Eccentricity calculation object."""
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{3AE52837-A597-473A-83A2-9DC9B2271101}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_CentralBodyName" : 1,
                             "set_CentralBodyName" : 2,
                             "get_ElementType" : 3,
                             "set_ElementType" : 4, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAStateCalcEccentricity._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcEccentricity from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcEccentricity.__dict__ and type(IAgVAStateCalcEccentricity.__dict__[attrname]) == property:
            return IAgVAStateCalcEccentricity.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcEccentricity.")
    
    _get_CentralBodyName_metadata = { "name" : "CentralBodyName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def CentralBodyName(self) -> str:
        """The central body of the component."""
        return self._intf.get_property(IAgVAStateCalcEccentricity._metadata, IAgVAStateCalcEccentricity._get_CentralBodyName_metadata)

    _set_CentralBodyName_metadata = { "name" : "CentralBodyName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @CentralBodyName.setter
    def CentralBodyName(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAStateCalcEccentricity._metadata, IAgVAStateCalcEccentricity._set_CentralBodyName_metadata, inVal)

    _get_ElementType_metadata = { "name" : "ElementType",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVACalcObjectElem),) }
    @property
    def ElementType(self) -> "AgEVACalcObjectElem":
        """The element type."""
        return self._intf.get_property(IAgVAStateCalcEccentricity._metadata, IAgVAStateCalcEccentricity._get_ElementType_metadata)

    _set_ElementType_metadata = { "name" : "ElementType",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVACalcObjectElem),) }
    @ElementType.setter
    def ElementType(self, inVal:"AgEVACalcObjectElem") -> None:
        return self._intf.set_property(IAgVAStateCalcEccentricity._metadata, IAgVAStateCalcEccentricity._set_ElementType_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{3AE52837-A597-473A-83A2-9DC9B2271101}", IAgVAStateCalcEccentricity)
agcls.AgTypeNameMap["IAgVAStateCalcEccentricity"] = IAgVAStateCalcEccentricity

class IAgVAStateCalcInclination(object):
    """Properties for an Inclination calculation object."""
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{477CF8AA-81BE-4C13-8F6D-7157268869A3}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_CoordSystemName" : 1,
                             "set_CoordSystemName" : 2,
                             "get_ElementType" : 3,
                             "set_ElementType" : 4, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAStateCalcInclination._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcInclination from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcInclination.__dict__ and type(IAgVAStateCalcInclination.__dict__[attrname]) == property:
            return IAgVAStateCalcInclination.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcInclination.")
    
    _get_CoordSystemName_metadata = { "name" : "CoordSystemName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def CoordSystemName(self) -> str:
        """The coordinate system within which the element is defined."""
        return self._intf.get_property(IAgVAStateCalcInclination._metadata, IAgVAStateCalcInclination._get_CoordSystemName_metadata)

    _set_CoordSystemName_metadata = { "name" : "CoordSystemName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @CoordSystemName.setter
    def CoordSystemName(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAStateCalcInclination._metadata, IAgVAStateCalcInclination._set_CoordSystemName_metadata, inVal)

    _get_ElementType_metadata = { "name" : "ElementType",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVACalcObjectElem),) }
    @property
    def ElementType(self) -> "AgEVACalcObjectElem":
        """The element type."""
        return self._intf.get_property(IAgVAStateCalcInclination._metadata, IAgVAStateCalcInclination._get_ElementType_metadata)

    _set_ElementType_metadata = { "name" : "ElementType",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVACalcObjectElem),) }
    @ElementType.setter
    def ElementType(self, inVal:"AgEVACalcObjectElem") -> None:
        return self._intf.set_property(IAgVAStateCalcInclination._metadata, IAgVAStateCalcInclination._set_ElementType_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{477CF8AA-81BE-4C13-8F6D-7157268869A3}", IAgVAStateCalcInclination)
agcls.AgTypeNameMap["IAgVAStateCalcInclination"] = IAgVAStateCalcInclination

class IAgVAStateCalcLonOfAscNode(object):
    """Properties for a Longitude of Ascending Node calculation object."""
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{9A4EED12-F650-449B-B3C0-2278D58A8D92}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_CentralBodyName" : 1,
                             "set_CentralBodyName" : 2,
                             "get_ElementType" : 3,
                             "set_ElementType" : 4, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAStateCalcLonOfAscNode._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcLonOfAscNode from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcLonOfAscNode.__dict__ and type(IAgVAStateCalcLonOfAscNode.__dict__[attrname]) == property:
            return IAgVAStateCalcLonOfAscNode.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcLonOfAscNode.")
    
    _get_CentralBodyName_metadata = { "name" : "CentralBodyName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def CentralBodyName(self) -> str:
        """The central body of the component."""
        return self._intf.get_property(IAgVAStateCalcLonOfAscNode._metadata, IAgVAStateCalcLonOfAscNode._get_CentralBodyName_metadata)

    _set_CentralBodyName_metadata = { "name" : "CentralBodyName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @CentralBodyName.setter
    def CentralBodyName(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAStateCalcLonOfAscNode._metadata, IAgVAStateCalcLonOfAscNode._set_CentralBodyName_metadata, inVal)

    _get_ElementType_metadata = { "name" : "ElementType",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVACalcObjectElem),) }
    @property
    def ElementType(self) -> "AgEVACalcObjectElem":
        """The element type."""
        return self._intf.get_property(IAgVAStateCalcLonOfAscNode._metadata, IAgVAStateCalcLonOfAscNode._get_ElementType_metadata)

    _set_ElementType_metadata = { "name" : "ElementType",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVACalcObjectElem),) }
    @ElementType.setter
    def ElementType(self, inVal:"AgEVACalcObjectElem") -> None:
        return self._intf.set_property(IAgVAStateCalcLonOfAscNode._metadata, IAgVAStateCalcLonOfAscNode._set_ElementType_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{9A4EED12-F650-449B-B3C0-2278D58A8D92}", IAgVAStateCalcLonOfAscNode)
agcls.AgTypeNameMap["IAgVAStateCalcLonOfAscNode"] = IAgVAStateCalcLonOfAscNode

class IAgVAStateCalcMeanAnomaly(object):
    """Properties for a MeanAnomaly calculation object."""
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{2E620A15-C918-467A-A8C3-817BF13FC602}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_CentralBodyName" : 1,
                             "set_CentralBodyName" : 2,
                             "get_ElementType" : 3,
                             "set_ElementType" : 4, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAStateCalcMeanAnomaly._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcMeanAnomaly from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcMeanAnomaly.__dict__ and type(IAgVAStateCalcMeanAnomaly.__dict__[attrname]) == property:
            return IAgVAStateCalcMeanAnomaly.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcMeanAnomaly.")
    
    _get_CentralBodyName_metadata = { "name" : "CentralBodyName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def CentralBodyName(self) -> str:
        """The central body of the component."""
        return self._intf.get_property(IAgVAStateCalcMeanAnomaly._metadata, IAgVAStateCalcMeanAnomaly._get_CentralBodyName_metadata)

    _set_CentralBodyName_metadata = { "name" : "CentralBodyName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @CentralBodyName.setter
    def CentralBodyName(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAStateCalcMeanAnomaly._metadata, IAgVAStateCalcMeanAnomaly._set_CentralBodyName_metadata, inVal)

    _get_ElementType_metadata = { "name" : "ElementType",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVACalcObjectElem),) }
    @property
    def ElementType(self) -> "AgEVACalcObjectElem":
        """The element type."""
        return self._intf.get_property(IAgVAStateCalcMeanAnomaly._metadata, IAgVAStateCalcMeanAnomaly._get_ElementType_metadata)

    _set_ElementType_metadata = { "name" : "ElementType",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVACalcObjectElem),) }
    @ElementType.setter
    def ElementType(self, inVal:"AgEVACalcObjectElem") -> None:
        return self._intf.set_property(IAgVAStateCalcMeanAnomaly._metadata, IAgVAStateCalcMeanAnomaly._set_ElementType_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{2E620A15-C918-467A-A8C3-817BF13FC602}", IAgVAStateCalcMeanAnomaly)
agcls.AgTypeNameMap["IAgVAStateCalcMeanAnomaly"] = IAgVAStateCalcMeanAnomaly

class IAgVAStateCalcMeanMotion(object):
    """Properties for a Mean Motion calculation object."""
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{3CF417E4-9A1B-492B-BEA8-A019896B26E9}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_CentralBodyName" : 1,
                             "set_CentralBodyName" : 2,
                             "get_ElementType" : 3,
                             "set_ElementType" : 4, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAStateCalcMeanMotion._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcMeanMotion from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcMeanMotion.__dict__ and type(IAgVAStateCalcMeanMotion.__dict__[attrname]) == property:
            return IAgVAStateCalcMeanMotion.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcMeanMotion.")
    
    _get_CentralBodyName_metadata = { "name" : "CentralBodyName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def CentralBodyName(self) -> str:
        """The central body of the component."""
        return self._intf.get_property(IAgVAStateCalcMeanMotion._metadata, IAgVAStateCalcMeanMotion._get_CentralBodyName_metadata)

    _set_CentralBodyName_metadata = { "name" : "CentralBodyName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @CentralBodyName.setter
    def CentralBodyName(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAStateCalcMeanMotion._metadata, IAgVAStateCalcMeanMotion._set_CentralBodyName_metadata, inVal)

    _get_ElementType_metadata = { "name" : "ElementType",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVACalcObjectElem),) }
    @property
    def ElementType(self) -> "AgEVACalcObjectElem":
        """The element type."""
        return self._intf.get_property(IAgVAStateCalcMeanMotion._metadata, IAgVAStateCalcMeanMotion._get_ElementType_metadata)

    _set_ElementType_metadata = { "name" : "ElementType",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVACalcObjectElem),) }
    @ElementType.setter
    def ElementType(self, inVal:"AgEVACalcObjectElem") -> None:
        return self._intf.set_property(IAgVAStateCalcMeanMotion._metadata, IAgVAStateCalcMeanMotion._set_ElementType_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{3CF417E4-9A1B-492B-BEA8-A019896B26E9}", IAgVAStateCalcMeanMotion)
agcls.AgTypeNameMap["IAgVAStateCalcMeanMotion"] = IAgVAStateCalcMeanMotion

class IAgVAStateCalcOrbitPeriod(object):
    """Properties for an Orbit Period calculation object."""
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{C108486C-571C-4007-9EFD-70CD8745C3D5}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_CentralBodyName" : 1,
                             "set_CentralBodyName" : 2,
                             "get_ElementType" : 3,
                             "set_ElementType" : 4, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAStateCalcOrbitPeriod._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcOrbitPeriod from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcOrbitPeriod.__dict__ and type(IAgVAStateCalcOrbitPeriod.__dict__[attrname]) == property:
            return IAgVAStateCalcOrbitPeriod.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcOrbitPeriod.")
    
    _get_CentralBodyName_metadata = { "name" : "CentralBodyName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def CentralBodyName(self) -> str:
        """The central body of the component."""
        return self._intf.get_property(IAgVAStateCalcOrbitPeriod._metadata, IAgVAStateCalcOrbitPeriod._get_CentralBodyName_metadata)

    _set_CentralBodyName_metadata = { "name" : "CentralBodyName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @CentralBodyName.setter
    def CentralBodyName(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAStateCalcOrbitPeriod._metadata, IAgVAStateCalcOrbitPeriod._set_CentralBodyName_metadata, inVal)

    _get_ElementType_metadata = { "name" : "ElementType",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVACalcObjectElem),) }
    @property
    def ElementType(self) -> "AgEVACalcObjectElem":
        """The element type."""
        return self._intf.get_property(IAgVAStateCalcOrbitPeriod._metadata, IAgVAStateCalcOrbitPeriod._get_ElementType_metadata)

    _set_ElementType_metadata = { "name" : "ElementType",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVACalcObjectElem),) }
    @ElementType.setter
    def ElementType(self, inVal:"AgEVACalcObjectElem") -> None:
        return self._intf.set_property(IAgVAStateCalcOrbitPeriod._metadata, IAgVAStateCalcOrbitPeriod._set_ElementType_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{C108486C-571C-4007-9EFD-70CD8745C3D5}", IAgVAStateCalcOrbitPeriod)
agcls.AgTypeNameMap["IAgVAStateCalcOrbitPeriod"] = IAgVAStateCalcOrbitPeriod

class IAgVAStateCalcNumRevs(object):
    """Properties for a Number of Revolutions calculation object."""
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{A9FF9984-5A98-44F1-A231-10C3F26A1082}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_CentralBodyName" : 1,
                             "set_CentralBodyName" : 2,
                             "get_ElementType" : 3,
                             "set_ElementType" : 4, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAStateCalcNumRevs._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcNumRevs from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcNumRevs.__dict__ and type(IAgVAStateCalcNumRevs.__dict__[attrname]) == property:
            return IAgVAStateCalcNumRevs.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcNumRevs.")
    
    _get_CentralBodyName_metadata = { "name" : "CentralBodyName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def CentralBodyName(self) -> str:
        """The central body of the component."""
        return self._intf.get_property(IAgVAStateCalcNumRevs._metadata, IAgVAStateCalcNumRevs._get_CentralBodyName_metadata)

    _set_CentralBodyName_metadata = { "name" : "CentralBodyName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @CentralBodyName.setter
    def CentralBodyName(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAStateCalcNumRevs._metadata, IAgVAStateCalcNumRevs._set_CentralBodyName_metadata, inVal)

    _get_ElementType_metadata = { "name" : "ElementType",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVACalcObjectElem),) }
    @property
    def ElementType(self) -> "AgEVACalcObjectElem":
        """The element type."""
        return self._intf.get_property(IAgVAStateCalcNumRevs._metadata, IAgVAStateCalcNumRevs._get_ElementType_metadata)

    _set_ElementType_metadata = { "name" : "ElementType",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVACalcObjectElem),) }
    @ElementType.setter
    def ElementType(self, inVal:"AgEVACalcObjectElem") -> None:
        return self._intf.set_property(IAgVAStateCalcNumRevs._metadata, IAgVAStateCalcNumRevs._set_ElementType_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{A9FF9984-5A98-44F1-A231-10C3F26A1082}", IAgVAStateCalcNumRevs)
agcls.AgTypeNameMap["IAgVAStateCalcNumRevs"] = IAgVAStateCalcNumRevs

class IAgVAStateCalcRAAN(object):
    """Properties for a RAAN calculation object."""
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{B2456E5C-7305-4AAD-8318-7A65D65C328A}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_CoordSystemName" : 1,
                             "set_CoordSystemName" : 2,
                             "get_ElementType" : 3,
                             "set_ElementType" : 4, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAStateCalcRAAN._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcRAAN from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcRAAN.__dict__ and type(IAgVAStateCalcRAAN.__dict__[attrname]) == property:
            return IAgVAStateCalcRAAN.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcRAAN.")
    
    _get_CoordSystemName_metadata = { "name" : "CoordSystemName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def CoordSystemName(self) -> str:
        """The coordinate system within which the element is defined."""
        return self._intf.get_property(IAgVAStateCalcRAAN._metadata, IAgVAStateCalcRAAN._get_CoordSystemName_metadata)

    _set_CoordSystemName_metadata = { "name" : "CoordSystemName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @CoordSystemName.setter
    def CoordSystemName(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAStateCalcRAAN._metadata, IAgVAStateCalcRAAN._set_CoordSystemName_metadata, inVal)

    _get_ElementType_metadata = { "name" : "ElementType",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVACalcObjectElem),) }
    @property
    def ElementType(self) -> "AgEVACalcObjectElem":
        """The element type."""
        return self._intf.get_property(IAgVAStateCalcRAAN._metadata, IAgVAStateCalcRAAN._get_ElementType_metadata)

    _set_ElementType_metadata = { "name" : "ElementType",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVACalcObjectElem),) }
    @ElementType.setter
    def ElementType(self, inVal:"AgEVACalcObjectElem") -> None:
        return self._intf.set_property(IAgVAStateCalcRAAN._metadata, IAgVAStateCalcRAAN._set_ElementType_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{B2456E5C-7305-4AAD-8318-7A65D65C328A}", IAgVAStateCalcRAAN)
agcls.AgTypeNameMap["IAgVAStateCalcRAAN"] = IAgVAStateCalcRAAN

class IAgVAStateCalcRadOfApoapsis(object):
    """Properties for a Radius Of Apoapsis calculation object."""
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{2B481148-138F-44EA-9EE2-03FC7FA82CEC}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_CentralBodyName" : 1,
                             "set_CentralBodyName" : 2,
                             "get_ElementType" : 3,
                             "set_ElementType" : 4, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAStateCalcRadOfApoapsis._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcRadOfApoapsis from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcRadOfApoapsis.__dict__ and type(IAgVAStateCalcRadOfApoapsis.__dict__[attrname]) == property:
            return IAgVAStateCalcRadOfApoapsis.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcRadOfApoapsis.")
    
    _get_CentralBodyName_metadata = { "name" : "CentralBodyName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def CentralBodyName(self) -> str:
        """The central body of the component."""
        return self._intf.get_property(IAgVAStateCalcRadOfApoapsis._metadata, IAgVAStateCalcRadOfApoapsis._get_CentralBodyName_metadata)

    _set_CentralBodyName_metadata = { "name" : "CentralBodyName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @CentralBodyName.setter
    def CentralBodyName(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAStateCalcRadOfApoapsis._metadata, IAgVAStateCalcRadOfApoapsis._set_CentralBodyName_metadata, inVal)

    _get_ElementType_metadata = { "name" : "ElementType",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVACalcObjectElem),) }
    @property
    def ElementType(self) -> "AgEVACalcObjectElem":
        """The element type."""
        return self._intf.get_property(IAgVAStateCalcRadOfApoapsis._metadata, IAgVAStateCalcRadOfApoapsis._get_ElementType_metadata)

    _set_ElementType_metadata = { "name" : "ElementType",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVACalcObjectElem),) }
    @ElementType.setter
    def ElementType(self, inVal:"AgEVACalcObjectElem") -> None:
        return self._intf.set_property(IAgVAStateCalcRadOfApoapsis._metadata, IAgVAStateCalcRadOfApoapsis._set_ElementType_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{2B481148-138F-44EA-9EE2-03FC7FA82CEC}", IAgVAStateCalcRadOfApoapsis)
agcls.AgTypeNameMap["IAgVAStateCalcRadOfApoapsis"] = IAgVAStateCalcRadOfApoapsis

class IAgVAStateCalcRadOfPeriapsis(object):
    """Properties for a Radius Of Periapsis calculation object."""
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{8AF6B875-ED5E-4734-B98B-17B03203FFE8}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_CentralBodyName" : 1,
                             "set_CentralBodyName" : 2,
                             "get_ElementType" : 3,
                             "set_ElementType" : 4, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAStateCalcRadOfPeriapsis._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcRadOfPeriapsis from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcRadOfPeriapsis.__dict__ and type(IAgVAStateCalcRadOfPeriapsis.__dict__[attrname]) == property:
            return IAgVAStateCalcRadOfPeriapsis.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcRadOfPeriapsis.")
    
    _get_CentralBodyName_metadata = { "name" : "CentralBodyName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def CentralBodyName(self) -> str:
        """The central body of the component."""
        return self._intf.get_property(IAgVAStateCalcRadOfPeriapsis._metadata, IAgVAStateCalcRadOfPeriapsis._get_CentralBodyName_metadata)

    _set_CentralBodyName_metadata = { "name" : "CentralBodyName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @CentralBodyName.setter
    def CentralBodyName(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAStateCalcRadOfPeriapsis._metadata, IAgVAStateCalcRadOfPeriapsis._set_CentralBodyName_metadata, inVal)

    _get_ElementType_metadata = { "name" : "ElementType",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVACalcObjectElem),) }
    @property
    def ElementType(self) -> "AgEVACalcObjectElem":
        """The element type."""
        return self._intf.get_property(IAgVAStateCalcRadOfPeriapsis._metadata, IAgVAStateCalcRadOfPeriapsis._get_ElementType_metadata)

    _set_ElementType_metadata = { "name" : "ElementType",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVACalcObjectElem),) }
    @ElementType.setter
    def ElementType(self, inVal:"AgEVACalcObjectElem") -> None:
        return self._intf.set_property(IAgVAStateCalcRadOfPeriapsis._metadata, IAgVAStateCalcRadOfPeriapsis._set_ElementType_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{8AF6B875-ED5E-4734-B98B-17B03203FFE8}", IAgVAStateCalcRadOfPeriapsis)
agcls.AgTypeNameMap["IAgVAStateCalcRadOfPeriapsis"] = IAgVAStateCalcRadOfPeriapsis

class IAgVAStateCalcSemiMajorAxis(object):
    """Properties for a Semimajor Axis calculation object."""
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{0DC03521-C37A-4D96-A820-E0D19835C7DF}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_CentralBodyName" : 1,
                             "set_CentralBodyName" : 2,
                             "get_ElementType" : 3,
                             "set_ElementType" : 4, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAStateCalcSemiMajorAxis._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcSemiMajorAxis from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcSemiMajorAxis.__dict__ and type(IAgVAStateCalcSemiMajorAxis.__dict__[attrname]) == property:
            return IAgVAStateCalcSemiMajorAxis.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcSemiMajorAxis.")
    
    _get_CentralBodyName_metadata = { "name" : "CentralBodyName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def CentralBodyName(self) -> str:
        """The central body of the component."""
        return self._intf.get_property(IAgVAStateCalcSemiMajorAxis._metadata, IAgVAStateCalcSemiMajorAxis._get_CentralBodyName_metadata)

    _set_CentralBodyName_metadata = { "name" : "CentralBodyName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @CentralBodyName.setter
    def CentralBodyName(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAStateCalcSemiMajorAxis._metadata, IAgVAStateCalcSemiMajorAxis._set_CentralBodyName_metadata, inVal)

    _get_ElementType_metadata = { "name" : "ElementType",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVACalcObjectElem),) }
    @property
    def ElementType(self) -> "AgEVACalcObjectElem":
        """The element type."""
        return self._intf.get_property(IAgVAStateCalcSemiMajorAxis._metadata, IAgVAStateCalcSemiMajorAxis._get_ElementType_metadata)

    _set_ElementType_metadata = { "name" : "ElementType",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVACalcObjectElem),) }
    @ElementType.setter
    def ElementType(self, inVal:"AgEVACalcObjectElem") -> None:
        return self._intf.set_property(IAgVAStateCalcSemiMajorAxis._metadata, IAgVAStateCalcSemiMajorAxis._set_ElementType_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{0DC03521-C37A-4D96-A820-E0D19835C7DF}", IAgVAStateCalcSemiMajorAxis)
agcls.AgTypeNameMap["IAgVAStateCalcSemiMajorAxis"] = IAgVAStateCalcSemiMajorAxis

class IAgVAStateCalcTimePastAscNode(object):
    """Properties for a Time Past Ascending Node calculation object."""
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{4ED0F733-4995-4D32-8533-D7A1801C4FBB}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_CoordSystemName" : 1,
                             "set_CoordSystemName" : 2,
                             "get_ElementType" : 3,
                             "set_ElementType" : 4, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAStateCalcTimePastAscNode._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcTimePastAscNode from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcTimePastAscNode.__dict__ and type(IAgVAStateCalcTimePastAscNode.__dict__[attrname]) == property:
            return IAgVAStateCalcTimePastAscNode.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcTimePastAscNode.")
    
    _get_CoordSystemName_metadata = { "name" : "CoordSystemName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def CoordSystemName(self) -> str:
        """The coordinate system within which the element is defined."""
        return self._intf.get_property(IAgVAStateCalcTimePastAscNode._metadata, IAgVAStateCalcTimePastAscNode._get_CoordSystemName_metadata)

    _set_CoordSystemName_metadata = { "name" : "CoordSystemName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @CoordSystemName.setter
    def CoordSystemName(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAStateCalcTimePastAscNode._metadata, IAgVAStateCalcTimePastAscNode._set_CoordSystemName_metadata, inVal)

    _get_ElementType_metadata = { "name" : "ElementType",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVACalcObjectElem),) }
    @property
    def ElementType(self) -> "AgEVACalcObjectElem":
        """The element type."""
        return self._intf.get_property(IAgVAStateCalcTimePastAscNode._metadata, IAgVAStateCalcTimePastAscNode._get_ElementType_metadata)

    _set_ElementType_metadata = { "name" : "ElementType",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVACalcObjectElem),) }
    @ElementType.setter
    def ElementType(self, inVal:"AgEVACalcObjectElem") -> None:
        return self._intf.set_property(IAgVAStateCalcTimePastAscNode._metadata, IAgVAStateCalcTimePastAscNode._set_ElementType_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{4ED0F733-4995-4D32-8533-D7A1801C4FBB}", IAgVAStateCalcTimePastAscNode)
agcls.AgTypeNameMap["IAgVAStateCalcTimePastAscNode"] = IAgVAStateCalcTimePastAscNode

class IAgVAStateCalcTimePastPeriapsis(object):
    """Properties for a Time Past Periapsis calculation object."""
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{30BCAEF0-2921-4EE5-B047-79CA370F9C83}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_CentralBodyName" : 1,
                             "set_CentralBodyName" : 2,
                             "get_ElementType" : 3,
                             "set_ElementType" : 4, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAStateCalcTimePastPeriapsis._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcTimePastPeriapsis from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcTimePastPeriapsis.__dict__ and type(IAgVAStateCalcTimePastPeriapsis.__dict__[attrname]) == property:
            return IAgVAStateCalcTimePastPeriapsis.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcTimePastPeriapsis.")
    
    _get_CentralBodyName_metadata = { "name" : "CentralBodyName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def CentralBodyName(self) -> str:
        """The central body of the component."""
        return self._intf.get_property(IAgVAStateCalcTimePastPeriapsis._metadata, IAgVAStateCalcTimePastPeriapsis._get_CentralBodyName_metadata)

    _set_CentralBodyName_metadata = { "name" : "CentralBodyName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @CentralBodyName.setter
    def CentralBodyName(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAStateCalcTimePastPeriapsis._metadata, IAgVAStateCalcTimePastPeriapsis._set_CentralBodyName_metadata, inVal)

    _get_ElementType_metadata = { "name" : "ElementType",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVACalcObjectElem),) }
    @property
    def ElementType(self) -> "AgEVACalcObjectElem":
        """The element type."""
        return self._intf.get_property(IAgVAStateCalcTimePastPeriapsis._metadata, IAgVAStateCalcTimePastPeriapsis._get_ElementType_metadata)

    _set_ElementType_metadata = { "name" : "ElementType",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVACalcObjectElem),) }
    @ElementType.setter
    def ElementType(self, inVal:"AgEVACalcObjectElem") -> None:
        return self._intf.set_property(IAgVAStateCalcTimePastPeriapsis._metadata, IAgVAStateCalcTimePastPeriapsis._set_ElementType_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{30BCAEF0-2921-4EE5-B047-79CA370F9C83}", IAgVAStateCalcTimePastPeriapsis)
agcls.AgTypeNameMap["IAgVAStateCalcTimePastPeriapsis"] = IAgVAStateCalcTimePastPeriapsis

class IAgVAStateCalcDeltaV(object):
    """Properties for a DeltaV calculation object."""
    _num_methods = 0
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{F6E77B5A-1A44-4CD0-A0BF-2991C1A33EBA}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : {  }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAStateCalcDeltaV._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcDeltaV from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcDeltaV.__dict__ and type(IAgVAStateCalcDeltaV.__dict__[attrname]) == property:
            return IAgVAStateCalcDeltaV.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcDeltaV.")
    

agcls.AgClassCatalog.add_catalog_entry("{F6E77B5A-1A44-4CD0-A0BF-2991C1A33EBA}", IAgVAStateCalcDeltaV)
agcls.AgTypeNameMap["IAgVAStateCalcDeltaV"] = IAgVAStateCalcDeltaV

class IAgVAStateCalcDeltaVSquared(object):
    """Properties for a DeltaV Squared calculation object."""
    _num_methods = 0
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{52506197-B072-4F2A-A1E6-10728D969E2A}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : {  }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAStateCalcDeltaVSquared._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcDeltaVSquared from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcDeltaVSquared.__dict__ and type(IAgVAStateCalcDeltaVSquared.__dict__[attrname]) == property:
            return IAgVAStateCalcDeltaVSquared.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcDeltaVSquared.")
    

agcls.AgClassCatalog.add_catalog_entry("{52506197-B072-4F2A-A1E6-10728D969E2A}", IAgVAStateCalcDeltaVSquared)
agcls.AgTypeNameMap["IAgVAStateCalcDeltaVSquared"] = IAgVAStateCalcDeltaVSquared

class IAgVAStateCalcMCSDeltaV(object):
    """Properties for a MCS DeltaV calculation object."""
    _num_methods = 0
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{6411CC14-1207-49C7-ACEF-31EC24908D59}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : {  }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAStateCalcMCSDeltaV._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcMCSDeltaV from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcMCSDeltaV.__dict__ and type(IAgVAStateCalcMCSDeltaV.__dict__[attrname]) == property:
            return IAgVAStateCalcMCSDeltaV.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcMCSDeltaV.")
    

agcls.AgClassCatalog.add_catalog_entry("{6411CC14-1207-49C7-ACEF-31EC24908D59}", IAgVAStateCalcMCSDeltaV)
agcls.AgTypeNameMap["IAgVAStateCalcMCSDeltaV"] = IAgVAStateCalcMCSDeltaV

class IAgVAStateCalcMCSDeltaVSquared(object):
    """Properties for a MCS DeltaV Squared calculation object."""
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{17C279CA-79C4-4076-AF85-6018DA3FAB83}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_SquaredType" : 1,
                             "set_SquaredType" : 2, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAStateCalcMCSDeltaVSquared._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcMCSDeltaVSquared from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcMCSDeltaVSquared.__dict__ and type(IAgVAStateCalcMCSDeltaVSquared.__dict__[attrname]) == property:
            return IAgVAStateCalcMCSDeltaVSquared.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcMCSDeltaVSquared.")
    
    _get_SquaredType_metadata = { "name" : "SquaredType",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVASquaredType),) }
    @property
    def SquaredType(self) -> "AgEVASquaredType":
        """Whether the value should be calculated as the sum of the squares of the maneuver Delta-Vs or the square of the sum of the maneuver Delta-Vs."""
        return self._intf.get_property(IAgVAStateCalcMCSDeltaVSquared._metadata, IAgVAStateCalcMCSDeltaVSquared._get_SquaredType_metadata)

    _set_SquaredType_metadata = { "name" : "SquaredType",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVASquaredType),) }
    @SquaredType.setter
    def SquaredType(self, inVal:"AgEVASquaredType") -> None:
        """Whether the value should be calculated as the sum of the squares of the maneuver Delta-Vs or the square of the sum of the maneuver Delta-Vs."""
        return self._intf.set_property(IAgVAStateCalcMCSDeltaVSquared._metadata, IAgVAStateCalcMCSDeltaVSquared._set_SquaredType_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{17C279CA-79C4-4076-AF85-6018DA3FAB83}", IAgVAStateCalcMCSDeltaVSquared)
agcls.AgTypeNameMap["IAgVAStateCalcMCSDeltaVSquared"] = IAgVAStateCalcMCSDeltaVSquared

class IAgVAStateCalcSequenceDeltaV(object):
    """Properties for a Sequence DeltaV calculation object."""
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{0F7BEE65-4F80-404D-AA99-1F92F88E2525}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_SequenceName" : 1,
                             "set_SequenceName" : 2, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAStateCalcSequenceDeltaV._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcSequenceDeltaV from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcSequenceDeltaV.__dict__ and type(IAgVAStateCalcSequenceDeltaV.__dict__[attrname]) == property:
            return IAgVAStateCalcSequenceDeltaV.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcSequenceDeltaV.")
    
    _get_SequenceName_metadata = { "name" : "SequenceName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def SequenceName(self) -> str:
        """The sequence whose DeltaV's are to be summed."""
        return self._intf.get_property(IAgVAStateCalcSequenceDeltaV._metadata, IAgVAStateCalcSequenceDeltaV._get_SequenceName_metadata)

    _set_SequenceName_metadata = { "name" : "SequenceName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @SequenceName.setter
    def SequenceName(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAStateCalcSequenceDeltaV._metadata, IAgVAStateCalcSequenceDeltaV._set_SequenceName_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{0F7BEE65-4F80-404D-AA99-1F92F88E2525}", IAgVAStateCalcSequenceDeltaV)
agcls.AgTypeNameMap["IAgVAStateCalcSequenceDeltaV"] = IAgVAStateCalcSequenceDeltaV

class IAgVAStateCalcSequenceDeltaVSquared(object):
    """Properties for a Sequence DeltaV Squared calculation object."""
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{D6D37B91-EDAE-4E35-865F-538C2155A239}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_SequenceName" : 1,
                             "set_SequenceName" : 2,
                             "get_SquaredType" : 3,
                             "set_SquaredType" : 4, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAStateCalcSequenceDeltaVSquared._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcSequenceDeltaVSquared from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcSequenceDeltaVSquared.__dict__ and type(IAgVAStateCalcSequenceDeltaVSquared.__dict__[attrname]) == property:
            return IAgVAStateCalcSequenceDeltaVSquared.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcSequenceDeltaVSquared.")
    
    _get_SequenceName_metadata = { "name" : "SequenceName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def SequenceName(self) -> str:
        """The sequence whose DeltaV's are to be accumulated."""
        return self._intf.get_property(IAgVAStateCalcSequenceDeltaVSquared._metadata, IAgVAStateCalcSequenceDeltaVSquared._get_SequenceName_metadata)

    _set_SequenceName_metadata = { "name" : "SequenceName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @SequenceName.setter
    def SequenceName(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAStateCalcSequenceDeltaVSquared._metadata, IAgVAStateCalcSequenceDeltaVSquared._set_SequenceName_metadata, inVal)

    _get_SquaredType_metadata = { "name" : "SquaredType",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVASquaredType),) }
    @property
    def SquaredType(self) -> "AgEVASquaredType":
        """Whether the value should be calculated as the sum of the squares of the maneuver Delta-Vs or the square of the sum of the maneuver Delta-Vs."""
        return self._intf.get_property(IAgVAStateCalcSequenceDeltaVSquared._metadata, IAgVAStateCalcSequenceDeltaVSquared._get_SquaredType_metadata)

    _set_SquaredType_metadata = { "name" : "SquaredType",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVASquaredType),) }
    @SquaredType.setter
    def SquaredType(self, inVal:"AgEVASquaredType") -> None:
        """Whether the value should be calculated as the sum of the squares of the maneuver Delta-Vs or the square of the sum of the maneuver Delta-Vs."""
        return self._intf.set_property(IAgVAStateCalcSequenceDeltaVSquared._metadata, IAgVAStateCalcSequenceDeltaVSquared._set_SquaredType_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{D6D37B91-EDAE-4E35-865F-538C2155A239}", IAgVAStateCalcSequenceDeltaVSquared)
agcls.AgTypeNameMap["IAgVAStateCalcSequenceDeltaVSquared"] = IAgVAStateCalcSequenceDeltaVSquared

class IAgVAStateCalcFuelMass(object):
    """Properties for a FuelMass calculation object."""
    _num_methods = 0
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{2707D8D8-8D1E-477D-B246-0568788FE867}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : {  }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAStateCalcFuelMass._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcFuelMass from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcFuelMass.__dict__ and type(IAgVAStateCalcFuelMass.__dict__[attrname]) == property:
            return IAgVAStateCalcFuelMass.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcFuelMass.")
    

agcls.AgClassCatalog.add_catalog_entry("{2707D8D8-8D1E-477D-B246-0568788FE867}", IAgVAStateCalcFuelMass)
agcls.AgTypeNameMap["IAgVAStateCalcFuelMass"] = IAgVAStateCalcFuelMass

class IAgVAStateCalcDensity(object):
    """Properties for a Fuel Density calculation object."""
    _num_methods = 0
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{9AE849EC-D75D-45A2-A23A-404C041BDB7B}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : {  }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAStateCalcDensity._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcDensity from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcDensity.__dict__ and type(IAgVAStateCalcDensity.__dict__[attrname]) == property:
            return IAgVAStateCalcDensity.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcDensity.")
    

agcls.AgClassCatalog.add_catalog_entry("{9AE849EC-D75D-45A2-A23A-404C041BDB7B}", IAgVAStateCalcDensity)
agcls.AgTypeNameMap["IAgVAStateCalcDensity"] = IAgVAStateCalcDensity

class IAgVAStateCalcInertialDeltaVMag(object):
    """Properties for an Inertial DeltaV Magnitude calculation object."""
    _num_methods = 0
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{206A8426-8860-4E7B-A0A1-0C1A8D4A79C5}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : {  }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAStateCalcInertialDeltaVMag._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcInertialDeltaVMag from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcInertialDeltaVMag.__dict__ and type(IAgVAStateCalcInertialDeltaVMag.__dict__[attrname]) == property:
            return IAgVAStateCalcInertialDeltaVMag.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcInertialDeltaVMag.")
    

agcls.AgClassCatalog.add_catalog_entry("{206A8426-8860-4E7B-A0A1-0C1A8D4A79C5}", IAgVAStateCalcInertialDeltaVMag)
agcls.AgTypeNameMap["IAgVAStateCalcInertialDeltaVMag"] = IAgVAStateCalcInertialDeltaVMag

class IAgVAStateCalcInertialDeltaVx(object):
    """Properties for an Inertial DeltaVx calculation object."""
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{D18A9666-512E-476E-89C0-FF6B2D3C2428}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_CoordAxesName" : 1,
                             "set_CoordAxesName" : 2, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAStateCalcInertialDeltaVx._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcInertialDeltaVx from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcInertialDeltaVx.__dict__ and type(IAgVAStateCalcInertialDeltaVx.__dict__[attrname]) == property:
            return IAgVAStateCalcInertialDeltaVx.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcInertialDeltaVx.")
    
    _get_CoordAxesName_metadata = { "name" : "CoordAxesName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def CoordAxesName(self) -> str:
        """The coordinate axes."""
        return self._intf.get_property(IAgVAStateCalcInertialDeltaVx._metadata, IAgVAStateCalcInertialDeltaVx._get_CoordAxesName_metadata)

    _set_CoordAxesName_metadata = { "name" : "CoordAxesName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @CoordAxesName.setter
    def CoordAxesName(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAStateCalcInertialDeltaVx._metadata, IAgVAStateCalcInertialDeltaVx._set_CoordAxesName_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{D18A9666-512E-476E-89C0-FF6B2D3C2428}", IAgVAStateCalcInertialDeltaVx)
agcls.AgTypeNameMap["IAgVAStateCalcInertialDeltaVx"] = IAgVAStateCalcInertialDeltaVx

class IAgVAStateCalcInertialDeltaVy(object):
    """Properties for an Inertial DeltaVy calculation object."""
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{4A5489A4-1EDC-4CD1-BF9F-EAF779ECFFD3}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_CoordAxesName" : 1,
                             "set_CoordAxesName" : 2, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAStateCalcInertialDeltaVy._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcInertialDeltaVy from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcInertialDeltaVy.__dict__ and type(IAgVAStateCalcInertialDeltaVy.__dict__[attrname]) == property:
            return IAgVAStateCalcInertialDeltaVy.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcInertialDeltaVy.")
    
    _get_CoordAxesName_metadata = { "name" : "CoordAxesName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def CoordAxesName(self) -> str:
        """The coordinate axes."""
        return self._intf.get_property(IAgVAStateCalcInertialDeltaVy._metadata, IAgVAStateCalcInertialDeltaVy._get_CoordAxesName_metadata)

    _set_CoordAxesName_metadata = { "name" : "CoordAxesName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @CoordAxesName.setter
    def CoordAxesName(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAStateCalcInertialDeltaVy._metadata, IAgVAStateCalcInertialDeltaVy._set_CoordAxesName_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{4A5489A4-1EDC-4CD1-BF9F-EAF779ECFFD3}", IAgVAStateCalcInertialDeltaVy)
agcls.AgTypeNameMap["IAgVAStateCalcInertialDeltaVy"] = IAgVAStateCalcInertialDeltaVy

class IAgVAStateCalcInertialDeltaVz(object):
    """Properties for an Inertial DeltaVz calculation object."""
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{4301E169-DEE2-411A-9DBD-06DEC30F9EBD}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_CoordAxesName" : 1,
                             "set_CoordAxesName" : 2, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAStateCalcInertialDeltaVz._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcInertialDeltaVz from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcInertialDeltaVz.__dict__ and type(IAgVAStateCalcInertialDeltaVz.__dict__[attrname]) == property:
            return IAgVAStateCalcInertialDeltaVz.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcInertialDeltaVz.")
    
    _get_CoordAxesName_metadata = { "name" : "CoordAxesName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def CoordAxesName(self) -> str:
        """The coordinate axes."""
        return self._intf.get_property(IAgVAStateCalcInertialDeltaVz._metadata, IAgVAStateCalcInertialDeltaVz._get_CoordAxesName_metadata)

    _set_CoordAxesName_metadata = { "name" : "CoordAxesName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @CoordAxesName.setter
    def CoordAxesName(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAStateCalcInertialDeltaVz._metadata, IAgVAStateCalcInertialDeltaVz._set_CoordAxesName_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{4301E169-DEE2-411A-9DBD-06DEC30F9EBD}", IAgVAStateCalcInertialDeltaVz)
agcls.AgTypeNameMap["IAgVAStateCalcInertialDeltaVz"] = IAgVAStateCalcInertialDeltaVz

class IAgVAStateCalcManeuverSpecificImpulse(object):
    """Properties for a Specific Impulse calculation object."""
    _num_methods = 0
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{4EA5927D-76E7-405C-AA5A-903C19B576DC}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : {  }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAStateCalcManeuverSpecificImpulse._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcManeuverSpecificImpulse from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcManeuverSpecificImpulse.__dict__ and type(IAgVAStateCalcManeuverSpecificImpulse.__dict__[attrname]) == property:
            return IAgVAStateCalcManeuverSpecificImpulse.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcManeuverSpecificImpulse.")
    

agcls.AgClassCatalog.add_catalog_entry("{4EA5927D-76E7-405C-AA5A-903C19B576DC}", IAgVAStateCalcManeuverSpecificImpulse)
agcls.AgTypeNameMap["IAgVAStateCalcManeuverSpecificImpulse"] = IAgVAStateCalcManeuverSpecificImpulse

class IAgVAStateCalcPressure(object):
    """Properties for a Tank Pressure calculation object."""
    _num_methods = 0
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{C37E82D4-7AA9-4BA0-92DA-1372268F63D6}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : {  }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAStateCalcPressure._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcPressure from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcPressure.__dict__ and type(IAgVAStateCalcPressure.__dict__[attrname]) == property:
            return IAgVAStateCalcPressure.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcPressure.")
    

agcls.AgClassCatalog.add_catalog_entry("{C37E82D4-7AA9-4BA0-92DA-1372268F63D6}", IAgVAStateCalcPressure)
agcls.AgTypeNameMap["IAgVAStateCalcPressure"] = IAgVAStateCalcPressure

class IAgVAStateCalcTemperature(object):
    """Properties for a Tank Temperature calculation object."""
    _num_methods = 0
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{E0EC7C19-B337-4BFD-9A8B-30A88784D697}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : {  }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAStateCalcTemperature._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcTemperature from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcTemperature.__dict__ and type(IAgVAStateCalcTemperature.__dict__[attrname]) == property:
            return IAgVAStateCalcTemperature.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcTemperature.")
    

agcls.AgClassCatalog.add_catalog_entry("{E0EC7C19-B337-4BFD-9A8B-30A88784D697}", IAgVAStateCalcTemperature)
agcls.AgTypeNameMap["IAgVAStateCalcTemperature"] = IAgVAStateCalcTemperature

class IAgVAStateCalcVectorX(object):
    """Properties for a Vector X calculation object."""
    _num_methods = 8
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{ADD32358-B55C-4758-BBB9-391728F24BB8}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_CoordAxesName" : 1,
                             "set_CoordAxesName" : 2,
                             "get_VectorName" : 3,
                             "set_VectorName" : 4,
                             "get_UnitDimension" : 5,
                             "set_UnitDimension" : 6,
                             "get_Normalize" : 7,
                             "set_Normalize" : 8, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAStateCalcVectorX._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcVectorX from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcVectorX.__dict__ and type(IAgVAStateCalcVectorX.__dict__[attrname]) == property:
            return IAgVAStateCalcVectorX.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcVectorX.")
    
    _get_CoordAxesName_metadata = { "name" : "CoordAxesName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def CoordAxesName(self) -> str:
        """The coordinate axes."""
        return self._intf.get_property(IAgVAStateCalcVectorX._metadata, IAgVAStateCalcVectorX._get_CoordAxesName_metadata)

    _set_CoordAxesName_metadata = { "name" : "CoordAxesName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @CoordAxesName.setter
    def CoordAxesName(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAStateCalcVectorX._metadata, IAgVAStateCalcVectorX._set_CoordAxesName_metadata, inVal)

    _get_VectorName_metadata = { "name" : "VectorName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def VectorName(self) -> str:
        """The vector."""
        return self._intf.get_property(IAgVAStateCalcVectorX._metadata, IAgVAStateCalcVectorX._get_VectorName_metadata)

    _set_VectorName_metadata = { "name" : "VectorName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @VectorName.setter
    def VectorName(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAStateCalcVectorX._metadata, IAgVAStateCalcVectorX._set_VectorName_metadata, inVal)

    _get_UnitDimension_metadata = { "name" : "UnitDimension",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def UnitDimension(self) -> str:
        """The unit dimension."""
        return self._intf.get_property(IAgVAStateCalcVectorX._metadata, IAgVAStateCalcVectorX._get_UnitDimension_metadata)

    _set_UnitDimension_metadata = { "name" : "UnitDimension",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @UnitDimension.setter
    def UnitDimension(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAStateCalcVectorX._metadata, IAgVAStateCalcVectorX._set_UnitDimension_metadata, inVal)

    _get_Normalize_metadata = { "name" : "Normalize",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def Normalize(self) -> bool:
        """If true, return the normalized magnitude."""
        return self._intf.get_property(IAgVAStateCalcVectorX._metadata, IAgVAStateCalcVectorX._get_Normalize_metadata)

    _set_Normalize_metadata = { "name" : "Normalize",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @Normalize.setter
    def Normalize(self, newVal:bool) -> None:
        return self._intf.set_property(IAgVAStateCalcVectorX._metadata, IAgVAStateCalcVectorX._set_Normalize_metadata, newVal)


agcls.AgClassCatalog.add_catalog_entry("{ADD32358-B55C-4758-BBB9-391728F24BB8}", IAgVAStateCalcVectorX)
agcls.AgTypeNameMap["IAgVAStateCalcVectorX"] = IAgVAStateCalcVectorX

class IAgVAStateCalcVectorY(object):
    """Properties for a Vector Y calculation object."""
    _num_methods = 8
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{BCF6F352-A2ED-491B-9961-5A164D6B5388}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_CoordAxesName" : 1,
                             "set_CoordAxesName" : 2,
                             "get_VectorName" : 3,
                             "set_VectorName" : 4,
                             "get_UnitDimension" : 5,
                             "set_UnitDimension" : 6,
                             "get_Normalize" : 7,
                             "set_Normalize" : 8, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAStateCalcVectorY._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcVectorY from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcVectorY.__dict__ and type(IAgVAStateCalcVectorY.__dict__[attrname]) == property:
            return IAgVAStateCalcVectorY.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcVectorY.")
    
    _get_CoordAxesName_metadata = { "name" : "CoordAxesName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def CoordAxesName(self) -> str:
        """The coordinate axes."""
        return self._intf.get_property(IAgVAStateCalcVectorY._metadata, IAgVAStateCalcVectorY._get_CoordAxesName_metadata)

    _set_CoordAxesName_metadata = { "name" : "CoordAxesName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @CoordAxesName.setter
    def CoordAxesName(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAStateCalcVectorY._metadata, IAgVAStateCalcVectorY._set_CoordAxesName_metadata, inVal)

    _get_VectorName_metadata = { "name" : "VectorName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def VectorName(self) -> str:
        """The vector."""
        return self._intf.get_property(IAgVAStateCalcVectorY._metadata, IAgVAStateCalcVectorY._get_VectorName_metadata)

    _set_VectorName_metadata = { "name" : "VectorName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @VectorName.setter
    def VectorName(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAStateCalcVectorY._metadata, IAgVAStateCalcVectorY._set_VectorName_metadata, inVal)

    _get_UnitDimension_metadata = { "name" : "UnitDimension",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def UnitDimension(self) -> str:
        """The unit dimension."""
        return self._intf.get_property(IAgVAStateCalcVectorY._metadata, IAgVAStateCalcVectorY._get_UnitDimension_metadata)

    _set_UnitDimension_metadata = { "name" : "UnitDimension",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @UnitDimension.setter
    def UnitDimension(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAStateCalcVectorY._metadata, IAgVAStateCalcVectorY._set_UnitDimension_metadata, inVal)

    _get_Normalize_metadata = { "name" : "Normalize",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def Normalize(self) -> bool:
        """If true, return the normalized magnitude."""
        return self._intf.get_property(IAgVAStateCalcVectorY._metadata, IAgVAStateCalcVectorY._get_Normalize_metadata)

    _set_Normalize_metadata = { "name" : "Normalize",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @Normalize.setter
    def Normalize(self, newVal:bool) -> None:
        return self._intf.set_property(IAgVAStateCalcVectorY._metadata, IAgVAStateCalcVectorY._set_Normalize_metadata, newVal)


agcls.AgClassCatalog.add_catalog_entry("{BCF6F352-A2ED-491B-9961-5A164D6B5388}", IAgVAStateCalcVectorY)
agcls.AgTypeNameMap["IAgVAStateCalcVectorY"] = IAgVAStateCalcVectorY

class IAgVAStateCalcVectorZ(object):
    """Properties for a Vector Z calculation object."""
    _num_methods = 8
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{7F7E2A8A-7A33-48E3-A622-1A23E2672102}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_CoordAxesName" : 1,
                             "set_CoordAxesName" : 2,
                             "get_VectorName" : 3,
                             "set_VectorName" : 4,
                             "get_UnitDimension" : 5,
                             "set_UnitDimension" : 6,
                             "get_Normalize" : 7,
                             "set_Normalize" : 8, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAStateCalcVectorZ._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcVectorZ from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcVectorZ.__dict__ and type(IAgVAStateCalcVectorZ.__dict__[attrname]) == property:
            return IAgVAStateCalcVectorZ.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcVectorZ.")
    
    _get_CoordAxesName_metadata = { "name" : "CoordAxesName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def CoordAxesName(self) -> str:
        """The coordinate axes."""
        return self._intf.get_property(IAgVAStateCalcVectorZ._metadata, IAgVAStateCalcVectorZ._get_CoordAxesName_metadata)

    _set_CoordAxesName_metadata = { "name" : "CoordAxesName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @CoordAxesName.setter
    def CoordAxesName(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAStateCalcVectorZ._metadata, IAgVAStateCalcVectorZ._set_CoordAxesName_metadata, inVal)

    _get_VectorName_metadata = { "name" : "VectorName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def VectorName(self) -> str:
        """The vector."""
        return self._intf.get_property(IAgVAStateCalcVectorZ._metadata, IAgVAStateCalcVectorZ._get_VectorName_metadata)

    _set_VectorName_metadata = { "name" : "VectorName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @VectorName.setter
    def VectorName(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAStateCalcVectorZ._metadata, IAgVAStateCalcVectorZ._set_VectorName_metadata, inVal)

    _get_UnitDimension_metadata = { "name" : "UnitDimension",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def UnitDimension(self) -> str:
        """The unit dimension."""
        return self._intf.get_property(IAgVAStateCalcVectorZ._metadata, IAgVAStateCalcVectorZ._get_UnitDimension_metadata)

    _set_UnitDimension_metadata = { "name" : "UnitDimension",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @UnitDimension.setter
    def UnitDimension(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAStateCalcVectorZ._metadata, IAgVAStateCalcVectorZ._set_UnitDimension_metadata, inVal)

    _get_Normalize_metadata = { "name" : "Normalize",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def Normalize(self) -> bool:
        """If true, return the normalized magnitude."""
        return self._intf.get_property(IAgVAStateCalcVectorZ._metadata, IAgVAStateCalcVectorZ._get_Normalize_metadata)

    _set_Normalize_metadata = { "name" : "Normalize",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @Normalize.setter
    def Normalize(self, newVal:bool) -> None:
        return self._intf.set_property(IAgVAStateCalcVectorZ._metadata, IAgVAStateCalcVectorZ._set_Normalize_metadata, newVal)


agcls.AgClassCatalog.add_catalog_entry("{7F7E2A8A-7A33-48E3-A622-1A23E2672102}", IAgVAStateCalcVectorZ)
agcls.AgTypeNameMap["IAgVAStateCalcVectorZ"] = IAgVAStateCalcVectorZ

class IAgVAStateCalcMass(object):
    """Properties for a Total Mass calculation object."""
    _num_methods = 0
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{1C324BE8-C857-42F2-AFA9-88AD686E53CE}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : {  }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAStateCalcMass._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcMass from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcMass.__dict__ and type(IAgVAStateCalcMass.__dict__[attrname]) == property:
            return IAgVAStateCalcMass.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcMass.")
    

agcls.AgClassCatalog.add_catalog_entry("{1C324BE8-C857-42F2-AFA9-88AD686E53CE}", IAgVAStateCalcMass)
agcls.AgTypeNameMap["IAgVAStateCalcMass"] = IAgVAStateCalcMass

class IAgVAStateCalcManeuverTotalMassFlowRate(object):
    """Properties for a Total Mass Flow Rate calculation object."""
    _num_methods = 0
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{DFD18CDB-7478-4CB0-86B3-46870753D290}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : {  }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAStateCalcManeuverTotalMassFlowRate._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcManeuverTotalMassFlowRate from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcManeuverTotalMassFlowRate.__dict__ and type(IAgVAStateCalcManeuverTotalMassFlowRate.__dict__[attrname]) == property:
            return IAgVAStateCalcManeuverTotalMassFlowRate.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcManeuverTotalMassFlowRate.")
    

agcls.AgClassCatalog.add_catalog_entry("{DFD18CDB-7478-4CB0-86B3-46870753D290}", IAgVAStateCalcManeuverTotalMassFlowRate)
agcls.AgTypeNameMap["IAgVAStateCalcManeuverTotalMassFlowRate"] = IAgVAStateCalcManeuverTotalMassFlowRate

class IAgVAStateCalcAbsoluteValue(object):
    """Properties for an Absolute Value calculation object."""
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{214DD350-1B42-48C1-9720-66D109A5376B}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_CalcObjectName" : 1,
                             "set_CalcObjectName" : 2, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAStateCalcAbsoluteValue._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcAbsoluteValue from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcAbsoluteValue.__dict__ and type(IAgVAStateCalcAbsoluteValue.__dict__[attrname]) == property:
            return IAgVAStateCalcAbsoluteValue.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcAbsoluteValue.")
    
    _get_CalcObjectName_metadata = { "name" : "CalcObjectName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def CalcObjectName(self) -> str:
        """The calculation object."""
        return self._intf.get_property(IAgVAStateCalcAbsoluteValue._metadata, IAgVAStateCalcAbsoluteValue._get_CalcObjectName_metadata)

    _set_CalcObjectName_metadata = { "name" : "CalcObjectName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @CalcObjectName.setter
    def CalcObjectName(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAStateCalcAbsoluteValue._metadata, IAgVAStateCalcAbsoluteValue._set_CalcObjectName_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{214DD350-1B42-48C1-9720-66D109A5376B}", IAgVAStateCalcAbsoluteValue)
agcls.AgTypeNameMap["IAgVAStateCalcAbsoluteValue"] = IAgVAStateCalcAbsoluteValue

class IAgVAStateCalcDifference(object):
    """Properties for a Difference calculation object."""
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{4236F99F-8B4C-495E-BC83-41C4B0F1630E}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_CalcObjectName" : 1,
                             "set_CalcObjectName" : 2,
                             "get_DifferenceOrder" : 3,
                             "set_DifferenceOrder" : 4, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAStateCalcDifference._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcDifference from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcDifference.__dict__ and type(IAgVAStateCalcDifference.__dict__[attrname]) == property:
            return IAgVAStateCalcDifference.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcDifference.")
    
    _get_CalcObjectName_metadata = { "name" : "CalcObjectName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def CalcObjectName(self) -> str:
        """The calculation object."""
        return self._intf.get_property(IAgVAStateCalcDifference._metadata, IAgVAStateCalcDifference._get_CalcObjectName_metadata)

    _set_CalcObjectName_metadata = { "name" : "CalcObjectName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @CalcObjectName.setter
    def CalcObjectName(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAStateCalcDifference._metadata, IAgVAStateCalcDifference._set_CalcObjectName_metadata, inVal)

    _get_DifferenceOrder_metadata = { "name" : "DifferenceOrder",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVADifferenceOrder),) }
    @property
    def DifferenceOrder(self) -> "AgEVADifferenceOrder":
        """The order of the difference calculation."""
        return self._intf.get_property(IAgVAStateCalcDifference._metadata, IAgVAStateCalcDifference._get_DifferenceOrder_metadata)

    _set_DifferenceOrder_metadata = { "name" : "DifferenceOrder",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVADifferenceOrder),) }
    @DifferenceOrder.setter
    def DifferenceOrder(self, inVal:"AgEVADifferenceOrder") -> None:
        return self._intf.set_property(IAgVAStateCalcDifference._metadata, IAgVAStateCalcDifference._set_DifferenceOrder_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{4236F99F-8B4C-495E-BC83-41C4B0F1630E}", IAgVAStateCalcDifference)
agcls.AgTypeNameMap["IAgVAStateCalcDifference"] = IAgVAStateCalcDifference

class IAgVAStateCalcDifferenceOtherSegment(object):
    """Properties for a Difference Across Segments calculation object."""
    _num_methods = 8
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{E5A6D40B-34F4-4325-AC8F-EE183AC7BA96}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_CalcObjectName" : 1,
                             "set_CalcObjectName" : 2,
                             "get_OtherSegmentName" : 3,
                             "set_OtherSegmentName" : 4,
                             "get_SegmentStateToUse" : 5,
                             "set_SegmentStateToUse" : 6,
                             "get_DifferenceOrder" : 7,
                             "set_DifferenceOrder" : 8, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAStateCalcDifferenceOtherSegment._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcDifferenceOtherSegment from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcDifferenceOtherSegment.__dict__ and type(IAgVAStateCalcDifferenceOtherSegment.__dict__[attrname]) == property:
            return IAgVAStateCalcDifferenceOtherSegment.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcDifferenceOtherSegment.")
    
    _get_CalcObjectName_metadata = { "name" : "CalcObjectName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def CalcObjectName(self) -> str:
        """The calculation object."""
        return self._intf.get_property(IAgVAStateCalcDifferenceOtherSegment._metadata, IAgVAStateCalcDifferenceOtherSegment._get_CalcObjectName_metadata)

    _set_CalcObjectName_metadata = { "name" : "CalcObjectName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @CalcObjectName.setter
    def CalcObjectName(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAStateCalcDifferenceOtherSegment._metadata, IAgVAStateCalcDifferenceOtherSegment._set_CalcObjectName_metadata, inVal)

    _get_OtherSegmentName_metadata = { "name" : "OtherSegmentName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def OtherSegmentName(self) -> str:
        """The segment to be compared against."""
        return self._intf.get_property(IAgVAStateCalcDifferenceOtherSegment._metadata, IAgVAStateCalcDifferenceOtherSegment._get_OtherSegmentName_metadata)

    _set_OtherSegmentName_metadata = { "name" : "OtherSegmentName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @OtherSegmentName.setter
    def OtherSegmentName(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAStateCalcDifferenceOtherSegment._metadata, IAgVAStateCalcDifferenceOtherSegment._set_OtherSegmentName_metadata, inVal)

    _get_SegmentStateToUse_metadata = { "name" : "SegmentStateToUse",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVASegmentState),) }
    @property
    def SegmentStateToUse(self) -> "AgEVASegmentState":
        """The segment state to use in the calculation."""
        return self._intf.get_property(IAgVAStateCalcDifferenceOtherSegment._metadata, IAgVAStateCalcDifferenceOtherSegment._get_SegmentStateToUse_metadata)

    _set_SegmentStateToUse_metadata = { "name" : "SegmentStateToUse",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVASegmentState),) }
    @SegmentStateToUse.setter
    def SegmentStateToUse(self, inVal:"AgEVASegmentState") -> None:
        return self._intf.set_property(IAgVAStateCalcDifferenceOtherSegment._metadata, IAgVAStateCalcDifferenceOtherSegment._set_SegmentStateToUse_metadata, inVal)

    _get_DifferenceOrder_metadata = { "name" : "DifferenceOrder",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVASegmentDifferenceOrder),) }
    @property
    def DifferenceOrder(self) -> "AgEVASegmentDifferenceOrder":
        """The order of the difference calculation."""
        return self._intf.get_property(IAgVAStateCalcDifferenceOtherSegment._metadata, IAgVAStateCalcDifferenceOtherSegment._get_DifferenceOrder_metadata)

    _set_DifferenceOrder_metadata = { "name" : "DifferenceOrder",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVASegmentDifferenceOrder),) }
    @DifferenceOrder.setter
    def DifferenceOrder(self, inVal:"AgEVASegmentDifferenceOrder") -> None:
        return self._intf.set_property(IAgVAStateCalcDifferenceOtherSegment._metadata, IAgVAStateCalcDifferenceOtherSegment._set_DifferenceOrder_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{E5A6D40B-34F4-4325-AC8F-EE183AC7BA96}", IAgVAStateCalcDifferenceOtherSegment)
agcls.AgTypeNameMap["IAgVAStateCalcDifferenceOtherSegment"] = IAgVAStateCalcDifferenceOtherSegment

class IAgVAStateCalcPosDifferenceOtherSegment(object):
    """Properties for a Position Difference Across Segments calculation object."""
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{168CD10A-F726-450F-A63F-E00A85FDEF87}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_OtherSegmentName" : 1,
                             "set_OtherSegmentName" : 2,
                             "get_SegmentStateToUse" : 3,
                             "set_SegmentStateToUse" : 4, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAStateCalcPosDifferenceOtherSegment._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcPosDifferenceOtherSegment from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcPosDifferenceOtherSegment.__dict__ and type(IAgVAStateCalcPosDifferenceOtherSegment.__dict__[attrname]) == property:
            return IAgVAStateCalcPosDifferenceOtherSegment.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcPosDifferenceOtherSegment.")
    
    _get_OtherSegmentName_metadata = { "name" : "OtherSegmentName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def OtherSegmentName(self) -> str:
        """The segment to be compared against."""
        return self._intf.get_property(IAgVAStateCalcPosDifferenceOtherSegment._metadata, IAgVAStateCalcPosDifferenceOtherSegment._get_OtherSegmentName_metadata)

    _set_OtherSegmentName_metadata = { "name" : "OtherSegmentName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @OtherSegmentName.setter
    def OtherSegmentName(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAStateCalcPosDifferenceOtherSegment._metadata, IAgVAStateCalcPosDifferenceOtherSegment._set_OtherSegmentName_metadata, inVal)

    _get_SegmentStateToUse_metadata = { "name" : "SegmentStateToUse",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVASegmentState),) }
    @property
    def SegmentStateToUse(self) -> "AgEVASegmentState":
        """The segment state to use in the calculation."""
        return self._intf.get_property(IAgVAStateCalcPosDifferenceOtherSegment._metadata, IAgVAStateCalcPosDifferenceOtherSegment._get_SegmentStateToUse_metadata)

    _set_SegmentStateToUse_metadata = { "name" : "SegmentStateToUse",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVASegmentState),) }
    @SegmentStateToUse.setter
    def SegmentStateToUse(self, inVal:"AgEVASegmentState") -> None:
        return self._intf.set_property(IAgVAStateCalcPosDifferenceOtherSegment._metadata, IAgVAStateCalcPosDifferenceOtherSegment._set_SegmentStateToUse_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{168CD10A-F726-450F-A63F-E00A85FDEF87}", IAgVAStateCalcPosDifferenceOtherSegment)
agcls.AgTypeNameMap["IAgVAStateCalcPosDifferenceOtherSegment"] = IAgVAStateCalcPosDifferenceOtherSegment

class IAgVAStateCalcVelDifferenceOtherSegment(object):
    """Properties for a Velocity Difference Across Segments calculation object."""
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{9BE8161D-7D1A-4FF6-8B63-C160E22844D1}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_OtherSegmentName" : 1,
                             "set_OtherSegmentName" : 2,
                             "get_SegmentStateToUse" : 3,
                             "set_SegmentStateToUse" : 4, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAStateCalcVelDifferenceOtherSegment._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcVelDifferenceOtherSegment from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcVelDifferenceOtherSegment.__dict__ and type(IAgVAStateCalcVelDifferenceOtherSegment.__dict__[attrname]) == property:
            return IAgVAStateCalcVelDifferenceOtherSegment.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcVelDifferenceOtherSegment.")
    
    _get_OtherSegmentName_metadata = { "name" : "OtherSegmentName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def OtherSegmentName(self) -> str:
        """The segment to be compared against."""
        return self._intf.get_property(IAgVAStateCalcVelDifferenceOtherSegment._metadata, IAgVAStateCalcVelDifferenceOtherSegment._get_OtherSegmentName_metadata)

    _set_OtherSegmentName_metadata = { "name" : "OtherSegmentName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @OtherSegmentName.setter
    def OtherSegmentName(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAStateCalcVelDifferenceOtherSegment._metadata, IAgVAStateCalcVelDifferenceOtherSegment._set_OtherSegmentName_metadata, inVal)

    _get_SegmentStateToUse_metadata = { "name" : "SegmentStateToUse",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVASegmentState),) }
    @property
    def SegmentStateToUse(self) -> "AgEVASegmentState":
        """The segment state to use in the calculation."""
        return self._intf.get_property(IAgVAStateCalcVelDifferenceOtherSegment._metadata, IAgVAStateCalcVelDifferenceOtherSegment._get_SegmentStateToUse_metadata)

    _set_SegmentStateToUse_metadata = { "name" : "SegmentStateToUse",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVASegmentState),) }
    @SegmentStateToUse.setter
    def SegmentStateToUse(self, inVal:"AgEVASegmentState") -> None:
        return self._intf.set_property(IAgVAStateCalcVelDifferenceOtherSegment._metadata, IAgVAStateCalcVelDifferenceOtherSegment._set_SegmentStateToUse_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{9BE8161D-7D1A-4FF6-8B63-C160E22844D1}", IAgVAStateCalcVelDifferenceOtherSegment)
agcls.AgTypeNameMap["IAgVAStateCalcVelDifferenceOtherSegment"] = IAgVAStateCalcVelDifferenceOtherSegment

class IAgVAStateCalcPosVelDifferenceOtherSegment(object):
    """Properties for a Position and Velocity Difference Across Segments calculation object."""
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{58BA297D-0E89-46C4-9C9B-E8E7EA2B23AC}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_OtherSegmentName" : 1,
                             "set_OtherSegmentName" : 2,
                             "get_SegmentStateToUse" : 3,
                             "set_SegmentStateToUse" : 4, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAStateCalcPosVelDifferenceOtherSegment._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcPosVelDifferenceOtherSegment from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcPosVelDifferenceOtherSegment.__dict__ and type(IAgVAStateCalcPosVelDifferenceOtherSegment.__dict__[attrname]) == property:
            return IAgVAStateCalcPosVelDifferenceOtherSegment.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcPosVelDifferenceOtherSegment.")
    
    _get_OtherSegmentName_metadata = { "name" : "OtherSegmentName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def OtherSegmentName(self) -> str:
        """The segment to be compared against."""
        return self._intf.get_property(IAgVAStateCalcPosVelDifferenceOtherSegment._metadata, IAgVAStateCalcPosVelDifferenceOtherSegment._get_OtherSegmentName_metadata)

    _set_OtherSegmentName_metadata = { "name" : "OtherSegmentName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @OtherSegmentName.setter
    def OtherSegmentName(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAStateCalcPosVelDifferenceOtherSegment._metadata, IAgVAStateCalcPosVelDifferenceOtherSegment._set_OtherSegmentName_metadata, inVal)

    _get_SegmentStateToUse_metadata = { "name" : "SegmentStateToUse",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVASegmentState),) }
    @property
    def SegmentStateToUse(self) -> "AgEVASegmentState":
        """The segment state to use in the calculation."""
        return self._intf.get_property(IAgVAStateCalcPosVelDifferenceOtherSegment._metadata, IAgVAStateCalcPosVelDifferenceOtherSegment._get_SegmentStateToUse_metadata)

    _set_SegmentStateToUse_metadata = { "name" : "SegmentStateToUse",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVASegmentState),) }
    @SegmentStateToUse.setter
    def SegmentStateToUse(self, inVal:"AgEVASegmentState") -> None:
        return self._intf.set_property(IAgVAStateCalcPosVelDifferenceOtherSegment._metadata, IAgVAStateCalcPosVelDifferenceOtherSegment._set_SegmentStateToUse_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{58BA297D-0E89-46C4-9C9B-E8E7EA2B23AC}", IAgVAStateCalcPosVelDifferenceOtherSegment)
agcls.AgTypeNameMap["IAgVAStateCalcPosVelDifferenceOtherSegment"] = IAgVAStateCalcPosVelDifferenceOtherSegment

class IAgVAStateCalcValueAtSegment(object):
    """Properties for a Value At Segment calculation object."""
    _num_methods = 6
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{950DEE79-D37E-4EE5-AB69-6E145AAFB9AC}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_CalcObjectName" : 1,
                             "set_CalcObjectName" : 2,
                             "get_OtherSegmentName" : 3,
                             "set_OtherSegmentName" : 4,
                             "get_SegmentStateToUse" : 5,
                             "set_SegmentStateToUse" : 6, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAStateCalcValueAtSegment._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcValueAtSegment from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcValueAtSegment.__dict__ and type(IAgVAStateCalcValueAtSegment.__dict__[attrname]) == property:
            return IAgVAStateCalcValueAtSegment.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcValueAtSegment.")
    
    _get_CalcObjectName_metadata = { "name" : "CalcObjectName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def CalcObjectName(self) -> str:
        """The calculation object."""
        return self._intf.get_property(IAgVAStateCalcValueAtSegment._metadata, IAgVAStateCalcValueAtSegment._get_CalcObjectName_metadata)

    _set_CalcObjectName_metadata = { "name" : "CalcObjectName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @CalcObjectName.setter
    def CalcObjectName(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAStateCalcValueAtSegment._metadata, IAgVAStateCalcValueAtSegment._set_CalcObjectName_metadata, inVal)

    _get_OtherSegmentName_metadata = { "name" : "OtherSegmentName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def OtherSegmentName(self) -> str:
        """The segment to be compared against."""
        return self._intf.get_property(IAgVAStateCalcValueAtSegment._metadata, IAgVAStateCalcValueAtSegment._get_OtherSegmentName_metadata)

    _set_OtherSegmentName_metadata = { "name" : "OtherSegmentName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @OtherSegmentName.setter
    def OtherSegmentName(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAStateCalcValueAtSegment._metadata, IAgVAStateCalcValueAtSegment._set_OtherSegmentName_metadata, inVal)

    _get_SegmentStateToUse_metadata = { "name" : "SegmentStateToUse",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVASegmentState),) }
    @property
    def SegmentStateToUse(self) -> "AgEVASegmentState":
        """The segment state to use in the calculation."""
        return self._intf.get_property(IAgVAStateCalcValueAtSegment._metadata, IAgVAStateCalcValueAtSegment._get_SegmentStateToUse_metadata)

    _set_SegmentStateToUse_metadata = { "name" : "SegmentStateToUse",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVASegmentState),) }
    @SegmentStateToUse.setter
    def SegmentStateToUse(self, inVal:"AgEVASegmentState") -> None:
        return self._intf.set_property(IAgVAStateCalcValueAtSegment._metadata, IAgVAStateCalcValueAtSegment._set_SegmentStateToUse_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{950DEE79-D37E-4EE5-AB69-6E145AAFB9AC}", IAgVAStateCalcValueAtSegment)
agcls.AgTypeNameMap["IAgVAStateCalcValueAtSegment"] = IAgVAStateCalcValueAtSegment

class IAgVAStateCalcMaxValue(object):
    """Properties for a Maximum Value calculation object."""
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{A7B9EBBB-D87A-4F04-8DE3-E7812F322B66}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_CalcObjectName" : 1,
                             "set_CalcObjectName" : 2, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAStateCalcMaxValue._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcMaxValue from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcMaxValue.__dict__ and type(IAgVAStateCalcMaxValue.__dict__[attrname]) == property:
            return IAgVAStateCalcMaxValue.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcMaxValue.")
    
    _get_CalcObjectName_metadata = { "name" : "CalcObjectName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def CalcObjectName(self) -> str:
        """The calculation  object."""
        return self._intf.get_property(IAgVAStateCalcMaxValue._metadata, IAgVAStateCalcMaxValue._get_CalcObjectName_metadata)

    _set_CalcObjectName_metadata = { "name" : "CalcObjectName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @CalcObjectName.setter
    def CalcObjectName(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAStateCalcMaxValue._metadata, IAgVAStateCalcMaxValue._set_CalcObjectName_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{A7B9EBBB-D87A-4F04-8DE3-E7812F322B66}", IAgVAStateCalcMaxValue)
agcls.AgTypeNameMap["IAgVAStateCalcMaxValue"] = IAgVAStateCalcMaxValue

class IAgVAStateCalcMinValue(object):
    """Properties for a Minimum Value calculation object."""
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{22B15669-D363-4C73-87AE-424E1DF37ABA}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_CalcObjectName" : 1,
                             "set_CalcObjectName" : 2, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAStateCalcMinValue._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcMinValue from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcMinValue.__dict__ and type(IAgVAStateCalcMinValue.__dict__[attrname]) == property:
            return IAgVAStateCalcMinValue.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcMinValue.")
    
    _get_CalcObjectName_metadata = { "name" : "CalcObjectName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def CalcObjectName(self) -> str:
        """The calculation  object."""
        return self._intf.get_property(IAgVAStateCalcMinValue._metadata, IAgVAStateCalcMinValue._get_CalcObjectName_metadata)

    _set_CalcObjectName_metadata = { "name" : "CalcObjectName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @CalcObjectName.setter
    def CalcObjectName(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAStateCalcMinValue._metadata, IAgVAStateCalcMinValue._set_CalcObjectName_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{22B15669-D363-4C73-87AE-424E1DF37ABA}", IAgVAStateCalcMinValue)
agcls.AgTypeNameMap["IAgVAStateCalcMinValue"] = IAgVAStateCalcMinValue

class IAgVAStateCalcMeanValue(object):
    """Properties for a Mean Value calculation object."""
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{7523BA0F-0B19-4660-8785-D9C23F29CB1C}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_CalcObjectName" : 1,
                             "set_CalcObjectName" : 2, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAStateCalcMeanValue._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcMeanValue from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcMeanValue.__dict__ and type(IAgVAStateCalcMeanValue.__dict__[attrname]) == property:
            return IAgVAStateCalcMeanValue.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcMeanValue.")
    
    _get_CalcObjectName_metadata = { "name" : "CalcObjectName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def CalcObjectName(self) -> str:
        """The calculation  object."""
        return self._intf.get_property(IAgVAStateCalcMeanValue._metadata, IAgVAStateCalcMeanValue._get_CalcObjectName_metadata)

    _set_CalcObjectName_metadata = { "name" : "CalcObjectName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @CalcObjectName.setter
    def CalcObjectName(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAStateCalcMeanValue._metadata, IAgVAStateCalcMeanValue._set_CalcObjectName_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{7523BA0F-0B19-4660-8785-D9C23F29CB1C}", IAgVAStateCalcMeanValue)
agcls.AgTypeNameMap["IAgVAStateCalcMeanValue"] = IAgVAStateCalcMeanValue

class IAgVAStateCalcMedianValue(object):
    """Properties for a Median Value calculation object."""
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{3B7D51C9-5395-4AAA-828D-2AFF5CAB5676}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_CalcObjectName" : 1,
                             "set_CalcObjectName" : 2, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAStateCalcMedianValue._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcMedianValue from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcMedianValue.__dict__ and type(IAgVAStateCalcMedianValue.__dict__[attrname]) == property:
            return IAgVAStateCalcMedianValue.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcMedianValue.")
    
    _get_CalcObjectName_metadata = { "name" : "CalcObjectName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def CalcObjectName(self) -> str:
        """The calculation  object."""
        return self._intf.get_property(IAgVAStateCalcMedianValue._metadata, IAgVAStateCalcMedianValue._get_CalcObjectName_metadata)

    _set_CalcObjectName_metadata = { "name" : "CalcObjectName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @CalcObjectName.setter
    def CalcObjectName(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAStateCalcMedianValue._metadata, IAgVAStateCalcMedianValue._set_CalcObjectName_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{3B7D51C9-5395-4AAA-828D-2AFF5CAB5676}", IAgVAStateCalcMedianValue)
agcls.AgTypeNameMap["IAgVAStateCalcMedianValue"] = IAgVAStateCalcMedianValue

class IAgVAStateCalcStandardDeviation(object):
    """Properties for a Standard Deviation calculation object."""
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{41847821-7A1E-46E9-AC78-B50A3D1D1500}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_CalcObjectName" : 1,
                             "set_CalcObjectName" : 2, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAStateCalcStandardDeviation._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcStandardDeviation from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcStandardDeviation.__dict__ and type(IAgVAStateCalcStandardDeviation.__dict__[attrname]) == property:
            return IAgVAStateCalcStandardDeviation.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcStandardDeviation.")
    
    _get_CalcObjectName_metadata = { "name" : "CalcObjectName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def CalcObjectName(self) -> str:
        """The calculation  object."""
        return self._intf.get_property(IAgVAStateCalcStandardDeviation._metadata, IAgVAStateCalcStandardDeviation._get_CalcObjectName_metadata)

    _set_CalcObjectName_metadata = { "name" : "CalcObjectName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @CalcObjectName.setter
    def CalcObjectName(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAStateCalcStandardDeviation._metadata, IAgVAStateCalcStandardDeviation._set_CalcObjectName_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{41847821-7A1E-46E9-AC78-B50A3D1D1500}", IAgVAStateCalcStandardDeviation)
agcls.AgTypeNameMap["IAgVAStateCalcStandardDeviation"] = IAgVAStateCalcStandardDeviation

class IAgVAStateCalcNegative(object):
    """Properties for a Negative calculation object."""
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{AE894289-670C-4C3F-8EAB-ABD6056919F2}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_CalcObjectName" : 1,
                             "set_CalcObjectName" : 2, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAStateCalcNegative._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcNegative from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcNegative.__dict__ and type(IAgVAStateCalcNegative.__dict__[attrname]) == property:
            return IAgVAStateCalcNegative.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcNegative.")
    
    _get_CalcObjectName_metadata = { "name" : "CalcObjectName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def CalcObjectName(self) -> str:
        """The calculation  object."""
        return self._intf.get_property(IAgVAStateCalcNegative._metadata, IAgVAStateCalcNegative._get_CalcObjectName_metadata)

    _set_CalcObjectName_metadata = { "name" : "CalcObjectName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @CalcObjectName.setter
    def CalcObjectName(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAStateCalcNegative._metadata, IAgVAStateCalcNegative._set_CalcObjectName_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{AE894289-670C-4C3F-8EAB-ABD6056919F2}", IAgVAStateCalcNegative)
agcls.AgTypeNameMap["IAgVAStateCalcNegative"] = IAgVAStateCalcNegative

class IAgVAStateCalcTrueAnomaly(object):
    """Properties for a Mean True Anomaly calculation object."""
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{639BD92E-793C-49C3-A72C-3456824F43EE}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_CentralBodyName" : 1,
                             "set_CentralBodyName" : 2,
                             "get_ElementType" : 3,
                             "set_ElementType" : 4, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAStateCalcTrueAnomaly._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcTrueAnomaly from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcTrueAnomaly.__dict__ and type(IAgVAStateCalcTrueAnomaly.__dict__[attrname]) == property:
            return IAgVAStateCalcTrueAnomaly.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcTrueAnomaly.")
    
    _get_CentralBodyName_metadata = { "name" : "CentralBodyName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def CentralBodyName(self) -> str:
        """The central body of the component."""
        return self._intf.get_property(IAgVAStateCalcTrueAnomaly._metadata, IAgVAStateCalcTrueAnomaly._get_CentralBodyName_metadata)

    _set_CentralBodyName_metadata = { "name" : "CentralBodyName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @CentralBodyName.setter
    def CentralBodyName(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAStateCalcTrueAnomaly._metadata, IAgVAStateCalcTrueAnomaly._set_CentralBodyName_metadata, inVal)

    _get_ElementType_metadata = { "name" : "ElementType",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVACalcObjectElem),) }
    @property
    def ElementType(self) -> "AgEVACalcObjectElem":
        """The element type."""
        return self._intf.get_property(IAgVAStateCalcTrueAnomaly._metadata, IAgVAStateCalcTrueAnomaly._get_ElementType_metadata)

    _set_ElementType_metadata = { "name" : "ElementType",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVACalcObjectElem),) }
    @ElementType.setter
    def ElementType(self, inVal:"AgEVACalcObjectElem") -> None:
        return self._intf.set_property(IAgVAStateCalcTrueAnomaly._metadata, IAgVAStateCalcTrueAnomaly._set_ElementType_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{639BD92E-793C-49C3-A72C-3456824F43EE}", IAgVAStateCalcTrueAnomaly)
agcls.AgTypeNameMap["IAgVAStateCalcTrueAnomaly"] = IAgVAStateCalcTrueAnomaly

class IAgVABDotRCalc(object):
    """Properties for a BDotR calculation object."""
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{BE67DDCF-6371-4275-996C-5DDB200E3B3F}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_TargetBodyName" : 1,
                             "set_TargetBodyName" : 2,
                             "get_RefVectorName" : 3,
                             "set_RefVectorName" : 4, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVABDotRCalc._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVABDotRCalc from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVABDotRCalc.__dict__ and type(IAgVABDotRCalc.__dict__[attrname]) == property:
            return IAgVABDotRCalc.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVABDotRCalc.")
    
    _get_TargetBodyName_metadata = { "name" : "TargetBodyName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def TargetBodyName(self) -> str:
        """The target body for B-plane computation."""
        return self._intf.get_property(IAgVABDotRCalc._metadata, IAgVABDotRCalc._get_TargetBodyName_metadata)

    _set_TargetBodyName_metadata = { "name" : "TargetBodyName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @TargetBodyName.setter
    def TargetBodyName(self, inVal:str) -> None:
        return self._intf.set_property(IAgVABDotRCalc._metadata, IAgVABDotRCalc._set_TargetBodyName_metadata, inVal)

    _get_RefVectorName_metadata = { "name" : "RefVectorName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def RefVectorName(self) -> str:
        """The reference vector to use to define the B-plane."""
        return self._intf.get_property(IAgVABDotRCalc._metadata, IAgVABDotRCalc._get_RefVectorName_metadata)

    _set_RefVectorName_metadata = { "name" : "RefVectorName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @RefVectorName.setter
    def RefVectorName(self, inVal:str) -> None:
        return self._intf.set_property(IAgVABDotRCalc._metadata, IAgVABDotRCalc._set_RefVectorName_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{BE67DDCF-6371-4275-996C-5DDB200E3B3F}", IAgVABDotRCalc)
agcls.AgTypeNameMap["IAgVABDotRCalc"] = IAgVABDotRCalc

class IAgVABDotTCalc(object):
    """Properties for a BDotT calculation object."""
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{E9BE921C-D864-4019-A3E7-A54DA59502FD}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_TargetBodyName" : 1,
                             "set_TargetBodyName" : 2,
                             "get_RefVectorName" : 3,
                             "set_RefVectorName" : 4, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVABDotTCalc._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVABDotTCalc from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVABDotTCalc.__dict__ and type(IAgVABDotTCalc.__dict__[attrname]) == property:
            return IAgVABDotTCalc.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVABDotTCalc.")
    
    _get_TargetBodyName_metadata = { "name" : "TargetBodyName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def TargetBodyName(self) -> str:
        """The target body for B-plane computation."""
        return self._intf.get_property(IAgVABDotTCalc._metadata, IAgVABDotTCalc._get_TargetBodyName_metadata)

    _set_TargetBodyName_metadata = { "name" : "TargetBodyName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @TargetBodyName.setter
    def TargetBodyName(self, inVal:str) -> None:
        return self._intf.set_property(IAgVABDotTCalc._metadata, IAgVABDotTCalc._set_TargetBodyName_metadata, inVal)

    _get_RefVectorName_metadata = { "name" : "RefVectorName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def RefVectorName(self) -> str:
        """The reference vector to use to define the B-plane."""
        return self._intf.get_property(IAgVABDotTCalc._metadata, IAgVABDotTCalc._get_RefVectorName_metadata)

    _set_RefVectorName_metadata = { "name" : "RefVectorName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @RefVectorName.setter
    def RefVectorName(self, inVal:str) -> None:
        return self._intf.set_property(IAgVABDotTCalc._metadata, IAgVABDotTCalc._set_RefVectorName_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{E9BE921C-D864-4019-A3E7-A54DA59502FD}", IAgVABDotTCalc)
agcls.AgTypeNameMap["IAgVABDotTCalc"] = IAgVABDotTCalc

class IAgVABMagCalc(object):
    """Properties for a BMagnitude calculation object."""
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{7D570198-8048-407E-B532-B7B2B86860C1}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_TargetBodyName" : 1,
                             "set_TargetBodyName" : 2, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVABMagCalc._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVABMagCalc from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVABMagCalc.__dict__ and type(IAgVABMagCalc.__dict__[attrname]) == property:
            return IAgVABMagCalc.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVABMagCalc.")
    
    _get_TargetBodyName_metadata = { "name" : "TargetBodyName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def TargetBodyName(self) -> str:
        """The target body for B-plane computation."""
        return self._intf.get_property(IAgVABMagCalc._metadata, IAgVABMagCalc._get_TargetBodyName_metadata)

    _set_TargetBodyName_metadata = { "name" : "TargetBodyName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @TargetBodyName.setter
    def TargetBodyName(self, inVal:str) -> None:
        return self._intf.set_property(IAgVABMagCalc._metadata, IAgVABMagCalc._set_TargetBodyName_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{7D570198-8048-407E-B532-B7B2B86860C1}", IAgVABMagCalc)
agcls.AgTypeNameMap["IAgVABMagCalc"] = IAgVABMagCalc

class IAgVABThetaCalc(object):
    """Properties for a BTheta calculation object."""
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{F478A128-3084-457F-B098-09114FF32DB8}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_TargetBodyName" : 1,
                             "set_TargetBodyName" : 2,
                             "get_RefVectorName" : 3,
                             "set_RefVectorName" : 4, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVABThetaCalc._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVABThetaCalc from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVABThetaCalc.__dict__ and type(IAgVABThetaCalc.__dict__[attrname]) == property:
            return IAgVABThetaCalc.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVABThetaCalc.")
    
    _get_TargetBodyName_metadata = { "name" : "TargetBodyName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def TargetBodyName(self) -> str:
        """The target body for B-plane computation."""
        return self._intf.get_property(IAgVABThetaCalc._metadata, IAgVABThetaCalc._get_TargetBodyName_metadata)

    _set_TargetBodyName_metadata = { "name" : "TargetBodyName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @TargetBodyName.setter
    def TargetBodyName(self, inVal:str) -> None:
        return self._intf.set_property(IAgVABThetaCalc._metadata, IAgVABThetaCalc._set_TargetBodyName_metadata, inVal)

    _get_RefVectorName_metadata = { "name" : "RefVectorName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def RefVectorName(self) -> str:
        """The reference vector to use to define the B-plane."""
        return self._intf.get_property(IAgVABThetaCalc._metadata, IAgVABThetaCalc._get_RefVectorName_metadata)

    _set_RefVectorName_metadata = { "name" : "RefVectorName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @RefVectorName.setter
    def RefVectorName(self, inVal:str) -> None:
        return self._intf.set_property(IAgVABThetaCalc._metadata, IAgVABThetaCalc._set_RefVectorName_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{F478A128-3084-457F-B098-09114FF32DB8}", IAgVABThetaCalc)
agcls.AgTypeNameMap["IAgVABThetaCalc"] = IAgVABThetaCalc

class IAgVAStateCalcDeltaDec(object):
    """Properties for a Delta Declination calculation object."""
    _num_methods = 6
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{2C14B234-E769-4969-BFA3-54A5AB2C6F89}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_CentralBodyName" : 1,
                             "set_CentralBodyName" : 2,
                             "get_ReferenceType" : 3,
                             "set_ReferenceType" : 4,
                             "get_ReferenceBody" : 5,
                             "set_ReferenceBody" : 6, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAStateCalcDeltaDec._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcDeltaDec from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcDeltaDec.__dict__ and type(IAgVAStateCalcDeltaDec.__dict__[attrname]) == property:
            return IAgVAStateCalcDeltaDec.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcDeltaDec.")
    
    _get_CentralBodyName_metadata = { "name" : "CentralBodyName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def CentralBodyName(self) -> str:
        """The central body of the component."""
        return self._intf.get_property(IAgVAStateCalcDeltaDec._metadata, IAgVAStateCalcDeltaDec._get_CentralBodyName_metadata)

    _set_CentralBodyName_metadata = { "name" : "CentralBodyName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @CentralBodyName.setter
    def CentralBodyName(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAStateCalcDeltaDec._metadata, IAgVAStateCalcDeltaDec._set_CentralBodyName_metadata, inVal)

    _get_ReferenceType_metadata = { "name" : "ReferenceType",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVACalcObjectCentralBodyReference),) }
    @property
    def ReferenceType(self) -> "AgEVACalcObjectCentralBodyReference":
        """The central body's reference type"""
        return self._intf.get_property(IAgVAStateCalcDeltaDec._metadata, IAgVAStateCalcDeltaDec._get_ReferenceType_metadata)

    _set_ReferenceType_metadata = { "name" : "ReferenceType",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVACalcObjectCentralBodyReference),) }
    @ReferenceType.setter
    def ReferenceType(self, inVal:"AgEVACalcObjectCentralBodyReference") -> None:
        return self._intf.set_property(IAgVAStateCalcDeltaDec._metadata, IAgVAStateCalcDeltaDec._set_ReferenceType_metadata, inVal)

    _get_ReferenceBody_metadata = { "name" : "ReferenceBody",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def ReferenceBody(self) -> str:
        """The reference body of the component. Read only when the ReferenceType is eVACalcObjectCentralBodyReferenceParent."""
        return self._intf.get_property(IAgVAStateCalcDeltaDec._metadata, IAgVAStateCalcDeltaDec._get_ReferenceBody_metadata)

    _set_ReferenceBody_metadata = { "name" : "ReferenceBody",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @ReferenceBody.setter
    def ReferenceBody(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAStateCalcDeltaDec._metadata, IAgVAStateCalcDeltaDec._set_ReferenceBody_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{2C14B234-E769-4969-BFA3-54A5AB2C6F89}", IAgVAStateCalcDeltaDec)
agcls.AgTypeNameMap["IAgVAStateCalcDeltaDec"] = IAgVAStateCalcDeltaDec

class IAgVAStateCalcDeltaRA(object):
    """Properties for a Delta Right Asc calculation object."""
    _num_methods = 6
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{42FFF17F-F89E-438E-B5C9-0206AD20D09E}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_CentralBodyName" : 1,
                             "set_CentralBodyName" : 2,
                             "get_ReferenceType" : 3,
                             "set_ReferenceType" : 4,
                             "get_ReferenceBody" : 5,
                             "set_ReferenceBody" : 6, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAStateCalcDeltaRA._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcDeltaRA from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcDeltaRA.__dict__ and type(IAgVAStateCalcDeltaRA.__dict__[attrname]) == property:
            return IAgVAStateCalcDeltaRA.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcDeltaRA.")
    
    _get_CentralBodyName_metadata = { "name" : "CentralBodyName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def CentralBodyName(self) -> str:
        """The central body of the component."""
        return self._intf.get_property(IAgVAStateCalcDeltaRA._metadata, IAgVAStateCalcDeltaRA._get_CentralBodyName_metadata)

    _set_CentralBodyName_metadata = { "name" : "CentralBodyName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @CentralBodyName.setter
    def CentralBodyName(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAStateCalcDeltaRA._metadata, IAgVAStateCalcDeltaRA._set_CentralBodyName_metadata, inVal)

    _get_ReferenceType_metadata = { "name" : "ReferenceType",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVACalcObjectCentralBodyReference),) }
    @property
    def ReferenceType(self) -> "AgEVACalcObjectCentralBodyReference":
        """The central body's reference type"""
        return self._intf.get_property(IAgVAStateCalcDeltaRA._metadata, IAgVAStateCalcDeltaRA._get_ReferenceType_metadata)

    _set_ReferenceType_metadata = { "name" : "ReferenceType",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVACalcObjectCentralBodyReference),) }
    @ReferenceType.setter
    def ReferenceType(self, inVal:"AgEVACalcObjectCentralBodyReference") -> None:
        return self._intf.set_property(IAgVAStateCalcDeltaRA._metadata, IAgVAStateCalcDeltaRA._set_ReferenceType_metadata, inVal)

    _get_ReferenceBody_metadata = { "name" : "ReferenceBody",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def ReferenceBody(self) -> str:
        """The reference body of the component. Read only when the ReferenceType is eVACalcObjectCentralBodyReferenceParent."""
        return self._intf.get_property(IAgVAStateCalcDeltaRA._metadata, IAgVAStateCalcDeltaRA._get_ReferenceBody_metadata)

    _set_ReferenceBody_metadata = { "name" : "ReferenceBody",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @ReferenceBody.setter
    def ReferenceBody(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAStateCalcDeltaRA._metadata, IAgVAStateCalcDeltaRA._set_ReferenceBody_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{42FFF17F-F89E-438E-B5C9-0206AD20D09E}", IAgVAStateCalcDeltaRA)
agcls.AgTypeNameMap["IAgVAStateCalcDeltaRA"] = IAgVAStateCalcDeltaRA

class IAgVAStateCalcBetaAngle(object):
    """Properties for a Beta Angle calculation object."""
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{6D251D91-4555-4C35-B56C-04832CF014E2}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_CentralBodyName" : 1,
                             "set_CentralBodyName" : 2, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAStateCalcBetaAngle._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcBetaAngle from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcBetaAngle.__dict__ and type(IAgVAStateCalcBetaAngle.__dict__[attrname]) == property:
            return IAgVAStateCalcBetaAngle.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcBetaAngle.")
    
    _get_CentralBodyName_metadata = { "name" : "CentralBodyName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def CentralBodyName(self) -> str:
        """The central body of the component."""
        return self._intf.get_property(IAgVAStateCalcBetaAngle._metadata, IAgVAStateCalcBetaAngle._get_CentralBodyName_metadata)

    _set_CentralBodyName_metadata = { "name" : "CentralBodyName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @CentralBodyName.setter
    def CentralBodyName(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAStateCalcBetaAngle._metadata, IAgVAStateCalcBetaAngle._set_CentralBodyName_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{6D251D91-4555-4C35-B56C-04832CF014E2}", IAgVAStateCalcBetaAngle)
agcls.AgTypeNameMap["IAgVAStateCalcBetaAngle"] = IAgVAStateCalcBetaAngle

class IAgVAStateCalcLocalApparentSolarLon(object):
    """Properties for a Local Apparent Solar Longitude calculation object."""
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{619668AB-B09E-4160-9ED3-1365F3678C60}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_CentralBodyName" : 1,
                             "set_CentralBodyName" : 2, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAStateCalcLocalApparentSolarLon._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcLocalApparentSolarLon from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcLocalApparentSolarLon.__dict__ and type(IAgVAStateCalcLocalApparentSolarLon.__dict__[attrname]) == property:
            return IAgVAStateCalcLocalApparentSolarLon.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcLocalApparentSolarLon.")
    
    _get_CentralBodyName_metadata = { "name" : "CentralBodyName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def CentralBodyName(self) -> str:
        """The central body of the component."""
        return self._intf.get_property(IAgVAStateCalcLocalApparentSolarLon._metadata, IAgVAStateCalcLocalApparentSolarLon._get_CentralBodyName_metadata)

    _set_CentralBodyName_metadata = { "name" : "CentralBodyName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @CentralBodyName.setter
    def CentralBodyName(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAStateCalcLocalApparentSolarLon._metadata, IAgVAStateCalcLocalApparentSolarLon._set_CentralBodyName_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{619668AB-B09E-4160-9ED3-1365F3678C60}", IAgVAStateCalcLocalApparentSolarLon)
agcls.AgTypeNameMap["IAgVAStateCalcLocalApparentSolarLon"] = IAgVAStateCalcLocalApparentSolarLon

class IAgVAStateCalcLonOfPeriapsis(object):
    """Properties for a Longitude of Periapsis calculation object."""
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{1F8ECEB0-EFBE-4A23-8781-9BDEFF119DF0}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_CoordSystemName" : 1,
                             "set_CoordSystemName" : 2,
                             "get_ElementType" : 3,
                             "set_ElementType" : 4, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAStateCalcLonOfPeriapsis._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcLonOfPeriapsis from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcLonOfPeriapsis.__dict__ and type(IAgVAStateCalcLonOfPeriapsis.__dict__[attrname]) == property:
            return IAgVAStateCalcLonOfPeriapsis.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcLonOfPeriapsis.")
    
    _get_CoordSystemName_metadata = { "name" : "CoordSystemName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def CoordSystemName(self) -> str:
        """The coordinate system within which the element is defined."""
        return self._intf.get_property(IAgVAStateCalcLonOfPeriapsis._metadata, IAgVAStateCalcLonOfPeriapsis._get_CoordSystemName_metadata)

    _set_CoordSystemName_metadata = { "name" : "CoordSystemName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @CoordSystemName.setter
    def CoordSystemName(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAStateCalcLonOfPeriapsis._metadata, IAgVAStateCalcLonOfPeriapsis._set_CoordSystemName_metadata, inVal)

    _get_ElementType_metadata = { "name" : "ElementType",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVACalcObjectElem),) }
    @property
    def ElementType(self) -> "AgEVACalcObjectElem":
        """The element type."""
        return self._intf.get_property(IAgVAStateCalcLonOfPeriapsis._metadata, IAgVAStateCalcLonOfPeriapsis._get_ElementType_metadata)

    _set_ElementType_metadata = { "name" : "ElementType",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVACalcObjectElem),) }
    @ElementType.setter
    def ElementType(self, inVal:"AgEVACalcObjectElem") -> None:
        return self._intf.set_property(IAgVAStateCalcLonOfPeriapsis._metadata, IAgVAStateCalcLonOfPeriapsis._set_ElementType_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{1F8ECEB0-EFBE-4A23-8781-9BDEFF119DF0}", IAgVAStateCalcLonOfPeriapsis)
agcls.AgTypeNameMap["IAgVAStateCalcLonOfPeriapsis"] = IAgVAStateCalcLonOfPeriapsis

class IAgVAStateCalcOrbitStateValue(object):
    """Properties for an Orbit State Value calculation object."""
    _num_methods = 20
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{BE928A27-517C-4D52-A681-DA6CFC89E59F}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_CalcObjectName" : 1,
                             "set_CalcObjectName" : 2,
                             "get_InputCoordSystemName" : 3,
                             "set_InputCoordSystemName" : 4,
                             "get_X" : 5,
                             "set_X" : 6,
                             "get_Y" : 7,
                             "set_Y" : 8,
                             "get_Z" : 9,
                             "set_Z" : 10,
                             "get_Vx" : 11,
                             "set_Vx" : 12,
                             "get_Vy" : 13,
                             "set_Vy" : 14,
                             "get_Vz" : 15,
                             "set_Vz" : 16,
                             "EnableControlParameter" : 17,
                             "DisableControlParameter" : 18,
                             "IsControlParameterEnabled" : 19,
                             "get_ControlParametersAvailable" : 20, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAStateCalcOrbitStateValue._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcOrbitStateValue from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcOrbitStateValue.__dict__ and type(IAgVAStateCalcOrbitStateValue.__dict__[attrname]) == property:
            return IAgVAStateCalcOrbitStateValue.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcOrbitStateValue.")
    
    _get_CalcObjectName_metadata = { "name" : "CalcObjectName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def CalcObjectName(self) -> str:
        """The calculation object."""
        return self._intf.get_property(IAgVAStateCalcOrbitStateValue._metadata, IAgVAStateCalcOrbitStateValue._get_CalcObjectName_metadata)

    _set_CalcObjectName_metadata = { "name" : "CalcObjectName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @CalcObjectName.setter
    def CalcObjectName(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAStateCalcOrbitStateValue._metadata, IAgVAStateCalcOrbitStateValue._set_CalcObjectName_metadata, inVal)

    _get_InputCoordSystemName_metadata = { "name" : "InputCoordSystemName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def InputCoordSystemName(self) -> str:
        """The coordinate system of the input state."""
        return self._intf.get_property(IAgVAStateCalcOrbitStateValue._metadata, IAgVAStateCalcOrbitStateValue._get_InputCoordSystemName_metadata)

    _set_InputCoordSystemName_metadata = { "name" : "InputCoordSystemName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @InputCoordSystemName.setter
    def InputCoordSystemName(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAStateCalcOrbitStateValue._metadata, IAgVAStateCalcOrbitStateValue._set_InputCoordSystemName_metadata, inVal)

    _get_X_metadata = { "name" : "X",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def X(self) -> typing.Any:
        """The x position component. Uses Distance Dimension."""
        return self._intf.get_property(IAgVAStateCalcOrbitStateValue._metadata, IAgVAStateCalcOrbitStateValue._get_X_metadata)

    _set_X_metadata = { "name" : "X",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @X.setter
    def X(self, inVal:typing.Any) -> None:
        return self._intf.set_property(IAgVAStateCalcOrbitStateValue._metadata, IAgVAStateCalcOrbitStateValue._set_X_metadata, inVal)

    _get_Y_metadata = { "name" : "Y",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def Y(self) -> typing.Any:
        """The y position component. Uses Distance Dimension."""
        return self._intf.get_property(IAgVAStateCalcOrbitStateValue._metadata, IAgVAStateCalcOrbitStateValue._get_Y_metadata)

    _set_Y_metadata = { "name" : "Y",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @Y.setter
    def Y(self, inVal:typing.Any) -> None:
        return self._intf.set_property(IAgVAStateCalcOrbitStateValue._metadata, IAgVAStateCalcOrbitStateValue._set_Y_metadata, inVal)

    _get_Z_metadata = { "name" : "Z",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def Z(self) -> typing.Any:
        """The z position component. Uses Distance Dimension."""
        return self._intf.get_property(IAgVAStateCalcOrbitStateValue._metadata, IAgVAStateCalcOrbitStateValue._get_Z_metadata)

    _set_Z_metadata = { "name" : "Z",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @Z.setter
    def Z(self, inVal:typing.Any) -> None:
        return self._intf.set_property(IAgVAStateCalcOrbitStateValue._metadata, IAgVAStateCalcOrbitStateValue._set_Z_metadata, inVal)

    _get_Vx_metadata = { "name" : "Vx",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def Vx(self) -> typing.Any:
        """The x velocity component. Uses Rate Dimension."""
        return self._intf.get_property(IAgVAStateCalcOrbitStateValue._metadata, IAgVAStateCalcOrbitStateValue._get_Vx_metadata)

    _set_Vx_metadata = { "name" : "Vx",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @Vx.setter
    def Vx(self, inVal:typing.Any) -> None:
        return self._intf.set_property(IAgVAStateCalcOrbitStateValue._metadata, IAgVAStateCalcOrbitStateValue._set_Vx_metadata, inVal)

    _get_Vy_metadata = { "name" : "Vy",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def Vy(self) -> typing.Any:
        """The y velocity component. Uses Rate Dimension."""
        return self._intf.get_property(IAgVAStateCalcOrbitStateValue._metadata, IAgVAStateCalcOrbitStateValue._get_Vy_metadata)

    _set_Vy_metadata = { "name" : "Vy",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @Vy.setter
    def Vy(self, inVal:typing.Any) -> None:
        return self._intf.set_property(IAgVAStateCalcOrbitStateValue._metadata, IAgVAStateCalcOrbitStateValue._set_Vy_metadata, inVal)

    _get_Vz_metadata = { "name" : "Vz",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def Vz(self) -> typing.Any:
        """The z velocity component. Uses Rate Dimension."""
        return self._intf.get_property(IAgVAStateCalcOrbitStateValue._metadata, IAgVAStateCalcOrbitStateValue._get_Vz_metadata)

    _set_Vz_metadata = { "name" : "Vz",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @Vz.setter
    def Vz(self, inVal:typing.Any) -> None:
        return self._intf.set_property(IAgVAStateCalcOrbitStateValue._metadata, IAgVAStateCalcOrbitStateValue._set_Vz_metadata, inVal)

    _EnableControlParameter_metadata = { "name" : "EnableControlParameter",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAControlOrbitStateValue),) }
    def EnableControlParameter(self, param:"AgEVAControlOrbitStateValue") -> None:
        """Enables the specified control parameter"""
        return self._intf.invoke(IAgVAStateCalcOrbitStateValue._metadata, IAgVAStateCalcOrbitStateValue._EnableControlParameter_metadata, param)

    _DisableControlParameter_metadata = { "name" : "DisableControlParameter",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAControlOrbitStateValue),) }
    def DisableControlParameter(self, param:"AgEVAControlOrbitStateValue") -> None:
        """Disables the specified control parameter"""
        return self._intf.invoke(IAgVAStateCalcOrbitStateValue._metadata, IAgVAStateCalcOrbitStateValue._DisableControlParameter_metadata, param)

    _IsControlParameterEnabled_metadata = { "name" : "IsControlParameterEnabled",
            "arg_types" : (agcom.LONG, POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAControlOrbitStateValue), agmarshall.VARIANT_BOOL_arg,) }
    def IsControlParameterEnabled(self, param:"AgEVAControlOrbitStateValue") -> bool:
        """Sees if the specified control is enabled"""
        return self._intf.invoke(IAgVAStateCalcOrbitStateValue._metadata, IAgVAStateCalcOrbitStateValue._IsControlParameterEnabled_metadata, param, out_arg())

    _get_ControlParametersAvailable_metadata = { "name" : "ControlParametersAvailable",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def ControlParametersAvailable(self) -> bool:
        """Returns whether or not the control parameters can be set."""
        return self._intf.get_property(IAgVAStateCalcOrbitStateValue._metadata, IAgVAStateCalcOrbitStateValue._get_ControlParametersAvailable_metadata)


agcls.AgClassCatalog.add_catalog_entry("{BE928A27-517C-4D52-A681-DA6CFC89E59F}", IAgVAStateCalcOrbitStateValue)
agcls.AgTypeNameMap["IAgVAStateCalcOrbitStateValue"] = IAgVAStateCalcOrbitStateValue

class IAgVAStateCalcSignedEccentricity(object):
    """Properties for a SignedEccentricity calculation object."""
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{CCBD1A51-0C24-4FEA-936D-F8E173931C30}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_CentralBodyName" : 1,
                             "set_CentralBodyName" : 2,
                             "get_ElementType" : 3,
                             "set_ElementType" : 4, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAStateCalcSignedEccentricity._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcSignedEccentricity from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcSignedEccentricity.__dict__ and type(IAgVAStateCalcSignedEccentricity.__dict__[attrname]) == property:
            return IAgVAStateCalcSignedEccentricity.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcSignedEccentricity.")
    
    _get_CentralBodyName_metadata = { "name" : "CentralBodyName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def CentralBodyName(self) -> str:
        """The central body of the component."""
        return self._intf.get_property(IAgVAStateCalcSignedEccentricity._metadata, IAgVAStateCalcSignedEccentricity._get_CentralBodyName_metadata)

    _set_CentralBodyName_metadata = { "name" : "CentralBodyName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @CentralBodyName.setter
    def CentralBodyName(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAStateCalcSignedEccentricity._metadata, IAgVAStateCalcSignedEccentricity._set_CentralBodyName_metadata, inVal)

    _get_ElementType_metadata = { "name" : "ElementType",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVACalcObjectElem),) }
    @property
    def ElementType(self) -> "AgEVACalcObjectElem":
        """The element type."""
        return self._intf.get_property(IAgVAStateCalcSignedEccentricity._metadata, IAgVAStateCalcSignedEccentricity._get_ElementType_metadata)

    _set_ElementType_metadata = { "name" : "ElementType",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVACalcObjectElem),) }
    @ElementType.setter
    def ElementType(self, inVal:"AgEVACalcObjectElem") -> None:
        return self._intf.set_property(IAgVAStateCalcSignedEccentricity._metadata, IAgVAStateCalcSignedEccentricity._set_ElementType_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{CCBD1A51-0C24-4FEA-936D-F8E173931C30}", IAgVAStateCalcSignedEccentricity)
agcls.AgTypeNameMap["IAgVAStateCalcSignedEccentricity"] = IAgVAStateCalcSignedEccentricity

class IAgVAStateCalcTrueLon(object):
    """Properties for a True Longitude calculation object."""
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{E7F127C5-C675-4952-A10C-17AFCBB90F1B}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_CoordSystemName" : 1,
                             "set_CoordSystemName" : 2,
                             "get_ElementType" : 3,
                             "set_ElementType" : 4, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAStateCalcTrueLon._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcTrueLon from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcTrueLon.__dict__ and type(IAgVAStateCalcTrueLon.__dict__[attrname]) == property:
            return IAgVAStateCalcTrueLon.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcTrueLon.")
    
    _get_CoordSystemName_metadata = { "name" : "CoordSystemName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def CoordSystemName(self) -> str:
        """The coordinate system within which the element is defined."""
        return self._intf.get_property(IAgVAStateCalcTrueLon._metadata, IAgVAStateCalcTrueLon._get_CoordSystemName_metadata)

    _set_CoordSystemName_metadata = { "name" : "CoordSystemName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @CoordSystemName.setter
    def CoordSystemName(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAStateCalcTrueLon._metadata, IAgVAStateCalcTrueLon._set_CoordSystemName_metadata, inVal)

    _get_ElementType_metadata = { "name" : "ElementType",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVACalcObjectElem),) }
    @property
    def ElementType(self) -> "AgEVACalcObjectElem":
        """The element type."""
        return self._intf.get_property(IAgVAStateCalcTrueLon._metadata, IAgVAStateCalcTrueLon._get_ElementType_metadata)

    _set_ElementType_metadata = { "name" : "ElementType",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVACalcObjectElem),) }
    @ElementType.setter
    def ElementType(self, inVal:"AgEVACalcObjectElem") -> None:
        return self._intf.set_property(IAgVAStateCalcTrueLon._metadata, IAgVAStateCalcTrueLon._set_ElementType_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{E7F127C5-C675-4952-A10C-17AFCBB90F1B}", IAgVAStateCalcTrueLon)
agcls.AgTypeNameMap["IAgVAStateCalcTrueLon"] = IAgVAStateCalcTrueLon

class IAgVAStateCalcPower(object):
    """Properties for a Power calculation object."""
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{748E8F67-4505-4DE7-8206-4752EF3A9158}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_PowerSourceName" : 1,
                             "set_PowerSourceName" : 2, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAStateCalcPower._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcPower from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcPower.__dict__ and type(IAgVAStateCalcPower.__dict__[attrname]) == property:
            return IAgVAStateCalcPower.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcPower.")
    
    _get_PowerSourceName_metadata = { "name" : "PowerSourceName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def PowerSourceName(self) -> str:
        """The power source."""
        return self._intf.get_property(IAgVAStateCalcPower._metadata, IAgVAStateCalcPower._get_PowerSourceName_metadata)

    _set_PowerSourceName_metadata = { "name" : "PowerSourceName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @PowerSourceName.setter
    def PowerSourceName(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAStateCalcPower._metadata, IAgVAStateCalcPower._set_PowerSourceName_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{748E8F67-4505-4DE7-8206-4752EF3A9158}", IAgVAStateCalcPower)
agcls.AgTypeNameMap["IAgVAStateCalcPower"] = IAgVAStateCalcPower

class IAgVAStateCalcRelMotion(object):
    """Properties for a Relative Motion calculation object."""
    _num_methods = 7
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{9B36C269-5E68-456B-A2BD-B9BEA9B131DB}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_CentralBodyName" : 1,
                             "set_CentralBodyName" : 2,
                             "get_OriginAtMaster" : 3,
                             "set_OriginAtMaster" : 4,
                             "get_ReferenceSelection" : 5,
                             "set_ReferenceSelection" : 6,
                             "get_Reference" : 7, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAStateCalcRelMotion._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcRelMotion from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcRelMotion.__dict__ and type(IAgVAStateCalcRelMotion.__dict__[attrname]) == property:
            return IAgVAStateCalcRelMotion.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcRelMotion.")
    
    _get_CentralBodyName_metadata = { "name" : "CentralBodyName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def CentralBodyName(self) -> str:
        """The central body of the component."""
        return self._intf.get_property(IAgVAStateCalcRelMotion._metadata, IAgVAStateCalcRelMotion._get_CentralBodyName_metadata)

    _set_CentralBodyName_metadata = { "name" : "CentralBodyName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @CentralBodyName.setter
    def CentralBodyName(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAStateCalcRelMotion._metadata, IAgVAStateCalcRelMotion._set_CentralBodyName_metadata, inVal)

    _get_OriginAtMaster_metadata = { "name" : "OriginAtMaster",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def OriginAtMaster(self) -> bool:
        """True if the origin is at the reference satellite, false if the origin is at the current satellite."""
        return self._intf.get_property(IAgVAStateCalcRelMotion._metadata, IAgVAStateCalcRelMotion._get_OriginAtMaster_metadata)

    _set_OriginAtMaster_metadata = { "name" : "OriginAtMaster",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @OriginAtMaster.setter
    def OriginAtMaster(self, inVal:bool) -> None:
        return self._intf.set_property(IAgVAStateCalcRelMotion._metadata, IAgVAStateCalcRelMotion._set_OriginAtMaster_metadata, inVal)

    _get_ReferenceSelection_metadata = { "name" : "ReferenceSelection",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVACalcObjectReference),) }
    @property
    def ReferenceSelection(self) -> "AgEVACalcObjectReference":
        """The reference object selection."""
        return self._intf.get_property(IAgVAStateCalcRelMotion._metadata, IAgVAStateCalcRelMotion._get_ReferenceSelection_metadata)

    _set_ReferenceSelection_metadata = { "name" : "ReferenceSelection",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVACalcObjectReference),) }
    @ReferenceSelection.setter
    def ReferenceSelection(self, inVal:"AgEVACalcObjectReference") -> None:
        return self._intf.set_property(IAgVAStateCalcRelMotion._metadata, IAgVAStateCalcRelMotion._set_ReferenceSelection_metadata, inVal)

    _get_Reference_metadata = { "name" : "Reference",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def Reference(self) -> "IAgLinkToObject":
        """The reference object."""
        return self._intf.get_property(IAgVAStateCalcRelMotion._metadata, IAgVAStateCalcRelMotion._get_Reference_metadata)


agcls.AgClassCatalog.add_catalog_entry("{9B36C269-5E68-456B-A2BD-B9BEA9B131DB}", IAgVAStateCalcRelMotion)
agcls.AgTypeNameMap["IAgVAStateCalcRelMotion"] = IAgVAStateCalcRelMotion

class IAgVAStateCalcSolarBetaAngle(object):
    """Properties for a Solar Beta Angle calculation object."""
    _num_methods = 13
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{1CBEFF7B-1B28-4AEB-A8BD-B329419FC824}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_CentralBodyName" : 1,
                             "set_CentralBodyName" : 2,
                             "get_OrbitPlaneSource" : 3,
                             "set_OrbitPlaneSource" : 4,
                             "get_ElementType" : 5,
                             "set_ElementType" : 6,
                             "get_ReferenceSelection" : 7,
                             "set_ReferenceSelection" : 8,
                             "get_Reference" : 9,
                             "get_SunPosition" : 10,
                             "set_SunPosition" : 11,
                             "get_SignConvention" : 12,
                             "set_SignConvention" : 13, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAStateCalcSolarBetaAngle._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcSolarBetaAngle from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcSolarBetaAngle.__dict__ and type(IAgVAStateCalcSolarBetaAngle.__dict__[attrname]) == property:
            return IAgVAStateCalcSolarBetaAngle.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcSolarBetaAngle.")
    
    _get_CentralBodyName_metadata = { "name" : "CentralBodyName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def CentralBodyName(self) -> str:
        """The central body of the component."""
        return self._intf.get_property(IAgVAStateCalcSolarBetaAngle._metadata, IAgVAStateCalcSolarBetaAngle._get_CentralBodyName_metadata)

    _set_CentralBodyName_metadata = { "name" : "CentralBodyName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @CentralBodyName.setter
    def CentralBodyName(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAStateCalcSolarBetaAngle._metadata, IAgVAStateCalcSolarBetaAngle._set_CentralBodyName_metadata, inVal)

    _get_OrbitPlaneSource_metadata = { "name" : "OrbitPlaneSource",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVACalcObjectOrbitPlaneSource),) }
    @property
    def OrbitPlaneSource(self) -> "AgEVACalcObjectOrbitPlaneSource":
        """Selection of the satellite that will generate the orbit plane."""
        return self._intf.get_property(IAgVAStateCalcSolarBetaAngle._metadata, IAgVAStateCalcSolarBetaAngle._get_OrbitPlaneSource_metadata)

    _set_OrbitPlaneSource_metadata = { "name" : "OrbitPlaneSource",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVACalcObjectOrbitPlaneSource),) }
    @OrbitPlaneSource.setter
    def OrbitPlaneSource(self, inVal:"AgEVACalcObjectOrbitPlaneSource") -> None:
        return self._intf.set_property(IAgVAStateCalcSolarBetaAngle._metadata, IAgVAStateCalcSolarBetaAngle._set_OrbitPlaneSource_metadata, inVal)

    _get_ElementType_metadata = { "name" : "ElementType",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVACalcObjectElem),) }
    @property
    def ElementType(self) -> "AgEVACalcObjectElem":
        """Choice of osculating or mean elements"""
        return self._intf.get_property(IAgVAStateCalcSolarBetaAngle._metadata, IAgVAStateCalcSolarBetaAngle._get_ElementType_metadata)

    _set_ElementType_metadata = { "name" : "ElementType",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVACalcObjectElem),) }
    @ElementType.setter
    def ElementType(self, inVal:"AgEVACalcObjectElem") -> None:
        return self._intf.set_property(IAgVAStateCalcSolarBetaAngle._metadata, IAgVAStateCalcSolarBetaAngle._set_ElementType_metadata, inVal)

    _get_ReferenceSelection_metadata = { "name" : "ReferenceSelection",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVACalcObjectReference),) }
    @property
    def ReferenceSelection(self) -> "AgEVACalcObjectReference":
        """The reference object selection."""
        return self._intf.get_property(IAgVAStateCalcSolarBetaAngle._metadata, IAgVAStateCalcSolarBetaAngle._get_ReferenceSelection_metadata)

    _set_ReferenceSelection_metadata = { "name" : "ReferenceSelection",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVACalcObjectReference),) }
    @ReferenceSelection.setter
    def ReferenceSelection(self, inVal:"AgEVACalcObjectReference") -> None:
        return self._intf.set_property(IAgVAStateCalcSolarBetaAngle._metadata, IAgVAStateCalcSolarBetaAngle._set_ReferenceSelection_metadata, inVal)

    _get_Reference_metadata = { "name" : "Reference",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def Reference(self) -> "IAgLinkToObject":
        """The reference object."""
        return self._intf.get_property(IAgVAStateCalcSolarBetaAngle._metadata, IAgVAStateCalcSolarBetaAngle._get_Reference_metadata)

    _get_SunPosition_metadata = { "name" : "SunPosition",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVACalcObjectSunPosition),) }
    @property
    def SunPosition(self) -> "AgEVACalcObjectSunPosition":
        """The type of the Sun location."""
        return self._intf.get_property(IAgVAStateCalcSolarBetaAngle._metadata, IAgVAStateCalcSolarBetaAngle._get_SunPosition_metadata)

    _set_SunPosition_metadata = { "name" : "SunPosition",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVACalcObjectSunPosition),) }
    @SunPosition.setter
    def SunPosition(self, inVal:"AgEVACalcObjectSunPosition") -> None:
        return self._intf.set_property(IAgVAStateCalcSolarBetaAngle._metadata, IAgVAStateCalcSolarBetaAngle._set_SunPosition_metadata, inVal)

    _get_SignConvention_metadata = { "name" : "SignConvention",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVACalcObjectAngleSign),) }
    @property
    def SignConvention(self) -> "AgEVACalcObjectAngleSign":
        """Sets the sign of the angle when the relative position has a positive component along the orbit normal."""
        return self._intf.get_property(IAgVAStateCalcSolarBetaAngle._metadata, IAgVAStateCalcSolarBetaAngle._get_SignConvention_metadata)

    _set_SignConvention_metadata = { "name" : "SignConvention",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVACalcObjectAngleSign),) }
    @SignConvention.setter
    def SignConvention(self, inVal:"AgEVACalcObjectAngleSign") -> None:
        return self._intf.set_property(IAgVAStateCalcSolarBetaAngle._metadata, IAgVAStateCalcSolarBetaAngle._set_SignConvention_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{1CBEFF7B-1B28-4AEB-A8BD-B329419FC824}", IAgVAStateCalcSolarBetaAngle)
agcls.AgTypeNameMap["IAgVAStateCalcSolarBetaAngle"] = IAgVAStateCalcSolarBetaAngle

class IAgVAStateCalcSolarInPlaneAngle(object):
    """Properties for a Solar In Plane Angle calculation object."""
    _num_methods = 15
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{08345343-C64C-4CAF-B1C4-EE76DC4917B5}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_CentralBodyName" : 1,
                             "set_CentralBodyName" : 2,
                             "get_OrbitPlaneSource" : 3,
                             "set_OrbitPlaneSource" : 4,
                             "get_ElementType" : 5,
                             "set_ElementType" : 6,
                             "get_ReferenceSelection" : 7,
                             "set_ReferenceSelection" : 8,
                             "get_Reference" : 9,
                             "get_SunPosition" : 10,
                             "set_SunPosition" : 11,
                             "get_CounterClockwiseRotation" : 12,
                             "set_CounterClockwiseRotation" : 13,
                             "get_ReferenceDirection" : 14,
                             "set_ReferenceDirection" : 15, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAStateCalcSolarInPlaneAngle._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcSolarInPlaneAngle from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcSolarInPlaneAngle.__dict__ and type(IAgVAStateCalcSolarInPlaneAngle.__dict__[attrname]) == property:
            return IAgVAStateCalcSolarInPlaneAngle.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcSolarInPlaneAngle.")
    
    _get_CentralBodyName_metadata = { "name" : "CentralBodyName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def CentralBodyName(self) -> str:
        """The central body of the component."""
        return self._intf.get_property(IAgVAStateCalcSolarInPlaneAngle._metadata, IAgVAStateCalcSolarInPlaneAngle._get_CentralBodyName_metadata)

    _set_CentralBodyName_metadata = { "name" : "CentralBodyName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @CentralBodyName.setter
    def CentralBodyName(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAStateCalcSolarInPlaneAngle._metadata, IAgVAStateCalcSolarInPlaneAngle._set_CentralBodyName_metadata, inVal)

    _get_OrbitPlaneSource_metadata = { "name" : "OrbitPlaneSource",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVACalcObjectOrbitPlaneSource),) }
    @property
    def OrbitPlaneSource(self) -> "AgEVACalcObjectOrbitPlaneSource":
        """Selection of the satellite that will generate the orbit plane."""
        return self._intf.get_property(IAgVAStateCalcSolarInPlaneAngle._metadata, IAgVAStateCalcSolarInPlaneAngle._get_OrbitPlaneSource_metadata)

    _set_OrbitPlaneSource_metadata = { "name" : "OrbitPlaneSource",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVACalcObjectOrbitPlaneSource),) }
    @OrbitPlaneSource.setter
    def OrbitPlaneSource(self, inVal:"AgEVACalcObjectOrbitPlaneSource") -> None:
        return self._intf.set_property(IAgVAStateCalcSolarInPlaneAngle._metadata, IAgVAStateCalcSolarInPlaneAngle._set_OrbitPlaneSource_metadata, inVal)

    _get_ElementType_metadata = { "name" : "ElementType",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVACalcObjectElem),) }
    @property
    def ElementType(self) -> "AgEVACalcObjectElem":
        """Choice of osculating or mean elements"""
        return self._intf.get_property(IAgVAStateCalcSolarInPlaneAngle._metadata, IAgVAStateCalcSolarInPlaneAngle._get_ElementType_metadata)

    _set_ElementType_metadata = { "name" : "ElementType",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVACalcObjectElem),) }
    @ElementType.setter
    def ElementType(self, inVal:"AgEVACalcObjectElem") -> None:
        return self._intf.set_property(IAgVAStateCalcSolarInPlaneAngle._metadata, IAgVAStateCalcSolarInPlaneAngle._set_ElementType_metadata, inVal)

    _get_ReferenceSelection_metadata = { "name" : "ReferenceSelection",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVACalcObjectReference),) }
    @property
    def ReferenceSelection(self) -> "AgEVACalcObjectReference":
        """The reference object selection."""
        return self._intf.get_property(IAgVAStateCalcSolarInPlaneAngle._metadata, IAgVAStateCalcSolarInPlaneAngle._get_ReferenceSelection_metadata)

    _set_ReferenceSelection_metadata = { "name" : "ReferenceSelection",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVACalcObjectReference),) }
    @ReferenceSelection.setter
    def ReferenceSelection(self, inVal:"AgEVACalcObjectReference") -> None:
        return self._intf.set_property(IAgVAStateCalcSolarInPlaneAngle._metadata, IAgVAStateCalcSolarInPlaneAngle._set_ReferenceSelection_metadata, inVal)

    _get_Reference_metadata = { "name" : "Reference",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def Reference(self) -> "IAgLinkToObject":
        """The reference object."""
        return self._intf.get_property(IAgVAStateCalcSolarInPlaneAngle._metadata, IAgVAStateCalcSolarInPlaneAngle._get_Reference_metadata)

    _get_SunPosition_metadata = { "name" : "SunPosition",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVACalcObjectSunPosition),) }
    @property
    def SunPosition(self) -> "AgEVACalcObjectSunPosition":
        """The type of the Sun location."""
        return self._intf.get_property(IAgVAStateCalcSolarInPlaneAngle._metadata, IAgVAStateCalcSolarInPlaneAngle._get_SunPosition_metadata)

    _set_SunPosition_metadata = { "name" : "SunPosition",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVACalcObjectSunPosition),) }
    @SunPosition.setter
    def SunPosition(self, inVal:"AgEVACalcObjectSunPosition") -> None:
        return self._intf.set_property(IAgVAStateCalcSolarInPlaneAngle._metadata, IAgVAStateCalcSolarInPlaneAngle._set_SunPosition_metadata, inVal)

    _get_CounterClockwiseRotation_metadata = { "name" : "CounterClockwiseRotation",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVACalcObjectAngleSign),) }
    @property
    def CounterClockwiseRotation(self) -> "AgEVACalcObjectAngleSign":
        """Sets sign of the angle for counterclockwise rotation about orbit normal."""
        return self._intf.get_property(IAgVAStateCalcSolarInPlaneAngle._metadata, IAgVAStateCalcSolarInPlaneAngle._get_CounterClockwiseRotation_metadata)

    _set_CounterClockwiseRotation_metadata = { "name" : "CounterClockwiseRotation",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVACalcObjectAngleSign),) }
    @CounterClockwiseRotation.setter
    def CounterClockwiseRotation(self, inVal:"AgEVACalcObjectAngleSign") -> None:
        return self._intf.set_property(IAgVAStateCalcSolarInPlaneAngle._metadata, IAgVAStateCalcSolarInPlaneAngle._set_CounterClockwiseRotation_metadata, inVal)

    _get_ReferenceDirection_metadata = { "name" : "ReferenceDirection",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVACalcObjectReferenceDirection),) }
    @property
    def ReferenceDirection(self) -> "AgEVACalcObjectReferenceDirection":
        """Direction that establishes the zero value when projected into the orbit plane."""
        return self._intf.get_property(IAgVAStateCalcSolarInPlaneAngle._metadata, IAgVAStateCalcSolarInPlaneAngle._get_ReferenceDirection_metadata)

    _set_ReferenceDirection_metadata = { "name" : "ReferenceDirection",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVACalcObjectReferenceDirection),) }
    @ReferenceDirection.setter
    def ReferenceDirection(self, inVal:"AgEVACalcObjectReferenceDirection") -> None:
        return self._intf.set_property(IAgVAStateCalcSolarInPlaneAngle._metadata, IAgVAStateCalcSolarInPlaneAngle._set_ReferenceDirection_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{08345343-C64C-4CAF-B1C4-EE76DC4917B5}", IAgVAStateCalcSolarInPlaneAngle)
agcls.AgTypeNameMap["IAgVAStateCalcSolarInPlaneAngle"] = IAgVAStateCalcSolarInPlaneAngle

class IAgVAStateCalcRelPosDecAngle(object):
    """Properties for a Relative Position Declination Angle calculation object."""
    _num_methods = 13
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{259D6521-23C1-48B4-A718-27AB113952E9}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_CentralBodyName" : 1,
                             "set_CentralBodyName" : 2,
                             "get_OrbitPlaneSource" : 3,
                             "set_OrbitPlaneSource" : 4,
                             "get_ElementType" : 5,
                             "set_ElementType" : 6,
                             "get_ReferenceSelection" : 7,
                             "set_ReferenceSelection" : 8,
                             "get_Reference" : 9,
                             "get_RelativePositionType" : 10,
                             "set_RelativePositionType" : 11,
                             "get_SignConvention" : 12,
                             "set_SignConvention" : 13, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAStateCalcRelPosDecAngle._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcRelPosDecAngle from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcRelPosDecAngle.__dict__ and type(IAgVAStateCalcRelPosDecAngle.__dict__[attrname]) == property:
            return IAgVAStateCalcRelPosDecAngle.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcRelPosDecAngle.")
    
    _get_CentralBodyName_metadata = { "name" : "CentralBodyName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def CentralBodyName(self) -> str:
        """The central body of the component."""
        return self._intf.get_property(IAgVAStateCalcRelPosDecAngle._metadata, IAgVAStateCalcRelPosDecAngle._get_CentralBodyName_metadata)

    _set_CentralBodyName_metadata = { "name" : "CentralBodyName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @CentralBodyName.setter
    def CentralBodyName(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAStateCalcRelPosDecAngle._metadata, IAgVAStateCalcRelPosDecAngle._set_CentralBodyName_metadata, inVal)

    _get_OrbitPlaneSource_metadata = { "name" : "OrbitPlaneSource",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVACalcObjectOrbitPlaneSource),) }
    @property
    def OrbitPlaneSource(self) -> "AgEVACalcObjectOrbitPlaneSource":
        """Selection of the satellite that will generate the orbit plane."""
        return self._intf.get_property(IAgVAStateCalcRelPosDecAngle._metadata, IAgVAStateCalcRelPosDecAngle._get_OrbitPlaneSource_metadata)

    _set_OrbitPlaneSource_metadata = { "name" : "OrbitPlaneSource",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVACalcObjectOrbitPlaneSource),) }
    @OrbitPlaneSource.setter
    def OrbitPlaneSource(self, inVal:"AgEVACalcObjectOrbitPlaneSource") -> None:
        return self._intf.set_property(IAgVAStateCalcRelPosDecAngle._metadata, IAgVAStateCalcRelPosDecAngle._set_OrbitPlaneSource_metadata, inVal)

    _get_ElementType_metadata = { "name" : "ElementType",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVACalcObjectElem),) }
    @property
    def ElementType(self) -> "AgEVACalcObjectElem":
        """Choice of osculating or mean elements"""
        return self._intf.get_property(IAgVAStateCalcRelPosDecAngle._metadata, IAgVAStateCalcRelPosDecAngle._get_ElementType_metadata)

    _set_ElementType_metadata = { "name" : "ElementType",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVACalcObjectElem),) }
    @ElementType.setter
    def ElementType(self, inVal:"AgEVACalcObjectElem") -> None:
        return self._intf.set_property(IAgVAStateCalcRelPosDecAngle._metadata, IAgVAStateCalcRelPosDecAngle._set_ElementType_metadata, inVal)

    _get_ReferenceSelection_metadata = { "name" : "ReferenceSelection",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVACalcObjectReference),) }
    @property
    def ReferenceSelection(self) -> "AgEVACalcObjectReference":
        """The reference object selection."""
        return self._intf.get_property(IAgVAStateCalcRelPosDecAngle._metadata, IAgVAStateCalcRelPosDecAngle._get_ReferenceSelection_metadata)

    _set_ReferenceSelection_metadata = { "name" : "ReferenceSelection",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVACalcObjectReference),) }
    @ReferenceSelection.setter
    def ReferenceSelection(self, inVal:"AgEVACalcObjectReference") -> None:
        return self._intf.set_property(IAgVAStateCalcRelPosDecAngle._metadata, IAgVAStateCalcRelPosDecAngle._set_ReferenceSelection_metadata, inVal)

    _get_Reference_metadata = { "name" : "Reference",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def Reference(self) -> "IAgLinkToObject":
        """The reference object."""
        return self._intf.get_property(IAgVAStateCalcRelPosDecAngle._metadata, IAgVAStateCalcRelPosDecAngle._get_Reference_metadata)

    _get_RelativePositionType_metadata = { "name" : "RelativePositionType",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVACalcObjectRelativePosition),) }
    @property
    def RelativePositionType(self) -> "AgEVACalcObjectRelativePosition":
        """The type of the relative position."""
        return self._intf.get_property(IAgVAStateCalcRelPosDecAngle._metadata, IAgVAStateCalcRelPosDecAngle._get_RelativePositionType_metadata)

    _set_RelativePositionType_metadata = { "name" : "RelativePositionType",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVACalcObjectRelativePosition),) }
    @RelativePositionType.setter
    def RelativePositionType(self, inVal:"AgEVACalcObjectRelativePosition") -> None:
        return self._intf.set_property(IAgVAStateCalcRelPosDecAngle._metadata, IAgVAStateCalcRelPosDecAngle._set_RelativePositionType_metadata, inVal)

    _get_SignConvention_metadata = { "name" : "SignConvention",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVACalcObjectAngleSign),) }
    @property
    def SignConvention(self) -> "AgEVACalcObjectAngleSign":
        """Sets the sign of the angle when the relative position has a positive component along the orbit normal."""
        return self._intf.get_property(IAgVAStateCalcRelPosDecAngle._metadata, IAgVAStateCalcRelPosDecAngle._get_SignConvention_metadata)

    _set_SignConvention_metadata = { "name" : "SignConvention",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVACalcObjectAngleSign),) }
    @SignConvention.setter
    def SignConvention(self, inVal:"AgEVACalcObjectAngleSign") -> None:
        return self._intf.set_property(IAgVAStateCalcRelPosDecAngle._metadata, IAgVAStateCalcRelPosDecAngle._set_SignConvention_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{259D6521-23C1-48B4-A718-27AB113952E9}", IAgVAStateCalcRelPosDecAngle)
agcls.AgTypeNameMap["IAgVAStateCalcRelPosDecAngle"] = IAgVAStateCalcRelPosDecAngle

class IAgVAStateCalcRelPosInPlaneAngle(object):
    """Properties for a Relative Position In Plane Angle calculation object."""
    _num_methods = 15
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{E00BF049-7F38-4938-986F-8AB987CE84D2}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_CentralBodyName" : 1,
                             "set_CentralBodyName" : 2,
                             "get_OrbitPlaneSource" : 3,
                             "set_OrbitPlaneSource" : 4,
                             "get_ElementType" : 5,
                             "set_ElementType" : 6,
                             "get_ReferenceSelection" : 7,
                             "set_ReferenceSelection" : 8,
                             "get_Reference" : 9,
                             "get_RelativePositionType" : 10,
                             "set_RelativePositionType" : 11,
                             "get_CounterClockwiseRotation" : 12,
                             "set_CounterClockwiseRotation" : 13,
                             "get_ReferenceDirection" : 14,
                             "set_ReferenceDirection" : 15, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAStateCalcRelPosInPlaneAngle._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcRelPosInPlaneAngle from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcRelPosInPlaneAngle.__dict__ and type(IAgVAStateCalcRelPosInPlaneAngle.__dict__[attrname]) == property:
            return IAgVAStateCalcRelPosInPlaneAngle.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcRelPosInPlaneAngle.")
    
    _get_CentralBodyName_metadata = { "name" : "CentralBodyName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def CentralBodyName(self) -> str:
        """The central body of the component."""
        return self._intf.get_property(IAgVAStateCalcRelPosInPlaneAngle._metadata, IAgVAStateCalcRelPosInPlaneAngle._get_CentralBodyName_metadata)

    _set_CentralBodyName_metadata = { "name" : "CentralBodyName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @CentralBodyName.setter
    def CentralBodyName(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAStateCalcRelPosInPlaneAngle._metadata, IAgVAStateCalcRelPosInPlaneAngle._set_CentralBodyName_metadata, inVal)

    _get_OrbitPlaneSource_metadata = { "name" : "OrbitPlaneSource",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVACalcObjectOrbitPlaneSource),) }
    @property
    def OrbitPlaneSource(self) -> "AgEVACalcObjectOrbitPlaneSource":
        """Selection of the satellite that will generate the orbit plane."""
        return self._intf.get_property(IAgVAStateCalcRelPosInPlaneAngle._metadata, IAgVAStateCalcRelPosInPlaneAngle._get_OrbitPlaneSource_metadata)

    _set_OrbitPlaneSource_metadata = { "name" : "OrbitPlaneSource",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVACalcObjectOrbitPlaneSource),) }
    @OrbitPlaneSource.setter
    def OrbitPlaneSource(self, inVal:"AgEVACalcObjectOrbitPlaneSource") -> None:
        return self._intf.set_property(IAgVAStateCalcRelPosInPlaneAngle._metadata, IAgVAStateCalcRelPosInPlaneAngle._set_OrbitPlaneSource_metadata, inVal)

    _get_ElementType_metadata = { "name" : "ElementType",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVACalcObjectElem),) }
    @property
    def ElementType(self) -> "AgEVACalcObjectElem":
        """Choice of osculating or mean elements"""
        return self._intf.get_property(IAgVAStateCalcRelPosInPlaneAngle._metadata, IAgVAStateCalcRelPosInPlaneAngle._get_ElementType_metadata)

    _set_ElementType_metadata = { "name" : "ElementType",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVACalcObjectElem),) }
    @ElementType.setter
    def ElementType(self, inVal:"AgEVACalcObjectElem") -> None:
        return self._intf.set_property(IAgVAStateCalcRelPosInPlaneAngle._metadata, IAgVAStateCalcRelPosInPlaneAngle._set_ElementType_metadata, inVal)

    _get_ReferenceSelection_metadata = { "name" : "ReferenceSelection",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVACalcObjectReference),) }
    @property
    def ReferenceSelection(self) -> "AgEVACalcObjectReference":
        """The reference object selection."""
        return self._intf.get_property(IAgVAStateCalcRelPosInPlaneAngle._metadata, IAgVAStateCalcRelPosInPlaneAngle._get_ReferenceSelection_metadata)

    _set_ReferenceSelection_metadata = { "name" : "ReferenceSelection",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVACalcObjectReference),) }
    @ReferenceSelection.setter
    def ReferenceSelection(self, inVal:"AgEVACalcObjectReference") -> None:
        return self._intf.set_property(IAgVAStateCalcRelPosInPlaneAngle._metadata, IAgVAStateCalcRelPosInPlaneAngle._set_ReferenceSelection_metadata, inVal)

    _get_Reference_metadata = { "name" : "Reference",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def Reference(self) -> "IAgLinkToObject":
        """The reference object."""
        return self._intf.get_property(IAgVAStateCalcRelPosInPlaneAngle._metadata, IAgVAStateCalcRelPosInPlaneAngle._get_Reference_metadata)

    _get_RelativePositionType_metadata = { "name" : "RelativePositionType",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVACalcObjectRelativePosition),) }
    @property
    def RelativePositionType(self) -> "AgEVACalcObjectRelativePosition":
        """The type of the relative position."""
        return self._intf.get_property(IAgVAStateCalcRelPosInPlaneAngle._metadata, IAgVAStateCalcRelPosInPlaneAngle._get_RelativePositionType_metadata)

    _set_RelativePositionType_metadata = { "name" : "RelativePositionType",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVACalcObjectRelativePosition),) }
    @RelativePositionType.setter
    def RelativePositionType(self, inVal:"AgEVACalcObjectRelativePosition") -> None:
        return self._intf.set_property(IAgVAStateCalcRelPosInPlaneAngle._metadata, IAgVAStateCalcRelPosInPlaneAngle._set_RelativePositionType_metadata, inVal)

    _get_CounterClockwiseRotation_metadata = { "name" : "CounterClockwiseRotation",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVACalcObjectAngleSign),) }
    @property
    def CounterClockwiseRotation(self) -> "AgEVACalcObjectAngleSign":
        """Sets sign of the angle for counterclockwise rotation about orbit normal."""
        return self._intf.get_property(IAgVAStateCalcRelPosInPlaneAngle._metadata, IAgVAStateCalcRelPosInPlaneAngle._get_CounterClockwiseRotation_metadata)

    _set_CounterClockwiseRotation_metadata = { "name" : "CounterClockwiseRotation",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVACalcObjectAngleSign),) }
    @CounterClockwiseRotation.setter
    def CounterClockwiseRotation(self, inVal:"AgEVACalcObjectAngleSign") -> None:
        return self._intf.set_property(IAgVAStateCalcRelPosInPlaneAngle._metadata, IAgVAStateCalcRelPosInPlaneAngle._set_CounterClockwiseRotation_metadata, inVal)

    _get_ReferenceDirection_metadata = { "name" : "ReferenceDirection",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVACalcObjectReferenceDirection),) }
    @property
    def ReferenceDirection(self) -> "AgEVACalcObjectReferenceDirection":
        """Direction that establishes the zero value when projected into the orbit plane."""
        return self._intf.get_property(IAgVAStateCalcRelPosInPlaneAngle._metadata, IAgVAStateCalcRelPosInPlaneAngle._get_ReferenceDirection_metadata)

    _set_ReferenceDirection_metadata = { "name" : "ReferenceDirection",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVACalcObjectReferenceDirection),) }
    @ReferenceDirection.setter
    def ReferenceDirection(self, inVal:"AgEVACalcObjectReferenceDirection") -> None:
        return self._intf.set_property(IAgVAStateCalcRelPosInPlaneAngle._metadata, IAgVAStateCalcRelPosInPlaneAngle._set_ReferenceDirection_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{E00BF049-7F38-4938-986F-8AB987CE84D2}", IAgVAStateCalcRelPosInPlaneAngle)
agcls.AgTypeNameMap["IAgVAStateCalcRelPosInPlaneAngle"] = IAgVAStateCalcRelPosInPlaneAngle

class IAgVAStateCalcRelativeInclination(object):
    """Properties for a Relative Inclination Angle calculation object."""
    _num_methods = 9
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{D0299E22-99A9-4FEF-82B3-A1A7E9B9C3C1}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_CentralBodyName" : 1,
                             "set_CentralBodyName" : 2,
                             "get_SatelliteOrbitNormalType" : 3,
                             "set_SatelliteOrbitNormalType" : 4,
                             "get_RefSatelliteOrbitNormalType" : 5,
                             "set_RefSatelliteOrbitNormalType" : 6,
                             "get_ReferenceSelection" : 7,
                             "set_ReferenceSelection" : 8,
                             "get_Reference" : 9, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAStateCalcRelativeInclination._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcRelativeInclination from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcRelativeInclination.__dict__ and type(IAgVAStateCalcRelativeInclination.__dict__[attrname]) == property:
            return IAgVAStateCalcRelativeInclination.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcRelativeInclination.")
    
    _get_CentralBodyName_metadata = { "name" : "CentralBodyName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def CentralBodyName(self) -> str:
        """The central body of the component."""
        return self._intf.get_property(IAgVAStateCalcRelativeInclination._metadata, IAgVAStateCalcRelativeInclination._get_CentralBodyName_metadata)

    _set_CentralBodyName_metadata = { "name" : "CentralBodyName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @CentralBodyName.setter
    def CentralBodyName(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAStateCalcRelativeInclination._metadata, IAgVAStateCalcRelativeInclination._set_CentralBodyName_metadata, inVal)

    _get_SatelliteOrbitNormalType_metadata = { "name" : "SatelliteOrbitNormalType",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVACalcObjectElem),) }
    @property
    def SatelliteOrbitNormalType(self) -> "AgEVACalcObjectElem":
        """Choice of osculating or mean elements for describing the orbit plane."""
        return self._intf.get_property(IAgVAStateCalcRelativeInclination._metadata, IAgVAStateCalcRelativeInclination._get_SatelliteOrbitNormalType_metadata)

    _set_SatelliteOrbitNormalType_metadata = { "name" : "SatelliteOrbitNormalType",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVACalcObjectElem),) }
    @SatelliteOrbitNormalType.setter
    def SatelliteOrbitNormalType(self, inVal:"AgEVACalcObjectElem") -> None:
        return self._intf.set_property(IAgVAStateCalcRelativeInclination._metadata, IAgVAStateCalcRelativeInclination._set_SatelliteOrbitNormalType_metadata, inVal)

    _get_RefSatelliteOrbitNormalType_metadata = { "name" : "RefSatelliteOrbitNormalType",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVACalcObjectElem),) }
    @property
    def RefSatelliteOrbitNormalType(self) -> "AgEVACalcObjectElem":
        """Choice of osculating or mean elements for describing the orbit plane"""
        return self._intf.get_property(IAgVAStateCalcRelativeInclination._metadata, IAgVAStateCalcRelativeInclination._get_RefSatelliteOrbitNormalType_metadata)

    _set_RefSatelliteOrbitNormalType_metadata = { "name" : "RefSatelliteOrbitNormalType",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVACalcObjectElem),) }
    @RefSatelliteOrbitNormalType.setter
    def RefSatelliteOrbitNormalType(self, inVal:"AgEVACalcObjectElem") -> None:
        return self._intf.set_property(IAgVAStateCalcRelativeInclination._metadata, IAgVAStateCalcRelativeInclination._set_RefSatelliteOrbitNormalType_metadata, inVal)

    _get_ReferenceSelection_metadata = { "name" : "ReferenceSelection",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVACalcObjectReference),) }
    @property
    def ReferenceSelection(self) -> "AgEVACalcObjectReference":
        """The reference object selection."""
        return self._intf.get_property(IAgVAStateCalcRelativeInclination._metadata, IAgVAStateCalcRelativeInclination._get_ReferenceSelection_metadata)

    _set_ReferenceSelection_metadata = { "name" : "ReferenceSelection",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVACalcObjectReference),) }
    @ReferenceSelection.setter
    def ReferenceSelection(self, inVal:"AgEVACalcObjectReference") -> None:
        return self._intf.set_property(IAgVAStateCalcRelativeInclination._metadata, IAgVAStateCalcRelativeInclination._set_ReferenceSelection_metadata, inVal)

    _get_Reference_metadata = { "name" : "Reference",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def Reference(self) -> "IAgLinkToObject":
        """The reference object."""
        return self._intf.get_property(IAgVAStateCalcRelativeInclination._metadata, IAgVAStateCalcRelativeInclination._get_Reference_metadata)


agcls.AgClassCatalog.add_catalog_entry("{D0299E22-99A9-4FEF-82B3-A1A7E9B9C3C1}", IAgVAStateCalcRelativeInclination)
agcls.AgTypeNameMap["IAgVAStateCalcRelativeInclination"] = IAgVAStateCalcRelativeInclination

class IAgVAStateCalcCurvilinearRelMotion(object):
    """Properties for Curvilinear Relative Motion  calculation object."""
    _num_methods = 13
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{5658DCFF-6F7B-4935-BA41-135F502DDC07}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_CentralBodyName" : 1,
                             "set_CentralBodyName" : 2,
                             "get_ReferenceEllipse" : 3,
                             "set_ReferenceEllipse" : 4,
                             "get_LocationSource" : 5,
                             "set_LocationSource" : 6,
                             "get_ReferenceSelection" : 7,
                             "set_ReferenceSelection" : 8,
                             "get_Reference" : 9,
                             "get_ElementType" : 10,
                             "set_ElementType" : 11,
                             "get_SignConvention" : 12,
                             "set_SignConvention" : 13, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAStateCalcCurvilinearRelMotion._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcCurvilinearRelMotion from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcCurvilinearRelMotion.__dict__ and type(IAgVAStateCalcCurvilinearRelMotion.__dict__[attrname]) == property:
            return IAgVAStateCalcCurvilinearRelMotion.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcCurvilinearRelMotion.")
    
    _get_CentralBodyName_metadata = { "name" : "CentralBodyName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def CentralBodyName(self) -> str:
        """The central body of the component."""
        return self._intf.get_property(IAgVAStateCalcCurvilinearRelMotion._metadata, IAgVAStateCalcCurvilinearRelMotion._get_CentralBodyName_metadata)

    _set_CentralBodyName_metadata = { "name" : "CentralBodyName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @CentralBodyName.setter
    def CentralBodyName(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAStateCalcCurvilinearRelMotion._metadata, IAgVAStateCalcCurvilinearRelMotion._set_CentralBodyName_metadata, inVal)

    _get_ReferenceEllipse_metadata = { "name" : "ReferenceEllipse",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVACalcObjectReferenceEllipse),) }
    @property
    def ReferenceEllipse(self) -> "AgEVACalcObjectReferenceEllipse":
        """Selection of the satellite orbit that is used as the reference ellipse."""
        return self._intf.get_property(IAgVAStateCalcCurvilinearRelMotion._metadata, IAgVAStateCalcCurvilinearRelMotion._get_ReferenceEllipse_metadata)

    _set_ReferenceEllipse_metadata = { "name" : "ReferenceEllipse",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVACalcObjectReferenceEllipse),) }
    @ReferenceEllipse.setter
    def ReferenceEllipse(self, inVal:"AgEVACalcObjectReferenceEllipse") -> None:
        return self._intf.set_property(IAgVAStateCalcCurvilinearRelMotion._metadata, IAgVAStateCalcCurvilinearRelMotion._set_ReferenceEllipse_metadata, inVal)

    _get_LocationSource_metadata = { "name" : "LocationSource",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVACalcObjectLocationSource),) }
    @property
    def LocationSource(self) -> "AgEVACalcObjectLocationSource":
        """Selection of the satellite whose location is being reported with respect to the reference ellipse."""
        return self._intf.get_property(IAgVAStateCalcCurvilinearRelMotion._metadata, IAgVAStateCalcCurvilinearRelMotion._get_LocationSource_metadata)

    _set_LocationSource_metadata = { "name" : "LocationSource",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVACalcObjectLocationSource),) }
    @LocationSource.setter
    def LocationSource(self, inVal:"AgEVACalcObjectLocationSource") -> None:
        return self._intf.set_property(IAgVAStateCalcCurvilinearRelMotion._metadata, IAgVAStateCalcCurvilinearRelMotion._set_LocationSource_metadata, inVal)

    _get_ReferenceSelection_metadata = { "name" : "ReferenceSelection",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVACalcObjectReference),) }
    @property
    def ReferenceSelection(self) -> "AgEVACalcObjectReference":
        """The reference object selection."""
        return self._intf.get_property(IAgVAStateCalcCurvilinearRelMotion._metadata, IAgVAStateCalcCurvilinearRelMotion._get_ReferenceSelection_metadata)

    _set_ReferenceSelection_metadata = { "name" : "ReferenceSelection",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVACalcObjectReference),) }
    @ReferenceSelection.setter
    def ReferenceSelection(self, inVal:"AgEVACalcObjectReference") -> None:
        return self._intf.set_property(IAgVAStateCalcCurvilinearRelMotion._metadata, IAgVAStateCalcCurvilinearRelMotion._set_ReferenceSelection_metadata, inVal)

    _get_Reference_metadata = { "name" : "Reference",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def Reference(self) -> "IAgLinkToObject":
        """The reference object."""
        return self._intf.get_property(IAgVAStateCalcCurvilinearRelMotion._metadata, IAgVAStateCalcCurvilinearRelMotion._get_Reference_metadata)

    _get_ElementType_metadata = { "name" : "ElementType",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVACalcObjectElem),) }
    @property
    def ElementType(self) -> "AgEVACalcObjectElem":
        """Choice of osculating or mean elements"""
        return self._intf.get_property(IAgVAStateCalcCurvilinearRelMotion._metadata, IAgVAStateCalcCurvilinearRelMotion._get_ElementType_metadata)

    _set_ElementType_metadata = { "name" : "ElementType",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVACalcObjectElem),) }
    @ElementType.setter
    def ElementType(self, inVal:"AgEVACalcObjectElem") -> None:
        return self._intf.set_property(IAgVAStateCalcCurvilinearRelMotion._metadata, IAgVAStateCalcCurvilinearRelMotion._set_ElementType_metadata, inVal)

    _get_SignConvention_metadata = { "name" : "SignConvention",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVACalcObjectAngleSign),) }
    @property
    def SignConvention(self) -> "AgEVACalcObjectAngleSign":
        """Sets the sign of the angle when the relative position has a positive component along the orbit normal."""
        return self._intf.get_property(IAgVAStateCalcCurvilinearRelMotion._metadata, IAgVAStateCalcCurvilinearRelMotion._get_SignConvention_metadata)

    _set_SignConvention_metadata = { "name" : "SignConvention",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVACalcObjectAngleSign),) }
    @SignConvention.setter
    def SignConvention(self, inVal:"AgEVACalcObjectAngleSign") -> None:
        return self._intf.set_property(IAgVAStateCalcCurvilinearRelMotion._metadata, IAgVAStateCalcCurvilinearRelMotion._set_SignConvention_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{5658DCFF-6F7B-4935-BA41-135F502DDC07}", IAgVAStateCalcCurvilinearRelMotion)
agcls.AgTypeNameMap["IAgVAStateCalcCurvilinearRelMotion"] = IAgVAStateCalcCurvilinearRelMotion

class IAgVAStateCalcCustomFunction(object):
    """Properties for a Custom Function calculation object."""
    _num_methods = 6
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{0943C88D-EE8E-48B1-8C5B-79A4748452C8}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_ResetFunctionName" : 1,
                             "set_ResetFunctionName" : 2,
                             "get_EvalFunctionName" : 3,
                             "set_EvalFunctionName" : 4,
                             "get_UnitDimension" : 5,
                             "set_UnitDimension" : 6, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAStateCalcCustomFunction._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcCustomFunction from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcCustomFunction.__dict__ and type(IAgVAStateCalcCustomFunction.__dict__[attrname]) == property:
            return IAgVAStateCalcCustomFunction.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcCustomFunction.")
    
    _get_ResetFunctionName_metadata = { "name" : "ResetFunctionName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def ResetFunctionName(self) -> str:
        """The custom function called before computing, before each segment runs, and before reporting."""
        return self._intf.get_property(IAgVAStateCalcCustomFunction._metadata, IAgVAStateCalcCustomFunction._get_ResetFunctionName_metadata)

    _set_ResetFunctionName_metadata = { "name" : "ResetFunctionName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @ResetFunctionName.setter
    def ResetFunctionName(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAStateCalcCustomFunction._metadata, IAgVAStateCalcCustomFunction._set_ResetFunctionName_metadata, inVal)

    _get_EvalFunctionName_metadata = { "name" : "EvalFunctionName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def EvalFunctionName(self) -> str:
        """The custom function used to calculate this object's value."""
        return self._intf.get_property(IAgVAStateCalcCustomFunction._metadata, IAgVAStateCalcCustomFunction._get_EvalFunctionName_metadata)

    _set_EvalFunctionName_metadata = { "name" : "EvalFunctionName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @EvalFunctionName.setter
    def EvalFunctionName(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAStateCalcCustomFunction._metadata, IAgVAStateCalcCustomFunction._set_EvalFunctionName_metadata, inVal)

    _get_UnitDimension_metadata = { "name" : "UnitDimension",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def UnitDimension(self) -> str:
        """The unit dimension."""
        return self._intf.get_property(IAgVAStateCalcCustomFunction._metadata, IAgVAStateCalcCustomFunction._get_UnitDimension_metadata)

    _set_UnitDimension_metadata = { "name" : "UnitDimension",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @UnitDimension.setter
    def UnitDimension(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAStateCalcCustomFunction._metadata, IAgVAStateCalcCustomFunction._set_UnitDimension_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{0943C88D-EE8E-48B1-8C5B-79A4748452C8}", IAgVAStateCalcCustomFunction)
agcls.AgTypeNameMap["IAgVAStateCalcCustomFunction"] = IAgVAStateCalcCustomFunction

class IAgVAStateCalcScript(object):
    """Properties for a Script calculation object."""
    _num_methods = 6
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{42A2EAD1-9982-4895-9637-4C83524F2A02}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_CalcArguments" : 1,
                             "get_InlineFunc" : 2,
                             "set_InlineFunc" : 3,
                             "get_UnitDimension" : 4,
                             "set_UnitDimension" : 5,
                             "get_CalcArgumentsLinkEmbed" : 6, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAStateCalcScript._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcScript from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcScript.__dict__ and type(IAgVAStateCalcScript.__dict__[attrname]) == property:
            return IAgVAStateCalcScript.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcScript.")
    
    _get_CalcArguments_metadata = { "name" : "CalcArguments",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def CalcArguments(self) -> "IAgVACalcObjectCollection":
        """The arguments to be applied to the function."""
        return self._intf.get_property(IAgVAStateCalcScript._metadata, IAgVAStateCalcScript._get_CalcArguments_metadata)

    _get_InlineFunc_metadata = { "name" : "InlineFunc",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def InlineFunc(self) -> str:
        """The expression to be applied as a function."""
        return self._intf.get_property(IAgVAStateCalcScript._metadata, IAgVAStateCalcScript._get_InlineFunc_metadata)

    _set_InlineFunc_metadata = { "name" : "InlineFunc",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @InlineFunc.setter
    def InlineFunc(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAStateCalcScript._metadata, IAgVAStateCalcScript._set_InlineFunc_metadata, inVal)

    _get_UnitDimension_metadata = { "name" : "UnitDimension",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def UnitDimension(self) -> str:
        """The unit dimension."""
        return self._intf.get_property(IAgVAStateCalcScript._metadata, IAgVAStateCalcScript._get_UnitDimension_metadata)

    _set_UnitDimension_metadata = { "name" : "UnitDimension",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @UnitDimension.setter
    def UnitDimension(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAStateCalcScript._metadata, IAgVAStateCalcScript._set_UnitDimension_metadata, inVal)

    _get_CalcArgumentsLinkEmbed_metadata = { "name" : "CalcArgumentsLinkEmbed",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def CalcArgumentsLinkEmbed(self) -> "IAgVACalcObjectLinkEmbedControlCollection":
        """The arguments to be applied to the function."""
        return self._intf.get_property(IAgVAStateCalcScript._metadata, IAgVAStateCalcScript._get_CalcArgumentsLinkEmbed_metadata)


agcls.AgClassCatalog.add_catalog_entry("{42A2EAD1-9982-4895-9637-4C83524F2A02}", IAgVAStateCalcScript)
agcls.AgTypeNameMap["IAgVAStateCalcScript"] = IAgVAStateCalcScript

class IAgVAStateCalcCd(object):
    """Properties for a Cd calculation object."""
    _num_methods = 0
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{18430B84-59EA-4D47-84B4-E7D5589F1931}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : {  }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAStateCalcCd._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcCd from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcCd.__dict__ and type(IAgVAStateCalcCd.__dict__[attrname]) == property:
            return IAgVAStateCalcCd.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcCd.")
    

agcls.AgClassCatalog.add_catalog_entry("{18430B84-59EA-4D47-84B4-E7D5589F1931}", IAgVAStateCalcCd)
agcls.AgTypeNameMap["IAgVAStateCalcCd"] = IAgVAStateCalcCd

class IAgVAStateCalcCr(object):
    """Properties for a Cr calculation object."""
    _num_methods = 0
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{BC4AD651-BFCA-4E69-8409-54BB0880F9E6}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : {  }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAStateCalcCr._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcCr from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcCr.__dict__ and type(IAgVAStateCalcCr.__dict__[attrname]) == property:
            return IAgVAStateCalcCr.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcCr.")
    

agcls.AgClassCatalog.add_catalog_entry("{BC4AD651-BFCA-4E69-8409-54BB0880F9E6}", IAgVAStateCalcCr)
agcls.AgTypeNameMap["IAgVAStateCalcCr"] = IAgVAStateCalcCr

class IAgVAStateCalcDragArea(object):
    """Properties for a DragArea calculation object. CAgAsStateCalcDragArea"""
    _num_methods = 0
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{0D264D3F-4409-4CF7-95AD-0129F85F2A72}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : {  }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAStateCalcDragArea._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcDragArea from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcDragArea.__dict__ and type(IAgVAStateCalcDragArea.__dict__[attrname]) == property:
            return IAgVAStateCalcDragArea.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcDragArea.")
    

agcls.AgClassCatalog.add_catalog_entry("{0D264D3F-4409-4CF7-95AD-0129F85F2A72}", IAgVAStateCalcDragArea)
agcls.AgTypeNameMap["IAgVAStateCalcDragArea"] = IAgVAStateCalcDragArea

class IAgVAStateCalcRadiationPressureArea(object):
    """Properties for a RadPressureArea calculation object."""
    _num_methods = 0
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{F6C33B19-2B4F-4DBB-8CA0-B3E8B971BC49}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : {  }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAStateCalcRadiationPressureArea._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcRadiationPressureArea from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcRadiationPressureArea.__dict__ and type(IAgVAStateCalcRadiationPressureArea.__dict__[attrname]) == property:
            return IAgVAStateCalcRadiationPressureArea.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcRadiationPressureArea.")
    

agcls.AgClassCatalog.add_catalog_entry("{F6C33B19-2B4F-4DBB-8CA0-B3E8B971BC49}", IAgVAStateCalcRadiationPressureArea)
agcls.AgTypeNameMap["IAgVAStateCalcRadiationPressureArea"] = IAgVAStateCalcRadiationPressureArea

class IAgVAStateCalcRadiationPressureCoefficient(object):
    """Properties for a RadiationPressureCoefficient calculation object."""
    _num_methods = 0
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{9AE54040-18D2-46FC-A12C-C03BDA65FE22}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : {  }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAStateCalcRadiationPressureCoefficient._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcRadiationPressureCoefficient from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcRadiationPressureCoefficient.__dict__ and type(IAgVAStateCalcRadiationPressureCoefficient.__dict__[attrname]) == property:
            return IAgVAStateCalcRadiationPressureCoefficient.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcRadiationPressureCoefficient.")
    

agcls.AgClassCatalog.add_catalog_entry("{9AE54040-18D2-46FC-A12C-C03BDA65FE22}", IAgVAStateCalcRadiationPressureCoefficient)
agcls.AgTypeNameMap["IAgVAStateCalcRadiationPressureCoefficient"] = IAgVAStateCalcRadiationPressureCoefficient

class IAgVAStateCalcSRPArea(object):
    """Properties for an SRPArea calculation object."""
    _num_methods = 0
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{776A4C17-4D73-4ED0-A564-E9BD0D1788EC}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : {  }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAStateCalcSRPArea._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcSRPArea from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcSRPArea.__dict__ and type(IAgVAStateCalcSRPArea.__dict__[attrname]) == property:
            return IAgVAStateCalcSRPArea.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcSRPArea.")
    

agcls.AgClassCatalog.add_catalog_entry("{776A4C17-4D73-4ED0-A564-E9BD0D1788EC}", IAgVAStateCalcSRPArea)
agcls.AgTypeNameMap["IAgVAStateCalcSRPArea"] = IAgVAStateCalcSRPArea

class IAgVAStateCalcCosOfVerticalFPA(object):
    """Properties for a Cosine of Vertical FPA calculation object."""
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{D2C32FFB-6C5C-46E8-B386-2E69262118C8}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_CentralBodyName" : 1,
                             "set_CentralBodyName" : 2, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAStateCalcCosOfVerticalFPA._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcCosOfVerticalFPA from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcCosOfVerticalFPA.__dict__ and type(IAgVAStateCalcCosOfVerticalFPA.__dict__[attrname]) == property:
            return IAgVAStateCalcCosOfVerticalFPA.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcCosOfVerticalFPA.")
    
    _get_CentralBodyName_metadata = { "name" : "CentralBodyName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def CentralBodyName(self) -> str:
        """The central body of the component."""
        return self._intf.get_property(IAgVAStateCalcCosOfVerticalFPA._metadata, IAgVAStateCalcCosOfVerticalFPA._get_CentralBodyName_metadata)

    _set_CentralBodyName_metadata = { "name" : "CentralBodyName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @CentralBodyName.setter
    def CentralBodyName(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAStateCalcCosOfVerticalFPA._metadata, IAgVAStateCalcCosOfVerticalFPA._set_CentralBodyName_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{D2C32FFB-6C5C-46E8-B386-2E69262118C8}", IAgVAStateCalcCosOfVerticalFPA)
agcls.AgTypeNameMap["IAgVAStateCalcCosOfVerticalFPA"] = IAgVAStateCalcCosOfVerticalFPA

class IAgVAStateCalcDec(object):
    """Properties for a Declination calculation object."""
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{B3277FB5-1B7A-4A02-91B1-F6682F29CB87}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_CoordSystemName" : 1,
                             "set_CoordSystemName" : 2, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAStateCalcDec._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcDec from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcDec.__dict__ and type(IAgVAStateCalcDec.__dict__[attrname]) == property:
            return IAgVAStateCalcDec.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcDec.")
    
    _get_CoordSystemName_metadata = { "name" : "CoordSystemName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def CoordSystemName(self) -> str:
        """The coordinate system within which the element is defined."""
        return self._intf.get_property(IAgVAStateCalcDec._metadata, IAgVAStateCalcDec._get_CoordSystemName_metadata)

    _set_CoordSystemName_metadata = { "name" : "CoordSystemName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @CoordSystemName.setter
    def CoordSystemName(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAStateCalcDec._metadata, IAgVAStateCalcDec._set_CoordSystemName_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{B3277FB5-1B7A-4A02-91B1-F6682F29CB87}", IAgVAStateCalcDec)
agcls.AgTypeNameMap["IAgVAStateCalcDec"] = IAgVAStateCalcDec

class IAgVAStateCalcFPA(object):
    """Properties for a Flight Path Angle calculation object."""
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{0A7406E7-049A-4054-A1FE-3E86D1998733}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_CoordSystemName" : 1,
                             "set_CoordSystemName" : 2, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAStateCalcFPA._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcFPA from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcFPA.__dict__ and type(IAgVAStateCalcFPA.__dict__[attrname]) == property:
            return IAgVAStateCalcFPA.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcFPA.")
    
    _get_CoordSystemName_metadata = { "name" : "CoordSystemName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def CoordSystemName(self) -> str:
        """The coordinate system within which the element is defined."""
        return self._intf.get_property(IAgVAStateCalcFPA._metadata, IAgVAStateCalcFPA._get_CoordSystemName_metadata)

    _set_CoordSystemName_metadata = { "name" : "CoordSystemName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @CoordSystemName.setter
    def CoordSystemName(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAStateCalcFPA._metadata, IAgVAStateCalcFPA._set_CoordSystemName_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{0A7406E7-049A-4054-A1FE-3E86D1998733}", IAgVAStateCalcFPA)
agcls.AgTypeNameMap["IAgVAStateCalcFPA"] = IAgVAStateCalcFPA

class IAgVAStateCalcRMag(object):
    """Properties for an R Mag calculation object. AsStateCalcRMag"""
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{3E6FAE70-AA94-4036-9FBA-75954E96D759}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_ReferencePointName" : 1,
                             "set_ReferencePointName" : 2, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAStateCalcRMag._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcRMag from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcRMag.__dict__ and type(IAgVAStateCalcRMag.__dict__[attrname]) == property:
            return IAgVAStateCalcRMag.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcRMag.")
    
    _get_ReferencePointName_metadata = { "name" : "ReferencePointName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def ReferencePointName(self) -> str:
        """Reference point used for calculation."""
        return self._intf.get_property(IAgVAStateCalcRMag._metadata, IAgVAStateCalcRMag._get_ReferencePointName_metadata)

    _set_ReferencePointName_metadata = { "name" : "ReferencePointName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @ReferencePointName.setter
    def ReferencePointName(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAStateCalcRMag._metadata, IAgVAStateCalcRMag._set_ReferencePointName_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{3E6FAE70-AA94-4036-9FBA-75954E96D759}", IAgVAStateCalcRMag)
agcls.AgTypeNameMap["IAgVAStateCalcRMag"] = IAgVAStateCalcRMag

class IAgVAStateCalcRA(object):
    """Properties for a Right Asc calculation object."""
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{3D404DD1-E609-4CA0-87BE-3D9EDD9A7BCE}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_CoordSystemName" : 1,
                             "set_CoordSystemName" : 2, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAStateCalcRA._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcRA from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcRA.__dict__ and type(IAgVAStateCalcRA.__dict__[attrname]) == property:
            return IAgVAStateCalcRA.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcRA.")
    
    _get_CoordSystemName_metadata = { "name" : "CoordSystemName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def CoordSystemName(self) -> str:
        """The coordinate system within which the element is defined."""
        return self._intf.get_property(IAgVAStateCalcRA._metadata, IAgVAStateCalcRA._get_CoordSystemName_metadata)

    _set_CoordSystemName_metadata = { "name" : "CoordSystemName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @CoordSystemName.setter
    def CoordSystemName(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAStateCalcRA._metadata, IAgVAStateCalcRA._set_CoordSystemName_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{3D404DD1-E609-4CA0-87BE-3D9EDD9A7BCE}", IAgVAStateCalcRA)
agcls.AgTypeNameMap["IAgVAStateCalcRA"] = IAgVAStateCalcRA

class IAgVAStateCalcVMag(object):
    """Properties for a V Mag calculation object."""
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{6795C6E5-3D87-42A9-A40F-DAFEDA08235B}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_CoordSystemName" : 1,
                             "set_CoordSystemName" : 2, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAStateCalcVMag._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcVMag from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcVMag.__dict__ and type(IAgVAStateCalcVMag.__dict__[attrname]) == property:
            return IAgVAStateCalcVMag.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcVMag.")
    
    _get_CoordSystemName_metadata = { "name" : "CoordSystemName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def CoordSystemName(self) -> str:
        """The coordinate system within which the element is defined."""
        return self._intf.get_property(IAgVAStateCalcVMag._metadata, IAgVAStateCalcVMag._get_CoordSystemName_metadata)

    _set_CoordSystemName_metadata = { "name" : "CoordSystemName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @CoordSystemName.setter
    def CoordSystemName(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAStateCalcVMag._metadata, IAgVAStateCalcVMag._set_CoordSystemName_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{6795C6E5-3D87-42A9-A40F-DAFEDA08235B}", IAgVAStateCalcVMag)
agcls.AgTypeNameMap["IAgVAStateCalcVMag"] = IAgVAStateCalcVMag

class IAgVAStateCalcVelAz(object):
    """Properties for a Velocity Azimuth calculation object."""
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{5B86F143-59CB-4014-A920-7F46613F2FB5}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_CoordSystemName" : 1,
                             "set_CoordSystemName" : 2, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAStateCalcVelAz._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcVelAz from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcVelAz.__dict__ and type(IAgVAStateCalcVelAz.__dict__[attrname]) == property:
            return IAgVAStateCalcVelAz.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcVelAz.")
    
    _get_CoordSystemName_metadata = { "name" : "CoordSystemName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def CoordSystemName(self) -> str:
        """The coordinate system within which the element is defined."""
        return self._intf.get_property(IAgVAStateCalcVelAz._metadata, IAgVAStateCalcVelAz._get_CoordSystemName_metadata)

    _set_CoordSystemName_metadata = { "name" : "CoordSystemName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @CoordSystemName.setter
    def CoordSystemName(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAStateCalcVelAz._metadata, IAgVAStateCalcVelAz._set_CoordSystemName_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{5B86F143-59CB-4014-A920-7F46613F2FB5}", IAgVAStateCalcVelAz)
agcls.AgTypeNameMap["IAgVAStateCalcVelAz"] = IAgVAStateCalcVelAz

class IAgVAStateCalcC3Energy(object):
    """Properties for a C3 Energy calculation object."""
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{23937635-E460-428B-90CC-2EAA1C51870B}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_CentralBodyName" : 1,
                             "set_CentralBodyName" : 2,
                             "get_ElementType" : 3,
                             "set_ElementType" : 4, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAStateCalcC3Energy._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcC3Energy from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcC3Energy.__dict__ and type(IAgVAStateCalcC3Energy.__dict__[attrname]) == property:
            return IAgVAStateCalcC3Energy.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcC3Energy.")
    
    _get_CentralBodyName_metadata = { "name" : "CentralBodyName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def CentralBodyName(self) -> str:
        """The central body of the component."""
        return self._intf.get_property(IAgVAStateCalcC3Energy._metadata, IAgVAStateCalcC3Energy._get_CentralBodyName_metadata)

    _set_CentralBodyName_metadata = { "name" : "CentralBodyName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @CentralBodyName.setter
    def CentralBodyName(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAStateCalcC3Energy._metadata, IAgVAStateCalcC3Energy._set_CentralBodyName_metadata, inVal)

    _get_ElementType_metadata = { "name" : "ElementType",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVACalcObjectElem),) }
    @property
    def ElementType(self) -> "AgEVACalcObjectElem":
        """The element type - osculating or a mean type."""
        return self._intf.get_property(IAgVAStateCalcC3Energy._metadata, IAgVAStateCalcC3Energy._get_ElementType_metadata)

    _set_ElementType_metadata = { "name" : "ElementType",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVACalcObjectElem),) }
    @ElementType.setter
    def ElementType(self, inVal:"AgEVACalcObjectElem") -> None:
        return self._intf.set_property(IAgVAStateCalcC3Energy._metadata, IAgVAStateCalcC3Energy._set_ElementType_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{23937635-E460-428B-90CC-2EAA1C51870B}", IAgVAStateCalcC3Energy)
agcls.AgTypeNameMap["IAgVAStateCalcC3Energy"] = IAgVAStateCalcC3Energy

class IAgVAStateCalcInAsympDec(object):
    """Properties for an Incoming Asymptote Dec calculation object."""
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{BE07A06D-B79A-45C7-A460-A2D22467F1CF}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_CoordSystemName" : 1,
                             "set_CoordSystemName" : 2, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAStateCalcInAsympDec._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcInAsympDec from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcInAsympDec.__dict__ and type(IAgVAStateCalcInAsympDec.__dict__[attrname]) == property:
            return IAgVAStateCalcInAsympDec.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcInAsympDec.")
    
    _get_CoordSystemName_metadata = { "name" : "CoordSystemName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def CoordSystemName(self) -> str:
        """The coordinate system within which the element is defined."""
        return self._intf.get_property(IAgVAStateCalcInAsympDec._metadata, IAgVAStateCalcInAsympDec._get_CoordSystemName_metadata)

    _set_CoordSystemName_metadata = { "name" : "CoordSystemName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @CoordSystemName.setter
    def CoordSystemName(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAStateCalcInAsympDec._metadata, IAgVAStateCalcInAsympDec._set_CoordSystemName_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{BE07A06D-B79A-45C7-A460-A2D22467F1CF}", IAgVAStateCalcInAsympDec)
agcls.AgTypeNameMap["IAgVAStateCalcInAsympDec"] = IAgVAStateCalcInAsympDec

class IAgVAStateCalcInAsympRA(object):
    """Properties for a Incoming Asymptote RA calculation object."""
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{732CE68C-1443-4C38-A037-BD228DD1DD50}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_CoordSystemName" : 1,
                             "set_CoordSystemName" : 2, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAStateCalcInAsympRA._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcInAsympRA from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcInAsympRA.__dict__ and type(IAgVAStateCalcInAsympRA.__dict__[attrname]) == property:
            return IAgVAStateCalcInAsympRA.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcInAsympRA.")
    
    _get_CoordSystemName_metadata = { "name" : "CoordSystemName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def CoordSystemName(self) -> str:
        """The coordinate system within which the element is defined."""
        return self._intf.get_property(IAgVAStateCalcInAsympRA._metadata, IAgVAStateCalcInAsympRA._get_CoordSystemName_metadata)

    _set_CoordSystemName_metadata = { "name" : "CoordSystemName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @CoordSystemName.setter
    def CoordSystemName(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAStateCalcInAsympRA._metadata, IAgVAStateCalcInAsympRA._set_CoordSystemName_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{732CE68C-1443-4C38-A037-BD228DD1DD50}", IAgVAStateCalcInAsympRA)
agcls.AgTypeNameMap["IAgVAStateCalcInAsympRA"] = IAgVAStateCalcInAsympRA

class IAgVAStateCalcInVelAzAtPeriapsis(object):
    """Properties for an Incoming Vel Az at Periapsis calculation object."""
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{10C8047E-4366-4951-A479-BEB44FE74322}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_CoordSystemName" : 1,
                             "set_CoordSystemName" : 2, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAStateCalcInVelAzAtPeriapsis._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcInVelAzAtPeriapsis from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcInVelAzAtPeriapsis.__dict__ and type(IAgVAStateCalcInVelAzAtPeriapsis.__dict__[attrname]) == property:
            return IAgVAStateCalcInVelAzAtPeriapsis.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcInVelAzAtPeriapsis.")
    
    _get_CoordSystemName_metadata = { "name" : "CoordSystemName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def CoordSystemName(self) -> str:
        """The coordinate system within which the element is defined."""
        return self._intf.get_property(IAgVAStateCalcInVelAzAtPeriapsis._metadata, IAgVAStateCalcInVelAzAtPeriapsis._get_CoordSystemName_metadata)

    _set_CoordSystemName_metadata = { "name" : "CoordSystemName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @CoordSystemName.setter
    def CoordSystemName(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAStateCalcInVelAzAtPeriapsis._metadata, IAgVAStateCalcInVelAzAtPeriapsis._set_CoordSystemName_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{10C8047E-4366-4951-A479-BEB44FE74322}", IAgVAStateCalcInVelAzAtPeriapsis)
agcls.AgTypeNameMap["IAgVAStateCalcInVelAzAtPeriapsis"] = IAgVAStateCalcInVelAzAtPeriapsis

class IAgVAStateCalcOutAsympDec(object):
    """Properties for a Outgoing Asymptote Dec calculation object."""
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{0DB1FF5A-2DA1-4472-A3DF-52B52989E27B}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_CoordSystemName" : 1,
                             "set_CoordSystemName" : 2, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAStateCalcOutAsympDec._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcOutAsympDec from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcOutAsympDec.__dict__ and type(IAgVAStateCalcOutAsympDec.__dict__[attrname]) == property:
            return IAgVAStateCalcOutAsympDec.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcOutAsympDec.")
    
    _get_CoordSystemName_metadata = { "name" : "CoordSystemName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def CoordSystemName(self) -> str:
        """The coordinate system within which the element is defined."""
        return self._intf.get_property(IAgVAStateCalcOutAsympDec._metadata, IAgVAStateCalcOutAsympDec._get_CoordSystemName_metadata)

    _set_CoordSystemName_metadata = { "name" : "CoordSystemName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @CoordSystemName.setter
    def CoordSystemName(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAStateCalcOutAsympDec._metadata, IAgVAStateCalcOutAsympDec._set_CoordSystemName_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{0DB1FF5A-2DA1-4472-A3DF-52B52989E27B}", IAgVAStateCalcOutAsympDec)
agcls.AgTypeNameMap["IAgVAStateCalcOutAsympDec"] = IAgVAStateCalcOutAsympDec

class IAgVAStateCalcOutAsympRA(object):
    """Properties for a Outgoing Asymptote RA calculation object."""
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{F2386148-5F54-40D2-91DD-322B912712B3}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_CoordSystemName" : 1,
                             "set_CoordSystemName" : 2, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAStateCalcOutAsympRA._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcOutAsympRA from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcOutAsympRA.__dict__ and type(IAgVAStateCalcOutAsympRA.__dict__[attrname]) == property:
            return IAgVAStateCalcOutAsympRA.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcOutAsympRA.")
    
    _get_CoordSystemName_metadata = { "name" : "CoordSystemName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def CoordSystemName(self) -> str:
        """The coordinate system within which the element is defined."""
        return self._intf.get_property(IAgVAStateCalcOutAsympRA._metadata, IAgVAStateCalcOutAsympRA._get_CoordSystemName_metadata)

    _set_CoordSystemName_metadata = { "name" : "CoordSystemName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @CoordSystemName.setter
    def CoordSystemName(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAStateCalcOutAsympRA._metadata, IAgVAStateCalcOutAsympRA._set_CoordSystemName_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{F2386148-5F54-40D2-91DD-322B912712B3}", IAgVAStateCalcOutAsympRA)
agcls.AgTypeNameMap["IAgVAStateCalcOutAsympRA"] = IAgVAStateCalcOutAsympRA

class IAgVAStateCalcOutVelAzAtPeriapsis(object):
    """Properties for a Outgoing Vel Az at Periapsis calculation object."""
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{F908643D-9C89-4EDF-B45F-948B9303F260}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_CoordSystemName" : 1,
                             "set_CoordSystemName" : 2, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAStateCalcOutVelAzAtPeriapsis._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcOutVelAzAtPeriapsis from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcOutVelAzAtPeriapsis.__dict__ and type(IAgVAStateCalcOutVelAzAtPeriapsis.__dict__[attrname]) == property:
            return IAgVAStateCalcOutVelAzAtPeriapsis.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcOutVelAzAtPeriapsis.")
    
    _get_CoordSystemName_metadata = { "name" : "CoordSystemName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def CoordSystemName(self) -> str:
        """The coordinate system within which the element is defined."""
        return self._intf.get_property(IAgVAStateCalcOutVelAzAtPeriapsis._metadata, IAgVAStateCalcOutVelAzAtPeriapsis._get_CoordSystemName_metadata)

    _set_CoordSystemName_metadata = { "name" : "CoordSystemName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @CoordSystemName.setter
    def CoordSystemName(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAStateCalcOutVelAzAtPeriapsis._metadata, IAgVAStateCalcOutVelAzAtPeriapsis._set_CoordSystemName_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{F908643D-9C89-4EDF-B45F-948B9303F260}", IAgVAStateCalcOutVelAzAtPeriapsis)
agcls.AgTypeNameMap["IAgVAStateCalcOutVelAzAtPeriapsis"] = IAgVAStateCalcOutVelAzAtPeriapsis

class IAgVAStateCalcDuration(object):
    """Properties for a Duration calculation object."""
    _num_methods = 0
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{429E860D-8706-4C30-9F40-B0113E00BAF8}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : {  }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAStateCalcDuration._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcDuration from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcDuration.__dict__ and type(IAgVAStateCalcDuration.__dict__[attrname]) == property:
            return IAgVAStateCalcDuration.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcDuration.")
    

agcls.AgClassCatalog.add_catalog_entry("{429E860D-8706-4C30-9F40-B0113E00BAF8}", IAgVAStateCalcDuration)
agcls.AgTypeNameMap["IAgVAStateCalcDuration"] = IAgVAStateCalcDuration

class IAgVAStateCalcUserValue(object):
    """Interface for CAgAsStateCalcUserValue"""
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{BB517244-9226-45E2-9048-9D4E289BA920}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_VariableName" : 1,
                             "set_VariableName" : 2, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAStateCalcUserValue._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcUserValue from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcUserValue.__dict__ and type(IAgVAStateCalcUserValue.__dict__[attrname]) == property:
            return IAgVAStateCalcUserValue.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcUserValue.")
    
    _get_VariableName_metadata = { "name" : "VariableName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def VariableName(self) -> str:
        """Name of the user variable"""
        return self._intf.get_property(IAgVAStateCalcUserValue._metadata, IAgVAStateCalcUserValue._get_VariableName_metadata)

    _set_VariableName_metadata = { "name" : "VariableName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @VariableName.setter
    def VariableName(self, inVal:str) -> None:
        """Name of the user variable"""
        return self._intf.set_property(IAgVAStateCalcUserValue._metadata, IAgVAStateCalcUserValue._set_VariableName_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{BB517244-9226-45E2-9048-9D4E289BA920}", IAgVAStateCalcUserValue)
agcls.AgTypeNameMap["IAgVAStateCalcUserValue"] = IAgVAStateCalcUserValue

class IAgVAStateCalcCrdnAngle(object):
    """Properties for an Vector Geometry Tool Angle calculation object."""
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{7EC926A3-7ED6-4091-9E74-EBA5700075A5}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_AngleName" : 1,
                             "set_AngleName" : 2, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAStateCalcCrdnAngle._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcCrdnAngle from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcCrdnAngle.__dict__ and type(IAgVAStateCalcCrdnAngle.__dict__[attrname]) == property:
            return IAgVAStateCalcCrdnAngle.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcCrdnAngle.")
    
    _get_AngleName_metadata = { "name" : "AngleName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def AngleName(self) -> str:
        """The angle."""
        return self._intf.get_property(IAgVAStateCalcCrdnAngle._metadata, IAgVAStateCalcCrdnAngle._get_AngleName_metadata)

    _set_AngleName_metadata = { "name" : "AngleName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @AngleName.setter
    def AngleName(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAStateCalcCrdnAngle._metadata, IAgVAStateCalcCrdnAngle._set_AngleName_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{7EC926A3-7ED6-4091-9E74-EBA5700075A5}", IAgVAStateCalcCrdnAngle)
agcls.AgTypeNameMap["IAgVAStateCalcCrdnAngle"] = IAgVAStateCalcCrdnAngle

class IAgVAStateCalcAngle(object):
    """Properties for an Angle Between Vectors calculation object."""
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{E703F5BA-3C07-407B-8BE6-5361172E97FF}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_Vector1Name" : 1,
                             "set_Vector1Name" : 2,
                             "get_Vector2Name" : 3,
                             "set_Vector2Name" : 4, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAStateCalcAngle._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcAngle from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcAngle.__dict__ and type(IAgVAStateCalcAngle.__dict__[attrname]) == property:
            return IAgVAStateCalcAngle.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcAngle.")
    
    _get_Vector1Name_metadata = { "name" : "Vector1Name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def Vector1Name(self) -> str:
        """The first vector of the angle."""
        return self._intf.get_property(IAgVAStateCalcAngle._metadata, IAgVAStateCalcAngle._get_Vector1Name_metadata)

    _set_Vector1Name_metadata = { "name" : "Vector1Name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @Vector1Name.setter
    def Vector1Name(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAStateCalcAngle._metadata, IAgVAStateCalcAngle._set_Vector1Name_metadata, inVal)

    _get_Vector2Name_metadata = { "name" : "Vector2Name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def Vector2Name(self) -> str:
        """The second vector of the angle."""
        return self._intf.get_property(IAgVAStateCalcAngle._metadata, IAgVAStateCalcAngle._get_Vector2Name_metadata)

    _set_Vector2Name_metadata = { "name" : "Vector2Name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @Vector2Name.setter
    def Vector2Name(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAStateCalcAngle._metadata, IAgVAStateCalcAngle._set_Vector2Name_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{E703F5BA-3C07-407B-8BE6-5361172E97FF}", IAgVAStateCalcAngle)
agcls.AgTypeNameMap["IAgVAStateCalcAngle"] = IAgVAStateCalcAngle

class IAgVAStateCalcDotProduct(object):
    """Properties for a Dot Product calculation object."""
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{8B3C8283-79EC-48D1-BFBD-66775AA10803}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_Vector1Name" : 1,
                             "set_Vector1Name" : 2,
                             "get_Vector2Name" : 3,
                             "set_Vector2Name" : 4, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAStateCalcDotProduct._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcDotProduct from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcDotProduct.__dict__ and type(IAgVAStateCalcDotProduct.__dict__[attrname]) == property:
            return IAgVAStateCalcDotProduct.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcDotProduct.")
    
    _get_Vector1Name_metadata = { "name" : "Vector1Name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def Vector1Name(self) -> str:
        """The first vector."""
        return self._intf.get_property(IAgVAStateCalcDotProduct._metadata, IAgVAStateCalcDotProduct._get_Vector1Name_metadata)

    _set_Vector1Name_metadata = { "name" : "Vector1Name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @Vector1Name.setter
    def Vector1Name(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAStateCalcDotProduct._metadata, IAgVAStateCalcDotProduct._set_Vector1Name_metadata, inVal)

    _get_Vector2Name_metadata = { "name" : "Vector2Name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def Vector2Name(self) -> str:
        """The second vector."""
        return self._intf.get_property(IAgVAStateCalcDotProduct._metadata, IAgVAStateCalcDotProduct._get_Vector2Name_metadata)

    _set_Vector2Name_metadata = { "name" : "Vector2Name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @Vector2Name.setter
    def Vector2Name(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAStateCalcDotProduct._metadata, IAgVAStateCalcDotProduct._set_Vector2Name_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{8B3C8283-79EC-48D1-BFBD-66775AA10803}", IAgVAStateCalcDotProduct)
agcls.AgTypeNameMap["IAgVAStateCalcDotProduct"] = IAgVAStateCalcDotProduct

class IAgVAStateCalcVectorDec(object):
    """Properties for a Vector Dec calculation object."""
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{5709E392-CEF3-4D83-BC2C-FD3F67EE363F}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_CoordAxesName" : 1,
                             "set_CoordAxesName" : 2,
                             "get_VectorName" : 3,
                             "set_VectorName" : 4, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAStateCalcVectorDec._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcVectorDec from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcVectorDec.__dict__ and type(IAgVAStateCalcVectorDec.__dict__[attrname]) == property:
            return IAgVAStateCalcVectorDec.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcVectorDec.")
    
    _get_CoordAxesName_metadata = { "name" : "CoordAxesName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def CoordAxesName(self) -> str:
        """The coordinate axes."""
        return self._intf.get_property(IAgVAStateCalcVectorDec._metadata, IAgVAStateCalcVectorDec._get_CoordAxesName_metadata)

    _set_CoordAxesName_metadata = { "name" : "CoordAxesName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @CoordAxesName.setter
    def CoordAxesName(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAStateCalcVectorDec._metadata, IAgVAStateCalcVectorDec._set_CoordAxesName_metadata, inVal)

    _get_VectorName_metadata = { "name" : "VectorName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def VectorName(self) -> str:
        """The vector."""
        return self._intf.get_property(IAgVAStateCalcVectorDec._metadata, IAgVAStateCalcVectorDec._get_VectorName_metadata)

    _set_VectorName_metadata = { "name" : "VectorName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @VectorName.setter
    def VectorName(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAStateCalcVectorDec._metadata, IAgVAStateCalcVectorDec._set_VectorName_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{5709E392-CEF3-4D83-BC2C-FD3F67EE363F}", IAgVAStateCalcVectorDec)
agcls.AgTypeNameMap["IAgVAStateCalcVectorDec"] = IAgVAStateCalcVectorDec

class IAgVAStateCalcVectorMag(object):
    """Properties for a Vector Mag calculation object."""
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{522AF5A3-02FE-49E3-931A-3E8234EF896F}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_VectorName" : 1,
                             "set_VectorName" : 2,
                             "get_UnitDimension" : 3,
                             "set_UnitDimension" : 4, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAStateCalcVectorMag._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcVectorMag from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcVectorMag.__dict__ and type(IAgVAStateCalcVectorMag.__dict__[attrname]) == property:
            return IAgVAStateCalcVectorMag.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcVectorMag.")
    
    _get_VectorName_metadata = { "name" : "VectorName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def VectorName(self) -> str:
        """The vector."""
        return self._intf.get_property(IAgVAStateCalcVectorMag._metadata, IAgVAStateCalcVectorMag._get_VectorName_metadata)

    _set_VectorName_metadata = { "name" : "VectorName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @VectorName.setter
    def VectorName(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAStateCalcVectorMag._metadata, IAgVAStateCalcVectorMag._set_VectorName_metadata, inVal)

    _get_UnitDimension_metadata = { "name" : "UnitDimension",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def UnitDimension(self) -> str:
        """The unit dimension."""
        return self._intf.get_property(IAgVAStateCalcVectorMag._metadata, IAgVAStateCalcVectorMag._get_UnitDimension_metadata)

    _set_UnitDimension_metadata = { "name" : "UnitDimension",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @UnitDimension.setter
    def UnitDimension(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAStateCalcVectorMag._metadata, IAgVAStateCalcVectorMag._set_UnitDimension_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{522AF5A3-02FE-49E3-931A-3E8234EF896F}", IAgVAStateCalcVectorMag)
agcls.AgTypeNameMap["IAgVAStateCalcVectorMag"] = IAgVAStateCalcVectorMag

class IAgVAStateCalcVectorRA(object):
    """Properties for a Vector RA calculation object."""
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{E6AF6E11-F9BC-46E0-83C0-ACD79B45B4AD}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_CoordAxesName" : 1,
                             "set_CoordAxesName" : 2,
                             "get_VectorName" : 3,
                             "set_VectorName" : 4, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAStateCalcVectorRA._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcVectorRA from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcVectorRA.__dict__ and type(IAgVAStateCalcVectorRA.__dict__[attrname]) == property:
            return IAgVAStateCalcVectorRA.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcVectorRA.")
    
    _get_CoordAxesName_metadata = { "name" : "CoordAxesName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def CoordAxesName(self) -> str:
        """The coordinate axes."""
        return self._intf.get_property(IAgVAStateCalcVectorRA._metadata, IAgVAStateCalcVectorRA._get_CoordAxesName_metadata)

    _set_CoordAxesName_metadata = { "name" : "CoordAxesName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @CoordAxesName.setter
    def CoordAxesName(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAStateCalcVectorRA._metadata, IAgVAStateCalcVectorRA._set_CoordAxesName_metadata, inVal)

    _get_VectorName_metadata = { "name" : "VectorName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def VectorName(self) -> str:
        """The vector."""
        return self._intf.get_property(IAgVAStateCalcVectorRA._metadata, IAgVAStateCalcVectorRA._get_VectorName_metadata)

    _set_VectorName_metadata = { "name" : "VectorName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @VectorName.setter
    def VectorName(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAStateCalcVectorRA._metadata, IAgVAStateCalcVectorRA._set_VectorName_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{E6AF6E11-F9BC-46E0-83C0-ACD79B45B4AD}", IAgVAStateCalcVectorRA)
agcls.AgTypeNameMap["IAgVAStateCalcVectorRA"] = IAgVAStateCalcVectorRA

class IAgVAStateCalcOnePtAccess(object):
    """Properties for an Access calculation object."""
    _num_methods = 14
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{EE091E20-3104-48F9-8163-29272A8B81C8}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_AberrationType" : 1,
                             "set_AberrationType" : 2,
                             "SetBaseSelection" : 3,
                             "get_BaseSelectionType" : 4,
                             "get_BaseSelection" : 5,
                             "get_ClockHost" : 6,
                             "set_ClockHost" : 7,
                             "get_SignalSense" : 8,
                             "set_SignalSense" : 9,
                             "get_TargetObject" : 10,
                             "get_TimeDelayConvergenceTolerance" : 11,
                             "set_TimeDelayConvergenceTolerance" : 12,
                             "get_UseLightTimeDelay" : 13,
                             "set_UseLightTimeDelay" : 14, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAStateCalcOnePtAccess._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcOnePtAccess from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcOnePtAccess.__dict__ and type(IAgVAStateCalcOnePtAccess.__dict__[attrname]) == property:
            return IAgVAStateCalcOnePtAccess.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcOnePtAccess.")
    
    _get_AberrationType_metadata = { "name" : "AberrationType",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAberrationType),) }
    @property
    def AberrationType(self) -> "AgEAberrationType":
        """The type of aberration to use, if light time delay is applied."""
        return self._intf.get_property(IAgVAStateCalcOnePtAccess._metadata, IAgVAStateCalcOnePtAccess._get_AberrationType_metadata)

    _set_AberrationType_metadata = { "name" : "AberrationType",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEAberrationType),) }
    @AberrationType.setter
    def AberrationType(self, inVal:"AgEAberrationType") -> None:
        return self._intf.set_property(IAgVAStateCalcOnePtAccess._metadata, IAgVAStateCalcOnePtAccess._set_AberrationType_metadata, inVal)

    _SetBaseSelection_metadata = { "name" : "SetBaseSelection",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVABaseSelection),) }
    def SetBaseSelection(self, selection:"AgEVABaseSelection") -> None:
        """Base Selection"""
        return self._intf.invoke(IAgVAStateCalcOnePtAccess._metadata, IAgVAStateCalcOnePtAccess._SetBaseSelection_metadata, selection)

    _get_BaseSelectionType_metadata = { "name" : "BaseSelectionType",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVABaseSelection),) }
    @property
    def BaseSelectionType(self) -> "AgEVABaseSelection":
        """The base selection type."""
        return self._intf.get_property(IAgVAStateCalcOnePtAccess._metadata, IAgVAStateCalcOnePtAccess._get_BaseSelectionType_metadata)

    _get_BaseSelection_metadata = { "name" : "BaseSelection",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def BaseSelection(self) -> "IAgLinkToObject":
        """The base selection object."""
        return self._intf.get_property(IAgVAStateCalcOnePtAccess._metadata, IAgVAStateCalcOnePtAccess._get_BaseSelection_metadata)

    _get_ClockHost_metadata = { "name" : "ClockHost",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEIvClockHost),) }
    @property
    def ClockHost(self) -> "AgEIvClockHost":
        """The object whose location is associated with time."""
        return self._intf.get_property(IAgVAStateCalcOnePtAccess._metadata, IAgVAStateCalcOnePtAccess._get_ClockHost_metadata)

    _set_ClockHost_metadata = { "name" : "ClockHost",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEIvClockHost),) }
    @ClockHost.setter
    def ClockHost(self, inVal:"AgEIvClockHost") -> None:
        return self._intf.set_property(IAgVAStateCalcOnePtAccess._metadata, IAgVAStateCalcOnePtAccess._set_ClockHost_metadata, inVal)

    _get_SignalSense_metadata = { "name" : "SignalSense",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEIvTimeSense),) }
    @property
    def SignalSense(self) -> "AgEIvTimeSense":
        """Sense of the signal at the base object."""
        return self._intf.get_property(IAgVAStateCalcOnePtAccess._metadata, IAgVAStateCalcOnePtAccess._get_SignalSense_metadata)

    _set_SignalSense_metadata = { "name" : "SignalSense",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEIvTimeSense),) }
    @SignalSense.setter
    def SignalSense(self, inVal:"AgEIvTimeSense") -> None:
        return self._intf.set_property(IAgVAStateCalcOnePtAccess._metadata, IAgVAStateCalcOnePtAccess._set_SignalSense_metadata, inVal)

    _get_TargetObject_metadata = { "name" : "TargetObject",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def TargetObject(self) -> "IAgLinkToObject":
        """The target object."""
        return self._intf.get_property(IAgVAStateCalcOnePtAccess._metadata, IAgVAStateCalcOnePtAccess._get_TargetObject_metadata)

    _get_TimeDelayConvergenceTolerance_metadata = { "name" : "TimeDelayConvergenceTolerance",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def TimeDelayConvergenceTolerance(self) -> float:
        """The time delay convergence tolerance, if light time delay is applied. Uses Time Dimension."""
        return self._intf.get_property(IAgVAStateCalcOnePtAccess._metadata, IAgVAStateCalcOnePtAccess._get_TimeDelayConvergenceTolerance_metadata)

    _set_TimeDelayConvergenceTolerance_metadata = { "name" : "TimeDelayConvergenceTolerance",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @TimeDelayConvergenceTolerance.setter
    def TimeDelayConvergenceTolerance(self, inVal:float) -> None:
        return self._intf.set_property(IAgVAStateCalcOnePtAccess._metadata, IAgVAStateCalcOnePtAccess._set_TimeDelayConvergenceTolerance_metadata, inVal)

    _get_UseLightTimeDelay_metadata = { "name" : "UseLightTimeDelay",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def UseLightTimeDelay(self) -> bool:
        """Tue if light time delay is applied."""
        return self._intf.get_property(IAgVAStateCalcOnePtAccess._metadata, IAgVAStateCalcOnePtAccess._get_UseLightTimeDelay_metadata)

    _set_UseLightTimeDelay_metadata = { "name" : "UseLightTimeDelay",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @UseLightTimeDelay.setter
    def UseLightTimeDelay(self, inVal:bool) -> None:
        return self._intf.set_property(IAgVAStateCalcOnePtAccess._metadata, IAgVAStateCalcOnePtAccess._set_UseLightTimeDelay_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{EE091E20-3104-48F9-8163-29272A8B81C8}", IAgVAStateCalcOnePtAccess)
agcls.AgTypeNameMap["IAgVAStateCalcOnePtAccess"] = IAgVAStateCalcOnePtAccess

class IAgVAStateCalcDifferenceAcrossSegmentsOtherSat(object):
    """Properties for a Difference Across Segments Across Satellites calculation object."""
    _num_methods = 9
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{C5C0E056-EC28-4D88-A55F-6BA6D2F2976E}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_CalcObjectName" : 1,
                             "set_CalcObjectName" : 2,
                             "get_OtherSegmentName" : 3,
                             "set_OtherSegmentName" : 4,
                             "get_SegmentStateToUse" : 5,
                             "set_SegmentStateToUse" : 6,
                             "get_DifferenceOrder" : 7,
                             "set_DifferenceOrder" : 8,
                             "get_ReferenceSat" : 9, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAStateCalcDifferenceAcrossSegmentsOtherSat._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcDifferenceAcrossSegmentsOtherSat from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcDifferenceAcrossSegmentsOtherSat.__dict__ and type(IAgVAStateCalcDifferenceAcrossSegmentsOtherSat.__dict__[attrname]) == property:
            return IAgVAStateCalcDifferenceAcrossSegmentsOtherSat.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcDifferenceAcrossSegmentsOtherSat.")
    
    _get_CalcObjectName_metadata = { "name" : "CalcObjectName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def CalcObjectName(self) -> str:
        """The calculation object."""
        return self._intf.get_property(IAgVAStateCalcDifferenceAcrossSegmentsOtherSat._metadata, IAgVAStateCalcDifferenceAcrossSegmentsOtherSat._get_CalcObjectName_metadata)

    _set_CalcObjectName_metadata = { "name" : "CalcObjectName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @CalcObjectName.setter
    def CalcObjectName(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAStateCalcDifferenceAcrossSegmentsOtherSat._metadata, IAgVAStateCalcDifferenceAcrossSegmentsOtherSat._set_CalcObjectName_metadata, inVal)

    _get_OtherSegmentName_metadata = { "name" : "OtherSegmentName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def OtherSegmentName(self) -> str:
        """The segment to be compared against."""
        return self._intf.get_property(IAgVAStateCalcDifferenceAcrossSegmentsOtherSat._metadata, IAgVAStateCalcDifferenceAcrossSegmentsOtherSat._get_OtherSegmentName_metadata)

    _set_OtherSegmentName_metadata = { "name" : "OtherSegmentName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @OtherSegmentName.setter
    def OtherSegmentName(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAStateCalcDifferenceAcrossSegmentsOtherSat._metadata, IAgVAStateCalcDifferenceAcrossSegmentsOtherSat._set_OtherSegmentName_metadata, inVal)

    _get_SegmentStateToUse_metadata = { "name" : "SegmentStateToUse",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVASegmentState),) }
    @property
    def SegmentStateToUse(self) -> "AgEVASegmentState":
        """The segment state to use in the calculation."""
        return self._intf.get_property(IAgVAStateCalcDifferenceAcrossSegmentsOtherSat._metadata, IAgVAStateCalcDifferenceAcrossSegmentsOtherSat._get_SegmentStateToUse_metadata)

    _set_SegmentStateToUse_metadata = { "name" : "SegmentStateToUse",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVASegmentState),) }
    @SegmentStateToUse.setter
    def SegmentStateToUse(self, inVal:"AgEVASegmentState") -> None:
        return self._intf.set_property(IAgVAStateCalcDifferenceAcrossSegmentsOtherSat._metadata, IAgVAStateCalcDifferenceAcrossSegmentsOtherSat._set_SegmentStateToUse_metadata, inVal)

    _get_DifferenceOrder_metadata = { "name" : "DifferenceOrder",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVASegmentDifferenceOrder),) }
    @property
    def DifferenceOrder(self) -> "AgEVASegmentDifferenceOrder":
        """The order of the difference calculation."""
        return self._intf.get_property(IAgVAStateCalcDifferenceAcrossSegmentsOtherSat._metadata, IAgVAStateCalcDifferenceAcrossSegmentsOtherSat._get_DifferenceOrder_metadata)

    _set_DifferenceOrder_metadata = { "name" : "DifferenceOrder",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVASegmentDifferenceOrder),) }
    @DifferenceOrder.setter
    def DifferenceOrder(self, inVal:"AgEVASegmentDifferenceOrder") -> None:
        return self._intf.set_property(IAgVAStateCalcDifferenceAcrossSegmentsOtherSat._metadata, IAgVAStateCalcDifferenceAcrossSegmentsOtherSat._set_DifferenceOrder_metadata, inVal)

    _get_ReferenceSat_metadata = { "name" : "ReferenceSat",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def ReferenceSat(self) -> "IAgLinkToObject":
        """The Astrogator satellite on which the segment to be compared exists."""
        return self._intf.get_property(IAgVAStateCalcDifferenceAcrossSegmentsOtherSat._metadata, IAgVAStateCalcDifferenceAcrossSegmentsOtherSat._get_ReferenceSat_metadata)


agcls.AgClassCatalog.add_catalog_entry("{C5C0E056-EC28-4D88-A55F-6BA6D2F2976E}", IAgVAStateCalcDifferenceAcrossSegmentsOtherSat)
agcls.AgTypeNameMap["IAgVAStateCalcDifferenceAcrossSegmentsOtherSat"] = IAgVAStateCalcDifferenceAcrossSegmentsOtherSat

class IAgVAStateCalcValueAtSegmentOtherSat(object):
    """Properties for a Value At Segment Across Satellites calculation object."""
    _num_methods = 7
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{1F7F3653-10FD-4377-B8FB-8C42DABDACC3}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_CalcObjectName" : 1,
                             "set_CalcObjectName" : 2,
                             "get_OtherSegmentName" : 3,
                             "set_OtherSegmentName" : 4,
                             "get_SegmentStateToUse" : 5,
                             "set_SegmentStateToUse" : 6,
                             "get_ReferenceSat" : 7, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAStateCalcValueAtSegmentOtherSat._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcValueAtSegmentOtherSat from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcValueAtSegmentOtherSat.__dict__ and type(IAgVAStateCalcValueAtSegmentOtherSat.__dict__[attrname]) == property:
            return IAgVAStateCalcValueAtSegmentOtherSat.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcValueAtSegmentOtherSat.")
    
    _get_CalcObjectName_metadata = { "name" : "CalcObjectName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def CalcObjectName(self) -> str:
        """The calculation object."""
        return self._intf.get_property(IAgVAStateCalcValueAtSegmentOtherSat._metadata, IAgVAStateCalcValueAtSegmentOtherSat._get_CalcObjectName_metadata)

    _set_CalcObjectName_metadata = { "name" : "CalcObjectName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @CalcObjectName.setter
    def CalcObjectName(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAStateCalcValueAtSegmentOtherSat._metadata, IAgVAStateCalcValueAtSegmentOtherSat._set_CalcObjectName_metadata, inVal)

    _get_OtherSegmentName_metadata = { "name" : "OtherSegmentName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def OtherSegmentName(self) -> str:
        """The segment to be compared against."""
        return self._intf.get_property(IAgVAStateCalcValueAtSegmentOtherSat._metadata, IAgVAStateCalcValueAtSegmentOtherSat._get_OtherSegmentName_metadata)

    _set_OtherSegmentName_metadata = { "name" : "OtherSegmentName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @OtherSegmentName.setter
    def OtherSegmentName(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAStateCalcValueAtSegmentOtherSat._metadata, IAgVAStateCalcValueAtSegmentOtherSat._set_OtherSegmentName_metadata, inVal)

    _get_SegmentStateToUse_metadata = { "name" : "SegmentStateToUse",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVASegmentState),) }
    @property
    def SegmentStateToUse(self) -> "AgEVASegmentState":
        """The segment state to use in the calculation."""
        return self._intf.get_property(IAgVAStateCalcValueAtSegmentOtherSat._metadata, IAgVAStateCalcValueAtSegmentOtherSat._get_SegmentStateToUse_metadata)

    _set_SegmentStateToUse_metadata = { "name" : "SegmentStateToUse",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVASegmentState),) }
    @SegmentStateToUse.setter
    def SegmentStateToUse(self, inVal:"AgEVASegmentState") -> None:
        return self._intf.set_property(IAgVAStateCalcValueAtSegmentOtherSat._metadata, IAgVAStateCalcValueAtSegmentOtherSat._set_SegmentStateToUse_metadata, inVal)

    _get_ReferenceSat_metadata = { "name" : "ReferenceSat",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def ReferenceSat(self) -> "IAgLinkToObject":
        """The Astrogator satellite on which the segment to be compared exists."""
        return self._intf.get_property(IAgVAStateCalcValueAtSegmentOtherSat._metadata, IAgVAStateCalcValueAtSegmentOtherSat._get_ReferenceSat_metadata)


agcls.AgClassCatalog.add_catalog_entry("{1F7F3653-10FD-4377-B8FB-8C42DABDACC3}", IAgVAStateCalcValueAtSegmentOtherSat)
agcls.AgTypeNameMap["IAgVAStateCalcValueAtSegmentOtherSat"] = IAgVAStateCalcValueAtSegmentOtherSat

class IAgVAStateCalcRARate(object):
    """Properties for a Right Ascension Rate calculation object"""
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{69DDD91C-168B-47BD-9977-EB8431B4C112}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_CoordSystemName" : 1,
                             "set_CoordSystemName" : 2, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAStateCalcRARate._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcRARate from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcRARate.__dict__ and type(IAgVAStateCalcRARate.__dict__[attrname]) == property:
            return IAgVAStateCalcRARate.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcRARate.")
    
    _get_CoordSystemName_metadata = { "name" : "CoordSystemName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def CoordSystemName(self) -> str:
        """The coordinate system within which the element is defined."""
        return self._intf.get_property(IAgVAStateCalcRARate._metadata, IAgVAStateCalcRARate._get_CoordSystemName_metadata)

    _set_CoordSystemName_metadata = { "name" : "CoordSystemName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @CoordSystemName.setter
    def CoordSystemName(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAStateCalcRARate._metadata, IAgVAStateCalcRARate._set_CoordSystemName_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{69DDD91C-168B-47BD-9977-EB8431B4C112}", IAgVAStateCalcRARate)
agcls.AgTypeNameMap["IAgVAStateCalcRARate"] = IAgVAStateCalcRARate

class IAgVAStateCalcDecRate(object):
    """Properties for a Declination Rate calculation object"""
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{EE447FA6-4B21-4823-8811-E0E3C38A29E2}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_CoordSystemName" : 1,
                             "set_CoordSystemName" : 2, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAStateCalcDecRate._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcDecRate from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcDecRate.__dict__ and type(IAgVAStateCalcDecRate.__dict__[attrname]) == property:
            return IAgVAStateCalcDecRate.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcDecRate.")
    
    _get_CoordSystemName_metadata = { "name" : "CoordSystemName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def CoordSystemName(self) -> str:
        """The coordinate system within which the element is defined."""
        return self._intf.get_property(IAgVAStateCalcDecRate._metadata, IAgVAStateCalcDecRate._get_CoordSystemName_metadata)

    _set_CoordSystemName_metadata = { "name" : "CoordSystemName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @CoordSystemName.setter
    def CoordSystemName(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAStateCalcDecRate._metadata, IAgVAStateCalcDecRate._set_CoordSystemName_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{EE447FA6-4B21-4823-8811-E0E3C38A29E2}", IAgVAStateCalcDecRate)
agcls.AgTypeNameMap["IAgVAStateCalcDecRate"] = IAgVAStateCalcDecRate

class IAgVAStateCalcGravitationalParameter(object):
    """Properties for a Gravitational Parameter calculation object."""
    _num_methods = 6
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{1FE2F1B7-9FE8-409E-AAD8-92CC002CDED0}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_CentralBodyName" : 1,
                             "set_CentralBodyName" : 2,
                             "get_GravSource" : 3,
                             "set_GravSource" : 4,
                             "get_GravityFilename" : 5,
                             "set_GravityFilename" : 6, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAStateCalcGravitationalParameter._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcGravitationalParameter from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcGravitationalParameter.__dict__ and type(IAgVAStateCalcGravitationalParameter.__dict__[attrname]) == property:
            return IAgVAStateCalcGravitationalParameter.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcGravitationalParameter.")
    
    _get_CentralBodyName_metadata = { "name" : "CentralBodyName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def CentralBodyName(self) -> str:
        """The central body of the component."""
        return self._intf.get_property(IAgVAStateCalcGravitationalParameter._metadata, IAgVAStateCalcGravitationalParameter._get_CentralBodyName_metadata)

    _set_CentralBodyName_metadata = { "name" : "CentralBodyName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @CentralBodyName.setter
    def CentralBodyName(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAStateCalcGravitationalParameter._metadata, IAgVAStateCalcGravitationalParameter._set_CentralBodyName_metadata, inVal)

    _get_GravSource_metadata = { "name" : "GravSource",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAGravitationalParameterSource),) }
    @property
    def GravSource(self) -> "AgEVAGravitationalParameterSource":
        """The source for the gravitational parameter."""
        return self._intf.get_property(IAgVAStateCalcGravitationalParameter._metadata, IAgVAStateCalcGravitationalParameter._get_GravSource_metadata)

    _set_GravSource_metadata = { "name" : "GravSource",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAGravitationalParameterSource),) }
    @GravSource.setter
    def GravSource(self, inVal:"AgEVAGravitationalParameterSource") -> None:
        return self._intf.set_property(IAgVAStateCalcGravitationalParameter._metadata, IAgVAStateCalcGravitationalParameter._set_GravSource_metadata, inVal)

    _get_GravityFilename_metadata = { "name" : "GravityFilename",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def GravityFilename(self) -> str:
        """Source for the gravitational parameter if GravSource is set to Gravity File."""
        return self._intf.get_property(IAgVAStateCalcGravitationalParameter._metadata, IAgVAStateCalcGravitationalParameter._get_GravityFilename_metadata)

    _set_GravityFilename_metadata = { "name" : "GravityFilename",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @GravityFilename.setter
    def GravityFilename(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAStateCalcGravitationalParameter._metadata, IAgVAStateCalcGravitationalParameter._set_GravityFilename_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{1FE2F1B7-9FE8-409E-AAD8-92CC002CDED0}", IAgVAStateCalcGravitationalParameter)
agcls.AgTypeNameMap["IAgVAStateCalcGravitationalParameter"] = IAgVAStateCalcGravitationalParameter

class IAgVAStateCalcReferenceRadius(object):
    """Properties for a Reference Radius calculation object."""
    _num_methods = 6
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{E736A217-0B66-48F6-99FA-D338835B4D40}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_CentralBodyName" : 1,
                             "set_CentralBodyName" : 2,
                             "get_ReferenceRadiusSource" : 3,
                             "set_ReferenceRadiusSource" : 4,
                             "get_GravityFilename" : 5,
                             "set_GravityFilename" : 6, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAStateCalcReferenceRadius._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcReferenceRadius from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcReferenceRadius.__dict__ and type(IAgVAStateCalcReferenceRadius.__dict__[attrname]) == property:
            return IAgVAStateCalcReferenceRadius.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcReferenceRadius.")
    
    _get_CentralBodyName_metadata = { "name" : "CentralBodyName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def CentralBodyName(self) -> str:
        """The central body of the component."""
        return self._intf.get_property(IAgVAStateCalcReferenceRadius._metadata, IAgVAStateCalcReferenceRadius._get_CentralBodyName_metadata)

    _set_CentralBodyName_metadata = { "name" : "CentralBodyName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @CentralBodyName.setter
    def CentralBodyName(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAStateCalcReferenceRadius._metadata, IAgVAStateCalcReferenceRadius._set_CentralBodyName_metadata, inVal)

    _get_ReferenceRadiusSource_metadata = { "name" : "ReferenceRadiusSource",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAReferenceRadiusSource),) }
    @property
    def ReferenceRadiusSource(self) -> "AgEVAReferenceRadiusSource":
        """The source for the reference radius."""
        return self._intf.get_property(IAgVAStateCalcReferenceRadius._metadata, IAgVAStateCalcReferenceRadius._get_ReferenceRadiusSource_metadata)

    _set_ReferenceRadiusSource_metadata = { "name" : "ReferenceRadiusSource",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAReferenceRadiusSource),) }
    @ReferenceRadiusSource.setter
    def ReferenceRadiusSource(self, inVal:"AgEVAReferenceRadiusSource") -> None:
        return self._intf.set_property(IAgVAStateCalcReferenceRadius._metadata, IAgVAStateCalcReferenceRadius._set_ReferenceRadiusSource_metadata, inVal)

    _get_GravityFilename_metadata = { "name" : "GravityFilename",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def GravityFilename(self) -> str:
        """Source for the reference radius if RefRadSource is set to Gravity File."""
        return self._intf.get_property(IAgVAStateCalcReferenceRadius._metadata, IAgVAStateCalcReferenceRadius._get_GravityFilename_metadata)

    _set_GravityFilename_metadata = { "name" : "GravityFilename",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @GravityFilename.setter
    def GravityFilename(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAStateCalcReferenceRadius._metadata, IAgVAStateCalcReferenceRadius._set_GravityFilename_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{E736A217-0B66-48F6-99FA-D338835B4D40}", IAgVAStateCalcReferenceRadius)
agcls.AgTypeNameMap["IAgVAStateCalcReferenceRadius"] = IAgVAStateCalcReferenceRadius

class IAgVAStateCalcGravCoeff(object):
    """Properties for a gravity coefficient calculation object."""
    _num_methods = 12
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{057976B1-EBDA-4674-9FC0-556D7BD87599}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_CentralBodyName" : 1,
                             "set_CentralBodyName" : 2,
                             "get_GravityFilename" : 3,
                             "set_GravityFilename" : 4,
                             "get_CoefficientType" : 5,
                             "set_CoefficientType" : 6,
                             "get_Degree" : 7,
                             "set_Degree" : 8,
                             "get_Order" : 9,
                             "set_Order" : 10,
                             "get_NormalizationType" : 11,
                             "set_NormalizationType" : 12, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAStateCalcGravCoeff._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcGravCoeff from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcGravCoeff.__dict__ and type(IAgVAStateCalcGravCoeff.__dict__[attrname]) == property:
            return IAgVAStateCalcGravCoeff.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcGravCoeff.")
    
    _get_CentralBodyName_metadata = { "name" : "CentralBodyName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def CentralBodyName(self) -> str:
        """The central body of the component."""
        return self._intf.get_property(IAgVAStateCalcGravCoeff._metadata, IAgVAStateCalcGravCoeff._get_CentralBodyName_metadata)

    _set_CentralBodyName_metadata = { "name" : "CentralBodyName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @CentralBodyName.setter
    def CentralBodyName(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAStateCalcGravCoeff._metadata, IAgVAStateCalcGravCoeff._set_CentralBodyName_metadata, inVal)

    _get_GravityFilename_metadata = { "name" : "GravityFilename",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def GravityFilename(self) -> str:
        """Source for the gravity coefficient."""
        return self._intf.get_property(IAgVAStateCalcGravCoeff._metadata, IAgVAStateCalcGravCoeff._get_GravityFilename_metadata)

    _set_GravityFilename_metadata = { "name" : "GravityFilename",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @GravityFilename.setter
    def GravityFilename(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAStateCalcGravCoeff._metadata, IAgVAStateCalcGravCoeff._set_GravityFilename_metadata, inVal)

    _get_CoefficientType_metadata = { "name" : "CoefficientType",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAGravCoeffCoefficientType),) }
    @property
    def CoefficientType(self) -> "AgEVAGravCoeffCoefficientType":
        """Coefficient type."""
        return self._intf.get_property(IAgVAStateCalcGravCoeff._metadata, IAgVAStateCalcGravCoeff._get_CoefficientType_metadata)

    _set_CoefficientType_metadata = { "name" : "CoefficientType",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAGravCoeffCoefficientType),) }
    @CoefficientType.setter
    def CoefficientType(self, inVal:"AgEVAGravCoeffCoefficientType") -> None:
        return self._intf.set_property(IAgVAStateCalcGravCoeff._metadata, IAgVAStateCalcGravCoeff._set_CoefficientType_metadata, inVal)

    _get_Degree_metadata = { "name" : "Degree",
            "arg_types" : (POINTER(agcom.INT),),
            "marshallers" : (agmarshall.INT_arg,) }
    @property
    def Degree(self) -> int:
        """Degree of the coefficient."""
        return self._intf.get_property(IAgVAStateCalcGravCoeff._metadata, IAgVAStateCalcGravCoeff._get_Degree_metadata)

    _set_Degree_metadata = { "name" : "Degree",
            "arg_types" : (agcom.INT,),
            "marshallers" : (agmarshall.INT_arg,) }
    @Degree.setter
    def Degree(self, inVal:int) -> None:
        return self._intf.set_property(IAgVAStateCalcGravCoeff._metadata, IAgVAStateCalcGravCoeff._set_Degree_metadata, inVal)

    _get_Order_metadata = { "name" : "Order",
            "arg_types" : (POINTER(agcom.INT),),
            "marshallers" : (agmarshall.INT_arg,) }
    @property
    def Order(self) -> int:
        """Order of the coefficient."""
        return self._intf.get_property(IAgVAStateCalcGravCoeff._metadata, IAgVAStateCalcGravCoeff._get_Order_metadata)

    _set_Order_metadata = { "name" : "Order",
            "arg_types" : (agcom.INT,),
            "marshallers" : (agmarshall.INT_arg,) }
    @Order.setter
    def Order(self, inVal:int) -> None:
        return self._intf.set_property(IAgVAStateCalcGravCoeff._metadata, IAgVAStateCalcGravCoeff._set_Order_metadata, inVal)

    _get_NormalizationType_metadata = { "name" : "NormalizationType",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAGravCoeffNormalizationType),) }
    @property
    def NormalizationType(self) -> "AgEVAGravCoeffNormalizationType":
        """Normalization type."""
        return self._intf.get_property(IAgVAStateCalcGravCoeff._metadata, IAgVAStateCalcGravCoeff._get_NormalizationType_metadata)

    _set_NormalizationType_metadata = { "name" : "NormalizationType",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAGravCoeffNormalizationType),) }
    @NormalizationType.setter
    def NormalizationType(self, inVal:"AgEVAGravCoeffNormalizationType") -> None:
        return self._intf.set_property(IAgVAStateCalcGravCoeff._metadata, IAgVAStateCalcGravCoeff._set_NormalizationType_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{057976B1-EBDA-4674-9FC0-556D7BD87599}", IAgVAStateCalcGravCoeff)
agcls.AgTypeNameMap["IAgVAStateCalcGravCoeff"] = IAgVAStateCalcGravCoeff

class IAgVAStateCalcSpeedOfLight(object):
    """Properties for a Speed of Light calculation object."""
    _num_methods = 0
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{6B7D157C-43CA-4ED4-9C3C-DF8E4ABAE4E0}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : {  }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAStateCalcSpeedOfLight._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcSpeedOfLight from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcSpeedOfLight.__dict__ and type(IAgVAStateCalcSpeedOfLight.__dict__[attrname]) == property:
            return IAgVAStateCalcSpeedOfLight.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcSpeedOfLight.")
    

agcls.AgClassCatalog.add_catalog_entry("{6B7D157C-43CA-4ED4-9C3C-DF8E4ABAE4E0}", IAgVAStateCalcSpeedOfLight)
agcls.AgTypeNameMap["IAgVAStateCalcSpeedOfLight"] = IAgVAStateCalcSpeedOfLight

class IAgVAStateCalcPi(object):
    """Properties for a Pi calculation object."""
    _num_methods = 0
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{DDE94FB4-1751-4F38-9304-5ACC35CDC811}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : {  }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAStateCalcPi._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcPi from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcPi.__dict__ and type(IAgVAStateCalcPi.__dict__[attrname]) == property:
            return IAgVAStateCalcPi.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcPi.")
    

agcls.AgClassCatalog.add_catalog_entry("{DDE94FB4-1751-4F38-9304-5ACC35CDC811}", IAgVAStateCalcPi)
agcls.AgTypeNameMap["IAgVAStateCalcPi"] = IAgVAStateCalcPi

class IAgVAStateCalcScalar(object):
    """Properties for a Scalar calculation object."""
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{D792B480-CCC7-4040-BD41-A26E56DE6CA8}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_ScalarName" : 1,
                             "set_ScalarName" : 2,
                             "get_UnitDimension" : 3,
                             "set_UnitDimension" : 4, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAStateCalcScalar._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcScalar from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcScalar.__dict__ and type(IAgVAStateCalcScalar.__dict__[attrname]) == property:
            return IAgVAStateCalcScalar.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcScalar.")
    
    _get_ScalarName_metadata = { "name" : "ScalarName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def ScalarName(self) -> str:
        """The scalar name."""
        return self._intf.get_property(IAgVAStateCalcScalar._metadata, IAgVAStateCalcScalar._get_ScalarName_metadata)

    _set_ScalarName_metadata = { "name" : "ScalarName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @ScalarName.setter
    def ScalarName(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAStateCalcScalar._metadata, IAgVAStateCalcScalar._set_ScalarName_metadata, inVal)

    _get_UnitDimension_metadata = { "name" : "UnitDimension",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def UnitDimension(self) -> str:
        """The unit dimension."""
        return self._intf.get_property(IAgVAStateCalcScalar._metadata, IAgVAStateCalcScalar._get_UnitDimension_metadata)

    _set_UnitDimension_metadata = { "name" : "UnitDimension",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @UnitDimension.setter
    def UnitDimension(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAStateCalcScalar._metadata, IAgVAStateCalcScalar._set_UnitDimension_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{D792B480-CCC7-4040-BD41-A26E56DE6CA8}", IAgVAStateCalcScalar)
agcls.AgTypeNameMap["IAgVAStateCalcScalar"] = IAgVAStateCalcScalar

class IAgVAStateCalcApparentSolarTime(object):
    """Properties for an Apparent Solar Time calculation object."""
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{439AD289-B0FE-4596-A6AC-A29B6F98C313}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_CentralBodyName" : 1,
                             "set_CentralBodyName" : 2, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAStateCalcApparentSolarTime._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcApparentSolarTime from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcApparentSolarTime.__dict__ and type(IAgVAStateCalcApparentSolarTime.__dict__[attrname]) == property:
            return IAgVAStateCalcApparentSolarTime.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcApparentSolarTime.")
    
    _get_CentralBodyName_metadata = { "name" : "CentralBodyName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def CentralBodyName(self) -> str:
        """The central body of the component."""
        return self._intf.get_property(IAgVAStateCalcApparentSolarTime._metadata, IAgVAStateCalcApparentSolarTime._get_CentralBodyName_metadata)

    _set_CentralBodyName_metadata = { "name" : "CentralBodyName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @CentralBodyName.setter
    def CentralBodyName(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAStateCalcApparentSolarTime._metadata, IAgVAStateCalcApparentSolarTime._set_CentralBodyName_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{439AD289-B0FE-4596-A6AC-A29B6F98C313}", IAgVAStateCalcApparentSolarTime)
agcls.AgTypeNameMap["IAgVAStateCalcApparentSolarTime"] = IAgVAStateCalcApparentSolarTime

class IAgVAStateCalcEarthMeanSolarTime(object):
    """Properties for an Earth Mean Solar Time calculation object."""
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{45C37D81-A752-4AA8-AC7D-7FAD78AA7763}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_CentralBodyName" : 1,
                             "set_CentralBodyName" : 2, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAStateCalcEarthMeanSolarTime._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcEarthMeanSolarTime from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcEarthMeanSolarTime.__dict__ and type(IAgVAStateCalcEarthMeanSolarTime.__dict__[attrname]) == property:
            return IAgVAStateCalcEarthMeanSolarTime.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcEarthMeanSolarTime.")
    
    _get_CentralBodyName_metadata = { "name" : "CentralBodyName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def CentralBodyName(self) -> str:
        """The central body of the component."""
        return self._intf.get_property(IAgVAStateCalcEarthMeanSolarTime._metadata, IAgVAStateCalcEarthMeanSolarTime._get_CentralBodyName_metadata)

    _set_CentralBodyName_metadata = { "name" : "CentralBodyName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @CentralBodyName.setter
    def CentralBodyName(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAStateCalcEarthMeanSolarTime._metadata, IAgVAStateCalcEarthMeanSolarTime._set_CentralBodyName_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{45C37D81-A752-4AA8-AC7D-7FAD78AA7763}", IAgVAStateCalcEarthMeanSolarTime)
agcls.AgTypeNameMap["IAgVAStateCalcEarthMeanSolarTime"] = IAgVAStateCalcEarthMeanSolarTime

class IAgVAStateCalcEarthMeanLocTimeAN(object):
    """Properties for an Earth Mean Local Time of Ascending Node calculation object."""
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{325E3769-FB5E-4B6B-AC89-48CD5A09C528}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_CentralBodyName" : 1,
                             "set_CentralBodyName" : 2, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAStateCalcEarthMeanLocTimeAN._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcEarthMeanLocTimeAN from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcEarthMeanLocTimeAN.__dict__ and type(IAgVAStateCalcEarthMeanLocTimeAN.__dict__[attrname]) == property:
            return IAgVAStateCalcEarthMeanLocTimeAN.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcEarthMeanLocTimeAN.")
    
    _get_CentralBodyName_metadata = { "name" : "CentralBodyName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def CentralBodyName(self) -> str:
        """The central body of the component."""
        return self._intf.get_property(IAgVAStateCalcEarthMeanLocTimeAN._metadata, IAgVAStateCalcEarthMeanLocTimeAN._get_CentralBodyName_metadata)

    _set_CentralBodyName_metadata = { "name" : "CentralBodyName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @CentralBodyName.setter
    def CentralBodyName(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAStateCalcEarthMeanLocTimeAN._metadata, IAgVAStateCalcEarthMeanLocTimeAN._set_CentralBodyName_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{325E3769-FB5E-4B6B-AC89-48CD5A09C528}", IAgVAStateCalcEarthMeanLocTimeAN)
agcls.AgTypeNameMap["IAgVAStateCalcEarthMeanLocTimeAN"] = IAgVAStateCalcEarthMeanLocTimeAN

class IAgVACentralBodyCollection(object):
    """The list of central bodies."""
    _num_methods = 8
    _vtable_offset = IDispatch._vtable_offset + IDispatch._num_methods
    _metadata = {
        "uuid" : "{6A2BFAF1-F26A-439B-AF23-AD83B82A0D4A}",
        "vtable_reference" : IDispatch._vtable_offset + IDispatch._num_methods - 1,
        "method_offsets" : { "Item" : 1,
                             "get_Count" : 2,
                             "get__NewEnum" : 3,
                             "Add" : 4,
                             "Remove" : 5,
                             "RemoveAll" : 6,
                             "GetItemByIndex" : 7,
                             "GetItemByName" : 8, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVACentralBodyCollection._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVACentralBodyCollection from source object.")
        self.__dict__["_enumerator"] = None
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVACentralBodyCollection.__dict__ and type(IAgVACentralBodyCollection.__dict__[attrname]) == property:
            return IAgVACentralBodyCollection.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVACentralBodyCollection.")
    def __iter__(self):
        self.__dict__["_enumerator"] = self._NewEnum
        self._enumerator.reset()
        return self
    def __next__(self) -> "IAgVACentralBody":
        if self._enumerator is None:
            raise StopIteration
        nextval = self._enumerator.next()
        if nextval is None:
            raise StopIteration
        return nextval
    
    _Item_metadata = { "name" : "Item",
            "arg_types" : (agcom.VARIANT, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.VARIANT_arg, agmarshall.AgInterface_out_arg,) }
    def Item(self, indexOrCbName:typing.Any) -> "IAgVACentralBody":
        """Allows you to iterate through the collection."""
        return self._intf.invoke(IAgVACentralBodyCollection._metadata, IAgVACentralBodyCollection._Item_metadata, indexOrCbName, out_arg())

    _get_Count_metadata = { "name" : "Count",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.LONG_arg,) }
    @property
    def Count(self) -> int:
        """Returns the size of the collection."""
        return self._intf.get_property(IAgVACentralBodyCollection._metadata, IAgVACentralBodyCollection._get_Count_metadata)

    _get__NewEnum_metadata = { "name" : "_NewEnum",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.IEnumVARIANT_arg,) }
    @property
    def _NewEnum(self) -> enumerator_proxy:
        """Iterates through the collection."""
        return self._intf.get_property(IAgVACentralBodyCollection._metadata, IAgVACentralBodyCollection._get__NewEnum_metadata)

    _Add_metadata = { "name" : "Add",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    def Add(self, cbName:str) -> None:
        """Adds a central body to the collection."""
        return self._intf.invoke(IAgVACentralBodyCollection._metadata, IAgVACentralBodyCollection._Add_metadata, cbName)

    _Remove_metadata = { "name" : "Remove",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    def Remove(self, indexOrName:typing.Any) -> None:
        """Removes a central body from the collection."""
        return self._intf.invoke(IAgVACentralBodyCollection._metadata, IAgVACentralBodyCollection._Remove_metadata, indexOrName)

    _RemoveAll_metadata = { "name" : "RemoveAll",
            "arg_types" : (),
            "marshallers" : () }
    def RemoveAll(self) -> None:
        """Remove all central bodies from the collection."""
        return self._intf.invoke(IAgVACentralBodyCollection._metadata, IAgVACentralBodyCollection._RemoveAll_metadata, )

    _GetItemByIndex_metadata = { "name" : "GetItemByIndex",
            "arg_types" : (agcom.INT, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.INT_arg, agmarshall.AgInterface_out_arg,) }
    def GetItemByIndex(self, index:int) -> "IAgVACentralBody":
        """Retrieves a central body from the collection by index."""
        return self._intf.invoke(IAgVACentralBodyCollection._metadata, IAgVACentralBodyCollection._GetItemByIndex_metadata, index, out_arg())

    _GetItemByName_metadata = { "name" : "GetItemByName",
            "arg_types" : (agcom.BSTR, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.AgInterface_out_arg,) }
    def GetItemByName(self, cbName:str) -> "IAgVACentralBody":
        """Retrieves a central body from the collection by name."""
        return self._intf.invoke(IAgVACentralBodyCollection._metadata, IAgVACentralBodyCollection._GetItemByName_metadata, cbName, out_arg())

    __getitem__ = Item



agcls.AgClassCatalog.add_catalog_entry("{6A2BFAF1-F26A-439B-AF23-AD83B82A0D4A}", IAgVACentralBodyCollection)
agcls.AgTypeNameMap["IAgVACentralBodyCollection"] = IAgVACentralBodyCollection

class IAgVACbEphemeris(object):
    """The central body ephemeris source."""
    _num_methods = 0
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{AE91748E-8A2D-4D9D-9C39-88017D0CB591}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : {  }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVACbEphemeris._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVACbEphemeris from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVACbEphemeris.__dict__ and type(IAgVACbEphemeris.__dict__[attrname]) == property:
            return IAgVACbEphemeris.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVACbEphemeris.")
    

agcls.AgClassCatalog.add_catalog_entry("{AE91748E-8A2D-4D9D-9C39-88017D0CB591}", IAgVACbEphemeris)
agcls.AgTypeNameMap["IAgVACbEphemeris"] = IAgVACbEphemeris

class IAgVACbGravityModel(object):
    """Properties for a central body gravity model."""
    _num_methods = 10
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{B20E4246-ED81-4131-82AF-C76FAD7C57A8}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_GravitationalParam" : 1,
                             "set_GravitationalParam" : 2,
                             "get_RefDistance" : 3,
                             "set_RefDistance" : 4,
                             "get_J2" : 5,
                             "set_J2" : 6,
                             "get_J3" : 7,
                             "set_J3" : 8,
                             "get_J4" : 9,
                             "set_J4" : 10, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVACbGravityModel._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVACbGravityModel from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVACbGravityModel.__dict__ and type(IAgVACbGravityModel.__dict__[attrname]) == property:
            return IAgVACbGravityModel.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVACbGravityModel.")
    
    _get_GravitationalParam_metadata = { "name" : "GravitationalParam",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def GravitationalParam(self) -> float:
        """The gravitational parameter to be used for purposes of this gravity model. Uses Gravitational Param Dimension."""
        return self._intf.get_property(IAgVACbGravityModel._metadata, IAgVACbGravityModel._get_GravitationalParam_metadata)

    _set_GravitationalParam_metadata = { "name" : "GravitationalParam",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @GravitationalParam.setter
    def GravitationalParam(self, newVal:float) -> None:
        return self._intf.set_property(IAgVACbGravityModel._metadata, IAgVACbGravityModel._set_GravitationalParam_metadata, newVal)

    _get_RefDistance_metadata = { "name" : "RefDistance",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def RefDistance(self) -> float:
        """Distance from the center of mass of the central body to its surface. Typically defaults to the Maximum Radius entered in the Shape frame of the Central Body parameters window. Uses Distance Dimension."""
        return self._intf.get_property(IAgVACbGravityModel._metadata, IAgVACbGravityModel._get_RefDistance_metadata)

    _set_RefDistance_metadata = { "name" : "RefDistance",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @RefDistance.setter
    def RefDistance(self, newVal:float) -> None:
        return self._intf.set_property(IAgVACbGravityModel._metadata, IAgVACbGravityModel._set_RefDistance_metadata, newVal)

    _get_J2_metadata = { "name" : "J2",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def J2(self) -> float:
        """The J2 property. Taking into account first order Earth oblateness effects. Dimensionless."""
        return self._intf.get_property(IAgVACbGravityModel._metadata, IAgVACbGravityModel._get_J2_metadata)

    _set_J2_metadata = { "name" : "J2",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @J2.setter
    def J2(self, newVal:float) -> None:
        return self._intf.set_property(IAgVACbGravityModel._metadata, IAgVACbGravityModel._set_J2_metadata, newVal)

    _get_J3_metadata = { "name" : "J3",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def J3(self) -> float:
        """The J3 property. Taking into account first order longitudinal variations of the Earth's shape. Dimensionless."""
        return self._intf.get_property(IAgVACbGravityModel._metadata, IAgVACbGravityModel._get_J3_metadata)

    _set_J3_metadata = { "name" : "J3",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @J3.setter
    def J3(self, newVal:float) -> None:
        return self._intf.set_property(IAgVACbGravityModel._metadata, IAgVACbGravityModel._set_J3_metadata, newVal)

    _get_J4_metadata = { "name" : "J4",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def J4(self) -> float:
        """The J4 property. Taking into account first and second order Earth oblateness effects. Dimensionless."""
        return self._intf.get_property(IAgVACbGravityModel._metadata, IAgVACbGravityModel._get_J4_metadata)

    _set_J4_metadata = { "name" : "J4",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @J4.setter
    def J4(self, newVal:float) -> None:
        return self._intf.set_property(IAgVACbGravityModel._metadata, IAgVACbGravityModel._set_J4_metadata, newVal)


agcls.AgClassCatalog.add_catalog_entry("{B20E4246-ED81-4131-82AF-C76FAD7C57A8}", IAgVACbGravityModel)
agcls.AgTypeNameMap["IAgVACbGravityModel"] = IAgVACbGravityModel

class IAgVACbShape(object):
    """The central body shape."""
    _num_methods = 0
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{4DD8FE3F-7B64-4477-9D9E-97226A04584D}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : {  }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVACbShape._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVACbShape from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVACbShape.__dict__ and type(IAgVACbShape.__dict__[attrname]) == property:
            return IAgVACbShape.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVACbShape.")
    

agcls.AgClassCatalog.add_catalog_entry("{4DD8FE3F-7B64-4477-9D9E-97226A04584D}", IAgVACbShape)
agcls.AgTypeNameMap["IAgVACbShape"] = IAgVACbShape

class IAgVACbShapeSphere(IAgVACbShape):
    """Properties for the central body sphere shape."""
    _num_methods = 2
    _vtable_offset = IAgVACbShape._vtable_offset + IAgVACbShape._num_methods
    _metadata = {
        "uuid" : "{BF7B6D1A-62E6-4897-8861-233465975488}",
        "vtable_reference" : IAgVACbShape._vtable_offset + IAgVACbShape._num_methods - 1,
        "method_offsets" : { "get_Radius" : 1,
                             "set_Radius" : 2, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVACbShapeSphere._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVACbShapeSphere from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVACbShape._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVACbShapeSphere.__dict__ and type(IAgVACbShapeSphere.__dict__[attrname]) == property:
            return IAgVACbShapeSphere.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            IAgVACbShape.__setattr__(self, attrname, value)
    
    _get_Radius_metadata = { "name" : "Radius",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def Radius(self) -> float:
        """The radius. Uses Distance Dimension."""
        return self._intf.get_property(IAgVACbShapeSphere._metadata, IAgVACbShapeSphere._get_Radius_metadata)

    _set_Radius_metadata = { "name" : "Radius",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @Radius.setter
    def Radius(self, newVal:float) -> None:
        return self._intf.set_property(IAgVACbShapeSphere._metadata, IAgVACbShapeSphere._set_Radius_metadata, newVal)


agcls.AgClassCatalog.add_catalog_entry("{BF7B6D1A-62E6-4897-8861-233465975488}", IAgVACbShapeSphere)
agcls.AgTypeNameMap["IAgVACbShapeSphere"] = IAgVACbShapeSphere

class IAgVACbShapeOblateSpheroid(IAgVACbShape):
    """Properties for the central body oblate spheroid shape."""
    _num_methods = 5
    _vtable_offset = IAgVACbShape._vtable_offset + IAgVACbShape._num_methods
    _metadata = {
        "uuid" : "{583AE2E3-8639-4C1F-B188-3C6AF867F0CD}",
        "vtable_reference" : IAgVACbShape._vtable_offset + IAgVACbShape._num_methods - 1,
        "method_offsets" : { "get_MinRadius" : 1,
                             "set_MinRadius" : 2,
                             "get_MaxRadius" : 3,
                             "set_MaxRadius" : 4,
                             "get_FlatteningCoefficient" : 5, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVACbShapeOblateSpheroid._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVACbShapeOblateSpheroid from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVACbShape._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVACbShapeOblateSpheroid.__dict__ and type(IAgVACbShapeOblateSpheroid.__dict__[attrname]) == property:
            return IAgVACbShapeOblateSpheroid.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            IAgVACbShape.__setattr__(self, attrname, value)
    
    _get_MinRadius_metadata = { "name" : "MinRadius",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def MinRadius(self) -> float:
        """The minimum radius. Uses Distance Dimension."""
        return self._intf.get_property(IAgVACbShapeOblateSpheroid._metadata, IAgVACbShapeOblateSpheroid._get_MinRadius_metadata)

    _set_MinRadius_metadata = { "name" : "MinRadius",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @MinRadius.setter
    def MinRadius(self, newVal:float) -> None:
        return self._intf.set_property(IAgVACbShapeOblateSpheroid._metadata, IAgVACbShapeOblateSpheroid._set_MinRadius_metadata, newVal)

    _get_MaxRadius_metadata = { "name" : "MaxRadius",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def MaxRadius(self) -> float:
        """The maximum radius. Uses Distance Dimension."""
        return self._intf.get_property(IAgVACbShapeOblateSpheroid._metadata, IAgVACbShapeOblateSpheroid._get_MaxRadius_metadata)

    _set_MaxRadius_metadata = { "name" : "MaxRadius",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @MaxRadius.setter
    def MaxRadius(self, newVal:float) -> None:
        return self._intf.set_property(IAgVACbShapeOblateSpheroid._metadata, IAgVACbShapeOblateSpheroid._set_MaxRadius_metadata, newVal)

    _get_FlatteningCoefficient_metadata = { "name" : "FlatteningCoefficient",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def FlatteningCoefficient(self) -> float:
        """The flattening coefficient; automatically derived from the minimum and maximum radii. Dimensionless."""
        return self._intf.get_property(IAgVACbShapeOblateSpheroid._metadata, IAgVACbShapeOblateSpheroid._get_FlatteningCoefficient_metadata)


agcls.AgClassCatalog.add_catalog_entry("{583AE2E3-8639-4C1F-B188-3C6AF867F0CD}", IAgVACbShapeOblateSpheroid)
agcls.AgTypeNameMap["IAgVACbShapeOblateSpheroid"] = IAgVACbShapeOblateSpheroid

class IAgVACbShapeTriaxialEllipsoid(IAgVACbShape):
    """Properties for the central body triaxial ellipsoid shape."""
    _num_methods = 6
    _vtable_offset = IAgVACbShape._vtable_offset + IAgVACbShape._num_methods
    _metadata = {
        "uuid" : "{E446F44B-EDEB-4643-BEDA-6EA807C27882}",
        "vtable_reference" : IAgVACbShape._vtable_offset + IAgVACbShape._num_methods - 1,
        "method_offsets" : { "get_SemiMajorAxis" : 1,
                             "set_SemiMajorAxis" : 2,
                             "get_SemiMidAxis" : 3,
                             "set_SemiMidAxis" : 4,
                             "get_SemiMinorAxis" : 5,
                             "set_SemiMinorAxis" : 6, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVACbShapeTriaxialEllipsoid._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVACbShapeTriaxialEllipsoid from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVACbShape._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVACbShapeTriaxialEllipsoid.__dict__ and type(IAgVACbShapeTriaxialEllipsoid.__dict__[attrname]) == property:
            return IAgVACbShapeTriaxialEllipsoid.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            IAgVACbShape.__setattr__(self, attrname, value)
    
    _get_SemiMajorAxis_metadata = { "name" : "SemiMajorAxis",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def SemiMajorAxis(self) -> float:
        """The semi-major axis. Uses Distance Dimension."""
        return self._intf.get_property(IAgVACbShapeTriaxialEllipsoid._metadata, IAgVACbShapeTriaxialEllipsoid._get_SemiMajorAxis_metadata)

    _set_SemiMajorAxis_metadata = { "name" : "SemiMajorAxis",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @SemiMajorAxis.setter
    def SemiMajorAxis(self, newVal:float) -> None:
        return self._intf.set_property(IAgVACbShapeTriaxialEllipsoid._metadata, IAgVACbShapeTriaxialEllipsoid._set_SemiMajorAxis_metadata, newVal)

    _get_SemiMidAxis_metadata = { "name" : "SemiMidAxis",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def SemiMidAxis(self) -> float:
        """The semi-mid axis. Uses Distance Dimension."""
        return self._intf.get_property(IAgVACbShapeTriaxialEllipsoid._metadata, IAgVACbShapeTriaxialEllipsoid._get_SemiMidAxis_metadata)

    _set_SemiMidAxis_metadata = { "name" : "SemiMidAxis",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @SemiMidAxis.setter
    def SemiMidAxis(self, newVal:float) -> None:
        return self._intf.set_property(IAgVACbShapeTriaxialEllipsoid._metadata, IAgVACbShapeTriaxialEllipsoid._set_SemiMidAxis_metadata, newVal)

    _get_SemiMinorAxis_metadata = { "name" : "SemiMinorAxis",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def SemiMinorAxis(self) -> float:
        """The semi-minor axis. Uses Distance Dimension."""
        return self._intf.get_property(IAgVACbShapeTriaxialEllipsoid._metadata, IAgVACbShapeTriaxialEllipsoid._get_SemiMinorAxis_metadata)

    _set_SemiMinorAxis_metadata = { "name" : "SemiMinorAxis",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @SemiMinorAxis.setter
    def SemiMinorAxis(self, newVal:float) -> None:
        return self._intf.set_property(IAgVACbShapeTriaxialEllipsoid._metadata, IAgVACbShapeTriaxialEllipsoid._set_SemiMinorAxis_metadata, newVal)


agcls.AgClassCatalog.add_catalog_entry("{E446F44B-EDEB-4643-BEDA-6EA807C27882}", IAgVACbShapeTriaxialEllipsoid)
agcls.AgTypeNameMap["IAgVACbShapeTriaxialEllipsoid"] = IAgVACbShapeTriaxialEllipsoid

class IAgVACbAttitude(object):
    """The central body attitude."""
    _num_methods = 0
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{DF0EB27A-4546-4A2C-B154-49E86527784D}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : {  }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVACbAttitude._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVACbAttitude from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVACbAttitude.__dict__ and type(IAgVACbAttitude.__dict__[attrname]) == property:
            return IAgVACbAttitude.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVACbAttitude.")
    

agcls.AgClassCatalog.add_catalog_entry("{DF0EB27A-4546-4A2C-B154-49E86527784D}", IAgVACbAttitude)
agcls.AgTypeNameMap["IAgVACbAttitude"] = IAgVACbAttitude

class IAgVACbAttitudeRotationCoefficientsFile(IAgVACbAttitude):
    """Properties for a rotation coefficients file attitude definition."""
    _num_methods = 2
    _vtable_offset = IAgVACbAttitude._vtable_offset + IAgVACbAttitude._num_methods
    _metadata = {
        "uuid" : "{E0F3153F-7F2D-46B7-B317-99EDABD12360}",
        "vtable_reference" : IAgVACbAttitude._vtable_offset + IAgVACbAttitude._num_methods - 1,
        "method_offsets" : { "get_Filename" : 1,
                             "set_Filename" : 2, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVACbAttitudeRotationCoefficientsFile._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVACbAttitudeRotationCoefficientsFile from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVACbAttitude._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVACbAttitudeRotationCoefficientsFile.__dict__ and type(IAgVACbAttitudeRotationCoefficientsFile.__dict__[attrname]) == property:
            return IAgVACbAttitudeRotationCoefficientsFile.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            IAgVACbAttitude.__setattr__(self, attrname, value)
    
    _get_Filename_metadata = { "name" : "Filename",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def Filename(self) -> str:
        """The name of the rotation coefficients file."""
        return self._intf.get_property(IAgVACbAttitudeRotationCoefficientsFile._metadata, IAgVACbAttitudeRotationCoefficientsFile._get_Filename_metadata)

    _set_Filename_metadata = { "name" : "Filename",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @Filename.setter
    def Filename(self, newVal:str) -> None:
        return self._intf.set_property(IAgVACbAttitudeRotationCoefficientsFile._metadata, IAgVACbAttitudeRotationCoefficientsFile._set_Filename_metadata, newVal)


agcls.AgClassCatalog.add_catalog_entry("{E0F3153F-7F2D-46B7-B317-99EDABD12360}", IAgVACbAttitudeRotationCoefficientsFile)
agcls.AgTypeNameMap["IAgVACbAttitudeRotationCoefficientsFile"] = IAgVACbAttitudeRotationCoefficientsFile

class IAgVACbAttitudeIAU1994(IAgVACbAttitude):
    """Properties for an IAU1994 attitude definition."""
    _num_methods = 12
    _vtable_offset = IAgVACbAttitude._vtable_offset + IAgVACbAttitude._num_methods
    _metadata = {
        "uuid" : "{7F28E973-1139-4D02-8F8C-C0F68E3035A9}",
        "vtable_reference" : IAgVACbAttitude._vtable_offset + IAgVACbAttitude._num_methods - 1,
        "method_offsets" : { "get_RightAscension" : 1,
                             "set_RightAscension" : 2,
                             "get_Declination" : 3,
                             "set_Declination" : 4,
                             "get_RightAscensionRate" : 5,
                             "set_RightAscensionRate" : 6,
                             "get_DeclinationRate" : 7,
                             "set_DeclinationRate" : 8,
                             "get_RotationOffset" : 9,
                             "set_RotationOffset" : 10,
                             "get_RotationRate" : 11,
                             "set_RotationRate" : 12, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVACbAttitudeIAU1994._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVACbAttitudeIAU1994 from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVACbAttitude._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVACbAttitudeIAU1994.__dict__ and type(IAgVACbAttitudeIAU1994.__dict__[attrname]) == property:
            return IAgVACbAttitudeIAU1994.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            IAgVACbAttitude.__setattr__(self, attrname, value)
    
    _get_RightAscension_metadata = { "name" : "RightAscension",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def RightAscension(self) -> typing.Any:
        """The right ascension; the angle measured in the inertial equatorial plane from the inertial X axis in a right-handed sense about the inertial Z axis to the spin axis -- the angle  in the drawing below. Uses Angle Dimension."""
        return self._intf.get_property(IAgVACbAttitudeIAU1994._metadata, IAgVACbAttitudeIAU1994._get_RightAscension_metadata)

    _set_RightAscension_metadata = { "name" : "RightAscension",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @RightAscension.setter
    def RightAscension(self, newVal:typing.Any) -> None:
        return self._intf.set_property(IAgVACbAttitudeIAU1994._metadata, IAgVACbAttitudeIAU1994._set_RightAscension_metadata, newVal)

    _get_Declination_metadata = { "name" : "Declination",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def Declination(self) -> typing.Any:
        """The declination; the angle from the X-Y plane of the coordinate system to the spin axis vector. Uses Angle Dimension."""
        return self._intf.get_property(IAgVACbAttitudeIAU1994._metadata, IAgVACbAttitudeIAU1994._get_Declination_metadata)

    _set_Declination_metadata = { "name" : "Declination",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @Declination.setter
    def Declination(self, newVal:typing.Any) -> None:
        return self._intf.set_property(IAgVACbAttitudeIAU1994._metadata, IAgVACbAttitudeIAU1994._set_Declination_metadata, newVal)

    _get_RightAscensionRate_metadata = { "name" : "RightAscensionRate",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def RightAscensionRate(self) -> float:
        """The right ascension rate; the rate of change in the right ascension. Uses AngleRate Dimension."""
        return self._intf.get_property(IAgVACbAttitudeIAU1994._metadata, IAgVACbAttitudeIAU1994._get_RightAscensionRate_metadata)

    _set_RightAscensionRate_metadata = { "name" : "RightAscensionRate",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @RightAscensionRate.setter
    def RightAscensionRate(self, newVal:float) -> None:
        return self._intf.set_property(IAgVACbAttitudeIAU1994._metadata, IAgVACbAttitudeIAU1994._set_RightAscensionRate_metadata, newVal)

    _get_DeclinationRate_metadata = { "name" : "DeclinationRate",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def DeclinationRate(self) -> float:
        """The declination rate; the rate of change in the declination. Uses AngleRate Dimension."""
        return self._intf.get_property(IAgVACbAttitudeIAU1994._metadata, IAgVACbAttitudeIAU1994._get_DeclinationRate_metadata)

    _set_DeclinationRate_metadata = { "name" : "DeclinationRate",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @DeclinationRate.setter
    def DeclinationRate(self, newVal:float) -> None:
        return self._intf.set_property(IAgVACbAttitudeIAU1994._metadata, IAgVACbAttitudeIAU1994._set_DeclinationRate_metadata, newVal)

    _get_RotationOffset_metadata = { "name" : "RotationOffset",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def RotationOffset(self) -> typing.Any:
        """The rotation offset; the angle from the inertially fixed reference direction to the body-fixed prime meridian (0 deg longitude) at the time of epoch. Uses AngleUnit Dimension."""
        return self._intf.get_property(IAgVACbAttitudeIAU1994._metadata, IAgVACbAttitudeIAU1994._get_RotationOffset_metadata)

    _set_RotationOffset_metadata = { "name" : "RotationOffset",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @RotationOffset.setter
    def RotationOffset(self, newVal:typing.Any) -> None:
        return self._intf.set_property(IAgVACbAttitudeIAU1994._metadata, IAgVACbAttitudeIAU1994._set_RotationOffset_metadata, newVal)

    _get_RotationRate_metadata = { "name" : "RotationRate",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def RotationRate(self) -> float:
        """The rotation rate; the rate of the central body's rotation. Uses AngleRate Dimension."""
        return self._intf.get_property(IAgVACbAttitudeIAU1994._metadata, IAgVACbAttitudeIAU1994._get_RotationRate_metadata)

    _set_RotationRate_metadata = { "name" : "RotationRate",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @RotationRate.setter
    def RotationRate(self, newVal:float) -> None:
        return self._intf.set_property(IAgVACbAttitudeIAU1994._metadata, IAgVACbAttitudeIAU1994._set_RotationRate_metadata, newVal)


agcls.AgClassCatalog.add_catalog_entry("{7F28E973-1139-4D02-8F8C-C0F68E3035A9}", IAgVACbAttitudeIAU1994)
agcls.AgTypeNameMap["IAgVACbAttitudeIAU1994"] = IAgVACbAttitudeIAU1994

class IAgVACbEphemerisAnalyticOrbit(IAgVACbEphemeris):
    """Properties for the Analytic Orbit ephemeris source."""
    _num_methods = 26
    _vtable_offset = IAgVACbEphemeris._vtable_offset + IAgVACbEphemeris._num_methods
    _metadata = {
        "uuid" : "{662F2BBE-2CFB-41F7-A928-26A4909C31AB}",
        "vtable_reference" : IAgVACbEphemeris._vtable_offset + IAgVACbEphemeris._num_methods - 1,
        "method_offsets" : { "get_Epoch" : 1,
                             "set_Epoch" : 2,
                             "get_SemiMajorAxis" : 3,
                             "set_SemiMajorAxis" : 4,
                             "get_SemiMajorAxisRate" : 5,
                             "set_SemiMajorAxisRate" : 6,
                             "get_Eccentricity" : 7,
                             "set_Eccentricity" : 8,
                             "get_EccentricityRate" : 9,
                             "set_EccentricityRate" : 10,
                             "get_Inclination" : 11,
                             "set_Inclination" : 12,
                             "get_InclinationRate" : 13,
                             "set_InclinationRate" : 14,
                             "get_RAAN" : 15,
                             "set_RAAN" : 16,
                             "get_RAANRate" : 17,
                             "set_RAANRate" : 18,
                             "get_ArgOfPeriapsis" : 19,
                             "set_ArgOfPeriapsis" : 20,
                             "get_ArgOfPeriapsisRate" : 21,
                             "set_ArgOfPeriapsisRate" : 22,
                             "get_MeanLongitude" : 23,
                             "set_MeanLongitude" : 24,
                             "get_MeanLongitudeRate" : 25,
                             "set_MeanLongitudeRate" : 26, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVACbEphemerisAnalyticOrbit._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVACbEphemerisAnalyticOrbit from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVACbEphemeris._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVACbEphemerisAnalyticOrbit.__dict__ and type(IAgVACbEphemerisAnalyticOrbit.__dict__[attrname]) == property:
            return IAgVACbEphemerisAnalyticOrbit.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            IAgVACbEphemeris.__setattr__(self, attrname, value)
    
    _get_Epoch_metadata = { "name" : "Epoch",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def Epoch(self) -> float:
        """The epoch. Dimensionless."""
        return self._intf.get_property(IAgVACbEphemerisAnalyticOrbit._metadata, IAgVACbEphemerisAnalyticOrbit._get_Epoch_metadata)

    _set_Epoch_metadata = { "name" : "Epoch",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @Epoch.setter
    def Epoch(self, newVal:float) -> None:
        return self._intf.set_property(IAgVACbEphemerisAnalyticOrbit._metadata, IAgVACbEphemerisAnalyticOrbit._set_Epoch_metadata, newVal)

    _get_SemiMajorAxis_metadata = { "name" : "SemiMajorAxis",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def SemiMajorAxis(self) -> float:
        """The semi-major axis; one-half the distance along the long axis of the elliptical orbit. Uses Distance Dimension."""
        return self._intf.get_property(IAgVACbEphemerisAnalyticOrbit._metadata, IAgVACbEphemerisAnalyticOrbit._get_SemiMajorAxis_metadata)

    _set_SemiMajorAxis_metadata = { "name" : "SemiMajorAxis",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @SemiMajorAxis.setter
    def SemiMajorAxis(self, newVal:float) -> None:
        return self._intf.set_property(IAgVACbEphemerisAnalyticOrbit._metadata, IAgVACbEphemerisAnalyticOrbit._set_SemiMajorAxis_metadata, newVal)

    _get_SemiMajorAxisRate_metadata = { "name" : "SemiMajorAxisRate",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def SemiMajorAxisRate(self) -> float:
        """The semi-major axis rate of change. Uses Rate Dimension."""
        return self._intf.get_property(IAgVACbEphemerisAnalyticOrbit._metadata, IAgVACbEphemerisAnalyticOrbit._get_SemiMajorAxisRate_metadata)

    _set_SemiMajorAxisRate_metadata = { "name" : "SemiMajorAxisRate",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @SemiMajorAxisRate.setter
    def SemiMajorAxisRate(self, newVal:float) -> None:
        return self._intf.set_property(IAgVACbEphemerisAnalyticOrbit._metadata, IAgVACbEphemerisAnalyticOrbit._set_SemiMajorAxisRate_metadata, newVal)

    _get_Eccentricity_metadata = { "name" : "Eccentricity",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def Eccentricity(self) -> float:
        """The eccentricity; the ratio of the distance between the two foci of the ellipse and its major axis. Dimensionless."""
        return self._intf.get_property(IAgVACbEphemerisAnalyticOrbit._metadata, IAgVACbEphemerisAnalyticOrbit._get_Eccentricity_metadata)

    _set_Eccentricity_metadata = { "name" : "Eccentricity",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @Eccentricity.setter
    def Eccentricity(self, newVal:float) -> None:
        return self._intf.set_property(IAgVACbEphemerisAnalyticOrbit._metadata, IAgVACbEphemerisAnalyticOrbit._set_Eccentricity_metadata, newVal)

    _get_EccentricityRate_metadata = { "name" : "EccentricityRate",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def EccentricityRate(self) -> float:
        """The eccentricity rate of change. Dimensionless."""
        return self._intf.get_property(IAgVACbEphemerisAnalyticOrbit._metadata, IAgVACbEphemerisAnalyticOrbit._get_EccentricityRate_metadata)

    _set_EccentricityRate_metadata = { "name" : "EccentricityRate",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @EccentricityRate.setter
    def EccentricityRate(self, newVal:float) -> None:
        return self._intf.set_property(IAgVACbEphemerisAnalyticOrbit._metadata, IAgVACbEphemerisAnalyticOrbit._set_EccentricityRate_metadata, newVal)

    _get_Inclination_metadata = { "name" : "Inclination",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def Inclination(self) -> typing.Any:
        """The inclination; the angle from the Z axis of the inertial coordinate system to the orbit angular velocity vector. Uses Angle Dimension."""
        return self._intf.get_property(IAgVACbEphemerisAnalyticOrbit._metadata, IAgVACbEphemerisAnalyticOrbit._get_Inclination_metadata)

    _set_Inclination_metadata = { "name" : "Inclination",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @Inclination.setter
    def Inclination(self, newVal:typing.Any) -> None:
        return self._intf.set_property(IAgVACbEphemerisAnalyticOrbit._metadata, IAgVACbEphemerisAnalyticOrbit._set_Inclination_metadata, newVal)

    _get_InclinationRate_metadata = { "name" : "InclinationRate",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def InclinationRate(self) -> float:
        """The inclination rate of change. Uses AngleRate Dimension."""
        return self._intf.get_property(IAgVACbEphemerisAnalyticOrbit._metadata, IAgVACbEphemerisAnalyticOrbit._get_InclinationRate_metadata)

    _set_InclinationRate_metadata = { "name" : "InclinationRate",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @InclinationRate.setter
    def InclinationRate(self, newVal:float) -> None:
        return self._intf.set_property(IAgVACbEphemerisAnalyticOrbit._metadata, IAgVACbEphemerisAnalyticOrbit._set_InclinationRate_metadata, newVal)

    _get_RAAN_metadata = { "name" : "RAAN",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def RAAN(self) -> typing.Any:
        """The right ascension; the angle from the X axis of the inertial coordinate system to the point where the orbit crosses the X-Y plane in the +Z direction. Uses Angle Dimension."""
        return self._intf.get_property(IAgVACbEphemerisAnalyticOrbit._metadata, IAgVACbEphemerisAnalyticOrbit._get_RAAN_metadata)

    _set_RAAN_metadata = { "name" : "RAAN",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @RAAN.setter
    def RAAN(self, newVal:typing.Any) -> None:
        return self._intf.set_property(IAgVACbEphemerisAnalyticOrbit._metadata, IAgVACbEphemerisAnalyticOrbit._set_RAAN_metadata, newVal)

    _get_RAANRate_metadata = { "name" : "RAANRate",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def RAANRate(self) -> float:
        """The right ascension rate of change. Uses AngleRate Dimension."""
        return self._intf.get_property(IAgVACbEphemerisAnalyticOrbit._metadata, IAgVACbEphemerisAnalyticOrbit._get_RAANRate_metadata)

    _set_RAANRate_metadata = { "name" : "RAANRate",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @RAANRate.setter
    def RAANRate(self, newVal:float) -> None:
        return self._intf.set_property(IAgVACbEphemerisAnalyticOrbit._metadata, IAgVACbEphemerisAnalyticOrbit._set_RAANRate_metadata, newVal)

    _get_ArgOfPeriapsis_metadata = { "name" : "ArgOfPeriapsis",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def ArgOfPeriapsis(self) -> typing.Any:
        """The argument of periapsis; The angle measured in direction of the body's orbital motion, and in the orbit plane, from the ascending node to the periapsis of the orbit. Uses Angle Dimension."""
        return self._intf.get_property(IAgVACbEphemerisAnalyticOrbit._metadata, IAgVACbEphemerisAnalyticOrbit._get_ArgOfPeriapsis_metadata)

    _set_ArgOfPeriapsis_metadata = { "name" : "ArgOfPeriapsis",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @ArgOfPeriapsis.setter
    def ArgOfPeriapsis(self, newVal:typing.Any) -> None:
        return self._intf.set_property(IAgVACbEphemerisAnalyticOrbit._metadata, IAgVACbEphemerisAnalyticOrbit._set_ArgOfPeriapsis_metadata, newVal)

    _get_ArgOfPeriapsisRate_metadata = { "name" : "ArgOfPeriapsisRate",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def ArgOfPeriapsisRate(self) -> float:
        """The argument of periapsis rate of change. Uses AngleRate Dimension."""
        return self._intf.get_property(IAgVACbEphemerisAnalyticOrbit._metadata, IAgVACbEphemerisAnalyticOrbit._get_ArgOfPeriapsisRate_metadata)

    _set_ArgOfPeriapsisRate_metadata = { "name" : "ArgOfPeriapsisRate",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @ArgOfPeriapsisRate.setter
    def ArgOfPeriapsisRate(self, newVal:float) -> None:
        return self._intf.set_property(IAgVACbEphemerisAnalyticOrbit._metadata, IAgVACbEphemerisAnalyticOrbit._set_ArgOfPeriapsisRate_metadata, newVal)

    _get_MeanLongitude_metadata = { "name" : "MeanLongitude",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def MeanLongitude(self) -> typing.Any:
        """The mean longitude; the sum of the Right Ascension of the Ascending Node, the Argument of Periapsis and the Mean Anomaly. Uses Angle Dimension."""
        return self._intf.get_property(IAgVACbEphemerisAnalyticOrbit._metadata, IAgVACbEphemerisAnalyticOrbit._get_MeanLongitude_metadata)

    _set_MeanLongitude_metadata = { "name" : "MeanLongitude",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @MeanLongitude.setter
    def MeanLongitude(self, newVal:typing.Any) -> None:
        return self._intf.set_property(IAgVACbEphemerisAnalyticOrbit._metadata, IAgVACbEphemerisAnalyticOrbit._set_MeanLongitude_metadata, newVal)

    _get_MeanLongitudeRate_metadata = { "name" : "MeanLongitudeRate",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def MeanLongitudeRate(self) -> float:
        """The mean longitude rate of change. Uses AngleRate Dimension."""
        return self._intf.get_property(IAgVACbEphemerisAnalyticOrbit._metadata, IAgVACbEphemerisAnalyticOrbit._get_MeanLongitudeRate_metadata)

    _set_MeanLongitudeRate_metadata = { "name" : "MeanLongitudeRate",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @MeanLongitudeRate.setter
    def MeanLongitudeRate(self, newVal:float) -> None:
        return self._intf.set_property(IAgVACbEphemerisAnalyticOrbit._metadata, IAgVACbEphemerisAnalyticOrbit._set_MeanLongitudeRate_metadata, newVal)


agcls.AgClassCatalog.add_catalog_entry("{662F2BBE-2CFB-41F7-A928-26A4909C31AB}", IAgVACbEphemerisAnalyticOrbit)
agcls.AgTypeNameMap["IAgVACbEphemerisAnalyticOrbit"] = IAgVACbEphemerisAnalyticOrbit

class IAgVACbEphemerisJPLSpice(IAgVACbEphemeris):
    """Properties for the JPL SPICE ephemeris source."""
    _num_methods = 2
    _vtable_offset = IAgVACbEphemeris._vtable_offset + IAgVACbEphemeris._num_methods
    _metadata = {
        "uuid" : "{B6A4A547-92B1-4584-B8E9-D3C12ED6CC9C}",
        "vtable_reference" : IAgVACbEphemeris._vtable_offset + IAgVACbEphemeris._num_methods - 1,
        "method_offsets" : { "get_JPLSpiceId" : 1,
                             "set_JPLSpiceId" : 2, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVACbEphemerisJPLSpice._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVACbEphemerisJPLSpice from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVACbEphemeris._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVACbEphemerisJPLSpice.__dict__ and type(IAgVACbEphemerisJPLSpice.__dict__[attrname]) == property:
            return IAgVACbEphemerisJPLSpice.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            IAgVACbEphemeris.__setattr__(self, attrname, value)
    
    _get_JPLSpiceId_metadata = { "name" : "JPLSpiceId",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def JPLSpiceId(self) -> str:
        """The SPICE file name."""
        return self._intf.get_property(IAgVACbEphemerisJPLSpice._metadata, IAgVACbEphemerisJPLSpice._get_JPLSpiceId_metadata)

    _set_JPLSpiceId_metadata = { "name" : "JPLSpiceId",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @JPLSpiceId.setter
    def JPLSpiceId(self, newVal:str) -> None:
        return self._intf.set_property(IAgVACbEphemerisJPLSpice._metadata, IAgVACbEphemerisJPLSpice._set_JPLSpiceId_metadata, newVal)


agcls.AgClassCatalog.add_catalog_entry("{B6A4A547-92B1-4584-B8E9-D3C12ED6CC9C}", IAgVACbEphemerisJPLSpice)
agcls.AgTypeNameMap["IAgVACbEphemerisJPLSpice"] = IAgVACbEphemerisJPLSpice

class IAgVACbEphemerisFile(IAgVACbEphemeris):
    """Properties for the Ephemeris File ephemeris source."""
    _num_methods = 2
    _vtable_offset = IAgVACbEphemeris._vtable_offset + IAgVACbEphemeris._num_methods
    _metadata = {
        "uuid" : "{8B38CE6C-B8E1-489F-8ED1-B3703A13D986}",
        "vtable_reference" : IAgVACbEphemeris._vtable_offset + IAgVACbEphemeris._num_methods - 1,
        "method_offsets" : { "get_Filename" : 1,
                             "set_Filename" : 2, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVACbEphemerisFile._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVACbEphemerisFile from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVACbEphemeris._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVACbEphemerisFile.__dict__ and type(IAgVACbEphemerisFile.__dict__[attrname]) == property:
            return IAgVACbEphemerisFile.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            IAgVACbEphemeris.__setattr__(self, attrname, value)
    
    _get_Filename_metadata = { "name" : "Filename",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def Filename(self) -> str:
        """The ephemeris file name."""
        return self._intf.get_property(IAgVACbEphemerisFile._metadata, IAgVACbEphemerisFile._get_Filename_metadata)

    _set_Filename_metadata = { "name" : "Filename",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @Filename.setter
    def Filename(self, newVal:str) -> None:
        return self._intf.set_property(IAgVACbEphemerisFile._metadata, IAgVACbEphemerisFile._set_Filename_metadata, newVal)


agcls.AgClassCatalog.add_catalog_entry("{8B38CE6C-B8E1-489F-8ED1-B3703A13D986}", IAgVACbEphemerisFile)
agcls.AgTypeNameMap["IAgVACbEphemerisFile"] = IAgVACbEphemerisFile

class IAgVACbEphemerisJPLDE(IAgVACbEphemeris):
    """Properties for the JPL DE ephemeris source."""
    _num_methods = 2
    _vtable_offset = IAgVACbEphemeris._vtable_offset + IAgVACbEphemeris._num_methods
    _metadata = {
        "uuid" : "{FCD86AB9-0919-46BC-BF99-287F49837BD5}",
        "vtable_reference" : IAgVACbEphemeris._vtable_offset + IAgVACbEphemeris._num_methods - 1,
        "method_offsets" : { "get_JPLDEFilename" : 1,
                             "set_JPLDEFilename" : 2, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVACbEphemerisJPLDE._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVACbEphemerisJPLDE from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVACbEphemeris._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVACbEphemerisJPLDE.__dict__ and type(IAgVACbEphemerisJPLDE.__dict__[attrname]) == property:
            return IAgVACbEphemerisJPLDE.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            IAgVACbEphemeris.__setattr__(self, attrname, value)
    
    _get_JPLDEFilename_metadata = { "name" : "JPLDEFilename",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def JPLDEFilename(self) -> str:
        """The DE file name."""
        return self._intf.get_property(IAgVACbEphemerisJPLDE._metadata, IAgVACbEphemerisJPLDE._get_JPLDEFilename_metadata)

    _set_JPLDEFilename_metadata = { "name" : "JPLDEFilename",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @JPLDEFilename.setter
    def JPLDEFilename(self, newVal:str) -> None:
        return self._intf.set_property(IAgVACbEphemerisJPLDE._metadata, IAgVACbEphemerisJPLDE._set_JPLDEFilename_metadata, newVal)


agcls.AgClassCatalog.add_catalog_entry("{FCD86AB9-0919-46BC-BF99-287F49837BD5}", IAgVACbEphemerisJPLDE)
agcls.AgTypeNameMap["IAgVACbEphemerisJPLDE"] = IAgVACbEphemerisJPLDE

class IAgVACbEphemerisPlanetary(IAgVACbEphemeris):
    """Properties for the Planetary Ephemeris file ephemeris source."""
    _num_methods = 2
    _vtable_offset = IAgVACbEphemeris._vtable_offset + IAgVACbEphemeris._num_methods
    _metadata = {
        "uuid" : "{471AE49F-1C98-4572-9EDD-16060AFA9208}",
        "vtable_reference" : IAgVACbEphemeris._vtable_offset + IAgVACbEphemeris._num_methods - 1,
        "method_offsets" : { "get_PlanetaryFilename" : 1,
                             "set_PlanetaryFilename" : 2, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVACbEphemerisPlanetary._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVACbEphemerisPlanetary from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVACbEphemeris._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVACbEphemerisPlanetary.__dict__ and type(IAgVACbEphemerisPlanetary.__dict__[attrname]) == property:
            return IAgVACbEphemerisPlanetary.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            IAgVACbEphemeris.__setattr__(self, attrname, value)
    
    _get_PlanetaryFilename_metadata = { "name" : "PlanetaryFilename",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def PlanetaryFilename(self) -> str:
        """The planetary ephemeris file name."""
        return self._intf.get_property(IAgVACbEphemerisPlanetary._metadata, IAgVACbEphemerisPlanetary._get_PlanetaryFilename_metadata)

    _set_PlanetaryFilename_metadata = { "name" : "PlanetaryFilename",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @PlanetaryFilename.setter
    def PlanetaryFilename(self, newVal:str) -> None:
        return self._intf.set_property(IAgVACbEphemerisPlanetary._metadata, IAgVACbEphemerisPlanetary._set_PlanetaryFilename_metadata, newVal)


agcls.AgClassCatalog.add_catalog_entry("{471AE49F-1C98-4572-9EDD-16060AFA9208}", IAgVACbEphemerisPlanetary)
agcls.AgTypeNameMap["IAgVACbEphemerisPlanetary"] = IAgVACbEphemerisPlanetary

class IAgVACentralBody(object):
    """General properties for a central body."""
    _num_methods = 41
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{5AA2ACF6-1764-4E46-BA4F-4619640CBC83}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_GravitationalParam" : 1,
                             "set_GravitationalParam" : 2,
                             "get_ParentName" : 3,
                             "set_ParentName" : 4,
                             "get_Children" : 5,
                             "get_DefaultGravityModelName" : 6,
                             "SetDefaultGravityModelByName" : 7,
                             "get_DefaultGravityModelData" : 8,
                             "AddGravityModel" : 9,
                             "RemoveGravityModelByName" : 10,
                             "get_DefaultShapeName" : 11,
                             "get_DefaultShapeData" : 12,
                             "SetDefaultShapeByName" : 13,
                             "AddShape" : 14,
                             "RemoveShapeByName" : 15,
                             "get_DefaultAttitudeName" : 16,
                             "get_DefaultAttitudeData" : 17,
                             "SetDefaultAttitudeByName" : 18,
                             "AddAttitude" : 19,
                             "RemoveAttitudeByName" : 20,
                             "get_DefaultEphemerisName" : 21,
                             "SetDefaultEphemerisByName" : 22,
                             "get_DefaultEphemerisData" : 23,
                             "AddEphemeris" : 24,
                             "RemoveEphemerisByName" : 25,
                             "CutGravityModelByName" : 26,
                             "CopyGravityModelByName" : 27,
                             "PasteGravityModel" : 28,
                             "AddCopyOfGravityModel" : 29,
                             "CutShapeByName" : 30,
                             "CopyShapeByName" : 31,
                             "PasteShape" : 32,
                             "AddCopyOfShape" : 33,
                             "CutAttitudeByName" : 34,
                             "CopyAttitudeByName" : 35,
                             "PasteAttitude" : 36,
                             "AddCopyOfAttitude" : 37,
                             "CutEphemerisByName" : 38,
                             "CopyEphemerisByName" : 39,
                             "PasteEphemeris" : 40,
                             "AddCopyOfEphemeris" : 41, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVACentralBody._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVACentralBody from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVACentralBody.__dict__ and type(IAgVACentralBody.__dict__[attrname]) == property:
            return IAgVACentralBody.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVACentralBody.")
    
    _get_GravitationalParam_metadata = { "name" : "GravitationalParam",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def GravitationalParam(self) -> float:
        """The gravitational parameter to be used. Uses Gravity Parameter Dimension."""
        return self._intf.get_property(IAgVACentralBody._metadata, IAgVACentralBody._get_GravitationalParam_metadata)

    _set_GravitationalParam_metadata = { "name" : "GravitationalParam",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @GravitationalParam.setter
    def GravitationalParam(self, newVal:float) -> None:
        return self._intf.set_property(IAgVACentralBody._metadata, IAgVACentralBody._set_GravitationalParam_metadata, newVal)

    _get_ParentName_metadata = { "name" : "ParentName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def ParentName(self) -> str:
        """The parent of this central body."""
        return self._intf.get_property(IAgVACentralBody._metadata, IAgVACentralBody._get_ParentName_metadata)

    _set_ParentName_metadata = { "name" : "ParentName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @ParentName.setter
    def ParentName(self, newVal:str) -> None:
        return self._intf.set_property(IAgVACentralBody._metadata, IAgVACentralBody._set_ParentName_metadata, newVal)

    _get_Children_metadata = { "name" : "Children",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def Children(self) -> "IAgVACentralBodyCollection":
        """The children of this central body."""
        return self._intf.get_property(IAgVACentralBody._metadata, IAgVACentralBody._get_Children_metadata)

    _get_DefaultGravityModelName_metadata = { "name" : "DefaultGravityModelName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def DefaultGravityModelName(self) -> str:
        """The gravity model."""
        return self._intf.get_property(IAgVACentralBody._metadata, IAgVACentralBody._get_DefaultGravityModelName_metadata)

    _SetDefaultGravityModelByName_metadata = { "name" : "SetDefaultGravityModelByName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    def SetDefaultGravityModelByName(self, gravityModelName:str) -> None:
        """Selects a gravity model"""
        return self._intf.invoke(IAgVACentralBody._metadata, IAgVACentralBody._SetDefaultGravityModelByName_metadata, gravityModelName)

    _get_DefaultGravityModelData_metadata = { "name" : "DefaultGravityModelData",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def DefaultGravityModelData(self) -> "IAgVACbGravityModel":
        """The gravity model parameters."""
        return self._intf.get_property(IAgVACentralBody._metadata, IAgVACentralBody._get_DefaultGravityModelData_metadata)

    _AddGravityModel_metadata = { "name" : "AddGravityModel",
            "arg_types" : (agcom.LONG, agcom.BSTR, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVACbGravityModel), agmarshall.BSTR_arg, agmarshall.AgInterface_out_arg,) }
    def AddGravityModel(self, eGravityModel:"AgEVACbGravityModel", uniqueName:str) -> "IAgVACbGravityModel":
        """Adds a central body gravity model type."""
        return self._intf.invoke(IAgVACentralBody._metadata, IAgVACentralBody._AddGravityModel_metadata, eGravityModel, uniqueName, out_arg())

    _RemoveGravityModelByName_metadata = { "name" : "RemoveGravityModelByName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    def RemoveGravityModelByName(self, gravityModelName:str) -> None:
        """Removes a central body gravity model type."""
        return self._intf.invoke(IAgVACentralBody._metadata, IAgVACentralBody._RemoveGravityModelByName_metadata, gravityModelName)

    _get_DefaultShapeName_metadata = { "name" : "DefaultShapeName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def DefaultShapeName(self) -> str:
        """The shape of the central body."""
        return self._intf.get_property(IAgVACentralBody._metadata, IAgVACentralBody._get_DefaultShapeName_metadata)

    _get_DefaultShapeData_metadata = { "name" : "DefaultShapeData",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def DefaultShapeData(self) -> "IAgVACbShape":
        """The parameters of the central body shape."""
        return self._intf.get_property(IAgVACentralBody._metadata, IAgVACentralBody._get_DefaultShapeData_metadata)

    _SetDefaultShapeByName_metadata = { "name" : "SetDefaultShapeByName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    def SetDefaultShapeByName(self, shapeName:str) -> None:
        """Selects a central body shape."""
        return self._intf.invoke(IAgVACentralBody._metadata, IAgVACentralBody._SetDefaultShapeByName_metadata, shapeName)

    _AddShape_metadata = { "name" : "AddShape",
            "arg_types" : (agcom.LONG, agcom.BSTR, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVACbShape), agmarshall.BSTR_arg, agmarshall.AgInterface_out_arg,) }
    def AddShape(self, eShape:"AgEVACbShape", uniqueName:str) -> "IAgVACbShape":
        """Adds a central body shape type from the available types."""
        return self._intf.invoke(IAgVACentralBody._metadata, IAgVACentralBody._AddShape_metadata, eShape, uniqueName, out_arg())

    _RemoveShapeByName_metadata = { "name" : "RemoveShapeByName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    def RemoveShapeByName(self, shapeName:str) -> None:
        """Removes a central body shape type."""
        return self._intf.invoke(IAgVACentralBody._metadata, IAgVACentralBody._RemoveShapeByName_metadata, shapeName)

    _get_DefaultAttitudeName_metadata = { "name" : "DefaultAttitudeName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def DefaultAttitudeName(self) -> str:
        """The attitude of the central body."""
        return self._intf.get_property(IAgVACentralBody._metadata, IAgVACentralBody._get_DefaultAttitudeName_metadata)

    _get_DefaultAttitudeData_metadata = { "name" : "DefaultAttitudeData",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def DefaultAttitudeData(self) -> "IAgVACbAttitude":
        """The parameters of the central body attitude."""
        return self._intf.get_property(IAgVACentralBody._metadata, IAgVACentralBody._get_DefaultAttitudeData_metadata)

    _SetDefaultAttitudeByName_metadata = { "name" : "SetDefaultAttitudeByName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    def SetDefaultAttitudeByName(self, attitudeName:str) -> None:
        """Selects a central body attitude."""
        return self._intf.invoke(IAgVACentralBody._metadata, IAgVACentralBody._SetDefaultAttitudeByName_metadata, attitudeName)

    _AddAttitude_metadata = { "name" : "AddAttitude",
            "arg_types" : (agcom.LONG, agcom.BSTR, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVACbAttitude), agmarshall.BSTR_arg, agmarshall.AgInterface_out_arg,) }
    def AddAttitude(self, eAttitude:"AgEVACbAttitude", uniqueName:str) -> "IAgVACbAttitude":
        """Adds a central body attitude type from the available types."""
        return self._intf.invoke(IAgVACentralBody._metadata, IAgVACentralBody._AddAttitude_metadata, eAttitude, uniqueName, out_arg())

    _RemoveAttitudeByName_metadata = { "name" : "RemoveAttitudeByName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    def RemoveAttitudeByName(self, attitudeName:str) -> None:
        """Removes a central body attitude type."""
        return self._intf.invoke(IAgVACentralBody._metadata, IAgVACentralBody._RemoveAttitudeByName_metadata, attitudeName)

    _get_DefaultEphemerisName_metadata = { "name" : "DefaultEphemerisName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def DefaultEphemerisName(self) -> str:
        """The ephemeris of the central body."""
        return self._intf.get_property(IAgVACentralBody._metadata, IAgVACentralBody._get_DefaultEphemerisName_metadata)

    _SetDefaultEphemerisByName_metadata = { "name" : "SetDefaultEphemerisByName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    def SetDefaultEphemerisByName(self, ephemerisName:str) -> None:
        """Selects an ephemeris type."""
        return self._intf.invoke(IAgVACentralBody._metadata, IAgVACentralBody._SetDefaultEphemerisByName_metadata, ephemerisName)

    _get_DefaultEphemerisData_metadata = { "name" : "DefaultEphemerisData",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def DefaultEphemerisData(self) -> "IAgVACbEphemeris":
        """The  parameters of the central body ephemeris."""
        return self._intf.get_property(IAgVACentralBody._metadata, IAgVACentralBody._get_DefaultEphemerisData_metadata)

    _AddEphemeris_metadata = { "name" : "AddEphemeris",
            "arg_types" : (agcom.LONG, agcom.BSTR, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVACbEphemeris), agmarshall.BSTR_arg, agmarshall.AgInterface_out_arg,) }
    def AddEphemeris(self, eEphemeris:"AgEVACbEphemeris", uniqueName:str) -> "IAgVACbEphemeris":
        """Adds an ephemeris type from the available types."""
        return self._intf.invoke(IAgVACentralBody._metadata, IAgVACentralBody._AddEphemeris_metadata, eEphemeris, uniqueName, out_arg())

    _RemoveEphemerisByName_metadata = { "name" : "RemoveEphemerisByName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    def RemoveEphemerisByName(self, ephemerisName:str) -> None:
        """Removes an ephemeris type."""
        return self._intf.invoke(IAgVACentralBody._metadata, IAgVACentralBody._RemoveEphemerisByName_metadata, ephemerisName)

    _CutGravityModelByName_metadata = { "name" : "CutGravityModelByName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    def CutGravityModelByName(self, gravityModelName:str) -> None:
        """Copies a gravity model to the clipboard and removes it from the central body"""
        return self._intf.invoke(IAgVACentralBody._metadata, IAgVACentralBody._CutGravityModelByName_metadata, gravityModelName)

    _CopyGravityModelByName_metadata = { "name" : "CopyGravityModelByName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    def CopyGravityModelByName(self, gravityModelName:str) -> None:
        """Copies a gravity model to the clipboard."""
        return self._intf.invoke(IAgVACentralBody._metadata, IAgVACentralBody._CopyGravityModelByName_metadata, gravityModelName)

    _PasteGravityModel_metadata = { "name" : "PasteGravityModel",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    def PasteGravityModel(self) -> "IAgVACbGravityModel":
        """Adds the gravity model in the clipboard to the central body."""
        return self._intf.invoke(IAgVACentralBody._metadata, IAgVACentralBody._PasteGravityModel_metadata, out_arg())

    _AddCopyOfGravityModel_metadata = { "name" : "AddCopyOfGravityModel",
            "arg_types" : (agcom.PVOID, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_in_arg("IAgVACbGravityModel"), agmarshall.AgInterface_out_arg,) }
    def AddCopyOfGravityModel(self, gravityModel:"IAgVACbGravityModel") -> "IAgVACbGravityModel":
        """Adds the gravity model to the central body"""
        return self._intf.invoke(IAgVACentralBody._metadata, IAgVACentralBody._AddCopyOfGravityModel_metadata, gravityModel, out_arg())

    _CutShapeByName_metadata = { "name" : "CutShapeByName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    def CutShapeByName(self, shapeName:str) -> None:
        """Copies a central body shape to the clipboard and removes it from the central body"""
        return self._intf.invoke(IAgVACentralBody._metadata, IAgVACentralBody._CutShapeByName_metadata, shapeName)

    _CopyShapeByName_metadata = { "name" : "CopyShapeByName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    def CopyShapeByName(self, shapeName:str) -> None:
        """Copies a central body shape to the clipboard."""
        return self._intf.invoke(IAgVACentralBody._metadata, IAgVACentralBody._CopyShapeByName_metadata, shapeName)

    _PasteShape_metadata = { "name" : "PasteShape",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    def PasteShape(self) -> "IAgVACbShape":
        """Adds the central body shape in the clipboard to the central body."""
        return self._intf.invoke(IAgVACentralBody._metadata, IAgVACentralBody._PasteShape_metadata, out_arg())

    _AddCopyOfShape_metadata = { "name" : "AddCopyOfShape",
            "arg_types" : (agcom.PVOID, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_in_arg("IAgVACbShape"), agmarshall.AgInterface_out_arg,) }
    def AddCopyOfShape(self, shape:"IAgVACbShape") -> "IAgVACbShape":
        """Adds the central body shape to the central body"""
        return self._intf.invoke(IAgVACentralBody._metadata, IAgVACentralBody._AddCopyOfShape_metadata, shape, out_arg())

    _CutAttitudeByName_metadata = { "name" : "CutAttitudeByName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    def CutAttitudeByName(self, attitudeName:str) -> None:
        """Copies a central body attitude definition to the clipboard and removes it from the central body"""
        return self._intf.invoke(IAgVACentralBody._metadata, IAgVACentralBody._CutAttitudeByName_metadata, attitudeName)

    _CopyAttitudeByName_metadata = { "name" : "CopyAttitudeByName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    def CopyAttitudeByName(self, attitudeName:str) -> None:
        """Copies a central body attitude definition to the clipboard."""
        return self._intf.invoke(IAgVACentralBody._metadata, IAgVACentralBody._CopyAttitudeByName_metadata, attitudeName)

    _PasteAttitude_metadata = { "name" : "PasteAttitude",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    def PasteAttitude(self) -> "IAgVACbAttitude":
        """Adds the central body attitude definition in the clipboard to the central body."""
        return self._intf.invoke(IAgVACentralBody._metadata, IAgVACentralBody._PasteAttitude_metadata, out_arg())

    _AddCopyOfAttitude_metadata = { "name" : "AddCopyOfAttitude",
            "arg_types" : (agcom.PVOID, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_in_arg("IAgVACbAttitude"), agmarshall.AgInterface_out_arg,) }
    def AddCopyOfAttitude(self, attitude:"IAgVACbAttitude") -> "IAgVACbAttitude":
        """Adds the central body attitude definition to the central body"""
        return self._intf.invoke(IAgVACentralBody._metadata, IAgVACentralBody._AddCopyOfAttitude_metadata, attitude, out_arg())

    _CutEphemerisByName_metadata = { "name" : "CutEphemerisByName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    def CutEphemerisByName(self, ephemerisName:str) -> None:
        """Copies a central body ephemeris definition to the clipboard and removes it from the central body"""
        return self._intf.invoke(IAgVACentralBody._metadata, IAgVACentralBody._CutEphemerisByName_metadata, ephemerisName)

    _CopyEphemerisByName_metadata = { "name" : "CopyEphemerisByName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    def CopyEphemerisByName(self, ephemerisName:str) -> None:
        """Copies a central body ephemeris definition to the clipboard."""
        return self._intf.invoke(IAgVACentralBody._metadata, IAgVACentralBody._CopyEphemerisByName_metadata, ephemerisName)

    _PasteEphemeris_metadata = { "name" : "PasteEphemeris",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    def PasteEphemeris(self) -> "IAgVACbEphemeris":
        """Adds the central body ephemeris definition in the clipboard to the central body."""
        return self._intf.invoke(IAgVACentralBody._metadata, IAgVACentralBody._PasteEphemeris_metadata, out_arg())

    _AddCopyOfEphemeris_metadata = { "name" : "AddCopyOfEphemeris",
            "arg_types" : (agcom.PVOID, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_in_arg("IAgVACbEphemeris"), agmarshall.AgInterface_out_arg,) }
    def AddCopyOfEphemeris(self, ephemeris:"IAgVACbEphemeris") -> "IAgVACbEphemeris":
        """Adds the central body ephemeris definition to the central body"""
        return self._intf.invoke(IAgVACentralBody._metadata, IAgVACentralBody._AddCopyOfEphemeris_metadata, ephemeris, out_arg())


agcls.AgClassCatalog.add_catalog_entry("{5AA2ACF6-1764-4E46-BA4F-4619640CBC83}", IAgVACentralBody)
agcls.AgTypeNameMap["IAgVACentralBody"] = IAgVACentralBody

class IAgVAPowerInternal(object):
    """Properties for the Internal Power power source component."""
    _num_methods = 10
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{8ACB8A4A-52E8-4E71-8FD1-37B53E392858}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_GeneratedPower" : 1,
                             "set_GeneratedPower" : 2,
                             "get_PercentDegradationPerYear" : 3,
                             "set_PercentDegradationPerYear" : 4,
                             "get_ReferenceEpoch" : 5,
                             "set_ReferenceEpoch" : 6,
                             "EnableControlParameter" : 7,
                             "DisableControlParameter" : 8,
                             "IsControlParameterEnabled" : 9,
                             "get_ControlParametersAvailable" : 10, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAPowerInternal._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAPowerInternal from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAPowerInternal.__dict__ and type(IAgVAPowerInternal.__dict__[attrname]) == property:
            return IAgVAPowerInternal.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAPowerInternal.")
    
    _get_GeneratedPower_metadata = { "name" : "GeneratedPower",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def GeneratedPower(self) -> float:
        """The power generated by the spacecraft from internal sources. Uses Power Dimension."""
        return self._intf.get_property(IAgVAPowerInternal._metadata, IAgVAPowerInternal._get_GeneratedPower_metadata)

    _set_GeneratedPower_metadata = { "name" : "GeneratedPower",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @GeneratedPower.setter
    def GeneratedPower(self, inVal:float) -> None:
        return self._intf.set_property(IAgVAPowerInternal._metadata, IAgVAPowerInternal._set_GeneratedPower_metadata, inVal)

    _get_PercentDegradationPerYear_metadata = { "name" : "PercentDegradationPerYear",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def PercentDegradationPerYear(self) -> float:
        """The percent degradation per year; degradation factor is (1-x%/yr)^(timeSinceRefEpoch). Dimensionless."""
        return self._intf.get_property(IAgVAPowerInternal._metadata, IAgVAPowerInternal._get_PercentDegradationPerYear_metadata)

    _set_PercentDegradationPerYear_metadata = { "name" : "PercentDegradationPerYear",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @PercentDegradationPerYear.setter
    def PercentDegradationPerYear(self, inVal:float) -> None:
        return self._intf.set_property(IAgVAPowerInternal._metadata, IAgVAPowerInternal._set_PercentDegradationPerYear_metadata, inVal)

    _get_ReferenceEpoch_metadata = { "name" : "ReferenceEpoch",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def ReferenceEpoch(self) -> typing.Any:
        """The date and Time used as reference epoch for degradation. Uses DateFormat Dimension."""
        return self._intf.get_property(IAgVAPowerInternal._metadata, IAgVAPowerInternal._get_ReferenceEpoch_metadata)

    _set_ReferenceEpoch_metadata = { "name" : "ReferenceEpoch",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @ReferenceEpoch.setter
    def ReferenceEpoch(self, inVal:typing.Any) -> None:
        return self._intf.set_property(IAgVAPowerInternal._metadata, IAgVAPowerInternal._set_ReferenceEpoch_metadata, inVal)

    _EnableControlParameter_metadata = { "name" : "EnableControlParameter",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAControlPowerInternal),) }
    def EnableControlParameter(self, param:"AgEVAControlPowerInternal") -> None:
        """Enables the specified control parameter."""
        return self._intf.invoke(IAgVAPowerInternal._metadata, IAgVAPowerInternal._EnableControlParameter_metadata, param)

    _DisableControlParameter_metadata = { "name" : "DisableControlParameter",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAControlPowerInternal),) }
    def DisableControlParameter(self, param:"AgEVAControlPowerInternal") -> None:
        """Disables the specified control parameter."""
        return self._intf.invoke(IAgVAPowerInternal._metadata, IAgVAPowerInternal._DisableControlParameter_metadata, param)

    _IsControlParameterEnabled_metadata = { "name" : "IsControlParameterEnabled",
            "arg_types" : (agcom.LONG, POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAControlPowerInternal), agmarshall.VARIANT_BOOL_arg,) }
    def IsControlParameterEnabled(self, param:"AgEVAControlPowerInternal") -> bool:
        """Sees if the specified control is enabled."""
        return self._intf.invoke(IAgVAPowerInternal._metadata, IAgVAPowerInternal._IsControlParameterEnabled_metadata, param, out_arg())

    _get_ControlParametersAvailable_metadata = { "name" : "ControlParametersAvailable",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def ControlParametersAvailable(self) -> bool:
        """Returns whether or not the control parameters can be set."""
        return self._intf.get_property(IAgVAPowerInternal._metadata, IAgVAPowerInternal._get_ControlParametersAvailable_metadata)


agcls.AgClassCatalog.add_catalog_entry("{8ACB8A4A-52E8-4E71-8FD1-37B53E392858}", IAgVAPowerInternal)
agcls.AgTypeNameMap["IAgVAPowerInternal"] = IAgVAPowerInternal

class IAgVAPowerProcessed(object):
    """Properties for the Processed Power power source component."""
    _num_methods = 10
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{D3C19CA2-B73F-48BB-9B24-A7860136AE03}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_Load" : 1,
                             "set_Load" : 2,
                             "get_Efficiency" : 3,
                             "set_Efficiency" : 4,
                             "get_InputPowerSourceName" : 5,
                             "set_InputPowerSourceName" : 6,
                             "EnableControlParameter" : 7,
                             "DisableControlParameter" : 8,
                             "IsControlParameterEnabled" : 9,
                             "get_ControlParametersAvailable" : 10, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAPowerProcessed._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAPowerProcessed from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAPowerProcessed.__dict__ and type(IAgVAPowerProcessed.__dict__[attrname]) == property:
            return IAgVAPowerProcessed.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAPowerProcessed.")
    
    _get_Load_metadata = { "name" : "Load",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def Load(self) -> float:
        """The power diverted from power source and unavailable to PPU. Uses Power Dimension."""
        return self._intf.get_property(IAgVAPowerProcessed._metadata, IAgVAPowerProcessed._get_Load_metadata)

    _set_Load_metadata = { "name" : "Load",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @Load.setter
    def Load(self, inVal:float) -> None:
        return self._intf.set_property(IAgVAPowerProcessed._metadata, IAgVAPowerProcessed._set_Load_metadata, inVal)

    _get_Efficiency_metadata = { "name" : "Efficiency",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def Efficiency(self) -> float:
        """The efficiency of the PPU unit. Dimensionless."""
        return self._intf.get_property(IAgVAPowerProcessed._metadata, IAgVAPowerProcessed._get_Efficiency_metadata)

    _set_Efficiency_metadata = { "name" : "Efficiency",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @Efficiency.setter
    def Efficiency(self, inVal:float) -> None:
        return self._intf.set_property(IAgVAPowerProcessed._metadata, IAgVAPowerProcessed._set_Efficiency_metadata, inVal)

    _get_InputPowerSourceName_metadata = { "name" : "InputPowerSourceName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def InputPowerSourceName(self) -> str:
        """The source of power available to PPU."""
        return self._intf.get_property(IAgVAPowerProcessed._metadata, IAgVAPowerProcessed._get_InputPowerSourceName_metadata)

    _set_InputPowerSourceName_metadata = { "name" : "InputPowerSourceName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @InputPowerSourceName.setter
    def InputPowerSourceName(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAPowerProcessed._metadata, IAgVAPowerProcessed._set_InputPowerSourceName_metadata, inVal)

    _EnableControlParameter_metadata = { "name" : "EnableControlParameter",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAControlPowerProcessed),) }
    def EnableControlParameter(self, param:"AgEVAControlPowerProcessed") -> None:
        """Enables the specified control parameter."""
        return self._intf.invoke(IAgVAPowerProcessed._metadata, IAgVAPowerProcessed._EnableControlParameter_metadata, param)

    _DisableControlParameter_metadata = { "name" : "DisableControlParameter",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAControlPowerProcessed),) }
    def DisableControlParameter(self, param:"AgEVAControlPowerProcessed") -> None:
        """Disables the specified control parameter."""
        return self._intf.invoke(IAgVAPowerProcessed._metadata, IAgVAPowerProcessed._DisableControlParameter_metadata, param)

    _IsControlParameterEnabled_metadata = { "name" : "IsControlParameterEnabled",
            "arg_types" : (agcom.LONG, POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAControlPowerProcessed), agmarshall.VARIANT_BOOL_arg,) }
    def IsControlParameterEnabled(self, param:"AgEVAControlPowerProcessed") -> bool:
        """Sees if the specified control is enabled."""
        return self._intf.invoke(IAgVAPowerProcessed._metadata, IAgVAPowerProcessed._IsControlParameterEnabled_metadata, param, out_arg())

    _get_ControlParametersAvailable_metadata = { "name" : "ControlParametersAvailable",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def ControlParametersAvailable(self) -> bool:
        """Returns whether or not the control parameters can be set."""
        return self._intf.get_property(IAgVAPowerProcessed._metadata, IAgVAPowerProcessed._get_ControlParametersAvailable_metadata)


agcls.AgClassCatalog.add_catalog_entry("{D3C19CA2-B73F-48BB-9B24-A7860136AE03}", IAgVAPowerProcessed)
agcls.AgTypeNameMap["IAgVAPowerProcessed"] = IAgVAPowerProcessed

class IAgVAPowerSolarArray(object):
    """Properties for the Solar Array Power power source component."""
    _num_methods = 29
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{E8776401-2DE0-49E8-8080-FD0442E57701}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_Area" : 1,
                             "set_Area" : 2,
                             "get_Concentration" : 3,
                             "set_Concentration" : 4,
                             "get_CellEfficiencyPercent" : 5,
                             "set_CellEfficiencyPercent" : 6,
                             "get_ArrayEfficiencyPercent" : 7,
                             "set_ArrayEfficiencyPercent" : 8,
                             "get_PercentDegradationPerYear" : 9,
                             "set_PercentDegradationPerYear" : 10,
                             "get_ReferenceEpoch" : 11,
                             "set_ReferenceEpoch" : 12,
                             "get_InclinationToSunLine" : 13,
                             "set_InclinationToSunLine" : 14,
                             "get_C0" : 15,
                             "set_C0" : 16,
                             "get_C1" : 17,
                             "set_C1" : 18,
                             "get_C2" : 19,
                             "set_C2" : 20,
                             "get_C3" : 21,
                             "set_C3" : 22,
                             "get_C4" : 23,
                             "set_C4" : 24,
                             "get_ApproximationFormula" : 25,
                             "EnableControlParameter" : 26,
                             "DisableControlParameter" : 27,
                             "IsControlParameterEnabled" : 28,
                             "get_ControlParametersAvailable" : 29, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAPowerSolarArray._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAPowerSolarArray from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAPowerSolarArray.__dict__ and type(IAgVAPowerSolarArray.__dict__[attrname]) == property:
            return IAgVAPowerSolarArray.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAPowerSolarArray.")
    
    _get_Area_metadata = { "name" : "Area",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def Area(self) -> float:
        """The solar array panel area. Uses Area Dimension."""
        return self._intf.get_property(IAgVAPowerSolarArray._metadata, IAgVAPowerSolarArray._get_Area_metadata)

    _set_Area_metadata = { "name" : "Area",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @Area.setter
    def Area(self, inVal:float) -> None:
        return self._intf.set_property(IAgVAPowerSolarArray._metadata, IAgVAPowerSolarArray._set_Area_metadata, inVal)

    _get_Concentration_metadata = { "name" : "Concentration",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def Concentration(self) -> float:
        """The solar array concentrator factor. Dimensionless."""
        return self._intf.get_property(IAgVAPowerSolarArray._metadata, IAgVAPowerSolarArray._get_Concentration_metadata)

    _set_Concentration_metadata = { "name" : "Concentration",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @Concentration.setter
    def Concentration(self, inVal:float) -> None:
        return self._intf.set_property(IAgVAPowerSolarArray._metadata, IAgVAPowerSolarArray._set_Concentration_metadata, inVal)

    _get_CellEfficiencyPercent_metadata = { "name" : "CellEfficiencyPercent",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def CellEfficiencyPercent(self) -> float:
        """The cell efficiency in producing output power from incident sunlight. Dimensionless."""
        return self._intf.get_property(IAgVAPowerSolarArray._metadata, IAgVAPowerSolarArray._get_CellEfficiencyPercent_metadata)

    _set_CellEfficiencyPercent_metadata = { "name" : "CellEfficiencyPercent",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @CellEfficiencyPercent.setter
    def CellEfficiencyPercent(self, inVal:float) -> None:
        return self._intf.set_property(IAgVAPowerSolarArray._metadata, IAgVAPowerSolarArray._set_CellEfficiencyPercent_metadata, inVal)

    _get_ArrayEfficiencyPercent_metadata = { "name" : "ArrayEfficiencyPercent",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def ArrayEfficiencyPercent(self) -> float:
        """The array efficiency in producing output power from a collection of cells. Dimensionless."""
        return self._intf.get_property(IAgVAPowerSolarArray._metadata, IAgVAPowerSolarArray._get_ArrayEfficiencyPercent_metadata)

    _set_ArrayEfficiencyPercent_metadata = { "name" : "ArrayEfficiencyPercent",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @ArrayEfficiencyPercent.setter
    def ArrayEfficiencyPercent(self, inVal:float) -> None:
        return self._intf.set_property(IAgVAPowerSolarArray._metadata, IAgVAPowerSolarArray._set_ArrayEfficiencyPercent_metadata, inVal)

    _get_PercentDegradationPerYear_metadata = { "name" : "PercentDegradationPerYear",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def PercentDegradationPerYear(self) -> float:
        """The percent degradation per year; degradation factor is (1-x%/yr)^(timeSinceRefEpoch). Dimensionless."""
        return self._intf.get_property(IAgVAPowerSolarArray._metadata, IAgVAPowerSolarArray._get_PercentDegradationPerYear_metadata)

    _set_PercentDegradationPerYear_metadata = { "name" : "PercentDegradationPerYear",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @PercentDegradationPerYear.setter
    def PercentDegradationPerYear(self, inVal:float) -> None:
        return self._intf.set_property(IAgVAPowerSolarArray._metadata, IAgVAPowerSolarArray._set_PercentDegradationPerYear_metadata, inVal)

    _get_ReferenceEpoch_metadata = { "name" : "ReferenceEpoch",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def ReferenceEpoch(self) -> typing.Any:
        """The date and Time used as reference epoch for degradation. Uses DateFormat Dimension."""
        return self._intf.get_property(IAgVAPowerSolarArray._metadata, IAgVAPowerSolarArray._get_ReferenceEpoch_metadata)

    _set_ReferenceEpoch_metadata = { "name" : "ReferenceEpoch",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @ReferenceEpoch.setter
    def ReferenceEpoch(self, inVal:typing.Any) -> None:
        return self._intf.set_property(IAgVAPowerSolarArray._metadata, IAgVAPowerSolarArray._set_ReferenceEpoch_metadata, inVal)

    _get_InclinationToSunLine_metadata = { "name" : "InclinationToSunLine",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def InclinationToSunLine(self) -> typing.Any:
        """The angle between the panel normal vector to the apparent sun line. Uses AngleUnit Dimension."""
        return self._intf.get_property(IAgVAPowerSolarArray._metadata, IAgVAPowerSolarArray._get_InclinationToSunLine_metadata)

    _set_InclinationToSunLine_metadata = { "name" : "InclinationToSunLine",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @InclinationToSunLine.setter
    def InclinationToSunLine(self, inVal:typing.Any) -> None:
        return self._intf.set_property(IAgVAPowerSolarArray._metadata, IAgVAPowerSolarArray._set_InclinationToSunLine_metadata, inVal)

    _get_C0_metadata = { "name" : "C0",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def C0(self) -> float:
        """The ThermalModel.C0 coefficient. Dimensionless."""
        return self._intf.get_property(IAgVAPowerSolarArray._metadata, IAgVAPowerSolarArray._get_C0_metadata)

    _set_C0_metadata = { "name" : "C0",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @C0.setter
    def C0(self, inVal:float) -> None:
        return self._intf.set_property(IAgVAPowerSolarArray._metadata, IAgVAPowerSolarArray._set_C0_metadata, inVal)

    _get_C1_metadata = { "name" : "C1",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def C1(self) -> float:
        """The ThermalModel.C1 coefficient. Dimensionless."""
        return self._intf.get_property(IAgVAPowerSolarArray._metadata, IAgVAPowerSolarArray._get_C1_metadata)

    _set_C1_metadata = { "name" : "C1",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @C1.setter
    def C1(self, inVal:float) -> None:
        return self._intf.set_property(IAgVAPowerSolarArray._metadata, IAgVAPowerSolarArray._set_C1_metadata, inVal)

    _get_C2_metadata = { "name" : "C2",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def C2(self) -> float:
        """The ThermalModel.C2 coefficient. Dimensionless."""
        return self._intf.get_property(IAgVAPowerSolarArray._metadata, IAgVAPowerSolarArray._get_C2_metadata)

    _set_C2_metadata = { "name" : "C2",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @C2.setter
    def C2(self, inVal:float) -> None:
        return self._intf.set_property(IAgVAPowerSolarArray._metadata, IAgVAPowerSolarArray._set_C2_metadata, inVal)

    _get_C3_metadata = { "name" : "C3",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def C3(self) -> float:
        """The ThermalModel.C3 coefficient. Dimensionless."""
        return self._intf.get_property(IAgVAPowerSolarArray._metadata, IAgVAPowerSolarArray._get_C3_metadata)

    _set_C3_metadata = { "name" : "C3",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @C3.setter
    def C3(self, inVal:float) -> None:
        return self._intf.set_property(IAgVAPowerSolarArray._metadata, IAgVAPowerSolarArray._set_C3_metadata, inVal)

    _get_C4_metadata = { "name" : "C4",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def C4(self) -> float:
        """The ThermalModel.C4 coefficient. Dimensionless."""
        return self._intf.get_property(IAgVAPowerSolarArray._metadata, IAgVAPowerSolarArray._get_C4_metadata)

    _set_C4_metadata = { "name" : "C4",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @C4.setter
    def C4(self, inVal:float) -> None:
        return self._intf.set_property(IAgVAPowerSolarArray._metadata, IAgVAPowerSolarArray._set_C4_metadata, inVal)

    _get_ApproximationFormula_metadata = { "name" : "ApproximationFormula",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def ApproximationFormula(self) -> str:
        """The thermal factor as function of distance (in AU) to Sun."""
        return self._intf.get_property(IAgVAPowerSolarArray._metadata, IAgVAPowerSolarArray._get_ApproximationFormula_metadata)

    _EnableControlParameter_metadata = { "name" : "EnableControlParameter",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAControlPowerSolarArray),) }
    def EnableControlParameter(self, param:"AgEVAControlPowerSolarArray") -> None:
        """Enables the specified control parameter."""
        return self._intf.invoke(IAgVAPowerSolarArray._metadata, IAgVAPowerSolarArray._EnableControlParameter_metadata, param)

    _DisableControlParameter_metadata = { "name" : "DisableControlParameter",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAControlPowerSolarArray),) }
    def DisableControlParameter(self, param:"AgEVAControlPowerSolarArray") -> None:
        """Disables the specified control parameter."""
        return self._intf.invoke(IAgVAPowerSolarArray._metadata, IAgVAPowerSolarArray._DisableControlParameter_metadata, param)

    _IsControlParameterEnabled_metadata = { "name" : "IsControlParameterEnabled",
            "arg_types" : (agcom.LONG, POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAControlPowerSolarArray), agmarshall.VARIANT_BOOL_arg,) }
    def IsControlParameterEnabled(self, param:"AgEVAControlPowerSolarArray") -> bool:
        """Sees if the specified control is enabled."""
        return self._intf.invoke(IAgVAPowerSolarArray._metadata, IAgVAPowerSolarArray._IsControlParameterEnabled_metadata, param, out_arg())

    _get_ControlParametersAvailable_metadata = { "name" : "ControlParametersAvailable",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def ControlParametersAvailable(self) -> bool:
        """Returns whether or not the control parameters can be set."""
        return self._intf.get_property(IAgVAPowerSolarArray._metadata, IAgVAPowerSolarArray._get_ControlParametersAvailable_metadata)


agcls.AgClassCatalog.add_catalog_entry("{E8776401-2DE0-49E8-8080-FD0442E57701}", IAgVAPowerSolarArray)
agcls.AgTypeNameMap["IAgVAPowerSolarArray"] = IAgVAPowerSolarArray

class IAgVAGeneralRelativityFunction(object):
    """Properties for the General Relativity propagator function."""
    _num_methods = 0
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{020E7294-1784-40AA-95C2-153F87CB086F}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : {  }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAGeneralRelativityFunction._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAGeneralRelativityFunction from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAGeneralRelativityFunction.__dict__ and type(IAgVAGeneralRelativityFunction.__dict__[attrname]) == property:
            return IAgVAGeneralRelativityFunction.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAGeneralRelativityFunction.")
    

agcls.AgClassCatalog.add_catalog_entry("{020E7294-1784-40AA-95C2-153F87CB086F}", IAgVAGeneralRelativityFunction)
agcls.AgTypeNameMap["IAgVAGeneralRelativityFunction"] = IAgVAGeneralRelativityFunction

class IAgVAStateTransFunction(object):
    """Properties for the State Transition propagator function."""
    _num_methods = 0
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{67F8B465-6BC4-4736-8A83-EC7E55D45177}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : {  }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAStateTransFunction._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateTransFunction from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateTransFunction.__dict__ and type(IAgVAStateTransFunction.__dict__[attrname]) == property:
            return IAgVAStateTransFunction.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateTransFunction.")
    

agcls.AgClassCatalog.add_catalog_entry("{67F8B465-6BC4-4736-8A83-EC7E55D45177}", IAgVAStateTransFunction)
agcls.AgTypeNameMap["IAgVAStateTransFunction"] = IAgVAStateTransFunction

class IAgVACR3BPFunc(object):
    """Properties for the CR3BP propagator function."""
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{1A2E3655-CF88-4272-8B52-257397D913BF}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_SecondaryName" : 1,
                             "set_SecondaryName" : 2, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVACR3BPFunc._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVACR3BPFunc from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVACR3BPFunc.__dict__ and type(IAgVACR3BPFunc.__dict__[attrname]) == property:
            return IAgVACR3BPFunc.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVACR3BPFunc.")
    
    _get_SecondaryName_metadata = { "name" : "SecondaryName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def SecondaryName(self) -> str:
        """The secondary body following CR3BP model definitions."""
        return self._intf.get_property(IAgVACR3BPFunc._metadata, IAgVACR3BPFunc._get_SecondaryName_metadata)

    _set_SecondaryName_metadata = { "name" : "SecondaryName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @SecondaryName.setter
    def SecondaryName(self, inVal:str) -> None:
        return self._intf.set_property(IAgVACR3BPFunc._metadata, IAgVACR3BPFunc._set_SecondaryName_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{1A2E3655-CF88-4272-8B52-257397D913BF}", IAgVACR3BPFunc)
agcls.AgTypeNameMap["IAgVACR3BPFunc"] = IAgVACR3BPFunc

class IAgVARadiationPressureFunction(object):
    """Properties for the Radiation Pressure propagator function."""
    _num_methods = 13
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{CED70D8F-A1BF-402D-A767-E7A6E857507C}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_IncludeAlbedo" : 1,
                             "set_IncludeAlbedo" : 2,
                             "get_IncludeThermalRadiationPressure" : 3,
                             "set_IncludeThermalRadiationPressure" : 4,
                             "get_GroundReflectionModelFilename" : 5,
                             "set_GroundReflectionModelFilename" : 6,
                             "get_CentralBodyName" : 7,
                             "get_OverrideSegmentSettings" : 8,
                             "set_OverrideSegmentSettings" : 9,
                             "get_RadPressureCoeff" : 10,
                             "set_RadPressureCoeff" : 11,
                             "get_RadPressureArea" : 12,
                             "set_RadPressureArea" : 13, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVARadiationPressureFunction._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVARadiationPressureFunction from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVARadiationPressureFunction.__dict__ and type(IAgVARadiationPressureFunction.__dict__[attrname]) == property:
            return IAgVARadiationPressureFunction.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVARadiationPressureFunction.")
    
    _get_IncludeAlbedo_metadata = { "name" : "IncludeAlbedo",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def IncludeAlbedo(self) -> bool:
        """True if including accelerations derived from albedo (reflected sunlight radiation from the central body)."""
        return self._intf.get_property(IAgVARadiationPressureFunction._metadata, IAgVARadiationPressureFunction._get_IncludeAlbedo_metadata)

    _set_IncludeAlbedo_metadata = { "name" : "IncludeAlbedo",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @IncludeAlbedo.setter
    def IncludeAlbedo(self, inVal:bool) -> None:
        return self._intf.set_property(IAgVARadiationPressureFunction._metadata, IAgVARadiationPressureFunction._set_IncludeAlbedo_metadata, inVal)

    _get_IncludeThermalRadiationPressure_metadata = { "name" : "IncludeThermalRadiationPressure",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def IncludeThermalRadiationPressure(self) -> bool:
        """True if including accelerations derived from thermal radiation pressure from the central body."""
        return self._intf.get_property(IAgVARadiationPressureFunction._metadata, IAgVARadiationPressureFunction._get_IncludeThermalRadiationPressure_metadata)

    _set_IncludeThermalRadiationPressure_metadata = { "name" : "IncludeThermalRadiationPressure",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @IncludeThermalRadiationPressure.setter
    def IncludeThermalRadiationPressure(self, inVal:bool) -> None:
        return self._intf.set_property(IAgVARadiationPressureFunction._metadata, IAgVARadiationPressureFunction._set_IncludeThermalRadiationPressure_metadata, inVal)

    _get_GroundReflectionModelFilename_metadata = { "name" : "GroundReflectionModelFilename",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def GroundReflectionModelFilename(self) -> str:
        """A file containing a ground reflection model used for albedo and thermal radiation pressure."""
        return self._intf.get_property(IAgVARadiationPressureFunction._metadata, IAgVARadiationPressureFunction._get_GroundReflectionModelFilename_metadata)

    _set_GroundReflectionModelFilename_metadata = { "name" : "GroundReflectionModelFilename",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @GroundReflectionModelFilename.setter
    def GroundReflectionModelFilename(self, inVal:str) -> None:
        return self._intf.set_property(IAgVARadiationPressureFunction._metadata, IAgVARadiationPressureFunction._set_GroundReflectionModelFilename_metadata, inVal)

    _get_CentralBodyName_metadata = { "name" : "CentralBodyName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def CentralBodyName(self) -> str:
        """Name of the central body."""
        return self._intf.get_property(IAgVARadiationPressureFunction._metadata, IAgVARadiationPressureFunction._get_CentralBodyName_metadata)

    _get_OverrideSegmentSettings_metadata = { "name" : "OverrideSegmentSettings",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def OverrideSegmentSettings(self) -> bool:
        """True to use Ck and area values defined on this component for radiation pressure computations, rather than those defined in the MCS segments."""
        return self._intf.get_property(IAgVARadiationPressureFunction._metadata, IAgVARadiationPressureFunction._get_OverrideSegmentSettings_metadata)

    _set_OverrideSegmentSettings_metadata = { "name" : "OverrideSegmentSettings",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @OverrideSegmentSettings.setter
    def OverrideSegmentSettings(self, inVal:bool) -> None:
        return self._intf.set_property(IAgVARadiationPressureFunction._metadata, IAgVARadiationPressureFunction._set_OverrideSegmentSettings_metadata, inVal)

    _get_RadPressureCoeff_metadata = { "name" : "RadPressureCoeff",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def RadPressureCoeff(self) -> float:
        """Coefficient, Ck, for use with radiation pressure computation."""
        return self._intf.get_property(IAgVARadiationPressureFunction._metadata, IAgVARadiationPressureFunction._get_RadPressureCoeff_metadata)

    _set_RadPressureCoeff_metadata = { "name" : "RadPressureCoeff",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @RadPressureCoeff.setter
    def RadPressureCoeff(self, inVal:float) -> None:
        return self._intf.set_property(IAgVARadiationPressureFunction._metadata, IAgVARadiationPressureFunction._set_RadPressureCoeff_metadata, inVal)

    _get_RadPressureArea_metadata = { "name" : "RadPressureArea",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def RadPressureArea(self) -> float:
        """Area to be used for radiation pressure computations. Small area dimension."""
        return self._intf.get_property(IAgVARadiationPressureFunction._metadata, IAgVARadiationPressureFunction._get_RadPressureArea_metadata)

    _set_RadPressureArea_metadata = { "name" : "RadPressureArea",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @RadPressureArea.setter
    def RadPressureArea(self, inVal:float) -> None:
        return self._intf.set_property(IAgVARadiationPressureFunction._metadata, IAgVARadiationPressureFunction._set_RadPressureArea_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{CED70D8F-A1BF-402D-A767-E7A6E857507C}", IAgVARadiationPressureFunction)
agcls.AgTypeNameMap["IAgVARadiationPressureFunction"] = IAgVARadiationPressureFunction

class IAgVAYarkovskyFunc(object):
    """Properties for the Yarkovsky Effect propagator function."""
    _num_methods = 16
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{AA6781B4-EACD-4100-8E23-C2771351BD7A}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_alpha" : 1,
                             "set_alpha" : 2,
                             "get_R0" : 3,
                             "set_R0" : 4,
                             "get_NM" : 5,
                             "set_NM" : 6,
                             "get_NN" : 7,
                             "set_NN" : 8,
                             "get_NK" : 9,
                             "set_NK" : 10,
                             "get_A1" : 11,
                             "set_A1" : 12,
                             "get_A2" : 13,
                             "set_A2" : 14,
                             "get_A3" : 15,
                             "set_A3" : 16, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAYarkovskyFunc._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAYarkovskyFunc from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAYarkovskyFunc.__dict__ and type(IAgVAYarkovskyFunc.__dict__[attrname]) == property:
            return IAgVAYarkovskyFunc.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAYarkovskyFunc.")
    
    _get_alpha_metadata = { "name" : "alpha",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def alpha(self) -> float:
        """Yarkovsky effect alpha constant. Dimensionless."""
        return self._intf.get_property(IAgVAYarkovskyFunc._metadata, IAgVAYarkovskyFunc._get_alpha_metadata)

    _set_alpha_metadata = { "name" : "alpha",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @alpha.setter
    def alpha(self, inVal:float) -> None:
        return self._intf.set_property(IAgVAYarkovskyFunc._metadata, IAgVAYarkovskyFunc._set_alpha_metadata, inVal)

    _get_R0_metadata = { "name" : "R0",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def R0(self) -> float:
        """Heliocentric sublimation distance. Uses distance dimension."""
        return self._intf.get_property(IAgVAYarkovskyFunc._metadata, IAgVAYarkovskyFunc._get_R0_metadata)

    _set_R0_metadata = { "name" : "R0",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @R0.setter
    def R0(self, inVal:float) -> None:
        return self._intf.set_property(IAgVAYarkovskyFunc._metadata, IAgVAYarkovskyFunc._set_R0_metadata, inVal)

    _get_NM_metadata = { "name" : "NM",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def NM(self) -> float:
        """Yarkovsky effect m exponent. Dimensionless."""
        return self._intf.get_property(IAgVAYarkovskyFunc._metadata, IAgVAYarkovskyFunc._get_NM_metadata)

    _set_NM_metadata = { "name" : "NM",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @NM.setter
    def NM(self, inVal:float) -> None:
        return self._intf.set_property(IAgVAYarkovskyFunc._metadata, IAgVAYarkovskyFunc._set_NM_metadata, inVal)

    _get_NN_metadata = { "name" : "NN",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def NN(self) -> float:
        """Yarkovsky effect n exponent. Dimensionless."""
        return self._intf.get_property(IAgVAYarkovskyFunc._metadata, IAgVAYarkovskyFunc._get_NN_metadata)

    _set_NN_metadata = { "name" : "NN",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @NN.setter
    def NN(self, inVal:float) -> None:
        return self._intf.set_property(IAgVAYarkovskyFunc._metadata, IAgVAYarkovskyFunc._set_NN_metadata, inVal)

    _get_NK_metadata = { "name" : "NK",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def NK(self) -> float:
        """Yarkovsky effect k exponent. Dimensionless."""
        return self._intf.get_property(IAgVAYarkovskyFunc._metadata, IAgVAYarkovskyFunc._get_NK_metadata)

    _set_NK_metadata = { "name" : "NK",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @NK.setter
    def NK(self, inVal:float) -> None:
        return self._intf.set_property(IAgVAYarkovskyFunc._metadata, IAgVAYarkovskyFunc._set_NK_metadata, inVal)

    _get_A1_metadata = { "name" : "A1",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def A1(self) -> float:
        """Radial acceleration multiplier. Uses acceleration dimension."""
        return self._intf.get_property(IAgVAYarkovskyFunc._metadata, IAgVAYarkovskyFunc._get_A1_metadata)

    _set_A1_metadata = { "name" : "A1",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @A1.setter
    def A1(self, inVal:float) -> None:
        return self._intf.set_property(IAgVAYarkovskyFunc._metadata, IAgVAYarkovskyFunc._set_A1_metadata, inVal)

    _get_A2_metadata = { "name" : "A2",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def A2(self) -> float:
        """Velocity tangent acceleration multiplier. Uses acceleration dimension."""
        return self._intf.get_property(IAgVAYarkovskyFunc._metadata, IAgVAYarkovskyFunc._get_A2_metadata)

    _set_A2_metadata = { "name" : "A2",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @A2.setter
    def A2(self, inVal:float) -> None:
        return self._intf.set_property(IAgVAYarkovskyFunc._metadata, IAgVAYarkovskyFunc._set_A2_metadata, inVal)

    _get_A3_metadata = { "name" : "A3",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def A3(self) -> float:
        """Orbit normal acceleration multiplier. Uses acceleration dimension."""
        return self._intf.get_property(IAgVAYarkovskyFunc._metadata, IAgVAYarkovskyFunc._get_A3_metadata)

    _set_A3_metadata = { "name" : "A3",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @A3.setter
    def A3(self, inVal:float) -> None:
        return self._intf.set_property(IAgVAYarkovskyFunc._metadata, IAgVAYarkovskyFunc._set_A3_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{AA6781B4-EACD-4100-8E23-C2771351BD7A}", IAgVAYarkovskyFunc)
agcls.AgTypeNameMap["IAgVAYarkovskyFunc"] = IAgVAYarkovskyFunc

class IAgVABlendedDensity(object):
    """Properties for the blended atmospheric density propagator function."""
    _num_methods = 9
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{E1951825-092B-48C8-88AE-7C878FBF40C3}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "AtmDensityModel" : 1,
                             "LowAltAtmDensityModel" : 2,
                             "get_DensityBlendingAltRange" : 3,
                             "set_DensityBlendingAltRange" : 4,
                             "get_AtmDensityModelName" : 5,
                             "get_LowAltAtmDensityModelName" : 6,
                             "get_UseApproxAltitude" : 7,
                             "set_UseApproxAltitude" : 8,
                             "get_LowerBoundUpperAtmModel" : 9, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVABlendedDensity._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVABlendedDensity from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVABlendedDensity.__dict__ and type(IAgVABlendedDensity.__dict__[attrname]) == property:
            return IAgVABlendedDensity.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVABlendedDensity.")
    
    _AtmDensityModel_metadata = { "name" : "AtmDensityModel",
            "arg_types" : (agcom.PVOID,),
            "marshallers" : (agmarshall.AgInterface_in_arg("IAgComponentInfo"),) }
    def AtmDensityModel(self, pInVal:"IAgComponentInfo") -> None:
        """Embeds a nominal atmosphere model from the component browser."""
        return self._intf.invoke(IAgVABlendedDensity._metadata, IAgVABlendedDensity._AtmDensityModel_metadata, pInVal)

    _LowAltAtmDensityModel_metadata = { "name" : "LowAltAtmDensityModel",
            "arg_types" : (agcom.PVOID,),
            "marshallers" : (agmarshall.AgInterface_in_arg("IAgComponentInfo"),) }
    def LowAltAtmDensityModel(self, pInVal:"IAgComponentInfo") -> None:
        """Embeds a low altitude atmosphere model from the component browser."""
        return self._intf.invoke(IAgVABlendedDensity._metadata, IAgVABlendedDensity._LowAltAtmDensityModel_metadata, pInVal)

    _get_DensityBlendingAltRange_metadata = { "name" : "DensityBlendingAltRange",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def DensityBlendingAltRange(self) -> float:
        """The blending range (distance dimension), begins at lower bound of upper model."""
        return self._intf.get_property(IAgVABlendedDensity._metadata, IAgVABlendedDensity._get_DensityBlendingAltRange_metadata)

    _set_DensityBlendingAltRange_metadata = { "name" : "DensityBlendingAltRange",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @DensityBlendingAltRange.setter
    def DensityBlendingAltRange(self, inVal:float) -> None:
        """Set the blending range."""
        return self._intf.set_property(IAgVABlendedDensity._metadata, IAgVABlendedDensity._set_DensityBlendingAltRange_metadata, inVal)

    _get_AtmDensityModelName_metadata = { "name" : "AtmDensityModelName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def AtmDensityModelName(self) -> str:
        """Returns the name of the embedded nominal atmospheric model."""
        return self._intf.get_property(IAgVABlendedDensity._metadata, IAgVABlendedDensity._get_AtmDensityModelName_metadata)

    _get_LowAltAtmDensityModelName_metadata = { "name" : "LowAltAtmDensityModelName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def LowAltAtmDensityModelName(self) -> str:
        """Returns the name of the embedded low altitude atmospheric model."""
        return self._intf.get_property(IAgVABlendedDensity._metadata, IAgVABlendedDensity._get_LowAltAtmDensityModelName_metadata)

    _get_UseApproxAltitude_metadata = { "name" : "UseApproxAltitude",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def UseApproxAltitude(self) -> bool:
        """True if using approximate altitude formula (enforced on embedded models)."""
        return self._intf.get_property(IAgVABlendedDensity._metadata, IAgVABlendedDensity._get_UseApproxAltitude_metadata)

    _set_UseApproxAltitude_metadata = { "name" : "UseApproxAltitude",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @UseApproxAltitude.setter
    def UseApproxAltitude(self, pVal:bool) -> None:
        return self._intf.set_property(IAgVABlendedDensity._metadata, IAgVABlendedDensity._set_UseApproxAltitude_metadata, pVal)

    _get_LowerBoundUpperAtmModel_metadata = { "name" : "LowerBoundUpperAtmModel",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def LowerBoundUpperAtmModel(self) -> float:
        """The lowest valid altitude of the upper atmospheric density model."""
        return self._intf.get_property(IAgVABlendedDensity._metadata, IAgVABlendedDensity._get_LowerBoundUpperAtmModel_metadata)


agcls.AgClassCatalog.add_catalog_entry("{E1951825-092B-48C8-88AE-7C878FBF40C3}", IAgVABlendedDensity)
agcls.AgTypeNameMap["IAgVABlendedDensity"] = IAgVABlendedDensity

class IAgVADragModelPlugin(object):
    """Properties for the Drag Model plugin."""
    _num_methods = 3
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{00D06156-07AD-4321-9741-9722A3D7BF85}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_PluginIdentifier" : 1,
                             "set_PluginIdentifier" : 2,
                             "get_PluginConfig" : 3, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVADragModelPlugin._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVADragModelPlugin from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVADragModelPlugin.__dict__ and type(IAgVADragModelPlugin.__dict__[attrname]) == property:
            return IAgVADragModelPlugin.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVADragModelPlugin.")
    
    _get_PluginIdentifier_metadata = { "name" : "PluginIdentifier",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def PluginIdentifier(self) -> str:
        """The plugin name."""
        return self._intf.get_property(IAgVADragModelPlugin._metadata, IAgVADragModelPlugin._get_PluginIdentifier_metadata)

    _set_PluginIdentifier_metadata = { "name" : "PluginIdentifier",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @PluginIdentifier.setter
    def PluginIdentifier(self, inVal:str) -> None:
        return self._intf.set_property(IAgVADragModelPlugin._metadata, IAgVADragModelPlugin._set_PluginIdentifier_metadata, inVal)

    _get_PluginConfig_metadata = { "name" : "PluginConfig",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def PluginConfig(self) -> "IAgVAPluginProperties":
        """The properties of the selected plugin."""
        return self._intf.get_property(IAgVADragModelPlugin._metadata, IAgVADragModelPlugin._get_PluginConfig_metadata)


agcls.AgClassCatalog.add_catalog_entry("{00D06156-07AD-4321-9741-9722A3D7BF85}", IAgVADragModelPlugin)
agcls.AgTypeNameMap["IAgVADragModelPlugin"] = IAgVADragModelPlugin

class IAgVACira72Function(object):
    """Properties for the CIRA 72 atmospheric model."""
    _num_methods = 29
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{9FFC517F-7B30-4780-8028-A3E309E5BAE4}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_UseApproximateAltitude" : 1,
                             "set_UseApproximateAltitude" : 2,
                             "get_ComputesTemperature" : 3,
                             "get_ComputesPressure" : 4,
                             "get_SunPosition" : 5,
                             "set_SunPosition" : 6,
                             "get_AtmosDataSource" : 7,
                             "set_AtmosDataSource" : 8,
                             "get_F10p7" : 9,
                             "set_F10p7" : 10,
                             "get_F10p7Avg" : 11,
                             "set_F10p7Avg" : 12,
                             "get_Kp" : 13,
                             "set_Kp" : 14,
                             "get_AtmosDataGeoMagneticFluxSource" : 15,
                             "set_AtmosDataGeoMagneticFluxSource" : 16,
                             "get_AtmosDataGeoMagneticFluxUpdateRate" : 17,
                             "set_AtmosDataGeoMagneticFluxUpdateRate" : 18,
                             "get_AtmosDataFilename" : 19,
                             "set_AtmosDataFilename" : 20,
                             "get_DragModelType" : 21,
                             "set_DragModelType" : 22,
                             "get_DragModelPluginName" : 23,
                             "set_DragModelPluginName" : 24,
                             "get_DragModelPlugin" : 25,
                             "get_VariableAreaHistoryFile" : 26,
                             "set_VariableAreaHistoryFile" : 27,
                             "get_NPlateDefinitionFile" : 28,
                             "set_NPlateDefinitionFile" : 29, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVACira72Function._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVACira72Function from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVACira72Function.__dict__ and type(IAgVACira72Function.__dict__[attrname]) == property:
            return IAgVACira72Function.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVACira72Function.")
    
    _get_UseApproximateAltitude_metadata = { "name" : "UseApproximateAltitude",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def UseApproximateAltitude(self) -> bool:
        """True if using approximate altitude formula."""
        return self._intf.get_property(IAgVACira72Function._metadata, IAgVACira72Function._get_UseApproximateAltitude_metadata)

    _set_UseApproximateAltitude_metadata = { "name" : "UseApproximateAltitude",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @UseApproximateAltitude.setter
    def UseApproximateAltitude(self, inVal:bool) -> None:
        return self._intf.set_property(IAgVACira72Function._metadata, IAgVACira72Function._set_UseApproximateAltitude_metadata, inVal)

    _get_ComputesTemperature_metadata = { "name" : "ComputesTemperature",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def ComputesTemperature(self) -> bool:
        """Flag indicates whether this model computes temperature."""
        return self._intf.get_property(IAgVACira72Function._metadata, IAgVACira72Function._get_ComputesTemperature_metadata)

    _get_ComputesPressure_metadata = { "name" : "ComputesPressure",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def ComputesPressure(self) -> bool:
        """Flag indicates whether this model computes pressure."""
        return self._intf.get_property(IAgVACira72Function._metadata, IAgVACira72Function._get_ComputesPressure_metadata)

    _get_SunPosition_metadata = { "name" : "SunPosition",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVASunPosition),) }
    @property
    def SunPosition(self) -> "AgEVASunPosition":
        """The sun position computation."""
        return self._intf.get_property(IAgVACira72Function._metadata, IAgVACira72Function._get_SunPosition_metadata)

    _set_SunPosition_metadata = { "name" : "SunPosition",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVASunPosition),) }
    @SunPosition.setter
    def SunPosition(self, inVal:"AgEVASunPosition") -> None:
        return self._intf.set_property(IAgVACira72Function._metadata, IAgVACira72Function._set_SunPosition_metadata, inVal)

    _get_AtmosDataSource_metadata = { "name" : "AtmosDataSource",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAAtmosDataSource),) }
    @property
    def AtmosDataSource(self) -> "AgEVAAtmosDataSource":
        """The atmospheric model data source - data file or constant values."""
        return self._intf.get_property(IAgVACira72Function._metadata, IAgVACira72Function._get_AtmosDataSource_metadata)

    _set_AtmosDataSource_metadata = { "name" : "AtmosDataSource",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAAtmosDataSource),) }
    @AtmosDataSource.setter
    def AtmosDataSource(self, inVal:"AgEVAAtmosDataSource") -> None:
        return self._intf.set_property(IAgVACira72Function._metadata, IAgVACira72Function._set_AtmosDataSource_metadata, inVal)

    _get_F10p7_metadata = { "name" : "F10p7",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def F10p7(self) -> float:
        """Solar Flux (F10.7); the daily Ottawa 10.7 cm solar flux value. Dimensionless."""
        return self._intf.get_property(IAgVACira72Function._metadata, IAgVACira72Function._get_F10p7_metadata)

    _set_F10p7_metadata = { "name" : "F10p7",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @F10p7.setter
    def F10p7(self, inVal:float) -> None:
        return self._intf.set_property(IAgVACira72Function._metadata, IAgVACira72Function._set_F10p7_metadata, inVal)

    _get_F10p7Avg_metadata = { "name" : "F10p7Avg",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def F10p7Avg(self) -> float:
        """Average solar Flux (F10.7); the 81-day averaged Ottawa 10.7 cm solar flux value. Dimensionless."""
        return self._intf.get_property(IAgVACira72Function._metadata, IAgVACira72Function._get_F10p7Avg_metadata)

    _set_F10p7Avg_metadata = { "name" : "F10p7Avg",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @F10p7Avg.setter
    def F10p7Avg(self, inVal:float) -> None:
        return self._intf.set_property(IAgVACira72Function._metadata, IAgVACira72Function._set_F10p7Avg_metadata, inVal)

    _get_Kp_metadata = { "name" : "Kp",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def Kp(self) -> float:
        """Geomagnetic Index (Kp). Dimensionless."""
        return self._intf.get_property(IAgVACira72Function._metadata, IAgVACira72Function._get_Kp_metadata)

    _set_Kp_metadata = { "name" : "Kp",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @Kp.setter
    def Kp(self, inVal:float) -> None:
        return self._intf.set_property(IAgVACira72Function._metadata, IAgVACira72Function._set_Kp_metadata, inVal)

    _get_AtmosDataGeoMagneticFluxSource_metadata = { "name" : "AtmosDataGeoMagneticFluxSource",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAGeoMagneticFluxSource),) }
    @property
    def AtmosDataGeoMagneticFluxSource(self) -> "AgEVAGeoMagneticFluxSource":
        """Whether to use Kp or Ap data from the flux file."""
        return self._intf.get_property(IAgVACira72Function._metadata, IAgVACira72Function._get_AtmosDataGeoMagneticFluxSource_metadata)

    _set_AtmosDataGeoMagneticFluxSource_metadata = { "name" : "AtmosDataGeoMagneticFluxSource",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAGeoMagneticFluxSource),) }
    @AtmosDataGeoMagneticFluxSource.setter
    def AtmosDataGeoMagneticFluxSource(self, inVal:"AgEVAGeoMagneticFluxSource") -> None:
        return self._intf.set_property(IAgVACira72Function._metadata, IAgVACira72Function._set_AtmosDataGeoMagneticFluxSource_metadata, inVal)

    _get_AtmosDataGeoMagneticFluxUpdateRate_metadata = { "name" : "AtmosDataGeoMagneticFluxUpdateRate",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAGeoMagneticFluxUpdateRate),) }
    @property
    def AtmosDataGeoMagneticFluxUpdateRate(self) -> "AgEVAGeoMagneticFluxUpdateRate":
        """The update rate of geomagnetic flux values from the flux file."""
        return self._intf.get_property(IAgVACira72Function._metadata, IAgVACira72Function._get_AtmosDataGeoMagneticFluxUpdateRate_metadata)

    _set_AtmosDataGeoMagneticFluxUpdateRate_metadata = { "name" : "AtmosDataGeoMagneticFluxUpdateRate",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAGeoMagneticFluxUpdateRate),) }
    @AtmosDataGeoMagneticFluxUpdateRate.setter
    def AtmosDataGeoMagneticFluxUpdateRate(self, inVal:"AgEVAGeoMagneticFluxUpdateRate") -> None:
        return self._intf.set_property(IAgVACira72Function._metadata, IAgVACira72Function._set_AtmosDataGeoMagneticFluxUpdateRate_metadata, inVal)

    _get_AtmosDataFilename_metadata = { "name" : "AtmosDataFilename",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def AtmosDataFilename(self) -> str:
        """Flux file."""
        return self._intf.get_property(IAgVACira72Function._metadata, IAgVACira72Function._get_AtmosDataFilename_metadata)

    _set_AtmosDataFilename_metadata = { "name" : "AtmosDataFilename",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @AtmosDataFilename.setter
    def AtmosDataFilename(self, inVal:str) -> None:
        return self._intf.set_property(IAgVACira72Function._metadata, IAgVACira72Function._set_AtmosDataFilename_metadata, inVal)

    _get_DragModelType_metadata = { "name" : "DragModelType",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVADragModelType),) }
    @property
    def DragModelType(self) -> "AgEVADragModelType":
        """Drag model type."""
        return self._intf.get_property(IAgVACira72Function._metadata, IAgVACira72Function._get_DragModelType_metadata)

    _set_DragModelType_metadata = { "name" : "DragModelType",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVADragModelType),) }
    @DragModelType.setter
    def DragModelType(self, inVal:"AgEVADragModelType") -> None:
        return self._intf.set_property(IAgVACira72Function._metadata, IAgVACira72Function._set_DragModelType_metadata, inVal)

    _get_DragModelPluginName_metadata = { "name" : "DragModelPluginName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def DragModelPluginName(self) -> str:
        """The name of the drag model plugin."""
        return self._intf.get_property(IAgVACira72Function._metadata, IAgVACira72Function._get_DragModelPluginName_metadata)

    _set_DragModelPluginName_metadata = { "name" : "DragModelPluginName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @DragModelPluginName.setter
    def DragModelPluginName(self, pVal:str) -> None:
        return self._intf.set_property(IAgVACira72Function._metadata, IAgVACira72Function._set_DragModelPluginName_metadata, pVal)

    _get_DragModelPlugin_metadata = { "name" : "DragModelPlugin",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def DragModelPlugin(self) -> "IAgVADragModelPlugin":
        """Drag model plugin properties."""
        return self._intf.get_property(IAgVACira72Function._metadata, IAgVACira72Function._get_DragModelPlugin_metadata)

    _get_VariableAreaHistoryFile_metadata = { "name" : "VariableAreaHistoryFile",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def VariableAreaHistoryFile(self) -> str:
        """Drag variable area history file."""
        return self._intf.get_property(IAgVACira72Function._metadata, IAgVACira72Function._get_VariableAreaHistoryFile_metadata)

    _set_VariableAreaHistoryFile_metadata = { "name" : "VariableAreaHistoryFile",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @VariableAreaHistoryFile.setter
    def VariableAreaHistoryFile(self, inVal:str) -> None:
        return self._intf.set_property(IAgVACira72Function._metadata, IAgVACira72Function._set_VariableAreaHistoryFile_metadata, inVal)

    _get_NPlateDefinitionFile_metadata = { "name" : "NPlateDefinitionFile",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def NPlateDefinitionFile(self) -> str:
        """Drag N-Plate definition file."""
        return self._intf.get_property(IAgVACira72Function._metadata, IAgVACira72Function._get_NPlateDefinitionFile_metadata)

    _set_NPlateDefinitionFile_metadata = { "name" : "NPlateDefinitionFile",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @NPlateDefinitionFile.setter
    def NPlateDefinitionFile(self, inVal:str) -> None:
        return self._intf.set_property(IAgVACira72Function._metadata, IAgVACira72Function._set_NPlateDefinitionFile_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{9FFC517F-7B30-4780-8028-A3E309E5BAE4}", IAgVACira72Function)
agcls.AgTypeNameMap["IAgVACira72Function"] = IAgVACira72Function

class IAgVAExponential(object):
    """Properties for the Exponential atmospheric model - a model that calculates atmospheric density using an equation involving a reference density, reference altitude, and scale altitude."""
    _num_methods = 17
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{987B718C-47F4-4638-900E-B87B0AAFEFBA}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_UseApproximateAltitude" : 1,
                             "set_UseApproximateAltitude" : 2,
                             "get_ReferenceDensity" : 3,
                             "set_ReferenceDensity" : 4,
                             "get_ReferenceAltitude" : 5,
                             "set_ReferenceAltitude" : 6,
                             "get_ScaleAltitude" : 7,
                             "set_ScaleAltitude" : 8,
                             "get_DragModelType" : 9,
                             "set_DragModelType" : 10,
                             "get_DragModelPluginName" : 11,
                             "set_DragModelPluginName" : 12,
                             "get_DragModelPlugin" : 13,
                             "get_VariableAreaHistoryFile" : 14,
                             "set_VariableAreaHistoryFile" : 15,
                             "get_NPlateDefinitionFile" : 16,
                             "set_NPlateDefinitionFile" : 17, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAExponential._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAExponential from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAExponential.__dict__ and type(IAgVAExponential.__dict__[attrname]) == property:
            return IAgVAExponential.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAExponential.")
    
    _get_UseApproximateAltitude_metadata = { "name" : "UseApproximateAltitude",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def UseApproximateAltitude(self) -> bool:
        """True if using approximate altitude formula."""
        return self._intf.get_property(IAgVAExponential._metadata, IAgVAExponential._get_UseApproximateAltitude_metadata)

    _set_UseApproximateAltitude_metadata = { "name" : "UseApproximateAltitude",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @UseApproximateAltitude.setter
    def UseApproximateAltitude(self, inVal:bool) -> None:
        return self._intf.set_property(IAgVAExponential._metadata, IAgVAExponential._set_UseApproximateAltitude_metadata, inVal)

    _get_ReferenceDensity_metadata = { "name" : "ReferenceDensity",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def ReferenceDensity(self) -> float:
        """The reference density. Uses Density Dimension."""
        return self._intf.get_property(IAgVAExponential._metadata, IAgVAExponential._get_ReferenceDensity_metadata)

    _set_ReferenceDensity_metadata = { "name" : "ReferenceDensity",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @ReferenceDensity.setter
    def ReferenceDensity(self, inVal:float) -> None:
        return self._intf.set_property(IAgVAExponential._metadata, IAgVAExponential._set_ReferenceDensity_metadata, inVal)

    _get_ReferenceAltitude_metadata = { "name" : "ReferenceAltitude",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def ReferenceAltitude(self) -> float:
        """The reference altitude. Uses Distance Dimension."""
        return self._intf.get_property(IAgVAExponential._metadata, IAgVAExponential._get_ReferenceAltitude_metadata)

    _set_ReferenceAltitude_metadata = { "name" : "ReferenceAltitude",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @ReferenceAltitude.setter
    def ReferenceAltitude(self, inVal:float) -> None:
        return self._intf.set_property(IAgVAExponential._metadata, IAgVAExponential._set_ReferenceAltitude_metadata, inVal)

    _get_ScaleAltitude_metadata = { "name" : "ScaleAltitude",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def ScaleAltitude(self) -> float:
        """The scale altitude. Uses Distance Dimension."""
        return self._intf.get_property(IAgVAExponential._metadata, IAgVAExponential._get_ScaleAltitude_metadata)

    _set_ScaleAltitude_metadata = { "name" : "ScaleAltitude",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @ScaleAltitude.setter
    def ScaleAltitude(self, inVal:float) -> None:
        return self._intf.set_property(IAgVAExponential._metadata, IAgVAExponential._set_ScaleAltitude_metadata, inVal)

    _get_DragModelType_metadata = { "name" : "DragModelType",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVADragModelType),) }
    @property
    def DragModelType(self) -> "AgEVADragModelType":
        """Drag model type."""
        return self._intf.get_property(IAgVAExponential._metadata, IAgVAExponential._get_DragModelType_metadata)

    _set_DragModelType_metadata = { "name" : "DragModelType",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVADragModelType),) }
    @DragModelType.setter
    def DragModelType(self, inVal:"AgEVADragModelType") -> None:
        return self._intf.set_property(IAgVAExponential._metadata, IAgVAExponential._set_DragModelType_metadata, inVal)

    _get_DragModelPluginName_metadata = { "name" : "DragModelPluginName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def DragModelPluginName(self) -> str:
        """The name of the drag model plugin."""
        return self._intf.get_property(IAgVAExponential._metadata, IAgVAExponential._get_DragModelPluginName_metadata)

    _set_DragModelPluginName_metadata = { "name" : "DragModelPluginName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @DragModelPluginName.setter
    def DragModelPluginName(self, pVal:str) -> None:
        return self._intf.set_property(IAgVAExponential._metadata, IAgVAExponential._set_DragModelPluginName_metadata, pVal)

    _get_DragModelPlugin_metadata = { "name" : "DragModelPlugin",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def DragModelPlugin(self) -> "IAgVADragModelPlugin":
        """Drag model plugin properties."""
        return self._intf.get_property(IAgVAExponential._metadata, IAgVAExponential._get_DragModelPlugin_metadata)

    _get_VariableAreaHistoryFile_metadata = { "name" : "VariableAreaHistoryFile",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def VariableAreaHistoryFile(self) -> str:
        """Drag variable area history file."""
        return self._intf.get_property(IAgVAExponential._metadata, IAgVAExponential._get_VariableAreaHistoryFile_metadata)

    _set_VariableAreaHistoryFile_metadata = { "name" : "VariableAreaHistoryFile",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @VariableAreaHistoryFile.setter
    def VariableAreaHistoryFile(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAExponential._metadata, IAgVAExponential._set_VariableAreaHistoryFile_metadata, inVal)

    _get_NPlateDefinitionFile_metadata = { "name" : "NPlateDefinitionFile",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def NPlateDefinitionFile(self) -> str:
        """Drag N-Plate definition file."""
        return self._intf.get_property(IAgVAExponential._metadata, IAgVAExponential._get_NPlateDefinitionFile_metadata)

    _set_NPlateDefinitionFile_metadata = { "name" : "NPlateDefinitionFile",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @NPlateDefinitionFile.setter
    def NPlateDefinitionFile(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAExponential._metadata, IAgVAExponential._set_NPlateDefinitionFile_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{987B718C-47F4-4638-900E-B87B0AAFEFBA}", IAgVAExponential)
agcls.AgTypeNameMap["IAgVAExponential"] = IAgVAExponential

class IAgVAHarrisPriester(object):
    """Properties for the Harris-Priester atmospheric model - a model that takes into account a 10.7 cm solar flux level and diurnal bulge."""
    _num_methods = 21
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{4481139D-2D5D-48F0-9372-2385F8F95658}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_UseApproximateAltitude" : 1,
                             "set_UseApproximateAltitude" : 2,
                             "get_ComputesTemperature" : 3,
                             "get_ComputesPressure" : 4,
                             "get_SunPosition" : 5,
                             "set_SunPosition" : 6,
                             "get_AtmosDataSource" : 7,
                             "set_AtmosDataSource" : 8,
                             "get_F10p7Avg" : 9,
                             "set_F10p7Avg" : 10,
                             "get_AtmosDataFilename" : 11,
                             "set_AtmosDataFilename" : 12,
                             "get_DragModelType" : 13,
                             "set_DragModelType" : 14,
                             "get_DragModelPluginName" : 15,
                             "set_DragModelPluginName" : 16,
                             "get_DragModelPlugin" : 17,
                             "get_VariableAreaHistoryFile" : 18,
                             "set_VariableAreaHistoryFile" : 19,
                             "get_NPlateDefinitionFile" : 20,
                             "set_NPlateDefinitionFile" : 21, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAHarrisPriester._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAHarrisPriester from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAHarrisPriester.__dict__ and type(IAgVAHarrisPriester.__dict__[attrname]) == property:
            return IAgVAHarrisPriester.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAHarrisPriester.")
    
    _get_UseApproximateAltitude_metadata = { "name" : "UseApproximateAltitude",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def UseApproximateAltitude(self) -> bool:
        """True if using approximate altitude formula."""
        return self._intf.get_property(IAgVAHarrisPriester._metadata, IAgVAHarrisPriester._get_UseApproximateAltitude_metadata)

    _set_UseApproximateAltitude_metadata = { "name" : "UseApproximateAltitude",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @UseApproximateAltitude.setter
    def UseApproximateAltitude(self, inVal:bool) -> None:
        return self._intf.set_property(IAgVAHarrisPriester._metadata, IAgVAHarrisPriester._set_UseApproximateAltitude_metadata, inVal)

    _get_ComputesTemperature_metadata = { "name" : "ComputesTemperature",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def ComputesTemperature(self) -> bool:
        """Flag indicates whether this model computes temperature."""
        return self._intf.get_property(IAgVAHarrisPriester._metadata, IAgVAHarrisPriester._get_ComputesTemperature_metadata)

    _get_ComputesPressure_metadata = { "name" : "ComputesPressure",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def ComputesPressure(self) -> bool:
        """Flag indicates whether this model computes pressure."""
        return self._intf.get_property(IAgVAHarrisPriester._metadata, IAgVAHarrisPriester._get_ComputesPressure_metadata)

    _get_SunPosition_metadata = { "name" : "SunPosition",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVASunPosition),) }
    @property
    def SunPosition(self) -> "AgEVASunPosition":
        """The sun position computation."""
        return self._intf.get_property(IAgVAHarrisPriester._metadata, IAgVAHarrisPriester._get_SunPosition_metadata)

    _set_SunPosition_metadata = { "name" : "SunPosition",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVASunPosition),) }
    @SunPosition.setter
    def SunPosition(self, inVal:"AgEVASunPosition") -> None:
        return self._intf.set_property(IAgVAHarrisPriester._metadata, IAgVAHarrisPriester._set_SunPosition_metadata, inVal)

    _get_AtmosDataSource_metadata = { "name" : "AtmosDataSource",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAAtmosDataSource),) }
    @property
    def AtmosDataSource(self) -> "AgEVAAtmosDataSource":
        """The atmospheric model data source - data file or constant values."""
        return self._intf.get_property(IAgVAHarrisPriester._metadata, IAgVAHarrisPriester._get_AtmosDataSource_metadata)

    _set_AtmosDataSource_metadata = { "name" : "AtmosDataSource",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAAtmosDataSource),) }
    @AtmosDataSource.setter
    def AtmosDataSource(self, inVal:"AgEVAAtmosDataSource") -> None:
        return self._intf.set_property(IAgVAHarrisPriester._metadata, IAgVAHarrisPriester._set_AtmosDataSource_metadata, inVal)

    _get_F10p7Avg_metadata = { "name" : "F10p7Avg",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def F10p7Avg(self) -> float:
        """Average solar Flux (F10.7); the 81-day averaged Ottawa 10.7 cm solar flux value. Dimensionless."""
        return self._intf.get_property(IAgVAHarrisPriester._metadata, IAgVAHarrisPriester._get_F10p7Avg_metadata)

    _set_F10p7Avg_metadata = { "name" : "F10p7Avg",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @F10p7Avg.setter
    def F10p7Avg(self, inVal:float) -> None:
        return self._intf.set_property(IAgVAHarrisPriester._metadata, IAgVAHarrisPriester._set_F10p7Avg_metadata, inVal)

    _get_AtmosDataFilename_metadata = { "name" : "AtmosDataFilename",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def AtmosDataFilename(self) -> str:
        """Flux file."""
        return self._intf.get_property(IAgVAHarrisPriester._metadata, IAgVAHarrisPriester._get_AtmosDataFilename_metadata)

    _set_AtmosDataFilename_metadata = { "name" : "AtmosDataFilename",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @AtmosDataFilename.setter
    def AtmosDataFilename(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAHarrisPriester._metadata, IAgVAHarrisPriester._set_AtmosDataFilename_metadata, inVal)

    _get_DragModelType_metadata = { "name" : "DragModelType",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVADragModelType),) }
    @property
    def DragModelType(self) -> "AgEVADragModelType":
        """Drag model type."""
        return self._intf.get_property(IAgVAHarrisPriester._metadata, IAgVAHarrisPriester._get_DragModelType_metadata)

    _set_DragModelType_metadata = { "name" : "DragModelType",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVADragModelType),) }
    @DragModelType.setter
    def DragModelType(self, inVal:"AgEVADragModelType") -> None:
        return self._intf.set_property(IAgVAHarrisPriester._metadata, IAgVAHarrisPriester._set_DragModelType_metadata, inVal)

    _get_DragModelPluginName_metadata = { "name" : "DragModelPluginName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def DragModelPluginName(self) -> str:
        """The name of the drag model plugin."""
        return self._intf.get_property(IAgVAHarrisPriester._metadata, IAgVAHarrisPriester._get_DragModelPluginName_metadata)

    _set_DragModelPluginName_metadata = { "name" : "DragModelPluginName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @DragModelPluginName.setter
    def DragModelPluginName(self, pVal:str) -> None:
        return self._intf.set_property(IAgVAHarrisPriester._metadata, IAgVAHarrisPriester._set_DragModelPluginName_metadata, pVal)

    _get_DragModelPlugin_metadata = { "name" : "DragModelPlugin",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def DragModelPlugin(self) -> "IAgVADragModelPlugin":
        """Drag model plugin properties."""
        return self._intf.get_property(IAgVAHarrisPriester._metadata, IAgVAHarrisPriester._get_DragModelPlugin_metadata)

    _get_VariableAreaHistoryFile_metadata = { "name" : "VariableAreaHistoryFile",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def VariableAreaHistoryFile(self) -> str:
        """Drag variable area history file."""
        return self._intf.get_property(IAgVAHarrisPriester._metadata, IAgVAHarrisPriester._get_VariableAreaHistoryFile_metadata)

    _set_VariableAreaHistoryFile_metadata = { "name" : "VariableAreaHistoryFile",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @VariableAreaHistoryFile.setter
    def VariableAreaHistoryFile(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAHarrisPriester._metadata, IAgVAHarrisPriester._set_VariableAreaHistoryFile_metadata, inVal)

    _get_NPlateDefinitionFile_metadata = { "name" : "NPlateDefinitionFile",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def NPlateDefinitionFile(self) -> str:
        """Drag N-Plate definition file."""
        return self._intf.get_property(IAgVAHarrisPriester._metadata, IAgVAHarrisPriester._get_NPlateDefinitionFile_metadata)

    _set_NPlateDefinitionFile_metadata = { "name" : "NPlateDefinitionFile",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @NPlateDefinitionFile.setter
    def NPlateDefinitionFile(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAHarrisPriester._metadata, IAgVAHarrisPriester._set_NPlateDefinitionFile_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{4481139D-2D5D-48F0-9372-2385F8F95658}", IAgVAHarrisPriester)
agcls.AgTypeNameMap["IAgVAHarrisPriester"] = IAgVAHarrisPriester

class IAgVADensityModelPlugin(object):
    """Properties for the plugin atmospheric density model."""
    _num_methods = 51
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{FCE828BB-B2CE-4F2C-91EC-42ED00564FF4}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_PluginIdentifier" : 1,
                             "set_PluginIdentifier" : 2,
                             "get_PluginConfig" : 3,
                             "get_UseApproximateAltitude" : 4,
                             "set_UseApproximateAltitude" : 5,
                             "get_ComputesTemperature" : 6,
                             "get_ComputesPressure" : 7,
                             "get_SunPosition" : 8,
                             "set_SunPosition" : 9,
                             "get_AtmosDataSource" : 10,
                             "set_AtmosDataSource" : 11,
                             "get_F10" : 12,
                             "set_F10" : 13,
                             "get_F10Avg" : 14,
                             "set_F10Avg" : 15,
                             "get_M10" : 16,
                             "set_M10" : 17,
                             "get_M10Avg" : 18,
                             "set_M10Avg" : 19,
                             "get_S10" : 20,
                             "set_S10" : 21,
                             "get_S10Avg" : 22,
                             "set_S10Avg" : 23,
                             "get_Y10" : 24,
                             "set_Y10" : 25,
                             "get_Y10Avg" : 26,
                             "set_Y10Avg" : 27,
                             "get_Kp" : 28,
                             "set_Kp" : 29,
                             "get_DstDTc" : 30,
                             "set_DstDTc" : 31,
                             "get_AtmosDataGeoMagneticFluxSource" : 32,
                             "set_AtmosDataGeoMagneticFluxSource" : 33,
                             "get_AtmosDataGeoMagneticFluxUpdateRate" : 34,
                             "set_AtmosDataGeoMagneticFluxUpdateRate" : 35,
                             "get_AtmosDataFilename" : 36,
                             "set_AtmosDataFilename" : 37,
                             "get_AtmosAugDataFile" : 38,
                             "set_AtmosAugDataFile" : 39,
                             "get_AtmosAugDTCFile" : 40,
                             "set_AtmosAugDTCFile" : 41,
                             "get_DragModelType" : 42,
                             "set_DragModelType" : 43,
                             "get_DragModelPluginName" : 44,
                             "set_DragModelPluginName" : 45,
                             "get_DragModelPlugin" : 46,
                             "get_UsesAugmentedSpaceWeather" : 47,
                             "get_VariableAreaHistoryFile" : 48,
                             "set_VariableAreaHistoryFile" : 49,
                             "get_NPlateDefinitionFile" : 50,
                             "set_NPlateDefinitionFile" : 51, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVADensityModelPlugin._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVADensityModelPlugin from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVADensityModelPlugin.__dict__ and type(IAgVADensityModelPlugin.__dict__[attrname]) == property:
            return IAgVADensityModelPlugin.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVADensityModelPlugin.")
    
    _get_PluginIdentifier_metadata = { "name" : "PluginIdentifier",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def PluginIdentifier(self) -> str:
        """The plugin name."""
        return self._intf.get_property(IAgVADensityModelPlugin._metadata, IAgVADensityModelPlugin._get_PluginIdentifier_metadata)

    _set_PluginIdentifier_metadata = { "name" : "PluginIdentifier",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @PluginIdentifier.setter
    def PluginIdentifier(self, inVal:str) -> None:
        return self._intf.set_property(IAgVADensityModelPlugin._metadata, IAgVADensityModelPlugin._set_PluginIdentifier_metadata, inVal)

    _get_PluginConfig_metadata = { "name" : "PluginConfig",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def PluginConfig(self) -> "IAgVAPluginProperties":
        """The properties of the selected plugin."""
        return self._intf.get_property(IAgVADensityModelPlugin._metadata, IAgVADensityModelPlugin._get_PluginConfig_metadata)

    _get_UseApproximateAltitude_metadata = { "name" : "UseApproximateAltitude",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def UseApproximateAltitude(self) -> bool:
        """True if using approximate altitude formula."""
        return self._intf.get_property(IAgVADensityModelPlugin._metadata, IAgVADensityModelPlugin._get_UseApproximateAltitude_metadata)

    _set_UseApproximateAltitude_metadata = { "name" : "UseApproximateAltitude",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @UseApproximateAltitude.setter
    def UseApproximateAltitude(self, inVal:bool) -> None:
        return self._intf.set_property(IAgVADensityModelPlugin._metadata, IAgVADensityModelPlugin._set_UseApproximateAltitude_metadata, inVal)

    _get_ComputesTemperature_metadata = { "name" : "ComputesTemperature",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def ComputesTemperature(self) -> bool:
        """Flag indicates whether this model computes temperature."""
        return self._intf.get_property(IAgVADensityModelPlugin._metadata, IAgVADensityModelPlugin._get_ComputesTemperature_metadata)

    _get_ComputesPressure_metadata = { "name" : "ComputesPressure",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def ComputesPressure(self) -> bool:
        """Flag indicates whether this model computes pressure."""
        return self._intf.get_property(IAgVADensityModelPlugin._metadata, IAgVADensityModelPlugin._get_ComputesPressure_metadata)

    _get_SunPosition_metadata = { "name" : "SunPosition",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVASunPosition),) }
    @property
    def SunPosition(self) -> "AgEVASunPosition":
        """The sun position computation."""
        return self._intf.get_property(IAgVADensityModelPlugin._metadata, IAgVADensityModelPlugin._get_SunPosition_metadata)

    _set_SunPosition_metadata = { "name" : "SunPosition",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVASunPosition),) }
    @SunPosition.setter
    def SunPosition(self, inVal:"AgEVASunPosition") -> None:
        return self._intf.set_property(IAgVADensityModelPlugin._metadata, IAgVADensityModelPlugin._set_SunPosition_metadata, inVal)

    _get_AtmosDataSource_metadata = { "name" : "AtmosDataSource",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAAtmosDataSource),) }
    @property
    def AtmosDataSource(self) -> "AgEVAAtmosDataSource":
        """The atmospheric model data source - data file or constant values."""
        return self._intf.get_property(IAgVADensityModelPlugin._metadata, IAgVADensityModelPlugin._get_AtmosDataSource_metadata)

    _set_AtmosDataSource_metadata = { "name" : "AtmosDataSource",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAAtmosDataSource),) }
    @AtmosDataSource.setter
    def AtmosDataSource(self, inVal:"AgEVAAtmosDataSource") -> None:
        return self._intf.set_property(IAgVADensityModelPlugin._metadata, IAgVADensityModelPlugin._set_AtmosDataSource_metadata, inVal)

    _get_F10_metadata = { "name" : "F10",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def F10(self) -> float:
        """Solar Flux (F10). Dimensionless."""
        return self._intf.get_property(IAgVADensityModelPlugin._metadata, IAgVADensityModelPlugin._get_F10_metadata)

    _set_F10_metadata = { "name" : "F10",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @F10.setter
    def F10(self, inVal:float) -> None:
        return self._intf.set_property(IAgVADensityModelPlugin._metadata, IAgVADensityModelPlugin._set_F10_metadata, inVal)

    _get_F10Avg_metadata = { "name" : "F10Avg",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def F10Avg(self) -> float:
        """Average solar Flux (F10). Dimensionless."""
        return self._intf.get_property(IAgVADensityModelPlugin._metadata, IAgVADensityModelPlugin._get_F10Avg_metadata)

    _set_F10Avg_metadata = { "name" : "F10Avg",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @F10Avg.setter
    def F10Avg(self, inVal:float) -> None:
        return self._intf.set_property(IAgVADensityModelPlugin._metadata, IAgVADensityModelPlugin._set_F10Avg_metadata, inVal)

    _get_M10_metadata = { "name" : "M10",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def M10(self) -> float:
        """Solar Flux (M10). Dimensionless."""
        return self._intf.get_property(IAgVADensityModelPlugin._metadata, IAgVADensityModelPlugin._get_M10_metadata)

    _set_M10_metadata = { "name" : "M10",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @M10.setter
    def M10(self, inVal:float) -> None:
        return self._intf.set_property(IAgVADensityModelPlugin._metadata, IAgVADensityModelPlugin._set_M10_metadata, inVal)

    _get_M10Avg_metadata = { "name" : "M10Avg",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def M10Avg(self) -> float:
        """Average solar Flux (M10). Dimensionless."""
        return self._intf.get_property(IAgVADensityModelPlugin._metadata, IAgVADensityModelPlugin._get_M10Avg_metadata)

    _set_M10Avg_metadata = { "name" : "M10Avg",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @M10Avg.setter
    def M10Avg(self, inVal:float) -> None:
        return self._intf.set_property(IAgVADensityModelPlugin._metadata, IAgVADensityModelPlugin._set_M10Avg_metadata, inVal)

    _get_S10_metadata = { "name" : "S10",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def S10(self) -> float:
        """Solar Flux (S10). Dimensionless."""
        return self._intf.get_property(IAgVADensityModelPlugin._metadata, IAgVADensityModelPlugin._get_S10_metadata)

    _set_S10_metadata = { "name" : "S10",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @S10.setter
    def S10(self, inVal:float) -> None:
        return self._intf.set_property(IAgVADensityModelPlugin._metadata, IAgVADensityModelPlugin._set_S10_metadata, inVal)

    _get_S10Avg_metadata = { "name" : "S10Avg",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def S10Avg(self) -> float:
        """Average solar Flux (S10). Dimensionless."""
        return self._intf.get_property(IAgVADensityModelPlugin._metadata, IAgVADensityModelPlugin._get_S10Avg_metadata)

    _set_S10Avg_metadata = { "name" : "S10Avg",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @S10Avg.setter
    def S10Avg(self, inVal:float) -> None:
        return self._intf.set_property(IAgVADensityModelPlugin._metadata, IAgVADensityModelPlugin._set_S10Avg_metadata, inVal)

    _get_Y10_metadata = { "name" : "Y10",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def Y10(self) -> float:
        """Solar Flux (Y10). Dimensionless."""
        return self._intf.get_property(IAgVADensityModelPlugin._metadata, IAgVADensityModelPlugin._get_Y10_metadata)

    _set_Y10_metadata = { "name" : "Y10",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @Y10.setter
    def Y10(self, inVal:float) -> None:
        return self._intf.set_property(IAgVADensityModelPlugin._metadata, IAgVADensityModelPlugin._set_Y10_metadata, inVal)

    _get_Y10Avg_metadata = { "name" : "Y10Avg",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def Y10Avg(self) -> float:
        """Average solar Flux (Y10). Dimensionless."""
        return self._intf.get_property(IAgVADensityModelPlugin._metadata, IAgVADensityModelPlugin._get_Y10Avg_metadata)

    _set_Y10Avg_metadata = { "name" : "Y10Avg",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @Y10Avg.setter
    def Y10Avg(self, inVal:float) -> None:
        return self._intf.set_property(IAgVADensityModelPlugin._metadata, IAgVADensityModelPlugin._set_Y10Avg_metadata, inVal)

    _get_Kp_metadata = { "name" : "Kp",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def Kp(self) -> float:
        """Geomagnetic Index (Kp). Dimensionless."""
        return self._intf.get_property(IAgVADensityModelPlugin._metadata, IAgVADensityModelPlugin._get_Kp_metadata)

    _set_Kp_metadata = { "name" : "Kp",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @Kp.setter
    def Kp(self, inVal:float) -> None:
        return self._intf.set_property(IAgVADensityModelPlugin._metadata, IAgVADensityModelPlugin._set_Kp_metadata, inVal)

    _get_DstDTc_metadata = { "name" : "DstDTc",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def DstDTc(self) -> float:
        """Temperature change calculated from disturbance storm time (DstDTc). Dimensionless."""
        return self._intf.get_property(IAgVADensityModelPlugin._metadata, IAgVADensityModelPlugin._get_DstDTc_metadata)

    _set_DstDTc_metadata = { "name" : "DstDTc",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @DstDTc.setter
    def DstDTc(self, inVal:float) -> None:
        return self._intf.set_property(IAgVADensityModelPlugin._metadata, IAgVADensityModelPlugin._set_DstDTc_metadata, inVal)

    _get_AtmosDataGeoMagneticFluxSource_metadata = { "name" : "AtmosDataGeoMagneticFluxSource",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAGeoMagneticFluxSource),) }
    @property
    def AtmosDataGeoMagneticFluxSource(self) -> "AgEVAGeoMagneticFluxSource":
        """Whether to use Kp or Ap data from the flux file."""
        return self._intf.get_property(IAgVADensityModelPlugin._metadata, IAgVADensityModelPlugin._get_AtmosDataGeoMagneticFluxSource_metadata)

    _set_AtmosDataGeoMagneticFluxSource_metadata = { "name" : "AtmosDataGeoMagneticFluxSource",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAGeoMagneticFluxSource),) }
    @AtmosDataGeoMagneticFluxSource.setter
    def AtmosDataGeoMagneticFluxSource(self, inVal:"AgEVAGeoMagneticFluxSource") -> None:
        return self._intf.set_property(IAgVADensityModelPlugin._metadata, IAgVADensityModelPlugin._set_AtmosDataGeoMagneticFluxSource_metadata, inVal)

    _get_AtmosDataGeoMagneticFluxUpdateRate_metadata = { "name" : "AtmosDataGeoMagneticFluxUpdateRate",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAGeoMagneticFluxUpdateRate),) }
    @property
    def AtmosDataGeoMagneticFluxUpdateRate(self) -> "AgEVAGeoMagneticFluxUpdateRate":
        """The update rate for geomagnetic flux values from the flux file."""
        return self._intf.get_property(IAgVADensityModelPlugin._metadata, IAgVADensityModelPlugin._get_AtmosDataGeoMagneticFluxUpdateRate_metadata)

    _set_AtmosDataGeoMagneticFluxUpdateRate_metadata = { "name" : "AtmosDataGeoMagneticFluxUpdateRate",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAGeoMagneticFluxUpdateRate),) }
    @AtmosDataGeoMagneticFluxUpdateRate.setter
    def AtmosDataGeoMagneticFluxUpdateRate(self, inVal:"AgEVAGeoMagneticFluxUpdateRate") -> None:
        return self._intf.set_property(IAgVADensityModelPlugin._metadata, IAgVADensityModelPlugin._set_AtmosDataGeoMagneticFluxUpdateRate_metadata, inVal)

    _get_AtmosDataFilename_metadata = { "name" : "AtmosDataFilename",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def AtmosDataFilename(self) -> str:
        """The atmospheric model data file path."""
        return self._intf.get_property(IAgVADensityModelPlugin._metadata, IAgVADensityModelPlugin._get_AtmosDataFilename_metadata)

    _set_AtmosDataFilename_metadata = { "name" : "AtmosDataFilename",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @AtmosDataFilename.setter
    def AtmosDataFilename(self, inVal:str) -> None:
        return self._intf.set_property(IAgVADensityModelPlugin._metadata, IAgVADensityModelPlugin._set_AtmosDataFilename_metadata, inVal)

    _get_AtmosAugDataFile_metadata = { "name" : "AtmosAugDataFile",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def AtmosAugDataFile(self) -> str:
        """The atmospheric model augmented data file path."""
        return self._intf.get_property(IAgVADensityModelPlugin._metadata, IAgVADensityModelPlugin._get_AtmosAugDataFile_metadata)

    _set_AtmosAugDataFile_metadata = { "name" : "AtmosAugDataFile",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @AtmosAugDataFile.setter
    def AtmosAugDataFile(self, inVal:str) -> None:
        return self._intf.set_property(IAgVADensityModelPlugin._metadata, IAgVADensityModelPlugin._set_AtmosAugDataFile_metadata, inVal)

    _get_AtmosAugDTCFile_metadata = { "name" : "AtmosAugDTCFile",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def AtmosAugDTCFile(self) -> str:
        """The atmospheric model augmented geomagnetic data file path."""
        return self._intf.get_property(IAgVADensityModelPlugin._metadata, IAgVADensityModelPlugin._get_AtmosAugDTCFile_metadata)

    _set_AtmosAugDTCFile_metadata = { "name" : "AtmosAugDTCFile",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @AtmosAugDTCFile.setter
    def AtmosAugDTCFile(self, inVal:str) -> None:
        return self._intf.set_property(IAgVADensityModelPlugin._metadata, IAgVADensityModelPlugin._set_AtmosAugDTCFile_metadata, inVal)

    _get_DragModelType_metadata = { "name" : "DragModelType",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVADragModelType),) }
    @property
    def DragModelType(self) -> "AgEVADragModelType":
        """Drag model type."""
        return self._intf.get_property(IAgVADensityModelPlugin._metadata, IAgVADensityModelPlugin._get_DragModelType_metadata)

    _set_DragModelType_metadata = { "name" : "DragModelType",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVADragModelType),) }
    @DragModelType.setter
    def DragModelType(self, inVal:"AgEVADragModelType") -> None:
        return self._intf.set_property(IAgVADensityModelPlugin._metadata, IAgVADensityModelPlugin._set_DragModelType_metadata, inVal)

    _get_DragModelPluginName_metadata = { "name" : "DragModelPluginName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def DragModelPluginName(self) -> str:
        """The name of the drag model plugin."""
        return self._intf.get_property(IAgVADensityModelPlugin._metadata, IAgVADensityModelPlugin._get_DragModelPluginName_metadata)

    _set_DragModelPluginName_metadata = { "name" : "DragModelPluginName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @DragModelPluginName.setter
    def DragModelPluginName(self, pVal:str) -> None:
        return self._intf.set_property(IAgVADensityModelPlugin._metadata, IAgVADensityModelPlugin._set_DragModelPluginName_metadata, pVal)

    _get_DragModelPlugin_metadata = { "name" : "DragModelPlugin",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def DragModelPlugin(self) -> "IAgVADragModelPlugin":
        """Drag model plugin properties."""
        return self._intf.get_property(IAgVADensityModelPlugin._metadata, IAgVADensityModelPlugin._get_DragModelPlugin_metadata)

    _get_UsesAugmentedSpaceWeather_metadata = { "name" : "UsesAugmentedSpaceWeather",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def UsesAugmentedSpaceWeather(self) -> bool:
        """Flag indicates whether this model uses augmented flux data."""
        return self._intf.get_property(IAgVADensityModelPlugin._metadata, IAgVADensityModelPlugin._get_UsesAugmentedSpaceWeather_metadata)

    _get_VariableAreaHistoryFile_metadata = { "name" : "VariableAreaHistoryFile",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def VariableAreaHistoryFile(self) -> str:
        """Drag variable area history file."""
        return self._intf.get_property(IAgVADensityModelPlugin._metadata, IAgVADensityModelPlugin._get_VariableAreaHistoryFile_metadata)

    _set_VariableAreaHistoryFile_metadata = { "name" : "VariableAreaHistoryFile",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @VariableAreaHistoryFile.setter
    def VariableAreaHistoryFile(self, inVal:str) -> None:
        return self._intf.set_property(IAgVADensityModelPlugin._metadata, IAgVADensityModelPlugin._set_VariableAreaHistoryFile_metadata, inVal)

    _get_NPlateDefinitionFile_metadata = { "name" : "NPlateDefinitionFile",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def NPlateDefinitionFile(self) -> str:
        """Drag N-Plate definition file."""
        return self._intf.get_property(IAgVADensityModelPlugin._metadata, IAgVADensityModelPlugin._get_NPlateDefinitionFile_metadata)

    _set_NPlateDefinitionFile_metadata = { "name" : "NPlateDefinitionFile",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @NPlateDefinitionFile.setter
    def NPlateDefinitionFile(self, inVal:str) -> None:
        return self._intf.set_property(IAgVADensityModelPlugin._metadata, IAgVADensityModelPlugin._set_NPlateDefinitionFile_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{FCE828BB-B2CE-4F2C-91EC-42ED00564FF4}", IAgVADensityModelPlugin)
agcls.AgTypeNameMap["IAgVADensityModelPlugin"] = IAgVADensityModelPlugin

class IAgVAJacchiaRoberts(object):
    """Properties for the Jacchia-Roberts atmospheric model - a model that is similar to Jacchia 1971 but uses analytical methods to improve performance."""
    _num_methods = 29
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{EEC62B17-9E4D-4527-AC53-B8A7180A4A65}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_UseApproximateAltitude" : 1,
                             "set_UseApproximateAltitude" : 2,
                             "get_ComputesTemperature" : 3,
                             "get_ComputesPressure" : 4,
                             "get_SunPosition" : 5,
                             "set_SunPosition" : 6,
                             "get_AtmosDataSource" : 7,
                             "set_AtmosDataSource" : 8,
                             "get_F10p7" : 9,
                             "set_F10p7" : 10,
                             "get_F10p7Avg" : 11,
                             "set_F10p7Avg" : 12,
                             "get_Kp" : 13,
                             "set_Kp" : 14,
                             "get_AtmosDataGeoMagneticFluxSource" : 15,
                             "set_AtmosDataGeoMagneticFluxSource" : 16,
                             "get_AtmosDataGeoMagneticFluxUpdateRate" : 17,
                             "set_AtmosDataGeoMagneticFluxUpdateRate" : 18,
                             "get_AtmosDataFilename" : 19,
                             "set_AtmosDataFilename" : 20,
                             "get_DragModelType" : 21,
                             "set_DragModelType" : 22,
                             "get_DragModelPluginName" : 23,
                             "set_DragModelPluginName" : 24,
                             "get_DragModelPlugin" : 25,
                             "get_VariableAreaHistoryFile" : 26,
                             "set_VariableAreaHistoryFile" : 27,
                             "get_NPlateDefinitionFile" : 28,
                             "set_NPlateDefinitionFile" : 29, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAJacchiaRoberts._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAJacchiaRoberts from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAJacchiaRoberts.__dict__ and type(IAgVAJacchiaRoberts.__dict__[attrname]) == property:
            return IAgVAJacchiaRoberts.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAJacchiaRoberts.")
    
    _get_UseApproximateAltitude_metadata = { "name" : "UseApproximateAltitude",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def UseApproximateAltitude(self) -> bool:
        """True if using approximate altitude formula."""
        return self._intf.get_property(IAgVAJacchiaRoberts._metadata, IAgVAJacchiaRoberts._get_UseApproximateAltitude_metadata)

    _set_UseApproximateAltitude_metadata = { "name" : "UseApproximateAltitude",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @UseApproximateAltitude.setter
    def UseApproximateAltitude(self, inVal:bool) -> None:
        return self._intf.set_property(IAgVAJacchiaRoberts._metadata, IAgVAJacchiaRoberts._set_UseApproximateAltitude_metadata, inVal)

    _get_ComputesTemperature_metadata = { "name" : "ComputesTemperature",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def ComputesTemperature(self) -> bool:
        """Flag indicates whether this model computes temperature."""
        return self._intf.get_property(IAgVAJacchiaRoberts._metadata, IAgVAJacchiaRoberts._get_ComputesTemperature_metadata)

    _get_ComputesPressure_metadata = { "name" : "ComputesPressure",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def ComputesPressure(self) -> bool:
        """Flag indicates whether this model computes pressure."""
        return self._intf.get_property(IAgVAJacchiaRoberts._metadata, IAgVAJacchiaRoberts._get_ComputesPressure_metadata)

    _get_SunPosition_metadata = { "name" : "SunPosition",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVASunPosition),) }
    @property
    def SunPosition(self) -> "AgEVASunPosition":
        """The sun position computation."""
        return self._intf.get_property(IAgVAJacchiaRoberts._metadata, IAgVAJacchiaRoberts._get_SunPosition_metadata)

    _set_SunPosition_metadata = { "name" : "SunPosition",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVASunPosition),) }
    @SunPosition.setter
    def SunPosition(self, inVal:"AgEVASunPosition") -> None:
        return self._intf.set_property(IAgVAJacchiaRoberts._metadata, IAgVAJacchiaRoberts._set_SunPosition_metadata, inVal)

    _get_AtmosDataSource_metadata = { "name" : "AtmosDataSource",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAAtmosDataSource),) }
    @property
    def AtmosDataSource(self) -> "AgEVAAtmosDataSource":
        """The atmospheric model data source - data file or constant values."""
        return self._intf.get_property(IAgVAJacchiaRoberts._metadata, IAgVAJacchiaRoberts._get_AtmosDataSource_metadata)

    _set_AtmosDataSource_metadata = { "name" : "AtmosDataSource",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAAtmosDataSource),) }
    @AtmosDataSource.setter
    def AtmosDataSource(self, inVal:"AgEVAAtmosDataSource") -> None:
        return self._intf.set_property(IAgVAJacchiaRoberts._metadata, IAgVAJacchiaRoberts._set_AtmosDataSource_metadata, inVal)

    _get_F10p7_metadata = { "name" : "F10p7",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def F10p7(self) -> float:
        """Solar Flux (F10.7); the daily Ottawa 10.7 cm solar flux value. Dimensionless."""
        return self._intf.get_property(IAgVAJacchiaRoberts._metadata, IAgVAJacchiaRoberts._get_F10p7_metadata)

    _set_F10p7_metadata = { "name" : "F10p7",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @F10p7.setter
    def F10p7(self, inVal:float) -> None:
        return self._intf.set_property(IAgVAJacchiaRoberts._metadata, IAgVAJacchiaRoberts._set_F10p7_metadata, inVal)

    _get_F10p7Avg_metadata = { "name" : "F10p7Avg",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def F10p7Avg(self) -> float:
        """Average solar Flux (F10.7); the 81-day averaged Ottawa 10.7 cm solar flux value. Dimensionless."""
        return self._intf.get_property(IAgVAJacchiaRoberts._metadata, IAgVAJacchiaRoberts._get_F10p7Avg_metadata)

    _set_F10p7Avg_metadata = { "name" : "F10p7Avg",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @F10p7Avg.setter
    def F10p7Avg(self, inVal:float) -> None:
        return self._intf.set_property(IAgVAJacchiaRoberts._metadata, IAgVAJacchiaRoberts._set_F10p7Avg_metadata, inVal)

    _get_Kp_metadata = { "name" : "Kp",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def Kp(self) -> float:
        """Geomagnetic Index (Kp). Dimensionless."""
        return self._intf.get_property(IAgVAJacchiaRoberts._metadata, IAgVAJacchiaRoberts._get_Kp_metadata)

    _set_Kp_metadata = { "name" : "Kp",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @Kp.setter
    def Kp(self, inVal:float) -> None:
        return self._intf.set_property(IAgVAJacchiaRoberts._metadata, IAgVAJacchiaRoberts._set_Kp_metadata, inVal)

    _get_AtmosDataGeoMagneticFluxSource_metadata = { "name" : "AtmosDataGeoMagneticFluxSource",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAGeoMagneticFluxSource),) }
    @property
    def AtmosDataGeoMagneticFluxSource(self) -> "AgEVAGeoMagneticFluxSource":
        """Whether to use Kp or Ap data from the flux file."""
        return self._intf.get_property(IAgVAJacchiaRoberts._metadata, IAgVAJacchiaRoberts._get_AtmosDataGeoMagneticFluxSource_metadata)

    _set_AtmosDataGeoMagneticFluxSource_metadata = { "name" : "AtmosDataGeoMagneticFluxSource",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAGeoMagneticFluxSource),) }
    @AtmosDataGeoMagneticFluxSource.setter
    def AtmosDataGeoMagneticFluxSource(self, inVal:"AgEVAGeoMagneticFluxSource") -> None:
        return self._intf.set_property(IAgVAJacchiaRoberts._metadata, IAgVAJacchiaRoberts._set_AtmosDataGeoMagneticFluxSource_metadata, inVal)

    _get_AtmosDataGeoMagneticFluxUpdateRate_metadata = { "name" : "AtmosDataGeoMagneticFluxUpdateRate",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAGeoMagneticFluxUpdateRate),) }
    @property
    def AtmosDataGeoMagneticFluxUpdateRate(self) -> "AgEVAGeoMagneticFluxUpdateRate":
        """The update rate for geomagnetic flux values from the flux file."""
        return self._intf.get_property(IAgVAJacchiaRoberts._metadata, IAgVAJacchiaRoberts._get_AtmosDataGeoMagneticFluxUpdateRate_metadata)

    _set_AtmosDataGeoMagneticFluxUpdateRate_metadata = { "name" : "AtmosDataGeoMagneticFluxUpdateRate",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAGeoMagneticFluxUpdateRate),) }
    @AtmosDataGeoMagneticFluxUpdateRate.setter
    def AtmosDataGeoMagneticFluxUpdateRate(self, inVal:"AgEVAGeoMagneticFluxUpdateRate") -> None:
        return self._intf.set_property(IAgVAJacchiaRoberts._metadata, IAgVAJacchiaRoberts._set_AtmosDataGeoMagneticFluxUpdateRate_metadata, inVal)

    _get_AtmosDataFilename_metadata = { "name" : "AtmosDataFilename",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def AtmosDataFilename(self) -> str:
        """The atmospheric model data file path."""
        return self._intf.get_property(IAgVAJacchiaRoberts._metadata, IAgVAJacchiaRoberts._get_AtmosDataFilename_metadata)

    _set_AtmosDataFilename_metadata = { "name" : "AtmosDataFilename",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @AtmosDataFilename.setter
    def AtmosDataFilename(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAJacchiaRoberts._metadata, IAgVAJacchiaRoberts._set_AtmosDataFilename_metadata, inVal)

    _get_DragModelType_metadata = { "name" : "DragModelType",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVADragModelType),) }
    @property
    def DragModelType(self) -> "AgEVADragModelType":
        """Drag model type."""
        return self._intf.get_property(IAgVAJacchiaRoberts._metadata, IAgVAJacchiaRoberts._get_DragModelType_metadata)

    _set_DragModelType_metadata = { "name" : "DragModelType",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVADragModelType),) }
    @DragModelType.setter
    def DragModelType(self, inVal:"AgEVADragModelType") -> None:
        return self._intf.set_property(IAgVAJacchiaRoberts._metadata, IAgVAJacchiaRoberts._set_DragModelType_metadata, inVal)

    _get_DragModelPluginName_metadata = { "name" : "DragModelPluginName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def DragModelPluginName(self) -> str:
        """The name of the drag model plugin."""
        return self._intf.get_property(IAgVAJacchiaRoberts._metadata, IAgVAJacchiaRoberts._get_DragModelPluginName_metadata)

    _set_DragModelPluginName_metadata = { "name" : "DragModelPluginName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @DragModelPluginName.setter
    def DragModelPluginName(self, pVal:str) -> None:
        return self._intf.set_property(IAgVAJacchiaRoberts._metadata, IAgVAJacchiaRoberts._set_DragModelPluginName_metadata, pVal)

    _get_DragModelPlugin_metadata = { "name" : "DragModelPlugin",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def DragModelPlugin(self) -> "IAgVADragModelPlugin":
        """Drag model plugin properties."""
        return self._intf.get_property(IAgVAJacchiaRoberts._metadata, IAgVAJacchiaRoberts._get_DragModelPlugin_metadata)

    _get_VariableAreaHistoryFile_metadata = { "name" : "VariableAreaHistoryFile",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def VariableAreaHistoryFile(self) -> str:
        """Drag variable area history file."""
        return self._intf.get_property(IAgVAJacchiaRoberts._metadata, IAgVAJacchiaRoberts._get_VariableAreaHistoryFile_metadata)

    _set_VariableAreaHistoryFile_metadata = { "name" : "VariableAreaHistoryFile",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @VariableAreaHistoryFile.setter
    def VariableAreaHistoryFile(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAJacchiaRoberts._metadata, IAgVAJacchiaRoberts._set_VariableAreaHistoryFile_metadata, inVal)

    _get_NPlateDefinitionFile_metadata = { "name" : "NPlateDefinitionFile",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def NPlateDefinitionFile(self) -> str:
        """Drag N-Plate definition file."""
        return self._intf.get_property(IAgVAJacchiaRoberts._metadata, IAgVAJacchiaRoberts._get_NPlateDefinitionFile_metadata)

    _set_NPlateDefinitionFile_metadata = { "name" : "NPlateDefinitionFile",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @NPlateDefinitionFile.setter
    def NPlateDefinitionFile(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAJacchiaRoberts._metadata, IAgVAJacchiaRoberts._set_NPlateDefinitionFile_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{EEC62B17-9E4D-4527-AC53-B8A7180A4A65}", IAgVAJacchiaRoberts)
agcls.AgTypeNameMap["IAgVAJacchiaRoberts"] = IAgVAJacchiaRoberts

class IAgVAJacchiaBowman2008(object):
    """Properties for the Jacchia Bowman 2008 atmospheric density model."""
    _num_methods = 37
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{49B828F8-A541-4E9E-99DD-DF3708B3559F}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_UseApproximateAltitude" : 1,
                             "set_UseApproximateAltitude" : 2,
                             "get_SunPosition" : 3,
                             "set_SunPosition" : 4,
                             "get_AtmosDataSource" : 5,
                             "set_AtmosDataSource" : 6,
                             "get_F10" : 7,
                             "set_F10" : 8,
                             "get_F10Avg" : 9,
                             "set_F10Avg" : 10,
                             "get_M10" : 11,
                             "set_M10" : 12,
                             "get_M10Avg" : 13,
                             "set_M10Avg" : 14,
                             "get_S10" : 15,
                             "set_S10" : 16,
                             "get_S10Avg" : 17,
                             "set_S10Avg" : 18,
                             "get_Y10" : 19,
                             "set_Y10" : 20,
                             "get_Y10Avg" : 21,
                             "set_Y10Avg" : 22,
                             "get_DstDTc" : 23,
                             "set_DstDTc" : 24,
                             "get_AtmosAugDataFile" : 25,
                             "set_AtmosAugDataFile" : 26,
                             "get_AtmosAugDTCFile" : 27,
                             "set_AtmosAugDTCFile" : 28,
                             "get_DragModelType" : 29,
                             "set_DragModelType" : 30,
                             "get_DragModelPluginName" : 31,
                             "set_DragModelPluginName" : 32,
                             "get_DragModelPlugin" : 33,
                             "get_VariableAreaHistoryFile" : 34,
                             "set_VariableAreaHistoryFile" : 35,
                             "get_NPlateDefinitionFile" : 36,
                             "set_NPlateDefinitionFile" : 37, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAJacchiaBowman2008._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAJacchiaBowman2008 from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAJacchiaBowman2008.__dict__ and type(IAgVAJacchiaBowman2008.__dict__[attrname]) == property:
            return IAgVAJacchiaBowman2008.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAJacchiaBowman2008.")
    
    _get_UseApproximateAltitude_metadata = { "name" : "UseApproximateAltitude",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def UseApproximateAltitude(self) -> bool:
        """True if using approximate altitude formula."""
        return self._intf.get_property(IAgVAJacchiaBowman2008._metadata, IAgVAJacchiaBowman2008._get_UseApproximateAltitude_metadata)

    _set_UseApproximateAltitude_metadata = { "name" : "UseApproximateAltitude",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @UseApproximateAltitude.setter
    def UseApproximateAltitude(self, inVal:bool) -> None:
        return self._intf.set_property(IAgVAJacchiaBowman2008._metadata, IAgVAJacchiaBowman2008._set_UseApproximateAltitude_metadata, inVal)

    _get_SunPosition_metadata = { "name" : "SunPosition",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVASunPosition),) }
    @property
    def SunPosition(self) -> "AgEVASunPosition":
        """The sun position computation."""
        return self._intf.get_property(IAgVAJacchiaBowman2008._metadata, IAgVAJacchiaBowman2008._get_SunPosition_metadata)

    _set_SunPosition_metadata = { "name" : "SunPosition",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVASunPosition),) }
    @SunPosition.setter
    def SunPosition(self, inVal:"AgEVASunPosition") -> None:
        return self._intf.set_property(IAgVAJacchiaBowman2008._metadata, IAgVAJacchiaBowman2008._set_SunPosition_metadata, inVal)

    _get_AtmosDataSource_metadata = { "name" : "AtmosDataSource",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAAtmosDataSource),) }
    @property
    def AtmosDataSource(self) -> "AgEVAAtmosDataSource":
        """The atmospheric model data source - data file or constant values."""
        return self._intf.get_property(IAgVAJacchiaBowman2008._metadata, IAgVAJacchiaBowman2008._get_AtmosDataSource_metadata)

    _set_AtmosDataSource_metadata = { "name" : "AtmosDataSource",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAAtmosDataSource),) }
    @AtmosDataSource.setter
    def AtmosDataSource(self, inVal:"AgEVAAtmosDataSource") -> None:
        return self._intf.set_property(IAgVAJacchiaBowman2008._metadata, IAgVAJacchiaBowman2008._set_AtmosDataSource_metadata, inVal)

    _get_F10_metadata = { "name" : "F10",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def F10(self) -> float:
        """Solar Flux (F10). Dimensionless."""
        return self._intf.get_property(IAgVAJacchiaBowman2008._metadata, IAgVAJacchiaBowman2008._get_F10_metadata)

    _set_F10_metadata = { "name" : "F10",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @F10.setter
    def F10(self, inVal:float) -> None:
        return self._intf.set_property(IAgVAJacchiaBowman2008._metadata, IAgVAJacchiaBowman2008._set_F10_metadata, inVal)

    _get_F10Avg_metadata = { "name" : "F10Avg",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def F10Avg(self) -> float:
        """Average solar Flux (F10). Dimensionless."""
        return self._intf.get_property(IAgVAJacchiaBowman2008._metadata, IAgVAJacchiaBowman2008._get_F10Avg_metadata)

    _set_F10Avg_metadata = { "name" : "F10Avg",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @F10Avg.setter
    def F10Avg(self, inVal:float) -> None:
        return self._intf.set_property(IAgVAJacchiaBowman2008._metadata, IAgVAJacchiaBowman2008._set_F10Avg_metadata, inVal)

    _get_M10_metadata = { "name" : "M10",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def M10(self) -> float:
        """Solar Flux (M10). Dimensionless."""
        return self._intf.get_property(IAgVAJacchiaBowman2008._metadata, IAgVAJacchiaBowman2008._get_M10_metadata)

    _set_M10_metadata = { "name" : "M10",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @M10.setter
    def M10(self, inVal:float) -> None:
        return self._intf.set_property(IAgVAJacchiaBowman2008._metadata, IAgVAJacchiaBowman2008._set_M10_metadata, inVal)

    _get_M10Avg_metadata = { "name" : "M10Avg",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def M10Avg(self) -> float:
        """Average solar Flux (M10). Dimensionless."""
        return self._intf.get_property(IAgVAJacchiaBowman2008._metadata, IAgVAJacchiaBowman2008._get_M10Avg_metadata)

    _set_M10Avg_metadata = { "name" : "M10Avg",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @M10Avg.setter
    def M10Avg(self, inVal:float) -> None:
        return self._intf.set_property(IAgVAJacchiaBowman2008._metadata, IAgVAJacchiaBowman2008._set_M10Avg_metadata, inVal)

    _get_S10_metadata = { "name" : "S10",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def S10(self) -> float:
        """Solar Flux (S10). Dimensionless."""
        return self._intf.get_property(IAgVAJacchiaBowman2008._metadata, IAgVAJacchiaBowman2008._get_S10_metadata)

    _set_S10_metadata = { "name" : "S10",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @S10.setter
    def S10(self, inVal:float) -> None:
        return self._intf.set_property(IAgVAJacchiaBowman2008._metadata, IAgVAJacchiaBowman2008._set_S10_metadata, inVal)

    _get_S10Avg_metadata = { "name" : "S10Avg",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def S10Avg(self) -> float:
        """Average solar Flux (S10). Dimensionless."""
        return self._intf.get_property(IAgVAJacchiaBowman2008._metadata, IAgVAJacchiaBowman2008._get_S10Avg_metadata)

    _set_S10Avg_metadata = { "name" : "S10Avg",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @S10Avg.setter
    def S10Avg(self, inVal:float) -> None:
        return self._intf.set_property(IAgVAJacchiaBowman2008._metadata, IAgVAJacchiaBowman2008._set_S10Avg_metadata, inVal)

    _get_Y10_metadata = { "name" : "Y10",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def Y10(self) -> float:
        """Solar Flux (Y10). Dimensionless."""
        return self._intf.get_property(IAgVAJacchiaBowman2008._metadata, IAgVAJacchiaBowman2008._get_Y10_metadata)

    _set_Y10_metadata = { "name" : "Y10",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @Y10.setter
    def Y10(self, inVal:float) -> None:
        return self._intf.set_property(IAgVAJacchiaBowman2008._metadata, IAgVAJacchiaBowman2008._set_Y10_metadata, inVal)

    _get_Y10Avg_metadata = { "name" : "Y10Avg",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def Y10Avg(self) -> float:
        """Average solar Flux (Y10). Dimensionless."""
        return self._intf.get_property(IAgVAJacchiaBowman2008._metadata, IAgVAJacchiaBowman2008._get_Y10Avg_metadata)

    _set_Y10Avg_metadata = { "name" : "Y10Avg",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @Y10Avg.setter
    def Y10Avg(self, inVal:float) -> None:
        return self._intf.set_property(IAgVAJacchiaBowman2008._metadata, IAgVAJacchiaBowman2008._set_Y10Avg_metadata, inVal)

    _get_DstDTc_metadata = { "name" : "DstDTc",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def DstDTc(self) -> float:
        """Temperature change calculated from disturbance storm time (DstDTc). Dimensionless."""
        return self._intf.get_property(IAgVAJacchiaBowman2008._metadata, IAgVAJacchiaBowman2008._get_DstDTc_metadata)

    _set_DstDTc_metadata = { "name" : "DstDTc",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @DstDTc.setter
    def DstDTc(self, inVal:float) -> None:
        return self._intf.set_property(IAgVAJacchiaBowman2008._metadata, IAgVAJacchiaBowman2008._set_DstDTc_metadata, inVal)

    _get_AtmosAugDataFile_metadata = { "name" : "AtmosAugDataFile",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def AtmosAugDataFile(self) -> str:
        """The atmospheric model space weather data file path."""
        return self._intf.get_property(IAgVAJacchiaBowman2008._metadata, IAgVAJacchiaBowman2008._get_AtmosAugDataFile_metadata)

    _set_AtmosAugDataFile_metadata = { "name" : "AtmosAugDataFile",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @AtmosAugDataFile.setter
    def AtmosAugDataFile(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAJacchiaBowman2008._metadata, IAgVAJacchiaBowman2008._set_AtmosAugDataFile_metadata, inVal)

    _get_AtmosAugDTCFile_metadata = { "name" : "AtmosAugDTCFile",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def AtmosAugDTCFile(self) -> str:
        """The atmospheric model DTC file path."""
        return self._intf.get_property(IAgVAJacchiaBowman2008._metadata, IAgVAJacchiaBowman2008._get_AtmosAugDTCFile_metadata)

    _set_AtmosAugDTCFile_metadata = { "name" : "AtmosAugDTCFile",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @AtmosAugDTCFile.setter
    def AtmosAugDTCFile(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAJacchiaBowman2008._metadata, IAgVAJacchiaBowman2008._set_AtmosAugDTCFile_metadata, inVal)

    _get_DragModelType_metadata = { "name" : "DragModelType",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVADragModelType),) }
    @property
    def DragModelType(self) -> "AgEVADragModelType":
        """Drag model type."""
        return self._intf.get_property(IAgVAJacchiaBowman2008._metadata, IAgVAJacchiaBowman2008._get_DragModelType_metadata)

    _set_DragModelType_metadata = { "name" : "DragModelType",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVADragModelType),) }
    @DragModelType.setter
    def DragModelType(self, inVal:"AgEVADragModelType") -> None:
        return self._intf.set_property(IAgVAJacchiaBowman2008._metadata, IAgVAJacchiaBowman2008._set_DragModelType_metadata, inVal)

    _get_DragModelPluginName_metadata = { "name" : "DragModelPluginName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def DragModelPluginName(self) -> str:
        """The name of the drag model plugin."""
        return self._intf.get_property(IAgVAJacchiaBowman2008._metadata, IAgVAJacchiaBowman2008._get_DragModelPluginName_metadata)

    _set_DragModelPluginName_metadata = { "name" : "DragModelPluginName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @DragModelPluginName.setter
    def DragModelPluginName(self, pVal:str) -> None:
        return self._intf.set_property(IAgVAJacchiaBowman2008._metadata, IAgVAJacchiaBowman2008._set_DragModelPluginName_metadata, pVal)

    _get_DragModelPlugin_metadata = { "name" : "DragModelPlugin",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def DragModelPlugin(self) -> "IAgVADragModelPlugin":
        """Drag model plugin properties."""
        return self._intf.get_property(IAgVAJacchiaBowman2008._metadata, IAgVAJacchiaBowman2008._get_DragModelPlugin_metadata)

    _get_VariableAreaHistoryFile_metadata = { "name" : "VariableAreaHistoryFile",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def VariableAreaHistoryFile(self) -> str:
        """Drag variable area history file."""
        return self._intf.get_property(IAgVAJacchiaBowman2008._metadata, IAgVAJacchiaBowman2008._get_VariableAreaHistoryFile_metadata)

    _set_VariableAreaHistoryFile_metadata = { "name" : "VariableAreaHistoryFile",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @VariableAreaHistoryFile.setter
    def VariableAreaHistoryFile(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAJacchiaBowman2008._metadata, IAgVAJacchiaBowman2008._set_VariableAreaHistoryFile_metadata, inVal)

    _get_NPlateDefinitionFile_metadata = { "name" : "NPlateDefinitionFile",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def NPlateDefinitionFile(self) -> str:
        """Drag N-Plate definition file."""
        return self._intf.get_property(IAgVAJacchiaBowman2008._metadata, IAgVAJacchiaBowman2008._get_NPlateDefinitionFile_metadata)

    _set_NPlateDefinitionFile_metadata = { "name" : "NPlateDefinitionFile",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @NPlateDefinitionFile.setter
    def NPlateDefinitionFile(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAJacchiaBowman2008._metadata, IAgVAJacchiaBowman2008._set_NPlateDefinitionFile_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{49B828F8-A541-4E9E-99DD-DF3708B3559F}", IAgVAJacchiaBowman2008)
agcls.AgTypeNameMap["IAgVAJacchiaBowman2008"] = IAgVAJacchiaBowman2008

class IAgVAJacchia_1960(object):
    """Properties for the Jacchia 1960 atmospheric model - an outdated atmospheric model provided for making comparisons with other software."""
    _num_methods = 15
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{B32376D4-28EE-4D16-820F-A3A553103168}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_UseApproximateAltitude" : 1,
                             "set_UseApproximateAltitude" : 2,
                             "get_ComputesTemperature" : 3,
                             "get_ComputesPressure" : 4,
                             "get_SunPosition" : 5,
                             "set_SunPosition" : 6,
                             "get_DragModelType" : 7,
                             "set_DragModelType" : 8,
                             "get_DragModelPluginName" : 9,
                             "set_DragModelPluginName" : 10,
                             "get_DragModelPlugin" : 11,
                             "get_VariableAreaHistoryFile" : 12,
                             "set_VariableAreaHistoryFile" : 13,
                             "get_NPlateDefinitionFile" : 14,
                             "set_NPlateDefinitionFile" : 15, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAJacchia_1960._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAJacchia_1960 from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAJacchia_1960.__dict__ and type(IAgVAJacchia_1960.__dict__[attrname]) == property:
            return IAgVAJacchia_1960.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAJacchia_1960.")
    
    _get_UseApproximateAltitude_metadata = { "name" : "UseApproximateAltitude",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def UseApproximateAltitude(self) -> bool:
        """True if using approximate altitude formula."""
        return self._intf.get_property(IAgVAJacchia_1960._metadata, IAgVAJacchia_1960._get_UseApproximateAltitude_metadata)

    _set_UseApproximateAltitude_metadata = { "name" : "UseApproximateAltitude",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @UseApproximateAltitude.setter
    def UseApproximateAltitude(self, inVal:bool) -> None:
        return self._intf.set_property(IAgVAJacchia_1960._metadata, IAgVAJacchia_1960._set_UseApproximateAltitude_metadata, inVal)

    _get_ComputesTemperature_metadata = { "name" : "ComputesTemperature",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def ComputesTemperature(self) -> bool:
        """Flag indicates whether this model computes temperature."""
        return self._intf.get_property(IAgVAJacchia_1960._metadata, IAgVAJacchia_1960._get_ComputesTemperature_metadata)

    _get_ComputesPressure_metadata = { "name" : "ComputesPressure",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def ComputesPressure(self) -> bool:
        """Flag indicates whether this model computes pressure."""
        return self._intf.get_property(IAgVAJacchia_1960._metadata, IAgVAJacchia_1960._get_ComputesPressure_metadata)

    _get_SunPosition_metadata = { "name" : "SunPosition",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVASunPosition),) }
    @property
    def SunPosition(self) -> "AgEVASunPosition":
        """The sun position computation."""
        return self._intf.get_property(IAgVAJacchia_1960._metadata, IAgVAJacchia_1960._get_SunPosition_metadata)

    _set_SunPosition_metadata = { "name" : "SunPosition",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVASunPosition),) }
    @SunPosition.setter
    def SunPosition(self, inVal:"AgEVASunPosition") -> None:
        return self._intf.set_property(IAgVAJacchia_1960._metadata, IAgVAJacchia_1960._set_SunPosition_metadata, inVal)

    _get_DragModelType_metadata = { "name" : "DragModelType",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVADragModelType),) }
    @property
    def DragModelType(self) -> "AgEVADragModelType":
        """Drag model type."""
        return self._intf.get_property(IAgVAJacchia_1960._metadata, IAgVAJacchia_1960._get_DragModelType_metadata)

    _set_DragModelType_metadata = { "name" : "DragModelType",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVADragModelType),) }
    @DragModelType.setter
    def DragModelType(self, inVal:"AgEVADragModelType") -> None:
        return self._intf.set_property(IAgVAJacchia_1960._metadata, IAgVAJacchia_1960._set_DragModelType_metadata, inVal)

    _get_DragModelPluginName_metadata = { "name" : "DragModelPluginName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def DragModelPluginName(self) -> str:
        """The name of the drag model plugin."""
        return self._intf.get_property(IAgVAJacchia_1960._metadata, IAgVAJacchia_1960._get_DragModelPluginName_metadata)

    _set_DragModelPluginName_metadata = { "name" : "DragModelPluginName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @DragModelPluginName.setter
    def DragModelPluginName(self, pVal:str) -> None:
        return self._intf.set_property(IAgVAJacchia_1960._metadata, IAgVAJacchia_1960._set_DragModelPluginName_metadata, pVal)

    _get_DragModelPlugin_metadata = { "name" : "DragModelPlugin",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def DragModelPlugin(self) -> "IAgVADragModelPlugin":
        """Drag model plugin properties."""
        return self._intf.get_property(IAgVAJacchia_1960._metadata, IAgVAJacchia_1960._get_DragModelPlugin_metadata)

    _get_VariableAreaHistoryFile_metadata = { "name" : "VariableAreaHistoryFile",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def VariableAreaHistoryFile(self) -> str:
        """Drag variable area history file."""
        return self._intf.get_property(IAgVAJacchia_1960._metadata, IAgVAJacchia_1960._get_VariableAreaHistoryFile_metadata)

    _set_VariableAreaHistoryFile_metadata = { "name" : "VariableAreaHistoryFile",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @VariableAreaHistoryFile.setter
    def VariableAreaHistoryFile(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAJacchia_1960._metadata, IAgVAJacchia_1960._set_VariableAreaHistoryFile_metadata, inVal)

    _get_NPlateDefinitionFile_metadata = { "name" : "NPlateDefinitionFile",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def NPlateDefinitionFile(self) -> str:
        """Drag N-Plate definition file."""
        return self._intf.get_property(IAgVAJacchia_1960._metadata, IAgVAJacchia_1960._get_NPlateDefinitionFile_metadata)

    _set_NPlateDefinitionFile_metadata = { "name" : "NPlateDefinitionFile",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @NPlateDefinitionFile.setter
    def NPlateDefinitionFile(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAJacchia_1960._metadata, IAgVAJacchia_1960._set_NPlateDefinitionFile_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{B32376D4-28EE-4D16-820F-A3A553103168}", IAgVAJacchia_1960)
agcls.AgTypeNameMap["IAgVAJacchia_1960"] = IAgVAJacchia_1960

class IAgVAJacchia_1970(object):
    """Properties for the Jacchia 1970 atmospheric model - a model that computes atmospheric density based on the composition of the atmosphere, which depends on altitude as well as seasonal variation. Valid range is 100-2500 km."""
    _num_methods = 29
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{7308B6EE-F3DF-4B83-A9FB-F750AAE436F5}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_UseApproximateAltitude" : 1,
                             "set_UseApproximateAltitude" : 2,
                             "get_ComputesTemperature" : 3,
                             "get_ComputesPressure" : 4,
                             "get_SunPosition" : 5,
                             "set_SunPosition" : 6,
                             "get_AtmosDataSource" : 7,
                             "set_AtmosDataSource" : 8,
                             "get_F10p7" : 9,
                             "set_F10p7" : 10,
                             "get_F10p7Avg" : 11,
                             "set_F10p7Avg" : 12,
                             "get_Kp" : 13,
                             "set_Kp" : 14,
                             "get_AtmosDataGeoMagneticFluxSource" : 15,
                             "set_AtmosDataGeoMagneticFluxSource" : 16,
                             "get_AtmosDataGeoMagneticFluxUpdateRate" : 17,
                             "set_AtmosDataGeoMagneticFluxUpdateRate" : 18,
                             "get_AtmosDataFilename" : 19,
                             "set_AtmosDataFilename" : 20,
                             "get_DragModelType" : 21,
                             "set_DragModelType" : 22,
                             "get_DragModelPluginName" : 23,
                             "set_DragModelPluginName" : 24,
                             "get_DragModelPlugin" : 25,
                             "get_VariableAreaHistoryFile" : 26,
                             "set_VariableAreaHistoryFile" : 27,
                             "get_NPlateDefinitionFile" : 28,
                             "set_NPlateDefinitionFile" : 29, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAJacchia_1970._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAJacchia_1970 from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAJacchia_1970.__dict__ and type(IAgVAJacchia_1970.__dict__[attrname]) == property:
            return IAgVAJacchia_1970.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAJacchia_1970.")
    
    _get_UseApproximateAltitude_metadata = { "name" : "UseApproximateAltitude",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def UseApproximateAltitude(self) -> bool:
        """True if using approximate altitude formula."""
        return self._intf.get_property(IAgVAJacchia_1970._metadata, IAgVAJacchia_1970._get_UseApproximateAltitude_metadata)

    _set_UseApproximateAltitude_metadata = { "name" : "UseApproximateAltitude",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @UseApproximateAltitude.setter
    def UseApproximateAltitude(self, inVal:bool) -> None:
        return self._intf.set_property(IAgVAJacchia_1970._metadata, IAgVAJacchia_1970._set_UseApproximateAltitude_metadata, inVal)

    _get_ComputesTemperature_metadata = { "name" : "ComputesTemperature",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def ComputesTemperature(self) -> bool:
        """Flag indicates whether this model computes temperature."""
        return self._intf.get_property(IAgVAJacchia_1970._metadata, IAgVAJacchia_1970._get_ComputesTemperature_metadata)

    _get_ComputesPressure_metadata = { "name" : "ComputesPressure",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def ComputesPressure(self) -> bool:
        """Flag indicates whether this model computes pressure."""
        return self._intf.get_property(IAgVAJacchia_1970._metadata, IAgVAJacchia_1970._get_ComputesPressure_metadata)

    _get_SunPosition_metadata = { "name" : "SunPosition",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVASunPosition),) }
    @property
    def SunPosition(self) -> "AgEVASunPosition":
        """The sun position computation."""
        return self._intf.get_property(IAgVAJacchia_1970._metadata, IAgVAJacchia_1970._get_SunPosition_metadata)

    _set_SunPosition_metadata = { "name" : "SunPosition",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVASunPosition),) }
    @SunPosition.setter
    def SunPosition(self, inVal:"AgEVASunPosition") -> None:
        return self._intf.set_property(IAgVAJacchia_1970._metadata, IAgVAJacchia_1970._set_SunPosition_metadata, inVal)

    _get_AtmosDataSource_metadata = { "name" : "AtmosDataSource",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAAtmosDataSource),) }
    @property
    def AtmosDataSource(self) -> "AgEVAAtmosDataSource":
        """The atmospheric model data source - data file or constant values."""
        return self._intf.get_property(IAgVAJacchia_1970._metadata, IAgVAJacchia_1970._get_AtmosDataSource_metadata)

    _set_AtmosDataSource_metadata = { "name" : "AtmosDataSource",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAAtmosDataSource),) }
    @AtmosDataSource.setter
    def AtmosDataSource(self, inVal:"AgEVAAtmosDataSource") -> None:
        return self._intf.set_property(IAgVAJacchia_1970._metadata, IAgVAJacchia_1970._set_AtmosDataSource_metadata, inVal)

    _get_F10p7_metadata = { "name" : "F10p7",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def F10p7(self) -> float:
        """Solar Flux (F10.7); the daily Ottawa 10.7 cm solar flux value. Dimensionless."""
        return self._intf.get_property(IAgVAJacchia_1970._metadata, IAgVAJacchia_1970._get_F10p7_metadata)

    _set_F10p7_metadata = { "name" : "F10p7",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @F10p7.setter
    def F10p7(self, inVal:float) -> None:
        return self._intf.set_property(IAgVAJacchia_1970._metadata, IAgVAJacchia_1970._set_F10p7_metadata, inVal)

    _get_F10p7Avg_metadata = { "name" : "F10p7Avg",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def F10p7Avg(self) -> float:
        """Average solar Flux (F10.7); the 81-day averaged Ottawa 10.7 cm solar flux value. Dimensionless."""
        return self._intf.get_property(IAgVAJacchia_1970._metadata, IAgVAJacchia_1970._get_F10p7Avg_metadata)

    _set_F10p7Avg_metadata = { "name" : "F10p7Avg",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @F10p7Avg.setter
    def F10p7Avg(self, inVal:float) -> None:
        return self._intf.set_property(IAgVAJacchia_1970._metadata, IAgVAJacchia_1970._set_F10p7Avg_metadata, inVal)

    _get_Kp_metadata = { "name" : "Kp",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def Kp(self) -> float:
        """Geomagnetic Index (Kp). Dimensionless."""
        return self._intf.get_property(IAgVAJacchia_1970._metadata, IAgVAJacchia_1970._get_Kp_metadata)

    _set_Kp_metadata = { "name" : "Kp",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @Kp.setter
    def Kp(self, inVal:float) -> None:
        return self._intf.set_property(IAgVAJacchia_1970._metadata, IAgVAJacchia_1970._set_Kp_metadata, inVal)

    _get_AtmosDataGeoMagneticFluxSource_metadata = { "name" : "AtmosDataGeoMagneticFluxSource",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAGeoMagneticFluxSource),) }
    @property
    def AtmosDataGeoMagneticFluxSource(self) -> "AgEVAGeoMagneticFluxSource":
        """Whether to use Kp or Ap data from the flux file"""
        return self._intf.get_property(IAgVAJacchia_1970._metadata, IAgVAJacchia_1970._get_AtmosDataGeoMagneticFluxSource_metadata)

    _set_AtmosDataGeoMagneticFluxSource_metadata = { "name" : "AtmosDataGeoMagneticFluxSource",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAGeoMagneticFluxSource),) }
    @AtmosDataGeoMagneticFluxSource.setter
    def AtmosDataGeoMagneticFluxSource(self, inVal:"AgEVAGeoMagneticFluxSource") -> None:
        return self._intf.set_property(IAgVAJacchia_1970._metadata, IAgVAJacchia_1970._set_AtmosDataGeoMagneticFluxSource_metadata, inVal)

    _get_AtmosDataGeoMagneticFluxUpdateRate_metadata = { "name" : "AtmosDataGeoMagneticFluxUpdateRate",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAGeoMagneticFluxUpdateRate),) }
    @property
    def AtmosDataGeoMagneticFluxUpdateRate(self) -> "AgEVAGeoMagneticFluxUpdateRate":
        """The update rate for geomagnetic flux values from the flux file."""
        return self._intf.get_property(IAgVAJacchia_1970._metadata, IAgVAJacchia_1970._get_AtmosDataGeoMagneticFluxUpdateRate_metadata)

    _set_AtmosDataGeoMagneticFluxUpdateRate_metadata = { "name" : "AtmosDataGeoMagneticFluxUpdateRate",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAGeoMagneticFluxUpdateRate),) }
    @AtmosDataGeoMagneticFluxUpdateRate.setter
    def AtmosDataGeoMagneticFluxUpdateRate(self, inVal:"AgEVAGeoMagneticFluxUpdateRate") -> None:
        return self._intf.set_property(IAgVAJacchia_1970._metadata, IAgVAJacchia_1970._set_AtmosDataGeoMagneticFluxUpdateRate_metadata, inVal)

    _get_AtmosDataFilename_metadata = { "name" : "AtmosDataFilename",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def AtmosDataFilename(self) -> str:
        """The atmospheric model data file path."""
        return self._intf.get_property(IAgVAJacchia_1970._metadata, IAgVAJacchia_1970._get_AtmosDataFilename_metadata)

    _set_AtmosDataFilename_metadata = { "name" : "AtmosDataFilename",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @AtmosDataFilename.setter
    def AtmosDataFilename(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAJacchia_1970._metadata, IAgVAJacchia_1970._set_AtmosDataFilename_metadata, inVal)

    _get_DragModelType_metadata = { "name" : "DragModelType",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVADragModelType),) }
    @property
    def DragModelType(self) -> "AgEVADragModelType":
        """Drag model type."""
        return self._intf.get_property(IAgVAJacchia_1970._metadata, IAgVAJacchia_1970._get_DragModelType_metadata)

    _set_DragModelType_metadata = { "name" : "DragModelType",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVADragModelType),) }
    @DragModelType.setter
    def DragModelType(self, inVal:"AgEVADragModelType") -> None:
        return self._intf.set_property(IAgVAJacchia_1970._metadata, IAgVAJacchia_1970._set_DragModelType_metadata, inVal)

    _get_DragModelPluginName_metadata = { "name" : "DragModelPluginName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def DragModelPluginName(self) -> str:
        """The name of the drag model plugin."""
        return self._intf.get_property(IAgVAJacchia_1970._metadata, IAgVAJacchia_1970._get_DragModelPluginName_metadata)

    _set_DragModelPluginName_metadata = { "name" : "DragModelPluginName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @DragModelPluginName.setter
    def DragModelPluginName(self, pVal:str) -> None:
        return self._intf.set_property(IAgVAJacchia_1970._metadata, IAgVAJacchia_1970._set_DragModelPluginName_metadata, pVal)

    _get_DragModelPlugin_metadata = { "name" : "DragModelPlugin",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def DragModelPlugin(self) -> "IAgVADragModelPlugin":
        """Drag model plugin properties."""
        return self._intf.get_property(IAgVAJacchia_1970._metadata, IAgVAJacchia_1970._get_DragModelPlugin_metadata)

    _get_VariableAreaHistoryFile_metadata = { "name" : "VariableAreaHistoryFile",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def VariableAreaHistoryFile(self) -> str:
        """Drag variable area history file."""
        return self._intf.get_property(IAgVAJacchia_1970._metadata, IAgVAJacchia_1970._get_VariableAreaHistoryFile_metadata)

    _set_VariableAreaHistoryFile_metadata = { "name" : "VariableAreaHistoryFile",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @VariableAreaHistoryFile.setter
    def VariableAreaHistoryFile(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAJacchia_1970._metadata, IAgVAJacchia_1970._set_VariableAreaHistoryFile_metadata, inVal)

    _get_NPlateDefinitionFile_metadata = { "name" : "NPlateDefinitionFile",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def NPlateDefinitionFile(self) -> str:
        """Drag N-Plate definition file."""
        return self._intf.get_property(IAgVAJacchia_1970._metadata, IAgVAJacchia_1970._get_NPlateDefinitionFile_metadata)

    _set_NPlateDefinitionFile_metadata = { "name" : "NPlateDefinitionFile",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @NPlateDefinitionFile.setter
    def NPlateDefinitionFile(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAJacchia_1970._metadata, IAgVAJacchia_1970._set_NPlateDefinitionFile_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{7308B6EE-F3DF-4B83-A9FB-F750AAE436F5}", IAgVAJacchia_1970)
agcls.AgTypeNameMap["IAgVAJacchia_1970"] = IAgVAJacchia_1970

class IAgVAJacchia_1971(object):
    """Properties for the Jacchia 1971 atmospheric model - a model that is similar to Jacchia 1970, with improved treatment of certain solar effects."""
    _num_methods = 29
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{36089BD6-3BB0-4B0F-B8D8-81F6492E3309}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_UseApproximateAltitude" : 1,
                             "set_UseApproximateAltitude" : 2,
                             "get_ComputesTemperature" : 3,
                             "get_ComputesPressure" : 4,
                             "get_SunPosition" : 5,
                             "set_SunPosition" : 6,
                             "get_AtmosDataSource" : 7,
                             "set_AtmosDataSource" : 8,
                             "get_F10p7" : 9,
                             "set_F10p7" : 10,
                             "get_F10p7Avg" : 11,
                             "set_F10p7Avg" : 12,
                             "get_Kp" : 13,
                             "set_Kp" : 14,
                             "get_AtmosDataGeoMagneticFluxSource" : 15,
                             "set_AtmosDataGeoMagneticFluxSource" : 16,
                             "get_AtmosDataGeoMagneticFluxUpdateRate" : 17,
                             "set_AtmosDataGeoMagneticFluxUpdateRate" : 18,
                             "get_AtmosDataFilename" : 19,
                             "set_AtmosDataFilename" : 20,
                             "get_DragModelType" : 21,
                             "set_DragModelType" : 22,
                             "get_DragModelPluginName" : 23,
                             "set_DragModelPluginName" : 24,
                             "get_DragModelPlugin" : 25,
                             "get_VariableAreaHistoryFile" : 26,
                             "set_VariableAreaHistoryFile" : 27,
                             "get_NPlateDefinitionFile" : 28,
                             "set_NPlateDefinitionFile" : 29, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAJacchia_1971._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAJacchia_1971 from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAJacchia_1971.__dict__ and type(IAgVAJacchia_1971.__dict__[attrname]) == property:
            return IAgVAJacchia_1971.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAJacchia_1971.")
    
    _get_UseApproximateAltitude_metadata = { "name" : "UseApproximateAltitude",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def UseApproximateAltitude(self) -> bool:
        """True if using approximate altitude formula."""
        return self._intf.get_property(IAgVAJacchia_1971._metadata, IAgVAJacchia_1971._get_UseApproximateAltitude_metadata)

    _set_UseApproximateAltitude_metadata = { "name" : "UseApproximateAltitude",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @UseApproximateAltitude.setter
    def UseApproximateAltitude(self, inVal:bool) -> None:
        return self._intf.set_property(IAgVAJacchia_1971._metadata, IAgVAJacchia_1971._set_UseApproximateAltitude_metadata, inVal)

    _get_ComputesTemperature_metadata = { "name" : "ComputesTemperature",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def ComputesTemperature(self) -> bool:
        """Flag indicates whether this model computes temperature."""
        return self._intf.get_property(IAgVAJacchia_1971._metadata, IAgVAJacchia_1971._get_ComputesTemperature_metadata)

    _get_ComputesPressure_metadata = { "name" : "ComputesPressure",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def ComputesPressure(self) -> bool:
        """Flag indicates whether this model computes pressure."""
        return self._intf.get_property(IAgVAJacchia_1971._metadata, IAgVAJacchia_1971._get_ComputesPressure_metadata)

    _get_SunPosition_metadata = { "name" : "SunPosition",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVASunPosition),) }
    @property
    def SunPosition(self) -> "AgEVASunPosition":
        """The sun position computation."""
        return self._intf.get_property(IAgVAJacchia_1971._metadata, IAgVAJacchia_1971._get_SunPosition_metadata)

    _set_SunPosition_metadata = { "name" : "SunPosition",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVASunPosition),) }
    @SunPosition.setter
    def SunPosition(self, inVal:"AgEVASunPosition") -> None:
        return self._intf.set_property(IAgVAJacchia_1971._metadata, IAgVAJacchia_1971._set_SunPosition_metadata, inVal)

    _get_AtmosDataSource_metadata = { "name" : "AtmosDataSource",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAAtmosDataSource),) }
    @property
    def AtmosDataSource(self) -> "AgEVAAtmosDataSource":
        """The atmospheric model data source - data file or constant values."""
        return self._intf.get_property(IAgVAJacchia_1971._metadata, IAgVAJacchia_1971._get_AtmosDataSource_metadata)

    _set_AtmosDataSource_metadata = { "name" : "AtmosDataSource",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAAtmosDataSource),) }
    @AtmosDataSource.setter
    def AtmosDataSource(self, inVal:"AgEVAAtmosDataSource") -> None:
        return self._intf.set_property(IAgVAJacchia_1971._metadata, IAgVAJacchia_1971._set_AtmosDataSource_metadata, inVal)

    _get_F10p7_metadata = { "name" : "F10p7",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def F10p7(self) -> float:
        """Solar Flux (F10.7); the daily Ottawa 10.7 cm solar flux value. Dimensionless."""
        return self._intf.get_property(IAgVAJacchia_1971._metadata, IAgVAJacchia_1971._get_F10p7_metadata)

    _set_F10p7_metadata = { "name" : "F10p7",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @F10p7.setter
    def F10p7(self, inVal:float) -> None:
        return self._intf.set_property(IAgVAJacchia_1971._metadata, IAgVAJacchia_1971._set_F10p7_metadata, inVal)

    _get_F10p7Avg_metadata = { "name" : "F10p7Avg",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def F10p7Avg(self) -> float:
        """Average solar Flux (F10.7); the 81-day averaged Ottawa 10.7 cm solar flux value. Dimensionless."""
        return self._intf.get_property(IAgVAJacchia_1971._metadata, IAgVAJacchia_1971._get_F10p7Avg_metadata)

    _set_F10p7Avg_metadata = { "name" : "F10p7Avg",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @F10p7Avg.setter
    def F10p7Avg(self, inVal:float) -> None:
        return self._intf.set_property(IAgVAJacchia_1971._metadata, IAgVAJacchia_1971._set_F10p7Avg_metadata, inVal)

    _get_Kp_metadata = { "name" : "Kp",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def Kp(self) -> float:
        """Geomagnetic Index (Kp). Dimensionless."""
        return self._intf.get_property(IAgVAJacchia_1971._metadata, IAgVAJacchia_1971._get_Kp_metadata)

    _set_Kp_metadata = { "name" : "Kp",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @Kp.setter
    def Kp(self, inVal:float) -> None:
        return self._intf.set_property(IAgVAJacchia_1971._metadata, IAgVAJacchia_1971._set_Kp_metadata, inVal)

    _get_AtmosDataGeoMagneticFluxSource_metadata = { "name" : "AtmosDataGeoMagneticFluxSource",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAGeoMagneticFluxSource),) }
    @property
    def AtmosDataGeoMagneticFluxSource(self) -> "AgEVAGeoMagneticFluxSource":
        """Whether to use Kp or Ap data from the flux file."""
        return self._intf.get_property(IAgVAJacchia_1971._metadata, IAgVAJacchia_1971._get_AtmosDataGeoMagneticFluxSource_metadata)

    _set_AtmosDataGeoMagneticFluxSource_metadata = { "name" : "AtmosDataGeoMagneticFluxSource",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAGeoMagneticFluxSource),) }
    @AtmosDataGeoMagneticFluxSource.setter
    def AtmosDataGeoMagneticFluxSource(self, inVal:"AgEVAGeoMagneticFluxSource") -> None:
        return self._intf.set_property(IAgVAJacchia_1971._metadata, IAgVAJacchia_1971._set_AtmosDataGeoMagneticFluxSource_metadata, inVal)

    _get_AtmosDataGeoMagneticFluxUpdateRate_metadata = { "name" : "AtmosDataGeoMagneticFluxUpdateRate",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAGeoMagneticFluxUpdateRate),) }
    @property
    def AtmosDataGeoMagneticFluxUpdateRate(self) -> "AgEVAGeoMagneticFluxUpdateRate":
        """The update rate for geomagnetic flux values from the flux file."""
        return self._intf.get_property(IAgVAJacchia_1971._metadata, IAgVAJacchia_1971._get_AtmosDataGeoMagneticFluxUpdateRate_metadata)

    _set_AtmosDataGeoMagneticFluxUpdateRate_metadata = { "name" : "AtmosDataGeoMagneticFluxUpdateRate",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAGeoMagneticFluxUpdateRate),) }
    @AtmosDataGeoMagneticFluxUpdateRate.setter
    def AtmosDataGeoMagneticFluxUpdateRate(self, inVal:"AgEVAGeoMagneticFluxUpdateRate") -> None:
        return self._intf.set_property(IAgVAJacchia_1971._metadata, IAgVAJacchia_1971._set_AtmosDataGeoMagneticFluxUpdateRate_metadata, inVal)

    _get_AtmosDataFilename_metadata = { "name" : "AtmosDataFilename",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def AtmosDataFilename(self) -> str:
        """The atmospheric model data file path."""
        return self._intf.get_property(IAgVAJacchia_1971._metadata, IAgVAJacchia_1971._get_AtmosDataFilename_metadata)

    _set_AtmosDataFilename_metadata = { "name" : "AtmosDataFilename",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @AtmosDataFilename.setter
    def AtmosDataFilename(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAJacchia_1971._metadata, IAgVAJacchia_1971._set_AtmosDataFilename_metadata, inVal)

    _get_DragModelType_metadata = { "name" : "DragModelType",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVADragModelType),) }
    @property
    def DragModelType(self) -> "AgEVADragModelType":
        """Drag model type."""
        return self._intf.get_property(IAgVAJacchia_1971._metadata, IAgVAJacchia_1971._get_DragModelType_metadata)

    _set_DragModelType_metadata = { "name" : "DragModelType",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVADragModelType),) }
    @DragModelType.setter
    def DragModelType(self, inVal:"AgEVADragModelType") -> None:
        return self._intf.set_property(IAgVAJacchia_1971._metadata, IAgVAJacchia_1971._set_DragModelType_metadata, inVal)

    _get_DragModelPluginName_metadata = { "name" : "DragModelPluginName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def DragModelPluginName(self) -> str:
        """The name of the drag model plugin."""
        return self._intf.get_property(IAgVAJacchia_1971._metadata, IAgVAJacchia_1971._get_DragModelPluginName_metadata)

    _set_DragModelPluginName_metadata = { "name" : "DragModelPluginName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @DragModelPluginName.setter
    def DragModelPluginName(self, pVal:str) -> None:
        return self._intf.set_property(IAgVAJacchia_1971._metadata, IAgVAJacchia_1971._set_DragModelPluginName_metadata, pVal)

    _get_DragModelPlugin_metadata = { "name" : "DragModelPlugin",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def DragModelPlugin(self) -> "IAgVADragModelPlugin":
        """Drag model plugin properties."""
        return self._intf.get_property(IAgVAJacchia_1971._metadata, IAgVAJacchia_1971._get_DragModelPlugin_metadata)

    _get_VariableAreaHistoryFile_metadata = { "name" : "VariableAreaHistoryFile",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def VariableAreaHistoryFile(self) -> str:
        """Drag variable area history file."""
        return self._intf.get_property(IAgVAJacchia_1971._metadata, IAgVAJacchia_1971._get_VariableAreaHistoryFile_metadata)

    _set_VariableAreaHistoryFile_metadata = { "name" : "VariableAreaHistoryFile",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @VariableAreaHistoryFile.setter
    def VariableAreaHistoryFile(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAJacchia_1971._metadata, IAgVAJacchia_1971._set_VariableAreaHistoryFile_metadata, inVal)

    _get_NPlateDefinitionFile_metadata = { "name" : "NPlateDefinitionFile",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def NPlateDefinitionFile(self) -> str:
        """Drag N-Plate definition file."""
        return self._intf.get_property(IAgVAJacchia_1971._metadata, IAgVAJacchia_1971._get_NPlateDefinitionFile_metadata)

    _set_NPlateDefinitionFile_metadata = { "name" : "NPlateDefinitionFile",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @NPlateDefinitionFile.setter
    def NPlateDefinitionFile(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAJacchia_1971._metadata, IAgVAJacchia_1971._set_NPlateDefinitionFile_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{36089BD6-3BB0-4B0F-B8D8-81F6492E3309}", IAgVAJacchia_1971)
agcls.AgTypeNameMap["IAgVAJacchia_1971"] = IAgVAJacchia_1971

class IAgVAMSISE_1990(object):
    """Properties for the MSISE 1990 atmospheric model - an empirical density model developed by Hedin based on satellite data. Finds the total density by accounting for the contribution of N2, O, O2, He, Ar and H. 1990 version, valid range of 0-1000 km."""
    _num_methods = 29
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{C6AE62A3-103D-4E39-9F25-6AD5CCFF9530}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_UseApproximateAltitude" : 1,
                             "set_UseApproximateAltitude" : 2,
                             "get_ComputesTemperature" : 3,
                             "get_ComputesPressure" : 4,
                             "get_SunPosition" : 5,
                             "set_SunPosition" : 6,
                             "get_AtmosDataSource" : 7,
                             "set_AtmosDataSource" : 8,
                             "get_F10p7" : 9,
                             "set_F10p7" : 10,
                             "get_F10p7Avg" : 11,
                             "set_F10p7Avg" : 12,
                             "get_Kp" : 13,
                             "set_Kp" : 14,
                             "get_AtmosDataGeoMagneticFluxSource" : 15,
                             "set_AtmosDataGeoMagneticFluxSource" : 16,
                             "get_AtmosDataGeoMagneticFluxUpdateRate" : 17,
                             "set_AtmosDataGeoMagneticFluxUpdateRate" : 18,
                             "get_AtmosDataFilename" : 19,
                             "set_AtmosDataFilename" : 20,
                             "get_DragModelType" : 21,
                             "set_DragModelType" : 22,
                             "get_DragModelPluginName" : 23,
                             "set_DragModelPluginName" : 24,
                             "get_DragModelPlugin" : 25,
                             "get_VariableAreaHistoryFile" : 26,
                             "set_VariableAreaHistoryFile" : 27,
                             "get_NPlateDefinitionFile" : 28,
                             "set_NPlateDefinitionFile" : 29, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAMSISE_1990._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAMSISE_1990 from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAMSISE_1990.__dict__ and type(IAgVAMSISE_1990.__dict__[attrname]) == property:
            return IAgVAMSISE_1990.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAMSISE_1990.")
    
    _get_UseApproximateAltitude_metadata = { "name" : "UseApproximateAltitude",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def UseApproximateAltitude(self) -> bool:
        """True if using approximate altitude formula."""
        return self._intf.get_property(IAgVAMSISE_1990._metadata, IAgVAMSISE_1990._get_UseApproximateAltitude_metadata)

    _set_UseApproximateAltitude_metadata = { "name" : "UseApproximateAltitude",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @UseApproximateAltitude.setter
    def UseApproximateAltitude(self, inVal:bool) -> None:
        return self._intf.set_property(IAgVAMSISE_1990._metadata, IAgVAMSISE_1990._set_UseApproximateAltitude_metadata, inVal)

    _get_ComputesTemperature_metadata = { "name" : "ComputesTemperature",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def ComputesTemperature(self) -> bool:
        """Flag indicates whether this model computes temperature."""
        return self._intf.get_property(IAgVAMSISE_1990._metadata, IAgVAMSISE_1990._get_ComputesTemperature_metadata)

    _get_ComputesPressure_metadata = { "name" : "ComputesPressure",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def ComputesPressure(self) -> bool:
        """Flag indicates whether this model computes pressure."""
        return self._intf.get_property(IAgVAMSISE_1990._metadata, IAgVAMSISE_1990._get_ComputesPressure_metadata)

    _get_SunPosition_metadata = { "name" : "SunPosition",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVASunPosition),) }
    @property
    def SunPosition(self) -> "AgEVASunPosition":
        """The sun position computation."""
        return self._intf.get_property(IAgVAMSISE_1990._metadata, IAgVAMSISE_1990._get_SunPosition_metadata)

    _set_SunPosition_metadata = { "name" : "SunPosition",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVASunPosition),) }
    @SunPosition.setter
    def SunPosition(self, inVal:"AgEVASunPosition") -> None:
        return self._intf.set_property(IAgVAMSISE_1990._metadata, IAgVAMSISE_1990._set_SunPosition_metadata, inVal)

    _get_AtmosDataSource_metadata = { "name" : "AtmosDataSource",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAAtmosDataSource),) }
    @property
    def AtmosDataSource(self) -> "AgEVAAtmosDataSource":
        """The atmospheric model data source - data file or constant values."""
        return self._intf.get_property(IAgVAMSISE_1990._metadata, IAgVAMSISE_1990._get_AtmosDataSource_metadata)

    _set_AtmosDataSource_metadata = { "name" : "AtmosDataSource",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAAtmosDataSource),) }
    @AtmosDataSource.setter
    def AtmosDataSource(self, inVal:"AgEVAAtmosDataSource") -> None:
        return self._intf.set_property(IAgVAMSISE_1990._metadata, IAgVAMSISE_1990._set_AtmosDataSource_metadata, inVal)

    _get_F10p7_metadata = { "name" : "F10p7",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def F10p7(self) -> float:
        """Solar Flux (F10.7); the daily Ottawa 10.7 cm solar flux value. Dimensionless."""
        return self._intf.get_property(IAgVAMSISE_1990._metadata, IAgVAMSISE_1990._get_F10p7_metadata)

    _set_F10p7_metadata = { "name" : "F10p7",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @F10p7.setter
    def F10p7(self, inVal:float) -> None:
        return self._intf.set_property(IAgVAMSISE_1990._metadata, IAgVAMSISE_1990._set_F10p7_metadata, inVal)

    _get_F10p7Avg_metadata = { "name" : "F10p7Avg",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def F10p7Avg(self) -> float:
        """Average solar Flux (F10.7); the 81-day averaged Ottawa 10.7 cm solar flux value. Dimensionless."""
        return self._intf.get_property(IAgVAMSISE_1990._metadata, IAgVAMSISE_1990._get_F10p7Avg_metadata)

    _set_F10p7Avg_metadata = { "name" : "F10p7Avg",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @F10p7Avg.setter
    def F10p7Avg(self, inVal:float) -> None:
        return self._intf.set_property(IAgVAMSISE_1990._metadata, IAgVAMSISE_1990._set_F10p7Avg_metadata, inVal)

    _get_Kp_metadata = { "name" : "Kp",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def Kp(self) -> float:
        """Geomagnetic Index (Kp). Dimensionless."""
        return self._intf.get_property(IAgVAMSISE_1990._metadata, IAgVAMSISE_1990._get_Kp_metadata)

    _set_Kp_metadata = { "name" : "Kp",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @Kp.setter
    def Kp(self, inVal:float) -> None:
        return self._intf.set_property(IAgVAMSISE_1990._metadata, IAgVAMSISE_1990._set_Kp_metadata, inVal)

    _get_AtmosDataGeoMagneticFluxSource_metadata = { "name" : "AtmosDataGeoMagneticFluxSource",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAGeoMagneticFluxSource),) }
    @property
    def AtmosDataGeoMagneticFluxSource(self) -> "AgEVAGeoMagneticFluxSource":
        """Whether to use Kp or Ap data from the flux file."""
        return self._intf.get_property(IAgVAMSISE_1990._metadata, IAgVAMSISE_1990._get_AtmosDataGeoMagneticFluxSource_metadata)

    _set_AtmosDataGeoMagneticFluxSource_metadata = { "name" : "AtmosDataGeoMagneticFluxSource",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAGeoMagneticFluxSource),) }
    @AtmosDataGeoMagneticFluxSource.setter
    def AtmosDataGeoMagneticFluxSource(self, inVal:"AgEVAGeoMagneticFluxSource") -> None:
        return self._intf.set_property(IAgVAMSISE_1990._metadata, IAgVAMSISE_1990._set_AtmosDataGeoMagneticFluxSource_metadata, inVal)

    _get_AtmosDataGeoMagneticFluxUpdateRate_metadata = { "name" : "AtmosDataGeoMagneticFluxUpdateRate",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAGeoMagneticFluxUpdateRate),) }
    @property
    def AtmosDataGeoMagneticFluxUpdateRate(self) -> "AgEVAGeoMagneticFluxUpdateRate":
        """The update rate for geomagnetic flux values from the flux file."""
        return self._intf.get_property(IAgVAMSISE_1990._metadata, IAgVAMSISE_1990._get_AtmosDataGeoMagneticFluxUpdateRate_metadata)

    _set_AtmosDataGeoMagneticFluxUpdateRate_metadata = { "name" : "AtmosDataGeoMagneticFluxUpdateRate",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAGeoMagneticFluxUpdateRate),) }
    @AtmosDataGeoMagneticFluxUpdateRate.setter
    def AtmosDataGeoMagneticFluxUpdateRate(self, inVal:"AgEVAGeoMagneticFluxUpdateRate") -> None:
        return self._intf.set_property(IAgVAMSISE_1990._metadata, IAgVAMSISE_1990._set_AtmosDataGeoMagneticFluxUpdateRate_metadata, inVal)

    _get_AtmosDataFilename_metadata = { "name" : "AtmosDataFilename",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def AtmosDataFilename(self) -> str:
        """The atmospheric model data file path."""
        return self._intf.get_property(IAgVAMSISE_1990._metadata, IAgVAMSISE_1990._get_AtmosDataFilename_metadata)

    _set_AtmosDataFilename_metadata = { "name" : "AtmosDataFilename",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @AtmosDataFilename.setter
    def AtmosDataFilename(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAMSISE_1990._metadata, IAgVAMSISE_1990._set_AtmosDataFilename_metadata, inVal)

    _get_DragModelType_metadata = { "name" : "DragModelType",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVADragModelType),) }
    @property
    def DragModelType(self) -> "AgEVADragModelType":
        """Drag model type."""
        return self._intf.get_property(IAgVAMSISE_1990._metadata, IAgVAMSISE_1990._get_DragModelType_metadata)

    _set_DragModelType_metadata = { "name" : "DragModelType",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVADragModelType),) }
    @DragModelType.setter
    def DragModelType(self, inVal:"AgEVADragModelType") -> None:
        return self._intf.set_property(IAgVAMSISE_1990._metadata, IAgVAMSISE_1990._set_DragModelType_metadata, inVal)

    _get_DragModelPluginName_metadata = { "name" : "DragModelPluginName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def DragModelPluginName(self) -> str:
        """The name of the drag model plugin."""
        return self._intf.get_property(IAgVAMSISE_1990._metadata, IAgVAMSISE_1990._get_DragModelPluginName_metadata)

    _set_DragModelPluginName_metadata = { "name" : "DragModelPluginName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @DragModelPluginName.setter
    def DragModelPluginName(self, pVal:str) -> None:
        return self._intf.set_property(IAgVAMSISE_1990._metadata, IAgVAMSISE_1990._set_DragModelPluginName_metadata, pVal)

    _get_DragModelPlugin_metadata = { "name" : "DragModelPlugin",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def DragModelPlugin(self) -> "IAgVADragModelPlugin":
        """Drag model plugin properties."""
        return self._intf.get_property(IAgVAMSISE_1990._metadata, IAgVAMSISE_1990._get_DragModelPlugin_metadata)

    _get_VariableAreaHistoryFile_metadata = { "name" : "VariableAreaHistoryFile",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def VariableAreaHistoryFile(self) -> str:
        """Drag variable area history file."""
        return self._intf.get_property(IAgVAMSISE_1990._metadata, IAgVAMSISE_1990._get_VariableAreaHistoryFile_metadata)

    _set_VariableAreaHistoryFile_metadata = { "name" : "VariableAreaHistoryFile",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @VariableAreaHistoryFile.setter
    def VariableAreaHistoryFile(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAMSISE_1990._metadata, IAgVAMSISE_1990._set_VariableAreaHistoryFile_metadata, inVal)

    _get_NPlateDefinitionFile_metadata = { "name" : "NPlateDefinitionFile",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def NPlateDefinitionFile(self) -> str:
        """Drag N-Plate definition file."""
        return self._intf.get_property(IAgVAMSISE_1990._metadata, IAgVAMSISE_1990._get_NPlateDefinitionFile_metadata)

    _set_NPlateDefinitionFile_metadata = { "name" : "NPlateDefinitionFile",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @NPlateDefinitionFile.setter
    def NPlateDefinitionFile(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAMSISE_1990._metadata, IAgVAMSISE_1990._set_NPlateDefinitionFile_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{C6AE62A3-103D-4E39-9F25-6AD5CCFF9530}", IAgVAMSISE_1990)
agcls.AgTypeNameMap["IAgVAMSISE_1990"] = IAgVAMSISE_1990

class IAgVAMSIS_1986(object):
    """Properties for the MSIS 1986 atmospheric model - an empirical density model developed by Hedin based on satellite data. Finds the total density by accounting for the contribution of N2, O, O2, He, Ar and H. 1986 version, valid range of 90-1000 km."""
    _num_methods = 29
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{F7608E83-8539-4B2E-B0DB-F4F1010DDDED}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_UseApproximateAltitude" : 1,
                             "set_UseApproximateAltitude" : 2,
                             "get_ComputesTemperature" : 3,
                             "get_ComputesPressure" : 4,
                             "get_SunPosition" : 5,
                             "set_SunPosition" : 6,
                             "get_AtmosDataSource" : 7,
                             "set_AtmosDataSource" : 8,
                             "get_F10p7" : 9,
                             "set_F10p7" : 10,
                             "get_F10p7Avg" : 11,
                             "set_F10p7Avg" : 12,
                             "get_Kp" : 13,
                             "set_Kp" : 14,
                             "get_AtmosDataGeoMagneticFluxSource" : 15,
                             "set_AtmosDataGeoMagneticFluxSource" : 16,
                             "get_AtmosDataGeoMagneticFluxUpdateRate" : 17,
                             "set_AtmosDataGeoMagneticFluxUpdateRate" : 18,
                             "get_AtmosDataFilename" : 19,
                             "set_AtmosDataFilename" : 20,
                             "get_DragModelType" : 21,
                             "set_DragModelType" : 22,
                             "get_DragModelPluginName" : 23,
                             "set_DragModelPluginName" : 24,
                             "get_DragModelPlugin" : 25,
                             "get_VariableAreaHistoryFile" : 26,
                             "set_VariableAreaHistoryFile" : 27,
                             "get_NPlateDefinitionFile" : 28,
                             "set_NPlateDefinitionFile" : 29, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAMSIS_1986._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAMSIS_1986 from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAMSIS_1986.__dict__ and type(IAgVAMSIS_1986.__dict__[attrname]) == property:
            return IAgVAMSIS_1986.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAMSIS_1986.")
    
    _get_UseApproximateAltitude_metadata = { "name" : "UseApproximateAltitude",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def UseApproximateAltitude(self) -> bool:
        """True if using approximate altitude formula."""
        return self._intf.get_property(IAgVAMSIS_1986._metadata, IAgVAMSIS_1986._get_UseApproximateAltitude_metadata)

    _set_UseApproximateAltitude_metadata = { "name" : "UseApproximateAltitude",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @UseApproximateAltitude.setter
    def UseApproximateAltitude(self, inVal:bool) -> None:
        return self._intf.set_property(IAgVAMSIS_1986._metadata, IAgVAMSIS_1986._set_UseApproximateAltitude_metadata, inVal)

    _get_ComputesTemperature_metadata = { "name" : "ComputesTemperature",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def ComputesTemperature(self) -> bool:
        """Flag indicates whether this model computes temperature."""
        return self._intf.get_property(IAgVAMSIS_1986._metadata, IAgVAMSIS_1986._get_ComputesTemperature_metadata)

    _get_ComputesPressure_metadata = { "name" : "ComputesPressure",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def ComputesPressure(self) -> bool:
        """Flag indicates whether this model computes pressure."""
        return self._intf.get_property(IAgVAMSIS_1986._metadata, IAgVAMSIS_1986._get_ComputesPressure_metadata)

    _get_SunPosition_metadata = { "name" : "SunPosition",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVASunPosition),) }
    @property
    def SunPosition(self) -> "AgEVASunPosition":
        """The sun position computation"""
        return self._intf.get_property(IAgVAMSIS_1986._metadata, IAgVAMSIS_1986._get_SunPosition_metadata)

    _set_SunPosition_metadata = { "name" : "SunPosition",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVASunPosition),) }
    @SunPosition.setter
    def SunPosition(self, inVal:"AgEVASunPosition") -> None:
        return self._intf.set_property(IAgVAMSIS_1986._metadata, IAgVAMSIS_1986._set_SunPosition_metadata, inVal)

    _get_AtmosDataSource_metadata = { "name" : "AtmosDataSource",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAAtmosDataSource),) }
    @property
    def AtmosDataSource(self) -> "AgEVAAtmosDataSource":
        """The atmospheric model data source - data file or constant values."""
        return self._intf.get_property(IAgVAMSIS_1986._metadata, IAgVAMSIS_1986._get_AtmosDataSource_metadata)

    _set_AtmosDataSource_metadata = { "name" : "AtmosDataSource",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAAtmosDataSource),) }
    @AtmosDataSource.setter
    def AtmosDataSource(self, inVal:"AgEVAAtmosDataSource") -> None:
        return self._intf.set_property(IAgVAMSIS_1986._metadata, IAgVAMSIS_1986._set_AtmosDataSource_metadata, inVal)

    _get_F10p7_metadata = { "name" : "F10p7",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def F10p7(self) -> float:
        """Solar Flux (F10.7); the daily Ottawa 10.7 cm solar flux value. Dimensionless."""
        return self._intf.get_property(IAgVAMSIS_1986._metadata, IAgVAMSIS_1986._get_F10p7_metadata)

    _set_F10p7_metadata = { "name" : "F10p7",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @F10p7.setter
    def F10p7(self, inVal:float) -> None:
        return self._intf.set_property(IAgVAMSIS_1986._metadata, IAgVAMSIS_1986._set_F10p7_metadata, inVal)

    _get_F10p7Avg_metadata = { "name" : "F10p7Avg",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def F10p7Avg(self) -> float:
        """Average solar Flux (F10.7); the 81-day averaged Ottawa 10.7 cm solar flux value. Dimensionless."""
        return self._intf.get_property(IAgVAMSIS_1986._metadata, IAgVAMSIS_1986._get_F10p7Avg_metadata)

    _set_F10p7Avg_metadata = { "name" : "F10p7Avg",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @F10p7Avg.setter
    def F10p7Avg(self, inVal:float) -> None:
        return self._intf.set_property(IAgVAMSIS_1986._metadata, IAgVAMSIS_1986._set_F10p7Avg_metadata, inVal)

    _get_Kp_metadata = { "name" : "Kp",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def Kp(self) -> float:
        """Geomagnetic Index (Kp). Dimensionless."""
        return self._intf.get_property(IAgVAMSIS_1986._metadata, IAgVAMSIS_1986._get_Kp_metadata)

    _set_Kp_metadata = { "name" : "Kp",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @Kp.setter
    def Kp(self, inVal:float) -> None:
        return self._intf.set_property(IAgVAMSIS_1986._metadata, IAgVAMSIS_1986._set_Kp_metadata, inVal)

    _get_AtmosDataGeoMagneticFluxSource_metadata = { "name" : "AtmosDataGeoMagneticFluxSource",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAGeoMagneticFluxSource),) }
    @property
    def AtmosDataGeoMagneticFluxSource(self) -> "AgEVAGeoMagneticFluxSource":
        """Whether to use Kp or Ap data from the flux file."""
        return self._intf.get_property(IAgVAMSIS_1986._metadata, IAgVAMSIS_1986._get_AtmosDataGeoMagneticFluxSource_metadata)

    _set_AtmosDataGeoMagneticFluxSource_metadata = { "name" : "AtmosDataGeoMagneticFluxSource",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAGeoMagneticFluxSource),) }
    @AtmosDataGeoMagneticFluxSource.setter
    def AtmosDataGeoMagneticFluxSource(self, inVal:"AgEVAGeoMagneticFluxSource") -> None:
        return self._intf.set_property(IAgVAMSIS_1986._metadata, IAgVAMSIS_1986._set_AtmosDataGeoMagneticFluxSource_metadata, inVal)

    _get_AtmosDataGeoMagneticFluxUpdateRate_metadata = { "name" : "AtmosDataGeoMagneticFluxUpdateRate",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAGeoMagneticFluxUpdateRate),) }
    @property
    def AtmosDataGeoMagneticFluxUpdateRate(self) -> "AgEVAGeoMagneticFluxUpdateRate":
        """The update rate for geomagnetic flux values from the flux file."""
        return self._intf.get_property(IAgVAMSIS_1986._metadata, IAgVAMSIS_1986._get_AtmosDataGeoMagneticFluxUpdateRate_metadata)

    _set_AtmosDataGeoMagneticFluxUpdateRate_metadata = { "name" : "AtmosDataGeoMagneticFluxUpdateRate",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAGeoMagneticFluxUpdateRate),) }
    @AtmosDataGeoMagneticFluxUpdateRate.setter
    def AtmosDataGeoMagneticFluxUpdateRate(self, inVal:"AgEVAGeoMagneticFluxUpdateRate") -> None:
        return self._intf.set_property(IAgVAMSIS_1986._metadata, IAgVAMSIS_1986._set_AtmosDataGeoMagneticFluxUpdateRate_metadata, inVal)

    _get_AtmosDataFilename_metadata = { "name" : "AtmosDataFilename",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def AtmosDataFilename(self) -> str:
        """The atmospheric model data file path."""
        return self._intf.get_property(IAgVAMSIS_1986._metadata, IAgVAMSIS_1986._get_AtmosDataFilename_metadata)

    _set_AtmosDataFilename_metadata = { "name" : "AtmosDataFilename",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @AtmosDataFilename.setter
    def AtmosDataFilename(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAMSIS_1986._metadata, IAgVAMSIS_1986._set_AtmosDataFilename_metadata, inVal)

    _get_DragModelType_metadata = { "name" : "DragModelType",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVADragModelType),) }
    @property
    def DragModelType(self) -> "AgEVADragModelType":
        """Drag model type."""
        return self._intf.get_property(IAgVAMSIS_1986._metadata, IAgVAMSIS_1986._get_DragModelType_metadata)

    _set_DragModelType_metadata = { "name" : "DragModelType",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVADragModelType),) }
    @DragModelType.setter
    def DragModelType(self, inVal:"AgEVADragModelType") -> None:
        return self._intf.set_property(IAgVAMSIS_1986._metadata, IAgVAMSIS_1986._set_DragModelType_metadata, inVal)

    _get_DragModelPluginName_metadata = { "name" : "DragModelPluginName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def DragModelPluginName(self) -> str:
        """The name of the drag model plugin."""
        return self._intf.get_property(IAgVAMSIS_1986._metadata, IAgVAMSIS_1986._get_DragModelPluginName_metadata)

    _set_DragModelPluginName_metadata = { "name" : "DragModelPluginName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @DragModelPluginName.setter
    def DragModelPluginName(self, pVal:str) -> None:
        return self._intf.set_property(IAgVAMSIS_1986._metadata, IAgVAMSIS_1986._set_DragModelPluginName_metadata, pVal)

    _get_DragModelPlugin_metadata = { "name" : "DragModelPlugin",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def DragModelPlugin(self) -> "IAgVADragModelPlugin":
        """Drag model plugin properties."""
        return self._intf.get_property(IAgVAMSIS_1986._metadata, IAgVAMSIS_1986._get_DragModelPlugin_metadata)

    _get_VariableAreaHistoryFile_metadata = { "name" : "VariableAreaHistoryFile",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def VariableAreaHistoryFile(self) -> str:
        """Drag variable area history file."""
        return self._intf.get_property(IAgVAMSIS_1986._metadata, IAgVAMSIS_1986._get_VariableAreaHistoryFile_metadata)

    _set_VariableAreaHistoryFile_metadata = { "name" : "VariableAreaHistoryFile",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @VariableAreaHistoryFile.setter
    def VariableAreaHistoryFile(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAMSIS_1986._metadata, IAgVAMSIS_1986._set_VariableAreaHistoryFile_metadata, inVal)

    _get_NPlateDefinitionFile_metadata = { "name" : "NPlateDefinitionFile",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def NPlateDefinitionFile(self) -> str:
        """Drag N-Plate definition file."""
        return self._intf.get_property(IAgVAMSIS_1986._metadata, IAgVAMSIS_1986._get_NPlateDefinitionFile_metadata)

    _set_NPlateDefinitionFile_metadata = { "name" : "NPlateDefinitionFile",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @NPlateDefinitionFile.setter
    def NPlateDefinitionFile(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAMSIS_1986._metadata, IAgVAMSIS_1986._set_NPlateDefinitionFile_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{F7608E83-8539-4B2E-B0DB-F4F1010DDDED}", IAgVAMSIS_1986)
agcls.AgTypeNameMap["IAgVAMSIS_1986"] = IAgVAMSIS_1986

class IAgVANRLMSISE_2000(object):
    """Properties for the NRLMSISE 2000 atmospheric model."""
    _num_methods = 29
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{A2CAC8B0-74EF-4067-9B76-9B2D6938303D}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_UseApproximateAltitude" : 1,
                             "set_UseApproximateAltitude" : 2,
                             "get_ComputesTemperature" : 3,
                             "get_ComputesPressure" : 4,
                             "get_SunPosition" : 5,
                             "set_SunPosition" : 6,
                             "get_AtmosDataSource" : 7,
                             "set_AtmosDataSource" : 8,
                             "get_F10p7" : 9,
                             "set_F10p7" : 10,
                             "get_F10p7Avg" : 11,
                             "set_F10p7Avg" : 12,
                             "get_Kp" : 13,
                             "set_Kp" : 14,
                             "get_AtmosDataGeoMagneticFluxSource" : 15,
                             "set_AtmosDataGeoMagneticFluxSource" : 16,
                             "get_AtmosDataGeoMagneticFluxUpdateRate" : 17,
                             "set_AtmosDataGeoMagneticFluxUpdateRate" : 18,
                             "get_AtmosDataFilename" : 19,
                             "set_AtmosDataFilename" : 20,
                             "get_DragModelType" : 21,
                             "set_DragModelType" : 22,
                             "get_DragModelPluginName" : 23,
                             "set_DragModelPluginName" : 24,
                             "get_DragModelPlugin" : 25,
                             "get_VariableAreaHistoryFile" : 26,
                             "set_VariableAreaHistoryFile" : 27,
                             "get_NPlateDefinitionFile" : 28,
                             "set_NPlateDefinitionFile" : 29, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVANRLMSISE_2000._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVANRLMSISE_2000 from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVANRLMSISE_2000.__dict__ and type(IAgVANRLMSISE_2000.__dict__[attrname]) == property:
            return IAgVANRLMSISE_2000.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVANRLMSISE_2000.")
    
    _get_UseApproximateAltitude_metadata = { "name" : "UseApproximateAltitude",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def UseApproximateAltitude(self) -> bool:
        """True if using approximate altitude formula."""
        return self._intf.get_property(IAgVANRLMSISE_2000._metadata, IAgVANRLMSISE_2000._get_UseApproximateAltitude_metadata)

    _set_UseApproximateAltitude_metadata = { "name" : "UseApproximateAltitude",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @UseApproximateAltitude.setter
    def UseApproximateAltitude(self, inVal:bool) -> None:
        return self._intf.set_property(IAgVANRLMSISE_2000._metadata, IAgVANRLMSISE_2000._set_UseApproximateAltitude_metadata, inVal)

    _get_ComputesTemperature_metadata = { "name" : "ComputesTemperature",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def ComputesTemperature(self) -> bool:
        """Flag indicates whether this model computes temperature."""
        return self._intf.get_property(IAgVANRLMSISE_2000._metadata, IAgVANRLMSISE_2000._get_ComputesTemperature_metadata)

    _get_ComputesPressure_metadata = { "name" : "ComputesPressure",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def ComputesPressure(self) -> bool:
        """Flag indicates whether this model computes pressure."""
        return self._intf.get_property(IAgVANRLMSISE_2000._metadata, IAgVANRLMSISE_2000._get_ComputesPressure_metadata)

    _get_SunPosition_metadata = { "name" : "SunPosition",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVASunPosition),) }
    @property
    def SunPosition(self) -> "AgEVASunPosition":
        """The sun position computation."""
        return self._intf.get_property(IAgVANRLMSISE_2000._metadata, IAgVANRLMSISE_2000._get_SunPosition_metadata)

    _set_SunPosition_metadata = { "name" : "SunPosition",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVASunPosition),) }
    @SunPosition.setter
    def SunPosition(self, inVal:"AgEVASunPosition") -> None:
        return self._intf.set_property(IAgVANRLMSISE_2000._metadata, IAgVANRLMSISE_2000._set_SunPosition_metadata, inVal)

    _get_AtmosDataSource_metadata = { "name" : "AtmosDataSource",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAAtmosDataSource),) }
    @property
    def AtmosDataSource(self) -> "AgEVAAtmosDataSource":
        """The atmospheric model data source - data file or constant values."""
        return self._intf.get_property(IAgVANRLMSISE_2000._metadata, IAgVANRLMSISE_2000._get_AtmosDataSource_metadata)

    _set_AtmosDataSource_metadata = { "name" : "AtmosDataSource",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAAtmosDataSource),) }
    @AtmosDataSource.setter
    def AtmosDataSource(self, inVal:"AgEVAAtmosDataSource") -> None:
        return self._intf.set_property(IAgVANRLMSISE_2000._metadata, IAgVANRLMSISE_2000._set_AtmosDataSource_metadata, inVal)

    _get_F10p7_metadata = { "name" : "F10p7",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def F10p7(self) -> float:
        """Solar Flux (F10.7); the daily Ottawa 10.7 cm solar flux value. Dimensionless."""
        return self._intf.get_property(IAgVANRLMSISE_2000._metadata, IAgVANRLMSISE_2000._get_F10p7_metadata)

    _set_F10p7_metadata = { "name" : "F10p7",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @F10p7.setter
    def F10p7(self, inVal:float) -> None:
        return self._intf.set_property(IAgVANRLMSISE_2000._metadata, IAgVANRLMSISE_2000._set_F10p7_metadata, inVal)

    _get_F10p7Avg_metadata = { "name" : "F10p7Avg",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def F10p7Avg(self) -> float:
        """Average solar Flux (F10.7); the 81-day averaged Ottawa 10.7 cm solar flux value. Dimensionless."""
        return self._intf.get_property(IAgVANRLMSISE_2000._metadata, IAgVANRLMSISE_2000._get_F10p7Avg_metadata)

    _set_F10p7Avg_metadata = { "name" : "F10p7Avg",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @F10p7Avg.setter
    def F10p7Avg(self, inVal:float) -> None:
        return self._intf.set_property(IAgVANRLMSISE_2000._metadata, IAgVANRLMSISE_2000._set_F10p7Avg_metadata, inVal)

    _get_Kp_metadata = { "name" : "Kp",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def Kp(self) -> float:
        """Geomagnetic Index (Kp). Dimensionless."""
        return self._intf.get_property(IAgVANRLMSISE_2000._metadata, IAgVANRLMSISE_2000._get_Kp_metadata)

    _set_Kp_metadata = { "name" : "Kp",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @Kp.setter
    def Kp(self, inVal:float) -> None:
        return self._intf.set_property(IAgVANRLMSISE_2000._metadata, IAgVANRLMSISE_2000._set_Kp_metadata, inVal)

    _get_AtmosDataGeoMagneticFluxSource_metadata = { "name" : "AtmosDataGeoMagneticFluxSource",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAGeoMagneticFluxSource),) }
    @property
    def AtmosDataGeoMagneticFluxSource(self) -> "AgEVAGeoMagneticFluxSource":
        """Whether to use Kp or Ap data from the flux file."""
        return self._intf.get_property(IAgVANRLMSISE_2000._metadata, IAgVANRLMSISE_2000._get_AtmosDataGeoMagneticFluxSource_metadata)

    _set_AtmosDataGeoMagneticFluxSource_metadata = { "name" : "AtmosDataGeoMagneticFluxSource",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAGeoMagneticFluxSource),) }
    @AtmosDataGeoMagneticFluxSource.setter
    def AtmosDataGeoMagneticFluxSource(self, inVal:"AgEVAGeoMagneticFluxSource") -> None:
        return self._intf.set_property(IAgVANRLMSISE_2000._metadata, IAgVANRLMSISE_2000._set_AtmosDataGeoMagneticFluxSource_metadata, inVal)

    _get_AtmosDataGeoMagneticFluxUpdateRate_metadata = { "name" : "AtmosDataGeoMagneticFluxUpdateRate",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAGeoMagneticFluxUpdateRate),) }
    @property
    def AtmosDataGeoMagneticFluxUpdateRate(self) -> "AgEVAGeoMagneticFluxUpdateRate":
        """The update rate for geomagnetic flux values from the flux file."""
        return self._intf.get_property(IAgVANRLMSISE_2000._metadata, IAgVANRLMSISE_2000._get_AtmosDataGeoMagneticFluxUpdateRate_metadata)

    _set_AtmosDataGeoMagneticFluxUpdateRate_metadata = { "name" : "AtmosDataGeoMagneticFluxUpdateRate",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAGeoMagneticFluxUpdateRate),) }
    @AtmosDataGeoMagneticFluxUpdateRate.setter
    def AtmosDataGeoMagneticFluxUpdateRate(self, inVal:"AgEVAGeoMagneticFluxUpdateRate") -> None:
        return self._intf.set_property(IAgVANRLMSISE_2000._metadata, IAgVANRLMSISE_2000._set_AtmosDataGeoMagneticFluxUpdateRate_metadata, inVal)

    _get_AtmosDataFilename_metadata = { "name" : "AtmosDataFilename",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def AtmosDataFilename(self) -> str:
        """The atmospheric model data file path."""
        return self._intf.get_property(IAgVANRLMSISE_2000._metadata, IAgVANRLMSISE_2000._get_AtmosDataFilename_metadata)

    _set_AtmosDataFilename_metadata = { "name" : "AtmosDataFilename",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @AtmosDataFilename.setter
    def AtmosDataFilename(self, inVal:str) -> None:
        return self._intf.set_property(IAgVANRLMSISE_2000._metadata, IAgVANRLMSISE_2000._set_AtmosDataFilename_metadata, inVal)

    _get_DragModelType_metadata = { "name" : "DragModelType",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVADragModelType),) }
    @property
    def DragModelType(self) -> "AgEVADragModelType":
        """Drag model type."""
        return self._intf.get_property(IAgVANRLMSISE_2000._metadata, IAgVANRLMSISE_2000._get_DragModelType_metadata)

    _set_DragModelType_metadata = { "name" : "DragModelType",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVADragModelType),) }
    @DragModelType.setter
    def DragModelType(self, inVal:"AgEVADragModelType") -> None:
        return self._intf.set_property(IAgVANRLMSISE_2000._metadata, IAgVANRLMSISE_2000._set_DragModelType_metadata, inVal)

    _get_DragModelPluginName_metadata = { "name" : "DragModelPluginName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def DragModelPluginName(self) -> str:
        """The name of the drag model plugin."""
        return self._intf.get_property(IAgVANRLMSISE_2000._metadata, IAgVANRLMSISE_2000._get_DragModelPluginName_metadata)

    _set_DragModelPluginName_metadata = { "name" : "DragModelPluginName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @DragModelPluginName.setter
    def DragModelPluginName(self, pVal:str) -> None:
        return self._intf.set_property(IAgVANRLMSISE_2000._metadata, IAgVANRLMSISE_2000._set_DragModelPluginName_metadata, pVal)

    _get_DragModelPlugin_metadata = { "name" : "DragModelPlugin",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def DragModelPlugin(self) -> "IAgVADragModelPlugin":
        """Drag model plugin properties."""
        return self._intf.get_property(IAgVANRLMSISE_2000._metadata, IAgVANRLMSISE_2000._get_DragModelPlugin_metadata)

    _get_VariableAreaHistoryFile_metadata = { "name" : "VariableAreaHistoryFile",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def VariableAreaHistoryFile(self) -> str:
        """Drag variable area history file."""
        return self._intf.get_property(IAgVANRLMSISE_2000._metadata, IAgVANRLMSISE_2000._get_VariableAreaHistoryFile_metadata)

    _set_VariableAreaHistoryFile_metadata = { "name" : "VariableAreaHistoryFile",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @VariableAreaHistoryFile.setter
    def VariableAreaHistoryFile(self, inVal:str) -> None:
        return self._intf.set_property(IAgVANRLMSISE_2000._metadata, IAgVANRLMSISE_2000._set_VariableAreaHistoryFile_metadata, inVal)

    _get_NPlateDefinitionFile_metadata = { "name" : "NPlateDefinitionFile",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def NPlateDefinitionFile(self) -> str:
        """Drag N-Plate definition file."""
        return self._intf.get_property(IAgVANRLMSISE_2000._metadata, IAgVANRLMSISE_2000._get_NPlateDefinitionFile_metadata)

    _set_NPlateDefinitionFile_metadata = { "name" : "NPlateDefinitionFile",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @NPlateDefinitionFile.setter
    def NPlateDefinitionFile(self, inVal:str) -> None:
        return self._intf.set_property(IAgVANRLMSISE_2000._metadata, IAgVANRLMSISE_2000._set_NPlateDefinitionFile_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{A2CAC8B0-74EF-4067-9B76-9B2D6938303D}", IAgVANRLMSISE_2000)
agcls.AgTypeNameMap["IAgVANRLMSISE_2000"] = IAgVANRLMSISE_2000

class IAgVAUS_Standard_Atmosphere(object):
    """Properties for the US Standard Atmosphere atmospheric model."""
    _num_methods = 13
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{C1E85F74-4770-4D1F-B2D9-0AE42AC245EA}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_UseApproximateAltitude" : 1,
                             "set_UseApproximateAltitude" : 2,
                             "get_ComputesTemperature" : 3,
                             "get_ComputesPressure" : 4,
                             "get_DragModelType" : 5,
                             "set_DragModelType" : 6,
                             "get_DragModelPluginName" : 7,
                             "set_DragModelPluginName" : 8,
                             "get_DragModelPlugin" : 9,
                             "get_VariableAreaHistoryFile" : 10,
                             "set_VariableAreaHistoryFile" : 11,
                             "get_NPlateDefinitionFile" : 12,
                             "set_NPlateDefinitionFile" : 13, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAUS_Standard_Atmosphere._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAUS_Standard_Atmosphere from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAUS_Standard_Atmosphere.__dict__ and type(IAgVAUS_Standard_Atmosphere.__dict__[attrname]) == property:
            return IAgVAUS_Standard_Atmosphere.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAUS_Standard_Atmosphere.")
    
    _get_UseApproximateAltitude_metadata = { "name" : "UseApproximateAltitude",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def UseApproximateAltitude(self) -> bool:
        """True if using approximate altitude formula."""
        return self._intf.get_property(IAgVAUS_Standard_Atmosphere._metadata, IAgVAUS_Standard_Atmosphere._get_UseApproximateAltitude_metadata)

    _set_UseApproximateAltitude_metadata = { "name" : "UseApproximateAltitude",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @UseApproximateAltitude.setter
    def UseApproximateAltitude(self, inVal:bool) -> None:
        return self._intf.set_property(IAgVAUS_Standard_Atmosphere._metadata, IAgVAUS_Standard_Atmosphere._set_UseApproximateAltitude_metadata, inVal)

    _get_ComputesTemperature_metadata = { "name" : "ComputesTemperature",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def ComputesTemperature(self) -> bool:
        """Flag indicates whether this model computes temperature."""
        return self._intf.get_property(IAgVAUS_Standard_Atmosphere._metadata, IAgVAUS_Standard_Atmosphere._get_ComputesTemperature_metadata)

    _get_ComputesPressure_metadata = { "name" : "ComputesPressure",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def ComputesPressure(self) -> bool:
        """Flag indicates whether this model computes pressure."""
        return self._intf.get_property(IAgVAUS_Standard_Atmosphere._metadata, IAgVAUS_Standard_Atmosphere._get_ComputesPressure_metadata)

    _get_DragModelType_metadata = { "name" : "DragModelType",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVADragModelType),) }
    @property
    def DragModelType(self) -> "AgEVADragModelType":
        """Drag model type."""
        return self._intf.get_property(IAgVAUS_Standard_Atmosphere._metadata, IAgVAUS_Standard_Atmosphere._get_DragModelType_metadata)

    _set_DragModelType_metadata = { "name" : "DragModelType",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVADragModelType),) }
    @DragModelType.setter
    def DragModelType(self, inVal:"AgEVADragModelType") -> None:
        return self._intf.set_property(IAgVAUS_Standard_Atmosphere._metadata, IAgVAUS_Standard_Atmosphere._set_DragModelType_metadata, inVal)

    _get_DragModelPluginName_metadata = { "name" : "DragModelPluginName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def DragModelPluginName(self) -> str:
        """The name of the drag model plugin."""
        return self._intf.get_property(IAgVAUS_Standard_Atmosphere._metadata, IAgVAUS_Standard_Atmosphere._get_DragModelPluginName_metadata)

    _set_DragModelPluginName_metadata = { "name" : "DragModelPluginName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @DragModelPluginName.setter
    def DragModelPluginName(self, pVal:str) -> None:
        return self._intf.set_property(IAgVAUS_Standard_Atmosphere._metadata, IAgVAUS_Standard_Atmosphere._set_DragModelPluginName_metadata, pVal)

    _get_DragModelPlugin_metadata = { "name" : "DragModelPlugin",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def DragModelPlugin(self) -> "IAgVADragModelPlugin":
        """Drag model plugin properties."""
        return self._intf.get_property(IAgVAUS_Standard_Atmosphere._metadata, IAgVAUS_Standard_Atmosphere._get_DragModelPlugin_metadata)

    _get_VariableAreaHistoryFile_metadata = { "name" : "VariableAreaHistoryFile",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def VariableAreaHistoryFile(self) -> str:
        """Drag variable area history file."""
        return self._intf.get_property(IAgVAUS_Standard_Atmosphere._metadata, IAgVAUS_Standard_Atmosphere._get_VariableAreaHistoryFile_metadata)

    _set_VariableAreaHistoryFile_metadata = { "name" : "VariableAreaHistoryFile",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @VariableAreaHistoryFile.setter
    def VariableAreaHistoryFile(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAUS_Standard_Atmosphere._metadata, IAgVAUS_Standard_Atmosphere._set_VariableAreaHistoryFile_metadata, inVal)

    _get_NPlateDefinitionFile_metadata = { "name" : "NPlateDefinitionFile",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def NPlateDefinitionFile(self) -> str:
        """Drag N-Plate definition file."""
        return self._intf.get_property(IAgVAUS_Standard_Atmosphere._metadata, IAgVAUS_Standard_Atmosphere._get_NPlateDefinitionFile_metadata)

    _set_NPlateDefinitionFile_metadata = { "name" : "NPlateDefinitionFile",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @NPlateDefinitionFile.setter
    def NPlateDefinitionFile(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAUS_Standard_Atmosphere._metadata, IAgVAUS_Standard_Atmosphere._set_NPlateDefinitionFile_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{C1E85F74-4770-4D1F-B2D9-0AE42AC245EA}", IAgVAUS_Standard_Atmosphere)
agcls.AgTypeNameMap["IAgVAUS_Standard_Atmosphere"] = IAgVAUS_Standard_Atmosphere

class IAgVAMarsGRAM37(object):
    """Properties for the Mars-GRAM 3.7 atmospheric model."""
    _num_methods = 27
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{2855777F-3062-4699-AB5D-2FE73D161472}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_UseApproximateAltitude" : 1,
                             "set_UseApproximateAltitude" : 2,
                             "get_ComputesTemperature" : 3,
                             "get_ComputesPressure" : 4,
                             "get_SunPosition" : 5,
                             "set_SunPosition" : 6,
                             "get_DataDirectory" : 7,
                             "set_DataDirectory" : 8,
                             "get_NamelistFile" : 9,
                             "set_NamelistFile" : 10,
                             "get_DensityType" : 11,
                             "set_DensityType" : 12,
                             "get_AtmosDataSource" : 13,
                             "set_AtmosDataSource" : 14,
                             "get_F10p7" : 15,
                             "set_F10p7" : 16,
                             "get_AtmosDataFilename" : 17,
                             "set_AtmosDataFilename" : 18,
                             "get_DragModelType" : 19,
                             "set_DragModelType" : 20,
                             "get_DragModelPluginName" : 21,
                             "set_DragModelPluginName" : 22,
                             "get_DragModelPlugin" : 23,
                             "get_VariableAreaHistoryFile" : 24,
                             "set_VariableAreaHistoryFile" : 25,
                             "get_NPlateDefinitionFile" : 26,
                             "set_NPlateDefinitionFile" : 27, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAMarsGRAM37._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAMarsGRAM37 from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAMarsGRAM37.__dict__ and type(IAgVAMarsGRAM37.__dict__[attrname]) == property:
            return IAgVAMarsGRAM37.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAMarsGRAM37.")
    
    _get_UseApproximateAltitude_metadata = { "name" : "UseApproximateAltitude",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def UseApproximateAltitude(self) -> bool:
        """True if using approximate altitude formula."""
        return self._intf.get_property(IAgVAMarsGRAM37._metadata, IAgVAMarsGRAM37._get_UseApproximateAltitude_metadata)

    _set_UseApproximateAltitude_metadata = { "name" : "UseApproximateAltitude",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @UseApproximateAltitude.setter
    def UseApproximateAltitude(self, inVal:bool) -> None:
        return self._intf.set_property(IAgVAMarsGRAM37._metadata, IAgVAMarsGRAM37._set_UseApproximateAltitude_metadata, inVal)

    _get_ComputesTemperature_metadata = { "name" : "ComputesTemperature",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def ComputesTemperature(self) -> bool:
        """Flag indicates whether this model computes temperature."""
        return self._intf.get_property(IAgVAMarsGRAM37._metadata, IAgVAMarsGRAM37._get_ComputesTemperature_metadata)

    _get_ComputesPressure_metadata = { "name" : "ComputesPressure",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def ComputesPressure(self) -> bool:
        """Flag indicates whether this model computes pressure."""
        return self._intf.get_property(IAgVAMarsGRAM37._metadata, IAgVAMarsGRAM37._get_ComputesPressure_metadata)

    _get_SunPosition_metadata = { "name" : "SunPosition",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVASunPosition),) }
    @property
    def SunPosition(self) -> "AgEVASunPosition":
        """The sun position computation."""
        return self._intf.get_property(IAgVAMarsGRAM37._metadata, IAgVAMarsGRAM37._get_SunPosition_metadata)

    _set_SunPosition_metadata = { "name" : "SunPosition",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVASunPosition),) }
    @SunPosition.setter
    def SunPosition(self, inVal:"AgEVASunPosition") -> None:
        return self._intf.set_property(IAgVAMarsGRAM37._metadata, IAgVAMarsGRAM37._set_SunPosition_metadata, inVal)

    _get_DataDirectory_metadata = { "name" : "DataDirectory",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def DataDirectory(self) -> str:
        """Path to the data directory."""
        return self._intf.get_property(IAgVAMarsGRAM37._metadata, IAgVAMarsGRAM37._get_DataDirectory_metadata)

    _set_DataDirectory_metadata = { "name" : "DataDirectory",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @DataDirectory.setter
    def DataDirectory(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAMarsGRAM37._metadata, IAgVAMarsGRAM37._set_DataDirectory_metadata, inVal)

    _get_NamelistFile_metadata = { "name" : "NamelistFile",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def NamelistFile(self) -> str:
        """Full path of namelist file."""
        return self._intf.get_property(IAgVAMarsGRAM37._metadata, IAgVAMarsGRAM37._get_NamelistFile_metadata)

    _set_NamelistFile_metadata = { "name" : "NamelistFile",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @NamelistFile.setter
    def NamelistFile(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAMarsGRAM37._metadata, IAgVAMarsGRAM37._set_NamelistFile_metadata, inVal)

    _get_DensityType_metadata = { "name" : "DensityType",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAMarsGRAMDensityType),) }
    @property
    def DensityType(self) -> "AgEVAMarsGRAMDensityType":
        """Low, mean or high density type."""
        return self._intf.get_property(IAgVAMarsGRAM37._metadata, IAgVAMarsGRAM37._get_DensityType_metadata)

    _set_DensityType_metadata = { "name" : "DensityType",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAMarsGRAMDensityType),) }
    @DensityType.setter
    def DensityType(self, inVal:"AgEVAMarsGRAMDensityType") -> None:
        return self._intf.set_property(IAgVAMarsGRAM37._metadata, IAgVAMarsGRAM37._set_DensityType_metadata, inVal)

    _get_AtmosDataSource_metadata = { "name" : "AtmosDataSource",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAAtmosDataSource),) }
    @property
    def AtmosDataSource(self) -> "AgEVAAtmosDataSource":
        """The atmospheric model data source - data file or constant values."""
        return self._intf.get_property(IAgVAMarsGRAM37._metadata, IAgVAMarsGRAM37._get_AtmosDataSource_metadata)

    _set_AtmosDataSource_metadata = { "name" : "AtmosDataSource",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAAtmosDataSource),) }
    @AtmosDataSource.setter
    def AtmosDataSource(self, inVal:"AgEVAAtmosDataSource") -> None:
        return self._intf.set_property(IAgVAMarsGRAM37._metadata, IAgVAMarsGRAM37._set_AtmosDataSource_metadata, inVal)

    _get_F10p7_metadata = { "name" : "F10p7",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def F10p7(self) -> float:
        """Solar Flux (F10.7); the daily Ottawa 10.7 cm solar flux value. Dimensionless."""
        return self._intf.get_property(IAgVAMarsGRAM37._metadata, IAgVAMarsGRAM37._get_F10p7_metadata)

    _set_F10p7_metadata = { "name" : "F10p7",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @F10p7.setter
    def F10p7(self, inVal:float) -> None:
        return self._intf.set_property(IAgVAMarsGRAM37._metadata, IAgVAMarsGRAM37._set_F10p7_metadata, inVal)

    _get_AtmosDataFilename_metadata = { "name" : "AtmosDataFilename",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def AtmosDataFilename(self) -> str:
        """The atmospheric model data file path."""
        return self._intf.get_property(IAgVAMarsGRAM37._metadata, IAgVAMarsGRAM37._get_AtmosDataFilename_metadata)

    _set_AtmosDataFilename_metadata = { "name" : "AtmosDataFilename",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @AtmosDataFilename.setter
    def AtmosDataFilename(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAMarsGRAM37._metadata, IAgVAMarsGRAM37._set_AtmosDataFilename_metadata, inVal)

    _get_DragModelType_metadata = { "name" : "DragModelType",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVADragModelType),) }
    @property
    def DragModelType(self) -> "AgEVADragModelType":
        """Drag model type."""
        return self._intf.get_property(IAgVAMarsGRAM37._metadata, IAgVAMarsGRAM37._get_DragModelType_metadata)

    _set_DragModelType_metadata = { "name" : "DragModelType",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVADragModelType),) }
    @DragModelType.setter
    def DragModelType(self, inVal:"AgEVADragModelType") -> None:
        return self._intf.set_property(IAgVAMarsGRAM37._metadata, IAgVAMarsGRAM37._set_DragModelType_metadata, inVal)

    _get_DragModelPluginName_metadata = { "name" : "DragModelPluginName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def DragModelPluginName(self) -> str:
        """The name of the drag model plugin."""
        return self._intf.get_property(IAgVAMarsGRAM37._metadata, IAgVAMarsGRAM37._get_DragModelPluginName_metadata)

    _set_DragModelPluginName_metadata = { "name" : "DragModelPluginName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @DragModelPluginName.setter
    def DragModelPluginName(self, pVal:str) -> None:
        return self._intf.set_property(IAgVAMarsGRAM37._metadata, IAgVAMarsGRAM37._set_DragModelPluginName_metadata, pVal)

    _get_DragModelPlugin_metadata = { "name" : "DragModelPlugin",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def DragModelPlugin(self) -> "IAgVADragModelPlugin":
        """Drag model plugin properties."""
        return self._intf.get_property(IAgVAMarsGRAM37._metadata, IAgVAMarsGRAM37._get_DragModelPlugin_metadata)

    _get_VariableAreaHistoryFile_metadata = { "name" : "VariableAreaHistoryFile",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def VariableAreaHistoryFile(self) -> str:
        """Drag variable area history file."""
        return self._intf.get_property(IAgVAMarsGRAM37._metadata, IAgVAMarsGRAM37._get_VariableAreaHistoryFile_metadata)

    _set_VariableAreaHistoryFile_metadata = { "name" : "VariableAreaHistoryFile",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @VariableAreaHistoryFile.setter
    def VariableAreaHistoryFile(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAMarsGRAM37._metadata, IAgVAMarsGRAM37._set_VariableAreaHistoryFile_metadata, inVal)

    _get_NPlateDefinitionFile_metadata = { "name" : "NPlateDefinitionFile",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def NPlateDefinitionFile(self) -> str:
        """Drag N-Plate definition file."""
        return self._intf.get_property(IAgVAMarsGRAM37._metadata, IAgVAMarsGRAM37._get_NPlateDefinitionFile_metadata)

    _set_NPlateDefinitionFile_metadata = { "name" : "NPlateDefinitionFile",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @NPlateDefinitionFile.setter
    def NPlateDefinitionFile(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAMarsGRAM37._metadata, IAgVAMarsGRAM37._set_NPlateDefinitionFile_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{2855777F-3062-4699-AB5D-2FE73D161472}", IAgVAMarsGRAM37)
agcls.AgTypeNameMap["IAgVAMarsGRAM37"] = IAgVAMarsGRAM37

class IAgVAMarsGRAM2005(object):
    """Properties for the Mars-GRAM 2005 atmospheric model."""
    _num_methods = 27
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{E8649FED-5172-444A-9FC2-3B69586A8B91}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_UseApproximateAltitude" : 1,
                             "set_UseApproximateAltitude" : 2,
                             "get_ComputesTemperature" : 3,
                             "get_ComputesPressure" : 4,
                             "get_SunPosition" : 5,
                             "set_SunPosition" : 6,
                             "get_DataDirectory" : 7,
                             "set_DataDirectory" : 8,
                             "get_NamelistFile" : 9,
                             "set_NamelistFile" : 10,
                             "get_DensityType" : 11,
                             "set_DensityType" : 12,
                             "get_AtmosDataSource" : 13,
                             "set_AtmosDataSource" : 14,
                             "get_F10p7" : 15,
                             "set_F10p7" : 16,
                             "get_AtmosDataFilename" : 17,
                             "set_AtmosDataFilename" : 18,
                             "get_DragModelType" : 19,
                             "set_DragModelType" : 20,
                             "get_DragModelPluginName" : 21,
                             "set_DragModelPluginName" : 22,
                             "get_DragModelPlugin" : 23,
                             "get_VariableAreaHistoryFile" : 24,
                             "set_VariableAreaHistoryFile" : 25,
                             "get_NPlateDefinitionFile" : 26,
                             "set_NPlateDefinitionFile" : 27, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAMarsGRAM2005._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAMarsGRAM2005 from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAMarsGRAM2005.__dict__ and type(IAgVAMarsGRAM2005.__dict__[attrname]) == property:
            return IAgVAMarsGRAM2005.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAMarsGRAM2005.")
    
    _get_UseApproximateAltitude_metadata = { "name" : "UseApproximateAltitude",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def UseApproximateAltitude(self) -> bool:
        """True if using approximate altitude formula."""
        return self._intf.get_property(IAgVAMarsGRAM2005._metadata, IAgVAMarsGRAM2005._get_UseApproximateAltitude_metadata)

    _set_UseApproximateAltitude_metadata = { "name" : "UseApproximateAltitude",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @UseApproximateAltitude.setter
    def UseApproximateAltitude(self, inVal:bool) -> None:
        return self._intf.set_property(IAgVAMarsGRAM2005._metadata, IAgVAMarsGRAM2005._set_UseApproximateAltitude_metadata, inVal)

    _get_ComputesTemperature_metadata = { "name" : "ComputesTemperature",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def ComputesTemperature(self) -> bool:
        """Flag indicates whether this model computes temperature."""
        return self._intf.get_property(IAgVAMarsGRAM2005._metadata, IAgVAMarsGRAM2005._get_ComputesTemperature_metadata)

    _get_ComputesPressure_metadata = { "name" : "ComputesPressure",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def ComputesPressure(self) -> bool:
        """Flag indicates whether this model computes pressure."""
        return self._intf.get_property(IAgVAMarsGRAM2005._metadata, IAgVAMarsGRAM2005._get_ComputesPressure_metadata)

    _get_SunPosition_metadata = { "name" : "SunPosition",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVASunPosition),) }
    @property
    def SunPosition(self) -> "AgEVASunPosition":
        """The sun position computation."""
        return self._intf.get_property(IAgVAMarsGRAM2005._metadata, IAgVAMarsGRAM2005._get_SunPosition_metadata)

    _set_SunPosition_metadata = { "name" : "SunPosition",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVASunPosition),) }
    @SunPosition.setter
    def SunPosition(self, inVal:"AgEVASunPosition") -> None:
        return self._intf.set_property(IAgVAMarsGRAM2005._metadata, IAgVAMarsGRAM2005._set_SunPosition_metadata, inVal)

    _get_DataDirectory_metadata = { "name" : "DataDirectory",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def DataDirectory(self) -> str:
        """Path to the data directory."""
        return self._intf.get_property(IAgVAMarsGRAM2005._metadata, IAgVAMarsGRAM2005._get_DataDirectory_metadata)

    _set_DataDirectory_metadata = { "name" : "DataDirectory",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @DataDirectory.setter
    def DataDirectory(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAMarsGRAM2005._metadata, IAgVAMarsGRAM2005._set_DataDirectory_metadata, inVal)

    _get_NamelistFile_metadata = { "name" : "NamelistFile",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def NamelistFile(self) -> str:
        """Full path of namelist file."""
        return self._intf.get_property(IAgVAMarsGRAM2005._metadata, IAgVAMarsGRAM2005._get_NamelistFile_metadata)

    _set_NamelistFile_metadata = { "name" : "NamelistFile",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @NamelistFile.setter
    def NamelistFile(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAMarsGRAM2005._metadata, IAgVAMarsGRAM2005._set_NamelistFile_metadata, inVal)

    _get_DensityType_metadata = { "name" : "DensityType",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAMarsGRAMDensityType),) }
    @property
    def DensityType(self) -> "AgEVAMarsGRAMDensityType":
        """Low, mean, high or randomly perturbed density type."""
        return self._intf.get_property(IAgVAMarsGRAM2005._metadata, IAgVAMarsGRAM2005._get_DensityType_metadata)

    _set_DensityType_metadata = { "name" : "DensityType",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAMarsGRAMDensityType),) }
    @DensityType.setter
    def DensityType(self, inVal:"AgEVAMarsGRAMDensityType") -> None:
        return self._intf.set_property(IAgVAMarsGRAM2005._metadata, IAgVAMarsGRAM2005._set_DensityType_metadata, inVal)

    _get_AtmosDataSource_metadata = { "name" : "AtmosDataSource",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAAtmosDataSource),) }
    @property
    def AtmosDataSource(self) -> "AgEVAAtmosDataSource":
        """The atmospheric model data source - data file or constant values."""
        return self._intf.get_property(IAgVAMarsGRAM2005._metadata, IAgVAMarsGRAM2005._get_AtmosDataSource_metadata)

    _set_AtmosDataSource_metadata = { "name" : "AtmosDataSource",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAAtmosDataSource),) }
    @AtmosDataSource.setter
    def AtmosDataSource(self, inVal:"AgEVAAtmosDataSource") -> None:
        return self._intf.set_property(IAgVAMarsGRAM2005._metadata, IAgVAMarsGRAM2005._set_AtmosDataSource_metadata, inVal)

    _get_F10p7_metadata = { "name" : "F10p7",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def F10p7(self) -> float:
        """Solar Flux (F10.7); the daily Ottawa 10.7 cm solar flux value. Dimensionless."""
        return self._intf.get_property(IAgVAMarsGRAM2005._metadata, IAgVAMarsGRAM2005._get_F10p7_metadata)

    _set_F10p7_metadata = { "name" : "F10p7",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @F10p7.setter
    def F10p7(self, inVal:float) -> None:
        return self._intf.set_property(IAgVAMarsGRAM2005._metadata, IAgVAMarsGRAM2005._set_F10p7_metadata, inVal)

    _get_AtmosDataFilename_metadata = { "name" : "AtmosDataFilename",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def AtmosDataFilename(self) -> str:
        """The atmospheric model data file path."""
        return self._intf.get_property(IAgVAMarsGRAM2005._metadata, IAgVAMarsGRAM2005._get_AtmosDataFilename_metadata)

    _set_AtmosDataFilename_metadata = { "name" : "AtmosDataFilename",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @AtmosDataFilename.setter
    def AtmosDataFilename(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAMarsGRAM2005._metadata, IAgVAMarsGRAM2005._set_AtmosDataFilename_metadata, inVal)

    _get_DragModelType_metadata = { "name" : "DragModelType",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVADragModelType),) }
    @property
    def DragModelType(self) -> "AgEVADragModelType":
        """Drag model type."""
        return self._intf.get_property(IAgVAMarsGRAM2005._metadata, IAgVAMarsGRAM2005._get_DragModelType_metadata)

    _set_DragModelType_metadata = { "name" : "DragModelType",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVADragModelType),) }
    @DragModelType.setter
    def DragModelType(self, inVal:"AgEVADragModelType") -> None:
        return self._intf.set_property(IAgVAMarsGRAM2005._metadata, IAgVAMarsGRAM2005._set_DragModelType_metadata, inVal)

    _get_DragModelPluginName_metadata = { "name" : "DragModelPluginName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def DragModelPluginName(self) -> str:
        """The name of the drag model plugin."""
        return self._intf.get_property(IAgVAMarsGRAM2005._metadata, IAgVAMarsGRAM2005._get_DragModelPluginName_metadata)

    _set_DragModelPluginName_metadata = { "name" : "DragModelPluginName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @DragModelPluginName.setter
    def DragModelPluginName(self, pVal:str) -> None:
        return self._intf.set_property(IAgVAMarsGRAM2005._metadata, IAgVAMarsGRAM2005._set_DragModelPluginName_metadata, pVal)

    _get_DragModelPlugin_metadata = { "name" : "DragModelPlugin",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def DragModelPlugin(self) -> "IAgVADragModelPlugin":
        """Drag model plugin properties."""
        return self._intf.get_property(IAgVAMarsGRAM2005._metadata, IAgVAMarsGRAM2005._get_DragModelPlugin_metadata)

    _get_VariableAreaHistoryFile_metadata = { "name" : "VariableAreaHistoryFile",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def VariableAreaHistoryFile(self) -> str:
        """Drag variable area history file."""
        return self._intf.get_property(IAgVAMarsGRAM2005._metadata, IAgVAMarsGRAM2005._get_VariableAreaHistoryFile_metadata)

    _set_VariableAreaHistoryFile_metadata = { "name" : "VariableAreaHistoryFile",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @VariableAreaHistoryFile.setter
    def VariableAreaHistoryFile(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAMarsGRAM2005._metadata, IAgVAMarsGRAM2005._set_VariableAreaHistoryFile_metadata, inVal)

    _get_NPlateDefinitionFile_metadata = { "name" : "NPlateDefinitionFile",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def NPlateDefinitionFile(self) -> str:
        """Drag N-Plate definition file."""
        return self._intf.get_property(IAgVAMarsGRAM2005._metadata, IAgVAMarsGRAM2005._get_NPlateDefinitionFile_metadata)

    _set_NPlateDefinitionFile_metadata = { "name" : "NPlateDefinitionFile",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @NPlateDefinitionFile.setter
    def NPlateDefinitionFile(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAMarsGRAM2005._metadata, IAgVAMarsGRAM2005._set_NPlateDefinitionFile_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{E8649FED-5172-444A-9FC2-3B69586A8B91}", IAgVAMarsGRAM2005)
agcls.AgTypeNameMap["IAgVAMarsGRAM2005"] = IAgVAMarsGRAM2005

class IAgVAVenusGRAM2005(object):
    """Properties for the Venus-GRAM 2005 atmospheric model."""
    _num_methods = 19
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{270C541C-FF9B-4E56-81B0-36CF43D3BE54}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_UseApproximateAltitude" : 1,
                             "set_UseApproximateAltitude" : 2,
                             "get_ComputesTemperature" : 3,
                             "get_ComputesPressure" : 4,
                             "get_DataDirectory" : 5,
                             "set_DataDirectory" : 6,
                             "get_NamelistFile" : 7,
                             "set_NamelistFile" : 8,
                             "get_DensityType" : 9,
                             "set_DensityType" : 10,
                             "get_DragModelType" : 11,
                             "set_DragModelType" : 12,
                             "get_DragModelPluginName" : 13,
                             "set_DragModelPluginName" : 14,
                             "get_DragModelPlugin" : 15,
                             "get_VariableAreaHistoryFile" : 16,
                             "set_VariableAreaHistoryFile" : 17,
                             "get_NPlateDefinitionFile" : 18,
                             "set_NPlateDefinitionFile" : 19, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAVenusGRAM2005._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAVenusGRAM2005 from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAVenusGRAM2005.__dict__ and type(IAgVAVenusGRAM2005.__dict__[attrname]) == property:
            return IAgVAVenusGRAM2005.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAVenusGRAM2005.")
    
    _get_UseApproximateAltitude_metadata = { "name" : "UseApproximateAltitude",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def UseApproximateAltitude(self) -> bool:
        """True if using approximate altitude formula."""
        return self._intf.get_property(IAgVAVenusGRAM2005._metadata, IAgVAVenusGRAM2005._get_UseApproximateAltitude_metadata)

    _set_UseApproximateAltitude_metadata = { "name" : "UseApproximateAltitude",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @UseApproximateAltitude.setter
    def UseApproximateAltitude(self, inVal:bool) -> None:
        return self._intf.set_property(IAgVAVenusGRAM2005._metadata, IAgVAVenusGRAM2005._set_UseApproximateAltitude_metadata, inVal)

    _get_ComputesTemperature_metadata = { "name" : "ComputesTemperature",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def ComputesTemperature(self) -> bool:
        """Flag indicates whether this model computes temperature."""
        return self._intf.get_property(IAgVAVenusGRAM2005._metadata, IAgVAVenusGRAM2005._get_ComputesTemperature_metadata)

    _get_ComputesPressure_metadata = { "name" : "ComputesPressure",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def ComputesPressure(self) -> bool:
        """Flag indicates whether this model computes pressure."""
        return self._intf.get_property(IAgVAVenusGRAM2005._metadata, IAgVAVenusGRAM2005._get_ComputesPressure_metadata)

    _get_DataDirectory_metadata = { "name" : "DataDirectory",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def DataDirectory(self) -> str:
        """Path to the data directory."""
        return self._intf.get_property(IAgVAVenusGRAM2005._metadata, IAgVAVenusGRAM2005._get_DataDirectory_metadata)

    _set_DataDirectory_metadata = { "name" : "DataDirectory",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @DataDirectory.setter
    def DataDirectory(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAVenusGRAM2005._metadata, IAgVAVenusGRAM2005._set_DataDirectory_metadata, inVal)

    _get_NamelistFile_metadata = { "name" : "NamelistFile",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def NamelistFile(self) -> str:
        """Full path of namelist file."""
        return self._intf.get_property(IAgVAVenusGRAM2005._metadata, IAgVAVenusGRAM2005._get_NamelistFile_metadata)

    _set_NamelistFile_metadata = { "name" : "NamelistFile",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @NamelistFile.setter
    def NamelistFile(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAVenusGRAM2005._metadata, IAgVAVenusGRAM2005._set_NamelistFile_metadata, inVal)

    _get_DensityType_metadata = { "name" : "DensityType",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAVenusGRAMDensityType),) }
    @property
    def DensityType(self) -> "AgEVAVenusGRAMDensityType":
        """Low, mean, high or randomly perturbed density type."""
        return self._intf.get_property(IAgVAVenusGRAM2005._metadata, IAgVAVenusGRAM2005._get_DensityType_metadata)

    _set_DensityType_metadata = { "name" : "DensityType",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAVenusGRAMDensityType),) }
    @DensityType.setter
    def DensityType(self, inVal:"AgEVAVenusGRAMDensityType") -> None:
        return self._intf.set_property(IAgVAVenusGRAM2005._metadata, IAgVAVenusGRAM2005._set_DensityType_metadata, inVal)

    _get_DragModelType_metadata = { "name" : "DragModelType",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVADragModelType),) }
    @property
    def DragModelType(self) -> "AgEVADragModelType":
        """Drag model type."""
        return self._intf.get_property(IAgVAVenusGRAM2005._metadata, IAgVAVenusGRAM2005._get_DragModelType_metadata)

    _set_DragModelType_metadata = { "name" : "DragModelType",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVADragModelType),) }
    @DragModelType.setter
    def DragModelType(self, inVal:"AgEVADragModelType") -> None:
        return self._intf.set_property(IAgVAVenusGRAM2005._metadata, IAgVAVenusGRAM2005._set_DragModelType_metadata, inVal)

    _get_DragModelPluginName_metadata = { "name" : "DragModelPluginName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def DragModelPluginName(self) -> str:
        """The name of the drag model plugin."""
        return self._intf.get_property(IAgVAVenusGRAM2005._metadata, IAgVAVenusGRAM2005._get_DragModelPluginName_metadata)

    _set_DragModelPluginName_metadata = { "name" : "DragModelPluginName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @DragModelPluginName.setter
    def DragModelPluginName(self, pVal:str) -> None:
        return self._intf.set_property(IAgVAVenusGRAM2005._metadata, IAgVAVenusGRAM2005._set_DragModelPluginName_metadata, pVal)

    _get_DragModelPlugin_metadata = { "name" : "DragModelPlugin",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def DragModelPlugin(self) -> "IAgVADragModelPlugin":
        """Drag model plugin properties."""
        return self._intf.get_property(IAgVAVenusGRAM2005._metadata, IAgVAVenusGRAM2005._get_DragModelPlugin_metadata)

    _get_VariableAreaHistoryFile_metadata = { "name" : "VariableAreaHistoryFile",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def VariableAreaHistoryFile(self) -> str:
        """Drag variable area history file."""
        return self._intf.get_property(IAgVAVenusGRAM2005._metadata, IAgVAVenusGRAM2005._get_VariableAreaHistoryFile_metadata)

    _set_VariableAreaHistoryFile_metadata = { "name" : "VariableAreaHistoryFile",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @VariableAreaHistoryFile.setter
    def VariableAreaHistoryFile(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAVenusGRAM2005._metadata, IAgVAVenusGRAM2005._set_VariableAreaHistoryFile_metadata, inVal)

    _get_NPlateDefinitionFile_metadata = { "name" : "NPlateDefinitionFile",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def NPlateDefinitionFile(self) -> str:
        """Drag N-Plate definition file."""
        return self._intf.get_property(IAgVAVenusGRAM2005._metadata, IAgVAVenusGRAM2005._get_NPlateDefinitionFile_metadata)

    _set_NPlateDefinitionFile_metadata = { "name" : "NPlateDefinitionFile",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @NPlateDefinitionFile.setter
    def NPlateDefinitionFile(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAVenusGRAM2005._metadata, IAgVAVenusGRAM2005._set_NPlateDefinitionFile_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{270C541C-FF9B-4E56-81B0-36CF43D3BE54}", IAgVAVenusGRAM2005)
agcls.AgTypeNameMap["IAgVAVenusGRAM2005"] = IAgVAVenusGRAM2005

class IAgVAMarsGRAM2010(object):
    """Properties for the Mars-GRAM 2010 atmospheric model."""
    _num_methods = 27
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{C9E4AA59-8B84-4AC1-938E-E5E92A12EC4F}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_UseApproximateAltitude" : 1,
                             "set_UseApproximateAltitude" : 2,
                             "get_ComputesTemperature" : 3,
                             "get_ComputesPressure" : 4,
                             "get_SunPosition" : 5,
                             "set_SunPosition" : 6,
                             "get_DataDirectory" : 7,
                             "set_DataDirectory" : 8,
                             "get_NamelistFile" : 9,
                             "set_NamelistFile" : 10,
                             "get_DensityType" : 11,
                             "set_DensityType" : 12,
                             "get_AtmosDataSource" : 13,
                             "set_AtmosDataSource" : 14,
                             "get_F10p7" : 15,
                             "set_F10p7" : 16,
                             "get_AtmosDataFilename" : 17,
                             "set_AtmosDataFilename" : 18,
                             "get_DragModelType" : 19,
                             "set_DragModelType" : 20,
                             "get_DragModelPluginName" : 21,
                             "set_DragModelPluginName" : 22,
                             "get_DragModelPlugin" : 23,
                             "get_VariableAreaHistoryFile" : 24,
                             "set_VariableAreaHistoryFile" : 25,
                             "get_NPlateDefinitionFile" : 26,
                             "set_NPlateDefinitionFile" : 27, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAMarsGRAM2010._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAMarsGRAM2010 from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAMarsGRAM2010.__dict__ and type(IAgVAMarsGRAM2010.__dict__[attrname]) == property:
            return IAgVAMarsGRAM2010.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAMarsGRAM2010.")
    
    _get_UseApproximateAltitude_metadata = { "name" : "UseApproximateAltitude",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def UseApproximateAltitude(self) -> bool:
        """True if using approximate altitude formula."""
        return self._intf.get_property(IAgVAMarsGRAM2010._metadata, IAgVAMarsGRAM2010._get_UseApproximateAltitude_metadata)

    _set_UseApproximateAltitude_metadata = { "name" : "UseApproximateAltitude",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @UseApproximateAltitude.setter
    def UseApproximateAltitude(self, inVal:bool) -> None:
        return self._intf.set_property(IAgVAMarsGRAM2010._metadata, IAgVAMarsGRAM2010._set_UseApproximateAltitude_metadata, inVal)

    _get_ComputesTemperature_metadata = { "name" : "ComputesTemperature",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def ComputesTemperature(self) -> bool:
        """Flag indicates whether this model computes temperature."""
        return self._intf.get_property(IAgVAMarsGRAM2010._metadata, IAgVAMarsGRAM2010._get_ComputesTemperature_metadata)

    _get_ComputesPressure_metadata = { "name" : "ComputesPressure",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def ComputesPressure(self) -> bool:
        """Flag indicates whether this model computes pressure."""
        return self._intf.get_property(IAgVAMarsGRAM2010._metadata, IAgVAMarsGRAM2010._get_ComputesPressure_metadata)

    _get_SunPosition_metadata = { "name" : "SunPosition",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVASunPosition),) }
    @property
    def SunPosition(self) -> "AgEVASunPosition":
        """The sun position computation."""
        return self._intf.get_property(IAgVAMarsGRAM2010._metadata, IAgVAMarsGRAM2010._get_SunPosition_metadata)

    _set_SunPosition_metadata = { "name" : "SunPosition",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVASunPosition),) }
    @SunPosition.setter
    def SunPosition(self, inVal:"AgEVASunPosition") -> None:
        return self._intf.set_property(IAgVAMarsGRAM2010._metadata, IAgVAMarsGRAM2010._set_SunPosition_metadata, inVal)

    _get_DataDirectory_metadata = { "name" : "DataDirectory",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def DataDirectory(self) -> str:
        """Path to the data directory."""
        return self._intf.get_property(IAgVAMarsGRAM2010._metadata, IAgVAMarsGRAM2010._get_DataDirectory_metadata)

    _set_DataDirectory_metadata = { "name" : "DataDirectory",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @DataDirectory.setter
    def DataDirectory(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAMarsGRAM2010._metadata, IAgVAMarsGRAM2010._set_DataDirectory_metadata, inVal)

    _get_NamelistFile_metadata = { "name" : "NamelistFile",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def NamelistFile(self) -> str:
        """Full path of namelist file."""
        return self._intf.get_property(IAgVAMarsGRAM2010._metadata, IAgVAMarsGRAM2010._get_NamelistFile_metadata)

    _set_NamelistFile_metadata = { "name" : "NamelistFile",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @NamelistFile.setter
    def NamelistFile(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAMarsGRAM2010._metadata, IAgVAMarsGRAM2010._set_NamelistFile_metadata, inVal)

    _get_DensityType_metadata = { "name" : "DensityType",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAMarsGRAMDensityType),) }
    @property
    def DensityType(self) -> "AgEVAMarsGRAMDensityType":
        """Low, mean, high or randomly perturbed density type."""
        return self._intf.get_property(IAgVAMarsGRAM2010._metadata, IAgVAMarsGRAM2010._get_DensityType_metadata)

    _set_DensityType_metadata = { "name" : "DensityType",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAMarsGRAMDensityType),) }
    @DensityType.setter
    def DensityType(self, inVal:"AgEVAMarsGRAMDensityType") -> None:
        return self._intf.set_property(IAgVAMarsGRAM2010._metadata, IAgVAMarsGRAM2010._set_DensityType_metadata, inVal)

    _get_AtmosDataSource_metadata = { "name" : "AtmosDataSource",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAAtmosDataSource),) }
    @property
    def AtmosDataSource(self) -> "AgEVAAtmosDataSource":
        """The atmospheric model data source - data file or constant values."""
        return self._intf.get_property(IAgVAMarsGRAM2010._metadata, IAgVAMarsGRAM2010._get_AtmosDataSource_metadata)

    _set_AtmosDataSource_metadata = { "name" : "AtmosDataSource",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAAtmosDataSource),) }
    @AtmosDataSource.setter
    def AtmosDataSource(self, inVal:"AgEVAAtmosDataSource") -> None:
        return self._intf.set_property(IAgVAMarsGRAM2010._metadata, IAgVAMarsGRAM2010._set_AtmosDataSource_metadata, inVal)

    _get_F10p7_metadata = { "name" : "F10p7",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def F10p7(self) -> float:
        """Solar Flux (F10.7); the daily Ottawa 10.7 cm solar flux value. Dimensionless."""
        return self._intf.get_property(IAgVAMarsGRAM2010._metadata, IAgVAMarsGRAM2010._get_F10p7_metadata)

    _set_F10p7_metadata = { "name" : "F10p7",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @F10p7.setter
    def F10p7(self, inVal:float) -> None:
        return self._intf.set_property(IAgVAMarsGRAM2010._metadata, IAgVAMarsGRAM2010._set_F10p7_metadata, inVal)

    _get_AtmosDataFilename_metadata = { "name" : "AtmosDataFilename",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def AtmosDataFilename(self) -> str:
        """The atmospheric model data file path."""
        return self._intf.get_property(IAgVAMarsGRAM2010._metadata, IAgVAMarsGRAM2010._get_AtmosDataFilename_metadata)

    _set_AtmosDataFilename_metadata = { "name" : "AtmosDataFilename",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @AtmosDataFilename.setter
    def AtmosDataFilename(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAMarsGRAM2010._metadata, IAgVAMarsGRAM2010._set_AtmosDataFilename_metadata, inVal)

    _get_DragModelType_metadata = { "name" : "DragModelType",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVADragModelType),) }
    @property
    def DragModelType(self) -> "AgEVADragModelType":
        """Drag model type."""
        return self._intf.get_property(IAgVAMarsGRAM2010._metadata, IAgVAMarsGRAM2010._get_DragModelType_metadata)

    _set_DragModelType_metadata = { "name" : "DragModelType",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVADragModelType),) }
    @DragModelType.setter
    def DragModelType(self, inVal:"AgEVADragModelType") -> None:
        return self._intf.set_property(IAgVAMarsGRAM2010._metadata, IAgVAMarsGRAM2010._set_DragModelType_metadata, inVal)

    _get_DragModelPluginName_metadata = { "name" : "DragModelPluginName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def DragModelPluginName(self) -> str:
        """The name of the drag model plugin."""
        return self._intf.get_property(IAgVAMarsGRAM2010._metadata, IAgVAMarsGRAM2010._get_DragModelPluginName_metadata)

    _set_DragModelPluginName_metadata = { "name" : "DragModelPluginName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @DragModelPluginName.setter
    def DragModelPluginName(self, pVal:str) -> None:
        return self._intf.set_property(IAgVAMarsGRAM2010._metadata, IAgVAMarsGRAM2010._set_DragModelPluginName_metadata, pVal)

    _get_DragModelPlugin_metadata = { "name" : "DragModelPlugin",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def DragModelPlugin(self) -> "IAgVADragModelPlugin":
        """Drag model plugin properties."""
        return self._intf.get_property(IAgVAMarsGRAM2010._metadata, IAgVAMarsGRAM2010._get_DragModelPlugin_metadata)

    _get_VariableAreaHistoryFile_metadata = { "name" : "VariableAreaHistoryFile",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def VariableAreaHistoryFile(self) -> str:
        """Drag variable area history file."""
        return self._intf.get_property(IAgVAMarsGRAM2010._metadata, IAgVAMarsGRAM2010._get_VariableAreaHistoryFile_metadata)

    _set_VariableAreaHistoryFile_metadata = { "name" : "VariableAreaHistoryFile",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @VariableAreaHistoryFile.setter
    def VariableAreaHistoryFile(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAMarsGRAM2010._metadata, IAgVAMarsGRAM2010._set_VariableAreaHistoryFile_metadata, inVal)

    _get_NPlateDefinitionFile_metadata = { "name" : "NPlateDefinitionFile",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def NPlateDefinitionFile(self) -> str:
        """Drag N-Plate definition file."""
        return self._intf.get_property(IAgVAMarsGRAM2010._metadata, IAgVAMarsGRAM2010._get_NPlateDefinitionFile_metadata)

    _set_NPlateDefinitionFile_metadata = { "name" : "NPlateDefinitionFile",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @NPlateDefinitionFile.setter
    def NPlateDefinitionFile(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAMarsGRAM2010._metadata, IAgVAMarsGRAM2010._set_NPlateDefinitionFile_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{C9E4AA59-8B84-4AC1-938E-E5E92A12EC4F}", IAgVAMarsGRAM2010)
agcls.AgTypeNameMap["IAgVAMarsGRAM2010"] = IAgVAMarsGRAM2010

class IAgVAMarsGRAM2001(object):
    """Properties for the Mars-GRAM 2001 atmospheric model."""
    _num_methods = 27
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{D9213F74-E8C9-4251-9BD6-FA0C0138AFCD}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_UseApproximateAltitude" : 1,
                             "set_UseApproximateAltitude" : 2,
                             "get_ComputesTemperature" : 3,
                             "get_ComputesPressure" : 4,
                             "get_SunPosition" : 5,
                             "set_SunPosition" : 6,
                             "get_DataDirectory" : 7,
                             "set_DataDirectory" : 8,
                             "get_NamelistFile" : 9,
                             "set_NamelistFile" : 10,
                             "get_DensityType" : 11,
                             "set_DensityType" : 12,
                             "get_AtmosDataSource" : 13,
                             "set_AtmosDataSource" : 14,
                             "get_F10p7" : 15,
                             "set_F10p7" : 16,
                             "get_AtmosDataFilename" : 17,
                             "set_AtmosDataFilename" : 18,
                             "get_DragModelType" : 19,
                             "set_DragModelType" : 20,
                             "get_DragModelPluginName" : 21,
                             "set_DragModelPluginName" : 22,
                             "get_DragModelPlugin" : 23,
                             "get_VariableAreaHistoryFile" : 24,
                             "set_VariableAreaHistoryFile" : 25,
                             "get_NPlateDefinitionFile" : 26,
                             "set_NPlateDefinitionFile" : 27, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAMarsGRAM2001._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAMarsGRAM2001 from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAMarsGRAM2001.__dict__ and type(IAgVAMarsGRAM2001.__dict__[attrname]) == property:
            return IAgVAMarsGRAM2001.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAMarsGRAM2001.")
    
    _get_UseApproximateAltitude_metadata = { "name" : "UseApproximateAltitude",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def UseApproximateAltitude(self) -> bool:
        """True if using approximate altitude formula."""
        return self._intf.get_property(IAgVAMarsGRAM2001._metadata, IAgVAMarsGRAM2001._get_UseApproximateAltitude_metadata)

    _set_UseApproximateAltitude_metadata = { "name" : "UseApproximateAltitude",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @UseApproximateAltitude.setter
    def UseApproximateAltitude(self, inVal:bool) -> None:
        return self._intf.set_property(IAgVAMarsGRAM2001._metadata, IAgVAMarsGRAM2001._set_UseApproximateAltitude_metadata, inVal)

    _get_ComputesTemperature_metadata = { "name" : "ComputesTemperature",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def ComputesTemperature(self) -> bool:
        """Flag indicates whether this model computes temperature."""
        return self._intf.get_property(IAgVAMarsGRAM2001._metadata, IAgVAMarsGRAM2001._get_ComputesTemperature_metadata)

    _get_ComputesPressure_metadata = { "name" : "ComputesPressure",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def ComputesPressure(self) -> bool:
        """Flag indicates whether this model computes pressure."""
        return self._intf.get_property(IAgVAMarsGRAM2001._metadata, IAgVAMarsGRAM2001._get_ComputesPressure_metadata)

    _get_SunPosition_metadata = { "name" : "SunPosition",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVASunPosition),) }
    @property
    def SunPosition(self) -> "AgEVASunPosition":
        """The sun position computation."""
        return self._intf.get_property(IAgVAMarsGRAM2001._metadata, IAgVAMarsGRAM2001._get_SunPosition_metadata)

    _set_SunPosition_metadata = { "name" : "SunPosition",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVASunPosition),) }
    @SunPosition.setter
    def SunPosition(self, inVal:"AgEVASunPosition") -> None:
        return self._intf.set_property(IAgVAMarsGRAM2001._metadata, IAgVAMarsGRAM2001._set_SunPosition_metadata, inVal)

    _get_DataDirectory_metadata = { "name" : "DataDirectory",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def DataDirectory(self) -> str:
        """Path to the data directory."""
        return self._intf.get_property(IAgVAMarsGRAM2001._metadata, IAgVAMarsGRAM2001._get_DataDirectory_metadata)

    _set_DataDirectory_metadata = { "name" : "DataDirectory",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @DataDirectory.setter
    def DataDirectory(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAMarsGRAM2001._metadata, IAgVAMarsGRAM2001._set_DataDirectory_metadata, inVal)

    _get_NamelistFile_metadata = { "name" : "NamelistFile",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def NamelistFile(self) -> str:
        """Path to namelist file."""
        return self._intf.get_property(IAgVAMarsGRAM2001._metadata, IAgVAMarsGRAM2001._get_NamelistFile_metadata)

    _set_NamelistFile_metadata = { "name" : "NamelistFile",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @NamelistFile.setter
    def NamelistFile(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAMarsGRAM2001._metadata, IAgVAMarsGRAM2001._set_NamelistFile_metadata, inVal)

    _get_DensityType_metadata = { "name" : "DensityType",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAMarsGRAMDensityType),) }
    @property
    def DensityType(self) -> "AgEVAMarsGRAMDensityType":
        """Low, mean, high or randomly perturbed density type."""
        return self._intf.get_property(IAgVAMarsGRAM2001._metadata, IAgVAMarsGRAM2001._get_DensityType_metadata)

    _set_DensityType_metadata = { "name" : "DensityType",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAMarsGRAMDensityType),) }
    @DensityType.setter
    def DensityType(self, inVal:"AgEVAMarsGRAMDensityType") -> None:
        return self._intf.set_property(IAgVAMarsGRAM2001._metadata, IAgVAMarsGRAM2001._set_DensityType_metadata, inVal)

    _get_AtmosDataSource_metadata = { "name" : "AtmosDataSource",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAAtmosDataSource),) }
    @property
    def AtmosDataSource(self) -> "AgEVAAtmosDataSource":
        """The atmospheric model data source - data file or constant values."""
        return self._intf.get_property(IAgVAMarsGRAM2001._metadata, IAgVAMarsGRAM2001._get_AtmosDataSource_metadata)

    _set_AtmosDataSource_metadata = { "name" : "AtmosDataSource",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAAtmosDataSource),) }
    @AtmosDataSource.setter
    def AtmosDataSource(self, inVal:"AgEVAAtmosDataSource") -> None:
        return self._intf.set_property(IAgVAMarsGRAM2001._metadata, IAgVAMarsGRAM2001._set_AtmosDataSource_metadata, inVal)

    _get_F10p7_metadata = { "name" : "F10p7",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def F10p7(self) -> float:
        """Solar Flux (F10.7); the daily Ottawa 10.7 cm solar flux value. Dimensionless."""
        return self._intf.get_property(IAgVAMarsGRAM2001._metadata, IAgVAMarsGRAM2001._get_F10p7_metadata)

    _set_F10p7_metadata = { "name" : "F10p7",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @F10p7.setter
    def F10p7(self, inVal:float) -> None:
        return self._intf.set_property(IAgVAMarsGRAM2001._metadata, IAgVAMarsGRAM2001._set_F10p7_metadata, inVal)

    _get_AtmosDataFilename_metadata = { "name" : "AtmosDataFilename",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def AtmosDataFilename(self) -> str:
        """The atmospheric model data file path."""
        return self._intf.get_property(IAgVAMarsGRAM2001._metadata, IAgVAMarsGRAM2001._get_AtmosDataFilename_metadata)

    _set_AtmosDataFilename_metadata = { "name" : "AtmosDataFilename",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @AtmosDataFilename.setter
    def AtmosDataFilename(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAMarsGRAM2001._metadata, IAgVAMarsGRAM2001._set_AtmosDataFilename_metadata, inVal)

    _get_DragModelType_metadata = { "name" : "DragModelType",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVADragModelType),) }
    @property
    def DragModelType(self) -> "AgEVADragModelType":
        """Drag model type."""
        return self._intf.get_property(IAgVAMarsGRAM2001._metadata, IAgVAMarsGRAM2001._get_DragModelType_metadata)

    _set_DragModelType_metadata = { "name" : "DragModelType",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVADragModelType),) }
    @DragModelType.setter
    def DragModelType(self, inVal:"AgEVADragModelType") -> None:
        return self._intf.set_property(IAgVAMarsGRAM2001._metadata, IAgVAMarsGRAM2001._set_DragModelType_metadata, inVal)

    _get_DragModelPluginName_metadata = { "name" : "DragModelPluginName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def DragModelPluginName(self) -> str:
        """The name of the drag model plugin."""
        return self._intf.get_property(IAgVAMarsGRAM2001._metadata, IAgVAMarsGRAM2001._get_DragModelPluginName_metadata)

    _set_DragModelPluginName_metadata = { "name" : "DragModelPluginName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @DragModelPluginName.setter
    def DragModelPluginName(self, pVal:str) -> None:
        return self._intf.set_property(IAgVAMarsGRAM2001._metadata, IAgVAMarsGRAM2001._set_DragModelPluginName_metadata, pVal)

    _get_DragModelPlugin_metadata = { "name" : "DragModelPlugin",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def DragModelPlugin(self) -> "IAgVADragModelPlugin":
        """Drag model plugin properties."""
        return self._intf.get_property(IAgVAMarsGRAM2001._metadata, IAgVAMarsGRAM2001._get_DragModelPlugin_metadata)

    _get_VariableAreaHistoryFile_metadata = { "name" : "VariableAreaHistoryFile",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def VariableAreaHistoryFile(self) -> str:
        """Drag variable area history file."""
        return self._intf.get_property(IAgVAMarsGRAM2001._metadata, IAgVAMarsGRAM2001._get_VariableAreaHistoryFile_metadata)

    _set_VariableAreaHistoryFile_metadata = { "name" : "VariableAreaHistoryFile",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @VariableAreaHistoryFile.setter
    def VariableAreaHistoryFile(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAMarsGRAM2001._metadata, IAgVAMarsGRAM2001._set_VariableAreaHistoryFile_metadata, inVal)

    _get_NPlateDefinitionFile_metadata = { "name" : "NPlateDefinitionFile",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def NPlateDefinitionFile(self) -> str:
        """Drag N-Plate definition file."""
        return self._intf.get_property(IAgVAMarsGRAM2001._metadata, IAgVAMarsGRAM2001._get_NPlateDefinitionFile_metadata)

    _set_NPlateDefinitionFile_metadata = { "name" : "NPlateDefinitionFile",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @NPlateDefinitionFile.setter
    def NPlateDefinitionFile(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAMarsGRAM2001._metadata, IAgVAMarsGRAM2001._set_NPlateDefinitionFile_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{D9213F74-E8C9-4251-9BD6-FA0C0138AFCD}", IAgVAMarsGRAM2001)
agcls.AgTypeNameMap["IAgVAMarsGRAM2001"] = IAgVAMarsGRAM2001

class IAgVAMarsGRAM2000(object):
    """Properties for the Mars-GRAM 2000 atmospheric model."""
    _num_methods = 27
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{E3458F58-63AD-4974-9EDA-524E9418A1DF}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_UseApproximateAltitude" : 1,
                             "set_UseApproximateAltitude" : 2,
                             "get_ComputesTemperature" : 3,
                             "get_ComputesPressure" : 4,
                             "get_SunPosition" : 5,
                             "set_SunPosition" : 6,
                             "get_DataDirectory" : 7,
                             "set_DataDirectory" : 8,
                             "get_NamelistFile" : 9,
                             "set_NamelistFile" : 10,
                             "get_DensityType" : 11,
                             "set_DensityType" : 12,
                             "get_AtmosDataSource" : 13,
                             "set_AtmosDataSource" : 14,
                             "get_F10p7" : 15,
                             "set_F10p7" : 16,
                             "get_AtmosDataFilename" : 17,
                             "set_AtmosDataFilename" : 18,
                             "get_DragModelType" : 19,
                             "set_DragModelType" : 20,
                             "get_DragModelPluginName" : 21,
                             "set_DragModelPluginName" : 22,
                             "get_DragModelPlugin" : 23,
                             "get_VariableAreaHistoryFile" : 24,
                             "set_VariableAreaHistoryFile" : 25,
                             "get_NPlateDefinitionFile" : 26,
                             "set_NPlateDefinitionFile" : 27, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAMarsGRAM2000._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAMarsGRAM2000 from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAMarsGRAM2000.__dict__ and type(IAgVAMarsGRAM2000.__dict__[attrname]) == property:
            return IAgVAMarsGRAM2000.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAMarsGRAM2000.")
    
    _get_UseApproximateAltitude_metadata = { "name" : "UseApproximateAltitude",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def UseApproximateAltitude(self) -> bool:
        """True if using approximate altitude formula."""
        return self._intf.get_property(IAgVAMarsGRAM2000._metadata, IAgVAMarsGRAM2000._get_UseApproximateAltitude_metadata)

    _set_UseApproximateAltitude_metadata = { "name" : "UseApproximateAltitude",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @UseApproximateAltitude.setter
    def UseApproximateAltitude(self, inVal:bool) -> None:
        return self._intf.set_property(IAgVAMarsGRAM2000._metadata, IAgVAMarsGRAM2000._set_UseApproximateAltitude_metadata, inVal)

    _get_ComputesTemperature_metadata = { "name" : "ComputesTemperature",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def ComputesTemperature(self) -> bool:
        """Flag indicates whether this model computes temperature."""
        return self._intf.get_property(IAgVAMarsGRAM2000._metadata, IAgVAMarsGRAM2000._get_ComputesTemperature_metadata)

    _get_ComputesPressure_metadata = { "name" : "ComputesPressure",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def ComputesPressure(self) -> bool:
        """Flag indicates whether this model computes pressure."""
        return self._intf.get_property(IAgVAMarsGRAM2000._metadata, IAgVAMarsGRAM2000._get_ComputesPressure_metadata)

    _get_SunPosition_metadata = { "name" : "SunPosition",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVASunPosition),) }
    @property
    def SunPosition(self) -> "AgEVASunPosition":
        """The sun position computation."""
        return self._intf.get_property(IAgVAMarsGRAM2000._metadata, IAgVAMarsGRAM2000._get_SunPosition_metadata)

    _set_SunPosition_metadata = { "name" : "SunPosition",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVASunPosition),) }
    @SunPosition.setter
    def SunPosition(self, inVal:"AgEVASunPosition") -> None:
        return self._intf.set_property(IAgVAMarsGRAM2000._metadata, IAgVAMarsGRAM2000._set_SunPosition_metadata, inVal)

    _get_DataDirectory_metadata = { "name" : "DataDirectory",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def DataDirectory(self) -> str:
        """Path to the data directory."""
        return self._intf.get_property(IAgVAMarsGRAM2000._metadata, IAgVAMarsGRAM2000._get_DataDirectory_metadata)

    _set_DataDirectory_metadata = { "name" : "DataDirectory",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @DataDirectory.setter
    def DataDirectory(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAMarsGRAM2000._metadata, IAgVAMarsGRAM2000._set_DataDirectory_metadata, inVal)

    _get_NamelistFile_metadata = { "name" : "NamelistFile",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def NamelistFile(self) -> str:
        """Full path of namelist file."""
        return self._intf.get_property(IAgVAMarsGRAM2000._metadata, IAgVAMarsGRAM2000._get_NamelistFile_metadata)

    _set_NamelistFile_metadata = { "name" : "NamelistFile",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @NamelistFile.setter
    def NamelistFile(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAMarsGRAM2000._metadata, IAgVAMarsGRAM2000._set_NamelistFile_metadata, inVal)

    _get_DensityType_metadata = { "name" : "DensityType",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAMarsGRAMDensityType),) }
    @property
    def DensityType(self) -> "AgEVAMarsGRAMDensityType":
        """Low, mean, high or randomly perturbed density type."""
        return self._intf.get_property(IAgVAMarsGRAM2000._metadata, IAgVAMarsGRAM2000._get_DensityType_metadata)

    _set_DensityType_metadata = { "name" : "DensityType",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAMarsGRAMDensityType),) }
    @DensityType.setter
    def DensityType(self, inVal:"AgEVAMarsGRAMDensityType") -> None:
        return self._intf.set_property(IAgVAMarsGRAM2000._metadata, IAgVAMarsGRAM2000._set_DensityType_metadata, inVal)

    _get_AtmosDataSource_metadata = { "name" : "AtmosDataSource",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAAtmosDataSource),) }
    @property
    def AtmosDataSource(self) -> "AgEVAAtmosDataSource":
        """The atmospheric model data source - data file or constant values."""
        return self._intf.get_property(IAgVAMarsGRAM2000._metadata, IAgVAMarsGRAM2000._get_AtmosDataSource_metadata)

    _set_AtmosDataSource_metadata = { "name" : "AtmosDataSource",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAAtmosDataSource),) }
    @AtmosDataSource.setter
    def AtmosDataSource(self, inVal:"AgEVAAtmosDataSource") -> None:
        return self._intf.set_property(IAgVAMarsGRAM2000._metadata, IAgVAMarsGRAM2000._set_AtmosDataSource_metadata, inVal)

    _get_F10p7_metadata = { "name" : "F10p7",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def F10p7(self) -> float:
        """Solar Flux (F10.7); the daily Ottawa 10.7 cm solar flux value. Dimensionless."""
        return self._intf.get_property(IAgVAMarsGRAM2000._metadata, IAgVAMarsGRAM2000._get_F10p7_metadata)

    _set_F10p7_metadata = { "name" : "F10p7",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @F10p7.setter
    def F10p7(self, inVal:float) -> None:
        return self._intf.set_property(IAgVAMarsGRAM2000._metadata, IAgVAMarsGRAM2000._set_F10p7_metadata, inVal)

    _get_AtmosDataFilename_metadata = { "name" : "AtmosDataFilename",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def AtmosDataFilename(self) -> str:
        """The atmospheric model data file path."""
        return self._intf.get_property(IAgVAMarsGRAM2000._metadata, IAgVAMarsGRAM2000._get_AtmosDataFilename_metadata)

    _set_AtmosDataFilename_metadata = { "name" : "AtmosDataFilename",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @AtmosDataFilename.setter
    def AtmosDataFilename(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAMarsGRAM2000._metadata, IAgVAMarsGRAM2000._set_AtmosDataFilename_metadata, inVal)

    _get_DragModelType_metadata = { "name" : "DragModelType",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVADragModelType),) }
    @property
    def DragModelType(self) -> "AgEVADragModelType":
        """Drag model type."""
        return self._intf.get_property(IAgVAMarsGRAM2000._metadata, IAgVAMarsGRAM2000._get_DragModelType_metadata)

    _set_DragModelType_metadata = { "name" : "DragModelType",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVADragModelType),) }
    @DragModelType.setter
    def DragModelType(self, inVal:"AgEVADragModelType") -> None:
        return self._intf.set_property(IAgVAMarsGRAM2000._metadata, IAgVAMarsGRAM2000._set_DragModelType_metadata, inVal)

    _get_DragModelPluginName_metadata = { "name" : "DragModelPluginName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def DragModelPluginName(self) -> str:
        """The name of the drag model plugin."""
        return self._intf.get_property(IAgVAMarsGRAM2000._metadata, IAgVAMarsGRAM2000._get_DragModelPluginName_metadata)

    _set_DragModelPluginName_metadata = { "name" : "DragModelPluginName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @DragModelPluginName.setter
    def DragModelPluginName(self, pVal:str) -> None:
        return self._intf.set_property(IAgVAMarsGRAM2000._metadata, IAgVAMarsGRAM2000._set_DragModelPluginName_metadata, pVal)

    _get_DragModelPlugin_metadata = { "name" : "DragModelPlugin",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def DragModelPlugin(self) -> "IAgVADragModelPlugin":
        """Drag model plugin properties."""
        return self._intf.get_property(IAgVAMarsGRAM2000._metadata, IAgVAMarsGRAM2000._get_DragModelPlugin_metadata)

    _get_VariableAreaHistoryFile_metadata = { "name" : "VariableAreaHistoryFile",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def VariableAreaHistoryFile(self) -> str:
        """Drag variable area history file."""
        return self._intf.get_property(IAgVAMarsGRAM2000._metadata, IAgVAMarsGRAM2000._get_VariableAreaHistoryFile_metadata)

    _set_VariableAreaHistoryFile_metadata = { "name" : "VariableAreaHistoryFile",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @VariableAreaHistoryFile.setter
    def VariableAreaHistoryFile(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAMarsGRAM2000._metadata, IAgVAMarsGRAM2000._set_VariableAreaHistoryFile_metadata, inVal)

    _get_NPlateDefinitionFile_metadata = { "name" : "NPlateDefinitionFile",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def NPlateDefinitionFile(self) -> str:
        """Drag N-Plate definition file."""
        return self._intf.get_property(IAgVAMarsGRAM2000._metadata, IAgVAMarsGRAM2000._get_NPlateDefinitionFile_metadata)

    _set_NPlateDefinitionFile_metadata = { "name" : "NPlateDefinitionFile",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @NPlateDefinitionFile.setter
    def NPlateDefinitionFile(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAMarsGRAM2000._metadata, IAgVAMarsGRAM2000._set_NPlateDefinitionFile_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{E3458F58-63AD-4974-9EDA-524E9418A1DF}", IAgVAMarsGRAM2000)
agcls.AgTypeNameMap["IAgVAMarsGRAM2000"] = IAgVAMarsGRAM2000

class IAgVADTM2012(object):
    """Properties for the DTM 2012 atmospheric model."""
    _num_methods = 29
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{4840E65F-6197-4A64-A80A-E0DF1E1048E0}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_UseApproximateAltitude" : 1,
                             "set_UseApproximateAltitude" : 2,
                             "get_ComputesTemperature" : 3,
                             "get_ComputesPressure" : 4,
                             "get_SunPosition" : 5,
                             "set_SunPosition" : 6,
                             "get_AtmosDataSource" : 7,
                             "set_AtmosDataSource" : 8,
                             "get_F10p7Avg" : 9,
                             "set_F10p7Avg" : 10,
                             "get_AtmosDataFilename" : 11,
                             "set_AtmosDataFilename" : 12,
                             "get_DragModelType" : 13,
                             "set_DragModelType" : 14,
                             "get_DragModelPluginName" : 15,
                             "set_DragModelPluginName" : 16,
                             "get_DragModelPlugin" : 17,
                             "get_F10p7" : 18,
                             "set_F10p7" : 19,
                             "get_Kp" : 20,
                             "set_Kp" : 21,
                             "get_AtmosDataGeoMagneticFluxSource" : 22,
                             "set_AtmosDataGeoMagneticFluxSource" : 23,
                             "get_AtmosDataGeoMagneticFluxUpdateRate" : 24,
                             "set_AtmosDataGeoMagneticFluxUpdateRate" : 25,
                             "get_VariableAreaHistoryFile" : 26,
                             "set_VariableAreaHistoryFile" : 27,
                             "get_NPlateDefinitionFile" : 28,
                             "set_NPlateDefinitionFile" : 29, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVADTM2012._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVADTM2012 from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVADTM2012.__dict__ and type(IAgVADTM2012.__dict__[attrname]) == property:
            return IAgVADTM2012.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVADTM2012.")
    
    _get_UseApproximateAltitude_metadata = { "name" : "UseApproximateAltitude",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def UseApproximateAltitude(self) -> bool:
        """True if using approximate altitude formula."""
        return self._intf.get_property(IAgVADTM2012._metadata, IAgVADTM2012._get_UseApproximateAltitude_metadata)

    _set_UseApproximateAltitude_metadata = { "name" : "UseApproximateAltitude",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @UseApproximateAltitude.setter
    def UseApproximateAltitude(self, inVal:bool) -> None:
        return self._intf.set_property(IAgVADTM2012._metadata, IAgVADTM2012._set_UseApproximateAltitude_metadata, inVal)

    _get_ComputesTemperature_metadata = { "name" : "ComputesTemperature",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def ComputesTemperature(self) -> bool:
        """Flag indicates whether this model computes temperature."""
        return self._intf.get_property(IAgVADTM2012._metadata, IAgVADTM2012._get_ComputesTemperature_metadata)

    _get_ComputesPressure_metadata = { "name" : "ComputesPressure",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def ComputesPressure(self) -> bool:
        """Flag indicates whether this model computes pressure."""
        return self._intf.get_property(IAgVADTM2012._metadata, IAgVADTM2012._get_ComputesPressure_metadata)

    _get_SunPosition_metadata = { "name" : "SunPosition",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVASunPosition),) }
    @property
    def SunPosition(self) -> "AgEVASunPosition":
        """The sun position computation."""
        return self._intf.get_property(IAgVADTM2012._metadata, IAgVADTM2012._get_SunPosition_metadata)

    _set_SunPosition_metadata = { "name" : "SunPosition",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVASunPosition),) }
    @SunPosition.setter
    def SunPosition(self, inVal:"AgEVASunPosition") -> None:
        return self._intf.set_property(IAgVADTM2012._metadata, IAgVADTM2012._set_SunPosition_metadata, inVal)

    _get_AtmosDataSource_metadata = { "name" : "AtmosDataSource",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAAtmosDataSource),) }
    @property
    def AtmosDataSource(self) -> "AgEVAAtmosDataSource":
        """The atmospheric model data source - data file or constant values."""
        return self._intf.get_property(IAgVADTM2012._metadata, IAgVADTM2012._get_AtmosDataSource_metadata)

    _set_AtmosDataSource_metadata = { "name" : "AtmosDataSource",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAAtmosDataSource),) }
    @AtmosDataSource.setter
    def AtmosDataSource(self, inVal:"AgEVAAtmosDataSource") -> None:
        return self._intf.set_property(IAgVADTM2012._metadata, IAgVADTM2012._set_AtmosDataSource_metadata, inVal)

    _get_F10p7Avg_metadata = { "name" : "F10p7Avg",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def F10p7Avg(self) -> float:
        """Average solar Flux (F10.7); the 81-day averaged Ottawa 10.7 cm solar flux value. Dimensionless."""
        return self._intf.get_property(IAgVADTM2012._metadata, IAgVADTM2012._get_F10p7Avg_metadata)

    _set_F10p7Avg_metadata = { "name" : "F10p7Avg",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @F10p7Avg.setter
    def F10p7Avg(self, inVal:float) -> None:
        return self._intf.set_property(IAgVADTM2012._metadata, IAgVADTM2012._set_F10p7Avg_metadata, inVal)

    _get_AtmosDataFilename_metadata = { "name" : "AtmosDataFilename",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def AtmosDataFilename(self) -> str:
        """Flux file."""
        return self._intf.get_property(IAgVADTM2012._metadata, IAgVADTM2012._get_AtmosDataFilename_metadata)

    _set_AtmosDataFilename_metadata = { "name" : "AtmosDataFilename",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @AtmosDataFilename.setter
    def AtmosDataFilename(self, inVal:str) -> None:
        return self._intf.set_property(IAgVADTM2012._metadata, IAgVADTM2012._set_AtmosDataFilename_metadata, inVal)

    _get_DragModelType_metadata = { "name" : "DragModelType",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVADragModelType),) }
    @property
    def DragModelType(self) -> "AgEVADragModelType":
        """Drag model type."""
        return self._intf.get_property(IAgVADTM2012._metadata, IAgVADTM2012._get_DragModelType_metadata)

    _set_DragModelType_metadata = { "name" : "DragModelType",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVADragModelType),) }
    @DragModelType.setter
    def DragModelType(self, inVal:"AgEVADragModelType") -> None:
        return self._intf.set_property(IAgVADTM2012._metadata, IAgVADTM2012._set_DragModelType_metadata, inVal)

    _get_DragModelPluginName_metadata = { "name" : "DragModelPluginName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def DragModelPluginName(self) -> str:
        """The name of the drag model plugin."""
        return self._intf.get_property(IAgVADTM2012._metadata, IAgVADTM2012._get_DragModelPluginName_metadata)

    _set_DragModelPluginName_metadata = { "name" : "DragModelPluginName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @DragModelPluginName.setter
    def DragModelPluginName(self, pVal:str) -> None:
        return self._intf.set_property(IAgVADTM2012._metadata, IAgVADTM2012._set_DragModelPluginName_metadata, pVal)

    _get_DragModelPlugin_metadata = { "name" : "DragModelPlugin",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def DragModelPlugin(self) -> "IAgVADragModelPlugin":
        """Drag model plugin properties."""
        return self._intf.get_property(IAgVADTM2012._metadata, IAgVADTM2012._get_DragModelPlugin_metadata)

    _get_F10p7_metadata = { "name" : "F10p7",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def F10p7(self) -> float:
        """Solar Flux (F10.7); the daily Ottawa 10.7 cm solar flux value. Dimensionless."""
        return self._intf.get_property(IAgVADTM2012._metadata, IAgVADTM2012._get_F10p7_metadata)

    _set_F10p7_metadata = { "name" : "F10p7",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @F10p7.setter
    def F10p7(self, inVal:float) -> None:
        return self._intf.set_property(IAgVADTM2012._metadata, IAgVADTM2012._set_F10p7_metadata, inVal)

    _get_Kp_metadata = { "name" : "Kp",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def Kp(self) -> float:
        """Geomagnetic Index (Kp). Dimensionless."""
        return self._intf.get_property(IAgVADTM2012._metadata, IAgVADTM2012._get_Kp_metadata)

    _set_Kp_metadata = { "name" : "Kp",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @Kp.setter
    def Kp(self, inVal:float) -> None:
        return self._intf.set_property(IAgVADTM2012._metadata, IAgVADTM2012._set_Kp_metadata, inVal)

    _get_AtmosDataGeoMagneticFluxSource_metadata = { "name" : "AtmosDataGeoMagneticFluxSource",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAGeoMagneticFluxSource),) }
    @property
    def AtmosDataGeoMagneticFluxSource(self) -> "AgEVAGeoMagneticFluxSource":
        """Whether to use Kp or Ap data from the flux file."""
        return self._intf.get_property(IAgVADTM2012._metadata, IAgVADTM2012._get_AtmosDataGeoMagneticFluxSource_metadata)

    _set_AtmosDataGeoMagneticFluxSource_metadata = { "name" : "AtmosDataGeoMagneticFluxSource",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAGeoMagneticFluxSource),) }
    @AtmosDataGeoMagneticFluxSource.setter
    def AtmosDataGeoMagneticFluxSource(self, inVal:"AgEVAGeoMagneticFluxSource") -> None:
        return self._intf.set_property(IAgVADTM2012._metadata, IAgVADTM2012._set_AtmosDataGeoMagneticFluxSource_metadata, inVal)

    _get_AtmosDataGeoMagneticFluxUpdateRate_metadata = { "name" : "AtmosDataGeoMagneticFluxUpdateRate",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAGeoMagneticFluxUpdateRate),) }
    @property
    def AtmosDataGeoMagneticFluxUpdateRate(self) -> "AgEVAGeoMagneticFluxUpdateRate":
        """The update rate of geomagnetic flux values from the flux file."""
        return self._intf.get_property(IAgVADTM2012._metadata, IAgVADTM2012._get_AtmosDataGeoMagneticFluxUpdateRate_metadata)

    _set_AtmosDataGeoMagneticFluxUpdateRate_metadata = { "name" : "AtmosDataGeoMagneticFluxUpdateRate",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAGeoMagneticFluxUpdateRate),) }
    @AtmosDataGeoMagneticFluxUpdateRate.setter
    def AtmosDataGeoMagneticFluxUpdateRate(self, inVal:"AgEVAGeoMagneticFluxUpdateRate") -> None:
        return self._intf.set_property(IAgVADTM2012._metadata, IAgVADTM2012._set_AtmosDataGeoMagneticFluxUpdateRate_metadata, inVal)

    _get_VariableAreaHistoryFile_metadata = { "name" : "VariableAreaHistoryFile",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def VariableAreaHistoryFile(self) -> str:
        """Drag variable area history file."""
        return self._intf.get_property(IAgVADTM2012._metadata, IAgVADTM2012._get_VariableAreaHistoryFile_metadata)

    _set_VariableAreaHistoryFile_metadata = { "name" : "VariableAreaHistoryFile",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @VariableAreaHistoryFile.setter
    def VariableAreaHistoryFile(self, inVal:str) -> None:
        return self._intf.set_property(IAgVADTM2012._metadata, IAgVADTM2012._set_VariableAreaHistoryFile_metadata, inVal)

    _get_NPlateDefinitionFile_metadata = { "name" : "NPlateDefinitionFile",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def NPlateDefinitionFile(self) -> str:
        """Drag N-Plate definition file."""
        return self._intf.get_property(IAgVADTM2012._metadata, IAgVADTM2012._get_NPlateDefinitionFile_metadata)

    _set_NPlateDefinitionFile_metadata = { "name" : "NPlateDefinitionFile",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @NPlateDefinitionFile.setter
    def NPlateDefinitionFile(self, inVal:str) -> None:
        return self._intf.set_property(IAgVADTM2012._metadata, IAgVADTM2012._set_NPlateDefinitionFile_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{4840E65F-6197-4A64-A80A-E0DF1E1048E0}", IAgVADTM2012)
agcls.AgTypeNameMap["IAgVADTM2012"] = IAgVADTM2012

class IAgVADTM2020(object):
    """Properties for the DTM 2020 atmospheric model."""
    _num_methods = 29
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{50AA8B32-1905-416D-B45E-631E78F5F174}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_UseApproximateAltitude" : 1,
                             "set_UseApproximateAltitude" : 2,
                             "get_ComputesTemperature" : 3,
                             "get_ComputesPressure" : 4,
                             "get_SunPosition" : 5,
                             "set_SunPosition" : 6,
                             "get_AtmosDataSource" : 7,
                             "set_AtmosDataSource" : 8,
                             "get_F10p7Avg" : 9,
                             "set_F10p7Avg" : 10,
                             "get_AtmosDataFilename" : 11,
                             "set_AtmosDataFilename" : 12,
                             "get_DragModelType" : 13,
                             "set_DragModelType" : 14,
                             "get_DragModelPluginName" : 15,
                             "set_DragModelPluginName" : 16,
                             "get_DragModelPlugin" : 17,
                             "get_F10p7" : 18,
                             "set_F10p7" : 19,
                             "get_Kp" : 20,
                             "set_Kp" : 21,
                             "get_AtmosDataGeoMagneticFluxSource" : 22,
                             "set_AtmosDataGeoMagneticFluxSource" : 23,
                             "get_AtmosDataGeoMagneticFluxUpdateRate" : 24,
                             "set_AtmosDataGeoMagneticFluxUpdateRate" : 25,
                             "get_VariableAreaHistoryFile" : 26,
                             "set_VariableAreaHistoryFile" : 27,
                             "get_NPlateDefinitionFile" : 28,
                             "set_NPlateDefinitionFile" : 29, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVADTM2020._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVADTM2020 from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVADTM2020.__dict__ and type(IAgVADTM2020.__dict__[attrname]) == property:
            return IAgVADTM2020.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVADTM2020.")
    
    _get_UseApproximateAltitude_metadata = { "name" : "UseApproximateAltitude",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def UseApproximateAltitude(self) -> bool:
        """True if using approximate altitude formula."""
        return self._intf.get_property(IAgVADTM2020._metadata, IAgVADTM2020._get_UseApproximateAltitude_metadata)

    _set_UseApproximateAltitude_metadata = { "name" : "UseApproximateAltitude",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @UseApproximateAltitude.setter
    def UseApproximateAltitude(self, inVal:bool) -> None:
        return self._intf.set_property(IAgVADTM2020._metadata, IAgVADTM2020._set_UseApproximateAltitude_metadata, inVal)

    _get_ComputesTemperature_metadata = { "name" : "ComputesTemperature",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def ComputesTemperature(self) -> bool:
        """Flag indicates whether this model computes temperature."""
        return self._intf.get_property(IAgVADTM2020._metadata, IAgVADTM2020._get_ComputesTemperature_metadata)

    _get_ComputesPressure_metadata = { "name" : "ComputesPressure",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def ComputesPressure(self) -> bool:
        """Flag indicates whether this model computes pressure."""
        return self._intf.get_property(IAgVADTM2020._metadata, IAgVADTM2020._get_ComputesPressure_metadata)

    _get_SunPosition_metadata = { "name" : "SunPosition",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVASunPosition),) }
    @property
    def SunPosition(self) -> "AgEVASunPosition":
        """The sun position computation."""
        return self._intf.get_property(IAgVADTM2020._metadata, IAgVADTM2020._get_SunPosition_metadata)

    _set_SunPosition_metadata = { "name" : "SunPosition",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVASunPosition),) }
    @SunPosition.setter
    def SunPosition(self, inVal:"AgEVASunPosition") -> None:
        return self._intf.set_property(IAgVADTM2020._metadata, IAgVADTM2020._set_SunPosition_metadata, inVal)

    _get_AtmosDataSource_metadata = { "name" : "AtmosDataSource",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAAtmosDataSource),) }
    @property
    def AtmosDataSource(self) -> "AgEVAAtmosDataSource":
        """The atmospheric model data source - data file or constant values."""
        return self._intf.get_property(IAgVADTM2020._metadata, IAgVADTM2020._get_AtmosDataSource_metadata)

    _set_AtmosDataSource_metadata = { "name" : "AtmosDataSource",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAAtmosDataSource),) }
    @AtmosDataSource.setter
    def AtmosDataSource(self, inVal:"AgEVAAtmosDataSource") -> None:
        return self._intf.set_property(IAgVADTM2020._metadata, IAgVADTM2020._set_AtmosDataSource_metadata, inVal)

    _get_F10p7Avg_metadata = { "name" : "F10p7Avg",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def F10p7Avg(self) -> float:
        """Average solar Flux (F10.7); the 81-day averaged Ottawa 10.7 cm solar flux value. Dimensionless."""
        return self._intf.get_property(IAgVADTM2020._metadata, IAgVADTM2020._get_F10p7Avg_metadata)

    _set_F10p7Avg_metadata = { "name" : "F10p7Avg",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @F10p7Avg.setter
    def F10p7Avg(self, inVal:float) -> None:
        return self._intf.set_property(IAgVADTM2020._metadata, IAgVADTM2020._set_F10p7Avg_metadata, inVal)

    _get_AtmosDataFilename_metadata = { "name" : "AtmosDataFilename",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def AtmosDataFilename(self) -> str:
        """Flux file."""
        return self._intf.get_property(IAgVADTM2020._metadata, IAgVADTM2020._get_AtmosDataFilename_metadata)

    _set_AtmosDataFilename_metadata = { "name" : "AtmosDataFilename",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @AtmosDataFilename.setter
    def AtmosDataFilename(self, inVal:str) -> None:
        return self._intf.set_property(IAgVADTM2020._metadata, IAgVADTM2020._set_AtmosDataFilename_metadata, inVal)

    _get_DragModelType_metadata = { "name" : "DragModelType",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVADragModelType),) }
    @property
    def DragModelType(self) -> "AgEVADragModelType":
        """Drag model type."""
        return self._intf.get_property(IAgVADTM2020._metadata, IAgVADTM2020._get_DragModelType_metadata)

    _set_DragModelType_metadata = { "name" : "DragModelType",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVADragModelType),) }
    @DragModelType.setter
    def DragModelType(self, inVal:"AgEVADragModelType") -> None:
        return self._intf.set_property(IAgVADTM2020._metadata, IAgVADTM2020._set_DragModelType_metadata, inVal)

    _get_DragModelPluginName_metadata = { "name" : "DragModelPluginName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def DragModelPluginName(self) -> str:
        """The name of the drag model plugin."""
        return self._intf.get_property(IAgVADTM2020._metadata, IAgVADTM2020._get_DragModelPluginName_metadata)

    _set_DragModelPluginName_metadata = { "name" : "DragModelPluginName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @DragModelPluginName.setter
    def DragModelPluginName(self, pVal:str) -> None:
        return self._intf.set_property(IAgVADTM2020._metadata, IAgVADTM2020._set_DragModelPluginName_metadata, pVal)

    _get_DragModelPlugin_metadata = { "name" : "DragModelPlugin",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def DragModelPlugin(self) -> "IAgVADragModelPlugin":
        """Drag model plugin properties."""
        return self._intf.get_property(IAgVADTM2020._metadata, IAgVADTM2020._get_DragModelPlugin_metadata)

    _get_F10p7_metadata = { "name" : "F10p7",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def F10p7(self) -> float:
        """Solar Flux (F10.7); the daily Ottawa 10.7 cm solar flux value. Dimensionless."""
        return self._intf.get_property(IAgVADTM2020._metadata, IAgVADTM2020._get_F10p7_metadata)

    _set_F10p7_metadata = { "name" : "F10p7",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @F10p7.setter
    def F10p7(self, inVal:float) -> None:
        return self._intf.set_property(IAgVADTM2020._metadata, IAgVADTM2020._set_F10p7_metadata, inVal)

    _get_Kp_metadata = { "name" : "Kp",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def Kp(self) -> float:
        """Geomagnetic Index (Kp). Dimensionless."""
        return self._intf.get_property(IAgVADTM2020._metadata, IAgVADTM2020._get_Kp_metadata)

    _set_Kp_metadata = { "name" : "Kp",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @Kp.setter
    def Kp(self, inVal:float) -> None:
        return self._intf.set_property(IAgVADTM2020._metadata, IAgVADTM2020._set_Kp_metadata, inVal)

    _get_AtmosDataGeoMagneticFluxSource_metadata = { "name" : "AtmosDataGeoMagneticFluxSource",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAGeoMagneticFluxSource),) }
    @property
    def AtmosDataGeoMagneticFluxSource(self) -> "AgEVAGeoMagneticFluxSource":
        """Whether to use Kp or Ap data from the flux file."""
        return self._intf.get_property(IAgVADTM2020._metadata, IAgVADTM2020._get_AtmosDataGeoMagneticFluxSource_metadata)

    _set_AtmosDataGeoMagneticFluxSource_metadata = { "name" : "AtmosDataGeoMagneticFluxSource",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAGeoMagneticFluxSource),) }
    @AtmosDataGeoMagneticFluxSource.setter
    def AtmosDataGeoMagneticFluxSource(self, inVal:"AgEVAGeoMagneticFluxSource") -> None:
        return self._intf.set_property(IAgVADTM2020._metadata, IAgVADTM2020._set_AtmosDataGeoMagneticFluxSource_metadata, inVal)

    _get_AtmosDataGeoMagneticFluxUpdateRate_metadata = { "name" : "AtmosDataGeoMagneticFluxUpdateRate",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAGeoMagneticFluxUpdateRate),) }
    @property
    def AtmosDataGeoMagneticFluxUpdateRate(self) -> "AgEVAGeoMagneticFluxUpdateRate":
        """The update rate of geomagnetic flux values from the flux file."""
        return self._intf.get_property(IAgVADTM2020._metadata, IAgVADTM2020._get_AtmosDataGeoMagneticFluxUpdateRate_metadata)

    _set_AtmosDataGeoMagneticFluxUpdateRate_metadata = { "name" : "AtmosDataGeoMagneticFluxUpdateRate",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAGeoMagneticFluxUpdateRate),) }
    @AtmosDataGeoMagneticFluxUpdateRate.setter
    def AtmosDataGeoMagneticFluxUpdateRate(self, inVal:"AgEVAGeoMagneticFluxUpdateRate") -> None:
        return self._intf.set_property(IAgVADTM2020._metadata, IAgVADTM2020._set_AtmosDataGeoMagneticFluxUpdateRate_metadata, inVal)

    _get_VariableAreaHistoryFile_metadata = { "name" : "VariableAreaHistoryFile",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def VariableAreaHistoryFile(self) -> str:
        """Drag variable area history file."""
        return self._intf.get_property(IAgVADTM2020._metadata, IAgVADTM2020._get_VariableAreaHistoryFile_metadata)

    _set_VariableAreaHistoryFile_metadata = { "name" : "VariableAreaHistoryFile",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @VariableAreaHistoryFile.setter
    def VariableAreaHistoryFile(self, inVal:str) -> None:
        return self._intf.set_property(IAgVADTM2020._metadata, IAgVADTM2020._set_VariableAreaHistoryFile_metadata, inVal)

    _get_NPlateDefinitionFile_metadata = { "name" : "NPlateDefinitionFile",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def NPlateDefinitionFile(self) -> str:
        """Drag N-Plate definition file."""
        return self._intf.get_property(IAgVADTM2020._metadata, IAgVADTM2020._get_NPlateDefinitionFile_metadata)

    _set_NPlateDefinitionFile_metadata = { "name" : "NPlateDefinitionFile",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @NPlateDefinitionFile.setter
    def NPlateDefinitionFile(self, inVal:str) -> None:
        return self._intf.set_property(IAgVADTM2020._metadata, IAgVADTM2020._set_NPlateDefinitionFile_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{50AA8B32-1905-416D-B45E-631E78F5F174}", IAgVADTM2020)
agcls.AgTypeNameMap["IAgVADTM2020"] = IAgVADTM2020

class IAgVAGravityFieldFunction(object):
    """Properties for the Gravitational Force gravity model - a complex gravitational force calculation, optionally including solid and ocean tide effects."""
    _num_methods = 35
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{B199E3B6-9964-4CAA-A824-1F106886E0DE}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_GravityFilename" : 1,
                             "set_GravityFilename" : 2,
                             "get_Degree" : 3,
                             "set_Degree" : 4,
                             "get_Order" : 5,
                             "set_Order" : 6,
                             "get_MaxDegreeText" : 7,
                             "get_MaxOrderText" : 8,
                             "get_IncludeTimeDependentSolidTides" : 9,
                             "set_IncludeTimeDependentSolidTides" : 10,
                             "get_SolidTideMinAmp" : 11,
                             "set_SolidTideMinAmp" : 12,
                             "get_UseOceanTides" : 13,
                             "set_UseOceanTides" : 14,
                             "get_OceanTideMinAmp" : 15,
                             "set_OceanTideMinAmp" : 16,
                             "get_MinRadiusPercent" : 17,
                             "set_MinRadiusPercent" : 18,
                             "get_CentralBodyName" : 19,
                             "get_OceanTideMaxDegree" : 20,
                             "set_OceanTideMaxDegree" : 21,
                             "get_OceanTideMaxOrder" : 22,
                             "set_OceanTideMaxOrder" : 23,
                             "get_SolidTideType" : 24,
                             "set_SolidTideType" : 25,
                             "get_TruncateSolidTides" : 26,
                             "set_TruncateSolidTides" : 27,
                             "get_UseSecularVariations" : 28,
                             "set_UseSecularVariations" : 29,
                             "get_PartialsDegree" : 30,
                             "set_PartialsDegree" : 31,
                             "get_PartialsOrder" : 32,
                             "set_PartialsOrder" : 33,
                             "get_MaxPartialsDegreeText" : 34,
                             "get_MaxPartialsOrderText" : 35, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAGravityFieldFunction._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAGravityFieldFunction from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAGravityFieldFunction.__dict__ and type(IAgVAGravityFieldFunction.__dict__[attrname]) == property:
            return IAgVAGravityFieldFunction.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAGravityFieldFunction.")
    
    _get_GravityFilename_metadata = { "name" : "GravityFilename",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def GravityFilename(self) -> str:
        """The name of the file containing the gravity field."""
        return self._intf.get_property(IAgVAGravityFieldFunction._metadata, IAgVAGravityFieldFunction._get_GravityFilename_metadata)

    _set_GravityFilename_metadata = { "name" : "GravityFilename",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @GravityFilename.setter
    def GravityFilename(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAGravityFieldFunction._metadata, IAgVAGravityFieldFunction._set_GravityFilename_metadata, inVal)

    _get_Degree_metadata = { "name" : "Degree",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.LONG_arg,) }
    @property
    def Degree(self) -> int:
        """The degree of geopotential coefficients to be included for Central Body gravity computations. Valid range is from 0 to 90, depending on the gravity model. Dimensionless."""
        return self._intf.get_property(IAgVAGravityFieldFunction._metadata, IAgVAGravityFieldFunction._get_Degree_metadata)

    _set_Degree_metadata = { "name" : "Degree",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.LONG_arg,) }
    @Degree.setter
    def Degree(self, inVal:int) -> None:
        return self._intf.set_property(IAgVAGravityFieldFunction._metadata, IAgVAGravityFieldFunction._set_Degree_metadata, inVal)

    _get_Order_metadata = { "name" : "Order",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.LONG_arg,) }
    @property
    def Order(self) -> int:
        """The order of geopotential coefficients to be included for Central Body gravity computations. Valid range is from 0 to 90, depending on the gravity model. Dimensionless."""
        return self._intf.get_property(IAgVAGravityFieldFunction._metadata, IAgVAGravityFieldFunction._get_Order_metadata)

    _set_Order_metadata = { "name" : "Order",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.LONG_arg,) }
    @Order.setter
    def Order(self, inVal:int) -> None:
        return self._intf.set_property(IAgVAGravityFieldFunction._metadata, IAgVAGravityFieldFunction._set_Order_metadata, inVal)

    _get_MaxDegreeText_metadata = { "name" : "MaxDegreeText",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def MaxDegreeText(self) -> str:
        """Displays the maximum degree permissible for the gravity model."""
        return self._intf.get_property(IAgVAGravityFieldFunction._metadata, IAgVAGravityFieldFunction._get_MaxDegreeText_metadata)

    _get_MaxOrderText_metadata = { "name" : "MaxOrderText",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def MaxOrderText(self) -> str:
        """Displays the maximum order permissible for the gravity model."""
        return self._intf.get_property(IAgVAGravityFieldFunction._metadata, IAgVAGravityFieldFunction._get_MaxOrderText_metadata)

    _get_IncludeTimeDependentSolidTides_metadata = { "name" : "IncludeTimeDependentSolidTides",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def IncludeTimeDependentSolidTides(self) -> bool:
        """True if including time dependent solid tides."""
        return self._intf.get_property(IAgVAGravityFieldFunction._metadata, IAgVAGravityFieldFunction._get_IncludeTimeDependentSolidTides_metadata)

    _set_IncludeTimeDependentSolidTides_metadata = { "name" : "IncludeTimeDependentSolidTides",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @IncludeTimeDependentSolidTides.setter
    def IncludeTimeDependentSolidTides(self, inVal:bool) -> None:
        return self._intf.set_property(IAgVAGravityFieldFunction._metadata, IAgVAGravityFieldFunction._set_IncludeTimeDependentSolidTides_metadata, inVal)

    _get_SolidTideMinAmp_metadata = { "name" : "SolidTideMinAmp",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def SolidTideMinAmp(self) -> float:
        """The minimum amplitude for solid tides; contributors that are below the minimum amplitude will not be factored into the computation. Uses SmallDistance Dimension."""
        return self._intf.get_property(IAgVAGravityFieldFunction._metadata, IAgVAGravityFieldFunction._get_SolidTideMinAmp_metadata)

    _set_SolidTideMinAmp_metadata = { "name" : "SolidTideMinAmp",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @SolidTideMinAmp.setter
    def SolidTideMinAmp(self, inVal:float) -> None:
        return self._intf.set_property(IAgVAGravityFieldFunction._metadata, IAgVAGravityFieldFunction._set_SolidTideMinAmp_metadata, inVal)

    _get_UseOceanTides_metadata = { "name" : "UseOceanTides",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def UseOceanTides(self) -> bool:
        """True if using ocean tides/"""
        return self._intf.get_property(IAgVAGravityFieldFunction._metadata, IAgVAGravityFieldFunction._get_UseOceanTides_metadata)

    _set_UseOceanTides_metadata = { "name" : "UseOceanTides",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @UseOceanTides.setter
    def UseOceanTides(self, inVal:bool) -> None:
        return self._intf.set_property(IAgVAGravityFieldFunction._metadata, IAgVAGravityFieldFunction._set_UseOceanTides_metadata, inVal)

    _get_OceanTideMinAmp_metadata = { "name" : "OceanTideMinAmp",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def OceanTideMinAmp(self) -> float:
        """The minimum amplitude for ocean tides; contributors that are below the minimum amplitude will not be factored into the computation. Uses SmallDistance Dimension."""
        return self._intf.get_property(IAgVAGravityFieldFunction._metadata, IAgVAGravityFieldFunction._get_OceanTideMinAmp_metadata)

    _set_OceanTideMinAmp_metadata = { "name" : "OceanTideMinAmp",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @OceanTideMinAmp.setter
    def OceanTideMinAmp(self, inVal:float) -> None:
        return self._intf.set_property(IAgVAGravityFieldFunction._metadata, IAgVAGravityFieldFunction._set_OceanTideMinAmp_metadata, inVal)

    _get_MinRadiusPercent_metadata = { "name" : "MinRadiusPercent",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def MinRadiusPercent(self) -> float:
        """The percentage of the central body's minimum radius at which a modified force model (only the two-body force) will be used - provided there is no altitude stopping condition. Uses Percent Dimension."""
        return self._intf.get_property(IAgVAGravityFieldFunction._metadata, IAgVAGravityFieldFunction._get_MinRadiusPercent_metadata)

    _set_MinRadiusPercent_metadata = { "name" : "MinRadiusPercent",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @MinRadiusPercent.setter
    def MinRadiusPercent(self, inVal:float) -> None:
        return self._intf.set_property(IAgVAGravityFieldFunction._metadata, IAgVAGravityFieldFunction._set_MinRadiusPercent_metadata, inVal)

    _get_CentralBodyName_metadata = { "name" : "CentralBodyName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def CentralBodyName(self) -> str:
        """The name of the central body"""
        return self._intf.get_property(IAgVAGravityFieldFunction._metadata, IAgVAGravityFieldFunction._get_CentralBodyName_metadata)

    _get_OceanTideMaxDegree_metadata = { "name" : "OceanTideMaxDegree",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.LONG_arg,) }
    @property
    def OceanTideMaxDegree(self) -> int:
        """The maximum degree for force contributions from ocean tides that will be included in the computation. Dimensionless."""
        return self._intf.get_property(IAgVAGravityFieldFunction._metadata, IAgVAGravityFieldFunction._get_OceanTideMaxDegree_metadata)

    _set_OceanTideMaxDegree_metadata = { "name" : "OceanTideMaxDegree",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.LONG_arg,) }
    @OceanTideMaxDegree.setter
    def OceanTideMaxDegree(self, inVal:int) -> None:
        return self._intf.set_property(IAgVAGravityFieldFunction._metadata, IAgVAGravityFieldFunction._set_OceanTideMaxDegree_metadata, inVal)

    _get_OceanTideMaxOrder_metadata = { "name" : "OceanTideMaxOrder",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.LONG_arg,) }
    @property
    def OceanTideMaxOrder(self) -> int:
        """The maximum order for force contributions from ocean tides that will be included in the computation. Dimensionless."""
        return self._intf.get_property(IAgVAGravityFieldFunction._metadata, IAgVAGravityFieldFunction._get_OceanTideMaxOrder_metadata)

    _set_OceanTideMaxOrder_metadata = { "name" : "OceanTideMaxOrder",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.LONG_arg,) }
    @OceanTideMaxOrder.setter
    def OceanTideMaxOrder(self, inVal:int) -> None:
        return self._intf.set_property(IAgVAGravityFieldFunction._metadata, IAgVAGravityFieldFunction._set_OceanTideMaxOrder_metadata, inVal)

    _get_SolidTideType_metadata = { "name" : "SolidTideType",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgESolidTide),) }
    @property
    def SolidTideType(self) -> "AgESolidTide":
        """The type of solid tide contribution to be modeled."""
        return self._intf.get_property(IAgVAGravityFieldFunction._metadata, IAgVAGravityFieldFunction._get_SolidTideType_metadata)

    _set_SolidTideType_metadata = { "name" : "SolidTideType",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgESolidTide),) }
    @SolidTideType.setter
    def SolidTideType(self, solidTide:"AgESolidTide") -> None:
        return self._intf.set_property(IAgVAGravityFieldFunction._metadata, IAgVAGravityFieldFunction._set_SolidTideType_metadata, solidTide)

    _get_TruncateSolidTides_metadata = { "name" : "TruncateSolidTides",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def TruncateSolidTides(self) -> bool:
        """True if solid tide terms (including permanent tide) won't be included beyond the degree and order selected for the gravity model."""
        return self._intf.get_property(IAgVAGravityFieldFunction._metadata, IAgVAGravityFieldFunction._get_TruncateSolidTides_metadata)

    _set_TruncateSolidTides_metadata = { "name" : "TruncateSolidTides",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @TruncateSolidTides.setter
    def TruncateSolidTides(self, pVal:bool) -> None:
        return self._intf.set_property(IAgVAGravityFieldFunction._metadata, IAgVAGravityFieldFunction._set_TruncateSolidTides_metadata, pVal)

    _get_UseSecularVariations_metadata = { "name" : "UseSecularVariations",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def UseSecularVariations(self) -> bool:
        """Opt whether to include or ignore secular variations defined by the gravity field model."""
        return self._intf.get_property(IAgVAGravityFieldFunction._metadata, IAgVAGravityFieldFunction._get_UseSecularVariations_metadata)

    _set_UseSecularVariations_metadata = { "name" : "UseSecularVariations",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @UseSecularVariations.setter
    def UseSecularVariations(self, pVal:bool) -> None:
        return self._intf.set_property(IAgVAGravityFieldFunction._metadata, IAgVAGravityFieldFunction._set_UseSecularVariations_metadata, pVal)

    _get_PartialsDegree_metadata = { "name" : "PartialsDegree",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.LONG_arg,) }
    @property
    def PartialsDegree(self) -> int:
        """The degree of geopotential coefficients to be included for Central Body gravity state transition matrix computations. Valid range is from 0 to 90, depending on the gravity model and the degree used for state computations. Dimensionless."""
        return self._intf.get_property(IAgVAGravityFieldFunction._metadata, IAgVAGravityFieldFunction._get_PartialsDegree_metadata)

    _set_PartialsDegree_metadata = { "name" : "PartialsDegree",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.LONG_arg,) }
    @PartialsDegree.setter
    def PartialsDegree(self, inVal:int) -> None:
        return self._intf.set_property(IAgVAGravityFieldFunction._metadata, IAgVAGravityFieldFunction._set_PartialsDegree_metadata, inVal)

    _get_PartialsOrder_metadata = { "name" : "PartialsOrder",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.LONG_arg,) }
    @property
    def PartialsOrder(self) -> int:
        """The order of geopotential coefficients to be included for Central Body gravity state transition matrix computations. Valid range is from 0 to 90, depending on the gravity model and the order used for state computations. Dimensionless."""
        return self._intf.get_property(IAgVAGravityFieldFunction._metadata, IAgVAGravityFieldFunction._get_PartialsOrder_metadata)

    _set_PartialsOrder_metadata = { "name" : "PartialsOrder",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.LONG_arg,) }
    @PartialsOrder.setter
    def PartialsOrder(self, inVal:int) -> None:
        return self._intf.set_property(IAgVAGravityFieldFunction._metadata, IAgVAGravityFieldFunction._set_PartialsOrder_metadata, inVal)

    _get_MaxPartialsDegreeText_metadata = { "name" : "MaxPartialsDegreeText",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def MaxPartialsDegreeText(self) -> str:
        """Displays the maximum degree permissible for the gravity model partials used in the STM."""
        return self._intf.get_property(IAgVAGravityFieldFunction._metadata, IAgVAGravityFieldFunction._get_MaxPartialsDegreeText_metadata)

    _get_MaxPartialsOrderText_metadata = { "name" : "MaxPartialsOrderText",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def MaxPartialsOrderText(self) -> str:
        """Displays the maximum order permissible for the gravity model partials used in the STM."""
        return self._intf.get_property(IAgVAGravityFieldFunction._metadata, IAgVAGravityFieldFunction._get_MaxPartialsOrderText_metadata)


agcls.AgClassCatalog.add_catalog_entry("{B199E3B6-9964-4CAA-A824-1F106886E0DE}", IAgVAGravityFieldFunction)
agcls.AgTypeNameMap["IAgVAGravityFieldFunction"] = IAgVAGravityFieldFunction

class IAgVAPointMassFunction(object):
    """Properties for the Point Mass Function."""
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{DF0A48DA-12AA-4BCF-A9E1-CDE80A2C89A3}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_GravSource" : 1,
                             "set_GravSource" : 2,
                             "get_Mu" : 3,
                             "set_Mu" : 4, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAPointMassFunction._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAPointMassFunction from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAPointMassFunction.__dict__ and type(IAgVAPointMassFunction.__dict__[attrname]) == property:
            return IAgVAPointMassFunction.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAPointMassFunction.")
    
    _get_GravSource_metadata = { "name" : "GravSource",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAGravParamSource),) }
    @property
    def GravSource(self) -> "AgEVAGravParamSource":
        """The source for the third body's gravitational parameter."""
        return self._intf.get_property(IAgVAPointMassFunction._metadata, IAgVAPointMassFunction._get_GravSource_metadata)

    _set_GravSource_metadata = { "name" : "GravSource",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAGravParamSource),) }
    @GravSource.setter
    def GravSource(self, inVal:"AgEVAGravParamSource") -> None:
        return self._intf.set_property(IAgVAPointMassFunction._metadata, IAgVAPointMassFunction._set_GravSource_metadata, inVal)

    _get_Mu_metadata = { "name" : "Mu",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def Mu(self) -> float:
        """The gravitational parameter. Uses Gravity Param Dimension."""
        return self._intf.get_property(IAgVAPointMassFunction._metadata, IAgVAPointMassFunction._get_Mu_metadata)

    _set_Mu_metadata = { "name" : "Mu",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @Mu.setter
    def Mu(self, inVal:float) -> None:
        return self._intf.set_property(IAgVAPointMassFunction._metadata, IAgVAPointMassFunction._set_Mu_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{DF0A48DA-12AA-4BCF-A9E1-CDE80A2C89A3}", IAgVAPointMassFunction)
agcls.AgTypeNameMap["IAgVAPointMassFunction"] = IAgVAPointMassFunction

class IAgVATwoBodyFunction(object):
    """Properties for the Two Body gravity model - a standard point mass model."""
    _num_methods = 6
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{827AF54A-9389-4151-8193-7B3FAE64E66D}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_GravSource" : 1,
                             "set_GravSource" : 2,
                             "get_Mu" : 3,
                             "set_Mu" : 4,
                             "get_MinRadiusPercent" : 5,
                             "set_MinRadiusPercent" : 6, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVATwoBodyFunction._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVATwoBodyFunction from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVATwoBodyFunction.__dict__ and type(IAgVATwoBodyFunction.__dict__[attrname]) == property:
            return IAgVATwoBodyFunction.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVATwoBodyFunction.")
    
    _get_GravSource_metadata = { "name" : "GravSource",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAGravParamSource),) }
    @property
    def GravSource(self) -> "AgEVAGravParamSource":
        """The source for the gravitational parameter."""
        return self._intf.get_property(IAgVATwoBodyFunction._metadata, IAgVATwoBodyFunction._get_GravSource_metadata)

    _set_GravSource_metadata = { "name" : "GravSource",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAGravParamSource),) }
    @GravSource.setter
    def GravSource(self, inVal:"AgEVAGravParamSource") -> None:
        return self._intf.set_property(IAgVATwoBodyFunction._metadata, IAgVATwoBodyFunction._set_GravSource_metadata, inVal)

    _get_Mu_metadata = { "name" : "Mu",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def Mu(self) -> float:
        """The gravitational parameter. Uses Gravity Param Dimension."""
        return self._intf.get_property(IAgVATwoBodyFunction._metadata, IAgVATwoBodyFunction._get_Mu_metadata)

    _set_Mu_metadata = { "name" : "Mu",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @Mu.setter
    def Mu(self, inVal:float) -> None:
        return self._intf.set_property(IAgVATwoBodyFunction._metadata, IAgVATwoBodyFunction._set_Mu_metadata, inVal)

    _get_MinRadiusPercent_metadata = { "name" : "MinRadiusPercent",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def MinRadiusPercent(self) -> float:
        """The percentage of the central body's minimum radius at which a modified force model (only the two-body force) will be used - provided there is no altitude stopping condition. Uses Percent Dimension."""
        return self._intf.get_property(IAgVATwoBodyFunction._metadata, IAgVATwoBodyFunction._get_MinRadiusPercent_metadata)

    _set_MinRadiusPercent_metadata = { "name" : "MinRadiusPercent",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @MinRadiusPercent.setter
    def MinRadiusPercent(self, inVal:float) -> None:
        return self._intf.set_property(IAgVATwoBodyFunction._metadata, IAgVATwoBodyFunction._set_MinRadiusPercent_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{827AF54A-9389-4151-8193-7B3FAE64E66D}", IAgVATwoBodyFunction)
agcls.AgTypeNameMap["IAgVATwoBodyFunction"] = IAgVATwoBodyFunction

class IAgVAHPOPPluginFunction(object):
    """Properties for the HPOP Plugin propagator function."""
    _num_methods = 3
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{53854E6C-8125-44F8-B0B3-8CB5175C8AE9}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_PluginIdentifier" : 1,
                             "set_PluginIdentifier" : 2,
                             "get_PluginConfig" : 3, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAHPOPPluginFunction._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAHPOPPluginFunction from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAHPOPPluginFunction.__dict__ and type(IAgVAHPOPPluginFunction.__dict__[attrname]) == property:
            return IAgVAHPOPPluginFunction.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAHPOPPluginFunction.")
    
    _get_PluginIdentifier_metadata = { "name" : "PluginIdentifier",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def PluginIdentifier(self) -> str:
        """The plugin name."""
        return self._intf.get_property(IAgVAHPOPPluginFunction._metadata, IAgVAHPOPPluginFunction._get_PluginIdentifier_metadata)

    _set_PluginIdentifier_metadata = { "name" : "PluginIdentifier",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @PluginIdentifier.setter
    def PluginIdentifier(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAHPOPPluginFunction._metadata, IAgVAHPOPPluginFunction._set_PluginIdentifier_metadata, inVal)

    _get_PluginConfig_metadata = { "name" : "PluginConfig",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def PluginConfig(self) -> "IAgVAPluginProperties":
        """The properties of the selected plugin."""
        return self._intf.get_property(IAgVAHPOPPluginFunction._metadata, IAgVAHPOPPluginFunction._get_PluginConfig_metadata)


agcls.AgClassCatalog.add_catalog_entry("{53854E6C-8125-44F8-B0B3-8CB5175C8AE9}", IAgVAHPOPPluginFunction)
agcls.AgTypeNameMap["IAgVAHPOPPluginFunction"] = IAgVAHPOPPluginFunction

class IAgVAEOMFuncPluginFunction(object):
    """Properties for the EOM Function Plugin propagator function."""
    _num_methods = 3
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{D652969D-D848-4AF2-91C9-8BD479D0F681}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_PluginIdentifier" : 1,
                             "set_PluginIdentifier" : 2,
                             "get_PluginConfig" : 3, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAEOMFuncPluginFunction._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAEOMFuncPluginFunction from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAEOMFuncPluginFunction.__dict__ and type(IAgVAEOMFuncPluginFunction.__dict__[attrname]) == property:
            return IAgVAEOMFuncPluginFunction.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAEOMFuncPluginFunction.")
    
    _get_PluginIdentifier_metadata = { "name" : "PluginIdentifier",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def PluginIdentifier(self) -> str:
        """The plugin name."""
        return self._intf.get_property(IAgVAEOMFuncPluginFunction._metadata, IAgVAEOMFuncPluginFunction._get_PluginIdentifier_metadata)

    _set_PluginIdentifier_metadata = { "name" : "PluginIdentifier",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @PluginIdentifier.setter
    def PluginIdentifier(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAEOMFuncPluginFunction._metadata, IAgVAEOMFuncPluginFunction._set_PluginIdentifier_metadata, inVal)

    _get_PluginConfig_metadata = { "name" : "PluginConfig",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def PluginConfig(self) -> "IAgVAPluginProperties":
        """The properties of the selected plugin."""
        return self._intf.get_property(IAgVAEOMFuncPluginFunction._metadata, IAgVAEOMFuncPluginFunction._get_PluginConfig_metadata)


agcls.AgClassCatalog.add_catalog_entry("{D652969D-D848-4AF2-91C9-8BD479D0F681}", IAgVAEOMFuncPluginFunction)
agcls.AgTypeNameMap["IAgVAEOMFuncPluginFunction"] = IAgVAEOMFuncPluginFunction

class IAgVASRPAeroT20(object):
    """Properties for the Aerospace T20 solar radiation pressure model for GPS block IIA."""
    _num_methods = 13
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{1B712154-4552-4453-B784-5C773A9F88C0}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_AtmosAlt" : 1,
                             "set_AtmosAlt" : 2,
                             "get_ShadowModel" : 3,
                             "set_ShadowModel" : 4,
                             "get_SunPosition" : 5,
                             "set_SunPosition" : 6,
                             "get_EclipsingBodies" : 7,
                             "get_IncludeBoundaryMitigation" : 8,
                             "set_IncludeBoundaryMitigation" : 9,
                             "get_UseSunCbFileValues" : 10,
                             "set_UseSunCbFileValues" : 11,
                             "get_SolarRadius" : 12,
                             "set_SolarRadius" : 13, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVASRPAeroT20._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVASRPAeroT20 from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVASRPAeroT20.__dict__ and type(IAgVASRPAeroT20.__dict__[attrname]) == property:
            return IAgVASRPAeroT20.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVASRPAeroT20.")
    
    _get_AtmosAlt_metadata = { "name" : "AtmosAlt",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def AtmosAlt(self) -> float:
        """The atmospheric altitude for eclipse. A simple model to account for some measure of attenuation that simply increases the shape of the Earth by the defined altitude height, often taken to be 23 km. Uses Distance Dimension."""
        return self._intf.get_property(IAgVASRPAeroT20._metadata, IAgVASRPAeroT20._get_AtmosAlt_metadata)

    _set_AtmosAlt_metadata = { "name" : "AtmosAlt",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @AtmosAlt.setter
    def AtmosAlt(self, inVal:float) -> None:
        return self._intf.set_property(IAgVASRPAeroT20._metadata, IAgVASRPAeroT20._set_AtmosAlt_metadata, inVal)

    _get_ShadowModel_metadata = { "name" : "ShadowModel",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAShadowModel),) }
    @property
    def ShadowModel(self) -> "AgEVAShadowModel":
        """The shadow model type."""
        return self._intf.get_property(IAgVASRPAeroT20._metadata, IAgVASRPAeroT20._get_ShadowModel_metadata)

    _set_ShadowModel_metadata = { "name" : "ShadowModel",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAShadowModel),) }
    @ShadowModel.setter
    def ShadowModel(self, inVal:"AgEVAShadowModel") -> None:
        return self._intf.set_property(IAgVASRPAeroT20._metadata, IAgVASRPAeroT20._set_ShadowModel_metadata, inVal)

    _get_SunPosition_metadata = { "name" : "SunPosition",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVASunPosition),) }
    @property
    def SunPosition(self) -> "AgEVASunPosition":
        """The sun position computation."""
        return self._intf.get_property(IAgVASRPAeroT20._metadata, IAgVASRPAeroT20._get_SunPosition_metadata)

    _set_SunPosition_metadata = { "name" : "SunPosition",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVASunPosition),) }
    @SunPosition.setter
    def SunPosition(self, inVal:"AgEVASunPosition") -> None:
        return self._intf.set_property(IAgVASRPAeroT20._metadata, IAgVASRPAeroT20._set_SunPosition_metadata, inVal)

    _get_EclipsingBodies_metadata = { "name" : "EclipsingBodies",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def EclipsingBodies(self) -> "IAgVACentralBodyCollection":
        """Other eclipsing bodies."""
        return self._intf.get_property(IAgVASRPAeroT20._metadata, IAgVASRPAeroT20._get_EclipsingBodies_metadata)

    _get_IncludeBoundaryMitigation_metadata = { "name" : "IncludeBoundaryMitigation",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def IncludeBoundaryMitigation(self) -> bool:
        """True if shadow boundary mitigation should be performed; the state of the satellite after crossing a shadow boundary will be corrected for errors possibly caused by the sudden change in SRP which occurred during the integration step."""
        return self._intf.get_property(IAgVASRPAeroT20._metadata, IAgVASRPAeroT20._get_IncludeBoundaryMitigation_metadata)

    _set_IncludeBoundaryMitigation_metadata = { "name" : "IncludeBoundaryMitigation",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @IncludeBoundaryMitigation.setter
    def IncludeBoundaryMitigation(self, mitigation:bool) -> None:
        return self._intf.set_property(IAgVASRPAeroT20._metadata, IAgVASRPAeroT20._set_IncludeBoundaryMitigation_metadata, mitigation)

    _get_UseSunCbFileValues_metadata = { "name" : "UseSunCbFileValues",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def UseSunCbFileValues(self) -> bool:
        """True if solar radius should come from the Sun.cb file."""
        return self._intf.get_property(IAgVASRPAeroT20._metadata, IAgVASRPAeroT20._get_UseSunCbFileValues_metadata)

    _set_UseSunCbFileValues_metadata = { "name" : "UseSunCbFileValues",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @UseSunCbFileValues.setter
    def UseSunCbFileValues(self, inVal:bool) -> None:
        return self._intf.set_property(IAgVASRPAeroT20._metadata, IAgVASRPAeroT20._set_UseSunCbFileValues_metadata, inVal)

    _get_SolarRadius_metadata = { "name" : "SolarRadius",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def SolarRadius(self) -> float:
        """The solar radius value to use in eclipse calculations.  Uses Distance Dimension."""
        return self._intf.get_property(IAgVASRPAeroT20._metadata, IAgVASRPAeroT20._get_SolarRadius_metadata)

    _set_SolarRadius_metadata = { "name" : "SolarRadius",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @SolarRadius.setter
    def SolarRadius(self, inVal:float) -> None:
        return self._intf.set_property(IAgVASRPAeroT20._metadata, IAgVASRPAeroT20._set_SolarRadius_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{1B712154-4552-4453-B784-5C773A9F88C0}", IAgVASRPAeroT20)
agcls.AgTypeNameMap["IAgVASRPAeroT20"] = IAgVASRPAeroT20

class IAgVASRPAeroT30(object):
    """Properties for the Aerospace T30 solar radiation pressure model for GPS block IIR."""
    _num_methods = 13
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{E29DBFD3-883F-465C-A4D4-D090A83F5EBC}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_AtmosAlt" : 1,
                             "set_AtmosAlt" : 2,
                             "get_ShadowModel" : 3,
                             "set_ShadowModel" : 4,
                             "get_SunPosition" : 5,
                             "set_SunPosition" : 6,
                             "get_EclipsingBodies" : 7,
                             "get_IncludeBoundaryMitigation" : 8,
                             "set_IncludeBoundaryMitigation" : 9,
                             "get_UseSunCbFileValues" : 10,
                             "set_UseSunCbFileValues" : 11,
                             "get_SolarRadius" : 12,
                             "set_SolarRadius" : 13, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVASRPAeroT30._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVASRPAeroT30 from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVASRPAeroT30.__dict__ and type(IAgVASRPAeroT30.__dict__[attrname]) == property:
            return IAgVASRPAeroT30.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVASRPAeroT30.")
    
    _get_AtmosAlt_metadata = { "name" : "AtmosAlt",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def AtmosAlt(self) -> float:
        """The atmospheric altitude for eclipse. A simple model to account for some measure of attenuation that simply increases the shape of the Earth by the defined altitude height, often taken to be 23 km. Uses Distance Dimension."""
        return self._intf.get_property(IAgVASRPAeroT30._metadata, IAgVASRPAeroT30._get_AtmosAlt_metadata)

    _set_AtmosAlt_metadata = { "name" : "AtmosAlt",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @AtmosAlt.setter
    def AtmosAlt(self, inVal:float) -> None:
        return self._intf.set_property(IAgVASRPAeroT30._metadata, IAgVASRPAeroT30._set_AtmosAlt_metadata, inVal)

    _get_ShadowModel_metadata = { "name" : "ShadowModel",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAShadowModel),) }
    @property
    def ShadowModel(self) -> "AgEVAShadowModel":
        """The shadow model type."""
        return self._intf.get_property(IAgVASRPAeroT30._metadata, IAgVASRPAeroT30._get_ShadowModel_metadata)

    _set_ShadowModel_metadata = { "name" : "ShadowModel",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAShadowModel),) }
    @ShadowModel.setter
    def ShadowModel(self, inVal:"AgEVAShadowModel") -> None:
        return self._intf.set_property(IAgVASRPAeroT30._metadata, IAgVASRPAeroT30._set_ShadowModel_metadata, inVal)

    _get_SunPosition_metadata = { "name" : "SunPosition",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVASunPosition),) }
    @property
    def SunPosition(self) -> "AgEVASunPosition":
        """The sun position computation."""
        return self._intf.get_property(IAgVASRPAeroT30._metadata, IAgVASRPAeroT30._get_SunPosition_metadata)

    _set_SunPosition_metadata = { "name" : "SunPosition",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVASunPosition),) }
    @SunPosition.setter
    def SunPosition(self, inVal:"AgEVASunPosition") -> None:
        return self._intf.set_property(IAgVASRPAeroT30._metadata, IAgVASRPAeroT30._set_SunPosition_metadata, inVal)

    _get_EclipsingBodies_metadata = { "name" : "EclipsingBodies",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def EclipsingBodies(self) -> "IAgVACentralBodyCollection":
        """Other eclipsing bodies."""
        return self._intf.get_property(IAgVASRPAeroT30._metadata, IAgVASRPAeroT30._get_EclipsingBodies_metadata)

    _get_IncludeBoundaryMitigation_metadata = { "name" : "IncludeBoundaryMitigation",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def IncludeBoundaryMitigation(self) -> bool:
        """True if shadow boundary mitigation should be performed; the state of the satellite after crossing a shadow boundary will be corrected for errors possibly caused by the sudden change in SRP which occurred during the integration step."""
        return self._intf.get_property(IAgVASRPAeroT30._metadata, IAgVASRPAeroT30._get_IncludeBoundaryMitigation_metadata)

    _set_IncludeBoundaryMitigation_metadata = { "name" : "IncludeBoundaryMitigation",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @IncludeBoundaryMitigation.setter
    def IncludeBoundaryMitigation(self, mitigation:bool) -> None:
        return self._intf.set_property(IAgVASRPAeroT30._metadata, IAgVASRPAeroT30._set_IncludeBoundaryMitigation_metadata, mitigation)

    _get_UseSunCbFileValues_metadata = { "name" : "UseSunCbFileValues",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def UseSunCbFileValues(self) -> bool:
        """True if solar radius should come from the Sun.cb file."""
        return self._intf.get_property(IAgVASRPAeroT30._metadata, IAgVASRPAeroT30._get_UseSunCbFileValues_metadata)

    _set_UseSunCbFileValues_metadata = { "name" : "UseSunCbFileValues",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @UseSunCbFileValues.setter
    def UseSunCbFileValues(self, inVal:bool) -> None:
        return self._intf.set_property(IAgVASRPAeroT30._metadata, IAgVASRPAeroT30._set_UseSunCbFileValues_metadata, inVal)

    _get_SolarRadius_metadata = { "name" : "SolarRadius",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def SolarRadius(self) -> float:
        """The solar radius value to use in eclipse calculations.  Uses Distance Dimension."""
        return self._intf.get_property(IAgVASRPAeroT30._metadata, IAgVASRPAeroT30._get_SolarRadius_metadata)

    _set_SolarRadius_metadata = { "name" : "SolarRadius",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @SolarRadius.setter
    def SolarRadius(self, inVal:float) -> None:
        return self._intf.set_property(IAgVASRPAeroT30._metadata, IAgVASRPAeroT30._set_SolarRadius_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{E29DBFD3-883F-465C-A4D4-D090A83F5EBC}", IAgVASRPAeroT30)
agcls.AgTypeNameMap["IAgVASRPAeroT30"] = IAgVASRPAeroT30

class IAgVASRPGSPM04aIIA(object):
    """Properties for the Bar-Sever GPS Solar Pressure Model 04a for block IIA."""
    _num_methods = 13
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{73504326-18B8-40FB-A466-DB8908769B9D}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_AtmosAlt" : 1,
                             "set_AtmosAlt" : 2,
                             "get_ShadowModel" : 3,
                             "set_ShadowModel" : 4,
                             "get_SunPosition" : 5,
                             "set_SunPosition" : 6,
                             "get_EclipsingBodies" : 7,
                             "get_IncludeBoundaryMitigation" : 8,
                             "set_IncludeBoundaryMitigation" : 9,
                             "get_UseSunCbFileValues" : 10,
                             "set_UseSunCbFileValues" : 11,
                             "get_SolarRadius" : 12,
                             "set_SolarRadius" : 13, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVASRPGSPM04aIIA._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVASRPGSPM04aIIA from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVASRPGSPM04aIIA.__dict__ and type(IAgVASRPGSPM04aIIA.__dict__[attrname]) == property:
            return IAgVASRPGSPM04aIIA.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVASRPGSPM04aIIA.")
    
    _get_AtmosAlt_metadata = { "name" : "AtmosAlt",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def AtmosAlt(self) -> float:
        """The atmospheric altitude for eclipse. A simple model to account for some measure of attenuation that simply increases the shape of the Earth by the defined altitude height, often taken to be 23 km. Uses Distance Dimension."""
        return self._intf.get_property(IAgVASRPGSPM04aIIA._metadata, IAgVASRPGSPM04aIIA._get_AtmosAlt_metadata)

    _set_AtmosAlt_metadata = { "name" : "AtmosAlt",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @AtmosAlt.setter
    def AtmosAlt(self, inVal:float) -> None:
        return self._intf.set_property(IAgVASRPGSPM04aIIA._metadata, IAgVASRPGSPM04aIIA._set_AtmosAlt_metadata, inVal)

    _get_ShadowModel_metadata = { "name" : "ShadowModel",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAShadowModel),) }
    @property
    def ShadowModel(self) -> "AgEVAShadowModel":
        """The shadow model type."""
        return self._intf.get_property(IAgVASRPGSPM04aIIA._metadata, IAgVASRPGSPM04aIIA._get_ShadowModel_metadata)

    _set_ShadowModel_metadata = { "name" : "ShadowModel",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAShadowModel),) }
    @ShadowModel.setter
    def ShadowModel(self, inVal:"AgEVAShadowModel") -> None:
        return self._intf.set_property(IAgVASRPGSPM04aIIA._metadata, IAgVASRPGSPM04aIIA._set_ShadowModel_metadata, inVal)

    _get_SunPosition_metadata = { "name" : "SunPosition",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVASunPosition),) }
    @property
    def SunPosition(self) -> "AgEVASunPosition":
        """The sun position computation."""
        return self._intf.get_property(IAgVASRPGSPM04aIIA._metadata, IAgVASRPGSPM04aIIA._get_SunPosition_metadata)

    _set_SunPosition_metadata = { "name" : "SunPosition",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVASunPosition),) }
    @SunPosition.setter
    def SunPosition(self, inVal:"AgEVASunPosition") -> None:
        return self._intf.set_property(IAgVASRPGSPM04aIIA._metadata, IAgVASRPGSPM04aIIA._set_SunPosition_metadata, inVal)

    _get_EclipsingBodies_metadata = { "name" : "EclipsingBodies",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def EclipsingBodies(self) -> "IAgVACentralBodyCollection":
        """Other eclipsing bodies."""
        return self._intf.get_property(IAgVASRPGSPM04aIIA._metadata, IAgVASRPGSPM04aIIA._get_EclipsingBodies_metadata)

    _get_IncludeBoundaryMitigation_metadata = { "name" : "IncludeBoundaryMitigation",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def IncludeBoundaryMitigation(self) -> bool:
        """True if shadow boundary mitigation should be performed; the state of the satellite after crossing a shadow boundary will be corrected for errors possibly caused by the sudden change in SRP which occurred during the integration step."""
        return self._intf.get_property(IAgVASRPGSPM04aIIA._metadata, IAgVASRPGSPM04aIIA._get_IncludeBoundaryMitigation_metadata)

    _set_IncludeBoundaryMitigation_metadata = { "name" : "IncludeBoundaryMitigation",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @IncludeBoundaryMitigation.setter
    def IncludeBoundaryMitigation(self, mitigation:bool) -> None:
        return self._intf.set_property(IAgVASRPGSPM04aIIA._metadata, IAgVASRPGSPM04aIIA._set_IncludeBoundaryMitigation_metadata, mitigation)

    _get_UseSunCbFileValues_metadata = { "name" : "UseSunCbFileValues",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def UseSunCbFileValues(self) -> bool:
        """True if solar radius should come from the Sun.cb file."""
        return self._intf.get_property(IAgVASRPGSPM04aIIA._metadata, IAgVASRPGSPM04aIIA._get_UseSunCbFileValues_metadata)

    _set_UseSunCbFileValues_metadata = { "name" : "UseSunCbFileValues",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @UseSunCbFileValues.setter
    def UseSunCbFileValues(self, inVal:bool) -> None:
        return self._intf.set_property(IAgVASRPGSPM04aIIA._metadata, IAgVASRPGSPM04aIIA._set_UseSunCbFileValues_metadata, inVal)

    _get_SolarRadius_metadata = { "name" : "SolarRadius",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def SolarRadius(self) -> float:
        """The solar radius value to use in eclipse calculations.  Uses Distance Dimension."""
        return self._intf.get_property(IAgVASRPGSPM04aIIA._metadata, IAgVASRPGSPM04aIIA._get_SolarRadius_metadata)

    _set_SolarRadius_metadata = { "name" : "SolarRadius",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @SolarRadius.setter
    def SolarRadius(self, inVal:float) -> None:
        return self._intf.set_property(IAgVASRPGSPM04aIIA._metadata, IAgVASRPGSPM04aIIA._set_SolarRadius_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{73504326-18B8-40FB-A466-DB8908769B9D}", IAgVASRPGSPM04aIIA)
agcls.AgTypeNameMap["IAgVASRPGSPM04aIIA"] = IAgVASRPGSPM04aIIA

class IAgVASRPGSPM04aIIR(object):
    """Properties for the Bar-Sever GPS Solar Pressure Model 04a for block IIR."""
    _num_methods = 13
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{79FEA80C-9B5F-4FDE-9661-286B1DAFF645}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_AtmosAlt" : 1,
                             "set_AtmosAlt" : 2,
                             "get_ShadowModel" : 3,
                             "set_ShadowModel" : 4,
                             "get_SunPosition" : 5,
                             "set_SunPosition" : 6,
                             "get_EclipsingBodies" : 7,
                             "get_IncludeBoundaryMitigation" : 8,
                             "set_IncludeBoundaryMitigation" : 9,
                             "get_UseSunCbFileValues" : 10,
                             "set_UseSunCbFileValues" : 11,
                             "get_SolarRadius" : 12,
                             "set_SolarRadius" : 13, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVASRPGSPM04aIIR._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVASRPGSPM04aIIR from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVASRPGSPM04aIIR.__dict__ and type(IAgVASRPGSPM04aIIR.__dict__[attrname]) == property:
            return IAgVASRPGSPM04aIIR.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVASRPGSPM04aIIR.")
    
    _get_AtmosAlt_metadata = { "name" : "AtmosAlt",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def AtmosAlt(self) -> float:
        """The atmospheric altitude for eclipse. A simple model to account for some measure of attenuation that simply increases the shape of the Earth by the defined altitude height, often taken to be 23 km. Uses Distance Dimension."""
        return self._intf.get_property(IAgVASRPGSPM04aIIR._metadata, IAgVASRPGSPM04aIIR._get_AtmosAlt_metadata)

    _set_AtmosAlt_metadata = { "name" : "AtmosAlt",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @AtmosAlt.setter
    def AtmosAlt(self, inVal:float) -> None:
        return self._intf.set_property(IAgVASRPGSPM04aIIR._metadata, IAgVASRPGSPM04aIIR._set_AtmosAlt_metadata, inVal)

    _get_ShadowModel_metadata = { "name" : "ShadowModel",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAShadowModel),) }
    @property
    def ShadowModel(self) -> "AgEVAShadowModel":
        """The shadow model type."""
        return self._intf.get_property(IAgVASRPGSPM04aIIR._metadata, IAgVASRPGSPM04aIIR._get_ShadowModel_metadata)

    _set_ShadowModel_metadata = { "name" : "ShadowModel",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAShadowModel),) }
    @ShadowModel.setter
    def ShadowModel(self, inVal:"AgEVAShadowModel") -> None:
        return self._intf.set_property(IAgVASRPGSPM04aIIR._metadata, IAgVASRPGSPM04aIIR._set_ShadowModel_metadata, inVal)

    _get_SunPosition_metadata = { "name" : "SunPosition",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVASunPosition),) }
    @property
    def SunPosition(self) -> "AgEVASunPosition":
        """The sun position computation."""
        return self._intf.get_property(IAgVASRPGSPM04aIIR._metadata, IAgVASRPGSPM04aIIR._get_SunPosition_metadata)

    _set_SunPosition_metadata = { "name" : "SunPosition",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVASunPosition),) }
    @SunPosition.setter
    def SunPosition(self, inVal:"AgEVASunPosition") -> None:
        return self._intf.set_property(IAgVASRPGSPM04aIIR._metadata, IAgVASRPGSPM04aIIR._set_SunPosition_metadata, inVal)

    _get_EclipsingBodies_metadata = { "name" : "EclipsingBodies",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def EclipsingBodies(self) -> "IAgVACentralBodyCollection":
        """Other eclipsing bodies."""
        return self._intf.get_property(IAgVASRPGSPM04aIIR._metadata, IAgVASRPGSPM04aIIR._get_EclipsingBodies_metadata)

    _get_IncludeBoundaryMitigation_metadata = { "name" : "IncludeBoundaryMitigation",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def IncludeBoundaryMitigation(self) -> bool:
        """True if shadow boundary mitigation should be performed; the state of the satellite after crossing a shadow boundary will be corrected for errors possibly caused by the sudden change in SRP which occurred during the integration step."""
        return self._intf.get_property(IAgVASRPGSPM04aIIR._metadata, IAgVASRPGSPM04aIIR._get_IncludeBoundaryMitigation_metadata)

    _set_IncludeBoundaryMitigation_metadata = { "name" : "IncludeBoundaryMitigation",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @IncludeBoundaryMitigation.setter
    def IncludeBoundaryMitigation(self, mitigation:bool) -> None:
        return self._intf.set_property(IAgVASRPGSPM04aIIR._metadata, IAgVASRPGSPM04aIIR._set_IncludeBoundaryMitigation_metadata, mitigation)

    _get_UseSunCbFileValues_metadata = { "name" : "UseSunCbFileValues",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def UseSunCbFileValues(self) -> bool:
        """True if solar radius should come from the Sun.cb file."""
        return self._intf.get_property(IAgVASRPGSPM04aIIR._metadata, IAgVASRPGSPM04aIIR._get_UseSunCbFileValues_metadata)

    _set_UseSunCbFileValues_metadata = { "name" : "UseSunCbFileValues",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @UseSunCbFileValues.setter
    def UseSunCbFileValues(self, inVal:bool) -> None:
        return self._intf.set_property(IAgVASRPGSPM04aIIR._metadata, IAgVASRPGSPM04aIIR._set_UseSunCbFileValues_metadata, inVal)

    _get_SolarRadius_metadata = { "name" : "SolarRadius",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def SolarRadius(self) -> float:
        """The solar radius value to use in eclipse calculations.  Uses Distance Dimension."""
        return self._intf.get_property(IAgVASRPGSPM04aIIR._metadata, IAgVASRPGSPM04aIIR._get_SolarRadius_metadata)

    _set_SolarRadius_metadata = { "name" : "SolarRadius",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @SolarRadius.setter
    def SolarRadius(self, inVal:float) -> None:
        return self._intf.set_property(IAgVASRPGSPM04aIIR._metadata, IAgVASRPGSPM04aIIR._set_SolarRadius_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{79FEA80C-9B5F-4FDE-9661-286B1DAFF645}", IAgVASRPGSPM04aIIR)
agcls.AgTypeNameMap["IAgVASRPGSPM04aIIR"] = IAgVASRPGSPM04aIIR

class IAgVASRPGSPM04aeIIA(object):
    """Properties for the Bar-Sever GPS Solar Pressure Model 04ae for block IIA."""
    _num_methods = 13
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{3F99DF3B-1BC5-40F2-826D-751DCE4BB77C}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_AtmosAlt" : 1,
                             "set_AtmosAlt" : 2,
                             "get_ShadowModel" : 3,
                             "set_ShadowModel" : 4,
                             "get_SunPosition" : 5,
                             "set_SunPosition" : 6,
                             "get_EclipsingBodies" : 7,
                             "get_IncludeBoundaryMitigation" : 8,
                             "set_IncludeBoundaryMitigation" : 9,
                             "get_UseSunCbFileValues" : 10,
                             "set_UseSunCbFileValues" : 11,
                             "get_SolarRadius" : 12,
                             "set_SolarRadius" : 13, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVASRPGSPM04aeIIA._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVASRPGSPM04aeIIA from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVASRPGSPM04aeIIA.__dict__ and type(IAgVASRPGSPM04aeIIA.__dict__[attrname]) == property:
            return IAgVASRPGSPM04aeIIA.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVASRPGSPM04aeIIA.")
    
    _get_AtmosAlt_metadata = { "name" : "AtmosAlt",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def AtmosAlt(self) -> float:
        """The atmospheric altitude for eclipse. A simple model to account for some measure of attenuation that simply increases the shape of the Earth by the defined altitude height, often taken to be 23 km. Uses Distance Dimension."""
        return self._intf.get_property(IAgVASRPGSPM04aeIIA._metadata, IAgVASRPGSPM04aeIIA._get_AtmosAlt_metadata)

    _set_AtmosAlt_metadata = { "name" : "AtmosAlt",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @AtmosAlt.setter
    def AtmosAlt(self, inVal:float) -> None:
        return self._intf.set_property(IAgVASRPGSPM04aeIIA._metadata, IAgVASRPGSPM04aeIIA._set_AtmosAlt_metadata, inVal)

    _get_ShadowModel_metadata = { "name" : "ShadowModel",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAShadowModel),) }
    @property
    def ShadowModel(self) -> "AgEVAShadowModel":
        """The shadow model type."""
        return self._intf.get_property(IAgVASRPGSPM04aeIIA._metadata, IAgVASRPGSPM04aeIIA._get_ShadowModel_metadata)

    _set_ShadowModel_metadata = { "name" : "ShadowModel",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAShadowModel),) }
    @ShadowModel.setter
    def ShadowModel(self, inVal:"AgEVAShadowModel") -> None:
        return self._intf.set_property(IAgVASRPGSPM04aeIIA._metadata, IAgVASRPGSPM04aeIIA._set_ShadowModel_metadata, inVal)

    _get_SunPosition_metadata = { "name" : "SunPosition",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVASunPosition),) }
    @property
    def SunPosition(self) -> "AgEVASunPosition":
        """The sun position computation."""
        return self._intf.get_property(IAgVASRPGSPM04aeIIA._metadata, IAgVASRPGSPM04aeIIA._get_SunPosition_metadata)

    _set_SunPosition_metadata = { "name" : "SunPosition",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVASunPosition),) }
    @SunPosition.setter
    def SunPosition(self, inVal:"AgEVASunPosition") -> None:
        return self._intf.set_property(IAgVASRPGSPM04aeIIA._metadata, IAgVASRPGSPM04aeIIA._set_SunPosition_metadata, inVal)

    _get_EclipsingBodies_metadata = { "name" : "EclipsingBodies",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def EclipsingBodies(self) -> "IAgVACentralBodyCollection":
        """Other eclipsing bodies."""
        return self._intf.get_property(IAgVASRPGSPM04aeIIA._metadata, IAgVASRPGSPM04aeIIA._get_EclipsingBodies_metadata)

    _get_IncludeBoundaryMitigation_metadata = { "name" : "IncludeBoundaryMitigation",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def IncludeBoundaryMitigation(self) -> bool:
        """True if shadow boundary mitigation should be performed; the state of the satellite after crossing a shadow boundary will be corrected for errors possibly caused by the sudden change in SRP which occurred during the integration step."""
        return self._intf.get_property(IAgVASRPGSPM04aeIIA._metadata, IAgVASRPGSPM04aeIIA._get_IncludeBoundaryMitigation_metadata)

    _set_IncludeBoundaryMitigation_metadata = { "name" : "IncludeBoundaryMitigation",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @IncludeBoundaryMitigation.setter
    def IncludeBoundaryMitigation(self, mitigation:bool) -> None:
        return self._intf.set_property(IAgVASRPGSPM04aeIIA._metadata, IAgVASRPGSPM04aeIIA._set_IncludeBoundaryMitigation_metadata, mitigation)

    _get_UseSunCbFileValues_metadata = { "name" : "UseSunCbFileValues",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def UseSunCbFileValues(self) -> bool:
        """True if solar radius should come from the Sun.cb file."""
        return self._intf.get_property(IAgVASRPGSPM04aeIIA._metadata, IAgVASRPGSPM04aeIIA._get_UseSunCbFileValues_metadata)

    _set_UseSunCbFileValues_metadata = { "name" : "UseSunCbFileValues",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @UseSunCbFileValues.setter
    def UseSunCbFileValues(self, inVal:bool) -> None:
        return self._intf.set_property(IAgVASRPGSPM04aeIIA._metadata, IAgVASRPGSPM04aeIIA._set_UseSunCbFileValues_metadata, inVal)

    _get_SolarRadius_metadata = { "name" : "SolarRadius",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def SolarRadius(self) -> float:
        """The solar radius value to use in eclipse calculations.  Uses Distance Dimension."""
        return self._intf.get_property(IAgVASRPGSPM04aeIIA._metadata, IAgVASRPGSPM04aeIIA._get_SolarRadius_metadata)

    _set_SolarRadius_metadata = { "name" : "SolarRadius",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @SolarRadius.setter
    def SolarRadius(self, inVal:float) -> None:
        return self._intf.set_property(IAgVASRPGSPM04aeIIA._metadata, IAgVASRPGSPM04aeIIA._set_SolarRadius_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{3F99DF3B-1BC5-40F2-826D-751DCE4BB77C}", IAgVASRPGSPM04aeIIA)
agcls.AgTypeNameMap["IAgVASRPGSPM04aeIIA"] = IAgVASRPGSPM04aeIIA

class IAgVASRPGSPM04aeIIR(object):
    """Properties for the Bar-Sever GPS Solar Pressure Model 04ae for block IIR."""
    _num_methods = 13
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{8A1CAF39-9680-4405-942D-A86D279EAE24}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_AtmosAlt" : 1,
                             "set_AtmosAlt" : 2,
                             "get_ShadowModel" : 3,
                             "set_ShadowModel" : 4,
                             "get_SunPosition" : 5,
                             "set_SunPosition" : 6,
                             "get_EclipsingBodies" : 7,
                             "get_IncludeBoundaryMitigation" : 8,
                             "set_IncludeBoundaryMitigation" : 9,
                             "get_UseSunCbFileValues" : 10,
                             "set_UseSunCbFileValues" : 11,
                             "get_SolarRadius" : 12,
                             "set_SolarRadius" : 13, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVASRPGSPM04aeIIR._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVASRPGSPM04aeIIR from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVASRPGSPM04aeIIR.__dict__ and type(IAgVASRPGSPM04aeIIR.__dict__[attrname]) == property:
            return IAgVASRPGSPM04aeIIR.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVASRPGSPM04aeIIR.")
    
    _get_AtmosAlt_metadata = { "name" : "AtmosAlt",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def AtmosAlt(self) -> float:
        """The atmospheric altitude for eclipse. A simple model to account for some measure of attenuation that simply increases the shape of the Earth by the defined altitude height, often taken to be 23 km. Uses Distance Dimension."""
        return self._intf.get_property(IAgVASRPGSPM04aeIIR._metadata, IAgVASRPGSPM04aeIIR._get_AtmosAlt_metadata)

    _set_AtmosAlt_metadata = { "name" : "AtmosAlt",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @AtmosAlt.setter
    def AtmosAlt(self, inVal:float) -> None:
        return self._intf.set_property(IAgVASRPGSPM04aeIIR._metadata, IAgVASRPGSPM04aeIIR._set_AtmosAlt_metadata, inVal)

    _get_ShadowModel_metadata = { "name" : "ShadowModel",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAShadowModel),) }
    @property
    def ShadowModel(self) -> "AgEVAShadowModel":
        """The shadow model type."""
        return self._intf.get_property(IAgVASRPGSPM04aeIIR._metadata, IAgVASRPGSPM04aeIIR._get_ShadowModel_metadata)

    _set_ShadowModel_metadata = { "name" : "ShadowModel",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAShadowModel),) }
    @ShadowModel.setter
    def ShadowModel(self, inVal:"AgEVAShadowModel") -> None:
        return self._intf.set_property(IAgVASRPGSPM04aeIIR._metadata, IAgVASRPGSPM04aeIIR._set_ShadowModel_metadata, inVal)

    _get_SunPosition_metadata = { "name" : "SunPosition",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVASunPosition),) }
    @property
    def SunPosition(self) -> "AgEVASunPosition":
        """The sun position computation."""
        return self._intf.get_property(IAgVASRPGSPM04aeIIR._metadata, IAgVASRPGSPM04aeIIR._get_SunPosition_metadata)

    _set_SunPosition_metadata = { "name" : "SunPosition",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVASunPosition),) }
    @SunPosition.setter
    def SunPosition(self, inVal:"AgEVASunPosition") -> None:
        return self._intf.set_property(IAgVASRPGSPM04aeIIR._metadata, IAgVASRPGSPM04aeIIR._set_SunPosition_metadata, inVal)

    _get_EclipsingBodies_metadata = { "name" : "EclipsingBodies",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def EclipsingBodies(self) -> "IAgVACentralBodyCollection":
        """Other eclipsing bodies."""
        return self._intf.get_property(IAgVASRPGSPM04aeIIR._metadata, IAgVASRPGSPM04aeIIR._get_EclipsingBodies_metadata)

    _get_IncludeBoundaryMitigation_metadata = { "name" : "IncludeBoundaryMitigation",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def IncludeBoundaryMitigation(self) -> bool:
        """True if shadow boundary mitigation should be performed; the state of the satellite after crossing a shadow boundary will be corrected for errors possibly caused by the sudden change in SRP which occurred during the integration step."""
        return self._intf.get_property(IAgVASRPGSPM04aeIIR._metadata, IAgVASRPGSPM04aeIIR._get_IncludeBoundaryMitigation_metadata)

    _set_IncludeBoundaryMitigation_metadata = { "name" : "IncludeBoundaryMitigation",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @IncludeBoundaryMitigation.setter
    def IncludeBoundaryMitigation(self, mitigation:bool) -> None:
        return self._intf.set_property(IAgVASRPGSPM04aeIIR._metadata, IAgVASRPGSPM04aeIIR._set_IncludeBoundaryMitigation_metadata, mitigation)

    _get_UseSunCbFileValues_metadata = { "name" : "UseSunCbFileValues",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def UseSunCbFileValues(self) -> bool:
        """True if solar radius should come from the Sun.cb file."""
        return self._intf.get_property(IAgVASRPGSPM04aeIIR._metadata, IAgVASRPGSPM04aeIIR._get_UseSunCbFileValues_metadata)

    _set_UseSunCbFileValues_metadata = { "name" : "UseSunCbFileValues",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @UseSunCbFileValues.setter
    def UseSunCbFileValues(self, inVal:bool) -> None:
        return self._intf.set_property(IAgVASRPGSPM04aeIIR._metadata, IAgVASRPGSPM04aeIIR._set_UseSunCbFileValues_metadata, inVal)

    _get_SolarRadius_metadata = { "name" : "SolarRadius",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def SolarRadius(self) -> float:
        """The solar radius value to use in eclipse calculations.  Uses Distance Dimension."""
        return self._intf.get_property(IAgVASRPGSPM04aeIIR._metadata, IAgVASRPGSPM04aeIIR._get_SolarRadius_metadata)

    _set_SolarRadius_metadata = { "name" : "SolarRadius",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @SolarRadius.setter
    def SolarRadius(self, inVal:float) -> None:
        return self._intf.set_property(IAgVASRPGSPM04aeIIR._metadata, IAgVASRPGSPM04aeIIR._set_SolarRadius_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{8A1CAF39-9680-4405-942D-A86D279EAE24}", IAgVASRPGSPM04aeIIR)
agcls.AgTypeNameMap["IAgVASRPGSPM04aeIIR"] = IAgVASRPGSPM04aeIIR

class IAgVASRPSpherical(object):
    """Properties for the Spherical SRP model; assumes a spherical spacecraft. The equation used by STK is described in the Solar Radiation technical note."""
    _num_methods = 19
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{B8F7E804-16B0-447F-A75A-B75DF05287B0}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_AtmosAlt" : 1,
                             "set_AtmosAlt" : 2,
                             "get_ShadowModel" : 3,
                             "set_ShadowModel" : 4,
                             "get_SunPosition" : 5,
                             "set_SunPosition" : 6,
                             "get_EclipsingBodies" : 7,
                             "get_MeanFlux" : 8,
                             "set_MeanFlux" : 9,
                             "get_Luminosity" : 10,
                             "set_Luminosity" : 11,
                             "get_SolarForceMethod" : 12,
                             "set_SolarForceMethod" : 13,
                             "get_IncludeBoundaryMitigation" : 14,
                             "set_IncludeBoundaryMitigation" : 15,
                             "get_UseSunCbFileValues" : 16,
                             "set_UseSunCbFileValues" : 17,
                             "get_SolarRadius" : 18,
                             "set_SolarRadius" : 19, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVASRPSpherical._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVASRPSpherical from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVASRPSpherical.__dict__ and type(IAgVASRPSpherical.__dict__[attrname]) == property:
            return IAgVASRPSpherical.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVASRPSpherical.")
    
    _get_AtmosAlt_metadata = { "name" : "AtmosAlt",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def AtmosAlt(self) -> float:
        """The atmospheric altitude for eclipse. A simple model to account for some measure of attenuation that simply increases the shape of the Earth by the defined altitude height, often taken to be 23 km. Uses Distance Dimension."""
        return self._intf.get_property(IAgVASRPSpherical._metadata, IAgVASRPSpherical._get_AtmosAlt_metadata)

    _set_AtmosAlt_metadata = { "name" : "AtmosAlt",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @AtmosAlt.setter
    def AtmosAlt(self, inVal:float) -> None:
        return self._intf.set_property(IAgVASRPSpherical._metadata, IAgVASRPSpherical._set_AtmosAlt_metadata, inVal)

    _get_ShadowModel_metadata = { "name" : "ShadowModel",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAShadowModel),) }
    @property
    def ShadowModel(self) -> "AgEVAShadowModel":
        """The shadow model type."""
        return self._intf.get_property(IAgVASRPSpherical._metadata, IAgVASRPSpherical._get_ShadowModel_metadata)

    _set_ShadowModel_metadata = { "name" : "ShadowModel",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAShadowModel),) }
    @ShadowModel.setter
    def ShadowModel(self, inVal:"AgEVAShadowModel") -> None:
        return self._intf.set_property(IAgVASRPSpherical._metadata, IAgVASRPSpherical._set_ShadowModel_metadata, inVal)

    _get_SunPosition_metadata = { "name" : "SunPosition",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVASunPosition),) }
    @property
    def SunPosition(self) -> "AgEVASunPosition":
        """The sun position computation."""
        return self._intf.get_property(IAgVASRPSpherical._metadata, IAgVASRPSpherical._get_SunPosition_metadata)

    _set_SunPosition_metadata = { "name" : "SunPosition",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVASunPosition),) }
    @SunPosition.setter
    def SunPosition(self, inVal:"AgEVASunPosition") -> None:
        return self._intf.set_property(IAgVASRPSpherical._metadata, IAgVASRPSpherical._set_SunPosition_metadata, inVal)

    _get_EclipsingBodies_metadata = { "name" : "EclipsingBodies",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def EclipsingBodies(self) -> "IAgVACentralBodyCollection":
        """Other eclipsing bodies."""
        return self._intf.get_property(IAgVASRPSpherical._metadata, IAgVASRPSpherical._get_EclipsingBodies_metadata)

    _get_MeanFlux_metadata = { "name" : "MeanFlux",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def MeanFlux(self) -> float:
        """The mean solar flux at 1 au (W/m^2)."""
        return self._intf.get_property(IAgVASRPSpherical._metadata, IAgVASRPSpherical._get_MeanFlux_metadata)

    _set_MeanFlux_metadata = { "name" : "MeanFlux",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @MeanFlux.setter
    def MeanFlux(self, inVal:float) -> None:
        return self._intf.set_property(IAgVASRPSpherical._metadata, IAgVASRPSpherical._set_MeanFlux_metadata, inVal)

    _get_Luminosity_metadata = { "name" : "Luminosity",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def Luminosity(self) -> float:
        """The luminosity of sun. Dimensionless."""
        return self._intf.get_property(IAgVASRPSpherical._metadata, IAgVASRPSpherical._get_Luminosity_metadata)

    _set_Luminosity_metadata = { "name" : "Luminosity",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @Luminosity.setter
    def Luminosity(self, inVal:float) -> None:
        return self._intf.set_property(IAgVASRPSpherical._metadata, IAgVASRPSpherical._set_Luminosity_metadata, inVal)

    _get_SolarForceMethod_metadata = { "name" : "SolarForceMethod",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVASolarForceMethod),) }
    @property
    def SolarForceMethod(self) -> "AgEVASolarForceMethod":
        """The solar force method"""
        return self._intf.get_property(IAgVASRPSpherical._metadata, IAgVASRPSpherical._get_SolarForceMethod_metadata)

    _set_SolarForceMethod_metadata = { "name" : "SolarForceMethod",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVASolarForceMethod),) }
    @SolarForceMethod.setter
    def SolarForceMethod(self, inVal:"AgEVASolarForceMethod") -> None:
        return self._intf.set_property(IAgVASRPSpherical._metadata, IAgVASRPSpherical._set_SolarForceMethod_metadata, inVal)

    _get_IncludeBoundaryMitigation_metadata = { "name" : "IncludeBoundaryMitigation",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def IncludeBoundaryMitigation(self) -> bool:
        """True if shadow boundary mitigation should be performed; the state of the satellite after crossing a shadow boundary will be corrected for errors possibly caused by the sudden change in SRP which occurred during the integration step."""
        return self._intf.get_property(IAgVASRPSpherical._metadata, IAgVASRPSpherical._get_IncludeBoundaryMitigation_metadata)

    _set_IncludeBoundaryMitigation_metadata = { "name" : "IncludeBoundaryMitigation",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @IncludeBoundaryMitigation.setter
    def IncludeBoundaryMitigation(self, mitigation:bool) -> None:
        return self._intf.set_property(IAgVASRPSpherical._metadata, IAgVASRPSpherical._set_IncludeBoundaryMitigation_metadata, mitigation)

    _get_UseSunCbFileValues_metadata = { "name" : "UseSunCbFileValues",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def UseSunCbFileValues(self) -> bool:
        """True if solar values should come from the Sun.cb file."""
        return self._intf.get_property(IAgVASRPSpherical._metadata, IAgVASRPSpherical._get_UseSunCbFileValues_metadata)

    _set_UseSunCbFileValues_metadata = { "name" : "UseSunCbFileValues",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @UseSunCbFileValues.setter
    def UseSunCbFileValues(self, inVal:bool) -> None:
        return self._intf.set_property(IAgVASRPSpherical._metadata, IAgVASRPSpherical._set_UseSunCbFileValues_metadata, inVal)

    _get_SolarRadius_metadata = { "name" : "SolarRadius",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def SolarRadius(self) -> float:
        """The solar radius value to use in eclipse calculations.  Uses Distance Dimension."""
        return self._intf.get_property(IAgVASRPSpherical._metadata, IAgVASRPSpherical._get_SolarRadius_metadata)

    _set_SolarRadius_metadata = { "name" : "SolarRadius",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @SolarRadius.setter
    def SolarRadius(self, inVal:float) -> None:
        return self._intf.set_property(IAgVASRPSpherical._metadata, IAgVASRPSpherical._set_SolarRadius_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{B8F7E804-16B0-447F-A75A-B75DF05287B0}", IAgVASRPSpherical)
agcls.AgTypeNameMap["IAgVASRPSpherical"] = IAgVASRPSpherical

class IAgVASRPNPlate(object):
    """Properties for the N-plate SRP model."""
    _num_methods = 21
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{5DE80C27-861E-4596-9461-414741A793D1}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_AtmosAlt" : 1,
                             "set_AtmosAlt" : 2,
                             "get_ShadowModel" : 3,
                             "set_ShadowModel" : 4,
                             "get_SunPosition" : 5,
                             "set_SunPosition" : 6,
                             "get_EclipsingBodies" : 7,
                             "get_MeanFlux" : 8,
                             "set_MeanFlux" : 9,
                             "get_Luminosity" : 10,
                             "set_Luminosity" : 11,
                             "get_SolarForceMethod" : 12,
                             "set_SolarForceMethod" : 13,
                             "get_IncludeBoundaryMitigation" : 14,
                             "set_IncludeBoundaryMitigation" : 15,
                             "get_UseSunCbFileValues" : 16,
                             "set_UseSunCbFileValues" : 17,
                             "get_SolarRadius" : 18,
                             "set_SolarRadius" : 19,
                             "get_NPlateDefinitionFile" : 20,
                             "set_NPlateDefinitionFile" : 21, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVASRPNPlate._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVASRPNPlate from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVASRPNPlate.__dict__ and type(IAgVASRPNPlate.__dict__[attrname]) == property:
            return IAgVASRPNPlate.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVASRPNPlate.")
    
    _get_AtmosAlt_metadata = { "name" : "AtmosAlt",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def AtmosAlt(self) -> float:
        """The atmospheric altitude for eclipse. A simple model to account for some measure of attenuation that simply increases the shape of the Earth by the defined altitude height, often taken to be 23 km. Uses Distance Dimension."""
        return self._intf.get_property(IAgVASRPNPlate._metadata, IAgVASRPNPlate._get_AtmosAlt_metadata)

    _set_AtmosAlt_metadata = { "name" : "AtmosAlt",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @AtmosAlt.setter
    def AtmosAlt(self, inVal:float) -> None:
        return self._intf.set_property(IAgVASRPNPlate._metadata, IAgVASRPNPlate._set_AtmosAlt_metadata, inVal)

    _get_ShadowModel_metadata = { "name" : "ShadowModel",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAShadowModel),) }
    @property
    def ShadowModel(self) -> "AgEVAShadowModel":
        """The shadow model type."""
        return self._intf.get_property(IAgVASRPNPlate._metadata, IAgVASRPNPlate._get_ShadowModel_metadata)

    _set_ShadowModel_metadata = { "name" : "ShadowModel",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAShadowModel),) }
    @ShadowModel.setter
    def ShadowModel(self, inVal:"AgEVAShadowModel") -> None:
        return self._intf.set_property(IAgVASRPNPlate._metadata, IAgVASRPNPlate._set_ShadowModel_metadata, inVal)

    _get_SunPosition_metadata = { "name" : "SunPosition",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVASunPosition),) }
    @property
    def SunPosition(self) -> "AgEVASunPosition":
        """The sun position computation."""
        return self._intf.get_property(IAgVASRPNPlate._metadata, IAgVASRPNPlate._get_SunPosition_metadata)

    _set_SunPosition_metadata = { "name" : "SunPosition",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVASunPosition),) }
    @SunPosition.setter
    def SunPosition(self, inVal:"AgEVASunPosition") -> None:
        return self._intf.set_property(IAgVASRPNPlate._metadata, IAgVASRPNPlate._set_SunPosition_metadata, inVal)

    _get_EclipsingBodies_metadata = { "name" : "EclipsingBodies",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def EclipsingBodies(self) -> "IAgVACentralBodyCollection":
        """Other eclipsing bodies."""
        return self._intf.get_property(IAgVASRPNPlate._metadata, IAgVASRPNPlate._get_EclipsingBodies_metadata)

    _get_MeanFlux_metadata = { "name" : "MeanFlux",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def MeanFlux(self) -> float:
        """The mean solar flux at 1 au (W/m^2)."""
        return self._intf.get_property(IAgVASRPNPlate._metadata, IAgVASRPNPlate._get_MeanFlux_metadata)

    _set_MeanFlux_metadata = { "name" : "MeanFlux",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @MeanFlux.setter
    def MeanFlux(self, inVal:float) -> None:
        return self._intf.set_property(IAgVASRPNPlate._metadata, IAgVASRPNPlate._set_MeanFlux_metadata, inVal)

    _get_Luminosity_metadata = { "name" : "Luminosity",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def Luminosity(self) -> float:
        """The luminosity of sun. Dimensionless."""
        return self._intf.get_property(IAgVASRPNPlate._metadata, IAgVASRPNPlate._get_Luminosity_metadata)

    _set_Luminosity_metadata = { "name" : "Luminosity",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @Luminosity.setter
    def Luminosity(self, inVal:float) -> None:
        return self._intf.set_property(IAgVASRPNPlate._metadata, IAgVASRPNPlate._set_Luminosity_metadata, inVal)

    _get_SolarForceMethod_metadata = { "name" : "SolarForceMethod",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVASolarForceMethod),) }
    @property
    def SolarForceMethod(self) -> "AgEVASolarForceMethod":
        """The solar force method"""
        return self._intf.get_property(IAgVASRPNPlate._metadata, IAgVASRPNPlate._get_SolarForceMethod_metadata)

    _set_SolarForceMethod_metadata = { "name" : "SolarForceMethod",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVASolarForceMethod),) }
    @SolarForceMethod.setter
    def SolarForceMethod(self, inVal:"AgEVASolarForceMethod") -> None:
        return self._intf.set_property(IAgVASRPNPlate._metadata, IAgVASRPNPlate._set_SolarForceMethod_metadata, inVal)

    _get_IncludeBoundaryMitigation_metadata = { "name" : "IncludeBoundaryMitigation",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def IncludeBoundaryMitigation(self) -> bool:
        """True if shadow boundary mitigation should be performed; the state of the satellite after crossing a shadow boundary will be corrected for errors possibly caused by the sudden change in SRP which occurred during the integration step."""
        return self._intf.get_property(IAgVASRPNPlate._metadata, IAgVASRPNPlate._get_IncludeBoundaryMitigation_metadata)

    _set_IncludeBoundaryMitigation_metadata = { "name" : "IncludeBoundaryMitigation",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @IncludeBoundaryMitigation.setter
    def IncludeBoundaryMitigation(self, mitigation:bool) -> None:
        return self._intf.set_property(IAgVASRPNPlate._metadata, IAgVASRPNPlate._set_IncludeBoundaryMitigation_metadata, mitigation)

    _get_UseSunCbFileValues_metadata = { "name" : "UseSunCbFileValues",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def UseSunCbFileValues(self) -> bool:
        """True if solar values should come from the Sun.cb file."""
        return self._intf.get_property(IAgVASRPNPlate._metadata, IAgVASRPNPlate._get_UseSunCbFileValues_metadata)

    _set_UseSunCbFileValues_metadata = { "name" : "UseSunCbFileValues",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @UseSunCbFileValues.setter
    def UseSunCbFileValues(self, inVal:bool) -> None:
        return self._intf.set_property(IAgVASRPNPlate._metadata, IAgVASRPNPlate._set_UseSunCbFileValues_metadata, inVal)

    _get_SolarRadius_metadata = { "name" : "SolarRadius",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def SolarRadius(self) -> float:
        """The solar radius value to use in eclipse calculations.  Uses Distance Dimension."""
        return self._intf.get_property(IAgVASRPNPlate._metadata, IAgVASRPNPlate._get_SolarRadius_metadata)

    _set_SolarRadius_metadata = { "name" : "SolarRadius",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @SolarRadius.setter
    def SolarRadius(self, inVal:float) -> None:
        return self._intf.set_property(IAgVASRPNPlate._metadata, IAgVASRPNPlate._set_SolarRadius_metadata, inVal)

    _get_NPlateDefinitionFile_metadata = { "name" : "NPlateDefinitionFile",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def NPlateDefinitionFile(self) -> str:
        """Full path of NPlate definition file."""
        return self._intf.get_property(IAgVASRPNPlate._metadata, IAgVASRPNPlate._get_NPlateDefinitionFile_metadata)

    _set_NPlateDefinitionFile_metadata = { "name" : "NPlateDefinitionFile",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @NPlateDefinitionFile.setter
    def NPlateDefinitionFile(self, inVal:str) -> None:
        return self._intf.set_property(IAgVASRPNPlate._metadata, IAgVASRPNPlate._set_NPlateDefinitionFile_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{5DE80C27-861E-4596-9461-414741A793D1}", IAgVASRPNPlate)
agcls.AgTypeNameMap["IAgVASRPNPlate"] = IAgVASRPNPlate

class IAgVASRPTabAreaVec(object):
    """Properties for the tabulated area vector SRP model."""
    _num_methods = 23
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{796EAE38-5298-4315-AA74-29C810F2E3FE}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_AtmosAlt" : 1,
                             "set_AtmosAlt" : 2,
                             "get_ShadowModel" : 3,
                             "set_ShadowModel" : 4,
                             "get_SunPosition" : 5,
                             "set_SunPosition" : 6,
                             "get_EclipsingBodies" : 7,
                             "get_MeanFlux" : 8,
                             "set_MeanFlux" : 9,
                             "get_Luminosity" : 10,
                             "set_Luminosity" : 11,
                             "get_SolarForceMethod" : 12,
                             "set_SolarForceMethod" : 13,
                             "get_IncludeBoundaryMitigation" : 14,
                             "set_IncludeBoundaryMitigation" : 15,
                             "get_UseSunCbFileValues" : 16,
                             "set_UseSunCbFileValues" : 17,
                             "get_SolarRadius" : 18,
                             "set_SolarRadius" : 19,
                             "get_TabAreaVectorDefinitionFile" : 20,
                             "set_TabAreaVectorDefinitionFile" : 21,
                             "get_InterpolationMethod" : 22,
                             "set_InterpolationMethod" : 23, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVASRPTabAreaVec._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVASRPTabAreaVec from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVASRPTabAreaVec.__dict__ and type(IAgVASRPTabAreaVec.__dict__[attrname]) == property:
            return IAgVASRPTabAreaVec.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVASRPTabAreaVec.")
    
    _get_AtmosAlt_metadata = { "name" : "AtmosAlt",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def AtmosAlt(self) -> float:
        """The atmospheric altitude for eclipse. A simple model to account for some measure of attenuation that simply increases the shape of the Earth by the defined altitude height, often taken to be 23 km. Uses Distance Dimension."""
        return self._intf.get_property(IAgVASRPTabAreaVec._metadata, IAgVASRPTabAreaVec._get_AtmosAlt_metadata)

    _set_AtmosAlt_metadata = { "name" : "AtmosAlt",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @AtmosAlt.setter
    def AtmosAlt(self, inVal:float) -> None:
        return self._intf.set_property(IAgVASRPTabAreaVec._metadata, IAgVASRPTabAreaVec._set_AtmosAlt_metadata, inVal)

    _get_ShadowModel_metadata = { "name" : "ShadowModel",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAShadowModel),) }
    @property
    def ShadowModel(self) -> "AgEVAShadowModel":
        """The shadow model type."""
        return self._intf.get_property(IAgVASRPTabAreaVec._metadata, IAgVASRPTabAreaVec._get_ShadowModel_metadata)

    _set_ShadowModel_metadata = { "name" : "ShadowModel",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAShadowModel),) }
    @ShadowModel.setter
    def ShadowModel(self, inVal:"AgEVAShadowModel") -> None:
        return self._intf.set_property(IAgVASRPTabAreaVec._metadata, IAgVASRPTabAreaVec._set_ShadowModel_metadata, inVal)

    _get_SunPosition_metadata = { "name" : "SunPosition",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVASunPosition),) }
    @property
    def SunPosition(self) -> "AgEVASunPosition":
        """The sun position computation."""
        return self._intf.get_property(IAgVASRPTabAreaVec._metadata, IAgVASRPTabAreaVec._get_SunPosition_metadata)

    _set_SunPosition_metadata = { "name" : "SunPosition",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVASunPosition),) }
    @SunPosition.setter
    def SunPosition(self, inVal:"AgEVASunPosition") -> None:
        return self._intf.set_property(IAgVASRPTabAreaVec._metadata, IAgVASRPTabAreaVec._set_SunPosition_metadata, inVal)

    _get_EclipsingBodies_metadata = { "name" : "EclipsingBodies",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def EclipsingBodies(self) -> "IAgVACentralBodyCollection":
        """Other eclipsing bodies."""
        return self._intf.get_property(IAgVASRPTabAreaVec._metadata, IAgVASRPTabAreaVec._get_EclipsingBodies_metadata)

    _get_MeanFlux_metadata = { "name" : "MeanFlux",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def MeanFlux(self) -> float:
        """The mean solar flux at 1 au (W/m^2)."""
        return self._intf.get_property(IAgVASRPTabAreaVec._metadata, IAgVASRPTabAreaVec._get_MeanFlux_metadata)

    _set_MeanFlux_metadata = { "name" : "MeanFlux",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @MeanFlux.setter
    def MeanFlux(self, inVal:float) -> None:
        return self._intf.set_property(IAgVASRPTabAreaVec._metadata, IAgVASRPTabAreaVec._set_MeanFlux_metadata, inVal)

    _get_Luminosity_metadata = { "name" : "Luminosity",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def Luminosity(self) -> float:
        """The luminosity of sun. Dimensionless."""
        return self._intf.get_property(IAgVASRPTabAreaVec._metadata, IAgVASRPTabAreaVec._get_Luminosity_metadata)

    _set_Luminosity_metadata = { "name" : "Luminosity",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @Luminosity.setter
    def Luminosity(self, inVal:float) -> None:
        return self._intf.set_property(IAgVASRPTabAreaVec._metadata, IAgVASRPTabAreaVec._set_Luminosity_metadata, inVal)

    _get_SolarForceMethod_metadata = { "name" : "SolarForceMethod",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVASolarForceMethod),) }
    @property
    def SolarForceMethod(self) -> "AgEVASolarForceMethod":
        """The solar force method"""
        return self._intf.get_property(IAgVASRPTabAreaVec._metadata, IAgVASRPTabAreaVec._get_SolarForceMethod_metadata)

    _set_SolarForceMethod_metadata = { "name" : "SolarForceMethod",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVASolarForceMethod),) }
    @SolarForceMethod.setter
    def SolarForceMethod(self, inVal:"AgEVASolarForceMethod") -> None:
        return self._intf.set_property(IAgVASRPTabAreaVec._metadata, IAgVASRPTabAreaVec._set_SolarForceMethod_metadata, inVal)

    _get_IncludeBoundaryMitigation_metadata = { "name" : "IncludeBoundaryMitigation",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def IncludeBoundaryMitigation(self) -> bool:
        """True if shadow boundary mitigation should be performed; the state of the satellite after crossing a shadow boundary will be corrected for errors possibly caused by the sudden change in SRP which occurred during the integration step."""
        return self._intf.get_property(IAgVASRPTabAreaVec._metadata, IAgVASRPTabAreaVec._get_IncludeBoundaryMitigation_metadata)

    _set_IncludeBoundaryMitigation_metadata = { "name" : "IncludeBoundaryMitigation",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @IncludeBoundaryMitigation.setter
    def IncludeBoundaryMitigation(self, mitigation:bool) -> None:
        return self._intf.set_property(IAgVASRPTabAreaVec._metadata, IAgVASRPTabAreaVec._set_IncludeBoundaryMitigation_metadata, mitigation)

    _get_UseSunCbFileValues_metadata = { "name" : "UseSunCbFileValues",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def UseSunCbFileValues(self) -> bool:
        """True if solar values should come from the Sun.cb file."""
        return self._intf.get_property(IAgVASRPTabAreaVec._metadata, IAgVASRPTabAreaVec._get_UseSunCbFileValues_metadata)

    _set_UseSunCbFileValues_metadata = { "name" : "UseSunCbFileValues",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @UseSunCbFileValues.setter
    def UseSunCbFileValues(self, inVal:bool) -> None:
        return self._intf.set_property(IAgVASRPTabAreaVec._metadata, IAgVASRPTabAreaVec._set_UseSunCbFileValues_metadata, inVal)

    _get_SolarRadius_metadata = { "name" : "SolarRadius",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def SolarRadius(self) -> float:
        """The solar radius value to use in eclipse calculations.  Uses Distance Dimension."""
        return self._intf.get_property(IAgVASRPTabAreaVec._metadata, IAgVASRPTabAreaVec._get_SolarRadius_metadata)

    _set_SolarRadius_metadata = { "name" : "SolarRadius",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @SolarRadius.setter
    def SolarRadius(self, inVal:float) -> None:
        return self._intf.set_property(IAgVASRPTabAreaVec._metadata, IAgVASRPTabAreaVec._set_SolarRadius_metadata, inVal)

    _get_TabAreaVectorDefinitionFile_metadata = { "name" : "TabAreaVectorDefinitionFile",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def TabAreaVectorDefinitionFile(self) -> str:
        """Full path of the tabulated area vector definition file."""
        return self._intf.get_property(IAgVASRPTabAreaVec._metadata, IAgVASRPTabAreaVec._get_TabAreaVectorDefinitionFile_metadata)

    _set_TabAreaVectorDefinitionFile_metadata = { "name" : "TabAreaVectorDefinitionFile",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @TabAreaVectorDefinitionFile.setter
    def TabAreaVectorDefinitionFile(self, inVal:str) -> None:
        return self._intf.set_property(IAgVASRPTabAreaVec._metadata, IAgVASRPTabAreaVec._set_TabAreaVectorDefinitionFile_metadata, inVal)

    _get_InterpolationMethod_metadata = { "name" : "InterpolationMethod",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVATabVecInterpMethod),) }
    @property
    def InterpolationMethod(self) -> "AgEVATabVecInterpMethod":
        """The file interpolation method."""
        return self._intf.get_property(IAgVASRPTabAreaVec._metadata, IAgVASRPTabAreaVec._get_InterpolationMethod_metadata)

    _set_InterpolationMethod_metadata = { "name" : "InterpolationMethod",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVATabVecInterpMethod),) }
    @InterpolationMethod.setter
    def InterpolationMethod(self, inVal:"AgEVATabVecInterpMethod") -> None:
        return self._intf.set_property(IAgVASRPTabAreaVec._metadata, IAgVASRPTabAreaVec._set_InterpolationMethod_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{796EAE38-5298-4315-AA74-29C810F2E3FE}", IAgVASRPTabAreaVec)
agcls.AgTypeNameMap["IAgVASRPTabAreaVec"] = IAgVASRPTabAreaVec

class IAgVASRPVariableArea(object):
    """Properties for the Variable Area SRP model."""
    _num_methods = 21
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{4124EBC1-ABC6-4933-84D2-0F1232D8B630}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_AtmosAlt" : 1,
                             "set_AtmosAlt" : 2,
                             "get_ShadowModel" : 3,
                             "set_ShadowModel" : 4,
                             "get_SunPosition" : 5,
                             "set_SunPosition" : 6,
                             "get_EclipsingBodies" : 7,
                             "get_MeanFlux" : 8,
                             "set_MeanFlux" : 9,
                             "get_Luminosity" : 10,
                             "set_Luminosity" : 11,
                             "get_SolarForceMethod" : 12,
                             "set_SolarForceMethod" : 13,
                             "get_IncludeBoundaryMitigation" : 14,
                             "set_IncludeBoundaryMitigation" : 15,
                             "get_UseSunCbFileValues" : 16,
                             "set_UseSunCbFileValues" : 17,
                             "get_SolarRadius" : 18,
                             "set_SolarRadius" : 19,
                             "get_VariableAreaHistoryFile" : 20,
                             "set_VariableAreaHistoryFile" : 21, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVASRPVariableArea._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVASRPVariableArea from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVASRPVariableArea.__dict__ and type(IAgVASRPVariableArea.__dict__[attrname]) == property:
            return IAgVASRPVariableArea.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVASRPVariableArea.")
    
    _get_AtmosAlt_metadata = { "name" : "AtmosAlt",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def AtmosAlt(self) -> float:
        """The atmospheric altitude for eclipse. A simple model to account for some measure of attenuation that simply increases the shape of the Earth by the defined altitude height, often taken to be 23 km. Uses Distance Dimension."""
        return self._intf.get_property(IAgVASRPVariableArea._metadata, IAgVASRPVariableArea._get_AtmosAlt_metadata)

    _set_AtmosAlt_metadata = { "name" : "AtmosAlt",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @AtmosAlt.setter
    def AtmosAlt(self, inVal:float) -> None:
        return self._intf.set_property(IAgVASRPVariableArea._metadata, IAgVASRPVariableArea._set_AtmosAlt_metadata, inVal)

    _get_ShadowModel_metadata = { "name" : "ShadowModel",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAShadowModel),) }
    @property
    def ShadowModel(self) -> "AgEVAShadowModel":
        """The shadow model type."""
        return self._intf.get_property(IAgVASRPVariableArea._metadata, IAgVASRPVariableArea._get_ShadowModel_metadata)

    _set_ShadowModel_metadata = { "name" : "ShadowModel",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAShadowModel),) }
    @ShadowModel.setter
    def ShadowModel(self, inVal:"AgEVAShadowModel") -> None:
        return self._intf.set_property(IAgVASRPVariableArea._metadata, IAgVASRPVariableArea._set_ShadowModel_metadata, inVal)

    _get_SunPosition_metadata = { "name" : "SunPosition",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVASunPosition),) }
    @property
    def SunPosition(self) -> "AgEVASunPosition":
        """The sun position computation."""
        return self._intf.get_property(IAgVASRPVariableArea._metadata, IAgVASRPVariableArea._get_SunPosition_metadata)

    _set_SunPosition_metadata = { "name" : "SunPosition",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVASunPosition),) }
    @SunPosition.setter
    def SunPosition(self, inVal:"AgEVASunPosition") -> None:
        return self._intf.set_property(IAgVASRPVariableArea._metadata, IAgVASRPVariableArea._set_SunPosition_metadata, inVal)

    _get_EclipsingBodies_metadata = { "name" : "EclipsingBodies",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def EclipsingBodies(self) -> "IAgVACentralBodyCollection":
        """Other eclipsing bodies."""
        return self._intf.get_property(IAgVASRPVariableArea._metadata, IAgVASRPVariableArea._get_EclipsingBodies_metadata)

    _get_MeanFlux_metadata = { "name" : "MeanFlux",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def MeanFlux(self) -> float:
        """The mean solar flux at 1 au (W/m^2)."""
        return self._intf.get_property(IAgVASRPVariableArea._metadata, IAgVASRPVariableArea._get_MeanFlux_metadata)

    _set_MeanFlux_metadata = { "name" : "MeanFlux",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @MeanFlux.setter
    def MeanFlux(self, inVal:float) -> None:
        return self._intf.set_property(IAgVASRPVariableArea._metadata, IAgVASRPVariableArea._set_MeanFlux_metadata, inVal)

    _get_Luminosity_metadata = { "name" : "Luminosity",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def Luminosity(self) -> float:
        """The luminosity of sun. Dimensionless."""
        return self._intf.get_property(IAgVASRPVariableArea._metadata, IAgVASRPVariableArea._get_Luminosity_metadata)

    _set_Luminosity_metadata = { "name" : "Luminosity",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @Luminosity.setter
    def Luminosity(self, inVal:float) -> None:
        return self._intf.set_property(IAgVASRPVariableArea._metadata, IAgVASRPVariableArea._set_Luminosity_metadata, inVal)

    _get_SolarForceMethod_metadata = { "name" : "SolarForceMethod",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVASolarForceMethod),) }
    @property
    def SolarForceMethod(self) -> "AgEVASolarForceMethod":
        """The solar force method"""
        return self._intf.get_property(IAgVASRPVariableArea._metadata, IAgVASRPVariableArea._get_SolarForceMethod_metadata)

    _set_SolarForceMethod_metadata = { "name" : "SolarForceMethod",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVASolarForceMethod),) }
    @SolarForceMethod.setter
    def SolarForceMethod(self, inVal:"AgEVASolarForceMethod") -> None:
        return self._intf.set_property(IAgVASRPVariableArea._metadata, IAgVASRPVariableArea._set_SolarForceMethod_metadata, inVal)

    _get_IncludeBoundaryMitigation_metadata = { "name" : "IncludeBoundaryMitigation",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def IncludeBoundaryMitigation(self) -> bool:
        """True if shadow boundary mitigation should be performed; the state of the satellite after crossing a shadow boundary will be corrected for errors possibly caused by the sudden change in SRP which occurred during the integration step."""
        return self._intf.get_property(IAgVASRPVariableArea._metadata, IAgVASRPVariableArea._get_IncludeBoundaryMitigation_metadata)

    _set_IncludeBoundaryMitigation_metadata = { "name" : "IncludeBoundaryMitigation",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @IncludeBoundaryMitigation.setter
    def IncludeBoundaryMitigation(self, mitigation:bool) -> None:
        return self._intf.set_property(IAgVASRPVariableArea._metadata, IAgVASRPVariableArea._set_IncludeBoundaryMitigation_metadata, mitigation)

    _get_UseSunCbFileValues_metadata = { "name" : "UseSunCbFileValues",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def UseSunCbFileValues(self) -> bool:
        """True if solar values should come from the Sun.cb file."""
        return self._intf.get_property(IAgVASRPVariableArea._metadata, IAgVASRPVariableArea._get_UseSunCbFileValues_metadata)

    _set_UseSunCbFileValues_metadata = { "name" : "UseSunCbFileValues",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @UseSunCbFileValues.setter
    def UseSunCbFileValues(self, inVal:bool) -> None:
        return self._intf.set_property(IAgVASRPVariableArea._metadata, IAgVASRPVariableArea._set_UseSunCbFileValues_metadata, inVal)

    _get_SolarRadius_metadata = { "name" : "SolarRadius",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def SolarRadius(self) -> float:
        """The solar radius value to use in eclipse calculations.  Uses Distance Dimension."""
        return self._intf.get_property(IAgVASRPVariableArea._metadata, IAgVASRPVariableArea._get_SolarRadius_metadata)

    _set_SolarRadius_metadata = { "name" : "SolarRadius",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @SolarRadius.setter
    def SolarRadius(self, inVal:float) -> None:
        return self._intf.set_property(IAgVASRPVariableArea._metadata, IAgVASRPVariableArea._set_SolarRadius_metadata, inVal)

    _get_VariableAreaHistoryFile_metadata = { "name" : "VariableAreaHistoryFile",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def VariableAreaHistoryFile(self) -> str:
        """Full path of the variable area history file."""
        return self._intf.get_property(IAgVASRPVariableArea._metadata, IAgVASRPVariableArea._get_VariableAreaHistoryFile_metadata)

    _set_VariableAreaHistoryFile_metadata = { "name" : "VariableAreaHistoryFile",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @VariableAreaHistoryFile.setter
    def VariableAreaHistoryFile(self, inVal:str) -> None:
        return self._intf.set_property(IAgVASRPVariableArea._metadata, IAgVASRPVariableArea._set_VariableAreaHistoryFile_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{4124EBC1-ABC6-4933-84D2-0F1232D8B630}", IAgVASRPVariableArea)
agcls.AgTypeNameMap["IAgVASRPVariableArea"] = IAgVASRPVariableArea

class IAgVAThirdBodyFunction(object):
    """Properties for a Third Body propagator function. The IAgComponentInfo object returned by the mode property can be cast to IAgVAGravityFieldFunction or IAgVAPointMassFunction depending on the selected ModeType."""
    _num_methods = 8
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{86FDAC1D-8E57-4915-AA9B-E6C35E06C9BC}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_ThirdBodyName" : 1,
                             "set_ThirdBodyName" : 2,
                             "get_EphemSource" : 3,
                             "set_EphemSource" : 4,
                             "get_Mode" : 5,
                             "SetModeType" : 6,
                             "get_ModeType" : 7,
                             "get_EphemerisSourceWarning" : 8, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAThirdBodyFunction._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAThirdBodyFunction from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAThirdBodyFunction.__dict__ and type(IAgVAThirdBodyFunction.__dict__[attrname]) == property:
            return IAgVAThirdBodyFunction.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAThirdBodyFunction.")
    
    _get_ThirdBodyName_metadata = { "name" : "ThirdBodyName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def ThirdBodyName(self) -> str:
        """The selected third body model."""
        return self._intf.get_property(IAgVAThirdBodyFunction._metadata, IAgVAThirdBodyFunction._get_ThirdBodyName_metadata)

    _set_ThirdBodyName_metadata = { "name" : "ThirdBodyName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @ThirdBodyName.setter
    def ThirdBodyName(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAThirdBodyFunction._metadata, IAgVAThirdBodyFunction._set_ThirdBodyName_metadata, inVal)

    _get_EphemSource_metadata = { "name" : "EphemSource",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAEphemSource),) }
    @property
    def EphemSource(self) -> "AgEVAEphemSource":
        """Source for the third body's ephemeris"""
        return self._intf.get_property(IAgVAThirdBodyFunction._metadata, IAgVAThirdBodyFunction._get_EphemSource_metadata)

    _set_EphemSource_metadata = { "name" : "EphemSource",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAEphemSource),) }
    @EphemSource.setter
    def EphemSource(self, inVal:"AgEVAEphemSource") -> None:
        return self._intf.set_property(IAgVAThirdBodyFunction._metadata, IAgVAThirdBodyFunction._set_EphemSource_metadata, inVal)

    _get_Mode_metadata = { "name" : "Mode",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def Mode(self) -> "IAgComponentInfo":
        """The third body gravity mode. The IAgComponentInfo object returned by this property can be cast to IAgVAGravityFieldFunction or IAgVAPointMassFunction depending on the selected ModeType."""
        return self._intf.get_property(IAgVAThirdBodyFunction._metadata, IAgVAThirdBodyFunction._get_Mode_metadata)

    _SetModeType_metadata = { "name" : "SetModeType",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAThirdBodyMode),) }
    def SetModeType(self, mode:"AgEVAThirdBodyMode") -> None:
        """The third body gravity mode."""
        return self._intf.invoke(IAgVAThirdBodyFunction._metadata, IAgVAThirdBodyFunction._SetModeType_metadata, mode)

    _get_ModeType_metadata = { "name" : "ModeType",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAThirdBodyMode),) }
    @property
    def ModeType(self) -> "AgEVAThirdBodyMode":
        """The third body gravity mode type."""
        return self._intf.get_property(IAgVAThirdBodyFunction._metadata, IAgVAThirdBodyFunction._get_ModeType_metadata)

    _get_EphemerisSourceWarning_metadata = { "name" : "EphemerisSourceWarning",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def EphemerisSourceWarning(self) -> str:
        """Returns a warning message if the Ephemeris source and the gravity are not compatible"""
        return self._intf.get_property(IAgVAThirdBodyFunction._metadata, IAgVAThirdBodyFunction._get_EphemerisSourceWarning_metadata)


agcls.AgClassCatalog.add_catalog_entry("{86FDAC1D-8E57-4915-AA9B-E6C35E06C9BC}", IAgVAThirdBodyFunction)
agcls.AgTypeNameMap["IAgVAThirdBodyFunction"] = IAgVAThirdBodyFunction

class IAgVASRPReflectionPlugin(object):
    """Properties for the plugin SRP Refelction."""
    _num_methods = 16
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{2DF13668-98B3-4E69-89CA-C8136EAE49D9}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_PluginIdentifier" : 1,
                             "set_PluginIdentifier" : 2,
                             "get_PluginConfig" : 3,
                             "get_AtmosAlt" : 4,
                             "set_AtmosAlt" : 5,
                             "get_ShadowModel" : 6,
                             "set_ShadowModel" : 7,
                             "get_SunPosition" : 8,
                             "set_SunPosition" : 9,
                             "get_EclipsingBodies" : 10,
                             "get_IncludeBoundaryMitigation" : 11,
                             "set_IncludeBoundaryMitigation" : 12,
                             "get_UseSunCbFileValues" : 13,
                             "set_UseSunCbFileValues" : 14,
                             "get_SolarRadius" : 15,
                             "set_SolarRadius" : 16, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVASRPReflectionPlugin._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVASRPReflectionPlugin from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVASRPReflectionPlugin.__dict__ and type(IAgVASRPReflectionPlugin.__dict__[attrname]) == property:
            return IAgVASRPReflectionPlugin.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVASRPReflectionPlugin.")
    
    _get_PluginIdentifier_metadata = { "name" : "PluginIdentifier",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def PluginIdentifier(self) -> str:
        """The plugin name."""
        return self._intf.get_property(IAgVASRPReflectionPlugin._metadata, IAgVASRPReflectionPlugin._get_PluginIdentifier_metadata)

    _set_PluginIdentifier_metadata = { "name" : "PluginIdentifier",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @PluginIdentifier.setter
    def PluginIdentifier(self, inVal:str) -> None:
        return self._intf.set_property(IAgVASRPReflectionPlugin._metadata, IAgVASRPReflectionPlugin._set_PluginIdentifier_metadata, inVal)

    _get_PluginConfig_metadata = { "name" : "PluginConfig",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def PluginConfig(self) -> "IAgVAPluginProperties":
        """The properties of the selected plugin."""
        return self._intf.get_property(IAgVASRPReflectionPlugin._metadata, IAgVASRPReflectionPlugin._get_PluginConfig_metadata)

    _get_AtmosAlt_metadata = { "name" : "AtmosAlt",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def AtmosAlt(self) -> float:
        """The atmospheric altitude for eclipse. A simple model to account for some measure of attenuation that simply increases the shape of the Earth by the defined altitude height, often taken to be 23 km. Uses Distance Dimension."""
        return self._intf.get_property(IAgVASRPReflectionPlugin._metadata, IAgVASRPReflectionPlugin._get_AtmosAlt_metadata)

    _set_AtmosAlt_metadata = { "name" : "AtmosAlt",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @AtmosAlt.setter
    def AtmosAlt(self, inVal:float) -> None:
        return self._intf.set_property(IAgVASRPReflectionPlugin._metadata, IAgVASRPReflectionPlugin._set_AtmosAlt_metadata, inVal)

    _get_ShadowModel_metadata = { "name" : "ShadowModel",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAShadowModel),) }
    @property
    def ShadowModel(self) -> "AgEVAShadowModel":
        """The shadow model type."""
        return self._intf.get_property(IAgVASRPReflectionPlugin._metadata, IAgVASRPReflectionPlugin._get_ShadowModel_metadata)

    _set_ShadowModel_metadata = { "name" : "ShadowModel",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAShadowModel),) }
    @ShadowModel.setter
    def ShadowModel(self, inVal:"AgEVAShadowModel") -> None:
        return self._intf.set_property(IAgVASRPReflectionPlugin._metadata, IAgVASRPReflectionPlugin._set_ShadowModel_metadata, inVal)

    _get_SunPosition_metadata = { "name" : "SunPosition",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVASunPosition),) }
    @property
    def SunPosition(self) -> "AgEVASunPosition":
        """The sun position computation."""
        return self._intf.get_property(IAgVASRPReflectionPlugin._metadata, IAgVASRPReflectionPlugin._get_SunPosition_metadata)

    _set_SunPosition_metadata = { "name" : "SunPosition",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVASunPosition),) }
    @SunPosition.setter
    def SunPosition(self, inVal:"AgEVASunPosition") -> None:
        return self._intf.set_property(IAgVASRPReflectionPlugin._metadata, IAgVASRPReflectionPlugin._set_SunPosition_metadata, inVal)

    _get_EclipsingBodies_metadata = { "name" : "EclipsingBodies",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def EclipsingBodies(self) -> "IAgVACentralBodyCollection":
        """Other eclipsing bodies."""
        return self._intf.get_property(IAgVASRPReflectionPlugin._metadata, IAgVASRPReflectionPlugin._get_EclipsingBodies_metadata)

    _get_IncludeBoundaryMitigation_metadata = { "name" : "IncludeBoundaryMitigation",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def IncludeBoundaryMitigation(self) -> bool:
        """True if shadow boundary mitigation should be performed; the state of the satellite after crossing a shadow boundary will be corrected for errors possibly caused by the sudden change in SRP which occurred during the integration step."""
        return self._intf.get_property(IAgVASRPReflectionPlugin._metadata, IAgVASRPReflectionPlugin._get_IncludeBoundaryMitigation_metadata)

    _set_IncludeBoundaryMitigation_metadata = { "name" : "IncludeBoundaryMitigation",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @IncludeBoundaryMitigation.setter
    def IncludeBoundaryMitigation(self, mitigation:bool) -> None:
        return self._intf.set_property(IAgVASRPReflectionPlugin._metadata, IAgVASRPReflectionPlugin._set_IncludeBoundaryMitigation_metadata, mitigation)

    _get_UseSunCbFileValues_metadata = { "name" : "UseSunCbFileValues",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def UseSunCbFileValues(self) -> bool:
        """True if solar values should come from the Sun.cb file."""
        return self._intf.get_property(IAgVASRPReflectionPlugin._metadata, IAgVASRPReflectionPlugin._get_UseSunCbFileValues_metadata)

    _set_UseSunCbFileValues_metadata = { "name" : "UseSunCbFileValues",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @UseSunCbFileValues.setter
    def UseSunCbFileValues(self, inVal:bool) -> None:
        return self._intf.set_property(IAgVASRPReflectionPlugin._metadata, IAgVASRPReflectionPlugin._set_UseSunCbFileValues_metadata, inVal)

    _get_SolarRadius_metadata = { "name" : "SolarRadius",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def SolarRadius(self) -> float:
        """The solar radius value to use in eclipse calculations.  Uses Distance Dimension."""
        return self._intf.get_property(IAgVASRPReflectionPlugin._metadata, IAgVASRPReflectionPlugin._get_SolarRadius_metadata)

    _set_SolarRadius_metadata = { "name" : "SolarRadius",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @SolarRadius.setter
    def SolarRadius(self, inVal:float) -> None:
        return self._intf.set_property(IAgVASRPReflectionPlugin._metadata, IAgVASRPReflectionPlugin._set_SolarRadius_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{2DF13668-98B3-4E69-89CA-C8136EAE49D9}", IAgVASRPReflectionPlugin)
agcls.AgTypeNameMap["IAgVASRPReflectionPlugin"] = IAgVASRPReflectionPlugin

class IAgVAEngineModelThrustCoefficients(object):
    """Thrust coefficient properties for engine definition."""
    _num_methods = 32
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{2F905CDC-4D91-497F-85E2-AE1E2F3A4FA3}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_C0" : 1,
                             "set_C0" : 2,
                             "get_C1" : 3,
                             "set_C1" : 4,
                             "get_C2" : 5,
                             "set_C2" : 6,
                             "get_C3" : 7,
                             "set_C3" : 8,
                             "get_C4" : 9,
                             "set_C4" : 10,
                             "get_C5" : 11,
                             "set_C5" : 12,
                             "get_C6" : 13,
                             "set_C6" : 14,
                             "get_C7" : 15,
                             "set_C7" : 16,
                             "get_E4" : 17,
                             "set_E4" : 18,
                             "get_E5" : 19,
                             "set_E5" : 20,
                             "get_E6" : 21,
                             "set_E6" : 22,
                             "get_E7" : 23,
                             "set_E7" : 24,
                             "get_B7" : 25,
                             "set_B7" : 26,
                             "get_K0" : 27,
                             "set_K0" : 28,
                             "get_K1" : 29,
                             "set_K1" : 30,
                             "get_ReferenceTemp" : 31,
                             "set_ReferenceTemp" : 32, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAEngineModelThrustCoefficients._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAEngineModelThrustCoefficients from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAEngineModelThrustCoefficients.__dict__ and type(IAgVAEngineModelThrustCoefficients.__dict__[attrname]) == property:
            return IAgVAEngineModelThrustCoefficients.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAEngineModelThrustCoefficients.")
    
    _get_C0_metadata = { "name" : "C0",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def C0(self) -> float:
        """C0 coefficient. Dimensionless."""
        return self._intf.get_property(IAgVAEngineModelThrustCoefficients._metadata, IAgVAEngineModelThrustCoefficients._get_C0_metadata)

    _set_C0_metadata = { "name" : "C0",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @C0.setter
    def C0(self, inVal:float) -> None:
        return self._intf.set_property(IAgVAEngineModelThrustCoefficients._metadata, IAgVAEngineModelThrustCoefficients._set_C0_metadata, inVal)

    _get_C1_metadata = { "name" : "C1",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def C1(self) -> float:
        """C1 coefficient. Dimensionless."""
        return self._intf.get_property(IAgVAEngineModelThrustCoefficients._metadata, IAgVAEngineModelThrustCoefficients._get_C1_metadata)

    _set_C1_metadata = { "name" : "C1",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @C1.setter
    def C1(self, inVal:float) -> None:
        return self._intf.set_property(IAgVAEngineModelThrustCoefficients._metadata, IAgVAEngineModelThrustCoefficients._set_C1_metadata, inVal)

    _get_C2_metadata = { "name" : "C2",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def C2(self) -> float:
        """C2 coefficient. Dimensionless."""
        return self._intf.get_property(IAgVAEngineModelThrustCoefficients._metadata, IAgVAEngineModelThrustCoefficients._get_C2_metadata)

    _set_C2_metadata = { "name" : "C2",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @C2.setter
    def C2(self, inVal:float) -> None:
        return self._intf.set_property(IAgVAEngineModelThrustCoefficients._metadata, IAgVAEngineModelThrustCoefficients._set_C2_metadata, inVal)

    _get_C3_metadata = { "name" : "C3",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def C3(self) -> float:
        """C3 coefficient. Dimensionless."""
        return self._intf.get_property(IAgVAEngineModelThrustCoefficients._metadata, IAgVAEngineModelThrustCoefficients._get_C3_metadata)

    _set_C3_metadata = { "name" : "C3",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @C3.setter
    def C3(self, inVal:float) -> None:
        return self._intf.set_property(IAgVAEngineModelThrustCoefficients._metadata, IAgVAEngineModelThrustCoefficients._set_C3_metadata, inVal)

    _get_C4_metadata = { "name" : "C4",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def C4(self) -> float:
        """C4 coefficient. Dimensionless."""
        return self._intf.get_property(IAgVAEngineModelThrustCoefficients._metadata, IAgVAEngineModelThrustCoefficients._get_C4_metadata)

    _set_C4_metadata = { "name" : "C4",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @C4.setter
    def C4(self, inVal:float) -> None:
        return self._intf.set_property(IAgVAEngineModelThrustCoefficients._metadata, IAgVAEngineModelThrustCoefficients._set_C4_metadata, inVal)

    _get_C5_metadata = { "name" : "C5",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def C5(self) -> float:
        """C5 coefficient. Dimensionless."""
        return self._intf.get_property(IAgVAEngineModelThrustCoefficients._metadata, IAgVAEngineModelThrustCoefficients._get_C5_metadata)

    _set_C5_metadata = { "name" : "C5",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @C5.setter
    def C5(self, inVal:float) -> None:
        return self._intf.set_property(IAgVAEngineModelThrustCoefficients._metadata, IAgVAEngineModelThrustCoefficients._set_C5_metadata, inVal)

    _get_C6_metadata = { "name" : "C6",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def C6(self) -> float:
        """C6 coefficient. Dimensionless."""
        return self._intf.get_property(IAgVAEngineModelThrustCoefficients._metadata, IAgVAEngineModelThrustCoefficients._get_C6_metadata)

    _set_C6_metadata = { "name" : "C6",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @C6.setter
    def C6(self, inVal:float) -> None:
        return self._intf.set_property(IAgVAEngineModelThrustCoefficients._metadata, IAgVAEngineModelThrustCoefficients._set_C6_metadata, inVal)

    _get_C7_metadata = { "name" : "C7",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def C7(self) -> float:
        """C7 coefficient. Dimensionless."""
        return self._intf.get_property(IAgVAEngineModelThrustCoefficients._metadata, IAgVAEngineModelThrustCoefficients._get_C7_metadata)

    _set_C7_metadata = { "name" : "C7",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @C7.setter
    def C7(self, inVal:float) -> None:
        return self._intf.set_property(IAgVAEngineModelThrustCoefficients._metadata, IAgVAEngineModelThrustCoefficients._set_C7_metadata, inVal)

    _get_E4_metadata = { "name" : "E4",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def E4(self) -> float:
        """E4 exponent. Dimensionless."""
        return self._intf.get_property(IAgVAEngineModelThrustCoefficients._metadata, IAgVAEngineModelThrustCoefficients._get_E4_metadata)

    _set_E4_metadata = { "name" : "E4",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @E4.setter
    def E4(self, inVal:float) -> None:
        return self._intf.set_property(IAgVAEngineModelThrustCoefficients._metadata, IAgVAEngineModelThrustCoefficients._set_E4_metadata, inVal)

    _get_E5_metadata = { "name" : "E5",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def E5(self) -> float:
        """E5 exponent. Dimensionless."""
        return self._intf.get_property(IAgVAEngineModelThrustCoefficients._metadata, IAgVAEngineModelThrustCoefficients._get_E5_metadata)

    _set_E5_metadata = { "name" : "E5",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @E5.setter
    def E5(self, inVal:float) -> None:
        return self._intf.set_property(IAgVAEngineModelThrustCoefficients._metadata, IAgVAEngineModelThrustCoefficients._set_E5_metadata, inVal)

    _get_E6_metadata = { "name" : "E6",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def E6(self) -> float:
        """E6 exponent. Dimensionless."""
        return self._intf.get_property(IAgVAEngineModelThrustCoefficients._metadata, IAgVAEngineModelThrustCoefficients._get_E6_metadata)

    _set_E6_metadata = { "name" : "E6",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @E6.setter
    def E6(self, inVal:float) -> None:
        return self._intf.set_property(IAgVAEngineModelThrustCoefficients._metadata, IAgVAEngineModelThrustCoefficients._set_E6_metadata, inVal)

    _get_E7_metadata = { "name" : "E7",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def E7(self) -> float:
        """E7 exponent. Dimensionless."""
        return self._intf.get_property(IAgVAEngineModelThrustCoefficients._metadata, IAgVAEngineModelThrustCoefficients._get_E7_metadata)

    _set_E7_metadata = { "name" : "E7",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @E7.setter
    def E7(self, inVal:float) -> None:
        return self._intf.set_property(IAgVAEngineModelThrustCoefficients._metadata, IAgVAEngineModelThrustCoefficients._set_E7_metadata, inVal)

    _get_B7_metadata = { "name" : "B7",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def B7(self) -> float:
        """B7 base. Dimensionless."""
        return self._intf.get_property(IAgVAEngineModelThrustCoefficients._metadata, IAgVAEngineModelThrustCoefficients._get_B7_metadata)

    _set_B7_metadata = { "name" : "B7",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @B7.setter
    def B7(self, inVal:float) -> None:
        return self._intf.set_property(IAgVAEngineModelThrustCoefficients._metadata, IAgVAEngineModelThrustCoefficients._set_B7_metadata, inVal)

    _get_K0_metadata = { "name" : "K0",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def K0(self) -> float:
        """K0 coefficient. Dimensionless."""
        return self._intf.get_property(IAgVAEngineModelThrustCoefficients._metadata, IAgVAEngineModelThrustCoefficients._get_K0_metadata)

    _set_K0_metadata = { "name" : "K0",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @K0.setter
    def K0(self, inVal:float) -> None:
        return self._intf.set_property(IAgVAEngineModelThrustCoefficients._metadata, IAgVAEngineModelThrustCoefficients._set_K0_metadata, inVal)

    _get_K1_metadata = { "name" : "K1",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def K1(self) -> float:
        """K1 coefficient. Dimensionless."""
        return self._intf.get_property(IAgVAEngineModelThrustCoefficients._metadata, IAgVAEngineModelThrustCoefficients._get_K1_metadata)

    _set_K1_metadata = { "name" : "K1",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @K1.setter
    def K1(self, inVal:float) -> None:
        return self._intf.set_property(IAgVAEngineModelThrustCoefficients._metadata, IAgVAEngineModelThrustCoefficients._set_K1_metadata, inVal)

    _get_ReferenceTemp_metadata = { "name" : "ReferenceTemp",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def ReferenceTemp(self) -> float:
        """Reference temperature for data. Uses Temperature Dimension."""
        return self._intf.get_property(IAgVAEngineModelThrustCoefficients._metadata, IAgVAEngineModelThrustCoefficients._get_ReferenceTemp_metadata)

    _set_ReferenceTemp_metadata = { "name" : "ReferenceTemp",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @ReferenceTemp.setter
    def ReferenceTemp(self, inVal:float) -> None:
        return self._intf.set_property(IAgVAEngineModelThrustCoefficients._metadata, IAgVAEngineModelThrustCoefficients._set_ReferenceTemp_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{2F905CDC-4D91-497F-85E2-AE1E2F3A4FA3}", IAgVAEngineModelThrustCoefficients)
agcls.AgTypeNameMap["IAgVAEngineModelThrustCoefficients"] = IAgVAEngineModelThrustCoefficients

class IAgVAEngineModelIspCoefficients(object):
    """Isp coefficient properties for engine definition."""
    _num_methods = 32
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{3D092FFB-ED99-4F4A-94E5-8BFA7CEF328C}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_C0" : 1,
                             "set_C0" : 2,
                             "get_C1" : 3,
                             "set_C1" : 4,
                             "get_C2" : 5,
                             "set_C2" : 6,
                             "get_C3" : 7,
                             "set_C3" : 8,
                             "get_C4" : 9,
                             "set_C4" : 10,
                             "get_C5" : 11,
                             "set_C5" : 12,
                             "get_C6" : 13,
                             "set_C6" : 14,
                             "get_C7" : 15,
                             "set_C7" : 16,
                             "get_E4" : 17,
                             "set_E4" : 18,
                             "get_E5" : 19,
                             "set_E5" : 20,
                             "get_E6" : 21,
                             "set_E6" : 22,
                             "get_E7" : 23,
                             "set_E7" : 24,
                             "get_B7" : 25,
                             "set_B7" : 26,
                             "get_K0" : 27,
                             "set_K0" : 28,
                             "get_K1" : 29,
                             "set_K1" : 30,
                             "get_ReferenceTemp" : 31,
                             "set_ReferenceTemp" : 32, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAEngineModelIspCoefficients._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAEngineModelIspCoefficients from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAEngineModelIspCoefficients.__dict__ and type(IAgVAEngineModelIspCoefficients.__dict__[attrname]) == property:
            return IAgVAEngineModelIspCoefficients.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAEngineModelIspCoefficients.")
    
    _get_C0_metadata = { "name" : "C0",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def C0(self) -> float:
        """C0 coefficient. Dimensionless."""
        return self._intf.get_property(IAgVAEngineModelIspCoefficients._metadata, IAgVAEngineModelIspCoefficients._get_C0_metadata)

    _set_C0_metadata = { "name" : "C0",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @C0.setter
    def C0(self, inVal:float) -> None:
        return self._intf.set_property(IAgVAEngineModelIspCoefficients._metadata, IAgVAEngineModelIspCoefficients._set_C0_metadata, inVal)

    _get_C1_metadata = { "name" : "C1",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def C1(self) -> float:
        """C1 coefficient. Dimensionless."""
        return self._intf.get_property(IAgVAEngineModelIspCoefficients._metadata, IAgVAEngineModelIspCoefficients._get_C1_metadata)

    _set_C1_metadata = { "name" : "C1",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @C1.setter
    def C1(self, inVal:float) -> None:
        return self._intf.set_property(IAgVAEngineModelIspCoefficients._metadata, IAgVAEngineModelIspCoefficients._set_C1_metadata, inVal)

    _get_C2_metadata = { "name" : "C2",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def C2(self) -> float:
        """C2 coefficient. Dimensionless."""
        return self._intf.get_property(IAgVAEngineModelIspCoefficients._metadata, IAgVAEngineModelIspCoefficients._get_C2_metadata)

    _set_C2_metadata = { "name" : "C2",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @C2.setter
    def C2(self, inVal:float) -> None:
        return self._intf.set_property(IAgVAEngineModelIspCoefficients._metadata, IAgVAEngineModelIspCoefficients._set_C2_metadata, inVal)

    _get_C3_metadata = { "name" : "C3",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def C3(self) -> float:
        """C3 coefficient. Dimensionless."""
        return self._intf.get_property(IAgVAEngineModelIspCoefficients._metadata, IAgVAEngineModelIspCoefficients._get_C3_metadata)

    _set_C3_metadata = { "name" : "C3",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @C3.setter
    def C3(self, inVal:float) -> None:
        return self._intf.set_property(IAgVAEngineModelIspCoefficients._metadata, IAgVAEngineModelIspCoefficients._set_C3_metadata, inVal)

    _get_C4_metadata = { "name" : "C4",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def C4(self) -> float:
        """C4 coefficient. Dimensionless."""
        return self._intf.get_property(IAgVAEngineModelIspCoefficients._metadata, IAgVAEngineModelIspCoefficients._get_C4_metadata)

    _set_C4_metadata = { "name" : "C4",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @C4.setter
    def C4(self, inVal:float) -> None:
        return self._intf.set_property(IAgVAEngineModelIspCoefficients._metadata, IAgVAEngineModelIspCoefficients._set_C4_metadata, inVal)

    _get_C5_metadata = { "name" : "C5",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def C5(self) -> float:
        """C5 coefficient. Dimensionless."""
        return self._intf.get_property(IAgVAEngineModelIspCoefficients._metadata, IAgVAEngineModelIspCoefficients._get_C5_metadata)

    _set_C5_metadata = { "name" : "C5",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @C5.setter
    def C5(self, inVal:float) -> None:
        return self._intf.set_property(IAgVAEngineModelIspCoefficients._metadata, IAgVAEngineModelIspCoefficients._set_C5_metadata, inVal)

    _get_C6_metadata = { "name" : "C6",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def C6(self) -> float:
        """C6 coefficient. Dimensionless."""
        return self._intf.get_property(IAgVAEngineModelIspCoefficients._metadata, IAgVAEngineModelIspCoefficients._get_C6_metadata)

    _set_C6_metadata = { "name" : "C6",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @C6.setter
    def C6(self, inVal:float) -> None:
        return self._intf.set_property(IAgVAEngineModelIspCoefficients._metadata, IAgVAEngineModelIspCoefficients._set_C6_metadata, inVal)

    _get_C7_metadata = { "name" : "C7",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def C7(self) -> float:
        """C7 coefficient. Dimensionless."""
        return self._intf.get_property(IAgVAEngineModelIspCoefficients._metadata, IAgVAEngineModelIspCoefficients._get_C7_metadata)

    _set_C7_metadata = { "name" : "C7",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @C7.setter
    def C7(self, inVal:float) -> None:
        return self._intf.set_property(IAgVAEngineModelIspCoefficients._metadata, IAgVAEngineModelIspCoefficients._set_C7_metadata, inVal)

    _get_E4_metadata = { "name" : "E4",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def E4(self) -> float:
        """E4 exponent. Dimensionless."""
        return self._intf.get_property(IAgVAEngineModelIspCoefficients._metadata, IAgVAEngineModelIspCoefficients._get_E4_metadata)

    _set_E4_metadata = { "name" : "E4",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @E4.setter
    def E4(self, inVal:float) -> None:
        return self._intf.set_property(IAgVAEngineModelIspCoefficients._metadata, IAgVAEngineModelIspCoefficients._set_E4_metadata, inVal)

    _get_E5_metadata = { "name" : "E5",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def E5(self) -> float:
        """E5 exponent. Dimensionless."""
        return self._intf.get_property(IAgVAEngineModelIspCoefficients._metadata, IAgVAEngineModelIspCoefficients._get_E5_metadata)

    _set_E5_metadata = { "name" : "E5",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @E5.setter
    def E5(self, inVal:float) -> None:
        return self._intf.set_property(IAgVAEngineModelIspCoefficients._metadata, IAgVAEngineModelIspCoefficients._set_E5_metadata, inVal)

    _get_E6_metadata = { "name" : "E6",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def E6(self) -> float:
        """E6 exponent. Dimensionless."""
        return self._intf.get_property(IAgVAEngineModelIspCoefficients._metadata, IAgVAEngineModelIspCoefficients._get_E6_metadata)

    _set_E6_metadata = { "name" : "E6",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @E6.setter
    def E6(self, inVal:float) -> None:
        return self._intf.set_property(IAgVAEngineModelIspCoefficients._metadata, IAgVAEngineModelIspCoefficients._set_E6_metadata, inVal)

    _get_E7_metadata = { "name" : "E7",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def E7(self) -> float:
        """E7 exponent. Dimensionless."""
        return self._intf.get_property(IAgVAEngineModelIspCoefficients._metadata, IAgVAEngineModelIspCoefficients._get_E7_metadata)

    _set_E7_metadata = { "name" : "E7",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @E7.setter
    def E7(self, inVal:float) -> None:
        return self._intf.set_property(IAgVAEngineModelIspCoefficients._metadata, IAgVAEngineModelIspCoefficients._set_E7_metadata, inVal)

    _get_B7_metadata = { "name" : "B7",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def B7(self) -> float:
        """B7 base. Dimensionless."""
        return self._intf.get_property(IAgVAEngineModelIspCoefficients._metadata, IAgVAEngineModelIspCoefficients._get_B7_metadata)

    _set_B7_metadata = { "name" : "B7",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @B7.setter
    def B7(self, inVal:float) -> None:
        return self._intf.set_property(IAgVAEngineModelIspCoefficients._metadata, IAgVAEngineModelIspCoefficients._set_B7_metadata, inVal)

    _get_K0_metadata = { "name" : "K0",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def K0(self) -> float:
        """K0 coefficient. Dimensionless."""
        return self._intf.get_property(IAgVAEngineModelIspCoefficients._metadata, IAgVAEngineModelIspCoefficients._get_K0_metadata)

    _set_K0_metadata = { "name" : "K0",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @K0.setter
    def K0(self, inVal:float) -> None:
        return self._intf.set_property(IAgVAEngineModelIspCoefficients._metadata, IAgVAEngineModelIspCoefficients._set_K0_metadata, inVal)

    _get_K1_metadata = { "name" : "K1",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def K1(self) -> float:
        """K1 coefficient. Dimensionless."""
        return self._intf.get_property(IAgVAEngineModelIspCoefficients._metadata, IAgVAEngineModelIspCoefficients._get_K1_metadata)

    _set_K1_metadata = { "name" : "K1",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @K1.setter
    def K1(self, inVal:float) -> None:
        return self._intf.set_property(IAgVAEngineModelIspCoefficients._metadata, IAgVAEngineModelIspCoefficients._set_K1_metadata, inVal)

    _get_ReferenceTemp_metadata = { "name" : "ReferenceTemp",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def ReferenceTemp(self) -> float:
        """Reference temperature for data. Uses Temperature Dimension."""
        return self._intf.get_property(IAgVAEngineModelIspCoefficients._metadata, IAgVAEngineModelIspCoefficients._get_ReferenceTemp_metadata)

    _set_ReferenceTemp_metadata = { "name" : "ReferenceTemp",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @ReferenceTemp.setter
    def ReferenceTemp(self, inVal:float) -> None:
        return self._intf.set_property(IAgVAEngineModelIspCoefficients._metadata, IAgVAEngineModelIspCoefficients._set_ReferenceTemp_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{3D092FFB-ED99-4F4A-94E5-8BFA7CEF328C}", IAgVAEngineModelIspCoefficients)
agcls.AgTypeNameMap["IAgVAEngineModelIspCoefficients"] = IAgVAEngineModelIspCoefficients

class IAgVAEngineConstAcc(object):
    """Properties for a Constant Acceleration and Isp engine model."""
    _num_methods = 10
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{32A0554F-7D4A-4A7E-80B7-5B57ED17B9D2}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_g" : 1,
                             "set_g" : 2,
                             "get_Acceleration" : 3,
                             "set_Acceleration" : 4,
                             "get_Isp" : 5,
                             "set_Isp" : 6,
                             "EnableControlParameter" : 7,
                             "DisableControlParameter" : 8,
                             "IsControlParameterEnabled" : 9,
                             "get_ControlParametersAvailable" : 10, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAEngineConstAcc._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAEngineConstAcc from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAEngineConstAcc.__dict__ and type(IAgVAEngineConstAcc.__dict__[attrname]) == property:
            return IAgVAEngineConstAcc.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAEngineConstAcc.")
    
    _get_g_metadata = { "name" : "g",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def g(self) -> float:
        """The gravitational acceleration constant at sea level on the Earth. Uses Acceleration Dimension."""
        return self._intf.get_property(IAgVAEngineConstAcc._metadata, IAgVAEngineConstAcc._get_g_metadata)

    _set_g_metadata = { "name" : "g",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @g.setter
    def g(self, inVal:float) -> None:
        return self._intf.set_property(IAgVAEngineConstAcc._metadata, IAgVAEngineConstAcc._set_g_metadata, inVal)

    _get_Acceleration_metadata = { "name" : "Acceleration",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def Acceleration(self) -> float:
        """The acceleration for this engine. Uses Acceleration Dimension."""
        return self._intf.get_property(IAgVAEngineConstAcc._metadata, IAgVAEngineConstAcc._get_Acceleration_metadata)

    _set_Acceleration_metadata = { "name" : "Acceleration",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @Acceleration.setter
    def Acceleration(self, inVal:float) -> None:
        return self._intf.set_property(IAgVAEngineConstAcc._metadata, IAgVAEngineConstAcc._set_Acceleration_metadata, inVal)

    _get_Isp_metadata = { "name" : "Isp",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def Isp(self) -> float:
        """The specific impulse for this engine. Uses SpecificImpulse Dimension."""
        return self._intf.get_property(IAgVAEngineConstAcc._metadata, IAgVAEngineConstAcc._get_Isp_metadata)

    _set_Isp_metadata = { "name" : "Isp",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @Isp.setter
    def Isp(self, inVal:float) -> None:
        return self._intf.set_property(IAgVAEngineConstAcc._metadata, IAgVAEngineConstAcc._set_Isp_metadata, inVal)

    _EnableControlParameter_metadata = { "name" : "EnableControlParameter",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAControlEngineConstAcc),) }
    def EnableControlParameter(self, param:"AgEVAControlEngineConstAcc") -> None:
        """Enables the specified control parameter."""
        return self._intf.invoke(IAgVAEngineConstAcc._metadata, IAgVAEngineConstAcc._EnableControlParameter_metadata, param)

    _DisableControlParameter_metadata = { "name" : "DisableControlParameter",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAControlEngineConstAcc),) }
    def DisableControlParameter(self, param:"AgEVAControlEngineConstAcc") -> None:
        """Disables the specified control parameter."""
        return self._intf.invoke(IAgVAEngineConstAcc._metadata, IAgVAEngineConstAcc._DisableControlParameter_metadata, param)

    _IsControlParameterEnabled_metadata = { "name" : "IsControlParameterEnabled",
            "arg_types" : (agcom.LONG, POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAControlEngineConstAcc), agmarshall.VARIANT_BOOL_arg,) }
    def IsControlParameterEnabled(self, param:"AgEVAControlEngineConstAcc") -> bool:
        """Sees if the specified control is enabled."""
        return self._intf.invoke(IAgVAEngineConstAcc._metadata, IAgVAEngineConstAcc._IsControlParameterEnabled_metadata, param, out_arg())

    _get_ControlParametersAvailable_metadata = { "name" : "ControlParametersAvailable",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def ControlParametersAvailable(self) -> bool:
        """Returns whether or not the control parameters can be set."""
        return self._intf.get_property(IAgVAEngineConstAcc._metadata, IAgVAEngineConstAcc._get_ControlParametersAvailable_metadata)


agcls.AgClassCatalog.add_catalog_entry("{32A0554F-7D4A-4A7E-80B7-5B57ED17B9D2}", IAgVAEngineConstAcc)
agcls.AgTypeNameMap["IAgVAEngineConstAcc"] = IAgVAEngineConstAcc

class IAgVAEngineConstant(object):
    """Properties for a Constant Thrust and Isp engine model."""
    _num_methods = 10
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{1BA84003-AFE1-4AD5-B36B-967D7B9FF8B0}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_g" : 1,
                             "set_g" : 2,
                             "get_Thrust" : 3,
                             "set_Thrust" : 4,
                             "get_Isp" : 5,
                             "set_Isp" : 6,
                             "EnableControlParameter" : 7,
                             "DisableControlParameter" : 8,
                             "IsControlParameterEnabled" : 9,
                             "get_ControlParametersAvailable" : 10, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAEngineConstant._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAEngineConstant from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAEngineConstant.__dict__ and type(IAgVAEngineConstant.__dict__[attrname]) == property:
            return IAgVAEngineConstant.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAEngineConstant.")
    
    _get_g_metadata = { "name" : "g",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def g(self) -> float:
        """The gravitational acceleration constant at sea level on the Earth. Uses Acceleration Dimension."""
        return self._intf.get_property(IAgVAEngineConstant._metadata, IAgVAEngineConstant._get_g_metadata)

    _set_g_metadata = { "name" : "g",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @g.setter
    def g(self, inVal:float) -> None:
        return self._intf.set_property(IAgVAEngineConstant._metadata, IAgVAEngineConstant._set_g_metadata, inVal)

    _get_Thrust_metadata = { "name" : "Thrust",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def Thrust(self) -> float:
        """The thrust for this engine. Uses Force Dimension."""
        return self._intf.get_property(IAgVAEngineConstant._metadata, IAgVAEngineConstant._get_Thrust_metadata)

    _set_Thrust_metadata = { "name" : "Thrust",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @Thrust.setter
    def Thrust(self, inVal:float) -> None:
        return self._intf.set_property(IAgVAEngineConstant._metadata, IAgVAEngineConstant._set_Thrust_metadata, inVal)

    _get_Isp_metadata = { "name" : "Isp",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def Isp(self) -> float:
        """The specific impulse for this engine. Uses SpecificImpulse Dimension."""
        return self._intf.get_property(IAgVAEngineConstant._metadata, IAgVAEngineConstant._get_Isp_metadata)

    _set_Isp_metadata = { "name" : "Isp",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @Isp.setter
    def Isp(self, inVal:float) -> None:
        return self._intf.set_property(IAgVAEngineConstant._metadata, IAgVAEngineConstant._set_Isp_metadata, inVal)

    _EnableControlParameter_metadata = { "name" : "EnableControlParameter",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAControlEngineConstant),) }
    def EnableControlParameter(self, param:"AgEVAControlEngineConstant") -> None:
        """Enables the specified control parameter."""
        return self._intf.invoke(IAgVAEngineConstant._metadata, IAgVAEngineConstant._EnableControlParameter_metadata, param)

    _DisableControlParameter_metadata = { "name" : "DisableControlParameter",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAControlEngineConstant),) }
    def DisableControlParameter(self, param:"AgEVAControlEngineConstant") -> None:
        """Disables the specified control parameter."""
        return self._intf.invoke(IAgVAEngineConstant._metadata, IAgVAEngineConstant._DisableControlParameter_metadata, param)

    _IsControlParameterEnabled_metadata = { "name" : "IsControlParameterEnabled",
            "arg_types" : (agcom.LONG, POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAControlEngineConstant), agmarshall.VARIANT_BOOL_arg,) }
    def IsControlParameterEnabled(self, param:"AgEVAControlEngineConstant") -> bool:
        """Sees if the specified control is enabled."""
        return self._intf.invoke(IAgVAEngineConstant._metadata, IAgVAEngineConstant._IsControlParameterEnabled_metadata, param, out_arg())

    _get_ControlParametersAvailable_metadata = { "name" : "ControlParametersAvailable",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def ControlParametersAvailable(self) -> bool:
        """Returns whether or not the control parameters can be set."""
        return self._intf.get_property(IAgVAEngineConstant._metadata, IAgVAEngineConstant._get_ControlParametersAvailable_metadata)


agcls.AgClassCatalog.add_catalog_entry("{1BA84003-AFE1-4AD5-B36B-967D7B9FF8B0}", IAgVAEngineConstant)
agcls.AgTypeNameMap["IAgVAEngineConstant"] = IAgVAEngineConstant

class IAgVAEngineDefinition(object):
    """Properties for engine definition for an Ion engine model."""
    _num_methods = 42
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{74BF5209-9E9B-45E3-8AE0-E68971558447}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_IspC0" : 1,
                             "set_IspC0" : 2,
                             "get_IspC1" : 3,
                             "set_IspC1" : 4,
                             "get_IspC2" : 5,
                             "set_IspC2" : 6,
                             "get_IspC3" : 7,
                             "set_IspC3" : 8,
                             "get_MassFlowRateEquationType" : 9,
                             "set_MassFlowRateEquationType" : 10,
                             "get_MassFlowRateC0" : 11,
                             "set_MassFlowRateC0" : 12,
                             "get_MassFlowRateC1" : 13,
                             "set_MassFlowRateC1" : 14,
                             "get_MassFlowRateC2" : 15,
                             "set_MassFlowRateC2" : 16,
                             "get_MassFlowRateC3" : 17,
                             "set_MassFlowRateC3" : 18,
                             "get_MassFlowRateEquation" : 19,
                             "get_MassFlowEfficiencyC0" : 20,
                             "set_MassFlowEfficiencyC0" : 21,
                             "get_MassFlowEfficiencyC1" : 22,
                             "set_MassFlowEfficiencyC1" : 23,
                             "get_MassFlowEfficiencyC2" : 24,
                             "set_MassFlowEfficiencyC2" : 25,
                             "get_MassFlowEfficiencyC3" : 26,
                             "set_MassFlowEfficiencyC3" : 27,
                             "get_MassFlowEfficiencyIndependentVar" : 28,
                             "set_MassFlowEfficiencyIndependentVar" : 29,
                             "get_MassFlowEfficiencyEquation" : 30,
                             "get_PowerEfficiencyC0" : 31,
                             "set_PowerEfficiencyC0" : 32,
                             "get_PowerEfficiencyC1" : 33,
                             "set_PowerEfficiencyC1" : 34,
                             "get_PowerEfficiencyC2" : 35,
                             "set_PowerEfficiencyC2" : 36,
                             "get_PowerEfficiencyC3" : 37,
                             "set_PowerEfficiencyC3" : 38,
                             "get_PowerEfficiencyIndependentVar" : 39,
                             "set_PowerEfficiencyIndependentVar" : 40,
                             "get_PowerEfficiencyEquation" : 41,
                             "get_InputPowerSourceName" : 42, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAEngineDefinition._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAEngineDefinition from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAEngineDefinition.__dict__ and type(IAgVAEngineDefinition.__dict__[attrname]) == property:
            return IAgVAEngineDefinition.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAEngineDefinition.")
    
    _get_IspC0_metadata = { "name" : "IspC0",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def IspC0(self) -> float:
        """The constant coefficient (C0). Dimensionless."""
        return self._intf.get_property(IAgVAEngineDefinition._metadata, IAgVAEngineDefinition._get_IspC0_metadata)

    _set_IspC0_metadata = { "name" : "IspC0",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @IspC0.setter
    def IspC0(self, inVal:float) -> None:
        return self._intf.set_property(IAgVAEngineDefinition._metadata, IAgVAEngineDefinition._set_IspC0_metadata, inVal)

    _get_IspC1_metadata = { "name" : "IspC1",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def IspC1(self) -> float:
        """The linear coefficient (C1). Dimensionless."""
        return self._intf.get_property(IAgVAEngineDefinition._metadata, IAgVAEngineDefinition._get_IspC1_metadata)

    _set_IspC1_metadata = { "name" : "IspC1",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @IspC1.setter
    def IspC1(self, inVal:float) -> None:
        return self._intf.set_property(IAgVAEngineDefinition._metadata, IAgVAEngineDefinition._set_IspC1_metadata, inVal)

    _get_IspC2_metadata = { "name" : "IspC2",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def IspC2(self) -> float:
        """The quadratic coefficient (C2). Dimensionless."""
        return self._intf.get_property(IAgVAEngineDefinition._metadata, IAgVAEngineDefinition._get_IspC2_metadata)

    _set_IspC2_metadata = { "name" : "IspC2",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @IspC2.setter
    def IspC2(self, inVal:float) -> None:
        return self._intf.set_property(IAgVAEngineDefinition._metadata, IAgVAEngineDefinition._set_IspC2_metadata, inVal)

    _get_IspC3_metadata = { "name" : "IspC3",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def IspC3(self) -> float:
        """The cubic coefficient (C3). Dimensionless."""
        return self._intf.get_property(IAgVAEngineDefinition._metadata, IAgVAEngineDefinition._get_IspC3_metadata)

    _set_IspC3_metadata = { "name" : "IspC3",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @IspC3.setter
    def IspC3(self, inVal:float) -> None:
        return self._intf.set_property(IAgVAEngineDefinition._metadata, IAgVAEngineDefinition._set_IspC3_metadata, inVal)

    _get_MassFlowRateEquationType_metadata = { "name" : "MassFlowRateEquationType",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAEngineModelFunction),) }
    @property
    def MassFlowRateEquationType(self) -> "AgEVAEngineModelFunction":
        """The independent variable for the mass flow rate equation."""
        return self._intf.get_property(IAgVAEngineDefinition._metadata, IAgVAEngineDefinition._get_MassFlowRateEquationType_metadata)

    _set_MassFlowRateEquationType_metadata = { "name" : "MassFlowRateEquationType",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAEngineModelFunction),) }
    @MassFlowRateEquationType.setter
    def MassFlowRateEquationType(self, inVal:"AgEVAEngineModelFunction") -> None:
        return self._intf.set_property(IAgVAEngineDefinition._metadata, IAgVAEngineDefinition._set_MassFlowRateEquationType_metadata, inVal)

    _get_MassFlowRateC0_metadata = { "name" : "MassFlowRateC0",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def MassFlowRateC0(self) -> float:
        """The constant coefficient (C0). Dimensionless."""
        return self._intf.get_property(IAgVAEngineDefinition._metadata, IAgVAEngineDefinition._get_MassFlowRateC0_metadata)

    _set_MassFlowRateC0_metadata = { "name" : "MassFlowRateC0",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @MassFlowRateC0.setter
    def MassFlowRateC0(self, inVal:float) -> None:
        return self._intf.set_property(IAgVAEngineDefinition._metadata, IAgVAEngineDefinition._set_MassFlowRateC0_metadata, inVal)

    _get_MassFlowRateC1_metadata = { "name" : "MassFlowRateC1",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def MassFlowRateC1(self) -> float:
        """The linear coefficient (C1). Dimensionless."""
        return self._intf.get_property(IAgVAEngineDefinition._metadata, IAgVAEngineDefinition._get_MassFlowRateC1_metadata)

    _set_MassFlowRateC1_metadata = { "name" : "MassFlowRateC1",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @MassFlowRateC1.setter
    def MassFlowRateC1(self, inVal:float) -> None:
        return self._intf.set_property(IAgVAEngineDefinition._metadata, IAgVAEngineDefinition._set_MassFlowRateC1_metadata, inVal)

    _get_MassFlowRateC2_metadata = { "name" : "MassFlowRateC2",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def MassFlowRateC2(self) -> float:
        """The quadratic coefficient (C2). Dimensionless."""
        return self._intf.get_property(IAgVAEngineDefinition._metadata, IAgVAEngineDefinition._get_MassFlowRateC2_metadata)

    _set_MassFlowRateC2_metadata = { "name" : "MassFlowRateC2",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @MassFlowRateC2.setter
    def MassFlowRateC2(self, inVal:float) -> None:
        return self._intf.set_property(IAgVAEngineDefinition._metadata, IAgVAEngineDefinition._set_MassFlowRateC2_metadata, inVal)

    _get_MassFlowRateC3_metadata = { "name" : "MassFlowRateC3",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def MassFlowRateC3(self) -> float:
        """The cubic coefficient (C3). Dimensionless."""
        return self._intf.get_property(IAgVAEngineDefinition._metadata, IAgVAEngineDefinition._get_MassFlowRateC3_metadata)

    _set_MassFlowRateC3_metadata = { "name" : "MassFlowRateC3",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @MassFlowRateC3.setter
    def MassFlowRateC3(self, inVal:float) -> None:
        return self._intf.set_property(IAgVAEngineDefinition._metadata, IAgVAEngineDefinition._set_MassFlowRateC3_metadata, inVal)

    _get_MassFlowRateEquation_metadata = { "name" : "MassFlowRateEquation",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def MassFlowRateEquation(self) -> str:
        """The equation for mass flow rate."""
        return self._intf.get_property(IAgVAEngineDefinition._metadata, IAgVAEngineDefinition._get_MassFlowRateEquation_metadata)

    _get_MassFlowEfficiencyC0_metadata = { "name" : "MassFlowEfficiencyC0",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def MassFlowEfficiencyC0(self) -> float:
        """The constant coefficient (C0). Dimensionless."""
        return self._intf.get_property(IAgVAEngineDefinition._metadata, IAgVAEngineDefinition._get_MassFlowEfficiencyC0_metadata)

    _set_MassFlowEfficiencyC0_metadata = { "name" : "MassFlowEfficiencyC0",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @MassFlowEfficiencyC0.setter
    def MassFlowEfficiencyC0(self, inVal:float) -> None:
        return self._intf.set_property(IAgVAEngineDefinition._metadata, IAgVAEngineDefinition._set_MassFlowEfficiencyC0_metadata, inVal)

    _get_MassFlowEfficiencyC1_metadata = { "name" : "MassFlowEfficiencyC1",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def MassFlowEfficiencyC1(self) -> float:
        """The linear coefficient (C1). Dimensionless."""
        return self._intf.get_property(IAgVAEngineDefinition._metadata, IAgVAEngineDefinition._get_MassFlowEfficiencyC1_metadata)

    _set_MassFlowEfficiencyC1_metadata = { "name" : "MassFlowEfficiencyC1",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @MassFlowEfficiencyC1.setter
    def MassFlowEfficiencyC1(self, inVal:float) -> None:
        return self._intf.set_property(IAgVAEngineDefinition._metadata, IAgVAEngineDefinition._set_MassFlowEfficiencyC1_metadata, inVal)

    _get_MassFlowEfficiencyC2_metadata = { "name" : "MassFlowEfficiencyC2",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def MassFlowEfficiencyC2(self) -> float:
        """The quadratic coefficient (C2). Dimensionless."""
        return self._intf.get_property(IAgVAEngineDefinition._metadata, IAgVAEngineDefinition._get_MassFlowEfficiencyC2_metadata)

    _set_MassFlowEfficiencyC2_metadata = { "name" : "MassFlowEfficiencyC2",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @MassFlowEfficiencyC2.setter
    def MassFlowEfficiencyC2(self, inVal:float) -> None:
        return self._intf.set_property(IAgVAEngineDefinition._metadata, IAgVAEngineDefinition._set_MassFlowEfficiencyC2_metadata, inVal)

    _get_MassFlowEfficiencyC3_metadata = { "name" : "MassFlowEfficiencyC3",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def MassFlowEfficiencyC3(self) -> float:
        """The cubic coefficient (C3). Dimensionless."""
        return self._intf.get_property(IAgVAEngineDefinition._metadata, IAgVAEngineDefinition._get_MassFlowEfficiencyC3_metadata)

    _set_MassFlowEfficiencyC3_metadata = { "name" : "MassFlowEfficiencyC3",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @MassFlowEfficiencyC3.setter
    def MassFlowEfficiencyC3(self, inVal:float) -> None:
        return self._intf.set_property(IAgVAEngineDefinition._metadata, IAgVAEngineDefinition._set_MassFlowEfficiencyC3_metadata, inVal)

    _get_MassFlowEfficiencyIndependentVar_metadata = { "name" : "MassFlowEfficiencyIndependentVar",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAEngineModelFunction),) }
    @property
    def MassFlowEfficiencyIndependentVar(self) -> "AgEVAEngineModelFunction":
        """The independent variable for the mass flow efficiency equation."""
        return self._intf.get_property(IAgVAEngineDefinition._metadata, IAgVAEngineDefinition._get_MassFlowEfficiencyIndependentVar_metadata)

    _set_MassFlowEfficiencyIndependentVar_metadata = { "name" : "MassFlowEfficiencyIndependentVar",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAEngineModelFunction),) }
    @MassFlowEfficiencyIndependentVar.setter
    def MassFlowEfficiencyIndependentVar(self, inVal:"AgEVAEngineModelFunction") -> None:
        return self._intf.set_property(IAgVAEngineDefinition._metadata, IAgVAEngineDefinition._set_MassFlowEfficiencyIndependentVar_metadata, inVal)

    _get_MassFlowEfficiencyEquation_metadata = { "name" : "MassFlowEfficiencyEquation",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def MassFlowEfficiencyEquation(self) -> str:
        """The equation for mass flow efficiency."""
        return self._intf.get_property(IAgVAEngineDefinition._metadata, IAgVAEngineDefinition._get_MassFlowEfficiencyEquation_metadata)

    _get_PowerEfficiencyC0_metadata = { "name" : "PowerEfficiencyC0",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def PowerEfficiencyC0(self) -> float:
        """The constant coefficient (C0). Dimensionless."""
        return self._intf.get_property(IAgVAEngineDefinition._metadata, IAgVAEngineDefinition._get_PowerEfficiencyC0_metadata)

    _set_PowerEfficiencyC0_metadata = { "name" : "PowerEfficiencyC0",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @PowerEfficiencyC0.setter
    def PowerEfficiencyC0(self, inVal:float) -> None:
        return self._intf.set_property(IAgVAEngineDefinition._metadata, IAgVAEngineDefinition._set_PowerEfficiencyC0_metadata, inVal)

    _get_PowerEfficiencyC1_metadata = { "name" : "PowerEfficiencyC1",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def PowerEfficiencyC1(self) -> float:
        """The linear coefficient (C1). Dimensionless."""
        return self._intf.get_property(IAgVAEngineDefinition._metadata, IAgVAEngineDefinition._get_PowerEfficiencyC1_metadata)

    _set_PowerEfficiencyC1_metadata = { "name" : "PowerEfficiencyC1",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @PowerEfficiencyC1.setter
    def PowerEfficiencyC1(self, inVal:float) -> None:
        return self._intf.set_property(IAgVAEngineDefinition._metadata, IAgVAEngineDefinition._set_PowerEfficiencyC1_metadata, inVal)

    _get_PowerEfficiencyC2_metadata = { "name" : "PowerEfficiencyC2",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def PowerEfficiencyC2(self) -> float:
        """The quadratic coefficient (C2). Dimensionless."""
        return self._intf.get_property(IAgVAEngineDefinition._metadata, IAgVAEngineDefinition._get_PowerEfficiencyC2_metadata)

    _set_PowerEfficiencyC2_metadata = { "name" : "PowerEfficiencyC2",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @PowerEfficiencyC2.setter
    def PowerEfficiencyC2(self, inVal:float) -> None:
        return self._intf.set_property(IAgVAEngineDefinition._metadata, IAgVAEngineDefinition._set_PowerEfficiencyC2_metadata, inVal)

    _get_PowerEfficiencyC3_metadata = { "name" : "PowerEfficiencyC3",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def PowerEfficiencyC3(self) -> float:
        """The cubic coefficient (C3). Dimensionless."""
        return self._intf.get_property(IAgVAEngineDefinition._metadata, IAgVAEngineDefinition._get_PowerEfficiencyC3_metadata)

    _set_PowerEfficiencyC3_metadata = { "name" : "PowerEfficiencyC3",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @PowerEfficiencyC3.setter
    def PowerEfficiencyC3(self, inVal:float) -> None:
        return self._intf.set_property(IAgVAEngineDefinition._metadata, IAgVAEngineDefinition._set_PowerEfficiencyC3_metadata, inVal)

    _get_PowerEfficiencyIndependentVar_metadata = { "name" : "PowerEfficiencyIndependentVar",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAEngineModelFunction),) }
    @property
    def PowerEfficiencyIndependentVar(self) -> "AgEVAEngineModelFunction":
        """The independent variable for the power efficiency equation."""
        return self._intf.get_property(IAgVAEngineDefinition._metadata, IAgVAEngineDefinition._get_PowerEfficiencyIndependentVar_metadata)

    _set_PowerEfficiencyIndependentVar_metadata = { "name" : "PowerEfficiencyIndependentVar",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAEngineModelFunction),) }
    @PowerEfficiencyIndependentVar.setter
    def PowerEfficiencyIndependentVar(self, inVal:"AgEVAEngineModelFunction") -> None:
        return self._intf.set_property(IAgVAEngineDefinition._metadata, IAgVAEngineDefinition._set_PowerEfficiencyIndependentVar_metadata, inVal)

    _get_PowerEfficiencyEquation_metadata = { "name" : "PowerEfficiencyEquation",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def PowerEfficiencyEquation(self) -> str:
        """The equation for power efficiency."""
        return self._intf.get_property(IAgVAEngineDefinition._metadata, IAgVAEngineDefinition._get_PowerEfficiencyEquation_metadata)

    _get_InputPowerSourceName_metadata = { "name" : "InputPowerSourceName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def InputPowerSourceName(self) -> str:
        """Object that computes the power input to the engine"""
        return self._intf.get_property(IAgVAEngineDefinition._metadata, IAgVAEngineDefinition._get_InputPowerSourceName_metadata)


agcls.AgClassCatalog.add_catalog_entry("{74BF5209-9E9B-45E3-8AE0-E68971558447}", IAgVAEngineDefinition)
agcls.AgTypeNameMap["IAgVAEngineDefinition"] = IAgVAEngineDefinition

class IAgVAEngineThrottleTable(object):
    """Properties for engine parameters for a Throttle Table engine model"""
    _num_methods = 18
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{74EFDF26-3F92-4664-8CA1-47E86FCAB002}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_ThrottleTableFilename" : 1,
                             "set_ThrottleTableFilename" : 2,
                             "get_OperationModeDefinition" : 3,
                             "set_OperationModeDefinition" : 4,
                             "get_RegressionPolynomialDegree" : 5,
                             "set_RegressionPolynomialDegree" : 6,
                             "get_g" : 7,
                             "set_g" : 8,
                             "get_InputPowerSourceName" : 9,
                             "set_InputPowerSourceName" : 10,
                             "get_PercentDegradationPerYear" : 11,
                             "set_PercentDegradationPerYear" : 12,
                             "get_ReferenceEpoch" : 13,
                             "set_ReferenceEpoch" : 14,
                             "EnableControlParameter" : 15,
                             "DisableControlParameter" : 16,
                             "IsControlParameterEnabled" : 17,
                             "get_ControlParametersAvailable" : 18, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAEngineThrottleTable._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAEngineThrottleTable from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAEngineThrottleTable.__dict__ and type(IAgVAEngineThrottleTable.__dict__[attrname]) == property:
            return IAgVAEngineThrottleTable.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAEngineThrottleTable.")
    
    _get_ThrottleTableFilename_metadata = { "name" : "ThrottleTableFilename",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def ThrottleTableFilename(self) -> str:
        """A file containing the engine performance data in the tabular format."""
        return self._intf.get_property(IAgVAEngineThrottleTable._metadata, IAgVAEngineThrottleTable._get_ThrottleTableFilename_metadata)

    _set_ThrottleTableFilename_metadata = { "name" : "ThrottleTableFilename",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @ThrottleTableFilename.setter
    def ThrottleTableFilename(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAEngineThrottleTable._metadata, IAgVAEngineThrottleTable._set_ThrottleTableFilename_metadata, inVal)

    _get_OperationModeDefinition_metadata = { "name" : "OperationModeDefinition",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAThrottleTableOperationMode),) }
    @property
    def OperationModeDefinition(self) -> "AgEVAThrottleTableOperationMode":
        """The engine operation mode definition."""
        return self._intf.get_property(IAgVAEngineThrottleTable._metadata, IAgVAEngineThrottleTable._get_OperationModeDefinition_metadata)

    _set_OperationModeDefinition_metadata = { "name" : "OperationModeDefinition",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAThrottleTableOperationMode),) }
    @OperationModeDefinition.setter
    def OperationModeDefinition(self, inVal:"AgEVAThrottleTableOperationMode") -> None:
        return self._intf.set_property(IAgVAEngineThrottleTable._metadata, IAgVAEngineThrottleTable._set_OperationModeDefinition_metadata, inVal)

    _get_RegressionPolynomialDegree_metadata = { "name" : "RegressionPolynomialDegree",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.LONG_arg,) }
    @property
    def RegressionPolynomialDegree(self) -> int:
        """The degree of the regression polynomial. Dimensionless."""
        return self._intf.get_property(IAgVAEngineThrottleTable._metadata, IAgVAEngineThrottleTable._get_RegressionPolynomialDegree_metadata)

    _set_RegressionPolynomialDegree_metadata = { "name" : "RegressionPolynomialDegree",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.LONG_arg,) }
    @RegressionPolynomialDegree.setter
    def RegressionPolynomialDegree(self, inVal:int) -> None:
        return self._intf.set_property(IAgVAEngineThrottleTable._metadata, IAgVAEngineThrottleTable._set_RegressionPolynomialDegree_metadata, inVal)

    _get_g_metadata = { "name" : "g",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def g(self) -> float:
        """The gravitational acceleration constant at sea level on the Earth. Uses Acceleration Dimension."""
        return self._intf.get_property(IAgVAEngineThrottleTable._metadata, IAgVAEngineThrottleTable._get_g_metadata)

    _set_g_metadata = { "name" : "g",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @g.setter
    def g(self, inVal:float) -> None:
        return self._intf.set_property(IAgVAEngineThrottleTable._metadata, IAgVAEngineThrottleTable._set_g_metadata, inVal)

    _get_InputPowerSourceName_metadata = { "name" : "InputPowerSourceName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def InputPowerSourceName(self) -> str:
        """The object that computes the power input to the engine."""
        return self._intf.get_property(IAgVAEngineThrottleTable._metadata, IAgVAEngineThrottleTable._get_InputPowerSourceName_metadata)

    _set_InputPowerSourceName_metadata = { "name" : "InputPowerSourceName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @InputPowerSourceName.setter
    def InputPowerSourceName(self, powerSource:str) -> None:
        return self._intf.set_property(IAgVAEngineThrottleTable._metadata, IAgVAEngineThrottleTable._set_InputPowerSourceName_metadata, powerSource)

    _get_PercentDegradationPerYear_metadata = { "name" : "PercentDegradationPerYear",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def PercentDegradationPerYear(self) -> float:
        """The degradation factor is (1-x%/yr)^(timeSinceRefEpoch)"""
        return self._intf.get_property(IAgVAEngineThrottleTable._metadata, IAgVAEngineThrottleTable._get_PercentDegradationPerYear_metadata)

    _set_PercentDegradationPerYear_metadata = { "name" : "PercentDegradationPerYear",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @PercentDegradationPerYear.setter
    def PercentDegradationPerYear(self, inVal:float) -> None:
        return self._intf.set_property(IAgVAEngineThrottleTable._metadata, IAgVAEngineThrottleTable._set_PercentDegradationPerYear_metadata, inVal)

    _get_ReferenceEpoch_metadata = { "name" : "ReferenceEpoch",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def ReferenceEpoch(self) -> typing.Any:
        """The date and Time used as reference epoch for degradation. Uses DateFormat Dimension."""
        return self._intf.get_property(IAgVAEngineThrottleTable._metadata, IAgVAEngineThrottleTable._get_ReferenceEpoch_metadata)

    _set_ReferenceEpoch_metadata = { "name" : "ReferenceEpoch",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @ReferenceEpoch.setter
    def ReferenceEpoch(self, inVal:typing.Any) -> None:
        return self._intf.set_property(IAgVAEngineThrottleTable._metadata, IAgVAEngineThrottleTable._set_ReferenceEpoch_metadata, inVal)

    _EnableControlParameter_metadata = { "name" : "EnableControlParameter",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAControlEngineThrottleTable),) }
    def EnableControlParameter(self, param:"AgEVAControlEngineThrottleTable") -> None:
        """Enables the specified control parameter."""
        return self._intf.invoke(IAgVAEngineThrottleTable._metadata, IAgVAEngineThrottleTable._EnableControlParameter_metadata, param)

    _DisableControlParameter_metadata = { "name" : "DisableControlParameter",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAControlEngineThrottleTable),) }
    def DisableControlParameter(self, param:"AgEVAControlEngineThrottleTable") -> None:
        """Disables the specified control parameter."""
        return self._intf.invoke(IAgVAEngineThrottleTable._metadata, IAgVAEngineThrottleTable._DisableControlParameter_metadata, param)

    _IsControlParameterEnabled_metadata = { "name" : "IsControlParameterEnabled",
            "arg_types" : (agcom.LONG, POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAControlEngineThrottleTable), agmarshall.VARIANT_BOOL_arg,) }
    def IsControlParameterEnabled(self, param:"AgEVAControlEngineThrottleTable") -> bool:
        """Sees if the specified control is enabled."""
        return self._intf.invoke(IAgVAEngineThrottleTable._metadata, IAgVAEngineThrottleTable._IsControlParameterEnabled_metadata, param, out_arg())

    _get_ControlParametersAvailable_metadata = { "name" : "ControlParametersAvailable",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def ControlParametersAvailable(self) -> bool:
        """Returns whether or not the control parameters can be set."""
        return self._intf.get_property(IAgVAEngineThrottleTable._metadata, IAgVAEngineThrottleTable._get_ControlParametersAvailable_metadata)


agcls.AgClassCatalog.add_catalog_entry("{74EFDF26-3F92-4664-8CA1-47E86FCAB002}", IAgVAEngineThrottleTable)
agcls.AgTypeNameMap["IAgVAEngineThrottleTable"] = IAgVAEngineThrottleTable

class IAgVAEngineIon(object):
    """Properties for engine parameters for an Ion engine model"""
    _num_methods = 19
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{1A331BF6-2901-41F4-8A68-23DD4628A68D}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_g" : 1,
                             "set_g" : 2,
                             "get_InputPowerSourceName" : 3,
                             "set_InputPowerSourceName" : 4,
                             "get_MinRequiredPower" : 5,
                             "set_MinRequiredPower" : 6,
                             "get_MaxInputPower" : 7,
                             "set_MaxInputPower" : 8,
                             "get_PercentDegradationPerYear" : 9,
                             "set_PercentDegradationPerYear" : 10,
                             "get_ReferenceEpoch" : 11,
                             "set_ReferenceEpoch" : 12,
                             "get_PercentThrottle" : 13,
                             "set_PercentThrottle" : 14,
                             "get_EngineDefinition" : 15,
                             "EnableControlParameter" : 16,
                             "DisableControlParameter" : 17,
                             "IsControlParameterEnabled" : 18,
                             "get_ControlParametersAvailable" : 19, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAEngineIon._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAEngineIon from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAEngineIon.__dict__ and type(IAgVAEngineIon.__dict__[attrname]) == property:
            return IAgVAEngineIon.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAEngineIon.")
    
    _get_g_metadata = { "name" : "g",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def g(self) -> float:
        """The gravitational acceleration constant at sea level on the Earth. Uses Acceleration Dimension."""
        return self._intf.get_property(IAgVAEngineIon._metadata, IAgVAEngineIon._get_g_metadata)

    _set_g_metadata = { "name" : "g",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @g.setter
    def g(self, inVal:float) -> None:
        return self._intf.set_property(IAgVAEngineIon._metadata, IAgVAEngineIon._set_g_metadata, inVal)

    _get_InputPowerSourceName_metadata = { "name" : "InputPowerSourceName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def InputPowerSourceName(self) -> str:
        """The object that computes the power input to the engine."""
        return self._intf.get_property(IAgVAEngineIon._metadata, IAgVAEngineIon._get_InputPowerSourceName_metadata)

    _set_InputPowerSourceName_metadata = { "name" : "InputPowerSourceName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @InputPowerSourceName.setter
    def InputPowerSourceName(self, powerSource:str) -> None:
        return self._intf.set_property(IAgVAEngineIon._metadata, IAgVAEngineIon._set_InputPowerSourceName_metadata, powerSource)

    _get_MinRequiredPower_metadata = { "name" : "MinRequiredPower",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def MinRequiredPower(self) -> float:
        """The minimum power required for engine to produce thrust. Uses Power Dimension."""
        return self._intf.get_property(IAgVAEngineIon._metadata, IAgVAEngineIon._get_MinRequiredPower_metadata)

    _set_MinRequiredPower_metadata = { "name" : "MinRequiredPower",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @MinRequiredPower.setter
    def MinRequiredPower(self, inVal:float) -> None:
        return self._intf.set_property(IAgVAEngineIon._metadata, IAgVAEngineIon._set_MinRequiredPower_metadata, inVal)

    _get_MaxInputPower_metadata = { "name" : "MaxInputPower",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def MaxInputPower(self) -> float:
        """The maximum power that can be used by engine to produce thrust. Uses Power Dimension."""
        return self._intf.get_property(IAgVAEngineIon._metadata, IAgVAEngineIon._get_MaxInputPower_metadata)

    _set_MaxInputPower_metadata = { "name" : "MaxInputPower",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @MaxInputPower.setter
    def MaxInputPower(self, inVal:float) -> None:
        return self._intf.set_property(IAgVAEngineIon._metadata, IAgVAEngineIon._set_MaxInputPower_metadata, inVal)

    _get_PercentDegradationPerYear_metadata = { "name" : "PercentDegradationPerYear",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def PercentDegradationPerYear(self) -> float:
        """The degradation factor is (1-x%/yr)^(timeSinceRefEpoch)"""
        return self._intf.get_property(IAgVAEngineIon._metadata, IAgVAEngineIon._get_PercentDegradationPerYear_metadata)

    _set_PercentDegradationPerYear_metadata = { "name" : "PercentDegradationPerYear",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @PercentDegradationPerYear.setter
    def PercentDegradationPerYear(self, inVal:float) -> None:
        return self._intf.set_property(IAgVAEngineIon._metadata, IAgVAEngineIon._set_PercentDegradationPerYear_metadata, inVal)

    _get_ReferenceEpoch_metadata = { "name" : "ReferenceEpoch",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def ReferenceEpoch(self) -> typing.Any:
        """The date and Time used as reference epoch for degradation. Uses DateFormat Dimension."""
        return self._intf.get_property(IAgVAEngineIon._metadata, IAgVAEngineIon._get_ReferenceEpoch_metadata)

    _set_ReferenceEpoch_metadata = { "name" : "ReferenceEpoch",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @ReferenceEpoch.setter
    def ReferenceEpoch(self, inVal:typing.Any) -> None:
        return self._intf.set_property(IAgVAEngineIon._metadata, IAgVAEngineIon._set_ReferenceEpoch_metadata, inVal)

    _get_PercentThrottle_metadata = { "name" : "PercentThrottle",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def PercentThrottle(self) -> float:
        """The percentage of available thrust to use (100 is full on, 0 is off). Dimensionless."""
        return self._intf.get_property(IAgVAEngineIon._metadata, IAgVAEngineIon._get_PercentThrottle_metadata)

    _set_PercentThrottle_metadata = { "name" : "PercentThrottle",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @PercentThrottle.setter
    def PercentThrottle(self, inVal:float) -> None:
        return self._intf.set_property(IAgVAEngineIon._metadata, IAgVAEngineIon._set_PercentThrottle_metadata, inVal)

    _get_EngineDefinition_metadata = { "name" : "EngineDefinition",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def EngineDefinition(self) -> "IAgVAEngineDefinition":
        """The engine definition."""
        return self._intf.get_property(IAgVAEngineIon._metadata, IAgVAEngineIon._get_EngineDefinition_metadata)

    _EnableControlParameter_metadata = { "name" : "EnableControlParameter",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAControlEngineIon),) }
    def EnableControlParameter(self, param:"AgEVAControlEngineIon") -> None:
        """Enables the specified control parameter."""
        return self._intf.invoke(IAgVAEngineIon._metadata, IAgVAEngineIon._EnableControlParameter_metadata, param)

    _DisableControlParameter_metadata = { "name" : "DisableControlParameter",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAControlEngineIon),) }
    def DisableControlParameter(self, param:"AgEVAControlEngineIon") -> None:
        """Disables the specified control parameter."""
        return self._intf.invoke(IAgVAEngineIon._metadata, IAgVAEngineIon._DisableControlParameter_metadata, param)

    _IsControlParameterEnabled_metadata = { "name" : "IsControlParameterEnabled",
            "arg_types" : (agcom.LONG, POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAControlEngineIon), agmarshall.VARIANT_BOOL_arg,) }
    def IsControlParameterEnabled(self, param:"AgEVAControlEngineIon") -> bool:
        """Sees if the specified control is enabled."""
        return self._intf.invoke(IAgVAEngineIon._metadata, IAgVAEngineIon._IsControlParameterEnabled_metadata, param, out_arg())

    _get_ControlParametersAvailable_metadata = { "name" : "ControlParametersAvailable",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def ControlParametersAvailable(self) -> bool:
        """Returns whether or not the control parameters can be set."""
        return self._intf.get_property(IAgVAEngineIon._metadata, IAgVAEngineIon._get_ControlParametersAvailable_metadata)


agcls.AgClassCatalog.add_catalog_entry("{1A331BF6-2901-41F4-8A68-23DD4628A68D}", IAgVAEngineIon)
agcls.AgTypeNameMap["IAgVAEngineIon"] = IAgVAEngineIon

class IAgVAEngineCustom(object):
    """Properties for a Custom engine model."""
    _num_methods = 16
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{E17088BF-A34C-4C6B-8BF2-CEA2D489B428}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_g" : 1,
                             "set_g" : 2,
                             "get_EvalFunctionName" : 3,
                             "set_EvalFunctionName" : 4,
                             "get_PostFunctionName" : 5,
                             "set_PostFunctionName" : 6,
                             "get_PreFunctionName" : 7,
                             "set_PreFunctionName" : 8,
                             "get_SegStartFunctionName" : 9,
                             "set_SegStartFunctionName" : 10,
                             "get_UpdateFunctionName" : 11,
                             "set_UpdateFunctionName" : 12,
                             "EnableControlParameter" : 13,
                             "DisableControlParameter" : 14,
                             "IsControlParameterEnabled" : 15,
                             "get_ControlParametersAvailable" : 16, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAEngineCustom._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAEngineCustom from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAEngineCustom.__dict__ and type(IAgVAEngineCustom.__dict__[attrname]) == property:
            return IAgVAEngineCustom.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAEngineCustom.")
    
    _get_g_metadata = { "name" : "g",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def g(self) -> float:
        """The earth surface gravity acceleration for Isp conversions. Uses Acceleration Dimension."""
        return self._intf.get_property(IAgVAEngineCustom._metadata, IAgVAEngineCustom._get_g_metadata)

    _set_g_metadata = { "name" : "g",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @g.setter
    def g(self, inVal:float) -> None:
        return self._intf.set_property(IAgVAEngineCustom._metadata, IAgVAEngineCustom._set_g_metadata, inVal)

    _get_EvalFunctionName_metadata = { "name" : "EvalFunctionName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def EvalFunctionName(self) -> str:
        """The EvalFunction - custom function to call at every thrust evaluation."""
        return self._intf.get_property(IAgVAEngineCustom._metadata, IAgVAEngineCustom._get_EvalFunctionName_metadata)

    _set_EvalFunctionName_metadata = { "name" : "EvalFunctionName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @EvalFunctionName.setter
    def EvalFunctionName(self, evalFunction:str) -> None:
        return self._intf.set_property(IAgVAEngineCustom._metadata, IAgVAEngineCustom._set_EvalFunctionName_metadata, evalFunction)

    _get_PostFunctionName_metadata = { "name" : "PostFunctionName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def PostFunctionName(self) -> str:
        """The PostFunction - custom function to call after all propagation ends."""
        return self._intf.get_property(IAgVAEngineCustom._metadata, IAgVAEngineCustom._get_PostFunctionName_metadata)

    _set_PostFunctionName_metadata = { "name" : "PostFunctionName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @PostFunctionName.setter
    def PostFunctionName(self, postFunction:str) -> None:
        return self._intf.set_property(IAgVAEngineCustom._metadata, IAgVAEngineCustom._set_PostFunctionName_metadata, postFunction)

    _get_PreFunctionName_metadata = { "name" : "PreFunctionName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def PreFunctionName(self) -> str:
        """The PreFunction - custom function to call before any propagation begins."""
        return self._intf.get_property(IAgVAEngineCustom._metadata, IAgVAEngineCustom._get_PreFunctionName_metadata)

    _set_PreFunctionName_metadata = { "name" : "PreFunctionName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @PreFunctionName.setter
    def PreFunctionName(self, preFunction:str) -> None:
        return self._intf.set_property(IAgVAEngineCustom._metadata, IAgVAEngineCustom._set_PreFunctionName_metadata, preFunction)

    _get_SegStartFunctionName_metadata = { "name" : "SegStartFunctionName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def SegStartFunctionName(self) -> str:
        """The SegStartFunction - custom function to call at the beginning of each segment."""
        return self._intf.get_property(IAgVAEngineCustom._metadata, IAgVAEngineCustom._get_SegStartFunctionName_metadata)

    _set_SegStartFunctionName_metadata = { "name" : "SegStartFunctionName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @SegStartFunctionName.setter
    def SegStartFunctionName(self, segStartFunction:str) -> None:
        return self._intf.set_property(IAgVAEngineCustom._metadata, IAgVAEngineCustom._set_SegStartFunctionName_metadata, segStartFunction)

    _get_UpdateFunctionName_metadata = { "name" : "UpdateFunctionName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def UpdateFunctionName(self) -> str:
        """The UpdateFunction - custom function to call at the beginning of each integration step."""
        return self._intf.get_property(IAgVAEngineCustom._metadata, IAgVAEngineCustom._get_UpdateFunctionName_metadata)

    _set_UpdateFunctionName_metadata = { "name" : "UpdateFunctionName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @UpdateFunctionName.setter
    def UpdateFunctionName(self, updateFunction:str) -> None:
        return self._intf.set_property(IAgVAEngineCustom._metadata, IAgVAEngineCustom._set_UpdateFunctionName_metadata, updateFunction)

    _EnableControlParameter_metadata = { "name" : "EnableControlParameter",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAControlEngineCustom),) }
    def EnableControlParameter(self, param:"AgEVAControlEngineCustom") -> None:
        """Enables the specified control parameter."""
        return self._intf.invoke(IAgVAEngineCustom._metadata, IAgVAEngineCustom._EnableControlParameter_metadata, param)

    _DisableControlParameter_metadata = { "name" : "DisableControlParameter",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAControlEngineCustom),) }
    def DisableControlParameter(self, param:"AgEVAControlEngineCustom") -> None:
        """Disables the specified control parameter."""
        return self._intf.invoke(IAgVAEngineCustom._metadata, IAgVAEngineCustom._DisableControlParameter_metadata, param)

    _IsControlParameterEnabled_metadata = { "name" : "IsControlParameterEnabled",
            "arg_types" : (agcom.LONG, POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAControlEngineCustom), agmarshall.VARIANT_BOOL_arg,) }
    def IsControlParameterEnabled(self, param:"AgEVAControlEngineCustom") -> bool:
        """Sees if the specified control is enabled."""
        return self._intf.invoke(IAgVAEngineCustom._metadata, IAgVAEngineCustom._IsControlParameterEnabled_metadata, param, out_arg())

    _get_ControlParametersAvailable_metadata = { "name" : "ControlParametersAvailable",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def ControlParametersAvailable(self) -> bool:
        """Returns whether or not the control parameters can be set."""
        return self._intf.get_property(IAgVAEngineCustom._metadata, IAgVAEngineCustom._get_ControlParametersAvailable_metadata)


agcls.AgClassCatalog.add_catalog_entry("{E17088BF-A34C-4C6B-8BF2-CEA2D489B428}", IAgVAEngineCustom)
agcls.AgTypeNameMap["IAgVAEngineCustom"] = IAgVAEngineCustom

class IAgVAEnginePlugin(object):
    """Properties for a Plugin engine model."""
    _num_methods = 5
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{68ED720F-ABB6-4891-A1B9-973719400161}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_g" : 1,
                             "set_g" : 2,
                             "get_PluginIdentifier" : 3,
                             "set_PluginIdentifier" : 4,
                             "get_PluginConfig" : 5, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAEnginePlugin._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAEnginePlugin from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAEnginePlugin.__dict__ and type(IAgVAEnginePlugin.__dict__[attrname]) == property:
            return IAgVAEnginePlugin.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAEnginePlugin.")
    
    _get_g_metadata = { "name" : "g",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def g(self) -> float:
        """The gravitational acceleration constant at sea level on the Earth. Uses Acceleration Dimension."""
        return self._intf.get_property(IAgVAEnginePlugin._metadata, IAgVAEnginePlugin._get_g_metadata)

    _set_g_metadata = { "name" : "g",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @g.setter
    def g(self, inVal:float) -> None:
        return self._intf.set_property(IAgVAEnginePlugin._metadata, IAgVAEnginePlugin._set_g_metadata, inVal)

    _get_PluginIdentifier_metadata = { "name" : "PluginIdentifier",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def PluginIdentifier(self) -> str:
        """The PluginIdentifier - the ProgID of the COM component you are using for this model."""
        return self._intf.get_property(IAgVAEnginePlugin._metadata, IAgVAEnginePlugin._get_PluginIdentifier_metadata)

    _set_PluginIdentifier_metadata = { "name" : "PluginIdentifier",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @PluginIdentifier.setter
    def PluginIdentifier(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAEnginePlugin._metadata, IAgVAEnginePlugin._set_PluginIdentifier_metadata, inVal)

    _get_PluginConfig_metadata = { "name" : "PluginConfig",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def PluginConfig(self) -> "IAgVAPluginProperties":
        """The properties of the plugin."""
        return self._intf.get_property(IAgVAEnginePlugin._metadata, IAgVAEnginePlugin._get_PluginConfig_metadata)


agcls.AgClassCatalog.add_catalog_entry("{68ED720F-ABB6-4891-A1B9-973719400161}", IAgVAEnginePlugin)
agcls.AgTypeNameMap["IAgVAEnginePlugin"] = IAgVAEnginePlugin

class IAgVAEngineModelPoly(object):
    """Properties for a Polynomial Thrust and Isp engine model."""
    _num_methods = 8
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{4AC9E570-FB42-4636-B6DA-F9FEF353165B}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_g" : 1,
                             "set_g" : 2,
                             "get_ThrustCoefficients" : 3,
                             "get_IspCoefficients" : 4,
                             "EnableControlParameter" : 5,
                             "DisableControlParameter" : 6,
                             "IsControlParameterEnabled" : 7,
                             "get_ControlParametersAvailable" : 8, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAEngineModelPoly._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAEngineModelPoly from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAEngineModelPoly.__dict__ and type(IAgVAEngineModelPoly.__dict__[attrname]) == property:
            return IAgVAEngineModelPoly.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAEngineModelPoly.")
    
    _get_g_metadata = { "name" : "g",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def g(self) -> float:
        """The gravitational acceleration constant at sea level on the Earth. Uses Acceleration Dimension."""
        return self._intf.get_property(IAgVAEngineModelPoly._metadata, IAgVAEngineModelPoly._get_g_metadata)

    _set_g_metadata = { "name" : "g",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @g.setter
    def g(self, inVal:float) -> None:
        return self._intf.set_property(IAgVAEngineModelPoly._metadata, IAgVAEngineModelPoly._set_g_metadata, inVal)

    _get_ThrustCoefficients_metadata = { "name" : "ThrustCoefficients",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def ThrustCoefficients(self) -> "IAgVAEngineModelThrustCoefficients":
        """The thrust Coefficients."""
        return self._intf.get_property(IAgVAEngineModelPoly._metadata, IAgVAEngineModelPoly._get_ThrustCoefficients_metadata)

    _get_IspCoefficients_metadata = { "name" : "IspCoefficients",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def IspCoefficients(self) -> "IAgVAEngineModelIspCoefficients":
        """The Isp Coefficients."""
        return self._intf.get_property(IAgVAEngineModelPoly._metadata, IAgVAEngineModelPoly._get_IspCoefficients_metadata)

    _EnableControlParameter_metadata = { "name" : "EnableControlParameter",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAControlEngineModelPoly),) }
    def EnableControlParameter(self, param:"AgEVAControlEngineModelPoly") -> None:
        """Enables the specified control parameter."""
        return self._intf.invoke(IAgVAEngineModelPoly._metadata, IAgVAEngineModelPoly._EnableControlParameter_metadata, param)

    _DisableControlParameter_metadata = { "name" : "DisableControlParameter",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAControlEngineModelPoly),) }
    def DisableControlParameter(self, param:"AgEVAControlEngineModelPoly") -> None:
        """Disables the specified control parameter."""
        return self._intf.invoke(IAgVAEngineModelPoly._metadata, IAgVAEngineModelPoly._DisableControlParameter_metadata, param)

    _IsControlParameterEnabled_metadata = { "name" : "IsControlParameterEnabled",
            "arg_types" : (agcom.LONG, POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAControlEngineModelPoly), agmarshall.VARIANT_BOOL_arg,) }
    def IsControlParameterEnabled(self, param:"AgEVAControlEngineModelPoly") -> bool:
        """Sees if the specified control is enabled."""
        return self._intf.invoke(IAgVAEngineModelPoly._metadata, IAgVAEngineModelPoly._IsControlParameterEnabled_metadata, param, out_arg())

    _get_ControlParametersAvailable_metadata = { "name" : "ControlParametersAvailable",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def ControlParametersAvailable(self) -> bool:
        """Returns whether or not the control parameters can be set."""
        return self._intf.get_property(IAgVAEngineModelPoly._metadata, IAgVAEngineModelPoly._get_ControlParametersAvailable_metadata)


agcls.AgClassCatalog.add_catalog_entry("{4AC9E570-FB42-4636-B6DA-F9FEF353165B}", IAgVAEngineModelPoly)
agcls.AgTypeNameMap["IAgVAEngineModelPoly"] = IAgVAEngineModelPoly

class IAgVADesignCR3BPObjectCollection(object):
    """The list of associated CR3BP objects."""
    _num_methods = 5
    _vtable_offset = IDispatch._vtable_offset + IDispatch._num_methods
    _metadata = {
        "uuid" : "{554A8010-4514-4AD5-8FD8-F5FA1FC1D5FF}",
        "vtable_reference" : IDispatch._vtable_offset + IDispatch._num_methods - 1,
        "method_offsets" : { "Item" : 1,
                             "get__NewEnum" : 2,
                             "get_Count" : 3,
                             "GetItemByIndex" : 4,
                             "GetItemByName" : 5, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVADesignCR3BPObjectCollection._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVADesignCR3BPObjectCollection from source object.")
        self.__dict__["_enumerator"] = None
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVADesignCR3BPObjectCollection.__dict__ and type(IAgVADesignCR3BPObjectCollection.__dict__[attrname]) == property:
            return IAgVADesignCR3BPObjectCollection.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVADesignCR3BPObjectCollection.")
    def __iter__(self):
        self.__dict__["_enumerator"] = self._NewEnum
        self._enumerator.reset()
        return self
    def __next__(self) -> "IAgVADesignCR3BPObject":
        if self._enumerator is None:
            raise StopIteration
        nextval = self._enumerator.next()
        if nextval is None:
            raise StopIteration
        return nextval
    
    _Item_metadata = { "name" : "Item",
            "arg_types" : (agcom.VARIANT, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.VARIANT_arg, agmarshall.AgInterface_out_arg,) }
    def Item(self, indexOrName:typing.Any) -> "IAgVADesignCR3BPObject":
        """A property that allows you to iterate through the collection."""
        return self._intf.invoke(IAgVADesignCR3BPObjectCollection._metadata, IAgVADesignCR3BPObjectCollection._Item_metadata, indexOrName, out_arg())

    _get__NewEnum_metadata = { "name" : "_NewEnum",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.IEnumVARIANT_arg,) }
    @property
    def _NewEnum(self) -> enumerator_proxy:
        """A property that allows you to enumerate through the collection."""
        return self._intf.get_property(IAgVADesignCR3BPObjectCollection._metadata, IAgVADesignCR3BPObjectCollection._get__NewEnum_metadata)

    _get_Count_metadata = { "name" : "Count",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.LONG_arg,) }
    @property
    def Count(self) -> int:
        """The number of associated objects in the set."""
        return self._intf.get_property(IAgVADesignCR3BPObjectCollection._metadata, IAgVADesignCR3BPObjectCollection._get_Count_metadata)

    _GetItemByIndex_metadata = { "name" : "GetItemByIndex",
            "arg_types" : (agcom.INT, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.INT_arg, agmarshall.AgInterface_out_arg,) }
    def GetItemByIndex(self, index:int) -> "IAgVADesignCR3BPObject":
        """Retrieves an associated object from the collection by index."""
        return self._intf.invoke(IAgVADesignCR3BPObjectCollection._metadata, IAgVADesignCR3BPObjectCollection._GetItemByIndex_metadata, index, out_arg())

    _GetItemByName_metadata = { "name" : "GetItemByName",
            "arg_types" : (agcom.BSTR, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.AgInterface_out_arg,) }
    def GetItemByName(self, name:str) -> "IAgVADesignCR3BPObject":
        """Retrieves an associated object from the collection by name."""
        return self._intf.invoke(IAgVADesignCR3BPObjectCollection._metadata, IAgVADesignCR3BPObjectCollection._GetItemByName_metadata, name, out_arg())

    __getitem__ = Item



agcls.AgClassCatalog.add_catalog_entry("{554A8010-4514-4AD5-8FD8-F5FA1FC1D5FF}", IAgVADesignCR3BPObjectCollection)
agcls.AgTypeNameMap["IAgVADesignCR3BPObjectCollection"] = IAgVADesignCR3BPObjectCollection

class IAgVADesignCR3BPSetup(object):
    """Properties for the CR3BP Setup Tool.."""
    _num_methods = 25
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{37C54765-E3FF-4910-9470-B1128666F5BB}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_CentralBodyName" : 1,
                             "set_CentralBodyName" : 2,
                             "get_SecondaryBodyName" : 3,
                             "set_SecondaryBodyName" : 4,
                             "get_InitialEpoch" : 5,
                             "set_InitialEpoch" : 6,
                             "get_IdealOrbitRadius" : 7,
                             "set_IdealOrbitRadius" : 8,
                             "get_IdealSecondaryName" : 9,
                             "set_IdealSecondaryName" : 10,
                             "get_MassParameter" : 11,
                             "get_CharacteristicDistance" : 12,
                             "get_CharacteristicTime" : 13,
                             "get_CharacteristicVelocity" : 14,
                             "get_CharacteristicAcceleration" : 15,
                             "get_RotatingSystemChoice" : 16,
                             "set_RotatingSystemChoice" : 17,
                             "CreateIdealSecondaryCB" : 18,
                             "ResetIdealSecondaryCB" : 19,
                             "UpdateIdealSecondaryCB" : 20,
                             "CreateRotatingCoordinateSystem" : 21,
                             "DeleteRotatingCoordinateSystem" : 22,
                             "CreateCalculationObjects" : 23,
                             "DeleteCalculationObjects" : 24,
                             "get_AssociatedObjects" : 25, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVADesignCR3BPSetup._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVADesignCR3BPSetup from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVADesignCR3BPSetup.__dict__ and type(IAgVADesignCR3BPSetup.__dict__[attrname]) == property:
            return IAgVADesignCR3BPSetup.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVADesignCR3BPSetup.")
    
    _get_CentralBodyName_metadata = { "name" : "CentralBodyName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def CentralBodyName(self) -> str:
        """Primary central body for the three-body system."""
        return self._intf.get_property(IAgVADesignCR3BPSetup._metadata, IAgVADesignCR3BPSetup._get_CentralBodyName_metadata)

    _set_CentralBodyName_metadata = { "name" : "CentralBodyName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @CentralBodyName.setter
    def CentralBodyName(self, inVal:str) -> None:
        return self._intf.set_property(IAgVADesignCR3BPSetup._metadata, IAgVADesignCR3BPSetup._set_CentralBodyName_metadata, inVal)

    _get_SecondaryBodyName_metadata = { "name" : "SecondaryBodyName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def SecondaryBodyName(self) -> str:
        """Secondary Body"""
        return self._intf.get_property(IAgVADesignCR3BPSetup._metadata, IAgVADesignCR3BPSetup._get_SecondaryBodyName_metadata)

    _set_SecondaryBodyName_metadata = { "name" : "SecondaryBodyName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @SecondaryBodyName.setter
    def SecondaryBodyName(self, inVal:str) -> None:
        return self._intf.set_property(IAgVADesignCR3BPSetup._metadata, IAgVADesignCR3BPSetup._set_SecondaryBodyName_metadata, inVal)

    _get_InitialEpoch_metadata = { "name" : "InitialEpoch",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def InitialEpoch(self) -> typing.Any:
        """Date and time for system construction."""
        return self._intf.get_property(IAgVADesignCR3BPSetup._metadata, IAgVADesignCR3BPSetup._get_InitialEpoch_metadata)

    _set_InitialEpoch_metadata = { "name" : "InitialEpoch",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @InitialEpoch.setter
    def InitialEpoch(self, newVal:typing.Any) -> None:
        return self._intf.set_property(IAgVADesignCR3BPSetup._metadata, IAgVADesignCR3BPSetup._set_InitialEpoch_metadata, newVal)

    _get_IdealOrbitRadius_metadata = { "name" : "IdealOrbitRadius",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAIdealOrbitRadius),) }
    @property
    def IdealOrbitRadius(self) -> "AgEVAIdealOrbitRadius":
        """Orbital radius of the idealized secondary definition."""
        return self._intf.get_property(IAgVADesignCR3BPSetup._metadata, IAgVADesignCR3BPSetup._get_IdealOrbitRadius_metadata)

    _set_IdealOrbitRadius_metadata = { "name" : "IdealOrbitRadius",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAIdealOrbitRadius),) }
    @IdealOrbitRadius.setter
    def IdealOrbitRadius(self, inVal:"AgEVAIdealOrbitRadius") -> None:
        return self._intf.set_property(IAgVADesignCR3BPSetup._metadata, IAgVADesignCR3BPSetup._set_IdealOrbitRadius_metadata, inVal)

    _get_IdealSecondaryName_metadata = { "name" : "IdealSecondaryName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def IdealSecondaryName(self) -> str:
        """Name to be used for the idealized secondary."""
        return self._intf.get_property(IAgVADesignCR3BPSetup._metadata, IAgVADesignCR3BPSetup._get_IdealSecondaryName_metadata)

    _set_IdealSecondaryName_metadata = { "name" : "IdealSecondaryName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @IdealSecondaryName.setter
    def IdealSecondaryName(self, inVal:str) -> None:
        return self._intf.set_property(IAgVADesignCR3BPSetup._metadata, IAgVADesignCR3BPSetup._set_IdealSecondaryName_metadata, inVal)

    _get_MassParameter_metadata = { "name" : "MassParameter",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def MassParameter(self) -> float:
        """The mass parameter computed from the primary and secondary bodies."""
        return self._intf.get_property(IAgVADesignCR3BPSetup._metadata, IAgVADesignCR3BPSetup._get_MassParameter_metadata)

    _get_CharacteristicDistance_metadata = { "name" : "CharacteristicDistance",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def CharacteristicDistance(self) -> float:
        """The characteristic distance computed from the primary and secondary bodies."""
        return self._intf.get_property(IAgVADesignCR3BPSetup._metadata, IAgVADesignCR3BPSetup._get_CharacteristicDistance_metadata)

    _get_CharacteristicTime_metadata = { "name" : "CharacteristicTime",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def CharacteristicTime(self) -> float:
        """The characteristic time computed from the primary and secondary bodies."""
        return self._intf.get_property(IAgVADesignCR3BPSetup._metadata, IAgVADesignCR3BPSetup._get_CharacteristicTime_metadata)

    _get_CharacteristicVelocity_metadata = { "name" : "CharacteristicVelocity",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def CharacteristicVelocity(self) -> float:
        """The characteristic velocity computed from the primary and secondary bodies."""
        return self._intf.get_property(IAgVADesignCR3BPSetup._metadata, IAgVADesignCR3BPSetup._get_CharacteristicVelocity_metadata)

    _get_CharacteristicAcceleration_metadata = { "name" : "CharacteristicAcceleration",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def CharacteristicAcceleration(self) -> float:
        """The characteristic acceleration computed from the primary and secondary bodies."""
        return self._intf.get_property(IAgVADesignCR3BPSetup._metadata, IAgVADesignCR3BPSetup._get_CharacteristicAcceleration_metadata)

    _get_RotatingSystemChoice_metadata = { "name" : "RotatingSystemChoice",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVARotatingCoordinateSystem),) }
    @property
    def RotatingSystemChoice(self) -> "AgEVARotatingCoordinateSystem":
        """The rotating coordinate system and associated calculation objects to interact with."""
        return self._intf.get_property(IAgVADesignCR3BPSetup._metadata, IAgVADesignCR3BPSetup._get_RotatingSystemChoice_metadata)

    _set_RotatingSystemChoice_metadata = { "name" : "RotatingSystemChoice",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVARotatingCoordinateSystem),) }
    @RotatingSystemChoice.setter
    def RotatingSystemChoice(self, inVal:"AgEVARotatingCoordinateSystem") -> None:
        return self._intf.set_property(IAgVADesignCR3BPSetup._metadata, IAgVADesignCR3BPSetup._set_RotatingSystemChoice_metadata, inVal)

    _CreateIdealSecondaryCB_metadata = { "name" : "CreateIdealSecondaryCB",
            "arg_types" : (),
            "marshallers" : () }
    def CreateIdealSecondaryCB(self) -> None:
        """Constructs the idealized secondary for the three-body system"""
        return self._intf.invoke(IAgVADesignCR3BPSetup._metadata, IAgVADesignCR3BPSetup._CreateIdealSecondaryCB_metadata, )

    _ResetIdealSecondaryCB_metadata = { "name" : "ResetIdealSecondaryCB",
            "arg_types" : (),
            "marshallers" : () }
    def ResetIdealSecondaryCB(self) -> None:
        """Reset the idealized secondary for the three-body system."""
        return self._intf.invoke(IAgVADesignCR3BPSetup._metadata, IAgVADesignCR3BPSetup._ResetIdealSecondaryCB_metadata, )

    _UpdateIdealSecondaryCB_metadata = { "name" : "UpdateIdealSecondaryCB",
            "arg_types" : (),
            "marshallers" : () }
    def UpdateIdealSecondaryCB(self) -> None:
        """Update the idealized secondary for the three-body system."""
        return self._intf.invoke(IAgVADesignCR3BPSetup._metadata, IAgVADesignCR3BPSetup._UpdateIdealSecondaryCB_metadata, )

    _CreateRotatingCoordinateSystem_metadata = { "name" : "CreateRotatingCoordinateSystem",
            "arg_types" : (),
            "marshallers" : () }
    def CreateRotatingCoordinateSystem(self) -> None:
        """Creates the coordinate system for the RotatingSystemChoice selection."""
        return self._intf.invoke(IAgVADesignCR3BPSetup._metadata, IAgVADesignCR3BPSetup._CreateRotatingCoordinateSystem_metadata, )

    _DeleteRotatingCoordinateSystem_metadata = { "name" : "DeleteRotatingCoordinateSystem",
            "arg_types" : (),
            "marshallers" : () }
    def DeleteRotatingCoordinateSystem(self) -> None:
        """Deletes the coordinate system for the RotatingSystemChoice selection."""
        return self._intf.invoke(IAgVADesignCR3BPSetup._metadata, IAgVADesignCR3BPSetup._DeleteRotatingCoordinateSystem_metadata, )

    _CreateCalculationObjects_metadata = { "name" : "CreateCalculationObjects",
            "arg_types" : (),
            "marshallers" : () }
    def CreateCalculationObjects(self) -> None:
        """Creates the calculation objects for the selected coordinate system."""
        return self._intf.invoke(IAgVADesignCR3BPSetup._metadata, IAgVADesignCR3BPSetup._CreateCalculationObjects_metadata, )

    _DeleteCalculationObjects_metadata = { "name" : "DeleteCalculationObjects",
            "arg_types" : (),
            "marshallers" : () }
    def DeleteCalculationObjects(self) -> None:
        """Deletes the calculation objects for the selected coordinate system."""
        return self._intf.invoke(IAgVADesignCR3BPSetup._metadata, IAgVADesignCR3BPSetup._DeleteCalculationObjects_metadata, )

    _get_AssociatedObjects_metadata = { "name" : "AssociatedObjects",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def AssociatedObjects(self) -> "IAgVADesignCR3BPObjectCollection":
        """The list of associated objects."""
        return self._intf.get_property(IAgVADesignCR3BPSetup._metadata, IAgVADesignCR3BPSetup._get_AssociatedObjects_metadata)


agcls.AgClassCatalog.add_catalog_entry("{37C54765-E3FF-4910-9470-B1128666F5BB}", IAgVADesignCR3BPSetup)
agcls.AgTypeNameMap["IAgVADesignCR3BPSetup"] = IAgVADesignCR3BPSetup

class IAgVADesignCR3BPObject(object):
    """Properties for individual associated CR3BP object."""
    _num_methods = 3
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{994615DE-EF79-4D9A-BC63-0911FAE26842}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_ObjectName" : 1,
                             "get_ObjectType" : 2,
                             "get_ObjectDependsOn" : 3, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVADesignCR3BPObject._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVADesignCR3BPObject from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVADesignCR3BPObject.__dict__ and type(IAgVADesignCR3BPObject.__dict__[attrname]) == property:
            return IAgVADesignCR3BPObject.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVADesignCR3BPObject.")
    
    _get_ObjectName_metadata = { "name" : "ObjectName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def ObjectName(self) -> str:
        """The associated object name."""
        return self._intf.get_property(IAgVADesignCR3BPObject._metadata, IAgVADesignCR3BPObject._get_ObjectName_metadata)

    _get_ObjectType_metadata = { "name" : "ObjectType",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def ObjectType(self) -> str:
        """The associated object type."""
        return self._intf.get_property(IAgVADesignCR3BPObject._metadata, IAgVADesignCR3BPObject._get_ObjectType_metadata)

    _get_ObjectDependsOn_metadata = { "name" : "ObjectDependsOn",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def ObjectDependsOn(self) -> str:
        """The associated object depends on."""
        return self._intf.get_property(IAgVADesignCR3BPObject._metadata, IAgVADesignCR3BPObject._get_ObjectDependsOn_metadata)


agcls.AgClassCatalog.add_catalog_entry("{994615DE-EF79-4D9A-BC63-0911FAE26842}", IAgVADesignCR3BPObject)
agcls.AgTypeNameMap["IAgVADesignCR3BPObject"] = IAgVADesignCR3BPObject

class IAgVAThruster(object):
    """Properties for individual thrusters."""
    _num_methods = 16
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{61A386B1-675B-4DB6-85B9-078760AB8339}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_Name" : 1,
                             "set_Name" : 2,
                             "get_UserComment" : 3,
                             "set_UserComment" : 4,
                             "Copy" : 5,
                             "get_EngineModelName" : 6,
                             "set_EngineModelName" : 7,
                             "get_ThrusterEfficiency" : 8,
                             "set_ThrusterEfficiency" : 9,
                             "get_EquivalentOnTime" : 10,
                             "set_EquivalentOnTime" : 11,
                             "get_ThrusterDirection" : 12,
                             "EnableControlParameter" : 13,
                             "DisableControlParameter" : 14,
                             "IsControlParameterEnabled" : 15,
                             "get_ControlParametersAvailable" : 16, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAThruster._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAThruster from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAThruster.__dict__ and type(IAgVAThruster.__dict__[attrname]) == property:
            return IAgVAThruster.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAThruster.")
    
    _get_Name_metadata = { "name" : "Name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def Name(self) -> str:
        """The thruster name."""
        return self._intf.get_property(IAgVAThruster._metadata, IAgVAThruster._get_Name_metadata)

    _set_Name_metadata = { "name" : "Name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @Name.setter
    def Name(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAThruster._metadata, IAgVAThruster._set_Name_metadata, inVal)

    _get_UserComment_metadata = { "name" : "UserComment",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def UserComment(self) -> str:
        """A user comment."""
        return self._intf.get_property(IAgVAThruster._metadata, IAgVAThruster._get_UserComment_metadata)

    _set_UserComment_metadata = { "name" : "UserComment",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @UserComment.setter
    def UserComment(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAThruster._metadata, IAgVAThruster._set_UserComment_metadata, inVal)

    _Copy_metadata = { "name" : "Copy",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    def Copy(self) -> "IAgVAThruster":
        """Makes a copy of the specified thruster."""
        return self._intf.invoke(IAgVAThruster._metadata, IAgVAThruster._Copy_metadata, out_arg())

    _get_EngineModelName_metadata = { "name" : "EngineModelName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def EngineModelName(self) -> str:
        """The engine model."""
        return self._intf.get_property(IAgVAThruster._metadata, IAgVAThruster._get_EngineModelName_metadata)

    _set_EngineModelName_metadata = { "name" : "EngineModelName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @EngineModelName.setter
    def EngineModelName(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAThruster._metadata, IAgVAThruster._set_EngineModelName_metadata, inVal)

    _get_ThrusterEfficiency_metadata = { "name" : "ThrusterEfficiency",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def ThrusterEfficiency(self) -> float:
        """The thruster efficiency. Dimensionless."""
        return self._intf.get_property(IAgVAThruster._metadata, IAgVAThruster._get_ThrusterEfficiency_metadata)

    _set_ThrusterEfficiency_metadata = { "name" : "ThrusterEfficiency",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @ThrusterEfficiency.setter
    def ThrusterEfficiency(self, inVal:float) -> None:
        return self._intf.set_property(IAgVAThruster._metadata, IAgVAThruster._set_ThrusterEfficiency_metadata, inVal)

    _get_EquivalentOnTime_metadata = { "name" : "EquivalentOnTime",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def EquivalentOnTime(self) -> float:
        """The equivalent on-time percentage is a factor multiplied by the thrust. The thrust is applied continuously throughout the maneuver and is reduced by the percentage. The mass flow rate is likewise reduced. Dimensionless."""
        return self._intf.get_property(IAgVAThruster._metadata, IAgVAThruster._get_EquivalentOnTime_metadata)

    _set_EquivalentOnTime_metadata = { "name" : "EquivalentOnTime",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @EquivalentOnTime.setter
    def EquivalentOnTime(self, inVal:float) -> None:
        return self._intf.set_property(IAgVAThruster._metadata, IAgVAThruster._set_EquivalentOnTime_metadata, inVal)

    _get_ThrusterDirection_metadata = { "name" : "ThrusterDirection",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def ThrusterDirection(self) -> "IAgDirection":
        """A thruster direction value."""
        return self._intf.get_property(IAgVAThruster._metadata, IAgVAThruster._get_ThrusterDirection_metadata)

    _EnableControlParameter_metadata = { "name" : "EnableControlParameter",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAControlThrusters),) }
    def EnableControlParameter(self, param:"AgEVAControlThrusters") -> None:
        """Enables the specified control parameter."""
        return self._intf.invoke(IAgVAThruster._metadata, IAgVAThruster._EnableControlParameter_metadata, param)

    _DisableControlParameter_metadata = { "name" : "DisableControlParameter",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAControlThrusters),) }
    def DisableControlParameter(self, param:"AgEVAControlThrusters") -> None:
        """Disables the specified control parameter."""
        return self._intf.invoke(IAgVAThruster._metadata, IAgVAThruster._DisableControlParameter_metadata, param)

    _IsControlParameterEnabled_metadata = { "name" : "IsControlParameterEnabled",
            "arg_types" : (agcom.LONG, POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAControlThrusters), agmarshall.VARIANT_BOOL_arg,) }
    def IsControlParameterEnabled(self, param:"AgEVAControlThrusters") -> bool:
        """Sees if the specified control is enabled."""
        return self._intf.invoke(IAgVAThruster._metadata, IAgVAThruster._IsControlParameterEnabled_metadata, param, out_arg())

    _get_ControlParametersAvailable_metadata = { "name" : "ControlParametersAvailable",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def ControlParametersAvailable(self) -> bool:
        """Returns whether or not the control parameters can be set."""
        return self._intf.get_property(IAgVAThruster._metadata, IAgVAThruster._get_ControlParametersAvailable_metadata)


agcls.AgClassCatalog.add_catalog_entry("{61A386B1-675B-4DB6-85B9-078760AB8339}", IAgVAThruster)
agcls.AgTypeNameMap["IAgVAThruster"] = IAgVAThruster

class IAgVAThrusterSetCollection(object):
    """The list of thrusters in a thruster set."""
    _num_methods = 11
    _vtable_offset = IDispatch._vtable_offset + IDispatch._num_methods
    _metadata = {
        "uuid" : "{C60E997C-7AF3-477B-8B8A-8E1CA0D55681}",
        "vtable_reference" : IDispatch._vtable_offset + IDispatch._num_methods - 1,
        "method_offsets" : { "Item" : 1,
                             "get__NewEnum" : 2,
                             "get_Count" : 3,
                             "Add" : 4,
                             "Remove" : 5,
                             "RemoveAll" : 6,
                             "Cut" : 7,
                             "Paste" : 8,
                             "InsertCopy" : 9,
                             "GetItemByIndex" : 10,
                             "GetItemByName" : 11, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAThrusterSetCollection._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAThrusterSetCollection from source object.")
        self.__dict__["_enumerator"] = None
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAThrusterSetCollection.__dict__ and type(IAgVAThrusterSetCollection.__dict__[attrname]) == property:
            return IAgVAThrusterSetCollection.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAThrusterSetCollection.")
    def __iter__(self):
        self.__dict__["_enumerator"] = self._NewEnum
        self._enumerator.reset()
        return self
    def __next__(self) -> "IAgVAThruster":
        if self._enumerator is None:
            raise StopIteration
        nextval = self._enumerator.next()
        if nextval is None:
            raise StopIteration
        return nextval
    
    _Item_metadata = { "name" : "Item",
            "arg_types" : (agcom.VARIANT, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.VARIANT_arg, agmarshall.AgInterface_out_arg,) }
    def Item(self, indexOrName:typing.Any) -> "IAgVAThruster":
        """A property that allows you to iterate through the collection."""
        return self._intf.invoke(IAgVAThrusterSetCollection._metadata, IAgVAThrusterSetCollection._Item_metadata, indexOrName, out_arg())

    _get__NewEnum_metadata = { "name" : "_NewEnum",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.IEnumVARIANT_arg,) }
    @property
    def _NewEnum(self) -> enumerator_proxy:
        """A property that allows you to enumerate through the collection."""
        return self._intf.get_property(IAgVAThrusterSetCollection._metadata, IAgVAThrusterSetCollection._get__NewEnum_metadata)

    _get_Count_metadata = { "name" : "Count",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.LONG_arg,) }
    @property
    def Count(self) -> int:
        """The number of thrusters in the set."""
        return self._intf.get_property(IAgVAThrusterSetCollection._metadata, IAgVAThrusterSetCollection._get_Count_metadata)

    _Add_metadata = { "name" : "Add",
            "arg_types" : (agcom.BSTR, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.AgInterface_out_arg,) }
    def Add(self, thrusterName:str) -> "IAgVAThruster":
        """Adds a new thruster."""
        return self._intf.invoke(IAgVAThrusterSetCollection._metadata, IAgVAThrusterSetCollection._Add_metadata, thrusterName, out_arg())

    _Remove_metadata = { "name" : "Remove",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    def Remove(self, indexOrName:typing.Any) -> None:
        """Removes a specified thruster."""
        return self._intf.invoke(IAgVAThrusterSetCollection._metadata, IAgVAThrusterSetCollection._Remove_metadata, indexOrName)

    _RemoveAll_metadata = { "name" : "RemoveAll",
            "arg_types" : (),
            "marshallers" : () }
    def RemoveAll(self) -> None:
        """Removes all thrusters."""
        return self._intf.invoke(IAgVAThrusterSetCollection._metadata, IAgVAThrusterSetCollection._RemoveAll_metadata, )

    _Cut_metadata = { "name" : "Cut",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    def Cut(self, indexOrName:typing.Any) -> None:
        """Copies a thruster to the clipboard and removes the thruster from the list."""
        return self._intf.invoke(IAgVAThrusterSetCollection._metadata, IAgVAThrusterSetCollection._Cut_metadata, indexOrName)

    _Paste_metadata = { "name" : "Paste",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    def Paste(self) -> "IAgVAThruster":
        """Pastes a thruster from the clipboard into the list."""
        return self._intf.invoke(IAgVAThrusterSetCollection._metadata, IAgVAThrusterSetCollection._Paste_metadata, out_arg())

    _InsertCopy_metadata = { "name" : "InsertCopy",
            "arg_types" : (agcom.PVOID, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_in_arg("IAgVAThruster"), agmarshall.AgInterface_out_arg,) }
    def InsertCopy(self, thruster:"IAgVAThruster") -> "IAgVAThruster":
        """Copies a thruster and inserts the copy into the list."""
        return self._intf.invoke(IAgVAThrusterSetCollection._metadata, IAgVAThrusterSetCollection._InsertCopy_metadata, thruster, out_arg())

    _GetItemByIndex_metadata = { "name" : "GetItemByIndex",
            "arg_types" : (agcom.INT, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.INT_arg, agmarshall.AgInterface_out_arg,) }
    def GetItemByIndex(self, index:int) -> "IAgVAThruster":
        """Retrieves a thruster from the collection by index."""
        return self._intf.invoke(IAgVAThrusterSetCollection._metadata, IAgVAThrusterSetCollection._GetItemByIndex_metadata, index, out_arg())

    _GetItemByName_metadata = { "name" : "GetItemByName",
            "arg_types" : (agcom.BSTR, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.AgInterface_out_arg,) }
    def GetItemByName(self, name:str) -> "IAgVAThruster":
        """Retrieves a thruster from the collection by name."""
        return self._intf.invoke(IAgVAThrusterSetCollection._metadata, IAgVAThrusterSetCollection._GetItemByName_metadata, name, out_arg())

    __getitem__ = Item



agcls.AgClassCatalog.add_catalog_entry("{C60E997C-7AF3-477B-8B8A-8E1CA0D55681}", IAgVAThrusterSetCollection)
agcls.AgTypeNameMap["IAgVAThrusterSetCollection"] = IAgVAThrusterSetCollection

class IAgVAThrusterSet(object):
    """The properties of a thruster set."""
    _num_methods = 3
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{AA4BEFC3-C3E6-4888-B920-109F57621589}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_DirectionDefinition" : 1,
                             "set_DirectionDefinition" : 2,
                             "get_Thrusters" : 3, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAThrusterSet._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAThrusterSet from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAThrusterSet.__dict__ and type(IAgVAThrusterSet.__dict__[attrname]) == property:
            return IAgVAThrusterSet.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAThrusterSet.")
    
    _get_DirectionDefinition_metadata = { "name" : "DirectionDefinition",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAThrusterDirection),) }
    @property
    def DirectionDefinition(self) -> "AgEVAThrusterDirection":
        """The thruster set direction definition."""
        return self._intf.get_property(IAgVAThrusterSet._metadata, IAgVAThrusterSet._get_DirectionDefinition_metadata)

    _set_DirectionDefinition_metadata = { "name" : "DirectionDefinition",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAThrusterDirection),) }
    @DirectionDefinition.setter
    def DirectionDefinition(self, inVal:"AgEVAThrusterDirection") -> None:
        return self._intf.set_property(IAgVAThrusterSet._metadata, IAgVAThrusterSet._set_DirectionDefinition_metadata, inVal)

    _get_Thrusters_metadata = { "name" : "Thrusters",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def Thrusters(self) -> "IAgVAThrusterSetCollection":
        """The list of thrusters."""
        return self._intf.get_property(IAgVAThrusterSet._metadata, IAgVAThrusterSet._get_Thrusters_metadata)


agcls.AgClassCatalog.add_catalog_entry("{AA4BEFC3-C3E6-4888-B920-109F57621589}", IAgVAThrusterSet)
agcls.AgTypeNameMap["IAgVAThrusterSet"] = IAgVAThrusterSet

class IAgVAAsTriggerCondition(object):
    """Properties for a constraint - an additional condition to be met to satisfy a stopping condition."""
    _num_methods = 14
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{5670AC34-2864-42ED-B32A-5572363C0CE7}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_Criteria" : 1,
                             "set_Criteria" : 2,
                             "get_CalcObject" : 3,
                             "set_CalcObject" : 4,
                             "get_CalcObjectName" : 5,
                             "set_CalcObjectName" : 6,
                             "get_Value" : 7,
                             "set_Value" : 8,
                             "get_Tolerance" : 9,
                             "set_Tolerance" : 10,
                             "get_UseAbsoluteValue" : 11,
                             "set_UseAbsoluteValue" : 12,
                             "CopyCalcObjectToClipboard" : 13,
                             "PasteCalcObjectFromClipboard" : 14, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAAsTriggerCondition._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAAsTriggerCondition from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAAsTriggerCondition.__dict__ and type(IAgVAAsTriggerCondition.__dict__[attrname]) == property:
            return IAgVAAsTriggerCondition.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAAsTriggerCondition.")
    
    _get_Criteria_metadata = { "name" : "Criteria",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVACriteria),) }
    @property
    def Criteria(self) -> "AgEVACriteria":
        """The criteria to be applied to the desired value."""
        return self._intf.get_property(IAgVAAsTriggerCondition._metadata, IAgVAAsTriggerCondition._get_Criteria_metadata)

    _set_Criteria_metadata = { "name" : "Criteria",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVACriteria),) }
    @Criteria.setter
    def Criteria(self, inVal:"AgEVACriteria") -> None:
        return self._intf.set_property(IAgVAAsTriggerCondition._metadata, IAgVAAsTriggerCondition._set_Criteria_metadata, inVal)

    _get_CalcObject_metadata = { "name" : "CalcObject",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def CalcObject(self) -> "IAgComponentInfo":
        """The calculation object to perform calculation to evaluate condition."""
        return self._intf.get_property(IAgVAAsTriggerCondition._metadata, IAgVAAsTriggerCondition._get_CalcObject_metadata)

    _set_CalcObject_metadata = { "name" : "CalcObject",
            "arg_types" : (agcom.PVOID,),
            "marshallers" : (agmarshall.AgInterface_in_arg("IAgComponentInfo"),) }
    @CalcObject.setter
    def CalcObject(self, inVal:"IAgComponentInfo") -> None:
        return self._intf.set_property(IAgVAAsTriggerCondition._metadata, IAgVAAsTriggerCondition._set_CalcObject_metadata, inVal)

    _get_CalcObjectName_metadata = { "name" : "CalcObjectName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def CalcObjectName(self) -> str:
        """The name of the calculation object to perform calculation to evaluate condition."""
        return self._intf.get_property(IAgVAAsTriggerCondition._metadata, IAgVAAsTriggerCondition._get_CalcObjectName_metadata)

    _set_CalcObjectName_metadata = { "name" : "CalcObjectName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @CalcObjectName.setter
    def CalcObjectName(self, inVal:str) -> None:
        return self._intf.set_property(IAgVAAsTriggerCondition._metadata, IAgVAAsTriggerCondition._set_CalcObjectName_metadata, inVal)

    _get_Value_metadata = { "name" : "Value",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def Value(self) -> typing.Any:
        """The value to satisfy the condition. Dimension depends on CalcObject."""
        return self._intf.get_property(IAgVAAsTriggerCondition._metadata, IAgVAAsTriggerCondition._get_Value_metadata)

    _set_Value_metadata = { "name" : "Value",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @Value.setter
    def Value(self, inVal:typing.Any) -> None:
        return self._intf.set_property(IAgVAAsTriggerCondition._metadata, IAgVAAsTriggerCondition._set_Value_metadata, inVal)

    _get_Tolerance_metadata = { "name" : "Tolerance",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def Tolerance(self) -> typing.Any:
        """How closely the test parameter must approximate the desired value for the constraint. Dimension depends on CalcObject."""
        return self._intf.get_property(IAgVAAsTriggerCondition._metadata, IAgVAAsTriggerCondition._get_Tolerance_metadata)

    _set_Tolerance_metadata = { "name" : "Tolerance",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @Tolerance.setter
    def Tolerance(self, inVal:typing.Any) -> None:
        return self._intf.set_property(IAgVAAsTriggerCondition._metadata, IAgVAAsTriggerCondition._set_Tolerance_metadata, inVal)

    _get_UseAbsoluteValue_metadata = { "name" : "UseAbsoluteValue",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def UseAbsoluteValue(self) -> bool:
        """Whether or not to take the absolute value of the calculation."""
        return self._intf.get_property(IAgVAAsTriggerCondition._metadata, IAgVAAsTriggerCondition._get_UseAbsoluteValue_metadata)

    _set_UseAbsoluteValue_metadata = { "name" : "UseAbsoluteValue",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @UseAbsoluteValue.setter
    def UseAbsoluteValue(self, inVal:bool) -> None:
        return self._intf.set_property(IAgVAAsTriggerCondition._metadata, IAgVAAsTriggerCondition._set_UseAbsoluteValue_metadata, inVal)

    _CopyCalcObjectToClipboard_metadata = { "name" : "CopyCalcObjectToClipboard",
            "arg_types" : (),
            "marshallers" : () }
    def CopyCalcObjectToClipboard(self) -> None:
        """Copy calculation object to clipboard."""
        return self._intf.invoke(IAgVAAsTriggerCondition._metadata, IAgVAAsTriggerCondition._CopyCalcObjectToClipboard_metadata, )

    _PasteCalcObjectFromClipboard_metadata = { "name" : "PasteCalcObjectFromClipboard",
            "arg_types" : (),
            "marshallers" : () }
    def PasteCalcObjectFromClipboard(self) -> None:
        """Replace calculation object with instance in clipboard."""
        return self._intf.invoke(IAgVAAsTriggerCondition._metadata, IAgVAAsTriggerCondition._PasteCalcObjectFromClipboard_metadata, )


agcls.AgClassCatalog.add_catalog_entry("{5670AC34-2864-42ED-B32A-5572363C0CE7}", IAgVAAsTriggerCondition)
agcls.AgTypeNameMap["IAgVAAsTriggerCondition"] = IAgVAAsTriggerCondition

class IAgVACustomFunctionScriptEngine(object):
    """Properties for custom functions."""
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{02AA62BC-AA81-400C-83A0-961729880708}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_ScriptFilename" : 1,
                             "set_ScriptFilename" : 2,
                             "get_FileExtensionName" : 3,
                             "set_FileExtensionName" : 4, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVACustomFunctionScriptEngine._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVACustomFunctionScriptEngine from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVACustomFunctionScriptEngine.__dict__ and type(IAgVACustomFunctionScriptEngine.__dict__[attrname]) == property:
            return IAgVACustomFunctionScriptEngine.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVACustomFunctionScriptEngine.")
    
    _get_ScriptFilename_metadata = { "name" : "ScriptFilename",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def ScriptFilename(self) -> str:
        """The file containing the function to call."""
        return self._intf.get_property(IAgVACustomFunctionScriptEngine._metadata, IAgVACustomFunctionScriptEngine._get_ScriptFilename_metadata)

    _set_ScriptFilename_metadata = { "name" : "ScriptFilename",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @ScriptFilename.setter
    def ScriptFilename(self, inVal:str) -> None:
        return self._intf.set_property(IAgVACustomFunctionScriptEngine._metadata, IAgVACustomFunctionScriptEngine._set_ScriptFilename_metadata, inVal)

    _get_FileExtensionName_metadata = { "name" : "FileExtensionName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def FileExtensionName(self) -> str:
        """The file extension."""
        return self._intf.get_property(IAgVACustomFunctionScriptEngine._metadata, IAgVACustomFunctionScriptEngine._get_FileExtensionName_metadata)

    _set_FileExtensionName_metadata = { "name" : "FileExtensionName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @FileExtensionName.setter
    def FileExtensionName(self, inVal:str) -> None:
        return self._intf.set_property(IAgVACustomFunctionScriptEngine._metadata, IAgVACustomFunctionScriptEngine._set_FileExtensionName_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{02AA62BC-AA81-400C-83A0-961729880708}", IAgVACustomFunctionScriptEngine)
agcls.AgTypeNameMap["IAgVACustomFunctionScriptEngine"] = IAgVACustomFunctionScriptEngine

class IAgVANumericalIntegrator(object):
    """The type of numerical integrator to be used by the propagator."""
    _num_methods = 0
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{5E802B1E-D8EF-4190-B238-7E0F4AFCA355}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : {  }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVANumericalIntegrator._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVANumericalIntegrator from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVANumericalIntegrator.__dict__ and type(IAgVANumericalIntegrator.__dict__[attrname]) == property:
            return IAgVANumericalIntegrator.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVANumericalIntegrator.")
    

agcls.AgClassCatalog.add_catalog_entry("{5E802B1E-D8EF-4190-B238-7E0F4AFCA355}", IAgVANumericalIntegrator)
agcls.AgTypeNameMap["IAgVANumericalIntegrator"] = IAgVANumericalIntegrator

class IAgVAPropagatorFunctionCollection(object):
    """The list of propagator functions - affecting forces that you want to model for orbit propagation."""
    _num_methods = 11
    _vtable_offset = IDispatch._vtable_offset + IDispatch._num_methods
    _metadata = {
        "uuid" : "{373180B3-D083-4CB1-ACC8-9D6C738F19E6}",
        "vtable_reference" : IDispatch._vtable_offset + IDispatch._num_methods - 1,
        "method_offsets" : { "Add" : 1,
                             "Item" : 2,
                             "Remove" : 3,
                             "get__NewEnum" : 4,
                             "get_Count" : 5,
                             "RemoveAll" : 6,
                             "Cut" : 7,
                             "Paste" : 8,
                             "InsertCopy" : 9,
                             "GetItemByIndex" : 10,
                             "GetItemByName" : 11, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAPropagatorFunctionCollection._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAPropagatorFunctionCollection from source object.")
        self.__dict__["_enumerator"] = None
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAPropagatorFunctionCollection.__dict__ and type(IAgVAPropagatorFunctionCollection.__dict__[attrname]) == property:
            return IAgVAPropagatorFunctionCollection.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAPropagatorFunctionCollection.")
    def __iter__(self):
        self.__dict__["_enumerator"] = self._NewEnum
        self._enumerator.reset()
        return self
    def __next__(self) -> "IAgComponentInfo":
        if self._enumerator is None:
            raise StopIteration
        nextval = self._enumerator.next()
        if nextval is None:
            raise StopIteration
        return nextval
    
    _Add_metadata = { "name" : "Add",
            "arg_types" : (agcom.BSTR, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.AgInterface_out_arg,) }
    def Add(self, resultName:str) -> "IAgComponentInfo":
        """Adds a function to the collection."""
        return self._intf.invoke(IAgVAPropagatorFunctionCollection._metadata, IAgVAPropagatorFunctionCollection._Add_metadata, resultName, out_arg())

    _Item_metadata = { "name" : "Item",
            "arg_types" : (agcom.VARIANT, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.VARIANT_arg, agmarshall.AgInterface_out_arg,) }
    def Item(self, indexOrName:typing.Any) -> "IAgComponentInfo":
        """Allows you to iterate through the collection."""
        return self._intf.invoke(IAgVAPropagatorFunctionCollection._metadata, IAgVAPropagatorFunctionCollection._Item_metadata, indexOrName, out_arg())

    _Remove_metadata = { "name" : "Remove",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    def Remove(self, indexOrName:typing.Any) -> None:
        """Removes the specified function from the collection."""
        return self._intf.invoke(IAgVAPropagatorFunctionCollection._metadata, IAgVAPropagatorFunctionCollection._Remove_metadata, indexOrName)

    _get__NewEnum_metadata = { "name" : "_NewEnum",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.IEnumVARIANT_arg,) }
    @property
    def _NewEnum(self) -> enumerator_proxy:
        """Allows you to enumerate through the collection."""
        return self._intf.get_property(IAgVAPropagatorFunctionCollection._metadata, IAgVAPropagatorFunctionCollection._get__NewEnum_metadata)

    _get_Count_metadata = { "name" : "Count",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.LONG_arg,) }
    @property
    def Count(self) -> int:
        """Returns the size of the collection."""
        return self._intf.get_property(IAgVAPropagatorFunctionCollection._metadata, IAgVAPropagatorFunctionCollection._get_Count_metadata)

    _RemoveAll_metadata = { "name" : "RemoveAll",
            "arg_types" : (),
            "marshallers" : () }
    def RemoveAll(self) -> None:
        """Removes all functions from the collection."""
        return self._intf.invoke(IAgVAPropagatorFunctionCollection._metadata, IAgVAPropagatorFunctionCollection._RemoveAll_metadata, )

    _Cut_metadata = { "name" : "Cut",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    def Cut(self, indexOrName:typing.Any) -> None:
        """Copies a propagator function to the clipboard and removes the propagator function from the list."""
        return self._intf.invoke(IAgVAPropagatorFunctionCollection._metadata, IAgVAPropagatorFunctionCollection._Cut_metadata, indexOrName)

    _Paste_metadata = { "name" : "Paste",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    def Paste(self) -> "IAgComponentInfo":
        """Pastes a propagator function from the clipboard into the list."""
        return self._intf.invoke(IAgVAPropagatorFunctionCollection._metadata, IAgVAPropagatorFunctionCollection._Paste_metadata, out_arg())

    _InsertCopy_metadata = { "name" : "InsertCopy",
            "arg_types" : (agcom.PVOID, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_in_arg("IAgComponentInfo"), agmarshall.AgInterface_out_arg,) }
    def InsertCopy(self, propFunc:"IAgComponentInfo") -> "IAgComponentInfo":
        """Copies a propagator function and inserts the copy into the list."""
        return self._intf.invoke(IAgVAPropagatorFunctionCollection._metadata, IAgVAPropagatorFunctionCollection._InsertCopy_metadata, propFunc, out_arg())

    _GetItemByIndex_metadata = { "name" : "GetItemByIndex",
            "arg_types" : (agcom.INT, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.INT_arg, agmarshall.AgInterface_out_arg,) }
    def GetItemByIndex(self, index:int) -> "IAgComponentInfo":
        """Retrieves a propagator function from the collection by index."""
        return self._intf.invoke(IAgVAPropagatorFunctionCollection._metadata, IAgVAPropagatorFunctionCollection._GetItemByIndex_metadata, index, out_arg())

    _GetItemByName_metadata = { "name" : "GetItemByName",
            "arg_types" : (agcom.BSTR, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.AgInterface_out_arg,) }
    def GetItemByName(self, name:str) -> "IAgComponentInfo":
        """Retrieves a propagator function from the collection by name."""
        return self._intf.invoke(IAgVAPropagatorFunctionCollection._metadata, IAgVAPropagatorFunctionCollection._GetItemByName_metadata, name, out_arg())

    __getitem__ = Item



agcls.AgClassCatalog.add_catalog_entry("{373180B3-D083-4CB1-ACC8-9D6C738F19E6}", IAgVAPropagatorFunctionCollection)
agcls.AgTypeNameMap["IAgVAPropagatorFunctionCollection"] = IAgVAPropagatorFunctionCollection

class IAgVANumericalPropagatorWrapper(object):
    """General properties for propagators."""
    _num_methods = 14
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{5E7589D9-478E-4C8F-A856-2E548833C9C5}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_CentralBodyName" : 1,
                             "set_CentralBodyName" : 2,
                             "get_UseVariationOfParameters" : 3,
                             "set_UseVariationOfParameters" : 4,
                             "get_UseRegularizedTime" : 5,
                             "set_UseRegularizedTime" : 6,
                             "get_RegularizedTimeExponent" : 7,
                             "set_RegularizedTimeExponent" : 8,
                             "get_RegularizedTimeStepsPerOrbit" : 9,
                             "set_RegularizedTimeStepsPerOrbit" : 10,
                             "get_PropagatorFunctions" : 11,
                             "get_NumericalIntegrator" : 12,
                             "get_NumericalIntegratorType" : 13,
                             "SetNumericalIntegrator" : 14, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVANumericalPropagatorWrapper._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVANumericalPropagatorWrapper from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVANumericalPropagatorWrapper.__dict__ and type(IAgVANumericalPropagatorWrapper.__dict__[attrname]) == property:
            return IAgVANumericalPropagatorWrapper.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVANumericalPropagatorWrapper.")
    
    _get_CentralBodyName_metadata = { "name" : "CentralBodyName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def CentralBodyName(self) -> str:
        """The central body for Propagation."""
        return self._intf.get_property(IAgVANumericalPropagatorWrapper._metadata, IAgVANumericalPropagatorWrapper._get_CentralBodyName_metadata)

    _set_CentralBodyName_metadata = { "name" : "CentralBodyName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @CentralBodyName.setter
    def CentralBodyName(self, inVal:str) -> None:
        return self._intf.set_property(IAgVANumericalPropagatorWrapper._metadata, IAgVANumericalPropagatorWrapper._set_CentralBodyName_metadata, inVal)

    _get_UseVariationOfParameters_metadata = { "name" : "UseVariationOfParameters",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def UseVariationOfParameters(self) -> bool:
        """Whether or not to use a variation of parameters(VOP) in universal variables formulation of the equations of motion; related to numerical integrator."""
        return self._intf.get_property(IAgVANumericalPropagatorWrapper._metadata, IAgVANumericalPropagatorWrapper._get_UseVariationOfParameters_metadata)

    _set_UseVariationOfParameters_metadata = { "name" : "UseVariationOfParameters",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @UseVariationOfParameters.setter
    def UseVariationOfParameters(self, inVal:bool) -> None:
        return self._intf.set_property(IAgVANumericalPropagatorWrapper._metadata, IAgVANumericalPropagatorWrapper._set_UseVariationOfParameters_metadata, inVal)

    _get_UseRegularizedTime_metadata = { "name" : "UseRegularizedTime",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def UseRegularizedTime(self) -> bool:
        """Whether or not to use regularized time; related to numerical integrator."""
        return self._intf.get_property(IAgVANumericalPropagatorWrapper._metadata, IAgVANumericalPropagatorWrapper._get_UseRegularizedTime_metadata)

    _set_UseRegularizedTime_metadata = { "name" : "UseRegularizedTime",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @UseRegularizedTime.setter
    def UseRegularizedTime(self, inVal:bool) -> None:
        return self._intf.set_property(IAgVANumericalPropagatorWrapper._metadata, IAgVANumericalPropagatorWrapper._set_UseRegularizedTime_metadata, inVal)

    _get_RegularizedTimeExponent_metadata = { "name" : "RegularizedTimeExponent",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def RegularizedTimeExponent(self) -> float:
        """The exponent to use in regularized time; related to numerical integrator. Dimensionless."""
        return self._intf.get_property(IAgVANumericalPropagatorWrapper._metadata, IAgVANumericalPropagatorWrapper._get_RegularizedTimeExponent_metadata)

    _set_RegularizedTimeExponent_metadata = { "name" : "RegularizedTimeExponent",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @RegularizedTimeExponent.setter
    def RegularizedTimeExponent(self, inVal:float) -> None:
        return self._intf.set_property(IAgVANumericalPropagatorWrapper._metadata, IAgVANumericalPropagatorWrapper._set_RegularizedTimeExponent_metadata, inVal)

    _get_RegularizedTimeStepsPerOrbit_metadata = { "name" : "RegularizedTimeStepsPerOrbit",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.LONG_arg,) }
    @property
    def RegularizedTimeStepsPerOrbit(self) -> int:
        """The steps per orbit used in regularized time; related to numerical integrator. Dimensionless."""
        return self._intf.get_property(IAgVANumericalPropagatorWrapper._metadata, IAgVANumericalPropagatorWrapper._get_RegularizedTimeStepsPerOrbit_metadata)

    _set_RegularizedTimeStepsPerOrbit_metadata = { "name" : "RegularizedTimeStepsPerOrbit",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.LONG_arg,) }
    @RegularizedTimeStepsPerOrbit.setter
    def RegularizedTimeStepsPerOrbit(self, inVal:int) -> None:
        return self._intf.set_property(IAgVANumericalPropagatorWrapper._metadata, IAgVANumericalPropagatorWrapper._set_RegularizedTimeStepsPerOrbit_metadata, inVal)

    _get_PropagatorFunctions_metadata = { "name" : "PropagatorFunctions",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def PropagatorFunctions(self) -> "IAgVAPropagatorFunctionCollection":
        """The list of propagator functions."""
        return self._intf.get_property(IAgVANumericalPropagatorWrapper._metadata, IAgVANumericalPropagatorWrapper._get_PropagatorFunctions_metadata)

    _get_NumericalIntegrator_metadata = { "name" : "NumericalIntegrator",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def NumericalIntegrator(self) -> "IAgVANumericalIntegrator":
        """The numerical integrator."""
        return self._intf.get_property(IAgVANumericalPropagatorWrapper._metadata, IAgVANumericalPropagatorWrapper._get_NumericalIntegrator_metadata)

    _get_NumericalIntegratorType_metadata = { "name" : "NumericalIntegratorType",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVANumericalIntegrator),) }
    @property
    def NumericalIntegratorType(self) -> "AgEVANumericalIntegrator":
        """The single step integrator type."""
        return self._intf.get_property(IAgVANumericalPropagatorWrapper._metadata, IAgVANumericalPropagatorWrapper._get_NumericalIntegratorType_metadata)

    _SetNumericalIntegrator_metadata = { "name" : "SetNumericalIntegrator",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVANumericalIntegrator),) }
    def SetNumericalIntegrator(self, integrator:"AgEVANumericalIntegrator") -> None:
        """Changes the single step integrator."""
        return self._intf.invoke(IAgVANumericalPropagatorWrapper._metadata, IAgVANumericalPropagatorWrapper._SetNumericalIntegrator_metadata, integrator)


agcls.AgClassCatalog.add_catalog_entry("{5E7589D9-478E-4C8F-A856-2E548833C9C5}", IAgVANumericalPropagatorWrapper)
agcls.AgTypeNameMap["IAgVANumericalPropagatorWrapper"] = IAgVANumericalPropagatorWrapper

class IAgVANumericalPropagatorWrapperCR3BP(object):
    """General properties for three-body problem propagators."""
    _num_methods = 6
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{C0662E79-7987-4363-B97D-2277A12A7B5B}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_CentralBodyName" : 1,
                             "set_CentralBodyName" : 2,
                             "get_PropagatorFunctions" : 3,
                             "get_NumericalIntegrator" : 4,
                             "get_NumericalIntegratorType" : 5,
                             "SetNumericalIntegrator" : 6, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVANumericalPropagatorWrapperCR3BP._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVANumericalPropagatorWrapperCR3BP from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVANumericalPropagatorWrapperCR3BP.__dict__ and type(IAgVANumericalPropagatorWrapperCR3BP.__dict__[attrname]) == property:
            return IAgVANumericalPropagatorWrapperCR3BP.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVANumericalPropagatorWrapperCR3BP.")
    
    _get_CentralBodyName_metadata = { "name" : "CentralBodyName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def CentralBodyName(self) -> str:
        """The central body for Propagation."""
        return self._intf.get_property(IAgVANumericalPropagatorWrapperCR3BP._metadata, IAgVANumericalPropagatorWrapperCR3BP._get_CentralBodyName_metadata)

    _set_CentralBodyName_metadata = { "name" : "CentralBodyName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @CentralBodyName.setter
    def CentralBodyName(self, inVal:str) -> None:
        return self._intf.set_property(IAgVANumericalPropagatorWrapperCR3BP._metadata, IAgVANumericalPropagatorWrapperCR3BP._set_CentralBodyName_metadata, inVal)

    _get_PropagatorFunctions_metadata = { "name" : "PropagatorFunctions",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def PropagatorFunctions(self) -> "IAgVAPropagatorFunctionCollection":
        """The list of propagator functions."""
        return self._intf.get_property(IAgVANumericalPropagatorWrapperCR3BP._metadata, IAgVANumericalPropagatorWrapperCR3BP._get_PropagatorFunctions_metadata)

    _get_NumericalIntegrator_metadata = { "name" : "NumericalIntegrator",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def NumericalIntegrator(self) -> "IAgVANumericalIntegrator":
        """The numerical integrator."""
        return self._intf.get_property(IAgVANumericalPropagatorWrapperCR3BP._metadata, IAgVANumericalPropagatorWrapperCR3BP._get_NumericalIntegrator_metadata)

    _get_NumericalIntegratorType_metadata = { "name" : "NumericalIntegratorType",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVANumericalIntegrator),) }
    @property
    def NumericalIntegratorType(self) -> "AgEVANumericalIntegrator":
        """The numerical integrator type."""
        return self._intf.get_property(IAgVANumericalPropagatorWrapperCR3BP._metadata, IAgVANumericalPropagatorWrapperCR3BP._get_NumericalIntegratorType_metadata)

    _SetNumericalIntegrator_metadata = { "name" : "SetNumericalIntegrator",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVANumericalIntegrator),) }
    def SetNumericalIntegrator(self, integrator:"AgEVANumericalIntegrator") -> None:
        """Changes the numerical integrator."""
        return self._intf.invoke(IAgVANumericalPropagatorWrapperCR3BP._metadata, IAgVANumericalPropagatorWrapperCR3BP._SetNumericalIntegrator_metadata, integrator)


agcls.AgClassCatalog.add_catalog_entry("{C0662E79-7987-4363-B97D-2277A12A7B5B}", IAgVANumericalPropagatorWrapperCR3BP)
agcls.AgTypeNameMap["IAgVANumericalPropagatorWrapperCR3BP"] = IAgVANumericalPropagatorWrapperCR3BP

class IAgVABulirschStoerIntegrator(object):
    """Properties for the Bulirsch-Stoer numerical integrator."""
    _num_methods = 24
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{2A307A62-0365-405B-B493-5F11810DF50C}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_InitialStep" : 1,
                             "set_InitialStep" : 2,
                             "get_UseFixedStep" : 3,
                             "set_UseFixedStep" : 4,
                             "get_UseMaxStep" : 5,
                             "set_UseMaxStep" : 6,
                             "get_UseMinStep" : 7,
                             "set_UseMinStep" : 8,
                             "get_MaxStep" : 9,
                             "set_MaxStep" : 10,
                             "get_MinStep" : 11,
                             "set_MinStep" : 12,
                             "get_MaxRelErr" : 13,
                             "set_MaxRelErr" : 14,
                             "get_MaxSequences" : 15,
                             "set_MaxSequences" : 16,
                             "get_MaxIterations" : 17,
                             "set_MaxIterations" : 18,
                             "get_Tolerance" : 19,
                             "set_Tolerance" : 20,
                             "get_FirstSafetyCoefficient" : 21,
                             "set_FirstSafetyCoefficient" : 22,
                             "get_SecondSafetyCoefficient" : 23,
                             "set_SecondSafetyCoefficient" : 24, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVABulirschStoerIntegrator._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVABulirschStoerIntegrator from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVABulirschStoerIntegrator.__dict__ and type(IAgVABulirschStoerIntegrator.__dict__[attrname]) == property:
            return IAgVABulirschStoerIntegrator.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVABulirschStoerIntegrator.")
    
    _get_InitialStep_metadata = { "name" : "InitialStep",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def InitialStep(self) -> float:
        """The initial step. Uses time dimension."""
        return self._intf.get_property(IAgVABulirschStoerIntegrator._metadata, IAgVABulirschStoerIntegrator._get_InitialStep_metadata)

    _set_InitialStep_metadata = { "name" : "InitialStep",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @InitialStep.setter
    def InitialStep(self, inVal:float) -> None:
        return self._intf.set_property(IAgVABulirschStoerIntegrator._metadata, IAgVABulirschStoerIntegrator._set_InitialStep_metadata, inVal)

    _get_UseFixedStep_metadata = { "name" : "UseFixedStep",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def UseFixedStep(self) -> bool:
        """True if running in fixed-step mode."""
        return self._intf.get_property(IAgVABulirschStoerIntegrator._metadata, IAgVABulirschStoerIntegrator._get_UseFixedStep_metadata)

    _set_UseFixedStep_metadata = { "name" : "UseFixedStep",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @UseFixedStep.setter
    def UseFixedStep(self, inVal:bool) -> None:
        return self._intf.set_property(IAgVABulirschStoerIntegrator._metadata, IAgVABulirschStoerIntegrator._set_UseFixedStep_metadata, inVal)

    _get_UseMaxStep_metadata = { "name" : "UseMaxStep",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def UseMaxStep(self) -> bool:
        """Whether or not to enforce the maximum step."""
        return self._intf.get_property(IAgVABulirschStoerIntegrator._metadata, IAgVABulirschStoerIntegrator._get_UseMaxStep_metadata)

    _set_UseMaxStep_metadata = { "name" : "UseMaxStep",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @UseMaxStep.setter
    def UseMaxStep(self, inVal:bool) -> None:
        return self._intf.set_property(IAgVABulirschStoerIntegrator._metadata, IAgVABulirschStoerIntegrator._set_UseMaxStep_metadata, inVal)

    _get_UseMinStep_metadata = { "name" : "UseMinStep",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def UseMinStep(self) -> bool:
        """Whether or not to enforce the minimum step."""
        return self._intf.get_property(IAgVABulirschStoerIntegrator._metadata, IAgVABulirschStoerIntegrator._get_UseMinStep_metadata)

    _set_UseMinStep_metadata = { "name" : "UseMinStep",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @UseMinStep.setter
    def UseMinStep(self, inVal:bool) -> None:
        return self._intf.set_property(IAgVABulirschStoerIntegrator._metadata, IAgVABulirschStoerIntegrator._set_UseMinStep_metadata, inVal)

    _get_MaxStep_metadata = { "name" : "MaxStep",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def MaxStep(self) -> float:
        """The maximum step size to allow (absolute value). Uses Time Dimension."""
        return self._intf.get_property(IAgVABulirschStoerIntegrator._metadata, IAgVABulirschStoerIntegrator._get_MaxStep_metadata)

    _set_MaxStep_metadata = { "name" : "MaxStep",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @MaxStep.setter
    def MaxStep(self, inVal:float) -> None:
        return self._intf.set_property(IAgVABulirschStoerIntegrator._metadata, IAgVABulirschStoerIntegrator._set_MaxStep_metadata, inVal)

    _get_MinStep_metadata = { "name" : "MinStep",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def MinStep(self) -> float:
        """The minimum step size to allow (absolute value). Uses Time Dimension."""
        return self._intf.get_property(IAgVABulirschStoerIntegrator._metadata, IAgVABulirschStoerIntegrator._get_MinStep_metadata)

    _set_MinStep_metadata = { "name" : "MinStep",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @MinStep.setter
    def MinStep(self, inVal:float) -> None:
        return self._intf.set_property(IAgVABulirschStoerIntegrator._metadata, IAgVABulirschStoerIntegrator._set_MinStep_metadata, inVal)

    _get_MaxRelErr_metadata = { "name" : "MaxRelErr",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def MaxRelErr(self) -> float:
        """The maximum relative error used to control step size. Dimensionless."""
        return self._intf.get_property(IAgVABulirschStoerIntegrator._metadata, IAgVABulirschStoerIntegrator._get_MaxRelErr_metadata)

    _set_MaxRelErr_metadata = { "name" : "MaxRelErr",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @MaxRelErr.setter
    def MaxRelErr(self, inVal:float) -> None:
        return self._intf.set_property(IAgVABulirschStoerIntegrator._metadata, IAgVABulirschStoerIntegrator._set_MaxRelErr_metadata, inVal)

    _get_MaxSequences_metadata = { "name" : "MaxSequences",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.LONG_arg,) }
    @property
    def MaxSequences(self) -> int:
        """The maximum number of sequences. Dimensionless."""
        return self._intf.get_property(IAgVABulirschStoerIntegrator._metadata, IAgVABulirschStoerIntegrator._get_MaxSequences_metadata)

    _set_MaxSequences_metadata = { "name" : "MaxSequences",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.LONG_arg,) }
    @MaxSequences.setter
    def MaxSequences(self, inVal:int) -> None:
        return self._intf.set_property(IAgVABulirschStoerIntegrator._metadata, IAgVABulirschStoerIntegrator._set_MaxSequences_metadata, inVal)

    _get_MaxIterations_metadata = { "name" : "MaxIterations",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.LONG_arg,) }
    @property
    def MaxIterations(self) -> int:
        """The maximum number of iterations. Dimensionless."""
        return self._intf.get_property(IAgVABulirschStoerIntegrator._metadata, IAgVABulirschStoerIntegrator._get_MaxIterations_metadata)

    _set_MaxIterations_metadata = { "name" : "MaxIterations",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.LONG_arg,) }
    @MaxIterations.setter
    def MaxIterations(self, inVal:int) -> None:
        return self._intf.set_property(IAgVABulirschStoerIntegrator._metadata, IAgVABulirschStoerIntegrator._set_MaxIterations_metadata, inVal)

    _get_Tolerance_metadata = { "name" : "Tolerance",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def Tolerance(self) -> float:
        """The error tolerance for step size control. Dimensionless."""
        return self._intf.get_property(IAgVABulirschStoerIntegrator._metadata, IAgVABulirschStoerIntegrator._get_Tolerance_metadata)

    _set_Tolerance_metadata = { "name" : "Tolerance",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @Tolerance.setter
    def Tolerance(self, inVal:float) -> None:
        return self._intf.set_property(IAgVABulirschStoerIntegrator._metadata, IAgVABulirschStoerIntegrator._set_Tolerance_metadata, inVal)

    _get_FirstSafetyCoefficient_metadata = { "name" : "FirstSafetyCoefficient",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def FirstSafetyCoefficient(self) -> float:
        """The first safety coefficient. Dimensionless."""
        return self._intf.get_property(IAgVABulirschStoerIntegrator._metadata, IAgVABulirschStoerIntegrator._get_FirstSafetyCoefficient_metadata)

    _set_FirstSafetyCoefficient_metadata = { "name" : "FirstSafetyCoefficient",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @FirstSafetyCoefficient.setter
    def FirstSafetyCoefficient(self, inVal:float) -> None:
        return self._intf.set_property(IAgVABulirschStoerIntegrator._metadata, IAgVABulirschStoerIntegrator._set_FirstSafetyCoefficient_metadata, inVal)

    _get_SecondSafetyCoefficient_metadata = { "name" : "SecondSafetyCoefficient",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def SecondSafetyCoefficient(self) -> float:
        """The second safety coefficient. Dimensionless."""
        return self._intf.get_property(IAgVABulirschStoerIntegrator._metadata, IAgVABulirschStoerIntegrator._get_SecondSafetyCoefficient_metadata)

    _set_SecondSafetyCoefficient_metadata = { "name" : "SecondSafetyCoefficient",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @SecondSafetyCoefficient.setter
    def SecondSafetyCoefficient(self, inVal:float) -> None:
        return self._intf.set_property(IAgVABulirschStoerIntegrator._metadata, IAgVABulirschStoerIntegrator._set_SecondSafetyCoefficient_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{2A307A62-0365-405B-B493-5F11810DF50C}", IAgVABulirschStoerIntegrator)
agcls.AgTypeNameMap["IAgVABulirschStoerIntegrator"] = IAgVABulirschStoerIntegrator

class IAgVAGaussJacksonIntegrator(object):
    """Properties for the Gauss-Jackson numerical integrator."""
    _num_methods = 11
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{C68E6FDF-DA4F-4FA6-A313-3CA4EF865E0C}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_InitialStep" : 1,
                             "set_InitialStep" : 2,
                             "get_MaxCorrectorRelErr" : 3,
                             "set_MaxCorrectorRelErr" : 4,
                             "get_CorrectorMode" : 5,
                             "set_CorrectorMode" : 6,
                             "get_MaxCorrectorIterations" : 7,
                             "set_MaxCorrectorIterations" : 8,
                             "get_SingleStepIntegrator" : 9,
                             "get_SingleStepIntegratorType" : 10,
                             "SetSingleStepIntegrator" : 11, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVAGaussJacksonIntegrator._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVAGaussJacksonIntegrator from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAGaussJacksonIntegrator.__dict__ and type(IAgVAGaussJacksonIntegrator.__dict__[attrname]) == property:
            return IAgVAGaussJacksonIntegrator.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAGaussJacksonIntegrator.")
    
    _get_InitialStep_metadata = { "name" : "InitialStep",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def InitialStep(self) -> float:
        """The initial step. Uses time dimension."""
        return self._intf.get_property(IAgVAGaussJacksonIntegrator._metadata, IAgVAGaussJacksonIntegrator._get_InitialStep_metadata)

    _set_InitialStep_metadata = { "name" : "InitialStep",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @InitialStep.setter
    def InitialStep(self, inVal:float) -> None:
        return self._intf.set_property(IAgVAGaussJacksonIntegrator._metadata, IAgVAGaussJacksonIntegrator._set_InitialStep_metadata, inVal)

    _get_MaxCorrectorRelErr_metadata = { "name" : "MaxCorrectorRelErr",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def MaxCorrectorRelErr(self) -> float:
        """The maximum relative error between corrector iterations. Dimensionless."""
        return self._intf.get_property(IAgVAGaussJacksonIntegrator._metadata, IAgVAGaussJacksonIntegrator._get_MaxCorrectorRelErr_metadata)

    _set_MaxCorrectorRelErr_metadata = { "name" : "MaxCorrectorRelErr",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @MaxCorrectorRelErr.setter
    def MaxCorrectorRelErr(self, inVal:float) -> None:
        return self._intf.set_property(IAgVAGaussJacksonIntegrator._metadata, IAgVAGaussJacksonIntegrator._set_MaxCorrectorRelErr_metadata, inVal)

    _get_CorrectorMode_metadata = { "name" : "CorrectorMode",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAPredictorCorrector),) }
    @property
    def CorrectorMode(self) -> "AgEVAPredictorCorrector":
        """The Predictor Corrector scheme."""
        return self._intf.get_property(IAgVAGaussJacksonIntegrator._metadata, IAgVAGaussJacksonIntegrator._get_CorrectorMode_metadata)

    _set_CorrectorMode_metadata = { "name" : "CorrectorMode",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAPredictorCorrector),) }
    @CorrectorMode.setter
    def CorrectorMode(self, inVal:"AgEVAPredictorCorrector") -> None:
        return self._intf.set_property(IAgVAGaussJacksonIntegrator._metadata, IAgVAGaussJacksonIntegrator._set_CorrectorMode_metadata, inVal)

    _get_MaxCorrectorIterations_metadata = { "name" : "MaxCorrectorIterations",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.LONG_arg,) }
    @property
    def MaxCorrectorIterations(self) -> int:
        """The maximum corrector iterations. Dimensionless."""
        return self._intf.get_property(IAgVAGaussJacksonIntegrator._metadata, IAgVAGaussJacksonIntegrator._get_MaxCorrectorIterations_metadata)

    _set_MaxCorrectorIterations_metadata = { "name" : "MaxCorrectorIterations",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.LONG_arg,) }
    @MaxCorrectorIterations.setter
    def MaxCorrectorIterations(self, inVal:int) -> None:
        return self._intf.set_property(IAgVAGaussJacksonIntegrator._metadata, IAgVAGaussJacksonIntegrator._set_MaxCorrectorIterations_metadata, inVal)

    _get_SingleStepIntegrator_metadata = { "name" : "SingleStepIntegrator",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def SingleStepIntegrator(self) -> "IAgVANumericalIntegrator":
        """The stopping integrator; a single-step integrator."""
        return self._intf.get_property(IAgVAGaussJacksonIntegrator._metadata, IAgVAGaussJacksonIntegrator._get_SingleStepIntegrator_metadata)

    _get_SingleStepIntegratorType_metadata = { "name" : "SingleStepIntegratorType",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVANumericalIntegrator),) }
    @property
    def SingleStepIntegratorType(self) -> "AgEVANumericalIntegrator":
        """The stopping integrator type."""
        return self._intf.get_property(IAgVAGaussJacksonIntegrator._metadata, IAgVAGaussJacksonIntegrator._get_SingleStepIntegratorType_metadata)

    _SetSingleStepIntegrator_metadata = { "name" : "SetSingleStepIntegrator",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVANumericalIntegrator),) }
    def SetSingleStepIntegrator(self, integrator:"AgEVANumericalIntegrator") -> None:
        """Changes the stopping integrator."""
        return self._intf.invoke(IAgVAGaussJacksonIntegrator._metadata, IAgVAGaussJacksonIntegrator._SetSingleStepIntegrator_metadata, integrator)


agcls.AgClassCatalog.add_catalog_entry("{C68E6FDF-DA4F-4FA6-A313-3CA4EF865E0C}", IAgVAGaussJacksonIntegrator)
agcls.AgTypeNameMap["IAgVAGaussJacksonIntegrator"] = IAgVAGaussJacksonIntegrator

class IAgVARK2nd3rd(object):
    """Properties for the RK2nd3rd numerical integrator."""
    _num_methods = 24
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{B45A629D-EAD2-45CB-9757-0AF4BBC0967A}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_InitialStep" : 1,
                             "set_InitialStep" : 2,
                             "get_UseFixedStep" : 3,
                             "set_UseFixedStep" : 4,
                             "get_UseMaxStep" : 5,
                             "set_UseMaxStep" : 6,
                             "get_UseMinStep" : 7,
                             "set_UseMinStep" : 8,
                             "get_MaxStep" : 9,
                             "set_MaxStep" : 10,
                             "get_MinStep" : 11,
                             "set_MinStep" : 12,
                             "get_MaxRelErr" : 13,
                             "set_MaxRelErr" : 14,
                             "get_MaxAbsErr" : 15,
                             "set_MaxAbsErr" : 16,
                             "get_HighSafetyCoefficient" : 17,
                             "set_HighSafetyCoefficient" : 18,
                             "get_LowSafetyCoefficient" : 19,
                             "set_LowSafetyCoefficient" : 20,
                             "get_ErrorControl" : 21,
                             "set_ErrorControl" : 22,
                             "get_MaxIterations" : 23,
                             "set_MaxIterations" : 24, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVARK2nd3rd._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVARK2nd3rd from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVARK2nd3rd.__dict__ and type(IAgVARK2nd3rd.__dict__[attrname]) == property:
            return IAgVARK2nd3rd.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVARK2nd3rd.")
    
    _get_InitialStep_metadata = { "name" : "InitialStep",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def InitialStep(self) -> float:
        """The initial step. Uses time dimension."""
        return self._intf.get_property(IAgVARK2nd3rd._metadata, IAgVARK2nd3rd._get_InitialStep_metadata)

    _set_InitialStep_metadata = { "name" : "InitialStep",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @InitialStep.setter
    def InitialStep(self, inVal:float) -> None:
        return self._intf.set_property(IAgVARK2nd3rd._metadata, IAgVARK2nd3rd._set_InitialStep_metadata, inVal)

    _get_UseFixedStep_metadata = { "name" : "UseFixedStep",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def UseFixedStep(self) -> bool:
        """True if running in fixed-step mode."""
        return self._intf.get_property(IAgVARK2nd3rd._metadata, IAgVARK2nd3rd._get_UseFixedStep_metadata)

    _set_UseFixedStep_metadata = { "name" : "UseFixedStep",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @UseFixedStep.setter
    def UseFixedStep(self, inVal:bool) -> None:
        return self._intf.set_property(IAgVARK2nd3rd._metadata, IAgVARK2nd3rd._set_UseFixedStep_metadata, inVal)

    _get_UseMaxStep_metadata = { "name" : "UseMaxStep",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def UseMaxStep(self) -> bool:
        """Whether or not to enforce the maximum step."""
        return self._intf.get_property(IAgVARK2nd3rd._metadata, IAgVARK2nd3rd._get_UseMaxStep_metadata)

    _set_UseMaxStep_metadata = { "name" : "UseMaxStep",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @UseMaxStep.setter
    def UseMaxStep(self, inVal:bool) -> None:
        return self._intf.set_property(IAgVARK2nd3rd._metadata, IAgVARK2nd3rd._set_UseMaxStep_metadata, inVal)

    _get_UseMinStep_metadata = { "name" : "UseMinStep",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def UseMinStep(self) -> bool:
        """Whether or not to enforce the minimum step."""
        return self._intf.get_property(IAgVARK2nd3rd._metadata, IAgVARK2nd3rd._get_UseMinStep_metadata)

    _set_UseMinStep_metadata = { "name" : "UseMinStep",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @UseMinStep.setter
    def UseMinStep(self, inVal:bool) -> None:
        return self._intf.set_property(IAgVARK2nd3rd._metadata, IAgVARK2nd3rd._set_UseMinStep_metadata, inVal)

    _get_MaxStep_metadata = { "name" : "MaxStep",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def MaxStep(self) -> float:
        """The maximum step size to allow (absolute value). Uses Time Dimension."""
        return self._intf.get_property(IAgVARK2nd3rd._metadata, IAgVARK2nd3rd._get_MaxStep_metadata)

    _set_MaxStep_metadata = { "name" : "MaxStep",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @MaxStep.setter
    def MaxStep(self, inVal:float) -> None:
        return self._intf.set_property(IAgVARK2nd3rd._metadata, IAgVARK2nd3rd._set_MaxStep_metadata, inVal)

    _get_MinStep_metadata = { "name" : "MinStep",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def MinStep(self) -> float:
        """The minimum step size to allow (absolute value). Uses Time Dimension."""
        return self._intf.get_property(IAgVARK2nd3rd._metadata, IAgVARK2nd3rd._get_MinStep_metadata)

    _set_MinStep_metadata = { "name" : "MinStep",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @MinStep.setter
    def MinStep(self, inVal:float) -> None:
        return self._intf.set_property(IAgVARK2nd3rd._metadata, IAgVARK2nd3rd._set_MinStep_metadata, inVal)

    _get_MaxRelErr_metadata = { "name" : "MaxRelErr",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def MaxRelErr(self) -> float:
        """The maximum relative error used to control step size. Dimensionless."""
        return self._intf.get_property(IAgVARK2nd3rd._metadata, IAgVARK2nd3rd._get_MaxRelErr_metadata)

    _set_MaxRelErr_metadata = { "name" : "MaxRelErr",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @MaxRelErr.setter
    def MaxRelErr(self, inVal:float) -> None:
        return self._intf.set_property(IAgVARK2nd3rd._metadata, IAgVARK2nd3rd._set_MaxRelErr_metadata, inVal)

    _get_MaxAbsErr_metadata = { "name" : "MaxAbsErr",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def MaxAbsErr(self) -> float:
        """The maximum absolute error; Also used if relative scale is too small. Dimensionless."""
        return self._intf.get_property(IAgVARK2nd3rd._metadata, IAgVARK2nd3rd._get_MaxAbsErr_metadata)

    _set_MaxAbsErr_metadata = { "name" : "MaxAbsErr",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @MaxAbsErr.setter
    def MaxAbsErr(self, inVal:float) -> None:
        return self._intf.set_property(IAgVARK2nd3rd._metadata, IAgVARK2nd3rd._set_MaxAbsErr_metadata, inVal)

    _get_HighSafetyCoefficient_metadata = { "name" : "HighSafetyCoefficient",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def HighSafetyCoefficient(self) -> float:
        """The 'safety' coefficient used to decrease step size if the error is too high. Dimensionless."""
        return self._intf.get_property(IAgVARK2nd3rd._metadata, IAgVARK2nd3rd._get_HighSafetyCoefficient_metadata)

    _set_HighSafetyCoefficient_metadata = { "name" : "HighSafetyCoefficient",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @HighSafetyCoefficient.setter
    def HighSafetyCoefficient(self, inVal:float) -> None:
        return self._intf.set_property(IAgVARK2nd3rd._metadata, IAgVARK2nd3rd._set_HighSafetyCoefficient_metadata, inVal)

    _get_LowSafetyCoefficient_metadata = { "name" : "LowSafetyCoefficient",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def LowSafetyCoefficient(self) -> float:
        """The 'safety' coefficient used to increase step size if the error is too low. Dimensionless."""
        return self._intf.get_property(IAgVARK2nd3rd._metadata, IAgVARK2nd3rd._get_LowSafetyCoefficient_metadata)

    _set_LowSafetyCoefficient_metadata = { "name" : "LowSafetyCoefficient",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @LowSafetyCoefficient.setter
    def LowSafetyCoefficient(self, inVal:float) -> None:
        return self._intf.set_property(IAgVARK2nd3rd._metadata, IAgVARK2nd3rd._set_LowSafetyCoefficient_metadata, inVal)

    _get_ErrorControl_metadata = { "name" : "ErrorControl",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAErrorControl),) }
    @property
    def ErrorControl(self) -> "AgEVAErrorControl":
        """The error control method."""
        return self._intf.get_property(IAgVARK2nd3rd._metadata, IAgVARK2nd3rd._get_ErrorControl_metadata)

    _set_ErrorControl_metadata = { "name" : "ErrorControl",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAErrorControl),) }
    @ErrorControl.setter
    def ErrorControl(self, inVal:"AgEVAErrorControl") -> None:
        return self._intf.set_property(IAgVARK2nd3rd._metadata, IAgVARK2nd3rd._set_ErrorControl_metadata, inVal)

    _get_MaxIterations_metadata = { "name" : "MaxIterations",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.LONG_arg,) }
    @property
    def MaxIterations(self) -> int:
        """The maximum iterations. Dimensionless."""
        return self._intf.get_property(IAgVARK2nd3rd._metadata, IAgVARK2nd3rd._get_MaxIterations_metadata)

    _set_MaxIterations_metadata = { "name" : "MaxIterations",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.LONG_arg,) }
    @MaxIterations.setter
    def MaxIterations(self, inVal:int) -> None:
        return self._intf.set_property(IAgVARK2nd3rd._metadata, IAgVARK2nd3rd._set_MaxIterations_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{B45A629D-EAD2-45CB-9757-0AF4BBC0967A}", IAgVARK2nd3rd)
agcls.AgTypeNameMap["IAgVARK2nd3rd"] = IAgVARK2nd3rd

class IAgVARK4th(object):
    """Properties for the RK4th numerical integrator."""
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{AC6ACE9D-D174-4A09-9E10-7EE104ED8E9C}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_InitialStep" : 1,
                             "set_InitialStep" : 2, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVARK4th._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVARK4th from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVARK4th.__dict__ and type(IAgVARK4th.__dict__[attrname]) == property:
            return IAgVARK4th.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVARK4th.")
    
    _get_InitialStep_metadata = { "name" : "InitialStep",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def InitialStep(self) -> float:
        """The initial step. Uses time dimension."""
        return self._intf.get_property(IAgVARK4th._metadata, IAgVARK4th._get_InitialStep_metadata)

    _set_InitialStep_metadata = { "name" : "InitialStep",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @InitialStep.setter
    def InitialStep(self, inVal:float) -> None:
        return self._intf.set_property(IAgVARK4th._metadata, IAgVARK4th._set_InitialStep_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{AC6ACE9D-D174-4A09-9E10-7EE104ED8E9C}", IAgVARK4th)
agcls.AgTypeNameMap["IAgVARK4th"] = IAgVARK4th

class IAgVARK4th5th(object):
    """Properties for the RK4th5th numerical integrator."""
    _num_methods = 24
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{F71F9E83-14BD-4BA3-BB99-AD7CDA3FCA40}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_InitialStep" : 1,
                             "set_InitialStep" : 2,
                             "get_UseFixedStep" : 3,
                             "set_UseFixedStep" : 4,
                             "get_UseMaxStep" : 5,
                             "set_UseMaxStep" : 6,
                             "get_UseMinStep" : 7,
                             "set_UseMinStep" : 8,
                             "get_MaxStep" : 9,
                             "set_MaxStep" : 10,
                             "get_MinStep" : 11,
                             "set_MinStep" : 12,
                             "get_MaxRelErr" : 13,
                             "set_MaxRelErr" : 14,
                             "get_MaxAbsErr" : 15,
                             "set_MaxAbsErr" : 16,
                             "get_HighSafetyCoefficient" : 17,
                             "set_HighSafetyCoefficient" : 18,
                             "get_LowSafetyCoefficient" : 19,
                             "set_LowSafetyCoefficient" : 20,
                             "get_ErrorControl" : 21,
                             "set_ErrorControl" : 22,
                             "get_MaxIterations" : 23,
                             "set_MaxIterations" : 24, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVARK4th5th._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVARK4th5th from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVARK4th5th.__dict__ and type(IAgVARK4th5th.__dict__[attrname]) == property:
            return IAgVARK4th5th.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVARK4th5th.")
    
    _get_InitialStep_metadata = { "name" : "InitialStep",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def InitialStep(self) -> float:
        """The initial step. Uses time dimension."""
        return self._intf.get_property(IAgVARK4th5th._metadata, IAgVARK4th5th._get_InitialStep_metadata)

    _set_InitialStep_metadata = { "name" : "InitialStep",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @InitialStep.setter
    def InitialStep(self, inVal:float) -> None:
        return self._intf.set_property(IAgVARK4th5th._metadata, IAgVARK4th5th._set_InitialStep_metadata, inVal)

    _get_UseFixedStep_metadata = { "name" : "UseFixedStep",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def UseFixedStep(self) -> bool:
        """True if running in fixed-step mode."""
        return self._intf.get_property(IAgVARK4th5th._metadata, IAgVARK4th5th._get_UseFixedStep_metadata)

    _set_UseFixedStep_metadata = { "name" : "UseFixedStep",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @UseFixedStep.setter
    def UseFixedStep(self, inVal:bool) -> None:
        return self._intf.set_property(IAgVARK4th5th._metadata, IAgVARK4th5th._set_UseFixedStep_metadata, inVal)

    _get_UseMaxStep_metadata = { "name" : "UseMaxStep",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def UseMaxStep(self) -> bool:
        """Whether or not to enforce the maximum step."""
        return self._intf.get_property(IAgVARK4th5th._metadata, IAgVARK4th5th._get_UseMaxStep_metadata)

    _set_UseMaxStep_metadata = { "name" : "UseMaxStep",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @UseMaxStep.setter
    def UseMaxStep(self, inVal:bool) -> None:
        return self._intf.set_property(IAgVARK4th5th._metadata, IAgVARK4th5th._set_UseMaxStep_metadata, inVal)

    _get_UseMinStep_metadata = { "name" : "UseMinStep",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def UseMinStep(self) -> bool:
        """Whether or not to enforce the minimum step."""
        return self._intf.get_property(IAgVARK4th5th._metadata, IAgVARK4th5th._get_UseMinStep_metadata)

    _set_UseMinStep_metadata = { "name" : "UseMinStep",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @UseMinStep.setter
    def UseMinStep(self, inVal:bool) -> None:
        return self._intf.set_property(IAgVARK4th5th._metadata, IAgVARK4th5th._set_UseMinStep_metadata, inVal)

    _get_MaxStep_metadata = { "name" : "MaxStep",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def MaxStep(self) -> float:
        """The maximum step size to allow (absolute value). Uses Time Dimension."""
        return self._intf.get_property(IAgVARK4th5th._metadata, IAgVARK4th5th._get_MaxStep_metadata)

    _set_MaxStep_metadata = { "name" : "MaxStep",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @MaxStep.setter
    def MaxStep(self, inVal:float) -> None:
        return self._intf.set_property(IAgVARK4th5th._metadata, IAgVARK4th5th._set_MaxStep_metadata, inVal)

    _get_MinStep_metadata = { "name" : "MinStep",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def MinStep(self) -> float:
        """The minimum step size to allow (absolute value). Uses Time Dimension."""
        return self._intf.get_property(IAgVARK4th5th._metadata, IAgVARK4th5th._get_MinStep_metadata)

    _set_MinStep_metadata = { "name" : "MinStep",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @MinStep.setter
    def MinStep(self, inVal:float) -> None:
        return self._intf.set_property(IAgVARK4th5th._metadata, IAgVARK4th5th._set_MinStep_metadata, inVal)

    _get_MaxRelErr_metadata = { "name" : "MaxRelErr",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def MaxRelErr(self) -> float:
        """The maximum relative error used to control step size. Dimensionless."""
        return self._intf.get_property(IAgVARK4th5th._metadata, IAgVARK4th5th._get_MaxRelErr_metadata)

    _set_MaxRelErr_metadata = { "name" : "MaxRelErr",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @MaxRelErr.setter
    def MaxRelErr(self, inVal:float) -> None:
        return self._intf.set_property(IAgVARK4th5th._metadata, IAgVARK4th5th._set_MaxRelErr_metadata, inVal)

    _get_MaxAbsErr_metadata = { "name" : "MaxAbsErr",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def MaxAbsErr(self) -> float:
        """The maximum absolute error; Also used if relative scale is too small. Dimensionless."""
        return self._intf.get_property(IAgVARK4th5th._metadata, IAgVARK4th5th._get_MaxAbsErr_metadata)

    _set_MaxAbsErr_metadata = { "name" : "MaxAbsErr",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @MaxAbsErr.setter
    def MaxAbsErr(self, inVal:float) -> None:
        return self._intf.set_property(IAgVARK4th5th._metadata, IAgVARK4th5th._set_MaxAbsErr_metadata, inVal)

    _get_HighSafetyCoefficient_metadata = { "name" : "HighSafetyCoefficient",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def HighSafetyCoefficient(self) -> float:
        """The 'safety' coefficient used to decrease step size if the error is too high. Dimensionless."""
        return self._intf.get_property(IAgVARK4th5th._metadata, IAgVARK4th5th._get_HighSafetyCoefficient_metadata)

    _set_HighSafetyCoefficient_metadata = { "name" : "HighSafetyCoefficient",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @HighSafetyCoefficient.setter
    def HighSafetyCoefficient(self, inVal:float) -> None:
        return self._intf.set_property(IAgVARK4th5th._metadata, IAgVARK4th5th._set_HighSafetyCoefficient_metadata, inVal)

    _get_LowSafetyCoefficient_metadata = { "name" : "LowSafetyCoefficient",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def LowSafetyCoefficient(self) -> float:
        """The 'safety' coefficient used to increase step size if the error is too low. Dimensionless."""
        return self._intf.get_property(IAgVARK4th5th._metadata, IAgVARK4th5th._get_LowSafetyCoefficient_metadata)

    _set_LowSafetyCoefficient_metadata = { "name" : "LowSafetyCoefficient",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @LowSafetyCoefficient.setter
    def LowSafetyCoefficient(self, inVal:float) -> None:
        return self._intf.set_property(IAgVARK4th5th._metadata, IAgVARK4th5th._set_LowSafetyCoefficient_metadata, inVal)

    _get_ErrorControl_metadata = { "name" : "ErrorControl",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAErrorControl),) }
    @property
    def ErrorControl(self) -> "AgEVAErrorControl":
        """The error control method."""
        return self._intf.get_property(IAgVARK4th5th._metadata, IAgVARK4th5th._get_ErrorControl_metadata)

    _set_ErrorControl_metadata = { "name" : "ErrorControl",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAErrorControl),) }
    @ErrorControl.setter
    def ErrorControl(self, inVal:"AgEVAErrorControl") -> None:
        return self._intf.set_property(IAgVARK4th5th._metadata, IAgVARK4th5th._set_ErrorControl_metadata, inVal)

    _get_MaxIterations_metadata = { "name" : "MaxIterations",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.LONG_arg,) }
    @property
    def MaxIterations(self) -> int:
        """The maximum iterations. Dimensionless."""
        return self._intf.get_property(IAgVARK4th5th._metadata, IAgVARK4th5th._get_MaxIterations_metadata)

    _set_MaxIterations_metadata = { "name" : "MaxIterations",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.LONG_arg,) }
    @MaxIterations.setter
    def MaxIterations(self, inVal:int) -> None:
        return self._intf.set_property(IAgVARK4th5th._metadata, IAgVARK4th5th._set_MaxIterations_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{F71F9E83-14BD-4BA3-BB99-AD7CDA3FCA40}", IAgVARK4th5th)
agcls.AgTypeNameMap["IAgVARK4th5th"] = IAgVARK4th5th

class IAgVARK4thAdapt(object):
    """Properties for the RK4thAdapt numerical integrator."""
    _num_methods = 24
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{2FD2C00D-0DB5-4933-99A1-759E7D0F6A85}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_InitialStep" : 1,
                             "set_InitialStep" : 2,
                             "get_UseFixedStep" : 3,
                             "set_UseFixedStep" : 4,
                             "get_UseMaxStep" : 5,
                             "set_UseMaxStep" : 6,
                             "get_UseMinStep" : 7,
                             "set_UseMinStep" : 8,
                             "get_MaxStep" : 9,
                             "set_MaxStep" : 10,
                             "get_MinStep" : 11,
                             "set_MinStep" : 12,
                             "get_MaxRelErr" : 13,
                             "set_MaxRelErr" : 14,
                             "get_MaxAbsErr" : 15,
                             "set_MaxAbsErr" : 16,
                             "get_HighSafetyCoefficient" : 17,
                             "set_HighSafetyCoefficient" : 18,
                             "get_LowSafetyCoefficient" : 19,
                             "set_LowSafetyCoefficient" : 20,
                             "get_ErrorControl" : 21,
                             "set_ErrorControl" : 22,
                             "get_MaxIterations" : 23,
                             "set_MaxIterations" : 24, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVARK4thAdapt._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVARK4thAdapt from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVARK4thAdapt.__dict__ and type(IAgVARK4thAdapt.__dict__[attrname]) == property:
            return IAgVARK4thAdapt.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVARK4thAdapt.")
    
    _get_InitialStep_metadata = { "name" : "InitialStep",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def InitialStep(self) -> float:
        """The initial step. Uses time dimension."""
        return self._intf.get_property(IAgVARK4thAdapt._metadata, IAgVARK4thAdapt._get_InitialStep_metadata)

    _set_InitialStep_metadata = { "name" : "InitialStep",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @InitialStep.setter
    def InitialStep(self, inVal:float) -> None:
        return self._intf.set_property(IAgVARK4thAdapt._metadata, IAgVARK4thAdapt._set_InitialStep_metadata, inVal)

    _get_UseFixedStep_metadata = { "name" : "UseFixedStep",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def UseFixedStep(self) -> bool:
        """True if running in fixed-step mode."""
        return self._intf.get_property(IAgVARK4thAdapt._metadata, IAgVARK4thAdapt._get_UseFixedStep_metadata)

    _set_UseFixedStep_metadata = { "name" : "UseFixedStep",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @UseFixedStep.setter
    def UseFixedStep(self, inVal:bool) -> None:
        return self._intf.set_property(IAgVARK4thAdapt._metadata, IAgVARK4thAdapt._set_UseFixedStep_metadata, inVal)

    _get_UseMaxStep_metadata = { "name" : "UseMaxStep",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def UseMaxStep(self) -> bool:
        """Whether or not to enforce the maximum step."""
        return self._intf.get_property(IAgVARK4thAdapt._metadata, IAgVARK4thAdapt._get_UseMaxStep_metadata)

    _set_UseMaxStep_metadata = { "name" : "UseMaxStep",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @UseMaxStep.setter
    def UseMaxStep(self, inVal:bool) -> None:
        return self._intf.set_property(IAgVARK4thAdapt._metadata, IAgVARK4thAdapt._set_UseMaxStep_metadata, inVal)

    _get_UseMinStep_metadata = { "name" : "UseMinStep",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def UseMinStep(self) -> bool:
        """Whether or not to enforce the minimum step."""
        return self._intf.get_property(IAgVARK4thAdapt._metadata, IAgVARK4thAdapt._get_UseMinStep_metadata)

    _set_UseMinStep_metadata = { "name" : "UseMinStep",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @UseMinStep.setter
    def UseMinStep(self, inVal:bool) -> None:
        return self._intf.set_property(IAgVARK4thAdapt._metadata, IAgVARK4thAdapt._set_UseMinStep_metadata, inVal)

    _get_MaxStep_metadata = { "name" : "MaxStep",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def MaxStep(self) -> float:
        """The maximum step size to allow (absolute value). Uses Time Dimension."""
        return self._intf.get_property(IAgVARK4thAdapt._metadata, IAgVARK4thAdapt._get_MaxStep_metadata)

    _set_MaxStep_metadata = { "name" : "MaxStep",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @MaxStep.setter
    def MaxStep(self, inVal:float) -> None:
        return self._intf.set_property(IAgVARK4thAdapt._metadata, IAgVARK4thAdapt._set_MaxStep_metadata, inVal)

    _get_MinStep_metadata = { "name" : "MinStep",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def MinStep(self) -> float:
        """The minimum step size to allow (absolute value). Uses Time Dimension."""
        return self._intf.get_property(IAgVARK4thAdapt._metadata, IAgVARK4thAdapt._get_MinStep_metadata)

    _set_MinStep_metadata = { "name" : "MinStep",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @MinStep.setter
    def MinStep(self, inVal:float) -> None:
        return self._intf.set_property(IAgVARK4thAdapt._metadata, IAgVARK4thAdapt._set_MinStep_metadata, inVal)

    _get_MaxRelErr_metadata = { "name" : "MaxRelErr",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def MaxRelErr(self) -> float:
        """The maximum relative error used to control step size. Dimensionless."""
        return self._intf.get_property(IAgVARK4thAdapt._metadata, IAgVARK4thAdapt._get_MaxRelErr_metadata)

    _set_MaxRelErr_metadata = { "name" : "MaxRelErr",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @MaxRelErr.setter
    def MaxRelErr(self, inVal:float) -> None:
        return self._intf.set_property(IAgVARK4thAdapt._metadata, IAgVARK4thAdapt._set_MaxRelErr_metadata, inVal)

    _get_MaxAbsErr_metadata = { "name" : "MaxAbsErr",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def MaxAbsErr(self) -> float:
        """The maximum absolute error; Also used if relative scale is too small. Dimensionless."""
        return self._intf.get_property(IAgVARK4thAdapt._metadata, IAgVARK4thAdapt._get_MaxAbsErr_metadata)

    _set_MaxAbsErr_metadata = { "name" : "MaxAbsErr",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @MaxAbsErr.setter
    def MaxAbsErr(self, inVal:float) -> None:
        return self._intf.set_property(IAgVARK4thAdapt._metadata, IAgVARK4thAdapt._set_MaxAbsErr_metadata, inVal)

    _get_HighSafetyCoefficient_metadata = { "name" : "HighSafetyCoefficient",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def HighSafetyCoefficient(self) -> float:
        """The 'safety' coefficient used to decrease step size if the error is too high. Dimensionless."""
        return self._intf.get_property(IAgVARK4thAdapt._metadata, IAgVARK4thAdapt._get_HighSafetyCoefficient_metadata)

    _set_HighSafetyCoefficient_metadata = { "name" : "HighSafetyCoefficient",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @HighSafetyCoefficient.setter
    def HighSafetyCoefficient(self, inVal:float) -> None:
        return self._intf.set_property(IAgVARK4thAdapt._metadata, IAgVARK4thAdapt._set_HighSafetyCoefficient_metadata, inVal)

    _get_LowSafetyCoefficient_metadata = { "name" : "LowSafetyCoefficient",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def LowSafetyCoefficient(self) -> float:
        """The 'safety' coefficient used to increase step size if the error is too low. Dimensionless."""
        return self._intf.get_property(IAgVARK4thAdapt._metadata, IAgVARK4thAdapt._get_LowSafetyCoefficient_metadata)

    _set_LowSafetyCoefficient_metadata = { "name" : "LowSafetyCoefficient",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @LowSafetyCoefficient.setter
    def LowSafetyCoefficient(self, inVal:float) -> None:
        return self._intf.set_property(IAgVARK4thAdapt._metadata, IAgVARK4thAdapt._set_LowSafetyCoefficient_metadata, inVal)

    _get_ErrorControl_metadata = { "name" : "ErrorControl",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAErrorControl),) }
    @property
    def ErrorControl(self) -> "AgEVAErrorControl":
        """The error control method."""
        return self._intf.get_property(IAgVARK4thAdapt._metadata, IAgVARK4thAdapt._get_ErrorControl_metadata)

    _set_ErrorControl_metadata = { "name" : "ErrorControl",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAErrorControl),) }
    @ErrorControl.setter
    def ErrorControl(self, inVal:"AgEVAErrorControl") -> None:
        return self._intf.set_property(IAgVARK4thAdapt._metadata, IAgVARK4thAdapt._set_ErrorControl_metadata, inVal)

    _get_MaxIterations_metadata = { "name" : "MaxIterations",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.LONG_arg,) }
    @property
    def MaxIterations(self) -> int:
        """The maximum iterations. Dimensionless."""
        return self._intf.get_property(IAgVARK4thAdapt._metadata, IAgVARK4thAdapt._get_MaxIterations_metadata)

    _set_MaxIterations_metadata = { "name" : "MaxIterations",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.LONG_arg,) }
    @MaxIterations.setter
    def MaxIterations(self, inVal:int) -> None:
        return self._intf.set_property(IAgVARK4thAdapt._metadata, IAgVARK4thAdapt._set_MaxIterations_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{2FD2C00D-0DB5-4933-99A1-759E7D0F6A85}", IAgVARK4thAdapt)
agcls.AgTypeNameMap["IAgVARK4thAdapt"] = IAgVARK4thAdapt

class IAgVARKF7th8th(object):
    """Properties for the RK7th8th numerical integrator."""
    _num_methods = 24
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{05ADCD42-57F9-456E-B29A-AB3AADD9DB1C}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_InitialStep" : 1,
                             "set_InitialStep" : 2,
                             "get_UseFixedStep" : 3,
                             "set_UseFixedStep" : 4,
                             "get_UseMaxStep" : 5,
                             "set_UseMaxStep" : 6,
                             "get_UseMinStep" : 7,
                             "set_UseMinStep" : 8,
                             "get_MaxStep" : 9,
                             "set_MaxStep" : 10,
                             "get_MinStep" : 11,
                             "set_MinStep" : 12,
                             "get_MaxRelErr" : 13,
                             "set_MaxRelErr" : 14,
                             "get_MaxAbsErr" : 15,
                             "set_MaxAbsErr" : 16,
                             "get_HighSafetyCoefficient" : 17,
                             "set_HighSafetyCoefficient" : 18,
                             "get_LowSafetyCoefficient" : 19,
                             "set_LowSafetyCoefficient" : 20,
                             "get_ErrorControl" : 21,
                             "set_ErrorControl" : 22,
                             "get_MaxIterations" : 23,
                             "set_MaxIterations" : 24, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVARKF7th8th._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVARKF7th8th from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVARKF7th8th.__dict__ and type(IAgVARKF7th8th.__dict__[attrname]) == property:
            return IAgVARKF7th8th.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVARKF7th8th.")
    
    _get_InitialStep_metadata = { "name" : "InitialStep",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def InitialStep(self) -> float:
        """The initial step. Uses time dimension."""
        return self._intf.get_property(IAgVARKF7th8th._metadata, IAgVARKF7th8th._get_InitialStep_metadata)

    _set_InitialStep_metadata = { "name" : "InitialStep",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @InitialStep.setter
    def InitialStep(self, inVal:float) -> None:
        return self._intf.set_property(IAgVARKF7th8th._metadata, IAgVARKF7th8th._set_InitialStep_metadata, inVal)

    _get_UseFixedStep_metadata = { "name" : "UseFixedStep",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def UseFixedStep(self) -> bool:
        """True if running in fixed-step mode."""
        return self._intf.get_property(IAgVARKF7th8th._metadata, IAgVARKF7th8th._get_UseFixedStep_metadata)

    _set_UseFixedStep_metadata = { "name" : "UseFixedStep",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @UseFixedStep.setter
    def UseFixedStep(self, inVal:bool) -> None:
        return self._intf.set_property(IAgVARKF7th8th._metadata, IAgVARKF7th8th._set_UseFixedStep_metadata, inVal)

    _get_UseMaxStep_metadata = { "name" : "UseMaxStep",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def UseMaxStep(self) -> bool:
        """Whether or not to enforce the maximum step."""
        return self._intf.get_property(IAgVARKF7th8th._metadata, IAgVARKF7th8th._get_UseMaxStep_metadata)

    _set_UseMaxStep_metadata = { "name" : "UseMaxStep",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @UseMaxStep.setter
    def UseMaxStep(self, inVal:bool) -> None:
        return self._intf.set_property(IAgVARKF7th8th._metadata, IAgVARKF7th8th._set_UseMaxStep_metadata, inVal)

    _get_UseMinStep_metadata = { "name" : "UseMinStep",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def UseMinStep(self) -> bool:
        """Whether or not to enforce the minimum step."""
        return self._intf.get_property(IAgVARKF7th8th._metadata, IAgVARKF7th8th._get_UseMinStep_metadata)

    _set_UseMinStep_metadata = { "name" : "UseMinStep",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @UseMinStep.setter
    def UseMinStep(self, inVal:bool) -> None:
        return self._intf.set_property(IAgVARKF7th8th._metadata, IAgVARKF7th8th._set_UseMinStep_metadata, inVal)

    _get_MaxStep_metadata = { "name" : "MaxStep",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def MaxStep(self) -> float:
        """The maximum step size to allow (absolute value). Uses Time Dimension."""
        return self._intf.get_property(IAgVARKF7th8th._metadata, IAgVARKF7th8th._get_MaxStep_metadata)

    _set_MaxStep_metadata = { "name" : "MaxStep",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @MaxStep.setter
    def MaxStep(self, inVal:float) -> None:
        return self._intf.set_property(IAgVARKF7th8th._metadata, IAgVARKF7th8th._set_MaxStep_metadata, inVal)

    _get_MinStep_metadata = { "name" : "MinStep",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def MinStep(self) -> float:
        """The minimum step size to allow (absolute value). Uses Time Dimension."""
        return self._intf.get_property(IAgVARKF7th8th._metadata, IAgVARKF7th8th._get_MinStep_metadata)

    _set_MinStep_metadata = { "name" : "MinStep",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @MinStep.setter
    def MinStep(self, inVal:float) -> None:
        return self._intf.set_property(IAgVARKF7th8th._metadata, IAgVARKF7th8th._set_MinStep_metadata, inVal)

    _get_MaxRelErr_metadata = { "name" : "MaxRelErr",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def MaxRelErr(self) -> float:
        """The maximum relative error used to control step size. Dimensionless."""
        return self._intf.get_property(IAgVARKF7th8th._metadata, IAgVARKF7th8th._get_MaxRelErr_metadata)

    _set_MaxRelErr_metadata = { "name" : "MaxRelErr",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @MaxRelErr.setter
    def MaxRelErr(self, inVal:float) -> None:
        return self._intf.set_property(IAgVARKF7th8th._metadata, IAgVARKF7th8th._set_MaxRelErr_metadata, inVal)

    _get_MaxAbsErr_metadata = { "name" : "MaxAbsErr",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def MaxAbsErr(self) -> float:
        """The maximum absolute error; Also used if relative scale is too small. Dimensionless."""
        return self._intf.get_property(IAgVARKF7th8th._metadata, IAgVARKF7th8th._get_MaxAbsErr_metadata)

    _set_MaxAbsErr_metadata = { "name" : "MaxAbsErr",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @MaxAbsErr.setter
    def MaxAbsErr(self, inVal:float) -> None:
        return self._intf.set_property(IAgVARKF7th8th._metadata, IAgVARKF7th8th._set_MaxAbsErr_metadata, inVal)

    _get_HighSafetyCoefficient_metadata = { "name" : "HighSafetyCoefficient",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def HighSafetyCoefficient(self) -> float:
        """The 'safety' coefficient used to decrease step size if the error is too high. Dimensionless."""
        return self._intf.get_property(IAgVARKF7th8th._metadata, IAgVARKF7th8th._get_HighSafetyCoefficient_metadata)

    _set_HighSafetyCoefficient_metadata = { "name" : "HighSafetyCoefficient",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @HighSafetyCoefficient.setter
    def HighSafetyCoefficient(self, inVal:float) -> None:
        return self._intf.set_property(IAgVARKF7th8th._metadata, IAgVARKF7th8th._set_HighSafetyCoefficient_metadata, inVal)

    _get_LowSafetyCoefficient_metadata = { "name" : "LowSafetyCoefficient",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def LowSafetyCoefficient(self) -> float:
        """The 'safety' coefficient used to increase step size if the error is too low. Dimensionless."""
        return self._intf.get_property(IAgVARKF7th8th._metadata, IAgVARKF7th8th._get_LowSafetyCoefficient_metadata)

    _set_LowSafetyCoefficient_metadata = { "name" : "LowSafetyCoefficient",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @LowSafetyCoefficient.setter
    def LowSafetyCoefficient(self, inVal:float) -> None:
        return self._intf.set_property(IAgVARKF7th8th._metadata, IAgVARKF7th8th._set_LowSafetyCoefficient_metadata, inVal)

    _get_ErrorControl_metadata = { "name" : "ErrorControl",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAErrorControl),) }
    @property
    def ErrorControl(self) -> "AgEVAErrorControl":
        """The error control method."""
        return self._intf.get_property(IAgVARKF7th8th._metadata, IAgVARKF7th8th._get_ErrorControl_metadata)

    _set_ErrorControl_metadata = { "name" : "ErrorControl",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAErrorControl),) }
    @ErrorControl.setter
    def ErrorControl(self, inVal:"AgEVAErrorControl") -> None:
        return self._intf.set_property(IAgVARKF7th8th._metadata, IAgVARKF7th8th._set_ErrorControl_metadata, inVal)

    _get_MaxIterations_metadata = { "name" : "MaxIterations",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.LONG_arg,) }
    @property
    def MaxIterations(self) -> int:
        """The maximum iterations. Dimensionless."""
        return self._intf.get_property(IAgVARKF7th8th._metadata, IAgVARKF7th8th._get_MaxIterations_metadata)

    _set_MaxIterations_metadata = { "name" : "MaxIterations",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.LONG_arg,) }
    @MaxIterations.setter
    def MaxIterations(self, inVal:int) -> None:
        return self._intf.set_property(IAgVARKF7th8th._metadata, IAgVARKF7th8th._set_MaxIterations_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{05ADCD42-57F9-456E-B29A-AB3AADD9DB1C}", IAgVARKF7th8th)
agcls.AgTypeNameMap["IAgVARKF7th8th"] = IAgVARKF7th8th

class IAgVARKV8th9th(object):
    """Properties for the RK8th9th numerical integrator."""
    _num_methods = 26
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{E4CEAA67-BE78-472F-B746-52878835E818}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_InitialStep" : 1,
                             "set_InitialStep" : 2,
                             "get_UseFixedStep" : 3,
                             "set_UseFixedStep" : 4,
                             "get_UseMaxStep" : 5,
                             "set_UseMaxStep" : 6,
                             "get_UseMinStep" : 7,
                             "set_UseMinStep" : 8,
                             "get_MaxStep" : 9,
                             "set_MaxStep" : 10,
                             "get_MinStep" : 11,
                             "set_MinStep" : 12,
                             "get_MaxRelErr" : 13,
                             "set_MaxRelErr" : 14,
                             "get_MaxAbsErr" : 15,
                             "set_MaxAbsErr" : 16,
                             "get_HighSafetyCoefficient" : 17,
                             "set_HighSafetyCoefficient" : 18,
                             "get_LowSafetyCoefficient" : 19,
                             "set_LowSafetyCoefficient" : 20,
                             "get_ErrorControl" : 21,
                             "set_ErrorControl" : 22,
                             "get_MaxIterations" : 23,
                             "set_MaxIterations" : 24,
                             "get_CoeffType" : 25,
                             "set_CoeffType" : 26, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgVARKV8th9th._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgVARKV8th9th from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVARKV8th9th.__dict__ and type(IAgVARKV8th9th.__dict__[attrname]) == property:
            return IAgVARKV8th9th.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVARKV8th9th.")
    
    _get_InitialStep_metadata = { "name" : "InitialStep",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def InitialStep(self) -> float:
        """The initial step. Uses time dimension."""
        return self._intf.get_property(IAgVARKV8th9th._metadata, IAgVARKV8th9th._get_InitialStep_metadata)

    _set_InitialStep_metadata = { "name" : "InitialStep",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @InitialStep.setter
    def InitialStep(self, inVal:float) -> None:
        return self._intf.set_property(IAgVARKV8th9th._metadata, IAgVARKV8th9th._set_InitialStep_metadata, inVal)

    _get_UseFixedStep_metadata = { "name" : "UseFixedStep",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def UseFixedStep(self) -> bool:
        """True if running in fixed-step mode."""
        return self._intf.get_property(IAgVARKV8th9th._metadata, IAgVARKV8th9th._get_UseFixedStep_metadata)

    _set_UseFixedStep_metadata = { "name" : "UseFixedStep",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @UseFixedStep.setter
    def UseFixedStep(self, inVal:bool) -> None:
        return self._intf.set_property(IAgVARKV8th9th._metadata, IAgVARKV8th9th._set_UseFixedStep_metadata, inVal)

    _get_UseMaxStep_metadata = { "name" : "UseMaxStep",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def UseMaxStep(self) -> bool:
        """Whether or not to enforce the maximum step."""
        return self._intf.get_property(IAgVARKV8th9th._metadata, IAgVARKV8th9th._get_UseMaxStep_metadata)

    _set_UseMaxStep_metadata = { "name" : "UseMaxStep",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @UseMaxStep.setter
    def UseMaxStep(self, inVal:bool) -> None:
        return self._intf.set_property(IAgVARKV8th9th._metadata, IAgVARKV8th9th._set_UseMaxStep_metadata, inVal)

    _get_UseMinStep_metadata = { "name" : "UseMinStep",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def UseMinStep(self) -> bool:
        """Whether or not to enforce the minimum step."""
        return self._intf.get_property(IAgVARKV8th9th._metadata, IAgVARKV8th9th._get_UseMinStep_metadata)

    _set_UseMinStep_metadata = { "name" : "UseMinStep",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @UseMinStep.setter
    def UseMinStep(self, inVal:bool) -> None:
        return self._intf.set_property(IAgVARKV8th9th._metadata, IAgVARKV8th9th._set_UseMinStep_metadata, inVal)

    _get_MaxStep_metadata = { "name" : "MaxStep",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def MaxStep(self) -> float:
        """The maximum step size to allow (absolute value). Uses Time Dimension."""
        return self._intf.get_property(IAgVARKV8th9th._metadata, IAgVARKV8th9th._get_MaxStep_metadata)

    _set_MaxStep_metadata = { "name" : "MaxStep",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @MaxStep.setter
    def MaxStep(self, inVal:float) -> None:
        return self._intf.set_property(IAgVARKV8th9th._metadata, IAgVARKV8th9th._set_MaxStep_metadata, inVal)

    _get_MinStep_metadata = { "name" : "MinStep",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def MinStep(self) -> float:
        """The minimum step size to allow (absolute value). Uses Time Dimension."""
        return self._intf.get_property(IAgVARKV8th9th._metadata, IAgVARKV8th9th._get_MinStep_metadata)

    _set_MinStep_metadata = { "name" : "MinStep",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @MinStep.setter
    def MinStep(self, inVal:float) -> None:
        return self._intf.set_property(IAgVARKV8th9th._metadata, IAgVARKV8th9th._set_MinStep_metadata, inVal)

    _get_MaxRelErr_metadata = { "name" : "MaxRelErr",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def MaxRelErr(self) -> float:
        """The maximum relative error used to control step size. Dimensionless."""
        return self._intf.get_property(IAgVARKV8th9th._metadata, IAgVARKV8th9th._get_MaxRelErr_metadata)

    _set_MaxRelErr_metadata = { "name" : "MaxRelErr",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @MaxRelErr.setter
    def MaxRelErr(self, inVal:float) -> None:
        return self._intf.set_property(IAgVARKV8th9th._metadata, IAgVARKV8th9th._set_MaxRelErr_metadata, inVal)

    _get_MaxAbsErr_metadata = { "name" : "MaxAbsErr",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def MaxAbsErr(self) -> float:
        """The maximum absolute error; Also used if relative scale is too small. Dimensionless."""
        return self._intf.get_property(IAgVARKV8th9th._metadata, IAgVARKV8th9th._get_MaxAbsErr_metadata)

    _set_MaxAbsErr_metadata = { "name" : "MaxAbsErr",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @MaxAbsErr.setter
    def MaxAbsErr(self, inVal:float) -> None:
        return self._intf.set_property(IAgVARKV8th9th._metadata, IAgVARKV8th9th._set_MaxAbsErr_metadata, inVal)

    _get_HighSafetyCoefficient_metadata = { "name" : "HighSafetyCoefficient",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def HighSafetyCoefficient(self) -> float:
        """The 'safety' coefficient used to decrease step size if the error is too high. Dimensionless."""
        return self._intf.get_property(IAgVARKV8th9th._metadata, IAgVARKV8th9th._get_HighSafetyCoefficient_metadata)

    _set_HighSafetyCoefficient_metadata = { "name" : "HighSafetyCoefficient",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @HighSafetyCoefficient.setter
    def HighSafetyCoefficient(self, inVal:float) -> None:
        return self._intf.set_property(IAgVARKV8th9th._metadata, IAgVARKV8th9th._set_HighSafetyCoefficient_metadata, inVal)

    _get_LowSafetyCoefficient_metadata = { "name" : "LowSafetyCoefficient",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def LowSafetyCoefficient(self) -> float:
        """The 'safety' coefficient used to increase step size if the error is too low. Dimensionless."""
        return self._intf.get_property(IAgVARKV8th9th._metadata, IAgVARKV8th9th._get_LowSafetyCoefficient_metadata)

    _set_LowSafetyCoefficient_metadata = { "name" : "LowSafetyCoefficient",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @LowSafetyCoefficient.setter
    def LowSafetyCoefficient(self, inVal:float) -> None:
        return self._intf.set_property(IAgVARKV8th9th._metadata, IAgVARKV8th9th._set_LowSafetyCoefficient_metadata, inVal)

    _get_ErrorControl_metadata = { "name" : "ErrorControl",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAErrorControl),) }
    @property
    def ErrorControl(self) -> "AgEVAErrorControl":
        """The error control method."""
        return self._intf.get_property(IAgVARKV8th9th._metadata, IAgVARKV8th9th._get_ErrorControl_metadata)

    _set_ErrorControl_metadata = { "name" : "ErrorControl",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVAErrorControl),) }
    @ErrorControl.setter
    def ErrorControl(self, inVal:"AgEVAErrorControl") -> None:
        return self._intf.set_property(IAgVARKV8th9th._metadata, IAgVARKV8th9th._set_ErrorControl_metadata, inVal)

    _get_MaxIterations_metadata = { "name" : "MaxIterations",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.LONG_arg,) }
    @property
    def MaxIterations(self) -> int:
        """The maximum iterations. Dimensionless."""
        return self._intf.get_property(IAgVARKV8th9th._metadata, IAgVARKV8th9th._get_MaxIterations_metadata)

    _set_MaxIterations_metadata = { "name" : "MaxIterations",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.LONG_arg,) }
    @MaxIterations.setter
    def MaxIterations(self, inVal:int) -> None:
        return self._intf.set_property(IAgVARKV8th9th._metadata, IAgVARKV8th9th._set_MaxIterations_metadata, inVal)

    _get_CoeffType_metadata = { "name" : "CoeffType",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVACoeffRKV8th9th),) }
    @property
    def CoeffType(self) -> "AgEVACoeffRKV8th9th":
        """The set of coefficients to use."""
        return self._intf.get_property(IAgVARKV8th9th._metadata, IAgVARKV8th9th._get_CoeffType_metadata)

    _set_CoeffType_metadata = { "name" : "CoeffType",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEVACoeffRKV8th9th),) }
    @CoeffType.setter
    def CoeffType(self, inVal:"AgEVACoeffRKV8th9th") -> None:
        return self._intf.set_property(IAgVARKV8th9th._metadata, IAgVARKV8th9th._set_CoeffType_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{E4CEAA67-BE78-472F-B746-52878835E818}", IAgVARKV8th9th)
agcls.AgTypeNameMap["IAgVARKV8th9th"] = IAgVARKV8th9th



class AgVADriverMCS(IAgVADriverMCS, IAgVePropagator):
    """Basic properties of an Astrogator satellite."""
    def __init__(self, sourceObject=None):
        IAgVADriverMCS.__init__(self, sourceObject)
        IAgVePropagator.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVADriverMCS._private_init(self, intf)
        IAgVePropagator._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVADriverMCS._get_property(self, attrname) is not None: found_prop = IAgVADriverMCS._get_property(self, attrname)
        if IAgVePropagator._get_property(self, attrname) is not None: found_prop = IAgVePropagator._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVADriverMCS.")

agcls.AgClassCatalog.add_catalog_entry("{56D84C70-9D0D-4ACA-8CE5-C41E951E024C}", AgVADriverMCS)


class AgVAMCSSegmentCollection(IAgVAMCSSegmentCollection, IAgRuntimeTypeInfoProvider):
    """The Mission Control Sequence."""
    def __init__(self, sourceObject=None):
        IAgVAMCSSegmentCollection.__init__(self, sourceObject)
        IAgRuntimeTypeInfoProvider.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAMCSSegmentCollection._private_init(self, intf)
        IAgRuntimeTypeInfoProvider._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAMCSSegmentCollection._get_property(self, attrname) is not None: found_prop = IAgVAMCSSegmentCollection._get_property(self, attrname)
        if IAgRuntimeTypeInfoProvider._get_property(self, attrname) is not None: found_prop = IAgRuntimeTypeInfoProvider._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAMCSSegmentCollection.")

agcls.AgClassCatalog.add_catalog_entry("{B2F91182-1E74-4422-A660-6250A42732C3}", AgVAMCSSegmentCollection)


class AgVAMCSEnd(IAgVAMCSEnd, IAgVAMCSSegment, IAgRuntimeTypeInfoProvider, IAgComponentInfo):
    """The End segment."""
    def __init__(self, sourceObject=None):
        IAgVAMCSEnd.__init__(self, sourceObject)
        IAgVAMCSSegment.__init__(self, sourceObject)
        IAgRuntimeTypeInfoProvider.__init__(self, sourceObject)
        IAgComponentInfo.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAMCSEnd._private_init(self, intf)
        IAgVAMCSSegment._private_init(self, intf)
        IAgRuntimeTypeInfoProvider._private_init(self, intf)
        IAgComponentInfo._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAMCSEnd._get_property(self, attrname) is not None: found_prop = IAgVAMCSEnd._get_property(self, attrname)
        if IAgVAMCSSegment._get_property(self, attrname) is not None: found_prop = IAgVAMCSSegment._get_property(self, attrname)
        if IAgRuntimeTypeInfoProvider._get_property(self, attrname) is not None: found_prop = IAgRuntimeTypeInfoProvider._get_property(self, attrname)
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAMCSEnd.")

agcls.AgClassCatalog.add_catalog_entry("{048FE652-88E7-4000-B371-A2D708599F34}", AgVAMCSEnd)


class AgVAMCSInitialState(IAgVAMCSInitialState, IAgVAMCSSegment, IAgRuntimeTypeInfoProvider, IAgComponentInfo, IAgCloneable):
    """The Initial State segment."""
    def __init__(self, sourceObject=None):
        IAgVAMCSInitialState.__init__(self, sourceObject)
        IAgVAMCSSegment.__init__(self, sourceObject)
        IAgRuntimeTypeInfoProvider.__init__(self, sourceObject)
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAMCSInitialState._private_init(self, intf)
        IAgVAMCSSegment._private_init(self, intf)
        IAgRuntimeTypeInfoProvider._private_init(self, intf)
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAMCSInitialState._get_property(self, attrname) is not None: found_prop = IAgVAMCSInitialState._get_property(self, attrname)
        if IAgVAMCSSegment._get_property(self, attrname) is not None: found_prop = IAgVAMCSSegment._get_property(self, attrname)
        if IAgRuntimeTypeInfoProvider._get_property(self, attrname) is not None: found_prop = IAgRuntimeTypeInfoProvider._get_property(self, attrname)
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAMCSInitialState.")

agcls.AgClassCatalog.add_catalog_entry("{E3010ADE-CB96-470C-B380-3C58B23173AC}", AgVAMCSInitialState)


class AgVASpacecraftParameters(IAgVASpacecraftParameters, IAgRuntimeTypeInfoProvider):
    """Spacecraft parameters."""
    def __init__(self, sourceObject=None):
        IAgVASpacecraftParameters.__init__(self, sourceObject)
        IAgRuntimeTypeInfoProvider.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVASpacecraftParameters._private_init(self, intf)
        IAgRuntimeTypeInfoProvider._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVASpacecraftParameters._get_property(self, attrname) is not None: found_prop = IAgVASpacecraftParameters._get_property(self, attrname)
        if IAgRuntimeTypeInfoProvider._get_property(self, attrname) is not None: found_prop = IAgRuntimeTypeInfoProvider._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVASpacecraftParameters.")

agcls.AgClassCatalog.add_catalog_entry("{75F1E929-B0B9-4AE8-8C84-7273B9211771}", AgVASpacecraftParameters)


class AgVAFuelTank(IAgVAFuelTank, IAgRuntimeTypeInfoProvider):
    """Fuel Tank parameters."""
    def __init__(self, sourceObject=None):
        IAgVAFuelTank.__init__(self, sourceObject)
        IAgRuntimeTypeInfoProvider.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAFuelTank._private_init(self, intf)
        IAgRuntimeTypeInfoProvider._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAFuelTank._get_property(self, attrname) is not None: found_prop = IAgVAFuelTank._get_property(self, attrname)
        if IAgRuntimeTypeInfoProvider._get_property(self, attrname) is not None: found_prop = IAgRuntimeTypeInfoProvider._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAFuelTank.")

agcls.AgClassCatalog.add_catalog_entry("{03CC0FE4-A9E2-4F80-8AC8-C510F9691D3B}", AgVAFuelTank)


class AgVAElementCartesian(IAgVAElementCartesian, IAgVAElement, IAgRuntimeTypeInfoProvider):
    """Cartesian elements."""
    def __init__(self, sourceObject=None):
        IAgVAElementCartesian.__init__(self, sourceObject)
        IAgVAElement.__init__(self, sourceObject)
        IAgRuntimeTypeInfoProvider.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAElementCartesian._private_init(self, intf)
        IAgVAElement._private_init(self, intf)
        IAgRuntimeTypeInfoProvider._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAElementCartesian._get_property(self, attrname) is not None: found_prop = IAgVAElementCartesian._get_property(self, attrname)
        if IAgVAElement._get_property(self, attrname) is not None: found_prop = IAgVAElement._get_property(self, attrname)
        if IAgRuntimeTypeInfoProvider._get_property(self, attrname) is not None: found_prop = IAgRuntimeTypeInfoProvider._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAElementCartesian.")

agcls.AgClassCatalog.add_catalog_entry("{8C98158E-6B98-4C50-8500-7ABCE96A049E}", AgVAElementCartesian)


class AgVAElementKeplerian(IAgVAElementKeplerian, IAgVAElement):
    """Keplerian elements."""
    def __init__(self, sourceObject=None):
        IAgVAElementKeplerian.__init__(self, sourceObject)
        IAgVAElement.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAElementKeplerian._private_init(self, intf)
        IAgVAElement._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAElementKeplerian._get_property(self, attrname) is not None: found_prop = IAgVAElementKeplerian._get_property(self, attrname)
        if IAgVAElement._get_property(self, attrname) is not None: found_prop = IAgVAElement._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAElementKeplerian.")

agcls.AgClassCatalog.add_catalog_entry("{F34624C5-E351-4321-B16E-04DB098F9E29}", AgVAElementKeplerian)


class AgVAElementEquinoctial(IAgVAElementEquinoctial, IAgVAElement):
    """Equinoctial elements."""
    def __init__(self, sourceObject=None):
        IAgVAElementEquinoctial.__init__(self, sourceObject)
        IAgVAElement.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAElementEquinoctial._private_init(self, intf)
        IAgVAElement._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAElementEquinoctial._get_property(self, attrname) is not None: found_prop = IAgVAElementEquinoctial._get_property(self, attrname)
        if IAgVAElement._get_property(self, attrname) is not None: found_prop = IAgVAElement._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAElementEquinoctial.")

agcls.AgClassCatalog.add_catalog_entry("{5588137F-A05E-4011-A219-925F175F1447}", AgVAElementEquinoctial)


class AgVAElementDelaunay(IAgVAElementDelaunay, IAgVAElement):
    """Delaunay elements."""
    def __init__(self, sourceObject=None):
        IAgVAElementDelaunay.__init__(self, sourceObject)
        IAgVAElement.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAElementDelaunay._private_init(self, intf)
        IAgVAElement._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAElementDelaunay._get_property(self, attrname) is not None: found_prop = IAgVAElementDelaunay._get_property(self, attrname)
        if IAgVAElement._get_property(self, attrname) is not None: found_prop = IAgVAElement._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAElementDelaunay.")

agcls.AgClassCatalog.add_catalog_entry("{FDE891B2-2C91-48A8-B4C0-956BD55B8496}", AgVAElementDelaunay)


class AgVAElementMixedSpherical(IAgVAElementMixedSpherical, IAgVAElement):
    """Mixed Spherical elements."""
    def __init__(self, sourceObject=None):
        IAgVAElementMixedSpherical.__init__(self, sourceObject)
        IAgVAElement.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAElementMixedSpherical._private_init(self, intf)
        IAgVAElement._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAElementMixedSpherical._get_property(self, attrname) is not None: found_prop = IAgVAElementMixedSpherical._get_property(self, attrname)
        if IAgVAElement._get_property(self, attrname) is not None: found_prop = IAgVAElement._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAElementMixedSpherical.")

agcls.AgClassCatalog.add_catalog_entry("{C6E11D55-8708-4667-AC84-8FC413A32FF0}", AgVAElementMixedSpherical)


class AgVAElementSpherical(IAgVAElementSpherical, IAgVAElement):
    """Spherical elements."""
    def __init__(self, sourceObject=None):
        IAgVAElementSpherical.__init__(self, sourceObject)
        IAgVAElement.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAElementSpherical._private_init(self, intf)
        IAgVAElement._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAElementSpherical._get_property(self, attrname) is not None: found_prop = IAgVAElementSpherical._get_property(self, attrname)
        if IAgVAElement._get_property(self, attrname) is not None: found_prop = IAgVAElement._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAElementSpherical.")

agcls.AgClassCatalog.add_catalog_entry("{ECF59D66-A748-47DD-BD0E-C8FD0CD78D05}", AgVAElementSpherical)


class AgVAElementTargetVectorIncomingAsymptote(IAgVAElementTargetVectorIncomingAsymptote, IAgVAElement):
    """Target Vector Incoming Asymptote elements."""
    def __init__(self, sourceObject=None):
        IAgVAElementTargetVectorIncomingAsymptote.__init__(self, sourceObject)
        IAgVAElement.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAElementTargetVectorIncomingAsymptote._private_init(self, intf)
        IAgVAElement._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAElementTargetVectorIncomingAsymptote._get_property(self, attrname) is not None: found_prop = IAgVAElementTargetVectorIncomingAsymptote._get_property(self, attrname)
        if IAgVAElement._get_property(self, attrname) is not None: found_prop = IAgVAElement._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAElementTargetVectorIncomingAsymptote.")

agcls.AgClassCatalog.add_catalog_entry("{E05BEA68-902F-427F-9E65-A33FBE044A75}", AgVAElementTargetVectorIncomingAsymptote)


class AgVAElementTargetVectorOutgoingAsymptote(IAgVAElementTargetVectorOutgoingAsymptote, IAgVAElement):
    """Target Vector Outgoing Asymptote elements."""
    def __init__(self, sourceObject=None):
        IAgVAElementTargetVectorOutgoingAsymptote.__init__(self, sourceObject)
        IAgVAElement.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAElementTargetVectorOutgoingAsymptote._private_init(self, intf)
        IAgVAElement._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAElementTargetVectorOutgoingAsymptote._get_property(self, attrname) is not None: found_prop = IAgVAElementTargetVectorOutgoingAsymptote._get_property(self, attrname)
        if IAgVAElement._get_property(self, attrname) is not None: found_prop = IAgVAElement._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAElementTargetVectorOutgoingAsymptote.")

agcls.AgClassCatalog.add_catalog_entry("{95B24C8E-7781-4FA6-8A70-49443C5FFCF9}", AgVAElementTargetVectorOutgoingAsymptote)


class AgVAElementGeodetic(IAgVAElementGeodetic, IAgVAElement):
    """Geodetic elements."""
    def __init__(self, sourceObject=None):
        IAgVAElementGeodetic.__init__(self, sourceObject)
        IAgVAElement.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAElementGeodetic._private_init(self, intf)
        IAgVAElement._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAElementGeodetic._get_property(self, attrname) is not None: found_prop = IAgVAElementGeodetic._get_property(self, attrname)
        if IAgVAElement._get_property(self, attrname) is not None: found_prop = IAgVAElement._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAElementGeodetic.")

agcls.AgClassCatalog.add_catalog_entry("{6E74D006-FB3C-4085-810E-9B1E5AE73905}", AgVAElementGeodetic)


class AgVAElementBPlane(IAgVAElementBPlane, IAgVAElement):
    """Bplane elements."""
    def __init__(self, sourceObject=None):
        IAgVAElementBPlane.__init__(self, sourceObject)
        IAgVAElement.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAElementBPlane._private_init(self, intf)
        IAgVAElement._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAElementBPlane._get_property(self, attrname) is not None: found_prop = IAgVAElementBPlane._get_property(self, attrname)
        if IAgVAElement._get_property(self, attrname) is not None: found_prop = IAgVAElement._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAElementBPlane.")

agcls.AgClassCatalog.add_catalog_entry("{3F43BB61-B15A-479A-AE38-567C7FEE6A7B}", AgVAElementBPlane)


class AgVAMCSPropagate(IAgVAMCSSegment, IAgVAMCSPropagate, IAgComponentInfo, IAgCloneable, IAgRuntimeTypeInfoProvider):
    """The Propagate segment."""
    def __init__(self, sourceObject=None):
        IAgVAMCSSegment.__init__(self, sourceObject)
        IAgVAMCSPropagate.__init__(self, sourceObject)
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgRuntimeTypeInfoProvider.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAMCSSegment._private_init(self, intf)
        IAgVAMCSPropagate._private_init(self, intf)
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
        IAgRuntimeTypeInfoProvider._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAMCSSegment._get_property(self, attrname) is not None: found_prop = IAgVAMCSSegment._get_property(self, attrname)
        if IAgVAMCSPropagate._get_property(self, attrname) is not None: found_prop = IAgVAMCSPropagate._get_property(self, attrname)
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgRuntimeTypeInfoProvider._get_property(self, attrname) is not None: found_prop = IAgRuntimeTypeInfoProvider._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAMCSPropagate.")

agcls.AgClassCatalog.add_catalog_entry("{172B88CD-3CDC-4818-A03E-6538C4FD3B8D}", AgVAMCSPropagate)


class AgVAState(IAgVAState, IAgRuntimeTypeInfoProvider):
    """The orbit state."""
    def __init__(self, sourceObject=None):
        IAgVAState.__init__(self, sourceObject)
        IAgRuntimeTypeInfoProvider.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAState._private_init(self, intf)
        IAgRuntimeTypeInfoProvider._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAState._get_property(self, attrname) is not None: found_prop = IAgVAState._get_property(self, attrname)
        if IAgRuntimeTypeInfoProvider._get_property(self, attrname) is not None: found_prop = IAgRuntimeTypeInfoProvider._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAState.")

agcls.AgClassCatalog.add_catalog_entry("{D09183D5-B72C-428B-B586-CD67D09B7BC1}", AgVAState)


class AgVAStoppingConditionCollection(IAgVAStoppingConditionCollection, IAgRuntimeTypeInfoProvider):
    """The stopping conditions collection."""
    def __init__(self, sourceObject=None):
        IAgVAStoppingConditionCollection.__init__(self, sourceObject)
        IAgRuntimeTypeInfoProvider.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAStoppingConditionCollection._private_init(self, intf)
        IAgRuntimeTypeInfoProvider._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAStoppingConditionCollection._get_property(self, attrname) is not None: found_prop = IAgVAStoppingConditionCollection._get_property(self, attrname)
        if IAgRuntimeTypeInfoProvider._get_property(self, attrname) is not None: found_prop = IAgRuntimeTypeInfoProvider._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStoppingConditionCollection.")

agcls.AgClassCatalog.add_catalog_entry("{9301C787-450F-49B9-B5BD-E263F5DEF4AF}", AgVAStoppingConditionCollection)


class AgVAAccessStoppingCondition(IAgComponentInfo, IAgCloneable, IAgVAAccessStoppingCondition, IAgVAStoppingConditionComponent, IAgRuntimeTypeInfoProvider):
    """The Access stopping condition."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAAccessStoppingCondition.__init__(self, sourceObject)
        IAgVAStoppingConditionComponent.__init__(self, sourceObject)
        IAgRuntimeTypeInfoProvider.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
        IAgVAAccessStoppingCondition._private_init(self, intf)
        IAgVAStoppingConditionComponent._private_init(self, intf)
        IAgRuntimeTypeInfoProvider._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAAccessStoppingCondition._get_property(self, attrname) is not None: found_prop = IAgVAAccessStoppingCondition._get_property(self, attrname)
        if IAgVAStoppingConditionComponent._get_property(self, attrname) is not None: found_prop = IAgVAStoppingConditionComponent._get_property(self, attrname)
        if IAgRuntimeTypeInfoProvider._get_property(self, attrname) is not None: found_prop = IAgRuntimeTypeInfoProvider._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAAccessStoppingCondition.")

agcls.AgClassCatalog.add_catalog_entry("{7526A10E-68CF-42C7-A1B6-DC58E4C83F8B}", AgVAAccessStoppingCondition)


class AgVALightingStoppingCondition(IAgComponentInfo, IAgCloneable, IAgVALightingStoppingCondition, IAgVAStoppingConditionComponent, IAgRuntimeTypeInfoProvider):
    """The Lighting stopping condition."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVALightingStoppingCondition.__init__(self, sourceObject)
        IAgVAStoppingConditionComponent.__init__(self, sourceObject)
        IAgRuntimeTypeInfoProvider.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
        IAgVALightingStoppingCondition._private_init(self, intf)
        IAgVAStoppingConditionComponent._private_init(self, intf)
        IAgRuntimeTypeInfoProvider._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVALightingStoppingCondition._get_property(self, attrname) is not None: found_prop = IAgVALightingStoppingCondition._get_property(self, attrname)
        if IAgVAStoppingConditionComponent._get_property(self, attrname) is not None: found_prop = IAgVAStoppingConditionComponent._get_property(self, attrname)
        if IAgRuntimeTypeInfoProvider._get_property(self, attrname) is not None: found_prop = IAgRuntimeTypeInfoProvider._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVALightingStoppingCondition.")

agcls.AgClassCatalog.add_catalog_entry("{9AE4C815-0880-4912-A024-7A326AF7F9BB}", AgVALightingStoppingCondition)


class AgVAStoppingCondition(IAgVAStoppingCondition, IAgComponentInfo, IAgCloneable, IAgVAStoppingConditionComponent, IAgRuntimeTypeInfoProvider):
    """A stopping condition."""
    def __init__(self, sourceObject=None):
        IAgVAStoppingCondition.__init__(self, sourceObject)
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStoppingConditionComponent.__init__(self, sourceObject)
        IAgRuntimeTypeInfoProvider.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAStoppingCondition._private_init(self, intf)
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
        IAgVAStoppingConditionComponent._private_init(self, intf)
        IAgRuntimeTypeInfoProvider._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAStoppingCondition._get_property(self, attrname) is not None: found_prop = IAgVAStoppingCondition._get_property(self, attrname)
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStoppingConditionComponent._get_property(self, attrname) is not None: found_prop = IAgVAStoppingConditionComponent._get_property(self, attrname)
        if IAgRuntimeTypeInfoProvider._get_property(self, attrname) is not None: found_prop = IAgRuntimeTypeInfoProvider._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStoppingCondition.")

agcls.AgClassCatalog.add_catalog_entry("{87FDFED8-E83F-4963-92BD-4F151BE3E5CA}", AgVAStoppingCondition)


class AgVAStoppingConditionElement(IAgVAStoppingConditionElement, IAgComponentInfo, IAgRuntimeTypeInfoProvider):
    """A stopping condition."""
    def __init__(self, sourceObject=None):
        IAgVAStoppingConditionElement.__init__(self, sourceObject)
        IAgComponentInfo.__init__(self, sourceObject)
        IAgRuntimeTypeInfoProvider.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAStoppingConditionElement._private_init(self, intf)
        IAgComponentInfo._private_init(self, intf)
        IAgRuntimeTypeInfoProvider._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAStoppingConditionElement._get_property(self, attrname) is not None: found_prop = IAgVAStoppingConditionElement._get_property(self, attrname)
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgRuntimeTypeInfoProvider._get_property(self, attrname) is not None: found_prop = IAgRuntimeTypeInfoProvider._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStoppingConditionElement.")

agcls.AgClassCatalog.add_catalog_entry("{EBE02320-241C-462D-93F5-1BE2B72C8FB5}", AgVAStoppingConditionElement)


class AgVAMCSSequence(IAgVAMCSSegment, IAgRuntimeTypeInfoProvider, IAgVAMCSSequence, IAgComponentInfo, IAgCloneable):
    """The Sequence segment."""
    def __init__(self, sourceObject=None):
        IAgVAMCSSegment.__init__(self, sourceObject)
        IAgRuntimeTypeInfoProvider.__init__(self, sourceObject)
        IAgVAMCSSequence.__init__(self, sourceObject)
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAMCSSegment._private_init(self, intf)
        IAgRuntimeTypeInfoProvider._private_init(self, intf)
        IAgVAMCSSequence._private_init(self, intf)
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAMCSSegment._get_property(self, attrname) is not None: found_prop = IAgVAMCSSegment._get_property(self, attrname)
        if IAgRuntimeTypeInfoProvider._get_property(self, attrname) is not None: found_prop = IAgRuntimeTypeInfoProvider._get_property(self, attrname)
        if IAgVAMCSSequence._get_property(self, attrname) is not None: found_prop = IAgVAMCSSequence._get_property(self, attrname)
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAMCSSequence.")

agcls.AgClassCatalog.add_catalog_entry("{9D98B9CE-047C-419E-9A58-5939ECD853EF}", AgVAMCSSequence)


class AgVAMCSBackwardSequence(IAgVAMCSSegment, IAgRuntimeTypeInfoProvider, IAgVAMCSBackwardSequence, IAgVAMCSSequence, IAgComponentInfo, IAgCloneable):
    """The Backward Sequence segment."""
    def __init__(self, sourceObject=None):
        IAgVAMCSSegment.__init__(self, sourceObject)
        IAgRuntimeTypeInfoProvider.__init__(self, sourceObject)
        IAgVAMCSBackwardSequence.__init__(self, sourceObject)
        IAgVAMCSSequence.__init__(self, sourceObject)
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAMCSSegment._private_init(self, intf)
        IAgRuntimeTypeInfoProvider._private_init(self, intf)
        IAgVAMCSBackwardSequence._private_init(self, intf)
        IAgVAMCSSequence._private_init(self, intf)
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAMCSSegment._get_property(self, attrname) is not None: found_prop = IAgVAMCSSegment._get_property(self, attrname)
        if IAgRuntimeTypeInfoProvider._get_property(self, attrname) is not None: found_prop = IAgRuntimeTypeInfoProvider._get_property(self, attrname)
        if IAgVAMCSBackwardSequence._get_property(self, attrname) is not None: found_prop = IAgVAMCSBackwardSequence._get_property(self, attrname)
        if IAgVAMCSSequence._get_property(self, attrname) is not None: found_prop = IAgVAMCSSequence._get_property(self, attrname)
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAMCSBackwardSequence.")

agcls.AgClassCatalog.add_catalog_entry("{EDA33DE4-2AE3-4C19-87A4-2A3215ADB6FE}", AgVAMCSBackwardSequence)


class AgVAMCSLaunch(IAgVAMCSSegment, IAgRuntimeTypeInfoProvider, IAgVAMCSLaunch, IAgComponentInfo, IAgCloneable):
    """The Launch segment."""
    def __init__(self, sourceObject=None):
        IAgVAMCSSegment.__init__(self, sourceObject)
        IAgRuntimeTypeInfoProvider.__init__(self, sourceObject)
        IAgVAMCSLaunch.__init__(self, sourceObject)
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAMCSSegment._private_init(self, intf)
        IAgRuntimeTypeInfoProvider._private_init(self, intf)
        IAgVAMCSLaunch._private_init(self, intf)
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAMCSSegment._get_property(self, attrname) is not None: found_prop = IAgVAMCSSegment._get_property(self, attrname)
        if IAgRuntimeTypeInfoProvider._get_property(self, attrname) is not None: found_prop = IAgRuntimeTypeInfoProvider._get_property(self, attrname)
        if IAgVAMCSLaunch._get_property(self, attrname) is not None: found_prop = IAgVAMCSLaunch._get_property(self, attrname)
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAMCSLaunch.")

agcls.AgClassCatalog.add_catalog_entry("{1540C136-4AA5-449B-A845-A822E99422E2}", AgVAMCSLaunch)


class AgVADisplaySystemGeodetic(IAgVADisplaySystemGeodetic, IAgVADisplaySystem):
    """The geodetic launch location."""
    def __init__(self, sourceObject=None):
        IAgVADisplaySystemGeodetic.__init__(self, sourceObject)
        IAgVADisplaySystem.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVADisplaySystemGeodetic._private_init(self, intf)
        IAgVADisplaySystem._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVADisplaySystemGeodetic._get_property(self, attrname) is not None: found_prop = IAgVADisplaySystemGeodetic._get_property(self, attrname)
        if IAgVADisplaySystem._get_property(self, attrname) is not None: found_prop = IAgVADisplaySystem._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVADisplaySystemGeodetic.")

agcls.AgClassCatalog.add_catalog_entry("{792B26D7-7643-47F5-8BBD-B4FE0708F3AB}", AgVADisplaySystemGeodetic)


class AgVADisplaySystemGeocentric(IAgVADisplaySystemGeocentric, IAgVADisplaySystem):
    """The geocentric launch location."""
    def __init__(self, sourceObject=None):
        IAgVADisplaySystemGeocentric.__init__(self, sourceObject)
        IAgVADisplaySystem.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVADisplaySystemGeocentric._private_init(self, intf)
        IAgVADisplaySystem._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVADisplaySystemGeocentric._get_property(self, attrname) is not None: found_prop = IAgVADisplaySystemGeocentric._get_property(self, attrname)
        if IAgVADisplaySystem._get_property(self, attrname) is not None: found_prop = IAgVADisplaySystem._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVADisplaySystemGeocentric.")

agcls.AgClassCatalog.add_catalog_entry("{32F981ED-81EA-4C65-87DF-DC725A979056}", AgVADisplaySystemGeocentric)


class AgVABurnoutGeodetic(IAgVABurnoutGeodetic, IAgVABurnout):
    """The geodetic burnout point."""
    def __init__(self, sourceObject=None):
        IAgVABurnoutGeodetic.__init__(self, sourceObject)
        IAgVABurnout.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVABurnoutGeodetic._private_init(self, intf)
        IAgVABurnout._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVABurnoutGeodetic._get_property(self, attrname) is not None: found_prop = IAgVABurnoutGeodetic._get_property(self, attrname)
        if IAgVABurnout._get_property(self, attrname) is not None: found_prop = IAgVABurnout._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVABurnoutGeodetic.")

agcls.AgClassCatalog.add_catalog_entry("{011100E5-8DE0-4CE1-BC6D-F66B77814B78}", AgVABurnoutGeodetic)


class AgVABurnoutCBFCartesian(IAgVABurnoutCBFCartesian, IAgVABurnout):
    """The burnout state in CBF Cartesian coordinates."""
    def __init__(self, sourceObject=None):
        IAgVABurnoutCBFCartesian.__init__(self, sourceObject)
        IAgVABurnout.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVABurnoutCBFCartesian._private_init(self, intf)
        IAgVABurnout._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVABurnoutCBFCartesian._get_property(self, attrname) is not None: found_prop = IAgVABurnoutCBFCartesian._get_property(self, attrname)
        if IAgVABurnout._get_property(self, attrname) is not None: found_prop = IAgVABurnout._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVABurnoutCBFCartesian.")

agcls.AgClassCatalog.add_catalog_entry("{3EE3ED29-6154-49CA-93C4-8623E801B58F}", AgVABurnoutCBFCartesian)


class AgVABurnoutGeocentric(IAgVABurnoutGeocentric, IAgVABurnout):
    """The geocentric burnout point."""
    def __init__(self, sourceObject=None):
        IAgVABurnoutGeocentric.__init__(self, sourceObject)
        IAgVABurnout.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVABurnoutGeocentric._private_init(self, intf)
        IAgVABurnout._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVABurnoutGeocentric._get_property(self, attrname) is not None: found_prop = IAgVABurnoutGeocentric._get_property(self, attrname)
        if IAgVABurnout._get_property(self, attrname) is not None: found_prop = IAgVABurnout._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVABurnoutGeocentric.")

agcls.AgClassCatalog.add_catalog_entry("{B7BD1F63-9D91-4DA5-9099-D6BE607F2702}", AgVABurnoutGeocentric)


class AgVABurnoutLaunchAzAlt(IAgVABurnoutLaunchAzAlt, IAgVABurnout):
    """The launch azimuth and altitude burnout point."""
    def __init__(self, sourceObject=None):
        IAgVABurnoutLaunchAzAlt.__init__(self, sourceObject)
        IAgVABurnout.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVABurnoutLaunchAzAlt._private_init(self, intf)
        IAgVABurnout._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVABurnoutLaunchAzAlt._get_property(self, attrname) is not None: found_prop = IAgVABurnoutLaunchAzAlt._get_property(self, attrname)
        if IAgVABurnout._get_property(self, attrname) is not None: found_prop = IAgVABurnout._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVABurnoutLaunchAzAlt.")

agcls.AgClassCatalog.add_catalog_entry("{E5A780AE-0173-4FF8-AD0F-43886E1FAE85}", AgVABurnoutLaunchAzAlt)


class AgVABurnoutLaunchAzRadius(IAgVABurnoutLaunchAzRadius, IAgVABurnout):
    """The launch azimuth and radius burnout point."""
    def __init__(self, sourceObject=None):
        IAgVABurnoutLaunchAzRadius.__init__(self, sourceObject)
        IAgVABurnout.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVABurnoutLaunchAzRadius._private_init(self, intf)
        IAgVABurnout._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVABurnoutLaunchAzRadius._get_property(self, attrname) is not None: found_prop = IAgVABurnoutLaunchAzRadius._get_property(self, attrname)
        if IAgVABurnout._get_property(self, attrname) is not None: found_prop = IAgVABurnout._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVABurnoutLaunchAzRadius.")

agcls.AgClassCatalog.add_catalog_entry("{ABC361CE-B104-427C-BDDB-CF77EBDC9B8E}", AgVABurnoutLaunchAzRadius)


class AgVABurnoutVelocity(IAgVABurnoutVelocity):
    """The burnout velocity."""
    def __init__(self, sourceObject=None):
        IAgVABurnoutVelocity.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVABurnoutVelocity._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVABurnoutVelocity._get_property(self, attrname) is not None: found_prop = IAgVABurnoutVelocity._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVABurnoutVelocity.")

agcls.AgClassCatalog.add_catalog_entry("{DFD439A9-42BD-4A59-9681-A70BBC94E083}", AgVABurnoutVelocity)


class AgVAMCSFollow(IAgVAMCSSegment, IAgRuntimeTypeInfoProvider, IAgVAMCSFollow, IAgComponentInfo, IAgCloneable):
    """The Follow segment."""
    def __init__(self, sourceObject=None):
        IAgVAMCSSegment.__init__(self, sourceObject)
        IAgRuntimeTypeInfoProvider.__init__(self, sourceObject)
        IAgVAMCSFollow.__init__(self, sourceObject)
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAMCSSegment._private_init(self, intf)
        IAgRuntimeTypeInfoProvider._private_init(self, intf)
        IAgVAMCSFollow._private_init(self, intf)
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAMCSSegment._get_property(self, attrname) is not None: found_prop = IAgVAMCSSegment._get_property(self, attrname)
        if IAgRuntimeTypeInfoProvider._get_property(self, attrname) is not None: found_prop = IAgRuntimeTypeInfoProvider._get_property(self, attrname)
        if IAgVAMCSFollow._get_property(self, attrname) is not None: found_prop = IAgVAMCSFollow._get_property(self, attrname)
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAMCSFollow.")

agcls.AgClassCatalog.add_catalog_entry("{322FC7F6-FCDF-408B-A31C-F25A1F5456EB}", AgVAMCSFollow)


class AgVAMCSManeuver(IAgVAMCSSegment, IAgRuntimeTypeInfoProvider, IAgVAMCSManeuver, IAgComponentInfo, IAgCloneable):
    """The Maneuver segment."""
    def __init__(self, sourceObject=None):
        IAgVAMCSSegment.__init__(self, sourceObject)
        IAgRuntimeTypeInfoProvider.__init__(self, sourceObject)
        IAgVAMCSManeuver.__init__(self, sourceObject)
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAMCSSegment._private_init(self, intf)
        IAgRuntimeTypeInfoProvider._private_init(self, intf)
        IAgVAMCSManeuver._private_init(self, intf)
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAMCSSegment._get_property(self, attrname) is not None: found_prop = IAgVAMCSSegment._get_property(self, attrname)
        if IAgRuntimeTypeInfoProvider._get_property(self, attrname) is not None: found_prop = IAgRuntimeTypeInfoProvider._get_property(self, attrname)
        if IAgVAMCSManeuver._get_property(self, attrname) is not None: found_prop = IAgVAMCSManeuver._get_property(self, attrname)
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAMCSManeuver.")

agcls.AgClassCatalog.add_catalog_entry("{1EE05100-A5B8-4820-9C6D-F4AE0639E1EE}", AgVAMCSManeuver)


class AgVAManeuverFinite(IAgVAManeuverFinite, IAgVAManeuver, IAgRuntimeTypeInfoProvider):
    """The Finite Maneuver."""
    def __init__(self, sourceObject=None):
        IAgVAManeuverFinite.__init__(self, sourceObject)
        IAgVAManeuver.__init__(self, sourceObject)
        IAgRuntimeTypeInfoProvider.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAManeuverFinite._private_init(self, intf)
        IAgVAManeuver._private_init(self, intf)
        IAgRuntimeTypeInfoProvider._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAManeuverFinite._get_property(self, attrname) is not None: found_prop = IAgVAManeuverFinite._get_property(self, attrname)
        if IAgVAManeuver._get_property(self, attrname) is not None: found_prop = IAgVAManeuver._get_property(self, attrname)
        if IAgRuntimeTypeInfoProvider._get_property(self, attrname) is not None: found_prop = IAgRuntimeTypeInfoProvider._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAManeuverFinite.")

agcls.AgClassCatalog.add_catalog_entry("{22EAD08A-6355-48BA-96EC-5DD996A5D926}", AgVAManeuverFinite)


class AgVAManeuverImpulsive(IAgVAManeuverImpulsive, IAgVAManeuver, IAgRuntimeTypeInfoProvider):
    """The Impulsive Maneuver."""
    def __init__(self, sourceObject=None):
        IAgVAManeuverImpulsive.__init__(self, sourceObject)
        IAgVAManeuver.__init__(self, sourceObject)
        IAgRuntimeTypeInfoProvider.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAManeuverImpulsive._private_init(self, intf)
        IAgVAManeuver._private_init(self, intf)
        IAgRuntimeTypeInfoProvider._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAManeuverImpulsive._get_property(self, attrname) is not None: found_prop = IAgVAManeuverImpulsive._get_property(self, attrname)
        if IAgVAManeuver._get_property(self, attrname) is not None: found_prop = IAgVAManeuver._get_property(self, attrname)
        if IAgRuntimeTypeInfoProvider._get_property(self, attrname) is not None: found_prop = IAgRuntimeTypeInfoProvider._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAManeuverImpulsive.")

agcls.AgClassCatalog.add_catalog_entry("{E4DCF8C5-987F-4739-9592-E4C49B9A827E}", AgVAManeuverImpulsive)


class AgVAAttitudeControlImpulsiveVelocityVector(IAgVAAttitudeControlImpulsiveVelocityVector, IAgVAAttitudeControlImpulsive, IAgVAAttitudeControl, IAgRuntimeTypeInfoProvider):
    """The velocity vector attitude control for an impulsive maneuver."""
    def __init__(self, sourceObject=None):
        IAgVAAttitudeControlImpulsiveVelocityVector.__init__(self, sourceObject)
        IAgVAAttitudeControlImpulsive.__init__(self, sourceObject)
        IAgVAAttitudeControl.__init__(self, sourceObject)
        IAgRuntimeTypeInfoProvider.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAAttitudeControlImpulsiveVelocityVector._private_init(self, intf)
        IAgVAAttitudeControlImpulsive._private_init(self, intf)
        IAgVAAttitudeControl._private_init(self, intf)
        IAgRuntimeTypeInfoProvider._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAAttitudeControlImpulsiveVelocityVector._get_property(self, attrname) is not None: found_prop = IAgVAAttitudeControlImpulsiveVelocityVector._get_property(self, attrname)
        if IAgVAAttitudeControlImpulsive._get_property(self, attrname) is not None: found_prop = IAgVAAttitudeControlImpulsive._get_property(self, attrname)
        if IAgVAAttitudeControl._get_property(self, attrname) is not None: found_prop = IAgVAAttitudeControl._get_property(self, attrname)
        if IAgRuntimeTypeInfoProvider._get_property(self, attrname) is not None: found_prop = IAgRuntimeTypeInfoProvider._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAAttitudeControlImpulsiveVelocityVector.")

agcls.AgClassCatalog.add_catalog_entry("{C466E73A-E301-43C8-8402-700D0CE8DE41}", AgVAAttitudeControlImpulsiveVelocityVector)


class AgVAAttitudeControlImpulsiveAntiVelocityVector(IAgVAAttitudeControlImpulsiveAntiVelocityVector, IAgVAAttitudeControlImpulsive, IAgVAAttitudeControl, IAgRuntimeTypeInfoProvider):
    """The anti-velocity vector attitude control for an impulsive maneuver."""
    def __init__(self, sourceObject=None):
        IAgVAAttitudeControlImpulsiveAntiVelocityVector.__init__(self, sourceObject)
        IAgVAAttitudeControlImpulsive.__init__(self, sourceObject)
        IAgVAAttitudeControl.__init__(self, sourceObject)
        IAgRuntimeTypeInfoProvider.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAAttitudeControlImpulsiveAntiVelocityVector._private_init(self, intf)
        IAgVAAttitudeControlImpulsive._private_init(self, intf)
        IAgVAAttitudeControl._private_init(self, intf)
        IAgRuntimeTypeInfoProvider._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAAttitudeControlImpulsiveAntiVelocityVector._get_property(self, attrname) is not None: found_prop = IAgVAAttitudeControlImpulsiveAntiVelocityVector._get_property(self, attrname)
        if IAgVAAttitudeControlImpulsive._get_property(self, attrname) is not None: found_prop = IAgVAAttitudeControlImpulsive._get_property(self, attrname)
        if IAgVAAttitudeControl._get_property(self, attrname) is not None: found_prop = IAgVAAttitudeControl._get_property(self, attrname)
        if IAgRuntimeTypeInfoProvider._get_property(self, attrname) is not None: found_prop = IAgRuntimeTypeInfoProvider._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAAttitudeControlImpulsiveAntiVelocityVector.")

agcls.AgClassCatalog.add_catalog_entry("{B51D8BDC-E2A5-484C-8CB8-88E4D1BBC5A1}", AgVAAttitudeControlImpulsiveAntiVelocityVector)


class AgVAAttitudeControlImpulsiveAttitude(IAgVAAttitudeControlImpulsiveAttitude, IAgVAAttitudeControlImpulsive, IAgVAAttitudeControl, IAgRuntimeTypeInfoProvider):
    """The attitude attitude control for an impulsive maneuver."""
    def __init__(self, sourceObject=None):
        IAgVAAttitudeControlImpulsiveAttitude.__init__(self, sourceObject)
        IAgVAAttitudeControlImpulsive.__init__(self, sourceObject)
        IAgVAAttitudeControl.__init__(self, sourceObject)
        IAgRuntimeTypeInfoProvider.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAAttitudeControlImpulsiveAttitude._private_init(self, intf)
        IAgVAAttitudeControlImpulsive._private_init(self, intf)
        IAgVAAttitudeControl._private_init(self, intf)
        IAgRuntimeTypeInfoProvider._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAAttitudeControlImpulsiveAttitude._get_property(self, attrname) is not None: found_prop = IAgVAAttitudeControlImpulsiveAttitude._get_property(self, attrname)
        if IAgVAAttitudeControlImpulsive._get_property(self, attrname) is not None: found_prop = IAgVAAttitudeControlImpulsive._get_property(self, attrname)
        if IAgVAAttitudeControl._get_property(self, attrname) is not None: found_prop = IAgVAAttitudeControl._get_property(self, attrname)
        if IAgRuntimeTypeInfoProvider._get_property(self, attrname) is not None: found_prop = IAgRuntimeTypeInfoProvider._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAAttitudeControlImpulsiveAttitude.")

agcls.AgClassCatalog.add_catalog_entry("{8854FD36-7CEA-4FBC-B699-E47007BA7825}", AgVAAttitudeControlImpulsiveAttitude)


class AgVAAttitudeControlImpulsiveFile(IAgVAAttitudeControlImpulsiveFile, IAgVAAttitudeControlImpulsive, IAgVAAttitudeControl, IAgRuntimeTypeInfoProvider):
    """The file attitude control for an impulsive maneuver."""
    def __init__(self, sourceObject=None):
        IAgVAAttitudeControlImpulsiveFile.__init__(self, sourceObject)
        IAgVAAttitudeControlImpulsive.__init__(self, sourceObject)
        IAgVAAttitudeControl.__init__(self, sourceObject)
        IAgRuntimeTypeInfoProvider.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAAttitudeControlImpulsiveFile._private_init(self, intf)
        IAgVAAttitudeControlImpulsive._private_init(self, intf)
        IAgVAAttitudeControl._private_init(self, intf)
        IAgRuntimeTypeInfoProvider._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAAttitudeControlImpulsiveFile._get_property(self, attrname) is not None: found_prop = IAgVAAttitudeControlImpulsiveFile._get_property(self, attrname)
        if IAgVAAttitudeControlImpulsive._get_property(self, attrname) is not None: found_prop = IAgVAAttitudeControlImpulsive._get_property(self, attrname)
        if IAgVAAttitudeControl._get_property(self, attrname) is not None: found_prop = IAgVAAttitudeControl._get_property(self, attrname)
        if IAgRuntimeTypeInfoProvider._get_property(self, attrname) is not None: found_prop = IAgRuntimeTypeInfoProvider._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAAttitudeControlImpulsiveFile.")

agcls.AgClassCatalog.add_catalog_entry("{18E769AB-177B-4575-A9E0-BBB5BEEA78AE}", AgVAAttitudeControlImpulsiveFile)


class AgVAAttitudeControlImpulsiveThrustVector(IAgVAAttitudeControlImpulsiveThrustVector, IAgVAAttitudeControlImpulsive, IAgVAAttitudeControl, IAgRuntimeTypeInfoProvider):
    """The thrust vector attitude control for an impulsive maneuver."""
    def __init__(self, sourceObject=None):
        IAgVAAttitudeControlImpulsiveThrustVector.__init__(self, sourceObject)
        IAgVAAttitudeControlImpulsive.__init__(self, sourceObject)
        IAgVAAttitudeControl.__init__(self, sourceObject)
        IAgRuntimeTypeInfoProvider.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAAttitudeControlImpulsiveThrustVector._private_init(self, intf)
        IAgVAAttitudeControlImpulsive._private_init(self, intf)
        IAgVAAttitudeControl._private_init(self, intf)
        IAgRuntimeTypeInfoProvider._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAAttitudeControlImpulsiveThrustVector._get_property(self, attrname) is not None: found_prop = IAgVAAttitudeControlImpulsiveThrustVector._get_property(self, attrname)
        if IAgVAAttitudeControlImpulsive._get_property(self, attrname) is not None: found_prop = IAgVAAttitudeControlImpulsive._get_property(self, attrname)
        if IAgVAAttitudeControl._get_property(self, attrname) is not None: found_prop = IAgVAAttitudeControl._get_property(self, attrname)
        if IAgRuntimeTypeInfoProvider._get_property(self, attrname) is not None: found_prop = IAgRuntimeTypeInfoProvider._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAAttitudeControlImpulsiveThrustVector.")

agcls.AgClassCatalog.add_catalog_entry("{B17F3D0C-2021-4D60-80B7-1F55934FACAF}", AgVAAttitudeControlImpulsiveThrustVector)


class AgVAAttitudeControlFiniteAntiVelocityVector(IAgVAAttitudeControlFiniteAntiVelocityVector, IAgVAAttitudeControlFinite, IAgVAAttitudeControl, IAgRuntimeTypeInfoProvider):
    """The anti-velocity vector attitude control for a finite maneuver."""
    def __init__(self, sourceObject=None):
        IAgVAAttitudeControlFiniteAntiVelocityVector.__init__(self, sourceObject)
        IAgVAAttitudeControlFinite.__init__(self, sourceObject)
        IAgVAAttitudeControl.__init__(self, sourceObject)
        IAgRuntimeTypeInfoProvider.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAAttitudeControlFiniteAntiVelocityVector._private_init(self, intf)
        IAgVAAttitudeControlFinite._private_init(self, intf)
        IAgVAAttitudeControl._private_init(self, intf)
        IAgRuntimeTypeInfoProvider._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAAttitudeControlFiniteAntiVelocityVector._get_property(self, attrname) is not None: found_prop = IAgVAAttitudeControlFiniteAntiVelocityVector._get_property(self, attrname)
        if IAgVAAttitudeControlFinite._get_property(self, attrname) is not None: found_prop = IAgVAAttitudeControlFinite._get_property(self, attrname)
        if IAgVAAttitudeControl._get_property(self, attrname) is not None: found_prop = IAgVAAttitudeControl._get_property(self, attrname)
        if IAgRuntimeTypeInfoProvider._get_property(self, attrname) is not None: found_prop = IAgRuntimeTypeInfoProvider._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAAttitudeControlFiniteAntiVelocityVector.")

agcls.AgClassCatalog.add_catalog_entry("{2C11B410-A573-446A-9637-A472B987A987}", AgVAAttitudeControlFiniteAntiVelocityVector)


class AgVAAttitudeControlFiniteAttitude(IAgVAAttitudeControlFiniteAttitude, IAgVAAttitudeControlFinite, IAgVAAttitudeControl, IAgRuntimeTypeInfoProvider):
    """The attitude attitude control for a finite maneuver."""
    def __init__(self, sourceObject=None):
        IAgVAAttitudeControlFiniteAttitude.__init__(self, sourceObject)
        IAgVAAttitudeControlFinite.__init__(self, sourceObject)
        IAgVAAttitudeControl.__init__(self, sourceObject)
        IAgRuntimeTypeInfoProvider.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAAttitudeControlFiniteAttitude._private_init(self, intf)
        IAgVAAttitudeControlFinite._private_init(self, intf)
        IAgVAAttitudeControl._private_init(self, intf)
        IAgRuntimeTypeInfoProvider._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAAttitudeControlFiniteAttitude._get_property(self, attrname) is not None: found_prop = IAgVAAttitudeControlFiniteAttitude._get_property(self, attrname)
        if IAgVAAttitudeControlFinite._get_property(self, attrname) is not None: found_prop = IAgVAAttitudeControlFinite._get_property(self, attrname)
        if IAgVAAttitudeControl._get_property(self, attrname) is not None: found_prop = IAgVAAttitudeControl._get_property(self, attrname)
        if IAgRuntimeTypeInfoProvider._get_property(self, attrname) is not None: found_prop = IAgRuntimeTypeInfoProvider._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAAttitudeControlFiniteAttitude.")

agcls.AgClassCatalog.add_catalog_entry("{EA2C6994-7191-4CEF-9C8D-3BE0AA6BB756}", AgVAAttitudeControlFiniteAttitude)


class AgVAAttitudeControlFiniteFile(IAgVAAttitudeControlFiniteFile, IAgVAAttitudeControlFinite, IAgVAAttitudeControl, IAgRuntimeTypeInfoProvider):
    """The file attitude control for a finite maneuver."""
    def __init__(self, sourceObject=None):
        IAgVAAttitudeControlFiniteFile.__init__(self, sourceObject)
        IAgVAAttitudeControlFinite.__init__(self, sourceObject)
        IAgVAAttitudeControl.__init__(self, sourceObject)
        IAgRuntimeTypeInfoProvider.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAAttitudeControlFiniteFile._private_init(self, intf)
        IAgVAAttitudeControlFinite._private_init(self, intf)
        IAgVAAttitudeControl._private_init(self, intf)
        IAgRuntimeTypeInfoProvider._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAAttitudeControlFiniteFile._get_property(self, attrname) is not None: found_prop = IAgVAAttitudeControlFiniteFile._get_property(self, attrname)
        if IAgVAAttitudeControlFinite._get_property(self, attrname) is not None: found_prop = IAgVAAttitudeControlFinite._get_property(self, attrname)
        if IAgVAAttitudeControl._get_property(self, attrname) is not None: found_prop = IAgVAAttitudeControl._get_property(self, attrname)
        if IAgRuntimeTypeInfoProvider._get_property(self, attrname) is not None: found_prop = IAgRuntimeTypeInfoProvider._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAAttitudeControlFiniteFile.")

agcls.AgClassCatalog.add_catalog_entry("{7F2333DC-4E2B-499C-9F14-A4F1932F9C62}", AgVAAttitudeControlFiniteFile)


class AgVAAttitudeControlFiniteThrustVector(IAgVAAttitudeControlFiniteThrustVector, IAgVAAttitudeControlFinite, IAgVAAttitudeControl, IAgRuntimeTypeInfoProvider):
    """The thrust vector attitude control for a finite maneuver."""
    def __init__(self, sourceObject=None):
        IAgVAAttitudeControlFiniteThrustVector.__init__(self, sourceObject)
        IAgVAAttitudeControlFinite.__init__(self, sourceObject)
        IAgVAAttitudeControl.__init__(self, sourceObject)
        IAgRuntimeTypeInfoProvider.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAAttitudeControlFiniteThrustVector._private_init(self, intf)
        IAgVAAttitudeControlFinite._private_init(self, intf)
        IAgVAAttitudeControl._private_init(self, intf)
        IAgRuntimeTypeInfoProvider._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAAttitudeControlFiniteThrustVector._get_property(self, attrname) is not None: found_prop = IAgVAAttitudeControlFiniteThrustVector._get_property(self, attrname)
        if IAgVAAttitudeControlFinite._get_property(self, attrname) is not None: found_prop = IAgVAAttitudeControlFinite._get_property(self, attrname)
        if IAgVAAttitudeControl._get_property(self, attrname) is not None: found_prop = IAgVAAttitudeControl._get_property(self, attrname)
        if IAgRuntimeTypeInfoProvider._get_property(self, attrname) is not None: found_prop = IAgRuntimeTypeInfoProvider._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAAttitudeControlFiniteThrustVector.")

agcls.AgClassCatalog.add_catalog_entry("{9B31C16F-C862-498D-ADFB-5C4F50D45DF1}", AgVAAttitudeControlFiniteThrustVector)


class AgVAAttitudeControlFiniteTimeVarying(IAgVAAttitudeControlFiniteTimeVarying, IAgVAAttitudeControlFinite, IAgVAAttitudeControl, IAgRuntimeTypeInfoProvider):
    """The time varying attitude control for a finite maneuver."""
    def __init__(self, sourceObject=None):
        IAgVAAttitudeControlFiniteTimeVarying.__init__(self, sourceObject)
        IAgVAAttitudeControlFinite.__init__(self, sourceObject)
        IAgVAAttitudeControl.__init__(self, sourceObject)
        IAgRuntimeTypeInfoProvider.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAAttitudeControlFiniteTimeVarying._private_init(self, intf)
        IAgVAAttitudeControlFinite._private_init(self, intf)
        IAgVAAttitudeControl._private_init(self, intf)
        IAgRuntimeTypeInfoProvider._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAAttitudeControlFiniteTimeVarying._get_property(self, attrname) is not None: found_prop = IAgVAAttitudeControlFiniteTimeVarying._get_property(self, attrname)
        if IAgVAAttitudeControlFinite._get_property(self, attrname) is not None: found_prop = IAgVAAttitudeControlFinite._get_property(self, attrname)
        if IAgVAAttitudeControl._get_property(self, attrname) is not None: found_prop = IAgVAAttitudeControl._get_property(self, attrname)
        if IAgRuntimeTypeInfoProvider._get_property(self, attrname) is not None: found_prop = IAgRuntimeTypeInfoProvider._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAAttitudeControlFiniteTimeVarying.")

agcls.AgClassCatalog.add_catalog_entry("{F28DCCA6-0AFE-4142-BDB1-0957F1B3CB6F}", AgVAAttitudeControlFiniteTimeVarying)


class AgVAAttitudeControlFiniteVelocityVector(IAgVAAttitudeControlFiniteVelocityVector, IAgVAAttitudeControlFinite, IAgVAAttitudeControl, IAgRuntimeTypeInfoProvider):
    """The velocity vector attitude control for a finite maneuver."""
    def __init__(self, sourceObject=None):
        IAgVAAttitudeControlFiniteVelocityVector.__init__(self, sourceObject)
        IAgVAAttitudeControlFinite.__init__(self, sourceObject)
        IAgVAAttitudeControl.__init__(self, sourceObject)
        IAgRuntimeTypeInfoProvider.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAAttitudeControlFiniteVelocityVector._private_init(self, intf)
        IAgVAAttitudeControlFinite._private_init(self, intf)
        IAgVAAttitudeControl._private_init(self, intf)
        IAgRuntimeTypeInfoProvider._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAAttitudeControlFiniteVelocityVector._get_property(self, attrname) is not None: found_prop = IAgVAAttitudeControlFiniteVelocityVector._get_property(self, attrname)
        if IAgVAAttitudeControlFinite._get_property(self, attrname) is not None: found_prop = IAgVAAttitudeControlFinite._get_property(self, attrname)
        if IAgVAAttitudeControl._get_property(self, attrname) is not None: found_prop = IAgVAAttitudeControl._get_property(self, attrname)
        if IAgRuntimeTypeInfoProvider._get_property(self, attrname) is not None: found_prop = IAgRuntimeTypeInfoProvider._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAAttitudeControlFiniteVelocityVector.")

agcls.AgClassCatalog.add_catalog_entry("{90EE5B69-A270-4A1D-862F-C7A9A532F33F}", AgVAAttitudeControlFiniteVelocityVector)


class AgVAAttitudeControlFinitePlugin(IAgVAAttitudeControlFinitePlugin, IAgVAAttitudeControlFinite, IAgVAAttitudeControl, IAgRuntimeTypeInfoProvider):
    """The plugin attitude control for a finite maneuver."""
    def __init__(self, sourceObject=None):
        IAgVAAttitudeControlFinitePlugin.__init__(self, sourceObject)
        IAgVAAttitudeControlFinite.__init__(self, sourceObject)
        IAgVAAttitudeControl.__init__(self, sourceObject)
        IAgRuntimeTypeInfoProvider.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAAttitudeControlFinitePlugin._private_init(self, intf)
        IAgVAAttitudeControlFinite._private_init(self, intf)
        IAgVAAttitudeControl._private_init(self, intf)
        IAgRuntimeTypeInfoProvider._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAAttitudeControlFinitePlugin._get_property(self, attrname) is not None: found_prop = IAgVAAttitudeControlFinitePlugin._get_property(self, attrname)
        if IAgVAAttitudeControlFinite._get_property(self, attrname) is not None: found_prop = IAgVAAttitudeControlFinite._get_property(self, attrname)
        if IAgVAAttitudeControl._get_property(self, attrname) is not None: found_prop = IAgVAAttitudeControl._get_property(self, attrname)
        if IAgRuntimeTypeInfoProvider._get_property(self, attrname) is not None: found_prop = IAgRuntimeTypeInfoProvider._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAAttitudeControlFinitePlugin.")

agcls.AgClassCatalog.add_catalog_entry("{41C29436-C581-4FD2-BFFB-090FCDA9C090}", AgVAAttitudeControlFinitePlugin)


class AgVAAttitudeControlOptimalFiniteLagrange(IAgVAAttitudeControlOptimalFiniteLagrange, IAgVAAttitudeControlOptimalFinite, IAgVAAttitudeControl, IAgRuntimeTypeInfoProvider):
    """The Lagrange Interpolation attitude control for a optimal finite maneuver."""
    def __init__(self, sourceObject=None):
        IAgVAAttitudeControlOptimalFiniteLagrange.__init__(self, sourceObject)
        IAgVAAttitudeControlOptimalFinite.__init__(self, sourceObject)
        IAgVAAttitudeControl.__init__(self, sourceObject)
        IAgRuntimeTypeInfoProvider.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAAttitudeControlOptimalFiniteLagrange._private_init(self, intf)
        IAgVAAttitudeControlOptimalFinite._private_init(self, intf)
        IAgVAAttitudeControl._private_init(self, intf)
        IAgRuntimeTypeInfoProvider._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAAttitudeControlOptimalFiniteLagrange._get_property(self, attrname) is not None: found_prop = IAgVAAttitudeControlOptimalFiniteLagrange._get_property(self, attrname)
        if IAgVAAttitudeControlOptimalFinite._get_property(self, attrname) is not None: found_prop = IAgVAAttitudeControlOptimalFinite._get_property(self, attrname)
        if IAgVAAttitudeControl._get_property(self, attrname) is not None: found_prop = IAgVAAttitudeControl._get_property(self, attrname)
        if IAgRuntimeTypeInfoProvider._get_property(self, attrname) is not None: found_prop = IAgRuntimeTypeInfoProvider._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAAttitudeControlOptimalFiniteLagrange.")

agcls.AgClassCatalog.add_catalog_entry("{AE88E914-B911-41DB-9811-37CFBC7DAECC}", AgVAAttitudeControlOptimalFiniteLagrange)


class AgVAManeuverFinitePropagator(IAgVAManeuverFinitePropagator, IAgRuntimeTypeInfoProvider):
    """Propagation for a finite maneuver."""
    def __init__(self, sourceObject=None):
        IAgVAManeuverFinitePropagator.__init__(self, sourceObject)
        IAgRuntimeTypeInfoProvider.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAManeuverFinitePropagator._private_init(self, intf)
        IAgRuntimeTypeInfoProvider._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAManeuverFinitePropagator._get_property(self, attrname) is not None: found_prop = IAgVAManeuverFinitePropagator._get_property(self, attrname)
        if IAgRuntimeTypeInfoProvider._get_property(self, attrname) is not None: found_prop = IAgRuntimeTypeInfoProvider._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAManeuverFinitePropagator.")

agcls.AgClassCatalog.add_catalog_entry("{4F2C7CA9-D775-4CE0-8297-A8806F56F094}", AgVAManeuverFinitePropagator)


class AgVAMCSHold(IAgVAMCSSegment, IAgRuntimeTypeInfoProvider, IAgVAMCSHold, IAgComponentInfo, IAgCloneable):
    """The Hold segment."""
    def __init__(self, sourceObject=None):
        IAgVAMCSSegment.__init__(self, sourceObject)
        IAgRuntimeTypeInfoProvider.__init__(self, sourceObject)
        IAgVAMCSHold.__init__(self, sourceObject)
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAMCSSegment._private_init(self, intf)
        IAgRuntimeTypeInfoProvider._private_init(self, intf)
        IAgVAMCSHold._private_init(self, intf)
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAMCSSegment._get_property(self, attrname) is not None: found_prop = IAgVAMCSSegment._get_property(self, attrname)
        if IAgRuntimeTypeInfoProvider._get_property(self, attrname) is not None: found_prop = IAgRuntimeTypeInfoProvider._get_property(self, attrname)
        if IAgVAMCSHold._get_property(self, attrname) is not None: found_prop = IAgVAMCSHold._get_property(self, attrname)
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAMCSHold.")

agcls.AgClassCatalog.add_catalog_entry("{51159257-B7FD-45E5-AB02-7FEB20D924E5}", AgVAMCSHold)


class AgVAMCSUpdate(IAgVAMCSSegment, IAgRuntimeTypeInfoProvider, IAgVAMCSUpdate, IAgComponentInfo, IAgCloneable):
    """The Update segment."""
    def __init__(self, sourceObject=None):
        IAgVAMCSSegment.__init__(self, sourceObject)
        IAgRuntimeTypeInfoProvider.__init__(self, sourceObject)
        IAgVAMCSUpdate.__init__(self, sourceObject)
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAMCSSegment._private_init(self, intf)
        IAgRuntimeTypeInfoProvider._private_init(self, intf)
        IAgVAMCSUpdate._private_init(self, intf)
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAMCSSegment._get_property(self, attrname) is not None: found_prop = IAgVAMCSSegment._get_property(self, attrname)
        if IAgRuntimeTypeInfoProvider._get_property(self, attrname) is not None: found_prop = IAgRuntimeTypeInfoProvider._get_property(self, attrname)
        if IAgVAMCSUpdate._get_property(self, attrname) is not None: found_prop = IAgVAMCSUpdate._get_property(self, attrname)
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAMCSUpdate.")

agcls.AgClassCatalog.add_catalog_entry("{3A975A07-EB14-4231-B8E7-C977B091D8B0}", AgVAMCSUpdate)


class AgVAMCSReturn(IAgVAMCSSegment, IAgRuntimeTypeInfoProvider, IAgVAMCSReturn, IAgComponentInfo, IAgCloneable):
    """The Return segment."""
    def __init__(self, sourceObject=None):
        IAgVAMCSSegment.__init__(self, sourceObject)
        IAgRuntimeTypeInfoProvider.__init__(self, sourceObject)
        IAgVAMCSReturn.__init__(self, sourceObject)
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAMCSSegment._private_init(self, intf)
        IAgRuntimeTypeInfoProvider._private_init(self, intf)
        IAgVAMCSReturn._private_init(self, intf)
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAMCSSegment._get_property(self, attrname) is not None: found_prop = IAgVAMCSSegment._get_property(self, attrname)
        if IAgRuntimeTypeInfoProvider._get_property(self, attrname) is not None: found_prop = IAgRuntimeTypeInfoProvider._get_property(self, attrname)
        if IAgVAMCSReturn._get_property(self, attrname) is not None: found_prop = IAgVAMCSReturn._get_property(self, attrname)
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAMCSReturn.")

agcls.AgClassCatalog.add_catalog_entry("{0D4E769A-CBA7-4A17-89BA-F61B59F15D09}", AgVAMCSReturn)


class AgVAMCSStop(IAgVAMCSSegment, IAgRuntimeTypeInfoProvider, IAgVAMCSStop, IAgComponentInfo, IAgCloneable):
    """The Stop segment."""
    def __init__(self, sourceObject=None):
        IAgVAMCSSegment.__init__(self, sourceObject)
        IAgRuntimeTypeInfoProvider.__init__(self, sourceObject)
        IAgVAMCSStop.__init__(self, sourceObject)
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAMCSSegment._private_init(self, intf)
        IAgRuntimeTypeInfoProvider._private_init(self, intf)
        IAgVAMCSStop._private_init(self, intf)
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAMCSSegment._get_property(self, attrname) is not None: found_prop = IAgVAMCSSegment._get_property(self, attrname)
        if IAgRuntimeTypeInfoProvider._get_property(self, attrname) is not None: found_prop = IAgRuntimeTypeInfoProvider._get_property(self, attrname)
        if IAgVAMCSStop._get_property(self, attrname) is not None: found_prop = IAgVAMCSStop._get_property(self, attrname)
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAMCSStop.")

agcls.AgClassCatalog.add_catalog_entry("{59CF0A59-0E77-4D5F-BE88-E151D8899331}", AgVAMCSStop)


class AgVAMCSTargetSequence(IAgVAMCSSegment, IAgRuntimeTypeInfoProvider, IAgVAMCSTargetSequence, IAgComponentInfo, IAgCloneable):
    """The Target Sequence segment."""
    def __init__(self, sourceObject=None):
        IAgVAMCSSegment.__init__(self, sourceObject)
        IAgRuntimeTypeInfoProvider.__init__(self, sourceObject)
        IAgVAMCSTargetSequence.__init__(self, sourceObject)
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAMCSSegment._private_init(self, intf)
        IAgRuntimeTypeInfoProvider._private_init(self, intf)
        IAgVAMCSTargetSequence._private_init(self, intf)
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAMCSSegment._get_property(self, attrname) is not None: found_prop = IAgVAMCSSegment._get_property(self, attrname)
        if IAgRuntimeTypeInfoProvider._get_property(self, attrname) is not None: found_prop = IAgRuntimeTypeInfoProvider._get_property(self, attrname)
        if IAgVAMCSTargetSequence._get_property(self, attrname) is not None: found_prop = IAgVAMCSTargetSequence._get_property(self, attrname)
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAMCSTargetSequence.")

agcls.AgClassCatalog.add_catalog_entry("{DF528E2E-3CFD-4935-9A24-B9C9D8C0E727}", AgVAMCSTargetSequence)


class AgVAProfileCollection(IAgVAProfileCollection, IAgRuntimeTypeInfoProvider):
    """The Profiles of a Target Sequence."""
    def __init__(self, sourceObject=None):
        IAgVAProfileCollection.__init__(self, sourceObject)
        IAgRuntimeTypeInfoProvider.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAProfileCollection._private_init(self, intf)
        IAgRuntimeTypeInfoProvider._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAProfileCollection._get_property(self, attrname) is not None: found_prop = IAgVAProfileCollection._get_property(self, attrname)
        if IAgRuntimeTypeInfoProvider._get_property(self, attrname) is not None: found_prop = IAgRuntimeTypeInfoProvider._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAProfileCollection.")

agcls.AgClassCatalog.add_catalog_entry("{37B58077-200F-4763-8ED2-C4B5AFA97B2E}", AgVAProfileCollection)


class AgVAMCSOptions(IAgVAMCSOptions):
    """The MCS Options."""
    def __init__(self, sourceObject=None):
        IAgVAMCSOptions.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAMCSOptions._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAMCSOptions._get_property(self, attrname) is not None: found_prop = IAgVAMCSOptions._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAMCSOptions.")

agcls.AgClassCatalog.add_catalog_entry("{0A469F1B-225A-48E3-9B89-0EC63C95D705}", AgVAMCSOptions)


class AgVACalcObjectCollection(IAgVACalcObjectCollection):
    """The Calculation Object component folder."""
    def __init__(self, sourceObject=None):
        IAgVACalcObjectCollection.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVACalcObjectCollection._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVACalcObjectCollection._get_property(self, attrname) is not None: found_prop = IAgVACalcObjectCollection._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVACalcObjectCollection.")

agcls.AgClassCatalog.add_catalog_entry("{9C6165FC-8537-4B53-AC20-66F2C670A7A9}", AgVACalcObjectCollection)


class AgVAConstraintCollection(IAgVAConstraintCollection):
    """The Constraint component folder."""
    def __init__(self, sourceObject=None):
        IAgVAConstraintCollection.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAConstraintCollection._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAConstraintCollection._get_property(self, attrname) is not None: found_prop = IAgVAConstraintCollection._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAConstraintCollection.")

agcls.AgClassCatalog.add_catalog_entry("{D992E5D5-AE65-4041-B3A8-DF2244DE2068}", AgVAConstraintCollection)


class AgVAPluginProperties(IAgVAPluginProperties):
    """The plugin attitude control type."""
    def __init__(self, sourceObject=None):
        IAgVAPluginProperties.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAPluginProperties._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAPluginProperties._get_property(self, attrname) is not None: found_prop = IAgVAPluginProperties._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAPluginProperties.")

agcls.AgClassCatalog.add_catalog_entry("{A115E060-4BB8-430F-AB23-2BBE3C0C2087}", AgVAPluginProperties)


class AgVAProfileSearchPlugin(IAgVAProfileSearchPlugin, IAgVAProfile, IAgRuntimeTypeInfoProvider):
    """The plugin search profile."""
    def __init__(self, sourceObject=None):
        IAgVAProfileSearchPlugin.__init__(self, sourceObject)
        IAgVAProfile.__init__(self, sourceObject)
        IAgRuntimeTypeInfoProvider.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAProfileSearchPlugin._private_init(self, intf)
        IAgVAProfile._private_init(self, intf)
        IAgRuntimeTypeInfoProvider._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAProfileSearchPlugin._get_property(self, attrname) is not None: found_prop = IAgVAProfileSearchPlugin._get_property(self, attrname)
        if IAgVAProfile._get_property(self, attrname) is not None: found_prop = IAgVAProfile._get_property(self, attrname)
        if IAgRuntimeTypeInfoProvider._get_property(self, attrname) is not None: found_prop = IAgRuntimeTypeInfoProvider._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAProfileSearchPlugin.")

agcls.AgClassCatalog.add_catalog_entry("{25E94763-B5B1-4964-B563-9AEED96D9D54}", AgVAProfileSearchPlugin)


class AgVATargeterGraph(IAgVATargeterGraph, IAgRuntimeTypeInfoProvider):
    """Targeter Graph."""
    def __init__(self, sourceObject=None):
        IAgVATargeterGraph.__init__(self, sourceObject)
        IAgRuntimeTypeInfoProvider.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVATargeterGraph._private_init(self, intf)
        IAgRuntimeTypeInfoProvider._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVATargeterGraph._get_property(self, attrname) is not None: found_prop = IAgVATargeterGraph._get_property(self, attrname)
        if IAgRuntimeTypeInfoProvider._get_property(self, attrname) is not None: found_prop = IAgRuntimeTypeInfoProvider._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVATargeterGraph.")

agcls.AgClassCatalog.add_catalog_entry("{BF6E6956-1E2A-42E5-A56C-1BEF9EFB8A29}", AgVATargeterGraph)


class AgVATargeterGraphCollection(IAgVATargeterGraphCollection, IAgRuntimeTypeInfoProvider):
    """Targeter Graphs."""
    def __init__(self, sourceObject=None):
        IAgVATargeterGraphCollection.__init__(self, sourceObject)
        IAgRuntimeTypeInfoProvider.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVATargeterGraphCollection._private_init(self, intf)
        IAgRuntimeTypeInfoProvider._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVATargeterGraphCollection._get_property(self, attrname) is not None: found_prop = IAgVATargeterGraphCollection._get_property(self, attrname)
        if IAgRuntimeTypeInfoProvider._get_property(self, attrname) is not None: found_prop = IAgRuntimeTypeInfoProvider._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVATargeterGraphCollection.")

agcls.AgClassCatalog.add_catalog_entry("{322FC0D0-8F69-4F4B-9247-2558D6AFF63F}", AgVATargeterGraphCollection)


class AgVATargeterGraphResultCollection(IAgVATargeterGraphResultCollection, IAgRuntimeTypeInfoProvider):
    """Targeter Graph Result Collection."""
    def __init__(self, sourceObject=None):
        IAgVATargeterGraphResultCollection.__init__(self, sourceObject)
        IAgRuntimeTypeInfoProvider.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVATargeterGraphResultCollection._private_init(self, intf)
        IAgRuntimeTypeInfoProvider._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVATargeterGraphResultCollection._get_property(self, attrname) is not None: found_prop = IAgVATargeterGraphResultCollection._get_property(self, attrname)
        if IAgRuntimeTypeInfoProvider._get_property(self, attrname) is not None: found_prop = IAgRuntimeTypeInfoProvider._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVATargeterGraphResultCollection.")

agcls.AgClassCatalog.add_catalog_entry("{87090DB9-4866-40E4-BA58-BDF7C8EACCEB}", AgVATargeterGraphResultCollection)


class AgVATargeterGraphActiveControlCollection(IAgVATargeterGraphActiveControlCollection, IAgRuntimeTypeInfoProvider):
    """Targeter Graph Active Control Collection."""
    def __init__(self, sourceObject=None):
        IAgVATargeterGraphActiveControlCollection.__init__(self, sourceObject)
        IAgRuntimeTypeInfoProvider.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVATargeterGraphActiveControlCollection._private_init(self, intf)
        IAgRuntimeTypeInfoProvider._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVATargeterGraphActiveControlCollection._get_property(self, attrname) is not None: found_prop = IAgVATargeterGraphActiveControlCollection._get_property(self, attrname)
        if IAgRuntimeTypeInfoProvider._get_property(self, attrname) is not None: found_prop = IAgRuntimeTypeInfoProvider._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVATargeterGraphActiveControlCollection.")

agcls.AgClassCatalog.add_catalog_entry("{7FB70374-2313-463C-A69E-C5111C4BC1E4}", AgVATargeterGraphActiveControlCollection)


class AgVATargeterGraphActiveControl(IAgVATargeterGraphActiveControl, IAgRuntimeTypeInfoProvider):
    """Targeter Graph Active Control."""
    def __init__(self, sourceObject=None):
        IAgVATargeterGraphActiveControl.__init__(self, sourceObject)
        IAgRuntimeTypeInfoProvider.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVATargeterGraphActiveControl._private_init(self, intf)
        IAgRuntimeTypeInfoProvider._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVATargeterGraphActiveControl._get_property(self, attrname) is not None: found_prop = IAgVATargeterGraphActiveControl._get_property(self, attrname)
        if IAgRuntimeTypeInfoProvider._get_property(self, attrname) is not None: found_prop = IAgRuntimeTypeInfoProvider._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVATargeterGraphActiveControl.")

agcls.AgClassCatalog.add_catalog_entry("{E6457FA2-28BF-471B-9DCF-575B27BF588B}", AgVATargeterGraphActiveControl)


class AgVATargeterGraphResult(IAgVATargeterGraphResult, IAgRuntimeTypeInfoProvider):
    """Targeter Graph Result."""
    def __init__(self, sourceObject=None):
        IAgVATargeterGraphResult.__init__(self, sourceObject)
        IAgRuntimeTypeInfoProvider.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVATargeterGraphResult._private_init(self, intf)
        IAgRuntimeTypeInfoProvider._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVATargeterGraphResult._get_property(self, attrname) is not None: found_prop = IAgVATargeterGraphResult._get_property(self, attrname)
        if IAgRuntimeTypeInfoProvider._get_property(self, attrname) is not None: found_prop = IAgRuntimeTypeInfoProvider._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVATargeterGraphResult.")

agcls.AgClassCatalog.add_catalog_entry("{AB6CA723-1634-4A90-AD8C-4DB34D7A2925}", AgVATargeterGraphResult)


class AgVAProfileDifferentialCorrector(IAgVAProfileDifferentialCorrector, IAgVAProfile, IAgRuntimeTypeInfoProvider):
    """The Differential Corrector profile."""
    def __init__(self, sourceObject=None):
        IAgVAProfileDifferentialCorrector.__init__(self, sourceObject)
        IAgVAProfile.__init__(self, sourceObject)
        IAgRuntimeTypeInfoProvider.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAProfileDifferentialCorrector._private_init(self, intf)
        IAgVAProfile._private_init(self, intf)
        IAgRuntimeTypeInfoProvider._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAProfileDifferentialCorrector._get_property(self, attrname) is not None: found_prop = IAgVAProfileDifferentialCorrector._get_property(self, attrname)
        if IAgVAProfile._get_property(self, attrname) is not None: found_prop = IAgVAProfile._get_property(self, attrname)
        if IAgRuntimeTypeInfoProvider._get_property(self, attrname) is not None: found_prop = IAgRuntimeTypeInfoProvider._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAProfileDifferentialCorrector.")

agcls.AgClassCatalog.add_catalog_entry("{4446E46E-A169-4F12-AE14-562D35A6BC60}", AgVAProfileDifferentialCorrector)


class AgVAProfileScriptingTool(IAgVAProfileScriptingTool, IAgVAProfile, IAgRuntimeTypeInfoProvider):
    """The Scripting Tool profile."""
    def __init__(self, sourceObject=None):
        IAgVAProfileScriptingTool.__init__(self, sourceObject)
        IAgVAProfile.__init__(self, sourceObject)
        IAgRuntimeTypeInfoProvider.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAProfileScriptingTool._private_init(self, intf)
        IAgVAProfile._private_init(self, intf)
        IAgRuntimeTypeInfoProvider._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAProfileScriptingTool._get_property(self, attrname) is not None: found_prop = IAgVAProfileScriptingTool._get_property(self, attrname)
        if IAgVAProfile._get_property(self, attrname) is not None: found_prop = IAgVAProfile._get_property(self, attrname)
        if IAgRuntimeTypeInfoProvider._get_property(self, attrname) is not None: found_prop = IAgRuntimeTypeInfoProvider._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAProfileScriptingTool.")

agcls.AgClassCatalog.add_catalog_entry("{EC9D1E6F-4155-4685-AFE9-785DE109564A}", AgVAProfileScriptingTool)


class AgVADCControl(IAgVADCControl, IAgRuntimeTypeInfoProvider):
    """Control Parameters for a Target Sequence."""
    def __init__(self, sourceObject=None):
        IAgVADCControl.__init__(self, sourceObject)
        IAgRuntimeTypeInfoProvider.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVADCControl._private_init(self, intf)
        IAgRuntimeTypeInfoProvider._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVADCControl._get_property(self, attrname) is not None: found_prop = IAgVADCControl._get_property(self, attrname)
        if IAgRuntimeTypeInfoProvider._get_property(self, attrname) is not None: found_prop = IAgRuntimeTypeInfoProvider._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVADCControl.")

agcls.AgClassCatalog.add_catalog_entry("{5D59626C-A2D6-4D23-91C8-43D3764115C9}", AgVADCControl)


class AgVADCResult(IAgVADCResult, IAgRuntimeTypeInfoProvider):
    """Differential Corrector equality constraints."""
    def __init__(self, sourceObject=None):
        IAgVADCResult.__init__(self, sourceObject)
        IAgRuntimeTypeInfoProvider.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVADCResult._private_init(self, intf)
        IAgRuntimeTypeInfoProvider._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVADCResult._get_property(self, attrname) is not None: found_prop = IAgVADCResult._get_property(self, attrname)
        if IAgRuntimeTypeInfoProvider._get_property(self, attrname) is not None: found_prop = IAgRuntimeTypeInfoProvider._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVADCResult.")

agcls.AgClassCatalog.add_catalog_entry("{1F4606B6-6EB5-4349-90AD-E607DBBC6AB5}", AgVADCResult)


class AgVADCControlCollection(IAgVADCControlCollection, IAgRuntimeTypeInfoProvider):
    """The collection of Control Parameters for a differential corrector profile."""
    def __init__(self, sourceObject=None):
        IAgVADCControlCollection.__init__(self, sourceObject)
        IAgRuntimeTypeInfoProvider.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVADCControlCollection._private_init(self, intf)
        IAgRuntimeTypeInfoProvider._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVADCControlCollection._get_property(self, attrname) is not None: found_prop = IAgVADCControlCollection._get_property(self, attrname)
        if IAgRuntimeTypeInfoProvider._get_property(self, attrname) is not None: found_prop = IAgRuntimeTypeInfoProvider._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVADCControlCollection.")

agcls.AgClassCatalog.add_catalog_entry("{61729FE0-729A-461C-8C94-6816EC0F88E8}", AgVADCControlCollection)


class AgVADCResultCollection(IAgVADCResultCollection, IAgRuntimeTypeInfoProvider):
    """The collection of results for a differential corrector."""
    def __init__(self, sourceObject=None):
        IAgVADCResultCollection.__init__(self, sourceObject)
        IAgRuntimeTypeInfoProvider.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVADCResultCollection._private_init(self, intf)
        IAgRuntimeTypeInfoProvider._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVADCResultCollection._get_property(self, attrname) is not None: found_prop = IAgVADCResultCollection._get_property(self, attrname)
        if IAgRuntimeTypeInfoProvider._get_property(self, attrname) is not None: found_prop = IAgRuntimeTypeInfoProvider._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVADCResultCollection.")

agcls.AgClassCatalog.add_catalog_entry("{703FFB61-063E-4B38-AC0A-968903E6E929}", AgVADCResultCollection)


class AgVASearchPluginControl(IAgVASearchPluginControl):
    """Control parameters for a plugin search profile."""
    def __init__(self, sourceObject=None):
        IAgVASearchPluginControl.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVASearchPluginControl._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVASearchPluginControl._get_property(self, attrname) is not None: found_prop = IAgVASearchPluginControl._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVASearchPluginControl.")

agcls.AgClassCatalog.add_catalog_entry("{C127E67D-2078-4605-BB16-BF4049CBDEF0}", AgVASearchPluginControl)


class AgVASearchPluginControlCollection(IAgVASearchPluginControlCollection):
    """The list of search plugin control parameters"""
    def __init__(self, sourceObject=None):
        IAgVASearchPluginControlCollection.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVASearchPluginControlCollection._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVASearchPluginControlCollection._get_property(self, attrname) is not None: found_prop = IAgVASearchPluginControlCollection._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVASearchPluginControlCollection.")

agcls.AgClassCatalog.add_catalog_entry("{78A7975A-C0F5-434A-9902-411C3E975F7E}", AgVASearchPluginControlCollection)


class AgVASearchPluginResult(IAgVASearchPluginResult):
    """Equality constraints for a plugin search profile."""
    def __init__(self, sourceObject=None):
        IAgVASearchPluginResult.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVASearchPluginResult._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVASearchPluginResult._get_property(self, attrname) is not None: found_prop = IAgVASearchPluginResult._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVASearchPluginResult.")

agcls.AgClassCatalog.add_catalog_entry("{7A3345FE-C088-4CFA-84BE-5E997BB15CF8}", AgVASearchPluginResult)


class AgVASearchPluginResultCollection(IAgVASearchPluginResultCollection):
    """The list of search plugin equality constraints."""
    def __init__(self, sourceObject=None):
        IAgVASearchPluginResultCollection.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVASearchPluginResultCollection._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVASearchPluginResultCollection._get_property(self, attrname) is not None: found_prop = IAgVASearchPluginResultCollection._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVASearchPluginResultCollection.")

agcls.AgClassCatalog.add_catalog_entry("{8D37CDE6-2358-4419-9297-0032314ACB35}", AgVASearchPluginResultCollection)


class AgVAProfileChangeManeuverType(IAgVAProfileChangeManeuverType, IAgVAProfile, IAgRuntimeTypeInfoProvider):
    """The Change Maneuver Type profile."""
    def __init__(self, sourceObject=None):
        IAgVAProfileChangeManeuverType.__init__(self, sourceObject)
        IAgVAProfile.__init__(self, sourceObject)
        IAgRuntimeTypeInfoProvider.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAProfileChangeManeuverType._private_init(self, intf)
        IAgVAProfile._private_init(self, intf)
        IAgRuntimeTypeInfoProvider._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAProfileChangeManeuverType._get_property(self, attrname) is not None: found_prop = IAgVAProfileChangeManeuverType._get_property(self, attrname)
        if IAgVAProfile._get_property(self, attrname) is not None: found_prop = IAgVAProfile._get_property(self, attrname)
        if IAgRuntimeTypeInfoProvider._get_property(self, attrname) is not None: found_prop = IAgRuntimeTypeInfoProvider._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAProfileChangeManeuverType.")

agcls.AgClassCatalog.add_catalog_entry("{8FCD3010-988A-4C88-A3E8-FB0D991B1DA3}", AgVAProfileChangeManeuverType)


class AgVAProfileChangeReturnSegment(IAgVAProfileChangeReturnSegment, IAgVAProfile, IAgRuntimeTypeInfoProvider):
    """The Change Return Segment profile."""
    def __init__(self, sourceObject=None):
        IAgVAProfileChangeReturnSegment.__init__(self, sourceObject)
        IAgVAProfile.__init__(self, sourceObject)
        IAgRuntimeTypeInfoProvider.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAProfileChangeReturnSegment._private_init(self, intf)
        IAgVAProfile._private_init(self, intf)
        IAgRuntimeTypeInfoProvider._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAProfileChangeReturnSegment._get_property(self, attrname) is not None: found_prop = IAgVAProfileChangeReturnSegment._get_property(self, attrname)
        if IAgVAProfile._get_property(self, attrname) is not None: found_prop = IAgVAProfile._get_property(self, attrname)
        if IAgRuntimeTypeInfoProvider._get_property(self, attrname) is not None: found_prop = IAgRuntimeTypeInfoProvider._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAProfileChangeReturnSegment.")

agcls.AgClassCatalog.add_catalog_entry("{D7436885-84AD-41DE-9D0F-7A6F001A863B}", AgVAProfileChangeReturnSegment)


class AgVAProfileChangePropagator(IAgVAProfileChangePropagator, IAgVAProfile, IAgRuntimeTypeInfoProvider):
    """The Change Propagator profile."""
    def __init__(self, sourceObject=None):
        IAgVAProfileChangePropagator.__init__(self, sourceObject)
        IAgVAProfile.__init__(self, sourceObject)
        IAgRuntimeTypeInfoProvider.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAProfileChangePropagator._private_init(self, intf)
        IAgVAProfile._private_init(self, intf)
        IAgRuntimeTypeInfoProvider._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAProfileChangePropagator._get_property(self, attrname) is not None: found_prop = IAgVAProfileChangePropagator._get_property(self, attrname)
        if IAgVAProfile._get_property(self, attrname) is not None: found_prop = IAgVAProfile._get_property(self, attrname)
        if IAgRuntimeTypeInfoProvider._get_property(self, attrname) is not None: found_prop = IAgRuntimeTypeInfoProvider._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAProfileChangePropagator.")

agcls.AgClassCatalog.add_catalog_entry("{3EB69307-370B-443E-AB4F-1463A80142CD}", AgVAProfileChangePropagator)


class AgVAProfileChangeStopSegment(IAgVAProfileChangeStopSegment, IAgVAProfile, IAgRuntimeTypeInfoProvider):
    """The Change Stop Segment profile."""
    def __init__(self, sourceObject=None):
        IAgVAProfileChangeStopSegment.__init__(self, sourceObject)
        IAgVAProfile.__init__(self, sourceObject)
        IAgRuntimeTypeInfoProvider.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAProfileChangeStopSegment._private_init(self, intf)
        IAgVAProfile._private_init(self, intf)
        IAgRuntimeTypeInfoProvider._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAProfileChangeStopSegment._get_property(self, attrname) is not None: found_prop = IAgVAProfileChangeStopSegment._get_property(self, attrname)
        if IAgVAProfile._get_property(self, attrname) is not None: found_prop = IAgVAProfile._get_property(self, attrname)
        if IAgRuntimeTypeInfoProvider._get_property(self, attrname) is not None: found_prop = IAgRuntimeTypeInfoProvider._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAProfileChangeStopSegment.")

agcls.AgClassCatalog.add_catalog_entry("{73CD0F57-2A67-47D7-BFAD-4E07D5045AB1}", AgVAProfileChangeStopSegment)


class AgVAProfileChangeStoppingConditionState(IAgVAProfileChangeStoppingConditionState, IAgVAProfile, IAgRuntimeTypeInfoProvider):
    """The Change Stopping Condition State profile."""
    def __init__(self, sourceObject=None):
        IAgVAProfileChangeStoppingConditionState.__init__(self, sourceObject)
        IAgVAProfile.__init__(self, sourceObject)
        IAgRuntimeTypeInfoProvider.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAProfileChangeStoppingConditionState._private_init(self, intf)
        IAgVAProfile._private_init(self, intf)
        IAgRuntimeTypeInfoProvider._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAProfileChangeStoppingConditionState._get_property(self, attrname) is not None: found_prop = IAgVAProfileChangeStoppingConditionState._get_property(self, attrname)
        if IAgVAProfile._get_property(self, attrname) is not None: found_prop = IAgVAProfile._get_property(self, attrname)
        if IAgRuntimeTypeInfoProvider._get_property(self, attrname) is not None: found_prop = IAgRuntimeTypeInfoProvider._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAProfileChangeStoppingConditionState.")

agcls.AgClassCatalog.add_catalog_entry("{593BF97D-DA25-40EC-832A-2514939CCCCB}", AgVAProfileChangeStoppingConditionState)


class AgVAProfileSeedFiniteManeuver(IAgVAProfileSeedFiniteManeuver, IAgVAProfile, IAgRuntimeTypeInfoProvider):
    """The Seed Finite Maneuver profile."""
    def __init__(self, sourceObject=None):
        IAgVAProfileSeedFiniteManeuver.__init__(self, sourceObject)
        IAgVAProfile.__init__(self, sourceObject)
        IAgRuntimeTypeInfoProvider.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAProfileSeedFiniteManeuver._private_init(self, intf)
        IAgVAProfile._private_init(self, intf)
        IAgRuntimeTypeInfoProvider._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAProfileSeedFiniteManeuver._get_property(self, attrname) is not None: found_prop = IAgVAProfileSeedFiniteManeuver._get_property(self, attrname)
        if IAgVAProfile._get_property(self, attrname) is not None: found_prop = IAgVAProfile._get_property(self, attrname)
        if IAgRuntimeTypeInfoProvider._get_property(self, attrname) is not None: found_prop = IAgRuntimeTypeInfoProvider._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAProfileSeedFiniteManeuver.")

agcls.AgClassCatalog.add_catalog_entry("{4524367A-A29D-401A-8B98-82FB06E4D2B3}", AgVAProfileSeedFiniteManeuver)


class AgVAProfileRunOnce(IAgVAProfileRunOnce, IAgVAProfile, IAgRuntimeTypeInfoProvider):
    """The Run Once profile."""
    def __init__(self, sourceObject=None):
        IAgVAProfileRunOnce.__init__(self, sourceObject)
        IAgVAProfile.__init__(self, sourceObject)
        IAgRuntimeTypeInfoProvider.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAProfileRunOnce._private_init(self, intf)
        IAgVAProfile._private_init(self, intf)
        IAgRuntimeTypeInfoProvider._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAProfileRunOnce._get_property(self, attrname) is not None: found_prop = IAgVAProfileRunOnce._get_property(self, attrname)
        if IAgVAProfile._get_property(self, attrname) is not None: found_prop = IAgVAProfile._get_property(self, attrname)
        if IAgRuntimeTypeInfoProvider._get_property(self, attrname) is not None: found_prop = IAgRuntimeTypeInfoProvider._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAProfileRunOnce.")

agcls.AgClassCatalog.add_catalog_entry("{6B7DC440-DAE4-4F68-BD3A-D431EF7460B4}", AgVAProfileRunOnce)


class AgVABPlaneCollection(IAgVABPlaneCollection):
    """The collection of B-Planes."""
    def __init__(self, sourceObject=None):
        IAgVABPlaneCollection.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVABPlaneCollection._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVABPlaneCollection._get_property(self, attrname) is not None: found_prop = IAgVABPlaneCollection._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVABPlaneCollection.")

agcls.AgClassCatalog.add_catalog_entry("{4A33E12D-FC24-46EB-8AD4-752E5534168D}", AgVABPlaneCollection)


class AgVAStateCalcDamageFlux(IAgVAStateCalcDamageFlux, IAgComponentInfo, IAgCloneable):
    """CoClass StateCalcDamageFlux."""
    def __init__(self, sourceObject=None):
        IAgVAStateCalcDamageFlux.__init__(self, sourceObject)
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAStateCalcDamageFlux._private_init(self, intf)
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAStateCalcDamageFlux._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcDamageFlux._get_property(self, attrname)
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcDamageFlux.")

agcls.AgClassCatalog.add_catalog_entry("{EFD8FBFA-6ACF-463D-9857-7C272440314F}", AgVAStateCalcDamageFlux)


class AgVAStateCalcDamageMassFlux(IAgVAStateCalcDamageMassFlux, IAgComponentInfo, IAgCloneable):
    """CoClass StateCalcDamageMassFlux."""
    def __init__(self, sourceObject=None):
        IAgVAStateCalcDamageMassFlux.__init__(self, sourceObject)
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAStateCalcDamageMassFlux._private_init(self, intf)
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAStateCalcDamageMassFlux._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcDamageMassFlux._get_property(self, attrname)
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcDamageMassFlux.")

agcls.AgClassCatalog.add_catalog_entry("{05A46EDD-2B3D-4505-BD42-DB7516899060}", AgVAStateCalcDamageMassFlux)


class AgVAStateCalcMagFieldDipoleL(IAgVAStateCalcMagFieldDipoleL, IAgComponentInfo, IAgCloneable):
    """CoClass StateCalcMagFieldDipoleL."""
    def __init__(self, sourceObject=None):
        IAgVAStateCalcMagFieldDipoleL.__init__(self, sourceObject)
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAStateCalcMagFieldDipoleL._private_init(self, intf)
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAStateCalcMagFieldDipoleL._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcMagFieldDipoleL._get_property(self, attrname)
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcMagFieldDipoleL.")

agcls.AgClassCatalog.add_catalog_entry("{C1FD9D99-42EF-40F2-9E53-AEBAEC1A5573}", AgVAStateCalcMagFieldDipoleL)


class AgVAStateCalcSEETMagFieldFieldLineSepAngle(IAgComponentInfo, IAgCloneable, IAgVAStateCalcSEETMagFieldFieldLineSepAngle):
    """SEETMagFieldFieldLineSepAngle Calc object."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcSEETMagFieldFieldLineSepAngle.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
        IAgVAStateCalcSEETMagFieldFieldLineSepAngle._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcSEETMagFieldFieldLineSepAngle._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcSEETMagFieldFieldLineSepAngle._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcSEETMagFieldFieldLineSepAngle.")

agcls.AgClassCatalog.add_catalog_entry("{585BF1E2-E8E0-4D8B-9101-7BDC793D6E68}", AgVAStateCalcSEETMagFieldFieldLineSepAngle)


class AgVAStateCalcImpactFlux(IAgVAStateCalcImpactFlux, IAgComponentInfo, IAgCloneable):
    """CoClass StateCalcImpactFlux."""
    def __init__(self, sourceObject=None):
        IAgVAStateCalcImpactFlux.__init__(self, sourceObject)
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAStateCalcImpactFlux._private_init(self, intf)
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAStateCalcImpactFlux._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcImpactFlux._get_property(self, attrname)
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcImpactFlux.")

agcls.AgClassCatalog.add_catalog_entry("{2F537C47-80E4-483C-9C6F-A82F91EC5F24}", AgVAStateCalcImpactFlux)


class AgVAStateCalcImpactMassFlux(IAgVAStateCalcImpactMassFlux, IAgComponentInfo, IAgCloneable):
    """CoClass StateCalcImpactMassFlux."""
    def __init__(self, sourceObject=None):
        IAgVAStateCalcImpactMassFlux.__init__(self, sourceObject)
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAStateCalcImpactMassFlux._private_init(self, intf)
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAStateCalcImpactMassFlux._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcImpactMassFlux._get_property(self, attrname)
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcImpactMassFlux.")

agcls.AgClassCatalog.add_catalog_entry("{9D64EF8C-63C9-4924-BE13-8176E3DAB180}", AgVAStateCalcImpactMassFlux)


class AgVAStateCalcSEETSAAFlux(IAgVAStateCalcSEETSAAFlux, IAgComponentInfo, IAgCloneable):
    """CoClass StateCalcSEETSAAFlux."""
    def __init__(self, sourceObject=None):
        IAgVAStateCalcSEETSAAFlux.__init__(self, sourceObject)
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAStateCalcSEETSAAFlux._private_init(self, intf)
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAStateCalcSEETSAAFlux._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcSEETSAAFlux._get_property(self, attrname)
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcSEETSAAFlux.")

agcls.AgClassCatalog.add_catalog_entry("{3C766F5E-9727-4ACD-9E5D-D08684116A79}", AgVAStateCalcSEETSAAFlux)


class AgVAStateCalcSEETVehTemp(IAgVAStateCalcSEETVehTemp, IAgComponentInfo, IAgCloneable):
    """CoClass StateCalcSEETVehTemp."""
    def __init__(self, sourceObject=None):
        IAgVAStateCalcSEETVehTemp.__init__(self, sourceObject)
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAStateCalcSEETVehTemp._private_init(self, intf)
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAStateCalcSEETVehTemp._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcSEETVehTemp._get_property(self, attrname)
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcSEETVehTemp.")

agcls.AgClassCatalog.add_catalog_entry("{082CAA56-3DB0-4BA5-BE14-B84D93A32504}", AgVAStateCalcSEETVehTemp)


class AgVAStateCalcEpoch(IAgComponentInfo, IAgCloneable, IAgVAStateCalcEpoch):
    """Epoch Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcEpoch.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
        IAgVAStateCalcEpoch._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcEpoch._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcEpoch._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcEpoch.")

agcls.AgClassCatalog.add_catalog_entry("{CC140708-1576-4CFA-9A28-BC454B33DE02}", AgVAStateCalcEpoch)


class AgVAStateCalcJacobiConstant(IAgComponentInfo, IAgCloneable, IAgVAStateCalcJacobiConstant):
    """Jacobi Constant Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcJacobiConstant.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
        IAgVAStateCalcJacobiConstant._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcJacobiConstant._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcJacobiConstant._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcJacobiConstant.")

agcls.AgClassCatalog.add_catalog_entry("{FFF1FA69-1E24-445E-A239-41E2AB0D373B}", AgVAStateCalcJacobiConstant)


class AgVAStateCalcCartesianElem(IAgComponentInfo, IAgCloneable, IAgVAStateCalcCartesianElem):
    """Cartesian Elements Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcCartesianElem.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
        IAgVAStateCalcCartesianElem._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcCartesianElem._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcCartesianElem._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcCartesianElem.")

agcls.AgClassCatalog.add_catalog_entry("{AECA6CA7-7D04-4EB5-95D9-216BBCCD0EC1}", AgVAStateCalcCartesianElem)


class AgVAStateCalcCartSTMElem(IAgComponentInfo, IAgCloneable, IAgVAStateCalcCartSTMElem):
    """Cartesian STM Elements Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcCartSTMElem.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
        IAgVAStateCalcCartSTMElem._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcCartSTMElem._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcCartSTMElem._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcCartSTMElem.")

agcls.AgClassCatalog.add_catalog_entry("{84EAF6DB-A535-421E-8CCF-95A142E3B2FE}", AgVAStateCalcCartSTMElem)


class AgVAStateCalcSTMEigenval(IAgComponentInfo, IAgCloneable, IAgVAStateCalcSTMEigenval):
    """Cartesian STM Eigenvalues Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcSTMEigenval.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
        IAgVAStateCalcSTMEigenval._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcSTMEigenval._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcSTMEigenval._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcSTMEigenval.")

agcls.AgClassCatalog.add_catalog_entry("{F3AC2C6F-7A0A-40CA-A7EC-230D9EC2D75E}", AgVAStateCalcSTMEigenval)


class AgVAStateCalcSTMEigenvecElem(IAgComponentInfo, IAgCloneable, IAgVAStateCalcSTMEigenvecElem):
    """Cartesian STM Eigenvector Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcSTMEigenvecElem.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
        IAgVAStateCalcSTMEigenvecElem._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcSTMEigenvecElem._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcSTMEigenvecElem._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcSTMEigenvecElem.")

agcls.AgClassCatalog.add_catalog_entry("{53BF2ADA-8B4D-4E64-BC61-AFA201DAB3C7}", AgVAStateCalcSTMEigenvecElem)


class AgVAStateCalcEnvironment(IAgComponentInfo, IAgCloneable, IAgVAStateCalcEnvironment):
    """Environment Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcEnvironment.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
        IAgVAStateCalcEnvironment._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcEnvironment._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcEnvironment._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcEnvironment.")

agcls.AgClassCatalog.add_catalog_entry("{A8319DEC-F018-4890-AC98-9F7B2AF96DF6}", AgVAStateCalcEnvironment)


class AgVAStateCalcOrbitDelaunayG(IAgVAStateCalcOrbitDelaunayG, IAgComponentInfo, IAgCloneable):
    """CoClass AsStateCalcOrbitDelaunayG."""
    def __init__(self, sourceObject=None):
        IAgVAStateCalcOrbitDelaunayG.__init__(self, sourceObject)
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAStateCalcOrbitDelaunayG._private_init(self, intf)
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAStateCalcOrbitDelaunayG._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcOrbitDelaunayG._get_property(self, attrname)
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcOrbitDelaunayG.")

agcls.AgClassCatalog.add_catalog_entry("{5DE99D8D-DB40-4107-9D79-03D51AEAA4E8}", AgVAStateCalcOrbitDelaunayG)


class AgVAStateCalcOrbitDelaunayH(IAgVAStateCalcOrbitDelaunayH, IAgComponentInfo, IAgCloneable):
    """CoClass AsStateCalcOrbitDelaunayH."""
    def __init__(self, sourceObject=None):
        IAgVAStateCalcOrbitDelaunayH.__init__(self, sourceObject)
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAStateCalcOrbitDelaunayH._private_init(self, intf)
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAStateCalcOrbitDelaunayH._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcOrbitDelaunayH._get_property(self, attrname)
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcOrbitDelaunayH.")

agcls.AgClassCatalog.add_catalog_entry("{4C7CDC1F-79EA-412B-A1E3-7E519CCAA4F0}", AgVAStateCalcOrbitDelaunayH)


class AgVAStateCalcOrbitDelaunayL(IAgVAStateCalcOrbitDelaunayL, IAgComponentInfo, IAgCloneable):
    """CoClass AsStateCalcOrbitDelaunayL."""
    def __init__(self, sourceObject=None):
        IAgVAStateCalcOrbitDelaunayL.__init__(self, sourceObject)
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAStateCalcOrbitDelaunayL._private_init(self, intf)
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAStateCalcOrbitDelaunayL._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcOrbitDelaunayL._get_property(self, attrname)
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcOrbitDelaunayL.")

agcls.AgClassCatalog.add_catalog_entry("{299A4FF6-0636-4A25-AC74-4FF7D0A33F30}", AgVAStateCalcOrbitDelaunayL)


class AgVAStateCalcOrbitSemiLatusRectum(IAgVAStateCalcOrbitSemiLatusRectum, IAgComponentInfo, IAgCloneable):
    """CoClass AsStateCalcOrbitSemiLatusRectum."""
    def __init__(self, sourceObject=None):
        IAgVAStateCalcOrbitSemiLatusRectum.__init__(self, sourceObject)
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAStateCalcOrbitSemiLatusRectum._private_init(self, intf)
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAStateCalcOrbitSemiLatusRectum._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcOrbitSemiLatusRectum._get_property(self, attrname)
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcOrbitSemiLatusRectum.")

agcls.AgClassCatalog.add_catalog_entry("{9A0EF481-BE9B-47B7-81D5-CAFF636B8E31}", AgVAStateCalcOrbitSemiLatusRectum)


class AgVAStateCalcEquinoctialElem(IAgComponentInfo, IAgCloneable, IAgVAStateCalcEquinoctialElem):
    """Equinoctial Elements Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcEquinoctialElem.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
        IAgVAStateCalcEquinoctialElem._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcEquinoctialElem._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcEquinoctialElem._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcEquinoctialElem.")

agcls.AgClassCatalog.add_catalog_entry("{5C90B745-3002-4AEC-9613-0FE8168F2903}", AgVAStateCalcEquinoctialElem)


class AgVAStateCalcCloseApproachBearing(IAgComponentInfo, IAgCloneable, IAgVAStateCalcCloseApproachBearing):
    """CloseApproachBearing Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcCloseApproachBearing.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
        IAgVAStateCalcCloseApproachBearing._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcCloseApproachBearing._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcCloseApproachBearing._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcCloseApproachBearing.")

agcls.AgClassCatalog.add_catalog_entry("{E0AD9FFF-8F9D-4EBD-A41D-2982A60968AB}", AgVAStateCalcCloseApproachBearing)


class AgVAStateCalcCloseApproachMag(IAgComponentInfo, IAgCloneable, IAgVAStateCalcCloseApproachMag):
    """CloseApproachMag Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcCloseApproachMag.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
        IAgVAStateCalcCloseApproachMag._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcCloseApproachMag._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcCloseApproachMag._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcCloseApproachMag.")

agcls.AgClassCatalog.add_catalog_entry("{70461F34-33C2-42B4-9591-5A2F2C5EB8D2}", AgVAStateCalcCloseApproachMag)


class AgVAStateCalcCloseApproachTheta(IAgComponentInfo, IAgCloneable, IAgVAStateCalcCloseApproachTheta):
    """CloseApproachTheta Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcCloseApproachTheta.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
        IAgVAStateCalcCloseApproachTheta._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcCloseApproachTheta._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcCloseApproachTheta._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcCloseApproachTheta.")

agcls.AgClassCatalog.add_catalog_entry("{950DA5FA-29AA-4422-B760-AD23CB6A33FB}", AgVAStateCalcCloseApproachTheta)


class AgVAStateCalcCloseApproachX(IAgComponentInfo, IAgCloneable, IAgVAStateCalcCloseApproachX):
    """CloseApproachX Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcCloseApproachX.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
        IAgVAStateCalcCloseApproachX._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcCloseApproachX._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcCloseApproachX._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcCloseApproachX.")

agcls.AgClassCatalog.add_catalog_entry("{FD980AD5-6212-4A4A-AC05-4453F9015301}", AgVAStateCalcCloseApproachX)


class AgVAStateCalcCloseApproachY(IAgComponentInfo, IAgCloneable, IAgVAStateCalcCloseApproachY):
    """CloseApproachY Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcCloseApproachY.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
        IAgVAStateCalcCloseApproachY._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcCloseApproachY._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcCloseApproachY._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcCloseApproachY.")

agcls.AgClassCatalog.add_catalog_entry("{D04565A4-C1F2-4A3D-A304-FB3CB2887087}", AgVAStateCalcCloseApproachY)


class AgVAStateCalcCloseApproachCosBearing(IAgComponentInfo, IAgCloneable, IAgVAStateCalcCloseApproachCosBearing):
    """CloseApproachCosBearing Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcCloseApproachCosBearing.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
        IAgVAStateCalcCloseApproachCosBearing._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcCloseApproachCosBearing._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcCloseApproachCosBearing._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcCloseApproachCosBearing.")

agcls.AgClassCatalog.add_catalog_entry("{EDAFFF24-75C9-4C68-9E4B-00DEFD89DAE1}", AgVAStateCalcCloseApproachCosBearing)


class AgVAStateCalcRelGroundTrackError(IAgComponentInfo, IAgCloneable, IAgVAStateCalcRelGroundTrackError):
    """RelGroundTrackError Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcRelGroundTrackError.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
        IAgVAStateCalcRelGroundTrackError._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcRelGroundTrackError._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcRelGroundTrackError._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcRelGroundTrackError.")

agcls.AgClassCatalog.add_catalog_entry("{42632E47-2FF5-4183-BB7F-9A3CDAB5E80D}", AgVAStateCalcRelGroundTrackError)


class AgVAStateCalcRelAtAOLMaster(IAgComponentInfo, IAgCloneable, IAgVAStateCalcRelAtAOLMaster):
    """RelAOLMaster Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcRelAtAOLMaster.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
        IAgVAStateCalcRelAtAOLMaster._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcRelAtAOLMaster._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcRelAtAOLMaster._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcRelAtAOLMaster.")

agcls.AgClassCatalog.add_catalog_entry("{4ADF0E11-ECD1-434B-AD01-57FD9F0A692A}", AgVAStateCalcRelAtAOLMaster)


class AgVAStateCalcDeltaFromMaster(IAgComponentInfo, IAgCloneable, IAgVAStateCalcDeltaFromMaster):
    """DeltaFromMaster Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcDeltaFromMaster.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
        IAgVAStateCalcDeltaFromMaster._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcDeltaFromMaster._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcDeltaFromMaster._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcDeltaFromMaster.")

agcls.AgClassCatalog.add_catalog_entry("{F88A3044-F12D-4147-8609-B71F3AD972F4}", AgVAStateCalcDeltaFromMaster)


class AgVAStateCalcLonDriftRate(IAgComponentInfo, IAgCloneable, IAgVAStateCalcLonDriftRate):
    """LongDriftRate Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcLonDriftRate.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
        IAgVAStateCalcLonDriftRate._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcLonDriftRate._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcLonDriftRate._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcLonDriftRate.")

agcls.AgClassCatalog.add_catalog_entry("{87C78155-DC4F-42C1-B2A6-D48E10F79594}", AgVAStateCalcLonDriftRate)


class AgVAStateCalcMeanEarthLon(IAgComponentInfo, IAgCloneable, IAgVAStateCalcMeanEarthLon):
    """MeanEarthLon Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcMeanEarthLon.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
        IAgVAStateCalcMeanEarthLon._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcMeanEarthLon._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcMeanEarthLon._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcMeanEarthLon.")

agcls.AgClassCatalog.add_catalog_entry("{0D4E3AF8-45A3-4000-BB8A-B6D8323627AD}", AgVAStateCalcMeanEarthLon)


class AgVAStateCalcRectifiedLon(IAgComponentInfo, IAgCloneable, IAgVAStateCalcRectifiedLon):
    """RectifiedLongitude Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcRectifiedLon.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
        IAgVAStateCalcRectifiedLon._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcRectifiedLon._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcRectifiedLon._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcRectifiedLon.")

agcls.AgClassCatalog.add_catalog_entry("{ED61CCC5-71C7-4D2D-BB7D-BF177E6B9D7A}", AgVAStateCalcRectifiedLon)


class AgVAStateCalcTrueLongitude(IAgComponentInfo, IAgCloneable, IAgVAStateCalcTrueLongitude):
    """TrueLongitude Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcTrueLongitude.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
        IAgVAStateCalcTrueLongitude._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcTrueLongitude._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcTrueLongitude._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcTrueLongitude.")

agcls.AgClassCatalog.add_catalog_entry("{EB667B87-04A5-4685-9F72-DBB764F488B5}", AgVAStateCalcTrueLongitude)


class AgVAStateCalcGeodeticTrueLongitude(IAgComponentInfo, IAgCloneable, IAgVAStateCalcGeodeticTrueLongitude):
    """GeodeticTrueLongitude Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcGeodeticTrueLongitude.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
        IAgVAStateCalcGeodeticTrueLongitude._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcGeodeticTrueLongitude._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcGeodeticTrueLongitude._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcGeodeticTrueLongitude.")

agcls.AgClassCatalog.add_catalog_entry("{619B549B-4824-4D2D-A11B-EB8398871C67}", AgVAStateCalcGeodeticTrueLongitude)


class AgVAStateCalcGeodeticTrueLongitudeAtTimeOfPerigee(IAgComponentInfo, IAgCloneable, IAgVAStateCalcGeodeticTrueLongitudeAtTimeOfPerigee):
    """GeodeticTrueLongitudeAtTimeOfPerigee Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcGeodeticTrueLongitudeAtTimeOfPerigee.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
        IAgVAStateCalcGeodeticTrueLongitudeAtTimeOfPerigee._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcGeodeticTrueLongitudeAtTimeOfPerigee._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcGeodeticTrueLongitudeAtTimeOfPerigee._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcGeodeticTrueLongitudeAtTimeOfPerigee.")

agcls.AgClassCatalog.add_catalog_entry("{C6C19B72-22D7-4871-A658-5A2C46FA1DE5}", AgVAStateCalcGeodeticTrueLongitudeAtTimeOfPerigee)


class AgVAStateCalcMeanRightAscension(IAgComponentInfo, IAgCloneable, IAgVAStateCalcMeanRightAscension):
    """MeanRightAscension Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcMeanRightAscension.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
        IAgVAStateCalcMeanRightAscension._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcMeanRightAscension._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcMeanRightAscension._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcMeanRightAscension.")

agcls.AgClassCatalog.add_catalog_entry("{A98B4722-77F9-4EB8-B9BC-D36C8D56AEA9}", AgVAStateCalcMeanRightAscension)


class AgVAStateCalcGeodeticMeanRightAscension(IAgComponentInfo, IAgCloneable, IAgVAStateCalcGeodeticMeanRightAscension):
    """GeodeticMeanRightAscension Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcGeodeticMeanRightAscension.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
        IAgVAStateCalcGeodeticMeanRightAscension._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcGeodeticMeanRightAscension._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcGeodeticMeanRightAscension._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcGeodeticMeanRightAscension.")

agcls.AgClassCatalog.add_catalog_entry("{143B6D03-5CAE-4AA3-84EE-3D83A1BA9BD9}", AgVAStateCalcGeodeticMeanRightAscension)


class AgVAStateCalcTwoBodyDriftRate(IAgComponentInfo, IAgCloneable, IAgVAStateCalcTwoBodyDriftRate):
    """TwoBodyDriftRate Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcTwoBodyDriftRate.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
        IAgVAStateCalcTwoBodyDriftRate._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcTwoBodyDriftRate._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcTwoBodyDriftRate._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcTwoBodyDriftRate.")

agcls.AgClassCatalog.add_catalog_entry("{117D07A4-0253-4AB7-B96C-17B1350EB663}", AgVAStateCalcTwoBodyDriftRate)


class AgVAStateCalcDriftRateFactor(IAgComponentInfo, IAgCloneable, IAgVAStateCalcDriftRateFactor):
    """DriftRateFactor Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcDriftRateFactor.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
        IAgVAStateCalcDriftRateFactor._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcDriftRateFactor._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcDriftRateFactor._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcDriftRateFactor.")

agcls.AgClassCatalog.add_catalog_entry("{01BCEE54-F8E9-4E89-B154-951ECD5A0A3D}", AgVAStateCalcDriftRateFactor)


class AgVAStateCalcEccentricityX(IAgComponentInfo, IAgCloneable, IAgVAStateCalcEccentricityX):
    """EccentricityX Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcEccentricityX.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
        IAgVAStateCalcEccentricityX._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcEccentricityX._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcEccentricityX._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcEccentricityX.")

agcls.AgClassCatalog.add_catalog_entry("{4BBA291A-C5F4-43DC-8394-34BC45F744A5}", AgVAStateCalcEccentricityX)


class AgVAStateCalcEccentricityY(IAgComponentInfo, IAgCloneable, IAgVAStateCalcEccentricityY):
    """EccentricityY Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcEccentricityY.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
        IAgVAStateCalcEccentricityY._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcEccentricityY._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcEccentricityY._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcEccentricityY.")

agcls.AgClassCatalog.add_catalog_entry("{807AD8EE-0486-481B-9EEC-C9406E8D1FF1}", AgVAStateCalcEccentricityY)


class AgVAStateCalcInclinationX(IAgComponentInfo, IAgCloneable, IAgVAStateCalcInclinationX):
    """InclinationX Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcInclinationX.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
        IAgVAStateCalcInclinationX._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcInclinationX._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcInclinationX._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcInclinationX.")

agcls.AgClassCatalog.add_catalog_entry("{0041C813-5B5A-4A26-A56F-A9823EF778E3}", AgVAStateCalcInclinationX)


class AgVAStateCalcInclinationY(IAgComponentInfo, IAgCloneable, IAgVAStateCalcInclinationY):
    """InclinationY Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcInclinationY.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
        IAgVAStateCalcInclinationY._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcInclinationY._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcInclinationY._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcInclinationY.")

agcls.AgClassCatalog.add_catalog_entry("{ED938D28-BA63-437E-B1DB-A7D8115B328C}", AgVAStateCalcInclinationY)


class AgVAStateCalcUnitAngularMomentumX(IAgComponentInfo, IAgCloneable, IAgVAStateCalcUnitAngularMomentumX):
    """UnitAngularMomentumX Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcUnitAngularMomentumX.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
        IAgVAStateCalcUnitAngularMomentumX._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcUnitAngularMomentumX._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcUnitAngularMomentumX._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcUnitAngularMomentumX.")

agcls.AgClassCatalog.add_catalog_entry("{53357EF4-239F-4B9A-A438-B51790C448BF}", AgVAStateCalcUnitAngularMomentumX)


class AgVAStateCalcUnitAngularMomentumY(IAgComponentInfo, IAgCloneable, IAgVAStateCalcUnitAngularMomentumY):
    """UnitAngularMomentumY Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcUnitAngularMomentumY.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
        IAgVAStateCalcUnitAngularMomentumY._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcUnitAngularMomentumY._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcUnitAngularMomentumY._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcUnitAngularMomentumY.")

agcls.AgClassCatalog.add_catalog_entry("{900693FD-BAAC-426E-8682-EEC85D239CB6}", AgVAStateCalcUnitAngularMomentumY)


class AgVAStateCalcUnitAngularMomentumZ(IAgComponentInfo, IAgCloneable, IAgVAStateCalcUnitAngularMomentumZ):
    """UnitAngularMomentumZ Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcUnitAngularMomentumZ.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
        IAgVAStateCalcUnitAngularMomentumZ._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcUnitAngularMomentumZ._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcUnitAngularMomentumZ._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcUnitAngularMomentumZ.")

agcls.AgClassCatalog.add_catalog_entry("{560184A9-46F4-4B62-8742-E72700D90640}", AgVAStateCalcUnitAngularMomentumZ)


class AgVAStateCalcHeightAboveTerrain(IAgVAStateCalcHeightAboveTerrain, IAgComponentInfo, IAgCloneable):
    """CoClass AsStateCalcHeightAboveTerrain."""
    def __init__(self, sourceObject=None):
        IAgVAStateCalcHeightAboveTerrain.__init__(self, sourceObject)
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAStateCalcHeightAboveTerrain._private_init(self, intf)
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAStateCalcHeightAboveTerrain._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcHeightAboveTerrain._get_property(self, attrname)
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcHeightAboveTerrain.")

agcls.AgClassCatalog.add_catalog_entry("{3212361D-8A8B-4ED0-94C8-2D6F69BC3A12}", AgVAStateCalcHeightAboveTerrain)


class AgVAStateCalcGeodeticElem(IAgComponentInfo, IAgCloneable, IAgVAStateCalcGeodeticElem):
    """Geodetic Elements Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcGeodeticElem.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
        IAgVAStateCalcGeodeticElem._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcGeodeticElem._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcGeodeticElem._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcGeodeticElem.")

agcls.AgClassCatalog.add_catalog_entry("{C22E7F23-171B-4A81-AF2B-6A3747D92FDA}", AgVAStateCalcGeodeticElem)


class AgVAStateCalcRepeatingGroundTrackErr(IAgComponentInfo, IAgCloneable, IAgVAStateCalcRepeatingGroundTrackErr):
    """RepeatingGrTrackErr Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcRepeatingGroundTrackErr.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
        IAgVAStateCalcRepeatingGroundTrackErr._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcRepeatingGroundTrackErr._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcRepeatingGroundTrackErr._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcRepeatingGroundTrackErr.")

agcls.AgClassCatalog.add_catalog_entry("{2D4ADF81-8403-42A7-9CD8-969B9C5FEF33}", AgVAStateCalcRepeatingGroundTrackErr)


class AgVAStateCalcAltOfApoapsis(IAgComponentInfo, IAgCloneable, IAgVAStateCalcAltOfApoapsis):
    """AltitudeOfApoapsis Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcAltOfApoapsis.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
        IAgVAStateCalcAltOfApoapsis._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcAltOfApoapsis._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcAltOfApoapsis._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcAltOfApoapsis.")

agcls.AgClassCatalog.add_catalog_entry("{A9398A62-DC62-40F2-8C71-C4D10D180C28}", AgVAStateCalcAltOfApoapsis)


class AgVAStateCalcAltOfPeriapsis(IAgComponentInfo, IAgCloneable, IAgVAStateCalcAltOfPeriapsis):
    """AltitudeOfPeriapsis Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcAltOfPeriapsis.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
        IAgVAStateCalcAltOfPeriapsis._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcAltOfPeriapsis._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcAltOfPeriapsis._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcAltOfPeriapsis.")

agcls.AgClassCatalog.add_catalog_entry("{700481E3-804B-4F43-B0AB-D58472F26302}", AgVAStateCalcAltOfPeriapsis)


class AgVAStateCalcArgOfLat(IAgComponentInfo, IAgCloneable, IAgVAStateCalcArgOfLat):
    """Argument of Latitude Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcArgOfLat.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
        IAgVAStateCalcArgOfLat._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcArgOfLat._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcArgOfLat._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcArgOfLat.")

agcls.AgClassCatalog.add_catalog_entry("{E3D0D3CF-1181-4F67-98D9-2CA6A5530372}", AgVAStateCalcArgOfLat)


class AgVAStateCalcArgOfPeriapsis(IAgComponentInfo, IAgCloneable, IAgVAStateCalcArgOfPeriapsis):
    """Argument of Periapsis Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcArgOfPeriapsis.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
        IAgVAStateCalcArgOfPeriapsis._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcArgOfPeriapsis._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcArgOfPeriapsis._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcArgOfPeriapsis.")

agcls.AgClassCatalog.add_catalog_entry("{64C0F0D2-889C-4EE2-BD26-B32BC6880733}", AgVAStateCalcArgOfPeriapsis)


class AgVAStateCalcEccAnomaly(IAgComponentInfo, IAgCloneable, IAgVAStateCalcEccAnomaly):
    """EccAnomaly Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcEccAnomaly.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
        IAgVAStateCalcEccAnomaly._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcEccAnomaly._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcEccAnomaly._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcEccAnomaly.")

agcls.AgClassCatalog.add_catalog_entry("{56C8EC47-95B0-4BF3-8D07-1F51630C285B}", AgVAStateCalcEccAnomaly)


class AgVAStateCalcLonOfAscNode(IAgComponentInfo, IAgCloneable, IAgVAStateCalcLonOfAscNode):
    """LongitudeOfAscendingNode Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcLonOfAscNode.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
        IAgVAStateCalcLonOfAscNode._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcLonOfAscNode._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcLonOfAscNode._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcLonOfAscNode.")

agcls.AgClassCatalog.add_catalog_entry("{2B606060-6816-4394-B4C5-C527490F9329}", AgVAStateCalcLonOfAscNode)


class AgVAStateCalcMeanMotion(IAgComponentInfo, IAgCloneable, IAgVAStateCalcMeanMotion):
    """MeanMotion Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcMeanMotion.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
        IAgVAStateCalcMeanMotion._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcMeanMotion._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcMeanMotion._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcMeanMotion.")

agcls.AgClassCatalog.add_catalog_entry("{B18119FD-D9C9-41E2-A7EB-46ACDA5CA8D5}", AgVAStateCalcMeanMotion)


class AgVAStateCalcOrbitPeriod(IAgComponentInfo, IAgCloneable, IAgVAStateCalcOrbitPeriod):
    """OrbitPeriod Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcOrbitPeriod.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
        IAgVAStateCalcOrbitPeriod._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcOrbitPeriod._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcOrbitPeriod._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcOrbitPeriod.")

agcls.AgClassCatalog.add_catalog_entry("{D7563267-B5E5-43C5-8062-E07CCA0F2B84}", AgVAStateCalcOrbitPeriod)


class AgVAStateCalcNumRevs(IAgComponentInfo, IAgCloneable, IAgVAStateCalcNumRevs):
    """NumRevs Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcNumRevs.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
        IAgVAStateCalcNumRevs._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcNumRevs._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcNumRevs._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcNumRevs.")

agcls.AgClassCatalog.add_catalog_entry("{D0585F2A-3F22-472C-B134-5A6DE1873010}", AgVAStateCalcNumRevs)


class AgVAStateCalcRadOfApoapsis(IAgComponentInfo, IAgCloneable, IAgVAStateCalcRadOfApoapsis):
    """RadiusOfApoapsis Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcRadOfApoapsis.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
        IAgVAStateCalcRadOfApoapsis._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcRadOfApoapsis._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcRadOfApoapsis._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcRadOfApoapsis.")

agcls.AgClassCatalog.add_catalog_entry("{C0BE1DA2-4518-4DDC-9E9F-C270EECC9CD9}", AgVAStateCalcRadOfApoapsis)


class AgVAStateCalcRadOfPeriapsis(IAgComponentInfo, IAgCloneable, IAgVAStateCalcRadOfPeriapsis):
    """RadiusOfPeriapsis Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcRadOfPeriapsis.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
        IAgVAStateCalcRadOfPeriapsis._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcRadOfPeriapsis._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcRadOfPeriapsis._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcRadOfPeriapsis.")

agcls.AgClassCatalog.add_catalog_entry("{3992203A-6D30-4430-AB47-184058ADB753}", AgVAStateCalcRadOfPeriapsis)


class AgVAStateCalcSemiMajorAxis(IAgComponentInfo, IAgCloneable, IAgVAStateCalcSemiMajorAxis):
    """SemiMajorAxis Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcSemiMajorAxis.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
        IAgVAStateCalcSemiMajorAxis._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcSemiMajorAxis._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcSemiMajorAxis._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcSemiMajorAxis.")

agcls.AgClassCatalog.add_catalog_entry("{2E89613E-B6BE-4708-9642-8C1A7734E695}", AgVAStateCalcSemiMajorAxis)


class AgVAStateCalcTimePastAscNode(IAgComponentInfo, IAgCloneable, IAgVAStateCalcTimePastAscNode):
    """TimePastAscNode Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcTimePastAscNode.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
        IAgVAStateCalcTimePastAscNode._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcTimePastAscNode._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcTimePastAscNode._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcTimePastAscNode.")

agcls.AgClassCatalog.add_catalog_entry("{0D19A235-5062-4D39-9D24-5BE1951E8982}", AgVAStateCalcTimePastAscNode)


class AgVAStateCalcTimePastPeriapsis(IAgComponentInfo, IAgCloneable, IAgVAStateCalcTimePastPeriapsis):
    """TimePastPeriapsis Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcTimePastPeriapsis.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
        IAgVAStateCalcTimePastPeriapsis._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcTimePastPeriapsis._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcTimePastPeriapsis._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcTimePastPeriapsis.")

agcls.AgClassCatalog.add_catalog_entry("{98C81CE6-0D11-4B0B-A6E6-3BD36BBCB98E}", AgVAStateCalcTimePastPeriapsis)


class AgVAStateCalcTrueAnomaly(IAgComponentInfo, IAgCloneable, IAgVAStateCalcTrueAnomaly):
    """TrueAnomaly Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcTrueAnomaly.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
        IAgVAStateCalcTrueAnomaly._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcTrueAnomaly._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcTrueAnomaly._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcTrueAnomaly.")

agcls.AgClassCatalog.add_catalog_entry("{4F084E44-4214-46EF-B67C-0A0B160F6475}", AgVAStateCalcTrueAnomaly)


class AgVAStateCalcDeltaV(IAgComponentInfo, IAgCloneable, IAgVAStateCalcDeltaV):
    """DeltaV Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcDeltaV.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
        IAgVAStateCalcDeltaV._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcDeltaV._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcDeltaV._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcDeltaV.")

agcls.AgClassCatalog.add_catalog_entry("{1609A9CD-8AA8-4F97-A00F-35F014FCCE44}", AgVAStateCalcDeltaV)


class AgVAStateCalcDeltaVSquared(IAgComponentInfo, IAgCloneable, IAgVAStateCalcDeltaVSquared):
    """DeltaV Squared Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcDeltaVSquared.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
        IAgVAStateCalcDeltaVSquared._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcDeltaVSquared._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcDeltaVSquared._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcDeltaVSquared.")

agcls.AgClassCatalog.add_catalog_entry("{CF7792EC-113B-45A7-AD9E-ECC908EBE1FD}", AgVAStateCalcDeltaVSquared)


class AgVAStateCalcMCSDeltaV(IAgComponentInfo, IAgCloneable, IAgVAStateCalcMCSDeltaV):
    """MCS DeltaV Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcMCSDeltaV.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
        IAgVAStateCalcMCSDeltaV._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcMCSDeltaV._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcMCSDeltaV._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcMCSDeltaV.")

agcls.AgClassCatalog.add_catalog_entry("{8E6614E7-7F46-4A9C-B155-FD8ED6C08D94}", AgVAStateCalcMCSDeltaV)


class AgVAStateCalcMCSDeltaVSquared(IAgComponentInfo, IAgCloneable, IAgVAStateCalcMCSDeltaVSquared):
    """MCS DeltaV Squared Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcMCSDeltaVSquared.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
        IAgVAStateCalcMCSDeltaVSquared._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcMCSDeltaVSquared._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcMCSDeltaVSquared._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcMCSDeltaVSquared.")

agcls.AgClassCatalog.add_catalog_entry("{DA10B4C1-62C7-4E1C-8B86-A355667DF9AE}", AgVAStateCalcMCSDeltaVSquared)


class AgVAStateCalcSequenceDeltaV(IAgComponentInfo, IAgCloneable, IAgVAStateCalcSequenceDeltaV):
    """Sequence DeltaV Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcSequenceDeltaV.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
        IAgVAStateCalcSequenceDeltaV._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcSequenceDeltaV._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcSequenceDeltaV._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcSequenceDeltaV.")

agcls.AgClassCatalog.add_catalog_entry("{138B7BC6-2338-46BE-83E9-5099C4D45811}", AgVAStateCalcSequenceDeltaV)


class AgVAStateCalcSequenceDeltaVSquared(IAgComponentInfo, IAgCloneable, IAgVAStateCalcSequenceDeltaVSquared):
    """Sequence DeltaV Squared Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcSequenceDeltaVSquared.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
        IAgVAStateCalcSequenceDeltaVSquared._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcSequenceDeltaVSquared._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcSequenceDeltaVSquared._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcSequenceDeltaVSquared.")

agcls.AgClassCatalog.add_catalog_entry("{27E104DF-B5FF-4E24-B397-06D264C0EADA}", AgVAStateCalcSequenceDeltaVSquared)


class AgVAStateCalcFuelMass(IAgComponentInfo, IAgCloneable, IAgVAStateCalcFuelMass):
    """FuelMass Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcFuelMass.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
        IAgVAStateCalcFuelMass._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcFuelMass._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcFuelMass._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcFuelMass.")

agcls.AgClassCatalog.add_catalog_entry("{3C37AFCA-696D-4A00-9E7B-7DCE928F0E7E}", AgVAStateCalcFuelMass)


class AgVAStateCalcDensity(IAgComponentInfo, IAgCloneable, IAgVAStateCalcDensity):
    """Density  Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcDensity.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
        IAgVAStateCalcDensity._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcDensity._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcDensity._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcDensity.")

agcls.AgClassCatalog.add_catalog_entry("{61D869F6-7B1C-4B5D-A046-AE495AE0FA7E}", AgVAStateCalcDensity)


class AgVAStateCalcInertialDeltaVMag(IAgComponentInfo, IAgCloneable, IAgVAStateCalcInertialDeltaVMag):
    """InertialDeltaVMag Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcInertialDeltaVMag.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
        IAgVAStateCalcInertialDeltaVMag._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcInertialDeltaVMag._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcInertialDeltaVMag._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcInertialDeltaVMag.")

agcls.AgClassCatalog.add_catalog_entry("{E12A8E9C-C11A-43D1-AE06-C659B87574D3}", AgVAStateCalcInertialDeltaVMag)


class AgVAStateCalcInertialDeltaVx(IAgComponentInfo, IAgCloneable, IAgVAStateCalcInertialDeltaVx):
    """InertialDeltaVx Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcInertialDeltaVx.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
        IAgVAStateCalcInertialDeltaVx._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcInertialDeltaVx._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcInertialDeltaVx._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcInertialDeltaVx.")

agcls.AgClassCatalog.add_catalog_entry("{43875512-BFCF-42E9-ACC8-BA7AE9E498A9}", AgVAStateCalcInertialDeltaVx)


class AgVAStateCalcInertialDeltaVy(IAgComponentInfo, IAgCloneable, IAgVAStateCalcInertialDeltaVy):
    """InertialDeltaVy Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcInertialDeltaVy.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
        IAgVAStateCalcInertialDeltaVy._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcInertialDeltaVy._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcInertialDeltaVy._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcInertialDeltaVy.")

agcls.AgClassCatalog.add_catalog_entry("{04689A0A-12D1-4362-B5C8-497CF2E4D72E}", AgVAStateCalcInertialDeltaVy)


class AgVAStateCalcInertialDeltaVz(IAgComponentInfo, IAgCloneable, IAgVAStateCalcInertialDeltaVz):
    """InertialDeltaVz Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcInertialDeltaVz.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
        IAgVAStateCalcInertialDeltaVz._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcInertialDeltaVz._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcInertialDeltaVz._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcInertialDeltaVz.")

agcls.AgClassCatalog.add_catalog_entry("{4A160495-31AE-42EE-8D2D-B945D10E86B8}", AgVAStateCalcInertialDeltaVz)


class AgVAStateCalcManeuverSpecificImpulse(IAgComponentInfo, IAgCloneable, IAgVAStateCalcManeuverSpecificImpulse):
    """ManeuverSpecificImpulse Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcManeuverSpecificImpulse.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
        IAgVAStateCalcManeuverSpecificImpulse._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcManeuverSpecificImpulse._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcManeuverSpecificImpulse._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcManeuverSpecificImpulse.")

agcls.AgClassCatalog.add_catalog_entry("{8FEFF2C1-6E15-4026-95B3-1985DB40C154}", AgVAStateCalcManeuverSpecificImpulse)


class AgVAStateCalcPressure(IAgComponentInfo, IAgCloneable, IAgVAStateCalcPressure):
    """Pressure Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcPressure.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
        IAgVAStateCalcPressure._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcPressure._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcPressure._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcPressure.")

agcls.AgClassCatalog.add_catalog_entry("{B12DCC30-F655-428A-BDE1-6D46900A7152}", AgVAStateCalcPressure)


class AgVAStateCalcTemperature(IAgComponentInfo, IAgCloneable, IAgVAStateCalcTemperature):
    """Temperature Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcTemperature.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
        IAgVAStateCalcTemperature._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcTemperature._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcTemperature._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcTemperature.")

agcls.AgClassCatalog.add_catalog_entry("{130771EF-F7FE-4CD3-B547-DE13FDF54E94}", AgVAStateCalcTemperature)


class AgVAStateCalcVectorY(IAgComponentInfo, IAgCloneable, IAgVAStateCalcVectorY):
    """VectorY Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcVectorY.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
        IAgVAStateCalcVectorY._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcVectorY._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcVectorY._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcVectorY.")

agcls.AgClassCatalog.add_catalog_entry("{7DC4C32E-1F4B-4B3E-A11C-7ECACCC602F8}", AgVAStateCalcVectorY)


class AgVAStateCalcVectorZ(IAgComponentInfo, IAgCloneable, IAgVAStateCalcVectorZ):
    """VectorZ Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcVectorZ.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
        IAgVAStateCalcVectorZ._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcVectorZ._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcVectorZ._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcVectorZ.")

agcls.AgClassCatalog.add_catalog_entry("{32E8F7E7-ECDE-4864-B380-D5A293458898}", AgVAStateCalcVectorZ)


class AgVAStateCalcMass(IAgComponentInfo, IAgCloneable, IAgVAStateCalcMass):
    """Mass Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcMass.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
        IAgVAStateCalcMass._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcMass._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcMass._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcMass.")

agcls.AgClassCatalog.add_catalog_entry("{99DD4422-3EB6-455B-9FE8-459FD65D2431}", AgVAStateCalcMass)


class AgVAStateCalcManeuverTotalMassFlowRate(IAgComponentInfo, IAgCloneable, IAgVAStateCalcManeuverTotalMassFlowRate):
    """ManeuverTotalMassFlowRate Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcManeuverTotalMassFlowRate.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
        IAgVAStateCalcManeuverTotalMassFlowRate._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcManeuverTotalMassFlowRate._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcManeuverTotalMassFlowRate._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcManeuverTotalMassFlowRate.")

agcls.AgClassCatalog.add_catalog_entry("{049DA4A7-E8EB-4C62-AF0F-FFF566CB662F}", AgVAStateCalcManeuverTotalMassFlowRate)


class AgVAStateCalcAbsoluteValue(IAgComponentInfo, IAgCloneable, IAgVAStateCalcAbsoluteValue):
    """AbsoluteValue Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcAbsoluteValue.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
        IAgVAStateCalcAbsoluteValue._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcAbsoluteValue._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcAbsoluteValue._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcAbsoluteValue.")

agcls.AgClassCatalog.add_catalog_entry("{9CA8D97F-2F2D-4E66-B141-D5F8E3524B56}", AgVAStateCalcAbsoluteValue)


class AgVAStateCalcDifference(IAgComponentInfo, IAgCloneable, IAgVAStateCalcDifference):
    """Difference Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcDifference.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
        IAgVAStateCalcDifference._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcDifference._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcDifference._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcDifference.")

agcls.AgClassCatalog.add_catalog_entry("{8D579CBD-FB96-4CA1-9276-0ECF1E8A2854}", AgVAStateCalcDifference)


class AgVAStateCalcDifferenceOtherSegment(IAgComponentInfo, IAgCloneable, IAgVAStateCalcDifferenceOtherSegment):
    """DifferenceOtherSegment Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcDifferenceOtherSegment.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
        IAgVAStateCalcDifferenceOtherSegment._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcDifferenceOtherSegment._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcDifferenceOtherSegment._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcDifferenceOtherSegment.")

agcls.AgClassCatalog.add_catalog_entry("{36A3C1BA-F2AB-4F4C-887C-CF81C4E2BE52}", AgVAStateCalcDifferenceOtherSegment)


class AgVAStateCalcPosDifferenceOtherSegment(IAgComponentInfo, IAgCloneable, IAgVAStateCalcPosDifferenceOtherSegment):
    """PosDifferenceOtherSegment Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcPosDifferenceOtherSegment.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
        IAgVAStateCalcPosDifferenceOtherSegment._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcPosDifferenceOtherSegment._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcPosDifferenceOtherSegment._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcPosDifferenceOtherSegment.")

agcls.AgClassCatalog.add_catalog_entry("{9C09C061-9C4A-4B14-A9DC-C802A44A8AF1}", AgVAStateCalcPosDifferenceOtherSegment)


class AgVAStateCalcVelDifferenceOtherSegment(IAgComponentInfo, IAgCloneable, IAgVAStateCalcVelDifferenceOtherSegment):
    """VelDifferenceOtherSegment Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcVelDifferenceOtherSegment.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
        IAgVAStateCalcVelDifferenceOtherSegment._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcVelDifferenceOtherSegment._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcVelDifferenceOtherSegment._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcVelDifferenceOtherSegment.")

agcls.AgClassCatalog.add_catalog_entry("{C884D996-39EF-413B-9CF7-A8C927291B66}", AgVAStateCalcVelDifferenceOtherSegment)


class AgVAStateCalcPosVelDifferenceOtherSegment(IAgComponentInfo, IAgCloneable, IAgVAStateCalcPosVelDifferenceOtherSegment):
    """PosVelDifferenceOtherSegment Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcPosVelDifferenceOtherSegment.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
        IAgVAStateCalcPosVelDifferenceOtherSegment._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcPosVelDifferenceOtherSegment._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcPosVelDifferenceOtherSegment._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcPosVelDifferenceOtherSegment.")

agcls.AgClassCatalog.add_catalog_entry("{C7AFF6F3-C2C7-4132-BEB5-9A714E763A11}", AgVAStateCalcPosVelDifferenceOtherSegment)


class AgVAStateCalcValueAtSegment(IAgComponentInfo, IAgCloneable, IAgVAStateCalcValueAtSegment):
    """ValueAtSegment Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcValueAtSegment.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
        IAgVAStateCalcValueAtSegment._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcValueAtSegment._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcValueAtSegment._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcValueAtSegment.")

agcls.AgClassCatalog.add_catalog_entry("{80E8AAA2-2782-4176-9656-61AC3485096B}", AgVAStateCalcValueAtSegment)


class AgVAStateCalcMaxValue(IAgComponentInfo, IAgCloneable, IAgVAStateCalcMaxValue):
    """MaximumValue Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcMaxValue.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
        IAgVAStateCalcMaxValue._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcMaxValue._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcMaxValue._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcMaxValue.")

agcls.AgClassCatalog.add_catalog_entry("{CC82EA8F-373C-4A0D-A753-96CFD4AE73CF}", AgVAStateCalcMaxValue)


class AgVAStateCalcMinValue(IAgComponentInfo, IAgCloneable, IAgVAStateCalcMinValue):
    """MinimumValue Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcMinValue.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
        IAgVAStateCalcMinValue._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcMinValue._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcMinValue._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcMinValue.")

agcls.AgClassCatalog.add_catalog_entry("{F9C57411-482D-49E9-BE13-CC93E34FB0D4}", AgVAStateCalcMinValue)


class AgVAStateCalcMeanValue(IAgComponentInfo, IAgCloneable, IAgVAStateCalcMeanValue):
    """MeanValue Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcMeanValue.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
        IAgVAStateCalcMeanValue._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcMeanValue._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcMeanValue._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcMeanValue.")

agcls.AgClassCatalog.add_catalog_entry("{9B5472A7-799A-43E6-BDE7-99CB2C8C6E0C}", AgVAStateCalcMeanValue)


class AgVAStateCalcMedianValue(IAgComponentInfo, IAgCloneable, IAgVAStateCalcMedianValue):
    """MedianValue Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcMedianValue.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
        IAgVAStateCalcMedianValue._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcMedianValue._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcMedianValue._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcMedianValue.")

agcls.AgClassCatalog.add_catalog_entry("{CE3A18D7-5A69-45A1-AA76-AD7C2CF5259A}", AgVAStateCalcMedianValue)


class AgVAStateCalcStandardDeviation(IAgComponentInfo, IAgCloneable, IAgVAStateCalcStandardDeviation):
    """StandardDeviation Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcStandardDeviation.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
        IAgVAStateCalcStandardDeviation._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcStandardDeviation._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcStandardDeviation._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcStandardDeviation.")

agcls.AgClassCatalog.add_catalog_entry("{B33D3070-060B-4F32-AF2A-1F9BDD57F365}", AgVAStateCalcStandardDeviation)


class AgVAStateCalcNegative(IAgComponentInfo, IAgCloneable, IAgVAStateCalcNegative):
    """Negative Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcNegative.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
        IAgVAStateCalcNegative._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcNegative._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcNegative._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcNegative.")

agcls.AgClassCatalog.add_catalog_entry("{3E13FEC3-D60F-4203-86F2-42BCBC8EAFDF}", AgVAStateCalcNegative)


class AgVAStateCalcEccentricity(IAgComponentInfo, IAgCloneable, IAgVAStateCalcEccentricity):
    """Eccentricity Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcEccentricity.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
        IAgVAStateCalcEccentricity._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcEccentricity._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcEccentricity._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcEccentricity.")

agcls.AgClassCatalog.add_catalog_entry("{A9D98D60-E73E-4C59-9328-DFC5A12EF52B}", AgVAStateCalcEccentricity)


class AgVAStateCalcMeanAnomaly(IAgComponentInfo, IAgCloneable, IAgVAStateCalcMeanAnomaly):
    """MeanAnomaly Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcMeanAnomaly.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
        IAgVAStateCalcMeanAnomaly._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcMeanAnomaly._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcMeanAnomaly._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcMeanAnomaly.")

agcls.AgClassCatalog.add_catalog_entry("{8787D9AA-FBE1-43E4-932F-CB7B98D23D5B}", AgVAStateCalcMeanAnomaly)


class AgVAStateCalcRAAN(IAgComponentInfo, IAgCloneable, IAgVAStateCalcRAAN):
    """RAAN Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcRAAN.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
        IAgVAStateCalcRAAN._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcRAAN._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcRAAN._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcRAAN.")

agcls.AgClassCatalog.add_catalog_entry("{05B5185A-C8F3-4B02-AE8B-B5D58744323C}", AgVAStateCalcRAAN)


class AgVABDotRCalc(IAgComponentInfo, IAgCloneable, IAgVABDotRCalc):
    """BDotR Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVABDotRCalc.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
        IAgVABDotRCalc._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVABDotRCalc._get_property(self, attrname) is not None: found_prop = IAgVABDotRCalc._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVABDotRCalc.")

agcls.AgClassCatalog.add_catalog_entry("{18A16428-2959-4220-A4A2-571D1F5A67FC}", AgVABDotRCalc)


class AgVABDotTCalc(IAgComponentInfo, IAgCloneable, IAgVABDotTCalc):
    """BDotT Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVABDotTCalc.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
        IAgVABDotTCalc._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVABDotTCalc._get_property(self, attrname) is not None: found_prop = IAgVABDotTCalc._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVABDotTCalc.")

agcls.AgClassCatalog.add_catalog_entry("{59ACA04A-9B85-43DF-82FF-B58CFD985158}", AgVABDotTCalc)


class AgVABMagCalc(IAgComponentInfo, IAgCloneable, IAgVABMagCalc):
    """BMag Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVABMagCalc.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
        IAgVABMagCalc._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVABMagCalc._get_property(self, attrname) is not None: found_prop = IAgVABMagCalc._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVABMagCalc.")

agcls.AgClassCatalog.add_catalog_entry("{87EF9CCA-2D0E-4742-8354-79E977FFD067}", AgVABMagCalc)


class AgVABThetaCalc(IAgComponentInfo, IAgCloneable, IAgVABThetaCalc):
    """BTheta Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVABThetaCalc.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
        IAgVABThetaCalc._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVABThetaCalc._get_property(self, attrname) is not None: found_prop = IAgVABThetaCalc._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVABThetaCalc.")

agcls.AgClassCatalog.add_catalog_entry("{C5C6EC0C-6F2D-4DAB-9DCD-2A8FD810C642}", AgVABThetaCalc)


class AgVAStateCalcDeltaDec(IAgComponentInfo, IAgCloneable, IAgVAStateCalcDeltaDec):
    """DeltaDec Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcDeltaDec.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
        IAgVAStateCalcDeltaDec._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcDeltaDec._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcDeltaDec._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcDeltaDec.")

agcls.AgClassCatalog.add_catalog_entry("{4EA9E58A-9900-41CF-BFA8-8BF7849C9187}", AgVAStateCalcDeltaDec)


class AgVAStateCalcDeltaRA(IAgComponentInfo, IAgCloneable, IAgVAStateCalcDeltaRA):
    """DeltaRA Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcDeltaRA.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
        IAgVAStateCalcDeltaRA._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcDeltaRA._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcDeltaRA._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcDeltaRA.")

agcls.AgClassCatalog.add_catalog_entry("{3B1EAA2E-8FA2-4EF2-B7AB-377157AD0505}", AgVAStateCalcDeltaRA)


class AgVAStateCalcBetaAngle(IAgComponentInfo, IAgCloneable, IAgVAStateCalcBetaAngle):
    """BetaAngle Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcBetaAngle.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
        IAgVAStateCalcBetaAngle._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcBetaAngle._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcBetaAngle._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcBetaAngle.")

agcls.AgClassCatalog.add_catalog_entry("{B51815A6-AEDE-468C-B282-EEA255DAF822}", AgVAStateCalcBetaAngle)


class AgVAStateCalcLocalApparentSolarLon(IAgComponentInfo, IAgCloneable, IAgVAStateCalcLocalApparentSolarLon):
    """LocalApparentSolarLon Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcLocalApparentSolarLon.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
        IAgVAStateCalcLocalApparentSolarLon._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcLocalApparentSolarLon._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcLocalApparentSolarLon._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcLocalApparentSolarLon.")

agcls.AgClassCatalog.add_catalog_entry("{E7AC3C2D-5E4C-447F-8A56-C9CFCDBB2143}", AgVAStateCalcLocalApparentSolarLon)


class AgVAStateCalcLonOfPeriapsis(IAgComponentInfo, IAgCloneable, IAgVAStateCalcLonOfPeriapsis):
    """LonOfPeriapsis Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcLonOfPeriapsis.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
        IAgVAStateCalcLonOfPeriapsis._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcLonOfPeriapsis._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcLonOfPeriapsis._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcLonOfPeriapsis.")

agcls.AgClassCatalog.add_catalog_entry("{3DBA2AA2-6A87-4ACE-9F8D-C03001E1DBD1}", AgVAStateCalcLonOfPeriapsis)


class AgVAStateCalcOrbitStateValue(IAgComponentInfo, IAgCloneable, IAgVAStateCalcOrbitStateValue):
    """OrbitStateValue Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcOrbitStateValue.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
        IAgVAStateCalcOrbitStateValue._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcOrbitStateValue._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcOrbitStateValue._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcOrbitStateValue.")

agcls.AgClassCatalog.add_catalog_entry("{10879C56-0D1C-4E8E-B7CA-F059FB935366}", AgVAStateCalcOrbitStateValue)


class AgVAStateCalcSignedEccentricity(IAgComponentInfo, IAgCloneable, IAgVAStateCalcSignedEccentricity):
    """SignedEccentricity Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcSignedEccentricity.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
        IAgVAStateCalcSignedEccentricity._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcSignedEccentricity._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcSignedEccentricity._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcSignedEccentricity.")

agcls.AgClassCatalog.add_catalog_entry("{469C3DB7-C322-480A-82E2-4763AD59E470}", AgVAStateCalcSignedEccentricity)


class AgVAStateCalcInclination(IAgComponentInfo, IAgCloneable, IAgVAStateCalcInclination):
    """Inclination Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcInclination.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
        IAgVAStateCalcInclination._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcInclination._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcInclination._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcInclination.")

agcls.AgClassCatalog.add_catalog_entry("{1B8A0935-D9A7-4710-8C02-8A827F7D85DF}", AgVAStateCalcInclination)


class AgVAStateCalcTrueLon(IAgComponentInfo, IAgCloneable, IAgVAStateCalcTrueLon):
    """TrueLong Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcTrueLon.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
        IAgVAStateCalcTrueLon._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcTrueLon._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcTrueLon._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcTrueLon.")

agcls.AgClassCatalog.add_catalog_entry("{E1D740A4-341A-40AA-83E8-4456207A0D98}", AgVAStateCalcTrueLon)


class AgVAStateCalcPower(IAgComponentInfo, IAgCloneable, IAgVAStateCalcPower):
    """Power Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcPower.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
        IAgVAStateCalcPower._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcPower._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcPower._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcPower.")

agcls.AgClassCatalog.add_catalog_entry("{AE828349-BB26-44C8-9603-ED89F108DF82}", AgVAStateCalcPower)


class AgVAStateCalcRelMotion(IAgComponentInfo, IAgCloneable, IAgVAStateCalcRelMotion):
    """Relative Motion Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcRelMotion.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
        IAgVAStateCalcRelMotion._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcRelMotion._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcRelMotion._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcRelMotion.")

agcls.AgClassCatalog.add_catalog_entry("{1BE88040-9A43-40B0-9A3F-28C1AE4FCC33}", AgVAStateCalcRelMotion)


class AgVAStateCalcSolarBetaAngle(IAgComponentInfo, IAgCloneable, IAgVAStateCalcSolarBetaAngle):
    """Solar Beta Angle objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcSolarBetaAngle.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
        IAgVAStateCalcSolarBetaAngle._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcSolarBetaAngle._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcSolarBetaAngle._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcSolarBetaAngle.")

agcls.AgClassCatalog.add_catalog_entry("{A2AFBF81-9B6D-4675-B8A3-2995530B257F}", AgVAStateCalcSolarBetaAngle)


class AgVAStateCalcSolarInPlaneAngle(IAgComponentInfo, IAgCloneable, IAgVAStateCalcSolarInPlaneAngle):
    """Solar In Plane Angle objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcSolarInPlaneAngle.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
        IAgVAStateCalcSolarInPlaneAngle._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcSolarInPlaneAngle._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcSolarInPlaneAngle._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcSolarInPlaneAngle.")

agcls.AgClassCatalog.add_catalog_entry("{AF76B597-61AE-41E7-B7F9-47AB9FA06A23}", AgVAStateCalcSolarInPlaneAngle)


class AgVAStateCalcRelPosDecAngle(IAgComponentInfo, IAgCloneable, IAgVAStateCalcRelPosDecAngle):
    """Relative Position Declination Angle objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcRelPosDecAngle.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
        IAgVAStateCalcRelPosDecAngle._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcRelPosDecAngle._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcRelPosDecAngle._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcRelPosDecAngle.")

agcls.AgClassCatalog.add_catalog_entry("{75D53DB6-15AE-43CE-8ABC-5B8568CEE035}", AgVAStateCalcRelPosDecAngle)


class AgVAStateCalcRelPosInPlaneAngle(IAgComponentInfo, IAgCloneable, IAgVAStateCalcRelPosInPlaneAngle):
    """Relative Position Declination Angle objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcRelPosInPlaneAngle.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
        IAgVAStateCalcRelPosInPlaneAngle._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcRelPosInPlaneAngle._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcRelPosInPlaneAngle._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcRelPosInPlaneAngle.")

agcls.AgClassCatalog.add_catalog_entry("{4F7C4C55-BAB3-484D-B110-4A34A6F1A006}", AgVAStateCalcRelPosInPlaneAngle)


class AgVAStateCalcRelativeInclination(IAgComponentInfo, IAgCloneable, IAgVAStateCalcRelativeInclination):
    """Relative Inclination Angle objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcRelativeInclination.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
        IAgVAStateCalcRelativeInclination._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcRelativeInclination._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcRelativeInclination._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcRelativeInclination.")

agcls.AgClassCatalog.add_catalog_entry("{B2BAF85F-8B05-4261-8E40-428FD9F6A237}", AgVAStateCalcRelativeInclination)


class AgVAStateCalcCurvilinearRelMotion(IAgComponentInfo, IAgCloneable, IAgVAStateCalcCurvilinearRelMotion):
    """Curvilinear Relative Motion objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcCurvilinearRelMotion.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
        IAgVAStateCalcCurvilinearRelMotion._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcCurvilinearRelMotion._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcCurvilinearRelMotion._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcCurvilinearRelMotion.")

agcls.AgClassCatalog.add_catalog_entry("{1FBB6D32-A2AD-4914-940D-30E548147C35}", AgVAStateCalcCurvilinearRelMotion)


class AgVAStateCalcCustomFunction(IAgComponentInfo, IAgCloneable, IAgVAStateCalcCustomFunction):
    """Custom Function Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcCustomFunction.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
        IAgVAStateCalcCustomFunction._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcCustomFunction._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcCustomFunction._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcCustomFunction.")

agcls.AgClassCatalog.add_catalog_entry("{85022653-0E1C-4116-AC71-AE8AE17AD8AB}", AgVAStateCalcCustomFunction)


class AgVAStateCalcScript(IAgComponentInfo, IAgCloneable, IAgVAStateCalcScript):
    """Script Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcScript.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
        IAgVAStateCalcScript._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcScript._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcScript._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcScript.")

agcls.AgClassCatalog.add_catalog_entry("{5D44239C-5296-4B55-B0A6-810D2A709B20}", AgVAStateCalcScript)


class AgVAStateCalcCd(IAgComponentInfo, IAgCloneable, IAgVAStateCalcCd):
    """Cd Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcCd.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
        IAgVAStateCalcCd._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcCd._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcCd._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcCd.")

agcls.AgClassCatalog.add_catalog_entry("{9672871F-3A83-41E8-851E-509DD513C3E3}", AgVAStateCalcCd)


class AgVAStateCalcCr(IAgComponentInfo, IAgCloneable, IAgVAStateCalcCr):
    """Cr Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcCr.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
        IAgVAStateCalcCr._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcCr._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcCr._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcCr.")

agcls.AgClassCatalog.add_catalog_entry("{1AAFF1B0-616E-4A1C-9CE0-075D24C3B170}", AgVAStateCalcCr)


class AgVAStateCalcDragArea(IAgComponentInfo, IAgCloneable, IAgVAStateCalcDragArea):
    """DragArea Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcDragArea.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
        IAgVAStateCalcDragArea._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcDragArea._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcDragArea._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcDragArea.")

agcls.AgClassCatalog.add_catalog_entry("{3ED247EF-6E67-4883-A2FE-B2A7BF19E14E}", AgVAStateCalcDragArea)


class AgVAStateCalcRadiationPressureArea(IAgComponentInfo, IAgCloneable, IAgVAStateCalcRadiationPressureArea):
    """RadPressureArea Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcRadiationPressureArea.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
        IAgVAStateCalcRadiationPressureArea._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcRadiationPressureArea._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcRadiationPressureArea._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcRadiationPressureArea.")

agcls.AgClassCatalog.add_catalog_entry("{C7973875-9EFC-41FC-98CF-CCB7AE0C611F}", AgVAStateCalcRadiationPressureArea)


class AgVAStateCalcRadiationPressureCoefficient(IAgComponentInfo, IAgCloneable, IAgVAStateCalcRadiationPressureCoefficient):
    """RadiationPressureCoefficient Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcRadiationPressureCoefficient.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
        IAgVAStateCalcRadiationPressureCoefficient._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcRadiationPressureCoefficient._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcRadiationPressureCoefficient._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcRadiationPressureCoefficient.")

agcls.AgClassCatalog.add_catalog_entry("{7FDC4AD9-E570-4820-BFB3-939EA5FF7D82}", AgVAStateCalcRadiationPressureCoefficient)


class AgVAStateCalcSRPArea(IAgComponentInfo, IAgCloneable, IAgVAStateCalcSRPArea):
    """SRPArea Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcSRPArea.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
        IAgVAStateCalcSRPArea._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcSRPArea._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcSRPArea._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcSRPArea.")

agcls.AgClassCatalog.add_catalog_entry("{6A0BF963-BD8C-46F9-8C87-F6E0FF16D057}", AgVAStateCalcSRPArea)


class AgVAStateCalcCosOfVerticalFPA(IAgComponentInfo, IAgCloneable, IAgVAStateCalcCosOfVerticalFPA):
    """CosineOfVerticalFPA Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcCosOfVerticalFPA.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
        IAgVAStateCalcCosOfVerticalFPA._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcCosOfVerticalFPA._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcCosOfVerticalFPA._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcCosOfVerticalFPA.")

agcls.AgClassCatalog.add_catalog_entry("{779C8E84-1667-442C-BFD9-F20271803FE5}", AgVAStateCalcCosOfVerticalFPA)


class AgVAStateCalcDec(IAgComponentInfo, IAgCloneable, IAgVAStateCalcDec):
    """Dec Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcDec.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
        IAgVAStateCalcDec._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcDec._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcDec._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcDec.")

agcls.AgClassCatalog.add_catalog_entry("{3F821D80-1156-46EB-950F-FF965EB54C3C}", AgVAStateCalcDec)


class AgVAStateCalcFPA(IAgComponentInfo, IAgCloneable, IAgVAStateCalcFPA):
    """FPA Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcFPA.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
        IAgVAStateCalcFPA._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcFPA._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcFPA._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcFPA.")

agcls.AgClassCatalog.add_catalog_entry("{BAB717ED-41A9-4D2A-ADB3-F2D0F5BD67D6}", AgVAStateCalcFPA)


class AgVAStateCalcRMag(IAgComponentInfo, IAgCloneable, IAgVAStateCalcRMag):
    """RMag Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcRMag.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
        IAgVAStateCalcRMag._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcRMag._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcRMag._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcRMag.")

agcls.AgClassCatalog.add_catalog_entry("{4EED7719-E95B-4482-936C-9940FF6EE774}", AgVAStateCalcRMag)


class AgVAStateCalcRA(IAgComponentInfo, IAgCloneable, IAgVAStateCalcRA):
    """RA Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcRA.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
        IAgVAStateCalcRA._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcRA._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcRA._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcRA.")

agcls.AgClassCatalog.add_catalog_entry("{2482280B-347A-49C7-BEEB-044CD8F8C899}", AgVAStateCalcRA)


class AgVAStateCalcVMag(IAgComponentInfo, IAgCloneable, IAgVAStateCalcVMag):
    """VMag Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcVMag.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
        IAgVAStateCalcVMag._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcVMag._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcVMag._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcVMag.")

agcls.AgClassCatalog.add_catalog_entry("{B2DD548E-6DD5-4C33-9EDC-8275A4711B70}", AgVAStateCalcVMag)


class AgVAStateCalcVelAz(IAgComponentInfo, IAgCloneable, IAgVAStateCalcVelAz):
    """Velocity Azimuth Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcVelAz.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
        IAgVAStateCalcVelAz._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcVelAz._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcVelAz._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcVelAz.")

agcls.AgClassCatalog.add_catalog_entry("{51BBAEBF-08A7-47B0-82A2-49DD3B47C0DA}", AgVAStateCalcVelAz)


class AgVAStateCalcC3Energy(IAgComponentInfo, IAgCloneable, IAgVAStateCalcC3Energy):
    """C3Energy Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcC3Energy.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
        IAgVAStateCalcC3Energy._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcC3Energy._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcC3Energy._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcC3Energy.")

agcls.AgClassCatalog.add_catalog_entry("{3F05AC7C-3565-44C8-BD75-A9F26F5DEBE7}", AgVAStateCalcC3Energy)


class AgVAStateCalcInAsympDec(IAgComponentInfo, IAgCloneable, IAgVAStateCalcInAsympDec):
    """InAsymptoteDec Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcInAsympDec.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
        IAgVAStateCalcInAsympDec._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcInAsympDec._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcInAsympDec._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcInAsympDec.")

agcls.AgClassCatalog.add_catalog_entry("{74C3D08C-5CBE-4182-9C50-5607CFAE3C29}", AgVAStateCalcInAsympDec)


class AgVAStateCalcInAsympRA(IAgComponentInfo, IAgCloneable, IAgVAStateCalcInAsympRA):
    """InAsymptoteRA Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcInAsympRA.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
        IAgVAStateCalcInAsympRA._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcInAsympRA._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcInAsympRA._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcInAsympRA.")

agcls.AgClassCatalog.add_catalog_entry("{FA6F2B49-B25B-4726-A72B-EB01DA9A40FA}", AgVAStateCalcInAsympRA)


class AgVAStateCalcInVelAzAtPeriapsis(IAgComponentInfo, IAgCloneable, IAgVAStateCalcInVelAzAtPeriapsis):
    """InVelocityAzAtPeriapsis Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcInVelAzAtPeriapsis.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
        IAgVAStateCalcInVelAzAtPeriapsis._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcInVelAzAtPeriapsis._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcInVelAzAtPeriapsis._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcInVelAzAtPeriapsis.")

agcls.AgClassCatalog.add_catalog_entry("{F425CF2E-5BD8-47E0-86FB-8E6911450DC2}", AgVAStateCalcInVelAzAtPeriapsis)


class AgVAStateCalcOutAsympDec(IAgComponentInfo, IAgCloneable, IAgVAStateCalcOutAsympDec):
    """OutAsymptoteDec Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcOutAsympDec.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
        IAgVAStateCalcOutAsympDec._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcOutAsympDec._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcOutAsympDec._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcOutAsympDec.")

agcls.AgClassCatalog.add_catalog_entry("{E6479974-FCA0-4BB3-9218-5EA7FBC6B309}", AgVAStateCalcOutAsympDec)


class AgVAStateCalcOutAsympRA(IAgComponentInfo, IAgCloneable, IAgVAStateCalcOutAsympRA):
    """OutAsymptoteRA Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcOutAsympRA.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
        IAgVAStateCalcOutAsympRA._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcOutAsympRA._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcOutAsympRA._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcOutAsympRA.")

agcls.AgClassCatalog.add_catalog_entry("{5FD80B29-8811-4669-9830-E00AC6A65B7A}", AgVAStateCalcOutAsympRA)


class AgVAStateCalcOutVelAzAtPeriapsis(IAgComponentInfo, IAgCloneable, IAgVAStateCalcOutVelAzAtPeriapsis):
    """OutVelocityAzAtPeriapsis Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcOutVelAzAtPeriapsis.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
        IAgVAStateCalcOutVelAzAtPeriapsis._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcOutVelAzAtPeriapsis._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcOutVelAzAtPeriapsis._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcOutVelAzAtPeriapsis.")

agcls.AgClassCatalog.add_catalog_entry("{6FACAD87-7615-433A-BED5-B79F771BF045}", AgVAStateCalcOutVelAzAtPeriapsis)


class AgVAStateCalcDuration(IAgComponentInfo, IAgCloneable, IAgVAStateCalcDuration):
    """Duration Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcDuration.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
        IAgVAStateCalcDuration._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcDuration._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcDuration._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcDuration.")

agcls.AgClassCatalog.add_catalog_entry("{8A31F99F-B1EA-4818-B3F7-6485F142BEDA}", AgVAStateCalcDuration)


class AgVAStateCalcUserValue(IAgVAStateCalcUserValue, IAgComponentInfo, IAgCloneable):
    """CoClass StateCalcUserValue."""
    def __init__(self, sourceObject=None):
        IAgVAStateCalcUserValue.__init__(self, sourceObject)
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAStateCalcUserValue._private_init(self, intf)
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAStateCalcUserValue._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcUserValue._get_property(self, attrname)
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcUserValue.")

agcls.AgClassCatalog.add_catalog_entry("{DF6CDC8E-3271-4671-851E-6D8916364D04}", AgVAStateCalcUserValue)


class AgVAStateCalcCrdnAngle(IAgComponentInfo, IAgCloneable, IAgVAStateCalcCrdnAngle):
    """Vector Geometry Tool Angle Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcCrdnAngle.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
        IAgVAStateCalcCrdnAngle._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcCrdnAngle._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcCrdnAngle._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcCrdnAngle.")

agcls.AgClassCatalog.add_catalog_entry("{382A3B1B-6CB2-4E54-A066-C0B62EF241C8}", AgVAStateCalcCrdnAngle)


class AgVAStateCalcAngle(IAgComponentInfo, IAgCloneable, IAgVAStateCalcAngle):
    """Angle Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcAngle.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
        IAgVAStateCalcAngle._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcAngle._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcAngle._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcAngle.")

agcls.AgClassCatalog.add_catalog_entry("{C19A5EF8-79AF-48F2-9D09-86AE97CC689A}", AgVAStateCalcAngle)


class AgVAStateCalcDotProduct(IAgComponentInfo, IAgCloneable, IAgVAStateCalcDotProduct):
    """DotProduct Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcDotProduct.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
        IAgVAStateCalcDotProduct._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcDotProduct._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcDotProduct._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcDotProduct.")

agcls.AgClassCatalog.add_catalog_entry("{B8E6B301-8959-44D9-B9EC-70FEA1B5B12D}", AgVAStateCalcDotProduct)


class AgVAStateCalcVectorDec(IAgComponentInfo, IAgCloneable, IAgVAStateCalcVectorDec):
    """VectorDec Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcVectorDec.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
        IAgVAStateCalcVectorDec._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcVectorDec._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcVectorDec._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcVectorDec.")

agcls.AgClassCatalog.add_catalog_entry("{F5F90539-F030-4840-A78F-7BFE9FE6852F}", AgVAStateCalcVectorDec)


class AgVAStateCalcVectorMag(IAgComponentInfo, IAgCloneable, IAgVAStateCalcVectorMag):
    """VectorMag Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcVectorMag.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
        IAgVAStateCalcVectorMag._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcVectorMag._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcVectorMag._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcVectorMag.")

agcls.AgClassCatalog.add_catalog_entry("{AE89CDB6-F735-4DAB-88D3-7F2DD834C1E4}", AgVAStateCalcVectorMag)


class AgVAStateCalcVectorRA(IAgComponentInfo, IAgCloneable, IAgVAStateCalcVectorRA):
    """VectorRA Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcVectorRA.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
        IAgVAStateCalcVectorRA._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcVectorRA._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcVectorRA._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcVectorRA.")

agcls.AgClassCatalog.add_catalog_entry("{CE22AAAD-F51C-4E90-8E74-5DCEE756020C}", AgVAStateCalcVectorRA)


class AgVAStateCalcVectorX(IAgComponentInfo, IAgCloneable, IAgVAStateCalcVectorX):
    """VectorX Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcVectorX.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
        IAgVAStateCalcVectorX._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcVectorX._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcVectorX._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcVectorX.")

agcls.AgClassCatalog.add_catalog_entry("{9CC56135-C9E6-4A99-B0E2-70EA81E9AB08}", AgVAStateCalcVectorX)


class AgVAStateCalcOnePtAccess(IAgComponentInfo, IAgCloneable, IAgVAStateCalcOnePtAccess):
    """Access Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcOnePtAccess.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
        IAgVAStateCalcOnePtAccess._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcOnePtAccess._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcOnePtAccess._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcOnePtAccess.")

agcls.AgClassCatalog.add_catalog_entry("{19CBB92F-B6BE-4F6B-A2F9-056AD2EF7940}", AgVAStateCalcOnePtAccess)


class AgVAStateCalcDifferenceAcrossSegmentsOtherSat(IAgComponentInfo, IAgCloneable, IAgVAStateCalcDifferenceAcrossSegmentsOtherSat):
    """DifferenceAcrossSegmentsOtherSat Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcDifferenceAcrossSegmentsOtherSat.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
        IAgVAStateCalcDifferenceAcrossSegmentsOtherSat._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcDifferenceAcrossSegmentsOtherSat._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcDifferenceAcrossSegmentsOtherSat._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcDifferenceAcrossSegmentsOtherSat.")

agcls.AgClassCatalog.add_catalog_entry("{83FAC79B-477F-4CD0-83AD-A0A2A9ECA782}", AgVAStateCalcDifferenceAcrossSegmentsOtherSat)


class AgVAStateCalcValueAtSegmentOtherSat(IAgComponentInfo, IAgCloneable, IAgVAStateCalcValueAtSegmentOtherSat):
    """ValueAtSegmentOtherSat Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcValueAtSegmentOtherSat.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
        IAgVAStateCalcValueAtSegmentOtherSat._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcValueAtSegmentOtherSat._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcValueAtSegmentOtherSat._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcValueAtSegmentOtherSat.")

agcls.AgClassCatalog.add_catalog_entry("{5F9F3194-5AC1-46C9-8FB9-F076747180E7}", AgVAStateCalcValueAtSegmentOtherSat)


class AgVAStateCalcRARate(IAgVAStateCalcRARate, IAgComponentInfo, IAgCloneable):
    """RightAscensionRate Calc objects."""
    def __init__(self, sourceObject=None):
        IAgVAStateCalcRARate.__init__(self, sourceObject)
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAStateCalcRARate._private_init(self, intf)
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAStateCalcRARate._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcRARate._get_property(self, attrname)
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcRARate.")

agcls.AgClassCatalog.add_catalog_entry("{3B9AD865-10A2-4B52-BDC7-7BE11A2CD36D}", AgVAStateCalcRARate)


class AgVAStateCalcDecRate(IAgVAStateCalcDecRate, IAgComponentInfo, IAgCloneable):
    """DeclinationRate Calc objects."""
    def __init__(self, sourceObject=None):
        IAgVAStateCalcDecRate.__init__(self, sourceObject)
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAStateCalcDecRate._private_init(self, intf)
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAStateCalcDecRate._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcDecRate._get_property(self, attrname)
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcDecRate.")

agcls.AgClassCatalog.add_catalog_entry("{CCE41365-840A-4B9A-967F-A7D1E761B2DF}", AgVAStateCalcDecRate)


class AgVAStateCalcGravitationalParameter(IAgVAStateCalcGravitationalParameter, IAgComponentInfo, IAgCloneable):
    """GravitationalParameter Calc objects."""
    def __init__(self, sourceObject=None):
        IAgVAStateCalcGravitationalParameter.__init__(self, sourceObject)
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAStateCalcGravitationalParameter._private_init(self, intf)
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAStateCalcGravitationalParameter._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcGravitationalParameter._get_property(self, attrname)
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcGravitationalParameter.")

agcls.AgClassCatalog.add_catalog_entry("{0B3B8CA7-E0BC-4A0E-A0BE-026946EBF0A6}", AgVAStateCalcGravitationalParameter)


class AgVAStateCalcReferenceRadius(IAgVAStateCalcReferenceRadius, IAgComponentInfo, IAgCloneable):
    """Reference Radius Calc objects."""
    def __init__(self, sourceObject=None):
        IAgVAStateCalcReferenceRadius.__init__(self, sourceObject)
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAStateCalcReferenceRadius._private_init(self, intf)
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAStateCalcReferenceRadius._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcReferenceRadius._get_property(self, attrname)
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcReferenceRadius.")

agcls.AgClassCatalog.add_catalog_entry("{C90B0911-1B88-4809-A9AD-B1F083E18808}", AgVAStateCalcReferenceRadius)


class AgVAStateCalcGravCoeff(IAgVAStateCalcGravCoeff, IAgComponentInfo, IAgCloneable):
    """Gravity Coefficient Calc objects."""
    def __init__(self, sourceObject=None):
        IAgVAStateCalcGravCoeff.__init__(self, sourceObject)
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAStateCalcGravCoeff._private_init(self, intf)
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAStateCalcGravCoeff._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcGravCoeff._get_property(self, attrname)
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcGravCoeff.")

agcls.AgClassCatalog.add_catalog_entry("{30223DC9-7946-4480-8E8A-DB3393DFEFC8}", AgVAStateCalcGravCoeff)


class AgVAStateCalcSpeedOfLight(IAgVAStateCalcSpeedOfLight, IAgComponentInfo, IAgCloneable):
    """Speed Of Light Calc objects."""
    def __init__(self, sourceObject=None):
        IAgVAStateCalcSpeedOfLight.__init__(self, sourceObject)
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAStateCalcSpeedOfLight._private_init(self, intf)
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAStateCalcSpeedOfLight._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcSpeedOfLight._get_property(self, attrname)
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcSpeedOfLight.")

agcls.AgClassCatalog.add_catalog_entry("{BB3D0551-655B-43D3-89BE-59816A9B2DF4}", AgVAStateCalcSpeedOfLight)


class AgVAStateCalcPi(IAgVAStateCalcPi, IAgComponentInfo, IAgCloneable):
    """Pi Calc objects."""
    def __init__(self, sourceObject=None):
        IAgVAStateCalcPi.__init__(self, sourceObject)
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAStateCalcPi._private_init(self, intf)
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAStateCalcPi._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcPi._get_property(self, attrname)
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcPi.")

agcls.AgClassCatalog.add_catalog_entry("{81779742-2FD6-4E22-81C5-05F1D271944F}", AgVAStateCalcPi)


class AgVAStateCalcScalar(IAgVAStateCalcScalar, IAgComponentInfo, IAgCloneable):
    """Scalar Calc objects."""
    def __init__(self, sourceObject=None):
        IAgVAStateCalcScalar.__init__(self, sourceObject)
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAStateCalcScalar._private_init(self, intf)
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAStateCalcScalar._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcScalar._get_property(self, attrname)
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcScalar.")

agcls.AgClassCatalog.add_catalog_entry("{C6136D77-3185-4A4C-83AA-90CC6713A07A}", AgVAStateCalcScalar)


class AgVAStateCalcApparentSolarTime(IAgComponentInfo, IAgCloneable, IAgVAStateCalcApparentSolarTime):
    """Apparent Solar Time Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcApparentSolarTime.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
        IAgVAStateCalcApparentSolarTime._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcApparentSolarTime._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcApparentSolarTime._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcApparentSolarTime.")

agcls.AgClassCatalog.add_catalog_entry("{EF933369-A9DC-4A8C-B361-615A7A8B852D}", AgVAStateCalcApparentSolarTime)


class AgVAStateCalcEarthMeanSolarTime(IAgComponentInfo, IAgCloneable, IAgVAStateCalcEarthMeanSolarTime):
    """EarthMeanSolarTime Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcEarthMeanSolarTime.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
        IAgVAStateCalcEarthMeanSolarTime._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcEarthMeanSolarTime._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcEarthMeanSolarTime._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcEarthMeanSolarTime.")

agcls.AgClassCatalog.add_catalog_entry("{A36F3E6D-DD64-4089-A0B9-CDDECA9F31BF}", AgVAStateCalcEarthMeanSolarTime)


class AgVAStateCalcEarthMeanLocTimeAN(IAgComponentInfo, IAgCloneable, IAgVAStateCalcEarthMeanLocTimeAN):
    """EarthMeanLocTimeAN Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcEarthMeanLocTimeAN.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
        IAgVAStateCalcEarthMeanLocTimeAN._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcEarthMeanLocTimeAN._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcEarthMeanLocTimeAN._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcEarthMeanLocTimeAN.")

agcls.AgClassCatalog.add_catalog_entry("{8B52530C-09B1-48BB-A644-2564B3F9A23F}", AgVAStateCalcEarthMeanLocTimeAN)


class AgVAAutomaticSequenceCollection(IAgVAAutomaticSequenceCollection):
    """Automatic Sequence Collection."""
    def __init__(self, sourceObject=None):
        IAgVAAutomaticSequenceCollection.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAAutomaticSequenceCollection._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAAutomaticSequenceCollection._get_property(self, attrname) is not None: found_prop = IAgVAAutomaticSequenceCollection._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAAutomaticSequenceCollection.")

agcls.AgClassCatalog.add_catalog_entry("{364BDB62-ECD6-4661-A8EB-D6943F5BD5BF}", AgVAAutomaticSequenceCollection)


class AgVAAutomaticSequence(IAgVAAutomaticSequence):
    """Automatic Sequence."""
    def __init__(self, sourceObject=None):
        IAgVAAutomaticSequence.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAAutomaticSequence._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAAutomaticSequence._get_property(self, attrname) is not None: found_prop = IAgVAAutomaticSequence._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAAutomaticSequence.")

agcls.AgClassCatalog.add_catalog_entry("{8755DF12-EDDB-468E-92AF-D98C5C1B1534}", AgVAAutomaticSequence)


class AgVACentralBodyCollection(IAgVACentralBodyCollection):
    """Central Body Collection."""
    def __init__(self, sourceObject=None):
        IAgVACentralBodyCollection.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVACentralBodyCollection._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVACentralBodyCollection._get_property(self, attrname) is not None: found_prop = IAgVACentralBodyCollection._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVACentralBodyCollection.")

agcls.AgClassCatalog.add_catalog_entry("{393D9C77-A9A2-4E5A-B285-9292EAF77559}", AgVACentralBodyCollection)


class AgVACentralBody(IAgVACentralBody, IAgComponentInfo, IAgCloneable):
    """Central Body."""
    def __init__(self, sourceObject=None):
        IAgVACentralBody.__init__(self, sourceObject)
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVACentralBody._private_init(self, intf)
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVACentralBody._get_property(self, attrname) is not None: found_prop = IAgVACentralBody._get_property(self, attrname)
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVACentralBody.")

agcls.AgClassCatalog.add_catalog_entry("{BB18EA4F-DF6E-44A3-B547-CD21EC10120C}", AgVACentralBody)


class AgVACbGravityModel(IAgVACbGravityModel):
    """Central Body Gravity Model."""
    def __init__(self, sourceObject=None):
        IAgVACbGravityModel.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVACbGravityModel._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVACbGravityModel._get_property(self, attrname) is not None: found_prop = IAgVACbGravityModel._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVACbGravityModel.")

agcls.AgClassCatalog.add_catalog_entry("{B235689A-958C-42EA-BACA-DF03ED880C5B}", AgVACbGravityModel)


class AgVACbShapeSphere(IAgVACbShapeSphere, IAgVACbShape):
    """Central Body Shape - Sphere."""
    def __init__(self, sourceObject=None):
        IAgVACbShapeSphere.__init__(self, sourceObject)
        IAgVACbShape.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVACbShapeSphere._private_init(self, intf)
        IAgVACbShape._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVACbShapeSphere._get_property(self, attrname) is not None: found_prop = IAgVACbShapeSphere._get_property(self, attrname)
        if IAgVACbShape._get_property(self, attrname) is not None: found_prop = IAgVACbShape._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVACbShapeSphere.")

agcls.AgClassCatalog.add_catalog_entry("{0AC87F61-8DFA-48FF-A1D2-D7DCD7133900}", AgVACbShapeSphere)


class AgVACbShapeOblateSpheroid(IAgVACbShapeOblateSpheroid, IAgVACbShape):
    """Central Body Shape - Spheroid."""
    def __init__(self, sourceObject=None):
        IAgVACbShapeOblateSpheroid.__init__(self, sourceObject)
        IAgVACbShape.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVACbShapeOblateSpheroid._private_init(self, intf)
        IAgVACbShape._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVACbShapeOblateSpheroid._get_property(self, attrname) is not None: found_prop = IAgVACbShapeOblateSpheroid._get_property(self, attrname)
        if IAgVACbShape._get_property(self, attrname) is not None: found_prop = IAgVACbShape._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVACbShapeOblateSpheroid.")

agcls.AgClassCatalog.add_catalog_entry("{1C606CEB-7C36-486E-A123-42AF0BCB2C8F}", AgVACbShapeOblateSpheroid)


class AgVACbShapeTriaxialEllipsoid(IAgVACbShapeTriaxialEllipsoid, IAgVACbShape):
    """Central Body Shape - Triaxial Ellipsoid."""
    def __init__(self, sourceObject=None):
        IAgVACbShapeTriaxialEllipsoid.__init__(self, sourceObject)
        IAgVACbShape.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVACbShapeTriaxialEllipsoid._private_init(self, intf)
        IAgVACbShape._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVACbShapeTriaxialEllipsoid._get_property(self, attrname) is not None: found_prop = IAgVACbShapeTriaxialEllipsoid._get_property(self, attrname)
        if IAgVACbShape._get_property(self, attrname) is not None: found_prop = IAgVACbShape._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVACbShapeTriaxialEllipsoid.")

agcls.AgClassCatalog.add_catalog_entry("{286452CC-4917-4618-B2B7-D4C4B226AEAE}", AgVACbShapeTriaxialEllipsoid)


class AgVACbAttitudeRotationCoefficientsFile(IAgVACbAttitudeRotationCoefficientsFile, IAgVACbAttitude):
    """Central Body Attitude - Rotation Coefficients File."""
    def __init__(self, sourceObject=None):
        IAgVACbAttitudeRotationCoefficientsFile.__init__(self, sourceObject)
        IAgVACbAttitude.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVACbAttitudeRotationCoefficientsFile._private_init(self, intf)
        IAgVACbAttitude._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVACbAttitudeRotationCoefficientsFile._get_property(self, attrname) is not None: found_prop = IAgVACbAttitudeRotationCoefficientsFile._get_property(self, attrname)
        if IAgVACbAttitude._get_property(self, attrname) is not None: found_prop = IAgVACbAttitude._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVACbAttitudeRotationCoefficientsFile.")

agcls.AgClassCatalog.add_catalog_entry("{BC7D0575-6607-4103-8957-0B791534526D}", AgVACbAttitudeRotationCoefficientsFile)


class AgVACbAttitudeIAU1994(IAgVACbAttitudeIAU1994, IAgVACbAttitude):
    """Central Body Attitude - IAU1994."""
    def __init__(self, sourceObject=None):
        IAgVACbAttitudeIAU1994.__init__(self, sourceObject)
        IAgVACbAttitude.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVACbAttitudeIAU1994._private_init(self, intf)
        IAgVACbAttitude._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVACbAttitudeIAU1994._get_property(self, attrname) is not None: found_prop = IAgVACbAttitudeIAU1994._get_property(self, attrname)
        if IAgVACbAttitude._get_property(self, attrname) is not None: found_prop = IAgVACbAttitude._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVACbAttitudeIAU1994.")

agcls.AgClassCatalog.add_catalog_entry("{147ABE46-6F5E-45D9-8279-5D01B0D78B88}", AgVACbAttitudeIAU1994)


class AgVACbEphemerisAnalyticOrbit(IAgVACbEphemerisAnalyticOrbit, IAgVACbEphemeris):
    """Central Body Ephemeris - Analytic Orbit."""
    def __init__(self, sourceObject=None):
        IAgVACbEphemerisAnalyticOrbit.__init__(self, sourceObject)
        IAgVACbEphemeris.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVACbEphemerisAnalyticOrbit._private_init(self, intf)
        IAgVACbEphemeris._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVACbEphemerisAnalyticOrbit._get_property(self, attrname) is not None: found_prop = IAgVACbEphemerisAnalyticOrbit._get_property(self, attrname)
        if IAgVACbEphemeris._get_property(self, attrname) is not None: found_prop = IAgVACbEphemeris._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVACbEphemerisAnalyticOrbit.")

agcls.AgClassCatalog.add_catalog_entry("{D2E09031-DB7F-480B-A361-73713F45EB70}", AgVACbEphemerisAnalyticOrbit)


class AgVACbEphemerisJPLSpice(IAgVACbEphemerisJPLSpice, IAgVACbEphemeris):
    """Central Body Ephemeris - JPLSpice."""
    def __init__(self, sourceObject=None):
        IAgVACbEphemerisJPLSpice.__init__(self, sourceObject)
        IAgVACbEphemeris.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVACbEphemerisJPLSpice._private_init(self, intf)
        IAgVACbEphemeris._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVACbEphemerisJPLSpice._get_property(self, attrname) is not None: found_prop = IAgVACbEphemerisJPLSpice._get_property(self, attrname)
        if IAgVACbEphemeris._get_property(self, attrname) is not None: found_prop = IAgVACbEphemeris._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVACbEphemerisJPLSpice.")

agcls.AgClassCatalog.add_catalog_entry("{A75A2A9B-F225-43D5-A259-30C9B0488EB8}", AgVACbEphemerisJPLSpice)


class AgVACbEphemerisFile(IAgVACbEphemerisFile, IAgVACbEphemeris):
    """Central Body Ephemeris - File."""
    def __init__(self, sourceObject=None):
        IAgVACbEphemerisFile.__init__(self, sourceObject)
        IAgVACbEphemeris.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVACbEphemerisFile._private_init(self, intf)
        IAgVACbEphemeris._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVACbEphemerisFile._get_property(self, attrname) is not None: found_prop = IAgVACbEphemerisFile._get_property(self, attrname)
        if IAgVACbEphemeris._get_property(self, attrname) is not None: found_prop = IAgVACbEphemeris._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVACbEphemerisFile.")

agcls.AgClassCatalog.add_catalog_entry("{063BA11E-7F73-40FA-B691-B12EC38DE29B}", AgVACbEphemerisFile)


class AgVACbEphemerisJPLDE(IAgVACbEphemerisJPLDE, IAgVACbEphemeris):
    """Central Body Ephemeris - JPL DE."""
    def __init__(self, sourceObject=None):
        IAgVACbEphemerisJPLDE.__init__(self, sourceObject)
        IAgVACbEphemeris.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVACbEphemerisJPLDE._private_init(self, intf)
        IAgVACbEphemeris._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVACbEphemerisJPLDE._get_property(self, attrname) is not None: found_prop = IAgVACbEphemerisJPLDE._get_property(self, attrname)
        if IAgVACbEphemeris._get_property(self, attrname) is not None: found_prop = IAgVACbEphemeris._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVACbEphemerisJPLDE.")

agcls.AgClassCatalog.add_catalog_entry("{6426E9EA-5ED2-46C9-95BB-447955306CA7}", AgVACbEphemerisJPLDE)


class AgVACbEphemerisPlanetary(IAgVACbEphemerisPlanetary, IAgVACbEphemeris):
    """Central Body Ephemeris - Planetary."""
    def __init__(self, sourceObject=None):
        IAgVACbEphemerisPlanetary.__init__(self, sourceObject)
        IAgVACbEphemeris.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVACbEphemerisPlanetary._private_init(self, intf)
        IAgVACbEphemeris._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVACbEphemerisPlanetary._get_property(self, attrname) is not None: found_prop = IAgVACbEphemerisPlanetary._get_property(self, attrname)
        if IAgVACbEphemeris._get_property(self, attrname) is not None: found_prop = IAgVACbEphemeris._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVACbEphemerisPlanetary.")

agcls.AgClassCatalog.add_catalog_entry("{B3946E55-049C-4314-B6E1-1B3E4BD4F660}", AgVACbEphemerisPlanetary)


class AgVAMCSSegmentProperties(IAgVAMCSSegmentProperties, IAgRuntimeTypeInfoProvider):
    """Segment Properties."""
    def __init__(self, sourceObject=None):
        IAgVAMCSSegmentProperties.__init__(self, sourceObject)
        IAgRuntimeTypeInfoProvider.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAMCSSegmentProperties._private_init(self, intf)
        IAgRuntimeTypeInfoProvider._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAMCSSegmentProperties._get_property(self, attrname) is not None: found_prop = IAgVAMCSSegmentProperties._get_property(self, attrname)
        if IAgRuntimeTypeInfoProvider._get_property(self, attrname) is not None: found_prop = IAgRuntimeTypeInfoProvider._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAMCSSegmentProperties.")

agcls.AgClassCatalog.add_catalog_entry("{9740187E-A60E-4440-952F-46FCEF10879C}", AgVAMCSSegmentProperties)


class AgVAPowerInternal(IAgVAPowerInternal, IAgComponentInfo, IAgCloneable):
    """Power - Internal."""
    def __init__(self, sourceObject=None):
        IAgVAPowerInternal.__init__(self, sourceObject)
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAPowerInternal._private_init(self, intf)
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAPowerInternal._get_property(self, attrname) is not None: found_prop = IAgVAPowerInternal._get_property(self, attrname)
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAPowerInternal.")

agcls.AgClassCatalog.add_catalog_entry("{269F510C-DE85-4BD7-B09C-15B573F83F31}", AgVAPowerInternal)


class AgVAPowerProcessed(IAgVAPowerProcessed, IAgComponentInfo, IAgCloneable):
    """Power - Processed Power Unit."""
    def __init__(self, sourceObject=None):
        IAgVAPowerProcessed.__init__(self, sourceObject)
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAPowerProcessed._private_init(self, intf)
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAPowerProcessed._get_property(self, attrname) is not None: found_prop = IAgVAPowerProcessed._get_property(self, attrname)
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAPowerProcessed.")

agcls.AgClassCatalog.add_catalog_entry("{F9B2570A-E760-4C58-B95A-6654FA264F43}", AgVAPowerProcessed)


class AgVAPowerSolarArray(IAgVAPowerSolarArray, IAgComponentInfo, IAgCloneable):
    """Power - Solar Array."""
    def __init__(self, sourceObject=None):
        IAgVAPowerSolarArray.__init__(self, sourceObject)
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAPowerSolarArray._private_init(self, intf)
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAPowerSolarArray._get_property(self, attrname) is not None: found_prop = IAgVAPowerSolarArray._get_property(self, attrname)
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAPowerSolarArray.")

agcls.AgClassCatalog.add_catalog_entry("{EFF8A0BD-0BEA-4A4C-B486-3BC0DDA2B96E}", AgVAPowerSolarArray)


class AgVAGeneralRelativityFunction(IAgVAGeneralRelativityFunction, IAgComponentInfo, IAgCloneable):
    """General Relativity Propagator Function."""
    def __init__(self, sourceObject=None):
        IAgVAGeneralRelativityFunction.__init__(self, sourceObject)
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAGeneralRelativityFunction._private_init(self, intf)
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAGeneralRelativityFunction._get_property(self, attrname) is not None: found_prop = IAgVAGeneralRelativityFunction._get_property(self, attrname)
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAGeneralRelativityFunction.")

agcls.AgClassCatalog.add_catalog_entry("{2388EABA-68BE-4071-A6FC-5DF5E6913E09}", AgVAGeneralRelativityFunction)


class AgVAStateTransFunction(IAgVAStateTransFunction, IAgComponentInfo, IAgCloneable):
    """State Transition Propagator Function."""
    def __init__(self, sourceObject=None):
        IAgVAStateTransFunction.__init__(self, sourceObject)
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAStateTransFunction._private_init(self, intf)
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAStateTransFunction._get_property(self, attrname) is not None: found_prop = IAgVAStateTransFunction._get_property(self, attrname)
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateTransFunction.")

agcls.AgClassCatalog.add_catalog_entry("{BC9BCE93-D459-43A4-B996-0710520ECD35}", AgVAStateTransFunction)


class AgVACR3BPFunc(IAgVACR3BPFunc, IAgComponentInfo, IAgCloneable):
    """CR3BP Function."""
    def __init__(self, sourceObject=None):
        IAgVACR3BPFunc.__init__(self, sourceObject)
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVACR3BPFunc._private_init(self, intf)
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVACR3BPFunc._get_property(self, attrname) is not None: found_prop = IAgVACR3BPFunc._get_property(self, attrname)
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVACR3BPFunc.")

agcls.AgClassCatalog.add_catalog_entry("{0CB5F652-0A94-4493-8397-78E8B147A600}", AgVACR3BPFunc)


class AgVARadiationPressureFunction(IAgVARadiationPressureFunction, IAgComponentInfo, IAgCloneable):
    """Radiation Pressure Propagator Function."""
    def __init__(self, sourceObject=None):
        IAgVARadiationPressureFunction.__init__(self, sourceObject)
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVARadiationPressureFunction._private_init(self, intf)
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVARadiationPressureFunction._get_property(self, attrname) is not None: found_prop = IAgVARadiationPressureFunction._get_property(self, attrname)
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVARadiationPressureFunction.")

agcls.AgClassCatalog.add_catalog_entry("{129DFCA0-E241-4BF5-947C-34D311459876}", AgVARadiationPressureFunction)


class AgVAYarkovskyFunc(IAgVAYarkovskyFunc, IAgComponentInfo, IAgCloneable):
    """Yarkovsky Effect Propagator Function."""
    def __init__(self, sourceObject=None):
        IAgVAYarkovskyFunc.__init__(self, sourceObject)
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAYarkovskyFunc._private_init(self, intf)
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAYarkovskyFunc._get_property(self, attrname) is not None: found_prop = IAgVAYarkovskyFunc._get_property(self, attrname)
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAYarkovskyFunc.")

agcls.AgClassCatalog.add_catalog_entry("{991BA5B1-ED2F-4633-8493-5AD584CBD4FC}", AgVAYarkovskyFunc)


class AgVABlendedDensity(IAgVABlendedDensity, IAgComponentInfo, IAgCloneable):
    """Blended atmospheric density propagator function."""
    def __init__(self, sourceObject=None):
        IAgVABlendedDensity.__init__(self, sourceObject)
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVABlendedDensity._private_init(self, intf)
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVABlendedDensity._get_property(self, attrname) is not None: found_prop = IAgVABlendedDensity._get_property(self, attrname)
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVABlendedDensity.")

agcls.AgClassCatalog.add_catalog_entry("{8262277E-56CE-4780-8EF3-08324A1A06FD}", AgVABlendedDensity)


class AgVACira72Function(IAgVACira72Function, IAgComponentInfo, IAgCloneable):
    """Cira72 atmospheric propagator function."""
    def __init__(self, sourceObject=None):
        IAgVACira72Function.__init__(self, sourceObject)
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVACira72Function._private_init(self, intf)
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVACira72Function._get_property(self, attrname) is not None: found_prop = IAgVACira72Function._get_property(self, attrname)
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVACira72Function.")

agcls.AgClassCatalog.add_catalog_entry("{995263CD-4163-4EDA-8012-310821C8A332}", AgVACira72Function)


class AgVAExponential(IAgVAExponential, IAgComponentInfo, IAgCloneable):
    """Exponential atmospheric propagator function."""
    def __init__(self, sourceObject=None):
        IAgVAExponential.__init__(self, sourceObject)
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAExponential._private_init(self, intf)
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAExponential._get_property(self, attrname) is not None: found_prop = IAgVAExponential._get_property(self, attrname)
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAExponential.")

agcls.AgClassCatalog.add_catalog_entry("{701C6D24-1D0E-4D08-9A3B-61566AABDE02}", AgVAExponential)


class AgVAHarrisPriester(IAgVAHarrisPriester, IAgComponentInfo, IAgCloneable):
    """Harris-Priester atmospheric propagator function."""
    def __init__(self, sourceObject=None):
        IAgVAHarrisPriester.__init__(self, sourceObject)
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAHarrisPriester._private_init(self, intf)
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAHarrisPriester._get_property(self, attrname) is not None: found_prop = IAgVAHarrisPriester._get_property(self, attrname)
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAHarrisPriester.")

agcls.AgClassCatalog.add_catalog_entry("{2C45FE9A-0EE9-46B0-B0A5-79A052FDE189}", AgVAHarrisPriester)


class AgVADensityModelPlugin(IAgVADensityModelPlugin, IAgComponentInfo, IAgCloneable):
    """Plugin atmospheric density propagator function."""
    def __init__(self, sourceObject=None):
        IAgVADensityModelPlugin.__init__(self, sourceObject)
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVADensityModelPlugin._private_init(self, intf)
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVADensityModelPlugin._get_property(self, attrname) is not None: found_prop = IAgVADensityModelPlugin._get_property(self, attrname)
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVADensityModelPlugin.")

agcls.AgClassCatalog.add_catalog_entry("{5331D02B-13E5-4609-BFE6-9BF842E6096F}", AgVADensityModelPlugin)


class AgVAJacchiaRoberts(IAgVAJacchiaRoberts, IAgComponentInfo, IAgCloneable):
    """Jacchia Roberts atmospheric propagator function."""
    def __init__(self, sourceObject=None):
        IAgVAJacchiaRoberts.__init__(self, sourceObject)
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAJacchiaRoberts._private_init(self, intf)
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAJacchiaRoberts._get_property(self, attrname) is not None: found_prop = IAgVAJacchiaRoberts._get_property(self, attrname)
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAJacchiaRoberts.")

agcls.AgClassCatalog.add_catalog_entry("{6227B561-C892-4BB5-A835-9619EB144173}", AgVAJacchiaRoberts)


class AgVAJacchiaBowman2008(IAgVAJacchiaBowman2008, IAgComponentInfo, IAgCloneable):
    """Jacchia Bowman 2008 atmospheric propagator function."""
    def __init__(self, sourceObject=None):
        IAgVAJacchiaBowman2008.__init__(self, sourceObject)
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAJacchiaBowman2008._private_init(self, intf)
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAJacchiaBowman2008._get_property(self, attrname) is not None: found_prop = IAgVAJacchiaBowman2008._get_property(self, attrname)
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAJacchiaBowman2008.")

agcls.AgClassCatalog.add_catalog_entry("{19461979-5C67-4840-8DB9-902EC47E6105}", AgVAJacchiaBowman2008)


class AgVAJacchia_1960(IAgVAJacchia_1960, IAgComponentInfo, IAgCloneable):
    """Jacchia_1960 atmospheric propagator function."""
    def __init__(self, sourceObject=None):
        IAgVAJacchia_1960.__init__(self, sourceObject)
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAJacchia_1960._private_init(self, intf)
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAJacchia_1960._get_property(self, attrname) is not None: found_prop = IAgVAJacchia_1960._get_property(self, attrname)
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAJacchia_1960.")

agcls.AgClassCatalog.add_catalog_entry("{E803E9D5-31AB-4D5C-B93E-AB9975E2402B}", AgVAJacchia_1960)


class AgVAJacchia_1970(IAgVAJacchia_1970, IAgComponentInfo, IAgCloneable):
    """Jacchia_1970 atmospheric propagator function."""
    def __init__(self, sourceObject=None):
        IAgVAJacchia_1970.__init__(self, sourceObject)
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAJacchia_1970._private_init(self, intf)
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAJacchia_1970._get_property(self, attrname) is not None: found_prop = IAgVAJacchia_1970._get_property(self, attrname)
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAJacchia_1970.")

agcls.AgClassCatalog.add_catalog_entry("{9E716F44-73D2-4A22-97C9-04C20386D575}", AgVAJacchia_1970)


class AgVAJacchia_1971(IAgVAJacchia_1971, IAgComponentInfo, IAgCloneable):
    """Jacchia_1971 atmospheric propagator function."""
    def __init__(self, sourceObject=None):
        IAgVAJacchia_1971.__init__(self, sourceObject)
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAJacchia_1971._private_init(self, intf)
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAJacchia_1971._get_property(self, attrname) is not None: found_prop = IAgVAJacchia_1971._get_property(self, attrname)
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAJacchia_1971.")

agcls.AgClassCatalog.add_catalog_entry("{50FFBB4C-124F-4DC6-BEED-F2EC4930B4E7}", AgVAJacchia_1971)


class AgVAMSISE_1990(IAgVAMSISE_1990, IAgComponentInfo, IAgCloneable):
    """MSISE 1990 atmospheric propagator function."""
    def __init__(self, sourceObject=None):
        IAgVAMSISE_1990.__init__(self, sourceObject)
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAMSISE_1990._private_init(self, intf)
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAMSISE_1990._get_property(self, attrname) is not None: found_prop = IAgVAMSISE_1990._get_property(self, attrname)
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAMSISE_1990.")

agcls.AgClassCatalog.add_catalog_entry("{A46341F0-9384-4A1D-970A-77B1B683359D}", AgVAMSISE_1990)


class AgVAMSIS_1986(IAgVAMSIS_1986, IAgComponentInfo, IAgCloneable):
    """MSIS 1986 atmospheric propagator function."""
    def __init__(self, sourceObject=None):
        IAgVAMSIS_1986.__init__(self, sourceObject)
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAMSIS_1986._private_init(self, intf)
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAMSIS_1986._get_property(self, attrname) is not None: found_prop = IAgVAMSIS_1986._get_property(self, attrname)
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAMSIS_1986.")

agcls.AgClassCatalog.add_catalog_entry("{AFAC9D69-5B78-48BA-8CFA-5D6A30BBF371}", AgVAMSIS_1986)


class AgVANRLMSISE_2000(IAgVANRLMSISE_2000, IAgComponentInfo, IAgCloneable):
    """NRLMSISE 2000 atmospheric propagator function."""
    def __init__(self, sourceObject=None):
        IAgVANRLMSISE_2000.__init__(self, sourceObject)
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVANRLMSISE_2000._private_init(self, intf)
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVANRLMSISE_2000._get_property(self, attrname) is not None: found_prop = IAgVANRLMSISE_2000._get_property(self, attrname)
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVANRLMSISE_2000.")

agcls.AgClassCatalog.add_catalog_entry("{2EEE9C88-FF61-497A-AD40-2429DBA0A581}", AgVANRLMSISE_2000)


class AgVAUS_Standard_Atmosphere(IAgVAUS_Standard_Atmosphere, IAgComponentInfo, IAgCloneable):
    """US_Standard_Atmosphere atmospheric propagator function."""
    def __init__(self, sourceObject=None):
        IAgVAUS_Standard_Atmosphere.__init__(self, sourceObject)
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAUS_Standard_Atmosphere._private_init(self, intf)
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAUS_Standard_Atmosphere._get_property(self, attrname) is not None: found_prop = IAgVAUS_Standard_Atmosphere._get_property(self, attrname)
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAUS_Standard_Atmosphere.")

agcls.AgClassCatalog.add_catalog_entry("{14714C17-B360-42E1-86EE-99EB95C71B69}", AgVAUS_Standard_Atmosphere)


class AgVAMarsGRAM37(IAgVAMarsGRAM37, IAgComponentInfo, IAgCloneable):
    """Mars-GRAM 3.7 atmospheric propagator function."""
    def __init__(self, sourceObject=None):
        IAgVAMarsGRAM37.__init__(self, sourceObject)
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAMarsGRAM37._private_init(self, intf)
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAMarsGRAM37._get_property(self, attrname) is not None: found_prop = IAgVAMarsGRAM37._get_property(self, attrname)
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAMarsGRAM37.")

agcls.AgClassCatalog.add_catalog_entry("{69A9AE89-0133-4410-A486-1ADEFBE56F49}", AgVAMarsGRAM37)


class AgVAMarsGRAM2000(IAgVAMarsGRAM2000, IAgComponentInfo, IAgCloneable):
    """Mars-GRAM 2000 atmospheric propagator function."""
    def __init__(self, sourceObject=None):
        IAgVAMarsGRAM2000.__init__(self, sourceObject)
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAMarsGRAM2000._private_init(self, intf)
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAMarsGRAM2000._get_property(self, attrname) is not None: found_prop = IAgVAMarsGRAM2000._get_property(self, attrname)
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAMarsGRAM2000.")

agcls.AgClassCatalog.add_catalog_entry("{FB31A16E-8E6F-4F8F-8D2D-0E3D0C0020FC}", AgVAMarsGRAM2000)


class AgVAMarsGRAM2001(IAgVAMarsGRAM2001, IAgComponentInfo, IAgCloneable):
    """Mars-GRAM 2001 atmospheric propagator function."""
    def __init__(self, sourceObject=None):
        IAgVAMarsGRAM2001.__init__(self, sourceObject)
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAMarsGRAM2001._private_init(self, intf)
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAMarsGRAM2001._get_property(self, attrname) is not None: found_prop = IAgVAMarsGRAM2001._get_property(self, attrname)
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAMarsGRAM2001.")

agcls.AgClassCatalog.add_catalog_entry("{F7A3F4ED-100F-463F-A9F5-177F49E44BA9}", AgVAMarsGRAM2001)


class AgVAMarsGRAM2005(IAgVAMarsGRAM2005, IAgComponentInfo, IAgCloneable):
    """Mars-GRAM 2005 atmospheric propagator function."""
    def __init__(self, sourceObject=None):
        IAgVAMarsGRAM2005.__init__(self, sourceObject)
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAMarsGRAM2005._private_init(self, intf)
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAMarsGRAM2005._get_property(self, attrname) is not None: found_prop = IAgVAMarsGRAM2005._get_property(self, attrname)
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAMarsGRAM2005.")

agcls.AgClassCatalog.add_catalog_entry("{FD314E36-8513-484A-B46A-FC8794E939AC}", AgVAMarsGRAM2005)


class AgVAMarsGRAM2010(IAgVAMarsGRAM2010, IAgComponentInfo, IAgCloneable):
    """Mars-GRAM 2010 atmospheric propagator function."""
    def __init__(self, sourceObject=None):
        IAgVAMarsGRAM2010.__init__(self, sourceObject)
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAMarsGRAM2010._private_init(self, intf)
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAMarsGRAM2010._get_property(self, attrname) is not None: found_prop = IAgVAMarsGRAM2010._get_property(self, attrname)
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAMarsGRAM2010.")

agcls.AgClassCatalog.add_catalog_entry("{EE0F710B-25B2-4423-86BE-892E0F221376}", AgVAMarsGRAM2010)


class AgVAVenusGRAM2005(IAgVAVenusGRAM2005, IAgComponentInfo, IAgCloneable):
    """Venus-GRAM 2005 atmospheric propagator function."""
    def __init__(self, sourceObject=None):
        IAgVAVenusGRAM2005.__init__(self, sourceObject)
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAVenusGRAM2005._private_init(self, intf)
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAVenusGRAM2005._get_property(self, attrname) is not None: found_prop = IAgVAVenusGRAM2005._get_property(self, attrname)
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAVenusGRAM2005.")

agcls.AgClassCatalog.add_catalog_entry("{2360812C-F645-4237-889F-EF487FFC20D7}", AgVAVenusGRAM2005)


class AgVADTM2012(IAgVADTM2012, IAgComponentInfo, IAgCloneable):
    """DTM 2012 atmospheric propagator function."""
    def __init__(self, sourceObject=None):
        IAgVADTM2012.__init__(self, sourceObject)
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVADTM2012._private_init(self, intf)
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVADTM2012._get_property(self, attrname) is not None: found_prop = IAgVADTM2012._get_property(self, attrname)
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVADTM2012.")

agcls.AgClassCatalog.add_catalog_entry("{131D3F3F-8444-4017-B12F-D57DF1262F58}", AgVADTM2012)


class AgVADTM2020(IAgVADTM2020, IAgComponentInfo, IAgCloneable):
    """DTM 2020 atmospheric propagator function."""
    def __init__(self, sourceObject=None):
        IAgVADTM2020.__init__(self, sourceObject)
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVADTM2020._private_init(self, intf)
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVADTM2020._get_property(self, attrname) is not None: found_prop = IAgVADTM2020._get_property(self, attrname)
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVADTM2020.")

agcls.AgClassCatalog.add_catalog_entry("{68457876-1EF6-4DD4-9295-E72570C4F97B}", AgVADTM2020)


class AgVAGravityFieldFunction(IAgVAGravityFieldFunction, IAgComponentInfo, IAgCloneable):
    """Gravity Field gravity propagator function."""
    def __init__(self, sourceObject=None):
        IAgVAGravityFieldFunction.__init__(self, sourceObject)
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAGravityFieldFunction._private_init(self, intf)
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAGravityFieldFunction._get_property(self, attrname) is not None: found_prop = IAgVAGravityFieldFunction._get_property(self, attrname)
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAGravityFieldFunction.")

agcls.AgClassCatalog.add_catalog_entry("{C2C24055-1B50-4BD9-A7F7-0AA5FCE8969E}", AgVAGravityFieldFunction)


class AgVAPointMassFunction(IAgVAPointMassFunction, IAgComponentInfo, IAgCloneable):
    """Point Mass function."""
    def __init__(self, sourceObject=None):
        IAgVAPointMassFunction.__init__(self, sourceObject)
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAPointMassFunction._private_init(self, intf)
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAPointMassFunction._get_property(self, attrname) is not None: found_prop = IAgVAPointMassFunction._get_property(self, attrname)
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAPointMassFunction.")

agcls.AgClassCatalog.add_catalog_entry("{E0A1592D-68C0-43DB-A338-DE22A591872A}", AgVAPointMassFunction)


class AgVATwoBodyFunction(IAgVATwoBodyFunction, IAgComponentInfo, IAgCloneable):
    """Two Body gravity propagator function."""
    def __init__(self, sourceObject=None):
        IAgVATwoBodyFunction.__init__(self, sourceObject)
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVATwoBodyFunction._private_init(self, intf)
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVATwoBodyFunction._get_property(self, attrname) is not None: found_prop = IAgVATwoBodyFunction._get_property(self, attrname)
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVATwoBodyFunction.")

agcls.AgClassCatalog.add_catalog_entry("{5C71D8C2-4A14-4D93-A8E5-5384AAB05E92}", AgVATwoBodyFunction)


class AgVAHPOPPluginFunction(IAgVAHPOPPluginFunction, IAgComponentInfo, IAgCloneable):
    """HPOP Plugin propagator function."""
    def __init__(self, sourceObject=None):
        IAgVAHPOPPluginFunction.__init__(self, sourceObject)
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAHPOPPluginFunction._private_init(self, intf)
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAHPOPPluginFunction._get_property(self, attrname) is not None: found_prop = IAgVAHPOPPluginFunction._get_property(self, attrname)
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAHPOPPluginFunction.")

agcls.AgClassCatalog.add_catalog_entry("{01BF5EA2-376F-49B2-B6DF-3017F30D8205}", AgVAHPOPPluginFunction)


class AgVAEOMFuncPluginFunction(IAgVAEOMFuncPluginFunction, IAgComponentInfo, IAgCloneable):
    """EOM Function Plugin propagator function."""
    def __init__(self, sourceObject=None):
        IAgVAEOMFuncPluginFunction.__init__(self, sourceObject)
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAEOMFuncPluginFunction._private_init(self, intf)
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAEOMFuncPluginFunction._get_property(self, attrname) is not None: found_prop = IAgVAEOMFuncPluginFunction._get_property(self, attrname)
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAEOMFuncPluginFunction.")

agcls.AgClassCatalog.add_catalog_entry("{6FCCD724-B386-487C-A2AD-6153FF4756FF}", AgVAEOMFuncPluginFunction)


class AgVASRPAeroT20(IAgVASRPAeroT20, IAgComponentInfo, IAgCloneable):
    """AeroT20 SRP propagator function."""
    def __init__(self, sourceObject=None):
        IAgVASRPAeroT20.__init__(self, sourceObject)
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVASRPAeroT20._private_init(self, intf)
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVASRPAeroT20._get_property(self, attrname) is not None: found_prop = IAgVASRPAeroT20._get_property(self, attrname)
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVASRPAeroT20.")

agcls.AgClassCatalog.add_catalog_entry("{6DB3E760-F774-45F3-A6E5-EA2A7E34416F}", AgVASRPAeroT20)


class AgVASRPAeroT30(IAgVASRPAeroT30, IAgComponentInfo, IAgCloneable):
    """AeroT30 SRP propagator function."""
    def __init__(self, sourceObject=None):
        IAgVASRPAeroT30.__init__(self, sourceObject)
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVASRPAeroT30._private_init(self, intf)
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVASRPAeroT30._get_property(self, attrname) is not None: found_prop = IAgVASRPAeroT30._get_property(self, attrname)
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVASRPAeroT30.")

agcls.AgClassCatalog.add_catalog_entry("{E4DF0601-9442-4649-AE24-516F20E819EF}", AgVASRPAeroT30)


class AgVASRPGSPM04aIIA(IAgVASRPGSPM04aIIA, IAgComponentInfo, IAgCloneable):
    """GSPM04aIIA SRP propagator function."""
    def __init__(self, sourceObject=None):
        IAgVASRPGSPM04aIIA.__init__(self, sourceObject)
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVASRPGSPM04aIIA._private_init(self, intf)
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVASRPGSPM04aIIA._get_property(self, attrname) is not None: found_prop = IAgVASRPGSPM04aIIA._get_property(self, attrname)
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVASRPGSPM04aIIA.")

agcls.AgClassCatalog.add_catalog_entry("{F6767C08-2100-464C-B18A-0528243E37DC}", AgVASRPGSPM04aIIA)


class AgVASRPGSPM04aIIR(IAgVASRPGSPM04aIIR, IAgComponentInfo, IAgCloneable):
    """GSPM04aIIR SRP propagator function."""
    def __init__(self, sourceObject=None):
        IAgVASRPGSPM04aIIR.__init__(self, sourceObject)
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVASRPGSPM04aIIR._private_init(self, intf)
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVASRPGSPM04aIIR._get_property(self, attrname) is not None: found_prop = IAgVASRPGSPM04aIIR._get_property(self, attrname)
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVASRPGSPM04aIIR.")

agcls.AgClassCatalog.add_catalog_entry("{FFF24BB0-8E3E-479A-957A-06719DF68A56}", AgVASRPGSPM04aIIR)


class AgVASRPGSPM04aeIIA(IAgVASRPGSPM04aeIIA, IAgComponentInfo, IAgCloneable):
    """GSPM04aeIIA SRP propagator function."""
    def __init__(self, sourceObject=None):
        IAgVASRPGSPM04aeIIA.__init__(self, sourceObject)
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVASRPGSPM04aeIIA._private_init(self, intf)
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVASRPGSPM04aeIIA._get_property(self, attrname) is not None: found_prop = IAgVASRPGSPM04aeIIA._get_property(self, attrname)
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVASRPGSPM04aeIIA.")

agcls.AgClassCatalog.add_catalog_entry("{82530B89-B383-4148-8606-BBA0EBA825CE}", AgVASRPGSPM04aeIIA)


class AgVASRPGSPM04aeIIR(IAgVASRPGSPM04aeIIR, IAgComponentInfo, IAgCloneable):
    """GSPM04aeIIR SRP propagator function."""
    def __init__(self, sourceObject=None):
        IAgVASRPGSPM04aeIIR.__init__(self, sourceObject)
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVASRPGSPM04aeIIR._private_init(self, intf)
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVASRPGSPM04aeIIR._get_property(self, attrname) is not None: found_prop = IAgVASRPGSPM04aeIIR._get_property(self, attrname)
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVASRPGSPM04aeIIR.")

agcls.AgClassCatalog.add_catalog_entry("{17C9AD04-9981-4541-9515-59A597003348}", AgVASRPGSPM04aeIIR)


class AgVASRPSpherical(IAgVASRPSpherical, IAgComponentInfo, IAgCloneable):
    """Spherical SRP propagator function."""
    def __init__(self, sourceObject=None):
        IAgVASRPSpherical.__init__(self, sourceObject)
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVASRPSpherical._private_init(self, intf)
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVASRPSpherical._get_property(self, attrname) is not None: found_prop = IAgVASRPSpherical._get_property(self, attrname)
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVASRPSpherical.")

agcls.AgClassCatalog.add_catalog_entry("{4318B037-C619-4722-A0F5-4FFDFA7D9474}", AgVASRPSpherical)


class AgVASRPNPlate(IAgVASRPNPlate, IAgComponentInfo, IAgCloneable):
    """NPlate SRP propagator function."""
    def __init__(self, sourceObject=None):
        IAgVASRPNPlate.__init__(self, sourceObject)
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVASRPNPlate._private_init(self, intf)
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVASRPNPlate._get_property(self, attrname) is not None: found_prop = IAgVASRPNPlate._get_property(self, attrname)
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVASRPNPlate.")

agcls.AgClassCatalog.add_catalog_entry("{81962DC5-1A26-4077-AC39-E8E75145858A}", AgVASRPNPlate)


class AgVASRPTabAreaVec(IAgVASRPTabAreaVec, IAgComponentInfo, IAgCloneable):
    """Tabulated area vector SRP propagator function."""
    def __init__(self, sourceObject=None):
        IAgVASRPTabAreaVec.__init__(self, sourceObject)
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVASRPTabAreaVec._private_init(self, intf)
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVASRPTabAreaVec._get_property(self, attrname) is not None: found_prop = IAgVASRPTabAreaVec._get_property(self, attrname)
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVASRPTabAreaVec.")

agcls.AgClassCatalog.add_catalog_entry("{77FAE0BD-36AF-4140-B62E-7B2865841152}", AgVASRPTabAreaVec)


class AgVASRPVariableArea(IAgVASRPVariableArea, IAgComponentInfo, IAgCloneable):
    """Variable Area SRP propagator function."""
    def __init__(self, sourceObject=None):
        IAgVASRPVariableArea.__init__(self, sourceObject)
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVASRPVariableArea._private_init(self, intf)
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVASRPVariableArea._get_property(self, attrname) is not None: found_prop = IAgVASRPVariableArea._get_property(self, attrname)
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVASRPVariableArea.")

agcls.AgClassCatalog.add_catalog_entry("{193838B2-807F-4E24-A05D-2E0BAB03B497}", AgVASRPVariableArea)


class AgVAThirdBodyFunction(IAgVAThirdBodyFunction, IAgComponentInfo, IAgCloneable):
    """ThirdBody propagator function."""
    def __init__(self, sourceObject=None):
        IAgVAThirdBodyFunction.__init__(self, sourceObject)
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAThirdBodyFunction._private_init(self, intf)
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAThirdBodyFunction._get_property(self, attrname) is not None: found_prop = IAgVAThirdBodyFunction._get_property(self, attrname)
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAThirdBodyFunction.")

agcls.AgClassCatalog.add_catalog_entry("{7E7DF54F-A10B-4B57-9919-ACD123F69001}", AgVAThirdBodyFunction)


class AgVADragModelPlugin(IAgVADragModelPlugin, IAgComponentInfo, IAgCloneable):
    """Drag Model Plugin."""
    def __init__(self, sourceObject=None):
        IAgVADragModelPlugin.__init__(self, sourceObject)
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVADragModelPlugin._private_init(self, intf)
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVADragModelPlugin._get_property(self, attrname) is not None: found_prop = IAgVADragModelPlugin._get_property(self, attrname)
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVADragModelPlugin.")

agcls.AgClassCatalog.add_catalog_entry("{C48CB2A8-A6E1-4E7B-ABB2-179D1E06D541}", AgVADragModelPlugin)


class AgVASRPReflectionPlugin(IAgVASRPReflectionPlugin, IAgComponentInfo, IAgCloneable):
    """SRP Reflection Plugin."""
    def __init__(self, sourceObject=None):
        IAgVASRPReflectionPlugin.__init__(self, sourceObject)
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVASRPReflectionPlugin._private_init(self, intf)
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVASRPReflectionPlugin._get_property(self, attrname) is not None: found_prop = IAgVASRPReflectionPlugin._get_property(self, attrname)
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVASRPReflectionPlugin.")

agcls.AgClassCatalog.add_catalog_entry("{926296A2-EA6B-4FC8-A75C-15B9F24B85E5}", AgVASRPReflectionPlugin)


class AgVAEngineConstAcc(IAgVAEngineConstAcc, IAgComponentInfo, IAgCloneable):
    """Constant Acceleration engine model."""
    def __init__(self, sourceObject=None):
        IAgVAEngineConstAcc.__init__(self, sourceObject)
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAEngineConstAcc._private_init(self, intf)
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAEngineConstAcc._get_property(self, attrname) is not None: found_prop = IAgVAEngineConstAcc._get_property(self, attrname)
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAEngineConstAcc.")

agcls.AgClassCatalog.add_catalog_entry("{359488A0-BCA3-4739-8614-E99B675553AF}", AgVAEngineConstAcc)


class AgVAEngineConstant(IAgVAEngineConstant, IAgComponentInfo, IAgCloneable):
    """Constant Thrust engine model."""
    def __init__(self, sourceObject=None):
        IAgVAEngineConstant.__init__(self, sourceObject)
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAEngineConstant._private_init(self, intf)
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAEngineConstant._get_property(self, attrname) is not None: found_prop = IAgVAEngineConstant._get_property(self, attrname)
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAEngineConstant.")

agcls.AgClassCatalog.add_catalog_entry("{31105070-4B5A-4870-A45B-6F6CF13042DD}", AgVAEngineConstant)


class AgVAEngineIon(IAgVAEngineIon, IAgComponentInfo, IAgCloneable):
    """Ion Engine engine model."""
    def __init__(self, sourceObject=None):
        IAgVAEngineIon.__init__(self, sourceObject)
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAEngineIon._private_init(self, intf)
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAEngineIon._get_property(self, attrname) is not None: found_prop = IAgVAEngineIon._get_property(self, attrname)
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAEngineIon.")

agcls.AgClassCatalog.add_catalog_entry("{6AD7EC4F-2E59-4D7B-9FC2-9022CB8540B6}", AgVAEngineIon)


class AgVAEngineThrottleTable(IAgVAEngineThrottleTable, IAgComponentInfo, IAgCloneable):
    """Throttle Table engine model."""
    def __init__(self, sourceObject=None):
        IAgVAEngineThrottleTable.__init__(self, sourceObject)
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAEngineThrottleTable._private_init(self, intf)
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAEngineThrottleTable._get_property(self, attrname) is not None: found_prop = IAgVAEngineThrottleTable._get_property(self, attrname)
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAEngineThrottleTable.")

agcls.AgClassCatalog.add_catalog_entry("{FB947497-4C0D-4F39-9942-31A9A0D3025F}", AgVAEngineThrottleTable)


class AgVAEngineCustom(IAgVAEngineCustom, IAgComponentInfo, IAgCloneable):
    """Custom engine model."""
    def __init__(self, sourceObject=None):
        IAgVAEngineCustom.__init__(self, sourceObject)
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAEngineCustom._private_init(self, intf)
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAEngineCustom._get_property(self, attrname) is not None: found_prop = IAgVAEngineCustom._get_property(self, attrname)
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAEngineCustom.")

agcls.AgClassCatalog.add_catalog_entry("{5C0367CE-254E-4BDB-8056-ED27D584258E}", AgVAEngineCustom)


class AgVAEnginePlugin(IAgVAEnginePlugin, IAgComponentInfo, IAgCloneable):
    """Plugin engine model."""
    def __init__(self, sourceObject=None):
        IAgVAEnginePlugin.__init__(self, sourceObject)
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAEnginePlugin._private_init(self, intf)
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAEnginePlugin._get_property(self, attrname) is not None: found_prop = IAgVAEnginePlugin._get_property(self, attrname)
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAEnginePlugin.")

agcls.AgClassCatalog.add_catalog_entry("{D7755FC3-1A9F-4DB5-B735-030256F4AE24}", AgVAEnginePlugin)


class AgVAEngineModelPoly(IAgVAEngineModelPoly, IAgComponentInfo, IAgCloneable):
    """Polynomial Thrust and Isp engine model."""
    def __init__(self, sourceObject=None):
        IAgVAEngineModelPoly.__init__(self, sourceObject)
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAEngineModelPoly._private_init(self, intf)
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAEngineModelPoly._get_property(self, attrname) is not None: found_prop = IAgVAEngineModelPoly._get_property(self, attrname)
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAEngineModelPoly.")

agcls.AgClassCatalog.add_catalog_entry("{0D23F634-A8B8-4376-99AE-F8287C267EDC}", AgVAEngineModelPoly)


class AgVAEngineModelThrustCoefficients(IAgVAEngineModelThrustCoefficients):
    """Engine Model Thrust Coefficients."""
    def __init__(self, sourceObject=None):
        IAgVAEngineModelThrustCoefficients.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAEngineModelThrustCoefficients._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAEngineModelThrustCoefficients._get_property(self, attrname) is not None: found_prop = IAgVAEngineModelThrustCoefficients._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAEngineModelThrustCoefficients.")

agcls.AgClassCatalog.add_catalog_entry("{1B8E6E69-F100-4A4B-A24A-FFC3C8B0AF70}", AgVAEngineModelThrustCoefficients)


class AgVAEngineModelIspCoefficients(IAgVAEngineModelIspCoefficients):
    """Engine Model Isp Coefficients."""
    def __init__(self, sourceObject=None):
        IAgVAEngineModelIspCoefficients.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAEngineModelIspCoefficients._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAEngineModelIspCoefficients._get_property(self, attrname) is not None: found_prop = IAgVAEngineModelIspCoefficients._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAEngineModelIspCoefficients.")

agcls.AgClassCatalog.add_catalog_entry("{279B11AE-A5F8-4548-9401-95981B21C61C}", AgVAEngineModelIspCoefficients)


class AgVAEngineDefinition(IAgVAEngineDefinition):
    """Engine definition."""
    def __init__(self, sourceObject=None):
        IAgVAEngineDefinition.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAEngineDefinition._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAEngineDefinition._get_property(self, attrname) is not None: found_prop = IAgVAEngineDefinition._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAEngineDefinition.")

agcls.AgClassCatalog.add_catalog_entry("{F87429C7-51DC-4AD8-8481-468C14F38AB4}", AgVAEngineDefinition)


class AgVADesignCR3BPSetup(IAgVADesignCR3BPSetup, IAgComponentInfo, IAgCloneable):
    """CR3BP Setup Tool."""
    def __init__(self, sourceObject=None):
        IAgVADesignCR3BPSetup.__init__(self, sourceObject)
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVADesignCR3BPSetup._private_init(self, intf)
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVADesignCR3BPSetup._get_property(self, attrname) is not None: found_prop = IAgVADesignCR3BPSetup._get_property(self, attrname)
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVADesignCR3BPSetup.")

agcls.AgClassCatalog.add_catalog_entry("{97419F0F-66BA-4C13-800E-56D8856CAAA3}", AgVADesignCR3BPSetup)


class AgVADesignCR3BPObject(IAgVADesignCR3BPObject):
    """CR3BP associated object definition."""
    def __init__(self, sourceObject=None):
        IAgVADesignCR3BPObject.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVADesignCR3BPObject._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVADesignCR3BPObject._get_property(self, attrname) is not None: found_prop = IAgVADesignCR3BPObject._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVADesignCR3BPObject.")

agcls.AgClassCatalog.add_catalog_entry("{2256C391-AE04-462C-8A4F-5D00D522112D}", AgVADesignCR3BPObject)


class AgVADesignCR3BPObjectCollection(IAgVADesignCR3BPObjectCollection):
    """CR3BP associated object Collection."""
    def __init__(self, sourceObject=None):
        IAgVADesignCR3BPObjectCollection.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVADesignCR3BPObjectCollection._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVADesignCR3BPObjectCollection._get_property(self, attrname) is not None: found_prop = IAgVADesignCR3BPObjectCollection._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVADesignCR3BPObjectCollection.")

agcls.AgClassCatalog.add_catalog_entry("{A70D32B8-E717-449E-8A79-29E429BED03F}", AgVADesignCR3BPObjectCollection)


class AgVAThruster(IAgVAThruster):
    """Thruster definition."""
    def __init__(self, sourceObject=None):
        IAgVAThruster.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAThruster._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAThruster._get_property(self, attrname) is not None: found_prop = IAgVAThruster._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAThruster.")

agcls.AgClassCatalog.add_catalog_entry("{749FEA15-5BD9-4466-BADF-E917D640E6D8}", AgVAThruster)


class AgVAThrusterSetCollection(IAgVAThrusterSetCollection):
    """Thruster Set Collection."""
    def __init__(self, sourceObject=None):
        IAgVAThrusterSetCollection.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAThrusterSetCollection._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAThrusterSetCollection._get_property(self, attrname) is not None: found_prop = IAgVAThrusterSetCollection._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAThrusterSetCollection.")

agcls.AgClassCatalog.add_catalog_entry("{8C1B379E-8092-48BE-A401-651464239B27}", AgVAThrusterSetCollection)


class AgVAThrusterSet(IAgVAThrusterSet, IAgComponentInfo, IAgCloneable):
    """Thruster Set."""
    def __init__(self, sourceObject=None):
        IAgVAThrusterSet.__init__(self, sourceObject)
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAThrusterSet._private_init(self, intf)
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAThrusterSet._get_property(self, attrname) is not None: found_prop = IAgVAThrusterSet._get_property(self, attrname)
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAThrusterSet.")

agcls.AgClassCatalog.add_catalog_entry("{00FB61C4-5A63-439B-A030-171588D7CFED}", AgVAThrusterSet)


class AgVAAsTriggerCondition(IAgVAAsTriggerCondition, IAgComponentInfo, IAgCloneable):
    """Constraint."""
    def __init__(self, sourceObject=None):
        IAgVAAsTriggerCondition.__init__(self, sourceObject)
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAAsTriggerCondition._private_init(self, intf)
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAAsTriggerCondition._get_property(self, attrname) is not None: found_prop = IAgVAAsTriggerCondition._get_property(self, attrname)
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAAsTriggerCondition.")

agcls.AgClassCatalog.add_catalog_entry("{32E146B0-C168-4BD3-A2D9-ECF7096687E5}", AgVAAsTriggerCondition)


class AgVACustomFunctionScriptEngine(IAgVACustomFunctionScriptEngine, IAgComponentInfo, IAgCloneable):
    """Custom Function Script Engine."""
    def __init__(self, sourceObject=None):
        IAgVACustomFunctionScriptEngine.__init__(self, sourceObject)
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVACustomFunctionScriptEngine._private_init(self, intf)
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVACustomFunctionScriptEngine._get_property(self, attrname) is not None: found_prop = IAgVACustomFunctionScriptEngine._get_property(self, attrname)
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVACustomFunctionScriptEngine.")

agcls.AgClassCatalog.add_catalog_entry("{F4CD79CC-CFAA-4EEE-A01A-0F846D6F6674}", AgVACustomFunctionScriptEngine)


class AgVANumericalPropagatorWrapper(IAgVANumericalPropagatorWrapper, IAgComponentInfo, IAgCloneable):
    """Numerical Propagator."""
    def __init__(self, sourceObject=None):
        IAgVANumericalPropagatorWrapper.__init__(self, sourceObject)
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVANumericalPropagatorWrapper._private_init(self, intf)
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVANumericalPropagatorWrapper._get_property(self, attrname) is not None: found_prop = IAgVANumericalPropagatorWrapper._get_property(self, attrname)
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVANumericalPropagatorWrapper.")

agcls.AgClassCatalog.add_catalog_entry("{6F733B37-D5A3-4D83-844B-34A35BA937CC}", AgVANumericalPropagatorWrapper)


class AgVANumericalPropagatorWrapperCR3BP(IAgVANumericalPropagatorWrapperCR3BP, IAgComponentInfo, IAgCloneable):
    """Numerical CR3BP Propagator."""
    def __init__(self, sourceObject=None):
        IAgVANumericalPropagatorWrapperCR3BP.__init__(self, sourceObject)
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVANumericalPropagatorWrapperCR3BP._private_init(self, intf)
        IAgComponentInfo._private_init(self, intf)
        IAgCloneable._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVANumericalPropagatorWrapperCR3BP._get_property(self, attrname) is not None: found_prop = IAgVANumericalPropagatorWrapperCR3BP._get_property(self, attrname)
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVANumericalPropagatorWrapperCR3BP.")

agcls.AgClassCatalog.add_catalog_entry("{C4823BEE-E898-47D3-8C29-9CCE6DB490FE}", AgVANumericalPropagatorWrapperCR3BP)


class AgVAPropagatorFunctionCollection(IAgVAPropagatorFunctionCollection):
    """Propagator Function Collection."""
    def __init__(self, sourceObject=None):
        IAgVAPropagatorFunctionCollection.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAPropagatorFunctionCollection._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAPropagatorFunctionCollection._get_property(self, attrname) is not None: found_prop = IAgVAPropagatorFunctionCollection._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAPropagatorFunctionCollection.")

agcls.AgClassCatalog.add_catalog_entry("{41440862-0DA5-41B0-9A84-073FBC64D47A}", AgVAPropagatorFunctionCollection)


class AgVABulirschStoerIntegrator(IAgVABulirschStoerIntegrator, IAgVANumericalIntegrator):
    """Bulirsch-Stoer Numerical Integrator."""
    def __init__(self, sourceObject=None):
        IAgVABulirschStoerIntegrator.__init__(self, sourceObject)
        IAgVANumericalIntegrator.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVABulirschStoerIntegrator._private_init(self, intf)
        IAgVANumericalIntegrator._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVABulirschStoerIntegrator._get_property(self, attrname) is not None: found_prop = IAgVABulirschStoerIntegrator._get_property(self, attrname)
        if IAgVANumericalIntegrator._get_property(self, attrname) is not None: found_prop = IAgVANumericalIntegrator._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVABulirschStoerIntegrator.")

agcls.AgClassCatalog.add_catalog_entry("{B98456C5-48DE-41AB-867B-FD713A325418}", AgVABulirschStoerIntegrator)


class AgVAGaussJacksonIntegrator(IAgVAGaussJacksonIntegrator, IAgVANumericalIntegrator):
    """Gauss-Jackson Numerical Integrator."""
    def __init__(self, sourceObject=None):
        IAgVAGaussJacksonIntegrator.__init__(self, sourceObject)
        IAgVANumericalIntegrator.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAGaussJacksonIntegrator._private_init(self, intf)
        IAgVANumericalIntegrator._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAGaussJacksonIntegrator._get_property(self, attrname) is not None: found_prop = IAgVAGaussJacksonIntegrator._get_property(self, attrname)
        if IAgVANumericalIntegrator._get_property(self, attrname) is not None: found_prop = IAgVANumericalIntegrator._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAGaussJacksonIntegrator.")

agcls.AgClassCatalog.add_catalog_entry("{034F55EC-4D6E-4C22-9811-C3DEBC83ABD9}", AgVAGaussJacksonIntegrator)


class AgVARK2nd3rd(IAgVARK2nd3rd, IAgVANumericalIntegrator):
    """RK2nd3rd Numerical Integrator."""
    def __init__(self, sourceObject=None):
        IAgVARK2nd3rd.__init__(self, sourceObject)
        IAgVANumericalIntegrator.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVARK2nd3rd._private_init(self, intf)
        IAgVANumericalIntegrator._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVARK2nd3rd._get_property(self, attrname) is not None: found_prop = IAgVARK2nd3rd._get_property(self, attrname)
        if IAgVANumericalIntegrator._get_property(self, attrname) is not None: found_prop = IAgVANumericalIntegrator._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVARK2nd3rd.")

agcls.AgClassCatalog.add_catalog_entry("{F3511C10-B4F1-4592-81AC-41D387A9589B}", AgVARK2nd3rd)


class AgVARK4th(IAgVARK4th, IAgVANumericalIntegrator):
    """RK4th Numerical Integrator."""
    def __init__(self, sourceObject=None):
        IAgVARK4th.__init__(self, sourceObject)
        IAgVANumericalIntegrator.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVARK4th._private_init(self, intf)
        IAgVANumericalIntegrator._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVARK4th._get_property(self, attrname) is not None: found_prop = IAgVARK4th._get_property(self, attrname)
        if IAgVANumericalIntegrator._get_property(self, attrname) is not None: found_prop = IAgVANumericalIntegrator._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVARK4th.")

agcls.AgClassCatalog.add_catalog_entry("{019C798B-5AB2-42F1-847E-AC64438C8341}", AgVARK4th)


class AgVARK4th5th(IAgVARK4th5th, IAgVANumericalIntegrator):
    """RK4th5th Numerical Integrator."""
    def __init__(self, sourceObject=None):
        IAgVARK4th5th.__init__(self, sourceObject)
        IAgVANumericalIntegrator.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVARK4th5th._private_init(self, intf)
        IAgVANumericalIntegrator._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVARK4th5th._get_property(self, attrname) is not None: found_prop = IAgVARK4th5th._get_property(self, attrname)
        if IAgVANumericalIntegrator._get_property(self, attrname) is not None: found_prop = IAgVANumericalIntegrator._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVARK4th5th.")

agcls.AgClassCatalog.add_catalog_entry("{25B6537D-FF33-45E7-A314-F6E4EFA34CD5}", AgVARK4th5th)


class AgVARK4thAdapt(IAgVARK4thAdapt, IAgVANumericalIntegrator):
    """RK4thAdapt Numerical Integrator."""
    def __init__(self, sourceObject=None):
        IAgVARK4thAdapt.__init__(self, sourceObject)
        IAgVANumericalIntegrator.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVARK4thAdapt._private_init(self, intf)
        IAgVANumericalIntegrator._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVARK4thAdapt._get_property(self, attrname) is not None: found_prop = IAgVARK4thAdapt._get_property(self, attrname)
        if IAgVANumericalIntegrator._get_property(self, attrname) is not None: found_prop = IAgVANumericalIntegrator._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVARK4thAdapt.")

agcls.AgClassCatalog.add_catalog_entry("{03F69912-84E6-4209-8AF5-FD2C4B009C44}", AgVARK4thAdapt)


class AgVARKF7th8th(IAgVARKF7th8th, IAgVANumericalIntegrator):
    """RKF7th8th Numerical Integrator."""
    def __init__(self, sourceObject=None):
        IAgVARKF7th8th.__init__(self, sourceObject)
        IAgVANumericalIntegrator.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVARKF7th8th._private_init(self, intf)
        IAgVANumericalIntegrator._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVARKF7th8th._get_property(self, attrname) is not None: found_prop = IAgVARKF7th8th._get_property(self, attrname)
        if IAgVANumericalIntegrator._get_property(self, attrname) is not None: found_prop = IAgVANumericalIntegrator._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVARKF7th8th.")

agcls.AgClassCatalog.add_catalog_entry("{78A98F0E-B687-4D64-B0F6-5608105504CC}", AgVARKF7th8th)


class AgVARKV8th9th(IAgVARKV8th9th, IAgVANumericalIntegrator):
    """RKV8th9th Numerical Integrator."""
    def __init__(self, sourceObject=None):
        IAgVARKV8th9th.__init__(self, sourceObject)
        IAgVANumericalIntegrator.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVARKV8th9th._private_init(self, intf)
        IAgVANumericalIntegrator._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVARKV8th9th._get_property(self, attrname) is not None: found_prop = IAgVARKV8th9th._get_property(self, attrname)
        if IAgVANumericalIntegrator._get_property(self, attrname) is not None: found_prop = IAgVANumericalIntegrator._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVARKV8th9th.")

agcls.AgClassCatalog.add_catalog_entry("{26857B4B-40C9-4EC2-B5F7-AFEB6103128D}", AgVARKV8th9th)


class AgVAScriptingTool(IAgVAScriptingTool, IAgRuntimeTypeInfoProvider):
    """Scripting Tool."""
    def __init__(self, sourceObject=None):
        IAgVAScriptingTool.__init__(self, sourceObject)
        IAgRuntimeTypeInfoProvider.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAScriptingTool._private_init(self, intf)
        IAgRuntimeTypeInfoProvider._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAScriptingTool._get_property(self, attrname) is not None: found_prop = IAgVAScriptingTool._get_property(self, attrname)
        if IAgRuntimeTypeInfoProvider._get_property(self, attrname) is not None: found_prop = IAgRuntimeTypeInfoProvider._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAScriptingTool.")

agcls.AgClassCatalog.add_catalog_entry("{1FB508B7-F4D9-4ABF-8EA8-B44AECAEE9C0}", AgVAScriptingTool)


class AgVAScriptingSegmentCollection(IAgVAScriptingSegmentCollection, IAgRuntimeTypeInfoProvider):
    """Scripting Segment Collection."""
    def __init__(self, sourceObject=None):
        IAgVAScriptingSegmentCollection.__init__(self, sourceObject)
        IAgRuntimeTypeInfoProvider.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAScriptingSegmentCollection._private_init(self, intf)
        IAgRuntimeTypeInfoProvider._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAScriptingSegmentCollection._get_property(self, attrname) is not None: found_prop = IAgVAScriptingSegmentCollection._get_property(self, attrname)
        if IAgRuntimeTypeInfoProvider._get_property(self, attrname) is not None: found_prop = IAgRuntimeTypeInfoProvider._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAScriptingSegmentCollection.")

agcls.AgClassCatalog.add_catalog_entry("{2D397364-3CD3-4FC2-8B11-D74D7A348687}", AgVAScriptingSegmentCollection)


class AgVAScriptingSegment(IAgVAScriptingSegment, IAgRuntimeTypeInfoProvider):
    """Scripting Segment."""
    def __init__(self, sourceObject=None):
        IAgVAScriptingSegment.__init__(self, sourceObject)
        IAgRuntimeTypeInfoProvider.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAScriptingSegment._private_init(self, intf)
        IAgRuntimeTypeInfoProvider._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAScriptingSegment._get_property(self, attrname) is not None: found_prop = IAgVAScriptingSegment._get_property(self, attrname)
        if IAgRuntimeTypeInfoProvider._get_property(self, attrname) is not None: found_prop = IAgRuntimeTypeInfoProvider._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAScriptingSegment.")

agcls.AgClassCatalog.add_catalog_entry("{FD68184D-BA0A-41EC-B03E-E63514058625}", AgVAScriptingSegment)


class AgVAScriptingParameterCollection(IAgVAScriptingParameterCollection, IAgRuntimeTypeInfoProvider):
    """Scripting Parameter Collection."""
    def __init__(self, sourceObject=None):
        IAgVAScriptingParameterCollection.__init__(self, sourceObject)
        IAgRuntimeTypeInfoProvider.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAScriptingParameterCollection._private_init(self, intf)
        IAgRuntimeTypeInfoProvider._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAScriptingParameterCollection._get_property(self, attrname) is not None: found_prop = IAgVAScriptingParameterCollection._get_property(self, attrname)
        if IAgRuntimeTypeInfoProvider._get_property(self, attrname) is not None: found_prop = IAgRuntimeTypeInfoProvider._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAScriptingParameterCollection.")

agcls.AgClassCatalog.add_catalog_entry("{F7B45439-8E25-43DE-882F-844F8645F015}", AgVAScriptingParameterCollection)


class AgVAScriptingParameter(IAgVAScriptingParameter, IAgRuntimeTypeInfoProvider):
    """Scripting Parameter."""
    def __init__(self, sourceObject=None):
        IAgVAScriptingParameter.__init__(self, sourceObject)
        IAgRuntimeTypeInfoProvider.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAScriptingParameter._private_init(self, intf)
        IAgRuntimeTypeInfoProvider._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAScriptingParameter._get_property(self, attrname) is not None: found_prop = IAgVAScriptingParameter._get_property(self, attrname)
        if IAgRuntimeTypeInfoProvider._get_property(self, attrname) is not None: found_prop = IAgRuntimeTypeInfoProvider._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAScriptingParameter.")

agcls.AgClassCatalog.add_catalog_entry("{92BFA902-938E-48E0-B402-C6DEE9169BEE}", AgVAScriptingParameter)


class AgVAScriptingCalcObject(IAgVAScriptingCalcObject):
    """Calc Object."""
    def __init__(self, sourceObject=None):
        IAgVAScriptingCalcObject.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAScriptingCalcObject._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAScriptingCalcObject._get_property(self, attrname) is not None: found_prop = IAgVAScriptingCalcObject._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAScriptingCalcObject.")

agcls.AgClassCatalog.add_catalog_entry("{D9895635-D8A5-497F-9C4D-E0A18AF49983}", AgVAScriptingCalcObject)


class AgVAScriptingCalcObjectCollection(IAgVAScriptingCalcObjectCollection):
    """Calc Object Collection."""
    def __init__(self, sourceObject=None):
        IAgVAScriptingCalcObjectCollection.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAScriptingCalcObjectCollection._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAScriptingCalcObjectCollection._get_property(self, attrname) is not None: found_prop = IAgVAScriptingCalcObjectCollection._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAScriptingCalcObjectCollection.")

agcls.AgClassCatalog.add_catalog_entry("{9FC08736-F254-451E-9292-C003D5601780}", AgVAScriptingCalcObjectCollection)


class AgVAUserVariableDefinition(IAgVAUserVariableDefinition):
    """User Variable Definition"""
    def __init__(self, sourceObject=None):
        IAgVAUserVariableDefinition.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAUserVariableDefinition._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAUserVariableDefinition._get_property(self, attrname) is not None: found_prop = IAgVAUserVariableDefinition._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAUserVariableDefinition.")

agcls.AgClassCatalog.add_catalog_entry("{659E4C4D-E224-47D7-A899-C9B5DCF7241F}", AgVAUserVariableDefinition)


class AgVAUserVariable(IAgVAUserVariable):
    """User Variable"""
    def __init__(self, sourceObject=None):
        IAgVAUserVariable.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAUserVariable._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAUserVariable._get_property(self, attrname) is not None: found_prop = IAgVAUserVariable._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAUserVariable.")

agcls.AgClassCatalog.add_catalog_entry("{437599F8-0E00-4984-81CA-B450200257BC}", AgVAUserVariable)


class AgVAUserVariableUpdate(IAgVAUserVariableUpdate):
    """User Variable Update"""
    def __init__(self, sourceObject=None):
        IAgVAUserVariableUpdate.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAUserVariableUpdate._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAUserVariableUpdate._get_property(self, attrname) is not None: found_prop = IAgVAUserVariableUpdate._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAUserVariableUpdate.")

agcls.AgClassCatalog.add_catalog_entry("{EB1FC76A-82D7-43C1-919B-05F53CEFC2ED}", AgVAUserVariableUpdate)


class AgVAUserVariableDefinitionCollection(IAgVAUserVariableDefinitionCollection):
    """User Variable Definition Collection."""
    def __init__(self, sourceObject=None):
        IAgVAUserVariableDefinitionCollection.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAUserVariableDefinitionCollection._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAUserVariableDefinitionCollection._get_property(self, attrname) is not None: found_prop = IAgVAUserVariableDefinitionCollection._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAUserVariableDefinitionCollection.")

agcls.AgClassCatalog.add_catalog_entry("{E1D09185-E7EC-4E3F-BFEF-52AC92FEEC75}", AgVAUserVariableDefinitionCollection)


class AgVAUserVariableCollection(IAgVAUserVariableCollection):
    """User Variable Initial Value Collection."""
    def __init__(self, sourceObject=None):
        IAgVAUserVariableCollection.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAUserVariableCollection._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAUserVariableCollection._get_property(self, attrname) is not None: found_prop = IAgVAUserVariableCollection._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAUserVariableCollection.")

agcls.AgClassCatalog.add_catalog_entry("{801C61FA-C0FE-4BFD-8001-3335211F7328}", AgVAUserVariableCollection)


class AgVAUserVariableUpdateCollection(IAgVAUserVariableUpdateCollection):
    """User Variable Update Collection"""
    def __init__(self, sourceObject=None):
        IAgVAUserVariableUpdateCollection.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAUserVariableUpdateCollection._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAUserVariableUpdateCollection._get_property(self, attrname) is not None: found_prop = IAgVAUserVariableUpdateCollection._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAUserVariableUpdateCollection.")

agcls.AgClassCatalog.add_catalog_entry("{FD7D6D39-4E5B-41E1-84E2-CBCAE8ECCF41}", AgVAUserVariableUpdateCollection)


class AgVACalculationGraphCollection(IAgVACalculationGraphCollection):
    """Calculation Graph Collection."""
    def __init__(self, sourceObject=None):
        IAgVACalculationGraphCollection.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVACalculationGraphCollection._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVACalculationGraphCollection._get_property(self, attrname) is not None: found_prop = IAgVACalculationGraphCollection._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVACalculationGraphCollection.")

agcls.AgClassCatalog.add_catalog_entry("{40E20BE7-7961-468B-B396-8F6E980BE49E}", AgVACalculationGraphCollection)


class AgVAScriptingParameterEnumerationChoice(IAgVAScriptingParameterEnumerationChoice, IAgRuntimeTypeInfoProvider):
    """Scripting Parameter Enumeration Choice."""
    def __init__(self, sourceObject=None):
        IAgVAScriptingParameterEnumerationChoice.__init__(self, sourceObject)
        IAgRuntimeTypeInfoProvider.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAScriptingParameterEnumerationChoice._private_init(self, intf)
        IAgRuntimeTypeInfoProvider._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAScriptingParameterEnumerationChoice._get_property(self, attrname) is not None: found_prop = IAgVAScriptingParameterEnumerationChoice._get_property(self, attrname)
        if IAgRuntimeTypeInfoProvider._get_property(self, attrname) is not None: found_prop = IAgRuntimeTypeInfoProvider._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAScriptingParameterEnumerationChoice.")

agcls.AgClassCatalog.add_catalog_entry("{82A982C2-A2AD-4FD8-AB46-A54866F56AEA}", AgVAScriptingParameterEnumerationChoice)


class AgVAScriptingParameterEnumerationChoiceCollection(IAgVAScriptingParameterEnumerationChoiceCollection, IAgRuntimeTypeInfoProvider):
    """Scripting Parameter Enumeration Choice Collection"""
    def __init__(self, sourceObject=None):
        IAgVAScriptingParameterEnumerationChoiceCollection.__init__(self, sourceObject)
        IAgRuntimeTypeInfoProvider.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAScriptingParameterEnumerationChoiceCollection._private_init(self, intf)
        IAgRuntimeTypeInfoProvider._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAScriptingParameterEnumerationChoiceCollection._get_property(self, attrname) is not None: found_prop = IAgVAScriptingParameterEnumerationChoiceCollection._get_property(self, attrname)
        if IAgRuntimeTypeInfoProvider._get_property(self, attrname) is not None: found_prop = IAgRuntimeTypeInfoProvider._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAScriptingParameterEnumerationChoiceCollection.")

agcls.AgClassCatalog.add_catalog_entry("{E4F13182-12CE-420B-AC3A-8530CC46BE35}", AgVAScriptingParameterEnumerationChoiceCollection)


class AgVAProfileSNOPTOptimizer(IAgVAProfileSNOPTOptimizer, IAgVAProfile, IAgRuntimeTypeInfoProvider):
    """SNOPT optimizer profile"""
    def __init__(self, sourceObject=None):
        IAgVAProfileSNOPTOptimizer.__init__(self, sourceObject)
        IAgVAProfile.__init__(self, sourceObject)
        IAgRuntimeTypeInfoProvider.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAProfileSNOPTOptimizer._private_init(self, intf)
        IAgVAProfile._private_init(self, intf)
        IAgRuntimeTypeInfoProvider._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAProfileSNOPTOptimizer._get_property(self, attrname) is not None: found_prop = IAgVAProfileSNOPTOptimizer._get_property(self, attrname)
        if IAgVAProfile._get_property(self, attrname) is not None: found_prop = IAgVAProfile._get_property(self, attrname)
        if IAgRuntimeTypeInfoProvider._get_property(self, attrname) is not None: found_prop = IAgRuntimeTypeInfoProvider._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAProfileSNOPTOptimizer.")

agcls.AgClassCatalog.add_catalog_entry("{6F7AFA8D-FC45-4955-BEFB-BDE94553C02E}", AgVAProfileSNOPTOptimizer)


class AgVASNOPTControl(IAgVASNOPTControl):
    """Control parameters for SNOPT optimizer profile"""
    def __init__(self, sourceObject=None):
        IAgVASNOPTControl.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVASNOPTControl._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVASNOPTControl._get_property(self, attrname) is not None: found_prop = IAgVASNOPTControl._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVASNOPTControl.")

agcls.AgClassCatalog.add_catalog_entry("{5CD8E3EB-8BCA-4D53-A361-484285E62C96}", AgVASNOPTControl)


class AgVASNOPTResult(IAgVASNOPTResult):
    """Properties for objecvtive and constraints of a SNOPT profile."""
    def __init__(self, sourceObject=None):
        IAgVASNOPTResult.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVASNOPTResult._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVASNOPTResult._get_property(self, attrname) is not None: found_prop = IAgVASNOPTResult._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVASNOPTResult.")

agcls.AgClassCatalog.add_catalog_entry("{F739575C-EF90-4B58-917A-BD0C12C95055}", AgVASNOPTResult)


class AgVASNOPTControlCollection(IAgVASNOPTControlCollection):
    """SNOPT control collection."""
    def __init__(self, sourceObject=None):
        IAgVASNOPTControlCollection.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVASNOPTControlCollection._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVASNOPTControlCollection._get_property(self, attrname) is not None: found_prop = IAgVASNOPTControlCollection._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVASNOPTControlCollection.")

agcls.AgClassCatalog.add_catalog_entry("{99EECA52-DE6C-4E2C-805E-725A3A009E4B}", AgVASNOPTControlCollection)


class AgVASNOPTResultCollection(IAgVASNOPTResultCollection):
    """SNOPT result collection."""
    def __init__(self, sourceObject=None):
        IAgVASNOPTResultCollection.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVASNOPTResultCollection._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVASNOPTResultCollection._get_property(self, attrname) is not None: found_prop = IAgVASNOPTResultCollection._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVASNOPTResultCollection.")

agcls.AgClassCatalog.add_catalog_entry("{D27CBF33-3EC4-40A0-A138-5F41720B0B08}", AgVASNOPTResultCollection)


class AgVAProfileIPOPTOptimizer(IAgVAProfileIPOPTOptimizer, IAgVAProfile, IAgRuntimeTypeInfoProvider):
    """IPOPT optimizer profile"""
    def __init__(self, sourceObject=None):
        IAgVAProfileIPOPTOptimizer.__init__(self, sourceObject)
        IAgVAProfile.__init__(self, sourceObject)
        IAgRuntimeTypeInfoProvider.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAProfileIPOPTOptimizer._private_init(self, intf)
        IAgVAProfile._private_init(self, intf)
        IAgRuntimeTypeInfoProvider._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAProfileIPOPTOptimizer._get_property(self, attrname) is not None: found_prop = IAgVAProfileIPOPTOptimizer._get_property(self, attrname)
        if IAgVAProfile._get_property(self, attrname) is not None: found_prop = IAgVAProfile._get_property(self, attrname)
        if IAgRuntimeTypeInfoProvider._get_property(self, attrname) is not None: found_prop = IAgRuntimeTypeInfoProvider._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAProfileIPOPTOptimizer.")

agcls.AgClassCatalog.add_catalog_entry("{59AB8108-2D2E-4D46-8B96-F1F43175CC77}", AgVAProfileIPOPTOptimizer)


class AgVAIPOPTControl(IAgVAIPOPTControl):
    """Control parameters for IPOPT optimizer profile"""
    def __init__(self, sourceObject=None):
        IAgVAIPOPTControl.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAIPOPTControl._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAIPOPTControl._get_property(self, attrname) is not None: found_prop = IAgVAIPOPTControl._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAIPOPTControl.")

agcls.AgClassCatalog.add_catalog_entry("{F7FF56DA-D284-4B28-88EC-BEE49D7E0CFD}", AgVAIPOPTControl)


class AgVAIPOPTResult(IAgVAIPOPTResult):
    """Properties for objecvtive and constraints of a IPOPT profile."""
    def __init__(self, sourceObject=None):
        IAgVAIPOPTResult.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAIPOPTResult._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAIPOPTResult._get_property(self, attrname) is not None: found_prop = IAgVAIPOPTResult._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAIPOPTResult.")

agcls.AgClassCatalog.add_catalog_entry("{DCFD15D6-9ACF-4FCB-B968-CB74B5E95B33}", AgVAIPOPTResult)


class AgVAIPOPTControlCollection(IAgVAIPOPTControlCollection):
    """Properties for the list of IPOPT control parameters."""
    def __init__(self, sourceObject=None):
        IAgVAIPOPTControlCollection.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAIPOPTControlCollection._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAIPOPTControlCollection._get_property(self, attrname) is not None: found_prop = IAgVAIPOPTControlCollection._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAIPOPTControlCollection.")

agcls.AgClassCatalog.add_catalog_entry("{522C81BC-6FFF-40FE-90C7-E4368FD1548D}", AgVAIPOPTControlCollection)


class AgVAIPOPTResultCollection(IAgVAIPOPTResultCollection):
    """IPOPT result collection."""
    def __init__(self, sourceObject=None):
        IAgVAIPOPTResultCollection.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAIPOPTResultCollection._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAIPOPTResultCollection._get_property(self, attrname) is not None: found_prop = IAgVAIPOPTResultCollection._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAIPOPTResultCollection.")

agcls.AgClassCatalog.add_catalog_entry("{4A10E1B9-87A1-4370-AAD8-F7856B099B5C}", AgVAIPOPTResultCollection)


class AgVAManeuverOptimalFinite(IAgVAManeuverOptimalFinite, IAgVAManeuver, IAgRuntimeTypeInfoProvider):
    """The Optimal Finite Maneuver."""
    def __init__(self, sourceObject=None):
        IAgVAManeuverOptimalFinite.__init__(self, sourceObject)
        IAgVAManeuver.__init__(self, sourceObject)
        IAgRuntimeTypeInfoProvider.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAManeuverOptimalFinite._private_init(self, intf)
        IAgVAManeuver._private_init(self, intf)
        IAgRuntimeTypeInfoProvider._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAManeuverOptimalFinite._get_property(self, attrname) is not None: found_prop = IAgVAManeuverOptimalFinite._get_property(self, attrname)
        if IAgVAManeuver._get_property(self, attrname) is not None: found_prop = IAgVAManeuver._get_property(self, attrname)
        if IAgRuntimeTypeInfoProvider._get_property(self, attrname) is not None: found_prop = IAgRuntimeTypeInfoProvider._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAManeuverOptimalFinite.")

agcls.AgClassCatalog.add_catalog_entry("{6666593F-246D-4263-A0E4-78EFD0C04C7B}", AgVAManeuverOptimalFinite)


class AgVAManeuverOptimalFiniteSNOPTOptimizer(IAgVAManeuverOptimalFiniteSNOPTOptimizer):
    """Properties of SNOPT Optimizer options for optimal finite maneuver."""
    def __init__(self, sourceObject=None):
        IAgVAManeuverOptimalFiniteSNOPTOptimizer.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAManeuverOptimalFiniteSNOPTOptimizer._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAManeuverOptimalFiniteSNOPTOptimizer._get_property(self, attrname) is not None: found_prop = IAgVAManeuverOptimalFiniteSNOPTOptimizer._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAManeuverOptimalFiniteSNOPTOptimizer.")

agcls.AgClassCatalog.add_catalog_entry("{54E41ADE-C090-4C19-8B09-94F5030260C6}", AgVAManeuverOptimalFiniteSNOPTOptimizer)


class AgVAManeuverOptimalFiniteInitialBoundaryConditions(IAgVAManeuverOptimalFiniteInitialBoundaryConditions):
    """Properties of initial boundary conditions for optimal finite maneuver."""
    def __init__(self, sourceObject=None):
        IAgVAManeuverOptimalFiniteInitialBoundaryConditions.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAManeuverOptimalFiniteInitialBoundaryConditions._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAManeuverOptimalFiniteInitialBoundaryConditions._get_property(self, attrname) is not None: found_prop = IAgVAManeuverOptimalFiniteInitialBoundaryConditions._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAManeuverOptimalFiniteInitialBoundaryConditions.")

agcls.AgClassCatalog.add_catalog_entry("{3A8835CC-D4EF-4AFE-B198-FC4992E17D6B}", AgVAManeuverOptimalFiniteInitialBoundaryConditions)


class AgVAManeuverOptimalFiniteFinalBoundaryConditions(IAgVAManeuverOptimalFiniteFinalBoundaryConditions):
    """Properties of final boundary conditions for optimal finite maneuver."""
    def __init__(self, sourceObject=None):
        IAgVAManeuverOptimalFiniteFinalBoundaryConditions.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAManeuverOptimalFiniteFinalBoundaryConditions._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAManeuverOptimalFiniteFinalBoundaryConditions._get_property(self, attrname) is not None: found_prop = IAgVAManeuverOptimalFiniteFinalBoundaryConditions._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAManeuverOptimalFiniteFinalBoundaryConditions.")

agcls.AgClassCatalog.add_catalog_entry("{FF880BEA-2B6E-40ED-B7BC-85ED2367FC9C}", AgVAManeuverOptimalFiniteFinalBoundaryConditions)


class AgVAManeuverOptimalFinitePathBoundaryConditions(IAgVAManeuverOptimalFinitePathBoundaryConditions):
    """Properties of path boundary conditions for optimal finite maneuver."""
    def __init__(self, sourceObject=None):
        IAgVAManeuverOptimalFinitePathBoundaryConditions.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAManeuverOptimalFinitePathBoundaryConditions._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAManeuverOptimalFinitePathBoundaryConditions._get_property(self, attrname) is not None: found_prop = IAgVAManeuverOptimalFinitePathBoundaryConditions._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAManeuverOptimalFinitePathBoundaryConditions.")

agcls.AgClassCatalog.add_catalog_entry("{C8E16C04-1A5A-43F9-B770-A67666512F8A}", AgVAManeuverOptimalFinitePathBoundaryConditions)


class AgVAManeuverOptimalFiniteSteeringNodeElement(IAgVAManeuverOptimalFiniteSteeringNodeElement):
    """The elements of the steering node."""
    def __init__(self, sourceObject=None):
        IAgVAManeuverOptimalFiniteSteeringNodeElement.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAManeuverOptimalFiniteSteeringNodeElement._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAManeuverOptimalFiniteSteeringNodeElement._get_property(self, attrname) is not None: found_prop = IAgVAManeuverOptimalFiniteSteeringNodeElement._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAManeuverOptimalFiniteSteeringNodeElement.")

agcls.AgClassCatalog.add_catalog_entry("{AE276E86-B321-4F0D-B657-852143B3F3EE}", AgVAManeuverOptimalFiniteSteeringNodeElement)


class AgVAManeuverOptimalFiniteSteeringNodeCollection(IAgVAManeuverOptimalFiniteSteeringNodeCollection):
    """Steering/nodes collection."""
    def __init__(self, sourceObject=None):
        IAgVAManeuverOptimalFiniteSteeringNodeCollection.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAManeuverOptimalFiniteSteeringNodeCollection._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAManeuverOptimalFiniteSteeringNodeCollection._get_property(self, attrname) is not None: found_prop = IAgVAManeuverOptimalFiniteSteeringNodeCollection._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAManeuverOptimalFiniteSteeringNodeCollection.")

agcls.AgClassCatalog.add_catalog_entry("{23249624-8EFC-4AD8-9E67-A564A49D2D67}", AgVAManeuverOptimalFiniteSteeringNodeCollection)


class AgVAManeuverOptimalFiniteBounds(IAgVAManeuverOptimalFiniteBounds):
    """The elements of the steering node."""
    def __init__(self, sourceObject=None):
        IAgVAManeuverOptimalFiniteBounds.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAManeuverOptimalFiniteBounds._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAManeuverOptimalFiniteBounds._get_property(self, attrname) is not None: found_prop = IAgVAManeuverOptimalFiniteBounds._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAManeuverOptimalFiniteBounds.")

agcls.AgClassCatalog.add_catalog_entry("{0F56E447-2391-476B-863C-8B8596486F03}", AgVAManeuverOptimalFiniteBounds)


class AgVAProfileLambertProfile(IAgVAProfileLambertProfile, IAgVAProfile, IAgRuntimeTypeInfoProvider):
    """The Lambert profile."""
    def __init__(self, sourceObject=None):
        IAgVAProfileLambertProfile.__init__(self, sourceObject)
        IAgVAProfile.__init__(self, sourceObject)
        IAgRuntimeTypeInfoProvider.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAProfileLambertProfile._private_init(self, intf)
        IAgVAProfile._private_init(self, intf)
        IAgRuntimeTypeInfoProvider._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAProfileLambertProfile._get_property(self, attrname) is not None: found_prop = IAgVAProfileLambertProfile._get_property(self, attrname)
        if IAgVAProfile._get_property(self, attrname) is not None: found_prop = IAgVAProfile._get_property(self, attrname)
        if IAgRuntimeTypeInfoProvider._get_property(self, attrname) is not None: found_prop = IAgRuntimeTypeInfoProvider._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAProfileLambertProfile.")

agcls.AgClassCatalog.add_catalog_entry("{3FA3162E-C38E-46D8-8F7C-B8421110EEB2}", AgVAProfileLambertProfile)


class AgVAProfileLambertSearchProfile(IAgVAProfileLambertSearchProfile, IAgVAProfile, IAgRuntimeTypeInfoProvider):
    """The Lambert profile."""
    def __init__(self, sourceObject=None):
        IAgVAProfileLambertSearchProfile.__init__(self, sourceObject)
        IAgVAProfile.__init__(self, sourceObject)
        IAgRuntimeTypeInfoProvider.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAProfileLambertSearchProfile._private_init(self, intf)
        IAgVAProfile._private_init(self, intf)
        IAgRuntimeTypeInfoProvider._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAProfileLambertSearchProfile._get_property(self, attrname) is not None: found_prop = IAgVAProfileLambertSearchProfile._get_property(self, attrname)
        if IAgVAProfile._get_property(self, attrname) is not None: found_prop = IAgVAProfile._get_property(self, attrname)
        if IAgRuntimeTypeInfoProvider._get_property(self, attrname) is not None: found_prop = IAgRuntimeTypeInfoProvider._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAProfileLambertSearchProfile.")

agcls.AgClassCatalog.add_catalog_entry("{9E98EFA2-5913-4BFA-8293-C294B80DFD4E}", AgVAProfileLambertSearchProfile)


class AgVAProfileGoldenSection(IAgVAProfileGoldenSection, IAgVAProfile, IAgRuntimeTypeInfoProvider):
    """The Golden Section profile."""
    def __init__(self, sourceObject=None):
        IAgVAProfileGoldenSection.__init__(self, sourceObject)
        IAgVAProfile.__init__(self, sourceObject)
        IAgRuntimeTypeInfoProvider.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAProfileGoldenSection._private_init(self, intf)
        IAgVAProfile._private_init(self, intf)
        IAgRuntimeTypeInfoProvider._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAProfileGoldenSection._get_property(self, attrname) is not None: found_prop = IAgVAProfileGoldenSection._get_property(self, attrname)
        if IAgVAProfile._get_property(self, attrname) is not None: found_prop = IAgVAProfile._get_property(self, attrname)
        if IAgRuntimeTypeInfoProvider._get_property(self, attrname) is not None: found_prop = IAgRuntimeTypeInfoProvider._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAProfileGoldenSection.")

agcls.AgClassCatalog.add_catalog_entry("{8A0E8056-D72B-4C82-85F0-945A96AC4E2E}", AgVAProfileGoldenSection)


class AgVAGoldenSectionControlCollection(IAgVAGoldenSectionControlCollection):
    """Properties for the list of Golden Section control parameters."""
    def __init__(self, sourceObject=None):
        IAgVAGoldenSectionControlCollection.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAGoldenSectionControlCollection._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAGoldenSectionControlCollection._get_property(self, attrname) is not None: found_prop = IAgVAGoldenSectionControlCollection._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAGoldenSectionControlCollection.")

agcls.AgClassCatalog.add_catalog_entry("{5E3FCD6D-E592-4610-9831-87D9ABD81889}", AgVAGoldenSectionControlCollection)


class AgVAGoldenSectionControl(IAgVAGoldenSectionControl):
    """Control parameters for Golden Section profile"""
    def __init__(self, sourceObject=None):
        IAgVAGoldenSectionControl.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAGoldenSectionControl._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAGoldenSectionControl._get_property(self, attrname) is not None: found_prop = IAgVAGoldenSectionControl._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAGoldenSectionControl.")

agcls.AgClassCatalog.add_catalog_entry("{00EBADDE-16F1-4FAC-8014-6952CBF0832E}", AgVAGoldenSectionControl)


class AgVAGoldenSectionResultCollection(IAgVAGoldenSectionResultCollection):
    """Properties for the list of Golden Section result parameters."""
    def __init__(self, sourceObject=None):
        IAgVAGoldenSectionResultCollection.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAGoldenSectionResultCollection._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAGoldenSectionResultCollection._get_property(self, attrname) is not None: found_prop = IAgVAGoldenSectionResultCollection._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAGoldenSectionResultCollection.")

agcls.AgClassCatalog.add_catalog_entry("{72ADF8B9-9BE8-4112-B295-30B86DAF11F3}", AgVAGoldenSectionResultCollection)


class AgVAGoldenSectionResult(IAgVAGoldenSectionResult):
    """Result parameters for Golden Section profile"""
    def __init__(self, sourceObject=None):
        IAgVAGoldenSectionResult.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAGoldenSectionResult._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAGoldenSectionResult._get_property(self, attrname) is not None: found_prop = IAgVAGoldenSectionResult._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAGoldenSectionResult.")

agcls.AgClassCatalog.add_catalog_entry("{A6F34FB1-1740-4EBB-B4FB-E6BB0B9EE427}", AgVAGoldenSectionResult)


class AgVAProfileGridSearch(IAgVAProfileGridSearch, IAgVAProfile, IAgRuntimeTypeInfoProvider):
    """The Grid Search profile."""
    def __init__(self, sourceObject=None):
        IAgVAProfileGridSearch.__init__(self, sourceObject)
        IAgVAProfile.__init__(self, sourceObject)
        IAgRuntimeTypeInfoProvider.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAProfileGridSearch._private_init(self, intf)
        IAgVAProfile._private_init(self, intf)
        IAgRuntimeTypeInfoProvider._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAProfileGridSearch._get_property(self, attrname) is not None: found_prop = IAgVAProfileGridSearch._get_property(self, attrname)
        if IAgVAProfile._get_property(self, attrname) is not None: found_prop = IAgVAProfile._get_property(self, attrname)
        if IAgRuntimeTypeInfoProvider._get_property(self, attrname) is not None: found_prop = IAgRuntimeTypeInfoProvider._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAProfileGridSearch.")

agcls.AgClassCatalog.add_catalog_entry("{7C28EA98-702E-4CA9-8DE6-C49CEC2932E0}", AgVAProfileGridSearch)


class AgVAGridSearchControlCollection(IAgVAGridSearchControlCollection):
    """Properties for the list of Grid Search control parameters."""
    def __init__(self, sourceObject=None):
        IAgVAGridSearchControlCollection.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAGridSearchControlCollection._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAGridSearchControlCollection._get_property(self, attrname) is not None: found_prop = IAgVAGridSearchControlCollection._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAGridSearchControlCollection.")

agcls.AgClassCatalog.add_catalog_entry("{0A1300B1-D35A-46C5-BE62-3AFB811157C5}", AgVAGridSearchControlCollection)


class AgVAGridSearchControl(IAgVAGridSearchControl):
    """Control parameters for Grid Search profile"""
    def __init__(self, sourceObject=None):
        IAgVAGridSearchControl.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAGridSearchControl._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAGridSearchControl._get_property(self, attrname) is not None: found_prop = IAgVAGridSearchControl._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAGridSearchControl.")

agcls.AgClassCatalog.add_catalog_entry("{DA10881F-2D20-41DF-88DD-F49F9A41BA76}", AgVAGridSearchControl)


class AgVAGridSearchResultCollection(IAgVAGridSearchResultCollection):
    """Properties for the list of Grid Search result parameters."""
    def __init__(self, sourceObject=None):
        IAgVAGridSearchResultCollection.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAGridSearchResultCollection._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAGridSearchResultCollection._get_property(self, attrname) is not None: found_prop = IAgVAGridSearchResultCollection._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAGridSearchResultCollection.")

agcls.AgClassCatalog.add_catalog_entry("{E189AD76-0BE9-4922-8D76-3E28FAE74507}", AgVAGridSearchResultCollection)


class AgVAGridSearchResult(IAgVAGridSearchResult):
    """Result parameters for Grid Search profile"""
    def __init__(self, sourceObject=None):
        IAgVAGridSearchResult.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAGridSearchResult._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAGridSearchResult._get_property(self, attrname) is not None: found_prop = IAgVAGridSearchResult._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAGridSearchResult.")

agcls.AgClassCatalog.add_catalog_entry("{B37527F8-1781-4484-985E-4F2BE2E8810A}", AgVAGridSearchResult)


class AgVACalcObjectLinkEmbedControlCollection(IAgVACalcObjectLinkEmbedControlCollection):
    """The Calculation Object link/embed component folder."""
    def __init__(self, sourceObject=None):
        IAgVACalcObjectLinkEmbedControlCollection.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVACalcObjectLinkEmbedControlCollection._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVACalcObjectLinkEmbedControlCollection._get_property(self, attrname) is not None: found_prop = IAgVACalcObjectLinkEmbedControlCollection._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVACalcObjectLinkEmbedControlCollection.")

agcls.AgClassCatalog.add_catalog_entry("{8EFFF2BC-B4AA-4F5E-BDF2-7218EBBE10FF}", AgVACalcObjectLinkEmbedControlCollection)


class AgVAProfileBisection(IAgVAProfileBisection, IAgVAProfile, IAgRuntimeTypeInfoProvider):
    """Single Parameter Bisection profile"""
    def __init__(self, sourceObject=None):
        IAgVAProfileBisection.__init__(self, sourceObject)
        IAgVAProfile.__init__(self, sourceObject)
        IAgRuntimeTypeInfoProvider.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVAProfileBisection._private_init(self, intf)
        IAgVAProfile._private_init(self, intf)
        IAgRuntimeTypeInfoProvider._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAProfileBisection._get_property(self, attrname) is not None: found_prop = IAgVAProfileBisection._get_property(self, attrname)
        if IAgVAProfile._get_property(self, attrname) is not None: found_prop = IAgVAProfile._get_property(self, attrname)
        if IAgRuntimeTypeInfoProvider._get_property(self, attrname) is not None: found_prop = IAgRuntimeTypeInfoProvider._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAProfileBisection.")

agcls.AgClassCatalog.add_catalog_entry("{4A29B6D5-AF0C-4516-B362-5D111388524F}", AgVAProfileBisection)


class AgVABisectionControl(IAgVABisectionControl):
    """Control parameters for  Bisection Seacrh Profile"""
    def __init__(self, sourceObject=None):
        IAgVABisectionControl.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVABisectionControl._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVABisectionControl._get_property(self, attrname) is not None: found_prop = IAgVABisectionControl._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVABisectionControl.")

agcls.AgClassCatalog.add_catalog_entry("{BC9B72FF-9317-4F85-B7C4-04D39B082CE2}", AgVABisectionControl)


class AgVABisectionControlCollection(IAgVABisectionControlCollection):
    """Bisection control collection."""
    def __init__(self, sourceObject=None):
        IAgVABisectionControlCollection.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVABisectionControlCollection._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVABisectionControlCollection._get_property(self, attrname) is not None: found_prop = IAgVABisectionControlCollection._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVABisectionControlCollection.")

agcls.AgClassCatalog.add_catalog_entry("{331CFC1C-3359-4B22-930F-19E3C152AB33}", AgVABisectionControlCollection)


class AgVABisectionResult(IAgVABisectionResult):
    """Result parameters for Bisection profile."""
    def __init__(self, sourceObject=None):
        IAgVABisectionResult.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVABisectionResult._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVABisectionResult._get_property(self, attrname) is not None: found_prop = IAgVABisectionResult._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVABisectionResult.")

agcls.AgClassCatalog.add_catalog_entry("{56010C30-D445-40EF-9BFC-6CE97FCFD032}", AgVABisectionResult)


class AgVABisectionResultCollection(IAgVABisectionResultCollection):
    """Bisection result collection."""
    def __init__(self, sourceObject=None):
        IAgVABisectionResultCollection.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgVABisectionResultCollection._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVABisectionResultCollection._get_property(self, attrname) is not None: found_prop = IAgVABisectionResultCollection._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVABisectionResultCollection.")

agcls.AgClassCatalog.add_catalog_entry("{3F25CF16-ED89-486D-8F60-8F4F3729D41F}", AgVABisectionResultCollection)



################################################################################
#          Copyright 2020-2023, Ansys Government Initiatives
################################################################################
