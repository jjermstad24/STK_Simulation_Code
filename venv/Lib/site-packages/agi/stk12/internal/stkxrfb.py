################################################################################
#          Copyright 2020-2023, Ansys Government Initiatives
################################################################################ 

__all__ = ["IAgRemoteFrameBuffer", "IAgRemoteFrameBufferHost"]

import typing

from ctypes   import byref, POINTER
from datetime import datetime
from enum     import IntEnum, IntFlag

from ..internal  import comutil          as agcom
from ..internal  import coclassutil      as agcls
from ..internal  import marshall         as agmarshall
from ..internal  import dataanalysisutil as agdata
from ..utilities import colors           as agcolor
from ..internal.comutil     import IUnknown, IDispatch, IPictureDisp
from ..internal.apiutil     import interface_proxy, enumerator_proxy, out_arg
from ..internal.eventutil   import *
from ..utilities.exceptions import *


def _raise_uninitialized_error(*args):
    raise STKRuntimeError("Valid STK object model classes are returned from STK methods and should not be created independently.")

class IAgRemoteFrameBufferHost(object):
    """Called by engine to request operations from the host using the remote frame buffer."""
    _num_methods = 1
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{D229A605-D3A8-4476-B628-AC549C674B58}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "Refresh" : 1, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgRemoteFrameBufferHost._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgRemoteFrameBufferHost from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgRemoteFrameBufferHost.__dict__ and type(IAgRemoteFrameBufferHost.__dict__[attrname]) == property:
            return IAgRemoteFrameBufferHost.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgRemoteFrameBufferHost.")
    
    _Refresh_metadata = { "name" : "Refresh",
            "arg_types" : (),
            "marshallers" : () }
    def Refresh(self) -> None:
        """A new frame is ready to be displayed."""
        return self._intf.invoke(IAgRemoteFrameBufferHost._metadata, IAgRemoteFrameBufferHost._Refresh_metadata, )


agcls.AgClassCatalog.add_catalog_entry("{D229A605-D3A8-4476-B628-AC549C674B58}", IAgRemoteFrameBufferHost)
agcls.AgTypeNameMap["IAgRemoteFrameBufferHost"] = IAgRemoteFrameBufferHost

class IAgRemoteFrameBuffer(object):
    """Expose the control as a remote frame buffer."""
    _num_methods = 15
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{35869E18-8BA8-4259-B64B-E1CD612AD4A4}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "SnapToRBGRaster" : 1,
                             "SetToOffScreenRendering" : 2,
                             "NotifyResize" : 3,
                             "NotifyLButtonUp" : 4,
                             "NotifyRButtonUp" : 5,
                             "NotifyMButtonUp" : 6,
                             "NotifyLButtonDown" : 7,
                             "NotifyRButtonDown" : 8,
                             "NotifyMButtonDown" : 9,
                             "NotifyMouseMove" : 10,
                             "NotifyMouseWheel" : 11,
                             "SetHost" : 12,
                             "RenderToDirectXTexture" : 13,
                             "SetToDirectXRendering" : 14,
                             "UpdateDirectXRenderingTexture" : 15, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgRemoteFrameBuffer._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgRemoteFrameBuffer from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgRemoteFrameBuffer.__dict__ and type(IAgRemoteFrameBuffer.__dict__[attrname]) == property:
            return IAgRemoteFrameBuffer.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgRemoteFrameBuffer.")
    
    _SnapToRBGRaster_metadata = { "name" : "SnapToRBGRaster",
            "arg_types" : (agcom.PVOID,),
            "marshallers" : (agmarshall.PVOID_arg,) }
    def SnapToRBGRaster(self, rbgRasterPtr:agcom.PVOID) -> None:
        """Captures the current scene to a raster."""
        return self._intf.invoke(IAgRemoteFrameBuffer._metadata, IAgRemoteFrameBuffer._SnapToRBGRaster_metadata, rbgRasterPtr)

    _SetToOffScreenRendering_metadata = { "name" : "SetToOffScreenRendering",
            "arg_types" : (agcom.INT, agcom.INT,),
            "marshallers" : (agmarshall.INT_arg, agmarshall.INT_arg,) }
    def SetToOffScreenRendering(self, initialWidth:int, initialHeight:int) -> None:
        """Switch to offscreen rendering."""
        return self._intf.invoke(IAgRemoteFrameBuffer._metadata, IAgRemoteFrameBuffer._SetToOffScreenRendering_metadata, initialWidth, initialHeight)

    _NotifyResize_metadata = { "name" : "NotifyResize",
            "arg_types" : (agcom.INT, agcom.INT, agcom.INT, agcom.INT,),
            "marshallers" : (agmarshall.INT_arg, agmarshall.INT_arg, agmarshall.INT_arg, agmarshall.INT_arg,) }
    def NotifyResize(self, left:int, top:int, width:int, height:int) -> None:
        """Notifies that a resize event occurred."""
        return self._intf.invoke(IAgRemoteFrameBuffer._metadata, IAgRemoteFrameBuffer._NotifyResize_metadata, left, top, width, height)

    _NotifyLButtonUp_metadata = { "name" : "NotifyLButtonUp",
            "arg_types" : (agcom.INT, agcom.INT, agcom.INT,),
            "marshallers" : (agmarshall.INT_arg, agmarshall.INT_arg, agmarshall.INT_arg,) }
    def NotifyLButtonUp(self, x:int, y:int, keyState:int) -> None:
        """Notifies that a mouse left button up event occurred."""
        return self._intf.invoke(IAgRemoteFrameBuffer._metadata, IAgRemoteFrameBuffer._NotifyLButtonUp_metadata, x, y, keyState)

    _NotifyRButtonUp_metadata = { "name" : "NotifyRButtonUp",
            "arg_types" : (agcom.INT, agcom.INT, agcom.INT,),
            "marshallers" : (agmarshall.INT_arg, agmarshall.INT_arg, agmarshall.INT_arg,) }
    def NotifyRButtonUp(self, x:int, y:int, keyState:int) -> None:
        """Notifies that a mouse right button up event occurred."""
        return self._intf.invoke(IAgRemoteFrameBuffer._metadata, IAgRemoteFrameBuffer._NotifyRButtonUp_metadata, x, y, keyState)

    _NotifyMButtonUp_metadata = { "name" : "NotifyMButtonUp",
            "arg_types" : (agcom.INT, agcom.INT, agcom.INT,),
            "marshallers" : (agmarshall.INT_arg, agmarshall.INT_arg, agmarshall.INT_arg,) }
    def NotifyMButtonUp(self, x:int, y:int, keyState:int) -> None:
        """Notifies that a mouse middle button up event occurred."""
        return self._intf.invoke(IAgRemoteFrameBuffer._metadata, IAgRemoteFrameBuffer._NotifyMButtonUp_metadata, x, y, keyState)

    _NotifyLButtonDown_metadata = { "name" : "NotifyLButtonDown",
            "arg_types" : (agcom.INT, agcom.INT, agcom.INT,),
            "marshallers" : (agmarshall.INT_arg, agmarshall.INT_arg, agmarshall.INT_arg,) }
    def NotifyLButtonDown(self, x:int, y:int, keyState:int) -> None:
        """Notifies that a mouse left button down event occurred."""
        return self._intf.invoke(IAgRemoteFrameBuffer._metadata, IAgRemoteFrameBuffer._NotifyLButtonDown_metadata, x, y, keyState)

    _NotifyRButtonDown_metadata = { "name" : "NotifyRButtonDown",
            "arg_types" : (agcom.INT, agcom.INT, agcom.INT,),
            "marshallers" : (agmarshall.INT_arg, agmarshall.INT_arg, agmarshall.INT_arg,) }
    def NotifyRButtonDown(self, x:int, y:int, keyState:int) -> None:
        """Notifies that a mouse right button down event occurred."""
        return self._intf.invoke(IAgRemoteFrameBuffer._metadata, IAgRemoteFrameBuffer._NotifyRButtonDown_metadata, x, y, keyState)

    _NotifyMButtonDown_metadata = { "name" : "NotifyMButtonDown",
            "arg_types" : (agcom.INT, agcom.INT, agcom.INT,),
            "marshallers" : (agmarshall.INT_arg, agmarshall.INT_arg, agmarshall.INT_arg,) }
    def NotifyMButtonDown(self, x:int, y:int, keyState:int) -> None:
        """Notifies that a mouse middle button down event occurred."""
        return self._intf.invoke(IAgRemoteFrameBuffer._metadata, IAgRemoteFrameBuffer._NotifyMButtonDown_metadata, x, y, keyState)

    _NotifyMouseMove_metadata = { "name" : "NotifyMouseMove",
            "arg_types" : (agcom.INT, agcom.INT, agcom.INT, agcom.INT,),
            "marshallers" : (agmarshall.INT_arg, agmarshall.INT_arg, agmarshall.INT_arg, agmarshall.INT_arg,) }
    def NotifyMouseMove(self, x:int, y:int, buttons:int, keyState:int) -> None:
        """Called by the client on a mouse move event."""
        return self._intf.invoke(IAgRemoteFrameBuffer._metadata, IAgRemoteFrameBuffer._NotifyMouseMove_metadata, x, y, buttons, keyState)

    _NotifyMouseWheel_metadata = { "name" : "NotifyMouseWheel",
            "arg_types" : (agcom.INT, agcom.INT, agcom.INT, agcom.INT,),
            "marshallers" : (agmarshall.INT_arg, agmarshall.INT_arg, agmarshall.INT_arg, agmarshall.INT_arg,) }
    def NotifyMouseWheel(self, x:int, y:int, steps:int, keyState:int) -> None:
        """Called by the client on a mouse wheel event."""
        return self._intf.invoke(IAgRemoteFrameBuffer._metadata, IAgRemoteFrameBuffer._NotifyMouseWheel_metadata, x, y, steps, keyState)

    _SetHost_metadata = { "name" : "SetHost",
            "arg_types" : (agcom.PVOID,),
            "marshallers" : (agmarshall.AgInterface_in_arg("IAgRemoteFrameBufferHost"),) }
    def SetHost(self, pHost:"IAgRemoteFrameBufferHost") -> None:
        """Sets the host using this remote frame buffer."""
        return self._intf.invoke(IAgRemoteFrameBuffer._metadata, IAgRemoteFrameBuffer._SetHost_metadata, pHost)

    _RenderToDirectXTexture_metadata = { "name" : "RenderToDirectXTexture",
            "arg_types" : (),
            "marshallers" : () }
    def RenderToDirectXTexture(self) -> None:
        """Render to the DirectX texture configured by SetToDirectXRendering()."""
        return self._intf.invoke(IAgRemoteFrameBuffer._metadata, IAgRemoteFrameBuffer._RenderToDirectXTexture_metadata, )

    _SetToDirectXRendering_metadata = { "name" : "SetToDirectXRendering",
            "arg_types" : (agcom.INT, agcom.INT, agcom.PVOID, agcom.PVOID, agcom.PVOID, agcom.PVOID,),
            "marshallers" : (agmarshall.INT_arg, agmarshall.INT_arg, agmarshall.PVOID_arg, agmarshall.PVOID_arg, agmarshall.PVOID_arg, agmarshall.PVOID_arg,) }
    def SetToDirectXRendering(self, initialWidth:int, initialHeight:int, hwnd:agcom.PVOID, directXDevice:agcom.PVOID, directXTexture:agcom.PVOID, directXSharedHandle:agcom.PVOID) -> None:
        """Switch to rendering to the specified Dirext X texture."""
        return self._intf.invoke(IAgRemoteFrameBuffer._metadata, IAgRemoteFrameBuffer._SetToDirectXRendering_metadata, initialWidth, initialHeight, hwnd, directXDevice, directXTexture, directXSharedHandle)

    _UpdateDirectXRenderingTexture_metadata = { "name" : "UpdateDirectXRenderingTexture",
            "arg_types" : (agcom.PVOID, agcom.PVOID,),
            "marshallers" : (agmarshall.PVOID_arg, agmarshall.PVOID_arg,) }
    def UpdateDirectXRenderingTexture(self, directXTexture:agcom.PVOID, directXSharedHandle:agcom.PVOID) -> None:
        """Update Dirext X texture (for instance after a resize)."""
        return self._intf.invoke(IAgRemoteFrameBuffer._metadata, IAgRemoteFrameBuffer._UpdateDirectXRenderingTexture_metadata, directXTexture, directXSharedHandle)


agcls.AgClassCatalog.add_catalog_entry("{35869E18-8BA8-4259-B64B-E1CD612AD4A4}", IAgRemoteFrameBuffer)
agcls.AgTypeNameMap["IAgRemoteFrameBuffer"] = IAgRemoteFrameBuffer



################################################################################
#          Copyright 2020-2023, Ansys Government Initiatives
################################################################################
