################################################################################
#          Copyright 2020-2023, Ansys Government Initiatives
################################################################################ 

__all__ = ["AgCRPolarizationCircular", "AgCRPolarizationElliptical", "AgCRPolarizationLinear", "AgEStkRadarPosVelProviderRole", 
"AgEStkRadarTerrainInterpMethod", "AgEStkRadarValidSystems", "AgStkRadarCBIntersectComputeParams", "AgStkRadarCBIntersectComputeResult", 
"AgStkRadarClutterGeometryComputeParams", "AgStkRadarClutterGeometryPluginRegInfo", "AgStkRadarClutterMapComputeParams", 
"AgStkRadarClutterPatch", "AgStkRadarClutterPatchCollection", "AgStkRadarFixedPRFProbabilityDetectionComputeParams", "AgStkRadarLink", 
"AgStkRadarLinkGeometry", "AgStkRadarPosVelProvider", "AgStkRadarPositionProvider", "AgStkRadarRcsComputeParams", "AgStkRadarRcsProcessSignalsParams", 
"AgStkRadarSTCAttenComputeParams", "AgStkRadarSignal", "IAgSTKRadarSTCAttenComputeParams", "IAgSTKRadarSTCAttenPlugin", 
"IAgStkRadarCBIntersectComputeParams", "IAgStkRadarCBIntersectComputeResult", "IAgStkRadarClutterGeometryComputeParams", 
"IAgStkRadarClutterGeometryPlugin", "IAgStkRadarClutterGeometryPluginRegInfo", "IAgStkRadarClutterGeometryPluginScatteringModels", 
"IAgStkRadarClutterMapComputeParams", "IAgStkRadarClutterMapPlugin", "IAgStkRadarClutterPatch", "IAgStkRadarClutterPatchCollection", 
"IAgStkRadarFixedPRFProbabilityDetectionComputeParams", "IAgStkRadarFixedPRFProbabilityDetectionPlugin", "IAgStkRadarLink", 
"IAgStkRadarLinkGeometry", "IAgStkRadarPosVelProvider", "IAgStkRadarRcsComputeParams", "IAgStkRadarRcsPlugin", "IAgStkRadarRcsProcessSignalsParams", 
"IAgStkRadarSignal"]

import typing

from ctypes   import byref, POINTER
from datetime import datetime
from enum     import IntEnum, IntFlag

from ..internal  import comutil          as agcom
from ..internal  import coclassutil      as agcls
from ..internal  import marshall         as agmarshall
from ..internal  import dataanalysisutil as agdata
from ..utilities import colors           as agcolor
from ..internal.comutil     import IUnknown, IDispatch, IPictureDisp
from ..internal.apiutil     import interface_proxy, enumerator_proxy, out_arg
from ..internal.eventutil   import *
from ..utilities.exceptions import *

from ..plugins.attrautomation import *
from ..plugins.utplugin import *
from ..plugins.crdnplugin import *
from ..plugins.commrdrfoundation import *


def _raise_uninitialized_error(*args):
    raise STKRuntimeError("Valid STK object model classes are returned from STK methods and should not be created independently.")

class AgEStkRadarValidSystems(IntEnum):
    """Enumeration of valid radar systems."""
    # All radar systems.
    eStkRadarAllSystems = 1
    # Monostatic radar system only.
    eStkRadarMonostaticSystemsOnly = 2
    # Bistatic radar system only.
    eStkRadarBistaticSystemsOnly = 3

AgEStkRadarValidSystems.eStkRadarAllSystems.__doc__ = "All radar systems."
AgEStkRadarValidSystems.eStkRadarMonostaticSystemsOnly.__doc__ = "Monostatic radar system only."
AgEStkRadarValidSystems.eStkRadarBistaticSystemsOnly.__doc__ = "Bistatic radar system only."

agcls.AgTypeNameMap["AgEStkRadarValidSystems"] = AgEStkRadarValidSystems

class AgEStkRadarPosVelProviderRole(IntEnum):
    """Enumeration of the position and velocity providers roles."""
    # Transmitter
    eStkRadarTransmitterPosVelRole = 1
    # Receiver
    eStkRadarReceiverPosVelRole = 2
    # Target
    eStkRadarTargetPosVelRole = 3
    # Clutter Patch
    eStkRadarClutterPatchPosVelRole = 4

AgEStkRadarPosVelProviderRole.eStkRadarTransmitterPosVelRole.__doc__ = "Transmitter"
AgEStkRadarPosVelProviderRole.eStkRadarReceiverPosVelRole.__doc__ = "Receiver"
AgEStkRadarPosVelProviderRole.eStkRadarTargetPosVelRole.__doc__ = "Target"
AgEStkRadarPosVelProviderRole.eStkRadarClutterPatchPosVelRole.__doc__ = "Clutter Patch"

agcls.AgTypeNameMap["AgEStkRadarPosVelProviderRole"] = AgEStkRadarPosVelProviderRole

class AgEStkRadarTerrainInterpMethod(IntEnum):
    """Enumeration of terrain interpolation methods."""
    # Bilinear Interpolation
    eStkRadarBilinearTerrainInterp = 1
    # Highest Post
    eStkRadarHighestPostTerrainInterp = 2
    # Tri-Planar
    eStkRadarTriPlanarTerrainInterp = 3

AgEStkRadarTerrainInterpMethod.eStkRadarBilinearTerrainInterp.__doc__ = "Bilinear Interpolation"
AgEStkRadarTerrainInterpMethod.eStkRadarHighestPostTerrainInterp.__doc__ = "Highest Post"
AgEStkRadarTerrainInterpMethod.eStkRadarTriPlanarTerrainInterp.__doc__ = "Tri-Planar"

agcls.AgTypeNameMap["AgEStkRadarTerrainInterpMethod"] = AgEStkRadarTerrainInterpMethod


class IAgStkRadarCBIntersectComputeParams(object):
    """Interface implemented by an object that represents the input parameters for a central body intersect computation."""
    _num_methods = 6
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{7C5B738D-7541-4881-A337-2731061BDB2E}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "GetBasePositionCBF" : 1,
                             "get_BasePositionCBFArray" : 2,
                             "SetBasePositionCBF" : 3,
                             "GetDirectionCBF" : 4,
                             "get_DirectionCBFArray" : 5,
                             "SetDirectionCBF" : 6, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkRadarCBIntersectComputeParams._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkRadarCBIntersectComputeParams from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkRadarCBIntersectComputeParams.__dict__ and type(IAgStkRadarCBIntersectComputeParams.__dict__[attrname]) == property:
            return IAgStkRadarCBIntersectComputeParams.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkRadarCBIntersectComputeParams.")
    
    _GetBasePositionCBF_metadata = { "name" : "GetBasePositionCBF",
            "arg_types" : (POINTER(agcom.DOUBLE), POINTER(agcom.DOUBLE), POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg,) }
    def GetBasePositionCBF(self) -> typing.Tuple[float, float, float]:
        """Gets the base position vector in the central body fixed frame."""
        return self._intf.invoke(IAgStkRadarCBIntersectComputeParams._metadata, IAgStkRadarCBIntersectComputeParams._GetBasePositionCBF_metadata, out_arg(), out_arg(), out_arg())

    _get_BasePositionCBFArray_metadata = { "name" : "BasePositionCBFArray",
            "arg_types" : (POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg,) }
    @property
    def BasePositionCBFArray(self) -> list:
        """Gets the base position vector in central body fixed frame as an array."""
        return self._intf.get_property(IAgStkRadarCBIntersectComputeParams._metadata, IAgStkRadarCBIntersectComputeParams._get_BasePositionCBFArray_metadata)

    _SetBasePositionCBF_metadata = { "name" : "SetBasePositionCBF",
            "arg_types" : (agcom.DOUBLE, agcom.DOUBLE, agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg,) }
    def SetBasePositionCBF(self, x:float, y:float, z:float) -> None:
        """Sets the base position vector in the central body fixed frame."""
        return self._intf.invoke(IAgStkRadarCBIntersectComputeParams._metadata, IAgStkRadarCBIntersectComputeParams._SetBasePositionCBF_metadata, x, y, z)

    _GetDirectionCBF_metadata = { "name" : "GetDirectionCBF",
            "arg_types" : (POINTER(agcom.DOUBLE), POINTER(agcom.DOUBLE), POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg,) }
    def GetDirectionCBF(self) -> typing.Tuple[float, float, float]:
        """Gets the direction vector in the central body fixed frame."""
        return self._intf.invoke(IAgStkRadarCBIntersectComputeParams._metadata, IAgStkRadarCBIntersectComputeParams._GetDirectionCBF_metadata, out_arg(), out_arg(), out_arg())

    _get_DirectionCBFArray_metadata = { "name" : "DirectionCBFArray",
            "arg_types" : (POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg,) }
    @property
    def DirectionCBFArray(self) -> list:
        """Gets the direction vector in the central body fixed frame as an array."""
        return self._intf.get_property(IAgStkRadarCBIntersectComputeParams._metadata, IAgStkRadarCBIntersectComputeParams._get_DirectionCBFArray_metadata)

    _SetDirectionCBF_metadata = { "name" : "SetDirectionCBF",
            "arg_types" : (agcom.DOUBLE, agcom.DOUBLE, agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg,) }
    def SetDirectionCBF(self, x:float, y:float, z:float) -> None:
        """Sets the direction vector in the central body fixed frame."""
        return self._intf.invoke(IAgStkRadarCBIntersectComputeParams._metadata, IAgStkRadarCBIntersectComputeParams._SetDirectionCBF_metadata, x, y, z)


agcls.AgClassCatalog.add_catalog_entry("{7C5B738D-7541-4881-A337-2731061BDB2E}", IAgStkRadarCBIntersectComputeParams)
agcls.AgTypeNameMap["IAgStkRadarCBIntersectComputeParams"] = IAgStkRadarCBIntersectComputeParams

class IAgStkRadarCBIntersectComputeResult(object):
    """Interface implemented by an object that represents the result of a central body computation."""
    _num_methods = 11
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{FA9A261B-0C93-41B8-A58C-B49D6DEDE879}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_IntersectionFound" : 1,
                             "GetIntercept1CBF" : 2,
                             "get_Intercept1CBFArray" : 3,
                             "GetIntercept2CBF" : 4,
                             "get_Intercept2CBFArray" : 5,
                             "get_Multiplier1" : 6,
                             "get_Multiplier2" : 7,
                             "GetBasePositionCBF" : 8,
                             "get_BasePositionCBFArray" : 9,
                             "GetDirectionCBF" : 10,
                             "get_DirectionCBFArray" : 11, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkRadarCBIntersectComputeResult._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkRadarCBIntersectComputeResult from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkRadarCBIntersectComputeResult.__dict__ and type(IAgStkRadarCBIntersectComputeResult.__dict__[attrname]) == property:
            return IAgStkRadarCBIntersectComputeResult.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkRadarCBIntersectComputeResult.")
    
    _get_IntersectionFound_metadata = { "name" : "IntersectionFound",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def IntersectionFound(self) -> bool:
        """Gets the intersection found indicator."""
        return self._intf.get_property(IAgStkRadarCBIntersectComputeResult._metadata, IAgStkRadarCBIntersectComputeResult._get_IntersectionFound_metadata)

    _GetIntercept1CBF_metadata = { "name" : "GetIntercept1CBF",
            "arg_types" : (POINTER(agcom.DOUBLE), POINTER(agcom.DOUBLE), POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg,) }
    def GetIntercept1CBF(self) -> typing.Tuple[float, float, float]:
        """Gets the position vector of the first point of intersection in the central body fixed frame."""
        return self._intf.invoke(IAgStkRadarCBIntersectComputeResult._metadata, IAgStkRadarCBIntersectComputeResult._GetIntercept1CBF_metadata, out_arg(), out_arg(), out_arg())

    _get_Intercept1CBFArray_metadata = { "name" : "Intercept1CBFArray",
            "arg_types" : (POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg,) }
    @property
    def Intercept1CBFArray(self) -> list:
        """Gets the position vector  of the first point of intersection in the central body fixed frame as an array."""
        return self._intf.get_property(IAgStkRadarCBIntersectComputeResult._metadata, IAgStkRadarCBIntersectComputeResult._get_Intercept1CBFArray_metadata)

    _GetIntercept2CBF_metadata = { "name" : "GetIntercept2CBF",
            "arg_types" : (POINTER(agcom.DOUBLE), POINTER(agcom.DOUBLE), POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg,) }
    def GetIntercept2CBF(self) -> typing.Tuple[float, float, float]:
        """Gets the position vector of the second point of intersection in the central body fixed frame."""
        return self._intf.invoke(IAgStkRadarCBIntersectComputeResult._metadata, IAgStkRadarCBIntersectComputeResult._GetIntercept2CBF_metadata, out_arg(), out_arg(), out_arg())

    _get_Intercept2CBFArray_metadata = { "name" : "Intercept2CBFArray",
            "arg_types" : (POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg,) }
    @property
    def Intercept2CBFArray(self) -> list:
        """Gets the position vector of the second point of the intersection in the central body fixed frame as an array."""
        return self._intf.get_property(IAgStkRadarCBIntersectComputeResult._metadata, IAgStkRadarCBIntersectComputeResult._get_Intercept2CBFArray_metadata)

    _get_Multiplier1_metadata = { "name" : "Multiplier1",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def Multiplier1(self) -> float:
        """Gets the first multiplier."""
        return self._intf.get_property(IAgStkRadarCBIntersectComputeResult._metadata, IAgStkRadarCBIntersectComputeResult._get_Multiplier1_metadata)

    _get_Multiplier2_metadata = { "name" : "Multiplier2",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def Multiplier2(self) -> float:
        """Gets the second multiplier."""
        return self._intf.get_property(IAgStkRadarCBIntersectComputeResult._metadata, IAgStkRadarCBIntersectComputeResult._get_Multiplier2_metadata)

    _GetBasePositionCBF_metadata = { "name" : "GetBasePositionCBF",
            "arg_types" : (POINTER(agcom.DOUBLE), POINTER(agcom.DOUBLE), POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg,) }
    def GetBasePositionCBF(self) -> typing.Tuple[float, float, float]:
        """Gets the base position vector in the central body fixed frame."""
        return self._intf.invoke(IAgStkRadarCBIntersectComputeResult._metadata, IAgStkRadarCBIntersectComputeResult._GetBasePositionCBF_metadata, out_arg(), out_arg(), out_arg())

    _get_BasePositionCBFArray_metadata = { "name" : "BasePositionCBFArray",
            "arg_types" : (POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg,) }
    @property
    def BasePositionCBFArray(self) -> list:
        """Gets the base position vector in the central body fixed frame as an array."""
        return self._intf.get_property(IAgStkRadarCBIntersectComputeResult._metadata, IAgStkRadarCBIntersectComputeResult._get_BasePositionCBFArray_metadata)

    _GetDirectionCBF_metadata = { "name" : "GetDirectionCBF",
            "arg_types" : (POINTER(agcom.DOUBLE), POINTER(agcom.DOUBLE), POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg,) }
    def GetDirectionCBF(self) -> typing.Tuple[float, float, float]:
        """Gets the direction vector in the central body fixed frame."""
        return self._intf.invoke(IAgStkRadarCBIntersectComputeResult._metadata, IAgStkRadarCBIntersectComputeResult._GetDirectionCBF_metadata, out_arg(), out_arg(), out_arg())

    _get_DirectionCBFArray_metadata = { "name" : "DirectionCBFArray",
            "arg_types" : (POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg,) }
    @property
    def DirectionCBFArray(self) -> list:
        """Gets the direction vector in the central body fixed frame as an array."""
        return self._intf.get_property(IAgStkRadarCBIntersectComputeResult._metadata, IAgStkRadarCBIntersectComputeResult._get_DirectionCBFArray_metadata)


agcls.AgClassCatalog.add_catalog_entry("{FA9A261B-0C93-41B8-A58C-B49D6DEDE879}", IAgStkRadarCBIntersectComputeResult)
agcls.AgTypeNameMap["IAgStkRadarCBIntersectComputeResult"] = IAgStkRadarCBIntersectComputeResult

class IAgStkRadarPosVelProvider(object):
    """Interface implemented by an object that provides the position and velocity for an STK radar object or radar target object."""
    _num_methods = 34
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{E675D82D-945C-46F9-9E26-0632D13884D4}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_CurrentTime" : 1,
                             "GetVelocityCBF" : 2,
                             "get_VelocityCBFArray" : 3,
                             "GetPositionCBF" : 4,
                             "get_PositionCBFArray" : 5,
                             "GetPositionLLA" : 6,
                             "get_PositionLLAArray" : 7,
                             "get_LocalRadiusDetic" : 8,
                             "get_LocalRadiusCentric" : 9,
                             "GetSurfaceNormalDetic" : 10,
                             "get_SurfaceNormalDeticArray" : 11,
                             "GetSurfaceNormalCentric" : 12,
                             "get_SurfaceNormalCentricArray" : 13,
                             "GetTerrainHeight" : 14,
                             "GetTerrainHeightForLatLon" : 15,
                             "ComputeLocalRadiusDetic" : 16,
                             "ComputeLocalRadiusCentric" : 17,
                             "ComputeSurfaceNormalDetic" : 18,
                             "ComputeSurfaceNormalDeticArray" : 19,
                             "ComputeSurfaceNormalCentric" : 20,
                             "ComputeSurfaceNormalCentricArray" : 21,
                             "ComputeCentralBodyIntersect" : 22,
                             "ConvertCBFCartesianToLLA" : 23,
                             "ConvertCBFCartesianToLLAArray" : 24,
                             "ConvertLLAToCBFCartesian" : 25,
                             "ConvertLLAToCBFCartesianArray" : 26,
                             "ConvertCBFCartesianToVVLHCartesian" : 27,
                             "ConvertCBFCartesianToVVLHCartesianArray" : 28,
                             "ConvertBodyCartesianToCBFCartesian" : 29,
                             "ConvertBodyCartesianToCBFCartesianArray" : 30,
                             "ConvertCBFCartesianToBodyCartesian" : 31,
                             "ConvertCBFCartesianToBodyCartesianArray" : 32,
                             "get_Role" : 33,
                             "ComputeCentralBodyIntersectInCBF" : 34, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkRadarPosVelProvider._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkRadarPosVelProvider from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkRadarPosVelProvider.__dict__ and type(IAgStkRadarPosVelProvider.__dict__[attrname]) == property:
            return IAgStkRadarPosVelProvider.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkRadarPosVelProvider.")
    
    _get_CurrentTime_metadata = { "name" : "CurrentTime",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def CurrentTime(self) -> float:
        """Gets the current time in EpSec."""
        return self._intf.get_property(IAgStkRadarPosVelProvider._metadata, IAgStkRadarPosVelProvider._get_CurrentTime_metadata)

    _GetVelocityCBF_metadata = { "name" : "GetVelocityCBF",
            "arg_types" : (POINTER(agcom.DOUBLE), POINTER(agcom.DOUBLE), POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg,) }
    def GetVelocityCBF(self) -> typing.Tuple[float, float, float]:
        """Gets velocity in the central body fixed frame."""
        return self._intf.invoke(IAgStkRadarPosVelProvider._metadata, IAgStkRadarPosVelProvider._GetVelocityCBF_metadata, out_arg(), out_arg(), out_arg())

    _get_VelocityCBFArray_metadata = { "name" : "VelocityCBFArray",
            "arg_types" : (POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg,) }
    @property
    def VelocityCBFArray(self) -> list:
        """Gets velocity in the central body fixed frame as an array."""
        return self._intf.get_property(IAgStkRadarPosVelProvider._metadata, IAgStkRadarPosVelProvider._get_VelocityCBFArray_metadata)

    _GetPositionCBF_metadata = { "name" : "GetPositionCBF",
            "arg_types" : (POINTER(agcom.DOUBLE), POINTER(agcom.DOUBLE), POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg,) }
    def GetPositionCBF(self) -> typing.Tuple[float, float, float]:
        """Gets position in the central body fixed frame."""
        return self._intf.invoke(IAgStkRadarPosVelProvider._metadata, IAgStkRadarPosVelProvider._GetPositionCBF_metadata, out_arg(), out_arg(), out_arg())

    _get_PositionCBFArray_metadata = { "name" : "PositionCBFArray",
            "arg_types" : (POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg,) }
    @property
    def PositionCBFArray(self) -> list:
        """Gets position in the central body fixed frame as an array."""
        return self._intf.get_property(IAgStkRadarPosVelProvider._metadata, IAgStkRadarPosVelProvider._get_PositionCBFArray_metadata)

    _GetPositionLLA_metadata = { "name" : "GetPositionLLA",
            "arg_types" : (POINTER(agcom.DOUBLE), POINTER(agcom.DOUBLE), POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg,) }
    def GetPositionLLA(self) -> typing.Tuple[float, float, float]:
        """Gets position in latitude, longitude, and altitude."""
        return self._intf.invoke(IAgStkRadarPosVelProvider._metadata, IAgStkRadarPosVelProvider._GetPositionLLA_metadata, out_arg(), out_arg(), out_arg())

    _get_PositionLLAArray_metadata = { "name" : "PositionLLAArray",
            "arg_types" : (POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg,) }
    @property
    def PositionLLAArray(self) -> list:
        """Gets position in latitude, longitude, and altitude as an array."""
        return self._intf.get_property(IAgStkRadarPosVelProvider._metadata, IAgStkRadarPosVelProvider._get_PositionLLAArray_metadata)

    _get_LocalRadiusDetic_metadata = { "name" : "LocalRadiusDetic",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def LocalRadiusDetic(self) -> float:
        """Gets the central body radius detic using the position/velocity provider's current latitude and longitude."""
        return self._intf.get_property(IAgStkRadarPosVelProvider._metadata, IAgStkRadarPosVelProvider._get_LocalRadiusDetic_metadata)

    _get_LocalRadiusCentric_metadata = { "name" : "LocalRadiusCentric",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def LocalRadiusCentric(self) -> float:
        """Gets the central body radius centric using the position/velocity provider's current latitude and longitude."""
        return self._intf.get_property(IAgStkRadarPosVelProvider._metadata, IAgStkRadarPosVelProvider._get_LocalRadiusCentric_metadata)

    _GetSurfaceNormalDetic_metadata = { "name" : "GetSurfaceNormalDetic",
            "arg_types" : (POINTER(agcom.DOUBLE), POINTER(agcom.DOUBLE), POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg,) }
    def GetSurfaceNormalDetic(self) -> typing.Tuple[float, float, float]:
        """Gets the surface normal detic."""
        return self._intf.invoke(IAgStkRadarPosVelProvider._metadata, IAgStkRadarPosVelProvider._GetSurfaceNormalDetic_metadata, out_arg(), out_arg(), out_arg())

    _get_SurfaceNormalDeticArray_metadata = { "name" : "SurfaceNormalDeticArray",
            "arg_types" : (POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg,) }
    @property
    def SurfaceNormalDeticArray(self) -> list:
        """Gets the surface normal detic as an array."""
        return self._intf.get_property(IAgStkRadarPosVelProvider._metadata, IAgStkRadarPosVelProvider._get_SurfaceNormalDeticArray_metadata)

    _GetSurfaceNormalCentric_metadata = { "name" : "GetSurfaceNormalCentric",
            "arg_types" : (POINTER(agcom.DOUBLE), POINTER(agcom.DOUBLE), POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg,) }
    def GetSurfaceNormalCentric(self) -> typing.Tuple[float, float, float]:
        """Gets the surface normal centric as an array."""
        return self._intf.invoke(IAgStkRadarPosVelProvider._metadata, IAgStkRadarPosVelProvider._GetSurfaceNormalCentric_metadata, out_arg(), out_arg(), out_arg())

    _get_SurfaceNormalCentricArray_metadata = { "name" : "SurfaceNormalCentricArray",
            "arg_types" : (POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg,) }
    @property
    def SurfaceNormalCentricArray(self) -> list:
        """Gets the surface normal centric as an array."""
        return self._intf.get_property(IAgStkRadarPosVelProvider._metadata, IAgStkRadarPosVelProvider._get_SurfaceNormalCentricArray_metadata)

    _GetTerrainHeight_metadata = { "name" : "GetTerrainHeight",
            "arg_types" : (agcom.LONG, POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEStkRadarTerrainInterpMethod), agmarshall.DOUBLE_arg,) }
    def GetTerrainHeight(self, interpMethod:"AgEStkRadarTerrainInterpMethod") -> float:
        """Gets the terrain height."""
        return self._intf.invoke(IAgStkRadarPosVelProvider._metadata, IAgStkRadarPosVelProvider._GetTerrainHeight_metadata, interpMethod, out_arg())

    _GetTerrainHeightForLatLon_metadata = { "name" : "GetTerrainHeightForLatLon",
            "arg_types" : (agcom.DOUBLE, agcom.DOUBLE, agcom.LONG, POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg, agmarshall.AgEnum_arg(AgEStkRadarTerrainInterpMethod), agmarshall.DOUBLE_arg,) }
    def GetTerrainHeightForLatLon(self, latitude:float, longitude:float, interpMethod:"AgEStkRadarTerrainInterpMethod") -> float:
        """Gets the terrain height for a specified latitude and longitude."""
        return self._intf.invoke(IAgStkRadarPosVelProvider._metadata, IAgStkRadarPosVelProvider._GetTerrainHeightForLatLon_metadata, latitude, longitude, interpMethod, out_arg())

    _ComputeLocalRadiusDetic_metadata = { "name" : "ComputeLocalRadiusDetic",
            "arg_types" : (agcom.DOUBLE, agcom.DOUBLE, POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg,) }
    def ComputeLocalRadiusDetic(self, latitude:float, longitude:float) -> float:
        """Computes the central body radius detic for a given latitude and longitude."""
        return self._intf.invoke(IAgStkRadarPosVelProvider._metadata, IAgStkRadarPosVelProvider._ComputeLocalRadiusDetic_metadata, latitude, longitude, out_arg())

    _ComputeLocalRadiusCentric_metadata = { "name" : "ComputeLocalRadiusCentric",
            "arg_types" : (agcom.DOUBLE, agcom.DOUBLE, POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg,) }
    def ComputeLocalRadiusCentric(self, latitude:float, longitude:float) -> float:
        """Computes the central body radius centric for a given latitude and longitude."""
        return self._intf.invoke(IAgStkRadarPosVelProvider._metadata, IAgStkRadarPosVelProvider._ComputeLocalRadiusCentric_metadata, latitude, longitude, out_arg())

    _ComputeSurfaceNormalDetic_metadata = { "name" : "ComputeSurfaceNormalDetic",
            "arg_types" : (agcom.DOUBLE, agcom.DOUBLE, POINTER(agcom.DOUBLE), POINTER(agcom.DOUBLE), POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg,) }
    def ComputeSurfaceNormalDetic(self, latitude:float, longitude:float) -> typing.Tuple[float, float, float]:
        """Computes the surface normal detic vector for a given latitude and longitude."""
        return self._intf.invoke(IAgStkRadarPosVelProvider._metadata, IAgStkRadarPosVelProvider._ComputeSurfaceNormalDetic_metadata, latitude, longitude, out_arg(), out_arg(), out_arg())

    _ComputeSurfaceNormalDeticArray_metadata = { "name" : "ComputeSurfaceNormalDeticArray",
            "arg_types" : (agcom.DOUBLE, agcom.DOUBLE, POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg, agmarshall.LPSAFEARRAY_arg,) }
    def ComputeSurfaceNormalDeticArray(self, latitude:float, longitude:float) -> list:
        """Computes the surface normal detic vector for a given latitude and longitude as an array."""
        return self._intf.invoke(IAgStkRadarPosVelProvider._metadata, IAgStkRadarPosVelProvider._ComputeSurfaceNormalDeticArray_metadata, latitude, longitude, out_arg())

    _ComputeSurfaceNormalCentric_metadata = { "name" : "ComputeSurfaceNormalCentric",
            "arg_types" : (agcom.DOUBLE, agcom.DOUBLE, POINTER(agcom.DOUBLE), POINTER(agcom.DOUBLE), POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg,) }
    def ComputeSurfaceNormalCentric(self, latitude:float, longitude:float) -> typing.Tuple[float, float, float]:
        """Computes the surface normal centric vector for a given latitude and longitude."""
        return self._intf.invoke(IAgStkRadarPosVelProvider._metadata, IAgStkRadarPosVelProvider._ComputeSurfaceNormalCentric_metadata, latitude, longitude, out_arg(), out_arg(), out_arg())

    _ComputeSurfaceNormalCentricArray_metadata = { "name" : "ComputeSurfaceNormalCentricArray",
            "arg_types" : (agcom.DOUBLE, agcom.DOUBLE, POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg, agmarshall.LPSAFEARRAY_arg,) }
    def ComputeSurfaceNormalCentricArray(self, latitude:float, longitude:float) -> list:
        """Computes the surface normal centric vector for a given latitude and longitude as an array."""
        return self._intf.invoke(IAgStkRadarPosVelProvider._metadata, IAgStkRadarPosVelProvider._ComputeSurfaceNormalCentricArray_metadata, latitude, longitude, out_arg())

    _ConvertCBFCartesianToLLA_metadata = { "name" : "ConvertCBFCartesianToLLA",
            "arg_types" : (agcom.DOUBLE, agcom.DOUBLE, agcom.DOUBLE, POINTER(agcom.DOUBLE), POINTER(agcom.DOUBLE), POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg,) }
    def ConvertCBFCartesianToLLA(self, x:float, y:float, z:float) -> typing.Tuple[float, float, float]:
        """Converts central body fixed cartesian to latitude, longitude, and altitude."""
        return self._intf.invoke(IAgStkRadarPosVelProvider._metadata, IAgStkRadarPosVelProvider._ConvertCBFCartesianToLLA_metadata, x, y, z, out_arg(), out_arg(), out_arg())

    _ConvertCBFCartesianToLLAArray_metadata = { "name" : "ConvertCBFCartesianToLLAArray",
            "arg_types" : (agcom.DOUBLE, agcom.DOUBLE, agcom.DOUBLE, POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg, agmarshall.LPSAFEARRAY_arg,) }
    def ConvertCBFCartesianToLLAArray(self, x:float, y:float, z:float) -> list:
        """Converts central body fixed cartesian to latitude, longitude, and altitude as an array."""
        return self._intf.invoke(IAgStkRadarPosVelProvider._metadata, IAgStkRadarPosVelProvider._ConvertCBFCartesianToLLAArray_metadata, x, y, z, out_arg())

    _ConvertLLAToCBFCartesian_metadata = { "name" : "ConvertLLAToCBFCartesian",
            "arg_types" : (agcom.DOUBLE, agcom.DOUBLE, agcom.DOUBLE, POINTER(agcom.DOUBLE), POINTER(agcom.DOUBLE), POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg,) }
    def ConvertLLAToCBFCartesian(self, latitude:float, longitude:float, altitude:float) -> typing.Tuple[float, float, float]:
        """Converts latitude, longitude, and altitude to central body fixed cartesian."""
        return self._intf.invoke(IAgStkRadarPosVelProvider._metadata, IAgStkRadarPosVelProvider._ConvertLLAToCBFCartesian_metadata, latitude, longitude, altitude, out_arg(), out_arg(), out_arg())

    _ConvertLLAToCBFCartesianArray_metadata = { "name" : "ConvertLLAToCBFCartesianArray",
            "arg_types" : (agcom.DOUBLE, agcom.DOUBLE, agcom.DOUBLE, POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg, agmarshall.LPSAFEARRAY_arg,) }
    def ConvertLLAToCBFCartesianArray(self, latitude:float, longitude:float, altitude:float) -> list:
        """Converts latitude, longitude, and altitude to central body fixed cartesian as an array."""
        return self._intf.invoke(IAgStkRadarPosVelProvider._metadata, IAgStkRadarPosVelProvider._ConvertLLAToCBFCartesianArray_metadata, latitude, longitude, altitude, out_arg())

    _ConvertCBFCartesianToVVLHCartesian_metadata = { "name" : "ConvertCBFCartesianToVVLHCartesian",
            "arg_types" : (agcom.DOUBLE, agcom.DOUBLE, agcom.DOUBLE, POINTER(agcom.DOUBLE), POINTER(agcom.DOUBLE), POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg,) }
    def ConvertCBFCartesianToVVLHCartesian(self, xCbf:float, yCbf:float, zCbf:float) -> typing.Tuple[float, float, float]:
        """Converts a central body fixed cartesian into the VVLA frame."""
        return self._intf.invoke(IAgStkRadarPosVelProvider._metadata, IAgStkRadarPosVelProvider._ConvertCBFCartesianToVVLHCartesian_metadata, xCbf, yCbf, zCbf, out_arg(), out_arg(), out_arg())

    _ConvertCBFCartesianToVVLHCartesianArray_metadata = { "name" : "ConvertCBFCartesianToVVLHCartesianArray",
            "arg_types" : (agcom.DOUBLE, agcom.DOUBLE, agcom.DOUBLE, POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg, agmarshall.LPSAFEARRAY_arg,) }
    def ConvertCBFCartesianToVVLHCartesianArray(self, xCbf:float, yCbf:float, zCbf:float) -> list:
        """Converts a central body fixed cartesian into the VVLA frame as an array."""
        return self._intf.invoke(IAgStkRadarPosVelProvider._metadata, IAgStkRadarPosVelProvider._ConvertCBFCartesianToVVLHCartesianArray_metadata, xCbf, yCbf, zCbf, out_arg())

    _ConvertBodyCartesianToCBFCartesian_metadata = { "name" : "ConvertBodyCartesianToCBFCartesian",
            "arg_types" : (agcom.DOUBLE, agcom.DOUBLE, agcom.DOUBLE, POINTER(agcom.DOUBLE), POINTER(agcom.DOUBLE), POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg,) }
    def ConvertBodyCartesianToCBFCartesian(self, xBody:float, yBody:float, zBody:float) -> typing.Tuple[float, float, float]:
        """Converts a vector in body coordinates into CBF fixed coordinates"""
        return self._intf.invoke(IAgStkRadarPosVelProvider._metadata, IAgStkRadarPosVelProvider._ConvertBodyCartesianToCBFCartesian_metadata, xBody, yBody, zBody, out_arg(), out_arg(), out_arg())

    _ConvertBodyCartesianToCBFCartesianArray_metadata = { "name" : "ConvertBodyCartesianToCBFCartesianArray",
            "arg_types" : (agcom.DOUBLE, agcom.DOUBLE, agcom.DOUBLE, POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg, agmarshall.LPSAFEARRAY_arg,) }
    def ConvertBodyCartesianToCBFCartesianArray(self, xBody:float, yBody:float, zBody:float) -> list:
        """Converts a vector in body coordinates into CBF fixed coordinates as an array."""
        return self._intf.invoke(IAgStkRadarPosVelProvider._metadata, IAgStkRadarPosVelProvider._ConvertBodyCartesianToCBFCartesianArray_metadata, xBody, yBody, zBody, out_arg())

    _ConvertCBFCartesianToBodyCartesian_metadata = { "name" : "ConvertCBFCartesianToBodyCartesian",
            "arg_types" : (agcom.DOUBLE, agcom.DOUBLE, agcom.DOUBLE, POINTER(agcom.DOUBLE), POINTER(agcom.DOUBLE), POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg,) }
    def ConvertCBFCartesianToBodyCartesian(self, xCbf:float, yCbf:float, zCbf:float) -> typing.Tuple[float, float, float]:
        """Converts a vector in CBF coordinates into body coordinates."""
        return self._intf.invoke(IAgStkRadarPosVelProvider._metadata, IAgStkRadarPosVelProvider._ConvertCBFCartesianToBodyCartesian_metadata, xCbf, yCbf, zCbf, out_arg(), out_arg(), out_arg())

    _ConvertCBFCartesianToBodyCartesianArray_metadata = { "name" : "ConvertCBFCartesianToBodyCartesianArray",
            "arg_types" : (agcom.DOUBLE, agcom.DOUBLE, agcom.DOUBLE, POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg, agmarshall.LPSAFEARRAY_arg,) }
    def ConvertCBFCartesianToBodyCartesianArray(self, xCbf:float, yCbf:float, zCbf:float) -> list:
        """Converts a vector in CBF coordinates into body coordinates as an array."""
        return self._intf.invoke(IAgStkRadarPosVelProvider._metadata, IAgStkRadarPosVelProvider._ConvertCBFCartesianToBodyCartesianArray_metadata, xCbf, yCbf, zCbf, out_arg())

    _get_Role_metadata = { "name" : "Role",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEStkRadarPosVelProviderRole),) }
    @property
    def Role(self) -> "AgEStkRadarPosVelProviderRole":
        """Gets the IAgStkRadarPosVelProvider role."""
        return self._intf.get_property(IAgStkRadarPosVelProvider._metadata, IAgStkRadarPosVelProvider._get_Role_metadata)

    _ComputeCentralBodyIntersectInCBF_metadata = { "name" : "ComputeCentralBodyIntersectInCBF",
            "arg_types" : (agcom.DOUBLE, agcom.DOUBLE, agcom.DOUBLE, agcom.DOUBLE, agcom.DOUBLE, agcom.DOUBLE, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg, agmarshall.AgInterface_out_arg,) }
    def ComputeCentralBodyIntersectInCBF(self, baseX:float, baseY:float, baseZ:float, dirX:float, dirY:float, dirZ:float) -> "IAgStkRadarCBIntersectComputeResult":
        """Computes the central body intersection using central body fixed coordinates."""
        return self._intf.invoke(IAgStkRadarPosVelProvider._metadata, IAgStkRadarPosVelProvider._ComputeCentralBodyIntersectInCBF_metadata, baseX, baseY, baseZ, dirX, dirY, dirZ, out_arg())


agcls.AgClassCatalog.add_catalog_entry("{E675D82D-945C-46F9-9E26-0632D13884D4}", IAgStkRadarPosVelProvider)
agcls.AgTypeNameMap["IAgStkRadarPosVelProvider"] = IAgStkRadarPosVelProvider

class IAgStkRadarLinkGeometry(object):
    """Interface implemented by an object that provides the geometry for a radar link."""
    _num_methods = 30
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{1BD6A448-FA3F-4774-AF3A-24FD7C8F972F}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_TargetPosVelProvider" : 1,
                             "get_TransmitRadarPosVelProvider" : 2,
                             "get_ReceiveRadarPosVelProvider" : 3,
                             "get_ReceiveRadarRange" : 4,
                             "get_ReceiveRadarAngleRate" : 5,
                             "get_ReceiveRadarRangeRate" : 6,
                             "get_ReceiveRadarConeAngle" : 7,
                             "get_ReceiveRadarPropTime" : 8,
                             "get_TransmitRadarRange" : 9,
                             "get_TransmitRadarAngleRate" : 10,
                             "get_TransmitRadarRangeRate" : 11,
                             "get_TransmitRadarConeAngle" : 12,
                             "get_TransmitRadarPropTime" : 13,
                             "get_RangeSum" : 14,
                             "get_Closure" : 15,
                             "get_MLCVelocity" : 16,
                             "get_BistaticAngle" : 17,
                             "get_IncidentAzimuth" : 18,
                             "get_IncidentElevation" : 19,
                             "get_ReflectedAzimuth" : 20,
                             "get_ReflectedElevation" : 21,
                             "get_XYAngleRate" : 22,
                             "GetTgt2XmtRdrRelPosCBFCartesian" : 23,
                             "get_Tgt2XmtRdrRelPosCBFCartesianArray" : 24,
                             "GetTgt2RcvRdrRelPosCBFCartesian" : 25,
                             "get_Tgt2RcvRdrRelPosCBFCartesianArray" : 26,
                             "GetXmtRdr2TgtRelPosCBFCartesian" : 27,
                             "get_XmtRdr2TgtRelPosCBFCartesianArray" : 28,
                             "GetRcvRdr2TgtRelPosCBFCartesian" : 29,
                             "get_RcvRdr2TgtRelPosCBFCartesianArray" : 30, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkRadarLinkGeometry._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkRadarLinkGeometry from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkRadarLinkGeometry.__dict__ and type(IAgStkRadarLinkGeometry.__dict__[attrname]) == property:
            return IAgStkRadarLinkGeometry.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkRadarLinkGeometry.")
    
    _get_TargetPosVelProvider_metadata = { "name" : "TargetPosVelProvider",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def TargetPosVelProvider(self) -> "IAgStkRadarPosVelProvider":
        """Gets the target position/velocity provider interface."""
        return self._intf.get_property(IAgStkRadarLinkGeometry._metadata, IAgStkRadarLinkGeometry._get_TargetPosVelProvider_metadata)

    _get_TransmitRadarPosVelProvider_metadata = { "name" : "TransmitRadarPosVelProvider",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def TransmitRadarPosVelProvider(self) -> "IAgStkRadarPosVelProvider":
        """Gets the transmit radar position/velocity provider interface."""
        return self._intf.get_property(IAgStkRadarLinkGeometry._metadata, IAgStkRadarLinkGeometry._get_TransmitRadarPosVelProvider_metadata)

    _get_ReceiveRadarPosVelProvider_metadata = { "name" : "ReceiveRadarPosVelProvider",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def ReceiveRadarPosVelProvider(self) -> "IAgStkRadarPosVelProvider":
        """Gets the receive radar position/velocity provider interface."""
        return self._intf.get_property(IAgStkRadarLinkGeometry._metadata, IAgStkRadarLinkGeometry._get_ReceiveRadarPosVelProvider_metadata)

    _get_ReceiveRadarRange_metadata = { "name" : "ReceiveRadarRange",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def ReceiveRadarRange(self) -> float:
        """Gets the receive radar range."""
        return self._intf.get_property(IAgStkRadarLinkGeometry._metadata, IAgStkRadarLinkGeometry._get_ReceiveRadarRange_metadata)

    _get_ReceiveRadarAngleRate_metadata = { "name" : "ReceiveRadarAngleRate",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def ReceiveRadarAngleRate(self) -> float:
        """Gets the receive radar angle rate."""
        return self._intf.get_property(IAgStkRadarLinkGeometry._metadata, IAgStkRadarLinkGeometry._get_ReceiveRadarAngleRate_metadata)

    _get_ReceiveRadarRangeRate_metadata = { "name" : "ReceiveRadarRangeRate",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def ReceiveRadarRangeRate(self) -> float:
        """Gets the receive radar range rate."""
        return self._intf.get_property(IAgStkRadarLinkGeometry._metadata, IAgStkRadarLinkGeometry._get_ReceiveRadarRangeRate_metadata)

    _get_ReceiveRadarConeAngle_metadata = { "name" : "ReceiveRadarConeAngle",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def ReceiveRadarConeAngle(self) -> float:
        """Gets the receive radar cone angle."""
        return self._intf.get_property(IAgStkRadarLinkGeometry._metadata, IAgStkRadarLinkGeometry._get_ReceiveRadarConeAngle_metadata)

    _get_ReceiveRadarPropTime_metadata = { "name" : "ReceiveRadarPropTime",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def ReceiveRadarPropTime(self) -> float:
        """Gets the receive radar prop time."""
        return self._intf.get_property(IAgStkRadarLinkGeometry._metadata, IAgStkRadarLinkGeometry._get_ReceiveRadarPropTime_metadata)

    _get_TransmitRadarRange_metadata = { "name" : "TransmitRadarRange",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def TransmitRadarRange(self) -> float:
        """Gets the transmit radar range."""
        return self._intf.get_property(IAgStkRadarLinkGeometry._metadata, IAgStkRadarLinkGeometry._get_TransmitRadarRange_metadata)

    _get_TransmitRadarAngleRate_metadata = { "name" : "TransmitRadarAngleRate",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def TransmitRadarAngleRate(self) -> float:
        """Gets the transmit radar angle rate."""
        return self._intf.get_property(IAgStkRadarLinkGeometry._metadata, IAgStkRadarLinkGeometry._get_TransmitRadarAngleRate_metadata)

    _get_TransmitRadarRangeRate_metadata = { "name" : "TransmitRadarRangeRate",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def TransmitRadarRangeRate(self) -> float:
        """Gets the transmit radar range rate."""
        return self._intf.get_property(IAgStkRadarLinkGeometry._metadata, IAgStkRadarLinkGeometry._get_TransmitRadarRangeRate_metadata)

    _get_TransmitRadarConeAngle_metadata = { "name" : "TransmitRadarConeAngle",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def TransmitRadarConeAngle(self) -> float:
        """Gets the transmit radar cone angle."""
        return self._intf.get_property(IAgStkRadarLinkGeometry._metadata, IAgStkRadarLinkGeometry._get_TransmitRadarConeAngle_metadata)

    _get_TransmitRadarPropTime_metadata = { "name" : "TransmitRadarPropTime",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def TransmitRadarPropTime(self) -> float:
        """Gets the transmit radar prop time."""
        return self._intf.get_property(IAgStkRadarLinkGeometry._metadata, IAgStkRadarLinkGeometry._get_TransmitRadarPropTime_metadata)

    _get_RangeSum_metadata = { "name" : "RangeSum",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def RangeSum(self) -> float:
        """Gets the range sum."""
        return self._intf.get_property(IAgStkRadarLinkGeometry._metadata, IAgStkRadarLinkGeometry._get_RangeSum_metadata)

    _get_Closure_metadata = { "name" : "Closure",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def Closure(self) -> float:
        """Gets the closure."""
        return self._intf.get_property(IAgStkRadarLinkGeometry._metadata, IAgStkRadarLinkGeometry._get_Closure_metadata)

    _get_MLCVelocity_metadata = { "name" : "MLCVelocity",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def MLCVelocity(self) -> float:
        """Gets the main lobe clutter velocity."""
        return self._intf.get_property(IAgStkRadarLinkGeometry._metadata, IAgStkRadarLinkGeometry._get_MLCVelocity_metadata)

    _get_BistaticAngle_metadata = { "name" : "BistaticAngle",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def BistaticAngle(self) -> float:
        """Gets the bistatic angle."""
        return self._intf.get_property(IAgStkRadarLinkGeometry._metadata, IAgStkRadarLinkGeometry._get_BistaticAngle_metadata)

    _get_IncidentAzimuth_metadata = { "name" : "IncidentAzimuth",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def IncidentAzimuth(self) -> float:
        """Gets the incident azimuth."""
        return self._intf.get_property(IAgStkRadarLinkGeometry._metadata, IAgStkRadarLinkGeometry._get_IncidentAzimuth_metadata)

    _get_IncidentElevation_metadata = { "name" : "IncidentElevation",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def IncidentElevation(self) -> float:
        """Gets the incident elevation."""
        return self._intf.get_property(IAgStkRadarLinkGeometry._metadata, IAgStkRadarLinkGeometry._get_IncidentElevation_metadata)

    _get_ReflectedAzimuth_metadata = { "name" : "ReflectedAzimuth",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def ReflectedAzimuth(self) -> float:
        """Gets the reflected azimuth."""
        return self._intf.get_property(IAgStkRadarLinkGeometry._metadata, IAgStkRadarLinkGeometry._get_ReflectedAzimuth_metadata)

    _get_ReflectedElevation_metadata = { "name" : "ReflectedElevation",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def ReflectedElevation(self) -> float:
        """Gets the reflected elevation."""
        return self._intf.get_property(IAgStkRadarLinkGeometry._metadata, IAgStkRadarLinkGeometry._get_ReflectedElevation_metadata)

    _get_XYAngleRate_metadata = { "name" : "XYAngleRate",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def XYAngleRate(self) -> float:
        """Gets the xy angle rate."""
        return self._intf.get_property(IAgStkRadarLinkGeometry._metadata, IAgStkRadarLinkGeometry._get_XYAngleRate_metadata)

    _GetTgt2XmtRdrRelPosCBFCartesian_metadata = { "name" : "GetTgt2XmtRdrRelPosCBFCartesian",
            "arg_types" : (POINTER(agcom.DOUBLE), POINTER(agcom.DOUBLE), POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg,) }
    def GetTgt2XmtRdrRelPosCBFCartesian(self) -> typing.Tuple[float, float, float]:
        """Gets the relative position vector from the target to the transmitting radar in central body fixed coordinates"""
        return self._intf.invoke(IAgStkRadarLinkGeometry._metadata, IAgStkRadarLinkGeometry._GetTgt2XmtRdrRelPosCBFCartesian_metadata, out_arg(), out_arg(), out_arg())

    _get_Tgt2XmtRdrRelPosCBFCartesianArray_metadata = { "name" : "Tgt2XmtRdrRelPosCBFCartesianArray",
            "arg_types" : (POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg,) }
    @property
    def Tgt2XmtRdrRelPosCBFCartesianArray(self) -> list:
        """Gets the relative position vector from the target to the transmitting radar in central body fixed coordinates as an array."""
        return self._intf.get_property(IAgStkRadarLinkGeometry._metadata, IAgStkRadarLinkGeometry._get_Tgt2XmtRdrRelPosCBFCartesianArray_metadata)

    _GetTgt2RcvRdrRelPosCBFCartesian_metadata = { "name" : "GetTgt2RcvRdrRelPosCBFCartesian",
            "arg_types" : (POINTER(agcom.DOUBLE), POINTER(agcom.DOUBLE), POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg,) }
    def GetTgt2RcvRdrRelPosCBFCartesian(self) -> typing.Tuple[float, float, float]:
        """Gets the relative position vector from the target to the receiving radar in central body fixed coordinates."""
        return self._intf.invoke(IAgStkRadarLinkGeometry._metadata, IAgStkRadarLinkGeometry._GetTgt2RcvRdrRelPosCBFCartesian_metadata, out_arg(), out_arg(), out_arg())

    _get_Tgt2RcvRdrRelPosCBFCartesianArray_metadata = { "name" : "Tgt2RcvRdrRelPosCBFCartesianArray",
            "arg_types" : (POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg,) }
    @property
    def Tgt2RcvRdrRelPosCBFCartesianArray(self) -> list:
        """Gets the relative position vector from the target to the receiving radar in central body fixed coordinates as an array."""
        return self._intf.get_property(IAgStkRadarLinkGeometry._metadata, IAgStkRadarLinkGeometry._get_Tgt2RcvRdrRelPosCBFCartesianArray_metadata)

    _GetXmtRdr2TgtRelPosCBFCartesian_metadata = { "name" : "GetXmtRdr2TgtRelPosCBFCartesian",
            "arg_types" : (POINTER(agcom.DOUBLE), POINTER(agcom.DOUBLE), POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg,) }
    def GetXmtRdr2TgtRelPosCBFCartesian(self) -> typing.Tuple[float, float, float]:
        """Gets the relative position vector from the transmitting radar to the target in central body fixed coordinates."""
        return self._intf.invoke(IAgStkRadarLinkGeometry._metadata, IAgStkRadarLinkGeometry._GetXmtRdr2TgtRelPosCBFCartesian_metadata, out_arg(), out_arg(), out_arg())

    _get_XmtRdr2TgtRelPosCBFCartesianArray_metadata = { "name" : "XmtRdr2TgtRelPosCBFCartesianArray",
            "arg_types" : (POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg,) }
    @property
    def XmtRdr2TgtRelPosCBFCartesianArray(self) -> list:
        """Gets the relative position vector from the transmitting radar to the target in central body fixed coordinates as an array."""
        return self._intf.get_property(IAgStkRadarLinkGeometry._metadata, IAgStkRadarLinkGeometry._get_XmtRdr2TgtRelPosCBFCartesianArray_metadata)

    _GetRcvRdr2TgtRelPosCBFCartesian_metadata = { "name" : "GetRcvRdr2TgtRelPosCBFCartesian",
            "arg_types" : (POINTER(agcom.DOUBLE), POINTER(agcom.DOUBLE), POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg,) }
    def GetRcvRdr2TgtRelPosCBFCartesian(self) -> typing.Tuple[float, float, float]:
        """Gets the relative position vector from the receiving radar to the target in central body fixed coordinates."""
        return self._intf.invoke(IAgStkRadarLinkGeometry._metadata, IAgStkRadarLinkGeometry._GetRcvRdr2TgtRelPosCBFCartesian_metadata, out_arg(), out_arg(), out_arg())

    _get_RcvRdr2TgtRelPosCBFCartesianArray_metadata = { "name" : "RcvRdr2TgtRelPosCBFCartesianArray",
            "arg_types" : (POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg,) }
    @property
    def RcvRdr2TgtRelPosCBFCartesianArray(self) -> list:
        """Gets the relative position vector from the receiving radar to the target in central body fixed coordinates as an array."""
        return self._intf.get_property(IAgStkRadarLinkGeometry._metadata, IAgStkRadarLinkGeometry._get_RcvRdr2TgtRelPosCBFCartesianArray_metadata)


agcls.AgClassCatalog.add_catalog_entry("{1BD6A448-FA3F-4774-AF3A-24FD7C8F972F}", IAgStkRadarLinkGeometry)
agcls.AgTypeNameMap["IAgStkRadarLinkGeometry"] = IAgStkRadarLinkGeometry

class IAgStkRadarLink(object):
    """Interface implemented by an object that represents the multi-hop link from a radar transmitter to the target, and back to the receive radar."""
    _num_methods = 5
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{7F15B06B-0F53-48DF-BA18-E1D28F7180F9}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_Geometry" : 1,
                             "ComputeDopplerResolution" : 2,
                             "ComputeRangeResolution" : 3,
                             "ComputeIsoDoppler" : 4,
                             "ComputeIsoRange" : 5, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkRadarLink._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkRadarLink from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkRadarLink.__dict__ and type(IAgStkRadarLink.__dict__[attrname]) == property:
            return IAgStkRadarLink.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkRadarLink.")
    
    _get_Geometry_metadata = { "name" : "Geometry",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def Geometry(self) -> "IAgStkRadarLinkGeometry":
        """Gets the link geometry."""
        return self._intf.get_property(IAgStkRadarLink._metadata, IAgStkRadarLink._get_Geometry_metadata)

    _ComputeDopplerResolution_metadata = { "name" : "ComputeDopplerResolution",
            "arg_types" : (agcom.PVOID, POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.AgInterface_in_arg("IAgCRSignal"), agmarshall.DOUBLE_arg,) }
    def ComputeDopplerResolution(self, radarSignal:"IAgCRSignal") -> float:
        """Computes the doppler resolution for the supplied signal."""
        return self._intf.invoke(IAgStkRadarLink._metadata, IAgStkRadarLink._ComputeDopplerResolution_metadata, radarSignal, out_arg())

    _ComputeRangeResolution_metadata = { "name" : "ComputeRangeResolution",
            "arg_types" : (agcom.PVOID, POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.AgInterface_in_arg("IAgCRSignal"), agmarshall.DOUBLE_arg,) }
    def ComputeRangeResolution(self, radarSignal:"IAgCRSignal") -> float:
        """Computes the range resolution for the supplied signal."""
        return self._intf.invoke(IAgStkRadarLink._metadata, IAgStkRadarLink._ComputeRangeResolution_metadata, radarSignal, out_arg())

    _ComputeIsoDoppler_metadata = { "name" : "ComputeIsoDoppler",
            "arg_types" : (agcom.PVOID, POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.AgInterface_in_arg("IAgCRSignal"), agmarshall.LPSAFEARRAY_arg,) }
    def ComputeIsoDoppler(self, radarSignal:"IAgCRSignal") -> list:
        """Computes the iso doppler array for the supplied signal."""
        return self._intf.invoke(IAgStkRadarLink._metadata, IAgStkRadarLink._ComputeIsoDoppler_metadata, radarSignal, out_arg())

    _ComputeIsoRange_metadata = { "name" : "ComputeIsoRange",
            "arg_types" : (agcom.PVOID, POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.AgInterface_in_arg("IAgCRSignal"), agmarshall.LPSAFEARRAY_arg,) }
    def ComputeIsoRange(self, radarSignal:"IAgCRSignal") -> list:
        """Computes the iso range array for the supplied signal."""
        return self._intf.invoke(IAgStkRadarLink._metadata, IAgStkRadarLink._ComputeIsoRange_metadata, radarSignal, out_arg())


agcls.AgClassCatalog.add_catalog_entry("{7F15B06B-0F53-48DF-BA18-E1D28F7180F9}", IAgStkRadarLink)
agcls.AgTypeNameMap["IAgStkRadarLink"] = IAgStkRadarLink

class IAgStkRadarSignal(object):
    """Interface implemented by an object that represents a radar signal."""
    _num_methods = 6
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{5F85A0C9-7DA4-4364-8934-8A21DEBF7AE1}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_PulseRepetitionFrequency" : 1,
                             "get_PulseCompressionRatio" : 2,
                             "get_PulseWidth" : 3,
                             "get_NumberOfPulses" : 4,
                             "get_Rcs" : 5,
                             "set_Rcs" : 6, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkRadarSignal._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkRadarSignal from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkRadarSignal.__dict__ and type(IAgStkRadarSignal.__dict__[attrname]) == property:
            return IAgStkRadarSignal.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkRadarSignal.")
    
    _get_PulseRepetitionFrequency_metadata = { "name" : "PulseRepetitionFrequency",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def PulseRepetitionFrequency(self) -> float:
        """Gets the signal pulse repetition frequency."""
        return self._intf.get_property(IAgStkRadarSignal._metadata, IAgStkRadarSignal._get_PulseRepetitionFrequency_metadata)

    _get_PulseCompressionRatio_metadata = { "name" : "PulseCompressionRatio",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def PulseCompressionRatio(self) -> float:
        """Gets the signal pulse compression ratio."""
        return self._intf.get_property(IAgStkRadarSignal._metadata, IAgStkRadarSignal._get_PulseCompressionRatio_metadata)

    _get_PulseWidth_metadata = { "name" : "PulseWidth",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def PulseWidth(self) -> float:
        """Gets the signal pulse width."""
        return self._intf.get_property(IAgStkRadarSignal._metadata, IAgStkRadarSignal._get_PulseWidth_metadata)

    _get_NumberOfPulses_metadata = { "name" : "NumberOfPulses",
            "arg_types" : (POINTER(agcom.INT),),
            "marshallers" : (agmarshall.INT_arg,) }
    @property
    def NumberOfPulses(self) -> int:
        """Gets the number of pulses."""
        return self._intf.get_property(IAgStkRadarSignal._metadata, IAgStkRadarSignal._get_NumberOfPulses_metadata)

    _get_Rcs_metadata = { "name" : "Rcs",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def Rcs(self) -> float:
        """Gets or sets the signal RCS."""
        return self._intf.get_property(IAgStkRadarSignal._metadata, IAgStkRadarSignal._get_Rcs_metadata)

    _set_Rcs_metadata = { "name" : "Rcs",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @Rcs.setter
    def Rcs(self, rcs:float) -> None:
        """Gets or sets the signal RCS."""
        return self._intf.set_property(IAgStkRadarSignal._metadata, IAgStkRadarSignal._set_Rcs_metadata, rcs)


agcls.AgClassCatalog.add_catalog_entry("{5F85A0C9-7DA4-4364-8934-8A21DEBF7AE1}", IAgStkRadarSignal)
agcls.AgTypeNameMap["IAgStkRadarSignal"] = IAgStkRadarSignal

class IAgStkRadarClutterPatch(object):
    """Interface implemented by an object that represents a clutter patch."""
    _num_methods = 7
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{59DC586B-E3E3-49F3-8889-4631B472E13C}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_PosVelProvider" : 1,
                             "SetPositionCBF" : 2,
                             "SetVelocityCBF" : 3,
                             "get_Area" : 4,
                             "set_Area" : 5,
                             "get_ScatteringPointComponentName" : 6,
                             "set_ScatteringPointComponentName" : 7, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkRadarClutterPatch._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkRadarClutterPatch from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkRadarClutterPatch.__dict__ and type(IAgStkRadarClutterPatch.__dict__[attrname]) == property:
            return IAgStkRadarClutterPatch.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkRadarClutterPatch.")
    
    _get_PosVelProvider_metadata = { "name" : "PosVelProvider",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def PosVelProvider(self) -> "IAgStkRadarPosVelProvider":
        """Gets the patch position/velocity provider interface."""
        return self._intf.get_property(IAgStkRadarClutterPatch._metadata, IAgStkRadarClutterPatch._get_PosVelProvider_metadata)

    _SetPositionCBF_metadata = { "name" : "SetPositionCBF",
            "arg_types" : (agcom.DOUBLE, agcom.DOUBLE, agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg,) }
    def SetPositionCBF(self, x:float, y:float, z:float) -> None:
        """Sets the patch position in the central body fixed frame."""
        return self._intf.invoke(IAgStkRadarClutterPatch._metadata, IAgStkRadarClutterPatch._SetPositionCBF_metadata, x, y, z)

    _SetVelocityCBF_metadata = { "name" : "SetVelocityCBF",
            "arg_types" : (agcom.DOUBLE, agcom.DOUBLE, agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg,) }
    def SetVelocityCBF(self, x:float, y:float, z:float) -> None:
        """Sets the patch velocity in the central body fixed frame."""
        return self._intf.invoke(IAgStkRadarClutterPatch._metadata, IAgStkRadarClutterPatch._SetVelocityCBF_metadata, x, y, z)

    _get_Area_metadata = { "name" : "Area",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def Area(self) -> float:
        """Gets or sets the patch area."""
        return self._intf.get_property(IAgStkRadarClutterPatch._metadata, IAgStkRadarClutterPatch._get_Area_metadata)

    _set_Area_metadata = { "name" : "Area",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @Area.setter
    def Area(self, area:float) -> None:
        """Gets or sets the patch area."""
        return self._intf.set_property(IAgStkRadarClutterPatch._metadata, IAgStkRadarClutterPatch._set_Area_metadata, area)

    _get_ScatteringPointComponentName_metadata = { "name" : "ScatteringPointComponentName",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def ScatteringPointComponentName(self) -> str:
        """Gets or set the patch scattering point model by component name."""
        return self._intf.get_property(IAgStkRadarClutterPatch._metadata, IAgStkRadarClutterPatch._get_ScatteringPointComponentName_metadata)

    _set_ScatteringPointComponentName_metadata = { "name" : "ScatteringPointComponentName",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @ScatteringPointComponentName.setter
    def ScatteringPointComponentName(self, scatteringPoitnModelComponentName:str) -> None:
        """Gets or sets the patch scattering point model by component name."""
        return self._intf.set_property(IAgStkRadarClutterPatch._metadata, IAgStkRadarClutterPatch._set_ScatteringPointComponentName_metadata, scatteringPoitnModelComponentName)


agcls.AgClassCatalog.add_catalog_entry("{59DC586B-E3E3-49F3-8889-4631B472E13C}", IAgStkRadarClutterPatch)
agcls.AgTypeNameMap["IAgStkRadarClutterPatch"] = IAgStkRadarClutterPatch

class IAgStkRadarClutterPatchCollection(object):
    """Interface implemented by a collection of clutter patch objects."""
    _num_methods = 7
    _vtable_offset = IDispatch._vtable_offset + IDispatch._num_methods
    _metadata = {
        "uuid" : "{061AF1AD-821F-462D-BAA3-00E2389E1C59}",
        "vtable_reference" : IDispatch._vtable_offset + IDispatch._num_methods - 1,
        "method_offsets" : { "get_Count" : 1,
                             "Item" : 2,
                             "get__NewEnum" : 3,
                             "Remove" : 4,
                             "RemoveAt" : 5,
                             "RemoveAll" : 6,
                             "Add" : 7, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkRadarClutterPatchCollection._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkRadarClutterPatchCollection from source object.")
        self.__dict__["_enumerator"] = None
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkRadarClutterPatchCollection.__dict__ and type(IAgStkRadarClutterPatchCollection.__dict__[attrname]) == property:
            return IAgStkRadarClutterPatchCollection.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkRadarClutterPatchCollection.")
    def __iter__(self):
        self.__dict__["_enumerator"] = self._NewEnum
        self._enumerator.reset()
        return self
    def __next__(self) -> "IAgStkRadarClutterPatch":
        if self._enumerator is None:
            raise StopIteration
        nextval = self._enumerator.next()
        if nextval is None:
            raise StopIteration
        return nextval
    
    _get_Count_metadata = { "name" : "Count",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.LONG_arg,) }
    @property
    def Count(self) -> int:
        """Returns the number of elements in the collection."""
        return self._intf.get_property(IAgStkRadarClutterPatchCollection._metadata, IAgStkRadarClutterPatchCollection._get_Count_metadata)

    _Item_metadata = { "name" : "Item",
            "arg_types" : (agcom.LONG, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.LONG_arg, agmarshall.AgInterface_out_arg,) }
    def Item(self, index:int) -> "IAgStkRadarClutterPatch":
        """Given an index, returns an element in the collection."""
        return self._intf.invoke(IAgStkRadarClutterPatchCollection._metadata, IAgStkRadarClutterPatchCollection._Item_metadata, index, out_arg())

    _get__NewEnum_metadata = { "name" : "_NewEnum",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.IEnumVARIANT_arg,) }
    @property
    def _NewEnum(self) -> enumerator_proxy:
        """Returns an enumerator that can iterate through the collection."""
        return self._intf.get_property(IAgStkRadarClutterPatchCollection._metadata, IAgStkRadarClutterPatchCollection._get__NewEnum_metadata)

    _Remove_metadata = { "name" : "Remove",
            "arg_types" : (agcom.PVOID,),
            "marshallers" : (agmarshall.AgInterface_in_arg("IAgStkRadarClutterPatch"),) }
    def Remove(self, item:"IAgStkRadarClutterPatch") -> None:
        """Removes the specified element from the collection."""
        return self._intf.invoke(IAgStkRadarClutterPatchCollection._metadata, IAgStkRadarClutterPatchCollection._Remove_metadata, item)

    _RemoveAt_metadata = { "name" : "RemoveAt",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.LONG_arg,) }
    def RemoveAt(self, index:int) -> None:
        """Removes an element from the collection using specified index."""
        return self._intf.invoke(IAgStkRadarClutterPatchCollection._metadata, IAgStkRadarClutterPatchCollection._RemoveAt_metadata, index)

    _RemoveAll_metadata = { "name" : "RemoveAll",
            "arg_types" : (),
            "marshallers" : () }
    def RemoveAll(self) -> None:
        """Removes all elements from the collection."""
        return self._intf.invoke(IAgStkRadarClutterPatchCollection._metadata, IAgStkRadarClutterPatchCollection._RemoveAll_metadata, )

    _Add_metadata = { "name" : "Add",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    def Add(self) -> "IAgStkRadarClutterPatch":
        """Adds a new element to the collection."""
        return self._intf.invoke(IAgStkRadarClutterPatchCollection._metadata, IAgStkRadarClutterPatchCollection._Add_metadata, out_arg())

    __getitem__ = Item



agcls.AgClassCatalog.add_catalog_entry("{061AF1AD-821F-462D-BAA3-00E2389E1C59}", IAgStkRadarClutterPatchCollection)
agcls.AgTypeNameMap["IAgStkRadarClutterPatchCollection"] = IAgStkRadarClutterPatchCollection

class IAgStkRadarClutterGeometryPluginRegInfo(object):
    """Interface implemented by an object that represents the registration information for the clutter geometry plugin."""
    _num_methods = 1
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{CB97AE64-AFE6-4F78-A9E4-C56330720ECE}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "set_ValidRadarSystems" : 1, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkRadarClutterGeometryPluginRegInfo._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkRadarClutterGeometryPluginRegInfo from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkRadarClutterGeometryPluginRegInfo.__dict__ and type(IAgStkRadarClutterGeometryPluginRegInfo.__dict__[attrname]) == property:
            return IAgStkRadarClutterGeometryPluginRegInfo.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkRadarClutterGeometryPluginRegInfo.")
    
    _get_ValidRadarSystems_metadata = { "name" : "ValidRadarSystems",
            "arg_types" : (),
            "marshallers" : () }
    @property
    def ValidRadarSystems(self) -> None:
        """ValidRadarSystems is a write-only property."""
        raise RuntimeError("ValidRadarSystems is a write-only property.")


    _set_ValidRadarSystems_metadata = { "name" : "ValidRadarSystems",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEStkRadarValidSystems),) }
    @ValidRadarSystems.setter
    def ValidRadarSystems(self, validRadarSystems:"AgEStkRadarValidSystems") -> None:
        """Sets the valid radar system mask."""
        return self._intf.set_property(IAgStkRadarClutterGeometryPluginRegInfo._metadata, IAgStkRadarClutterGeometryPluginRegInfo._set_ValidRadarSystems_metadata, validRadarSystems)


agcls.AgClassCatalog.add_catalog_entry("{CB97AE64-AFE6-4F78-A9E4-C56330720ECE}", IAgStkRadarClutterGeometryPluginRegInfo)
agcls.AgTypeNameMap["IAgStkRadarClutterGeometryPluginRegInfo"] = IAgStkRadarClutterGeometryPluginRegInfo

class IAgStkRadarClutterGeometryComputeParams(object):
    """Interface implemented by an object that represents the parameters to be passed into the clutter geometry plugin Compute method."""
    _num_methods = 3
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{B5C1B0B7-838F-41AA-9C2E-2BDB00390E11}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_RadarLink" : 1,
                             "get_Signal" : 2,
                             "get_ClutterPatches" : 3, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkRadarClutterGeometryComputeParams._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkRadarClutterGeometryComputeParams from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkRadarClutterGeometryComputeParams.__dict__ and type(IAgStkRadarClutterGeometryComputeParams.__dict__[attrname]) == property:
            return IAgStkRadarClutterGeometryComputeParams.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkRadarClutterGeometryComputeParams.")
    
    _get_RadarLink_metadata = { "name" : "RadarLink",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def RadarLink(self) -> "IAgStkRadarLink":
        """Gets the radar link"""
        return self._intf.get_property(IAgStkRadarClutterGeometryComputeParams._metadata, IAgStkRadarClutterGeometryComputeParams._get_RadarLink_metadata)

    _get_Signal_metadata = { "name" : "Signal",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def Signal(self) -> "IAgCRSignal":
        """Gets the transmit signal"""
        return self._intf.get_property(IAgStkRadarClutterGeometryComputeParams._metadata, IAgStkRadarClutterGeometryComputeParams._get_Signal_metadata)

    _get_ClutterPatches_metadata = { "name" : "ClutterPatches",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def ClutterPatches(self) -> "IAgStkRadarClutterPatchCollection":
        """Gets the clutter patch collection"""
        return self._intf.get_property(IAgStkRadarClutterGeometryComputeParams._metadata, IAgStkRadarClutterGeometryComputeParams._get_ClutterPatches_metadata)


agcls.AgClassCatalog.add_catalog_entry("{B5C1B0B7-838F-41AA-9C2E-2BDB00390E11}", IAgStkRadarClutterGeometryComputeParams)
agcls.AgTypeNameMap["IAgStkRadarClutterGeometryComputeParams"] = IAgStkRadarClutterGeometryComputeParams

class IAgStkRadarClutterGeometryPluginScatteringModels(object):
    """Interface implemented by an object that represents a clutter geometry plugin that can configure clutter patches with scattering models."""
    _num_methods = 1
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{8C8FE438-C3BC-4B06-A8EF-A97BA63A7C43}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_ScatteringModelComponentNames" : 1, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkRadarClutterGeometryPluginScatteringModels._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkRadarClutterGeometryPluginScatteringModels from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkRadarClutterGeometryPluginScatteringModels.__dict__ and type(IAgStkRadarClutterGeometryPluginScatteringModels.__dict__[attrname]) == property:
            return IAgStkRadarClutterGeometryPluginScatteringModels.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkRadarClutterGeometryPluginScatteringModels.")
    
    _get_ScatteringModelComponentNames_metadata = { "name" : "ScatteringModelComponentNames",
            "arg_types" : (POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg,) }
    @property
    def ScatteringModelComponentNames(self) -> list:
        """Returns the list of scattering model component names which the plugin intends to set on the returned clutter patches."""
        return self._intf.get_property(IAgStkRadarClutterGeometryPluginScatteringModels._metadata, IAgStkRadarClutterGeometryPluginScatteringModels._get_ScatteringModelComponentNames_metadata)


agcls.AgClassCatalog.add_catalog_entry("{8C8FE438-C3BC-4B06-A8EF-A97BA63A7C43}", IAgStkRadarClutterGeometryPluginScatteringModels)
agcls.AgTypeNameMap["IAgStkRadarClutterGeometryPluginScatteringModels"] = IAgStkRadarClutterGeometryPluginScatteringModels

class IAgStkRadarClutterMapComputeParams(object):
    """Interface implemented by an object that represents the parameters to be passed into the clutter map plugin Compute method."""
    _num_methods = 6
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{D58CDC19-794D-4603-87B8-40B7783F730E}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_RadarLink" : 1,
                             "get_ClutterPatch" : 2,
                             "get_Signal" : 3,
                             "ConstructPolarization" : 4,
                             "ConstructPolarizationCopy" : 5,
                             "ConstructOrthogonalPolarization" : 6, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkRadarClutterMapComputeParams._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkRadarClutterMapComputeParams from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkRadarClutterMapComputeParams.__dict__ and type(IAgStkRadarClutterMapComputeParams.__dict__[attrname]) == property:
            return IAgStkRadarClutterMapComputeParams.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkRadarClutterMapComputeParams.")
    
    _get_RadarLink_metadata = { "name" : "RadarLink",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def RadarLink(self) -> "IAgStkRadarLink":
        """Gets the radar link."""
        return self._intf.get_property(IAgStkRadarClutterMapComputeParams._metadata, IAgStkRadarClutterMapComputeParams._get_RadarLink_metadata)

    _get_ClutterPatch_metadata = { "name" : "ClutterPatch",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def ClutterPatch(self) -> "IAgStkRadarClutterPatch":
        """Gets the clutter patch."""
        return self._intf.get_property(IAgStkRadarClutterMapComputeParams._metadata, IAgStkRadarClutterMapComputeParams._get_ClutterPatch_metadata)

    _get_Signal_metadata = { "name" : "Signal",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def Signal(self) -> "IAgCRSignal":
        """Gets the signal."""
        return self._intf.get_property(IAgStkRadarClutterMapComputeParams._metadata, IAgStkRadarClutterMapComputeParams._get_Signal_metadata)

    _ConstructPolarization_metadata = { "name" : "ConstructPolarization",
            "arg_types" : (agcom.LONG, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgEnum_arg(AgECRPolarizationType), agmarshall.AgInterface_out_arg,) }
    def ConstructPolarization(self, polType:"AgECRPolarizationType") -> "IAgCRPolarization":
        """Constructs a new polarization object."""
        return self._intf.invoke(IAgStkRadarClutterMapComputeParams._metadata, IAgStkRadarClutterMapComputeParams._ConstructPolarization_metadata, polType, out_arg())

    _ConstructPolarizationCopy_metadata = { "name" : "ConstructPolarizationCopy",
            "arg_types" : (agcom.PVOID, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_in_arg("IAgCRPolarization"), agmarshall.AgInterface_out_arg,) }
    def ConstructPolarizationCopy(self, polarizationToCopy:"IAgCRPolarization") -> "IAgCRPolarization":
        """Constructs a copy of the specified polarization."""
        return self._intf.invoke(IAgStkRadarClutterMapComputeParams._metadata, IAgStkRadarClutterMapComputeParams._ConstructPolarizationCopy_metadata, polarizationToCopy, out_arg())

    _ConstructOrthogonalPolarization_metadata = { "name" : "ConstructOrthogonalPolarization",
            "arg_types" : (agcom.PVOID, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_in_arg("IAgCRPolarization"), agmarshall.AgInterface_out_arg,) }
    def ConstructOrthogonalPolarization(self, polarizationToCopy:"IAgCRPolarization") -> "IAgCRPolarization":
        """Constructs an orthogonal instance of the specified polarization."""
        return self._intf.invoke(IAgStkRadarClutterMapComputeParams._metadata, IAgStkRadarClutterMapComputeParams._ConstructOrthogonalPolarization_metadata, polarizationToCopy, out_arg())


agcls.AgClassCatalog.add_catalog_entry("{D58CDC19-794D-4603-87B8-40B7783F730E}", IAgStkRadarClutterMapComputeParams)
agcls.AgTypeNameMap["IAgStkRadarClutterMapComputeParams"] = IAgStkRadarClutterMapComputeParams

class IAgStkRadarRcsProcessSignalsParams(object):
    """Interface implemented by an object that represents the parameters to be passed into the RCS plugin ProcessSignals method."""
    _num_methods = 9
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{AF578053-2B0A-46CA-9C78-8F46C0A895D6}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "GetIncidentBodyFixedVector" : 1,
                             "get_InicidentBodyFixedVectorArray" : 2,
                             "GetReflectedBodyFixedVector" : 3,
                             "get_ReflectedBodyFixedVectorArray" : 4,
                             "get_PrimaryPolChannelSignal" : 5,
                             "get_OrthoPolChannelSignal" : 6,
                             "ConstructPolarization" : 7,
                             "ConstructPolarizationCopy" : 8,
                             "ConstructOrthogonalPolarization" : 9, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkRadarRcsProcessSignalsParams._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkRadarRcsProcessSignalsParams from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkRadarRcsProcessSignalsParams.__dict__ and type(IAgStkRadarRcsProcessSignalsParams.__dict__[attrname]) == property:
            return IAgStkRadarRcsProcessSignalsParams.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkRadarRcsProcessSignalsParams.")
    
    _GetIncidentBodyFixedVector_metadata = { "name" : "GetIncidentBodyFixedVector",
            "arg_types" : (POINTER(agcom.DOUBLE), POINTER(agcom.DOUBLE), POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg,) }
    def GetIncidentBodyFixedVector(self) -> typing.Tuple[float, float, float]:
        """Gets the incident body fixed vector."""
        return self._intf.invoke(IAgStkRadarRcsProcessSignalsParams._metadata, IAgStkRadarRcsProcessSignalsParams._GetIncidentBodyFixedVector_metadata, out_arg(), out_arg(), out_arg())

    _get_InicidentBodyFixedVectorArray_metadata = { "name" : "InicidentBodyFixedVectorArray",
            "arg_types" : (POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg,) }
    @property
    def InicidentBodyFixedVectorArray(self) -> list:
        """Gets the incident body fixed vector as an array."""
        return self._intf.get_property(IAgStkRadarRcsProcessSignalsParams._metadata, IAgStkRadarRcsProcessSignalsParams._get_InicidentBodyFixedVectorArray_metadata)

    _GetReflectedBodyFixedVector_metadata = { "name" : "GetReflectedBodyFixedVector",
            "arg_types" : (POINTER(agcom.DOUBLE), POINTER(agcom.DOUBLE), POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg,) }
    def GetReflectedBodyFixedVector(self) -> typing.Tuple[float, float, float]:
        """Gets the reflected body fixed vector."""
        return self._intf.invoke(IAgStkRadarRcsProcessSignalsParams._metadata, IAgStkRadarRcsProcessSignalsParams._GetReflectedBodyFixedVector_metadata, out_arg(), out_arg(), out_arg())

    _get_ReflectedBodyFixedVectorArray_metadata = { "name" : "ReflectedBodyFixedVectorArray",
            "arg_types" : (POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg,) }
    @property
    def ReflectedBodyFixedVectorArray(self) -> list:
        """Gets the reflected body fixed vector as an array."""
        return self._intf.get_property(IAgStkRadarRcsProcessSignalsParams._metadata, IAgStkRadarRcsProcessSignalsParams._get_ReflectedBodyFixedVectorArray_metadata)

    _get_PrimaryPolChannelSignal_metadata = { "name" : "PrimaryPolChannelSignal",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def PrimaryPolChannelSignal(self) -> "IAgCRSignal":
        """Gets the read-only signal."""
        return self._intf.get_property(IAgStkRadarRcsProcessSignalsParams._metadata, IAgStkRadarRcsProcessSignalsParams._get_PrimaryPolChannelSignal_metadata)

    _get_OrthoPolChannelSignal_metadata = { "name" : "OrthoPolChannelSignal",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def OrthoPolChannelSignal(self) -> "IAgCRSignal":
        """Gets the read-only signal."""
        return self._intf.get_property(IAgStkRadarRcsProcessSignalsParams._metadata, IAgStkRadarRcsProcessSignalsParams._get_OrthoPolChannelSignal_metadata)

    _ConstructPolarization_metadata = { "name" : "ConstructPolarization",
            "arg_types" : (agcom.LONG, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgEnum_arg(AgECRPolarizationType), agmarshall.AgInterface_out_arg,) }
    def ConstructPolarization(self, polType:"AgECRPolarizationType") -> "IAgCRPolarization":
        """Constructs a new polarization object."""
        return self._intf.invoke(IAgStkRadarRcsProcessSignalsParams._metadata, IAgStkRadarRcsProcessSignalsParams._ConstructPolarization_metadata, polType, out_arg())

    _ConstructPolarizationCopy_metadata = { "name" : "ConstructPolarizationCopy",
            "arg_types" : (agcom.PVOID, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_in_arg("IAgCRPolarization"), agmarshall.AgInterface_out_arg,) }
    def ConstructPolarizationCopy(self, polarizationToCopy:"IAgCRPolarization") -> "IAgCRPolarization":
        """Constructs a copy of the specified polarization."""
        return self._intf.invoke(IAgStkRadarRcsProcessSignalsParams._metadata, IAgStkRadarRcsProcessSignalsParams._ConstructPolarizationCopy_metadata, polarizationToCopy, out_arg())

    _ConstructOrthogonalPolarization_metadata = { "name" : "ConstructOrthogonalPolarization",
            "arg_types" : (agcom.PVOID, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_in_arg("IAgCRPolarization"), agmarshall.AgInterface_out_arg,) }
    def ConstructOrthogonalPolarization(self, polarizationToCopy:"IAgCRPolarization") -> "IAgCRPolarization":
        """Constructs an orthogonal instance of the specified polarization."""
        return self._intf.invoke(IAgStkRadarRcsProcessSignalsParams._metadata, IAgStkRadarRcsProcessSignalsParams._ConstructOrthogonalPolarization_metadata, polarizationToCopy, out_arg())


agcls.AgClassCatalog.add_catalog_entry("{AF578053-2B0A-46CA-9C78-8F46C0A895D6}", IAgStkRadarRcsProcessSignalsParams)
agcls.AgTypeNameMap["IAgStkRadarRcsProcessSignalsParams"] = IAgStkRadarRcsProcessSignalsParams

class IAgStkRadarRcsComputeParams(object):
    """Interface implemented by an object that represents the parameters to be passed into the RCS plugin Compute method."""
    _num_methods = 10
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{60F9C3C1-F3E2-4F03-906D-DB9A57EABE2C}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_Time" : 1,
                             "get_Frequency" : 2,
                             "GetIncidentBodyFixedVector" : 3,
                             "get_InicidentBodyFixedVectorArray" : 4,
                             "GetReflectedBodyFixedVector" : 5,
                             "get_ReflectedBodyFixedVectorArray" : 6,
                             "set_PrimaryChannelRcs" : 7,
                             "set_PrimaryChannelRcsCross" : 8,
                             "set_OrthoChannelRcs" : 9,
                             "set_OrthoChannelRcsCross" : 10, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkRadarRcsComputeParams._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkRadarRcsComputeParams from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkRadarRcsComputeParams.__dict__ and type(IAgStkRadarRcsComputeParams.__dict__[attrname]) == property:
            return IAgStkRadarRcsComputeParams.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkRadarRcsComputeParams.")
    
    _get_Time_metadata = { "name" : "Time",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def Time(self) -> float:
        """Gets the current time."""
        return self._intf.get_property(IAgStkRadarRcsComputeParams._metadata, IAgStkRadarRcsComputeParams._get_Time_metadata)

    _get_Frequency_metadata = { "name" : "Frequency",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def Frequency(self) -> float:
        """Gets the signal frequency."""
        return self._intf.get_property(IAgStkRadarRcsComputeParams._metadata, IAgStkRadarRcsComputeParams._get_Frequency_metadata)

    _GetIncidentBodyFixedVector_metadata = { "name" : "GetIncidentBodyFixedVector",
            "arg_types" : (POINTER(agcom.DOUBLE), POINTER(agcom.DOUBLE), POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg,) }
    def GetIncidentBodyFixedVector(self) -> typing.Tuple[float, float, float]:
        """Gets the incident body fixed vector."""
        return self._intf.invoke(IAgStkRadarRcsComputeParams._metadata, IAgStkRadarRcsComputeParams._GetIncidentBodyFixedVector_metadata, out_arg(), out_arg(), out_arg())

    _get_InicidentBodyFixedVectorArray_metadata = { "name" : "InicidentBodyFixedVectorArray",
            "arg_types" : (POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg,) }
    @property
    def InicidentBodyFixedVectorArray(self) -> list:
        """Gets the incident body fixed vector as an array."""
        return self._intf.get_property(IAgStkRadarRcsComputeParams._metadata, IAgStkRadarRcsComputeParams._get_InicidentBodyFixedVectorArray_metadata)

    _GetReflectedBodyFixedVector_metadata = { "name" : "GetReflectedBodyFixedVector",
            "arg_types" : (POINTER(agcom.DOUBLE), POINTER(agcom.DOUBLE), POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg,) }
    def GetReflectedBodyFixedVector(self) -> typing.Tuple[float, float, float]:
        """Gets the reflected body fixed vector."""
        return self._intf.invoke(IAgStkRadarRcsComputeParams._metadata, IAgStkRadarRcsComputeParams._GetReflectedBodyFixedVector_metadata, out_arg(), out_arg(), out_arg())

    _get_ReflectedBodyFixedVectorArray_metadata = { "name" : "ReflectedBodyFixedVectorArray",
            "arg_types" : (POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg,) }
    @property
    def ReflectedBodyFixedVectorArray(self) -> list:
        """Gets the reflected body fixed vector as an array."""
        return self._intf.get_property(IAgStkRadarRcsComputeParams._metadata, IAgStkRadarRcsComputeParams._get_ReflectedBodyFixedVectorArray_metadata)

    _get_PrimaryChannelRcs_metadata = { "name" : "PrimaryChannelRcs",
            "arg_types" : (),
            "marshallers" : () }
    @property
    def PrimaryChannelRcs(self) -> None:
        """PrimaryChannelRcs is a write-only property."""
        raise RuntimeError("PrimaryChannelRcs is a write-only property.")


    _set_PrimaryChannelRcs_metadata = { "name" : "PrimaryChannelRcs",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @PrimaryChannelRcs.setter
    def PrimaryChannelRcs(self, rcs:float) -> None:
        """Sets the primary channel RCS value"""
        return self._intf.set_property(IAgStkRadarRcsComputeParams._metadata, IAgStkRadarRcsComputeParams._set_PrimaryChannelRcs_metadata, rcs)

    _get_PrimaryChannelRcsCross_metadata = { "name" : "PrimaryChannelRcsCross",
            "arg_types" : (),
            "marshallers" : () }
    @property
    def PrimaryChannelRcsCross(self) -> None:
        """PrimaryChannelRcsCross is a write-only property."""
        raise RuntimeError("PrimaryChannelRcsCross is a write-only property.")


    _set_PrimaryChannelRcsCross_metadata = { "name" : "PrimaryChannelRcsCross",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @PrimaryChannelRcsCross.setter
    def PrimaryChannelRcsCross(self, rcsCross:float) -> None:
        """Sets the primary channel cross pol RCS value"""
        return self._intf.set_property(IAgStkRadarRcsComputeParams._metadata, IAgStkRadarRcsComputeParams._set_PrimaryChannelRcsCross_metadata, rcsCross)

    _get_OrthoChannelRcs_metadata = { "name" : "OrthoChannelRcs",
            "arg_types" : (),
            "marshallers" : () }
    @property
    def OrthoChannelRcs(self) -> None:
        """OrthoChannelRcs is a write-only property."""
        raise RuntimeError("OrthoChannelRcs is a write-only property.")


    _set_OrthoChannelRcs_metadata = { "name" : "OrthoChannelRcs",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @OrthoChannelRcs.setter
    def OrthoChannelRcs(self, rcs:float) -> None:
        """Sets the primary channel RCS value."""
        return self._intf.set_property(IAgStkRadarRcsComputeParams._metadata, IAgStkRadarRcsComputeParams._set_OrthoChannelRcs_metadata, rcs)

    _get_OrthoChannelRcsCross_metadata = { "name" : "OrthoChannelRcsCross",
            "arg_types" : (),
            "marshallers" : () }
    @property
    def OrthoChannelRcsCross(self) -> None:
        """OrthoChannelRcsCross is a write-only property."""
        raise RuntimeError("OrthoChannelRcsCross is a write-only property.")


    _set_OrthoChannelRcsCross_metadata = { "name" : "OrthoChannelRcsCross",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @OrthoChannelRcsCross.setter
    def OrthoChannelRcsCross(self, rcsCross:float) -> None:
        """Sets the primary channel cross pol RCS value."""
        return self._intf.set_property(IAgStkRadarRcsComputeParams._metadata, IAgStkRadarRcsComputeParams._set_OrthoChannelRcsCross_metadata, rcsCross)


agcls.AgClassCatalog.add_catalog_entry("{60F9C3C1-F3E2-4F03-906D-DB9A57EABE2C}", IAgStkRadarRcsComputeParams)
agcls.AgTypeNameMap["IAgStkRadarRcsComputeParams"] = IAgStkRadarRcsComputeParams

class IAgStkRadarFixedPRFProbabilityDetectionComputeParams(object):
    """Interface implemented by an object that represents the parameters to be passed into the Probability of Detection CFAR plugin Compute method."""
    _num_methods = 9
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{0D35F146-2F96-4486-BD49-0C69BA138052}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_SinglePulseSignaltoNoiseRatio" : 1,
                             "get_IntegratedSignaltoNoiseRatio" : 2,
                             "get_CoherentIntegration" : 3,
                             "get_NoisePower" : 4,
                             "get_NumberOfIntegratedPulses" : 5,
                             "get_ReceivedRadarSignal" : 6,
                             "get_ClutterSignals" : 7,
                             "SetProbabilityOfDetectionSinglePulse" : 8,
                             "SetProbabilityOfDetectionIntegrated" : 9, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkRadarFixedPRFProbabilityDetectionComputeParams._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkRadarFixedPRFProbabilityDetectionComputeParams from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkRadarFixedPRFProbabilityDetectionComputeParams.__dict__ and type(IAgStkRadarFixedPRFProbabilityDetectionComputeParams.__dict__[attrname]) == property:
            return IAgStkRadarFixedPRFProbabilityDetectionComputeParams.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkRadarFixedPRFProbabilityDetectionComputeParams.")
    
    _get_SinglePulseSignaltoNoiseRatio_metadata = { "name" : "SinglePulseSignaltoNoiseRatio",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def SinglePulseSignaltoNoiseRatio(self) -> float:
        """Gets the radar link single pulse signal-to-noise ratio value."""
        return self._intf.get_property(IAgStkRadarFixedPRFProbabilityDetectionComputeParams._metadata, IAgStkRadarFixedPRFProbabilityDetectionComputeParams._get_SinglePulseSignaltoNoiseRatio_metadata)

    _get_IntegratedSignaltoNoiseRatio_metadata = { "name" : "IntegratedSignaltoNoiseRatio",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def IntegratedSignaltoNoiseRatio(self) -> float:
        """Gets the radar link integrated signal-to-noise ratio value."""
        return self._intf.get_property(IAgStkRadarFixedPRFProbabilityDetectionComputeParams._metadata, IAgStkRadarFixedPRFProbabilityDetectionComputeParams._get_IntegratedSignaltoNoiseRatio_metadata)

    _get_CoherentIntegration_metadata = { "name" : "CoherentIntegration",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def CoherentIntegration(self) -> bool:
        """Gets a flag indicating whether or not the signal-to-noise ratio was integrated coherently."""
        return self._intf.get_property(IAgStkRadarFixedPRFProbabilityDetectionComputeParams._metadata, IAgStkRadarFixedPRFProbabilityDetectionComputeParams._get_CoherentIntegration_metadata)

    _get_NoisePower_metadata = { "name" : "NoisePower",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def NoisePower(self) -> float:
        """Gets the radar receiver noise power."""
        return self._intf.get_property(IAgStkRadarFixedPRFProbabilityDetectionComputeParams._metadata, IAgStkRadarFixedPRFProbabilityDetectionComputeParams._get_NoisePower_metadata)

    _get_NumberOfIntegratedPulses_metadata = { "name" : "NumberOfIntegratedPulses",
            "arg_types" : (POINTER(agcom.INT),),
            "marshallers" : (agmarshall.INT_arg,) }
    @property
    def NumberOfIntegratedPulses(self) -> int:
        """Gets the radar link number of pulse integrated."""
        return self._intf.get_property(IAgStkRadarFixedPRFProbabilityDetectionComputeParams._metadata, IAgStkRadarFixedPRFProbabilityDetectionComputeParams._get_NumberOfIntegratedPulses_metadata)

    _get_ReceivedRadarSignal_metadata = { "name" : "ReceivedRadarSignal",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def ReceivedRadarSignal(self) -> "IAgCRSignal":
        """Gets the radar link signal data."""
        return self._intf.get_property(IAgStkRadarFixedPRFProbabilityDetectionComputeParams._metadata, IAgStkRadarFixedPRFProbabilityDetectionComputeParams._get_ReceivedRadarSignal_metadata)

    _get_ClutterSignals_metadata = { "name" : "ClutterSignals",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def ClutterSignals(self) -> "IAgCRSignalCollection":
        """Gets the radar link clutter signal collection."""
        return self._intf.get_property(IAgStkRadarFixedPRFProbabilityDetectionComputeParams._metadata, IAgStkRadarFixedPRFProbabilityDetectionComputeParams._get_ClutterSignals_metadata)

    _SetProbabilityOfDetectionSinglePulse_metadata = { "name" : "SetProbabilityOfDetectionSinglePulse",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    def SetProbabilityOfDetectionSinglePulse(self, probDetSinglePulse:float) -> None:
        """Sets the probability of detection single pulse value."""
        return self._intf.invoke(IAgStkRadarFixedPRFProbabilityDetectionComputeParams._metadata, IAgStkRadarFixedPRFProbabilityDetectionComputeParams._SetProbabilityOfDetectionSinglePulse_metadata, probDetSinglePulse)

    _SetProbabilityOfDetectionIntegrated_metadata = { "name" : "SetProbabilityOfDetectionIntegrated",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    def SetProbabilityOfDetectionIntegrated(self, probDetIntegrated:float) -> None:
        """Sets the integrated probability of detection value."""
        return self._intf.invoke(IAgStkRadarFixedPRFProbabilityDetectionComputeParams._metadata, IAgStkRadarFixedPRFProbabilityDetectionComputeParams._SetProbabilityOfDetectionIntegrated_metadata, probDetIntegrated)


agcls.AgClassCatalog.add_catalog_entry("{0D35F146-2F96-4486-BD49-0C69BA138052}", IAgStkRadarFixedPRFProbabilityDetectionComputeParams)
agcls.AgTypeNameMap["IAgStkRadarFixedPRFProbabilityDetectionComputeParams"] = IAgStkRadarFixedPRFProbabilityDetectionComputeParams

class IAgStkRadarFixedPRFProbabilityDetectionPlugin(object):
    """Interface implemented by an object that represents a Probability of Detection CFAR plugin."""
    _num_methods = 8
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{AD4F24AB-0BEA-4EB2-8A07-F2C674846A3E}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "Initialize" : 1,
                             "PreCompute" : 2,
                             "Compute" : 3,
                             "ComputeJamming" : 4,
                             "ComputeJammingClutter" : 5,
                             "PostCompute" : 6,
                             "Free" : 7,
                             "get_NumberOfConstantFalseAlarmRateCells" : 8, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkRadarFixedPRFProbabilityDetectionPlugin._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkRadarFixedPRFProbabilityDetectionPlugin from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkRadarFixedPRFProbabilityDetectionPlugin.__dict__ and type(IAgStkRadarFixedPRFProbabilityDetectionPlugin.__dict__[attrname]) == property:
            return IAgStkRadarFixedPRFProbabilityDetectionPlugin.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkRadarFixedPRFProbabilityDetectionPlugin.")
    
    _Initialize_metadata = { "name" : "Initialize",
            "arg_types" : (agcom.PVOID,),
            "marshallers" : (agmarshall.AgInterface_in_arg("IAgUtPluginSite"),) }
    def Initialize(self, site:"IAgUtPluginSite") -> None:
        """Initializes the plugin with the plugin site."""
        return self._intf.invoke(IAgStkRadarFixedPRFProbabilityDetectionPlugin._metadata, IAgStkRadarFixedPRFProbabilityDetectionPlugin._Initialize_metadata, site)

    _PreCompute_metadata = { "name" : "PreCompute",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    def PreCompute(self) -> bool:
        """Probability of Detection CFAR plugin pre-compute."""
        return self._intf.invoke(IAgStkRadarFixedPRFProbabilityDetectionPlugin._metadata, IAgStkRadarFixedPRFProbabilityDetectionPlugin._PreCompute_metadata, out_arg())

    _Compute_metadata = { "name" : "Compute",
            "arg_types" : (agcom.PVOID,),
            "marshallers" : (agmarshall.AgInterface_in_arg("IAgStkRadarFixedPRFProbabilityDetectionComputeParams"),) }
    def Compute(self, computeParams:"IAgStkRadarFixedPRFProbabilityDetectionComputeParams") -> None:
        """Probability of Detection CFAR plugin compute with SNR."""
        return self._intf.invoke(IAgStkRadarFixedPRFProbabilityDetectionPlugin._metadata, IAgStkRadarFixedPRFProbabilityDetectionPlugin._Compute_metadata, computeParams)

    _ComputeJamming_metadata = { "name" : "ComputeJamming",
            "arg_types" : (agcom.PVOID,),
            "marshallers" : (agmarshall.AgInterface_in_arg("IAgStkRadarFixedPRFProbabilityDetectionComputeParams"),) }
    def ComputeJamming(self, computeParams:"IAgStkRadarFixedPRFProbabilityDetectionComputeParams") -> None:
        """Probability of Detection CFAR plugin compute with S/(N+J)."""
        return self._intf.invoke(IAgStkRadarFixedPRFProbabilityDetectionPlugin._metadata, IAgStkRadarFixedPRFProbabilityDetectionPlugin._ComputeJamming_metadata, computeParams)

    _ComputeJammingClutter_metadata = { "name" : "ComputeJammingClutter",
            "arg_types" : (agcom.PVOID,),
            "marshallers" : (agmarshall.AgInterface_in_arg("IAgStkRadarFixedPRFProbabilityDetectionComputeParams"),) }
    def ComputeJammingClutter(self, computeParams:"IAgStkRadarFixedPRFProbabilityDetectionComputeParams") -> None:
        """Probability of Detection CFAR plugin compute with S/(N+J+C)."""
        return self._intf.invoke(IAgStkRadarFixedPRFProbabilityDetectionPlugin._metadata, IAgStkRadarFixedPRFProbabilityDetectionPlugin._ComputeJammingClutter_metadata, computeParams)

    _PostCompute_metadata = { "name" : "PostCompute",
            "arg_types" : (),
            "marshallers" : () }
    def PostCompute(self) -> None:
        """Probability of Detection CFAR plugin post-compute."""
        return self._intf.invoke(IAgStkRadarFixedPRFProbabilityDetectionPlugin._metadata, IAgStkRadarFixedPRFProbabilityDetectionPlugin._PostCompute_metadata, )

    _Free_metadata = { "name" : "Free",
            "arg_types" : (),
            "marshallers" : () }
    def Free(self) -> None:
        """Free Probability of Detection CFAR plugin."""
        return self._intf.invoke(IAgStkRadarFixedPRFProbabilityDetectionPlugin._metadata, IAgStkRadarFixedPRFProbabilityDetectionPlugin._Free_metadata, )

    _get_NumberOfConstantFalseAlarmRateCells_metadata = { "name" : "NumberOfConstantFalseAlarmRateCells",
            "arg_types" : (POINTER(agcom.INT),),
            "marshallers" : (agmarshall.INT_arg,) }
    @property
    def NumberOfConstantFalseAlarmRateCells(self) -> int:
        """Gets the number of constant false alarm rate cells."""
        return self._intf.get_property(IAgStkRadarFixedPRFProbabilityDetectionPlugin._metadata, IAgStkRadarFixedPRFProbabilityDetectionPlugin._get_NumberOfConstantFalseAlarmRateCells_metadata)


agcls.AgClassCatalog.add_catalog_entry("{AD4F24AB-0BEA-4EB2-8A07-F2C674846A3E}", IAgStkRadarFixedPRFProbabilityDetectionPlugin)
agcls.AgTypeNameMap["IAgStkRadarFixedPRFProbabilityDetectionPlugin"] = IAgStkRadarFixedPRFProbabilityDetectionPlugin

class IAgSTKRadarSTCAttenComputeParams(object):
    """Interface implemented by an object that represents the parameters to be passed into the STC plugin Compute method."""
    _num_methods = 8
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{48F46A9F-659A-448A-8681-1FB26BD6749A}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_Time" : 1,
                             "get_Frequency" : 2,
                             "get_Range" : 3,
                             "get_AzimuthAngle" : 4,
                             "get_ElevationAngle" : 5,
                             "GetDirection" : 6,
                             "get_DirectionArray" : 7,
                             "SetSTCAttenuation" : 8, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgSTKRadarSTCAttenComputeParams._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgSTKRadarSTCAttenComputeParams from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgSTKRadarSTCAttenComputeParams.__dict__ and type(IAgSTKRadarSTCAttenComputeParams.__dict__[attrname]) == property:
            return IAgSTKRadarSTCAttenComputeParams.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgSTKRadarSTCAttenComputeParams.")
    
    _get_Time_metadata = { "name" : "Time",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def Time(self) -> float:
        """Gets the time value."""
        return self._intf.get_property(IAgSTKRadarSTCAttenComputeParams._metadata, IAgSTKRadarSTCAttenComputeParams._get_Time_metadata)

    _get_Frequency_metadata = { "name" : "Frequency",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def Frequency(self) -> float:
        """Gets the frequency value."""
        return self._intf.get_property(IAgSTKRadarSTCAttenComputeParams._metadata, IAgSTKRadarSTCAttenComputeParams._get_Frequency_metadata)

    _get_Range_metadata = { "name" : "Range",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def Range(self) -> float:
        """Gets the radar link range value."""
        return self._intf.get_property(IAgSTKRadarSTCAttenComputeParams._metadata, IAgSTKRadarSTCAttenComputeParams._get_Range_metadata)

    _get_AzimuthAngle_metadata = { "name" : "AzimuthAngle",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def AzimuthAngle(self) -> float:
        """Gets the radar link Azimuth angle value."""
        return self._intf.get_property(IAgSTKRadarSTCAttenComputeParams._metadata, IAgSTKRadarSTCAttenComputeParams._get_AzimuthAngle_metadata)

    _get_ElevationAngle_metadata = { "name" : "ElevationAngle",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def ElevationAngle(self) -> float:
        """Gets the radar link Elevation Angle value."""
        return self._intf.get_property(IAgSTKRadarSTCAttenComputeParams._metadata, IAgSTKRadarSTCAttenComputeParams._get_ElevationAngle_metadata)

    _GetDirection_metadata = { "name" : "GetDirection",
            "arg_types" : (POINTER(agcom.DOUBLE), POINTER(agcom.DOUBLE), POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg,) }
    def GetDirection(self) -> typing.Tuple[float, float, float]:
        """Gets the direction vector in the body fixed frame."""
        return self._intf.invoke(IAgSTKRadarSTCAttenComputeParams._metadata, IAgSTKRadarSTCAttenComputeParams._GetDirection_metadata, out_arg(), out_arg(), out_arg())

    _get_DirectionArray_metadata = { "name" : "DirectionArray",
            "arg_types" : (POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg,) }
    @property
    def DirectionArray(self) -> list:
        """Gets the direction vector in the body fixed frame as an array."""
        return self._intf.get_property(IAgSTKRadarSTCAttenComputeParams._metadata, IAgSTKRadarSTCAttenComputeParams._get_DirectionArray_metadata)

    _SetSTCAttenuation_metadata = { "name" : "SetSTCAttenuation",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    def SetSTCAttenuation(self, sTCAttenuation:float) -> None:
        """Sets the STC attenuation value."""
        return self._intf.invoke(IAgSTKRadarSTCAttenComputeParams._metadata, IAgSTKRadarSTCAttenComputeParams._SetSTCAttenuation_metadata, sTCAttenuation)


agcls.AgClassCatalog.add_catalog_entry("{48F46A9F-659A-448A-8681-1FB26BD6749A}", IAgSTKRadarSTCAttenComputeParams)
agcls.AgTypeNameMap["IAgSTKRadarSTCAttenComputeParams"] = IAgSTKRadarSTCAttenComputeParams

class IAgSTKRadarSTCAttenPlugin(object):
    """Interface implemented by an object that represents a STC plugin."""
    _num_methods = 5
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{0532400A-A1A2-4E2B-BF49-60D7DA3E4750}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "Initialize" : 1,
                             "PreCompute" : 2,
                             "ComputeAttenuation" : 3,
                             "PostCompute" : 4,
                             "Free" : 5, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgSTKRadarSTCAttenPlugin._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgSTKRadarSTCAttenPlugin from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgSTKRadarSTCAttenPlugin.__dict__ and type(IAgSTKRadarSTCAttenPlugin.__dict__[attrname]) == property:
            return IAgSTKRadarSTCAttenPlugin.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgSTKRadarSTCAttenPlugin.")
    
    _Initialize_metadata = { "name" : "Initialize",
            "arg_types" : (agcom.PVOID,),
            "marshallers" : (agmarshall.AgInterface_in_arg("IAgUtPluginSite"),) }
    def Initialize(self, site:"IAgUtPluginSite") -> None:
        """Initializes the plugin with the plugin site."""
        return self._intf.invoke(IAgSTKRadarSTCAttenPlugin._metadata, IAgSTKRadarSTCAttenPlugin._Initialize_metadata, site)

    _PreCompute_metadata = { "name" : "PreCompute",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    def PreCompute(self) -> bool:
        """STC plugin pre-compute."""
        return self._intf.invoke(IAgSTKRadarSTCAttenPlugin._metadata, IAgSTKRadarSTCAttenPlugin._PreCompute_metadata, out_arg())

    _ComputeAttenuation_metadata = { "name" : "ComputeAttenuation",
            "arg_types" : (agcom.PVOID,),
            "marshallers" : (agmarshall.AgInterface_in_arg("IAgSTKRadarSTCAttenComputeParams"),) }
    def ComputeAttenuation(self, computeParams:"IAgSTKRadarSTCAttenComputeParams") -> None:
        """STC plugin compute attenuation."""
        return self._intf.invoke(IAgSTKRadarSTCAttenPlugin._metadata, IAgSTKRadarSTCAttenPlugin._ComputeAttenuation_metadata, computeParams)

    _PostCompute_metadata = { "name" : "PostCompute",
            "arg_types" : (),
            "marshallers" : () }
    def PostCompute(self) -> None:
        """STC plugin post-compute."""
        return self._intf.invoke(IAgSTKRadarSTCAttenPlugin._metadata, IAgSTKRadarSTCAttenPlugin._PostCompute_metadata, )

    _Free_metadata = { "name" : "Free",
            "arg_types" : (),
            "marshallers" : () }
    def Free(self) -> None:
        """Free STC plugin."""
        return self._intf.invoke(IAgSTKRadarSTCAttenPlugin._metadata, IAgSTKRadarSTCAttenPlugin._Free_metadata, )


agcls.AgClassCatalog.add_catalog_entry("{0532400A-A1A2-4E2B-BF49-60D7DA3E4750}", IAgSTKRadarSTCAttenPlugin)
agcls.AgTypeNameMap["IAgSTKRadarSTCAttenPlugin"] = IAgSTKRadarSTCAttenPlugin


class IAgStkRadarClutterGeometryPlugin(object):
    """
    Interface implemented by an object that represents a clutter geometry plugin.
    This interface may be inherited from to assist in development of the plugin.  All methods should be overridden.
    """
    def Register(self, registrationInfo:"IAgStkRadarClutterGeometryPluginRegInfo") -> None:
        """Registers the plugin with the application."""
        raise STKPluginMethodNotImplementedError("Register was not implemented.")

    def Initialize(self, site:"IAgUtPluginSite") -> None:
        """Initializes the plugin with the plugin site."""
        raise STKPluginMethodNotImplementedError("Initialize was not implemented.")

    def PreCompute(self) -> bool:
        """Clutter geometry plugin pre-compute."""
        raise STKPluginMethodNotImplementedError("PreCompute was not implemented.")

    def Compute(self, computeParams:"IAgStkRadarClutterGeometryComputeParams") -> None:
        """Clutter geometry plugin compute."""
        raise STKPluginMethodNotImplementedError("Compute was not implemented.")

    def PostCompute(self) -> None:
        """Clutter geometry plugin post-compute."""
        raise STKPluginMethodNotImplementedError("PostCompute was not implemented.")

    def Free(self) -> None:
        """Free clutter geometry plugin."""
        raise STKPluginMethodNotImplementedError("Free was not implemented.")


class IAgStkRadarClutterMapPlugin(object):
    """
    Interface implemented by an object that represents a clutter map plugin.
    This interface may be inherited from to assist in development of the plugin.  All methods should be overridden.
    """
    def Initialize(self, site:"IAgUtPluginSite") -> None:
        """Initializes the plugin with the plugin site."""
        raise STKPluginMethodNotImplementedError("Initialize was not implemented.")

    def PreCompute(self) -> bool:
        """Clutter map plugin pre-compute."""
        raise STKPluginMethodNotImplementedError("PreCompute was not implemented.")

    def Compute(self, computeParams:"IAgStkRadarClutterMapComputeParams") -> None:
        """Clutter map plugin compute."""
        raise STKPluginMethodNotImplementedError("Compute was not implemented.")

    def PostCompute(self) -> None:
        """Clutter map plugin post-compute."""
        raise STKPluginMethodNotImplementedError("PostCompute was not implemented.")

    def Free(self) -> None:
        """Free clutter map plugin."""
        raise STKPluginMethodNotImplementedError("Free was not implemented.")


class IAgStkRadarRcsPlugin(object):
    """
    Interface implemented by an object that represents an RCS plugin.
    This interface may be inherited from to assist in development of the plugin.  All methods should be overridden.
    """
    def Initialize(self, site:"IAgUtPluginSite") -> None:
        """Initializes the plugin with the plugin site."""
        raise STKPluginMethodNotImplementedError("Initialize was not implemented.")

    def PreCompute(self) -> bool:
        """RCS plugin pre-compute."""
        raise STKPluginMethodNotImplementedError("PreCompute was not implemented.")

    def ProcessSignals(self, processSignalsParams:"IAgStkRadarRcsProcessSignalsParams") -> None:
        """Processes the incident primary and orthogonal channel signals."""
        raise STKPluginMethodNotImplementedError("ProcessSignals was not implemented.")

    def Compute(self, computeRcsParams:"IAgStkRadarRcsComputeParams") -> None:
        """RCS plugin compute."""
        raise STKPluginMethodNotImplementedError("Compute was not implemented.")

    def PostCompute(self) -> None:
        """RCS plugin post-compute"""
        raise STKPluginMethodNotImplementedError("PostCompute was not implemented.")

    def Free(self) -> None:
        """Free RCS plugin."""
        raise STKPluginMethodNotImplementedError("Free was not implemented.")

    def IsDynamic(self) -> bool:
        """Gets a flag indicating whether or not the radar cross section is dynamic."""
        raise STKPluginMethodNotImplementedError("IsDynamic was not implemented.")




class AgCRPolarizationCircular(IAgCRPolarization):
    """The CoClass for the IAgCRPolarization interface."""
    def __init__(self, sourceObject=None):
        IAgCRPolarization.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgCRPolarization._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgCRPolarization._get_property(self, attrname) is not None: found_prop = IAgCRPolarization._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgCRPolarizationCircular.")

agcls.AgClassCatalog.add_catalog_entry("{EE15FC3E-E00B-4577-934F-110FBF33EBFE}", AgCRPolarizationCircular)


class AgCRPolarizationLinear(IAgCRPolarizationLinear, IAgCRPolarization):
    """The CoClass for the IAgCRPolarization and IAgCRPolarizationLinear interfaces."""
    def __init__(self, sourceObject=None):
        IAgCRPolarizationLinear.__init__(self, sourceObject)
        IAgCRPolarization.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgCRPolarizationLinear._private_init(self, intf)
        IAgCRPolarization._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgCRPolarizationLinear._get_property(self, attrname) is not None: found_prop = IAgCRPolarizationLinear._get_property(self, attrname)
        if IAgCRPolarization._get_property(self, attrname) is not None: found_prop = IAgCRPolarization._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgCRPolarizationLinear.")

agcls.AgClassCatalog.add_catalog_entry("{3663C161-5F87-4587-A9B8-2B9FECB02E98}", AgCRPolarizationLinear)


class AgCRPolarizationElliptical(IAgCRPolarizationElliptical, IAgCRPolarization):
    """The CoClass for the IAgCRPolarization and IAgCRPolarizationElliptical interfaces."""
    def __init__(self, sourceObject=None):
        IAgCRPolarizationElliptical.__init__(self, sourceObject)
        IAgCRPolarization.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgCRPolarizationElliptical._private_init(self, intf)
        IAgCRPolarization._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgCRPolarizationElliptical._get_property(self, attrname) is not None: found_prop = IAgCRPolarizationElliptical._get_property(self, attrname)
        if IAgCRPolarization._get_property(self, attrname) is not None: found_prop = IAgCRPolarization._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgCRPolarizationElliptical.")

agcls.AgClassCatalog.add_catalog_entry("{04110C7D-A709-4DE1-BB50-655AD9C68011}", AgCRPolarizationElliptical)


class AgStkRadarCBIntersectComputeParams(IAgStkRadarCBIntersectComputeParams):
    """The CoClass for the IAgStkRadarCBIntersectComputeParams interface."""
    def __init__(self, sourceObject=None):
        IAgStkRadarCBIntersectComputeParams.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkRadarCBIntersectComputeParams._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkRadarCBIntersectComputeParams._get_property(self, attrname) is not None: found_prop = IAgStkRadarCBIntersectComputeParams._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkRadarCBIntersectComputeParams.")

agcls.AgClassCatalog.add_catalog_entry("{1FC478C8-D340-4B11-B7B0-80F4171EE2BC}", AgStkRadarCBIntersectComputeParams)


class AgStkRadarCBIntersectComputeResult(IAgStkRadarCBIntersectComputeResult):
    """The CoClass for the IAgStkRadarCBIntersectComputeResult interface."""
    def __init__(self, sourceObject=None):
        IAgStkRadarCBIntersectComputeResult.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkRadarCBIntersectComputeResult._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkRadarCBIntersectComputeResult._get_property(self, attrname) is not None: found_prop = IAgStkRadarCBIntersectComputeResult._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkRadarCBIntersectComputeResult.")

agcls.AgClassCatalog.add_catalog_entry("{BB7B137F-71C2-4688-BE1F-1D27DC93B0AD}", AgStkRadarCBIntersectComputeResult)


class AgStkRadarPosVelProvider(IAgStkRadarPosVelProvider):
    """The CoClass for the IAgStkRadarPosVelProvider interface."""
    def __init__(self, sourceObject=None):
        IAgStkRadarPosVelProvider.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkRadarPosVelProvider._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkRadarPosVelProvider._get_property(self, attrname) is not None: found_prop = IAgStkRadarPosVelProvider._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkRadarPosVelProvider.")

agcls.AgClassCatalog.add_catalog_entry("{A5882D19-A0D0-454B-88FD-014D5E1BA458}", AgStkRadarPosVelProvider)


class AgStkRadarPositionProvider(IAgStkRadarPosVelProvider):
    """The CoClass for the IAgStkRadarPosVelProvider interface."""
    def __init__(self, sourceObject=None):
        IAgStkRadarPosVelProvider.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkRadarPosVelProvider._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkRadarPosVelProvider._get_property(self, attrname) is not None: found_prop = IAgStkRadarPosVelProvider._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkRadarPositionProvider.")

agcls.AgClassCatalog.add_catalog_entry("{D5E752F4-8940-47D5-86B4-637F9A4C53FA}", AgStkRadarPositionProvider)


class AgStkRadarLinkGeometry(IAgStkRadarLinkGeometry):
    """The CoClass for the IAgStkRadarLinkGeometry interface."""
    def __init__(self, sourceObject=None):
        IAgStkRadarLinkGeometry.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkRadarLinkGeometry._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkRadarLinkGeometry._get_property(self, attrname) is not None: found_prop = IAgStkRadarLinkGeometry._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkRadarLinkGeometry.")

agcls.AgClassCatalog.add_catalog_entry("{ED5DC287-DC5B-4C93-9DFA-861B2B00F110}", AgStkRadarLinkGeometry)


class AgStkRadarLink(IAgStkRadarLink):
    """The CoClass for the IAgStkRadarLink interface."""
    def __init__(self, sourceObject=None):
        IAgStkRadarLink.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkRadarLink._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkRadarLink._get_property(self, attrname) is not None: found_prop = IAgStkRadarLink._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkRadarLink.")

agcls.AgClassCatalog.add_catalog_entry("{EE063CAD-F798-43B2-A583-20332DF10FA1}", AgStkRadarLink)


class AgStkRadarSignal(IAgCRSignal, IAgStkRadarSignal):
    """The CoClass for the IAgCRSignal and IAgStkRadarSignal interfaces."""
    def __init__(self, sourceObject=None):
        IAgCRSignal.__init__(self, sourceObject)
        IAgStkRadarSignal.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgCRSignal._private_init(self, intf)
        IAgStkRadarSignal._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgCRSignal._get_property(self, attrname) is not None: found_prop = IAgCRSignal._get_property(self, attrname)
        if IAgStkRadarSignal._get_property(self, attrname) is not None: found_prop = IAgStkRadarSignal._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkRadarSignal.")

agcls.AgClassCatalog.add_catalog_entry("{461900CE-31A8-4237-B260-688BC481B2F0}", AgStkRadarSignal)


class AgStkRadarClutterPatch(IAgStkRadarClutterPatch):
    """The CoClass for the IAgStkRadarClutterPatch interface."""
    def __init__(self, sourceObject=None):
        IAgStkRadarClutterPatch.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkRadarClutterPatch._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkRadarClutterPatch._get_property(self, attrname) is not None: found_prop = IAgStkRadarClutterPatch._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkRadarClutterPatch.")

agcls.AgClassCatalog.add_catalog_entry("{605B5F91-308F-46D2-8D91-E5487F054101}", AgStkRadarClutterPatch)


class AgStkRadarClutterPatchCollection(IAgStkRadarClutterPatchCollection):
    """The CoClass for the IAgStkRadarClutterPatchCollection interface."""
    def __init__(self, sourceObject=None):
        IAgStkRadarClutterPatchCollection.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkRadarClutterPatchCollection._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkRadarClutterPatchCollection._get_property(self, attrname) is not None: found_prop = IAgStkRadarClutterPatchCollection._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkRadarClutterPatchCollection.")

agcls.AgClassCatalog.add_catalog_entry("{5EE3E6D7-B6C9-4A35-BAAE-932306509C89}", AgStkRadarClutterPatchCollection)


class AgStkRadarClutterGeometryPluginRegInfo(IAgStkRadarClutterGeometryPluginRegInfo):
    """The CoClass for the IAgStkRadarClutterGeometryPluginRegInfo interface."""
    def __init__(self, sourceObject=None):
        IAgStkRadarClutterGeometryPluginRegInfo.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkRadarClutterGeometryPluginRegInfo._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkRadarClutterGeometryPluginRegInfo._get_property(self, attrname) is not None: found_prop = IAgStkRadarClutterGeometryPluginRegInfo._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkRadarClutterGeometryPluginRegInfo.")

agcls.AgClassCatalog.add_catalog_entry("{33D73A96-7B01-4BA2-AF40-F10F3602057E}", AgStkRadarClutterGeometryPluginRegInfo)


class AgStkRadarClutterGeometryComputeParams(IAgStkRadarClutterGeometryComputeParams):
    """The CoClass for the IAgStkRadarClutterGeometryComputeParams interface."""
    def __init__(self, sourceObject=None):
        IAgStkRadarClutterGeometryComputeParams.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkRadarClutterGeometryComputeParams._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkRadarClutterGeometryComputeParams._get_property(self, attrname) is not None: found_prop = IAgStkRadarClutterGeometryComputeParams._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkRadarClutterGeometryComputeParams.")

agcls.AgClassCatalog.add_catalog_entry("{B2AE8483-9895-4482-B5CF-5EC567B746F7}", AgStkRadarClutterGeometryComputeParams)


class AgStkRadarClutterMapComputeParams(IAgStkRadarClutterMapComputeParams):
    """The CoClass for the IAgStkRadarClutterMapComputeParams interface."""
    def __init__(self, sourceObject=None):
        IAgStkRadarClutterMapComputeParams.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkRadarClutterMapComputeParams._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkRadarClutterMapComputeParams._get_property(self, attrname) is not None: found_prop = IAgStkRadarClutterMapComputeParams._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkRadarClutterMapComputeParams.")

agcls.AgClassCatalog.add_catalog_entry("{41DB3BD4-BAF1-4BDC-8DC2-A9D4ABC94B99}", AgStkRadarClutterMapComputeParams)


class AgStkRadarRcsProcessSignalsParams(IAgStkRadarRcsProcessSignalsParams):
    """The CoClass for the IAgStkRadarRcsProcessSignalsParams interface."""
    def __init__(self, sourceObject=None):
        IAgStkRadarRcsProcessSignalsParams.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkRadarRcsProcessSignalsParams._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkRadarRcsProcessSignalsParams._get_property(self, attrname) is not None: found_prop = IAgStkRadarRcsProcessSignalsParams._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkRadarRcsProcessSignalsParams.")

agcls.AgClassCatalog.add_catalog_entry("{A7254B1F-2D04-4DEB-B59F-6406E38EADB9}", AgStkRadarRcsProcessSignalsParams)


class AgStkRadarRcsComputeParams(IAgStkRadarRcsComputeParams):
    """The CoClass for the IAgStkRadarRcsComputeParams interface."""
    def __init__(self, sourceObject=None):
        IAgStkRadarRcsComputeParams.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkRadarRcsComputeParams._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkRadarRcsComputeParams._get_property(self, attrname) is not None: found_prop = IAgStkRadarRcsComputeParams._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkRadarRcsComputeParams.")

agcls.AgClassCatalog.add_catalog_entry("{AE5048AB-6D17-4154-BCE3-CD988ED09B25}", AgStkRadarRcsComputeParams)


class AgStkRadarFixedPRFProbabilityDetectionComputeParams(IAgStkRadarFixedPRFProbabilityDetectionComputeParams):
    """The CoClass for the IAgStkRadarFixedPRFProbabilityDetectionComputeParams interface."""
    def __init__(self, sourceObject=None):
        IAgStkRadarFixedPRFProbabilityDetectionComputeParams.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkRadarFixedPRFProbabilityDetectionComputeParams._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkRadarFixedPRFProbabilityDetectionComputeParams._get_property(self, attrname) is not None: found_prop = IAgStkRadarFixedPRFProbabilityDetectionComputeParams._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkRadarFixedPRFProbabilityDetectionComputeParams.")

agcls.AgClassCatalog.add_catalog_entry("{86928B61-6B95-4ED2-8B5E-BB34ABF270D0}", AgStkRadarFixedPRFProbabilityDetectionComputeParams)


class AgStkRadarSTCAttenComputeParams(IAgSTKRadarSTCAttenComputeParams):
    """The CoClass for the IAgSTKRadarSTCAttenComputeParams interface."""
    def __init__(self, sourceObject=None):
        IAgSTKRadarSTCAttenComputeParams.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgSTKRadarSTCAttenComputeParams._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgSTKRadarSTCAttenComputeParams._get_property(self, attrname) is not None: found_prop = IAgSTKRadarSTCAttenComputeParams._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkRadarSTCAttenComputeParams.")

agcls.AgClassCatalog.add_catalog_entry("{0233AA84-7C1A-49AB-837A-2E8CA5C92CC3}", AgStkRadarSTCAttenComputeParams)



################################################################################
#          Copyright 2020-2023, Ansys Government Initiatives
################################################################################
