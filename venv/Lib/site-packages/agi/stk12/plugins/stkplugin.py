################################################################################
#          Copyright 2020-2023, Ansys Government Initiatives
################################################################################ 

__all__ = ["AgGatorPluginSite", "AgStkPluginSite", "IAgGatorPluginSite", "IAgStkPluginSite"]

import typing

from ctypes   import byref, POINTER
from datetime import datetime
from enum     import IntEnum, IntFlag

from ..internal  import comutil          as agcom
from ..internal  import coclassutil      as agcls
from ..internal  import marshall         as agmarshall
from ..internal  import dataanalysisutil as agdata
from ..utilities import colors           as agcolor
from ..internal.comutil     import IUnknown, IDispatch, IPictureDisp
from ..internal.apiutil     import interface_proxy, enumerator_proxy, out_arg
from ..internal.eventutil   import *
from ..utilities.exceptions import *

from ..plugins.attrautomation import *
from ..plugins.utplugin import *
from ..plugins.crdnplugin import *
from ..plugins.gatorplugin import *


def _raise_uninitialized_error(*args):
    raise STKRuntimeError("Valid STK object model classes are returned from STK methods and should not be created independently.")

class IAgStkPluginSite(IAgUtPluginSite):
    """STK application plugin site"""
    _num_methods = 6
    _vtable_offset = IAgUtPluginSite._vtable_offset + IAgUtPluginSite._num_methods
    _metadata = {
        "uuid" : "{F1D25E90-2512-4f8f-8B4E-1FEDE57606BD}",
        "vtable_reference" : IAgUtPluginSite._vtable_offset + IAgUtPluginSite._num_methods - 1,
        "method_offsets" : { "get_VectorToolProvider" : 1,
                             "get_ScenarioDirectory" : 2,
                             "get_InstallDirectory" : 3,
                             "get_ConfigDirectory" : 4,
                             "get_StkRootObject" : 5,
                             "get_CalcToolProvider" : 6, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkPluginSite._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkPluginSite from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgUtPluginSite._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkPluginSite.__dict__ and type(IAgStkPluginSite.__dict__[attrname]) == property:
            return IAgStkPluginSite.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            IAgUtPluginSite.__setattr__(self, attrname, value)
    
    _get_VectorToolProvider_metadata = { "name" : "VectorToolProvider",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def VectorToolProvider(self) -> "IAgCrdnPluginProvider":
        """Creates an IAgCrdnPluginProvider object."""
        return self._intf.get_property(IAgStkPluginSite._metadata, IAgStkPluginSite._get_VectorToolProvider_metadata)

    _get_ScenarioDirectory_metadata = { "name" : "ScenarioDirectory",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def ScenarioDirectory(self) -> str:
        """The directory path of the current scenario."""
        return self._intf.get_property(IAgStkPluginSite._metadata, IAgStkPluginSite._get_ScenarioDirectory_metadata)

    _get_InstallDirectory_metadata = { "name" : "InstallDirectory",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def InstallDirectory(self) -> str:
        """The directory path of the installation of the application."""
        return self._intf.get_property(IAgStkPluginSite._metadata, IAgStkPluginSite._get_InstallDirectory_metadata)

    _get_ConfigDirectory_metadata = { "name" : "ConfigDirectory",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def ConfigDirectory(self) -> str:
        """The directory path of the user configuration area."""
        return self._intf.get_property(IAgStkPluginSite._metadata, IAgStkPluginSite._get_ConfigDirectory_metadata)

    _get_StkRootObject_metadata = { "name" : "StkRootObject",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def StkRootObject(self) -> typing.Any:
        """Returns an instance of the STK Object Model Root Object"""
        return self._intf.get_property(IAgStkPluginSite._metadata, IAgStkPluginSite._get_StkRootObject_metadata)

    _get_CalcToolProvider_metadata = { "name" : "CalcToolProvider",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def CalcToolProvider(self) -> "IAgCrdnPluginCalcProvider":
        """Creates an IAgCrdnPluginCalcProvider object."""
        return self._intf.get_property(IAgStkPluginSite._metadata, IAgStkPluginSite._get_CalcToolProvider_metadata)


agcls.AgClassCatalog.add_catalog_entry("{F1D25E90-2512-4f8f-8B4E-1FEDE57606BD}", IAgStkPluginSite)
agcls.AgTypeNameMap["IAgStkPluginSite"] = IAgStkPluginSite

class IAgGatorPluginSite(IAgUtPluginSite):
    """Astrogator plugin site interface."""
    _num_methods = 8
    _vtable_offset = IAgUtPluginSite._vtable_offset + IAgUtPluginSite._num_methods
    _metadata = {
        "uuid" : "{62BD3410-1F8F-4d19-AE3B-FD3AA8669FBD}",
        "vtable_reference" : IAgUtPluginSite._vtable_offset + IAgUtPluginSite._num_methods - 1,
        "method_offsets" : { "get_VectorToolProvider" : 1,
                             "get_GatorProvider" : 2,
                             "get_ScenarioDirectory" : 3,
                             "get_InstallDirectory" : 4,
                             "get_ConfigDirectory" : 5,
                             "get_StkRootObject" : 6,
                             "GetDisplayUnit" : 7,
                             "get_CalcToolProvider" : 8, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgGatorPluginSite._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgGatorPluginSite from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgUtPluginSite._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgGatorPluginSite.__dict__ and type(IAgGatorPluginSite.__dict__[attrname]) == property:
            return IAgGatorPluginSite.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            IAgUtPluginSite.__setattr__(self, attrname, value)
    
    _get_VectorToolProvider_metadata = { "name" : "VectorToolProvider",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def VectorToolProvider(self) -> "IAgCrdnPluginProvider":
        """Creates an IAgCrdnPluginProvider object."""
        return self._intf.get_property(IAgGatorPluginSite._metadata, IAgGatorPluginSite._get_VectorToolProvider_metadata)

    _get_GatorProvider_metadata = { "name" : "GatorProvider",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def GatorProvider(self) -> "IAgGatorPluginProvider":
        """Creates an IAgGatorPluginProvider object."""
        return self._intf.get_property(IAgGatorPluginSite._metadata, IAgGatorPluginSite._get_GatorProvider_metadata)

    _get_ScenarioDirectory_metadata = { "name" : "ScenarioDirectory",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def ScenarioDirectory(self) -> str:
        """The directory path of the current scenario."""
        return self._intf.get_property(IAgGatorPluginSite._metadata, IAgGatorPluginSite._get_ScenarioDirectory_metadata)

    _get_InstallDirectory_metadata = { "name" : "InstallDirectory",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def InstallDirectory(self) -> str:
        """The directory path of the installation of the application."""
        return self._intf.get_property(IAgGatorPluginSite._metadata, IAgGatorPluginSite._get_InstallDirectory_metadata)

    _get_ConfigDirectory_metadata = { "name" : "ConfigDirectory",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def ConfigDirectory(self) -> str:
        """The directory path of the user configuration area."""
        return self._intf.get_property(IAgGatorPluginSite._metadata, IAgGatorPluginSite._get_ConfigDirectory_metadata)

    _get_StkRootObject_metadata = { "name" : "StkRootObject",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def StkRootObject(self) -> typing.Any:
        """Returns an instance of the STK Object Model Root Object"""
        return self._intf.get_property(IAgGatorPluginSite._metadata, IAgGatorPluginSite._get_StkRootObject_metadata)

    _GetDisplayUnit_metadata = { "name" : "GetDisplayUnit",
            "arg_types" : (agcom.BSTR, POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.BSTR_arg,) }
    def GetDisplayUnit(self, dimension:str) -> str:
        """Gets the display unit (scenario unit) for the given dimension."""
        return self._intf.invoke(IAgGatorPluginSite._metadata, IAgGatorPluginSite._GetDisplayUnit_metadata, dimension, out_arg())

    _get_CalcToolProvider_metadata = { "name" : "CalcToolProvider",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def CalcToolProvider(self) -> "IAgCrdnPluginCalcProvider":
        """Creates an IAgCrdnPluginCalcProvider object."""
        return self._intf.get_property(IAgGatorPluginSite._metadata, IAgGatorPluginSite._get_CalcToolProvider_metadata)


agcls.AgClassCatalog.add_catalog_entry("{62BD3410-1F8F-4d19-AE3B-FD3AA8669FBD}", IAgGatorPluginSite)
agcls.AgTypeNameMap["IAgGatorPluginSite"] = IAgGatorPluginSite



class AgStkPluginSite(IAgStkPluginSite):
    """STK plugin site."""
    def __init__(self, sourceObject=None):
        IAgStkPluginSite.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkPluginSite._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkPluginSite._get_property(self, attrname) is not None: found_prop = IAgStkPluginSite._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkPluginSite.")

agcls.AgClassCatalog.add_catalog_entry("{2B85A5E2-6B88-40BB-A326-1DC721BE7E43}", AgStkPluginSite)


class AgGatorPluginSite(IAgStkPluginSite, IAgGatorPluginSite):
    """Astrogator plugin site."""
    def __init__(self, sourceObject=None):
        IAgStkPluginSite.__init__(self, sourceObject)
        IAgGatorPluginSite.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkPluginSite._private_init(self, intf)
        IAgGatorPluginSite._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkPluginSite._get_property(self, attrname) is not None: found_prop = IAgStkPluginSite._get_property(self, attrname)
        if IAgGatorPluginSite._get_property(self, attrname) is not None: found_prop = IAgGatorPluginSite._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgGatorPluginSite.")

agcls.AgClassCatalog.add_catalog_entry("{B4813887-1533-4724-AF06-C8282B2C46DB}", AgGatorPluginSite)



################################################################################
#          Copyright 2020-2023, Ansys Government Initiatives
################################################################################
