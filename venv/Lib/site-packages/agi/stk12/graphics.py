################################################################################
#          Copyright 2020-2023, Ansys Government Initiatives
################################################################################ 

__all__ = ["AgEStkGraphicsAntiAliasing", "AgEStkGraphicsBinaryLogicOperation", "AgEStkGraphicsBlurMethod", "AgEStkGraphicsCameraSnapshotFileFormat", 
"AgEStkGraphicsCameraVideoFormat", "AgEStkGraphicsConstrainedUpAxis", "AgEStkGraphicsCullFace", "AgEStkGraphicsCylinderFill", 
"AgEStkGraphicsEdgeDetectMethod", "AgEStkGraphicsFlipAxis", "AgEStkGraphicsFontStyle", "AgEStkGraphicsGlobeOverlayRole", 
"AgEStkGraphicsGradientDetectMethod", "AgEStkGraphicsIndicesOrderHint", "AgEStkGraphicsInternalTextureFormat", "AgEStkGraphicsJpeg2000CompressionProfile", 
"AgEStkGraphicsKmlNetworkLinkRefreshMode", "AgEStkGraphicsKmlNetworkLinkViewRefreshMode", "AgEStkGraphicsMagnificationFilter", 
"AgEStkGraphicsMaintainAspectRatio", "AgEStkGraphicsMapProjection", "AgEStkGraphicsMarkerBatchRenderPass", "AgEStkGraphicsMarkerBatchRenderingMethod", 
"AgEStkGraphicsMarkerBatchSizeSource", "AgEStkGraphicsMarkerBatchSortOrder", "AgEStkGraphicsMarkerBatchUnit", "AgEStkGraphicsMinificationFilter", 
"AgEStkGraphicsModelTransformationType", "AgEStkGraphicsModelUpAxis", "AgEStkGraphicsOrigin", "AgEStkGraphicsOutlineAppearance", 
"AgEStkGraphicsPathPrimitiveRemoveLocation", "AgEStkGraphicsPolylineType", "AgEStkGraphicsPrimitivesSortOrder", "AgEStkGraphicsRasterBand", 
"AgEStkGraphicsRasterFormat", "AgEStkGraphicsRasterOrientation", "AgEStkGraphicsRasterType", "AgEStkGraphicsRefreshRate", 
"AgEStkGraphicsRenderPass", "AgEStkGraphicsRenderPassHint", "AgEStkGraphicsRendererShadeModel", "AgEStkGraphicsScreenOverlayOrigin", 
"AgEStkGraphicsScreenOverlayPinningOrigin", "AgEStkGraphicsScreenOverlayUnit", "AgEStkGraphicsSetHint", "AgEStkGraphicsSharpenMethod", 
"AgEStkGraphicsStereoProjectionMode", "AgEStkGraphicsStereoscopicDisplayMode", "AgEStkGraphicsSurfaceMeshRenderingMethod", 
"AgEStkGraphicsTextureWrap", "AgEStkGraphicsVideoPlayback", "AgEStkGraphicsVisibility", "AgEStkGraphicsWindingOrder", "AgStkGraphicsAGICustomTerrainOverlay", 
"AgStkGraphicsAGICustomTerrainOverlayFactory", "AgStkGraphicsAGIProcessedImageGlobeOverlay", "AgStkGraphicsAGIProcessedImageGlobeOverlayFactory", 
"AgStkGraphicsAGIProcessedTerrainOverlay", "AgStkGraphicsAGIProcessedTerrainOverlayFactory", "AgStkGraphicsAGIRoamImageGlobeOverlay", 
"AgStkGraphicsAGIRoamImageGlobeOverlayFactory", "AgStkGraphicsAlphaFromLuminanceFilter", "AgStkGraphicsAlphaFromLuminanceFilterFactory", 
"AgStkGraphicsAlphaFromPixelFilter", "AgStkGraphicsAlphaFromPixelFilterFactory", "AgStkGraphicsAlphaFromRasterFilter", "AgStkGraphicsAlphaFromRasterFilterFactory", 
"AgStkGraphicsAltitudeDisplayCondition", "AgStkGraphicsAltitudeDisplayConditionFactory", "AgStkGraphicsAxesPrimitive", "AgStkGraphicsAxesPrimitiveFactory", 
"AgStkGraphicsBandExtractFilter", "AgStkGraphicsBandExtractFilterFactory", "AgStkGraphicsBandOrderFilter", "AgStkGraphicsBandOrderFilterFactory", 
"AgStkGraphicsBatchPrimitiveIndex", "AgStkGraphicsBlurFilter", "AgStkGraphicsBlurFilterFactory", "AgStkGraphicsBoundingSphere", 
"AgStkGraphicsBoundingSphereFactory", "AgStkGraphicsBoxTriangulatorInitializer", "AgStkGraphicsBrightnessFilter", "AgStkGraphicsBrightnessFilterFactory", 
"AgStkGraphicsCamera", "AgStkGraphicsCameraSnapshot", "AgStkGraphicsCameraVideoRecording", "AgStkGraphicsCentralBodyGraphics", 
"AgStkGraphicsCentralBodyGraphicsIndexer", "AgStkGraphicsClouds", "AgStkGraphicsColorToLuminanceFilter", "AgStkGraphicsColorToLuminanceFilterFactory", 
"AgStkGraphicsCompositeDisplayCondition", "AgStkGraphicsCompositeDisplayConditionFactory", "AgStkGraphicsCompositePrimitive", 
"AgStkGraphicsCompositePrimitiveFactory", "AgStkGraphicsConstantDisplayCondition", "AgStkGraphicsConstantDisplayConditionFactory", 
"AgStkGraphicsContrastFilter", "AgStkGraphicsContrastFilterFactory", "AgStkGraphicsConvolutionFilter", "AgStkGraphicsConvolutionFilterFactory", 
"AgStkGraphicsCustomImageGlobeOverlay", "AgStkGraphicsCustomImageGlobeOverlayPluginActivator", "AgStkGraphicsCustomImageGlobeOverlayPluginActivatorFactory", 
"AgStkGraphicsCustomImageGlobeOverlayPluginProxy", "AgStkGraphicsCylinderTriangulatorInitializer", "AgStkGraphicsDisplayCondition", 
"AgStkGraphicsDistanceDisplayCondition", "AgStkGraphicsDistanceDisplayConditionFactory", "AgStkGraphicsDistanceToGlobeOverlayDisplayCondition", 
"AgStkGraphicsDistanceToGlobeOverlayDisplayConditionFactory", "AgStkGraphicsDistanceToPositionDisplayCondition", "AgStkGraphicsDistanceToPositionDisplayConditionFactory", 
"AgStkGraphicsDistanceToPrimitiveDisplayCondition", "AgStkGraphicsDistanceToPrimitiveDisplayConditionFactory", "AgStkGraphicsDurationPathPrimitiveUpdatePolicy", 
"AgStkGraphicsDurationPathPrimitiveUpdatePolicyFactory", "AgStkGraphicsEdgeDetectFilter", "AgStkGraphicsEdgeDetectFilterFactory", 
"AgStkGraphicsEllipsoidTriangulatorInitializer", "AgStkGraphicsExtrudedPolylineTriangulatorInitializer", "AgStkGraphicsExtrudedPolylineTriangulatorResult", 
"AgStkGraphicsFactoryAndInitializers", "AgStkGraphicsFilteringRasterStream", "AgStkGraphicsFilteringRasterStreamFactory", 
"AgStkGraphicsFlipFilter", "AgStkGraphicsFlipFilterFactory", "AgStkGraphicsFrameRate", "AgStkGraphicsGammaCorrectionFilter", 
"AgStkGraphicsGammaCorrectionFilterFactory", "AgStkGraphicsGaussianBlurFilter", "AgStkGraphicsGaussianBlurFilterFactory", 
"AgStkGraphicsGeospatialImageGlobeOverlay", "AgStkGraphicsGeospatialImageGlobeOverlayFactory", "AgStkGraphicsGlobeImageOverlay", 
"AgStkGraphicsGlobeImageOverlayAddCompleteEventArgs", "AgStkGraphicsGlobeImageOverlayInitializer", "AgStkGraphicsGlobeOverlay", 
"AgStkGraphicsGlobeOverlaySettings", "AgStkGraphicsGradientDetectFilter", "AgStkGraphicsGradientDetectFilterFactory", "AgStkGraphicsGraphicsFont", 
"AgStkGraphicsGraphicsFontFactory", "AgStkGraphicsGreatArcInterpolator", "AgStkGraphicsGreatArcInterpolatorFactory", "AgStkGraphicsImageCollection", 
"AgStkGraphicsJpeg2000WriterInitializer", "AgStkGraphicsKmlContainer", "AgStkGraphicsKmlDocument", "AgStkGraphicsKmlDocumentCollection", 
"AgStkGraphicsKmlDocumentLoadedEventArgs", "AgStkGraphicsKmlFeature", "AgStkGraphicsKmlFeatureCollection", "AgStkGraphicsKmlFolder", 
"AgStkGraphicsKmlGraphics", "AgStkGraphicsKmlNetworkLink", "AgStkGraphicsLevelsFilter", "AgStkGraphicsLevelsFilterFactory", 
"AgStkGraphicsLighting", "AgStkGraphicsMarkerBatchPrimitive", "AgStkGraphicsMarkerBatchPrimitiveFactory", "AgStkGraphicsMarkerBatchPrimitiveOptionalParameters", 
"AgStkGraphicsMarkerBatchPrimitiveOptionalParametersFactory", "AgStkGraphicsMaximumCountPathPrimitiveUpdatePolicy", "AgStkGraphicsMaximumCountPathPrimitiveUpdatePolicyFactory", 
"AgStkGraphicsModelArticulation", "AgStkGraphicsModelArticulationCollection", "AgStkGraphicsModelPrimitive", "AgStkGraphicsModelPrimitiveFactory", 
"AgStkGraphicsModelTransformation", "AgStkGraphicsObjectCollection", "AgStkGraphicsOverlay", "AgStkGraphicsPathPoint", "AgStkGraphicsPathPointCollection", 
"AgStkGraphicsPathPointFactory", "AgStkGraphicsPathPrimitive", "AgStkGraphicsPathPrimitiveFactory", "AgStkGraphicsPathPrimitiveUpdatePolicy", 
"AgStkGraphicsPickResult", "AgStkGraphicsPickResultCollection", "AgStkGraphicsPixelSizeDisplayCondition", "AgStkGraphicsPixelSizeDisplayConditionFactory", 
"AgStkGraphicsPointBatchPrimitive", "AgStkGraphicsPointBatchPrimitiveFactory", "AgStkGraphicsPointBatchPrimitiveOptionalParameters", 
"AgStkGraphicsPointBatchPrimitiveOptionalParametersFactory", "AgStkGraphicsPolylinePrimitive", "AgStkGraphicsPolylinePrimitiveFactory", 
"AgStkGraphicsPolylinePrimitiveOptionalParameters", "AgStkGraphicsPolylinePrimitiveOptionalParametersFactory", "AgStkGraphicsPositionInterpolator", 
"AgStkGraphicsPrimitive", "AgStkGraphicsPrimitiveManager", "AgStkGraphicsProjectedRasterOverlay", "AgStkGraphicsProjectedRasterOverlayFactory", 
"AgStkGraphicsProjection", "AgStkGraphicsProjectionFactory", "AgStkGraphicsProjectionRasterStreamPluginActivator", "AgStkGraphicsProjectionRasterStreamPluginActivatorFactory", 
"AgStkGraphicsProjectionRasterStreamPluginProxy", "AgStkGraphicsProjectionStream", "AgStkGraphicsRaster", "AgStkGraphicsRasterAttributes", 
"AgStkGraphicsRasterAttributesFactory", "AgStkGraphicsRasterFactory", "AgStkGraphicsRasterFilter", "AgStkGraphicsRasterImageGlobeOverlay", 
"AgStkGraphicsRasterImageGlobeOverlayFactory", "AgStkGraphicsRasterStream", "AgStkGraphicsRendererTexture2D", "AgStkGraphicsRendererTextureTemplate2D", 
"AgStkGraphicsRenderingEventArgs", "AgStkGraphicsRhumbLineInterpolator", "AgStkGraphicsRhumbLineInterpolatorFactory", "AgStkGraphicsRotateFilter", 
"AgStkGraphicsRotateFilterFactory", "AgStkGraphicsScene", "AgStkGraphicsSceneCollection", "AgStkGraphicsSceneDisplayCondition", 
"AgStkGraphicsSceneDisplayConditionFactory", "AgStkGraphicsSceneGlobeOverlaySettings", "AgStkGraphicsSceneManager", "AgStkGraphicsSceneManagerInitializer", 
"AgStkGraphicsScreenOverlay", "AgStkGraphicsScreenOverlayCollection", "AgStkGraphicsScreenOverlayCollectionBase", "AgStkGraphicsScreenOverlayFactory", 
"AgStkGraphicsScreenOverlayManager", "AgStkGraphicsScreenOverlayPickResult", "AgStkGraphicsScreenOverlayPickResultCollection", 
"AgStkGraphicsSequenceFilter", "AgStkGraphicsSequenceFilterFactory", "AgStkGraphicsSharpenFilter", "AgStkGraphicsSharpenFilterFactory", 
"AgStkGraphicsSolidPrimitive", "AgStkGraphicsSolidPrimitiveFactory", "AgStkGraphicsSolidTriangulatorResult", "AgStkGraphicsStereoscopic", 
"AgStkGraphicsSurfaceExtentTriangulatorInitializer", "AgStkGraphicsSurfaceMeshPrimitive", "AgStkGraphicsSurfaceMeshPrimitiveFactory", 
"AgStkGraphicsSurfacePolygonTriangulatorInitializer", "AgStkGraphicsSurfaceShapesInitializer", "AgStkGraphicsSurfaceShapesResult", 
"AgStkGraphicsSurfaceTriangulatorResult", "AgStkGraphicsTerrainCollection", "AgStkGraphicsTerrainOverlay", "AgStkGraphicsTerrainOverlayAddCompleteEventArgs", 
"AgStkGraphicsTerrainOverlayInitializer", "AgStkGraphicsTextBatchPrimitive", "AgStkGraphicsTextBatchPrimitiveFactory", "AgStkGraphicsTextBatchPrimitiveOptionalParameters", 
"AgStkGraphicsTextBatchPrimitiveOptionalParametersFactory", "AgStkGraphicsTextOverlay", "AgStkGraphicsTextOverlayFactory", 
"AgStkGraphicsTexture2DFactory", "AgStkGraphicsTextureFilter2D", "AgStkGraphicsTextureFilter2DFactory", "AgStkGraphicsTextureMatrix", 
"AgStkGraphicsTextureMatrixFactory", "AgStkGraphicsTextureScreenOverlay", "AgStkGraphicsTextureScreenOverlayFactory", "AgStkGraphicsTimeIntervalDisplayCondition", 
"AgStkGraphicsTimeIntervalDisplayConditionFactory", "AgStkGraphicsTriangleMeshPrimitive", "AgStkGraphicsTriangleMeshPrimitiveFactory", 
"AgStkGraphicsTriangleMeshPrimitiveOptionalParameters", "AgStkGraphicsTriangleMeshPrimitiveOptionalParametersFactory", "AgStkGraphicsTriangulatorResult", 
"AgStkGraphicsVectorPrimitive", "AgStkGraphicsVectorPrimitiveFactory", "AgStkGraphicsVideoStream", "AgStkGraphicsVideoStreamFactory", 
"AgStkGraphicsVisualEffects", "IAgStkGraphicsAGICustomTerrainOverlay", "IAgStkGraphicsAGICustomTerrainOverlayFactory", "IAgStkGraphicsAGIProcessedImageGlobeOverlay", 
"IAgStkGraphicsAGIProcessedImageGlobeOverlayFactory", "IAgStkGraphicsAGIProcessedTerrainOverlay", "IAgStkGraphicsAGIProcessedTerrainOverlayFactory", 
"IAgStkGraphicsAGIRoamImageGlobeOverlay", "IAgStkGraphicsAGIRoamImageGlobeOverlayFactory", "IAgStkGraphicsAlphaFromLuminanceFilter", 
"IAgStkGraphicsAlphaFromLuminanceFilterFactory", "IAgStkGraphicsAlphaFromPixelFilter", "IAgStkGraphicsAlphaFromPixelFilterFactory", 
"IAgStkGraphicsAlphaFromRasterFilter", "IAgStkGraphicsAlphaFromRasterFilterFactory", "IAgStkGraphicsAltitudeDisplayCondition", 
"IAgStkGraphicsAltitudeDisplayConditionFactory", "IAgStkGraphicsAxesPrimitive", "IAgStkGraphicsAxesPrimitiveFactory", "IAgStkGraphicsBandExtractFilter", 
"IAgStkGraphicsBandExtractFilterFactory", "IAgStkGraphicsBandOrderFilter", "IAgStkGraphicsBandOrderFilterFactory", "IAgStkGraphicsBatchPrimitiveIndex", 
"IAgStkGraphicsBlurFilter", "IAgStkGraphicsBlurFilterFactory", "IAgStkGraphicsBoundingSphere", "IAgStkGraphicsBoundingSphereFactory", 
"IAgStkGraphicsBoxTriangulatorInitializer", "IAgStkGraphicsBrightnessFilter", "IAgStkGraphicsBrightnessFilterFactory", "IAgStkGraphicsCamera", 
"IAgStkGraphicsCameraSnapshot", "IAgStkGraphicsCameraVideoRecording", "IAgStkGraphicsCentralBodyGraphics", "IAgStkGraphicsCentralBodyGraphicsIndexer", 
"IAgStkGraphicsClouds", "IAgStkGraphicsColorToLuminanceFilter", "IAgStkGraphicsColorToLuminanceFilterFactory", "IAgStkGraphicsCompositeDisplayCondition", 
"IAgStkGraphicsCompositeDisplayConditionFactory", "IAgStkGraphicsCompositePrimitive", "IAgStkGraphicsCompositePrimitiveFactory", 
"IAgStkGraphicsConstantDisplayCondition", "IAgStkGraphicsConstantDisplayConditionFactory", "IAgStkGraphicsContrastFilter", 
"IAgStkGraphicsContrastFilterFactory", "IAgStkGraphicsConvolutionFilter", "IAgStkGraphicsConvolutionFilterFactory", "IAgStkGraphicsCustomImageGlobeOverlay", 
"IAgStkGraphicsCustomImageGlobeOverlayPluginActivator", "IAgStkGraphicsCustomImageGlobeOverlayPluginActivatorFactory", "IAgStkGraphicsCustomImageGlobeOverlayPluginProxy", 
"IAgStkGraphicsCylinderTriangulatorInitializer", "IAgStkGraphicsDisplayCondition", "IAgStkGraphicsDistanceDisplayCondition", 
"IAgStkGraphicsDistanceDisplayConditionFactory", "IAgStkGraphicsDistanceToGlobeOverlayDisplayCondition", "IAgStkGraphicsDistanceToGlobeOverlayDisplayConditionFactory", 
"IAgStkGraphicsDistanceToPositionDisplayCondition", "IAgStkGraphicsDistanceToPositionDisplayConditionFactory", "IAgStkGraphicsDistanceToPrimitiveDisplayCondition", 
"IAgStkGraphicsDistanceToPrimitiveDisplayConditionFactory", "IAgStkGraphicsDurationPathPrimitiveUpdatePolicy", "IAgStkGraphicsDurationPathPrimitiveUpdatePolicyFactory", 
"IAgStkGraphicsEdgeDetectFilter", "IAgStkGraphicsEdgeDetectFilterFactory", "IAgStkGraphicsEllipsoidTriangulatorInitializer", 
"IAgStkGraphicsExtrudedPolylineTriangulatorInitializer", "IAgStkGraphicsExtrudedPolylineTriangulatorResult", "IAgStkGraphicsFactoryAndInitializers", 
"IAgStkGraphicsFilteringRasterStream", "IAgStkGraphicsFilteringRasterStreamFactory", "IAgStkGraphicsFlipFilter", "IAgStkGraphicsFlipFilterFactory", 
"IAgStkGraphicsFrameRate", "IAgStkGraphicsGammaCorrectionFilter", "IAgStkGraphicsGammaCorrectionFilterFactory", "IAgStkGraphicsGaussianBlurFilter", 
"IAgStkGraphicsGaussianBlurFilterFactory", "IAgStkGraphicsGeospatialImageGlobeOverlay", "IAgStkGraphicsGeospatialImageGlobeOverlayFactory", 
"IAgStkGraphicsGlobeImageOverlay", "IAgStkGraphicsGlobeImageOverlayAddCompleteEventArgs", "IAgStkGraphicsGlobeImageOverlayInitializer", 
"IAgStkGraphicsGlobeOverlay", "IAgStkGraphicsGlobeOverlaySettings", "IAgStkGraphicsGradientDetectFilter", "IAgStkGraphicsGradientDetectFilterFactory", 
"IAgStkGraphicsGraphicsFont", "IAgStkGraphicsGraphicsFontFactory", "IAgStkGraphicsGreatArcInterpolator", "IAgStkGraphicsGreatArcInterpolatorFactory", 
"IAgStkGraphicsImageCollection", "IAgStkGraphicsJpeg2000WriterInitializer", "IAgStkGraphicsKmlContainer", "IAgStkGraphicsKmlDocument", 
"IAgStkGraphicsKmlDocumentCollection", "IAgStkGraphicsKmlDocumentLoadedEventArgs", "IAgStkGraphicsKmlFeature", "IAgStkGraphicsKmlFeatureCollection", 
"IAgStkGraphicsKmlFolder", "IAgStkGraphicsKmlGraphics", "IAgStkGraphicsKmlNetworkLink", "IAgStkGraphicsLevelsFilter", "IAgStkGraphicsLevelsFilterFactory", 
"IAgStkGraphicsLighting", "IAgStkGraphicsMarkerBatchPrimitive", "IAgStkGraphicsMarkerBatchPrimitiveFactory", "IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters", 
"IAgStkGraphicsMarkerBatchPrimitiveOptionalParametersFactory", "IAgStkGraphicsMaximumCountPathPrimitiveUpdatePolicy", "IAgStkGraphicsMaximumCountPathPrimitiveUpdatePolicyFactory", 
"IAgStkGraphicsModelArticulation", "IAgStkGraphicsModelArticulationCollection", "IAgStkGraphicsModelPrimitive", "IAgStkGraphicsModelPrimitiveFactory", 
"IAgStkGraphicsModelTransformation", "IAgStkGraphicsObjectCollection", "IAgStkGraphicsOverlay", "IAgStkGraphicsPathPoint", 
"IAgStkGraphicsPathPointCollection", "IAgStkGraphicsPathPointFactory", "IAgStkGraphicsPathPrimitive", "IAgStkGraphicsPathPrimitiveFactory", 
"IAgStkGraphicsPathPrimitiveUpdatePolicy", "IAgStkGraphicsPickResult", "IAgStkGraphicsPickResultCollection", "IAgStkGraphicsPixelSizeDisplayCondition", 
"IAgStkGraphicsPixelSizeDisplayConditionFactory", "IAgStkGraphicsPointBatchPrimitive", "IAgStkGraphicsPointBatchPrimitiveFactory", 
"IAgStkGraphicsPointBatchPrimitiveOptionalParameters", "IAgStkGraphicsPointBatchPrimitiveOptionalParametersFactory", "IAgStkGraphicsPolylinePrimitive", 
"IAgStkGraphicsPolylinePrimitiveFactory", "IAgStkGraphicsPolylinePrimitiveOptionalParameters", "IAgStkGraphicsPolylinePrimitiveOptionalParametersFactory", 
"IAgStkGraphicsPositionInterpolator", "IAgStkGraphicsPrimitive", "IAgStkGraphicsPrimitiveManager", "IAgStkGraphicsProjectedRasterOverlay", 
"IAgStkGraphicsProjectedRasterOverlayFactory", "IAgStkGraphicsProjection", "IAgStkGraphicsProjectionFactory", "IAgStkGraphicsProjectionRasterStreamPluginActivator", 
"IAgStkGraphicsProjectionRasterStreamPluginActivatorFactory", "IAgStkGraphicsProjectionRasterStreamPluginProxy", "IAgStkGraphicsProjectionStream", 
"IAgStkGraphicsRaster", "IAgStkGraphicsRasterAttributes", "IAgStkGraphicsRasterAttributesFactory", "IAgStkGraphicsRasterFactory", 
"IAgStkGraphicsRasterFilter", "IAgStkGraphicsRasterImageGlobeOverlay", "IAgStkGraphicsRasterImageGlobeOverlayFactory", "IAgStkGraphicsRasterStream", 
"IAgStkGraphicsRendererTexture2D", "IAgStkGraphicsRendererTextureTemplate2D", "IAgStkGraphicsRenderingEventArgs", "IAgStkGraphicsRhumbLineInterpolator", 
"IAgStkGraphicsRhumbLineInterpolatorFactory", "IAgStkGraphicsRotateFilter", "IAgStkGraphicsRotateFilterFactory", "IAgStkGraphicsScene", 
"IAgStkGraphicsSceneCollection", "IAgStkGraphicsSceneDisplayCondition", "IAgStkGraphicsSceneDisplayConditionFactory", "IAgStkGraphicsSceneGlobeOverlaySettings", 
"IAgStkGraphicsSceneManager", "IAgStkGraphicsSceneManagerInitializer", "IAgStkGraphicsScreenOverlay", "IAgStkGraphicsScreenOverlayCollection", 
"IAgStkGraphicsScreenOverlayCollectionBase", "IAgStkGraphicsScreenOverlayContainer", "IAgStkGraphicsScreenOverlayFactory", 
"IAgStkGraphicsScreenOverlayManager", "IAgStkGraphicsScreenOverlayPickResult", "IAgStkGraphicsScreenOverlayPickResultCollection", 
"IAgStkGraphicsSequenceFilter", "IAgStkGraphicsSequenceFilterFactory", "IAgStkGraphicsSharpenFilter", "IAgStkGraphicsSharpenFilterFactory", 
"IAgStkGraphicsSolidPrimitive", "IAgStkGraphicsSolidPrimitiveFactory", "IAgStkGraphicsSolidTriangulatorResult", "IAgStkGraphicsStereoscopic", 
"IAgStkGraphicsSurfaceExtentTriangulatorInitializer", "IAgStkGraphicsSurfaceMeshPrimitive", "IAgStkGraphicsSurfaceMeshPrimitiveFactory", 
"IAgStkGraphicsSurfacePolygonTriangulatorInitializer", "IAgStkGraphicsSurfaceShapesInitializer", "IAgStkGraphicsSurfaceShapesResult", 
"IAgStkGraphicsSurfaceTriangulatorResult", "IAgStkGraphicsTerrainCollection", "IAgStkGraphicsTerrainOverlay", "IAgStkGraphicsTerrainOverlayAddCompleteEventArgs", 
"IAgStkGraphicsTerrainOverlayInitializer", "IAgStkGraphicsTextBatchPrimitive", "IAgStkGraphicsTextBatchPrimitiveFactory", 
"IAgStkGraphicsTextBatchPrimitiveOptionalParameters", "IAgStkGraphicsTextBatchPrimitiveOptionalParametersFactory", "IAgStkGraphicsTextOverlay", 
"IAgStkGraphicsTextOverlayFactory", "IAgStkGraphicsTexture2DFactory", "IAgStkGraphicsTextureFilter2D", "IAgStkGraphicsTextureFilter2DFactory", 
"IAgStkGraphicsTextureMatrix", "IAgStkGraphicsTextureMatrixFactory", "IAgStkGraphicsTextureScreenOverlay", "IAgStkGraphicsTextureScreenOverlayFactory", 
"IAgStkGraphicsTimeIntervalDisplayCondition", "IAgStkGraphicsTimeIntervalDisplayConditionFactory", "IAgStkGraphicsTriangleMeshPrimitive", 
"IAgStkGraphicsTriangleMeshPrimitiveFactory", "IAgStkGraphicsTriangleMeshPrimitiveOptionalParameters", "IAgStkGraphicsTriangleMeshPrimitiveOptionalParametersFactory", 
"IAgStkGraphicsTriangulatorResult", "IAgStkGraphicsVectorPrimitive", "IAgStkGraphicsVectorPrimitiveFactory", "IAgStkGraphicsVideoStream", 
"IAgStkGraphicsVideoStreamFactory", "IAgStkGraphicsVisualEffects"]

import typing

from ctypes   import byref, POINTER
from datetime import datetime
from enum     import IntEnum, IntFlag

from .internal  import comutil          as agcom
from .internal  import coclassutil      as agcls
from .internal  import marshall         as agmarshall
from .internal  import dataanalysisutil as agdata
from .utilities import colors           as agcolor
from .internal.comutil     import IUnknown, IDispatch, IPictureDisp
from .internal.apiutil     import interface_proxy, enumerator_proxy, out_arg
from .internal.eventutil   import *
from .utilities.exceptions import *

from .stkutil import *
from .vgt import *


def _raise_uninitialized_error(*args):
    raise STKRuntimeError("Valid STK object model classes are returned from STK methods and should not be created independently.")

class AgEStkGraphicsCylinderFill(IntFlag):
    """Cylinder faces that can be filled."""
    # Fill the cylinder's wall.
    eStkGraphicsCylinderFillWall = 1
    # Fill the cylinder's bottom cap.
    eStkGraphicsCylinderFillBottomCap = 2
    # Fill the cylinder's top cap.
    eStkGraphicsCylinderFillTopCap = 4
    # Completely fill the cylinder, including its wall, bottom, and top cap.
    eStkGraphicsCylinderFillAll = 7

AgEStkGraphicsCylinderFill.eStkGraphicsCylinderFillWall.__doc__ = "Fill the cylinder's wall."
AgEStkGraphicsCylinderFill.eStkGraphicsCylinderFillBottomCap.__doc__ = "Fill the cylinder's bottom cap."
AgEStkGraphicsCylinderFill.eStkGraphicsCylinderFillTopCap.__doc__ = "Fill the cylinder's top cap."
AgEStkGraphicsCylinderFill.eStkGraphicsCylinderFillAll.__doc__ = "Completely fill the cylinder, including its wall, bottom, and top cap."

agcls.AgTypeNameMap["AgEStkGraphicsCylinderFill"] = AgEStkGraphicsCylinderFill

class AgEStkGraphicsWindingOrder(IntEnum):
    """Specifies the order for positions or front facing triangles. Winding order is important for triangulation and backface culling."""
    # Positions or triangles are defined in counter-clockwise order.
    eStkGraphicsWindingOrderCounterClockwise = 0
    # Positions or triangles are defined in clockwise order.
    eStkGraphicsWindingOrderClockwise = 1
    # The winding order is unknown and should be computed. For best performance, only use this value if you do not know the actual winding order.
    eStkGraphicsWindingOrderCompute = 2

AgEStkGraphicsWindingOrder.eStkGraphicsWindingOrderCounterClockwise.__doc__ = "Positions or triangles are defined in counter-clockwise order."
AgEStkGraphicsWindingOrder.eStkGraphicsWindingOrderClockwise.__doc__ = "Positions or triangles are defined in clockwise order."
AgEStkGraphicsWindingOrder.eStkGraphicsWindingOrderCompute.__doc__ = "The winding order is unknown and should be computed. For best performance, only use this value if you do not know the actual winding order."

agcls.AgTypeNameMap["AgEStkGraphicsWindingOrder"] = AgEStkGraphicsWindingOrder

class AgEStkGraphicsCameraSnapshotFileFormat(IntEnum):
    """When using camera snapshot or camera video recording to save a snapshot to a file, this specifies the file format."""
    # BMP file format
    eStkGraphicsCameraSnapshotFileFormatBmp = 0
    # TIFF file format
    eStkGraphicsCameraSnapshotFileFormatTiff = 2
    # JPEG file format
    eStkGraphicsCameraSnapshotFileFormatJpeg = 3
    # PNG file format
    eStkGraphicsCameraSnapshotFileFormatPng = 4

AgEStkGraphicsCameraSnapshotFileFormat.eStkGraphicsCameraSnapshotFileFormatBmp.__doc__ = "BMP file format"
AgEStkGraphicsCameraSnapshotFileFormat.eStkGraphicsCameraSnapshotFileFormatTiff.__doc__ = "TIFF file format"
AgEStkGraphicsCameraSnapshotFileFormat.eStkGraphicsCameraSnapshotFileFormatJpeg.__doc__ = "JPEG file format"
AgEStkGraphicsCameraSnapshotFileFormat.eStkGraphicsCameraSnapshotFileFormatPng.__doc__ = "PNG file format"

agcls.AgTypeNameMap["AgEStkGraphicsCameraSnapshotFileFormat"] = AgEStkGraphicsCameraSnapshotFileFormat

class AgEStkGraphicsCameraVideoFormat(IntEnum):
    """When using camera video recording to record a video, this specifies the file format."""
    # H.264 file format
    eStkGraphicsCameraVideoFormatH264 = 0
    # Windows Media Video (WMV) file format
    eStkGraphicsCameraVideoFormatWMV = 1

AgEStkGraphicsCameraVideoFormat.eStkGraphicsCameraVideoFormatH264.__doc__ = "H.264 file format"
AgEStkGraphicsCameraVideoFormat.eStkGraphicsCameraVideoFormatWMV.__doc__ = "Windows Media Video (WMV) file format"

agcls.AgTypeNameMap["AgEStkGraphicsCameraVideoFormat"] = AgEStkGraphicsCameraVideoFormat

class AgEStkGraphicsConstrainedUpAxis(IntEnum):
    """When setting the camera'saxes, this defines which axis of the axes is up in screen space, where up is from the bottom to the top of the screen."""
    # The X axis is constrained.
    eStkGraphicsConstrainedUpAxisX = 0
    # The Y axis is constrained.
    eStkGraphicsConstrainedUpAxisY = 1
    # The Z axis is constrained.
    eStkGraphicsConstrainedUpAxisZ = 2
    # The negative X axis is constrained.
    eStkGraphicsConstrainedUpAxisNegativeX = 3
    # The negative Y axis is constrained.
    eStkGraphicsConstrainedUpAxisNegativeY = 4
    # The negative Z axis is constrained.
    eStkGraphicsConstrainedUpAxisNegativeZ = 5
    # No axis is contained.
    eStkGraphicsConstrainedUpAxisNone = 6

AgEStkGraphicsConstrainedUpAxis.eStkGraphicsConstrainedUpAxisX.__doc__ = "The X axis is constrained."
AgEStkGraphicsConstrainedUpAxis.eStkGraphicsConstrainedUpAxisY.__doc__ = "The Y axis is constrained."
AgEStkGraphicsConstrainedUpAxis.eStkGraphicsConstrainedUpAxisZ.__doc__ = "The Z axis is constrained."
AgEStkGraphicsConstrainedUpAxis.eStkGraphicsConstrainedUpAxisNegativeX.__doc__ = "The negative X axis is constrained."
AgEStkGraphicsConstrainedUpAxis.eStkGraphicsConstrainedUpAxisNegativeY.__doc__ = "The negative Y axis is constrained."
AgEStkGraphicsConstrainedUpAxis.eStkGraphicsConstrainedUpAxisNegativeZ.__doc__ = "The negative Z axis is constrained."
AgEStkGraphicsConstrainedUpAxis.eStkGraphicsConstrainedUpAxisNone.__doc__ = "No axis is contained."

agcls.AgTypeNameMap["AgEStkGraphicsConstrainedUpAxis"] = AgEStkGraphicsConstrainedUpAxis

class AgEStkGraphicsGlobeOverlayRole(IntEnum):
    """The role of a globe overlay."""
    # The globe overlay is a base image.
    eStkGraphicsGlobeOverlayRoleBase = 0
    # The globe overlay is a base image that is only displayed on the area of the central body that is not lit by the sun.
    eStkGraphicsGlobeOverlayRoleNight = 1
    # The globe overlay is a base image that shows the glint of the sun on the central body.
    eStkGraphicsGlobeOverlayRoleSpecular = 2
    # The globe overlay is a normal overlay without a special role.
    eStkGraphicsGlobeOverlayRoleNormal = 4
    # The role of the globe overlay isn't set.
    eStkGraphicsGlobeOverlayRoleNone = 5

AgEStkGraphicsGlobeOverlayRole.eStkGraphicsGlobeOverlayRoleBase.__doc__ = "The globe overlay is a base image."
AgEStkGraphicsGlobeOverlayRole.eStkGraphicsGlobeOverlayRoleNight.__doc__ = "The globe overlay is a base image that is only displayed on the area of the central body that is not lit by the sun."
AgEStkGraphicsGlobeOverlayRole.eStkGraphicsGlobeOverlayRoleSpecular.__doc__ = "The globe overlay is a base image that shows the glint of the sun on the central body."
AgEStkGraphicsGlobeOverlayRole.eStkGraphicsGlobeOverlayRoleNormal.__doc__ = "The globe overlay is a normal overlay without a special role."
AgEStkGraphicsGlobeOverlayRole.eStkGraphicsGlobeOverlayRoleNone.__doc__ = "The role of the globe overlay isn't set."

agcls.AgTypeNameMap["AgEStkGraphicsGlobeOverlayRole"] = AgEStkGraphicsGlobeOverlayRole

class AgEStkGraphicsIndicesOrderHint(IntEnum):
    """An optimization hint optionally provided to a primitive'sSetPartial method to enhance performance."""
    # The indices passed to SetPartial are not sorted. Therefore, the primitive may sort them to improve performance of writing its geometry to video memory.
    eStkGraphicsIndicesOrderHintNotSorted = 0
    # The indices passed to SetPartial are sorted in ascending order. Therefore, the primitive does not need to sort them. It is recommended to only use SortedAscending if it is easy and efficient for you to provide the indices in ascending order...
    eStkGraphicsIndicesOrderHintSortedAscending = 1

AgEStkGraphicsIndicesOrderHint.eStkGraphicsIndicesOrderHintNotSorted.__doc__ = "The indices passed to SetPartial are not sorted. Therefore, the primitive may sort them to improve performance of writing its geometry to video memory."
AgEStkGraphicsIndicesOrderHint.eStkGraphicsIndicesOrderHintSortedAscending.__doc__ = "The indices passed to SetPartial are sorted in ascending order. Therefore, the primitive does not need to sort them. It is recommended to only use SortedAscending if it is easy and efficient for you to provide the indices in ascending order..."

agcls.AgTypeNameMap["AgEStkGraphicsIndicesOrderHint"] = AgEStkGraphicsIndicesOrderHint

class AgEStkGraphicsMaintainAspectRatio(IntEnum):
    """Specifies whether the aspect ratio of a texture will be maintained during sizing of a screen overlay."""
    # The aspect ratio of the texture is not maintained during sizing of the screen overlay.
    eStkGraphicsMaintainAspectRatioNone = 0
    # The aspect ratio of the texture is maintained based on the width property of the screen overlay. When used, the height property is ignored and the height is automatically calculated based on the aspect ratio of the texture and the overlay's width property.
    eStkGraphicsMaintainAspectRatioWidth = 1
    # The aspect ratio of the texture is maintained based on the height property of the screen overlay. When used, the width property is ignored and the width is automatically calculated based on the aspect ratio of the texture and the overlay's height property.
    eStkGraphicsMaintainAspectRatioHeight = 2

AgEStkGraphicsMaintainAspectRatio.eStkGraphicsMaintainAspectRatioNone.__doc__ = "The aspect ratio of the texture is not maintained during sizing of the screen overlay."
AgEStkGraphicsMaintainAspectRatio.eStkGraphicsMaintainAspectRatioWidth.__doc__ = "The aspect ratio of the texture is maintained based on the width property of the screen overlay. When used, the height property is ignored and the height is automatically calculated based on the aspect ratio of the texture and the overlay's width property."
AgEStkGraphicsMaintainAspectRatio.eStkGraphicsMaintainAspectRatioHeight.__doc__ = "The aspect ratio of the texture is maintained based on the height property of the screen overlay. When used, the width property is ignored and the width is automatically calculated based on the aspect ratio of the texture and the overlay's height property."

agcls.AgTypeNameMap["AgEStkGraphicsMaintainAspectRatio"] = AgEStkGraphicsMaintainAspectRatio

class AgEStkGraphicsMapProjection(IntEnum):
    """The projection of the pixel data returned from a custom image globe overlay."""
    # Mercator projection
    eStkGraphicsMapProjectionMercator = 0
    # Equidistant Cylindrical projection
    eStkGraphicsMapProjectionEquidistantCylindrical = 1

AgEStkGraphicsMapProjection.eStkGraphicsMapProjectionMercator.__doc__ = "Mercator projection"
AgEStkGraphicsMapProjection.eStkGraphicsMapProjectionEquidistantCylindrical.__doc__ = "Equidistant Cylindrical projection"

agcls.AgTypeNameMap["AgEStkGraphicsMapProjection"] = AgEStkGraphicsMapProjection

class AgEStkGraphicsMarkerBatchRenderingMethod(IntEnum):
    """Rendering methods available for use by the marker batch primitive. Different methods may have different performance characteristics and require different video card support. When in doubt, use Automatic."""
    # Render the marker batch using a geometry shader.
    eStkGraphicsMarkerBatchRenderingMethodGeometryShader = 0
    # Render the marker batch using a vertex shader.
    eStkGraphicsMarkerBatchRenderingMethodVertexShader = 1
    # Render the marker batch using an automatically selected method based on the capabilities of the video card.
    eStkGraphicsMarkerBatchRenderingMethodAutomatic = 2
    # Render the marker batch using the fixed function pipeline. Generally, this is the slowest method but it supports all video cards.
    eStkGraphicsMarkerBatchRenderingMethodFixedFunction = 3

AgEStkGraphicsMarkerBatchRenderingMethod.eStkGraphicsMarkerBatchRenderingMethodGeometryShader.__doc__ = "Render the marker batch using a geometry shader."
AgEStkGraphicsMarkerBatchRenderingMethod.eStkGraphicsMarkerBatchRenderingMethodVertexShader.__doc__ = "Render the marker batch using a vertex shader."
AgEStkGraphicsMarkerBatchRenderingMethod.eStkGraphicsMarkerBatchRenderingMethodAutomatic.__doc__ = "Render the marker batch using an automatically selected method based on the capabilities of the video card."
AgEStkGraphicsMarkerBatchRenderingMethod.eStkGraphicsMarkerBatchRenderingMethodFixedFunction.__doc__ = "Render the marker batch using the fixed function pipeline. Generally, this is the slowest method but it supports all video cards."

agcls.AgTypeNameMap["AgEStkGraphicsMarkerBatchRenderingMethod"] = AgEStkGraphicsMarkerBatchRenderingMethod

class AgEStkGraphicsMarkerBatchRenderPass(IntEnum):
    """The pass during which the marker batch is rendered."""
    # The marker batch contains all opaque textures and therefore should be rendered using the opaque pass.
    eStkGraphicsMarkerBatchRenderPassOpaque = 0
    # The marker batch contains textures with translucency and therefore should be rendered using the translucent pass. For correct blending of overlapping textures, also consider using back to front.
    eStkGraphicsMarkerBatchRenderPassTranslucent = 1
    # The marker batch render pass should be determined based on the marker batch's translucency. This includes the translucency set per marker when SetColors is used.
    eStkGraphicsMarkerBatchRenderPassBasedOnTranslucency = 2

AgEStkGraphicsMarkerBatchRenderPass.eStkGraphicsMarkerBatchRenderPassOpaque.__doc__ = "The marker batch contains all opaque textures and therefore should be rendered using the opaque pass."
AgEStkGraphicsMarkerBatchRenderPass.eStkGraphicsMarkerBatchRenderPassTranslucent.__doc__ = "The marker batch contains textures with translucency and therefore should be rendered using the translucent pass. For correct blending of overlapping textures, also consider using back to front."
AgEStkGraphicsMarkerBatchRenderPass.eStkGraphicsMarkerBatchRenderPassBasedOnTranslucency.__doc__ = "The marker batch render pass should be determined based on the marker batch's translucency. This includes the translucency set per marker when SetColors is used."

agcls.AgTypeNameMap["AgEStkGraphicsMarkerBatchRenderPass"] = AgEStkGraphicsMarkerBatchRenderPass

class AgEStkGraphicsMarkerBatchSizeSource(IntEnum):
    """Determines which marker batch property is used to size each marker in a marker batch."""
    # The size of each marker is the same as the size of its texture. If the marker is not textured, the user defined size is used instead.
    eStkGraphicsMarkerBatchSizeSourceFromTexture = 0
    # The size of each marker in the marker batch is user defined. Either all markers have the same size (size) or each marker has a user defined size (SetSizes).
    eStkGraphicsMarkerBatchSizeSourceUserDefined = 1

AgEStkGraphicsMarkerBatchSizeSource.eStkGraphicsMarkerBatchSizeSourceFromTexture.__doc__ = "The size of each marker is the same as the size of its texture. If the marker is not textured, the user defined size is used instead."
AgEStkGraphicsMarkerBatchSizeSource.eStkGraphicsMarkerBatchSizeSourceUserDefined.__doc__ = "The size of each marker in the marker batch is user defined. Either all markers have the same size (size) or each marker has a user defined size (SetSizes)."

agcls.AgTypeNameMap["AgEStkGraphicsMarkerBatchSizeSource"] = AgEStkGraphicsMarkerBatchSizeSource

class AgEStkGraphicsMarkerBatchSortOrder(IntEnum):
    """The order in which markers in a marker batch are sorted before rendering."""
    # The markers are sorted in back to front order before rendering. For overlapping translucent markers, this enables correct blending results...
    eStkGraphicsMarkerBatchSortOrderBackToFront = 0
    # The markers are sorted in front to back order before rendering. For overlapping opaque markers, this can enable the GPU to quickly eliminate markers that are hidden behind other markers...
    eStkGraphicsMarkerBatchSortOrderFrontToBack = 1
    # The markers are sorted by texture. This minimizes costly texture changes during rendering and does not require resorting when the camera moves or a marker changes position.
    eStkGraphicsMarkerBatchSortOrderByTexture = 2

AgEStkGraphicsMarkerBatchSortOrder.eStkGraphicsMarkerBatchSortOrderBackToFront.__doc__ = "The markers are sorted in back to front order before rendering. For overlapping translucent markers, this enables correct blending results..."
AgEStkGraphicsMarkerBatchSortOrder.eStkGraphicsMarkerBatchSortOrderFrontToBack.__doc__ = "The markers are sorted in front to back order before rendering. For overlapping opaque markers, this can enable the GPU to quickly eliminate markers that are hidden behind other markers..."
AgEStkGraphicsMarkerBatchSortOrder.eStkGraphicsMarkerBatchSortOrderByTexture.__doc__ = "The markers are sorted by texture. This minimizes costly texture changes during rendering and does not require resorting when the camera moves or a marker changes position."

agcls.AgTypeNameMap["AgEStkGraphicsMarkerBatchSortOrder"] = AgEStkGraphicsMarkerBatchSortOrder

class AgEStkGraphicsMarkerBatchUnit(IntEnum):
    """The unit for marker sizes in a marker batch."""
    # The size of a marker is defined in pixels. As the camera zooms in and out the size of the marker doesn't change.
    eStkGraphicsMarkerBatchUnitPixels = 0
    # The size of a marker is defined in meters.
    eStkGraphicsMarkerBatchUnitMeters = 1

AgEStkGraphicsMarkerBatchUnit.eStkGraphicsMarkerBatchUnitPixels.__doc__ = "The size of a marker is defined in pixels. As the camera zooms in and out the size of the marker doesn't change."
AgEStkGraphicsMarkerBatchUnit.eStkGraphicsMarkerBatchUnitMeters.__doc__ = "The size of a marker is defined in meters."

agcls.AgTypeNameMap["AgEStkGraphicsMarkerBatchUnit"] = AgEStkGraphicsMarkerBatchUnit

class AgEStkGraphicsModelTransformationType(IntEnum):
    """Transformation types that define the way a model transformation changes the geometry of the model articulation it is associated with."""
    # Translates the geometry along the X axis.
    eStkGraphicsModelTransformationTypeTranslateX = 0
    # Translates the geometry along the Y axis.
    eStkGraphicsModelTransformationTypeTranslateY = 1
    # Translates the geometry along the Z axis.
    eStkGraphicsModelTransformationTypeTranslateZ = 2
    # Rotates the geometry about the X axis.
    eStkGraphicsModelTransformationTypeRotateX = 3
    # Rotates the geometry about the Y axis.
    eStkGraphicsModelTransformationTypeRotateY = 4
    # Rotates the geometry about the Z axis.
    eStkGraphicsModelTransformationTypeRotateZ = 5
    # Scales the geometry along the X axis.
    eStkGraphicsModelTransformationTypeScaleX = 6
    # Scales the geometry along the Y axis.
    eStkGraphicsModelTransformationTypeScaleY = 7
    # Scales the geometry along the Z axis.
    eStkGraphicsModelTransformationTypeScaleZ = 8
    # Scales the geometry uniformly along the X, Y, and Z axes.
    eStkGraphicsModelTransformationTypeScaleUniform = 9
    # Translates the texture associated with the geometry along the X axis.
    eStkGraphicsModelTransformationTypeTextureTranslateX = 10
    # Translates the texture associated with the geometry along the Y axis.
    eStkGraphicsModelTransformationTypeTextureTranslateY = 11
    # Translates the texture associated with the geometry along the Z axis.
    eStkGraphicsModelTransformationTypeTextureTranslateZ = 12
    # Rotates the texture associated with the geometry about the X axis.
    eStkGraphicsModelTransformationTypeTextureRotateX = 13
    # Rotates the texture associated with the geometry about the Y axis.
    eStkGraphicsModelTransformationTypeTextureRotateY = 14
    # Rotates the texture associated with the geometry about the Z axis.
    eStkGraphicsModelTransformationTypeTextureRotateZ = 15
    # Scales the texture associated with the geometry along the X axis.
    eStkGraphicsModelTransformationTypeTextureScaleX = 16
    # Scales the texture associated with the geometry along the Y axis.
    eStkGraphicsModelTransformationTypeTextureScaleY = 17
    # Scales the texture associated with the geometry along the Z axis.
    eStkGraphicsModelTransformationTypeTextureScaleZ = 18
    # Scales the texture associated with the geometry uniformly along the X, Y, and Z axes.
    eStkGraphicsModelTransformationTypeTextureScaleUniform = 19
    # Translates the red band of color associated with the geometry.
    eStkGraphicsModelTransformationTypeTranslateRed = 20
    # Translates the green band of color associated with the geometry.
    eStkGraphicsModelTransformationTypeTranslateGreen = 21
    # Translates the blue band of color associated with the geometry.
    eStkGraphicsModelTransformationTypeTranslateBlue = 22

AgEStkGraphicsModelTransformationType.eStkGraphicsModelTransformationTypeTranslateX.__doc__ = "Translates the geometry along the X axis."
AgEStkGraphicsModelTransformationType.eStkGraphicsModelTransformationTypeTranslateY.__doc__ = "Translates the geometry along the Y axis."
AgEStkGraphicsModelTransformationType.eStkGraphicsModelTransformationTypeTranslateZ.__doc__ = "Translates the geometry along the Z axis."
AgEStkGraphicsModelTransformationType.eStkGraphicsModelTransformationTypeRotateX.__doc__ = "Rotates the geometry about the X axis."
AgEStkGraphicsModelTransformationType.eStkGraphicsModelTransformationTypeRotateY.__doc__ = "Rotates the geometry about the Y axis."
AgEStkGraphicsModelTransformationType.eStkGraphicsModelTransformationTypeRotateZ.__doc__ = "Rotates the geometry about the Z axis."
AgEStkGraphicsModelTransformationType.eStkGraphicsModelTransformationTypeScaleX.__doc__ = "Scales the geometry along the X axis."
AgEStkGraphicsModelTransformationType.eStkGraphicsModelTransformationTypeScaleY.__doc__ = "Scales the geometry along the Y axis."
AgEStkGraphicsModelTransformationType.eStkGraphicsModelTransformationTypeScaleZ.__doc__ = "Scales the geometry along the Z axis."
AgEStkGraphicsModelTransformationType.eStkGraphicsModelTransformationTypeScaleUniform.__doc__ = "Scales the geometry uniformly along the X, Y, and Z axes."
AgEStkGraphicsModelTransformationType.eStkGraphicsModelTransformationTypeTextureTranslateX.__doc__ = "Translates the texture associated with the geometry along the X axis."
AgEStkGraphicsModelTransformationType.eStkGraphicsModelTransformationTypeTextureTranslateY.__doc__ = "Translates the texture associated with the geometry along the Y axis."
AgEStkGraphicsModelTransformationType.eStkGraphicsModelTransformationTypeTextureTranslateZ.__doc__ = "Translates the texture associated with the geometry along the Z axis."
AgEStkGraphicsModelTransformationType.eStkGraphicsModelTransformationTypeTextureRotateX.__doc__ = "Rotates the texture associated with the geometry about the X axis."
AgEStkGraphicsModelTransformationType.eStkGraphicsModelTransformationTypeTextureRotateY.__doc__ = "Rotates the texture associated with the geometry about the Y axis."
AgEStkGraphicsModelTransformationType.eStkGraphicsModelTransformationTypeTextureRotateZ.__doc__ = "Rotates the texture associated with the geometry about the Z axis."
AgEStkGraphicsModelTransformationType.eStkGraphicsModelTransformationTypeTextureScaleX.__doc__ = "Scales the texture associated with the geometry along the X axis."
AgEStkGraphicsModelTransformationType.eStkGraphicsModelTransformationTypeTextureScaleY.__doc__ = "Scales the texture associated with the geometry along the Y axis."
AgEStkGraphicsModelTransformationType.eStkGraphicsModelTransformationTypeTextureScaleZ.__doc__ = "Scales the texture associated with the geometry along the Z axis."
AgEStkGraphicsModelTransformationType.eStkGraphicsModelTransformationTypeTextureScaleUniform.__doc__ = "Scales the texture associated with the geometry uniformly along the X, Y, and Z axes."
AgEStkGraphicsModelTransformationType.eStkGraphicsModelTransformationTypeTranslateRed.__doc__ = "Translates the red band of color associated with the geometry."
AgEStkGraphicsModelTransformationType.eStkGraphicsModelTransformationTypeTranslateGreen.__doc__ = "Translates the green band of color associated with the geometry."
AgEStkGraphicsModelTransformationType.eStkGraphicsModelTransformationTypeTranslateBlue.__doc__ = "Translates the blue band of color associated with the geometry."

agcls.AgTypeNameMap["AgEStkGraphicsModelTransformationType"] = AgEStkGraphicsModelTransformationType

class AgEStkGraphicsOrigin(IntEnum):
    """Vertical and horizontal origin."""
    # The object's origin is its bottom, left corner.
    eStkGraphicsOriginBottomLeft = 0
    # The object's origin is its bottom, center point.
    eStkGraphicsOriginBottomCenter = 1
    # The object's origin is its bottom, right corner.
    eStkGraphicsOriginBottomRight = 2
    # The object's origin is its center, left point.
    eStkGraphicsOriginCenterLeft = 3
    # The object's origin is its center.
    eStkGraphicsOriginCenter = 4
    # The object's origin is its center, right point.
    eStkGraphicsOriginCenterRight = 5
    # The object's origin is its top, left corner.
    eStkGraphicsOriginTopLeft = 6
    # The object's origin is its top, center point.
    eStkGraphicsOriginTopCenter = 7
    # The object's origin is its top, right corner.
    eStkGraphicsOriginTopRight = 8

AgEStkGraphicsOrigin.eStkGraphicsOriginBottomLeft.__doc__ = "The object's origin is its bottom, left corner."
AgEStkGraphicsOrigin.eStkGraphicsOriginBottomCenter.__doc__ = "The object's origin is its bottom, center point."
AgEStkGraphicsOrigin.eStkGraphicsOriginBottomRight.__doc__ = "The object's origin is its bottom, right corner."
AgEStkGraphicsOrigin.eStkGraphicsOriginCenterLeft.__doc__ = "The object's origin is its center, left point."
AgEStkGraphicsOrigin.eStkGraphicsOriginCenter.__doc__ = "The object's origin is its center."
AgEStkGraphicsOrigin.eStkGraphicsOriginCenterRight.__doc__ = "The object's origin is its center, right point."
AgEStkGraphicsOrigin.eStkGraphicsOriginTopLeft.__doc__ = "The object's origin is its top, left corner."
AgEStkGraphicsOrigin.eStkGraphicsOriginTopCenter.__doc__ = "The object's origin is its top, center point."
AgEStkGraphicsOrigin.eStkGraphicsOriginTopRight.__doc__ = "The object's origin is its top, right corner."

agcls.AgTypeNameMap["AgEStkGraphicsOrigin"] = AgEStkGraphicsOrigin

class AgEStkGraphicsPathPrimitiveRemoveLocation(IntEnum):
    """Represents the location of a point to be removed."""
    # Remove from the front of the line.
    eStkGraphicsRemoveLocationFront = 0
    # Remove from the back of the line.
    eStkGraphicsRemoveLocationBack = 1

AgEStkGraphicsPathPrimitiveRemoveLocation.eStkGraphicsRemoveLocationFront.__doc__ = "Remove from the front of the line."
AgEStkGraphicsPathPrimitiveRemoveLocation.eStkGraphicsRemoveLocationBack.__doc__ = "Remove from the back of the line."

agcls.AgTypeNameMap["AgEStkGraphicsPathPrimitiveRemoveLocation"] = AgEStkGraphicsPathPrimitiveRemoveLocation

class AgEStkGraphicsPrimitivesSortOrder(IntEnum):
    """The order in which primitives are sorted before rendering."""
    # Primitives are sorted by their internal state before rendering. This provides good performance but can lead to blending artifacts with translucent primitives along the same line of sight.
    eStkGraphicsPrimitivesSortOrderByState = 0
    # Primitives are sorted in back to front order before rendering. For translucent primitives, this enables correct blending results. This may not perform as well as PrimitivesSortOrderByState since the CPU has to sort the primitives before rendering.
    eStkGraphicsPrimitivesSortOrderBackToFront = 1

AgEStkGraphicsPrimitivesSortOrder.eStkGraphicsPrimitivesSortOrderByState.__doc__ = "Primitives are sorted by their internal state before rendering. This provides good performance but can lead to blending artifacts with translucent primitives along the same line of sight."
AgEStkGraphicsPrimitivesSortOrder.eStkGraphicsPrimitivesSortOrderBackToFront.__doc__ = "Primitives are sorted in back to front order before rendering. For translucent primitives, this enables correct blending results. This may not perform as well as PrimitivesSortOrderByState since the CPU has to sort the primitives before rendering."

agcls.AgTypeNameMap["AgEStkGraphicsPrimitivesSortOrder"] = AgEStkGraphicsPrimitivesSortOrder

class AgEStkGraphicsRefreshRate(IntEnum):
    """The rate at which animation frames will occur."""
    # The animation will occur as fast as possible. The maximum frame rate is the refresh rate of the display or is the maximum that video card is capable of if the video card's vertical sync is off.
    eStkGraphicsRefreshRateFastest = 0
    # The animation will target a specified frame rate.
    eStkGraphicsRefreshRateTargetedFramesPerSecond = 1

AgEStkGraphicsRefreshRate.eStkGraphicsRefreshRateFastest.__doc__ = "The animation will occur as fast as possible. The maximum frame rate is the refresh rate of the display or is the maximum that video card is capable of if the video card's vertical sync is off."
AgEStkGraphicsRefreshRate.eStkGraphicsRefreshRateTargetedFramesPerSecond.__doc__ = "The animation will target a specified frame rate."

agcls.AgTypeNameMap["AgEStkGraphicsRefreshRate"] = AgEStkGraphicsRefreshRate

class AgEStkGraphicsRenderPass(IntFlag):
    """Describes when a primitive will be rendered. Some primitives need to be rendered during or at a certain time. For example, translucent primitives need to be rendered after opaque primitives to allow proper blending..."""
    # Render during the opaque rendering pass.
    eStkGraphicsRenderPassOpaque = 1
    # Render during the translucent rendering pass.
    eStkGraphicsRenderPassTranslucent = 2
    # Render before the central body is rendered.
    eStkGraphicsRenderPassCentralBodyClipped = 4
    # Rendered in an ordered composite before all other primitives and before the central body is rendered.
    eStkGraphicsRenderPassOrderedCompositeCentralBodyClipped = 8
    # Rendered in an ordered composite before all primitives but after the central body is rendered.
    eStkGraphicsRenderPassOrderedComposite = 16
    # Render after the terrain is rendered.
    eStkGraphicsRenderPassTerrain = 32

AgEStkGraphicsRenderPass.eStkGraphicsRenderPassOpaque.__doc__ = "Render during the opaque rendering pass."
AgEStkGraphicsRenderPass.eStkGraphicsRenderPassTranslucent.__doc__ = "Render during the translucent rendering pass."
AgEStkGraphicsRenderPass.eStkGraphicsRenderPassCentralBodyClipped.__doc__ = "Render before the central body is rendered."
AgEStkGraphicsRenderPass.eStkGraphicsRenderPassOrderedCompositeCentralBodyClipped.__doc__ = "Rendered in an ordered composite before all other primitives and before the central body is rendered."
AgEStkGraphicsRenderPass.eStkGraphicsRenderPassOrderedComposite.__doc__ = "Rendered in an ordered composite before all primitives but after the central body is rendered."
AgEStkGraphicsRenderPass.eStkGraphicsRenderPassTerrain.__doc__ = "Render after the terrain is rendered."

agcls.AgTypeNameMap["AgEStkGraphicsRenderPass"] = AgEStkGraphicsRenderPass

class AgEStkGraphicsRenderPassHint(IntEnum):
    """An optimization hint optionally provided to a primitive'sSet method to enhance performance when per-position colors are used."""
    # The collection of colors contains only opaque colors. This implies that each color's alpha component is 255.
    eStkGraphicsRenderPassHintOpaque = 0
    # The collection of colors contains translucent colors. This implies that at least one color has an alpha component that is not 255.
    eStkGraphicsRenderPassHintTranslucent = 1
    # It is unknown if the collection of colors contains opaque or translucent colors.
    eStkGraphicsRenderPassHintUnknown = 2

AgEStkGraphicsRenderPassHint.eStkGraphicsRenderPassHintOpaque.__doc__ = "The collection of colors contains only opaque colors. This implies that each color's alpha component is 255."
AgEStkGraphicsRenderPassHint.eStkGraphicsRenderPassHintTranslucent.__doc__ = "The collection of colors contains translucent colors. This implies that at least one color has an alpha component that is not 255."
AgEStkGraphicsRenderPassHint.eStkGraphicsRenderPassHintUnknown.__doc__ = "It is unknown if the collection of colors contains opaque or translucent colors."

agcls.AgTypeNameMap["AgEStkGraphicsRenderPassHint"] = AgEStkGraphicsRenderPassHint

class AgEStkGraphicsScreenOverlayOrigin(IntEnum):
    """Specifies the origin of a screen overlay, as well as the direction of the horizontal and vertical axes. The origin specifies both the origin in the parent overlay's coordinate system and the origin within the overlay itself that is positioned."""
    # When the X and Y position are both set to 0, this value places the bottom, left corner of the overlay in its parent's bottom, left corner. Increasing X values move the overlay to the right and increasing Y values move it up.
    eStkGraphicsScreenOverlayOriginBottomLeft = 0
    # When the X and Y position are both set to 0, this value places the bottom edge of the overlay at its parent's bottom edge and the center of the overlay is horizontally centered within its parent...
    eStkGraphicsScreenOverlayOriginBottomCenter = 1
    # When the X and Y position are both set to 0, this value places the bottom, right corner of the overlay in its parent's bottom, right corner. Increasing X values move the overlay to the left and increasing Y values move it up.
    eStkGraphicsScreenOverlayOriginBottomRight = 2
    # When the X and Y position are both set to 0, this value places the left edge of the overlay at its parent's left edge and the center of the overlay is vertically centered within its parent...
    eStkGraphicsScreenOverlayOriginCenterLeft = 3
    # When the X and Y position are both set to 0, this value places the center of the overlay at its parent's center. Increasing X values move the overlay to the right and increasing Y values move it up.
    eStkGraphicsScreenOverlayOriginCenter = 4
    # When the X and Y position are both set to 0, this value places the right edge of the overlay at its parent's right edge and the center of the overlay is vertically centered within its parent...
    eStkGraphicsScreenOverlayOriginCenterRight = 5
    # When the X and Y position are both set to 0, this value places the top, left corner of the overlay in its parent's top, left corner. Increasing X values move the overlay to the right and increasing Y values move it down.
    eStkGraphicsScreenOverlayOriginTopLeft = 6
    # When the X and Y position are both set to 0, this value places the top edge of the overlay at its parent's top edge and the center of the overlay is horizontally centered within its parent...
    eStkGraphicsScreenOverlayOriginTopCenter = 7
    # When the X and Y position are both set to 0, this value places the top, right corner of the overlay in its parent's top, right corner. Increasing X values move the overlay to the left and increasing Y values move it down.
    eStkGraphicsScreenOverlayOriginTopRight = 8

AgEStkGraphicsScreenOverlayOrigin.eStkGraphicsScreenOverlayOriginBottomLeft.__doc__ = "When the X and Y position are both set to 0, this value places the bottom, left corner of the overlay in its parent's bottom, left corner. Increasing X values move the overlay to the right and increasing Y values move it up."
AgEStkGraphicsScreenOverlayOrigin.eStkGraphicsScreenOverlayOriginBottomCenter.__doc__ = "When the X and Y position are both set to 0, this value places the bottom edge of the overlay at its parent's bottom edge and the center of the overlay is horizontally centered within its parent..."
AgEStkGraphicsScreenOverlayOrigin.eStkGraphicsScreenOverlayOriginBottomRight.__doc__ = "When the X and Y position are both set to 0, this value places the bottom, right corner of the overlay in its parent's bottom, right corner. Increasing X values move the overlay to the left and increasing Y values move it up."
AgEStkGraphicsScreenOverlayOrigin.eStkGraphicsScreenOverlayOriginCenterLeft.__doc__ = "When the X and Y position are both set to 0, this value places the left edge of the overlay at its parent's left edge and the center of the overlay is vertically centered within its parent..."
AgEStkGraphicsScreenOverlayOrigin.eStkGraphicsScreenOverlayOriginCenter.__doc__ = "When the X and Y position are both set to 0, this value places the center of the overlay at its parent's center. Increasing X values move the overlay to the right and increasing Y values move it up."
AgEStkGraphicsScreenOverlayOrigin.eStkGraphicsScreenOverlayOriginCenterRight.__doc__ = "When the X and Y position are both set to 0, this value places the right edge of the overlay at its parent's right edge and the center of the overlay is vertically centered within its parent..."
AgEStkGraphicsScreenOverlayOrigin.eStkGraphicsScreenOverlayOriginTopLeft.__doc__ = "When the X and Y position are both set to 0, this value places the top, left corner of the overlay in its parent's top, left corner. Increasing X values move the overlay to the right and increasing Y values move it down."
AgEStkGraphicsScreenOverlayOrigin.eStkGraphicsScreenOverlayOriginTopCenter.__doc__ = "When the X and Y position are both set to 0, this value places the top edge of the overlay at its parent's top edge and the center of the overlay is horizontally centered within its parent..."
AgEStkGraphicsScreenOverlayOrigin.eStkGraphicsScreenOverlayOriginTopRight.__doc__ = "When the X and Y position are both set to 0, this value places the top, right corner of the overlay in its parent's top, right corner. Increasing X values move the overlay to the left and increasing Y values move it down."

agcls.AgTypeNameMap["AgEStkGraphicsScreenOverlayOrigin"] = AgEStkGraphicsScreenOverlayOrigin

class AgEStkGraphicsScreenOverlayPinningOrigin(IntEnum):
    """Specifies the origin of the pinning position of the screen overlay, as well as the direction of the horizontal and vertical axes for that pinning position. The pinning origin specifies the origin of the pinning position in the overlay's coordinate system."""
    # When the X and Y pinning position are both set to 0, this value places the pinning position in the overlay's bottom, left corner. Increasing X values move the pinning position to the right and increasing Y values move it up.
    eStkGraphicsScreenOverlayPinningOriginBottomLeft = 0
    # When the X and Y pinning position are both set to 0, this value places the pinning position at its overlay's bottom edge and the pinning position is horizontally centered within its overlay...
    eStkGraphicsScreenOverlayPinningOriginBottomCenter = 1
    # When the X and Y pinning position are both set to 0, this value places the pinning position in its overlay's bottom, right corner. Increasing X values move the pinning position to the left and increasing Y values move it up.
    eStkGraphicsScreenOverlayPinningOriginBottomRight = 2
    # When the X and Y pinning position are both set to 0, this value places the pinning position at its overlay's left edge and the pinning position is vertically centered within its overlay...
    eStkGraphicsScreenOverlayPinningOriginCenterLeft = 3
    # When the X and Y pinning position are both set to 0, this value places the pinning position at its overlay's center. Increasing X values move the pinning position to the right and increasing Y values move it up.
    eStkGraphicsScreenOverlayPinningOriginCenter = 4
    # When the X and Y pinning pinning position are both set to 0, this value places the pinning position at its overlay's right edge and the pinning position is vertically centered within its overlay...
    eStkGraphicsScreenOverlayPinningOriginCenterRight = 5
    # When the X and Y pinning position are both set to 0, this value places the pinning position in its overlay's top, left corner. Increasing X values move the pinning position to the right and increasing Y values move it down.
    eStkGraphicsScreenOverlayPinningOriginTopLeft = 6
    # When the X and Y pinning position are both set to 0, this value places the pinning position at its overlays's top edge and the pinning position is horizontally centered within its overlay...
    eStkGraphicsScreenOverlayPinningOriginTopCenter = 7
    # When the X and Y pinning position are both set to 0, this value places the pinning position in its overlay's top, right corner. Increasing X values move the pinning position to the left and increasing Y values move it down.
    eStkGraphicsScreenOverlayPinningOriginTopRight = 8
    # The pinning origin is automatically set to the origin of the overlay. For instance, if the origin of the overlay is ScreenOverlayOrigin.BottomLeft, the pinning origin will also be equivalent to ScreenOverlayPinningOrigin.BottomLeft.
    eStkGraphicsScreenOverlayPinningOriginAutomatic = 9

AgEStkGraphicsScreenOverlayPinningOrigin.eStkGraphicsScreenOverlayPinningOriginBottomLeft.__doc__ = "When the X and Y pinning position are both set to 0, this value places the pinning position in the overlay's bottom, left corner. Increasing X values move the pinning position to the right and increasing Y values move it up."
AgEStkGraphicsScreenOverlayPinningOrigin.eStkGraphicsScreenOverlayPinningOriginBottomCenter.__doc__ = "When the X and Y pinning position are both set to 0, this value places the pinning position at its overlay's bottom edge and the pinning position is horizontally centered within its overlay..."
AgEStkGraphicsScreenOverlayPinningOrigin.eStkGraphicsScreenOverlayPinningOriginBottomRight.__doc__ = "When the X and Y pinning position are both set to 0, this value places the pinning position in its overlay's bottom, right corner. Increasing X values move the pinning position to the left and increasing Y values move it up."
AgEStkGraphicsScreenOverlayPinningOrigin.eStkGraphicsScreenOverlayPinningOriginCenterLeft.__doc__ = "When the X and Y pinning position are both set to 0, this value places the pinning position at its overlay's left edge and the pinning position is vertically centered within its overlay..."
AgEStkGraphicsScreenOverlayPinningOrigin.eStkGraphicsScreenOverlayPinningOriginCenter.__doc__ = "When the X and Y pinning position are both set to 0, this value places the pinning position at its overlay's center. Increasing X values move the pinning position to the right and increasing Y values move it up."
AgEStkGraphicsScreenOverlayPinningOrigin.eStkGraphicsScreenOverlayPinningOriginCenterRight.__doc__ = "When the X and Y pinning pinning position are both set to 0, this value places the pinning position at its overlay's right edge and the pinning position is vertically centered within its overlay..."
AgEStkGraphicsScreenOverlayPinningOrigin.eStkGraphicsScreenOverlayPinningOriginTopLeft.__doc__ = "When the X and Y pinning position are both set to 0, this value places the pinning position in its overlay's top, left corner. Increasing X values move the pinning position to the right and increasing Y values move it down."
AgEStkGraphicsScreenOverlayPinningOrigin.eStkGraphicsScreenOverlayPinningOriginTopCenter.__doc__ = "When the X and Y pinning position are both set to 0, this value places the pinning position at its overlays's top edge and the pinning position is horizontally centered within its overlay..."
AgEStkGraphicsScreenOverlayPinningOrigin.eStkGraphicsScreenOverlayPinningOriginTopRight.__doc__ = "When the X and Y pinning position are both set to 0, this value places the pinning position in its overlay's top, right corner. Increasing X values move the pinning position to the left and increasing Y values move it down."
AgEStkGraphicsScreenOverlayPinningOrigin.eStkGraphicsScreenOverlayPinningOriginAutomatic.__doc__ = "The pinning origin is automatically set to the origin of the overlay. For instance, if the origin of the overlay is ScreenOverlayOrigin.BottomLeft, the pinning origin will also be equivalent to ScreenOverlayPinningOrigin.BottomLeft."

agcls.AgTypeNameMap["AgEStkGraphicsScreenOverlayPinningOrigin"] = AgEStkGraphicsScreenOverlayPinningOrigin

class AgEStkGraphicsScreenOverlayUnit(IntEnum):
    """A unit specifying how a screen overlay is sized and positioned relative to its parent."""
    # The value is specified in pixels.
    eStkGraphicsScreenOverlayUnitPixels = 0
    # The value is specified as a fraction of the overlay's parent, where 0.0 is 0% and 1.0 is 100%.
    eStkGraphicsScreenOverlayUnitFraction = 1

AgEStkGraphicsScreenOverlayUnit.eStkGraphicsScreenOverlayUnitPixels.__doc__ = "The value is specified in pixels."
AgEStkGraphicsScreenOverlayUnit.eStkGraphicsScreenOverlayUnitFraction.__doc__ = "The value is specified as a fraction of the overlay's parent, where 0.0 is 0% and 1.0 is 100%."

agcls.AgTypeNameMap["AgEStkGraphicsScreenOverlayUnit"] = AgEStkGraphicsScreenOverlayUnit

class AgEStkGraphicsSurfaceMeshRenderingMethod(IntEnum):
    """Rendering methods available for use by the surface mesh primitive. Different methods may have different performance characteristics and require different video card support. When in doubt, use Automatic."""
    # Render the surface mesh using a geometry shader.
    eStkGraphicsSurfaceMeshRenderingMethodGeometryShader = 0
    # Render the surface mesh using a vertex shader.
    eStkGraphicsSurfaceMeshRenderingMethodVertexShader = 1
    # Render the surface mesh using an automatically selected method based on the capabilities of the video card.
    eStkGraphicsSurfaceMeshRenderingMethodAutomatic = 2

AgEStkGraphicsSurfaceMeshRenderingMethod.eStkGraphicsSurfaceMeshRenderingMethodGeometryShader.__doc__ = "Render the surface mesh using a geometry shader."
AgEStkGraphicsSurfaceMeshRenderingMethod.eStkGraphicsSurfaceMeshRenderingMethodVertexShader.__doc__ = "Render the surface mesh using a vertex shader."
AgEStkGraphicsSurfaceMeshRenderingMethod.eStkGraphicsSurfaceMeshRenderingMethodAutomatic.__doc__ = "Render the surface mesh using an automatically selected method based on the capabilities of the video card."

agcls.AgTypeNameMap["AgEStkGraphicsSurfaceMeshRenderingMethod"] = AgEStkGraphicsSurfaceMeshRenderingMethod

class AgEStkGraphicsVisibility(IntEnum):
    """Result of a visibility test, such as testing if a sphere intersects a frustum."""
    # The object is not visible.
    eStkGraphicsVisibilityNone = 0
    # The object is partially visible.
    eStkGraphicsVisibilityPartial = 1
    # The object is completely visible.
    eStkGraphicsVisibilityAll = 2

AgEStkGraphicsVisibility.eStkGraphicsVisibilityNone.__doc__ = "The object is not visible."
AgEStkGraphicsVisibility.eStkGraphicsVisibilityPartial.__doc__ = "The object is partially visible."
AgEStkGraphicsVisibility.eStkGraphicsVisibilityAll.__doc__ = "The object is completely visible."

agcls.AgTypeNameMap["AgEStkGraphicsVisibility"] = AgEStkGraphicsVisibility

class AgEStkGraphicsAntiAliasing(IntEnum):
    """The multisample anti-aliasing (MSAA) options for Scenes. As the level of anti-aliasing increases, performance will generally decrease, but the quality of the anti-aliasing will improve."""
    # No anti-aliasing
    eStkGraphicsAntiAliasingOff = 0
    # Fast Approximate Anti aliasing
    eStkGraphicsAntiAliasingFXAA = 1
    # Anti-aliasing at 2x
    eStkGraphicsAntiAliasingTwoX = 2
    # Anti-aliasing at 4x
    eStkGraphicsAntiAliasingFourX = 4
    # Anti-aliasing at 8x
    eStkGraphicsAntiAliasingEightX = 8
    # Anti-aliasing at 16x
    eStkGraphicsAntiAliasingSixteenX = 16
    # Anti-aliasing at 32x
    eStkGraphicsAntiAliasingThirtyTwoX = 32
    # Anti-aliasing at 64x
    eStkGraphicsAntiAliasingSixtyFourX = 64

AgEStkGraphicsAntiAliasing.eStkGraphicsAntiAliasingOff.__doc__ = "No anti-aliasing"
AgEStkGraphicsAntiAliasing.eStkGraphicsAntiAliasingFXAA.__doc__ = "Fast Approximate Anti aliasing"
AgEStkGraphicsAntiAliasing.eStkGraphicsAntiAliasingTwoX.__doc__ = "Anti-aliasing at 2x"
AgEStkGraphicsAntiAliasing.eStkGraphicsAntiAliasingFourX.__doc__ = "Anti-aliasing at 4x"
AgEStkGraphicsAntiAliasing.eStkGraphicsAntiAliasingEightX.__doc__ = "Anti-aliasing at 8x"
AgEStkGraphicsAntiAliasing.eStkGraphicsAntiAliasingSixteenX.__doc__ = "Anti-aliasing at 16x"
AgEStkGraphicsAntiAliasing.eStkGraphicsAntiAliasingThirtyTwoX.__doc__ = "Anti-aliasing at 32x"
AgEStkGraphicsAntiAliasing.eStkGraphicsAntiAliasingSixtyFourX.__doc__ = "Anti-aliasing at 64x"

agcls.AgTypeNameMap["AgEStkGraphicsAntiAliasing"] = AgEStkGraphicsAntiAliasing

class AgEStkGraphicsBinaryLogicOperation(IntEnum):
    """Binary logic operations that can be used by composite display condition."""
    # Logically and together display conditions in the composite.
    eStkGraphicsBinaryLogicOperationAnd = 0
    # Logically or together display conditions in the composite.
    eStkGraphicsBinaryLogicOperationOr = 1

AgEStkGraphicsBinaryLogicOperation.eStkGraphicsBinaryLogicOperationAnd.__doc__ = "Logically and together display conditions in the composite."
AgEStkGraphicsBinaryLogicOperation.eStkGraphicsBinaryLogicOperationOr.__doc__ = "Logically or together display conditions in the composite."

agcls.AgTypeNameMap["AgEStkGraphicsBinaryLogicOperation"] = AgEStkGraphicsBinaryLogicOperation

class AgEStkGraphicsBlurMethod(IntEnum):
    """The method used to blur or smooth a raster."""
    # Provides smoothing and noise reduction through mean filtering.
    eStkGraphicsBlurMethodMean = 0
    # Provides basic blurring.
    eStkGraphicsBlurMethodBasic = 1

AgEStkGraphicsBlurMethod.eStkGraphicsBlurMethodMean.__doc__ = "Provides smoothing and noise reduction through mean filtering."
AgEStkGraphicsBlurMethod.eStkGraphicsBlurMethodBasic.__doc__ = "Provides basic blurring."

agcls.AgTypeNameMap["AgEStkGraphicsBlurMethod"] = AgEStkGraphicsBlurMethod

class AgEStkGraphicsEdgeDetectMethod(IntEnum):
    """The method used to detect edges in a raster."""
    # Detects vertical edges.
    eStkGraphicsEdgeDetectMethodVertical = 0
    # Detects horizontal edges.
    eStkGraphicsEdgeDetectMethodHorizontal = 1
    # Detects left diagonal edges.
    eStkGraphicsEdgeDetectMethodLeftDiagonal = 2
    # Detects right diagonal edges.
    eStkGraphicsEdgeDetectMethodRightDiagonal = 3
    # Detects edges using the Laplacian method.
    eStkGraphicsEdgeDetectMethodLaplacian = 4
    # Detects edges using the Prewitt-Laplacian method.
    eStkGraphicsEdgeDetectMethodPrewittLaplacian = 5
    # Detects vertical edges using the Sobel method.
    eStkGraphicsEdgeDetectMethodSobelVertical = 6
    # Detects horizontal edges using the Sobel method.
    eStkGraphicsEdgeDetectMethodSobelHorizontal = 7

AgEStkGraphicsEdgeDetectMethod.eStkGraphicsEdgeDetectMethodVertical.__doc__ = "Detects vertical edges."
AgEStkGraphicsEdgeDetectMethod.eStkGraphicsEdgeDetectMethodHorizontal.__doc__ = "Detects horizontal edges."
AgEStkGraphicsEdgeDetectMethod.eStkGraphicsEdgeDetectMethodLeftDiagonal.__doc__ = "Detects left diagonal edges."
AgEStkGraphicsEdgeDetectMethod.eStkGraphicsEdgeDetectMethodRightDiagonal.__doc__ = "Detects right diagonal edges."
AgEStkGraphicsEdgeDetectMethod.eStkGraphicsEdgeDetectMethodLaplacian.__doc__ = "Detects edges using the Laplacian method."
AgEStkGraphicsEdgeDetectMethod.eStkGraphicsEdgeDetectMethodPrewittLaplacian.__doc__ = "Detects edges using the Prewitt-Laplacian method."
AgEStkGraphicsEdgeDetectMethod.eStkGraphicsEdgeDetectMethodSobelVertical.__doc__ = "Detects vertical edges using the Sobel method."
AgEStkGraphicsEdgeDetectMethod.eStkGraphicsEdgeDetectMethodSobelHorizontal.__doc__ = "Detects horizontal edges using the Sobel method."

agcls.AgTypeNameMap["AgEStkGraphicsEdgeDetectMethod"] = AgEStkGraphicsEdgeDetectMethod

class AgEStkGraphicsFlipAxis(IntEnum):
    """The axis on which a raster will be flipped."""
    # The horizontal axis.
    eStkGraphicsFlipAxisHorizontal = 0
    # The vertical axis.
    eStkGraphicsFlipAxisVertical = 1

AgEStkGraphicsFlipAxis.eStkGraphicsFlipAxisHorizontal.__doc__ = "The horizontal axis."
AgEStkGraphicsFlipAxis.eStkGraphicsFlipAxisVertical.__doc__ = "The vertical axis."

agcls.AgTypeNameMap["AgEStkGraphicsFlipAxis"] = AgEStkGraphicsFlipAxis

class AgEStkGraphicsGradientDetectMethod(IntEnum):
    """The method used to detect gradients in a raster. Gradient detection is commonly referred to as embossing."""
    # Detects east gradients.
    eStkGraphicsGradientDetectMethodEast = 0
    # Detects north gradients.
    eStkGraphicsGradientDetectMethodNorth = 1
    # Detects west gradients.
    eStkGraphicsGradientDetectMethodWest = 2
    # Detects south gradients.
    eStkGraphicsGradientDetectMethodSouth = 3
    # Detects north east gradients.
    eStkGraphicsGradientDetectMethodNorthEast = 4
    # Detects north west gradients.
    eStkGraphicsGradientDetectMethodNorthWest = 5
    # Detects south east gradients.
    eStkGraphicsGradientDetectMethodSouthEast = 6
    # Detects south west gradients.
    eStkGraphicsGradientDetectMethodSouthWest = 7

AgEStkGraphicsGradientDetectMethod.eStkGraphicsGradientDetectMethodEast.__doc__ = "Detects east gradients."
AgEStkGraphicsGradientDetectMethod.eStkGraphicsGradientDetectMethodNorth.__doc__ = "Detects north gradients."
AgEStkGraphicsGradientDetectMethod.eStkGraphicsGradientDetectMethodWest.__doc__ = "Detects west gradients."
AgEStkGraphicsGradientDetectMethod.eStkGraphicsGradientDetectMethodSouth.__doc__ = "Detects south gradients."
AgEStkGraphicsGradientDetectMethod.eStkGraphicsGradientDetectMethodNorthEast.__doc__ = "Detects north east gradients."
AgEStkGraphicsGradientDetectMethod.eStkGraphicsGradientDetectMethodNorthWest.__doc__ = "Detects north west gradients."
AgEStkGraphicsGradientDetectMethod.eStkGraphicsGradientDetectMethodSouthEast.__doc__ = "Detects south east gradients."
AgEStkGraphicsGradientDetectMethod.eStkGraphicsGradientDetectMethodSouthWest.__doc__ = "Detects south west gradients."

agcls.AgTypeNameMap["AgEStkGraphicsGradientDetectMethod"] = AgEStkGraphicsGradientDetectMethod

class AgEStkGraphicsJpeg2000CompressionProfile(IntEnum):
    """Defines the profile used when encoding a JPEG 2000 file."""
    # This is the default profile, which is recommended for those unfamiliar with the others.
    eStkGraphicsJpeg2000CompressionProfileDefault = 0
    # This profile is designed for U.S. and NATO military applications.
    eStkGraphicsJpeg2000CompressionProfileNITF_BIIF_NPJE = 1
    # This profile is designed for U.S. and NATO military applications. Based on NPJE, the profile is used for image exploitation, and improves image read times for lower resolutions in large images as compared to NPJE.
    eStkGraphicsJpeg2000CompressionProfileNITF_BIIF_EPJE = 2

AgEStkGraphicsJpeg2000CompressionProfile.eStkGraphicsJpeg2000CompressionProfileDefault.__doc__ = "This is the default profile, which is recommended for those unfamiliar with the others."
AgEStkGraphicsJpeg2000CompressionProfile.eStkGraphicsJpeg2000CompressionProfileNITF_BIIF_NPJE.__doc__ = "This profile is designed for U.S. and NATO military applications."
AgEStkGraphicsJpeg2000CompressionProfile.eStkGraphicsJpeg2000CompressionProfileNITF_BIIF_EPJE.__doc__ = "This profile is designed for U.S. and NATO military applications. Based on NPJE, the profile is used for image exploitation, and improves image read times for lower resolutions in large images as compared to NPJE."

agcls.AgTypeNameMap["AgEStkGraphicsJpeg2000CompressionProfile"] = AgEStkGraphicsJpeg2000CompressionProfile

class AgEStkGraphicsRasterBand(IntEnum):
    """Common band types that may be contained within a raster dataset. Each band can be thought of as a set of values, which are most commonly associated with colors when the raster represents an image..."""
    # A band containing red values.
    eStkGraphicsRasterBandRed = 0
    # A band containing green values.
    eStkGraphicsRasterBandGreen = 1
    # A band containing blue values.
    eStkGraphicsRasterBandBlue = 2
    # A band containing alpha values.
    eStkGraphicsRasterBandAlpha = 3
    # A band containing luminance values.
    eStkGraphicsRasterBandLuminance = 4

AgEStkGraphicsRasterBand.eStkGraphicsRasterBandRed.__doc__ = "A band containing red values."
AgEStkGraphicsRasterBand.eStkGraphicsRasterBandGreen.__doc__ = "A band containing green values."
AgEStkGraphicsRasterBand.eStkGraphicsRasterBandBlue.__doc__ = "A band containing blue values."
AgEStkGraphicsRasterBand.eStkGraphicsRasterBandAlpha.__doc__ = "A band containing alpha values."
AgEStkGraphicsRasterBand.eStkGraphicsRasterBandLuminance.__doc__ = "A band containing luminance values."

agcls.AgTypeNameMap["AgEStkGraphicsRasterBand"] = AgEStkGraphicsRasterBand

class AgEStkGraphicsRasterFormat(IntEnum):
    """Common raster band layouts that may be contained within a raster dataset. Each pixel of the raster will contain the bands defined by the layout in the specified order. A typical color raster image will have an rgbraster format."""
    # The format of the raster is a single band consisting of red values.
    eStkGraphicsRasterFormatRed = 0
    # The format of the raster is a single band consisting of green values.
    eStkGraphicsRasterFormatGreen = 1
    # The format of the raster is a single band consisting of blue values.
    eStkGraphicsRasterFormatBlue = 2
    # The format of the raster is a single band consisting of alpha values.
    eStkGraphicsRasterFormatAlpha = 3
    # The format of the raster is three bands consisting of red, green, and blue values.
    eStkGraphicsRasterFormatRgb = 4
    # The format of the raster is three bands consisting of blue, green, and red values.
    eStkGraphicsRasterFormatBgr = 5
    # The format of the raster is four bands consisting of red, green, blue, and alpha values.
    eStkGraphicsRasterFormatRgba = 6
    # The format of the raster is four bands consisting of blue, green, red, and alpha values.
    eStkGraphicsRasterFormatBgra = 7
    # The format of the raster is a single band consisting of luminance values.
    eStkGraphicsRasterFormatLuminance = 8
    # The format of the raster is two bands consisting of luminance and alpha values.
    eStkGraphicsRasterFormatLuminanceAlpha = 9

AgEStkGraphicsRasterFormat.eStkGraphicsRasterFormatRed.__doc__ = "The format of the raster is a single band consisting of red values."
AgEStkGraphicsRasterFormat.eStkGraphicsRasterFormatGreen.__doc__ = "The format of the raster is a single band consisting of green values."
AgEStkGraphicsRasterFormat.eStkGraphicsRasterFormatBlue.__doc__ = "The format of the raster is a single band consisting of blue values."
AgEStkGraphicsRasterFormat.eStkGraphicsRasterFormatAlpha.__doc__ = "The format of the raster is a single band consisting of alpha values."
AgEStkGraphicsRasterFormat.eStkGraphicsRasterFormatRgb.__doc__ = "The format of the raster is three bands consisting of red, green, and blue values."
AgEStkGraphicsRasterFormat.eStkGraphicsRasterFormatBgr.__doc__ = "The format of the raster is three bands consisting of blue, green, and red values."
AgEStkGraphicsRasterFormat.eStkGraphicsRasterFormatRgba.__doc__ = "The format of the raster is four bands consisting of red, green, blue, and alpha values."
AgEStkGraphicsRasterFormat.eStkGraphicsRasterFormatBgra.__doc__ = "The format of the raster is four bands consisting of blue, green, red, and alpha values."
AgEStkGraphicsRasterFormat.eStkGraphicsRasterFormatLuminance.__doc__ = "The format of the raster is a single band consisting of luminance values."
AgEStkGraphicsRasterFormat.eStkGraphicsRasterFormatLuminanceAlpha.__doc__ = "The format of the raster is two bands consisting of luminance and alpha values."

agcls.AgTypeNameMap["AgEStkGraphicsRasterFormat"] = AgEStkGraphicsRasterFormat

class AgEStkGraphicsRasterOrientation(IntEnum):
    """The vertical orientation of the raster."""
    # The raster has a top to bottom orientation.
    eStkGraphicsRasterOrientationTopToBottom = 0
    # The raster has a bottom to top orientation.
    eStkGraphicsRasterOrientationBottomToTop = 1

AgEStkGraphicsRasterOrientation.eStkGraphicsRasterOrientationTopToBottom.__doc__ = "The raster has a top to bottom orientation."
AgEStkGraphicsRasterOrientation.eStkGraphicsRasterOrientationBottomToTop.__doc__ = "The raster has a bottom to top orientation."

agcls.AgTypeNameMap["AgEStkGraphicsRasterOrientation"] = AgEStkGraphicsRasterOrientation

class AgEStkGraphicsRasterType(IntEnum):
    """The type of data contained within each band of a raster dataset."""
    # Each value contained within a band can be represented with an unsigned byte.
    eStkGraphicsRasterTypeUnsignedByte = 0
    # Each value contained within a band can be represented with a byte.
    eStkGraphicsRasterTypeByte = 1
    # Each value contained within a band can be represented with an unsigned short.
    eStkGraphicsRasterTypeUnsignedShort = 2
    # Each value contained within a band can be represented with a short.
    eStkGraphicsRasterTypeShort = 3
    # Each value contained within a band can be represented with an unsigned int.
    eStkGraphicsRasterTypeUnsignedInt = 4
    # Each value contained within a band can be represented with an int.
    eStkGraphicsRasterTypeInt = 5
    # Each value contained within a band can be represented with a float.
    eStkGraphicsRasterTypeFloat = 6
    # Each value contained within a band can be represented with a double.
    eStkGraphicsRasterTypeDouble = 7

AgEStkGraphicsRasterType.eStkGraphicsRasterTypeUnsignedByte.__doc__ = "Each value contained within a band can be represented with an unsigned byte."
AgEStkGraphicsRasterType.eStkGraphicsRasterTypeByte.__doc__ = "Each value contained within a band can be represented with a byte."
AgEStkGraphicsRasterType.eStkGraphicsRasterTypeUnsignedShort.__doc__ = "Each value contained within a band can be represented with an unsigned short."
AgEStkGraphicsRasterType.eStkGraphicsRasterTypeShort.__doc__ = "Each value contained within a band can be represented with a short."
AgEStkGraphicsRasterType.eStkGraphicsRasterTypeUnsignedInt.__doc__ = "Each value contained within a band can be represented with an unsigned int."
AgEStkGraphicsRasterType.eStkGraphicsRasterTypeInt.__doc__ = "Each value contained within a band can be represented with an int."
AgEStkGraphicsRasterType.eStkGraphicsRasterTypeFloat.__doc__ = "Each value contained within a band can be represented with a float."
AgEStkGraphicsRasterType.eStkGraphicsRasterTypeDouble.__doc__ = "Each value contained within a band can be represented with a double."

agcls.AgTypeNameMap["AgEStkGraphicsRasterType"] = AgEStkGraphicsRasterType

class AgEStkGraphicsSharpenMethod(IntEnum):
    """The method used to sharpen a raster."""
    # Provides sharpening through mean removal.
    eStkGraphicsSharpenMethodMeanRemoval = 0
    # Provides basic sharpening.
    eStkGraphicsSharpenMethodBasic = 1

AgEStkGraphicsSharpenMethod.eStkGraphicsSharpenMethodMeanRemoval.__doc__ = "Provides sharpening through mean removal."
AgEStkGraphicsSharpenMethod.eStkGraphicsSharpenMethodBasic.__doc__ = "Provides basic sharpening."

agcls.AgTypeNameMap["AgEStkGraphicsSharpenMethod"] = AgEStkGraphicsSharpenMethod

class AgEStkGraphicsVideoPlayback(IntEnum):
    """Specifies how the video stream will playback. When the playback is set to real time, the video will playback in real time..."""
    # The video will playback in realtime.
    eStkGraphicsVideoPlaybackRealTime = 0
    # The video will playback in coincidence with the scene manager time within the interval defined by interval start time and interval end time.
    eStkGraphicsVideoPlaybackTimeInterval = 1

AgEStkGraphicsVideoPlayback.eStkGraphicsVideoPlaybackRealTime.__doc__ = "The video will playback in realtime."
AgEStkGraphicsVideoPlayback.eStkGraphicsVideoPlaybackTimeInterval.__doc__ = "The video will playback in coincidence with the scene manager time within the interval defined by interval start time and interval end time."

agcls.AgTypeNameMap["AgEStkGraphicsVideoPlayback"] = AgEStkGraphicsVideoPlayback

class AgEStkGraphicsKmlNetworkLinkRefreshMode(IntEnum):
    """Defines the options available for a KmlNetworkLink's RefreshMode property."""
    # Refresh when the document is loaded and whenever the Link parameters change (the default).
    eStkGraphicsKmlNetworkLinkRefreshModeOnChange = 0
    # Refresh the network link at the duration specified by refresh interval.
    eStkGraphicsKmlNetworkLinkRefreshModeOnInterval = 1
    # Refresh the network link when the expiration time is reached.
    eStkGraphicsKmlNetworkLinkRefreshModeOnExpire = 2

AgEStkGraphicsKmlNetworkLinkRefreshMode.eStkGraphicsKmlNetworkLinkRefreshModeOnChange.__doc__ = "Refresh when the document is loaded and whenever the Link parameters change (the default)."
AgEStkGraphicsKmlNetworkLinkRefreshMode.eStkGraphicsKmlNetworkLinkRefreshModeOnInterval.__doc__ = "Refresh the network link at the duration specified by refresh interval."
AgEStkGraphicsKmlNetworkLinkRefreshMode.eStkGraphicsKmlNetworkLinkRefreshModeOnExpire.__doc__ = "Refresh the network link when the expiration time is reached."

agcls.AgTypeNameMap["AgEStkGraphicsKmlNetworkLinkRefreshMode"] = AgEStkGraphicsKmlNetworkLinkRefreshMode

class AgEStkGraphicsKmlNetworkLinkViewRefreshMode(IntEnum):
    """Defines the options available for a KmlNetworkLink's ViewRefreshMode property."""
    # Do not refresh the network link when the camera's view changes.
    eStkGraphicsKmlNetworkLinkViewRefreshModeNever = 0
    # Only refresh the network link when it is explicitly refreshed by calling the refresh method.
    eStkGraphicsKmlNetworkLinkViewRefreshModeOnRequest = 1
    # Refresh the network link after camera view movement stops for the duration specified by view refresh time.
    eStkGraphicsKmlNetworkLinkViewRefreshModeOnStop = 2
    # Refreshes the network link when the region associated with this link becomes active.
    eStkGraphicsKmlNetworkLinkViewRefreshModeOnRegion = 3

AgEStkGraphicsKmlNetworkLinkViewRefreshMode.eStkGraphicsKmlNetworkLinkViewRefreshModeNever.__doc__ = "Do not refresh the network link when the camera's view changes."
AgEStkGraphicsKmlNetworkLinkViewRefreshMode.eStkGraphicsKmlNetworkLinkViewRefreshModeOnRequest.__doc__ = "Only refresh the network link when it is explicitly refreshed by calling the refresh method."
AgEStkGraphicsKmlNetworkLinkViewRefreshMode.eStkGraphicsKmlNetworkLinkViewRefreshModeOnStop.__doc__ = "Refresh the network link after camera view movement stops for the duration specified by view refresh time."
AgEStkGraphicsKmlNetworkLinkViewRefreshMode.eStkGraphicsKmlNetworkLinkViewRefreshModeOnRegion.__doc__ = "Refreshes the network link when the region associated with this link becomes active."

agcls.AgTypeNameMap["AgEStkGraphicsKmlNetworkLinkViewRefreshMode"] = AgEStkGraphicsKmlNetworkLinkViewRefreshMode

class AgEStkGraphicsModelUpAxis(IntEnum):
    """When setting the camera'saxes, this defines which axis of the axes is up in screen space, where up is from the bottom to the top of the screen."""
    # The positive X axis.
    eStkGraphicsModelUpAxisX = 0
    # The positive Y axis.
    eStkGraphicsModelUpAxisY = 1
    # The positive Z axis.
    eStkGraphicsModelUpAxisZ = 2
    # The negative X axis.
    eStkGraphicsModelUpAxisNegativeX = 3
    # The negative Y axis.
    eStkGraphicsModelUpAxisNegativeY = 4
    # The negative Z axis.
    eStkGraphicsModelUpAxisNegativeZ = 5

AgEStkGraphicsModelUpAxis.eStkGraphicsModelUpAxisX.__doc__ = "The positive X axis."
AgEStkGraphicsModelUpAxis.eStkGraphicsModelUpAxisY.__doc__ = "The positive Y axis."
AgEStkGraphicsModelUpAxis.eStkGraphicsModelUpAxisZ.__doc__ = "The positive Z axis."
AgEStkGraphicsModelUpAxis.eStkGraphicsModelUpAxisNegativeX.__doc__ = "The negative X axis."
AgEStkGraphicsModelUpAxis.eStkGraphicsModelUpAxisNegativeY.__doc__ = "The negative Y axis."
AgEStkGraphicsModelUpAxis.eStkGraphicsModelUpAxisNegativeZ.__doc__ = "The negative Z axis."

agcls.AgTypeNameMap["AgEStkGraphicsModelUpAxis"] = AgEStkGraphicsModelUpAxis

class AgEStkGraphicsOutlineAppearance(IntEnum):
    """Possible appearances of an outline. Front lines are lines on front facing geometry and back lines are lines on back facing geometry."""
    # Both the front and back lines are displayed.
    eStkGraphicsFrontAndBackLines = 0
    # Only the front lines are displayed. This can be used to declutter the outline.
    eStkGraphicsFrontLinesOnly = 1
    # Both the front and back lines are displayed. The back lines are displayed using a different color, translucency, and width. This is used to declutter the outline but still provide a visual cue for the back facing geometry.
    eStkGraphicsStylizeBackLines = 2

AgEStkGraphicsOutlineAppearance.eStkGraphicsFrontAndBackLines.__doc__ = "Both the front and back lines are displayed."
AgEStkGraphicsOutlineAppearance.eStkGraphicsFrontLinesOnly.__doc__ = "Only the front lines are displayed. This can be used to declutter the outline."
AgEStkGraphicsOutlineAppearance.eStkGraphicsStylizeBackLines.__doc__ = "Both the front and back lines are displayed. The back lines are displayed using a different color, translucency, and width. This is used to declutter the outline but still provide a visual cue for the back facing geometry."

agcls.AgTypeNameMap["AgEStkGraphicsOutlineAppearance"] = AgEStkGraphicsOutlineAppearance

class AgEStkGraphicsPolylineType(IntEnum):
    """Describes how to interpret positions defining a polyline."""
    # Every two positions define a line segment. Line segments are not required to be connected to each other.
    eStkGraphicsPolylineTypeLines = 0
    # After the first position, each additional position defines a line segment from the previous position to the current position.
    eStkGraphicsPolylineTypeLineStrip = 1
    # Lines are drawn as points.
    eStkGraphicsPolylineTypePoints = 2

AgEStkGraphicsPolylineType.eStkGraphicsPolylineTypeLines.__doc__ = "Every two positions define a line segment. Line segments are not required to be connected to each other."
AgEStkGraphicsPolylineType.eStkGraphicsPolylineTypeLineStrip.__doc__ = "After the first position, each additional position defines a line segment from the previous position to the current position."
AgEStkGraphicsPolylineType.eStkGraphicsPolylineTypePoints.__doc__ = "Lines are drawn as points."

agcls.AgTypeNameMap["AgEStkGraphicsPolylineType"] = AgEStkGraphicsPolylineType

class AgEStkGraphicsCullFace(IntEnum):
    """Identifies whether front- and/or back-facing triangles are culled."""
    # Front-facing triangles are culled.
    eStkGraphicsECullFaceFront = 0
    # Back-facing triangles are culled.
    eStkGraphicsECullFaceBack = 1
    # Both front- and back-facing triangles are culled. Therefore, no triangles are rendered.
    eStkGraphicsECullFaceFrontAndBack = 2
    # No triangles are culled.
    eStkGraphicsECullFaceNeither = 3

AgEStkGraphicsCullFace.eStkGraphicsECullFaceFront.__doc__ = "Front-facing triangles are culled."
AgEStkGraphicsCullFace.eStkGraphicsECullFaceBack.__doc__ = "Back-facing triangles are culled."
AgEStkGraphicsCullFace.eStkGraphicsECullFaceFrontAndBack.__doc__ = "Both front- and back-facing triangles are culled. Therefore, no triangles are rendered."
AgEStkGraphicsCullFace.eStkGraphicsECullFaceNeither.__doc__ = "No triangles are culled."

agcls.AgTypeNameMap["AgEStkGraphicsCullFace"] = AgEStkGraphicsCullFace

class AgEStkGraphicsInternalTextureFormat(IntEnum):
    """The format of individual texels in a texture."""
    # Each texel is an 4-bit alpha component.
    eStkGraphicsInternalTextureFormatAlpha4 = 0
    # Each texel is an 8-bit alpha component.
    eStkGraphicsInternalTextureFormatAlpha8 = 1
    # Each texel is an 12-bit alpha component.
    eStkGraphicsInternalTextureFormatAlpha12 = 2
    # Each texel is an 16-bit alpha component.
    eStkGraphicsInternalTextureFormatAlpha16 = 3
    # Each texel contains 3-bit red and green components and 2-bit blue component.
    eStkGraphicsInternalTextureFormatR3G3B2 = 4
    # Each texel contains 4-bit red, green, and blue components.
    eStkGraphicsInternalTextureFormatRgb4 = 5
    # Each texel contains 5-bit red, green, and blue components.
    eStkGraphicsInternalTextureFormatRgb5 = 6
    # Each texel contains 8-bit red, green, and blue components.
    eStkGraphicsInternalTextureFormatRgb8 = 7
    # Each texel contains 10-bit red, green, and blue components.
    eStkGraphicsInternalTextureFormatRgb10 = 8
    # Each texel contains 12-bit red, green, and blue components.
    eStkGraphicsInternalTextureFormatRgb12 = 9
    # Each texel contains 16-bit red, green, and blue components.
    eStkGraphicsInternalTextureFormatRgb16 = 10
    # Each texel contains 16-bit red, green, and blue floating point components.
    eStkGraphicsInternalTextureFormatRgb16F = 11
    # Each texel contains 32-bit red, green, and blue floating point components.
    eStkGraphicsInternalTextureFormatRgb32F = 12
    # Each texel contains 2-bit red, green, blue, and alpha components.
    eStkGraphicsInternalTextureFormatRgba2 = 13
    # Each texel contains 4-bit red, green, blue, and alpha components.
    eStkGraphicsInternalTextureFormatRgba4 = 14
    # Each texel contains 5-bit red, green, blue components and 1-bit alpha component.
    eStkGraphicsInternalTextureFormatRgb5A1 = 15
    # Each texel contains 8-bit red, green, blue, and alpha components.
    eStkGraphicsInternalTextureFormatRgba8 = 16
    # Each texel contains 10-bit red, green, blue components and 2-bit alpha component.
    eStkGraphicsInternalTextureFormatRgb10A2 = 17
    # Each texel contains 12-bit red, green, blue, and alpha components.
    eStkGraphicsInternalTextureFormatRgba12 = 18
    # Each texel contains 16-bit red, green, blue, and alpha components.
    eStkGraphicsInternalTextureFormatRgba16 = 19
    # Each texel contains 16-bit red, green, blue, and alpha floating point components.
    eStkGraphicsInternalTextureFormatRgba16F = 20
    # Each texel contains 32-bit red, green, blue, and alpha floating point components.
    eStkGraphicsInternalTextureFormatRgba32F = 21
    # Each texel is an 4-bit luminance, e.g. intensity, component.
    eStkGraphicsInternalTextureFormatLuminance4 = 22
    # Each texel is an 8-bit luminance, e.g. intensity, component.
    eStkGraphicsInternalTextureFormatLuminance8 = 23
    # Each texel is an 12-bit luminance, e.g. intensity, component.
    eStkGraphicsInternalTextureFormatLuminance12 = 24
    # Each texel is an 16-bit luminance, e.g. intensity, component.
    eStkGraphicsInternalTextureFormatLuminance16 = 25
    # Each texel is an 16-bit luminance, e.g. intensity, floating point component.
    eStkGraphicsInternalTextureFormatLuminance16F = 26
    # Each texel is an 32-bit luminance, e.g. intensity, floating point component.
    eStkGraphicsInternalTextureFormatLuminance32F = 27
    # Each texel contains an 4-bit luminance and 4-bit alpha component.
    eStkGraphicsInternalTextureFormatLuminance4Alpha4 = 28
    # Each texel contains an 6-bit luminance and 2-bit alpha component.
    eStkGraphicsInternalTextureFormatLuminance6Alpha2 = 29
    # Each texel contains an 8-bit luminance and 8-bit alpha component.
    eStkGraphicsInternalTextureFormatLuminance8Alpha8 = 30
    # Each texel contains an 12-bit luminance and 4-bit alpha component.
    eStkGraphicsInternalTextureFormatLuminance12Alpha4 = 31
    # Each texel contains an 12-bit luminance and 12-bit alpha component.
    eStkGraphicsInternalTextureFormatLuminance12Alpha12 = 32
    # Each texel contains an 16-bit luminance and 16-bit alpha component.
    eStkGraphicsInternalTextureFormatLuminance16Alpha16 = 33
    # Each texel contains an 16-bit luminance and 16-bit alpha floating point component.
    eStkGraphicsInternalTextureFormatLuminance16Alpha16F = 34
    # Each texel contains an 32-bit luminance and 32-bit alpha floating point component.
    eStkGraphicsInternalTextureFormatLuminance32Alpha32F = 35

AgEStkGraphicsInternalTextureFormat.eStkGraphicsInternalTextureFormatAlpha4.__doc__ = "Each texel is an 4-bit alpha component."
AgEStkGraphicsInternalTextureFormat.eStkGraphicsInternalTextureFormatAlpha8.__doc__ = "Each texel is an 8-bit alpha component."
AgEStkGraphicsInternalTextureFormat.eStkGraphicsInternalTextureFormatAlpha12.__doc__ = "Each texel is an 12-bit alpha component."
AgEStkGraphicsInternalTextureFormat.eStkGraphicsInternalTextureFormatAlpha16.__doc__ = "Each texel is an 16-bit alpha component."
AgEStkGraphicsInternalTextureFormat.eStkGraphicsInternalTextureFormatR3G3B2.__doc__ = "Each texel contains 3-bit red and green components and 2-bit blue component."
AgEStkGraphicsInternalTextureFormat.eStkGraphicsInternalTextureFormatRgb4.__doc__ = "Each texel contains 4-bit red, green, and blue components."
AgEStkGraphicsInternalTextureFormat.eStkGraphicsInternalTextureFormatRgb5.__doc__ = "Each texel contains 5-bit red, green, and blue components."
AgEStkGraphicsInternalTextureFormat.eStkGraphicsInternalTextureFormatRgb8.__doc__ = "Each texel contains 8-bit red, green, and blue components."
AgEStkGraphicsInternalTextureFormat.eStkGraphicsInternalTextureFormatRgb10.__doc__ = "Each texel contains 10-bit red, green, and blue components."
AgEStkGraphicsInternalTextureFormat.eStkGraphicsInternalTextureFormatRgb12.__doc__ = "Each texel contains 12-bit red, green, and blue components."
AgEStkGraphicsInternalTextureFormat.eStkGraphicsInternalTextureFormatRgb16.__doc__ = "Each texel contains 16-bit red, green, and blue components."
AgEStkGraphicsInternalTextureFormat.eStkGraphicsInternalTextureFormatRgb16F.__doc__ = "Each texel contains 16-bit red, green, and blue floating point components."
AgEStkGraphicsInternalTextureFormat.eStkGraphicsInternalTextureFormatRgb32F.__doc__ = "Each texel contains 32-bit red, green, and blue floating point components."
AgEStkGraphicsInternalTextureFormat.eStkGraphicsInternalTextureFormatRgba2.__doc__ = "Each texel contains 2-bit red, green, blue, and alpha components."
AgEStkGraphicsInternalTextureFormat.eStkGraphicsInternalTextureFormatRgba4.__doc__ = "Each texel contains 4-bit red, green, blue, and alpha components."
AgEStkGraphicsInternalTextureFormat.eStkGraphicsInternalTextureFormatRgb5A1.__doc__ = "Each texel contains 5-bit red, green, blue components and 1-bit alpha component."
AgEStkGraphicsInternalTextureFormat.eStkGraphicsInternalTextureFormatRgba8.__doc__ = "Each texel contains 8-bit red, green, blue, and alpha components."
AgEStkGraphicsInternalTextureFormat.eStkGraphicsInternalTextureFormatRgb10A2.__doc__ = "Each texel contains 10-bit red, green, blue components and 2-bit alpha component."
AgEStkGraphicsInternalTextureFormat.eStkGraphicsInternalTextureFormatRgba12.__doc__ = "Each texel contains 12-bit red, green, blue, and alpha components."
AgEStkGraphicsInternalTextureFormat.eStkGraphicsInternalTextureFormatRgba16.__doc__ = "Each texel contains 16-bit red, green, blue, and alpha components."
AgEStkGraphicsInternalTextureFormat.eStkGraphicsInternalTextureFormatRgba16F.__doc__ = "Each texel contains 16-bit red, green, blue, and alpha floating point components."
AgEStkGraphicsInternalTextureFormat.eStkGraphicsInternalTextureFormatRgba32F.__doc__ = "Each texel contains 32-bit red, green, blue, and alpha floating point components."
AgEStkGraphicsInternalTextureFormat.eStkGraphicsInternalTextureFormatLuminance4.__doc__ = "Each texel is an 4-bit luminance, e.g. intensity, component."
AgEStkGraphicsInternalTextureFormat.eStkGraphicsInternalTextureFormatLuminance8.__doc__ = "Each texel is an 8-bit luminance, e.g. intensity, component."
AgEStkGraphicsInternalTextureFormat.eStkGraphicsInternalTextureFormatLuminance12.__doc__ = "Each texel is an 12-bit luminance, e.g. intensity, component."
AgEStkGraphicsInternalTextureFormat.eStkGraphicsInternalTextureFormatLuminance16.__doc__ = "Each texel is an 16-bit luminance, e.g. intensity, component."
AgEStkGraphicsInternalTextureFormat.eStkGraphicsInternalTextureFormatLuminance16F.__doc__ = "Each texel is an 16-bit luminance, e.g. intensity, floating point component."
AgEStkGraphicsInternalTextureFormat.eStkGraphicsInternalTextureFormatLuminance32F.__doc__ = "Each texel is an 32-bit luminance, e.g. intensity, floating point component."
AgEStkGraphicsInternalTextureFormat.eStkGraphicsInternalTextureFormatLuminance4Alpha4.__doc__ = "Each texel contains an 4-bit luminance and 4-bit alpha component."
AgEStkGraphicsInternalTextureFormat.eStkGraphicsInternalTextureFormatLuminance6Alpha2.__doc__ = "Each texel contains an 6-bit luminance and 2-bit alpha component."
AgEStkGraphicsInternalTextureFormat.eStkGraphicsInternalTextureFormatLuminance8Alpha8.__doc__ = "Each texel contains an 8-bit luminance and 8-bit alpha component."
AgEStkGraphicsInternalTextureFormat.eStkGraphicsInternalTextureFormatLuminance12Alpha4.__doc__ = "Each texel contains an 12-bit luminance and 4-bit alpha component."
AgEStkGraphicsInternalTextureFormat.eStkGraphicsInternalTextureFormatLuminance12Alpha12.__doc__ = "Each texel contains an 12-bit luminance and 12-bit alpha component."
AgEStkGraphicsInternalTextureFormat.eStkGraphicsInternalTextureFormatLuminance16Alpha16.__doc__ = "Each texel contains an 16-bit luminance and 16-bit alpha component."
AgEStkGraphicsInternalTextureFormat.eStkGraphicsInternalTextureFormatLuminance16Alpha16F.__doc__ = "Each texel contains an 16-bit luminance and 16-bit alpha floating point component."
AgEStkGraphicsInternalTextureFormat.eStkGraphicsInternalTextureFormatLuminance32Alpha32F.__doc__ = "Each texel contains an 32-bit luminance and 32-bit alpha floating point component."

agcls.AgTypeNameMap["AgEStkGraphicsInternalTextureFormat"] = AgEStkGraphicsInternalTextureFormat

class AgEStkGraphicsMagnificationFilter(IntEnum):
    """The filter used when the pixel being textured maps to an area less than or equal to one texel."""
    # Use the texel that is closest to the center of the pixel being textured. This usually faster than Linear but can produce images with sharper edges.
    eStkGraphicsMagnificationFilterNearest = 0
    # Use the weighted average of the four texels that are closest to the center of the pixel being textured.
    eStkGraphicsMagnificationFilterLinear = 1

AgEStkGraphicsMagnificationFilter.eStkGraphicsMagnificationFilterNearest.__doc__ = "Use the texel that is closest to the center of the pixel being textured. This usually faster than Linear but can produce images with sharper edges."
AgEStkGraphicsMagnificationFilter.eStkGraphicsMagnificationFilterLinear.__doc__ = "Use the weighted average of the four texels that are closest to the center of the pixel being textured."

agcls.AgTypeNameMap["AgEStkGraphicsMagnificationFilter"] = AgEStkGraphicsMagnificationFilter

class AgEStkGraphicsMinificationFilter(IntEnum):
    """The filter used when the pixel being textured maps to an area greater than one texel."""
    # Use the texel that is closest to the center of the pixel being textured.
    eStkGraphicsMinificationFilterNearest = 0
    # Use the weighted average of the four (for 2D textures, two for 1D textures) texels that are closest to the center of the pixel being textured.
    eStkGraphicsMinificationFilterLinear = 1
    # Use the mipmap that most closely matches the size of the pixel being textured. Then use the texel from that mipmap that is closest to the center of the pixel being textured.
    eStkGraphicsMinificationFilterNearestMipMapNearest = 2
    # Use the mipmap that most closely matches the size of the pixel being textured. Then use the weighted average of the four (for 2D textures, two for 1D textures) texels from that mipmap that are closest to the center of the pixel being textured.
    eStkGraphicsMinificationFilterLinearMipMapNearest = 3
    # Use the two mipmaps that most closely match the size of the pixel being textured. Determine the texel that is closest to the center of the pixel being textured in each mipmap. The final texture value is a weighted average of these two texels.
    eStkGraphicsMinificationFilterNearestMipMapLinear = 4
    # Use the two mipmaps that most closely match the size of the pixel being textured. Determine the weighted average of the four (for 2D textures, two for 1D textures) texels that are closest to the center of the pixel being textured in each mipmap...
    eStkGraphicsMinificationFilterLinearMipMapLinear = 5

AgEStkGraphicsMinificationFilter.eStkGraphicsMinificationFilterNearest.__doc__ = "Use the texel that is closest to the center of the pixel being textured."
AgEStkGraphicsMinificationFilter.eStkGraphicsMinificationFilterLinear.__doc__ = "Use the weighted average of the four (for 2D textures, two for 1D textures) texels that are closest to the center of the pixel being textured."
AgEStkGraphicsMinificationFilter.eStkGraphicsMinificationFilterNearestMipMapNearest.__doc__ = "Use the mipmap that most closely matches the size of the pixel being textured. Then use the texel from that mipmap that is closest to the center of the pixel being textured."
AgEStkGraphicsMinificationFilter.eStkGraphicsMinificationFilterLinearMipMapNearest.__doc__ = "Use the mipmap that most closely matches the size of the pixel being textured. Then use the weighted average of the four (for 2D textures, two for 1D textures) texels from that mipmap that are closest to the center of the pixel being textured."
AgEStkGraphicsMinificationFilter.eStkGraphicsMinificationFilterNearestMipMapLinear.__doc__ = "Use the two mipmaps that most closely match the size of the pixel being textured. Determine the texel that is closest to the center of the pixel being textured in each mipmap. The final texture value is a weighted average of these two texels."
AgEStkGraphicsMinificationFilter.eStkGraphicsMinificationFilterLinearMipMapLinear.__doc__ = "Use the two mipmaps that most closely match the size of the pixel being textured. Determine the weighted average of the four (for 2D textures, two for 1D textures) texels that are closest to the center of the pixel being textured in each mipmap..."

agcls.AgTypeNameMap["AgEStkGraphicsMinificationFilter"] = AgEStkGraphicsMinificationFilter

class AgEStkGraphicsRendererShadeModel(IntEnum):
    """Identifies which shade model to use. The primitive can be drawn with a single color or multiple colors."""
    # Flat shading renders the primitive with one color across all of the vertices.
    eStkGraphicsRendererShadeModelFlat = 0
    # Gouraud shading renders the primitive by interpolating the color between the vertices.
    eStkGraphicsRendererShadeModelGouraud = 1

AgEStkGraphicsRendererShadeModel.eStkGraphicsRendererShadeModelFlat.__doc__ = "Flat shading renders the primitive with one color across all of the vertices."
AgEStkGraphicsRendererShadeModel.eStkGraphicsRendererShadeModelGouraud.__doc__ = "Gouraud shading renders the primitive by interpolating the color between the vertices."

agcls.AgTypeNameMap["AgEStkGraphicsRendererShadeModel"] = AgEStkGraphicsRendererShadeModel

class AgEStkGraphicsTextureWrap(IntEnum):
    """Determine how to handle textures coordinates that fall outside of the range [0, 1]."""
    # Clamp the texture coordinate to the range [0, 1].
    eStkGraphicsTextureWrapClamp = 0
    # Clamp the texture coordinate to the range [-1/2N, 1 + 1/2N], where N is the size the texture in the direction of clamping.
    eStkGraphicsTextureWrapClampToBorder = 1
    # Clamp the texture coordinate to the range [1/2N, 1 - 1/2N], where N is the size the texture in the direction of clamping.
    eStkGraphicsTextureWrapClampToEdge = 2
    # If the integer part of the texture coordinate is even, use the fractional part of the texture coordinate. Otherwise, use one minus the fractional part of the texture coordinate.
    eStkGraphicsTextureWrapMirroredRepeat = 3
    # Ignore the integer part of the texture coordinate.
    eStkGraphicsTextureWrapRepeat = 4

AgEStkGraphicsTextureWrap.eStkGraphicsTextureWrapClamp.__doc__ = "Clamp the texture coordinate to the range [0, 1]."
AgEStkGraphicsTextureWrap.eStkGraphicsTextureWrapClampToBorder.__doc__ = "Clamp the texture coordinate to the range [-1/2N, 1 + 1/2N], where N is the size the texture in the direction of clamping."
AgEStkGraphicsTextureWrap.eStkGraphicsTextureWrapClampToEdge.__doc__ = "Clamp the texture coordinate to the range [1/2N, 1 - 1/2N], where N is the size the texture in the direction of clamping."
AgEStkGraphicsTextureWrap.eStkGraphicsTextureWrapMirroredRepeat.__doc__ = "If the integer part of the texture coordinate is even, use the fractional part of the texture coordinate. Otherwise, use one minus the fractional part of the texture coordinate."
AgEStkGraphicsTextureWrap.eStkGraphicsTextureWrapRepeat.__doc__ = "Ignore the integer part of the texture coordinate."

agcls.AgTypeNameMap["AgEStkGraphicsTextureWrap"] = AgEStkGraphicsTextureWrap

class AgEStkGraphicsSetHint(IntEnum):
    """An optimization hint optionally provided to primitives to enhance performance for static or dynamic primitives. See the Set Hint Performance Overview for selecting an appropriate value."""
    # Rendering is optimized for static geometry. The primitive's vertices are not going to be updated with Set() or SetPartial() calls. Calls to SetPartial() will fail. Calls to Set() are allowed but may not be as efficient as SetHintFrequent.
    eStkGraphicsSetHintInfrequent = 0
    # Rendering is optimized for dynamic geometry. The primitive's vertices are expected to be updated with SetPartial() - some or all of the vertices will change but the number of vertices will not.
    eStkGraphicsSetHintPartial = 1
    # Rendering is optimized for streaming geometry. The primitive's vertices are expected to be updated with Set() - all the vertices will change and/or the number of vertices will change. Calls to SetPartial() will fail.
    eStkGraphicsSetHintFrequent = 2

AgEStkGraphicsSetHint.eStkGraphicsSetHintInfrequent.__doc__ = "Rendering is optimized for static geometry. The primitive's vertices are not going to be updated with Set() or SetPartial() calls. Calls to SetPartial() will fail. Calls to Set() are allowed but may not be as efficient as SetHintFrequent."
AgEStkGraphicsSetHint.eStkGraphicsSetHintPartial.__doc__ = "Rendering is optimized for dynamic geometry. The primitive's vertices are expected to be updated with SetPartial() - some or all of the vertices will change but the number of vertices will not."
AgEStkGraphicsSetHint.eStkGraphicsSetHintFrequent.__doc__ = "Rendering is optimized for streaming geometry. The primitive's vertices are expected to be updated with Set() - all the vertices will change and/or the number of vertices will change. Calls to SetPartial() will fail."

agcls.AgTypeNameMap["AgEStkGraphicsSetHint"] = AgEStkGraphicsSetHint

class AgEStkGraphicsStereoProjectionMode(IntEnum):
    """The stereoscopic projection mode used for the left and right eye scenes."""
    # Parallel projection. Parallel projection will ignore any projection distance that has been set and instead use a parallel projection for each eye. In parallel mode all objects will appear to go into the screen...
    eStkGraphicsStereoProjectionParallel = 0
    # Fixed distance projection. Objects at the fixed distance will appear to have no depth. Objects further than the distance will appear to go into the screen. Objects nearer than the distance will appear to pop out of the screen.
    eStkGraphicsStereoProjectionFixedDistance = 1
    # Automatic distance projection. Automatic distance projection will ignore any projection distance that has been set and instead automatically calculates the projection distance based on the distance between the camera and the center of the scene.
    eStkGraphicsStereoProjectionAutomatic = 2

AgEStkGraphicsStereoProjectionMode.eStkGraphicsStereoProjectionParallel.__doc__ = "Parallel projection. Parallel projection will ignore any projection distance that has been set and instead use a parallel projection for each eye. In parallel mode all objects will appear to go into the screen..."
AgEStkGraphicsStereoProjectionMode.eStkGraphicsStereoProjectionFixedDistance.__doc__ = "Fixed distance projection. Objects at the fixed distance will appear to have no depth. Objects further than the distance will appear to go into the screen. Objects nearer than the distance will appear to pop out of the screen."
AgEStkGraphicsStereoProjectionMode.eStkGraphicsStereoProjectionAutomatic.__doc__ = "Automatic distance projection. Automatic distance projection will ignore any projection distance that has been set and instead automatically calculates the projection distance based on the distance between the camera and the center of the scene."

agcls.AgTypeNameMap["AgEStkGraphicsStereoProjectionMode"] = AgEStkGraphicsStereoProjectionMode

class AgEStkGraphicsStereoscopicDisplayMode(IntEnum):
    """The stereoscopic display mode. To use a particular stereoscopic display mode, ensure that your system supports the feature and that it is enabled."""
    # No stereoscopic
    eStkGraphicsStereoscopicDisplayModeOff = 0
    # OpenGL Quad-buffer stereoscopic
    eStkGraphicsStereoscopicDisplayModeQuadBuffer = 1
    # Anaglyph or two-color stereoscopic
    eStkGraphicsStereoscopicDisplayModeAnaglyph = 2
    # Left eye view of the stereoscopic scene
    eStkGraphicsStereoscopicDisplayModeLeftEye = 3
    # Right eye view of the stereoscopic scene
    eStkGraphicsStereoscopicDisplayModeRightEye = 4
    # Side-by-side stereoscopic. Left and right eye views are rendered next to each other in the same window.
    eStkGraphicsStereoscopicDisplayModeSideBySide = 5

AgEStkGraphicsStereoscopicDisplayMode.eStkGraphicsStereoscopicDisplayModeOff.__doc__ = "No stereoscopic"
AgEStkGraphicsStereoscopicDisplayMode.eStkGraphicsStereoscopicDisplayModeQuadBuffer.__doc__ = "OpenGL Quad-buffer stereoscopic"
AgEStkGraphicsStereoscopicDisplayMode.eStkGraphicsStereoscopicDisplayModeAnaglyph.__doc__ = "Anaglyph or two-color stereoscopic"
AgEStkGraphicsStereoscopicDisplayMode.eStkGraphicsStereoscopicDisplayModeLeftEye.__doc__ = "Left eye view of the stereoscopic scene"
AgEStkGraphicsStereoscopicDisplayMode.eStkGraphicsStereoscopicDisplayModeRightEye.__doc__ = "Right eye view of the stereoscopic scene"
AgEStkGraphicsStereoscopicDisplayMode.eStkGraphicsStereoscopicDisplayModeSideBySide.__doc__ = "Side-by-side stereoscopic. Left and right eye views are rendered next to each other in the same window."

agcls.AgTypeNameMap["AgEStkGraphicsStereoscopicDisplayMode"] = AgEStkGraphicsStereoscopicDisplayMode

class AgEStkGraphicsFontStyle(IntEnum):
    """Font styles."""
    # Regular font.
    eStkGraphicsFontStyleRegular = 0x0
    # Bold font.
    eStkGraphicsFontStyleBold = 0x1
    # Italic font.
    eStkGraphicsFontStyleItalic = 0x2
    # Underlined font.
    eStkGraphicsFontStyleUnderline = 0x4
    # Strike-out style.
    eStkGraphicsFontStyleStrikeout = 0x8

AgEStkGraphicsFontStyle.eStkGraphicsFontStyleRegular.__doc__ = "Regular font."
AgEStkGraphicsFontStyle.eStkGraphicsFontStyleBold.__doc__ = "Bold font."
AgEStkGraphicsFontStyle.eStkGraphicsFontStyleItalic.__doc__ = "Italic font."
AgEStkGraphicsFontStyle.eStkGraphicsFontStyleUnderline.__doc__ = "Underlined font."
AgEStkGraphicsFontStyle.eStkGraphicsFontStyleStrikeout.__doc__ = "Strike-out style."

agcls.AgTypeNameMap["AgEStkGraphicsFontStyle"] = AgEStkGraphicsFontStyle


class IAgStkGraphicsPathPoint(object):
    """A path point used with the Path Primitive."""
    _num_methods = 12
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{9107fca2-51b8-4347-9391-9ee6c6b792e3}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_Position" : 1,
                             "set_Position" : 2,
                             "get_Date" : 3,
                             "get_Color" : 4,
                             "set_Color" : 5,
                             "get_Translucency" : 6,
                             "set_Translucency" : 7,
                             "get_OutlineColor" : 8,
                             "set_OutlineColor" : 9,
                             "get_OutlineTranslucency" : 10,
                             "set_OutlineTranslucency" : 11,
                             "get_IsTranslucent" : 12, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsPathPoint._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsPathPoint from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsPathPoint.__dict__ and type(IAgStkGraphicsPathPoint.__dict__[attrname]) == property:
            return IAgStkGraphicsPathPoint.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsPathPoint.")
    
    _get_Position_metadata = { "name" : "Position",
            "arg_types" : (POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg,) }
    @property
    def Position(self) -> list:
        """A path point position as a one-dimensional array of three elements corresponding to (X,Y,Z) cartesian coordinates."""
        return self._intf.get_property(IAgStkGraphicsPathPoint._metadata, IAgStkGraphicsPathPoint._get_Position_metadata)

    _set_Position_metadata = { "name" : "Position",
            "arg_types" : (agcom.LPSAFEARRAY,),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg,) }
    @Position.setter
    def Position(self, position:list) -> None:
        return self._intf.set_property(IAgStkGraphicsPathPoint._metadata, IAgStkGraphicsPathPoint._set_Position_metadata, position)

    _get_Date_metadata = { "name" : "Date",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def Date(self) -> "IAgDate":
        """A date/time of the path point."""
        return self._intf.get_property(IAgStkGraphicsPathPoint._metadata, IAgStkGraphicsPathPoint._get_Date_metadata)

    _get_Color_metadata = { "name" : "Color",
            "arg_types" : (POINTER(agcom.OLE_COLOR),),
            "marshallers" : (agmarshall.OLE_COLOR_arg,) }
    @property
    def Color(self) -> agcolor.Color:
        """The path point color."""
        return self._intf.get_property(IAgStkGraphicsPathPoint._metadata, IAgStkGraphicsPathPoint._get_Color_metadata)

    _set_Color_metadata = { "name" : "Color",
            "arg_types" : (agcom.OLE_COLOR,),
            "marshallers" : (agmarshall.OLE_COLOR_arg,) }
    @Color.setter
    def Color(self, color:agcolor.Color) -> None:
        return self._intf.set_property(IAgStkGraphicsPathPoint._metadata, IAgStkGraphicsPathPoint._set_Color_metadata, color)

    _get_Translucency_metadata = { "name" : "Translucency",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def Translucency(self) -> float:
        """The path point translucency."""
        return self._intf.get_property(IAgStkGraphicsPathPoint._metadata, IAgStkGraphicsPathPoint._get_Translucency_metadata)

    _set_Translucency_metadata = { "name" : "Translucency",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @Translucency.setter
    def Translucency(self, translucency:float) -> None:
        return self._intf.set_property(IAgStkGraphicsPathPoint._metadata, IAgStkGraphicsPathPoint._set_Translucency_metadata, translucency)

    _get_OutlineColor_metadata = { "name" : "OutlineColor",
            "arg_types" : (POINTER(agcom.OLE_COLOR),),
            "marshallers" : (agmarshall.OLE_COLOR_arg,) }
    @property
    def OutlineColor(self) -> agcolor.Color:
        """The path point outline color."""
        return self._intf.get_property(IAgStkGraphicsPathPoint._metadata, IAgStkGraphicsPathPoint._get_OutlineColor_metadata)

    _set_OutlineColor_metadata = { "name" : "OutlineColor",
            "arg_types" : (agcom.OLE_COLOR,),
            "marshallers" : (agmarshall.OLE_COLOR_arg,) }
    @OutlineColor.setter
    def OutlineColor(self, outlineColor:agcolor.Color) -> None:
        return self._intf.set_property(IAgStkGraphicsPathPoint._metadata, IAgStkGraphicsPathPoint._set_OutlineColor_metadata, outlineColor)

    _get_OutlineTranslucency_metadata = { "name" : "OutlineTranslucency",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def OutlineTranslucency(self) -> float:
        """The path point outline translucency."""
        return self._intf.get_property(IAgStkGraphicsPathPoint._metadata, IAgStkGraphicsPathPoint._get_OutlineTranslucency_metadata)

    _set_OutlineTranslucency_metadata = { "name" : "OutlineTranslucency",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @OutlineTranslucency.setter
    def OutlineTranslucency(self, outlineTranslucency:float) -> None:
        return self._intf.set_property(IAgStkGraphicsPathPoint._metadata, IAgStkGraphicsPathPoint._set_OutlineTranslucency_metadata, outlineTranslucency)

    _get_IsTranslucent_metadata = { "name" : "IsTranslucent",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def IsTranslucent(self) -> bool:
        """Whether the path point is translucent."""
        return self._intf.get_property(IAgStkGraphicsPathPoint._metadata, IAgStkGraphicsPathPoint._get_IsTranslucent_metadata)


agcls.AgClassCatalog.add_catalog_entry("{9107fca2-51b8-4347-9391-9ee6c6b792e3}", IAgStkGraphicsPathPoint)
agcls.AgTypeNameMap["IAgStkGraphicsPathPoint"] = IAgStkGraphicsPathPoint

class IAgStkGraphicsPathPointFactory(object):
    """Creates Path Primitive's path points."""
    _num_methods = 5
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{efb486c4-09f0-4918-b051-7776acd13f66}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "Initialize" : 1,
                             "InitializeWithDate" : 2,
                             "InitializeWithDateAndPosition" : 3,
                             "InitializeWithDatePositionAndColor" : 4,
                             "InitializeWithDatePositionColorAndTranslucency" : 5, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsPathPointFactory._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsPathPointFactory from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsPathPointFactory.__dict__ and type(IAgStkGraphicsPathPointFactory.__dict__[attrname]) == property:
            return IAgStkGraphicsPathPointFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsPathPointFactory.")
    
    _Initialize_metadata = { "name" : "Initialize",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    def Initialize(self) -> "IAgStkGraphicsPathPoint":
        """Initializes a new path point."""
        return self._intf.invoke(IAgStkGraphicsPathPointFactory._metadata, IAgStkGraphicsPathPointFactory._Initialize_metadata, out_arg())

    _InitializeWithDate_metadata = { "name" : "InitializeWithDate",
            "arg_types" : (agcom.PVOID, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_in_arg("IAgDate"), agmarshall.AgInterface_out_arg,) }
    def InitializeWithDate(self, pathPointDate:"IAgDate") -> "IAgStkGraphicsPathPoint":
        """Initializes a new path point with the given date."""
        return self._intf.invoke(IAgStkGraphicsPathPointFactory._metadata, IAgStkGraphicsPathPointFactory._InitializeWithDate_metadata, pathPointDate, out_arg())

    _InitializeWithDateAndPosition_metadata = { "name" : "InitializeWithDateAndPosition",
            "arg_types" : (agcom.PVOID, POINTER(agcom.LPSAFEARRAY), POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_in_arg("IAgDate"), agmarshall.LPSAFEARRAY_arg, agmarshall.AgInterface_out_arg,) }
    def InitializeWithDateAndPosition(self, pathPointDate:"IAgDate", position:list) -> "IAgStkGraphicsPathPoint":
        """Initializes a new path point with the given date and position."""
        return self._intf.invoke(IAgStkGraphicsPathPointFactory._metadata, IAgStkGraphicsPathPointFactory._InitializeWithDateAndPosition_metadata, pathPointDate, position, out_arg())

    _InitializeWithDatePositionAndColor_metadata = { "name" : "InitializeWithDatePositionAndColor",
            "arg_types" : (agcom.PVOID, POINTER(agcom.LPSAFEARRAY), agcom.OLE_COLOR, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_in_arg("IAgDate"), agmarshall.LPSAFEARRAY_arg, agmarshall.OLE_COLOR_arg, agmarshall.AgInterface_out_arg,) }
    def InitializeWithDatePositionAndColor(self, pathPointDate:"IAgDate", position:list, color:agcolor.Color) -> "IAgStkGraphicsPathPoint":
        """Initializes a new path point with the given date, position and color."""
        return self._intf.invoke(IAgStkGraphicsPathPointFactory._metadata, IAgStkGraphicsPathPointFactory._InitializeWithDatePositionAndColor_metadata, pathPointDate, position, color, out_arg())

    _InitializeWithDatePositionColorAndTranslucency_metadata = { "name" : "InitializeWithDatePositionColorAndTranslucency",
            "arg_types" : (agcom.PVOID, POINTER(agcom.LPSAFEARRAY), agcom.OLE_COLOR, agcom.DOUBLE, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_in_arg("IAgDate"), agmarshall.LPSAFEARRAY_arg, agmarshall.OLE_COLOR_arg, agmarshall.DOUBLE_arg, agmarshall.AgInterface_out_arg,) }
    def InitializeWithDatePositionColorAndTranslucency(self, pathPointDate:"IAgDate", position:list, color:agcolor.Color, translucency:float) -> "IAgStkGraphicsPathPoint":
        """Initializes a new path point with the given date, position, color and translucency."""
        return self._intf.invoke(IAgStkGraphicsPathPointFactory._metadata, IAgStkGraphicsPathPointFactory._InitializeWithDatePositionColorAndTranslucency_metadata, pathPointDate, position, color, translucency, out_arg())


agcls.AgClassCatalog.add_catalog_entry("{efb486c4-09f0-4918-b051-7776acd13f66}", IAgStkGraphicsPathPointFactory)
agcls.AgTypeNameMap["IAgStkGraphicsPathPointFactory"] = IAgStkGraphicsPathPointFactory

class IAgStkGraphicsBoundingSphere(object):
    """A sphere that encapsulates an object."""
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{68e2776e-6e9a-449a-8146-99e67cf8d16c}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_Center" : 1,
                             "get_Radius" : 2, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsBoundingSphere._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsBoundingSphere from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsBoundingSphere.__dict__ and type(IAgStkGraphicsBoundingSphere.__dict__[attrname]) == property:
            return IAgStkGraphicsBoundingSphere.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsBoundingSphere.")
    
    _get_Center_metadata = { "name" : "Center",
            "arg_types" : (POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg,) }
    @property
    def Center(self) -> list:
        """A center of the bounding sphere. The center point is specified as one-dimensional array with three elements corresponding to (X,Y,Z) cartesian coordinates."""
        return self._intf.get_property(IAgStkGraphicsBoundingSphere._metadata, IAgStkGraphicsBoundingSphere._get_Center_metadata)

    _get_Radius_metadata = { "name" : "Radius",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def Radius(self) -> float:
        """A radius of the bounding sphere."""
        return self._intf.get_property(IAgStkGraphicsBoundingSphere._metadata, IAgStkGraphicsBoundingSphere._get_Radius_metadata)


agcls.AgClassCatalog.add_catalog_entry("{68e2776e-6e9a-449a-8146-99e67cf8d16c}", IAgStkGraphicsBoundingSphere)
agcls.AgTypeNameMap["IAgStkGraphicsBoundingSphere"] = IAgStkGraphicsBoundingSphere

class IAgStkGraphicsBoundingSphereFactory(object):
    """Creates instances of the bounding sphere type."""
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{fdde5510-3231-4c01-9c23-8485643e47ff}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "Initialize" : 1,
                             "get_MaximumRadiusBoundingSphere" : 2, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsBoundingSphereFactory._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsBoundingSphereFactory from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsBoundingSphereFactory.__dict__ and type(IAgStkGraphicsBoundingSphereFactory.__dict__[attrname]) == property:
            return IAgStkGraphicsBoundingSphereFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsBoundingSphereFactory.")
    
    _Initialize_metadata = { "name" : "Initialize",
            "arg_types" : (POINTER(agcom.LPSAFEARRAY), agcom.DOUBLE, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg, agmarshall.DOUBLE_arg, agmarshall.AgInterface_out_arg,) }
    def Initialize(self, center:list, radius:float) -> "IAgStkGraphicsBoundingSphere":
        """Create instances of BoundingSphere."""
        return self._intf.invoke(IAgStkGraphicsBoundingSphereFactory._metadata, IAgStkGraphicsBoundingSphereFactory._Initialize_metadata, center, radius, out_arg())

    _get_MaximumRadiusBoundingSphere_metadata = { "name" : "MaximumRadiusBoundingSphere",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def MaximumRadiusBoundingSphere(self) -> "IAgStkGraphicsBoundingSphere":
        """Gets the bounding sphere of maximum possible radius."""
        return self._intf.get_property(IAgStkGraphicsBoundingSphereFactory._metadata, IAgStkGraphicsBoundingSphereFactory._get_MaximumRadiusBoundingSphere_metadata)


agcls.AgClassCatalog.add_catalog_entry("{fdde5510-3231-4c01-9c23-8485643e47ff}", IAgStkGraphicsBoundingSphereFactory)
agcls.AgTypeNameMap["IAgStkGraphicsBoundingSphereFactory"] = IAgStkGraphicsBoundingSphereFactory

class IAgStkGraphicsTextureFilter2D(object):
    """A texture filter."""
    _num_methods = 8
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{c71ed80c-abbc-4ce5-bf56-a21ea03c4593}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_MinificationFilter" : 1,
                             "get_MagnificationFilter" : 2,
                             "get_WrapS" : 3,
                             "get_WrapT" : 4,
                             "get_NearestClampToEdge" : 5,
                             "get_NearestRepeat" : 6,
                             "get_LinearClampToEdge" : 7,
                             "get_LinearRepeat" : 8, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsTextureFilter2D._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsTextureFilter2D from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsTextureFilter2D.__dict__ and type(IAgStkGraphicsTextureFilter2D.__dict__[attrname]) == property:
            return IAgStkGraphicsTextureFilter2D.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsTextureFilter2D.")
    
    _get_MinificationFilter_metadata = { "name" : "MinificationFilter",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEStkGraphicsMinificationFilter),) }
    @property
    def MinificationFilter(self) -> "AgEStkGraphicsMinificationFilter":
        """Gets the minification filter used when the pixel being textured maps to an area less than or equal to one texel."""
        return self._intf.get_property(IAgStkGraphicsTextureFilter2D._metadata, IAgStkGraphicsTextureFilter2D._get_MinificationFilter_metadata)

    _get_MagnificationFilter_metadata = { "name" : "MagnificationFilter",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEStkGraphicsMagnificationFilter),) }
    @property
    def MagnificationFilter(self) -> "AgEStkGraphicsMagnificationFilter":
        """Gets the magnification filter used when the pixel being textured maps to an area greater than one texel."""
        return self._intf.get_property(IAgStkGraphicsTextureFilter2D._metadata, IAgStkGraphicsTextureFilter2D._get_MagnificationFilter_metadata)

    _get_WrapS_metadata = { "name" : "WrapS",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEStkGraphicsTextureWrap),) }
    @property
    def WrapS(self) -> "AgEStkGraphicsTextureWrap":
        """Gets the texture wrap for the s direction."""
        return self._intf.get_property(IAgStkGraphicsTextureFilter2D._metadata, IAgStkGraphicsTextureFilter2D._get_WrapS_metadata)

    _get_WrapT_metadata = { "name" : "WrapT",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEStkGraphicsTextureWrap),) }
    @property
    def WrapT(self) -> "AgEStkGraphicsTextureWrap":
        """Gets the texture wrap for the t direction."""
        return self._intf.get_property(IAgStkGraphicsTextureFilter2D._metadata, IAgStkGraphicsTextureFilter2D._get_WrapT_metadata)

    _get_NearestClampToEdge_metadata = { "name" : "NearestClampToEdge",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def NearestClampToEdge(self) -> "IAgStkGraphicsTextureFilter2D":
        """Gets a texture filter with the following properties: MinificationFilter: Nearest, MagnificationFilter: Nearest, WrapS: ClampToEdge, WrapT: ClampToEdge"""
        return self._intf.get_property(IAgStkGraphicsTextureFilter2D._metadata, IAgStkGraphicsTextureFilter2D._get_NearestClampToEdge_metadata)

    _get_NearestRepeat_metadata = { "name" : "NearestRepeat",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def NearestRepeat(self) -> "IAgStkGraphicsTextureFilter2D":
        """Gets a texture filter with the following properties: MinificationFilter: Nearest, MagnificationFilter: Nearest, WrapS: Repeat, WrapT: Repeat"""
        return self._intf.get_property(IAgStkGraphicsTextureFilter2D._metadata, IAgStkGraphicsTextureFilter2D._get_NearestRepeat_metadata)

    _get_LinearClampToEdge_metadata = { "name" : "LinearClampToEdge",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def LinearClampToEdge(self) -> "IAgStkGraphicsTextureFilter2D":
        """Gets a texture filter with the following properties: MinificationFilter: Linear, MagnificationFilter: Linear, WrapS: ClampToEdge, WrapT: ClampToEdge"""
        return self._intf.get_property(IAgStkGraphicsTextureFilter2D._metadata, IAgStkGraphicsTextureFilter2D._get_LinearClampToEdge_metadata)

    _get_LinearRepeat_metadata = { "name" : "LinearRepeat",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def LinearRepeat(self) -> "IAgStkGraphicsTextureFilter2D":
        """Gets a texture filter with the following properties: MinificationFilter: Linear, MagnificationFilter: Linear, WrapS: Repeat, WrapT: Repeat"""
        return self._intf.get_property(IAgStkGraphicsTextureFilter2D._metadata, IAgStkGraphicsTextureFilter2D._get_LinearRepeat_metadata)


agcls.AgClassCatalog.add_catalog_entry("{c71ed80c-abbc-4ce5-bf56-a21ea03c4593}", IAgStkGraphicsTextureFilter2D)
agcls.AgTypeNameMap["IAgStkGraphicsTextureFilter2D"] = IAgStkGraphicsTextureFilter2D

class IAgStkGraphicsTextureFilter2DFactory(object):
    """Creates texture filters."""
    _num_methods = 7
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{8e616d0f-4cf9-4dfd-b7fd-1295dd9131e5}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_NearestClampToEdge" : 1,
                             "get_NearestRepeat" : 2,
                             "get_LinearClampToEdge" : 3,
                             "get_LinearRepeat" : 4,
                             "Initialize" : 5,
                             "InitializeWithTextureWrap" : 6,
                             "InitializeWithMinificationAndMagnification" : 7, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsTextureFilter2DFactory._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsTextureFilter2DFactory from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsTextureFilter2DFactory.__dict__ and type(IAgStkGraphicsTextureFilter2DFactory.__dict__[attrname]) == property:
            return IAgStkGraphicsTextureFilter2DFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsTextureFilter2DFactory.")
    
    _get_NearestClampToEdge_metadata = { "name" : "NearestClampToEdge",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def NearestClampToEdge(self) -> "IAgStkGraphicsTextureFilter2D":
        """Gets a texture filter with the following properties: MinificationFilter: Nearest, MagnificationFilter: Nearest, WrapS: ClampToEdge, WrapT: ClampToEdge"""
        return self._intf.get_property(IAgStkGraphicsTextureFilter2DFactory._metadata, IAgStkGraphicsTextureFilter2DFactory._get_NearestClampToEdge_metadata)

    _get_NearestRepeat_metadata = { "name" : "NearestRepeat",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def NearestRepeat(self) -> "IAgStkGraphicsTextureFilter2D":
        """Gets a texture filter with the following properties: MinificationFilter: Nearest, MagnificationFilter: Nearest, WrapS: Repeat, WrapT: Repeat"""
        return self._intf.get_property(IAgStkGraphicsTextureFilter2DFactory._metadata, IAgStkGraphicsTextureFilter2DFactory._get_NearestRepeat_metadata)

    _get_LinearClampToEdge_metadata = { "name" : "LinearClampToEdge",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def LinearClampToEdge(self) -> "IAgStkGraphicsTextureFilter2D":
        """Gets a texture filter with the following properties: MinificationFilter: Linear, MagnificationFilter: Linear, WrapS: ClampToEdge, WrapT: ClampToEdge"""
        return self._intf.get_property(IAgStkGraphicsTextureFilter2DFactory._metadata, IAgStkGraphicsTextureFilter2DFactory._get_LinearClampToEdge_metadata)

    _get_LinearRepeat_metadata = { "name" : "LinearRepeat",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def LinearRepeat(self) -> "IAgStkGraphicsTextureFilter2D":
        """Gets a texture filter with the following properties: MinificationFilter: Linear, MagnificationFilter: Linear, WrapS: Repeat, WrapT: Repeat"""
        return self._intf.get_property(IAgStkGraphicsTextureFilter2DFactory._metadata, IAgStkGraphicsTextureFilter2DFactory._get_LinearRepeat_metadata)

    _Initialize_metadata = { "name" : "Initialize",
            "arg_types" : (agcom.LONG, agcom.LONG, agcom.LONG, agcom.LONG, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEStkGraphicsMinificationFilter), agmarshall.AgEnum_arg(AgEStkGraphicsMagnificationFilter), agmarshall.AgEnum_arg(AgEStkGraphicsTextureWrap), agmarshall.AgEnum_arg(AgEStkGraphicsTextureWrap), agmarshall.AgInterface_out_arg,) }
    def Initialize(self, minificationFilter:"AgEStkGraphicsMinificationFilter", magnificationFilter:"AgEStkGraphicsMagnificationFilter", wrapS:"AgEStkGraphicsTextureWrap", wrapT:"AgEStkGraphicsTextureWrap") -> "IAgStkGraphicsTextureFilter2D":
        """Creates a texture filter using the specified minification/magnification options and texture wrap."""
        return self._intf.invoke(IAgStkGraphicsTextureFilter2DFactory._metadata, IAgStkGraphicsTextureFilter2DFactory._Initialize_metadata, minificationFilter, magnificationFilter, wrapS, wrapT, out_arg())

    _InitializeWithTextureWrap_metadata = { "name" : "InitializeWithTextureWrap",
            "arg_types" : (agcom.LONG, agcom.LONG, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEStkGraphicsTextureWrap), agmarshall.AgEnum_arg(AgEStkGraphicsTextureWrap), agmarshall.AgInterface_out_arg,) }
    def InitializeWithTextureWrap(self, wrapS:"AgEStkGraphicsTextureWrap", wrapT:"AgEStkGraphicsTextureWrap") -> "IAgStkGraphicsTextureFilter2D":
        """Creates a texture filter using the specified texture wrap."""
        return self._intf.invoke(IAgStkGraphicsTextureFilter2DFactory._metadata, IAgStkGraphicsTextureFilter2DFactory._InitializeWithTextureWrap_metadata, wrapS, wrapT, out_arg())

    _InitializeWithMinificationAndMagnification_metadata = { "name" : "InitializeWithMinificationAndMagnification",
            "arg_types" : (agcom.LONG, agcom.LONG, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEStkGraphicsMinificationFilter), agmarshall.AgEnum_arg(AgEStkGraphicsMagnificationFilter), agmarshall.AgInterface_out_arg,) }
    def InitializeWithMinificationAndMagnification(self, minificationFilter:"AgEStkGraphicsMinificationFilter", magnificationFilter:"AgEStkGraphicsMagnificationFilter") -> "IAgStkGraphicsTextureFilter2D":
        """Creates a texture filter using the specified minification/magnification options."""
        return self._intf.invoke(IAgStkGraphicsTextureFilter2DFactory._metadata, IAgStkGraphicsTextureFilter2DFactory._InitializeWithMinificationAndMagnification_metadata, minificationFilter, magnificationFilter, out_arg())


agcls.AgClassCatalog.add_catalog_entry("{8e616d0f-4cf9-4dfd-b7fd-1295dd9131e5}", IAgStkGraphicsTextureFilter2DFactory)
agcls.AgTypeNameMap["IAgStkGraphicsTextureFilter2DFactory"] = IAgStkGraphicsTextureFilter2DFactory

class IAgStkGraphicsRendererTexture2D(object):
    """A 2D Texture. A texture represents an image that is ready for use by objects such as primitives and overlays. Textures typically reside in video memory."""
    _num_methods = 1
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{b207af7e-f2b5-4b2f-89f6-1fc3721102b3}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_Template" : 1, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsRendererTexture2D._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsRendererTexture2D from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsRendererTexture2D.__dict__ and type(IAgStkGraphicsRendererTexture2D.__dict__[attrname]) == property:
            return IAgStkGraphicsRendererTexture2D.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsRendererTexture2D.")
    
    _get_Template_metadata = { "name" : "Template",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def Template(self) -> "IAgStkGraphicsRendererTextureTemplate2D":
        """Gets a template from which the texture was created."""
        return self._intf.get_property(IAgStkGraphicsRendererTexture2D._metadata, IAgStkGraphicsRendererTexture2D._get_Template_metadata)


agcls.AgClassCatalog.add_catalog_entry("{b207af7e-f2b5-4b2f-89f6-1fc3721102b3}", IAgStkGraphicsRendererTexture2D)
agcls.AgTypeNameMap["IAgStkGraphicsRendererTexture2D"] = IAgStkGraphicsRendererTexture2D

class IAgStkGraphicsRendererTextureTemplate2D(object):
    """Template object containing attributes required to create a 2D texture."""
    _num_methods = 3
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{46fbfc4c-29b8-49c7-beb7-77bc5d836f10}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_InternalFormat" : 1,
                             "get_Width" : 2,
                             "get_Height" : 3, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsRendererTextureTemplate2D._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsRendererTextureTemplate2D from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsRendererTextureTemplate2D.__dict__ and type(IAgStkGraphicsRendererTextureTemplate2D.__dict__[attrname]) == property:
            return IAgStkGraphicsRendererTextureTemplate2D.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsRendererTextureTemplate2D.")
    
    _get_InternalFormat_metadata = { "name" : "InternalFormat",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEStkGraphicsInternalTextureFormat),) }
    @property
    def InternalFormat(self) -> "AgEStkGraphicsInternalTextureFormat":
        """Gets an internal format of the texture."""
        return self._intf.get_property(IAgStkGraphicsRendererTextureTemplate2D._metadata, IAgStkGraphicsRendererTextureTemplate2D._get_InternalFormat_metadata)

    _get_Width_metadata = { "name" : "Width",
            "arg_types" : (POINTER(agcom.INT),),
            "marshallers" : (agmarshall.INT_arg,) }
    @property
    def Width(self) -> int:
        """Gets a width of the texture in texels."""
        return self._intf.get_property(IAgStkGraphicsRendererTextureTemplate2D._metadata, IAgStkGraphicsRendererTextureTemplate2D._get_Width_metadata)

    _get_Height_metadata = { "name" : "Height",
            "arg_types" : (POINTER(agcom.INT),),
            "marshallers" : (agmarshall.INT_arg,) }
    @property
    def Height(self) -> int:
        """Gets a height of the texture in texels."""
        return self._intf.get_property(IAgStkGraphicsRendererTextureTemplate2D._metadata, IAgStkGraphicsRendererTextureTemplate2D._get_Height_metadata)


agcls.AgClassCatalog.add_catalog_entry("{46fbfc4c-29b8-49c7-beb7-77bc5d836f10}", IAgStkGraphicsRendererTextureTemplate2D)
agcls.AgTypeNameMap["IAgStkGraphicsRendererTextureTemplate2D"] = IAgStkGraphicsRendererTextureTemplate2D

class IAgStkGraphicsPathPointCollection(object):
    """A collection of path points."""
    _num_methods = 3
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{9214e199-6476-4ef1-a741-13362718bdd5}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_Count" : 1,
                             "Item" : 2,
                             "get__NewEnum" : 3, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsPathPointCollection._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsPathPointCollection from source object.")
        self.__dict__["_enumerator"] = None
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsPathPointCollection.__dict__ and type(IAgStkGraphicsPathPointCollection.__dict__[attrname]) == property:
            return IAgStkGraphicsPathPointCollection.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsPathPointCollection.")
    def __iter__(self):
        self.__dict__["_enumerator"] = self._NewEnum
        self._enumerator.reset()
        return self
    def __next__(self) -> "IAgStkGraphicsPathPoint":
        if self._enumerator is None:
            raise StopIteration
        nextval = self._enumerator.next()
        if nextval is None:
            raise StopIteration
        return nextval
    
    _get_Count_metadata = { "name" : "Count",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.LONG_arg,) }
    @property
    def Count(self) -> int:
        """A total number of elements in the collection."""
        return self._intf.get_property(IAgStkGraphicsPathPointCollection._metadata, IAgStkGraphicsPathPointCollection._get_Count_metadata)

    _Item_metadata = { "name" : "Item",
            "arg_types" : (agcom.LONG, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.LONG_arg, agmarshall.AgInterface_out_arg,) }
    def Item(self, index:int) -> "IAgStkGraphicsPathPoint":
        """Returns a path point at the specified position in the collection."""
        return self._intf.invoke(IAgStkGraphicsPathPointCollection._metadata, IAgStkGraphicsPathPointCollection._Item_metadata, index, out_arg())

    _get__NewEnum_metadata = { "name" : "_NewEnum",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.IEnumVARIANT_arg,) }
    @property
    def _NewEnum(self) -> enumerator_proxy:
        return self._intf.get_property(IAgStkGraphicsPathPointCollection._metadata, IAgStkGraphicsPathPointCollection._get__NewEnum_metadata)

    __getitem__ = Item



agcls.AgClassCatalog.add_catalog_entry("{9214e199-6476-4ef1-a741-13362718bdd5}", IAgStkGraphicsPathPointCollection)
agcls.AgTypeNameMap["IAgStkGraphicsPathPointCollection"] = IAgStkGraphicsPathPointCollection

class IAgStkGraphicsObjectCollection(object):
    """A collection of objects."""
    _num_methods = 3
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{feb3a8c8-dc5b-4246-a8ec-1d6154b4cf68}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_Count" : 1,
                             "Item" : 2,
                             "get__NewEnum" : 3, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsObjectCollection._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsObjectCollection from source object.")
        self.__dict__["_enumerator"] = None
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsObjectCollection.__dict__ and type(IAgStkGraphicsObjectCollection.__dict__[attrname]) == property:
            return IAgStkGraphicsObjectCollection.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsObjectCollection.")
    def __iter__(self):
        self.__dict__["_enumerator"] = self._NewEnum
        self._enumerator.reset()
        return self
    def __next__(self) -> typing.Any:
        if self._enumerator is None:
            raise StopIteration
        nextval = self._enumerator.next()
        if nextval is None:
            raise StopIteration
        return nextval
    
    _get_Count_metadata = { "name" : "Count",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.LONG_arg,) }
    @property
    def Count(self) -> int:
        """A total number of elements in the collection."""
        return self._intf.get_property(IAgStkGraphicsObjectCollection._metadata, IAgStkGraphicsObjectCollection._get_Count_metadata)

    _Item_metadata = { "name" : "Item",
            "arg_types" : (agcom.LONG, POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.LONG_arg, agmarshall.VARIANT_arg,) }
    def Item(self, index:int) -> typing.Any:
        """An item in the collection at the specified index."""
        return self._intf.invoke(IAgStkGraphicsObjectCollection._metadata, IAgStkGraphicsObjectCollection._Item_metadata, index, out_arg())

    _get__NewEnum_metadata = { "name" : "_NewEnum",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.IEnumVARIANT_arg,) }
    @property
    def _NewEnum(self) -> enumerator_proxy:
        return self._intf.get_property(IAgStkGraphicsObjectCollection._metadata, IAgStkGraphicsObjectCollection._get__NewEnum_metadata)

    __getitem__ = Item



agcls.AgClassCatalog.add_catalog_entry("{feb3a8c8-dc5b-4246-a8ec-1d6154b4cf68}", IAgStkGraphicsObjectCollection)
agcls.AgTypeNameMap["IAgStkGraphicsObjectCollection"] = IAgStkGraphicsObjectCollection

class IAgStkGraphicsSceneCollection(object):
    """A collection of scenes."""
    _num_methods = 3
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{aac03f9e-8c23-4a8d-ad88-455deb232f0b}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_Count" : 1,
                             "Item" : 2,
                             "get__NewEnum" : 3, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsSceneCollection._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsSceneCollection from source object.")
        self.__dict__["_enumerator"] = None
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsSceneCollection.__dict__ and type(IAgStkGraphicsSceneCollection.__dict__[attrname]) == property:
            return IAgStkGraphicsSceneCollection.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsSceneCollection.")
    def __iter__(self):
        self.__dict__["_enumerator"] = self._NewEnum
        self._enumerator.reset()
        return self
    def __next__(self) -> "IAgStkGraphicsScene":
        if self._enumerator is None:
            raise StopIteration
        nextval = self._enumerator.next()
        if nextval is None:
            raise StopIteration
        return nextval
    
    _get_Count_metadata = { "name" : "Count",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.LONG_arg,) }
    @property
    def Count(self) -> int:
        """Total number of scenes in the collection."""
        return self._intf.get_property(IAgStkGraphicsSceneCollection._metadata, IAgStkGraphicsSceneCollection._get_Count_metadata)

    _Item_metadata = { "name" : "Item",
            "arg_types" : (agcom.LONG, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.LONG_arg, agmarshall.AgInterface_out_arg,) }
    def Item(self, index:int) -> "IAgStkGraphicsScene":
        """A scene in the collection at a specified index."""
        return self._intf.invoke(IAgStkGraphicsSceneCollection._metadata, IAgStkGraphicsSceneCollection._Item_metadata, index, out_arg())

    _get__NewEnum_metadata = { "name" : "_NewEnum",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.IEnumVARIANT_arg,) }
    @property
    def _NewEnum(self) -> enumerator_proxy:
        return self._intf.get_property(IAgStkGraphicsSceneCollection._metadata, IAgStkGraphicsSceneCollection._get__NewEnum_metadata)

    __getitem__ = Item



agcls.AgClassCatalog.add_catalog_entry("{aac03f9e-8c23-4a8d-ad88-455deb232f0b}", IAgStkGraphicsSceneCollection)
agcls.AgTypeNameMap["IAgStkGraphicsSceneCollection"] = IAgStkGraphicsSceneCollection

class IAgStkGraphicsScreenOverlayContainer(object):
    """The interface for screen overlays that contain a collection of other overlays. This interface is implemented by ScreenOverlayManager and ScreenOverlay."""
    _num_methods = 5
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{5e57d9b7-f014-46d7-8b6d-b38d47e7ce41}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_Overlays" : 1,
                             "get_Padding" : 2,
                             "set_Padding" : 3,
                             "get_Display" : 4,
                             "set_Display" : 5, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsScreenOverlayContainer._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsScreenOverlayContainer from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsScreenOverlayContainer.__dict__ and type(IAgStkGraphicsScreenOverlayContainer.__dict__[attrname]) == property:
            return IAgStkGraphicsScreenOverlayContainer.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsScreenOverlayContainer.")
    
    _get_Overlays_metadata = { "name" : "Overlays",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def Overlays(self) -> "IAgStkGraphicsScreenOverlayCollection":
        """Gets the collection of overlays that are contained within this overlay."""
        return self._intf.get_property(IAgStkGraphicsScreenOverlayContainer._metadata, IAgStkGraphicsScreenOverlayContainer._get_Overlays_metadata)

    _get_Padding_metadata = { "name" : "Padding",
            "arg_types" : (POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg,) }
    @property
    def Padding(self) -> list:
        """Gets or sets the padding surrounding the overlays that are contained within this overlay. The array contains the components of the padding arranged in the order left, top, right, bottom."""
        return self._intf.get_property(IAgStkGraphicsScreenOverlayContainer._metadata, IAgStkGraphicsScreenOverlayContainer._get_Padding_metadata)

    _set_Padding_metadata = { "name" : "Padding",
            "arg_types" : (agcom.LPSAFEARRAY,),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg,) }
    @Padding.setter
    def Padding(self, padding:list) -> None:
        return self._intf.set_property(IAgStkGraphicsScreenOverlayContainer._metadata, IAgStkGraphicsScreenOverlayContainer._set_Padding_metadata, padding)

    _get_Display_metadata = { "name" : "Display",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def Display(self) -> bool:
        """Gets or sets if this overlay and the collection of overlays that are contained within this overlay should be rendered."""
        return self._intf.get_property(IAgStkGraphicsScreenOverlayContainer._metadata, IAgStkGraphicsScreenOverlayContainer._get_Display_metadata)

    _set_Display_metadata = { "name" : "Display",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @Display.setter
    def Display(self, display:bool) -> None:
        return self._intf.set_property(IAgStkGraphicsScreenOverlayContainer._metadata, IAgStkGraphicsScreenOverlayContainer._set_Display_metadata, display)


agcls.AgClassCatalog.add_catalog_entry("{5e57d9b7-f014-46d7-8b6d-b38d47e7ce41}", IAgStkGraphicsScreenOverlayContainer)
agcls.AgTypeNameMap["IAgStkGraphicsScreenOverlayContainer"] = IAgStkGraphicsScreenOverlayContainer

class IAgStkGraphicsScreenOverlayPickResultCollection(object):
    """A collection of pick results."""
    _num_methods = 3
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{6c1f8d2c-1b38-482c-b935-b174003284bb}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_Count" : 1,
                             "Item" : 2,
                             "get__NewEnum" : 3, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsScreenOverlayPickResultCollection._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsScreenOverlayPickResultCollection from source object.")
        self.__dict__["_enumerator"] = None
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsScreenOverlayPickResultCollection.__dict__ and type(IAgStkGraphicsScreenOverlayPickResultCollection.__dict__[attrname]) == property:
            return IAgStkGraphicsScreenOverlayPickResultCollection.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsScreenOverlayPickResultCollection.")
    def __iter__(self):
        self.__dict__["_enumerator"] = self._NewEnum
        self._enumerator.reset()
        return self
    def __next__(self) -> "IAgStkGraphicsScreenOverlayPickResult":
        if self._enumerator is None:
            raise StopIteration
        nextval = self._enumerator.next()
        if nextval is None:
            raise StopIteration
        return nextval
    
    _get_Count_metadata = { "name" : "Count",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.LONG_arg,) }
    @property
    def Count(self) -> int:
        """A total number of elements in the collection."""
        return self._intf.get_property(IAgStkGraphicsScreenOverlayPickResultCollection._metadata, IAgStkGraphicsScreenOverlayPickResultCollection._get_Count_metadata)

    _Item_metadata = { "name" : "Item",
            "arg_types" : (agcom.LONG, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.LONG_arg, agmarshall.AgInterface_out_arg,) }
    def Item(self, index:int) -> "IAgStkGraphicsScreenOverlayPickResult":
        """Get an element at the specified position in the collection."""
        return self._intf.invoke(IAgStkGraphicsScreenOverlayPickResultCollection._metadata, IAgStkGraphicsScreenOverlayPickResultCollection._Item_metadata, index, out_arg())

    _get__NewEnum_metadata = { "name" : "_NewEnum",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.IEnumVARIANT_arg,) }
    @property
    def _NewEnum(self) -> enumerator_proxy:
        return self._intf.get_property(IAgStkGraphicsScreenOverlayPickResultCollection._metadata, IAgStkGraphicsScreenOverlayPickResultCollection._get__NewEnum_metadata)

    __getitem__ = Item



agcls.AgClassCatalog.add_catalog_entry("{6c1f8d2c-1b38-482c-b935-b174003284bb}", IAgStkGraphicsScreenOverlayPickResultCollection)
agcls.AgTypeNameMap["IAgStkGraphicsScreenOverlayPickResultCollection"] = IAgStkGraphicsScreenOverlayPickResultCollection

class IAgStkGraphicsGlobeImageOverlayAddCompleteEventArgs(object):
    """The event is raised when the globe image overlay is displayed for the first time after being added using AddAsync."""
    _num_methods = 1
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{bbe097c9-d64c-4474-ba9a-fb47c76388ba}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_Overlay" : 1, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsGlobeImageOverlayAddCompleteEventArgs._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsGlobeImageOverlayAddCompleteEventArgs from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsGlobeImageOverlayAddCompleteEventArgs.__dict__ and type(IAgStkGraphicsGlobeImageOverlayAddCompleteEventArgs.__dict__[attrname]) == property:
            return IAgStkGraphicsGlobeImageOverlayAddCompleteEventArgs.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsGlobeImageOverlayAddCompleteEventArgs.")
    
    _get_Overlay_metadata = { "name" : "Overlay",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def Overlay(self) -> "IAgStkGraphicsGlobeImageOverlay":
        """The overlay object that was added earlier using AddAsync."""
        return self._intf.get_property(IAgStkGraphicsGlobeImageOverlayAddCompleteEventArgs._metadata, IAgStkGraphicsGlobeImageOverlayAddCompleteEventArgs._get_Overlay_metadata)


agcls.AgClassCatalog.add_catalog_entry("{bbe097c9-d64c-4474-ba9a-fb47c76388ba}", IAgStkGraphicsGlobeImageOverlayAddCompleteEventArgs)
agcls.AgTypeNameMap["IAgStkGraphicsGlobeImageOverlayAddCompleteEventArgs"] = IAgStkGraphicsGlobeImageOverlayAddCompleteEventArgs

class IAgStkGraphicsTerrainOverlayAddCompleteEventArgs(object):
    """The event is raised when the terrain overlay is displayed for the first time after having been added using AddAsync."""
    _num_methods = 1
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{76a70982-21b5-427f-9db1-c0b92950b516}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_Overlay" : 1, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsTerrainOverlayAddCompleteEventArgs._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsTerrainOverlayAddCompleteEventArgs from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsTerrainOverlayAddCompleteEventArgs.__dict__ and type(IAgStkGraphicsTerrainOverlayAddCompleteEventArgs.__dict__[attrname]) == property:
            return IAgStkGraphicsTerrainOverlayAddCompleteEventArgs.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsTerrainOverlayAddCompleteEventArgs.")
    
    _get_Overlay_metadata = { "name" : "Overlay",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def Overlay(self) -> "IAgStkGraphicsTerrainOverlay":
        """The terrain overlay being displayed for the first time."""
        return self._intf.get_property(IAgStkGraphicsTerrainOverlayAddCompleteEventArgs._metadata, IAgStkGraphicsTerrainOverlayAddCompleteEventArgs._get_Overlay_metadata)


agcls.AgClassCatalog.add_catalog_entry("{76a70982-21b5-427f-9db1-c0b92950b516}", IAgStkGraphicsTerrainOverlayAddCompleteEventArgs)
agcls.AgTypeNameMap["IAgStkGraphicsTerrainOverlayAddCompleteEventArgs"] = IAgStkGraphicsTerrainOverlayAddCompleteEventArgs

class IAgStkGraphicsPickResultCollection(object):
    """A collection of picked objects."""
    _num_methods = 3
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{2d29d5b1-b160-49ad-8f58-cef696bc952a}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_Count" : 1,
                             "Item" : 2,
                             "get__NewEnum" : 3, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsPickResultCollection._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsPickResultCollection from source object.")
        self.__dict__["_enumerator"] = None
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsPickResultCollection.__dict__ and type(IAgStkGraphicsPickResultCollection.__dict__[attrname]) == property:
            return IAgStkGraphicsPickResultCollection.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsPickResultCollection.")
    def __iter__(self):
        self.__dict__["_enumerator"] = self._NewEnum
        self._enumerator.reset()
        return self
    def __next__(self) -> "IAgStkGraphicsPickResult":
        if self._enumerator is None:
            raise StopIteration
        nextval = self._enumerator.next()
        if nextval is None:
            raise StopIteration
        return nextval
    
    _get_Count_metadata = { "name" : "Count",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.LONG_arg,) }
    @property
    def Count(self) -> int:
        """A total number of elements in the collection."""
        return self._intf.get_property(IAgStkGraphicsPickResultCollection._metadata, IAgStkGraphicsPickResultCollection._get_Count_metadata)

    _Item_metadata = { "name" : "Item",
            "arg_types" : (agcom.LONG, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.LONG_arg, agmarshall.AgInterface_out_arg,) }
    def Item(self, index:int) -> "IAgStkGraphicsPickResult":
        """Returns a picked object at the specified position in the collection."""
        return self._intf.invoke(IAgStkGraphicsPickResultCollection._metadata, IAgStkGraphicsPickResultCollection._Item_metadata, index, out_arg())

    _get__NewEnum_metadata = { "name" : "_NewEnum",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.IEnumVARIANT_arg,) }
    @property
    def _NewEnum(self) -> enumerator_proxy:
        return self._intf.get_property(IAgStkGraphicsPickResultCollection._metadata, IAgStkGraphicsPickResultCollection._get__NewEnum_metadata)

    __getitem__ = Item



agcls.AgClassCatalog.add_catalog_entry("{2d29d5b1-b160-49ad-8f58-cef696bc952a}", IAgStkGraphicsPickResultCollection)
agcls.AgTypeNameMap["IAgStkGraphicsPickResultCollection"] = IAgStkGraphicsPickResultCollection

class IAgStkGraphicsRenderingEventArgs(object):
    """The event is raised when the scene is rendered."""
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{7c1eea22-fad1-437e-9282-f9202cd103bd}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_Time" : 1,
                             "get_TimeInEpSecs" : 2, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsRenderingEventArgs._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsRenderingEventArgs from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsRenderingEventArgs.__dict__ and type(IAgStkGraphicsRenderingEventArgs.__dict__[attrname]) == property:
            return IAgStkGraphicsRenderingEventArgs.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsRenderingEventArgs.")
    
    _get_Time_metadata = { "name" : "Time",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def Time(self) -> "IAgDate":
        """The time of the rendering event."""
        return self._intf.get_property(IAgStkGraphicsRenderingEventArgs._metadata, IAgStkGraphicsRenderingEventArgs._get_Time_metadata)

    _get_TimeInEpSecs_metadata = { "name" : "TimeInEpSecs",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def TimeInEpSecs(self) -> float:
        """The time of the rendering event (in STK's scenario epoch units)."""
        return self._intf.get_property(IAgStkGraphicsRenderingEventArgs._metadata, IAgStkGraphicsRenderingEventArgs._get_TimeInEpSecs_metadata)


agcls.AgClassCatalog.add_catalog_entry("{7c1eea22-fad1-437e-9282-f9202cd103bd}", IAgStkGraphicsRenderingEventArgs)
agcls.AgTypeNameMap["IAgStkGraphicsRenderingEventArgs"] = IAgStkGraphicsRenderingEventArgs

class IAgStkGraphicsBatchPrimitiveIndex(object):
    """Represents an individual item index that is associated with a batch primitive. Provides the Index of the individual item and the Primitive that contains that index..."""
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{15dae589-33b5-4629-a50f-485a49546ddf}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_Index" : 1,
                             "get_Primitive" : 2, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsBatchPrimitiveIndex._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsBatchPrimitiveIndex from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsBatchPrimitiveIndex.__dict__ and type(IAgStkGraphicsBatchPrimitiveIndex.__dict__[attrname]) == property:
            return IAgStkGraphicsBatchPrimitiveIndex.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsBatchPrimitiveIndex.")
    
    _get_Index_metadata = { "name" : "Index",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.LONG_arg,) }
    @property
    def Index(self) -> int:
        """The index of the item contained by the Primitive."""
        return self._intf.get_property(IAgStkGraphicsBatchPrimitiveIndex._metadata, IAgStkGraphicsBatchPrimitiveIndex._get_Index_metadata)

    _get_Primitive_metadata = { "name" : "Primitive",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def Primitive(self) -> "IAgStkGraphicsPrimitive":
        """The Primitive that contains the item at the Index specified."""
        return self._intf.get_property(IAgStkGraphicsBatchPrimitiveIndex._metadata, IAgStkGraphicsBatchPrimitiveIndex._get_Primitive_metadata)


agcls.AgClassCatalog.add_catalog_entry("{15dae589-33b5-4629-a50f-485a49546ddf}", IAgStkGraphicsBatchPrimitiveIndex)
agcls.AgTypeNameMap["IAgStkGraphicsBatchPrimitiveIndex"] = IAgStkGraphicsBatchPrimitiveIndex

class IAgStkGraphicsKmlDocumentCollection(object):
    """A collection of KML documents."""
    _num_methods = 3
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{8f385d51-5b9c-4f8d-8340-1e8f49b51a6a}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_Count" : 1,
                             "Item" : 2,
                             "get__NewEnum" : 3, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsKmlDocumentCollection._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsKmlDocumentCollection from source object.")
        self.__dict__["_enumerator"] = None
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsKmlDocumentCollection.__dict__ and type(IAgStkGraphicsKmlDocumentCollection.__dict__[attrname]) == property:
            return IAgStkGraphicsKmlDocumentCollection.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsKmlDocumentCollection.")
    def __iter__(self):
        self.__dict__["_enumerator"] = self._NewEnum
        self._enumerator.reset()
        return self
    def __next__(self) -> "IAgStkGraphicsKmlDocument":
        if self._enumerator is None:
            raise StopIteration
        nextval = self._enumerator.next()
        if nextval is None:
            raise StopIteration
        return nextval
    
    _get_Count_metadata = { "name" : "Count",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.LONG_arg,) }
    @property
    def Count(self) -> int:
        """A total number of elements in the collection."""
        return self._intf.get_property(IAgStkGraphicsKmlDocumentCollection._metadata, IAgStkGraphicsKmlDocumentCollection._get_Count_metadata)

    _Item_metadata = { "name" : "Item",
            "arg_types" : (agcom.LONG, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.LONG_arg, agmarshall.AgInterface_out_arg,) }
    def Item(self, index:int) -> "IAgStkGraphicsKmlDocument":
        """Get an element at the specified position in the collection."""
        return self._intf.invoke(IAgStkGraphicsKmlDocumentCollection._metadata, IAgStkGraphicsKmlDocumentCollection._Item_metadata, index, out_arg())

    _get__NewEnum_metadata = { "name" : "_NewEnum",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.IEnumVARIANT_arg,) }
    @property
    def _NewEnum(self) -> enumerator_proxy:
        return self._intf.get_property(IAgStkGraphicsKmlDocumentCollection._metadata, IAgStkGraphicsKmlDocumentCollection._get__NewEnum_metadata)

    __getitem__ = Item



agcls.AgClassCatalog.add_catalog_entry("{8f385d51-5b9c-4f8d-8340-1e8f49b51a6a}", IAgStkGraphicsKmlDocumentCollection)
agcls.AgTypeNameMap["IAgStkGraphicsKmlDocumentCollection"] = IAgStkGraphicsKmlDocumentCollection

class IAgStkGraphicsKmlFeatureCollection(object):
    """A collection of KML features."""
    _num_methods = 3
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{e4f1dff5-fbb1-4951-bfc0-abfeec89acc8}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_Count" : 1,
                             "Item" : 2,
                             "get__NewEnum" : 3, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsKmlFeatureCollection._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsKmlFeatureCollection from source object.")
        self.__dict__["_enumerator"] = None
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsKmlFeatureCollection.__dict__ and type(IAgStkGraphicsKmlFeatureCollection.__dict__[attrname]) == property:
            return IAgStkGraphicsKmlFeatureCollection.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsKmlFeatureCollection.")
    def __iter__(self):
        self.__dict__["_enumerator"] = self._NewEnum
        self._enumerator.reset()
        return self
    def __next__(self) -> "IAgStkGraphicsKmlFeature":
        if self._enumerator is None:
            raise StopIteration
        nextval = self._enumerator.next()
        if nextval is None:
            raise StopIteration
        return nextval
    
    _get_Count_metadata = { "name" : "Count",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.LONG_arg,) }
    @property
    def Count(self) -> int:
        """A total number of elements in the collection."""
        return self._intf.get_property(IAgStkGraphicsKmlFeatureCollection._metadata, IAgStkGraphicsKmlFeatureCollection._get_Count_metadata)

    _Item_metadata = { "name" : "Item",
            "arg_types" : (agcom.LONG, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.LONG_arg, agmarshall.AgInterface_out_arg,) }
    def Item(self, index:int) -> "IAgStkGraphicsKmlFeature":
        """Get an element at the specified position in the collection."""
        return self._intf.invoke(IAgStkGraphicsKmlFeatureCollection._metadata, IAgStkGraphicsKmlFeatureCollection._Item_metadata, index, out_arg())

    _get__NewEnum_metadata = { "name" : "_NewEnum",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.IEnumVARIANT_arg,) }
    @property
    def _NewEnum(self) -> enumerator_proxy:
        return self._intf.get_property(IAgStkGraphicsKmlFeatureCollection._metadata, IAgStkGraphicsKmlFeatureCollection._get__NewEnum_metadata)

    __getitem__ = Item



agcls.AgClassCatalog.add_catalog_entry("{e4f1dff5-fbb1-4951-bfc0-abfeec89acc8}", IAgStkGraphicsKmlFeatureCollection)
agcls.AgTypeNameMap["IAgStkGraphicsKmlFeatureCollection"] = IAgStkGraphicsKmlFeatureCollection

class IAgStkGraphicsKmlDocumentLoadedEventArgs(object):
    """The event is raised when a KML document has been loaded."""
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{60d78883-928f-45f2-ab60-0becb167af3d}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_Document" : 1,
                             "get_Exception" : 2, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsKmlDocumentLoadedEventArgs._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsKmlDocumentLoadedEventArgs from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsKmlDocumentLoadedEventArgs.__dict__ and type(IAgStkGraphicsKmlDocumentLoadedEventArgs.__dict__[attrname]) == property:
            return IAgStkGraphicsKmlDocumentLoadedEventArgs.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsKmlDocumentLoadedEventArgs.")
    
    _get_Document_metadata = { "name" : "Document",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def Document(self) -> "IAgStkGraphicsKmlDocument":
        """Gets the KML document associated with the load event."""
        return self._intf.get_property(IAgStkGraphicsKmlDocumentLoadedEventArgs._metadata, IAgStkGraphicsKmlDocumentLoadedEventArgs._get_Document_metadata)

    _get_Exception_metadata = { "name" : "Exception",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def Exception(self) -> str:
        """Returns an error message, if an error occurred while loading the KML; otherwise an empty string."""
        return self._intf.get_property(IAgStkGraphicsKmlDocumentLoadedEventArgs._metadata, IAgStkGraphicsKmlDocumentLoadedEventArgs._get_Exception_metadata)


agcls.AgClassCatalog.add_catalog_entry("{60d78883-928f-45f2-ab60-0becb167af3d}", IAgStkGraphicsKmlDocumentLoadedEventArgs)
agcls.AgTypeNameMap["IAgStkGraphicsKmlDocumentLoadedEventArgs"] = IAgStkGraphicsKmlDocumentLoadedEventArgs

class IAgStkGraphicsFactoryAndInitializers(object):
    """Methods and properties are used to initialize new primitives, display conditions, screen overlays, textures and many other types; compute and retrieve triangulator results and access global properties (what's known as static properties, static methods a..."""
    _num_methods = 83
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{5ccf1ef3-48a0-4b22-9fcf-c32eae3f8d69}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_BoxTriangulator" : 1,
                             "get_CylinderTriangulator" : 2,
                             "get_EllipsoidTriangulator" : 3,
                             "get_ExtrudedPolylineTriangulator" : 4,
                             "get_SurfaceExtentTriangulator" : 5,
                             "get_SurfacePolygonTriangulator" : 6,
                             "get_SurfaceShapes" : 7,
                             "get_AGIProcessedImageGlobeOverlay" : 8,
                             "get_AGIProcessedTerrainOverlay" : 9,
                             "get_AGIRoamImageGlobeOverlay" : 10,
                             "get_CustomImageGlobeOverlayPluginActivator" : 11,
                             "get_GeospatialImageGlobeOverlay" : 12,
                             "get_ProjectedRasterOverlay" : 13,
                             "get_Projection" : 14,
                             "get_AltitudeDisplayCondition" : 15,
                             "get_CompositeDisplayCondition" : 16,
                             "get_CompositePrimitive" : 17,
                             "get_ConstantDisplayCondition" : 18,
                             "get_DistanceDisplayCondition" : 19,
                             "get_DistanceToGlobeOverlayDisplayCondition" : 20,
                             "get_DistanceToPositionDisplayCondition" : 21,
                             "get_DistanceToPrimitiveDisplayCondition" : 22,
                             "get_DurationPathPrimitiveUpdatePolicy" : 23,
                             "get_GlobeImageOverlay" : 24,
                             "get_GraphicsFont" : 25,
                             "get_GreatArcInterpolator" : 26,
                             "get_AlphaFromLuminanceFilter" : 27,
                             "get_AlphaFromPixelFilter" : 28,
                             "get_AlphaFromRasterFilter" : 29,
                             "get_BandExtractFilter" : 30,
                             "get_BandOrderFilter" : 31,
                             "get_BlurFilter" : 32,
                             "get_BrightnessFilter" : 33,
                             "get_ColorToLuminanceFilter" : 34,
                             "get_ContrastFilter" : 35,
                             "get_ConvolutionFilter" : 36,
                             "get_EdgeDetectFilter" : 37,
                             "get_FilteringRasterStream" : 38,
                             "get_FlipFilter" : 39,
                             "get_GammaCorrectionFilter" : 40,
                             "get_GaussianBlurFilter" : 41,
                             "get_GradientDetectFilter" : 42,
                             "get_Jpeg2000Writer" : 43,
                             "get_LevelsFilter" : 44,
                             "get_ProjectionRasterStreamPluginActivator" : 45,
                             "get_Raster" : 46,
                             "get_RasterAttributes" : 47,
                             "get_RotateFilter" : 48,
                             "get_SequenceFilter" : 49,
                             "get_SharpenFilter" : 50,
                             "get_VideoStream" : 51,
                             "get_MarkerBatchPrimitive" : 52,
                             "get_MarkerBatchPrimitiveOptionalParameters" : 53,
                             "get_MaximumCountPathPrimitiveUpdatePolicy" : 54,
                             "get_ModelPrimitive" : 55,
                             "get_PathPrimitive" : 56,
                             "get_PixelSizeDisplayCondition" : 57,
                             "get_PointBatchPrimitive" : 58,
                             "get_PolylinePrimitive" : 59,
                             "get_RasterImageGlobeOverlay" : 60,
                             "get_RhumbLineInterpolator" : 61,
                             "get_SceneDisplayCondition" : 62,
                             "get_SceneManager" : 63,
                             "get_ScreenOverlay" : 64,
                             "get_SolidPrimitive" : 65,
                             "get_SurfaceMeshPrimitive" : 66,
                             "get_TerrainOverlay" : 67,
                             "get_TextBatchPrimitive" : 68,
                             "get_TextBatchPrimitiveOptionalParameters" : 69,
                             "get_TextureMatrix" : 70,
                             "get_TextureScreenOverlay" : 71,
                             "get_TimeIntervalDisplayCondition" : 72,
                             "get_TriangleMeshPrimitive" : 73,
                             "get_TriangleMeshPrimitiveOptionalParameters" : 74,
                             "get_TextureFilter2D" : 75,
                             "get_BoundingSphere" : 76,
                             "get_PathPoint" : 77,
                             "get_TextOverlay" : 78,
                             "get_AGICustomTerrainOverlay" : 79,
                             "get_AxesPrimitive" : 80,
                             "get_VectorPrimitive" : 81,
                             "get_PolylinePrimitiveOptionalParameters" : 82,
                             "get_PointBatchPrimitiveOptionalParameters" : 83, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsFactoryAndInitializers._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsFactoryAndInitializers from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsFactoryAndInitializers.__dict__ and type(IAgStkGraphicsFactoryAndInitializers.__dict__[attrname]) == property:
            return IAgStkGraphicsFactoryAndInitializers.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsFactoryAndInitializers.")
    
    _get_BoxTriangulator_metadata = { "name" : "BoxTriangulator",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def BoxTriangulator(self) -> "IAgStkGraphicsBoxTriangulatorInitializer":
        """Access global methods and properties of BoxTriangulator (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        return self._intf.get_property(IAgStkGraphicsFactoryAndInitializers._metadata, IAgStkGraphicsFactoryAndInitializers._get_BoxTriangulator_metadata)

    _get_CylinderTriangulator_metadata = { "name" : "CylinderTriangulator",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def CylinderTriangulator(self) -> "IAgStkGraphicsCylinderTriangulatorInitializer":
        """Access global methods and properties of CylinderTriangulator (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        return self._intf.get_property(IAgStkGraphicsFactoryAndInitializers._metadata, IAgStkGraphicsFactoryAndInitializers._get_CylinderTriangulator_metadata)

    _get_EllipsoidTriangulator_metadata = { "name" : "EllipsoidTriangulator",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def EllipsoidTriangulator(self) -> "IAgStkGraphicsEllipsoidTriangulatorInitializer":
        """Access global methods and properties of EllipsoidTriangulator (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        return self._intf.get_property(IAgStkGraphicsFactoryAndInitializers._metadata, IAgStkGraphicsFactoryAndInitializers._get_EllipsoidTriangulator_metadata)

    _get_ExtrudedPolylineTriangulator_metadata = { "name" : "ExtrudedPolylineTriangulator",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def ExtrudedPolylineTriangulator(self) -> "IAgStkGraphicsExtrudedPolylineTriangulatorInitializer":
        """Access global methods and properties of ExtrudedPolylineTriangulator (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        return self._intf.get_property(IAgStkGraphicsFactoryAndInitializers._metadata, IAgStkGraphicsFactoryAndInitializers._get_ExtrudedPolylineTriangulator_metadata)

    _get_SurfaceExtentTriangulator_metadata = { "name" : "SurfaceExtentTriangulator",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def SurfaceExtentTriangulator(self) -> "IAgStkGraphicsSurfaceExtentTriangulatorInitializer":
        """Access global methods and properties of SurfaceExtentTriangulator (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        return self._intf.get_property(IAgStkGraphicsFactoryAndInitializers._metadata, IAgStkGraphicsFactoryAndInitializers._get_SurfaceExtentTriangulator_metadata)

    _get_SurfacePolygonTriangulator_metadata = { "name" : "SurfacePolygonTriangulator",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def SurfacePolygonTriangulator(self) -> "IAgStkGraphicsSurfacePolygonTriangulatorInitializer":
        """Access global methods and properties of SurfacePolygonTriangulator (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        return self._intf.get_property(IAgStkGraphicsFactoryAndInitializers._metadata, IAgStkGraphicsFactoryAndInitializers._get_SurfacePolygonTriangulator_metadata)

    _get_SurfaceShapes_metadata = { "name" : "SurfaceShapes",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def SurfaceShapes(self) -> "IAgStkGraphicsSurfaceShapesInitializer":
        """Access global methods and properties of SurfaceShapes (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        return self._intf.get_property(IAgStkGraphicsFactoryAndInitializers._metadata, IAgStkGraphicsFactoryAndInitializers._get_SurfaceShapes_metadata)

    _get_AGIProcessedImageGlobeOverlay_metadata = { "name" : "AGIProcessedImageGlobeOverlay",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def AGIProcessedImageGlobeOverlay(self) -> "IAgStkGraphicsAGIProcessedImageGlobeOverlayFactory":
        """Access global methods and properties of AGIProcessedImageGlobeOverlay (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        return self._intf.get_property(IAgStkGraphicsFactoryAndInitializers._metadata, IAgStkGraphicsFactoryAndInitializers._get_AGIProcessedImageGlobeOverlay_metadata)

    _get_AGIProcessedTerrainOverlay_metadata = { "name" : "AGIProcessedTerrainOverlay",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def AGIProcessedTerrainOverlay(self) -> "IAgStkGraphicsAGIProcessedTerrainOverlayFactory":
        """Access global methods and properties of AGIProcessedTerrainOverlay (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        return self._intf.get_property(IAgStkGraphicsFactoryAndInitializers._metadata, IAgStkGraphicsFactoryAndInitializers._get_AGIProcessedTerrainOverlay_metadata)

    _get_AGIRoamImageGlobeOverlay_metadata = { "name" : "AGIRoamImageGlobeOverlay",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def AGIRoamImageGlobeOverlay(self) -> "IAgStkGraphicsAGIRoamImageGlobeOverlayFactory":
        """Access global methods and properties of AGIRoamImageGlobeOverlay (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        return self._intf.get_property(IAgStkGraphicsFactoryAndInitializers._metadata, IAgStkGraphicsFactoryAndInitializers._get_AGIRoamImageGlobeOverlay_metadata)

    _get_CustomImageGlobeOverlayPluginActivator_metadata = { "name" : "CustomImageGlobeOverlayPluginActivator",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def CustomImageGlobeOverlayPluginActivator(self) -> "IAgStkGraphicsCustomImageGlobeOverlayPluginActivatorFactory":
        """Access global methods and properties of CustomImageGlobeOverlayPluginActivator (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        return self._intf.get_property(IAgStkGraphicsFactoryAndInitializers._metadata, IAgStkGraphicsFactoryAndInitializers._get_CustomImageGlobeOverlayPluginActivator_metadata)

    _get_GeospatialImageGlobeOverlay_metadata = { "name" : "GeospatialImageGlobeOverlay",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def GeospatialImageGlobeOverlay(self) -> "IAgStkGraphicsGeospatialImageGlobeOverlayFactory":
        """Access global methods and properties of GeospatialImageGlobeOverlay (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        return self._intf.get_property(IAgStkGraphicsFactoryAndInitializers._metadata, IAgStkGraphicsFactoryAndInitializers._get_GeospatialImageGlobeOverlay_metadata)

    _get_ProjectedRasterOverlay_metadata = { "name" : "ProjectedRasterOverlay",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def ProjectedRasterOverlay(self) -> "IAgStkGraphicsProjectedRasterOverlayFactory":
        """Access global methods and properties of ProjectedRasterOverlay (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        return self._intf.get_property(IAgStkGraphicsFactoryAndInitializers._metadata, IAgStkGraphicsFactoryAndInitializers._get_ProjectedRasterOverlay_metadata)

    _get_Projection_metadata = { "name" : "Projection",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def Projection(self) -> "IAgStkGraphicsProjectionFactory":
        """Access global methods and properties of Projection (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        return self._intf.get_property(IAgStkGraphicsFactoryAndInitializers._metadata, IAgStkGraphicsFactoryAndInitializers._get_Projection_metadata)

    _get_AltitudeDisplayCondition_metadata = { "name" : "AltitudeDisplayCondition",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def AltitudeDisplayCondition(self) -> "IAgStkGraphicsAltitudeDisplayConditionFactory":
        """Access global methods and properties of AltitudeDisplayCondition (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        return self._intf.get_property(IAgStkGraphicsFactoryAndInitializers._metadata, IAgStkGraphicsFactoryAndInitializers._get_AltitudeDisplayCondition_metadata)

    _get_CompositeDisplayCondition_metadata = { "name" : "CompositeDisplayCondition",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def CompositeDisplayCondition(self) -> "IAgStkGraphicsCompositeDisplayConditionFactory":
        """Access global methods and properties of CompositeDisplayCondition (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        return self._intf.get_property(IAgStkGraphicsFactoryAndInitializers._metadata, IAgStkGraphicsFactoryAndInitializers._get_CompositeDisplayCondition_metadata)

    _get_CompositePrimitive_metadata = { "name" : "CompositePrimitive",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def CompositePrimitive(self) -> "IAgStkGraphicsCompositePrimitiveFactory":
        """Access global methods and properties of CompositePrimitive (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        return self._intf.get_property(IAgStkGraphicsFactoryAndInitializers._metadata, IAgStkGraphicsFactoryAndInitializers._get_CompositePrimitive_metadata)

    _get_ConstantDisplayCondition_metadata = { "name" : "ConstantDisplayCondition",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def ConstantDisplayCondition(self) -> "IAgStkGraphicsConstantDisplayConditionFactory":
        """Access global methods and properties of ConstantDisplayCondition (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        return self._intf.get_property(IAgStkGraphicsFactoryAndInitializers._metadata, IAgStkGraphicsFactoryAndInitializers._get_ConstantDisplayCondition_metadata)

    _get_DistanceDisplayCondition_metadata = { "name" : "DistanceDisplayCondition",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def DistanceDisplayCondition(self) -> "IAgStkGraphicsDistanceDisplayConditionFactory":
        """Access global methods and properties of DistanceDisplayCondition (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        return self._intf.get_property(IAgStkGraphicsFactoryAndInitializers._metadata, IAgStkGraphicsFactoryAndInitializers._get_DistanceDisplayCondition_metadata)

    _get_DistanceToGlobeOverlayDisplayCondition_metadata = { "name" : "DistanceToGlobeOverlayDisplayCondition",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def DistanceToGlobeOverlayDisplayCondition(self) -> "IAgStkGraphicsDistanceToGlobeOverlayDisplayConditionFactory":
        """Access global methods and properties of DistanceToGlobeOverlayDisplayCondition (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        return self._intf.get_property(IAgStkGraphicsFactoryAndInitializers._metadata, IAgStkGraphicsFactoryAndInitializers._get_DistanceToGlobeOverlayDisplayCondition_metadata)

    _get_DistanceToPositionDisplayCondition_metadata = { "name" : "DistanceToPositionDisplayCondition",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def DistanceToPositionDisplayCondition(self) -> "IAgStkGraphicsDistanceToPositionDisplayConditionFactory":
        """Access global methods and properties of DistanceToPositionDisplayCondition (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        return self._intf.get_property(IAgStkGraphicsFactoryAndInitializers._metadata, IAgStkGraphicsFactoryAndInitializers._get_DistanceToPositionDisplayCondition_metadata)

    _get_DistanceToPrimitiveDisplayCondition_metadata = { "name" : "DistanceToPrimitiveDisplayCondition",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def DistanceToPrimitiveDisplayCondition(self) -> "IAgStkGraphicsDistanceToPrimitiveDisplayConditionFactory":
        """Access global methods and properties of DistanceToPrimitiveDisplayCondition (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        return self._intf.get_property(IAgStkGraphicsFactoryAndInitializers._metadata, IAgStkGraphicsFactoryAndInitializers._get_DistanceToPrimitiveDisplayCondition_metadata)

    _get_DurationPathPrimitiveUpdatePolicy_metadata = { "name" : "DurationPathPrimitiveUpdatePolicy",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def DurationPathPrimitiveUpdatePolicy(self) -> "IAgStkGraphicsDurationPathPrimitiveUpdatePolicyFactory":
        """Access global methods and properties of DurationPathPrimitiveUpdatePolicy (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        return self._intf.get_property(IAgStkGraphicsFactoryAndInitializers._metadata, IAgStkGraphicsFactoryAndInitializers._get_DurationPathPrimitiveUpdatePolicy_metadata)

    _get_GlobeImageOverlay_metadata = { "name" : "GlobeImageOverlay",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def GlobeImageOverlay(self) -> "IAgStkGraphicsGlobeImageOverlayInitializer":
        """Access global methods and properties of GlobeImageOverlay (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        return self._intf.get_property(IAgStkGraphicsFactoryAndInitializers._metadata, IAgStkGraphicsFactoryAndInitializers._get_GlobeImageOverlay_metadata)

    _get_GraphicsFont_metadata = { "name" : "GraphicsFont",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def GraphicsFont(self) -> "IAgStkGraphicsGraphicsFontFactory":
        """Access global methods and properties of GraphicsFont (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        return self._intf.get_property(IAgStkGraphicsFactoryAndInitializers._metadata, IAgStkGraphicsFactoryAndInitializers._get_GraphicsFont_metadata)

    _get_GreatArcInterpolator_metadata = { "name" : "GreatArcInterpolator",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def GreatArcInterpolator(self) -> "IAgStkGraphicsGreatArcInterpolatorFactory":
        """Access global methods and properties of GreatArcInterpolator (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        return self._intf.get_property(IAgStkGraphicsFactoryAndInitializers._metadata, IAgStkGraphicsFactoryAndInitializers._get_GreatArcInterpolator_metadata)

    _get_AlphaFromLuminanceFilter_metadata = { "name" : "AlphaFromLuminanceFilter",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def AlphaFromLuminanceFilter(self) -> "IAgStkGraphicsAlphaFromLuminanceFilterFactory":
        """Access global methods and properties of AlphaFromLuminanceFilter (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        return self._intf.get_property(IAgStkGraphicsFactoryAndInitializers._metadata, IAgStkGraphicsFactoryAndInitializers._get_AlphaFromLuminanceFilter_metadata)

    _get_AlphaFromPixelFilter_metadata = { "name" : "AlphaFromPixelFilter",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def AlphaFromPixelFilter(self) -> "IAgStkGraphicsAlphaFromPixelFilterFactory":
        """Access global methods and properties of AlphaFromPixelFilter (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        return self._intf.get_property(IAgStkGraphicsFactoryAndInitializers._metadata, IAgStkGraphicsFactoryAndInitializers._get_AlphaFromPixelFilter_metadata)

    _get_AlphaFromRasterFilter_metadata = { "name" : "AlphaFromRasterFilter",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def AlphaFromRasterFilter(self) -> "IAgStkGraphicsAlphaFromRasterFilterFactory":
        """Access global methods and properties of AlphaFromRasterFilter (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        return self._intf.get_property(IAgStkGraphicsFactoryAndInitializers._metadata, IAgStkGraphicsFactoryAndInitializers._get_AlphaFromRasterFilter_metadata)

    _get_BandExtractFilter_metadata = { "name" : "BandExtractFilter",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def BandExtractFilter(self) -> "IAgStkGraphicsBandExtractFilterFactory":
        """Access global methods and properties of BandExtractFilter (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        return self._intf.get_property(IAgStkGraphicsFactoryAndInitializers._metadata, IAgStkGraphicsFactoryAndInitializers._get_BandExtractFilter_metadata)

    _get_BandOrderFilter_metadata = { "name" : "BandOrderFilter",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def BandOrderFilter(self) -> "IAgStkGraphicsBandOrderFilterFactory":
        """Access global methods and properties of BandOrderFilter (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        return self._intf.get_property(IAgStkGraphicsFactoryAndInitializers._metadata, IAgStkGraphicsFactoryAndInitializers._get_BandOrderFilter_metadata)

    _get_BlurFilter_metadata = { "name" : "BlurFilter",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def BlurFilter(self) -> "IAgStkGraphicsBlurFilterFactory":
        """Access global methods and properties of BlurFilter (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        return self._intf.get_property(IAgStkGraphicsFactoryAndInitializers._metadata, IAgStkGraphicsFactoryAndInitializers._get_BlurFilter_metadata)

    _get_BrightnessFilter_metadata = { "name" : "BrightnessFilter",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def BrightnessFilter(self) -> "IAgStkGraphicsBrightnessFilterFactory":
        """Access global methods and properties of BrightnessFilter (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        return self._intf.get_property(IAgStkGraphicsFactoryAndInitializers._metadata, IAgStkGraphicsFactoryAndInitializers._get_BrightnessFilter_metadata)

    _get_ColorToLuminanceFilter_metadata = { "name" : "ColorToLuminanceFilter",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def ColorToLuminanceFilter(self) -> "IAgStkGraphicsColorToLuminanceFilterFactory":
        """Access global methods and properties of ColorToLuminanceFilter (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        return self._intf.get_property(IAgStkGraphicsFactoryAndInitializers._metadata, IAgStkGraphicsFactoryAndInitializers._get_ColorToLuminanceFilter_metadata)

    _get_ContrastFilter_metadata = { "name" : "ContrastFilter",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def ContrastFilter(self) -> "IAgStkGraphicsContrastFilterFactory":
        """Access global methods and properties of ContrastFilter (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        return self._intf.get_property(IAgStkGraphicsFactoryAndInitializers._metadata, IAgStkGraphicsFactoryAndInitializers._get_ContrastFilter_metadata)

    _get_ConvolutionFilter_metadata = { "name" : "ConvolutionFilter",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def ConvolutionFilter(self) -> "IAgStkGraphicsConvolutionFilterFactory":
        """Access global methods and properties of ConvolutionFilter (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        return self._intf.get_property(IAgStkGraphicsFactoryAndInitializers._metadata, IAgStkGraphicsFactoryAndInitializers._get_ConvolutionFilter_metadata)

    _get_EdgeDetectFilter_metadata = { "name" : "EdgeDetectFilter",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def EdgeDetectFilter(self) -> "IAgStkGraphicsEdgeDetectFilterFactory":
        """Access global methods and properties of EdgeDetectFilter (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        return self._intf.get_property(IAgStkGraphicsFactoryAndInitializers._metadata, IAgStkGraphicsFactoryAndInitializers._get_EdgeDetectFilter_metadata)

    _get_FilteringRasterStream_metadata = { "name" : "FilteringRasterStream",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def FilteringRasterStream(self) -> "IAgStkGraphicsFilteringRasterStreamFactory":
        """Access global methods and properties of FilteringRasterStream (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        return self._intf.get_property(IAgStkGraphicsFactoryAndInitializers._metadata, IAgStkGraphicsFactoryAndInitializers._get_FilteringRasterStream_metadata)

    _get_FlipFilter_metadata = { "name" : "FlipFilter",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def FlipFilter(self) -> "IAgStkGraphicsFlipFilterFactory":
        """Access global methods and properties of FlipFilter (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        return self._intf.get_property(IAgStkGraphicsFactoryAndInitializers._metadata, IAgStkGraphicsFactoryAndInitializers._get_FlipFilter_metadata)

    _get_GammaCorrectionFilter_metadata = { "name" : "GammaCorrectionFilter",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def GammaCorrectionFilter(self) -> "IAgStkGraphicsGammaCorrectionFilterFactory":
        """Access global methods and properties of GammaCorrectionFilter (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        return self._intf.get_property(IAgStkGraphicsFactoryAndInitializers._metadata, IAgStkGraphicsFactoryAndInitializers._get_GammaCorrectionFilter_metadata)

    _get_GaussianBlurFilter_metadata = { "name" : "GaussianBlurFilter",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def GaussianBlurFilter(self) -> "IAgStkGraphicsGaussianBlurFilterFactory":
        """Access global methods and properties of GaussianBlurFilter (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        return self._intf.get_property(IAgStkGraphicsFactoryAndInitializers._metadata, IAgStkGraphicsFactoryAndInitializers._get_GaussianBlurFilter_metadata)

    _get_GradientDetectFilter_metadata = { "name" : "GradientDetectFilter",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def GradientDetectFilter(self) -> "IAgStkGraphicsGradientDetectFilterFactory":
        """Access global methods and properties of GradientDetectFilter (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        return self._intf.get_property(IAgStkGraphicsFactoryAndInitializers._metadata, IAgStkGraphicsFactoryAndInitializers._get_GradientDetectFilter_metadata)

    _get_Jpeg2000Writer_metadata = { "name" : "Jpeg2000Writer",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def Jpeg2000Writer(self) -> "IAgStkGraphicsJpeg2000WriterInitializer":
        """Access global methods and properties of Jpeg2000Writer (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        return self._intf.get_property(IAgStkGraphicsFactoryAndInitializers._metadata, IAgStkGraphicsFactoryAndInitializers._get_Jpeg2000Writer_metadata)

    _get_LevelsFilter_metadata = { "name" : "LevelsFilter",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def LevelsFilter(self) -> "IAgStkGraphicsLevelsFilterFactory":
        """Access global methods and properties of LevelsFilter (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        return self._intf.get_property(IAgStkGraphicsFactoryAndInitializers._metadata, IAgStkGraphicsFactoryAndInitializers._get_LevelsFilter_metadata)

    _get_ProjectionRasterStreamPluginActivator_metadata = { "name" : "ProjectionRasterStreamPluginActivator",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def ProjectionRasterStreamPluginActivator(self) -> "IAgStkGraphicsProjectionRasterStreamPluginActivatorFactory":
        """Access global methods and properties of ProjectionRasterStreamPluginActivator (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        return self._intf.get_property(IAgStkGraphicsFactoryAndInitializers._metadata, IAgStkGraphicsFactoryAndInitializers._get_ProjectionRasterStreamPluginActivator_metadata)

    _get_Raster_metadata = { "name" : "Raster",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def Raster(self) -> "IAgStkGraphicsRasterFactory":
        """Access global methods and properties of Raster (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        return self._intf.get_property(IAgStkGraphicsFactoryAndInitializers._metadata, IAgStkGraphicsFactoryAndInitializers._get_Raster_metadata)

    _get_RasterAttributes_metadata = { "name" : "RasterAttributes",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def RasterAttributes(self) -> "IAgStkGraphicsRasterAttributesFactory":
        """Access global methods and properties of RasterAttributes (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        return self._intf.get_property(IAgStkGraphicsFactoryAndInitializers._metadata, IAgStkGraphicsFactoryAndInitializers._get_RasterAttributes_metadata)

    _get_RotateFilter_metadata = { "name" : "RotateFilter",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def RotateFilter(self) -> "IAgStkGraphicsRotateFilterFactory":
        """Access global methods and properties of RotateFilter (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        return self._intf.get_property(IAgStkGraphicsFactoryAndInitializers._metadata, IAgStkGraphicsFactoryAndInitializers._get_RotateFilter_metadata)

    _get_SequenceFilter_metadata = { "name" : "SequenceFilter",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def SequenceFilter(self) -> "IAgStkGraphicsSequenceFilterFactory":
        """Access global methods and properties of SequenceFilter (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        return self._intf.get_property(IAgStkGraphicsFactoryAndInitializers._metadata, IAgStkGraphicsFactoryAndInitializers._get_SequenceFilter_metadata)

    _get_SharpenFilter_metadata = { "name" : "SharpenFilter",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def SharpenFilter(self) -> "IAgStkGraphicsSharpenFilterFactory":
        """Access global methods and properties of SharpenFilter (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        return self._intf.get_property(IAgStkGraphicsFactoryAndInitializers._metadata, IAgStkGraphicsFactoryAndInitializers._get_SharpenFilter_metadata)

    _get_VideoStream_metadata = { "name" : "VideoStream",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def VideoStream(self) -> "IAgStkGraphicsVideoStreamFactory":
        """Access global methods and properties of VideoStream (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        return self._intf.get_property(IAgStkGraphicsFactoryAndInitializers._metadata, IAgStkGraphicsFactoryAndInitializers._get_VideoStream_metadata)

    _get_MarkerBatchPrimitive_metadata = { "name" : "MarkerBatchPrimitive",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def MarkerBatchPrimitive(self) -> "IAgStkGraphicsMarkerBatchPrimitiveFactory":
        """Access global methods and properties of MarkerBatchPrimitive (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        return self._intf.get_property(IAgStkGraphicsFactoryAndInitializers._metadata, IAgStkGraphicsFactoryAndInitializers._get_MarkerBatchPrimitive_metadata)

    _get_MarkerBatchPrimitiveOptionalParameters_metadata = { "name" : "MarkerBatchPrimitiveOptionalParameters",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def MarkerBatchPrimitiveOptionalParameters(self) -> "IAgStkGraphicsMarkerBatchPrimitiveOptionalParametersFactory":
        """Access global methods and properties of MarkerBatchPrimitiveOptionalParameters (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        return self._intf.get_property(IAgStkGraphicsFactoryAndInitializers._metadata, IAgStkGraphicsFactoryAndInitializers._get_MarkerBatchPrimitiveOptionalParameters_metadata)

    _get_MaximumCountPathPrimitiveUpdatePolicy_metadata = { "name" : "MaximumCountPathPrimitiveUpdatePolicy",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def MaximumCountPathPrimitiveUpdatePolicy(self) -> "IAgStkGraphicsMaximumCountPathPrimitiveUpdatePolicyFactory":
        """Access global methods and properties of MaximumCountPathPrimitiveUpdatePolicy (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        return self._intf.get_property(IAgStkGraphicsFactoryAndInitializers._metadata, IAgStkGraphicsFactoryAndInitializers._get_MaximumCountPathPrimitiveUpdatePolicy_metadata)

    _get_ModelPrimitive_metadata = { "name" : "ModelPrimitive",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def ModelPrimitive(self) -> "IAgStkGraphicsModelPrimitiveFactory":
        """Access global methods and properties of ModelPrimitive (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        return self._intf.get_property(IAgStkGraphicsFactoryAndInitializers._metadata, IAgStkGraphicsFactoryAndInitializers._get_ModelPrimitive_metadata)

    _get_PathPrimitive_metadata = { "name" : "PathPrimitive",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def PathPrimitive(self) -> "IAgStkGraphicsPathPrimitiveFactory":
        """Access global methods and properties of PathPrimitive (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        return self._intf.get_property(IAgStkGraphicsFactoryAndInitializers._metadata, IAgStkGraphicsFactoryAndInitializers._get_PathPrimitive_metadata)

    _get_PixelSizeDisplayCondition_metadata = { "name" : "PixelSizeDisplayCondition",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def PixelSizeDisplayCondition(self) -> "IAgStkGraphicsPixelSizeDisplayConditionFactory":
        """Access global methods and properties of PixelSizeDisplayCondition (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        return self._intf.get_property(IAgStkGraphicsFactoryAndInitializers._metadata, IAgStkGraphicsFactoryAndInitializers._get_PixelSizeDisplayCondition_metadata)

    _get_PointBatchPrimitive_metadata = { "name" : "PointBatchPrimitive",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def PointBatchPrimitive(self) -> "IAgStkGraphicsPointBatchPrimitiveFactory":
        """Access global methods and properties of PointBatchPrimitive (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        return self._intf.get_property(IAgStkGraphicsFactoryAndInitializers._metadata, IAgStkGraphicsFactoryAndInitializers._get_PointBatchPrimitive_metadata)

    _get_PolylinePrimitive_metadata = { "name" : "PolylinePrimitive",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def PolylinePrimitive(self) -> "IAgStkGraphicsPolylinePrimitiveFactory":
        """Access global methods and properties of PolylinePrimitive (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        return self._intf.get_property(IAgStkGraphicsFactoryAndInitializers._metadata, IAgStkGraphicsFactoryAndInitializers._get_PolylinePrimitive_metadata)

    _get_RasterImageGlobeOverlay_metadata = { "name" : "RasterImageGlobeOverlay",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def RasterImageGlobeOverlay(self) -> "IAgStkGraphicsRasterImageGlobeOverlayFactory":
        """Access global methods and properties of RasterImageGlobeOverlay (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        return self._intf.get_property(IAgStkGraphicsFactoryAndInitializers._metadata, IAgStkGraphicsFactoryAndInitializers._get_RasterImageGlobeOverlay_metadata)

    _get_RhumbLineInterpolator_metadata = { "name" : "RhumbLineInterpolator",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def RhumbLineInterpolator(self) -> "IAgStkGraphicsRhumbLineInterpolatorFactory":
        """Access global methods and properties of RhumbLineInterpolator (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        return self._intf.get_property(IAgStkGraphicsFactoryAndInitializers._metadata, IAgStkGraphicsFactoryAndInitializers._get_RhumbLineInterpolator_metadata)

    _get_SceneDisplayCondition_metadata = { "name" : "SceneDisplayCondition",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def SceneDisplayCondition(self) -> "IAgStkGraphicsSceneDisplayConditionFactory":
        """Access global methods and properties of SceneDisplayCondition (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        return self._intf.get_property(IAgStkGraphicsFactoryAndInitializers._metadata, IAgStkGraphicsFactoryAndInitializers._get_SceneDisplayCondition_metadata)

    _get_SceneManager_metadata = { "name" : "SceneManager",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def SceneManager(self) -> "IAgStkGraphicsSceneManagerInitializer":
        """Access global methods and properties of SceneManager (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        return self._intf.get_property(IAgStkGraphicsFactoryAndInitializers._metadata, IAgStkGraphicsFactoryAndInitializers._get_SceneManager_metadata)

    _get_ScreenOverlay_metadata = { "name" : "ScreenOverlay",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def ScreenOverlay(self) -> "IAgStkGraphicsScreenOverlayFactory":
        """Access global methods and properties of ScreenOverlay (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        return self._intf.get_property(IAgStkGraphicsFactoryAndInitializers._metadata, IAgStkGraphicsFactoryAndInitializers._get_ScreenOverlay_metadata)

    _get_SolidPrimitive_metadata = { "name" : "SolidPrimitive",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def SolidPrimitive(self) -> "IAgStkGraphicsSolidPrimitiveFactory":
        """Access global methods and properties of SolidPrimitive (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        return self._intf.get_property(IAgStkGraphicsFactoryAndInitializers._metadata, IAgStkGraphicsFactoryAndInitializers._get_SolidPrimitive_metadata)

    _get_SurfaceMeshPrimitive_metadata = { "name" : "SurfaceMeshPrimitive",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def SurfaceMeshPrimitive(self) -> "IAgStkGraphicsSurfaceMeshPrimitiveFactory":
        """Access global methods and properties of SurfaceMeshPrimitive (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        return self._intf.get_property(IAgStkGraphicsFactoryAndInitializers._metadata, IAgStkGraphicsFactoryAndInitializers._get_SurfaceMeshPrimitive_metadata)

    _get_TerrainOverlay_metadata = { "name" : "TerrainOverlay",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def TerrainOverlay(self) -> "IAgStkGraphicsTerrainOverlayInitializer":
        """Access global methods and properties of TerrainOverlay (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        return self._intf.get_property(IAgStkGraphicsFactoryAndInitializers._metadata, IAgStkGraphicsFactoryAndInitializers._get_TerrainOverlay_metadata)

    _get_TextBatchPrimitive_metadata = { "name" : "TextBatchPrimitive",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def TextBatchPrimitive(self) -> "IAgStkGraphicsTextBatchPrimitiveFactory":
        """Access global methods and properties of TextBatchPrimitive (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        return self._intf.get_property(IAgStkGraphicsFactoryAndInitializers._metadata, IAgStkGraphicsFactoryAndInitializers._get_TextBatchPrimitive_metadata)

    _get_TextBatchPrimitiveOptionalParameters_metadata = { "name" : "TextBatchPrimitiveOptionalParameters",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def TextBatchPrimitiveOptionalParameters(self) -> "IAgStkGraphicsTextBatchPrimitiveOptionalParametersFactory":
        """Access global methods and properties of TextBatchPrimitiveOptionalParameters (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        return self._intf.get_property(IAgStkGraphicsFactoryAndInitializers._metadata, IAgStkGraphicsFactoryAndInitializers._get_TextBatchPrimitiveOptionalParameters_metadata)

    _get_TextureMatrix_metadata = { "name" : "TextureMatrix",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def TextureMatrix(self) -> "IAgStkGraphicsTextureMatrixFactory":
        """Access global methods and properties of TextureMatrix (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        return self._intf.get_property(IAgStkGraphicsFactoryAndInitializers._metadata, IAgStkGraphicsFactoryAndInitializers._get_TextureMatrix_metadata)

    _get_TextureScreenOverlay_metadata = { "name" : "TextureScreenOverlay",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def TextureScreenOverlay(self) -> "IAgStkGraphicsTextureScreenOverlayFactory":
        """Access global methods and properties of TextureScreenOverlay (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        return self._intf.get_property(IAgStkGraphicsFactoryAndInitializers._metadata, IAgStkGraphicsFactoryAndInitializers._get_TextureScreenOverlay_metadata)

    _get_TimeIntervalDisplayCondition_metadata = { "name" : "TimeIntervalDisplayCondition",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def TimeIntervalDisplayCondition(self) -> "IAgStkGraphicsTimeIntervalDisplayConditionFactory":
        """Access global methods and properties of TimeIntervalDisplayCondition (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        return self._intf.get_property(IAgStkGraphicsFactoryAndInitializers._metadata, IAgStkGraphicsFactoryAndInitializers._get_TimeIntervalDisplayCondition_metadata)

    _get_TriangleMeshPrimitive_metadata = { "name" : "TriangleMeshPrimitive",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def TriangleMeshPrimitive(self) -> "IAgStkGraphicsTriangleMeshPrimitiveFactory":
        """Access global methods and properties of TriangleMeshPrimitive (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        return self._intf.get_property(IAgStkGraphicsFactoryAndInitializers._metadata, IAgStkGraphicsFactoryAndInitializers._get_TriangleMeshPrimitive_metadata)

    _get_TriangleMeshPrimitiveOptionalParameters_metadata = { "name" : "TriangleMeshPrimitiveOptionalParameters",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def TriangleMeshPrimitiveOptionalParameters(self) -> "IAgStkGraphicsTriangleMeshPrimitiveOptionalParametersFactory":
        """Access global methods and properties of TriangleMeshPrimitiveOptionalParameters (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        return self._intf.get_property(IAgStkGraphicsFactoryAndInitializers._metadata, IAgStkGraphicsFactoryAndInitializers._get_TriangleMeshPrimitiveOptionalParameters_metadata)

    _get_TextureFilter2D_metadata = { "name" : "TextureFilter2D",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def TextureFilter2D(self) -> "IAgStkGraphicsTextureFilter2DFactory":
        """Factory creates texture filters."""
        return self._intf.get_property(IAgStkGraphicsFactoryAndInitializers._metadata, IAgStkGraphicsFactoryAndInitializers._get_TextureFilter2D_metadata)

    _get_BoundingSphere_metadata = { "name" : "BoundingSphere",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def BoundingSphere(self) -> "IAgStkGraphicsBoundingSphereFactory":
        """Factory creates bounding spheres."""
        return self._intf.get_property(IAgStkGraphicsFactoryAndInitializers._metadata, IAgStkGraphicsFactoryAndInitializers._get_BoundingSphere_metadata)

    _get_PathPoint_metadata = { "name" : "PathPoint",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def PathPoint(self) -> "IAgStkGraphicsPathPointFactory":
        """Factory creates path points."""
        return self._intf.get_property(IAgStkGraphicsFactoryAndInitializers._metadata, IAgStkGraphicsFactoryAndInitializers._get_PathPoint_metadata)

    _get_TextOverlay_metadata = { "name" : "TextOverlay",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def TextOverlay(self) -> "IAgStkGraphicsTextOverlayFactory":
        """Access global methods and properties of TextOverlay (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        return self._intf.get_property(IAgStkGraphicsFactoryAndInitializers._metadata, IAgStkGraphicsFactoryAndInitializers._get_TextOverlay_metadata)

    _get_AGICustomTerrainOverlay_metadata = { "name" : "AGICustomTerrainOverlay",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def AGICustomTerrainOverlay(self) -> "IAgStkGraphicsAGICustomTerrainOverlayFactory":
        """Access global methods and properties of AGICustomTerrainOverlay (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        return self._intf.get_property(IAgStkGraphicsFactoryAndInitializers._metadata, IAgStkGraphicsFactoryAndInitializers._get_AGICustomTerrainOverlay_metadata)

    _get_AxesPrimitive_metadata = { "name" : "AxesPrimitive",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def AxesPrimitive(self) -> "IAgStkGraphicsAxesPrimitiveFactory":
        """Access global methods and properties of AxesPrimitive (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        return self._intf.get_property(IAgStkGraphicsFactoryAndInitializers._metadata, IAgStkGraphicsFactoryAndInitializers._get_AxesPrimitive_metadata)

    _get_VectorPrimitive_metadata = { "name" : "VectorPrimitive",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def VectorPrimitive(self) -> "IAgStkGraphicsVectorPrimitiveFactory":
        """Access global methods and properties of VectorPrimitive (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        return self._intf.get_property(IAgStkGraphicsFactoryAndInitializers._metadata, IAgStkGraphicsFactoryAndInitializers._get_VectorPrimitive_metadata)

    _get_PolylinePrimitiveOptionalParameters_metadata = { "name" : "PolylinePrimitiveOptionalParameters",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def PolylinePrimitiveOptionalParameters(self) -> "IAgStkGraphicsPolylinePrimitiveOptionalParametersFactory":
        """Access global methods and properties of PolylinePrimitiveOptionalParameters (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        return self._intf.get_property(IAgStkGraphicsFactoryAndInitializers._metadata, IAgStkGraphicsFactoryAndInitializers._get_PolylinePrimitiveOptionalParameters_metadata)

    _get_PointBatchPrimitiveOptionalParameters_metadata = { "name" : "PointBatchPrimitiveOptionalParameters",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def PointBatchPrimitiveOptionalParameters(self) -> "IAgStkGraphicsPointBatchPrimitiveOptionalParametersFactory":
        """Access global methods and properties of PointBatchPrimitiveOptionalParameters (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        return self._intf.get_property(IAgStkGraphicsFactoryAndInitializers._metadata, IAgStkGraphicsFactoryAndInitializers._get_PointBatchPrimitiveOptionalParameters_metadata)


agcls.AgClassCatalog.add_catalog_entry("{5ccf1ef3-48a0-4b22-9fcf-c32eae3f8d69}", IAgStkGraphicsFactoryAndInitializers)
agcls.AgTypeNameMap["IAgStkGraphicsFactoryAndInitializers"] = IAgStkGraphicsFactoryAndInitializers

class IAgStkGraphicsExtrudedPolylineTriangulatorResult(object):
    """The result from extruded polyline triangulation: a triangle mesh defined using an indexed triangle list with top and bottom boundary positions. The mesh is commonly visualized with the triangle mesh primitive or surface mesh primitive..."""
    _num_methods = 3
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{5d94d077-0a56-4d83-ac90-369344533684}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_TopBoundaryPositions" : 1,
                             "get_BottomBoundaryPositions" : 2,
                             "get_BoundaryPositionsWindingOrder" : 3, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsExtrudedPolylineTriangulatorResult._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsExtrudedPolylineTriangulatorResult from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsExtrudedPolylineTriangulatorResult.__dict__ and type(IAgStkGraphicsExtrudedPolylineTriangulatorResult.__dict__[attrname]) == property:
            return IAgStkGraphicsExtrudedPolylineTriangulatorResult.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsExtrudedPolylineTriangulatorResult.")
    
    _get_TopBoundaryPositions_metadata = { "name" : "TopBoundaryPositions",
            "arg_types" : (POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg,) }
    @property
    def TopBoundaryPositions(self) -> list:
        """Gets the boundary positions along the top of the extrusion. Three array elements (in the order x, y, z) constitute one position."""
        return self._intf.get_property(IAgStkGraphicsExtrudedPolylineTriangulatorResult._metadata, IAgStkGraphicsExtrudedPolylineTriangulatorResult._get_TopBoundaryPositions_metadata)

    _get_BottomBoundaryPositions_metadata = { "name" : "BottomBoundaryPositions",
            "arg_types" : (POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg,) }
    @property
    def BottomBoundaryPositions(self) -> list:
        """Gets the boundary positions along the bottom of the extrusion. Three array elements (in the order x, y, z) constitute one position."""
        return self._intf.get_property(IAgStkGraphicsExtrudedPolylineTriangulatorResult._metadata, IAgStkGraphicsExtrudedPolylineTriangulatorResult._get_BottomBoundaryPositions_metadata)

    _get_BoundaryPositionsWindingOrder_metadata = { "name" : "BoundaryPositionsWindingOrder",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEStkGraphicsWindingOrder),) }
    @property
    def BoundaryPositionsWindingOrder(self) -> "AgEStkGraphicsWindingOrder":
        """Gets the winding order of top boundary positions and bottom boundary positions."""
        return self._intf.get_property(IAgStkGraphicsExtrudedPolylineTriangulatorResult._metadata, IAgStkGraphicsExtrudedPolylineTriangulatorResult._get_BoundaryPositionsWindingOrder_metadata)


agcls.AgClassCatalog.add_catalog_entry("{5d94d077-0a56-4d83-ac90-369344533684}", IAgStkGraphicsExtrudedPolylineTriangulatorResult)
agcls.AgTypeNameMap["IAgStkGraphicsExtrudedPolylineTriangulatorResult"] = IAgStkGraphicsExtrudedPolylineTriangulatorResult

class IAgStkGraphicsSolidTriangulatorResult(object):
    """The result from a triangulation of a solid: a triangle mesh defined using an indexed triangle list and positions outlining the solid. It is recommended to visualize the solid using a solid primitive..."""
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{a7ba0673-f944-4dc6-a450-5cb62915cb7b}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_OutlineIndices" : 1,
                             "get_OutlinePositions" : 2,
                             "get_OutlinePolylineType" : 3,
                             "get_Closed" : 4, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsSolidTriangulatorResult._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsSolidTriangulatorResult from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsSolidTriangulatorResult.__dict__ and type(IAgStkGraphicsSolidTriangulatorResult.__dict__[attrname]) == property:
            return IAgStkGraphicsSolidTriangulatorResult.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsSolidTriangulatorResult.")
    
    _get_OutlineIndices_metadata = { "name" : "OutlineIndices",
            "arg_types" : (POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg,) }
    @property
    def OutlineIndices(self) -> list:
        """Gets indices into positions that define the positions outlining the solid. The indices returned consider the three components of a position (x, y, and z) as a single array element..."""
        return self._intf.get_property(IAgStkGraphicsSolidTriangulatorResult._metadata, IAgStkGraphicsSolidTriangulatorResult._get_OutlineIndices_metadata)

    _get_OutlinePositions_metadata = { "name" : "OutlinePositions",
            "arg_types" : (POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg,) }
    @property
    def OutlinePositions(self) -> list:
        """Gets the positions outlining the solid. Three array elements (in the order x, y, z) constitute one position."""
        return self._intf.get_property(IAgStkGraphicsSolidTriangulatorResult._metadata, IAgStkGraphicsSolidTriangulatorResult._get_OutlinePositions_metadata)

    _get_OutlinePolylineType_metadata = { "name" : "OutlinePolylineType",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEStkGraphicsPolylineType),) }
    @property
    def OutlinePolylineType(self) -> "AgEStkGraphicsPolylineType":
        """Gets the polyline type of outline indices and outline positions."""
        return self._intf.get_property(IAgStkGraphicsSolidTriangulatorResult._metadata, IAgStkGraphicsSolidTriangulatorResult._get_OutlinePolylineType_metadata)

    _get_Closed_metadata = { "name" : "Closed",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def Closed(self) -> bool:
        """Gets whether the solid is closed. For example, a box with six faces is closed. If one face is removed, the box is open."""
        return self._intf.get_property(IAgStkGraphicsSolidTriangulatorResult._metadata, IAgStkGraphicsSolidTriangulatorResult._get_Closed_metadata)


agcls.AgClassCatalog.add_catalog_entry("{a7ba0673-f944-4dc6-a450-5cb62915cb7b}", IAgStkGraphicsSolidTriangulatorResult)
agcls.AgTypeNameMap["IAgStkGraphicsSolidTriangulatorResult"] = IAgStkGraphicsSolidTriangulatorResult

class IAgStkGraphicsSurfaceShapesResult(object):
    """Represents the boundary positions of a shape on the surface computed from by a surface shapes method."""
    _num_methods = 3
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{0efd15db-d9f7-4e1f-925b-ade0b0a22a21}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_Positions" : 1,
                             "get_PositionsWindingOrder" : 2,
                             "get_PolylineType" : 3, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsSurfaceShapesResult._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsSurfaceShapesResult from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsSurfaceShapesResult.__dict__ and type(IAgStkGraphicsSurfaceShapesResult.__dict__[attrname]) == property:
            return IAgStkGraphicsSurfaceShapesResult.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsSurfaceShapesResult.")
    
    _get_Positions_metadata = { "name" : "Positions",
            "arg_types" : (POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg,) }
    @property
    def Positions(self) -> list:
        """Gets the positions of the computed shape. Three array elements (in the order x, y, z) constitute one position."""
        return self._intf.get_property(IAgStkGraphicsSurfaceShapesResult._metadata, IAgStkGraphicsSurfaceShapesResult._get_Positions_metadata)

    _get_PositionsWindingOrder_metadata = { "name" : "PositionsWindingOrder",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEStkGraphicsWindingOrder),) }
    @property
    def PositionsWindingOrder(self) -> "AgEStkGraphicsWindingOrder":
        """Gets the winding order of positions."""
        return self._intf.get_property(IAgStkGraphicsSurfaceShapesResult._metadata, IAgStkGraphicsSurfaceShapesResult._get_PositionsWindingOrder_metadata)

    _get_PolylineType_metadata = { "name" : "PolylineType",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEStkGraphicsPolylineType),) }
    @property
    def PolylineType(self) -> "AgEStkGraphicsPolylineType":
        """Gets the polyline type of positions."""
        return self._intf.get_property(IAgStkGraphicsSurfaceShapesResult._metadata, IAgStkGraphicsSurfaceShapesResult._get_PolylineType_metadata)


agcls.AgClassCatalog.add_catalog_entry("{0efd15db-d9f7-4e1f-925b-ade0b0a22a21}", IAgStkGraphicsSurfaceShapesResult)
agcls.AgTypeNameMap["IAgStkGraphicsSurfaceShapesResult"] = IAgStkGraphicsSurfaceShapesResult

class IAgStkGraphicsSurfaceTriangulatorResult(object):
    """The result from a triangulation on the surface of a central body: a triangle mesh defined using an indexed triangle list and boundary positions surrounding the mesh..."""
    _num_methods = 5
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{27cedd3e-86cd-4d18-862f-eeb0e6de62aa}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_Granularity" : 1,
                             "get_BoundaryIndices" : 2,
                             "get_BoundaryPositions" : 3,
                             "get_BoundaryPositionsWindingOrder" : 4,
                             "get_BoundaryPolylineType" : 5, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsSurfaceTriangulatorResult._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsSurfaceTriangulatorResult from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsSurfaceTriangulatorResult.__dict__ and type(IAgStkGraphicsSurfaceTriangulatorResult.__dict__[attrname]) == property:
            return IAgStkGraphicsSurfaceTriangulatorResult.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsSurfaceTriangulatorResult.")
    
    _get_Granularity_metadata = { "name" : "Granularity",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def Granularity(self) -> float:
        """Gets the granularity used when the triangulation was computed. Lower granularities are more precise but create more triangles."""
        return self._intf.get_property(IAgStkGraphicsSurfaceTriangulatorResult._metadata, IAgStkGraphicsSurfaceTriangulatorResult._get_Granularity_metadata)

    _get_BoundaryIndices_metadata = { "name" : "BoundaryIndices",
            "arg_types" : (POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg,) }
    @property
    def BoundaryIndices(self) -> list:
        """Gets indices into positions that define the boundary positions that surround the mesh. The indices returned consider the three components of a position (x, y, and z) as a single array element..."""
        return self._intf.get_property(IAgStkGraphicsSurfaceTriangulatorResult._metadata, IAgStkGraphicsSurfaceTriangulatorResult._get_BoundaryIndices_metadata)

    _get_BoundaryPositions_metadata = { "name" : "BoundaryPositions",
            "arg_types" : (POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg,) }
    @property
    def BoundaryPositions(self) -> list:
        """Gets the boundary positions that surround the mesh. Three array elements (in the order x, y, z) constitute one position."""
        return self._intf.get_property(IAgStkGraphicsSurfaceTriangulatorResult._metadata, IAgStkGraphicsSurfaceTriangulatorResult._get_BoundaryPositions_metadata)

    _get_BoundaryPositionsWindingOrder_metadata = { "name" : "BoundaryPositionsWindingOrder",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEStkGraphicsWindingOrder),) }
    @property
    def BoundaryPositionsWindingOrder(self) -> "AgEStkGraphicsWindingOrder":
        """Gets the winding order of boundary positions."""
        return self._intf.get_property(IAgStkGraphicsSurfaceTriangulatorResult._metadata, IAgStkGraphicsSurfaceTriangulatorResult._get_BoundaryPositionsWindingOrder_metadata)

    _get_BoundaryPolylineType_metadata = { "name" : "BoundaryPolylineType",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEStkGraphicsPolylineType),) }
    @property
    def BoundaryPolylineType(self) -> "AgEStkGraphicsPolylineType":
        """Gets the polyline type of boundary positions."""
        return self._intf.get_property(IAgStkGraphicsSurfaceTriangulatorResult._metadata, IAgStkGraphicsSurfaceTriangulatorResult._get_BoundaryPolylineType_metadata)


agcls.AgClassCatalog.add_catalog_entry("{27cedd3e-86cd-4d18-862f-eeb0e6de62aa}", IAgStkGraphicsSurfaceTriangulatorResult)
agcls.AgTypeNameMap["IAgStkGraphicsSurfaceTriangulatorResult"] = IAgStkGraphicsSurfaceTriangulatorResult

class IAgStkGraphicsTriangulatorResult(object):
    """The result from triangulation: a triangle mesh defined using an indexed triangle list. This is commonly visualized with the triangle mesh primitive or surface mesh primitive."""
    _num_methods = 5
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{9dece859-d370-4674-8ffa-8caa98e60632}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_Positions" : 1,
                             "get_Normals" : 2,
                             "get_Indices" : 3,
                             "get_TriangleWindingOrder" : 4,
                             "get_BoundingSphere" : 5, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsTriangulatorResult._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsTriangulatorResult from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsTriangulatorResult.__dict__ and type(IAgStkGraphicsTriangulatorResult.__dict__[attrname]) == property:
            return IAgStkGraphicsTriangulatorResult.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsTriangulatorResult.")
    
    _get_Positions_metadata = { "name" : "Positions",
            "arg_types" : (POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg,) }
    @property
    def Positions(self) -> list:
        """Gets the positions of the mesh. Three array elements (in the order x, y, z) constitute one position."""
        return self._intf.get_property(IAgStkGraphicsTriangulatorResult._metadata, IAgStkGraphicsTriangulatorResult._get_Positions_metadata)

    _get_Normals_metadata = { "name" : "Normals",
            "arg_types" : (POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg,) }
    @property
    def Normals(self) -> list:
        """Gets the normals of the mesh. Every position in positions has corresponding normal. Normals are commonly used for lighting. Three array elements (in the order x, y, z) constitute one normal."""
        return self._intf.get_property(IAgStkGraphicsTriangulatorResult._metadata, IAgStkGraphicsTriangulatorResult._get_Normals_metadata)

    _get_Indices_metadata = { "name" : "Indices",
            "arg_types" : (POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg,) }
    @property
    def Indices(self) -> list:
        """Gets indices into positions and normals. Every 3 indices represent 1 triangle. The indices returned consider the three components of a position or normal (x, y, and z) as a single array element..."""
        return self._intf.get_property(IAgStkGraphicsTriangulatorResult._metadata, IAgStkGraphicsTriangulatorResult._get_Indices_metadata)

    _get_TriangleWindingOrder_metadata = { "name" : "TriangleWindingOrder",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEStkGraphicsWindingOrder),) }
    @property
    def TriangleWindingOrder(self) -> "AgEStkGraphicsWindingOrder":
        """Gets the orientation of front-facing triangles in the mesh."""
        return self._intf.get_property(IAgStkGraphicsTriangulatorResult._metadata, IAgStkGraphicsTriangulatorResult._get_TriangleWindingOrder_metadata)

    _get_BoundingSphere_metadata = { "name" : "BoundingSphere",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def BoundingSphere(self) -> "IAgStkGraphicsBoundingSphere":
        """Gets the bounding sphere that encompasses the mesh."""
        return self._intf.get_property(IAgStkGraphicsTriangulatorResult._metadata, IAgStkGraphicsTriangulatorResult._get_BoundingSphere_metadata)


agcls.AgClassCatalog.add_catalog_entry("{9dece859-d370-4674-8ffa-8caa98e60632}", IAgStkGraphicsTriangulatorResult)
agcls.AgTypeNameMap["IAgStkGraphicsTriangulatorResult"] = IAgStkGraphicsTriangulatorResult

class IAgStkGraphicsAGICustomTerrainOverlay(object):
    """A terrain overlay for handling AGI Cesium Terrain."""
    _num_methods = 0
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{59ef8436-aeec-4e60-8e3d-920e0f11feba}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : {  }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsAGICustomTerrainOverlay._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsAGICustomTerrainOverlay from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsAGICustomTerrainOverlay.__dict__ and type(IAgStkGraphicsAGICustomTerrainOverlay.__dict__[attrname]) == property:
            return IAgStkGraphicsAGICustomTerrainOverlay.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsAGICustomTerrainOverlay.")
    

agcls.AgClassCatalog.add_catalog_entry("{59ef8436-aeec-4e60-8e3d-920e0f11feba}", IAgStkGraphicsAGICustomTerrainOverlay)
agcls.AgTypeNameMap["IAgStkGraphicsAGICustomTerrainOverlay"] = IAgStkGraphicsAGICustomTerrainOverlay

class IAgStkGraphicsAGIProcessedImageGlobeOverlay(object):
    """A globe image overlay for handling AGI Processed Image (PDTTX) files."""
    _num_methods = 0
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{5c2d7cca-54f6-4b27-93d6-58bddac0befe}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : {  }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsAGIProcessedImageGlobeOverlay._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsAGIProcessedImageGlobeOverlay from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsAGIProcessedImageGlobeOverlay.__dict__ and type(IAgStkGraphicsAGIProcessedImageGlobeOverlay.__dict__[attrname]) == property:
            return IAgStkGraphicsAGIProcessedImageGlobeOverlay.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsAGIProcessedImageGlobeOverlay.")
    

agcls.AgClassCatalog.add_catalog_entry("{5c2d7cca-54f6-4b27-93d6-58bddac0befe}", IAgStkGraphicsAGIProcessedImageGlobeOverlay)
agcls.AgTypeNameMap["IAgStkGraphicsAGIProcessedImageGlobeOverlay"] = IAgStkGraphicsAGIProcessedImageGlobeOverlay

class IAgStkGraphicsAGIProcessedTerrainOverlay(object):
    """A terrain overlay for handling AGI Processed Terrain (PDTT) files."""
    _num_methods = 0
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{093a5b12-abdd-4029-adc5-2cbab7e4216d}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : {  }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsAGIProcessedTerrainOverlay._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsAGIProcessedTerrainOverlay from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsAGIProcessedTerrainOverlay.__dict__ and type(IAgStkGraphicsAGIProcessedTerrainOverlay.__dict__[attrname]) == property:
            return IAgStkGraphicsAGIProcessedTerrainOverlay.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsAGIProcessedTerrainOverlay.")
    

agcls.AgClassCatalog.add_catalog_entry("{093a5b12-abdd-4029-adc5-2cbab7e4216d}", IAgStkGraphicsAGIProcessedTerrainOverlay)
agcls.AgTypeNameMap["IAgStkGraphicsAGIProcessedTerrainOverlay"] = IAgStkGraphicsAGIProcessedTerrainOverlay

class IAgStkGraphicsAGIRoamImageGlobeOverlay(object):
    """A globe image overlay for handling ROAM (TXM/TXB) files."""
    _num_methods = 0
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{d76d82b7-7a13-452d-b661-1d416fae732e}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : {  }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsAGIRoamImageGlobeOverlay._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsAGIRoamImageGlobeOverlay from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsAGIRoamImageGlobeOverlay.__dict__ and type(IAgStkGraphicsAGIRoamImageGlobeOverlay.__dict__[attrname]) == property:
            return IAgStkGraphicsAGIRoamImageGlobeOverlay.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsAGIRoamImageGlobeOverlay.")
    

agcls.AgClassCatalog.add_catalog_entry("{d76d82b7-7a13-452d-b661-1d416fae732e}", IAgStkGraphicsAGIRoamImageGlobeOverlay)
agcls.AgTypeNameMap["IAgStkGraphicsAGIRoamImageGlobeOverlay"] = IAgStkGraphicsAGIRoamImageGlobeOverlay

class IAgStkGraphicsCameraSnapshot(object):
    """Takes snapshots of the 3D window."""
    _num_methods = 5
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{6b6a8d90-ff4d-49b2-9fb4-5bf459818cd1}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "SaveToFile" : 1,
                             "SaveToFileWithWidthAndDPI" : 2,
                             "SaveToClipboard" : 3,
                             "SaveToRaster" : 4,
                             "SaveToTexture" : 5, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsCameraSnapshot._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsCameraSnapshot from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsCameraSnapshot.__dict__ and type(IAgStkGraphicsCameraSnapshot.__dict__[attrname]) == property:
            return IAgStkGraphicsCameraSnapshot.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsCameraSnapshot.")
    
    _SaveToFile_metadata = { "name" : "SaveToFile",
            "arg_types" : (agcom.BSTR, agcom.LONG,),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.AgEnum_arg(AgEStkGraphicsCameraSnapshotFileFormat),) }
    def SaveToFile(self, filename:str, cameraSnapshotFormat:"AgEStkGraphicsCameraSnapshotFileFormat") -> None:
        """Saves a snapshot of the 3D window to the filename with the specified format."""
        return self._intf.invoke(IAgStkGraphicsCameraSnapshot._metadata, IAgStkGraphicsCameraSnapshot._SaveToFile_metadata, filename, cameraSnapshotFormat)

    _SaveToFileWithWidthAndDPI_metadata = { "name" : "SaveToFileWithWidthAndDPI",
            "arg_types" : (agcom.BSTR, agcom.LONG, agcom.DOUBLE, agcom.DOUBLE,),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.AgEnum_arg(AgEStkGraphicsCameraSnapshotFileFormat), agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg,) }
    def SaveToFileWithWidthAndDPI(self, filename:str, cameraSnapshotFormat:"AgEStkGraphicsCameraSnapshotFileFormat", widthInInches:float, dotsPerInch:float) -> None:
        """Saves a snapshot of the 3D window to the filename with the specified format at high resolution..."""
        return self._intf.invoke(IAgStkGraphicsCameraSnapshot._metadata, IAgStkGraphicsCameraSnapshot._SaveToFileWithWidthAndDPI_metadata, filename, cameraSnapshotFormat, widthInInches, dotsPerInch)

    _SaveToClipboard_metadata = { "name" : "SaveToClipboard",
            "arg_types" : (),
            "marshallers" : () }
    def SaveToClipboard(self) -> None:
        """Saves a single frame of the 3D window to the clipboard."""
        return self._intf.invoke(IAgStkGraphicsCameraSnapshot._metadata, IAgStkGraphicsCameraSnapshot._SaveToClipboard_metadata, )

    _SaveToRaster_metadata = { "name" : "SaveToRaster",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    def SaveToRaster(self) -> "IAgStkGraphicsRaster":
        """Saves a snapshot of the 3D window to a raster."""
        return self._intf.invoke(IAgStkGraphicsCameraSnapshot._metadata, IAgStkGraphicsCameraSnapshot._SaveToRaster_metadata, out_arg())

    _SaveToTexture_metadata = { "name" : "SaveToTexture",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    def SaveToTexture(self) -> "IAgStkGraphicsRendererTexture2D":
        """Saves a snapshot of the 3D window to a texture 2d."""
        return self._intf.invoke(IAgStkGraphicsCameraSnapshot._metadata, IAgStkGraphicsCameraSnapshot._SaveToTexture_metadata, out_arg())


agcls.AgClassCatalog.add_catalog_entry("{6b6a8d90-ff4d-49b2-9fb4-5bf459818cd1}", IAgStkGraphicsCameraSnapshot)
agcls.AgTypeNameMap["IAgStkGraphicsCameraSnapshot"] = IAgStkGraphicsCameraSnapshot

class IAgStkGraphicsCameraVideoRecording(object):
    """Records the 3D window to either a movie file or to consecutively ordered image files each time the scene is rendered."""
    _num_methods = 5
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{f519ee7a-e452-451a-839d-0eda6cf69c0a}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_IsRecording" : 1,
                             "StartRecording" : 2,
                             "StartRecordingFrameStack" : 3,
                             "StopRecording" : 4,
                             "StartRecordingVideo" : 5, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsCameraVideoRecording._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsCameraVideoRecording from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsCameraVideoRecording.__dict__ and type(IAgStkGraphicsCameraVideoRecording.__dict__[attrname]) == property:
            return IAgStkGraphicsCameraVideoRecording.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsCameraVideoRecording.")
    
    _get_IsRecording_metadata = { "name" : "IsRecording",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def IsRecording(self) -> bool:
        """Gets if recording is occurring or not."""
        return self._intf.get_property(IAgStkGraphicsCameraVideoRecording._metadata, IAgStkGraphicsCameraVideoRecording._get_IsRecording_metadata)

    _StartRecording_metadata = { "name" : "StartRecording",
            "arg_types" : (agcom.BSTR, agcom.INT, agcom.INT,),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.INT_arg, agmarshall.INT_arg,) }
    def StartRecording(self, wmvFilename:str, videoBitRate:int, videoFrameRate:int) -> None:
        """This method is deprecated. Use StartRecordingVideo instead. Starts recording a file in the WMV format at the specified bit and frame rate."""
        return self._intf.invoke(IAgStkGraphicsCameraVideoRecording._metadata, IAgStkGraphicsCameraVideoRecording._StartRecording_metadata, wmvFilename, videoBitRate, videoFrameRate)

    _StartRecordingFrameStack_metadata = { "name" : "StartRecordingFrameStack",
            "arg_types" : (agcom.BSTR, agcom.BSTR, agcom.LONG, agcom.INT, agcom.INT,),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.BSTR_arg, agmarshall.AgEnum_arg(AgEStkGraphicsCameraSnapshotFileFormat), agmarshall.INT_arg, agmarshall.INT_arg,) }
    def StartRecordingFrameStack(self, fileDirectory:str, filePrefix:str, cameraSnapshotFileFormat:"AgEStkGraphicsCameraSnapshotFileFormat", startingFrameNumber:int, numberOfFrameDigits:int) -> None:
        """Starts recording a frame stack. Each frame is saved as a separate image file. The filename of each frame is defined by a prefix followed by a frame number."""
        return self._intf.invoke(IAgStkGraphicsCameraVideoRecording._metadata, IAgStkGraphicsCameraVideoRecording._StartRecordingFrameStack_metadata, fileDirectory, filePrefix, cameraSnapshotFileFormat, startingFrameNumber, numberOfFrameDigits)

    _StopRecording_metadata = { "name" : "StopRecording",
            "arg_types" : (),
            "marshallers" : () }
    def StopRecording(self) -> None:
        """Stops recording."""
        return self._intf.invoke(IAgStkGraphicsCameraVideoRecording._metadata, IAgStkGraphicsCameraVideoRecording._StopRecording_metadata, )

    _StartRecordingVideo_metadata = { "name" : "StartRecordingVideo",
            "arg_types" : (agcom.BSTR, agcom.BSTR, agcom.LONG, agcom.INT, agcom.INT,),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.BSTR_arg, agmarshall.AgEnum_arg(AgEStkGraphicsCameraVideoFormat), agmarshall.INT_arg, agmarshall.INT_arg,) }
    def StartRecordingVideo(self, fileDirectory:str, filePrefix:str, videoFormat:"AgEStkGraphicsCameraVideoFormat", videoBitRate:int, videoFrameRate:int) -> None:
        """Starts recording a video file at the specified bit and frame rate."""
        return self._intf.invoke(IAgStkGraphicsCameraVideoRecording._metadata, IAgStkGraphicsCameraVideoRecording._StartRecordingVideo_metadata, fileDirectory, filePrefix, videoFormat, videoBitRate, videoFrameRate)


agcls.AgClassCatalog.add_catalog_entry("{f519ee7a-e452-451a-839d-0eda6cf69c0a}", IAgStkGraphicsCameraVideoRecording)
agcls.AgTypeNameMap["IAgStkGraphicsCameraVideoRecording"] = IAgStkGraphicsCameraVideoRecording

class IAgStkGraphicsCentralBodyGraphicsIndexer(object):
    """An indexer into the central body graphics for a particular central body, which provides graphical properties such as showing or hiding the central body in the scene, and working with terrain and imagery for the specified central body."""
    _num_methods = 5
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{fc4eafc1-217c-4a1b-9640-4a678d84813a}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_Earth" : 1,
                             "get_Moon" : 2,
                             "get_Sun" : 3,
                             "Item" : 4,
                             "GetByName" : 5, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsCentralBodyGraphicsIndexer._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsCentralBodyGraphicsIndexer from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsCentralBodyGraphicsIndexer.__dict__ and type(IAgStkGraphicsCentralBodyGraphicsIndexer.__dict__[attrname]) == property:
            return IAgStkGraphicsCentralBodyGraphicsIndexer.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsCentralBodyGraphicsIndexer.")
    
    _get_Earth_metadata = { "name" : "Earth",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def Earth(self) -> "IAgStkGraphicsCentralBodyGraphics":
        """Gets the central body graphics for the planet Earth. This is equivalent to passing a central body equal to an instance of earth central body to the indexer."""
        return self._intf.get_property(IAgStkGraphicsCentralBodyGraphicsIndexer._metadata, IAgStkGraphicsCentralBodyGraphicsIndexer._get_Earth_metadata)

    _get_Moon_metadata = { "name" : "Moon",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def Moon(self) -> "IAgStkGraphicsCentralBodyGraphics":
        """Gets the central body graphics for the Moon."""
        return self._intf.get_property(IAgStkGraphicsCentralBodyGraphicsIndexer._metadata, IAgStkGraphicsCentralBodyGraphicsIndexer._get_Moon_metadata)

    _get_Sun_metadata = { "name" : "Sun",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def Sun(self) -> "IAgStkGraphicsCentralBodyGraphics":
        """Gets the central body graphics for the Sun."""
        return self._intf.get_property(IAgStkGraphicsCentralBodyGraphicsIndexer._metadata, IAgStkGraphicsCentralBodyGraphicsIndexer._get_Sun_metadata)

    _Item_metadata = { "name" : "Item",
            "arg_types" : (agcom.BSTR, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.AgInterface_out_arg,) }
    def Item(self, centralBody:str) -> "IAgStkGraphicsCentralBodyGraphics":
        """Gets the central body graphics for the specified central body."""
        return self._intf.invoke(IAgStkGraphicsCentralBodyGraphicsIndexer._metadata, IAgStkGraphicsCentralBodyGraphicsIndexer._Item_metadata, centralBody, out_arg())

    _GetByName_metadata = { "name" : "GetByName",
            "arg_types" : (agcom.BSTR, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.AgInterface_out_arg,) }
    def GetByName(self, name:str) -> "IAgStkGraphicsCentralBodyGraphics":
        """Returns the central body graphics for the central body with the given name."""
        return self._intf.invoke(IAgStkGraphicsCentralBodyGraphicsIndexer._metadata, IAgStkGraphicsCentralBodyGraphicsIndexer._GetByName_metadata, name, out_arg())

    __getitem__ = Item



agcls.AgClassCatalog.add_catalog_entry("{fc4eafc1-217c-4a1b-9640-4a678d84813a}", IAgStkGraphicsCentralBodyGraphicsIndexer)
agcls.AgTypeNameMap["IAgStkGraphicsCentralBodyGraphicsIndexer"] = IAgStkGraphicsCentralBodyGraphicsIndexer

class IAgStkGraphicsCustomImageGlobeOverlay(object):
    """A globe image overlay that allows for a user defined image to be specified."""
    _num_methods = 8
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{f8086ed2-4b18-4d6d-a39f-1ab5801cf886}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_IsTranslucent" : 1,
                             "get_MaximumMetersPerPixel" : 2,
                             "get_Projection" : 3,
                             "StartUp" : 4,
                             "ShutDown" : 5,
                             "ClearCache" : 6,
                             "Reload" : 7,
                             "Read" : 8, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsCustomImageGlobeOverlay._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsCustomImageGlobeOverlay from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsCustomImageGlobeOverlay.__dict__ and type(IAgStkGraphicsCustomImageGlobeOverlay.__dict__[attrname]) == property:
            return IAgStkGraphicsCustomImageGlobeOverlay.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsCustomImageGlobeOverlay.")
    
    _get_IsTranslucent_metadata = { "name" : "IsTranslucent",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def IsTranslucent(self) -> bool:
        """Gets whether the overlay contains translucent imagery."""
        return self._intf.get_property(IAgStkGraphicsCustomImageGlobeOverlay._metadata, IAgStkGraphicsCustomImageGlobeOverlay._get_IsTranslucent_metadata)

    _get_MaximumMetersPerPixel_metadata = { "name" : "MaximumMetersPerPixel",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def MaximumMetersPerPixel(self) -> float:
        """Gets the maximum resolution of the inlay in meters per pixel."""
        return self._intf.get_property(IAgStkGraphicsCustomImageGlobeOverlay._metadata, IAgStkGraphicsCustomImageGlobeOverlay._get_MaximumMetersPerPixel_metadata)

    _get_Projection_metadata = { "name" : "Projection",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEStkGraphicsMapProjection),) }
    @property
    def Projection(self) -> "AgEStkGraphicsMapProjection":
        """Gets the map projection. Valid values are mercator and equidistant cylindrical."""
        return self._intf.get_property(IAgStkGraphicsCustomImageGlobeOverlay._metadata, IAgStkGraphicsCustomImageGlobeOverlay._get_Projection_metadata)

    _StartUp_metadata = { "name" : "StartUp",
            "arg_types" : (agcom.PVOID,),
            "marshallers" : (agmarshall.AgInterface_in_arg("IAgStkGraphicsScene"),) }
    def StartUp(self, scene:"IAgStkGraphicsScene") -> None:
        """Called automatically when imagery is being added to the globe."""
        return self._intf.invoke(IAgStkGraphicsCustomImageGlobeOverlay._metadata, IAgStkGraphicsCustomImageGlobeOverlay._StartUp_metadata, scene)

    _ShutDown_metadata = { "name" : "ShutDown",
            "arg_types" : (agcom.PVOID,),
            "marshallers" : (agmarshall.AgInterface_in_arg("IAgStkGraphicsScene"),) }
    def ShutDown(self, scene:"IAgStkGraphicsScene") -> None:
        """Called automatically when imagery is being removed from the globe."""
        return self._intf.invoke(IAgStkGraphicsCustomImageGlobeOverlay._metadata, IAgStkGraphicsCustomImageGlobeOverlay._ShutDown_metadata, scene)

    _ClearCache_metadata = { "name" : "ClearCache",
            "arg_types" : (),
            "marshallers" : () }
    def ClearCache(self) -> None:
        """Clears the image data cache associated with this instance. This is equivalent to deleting and re-adding the overlay."""
        return self._intf.invoke(IAgStkGraphicsCustomImageGlobeOverlay._metadata, IAgStkGraphicsCustomImageGlobeOverlay._ClearCache_metadata, )

    _Reload_metadata = { "name" : "Reload",
            "arg_types" : (),
            "marshallers" : () }
    def Reload(self) -> None:
        """Reloads the image data associated with this instance. Preserves the current image data until new image data replaces it."""
        return self._intf.invoke(IAgStkGraphicsCustomImageGlobeOverlay._metadata, IAgStkGraphicsCustomImageGlobeOverlay._Reload_metadata, )

    _Read_metadata = { "name" : "Read",
            "arg_types" : (POINTER(agcom.LPSAFEARRAY), agcom.VARIANT, POINTER(agcom.PVOID), POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg, agmarshall.VARIANT_arg, agmarshall.IPictureDisp_arg, agmarshall.VARIANT_BOOL_arg,) }
    def Read(self, extent:list, userTileData:typing.Any, image:IPictureDisp) -> bool:
        """Reads a tile from the specified extent, scales it to and stores the result in image."""
        return self._intf.invoke(IAgStkGraphicsCustomImageGlobeOverlay._metadata, IAgStkGraphicsCustomImageGlobeOverlay._Read_metadata, extent, userTileData, image, out_arg())


agcls.AgClassCatalog.add_catalog_entry("{f8086ed2-4b18-4d6d-a39f-1ab5801cf886}", IAgStkGraphicsCustomImageGlobeOverlay)
agcls.AgTypeNameMap["IAgStkGraphicsCustomImageGlobeOverlay"] = IAgStkGraphicsCustomImageGlobeOverlay

class IAgStkGraphicsCustomImageGlobeOverlayPluginActivator(object):
    """The Activator class provides methods to load COM plugins that implement custom image globe overlays. For more information about custom image globe overlays, see the STK Programming Interface."""
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{efb59b20-9f79-4043-a3bd-6cd1a3395738}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "CreateFromDisplayName" : 1,
                             "GetAvailableDisplayNames" : 2, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsCustomImageGlobeOverlayPluginActivator._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsCustomImageGlobeOverlayPluginActivator from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsCustomImageGlobeOverlayPluginActivator.__dict__ and type(IAgStkGraphicsCustomImageGlobeOverlayPluginActivator.__dict__[attrname]) == property:
            return IAgStkGraphicsCustomImageGlobeOverlayPluginActivator.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsCustomImageGlobeOverlayPluginActivator.")
    
    _CreateFromDisplayName_metadata = { "name" : "CreateFromDisplayName",
            "arg_types" : (agcom.BSTR, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.AgInterface_out_arg,) }
    def CreateFromDisplayName(self, displayName:str) -> "IAgStkGraphicsCustomImageGlobeOverlayPluginProxy":
        """Loads a custom image globe overlay COM plugin associated with the specified display name and returns a proxy object that allows accessing the custom image globe overlays implemented by the plugin."""
        return self._intf.invoke(IAgStkGraphicsCustomImageGlobeOverlayPluginActivator._metadata, IAgStkGraphicsCustomImageGlobeOverlayPluginActivator._CreateFromDisplayName_metadata, displayName, out_arg())

    _GetAvailableDisplayNames_metadata = { "name" : "GetAvailableDisplayNames",
            "arg_types" : (POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg,) }
    def GetAvailableDisplayNames(self) -> list:
        """Gets a list of available custom image globe overlay Display Names (Programmatic Identifiers)."""
        return self._intf.invoke(IAgStkGraphicsCustomImageGlobeOverlayPluginActivator._metadata, IAgStkGraphicsCustomImageGlobeOverlayPluginActivator._GetAvailableDisplayNames_metadata, out_arg())


agcls.AgClassCatalog.add_catalog_entry("{efb59b20-9f79-4043-a3bd-6cd1a3395738}", IAgStkGraphicsCustomImageGlobeOverlayPluginActivator)
agcls.AgTypeNameMap["IAgStkGraphicsCustomImageGlobeOverlayPluginActivator"] = IAgStkGraphicsCustomImageGlobeOverlayPluginActivator

class IAgStkGraphicsCustomImageGlobeOverlayPluginProxy(object):
    """A proxy class provides access to a custom image globe overlay implemented by a plugin. Proxies are instantiated using custom image globe overlay plugin activator."""
    _num_methods = 3
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{197fbafd-0f9c-44d9-b2d0-14c8b30f312e}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_CustomImageGlobeOverlay" : 1,
                             "get_IsCustomImageGlobeOverlaySupported" : 2,
                             "get_RealPluginObject" : 3, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsCustomImageGlobeOverlayPluginProxy._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsCustomImageGlobeOverlayPluginProxy from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsCustomImageGlobeOverlayPluginProxy.__dict__ and type(IAgStkGraphicsCustomImageGlobeOverlayPluginProxy.__dict__[attrname]) == property:
            return IAgStkGraphicsCustomImageGlobeOverlayPluginProxy.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsCustomImageGlobeOverlayPluginProxy.")
    
    _get_CustomImageGlobeOverlay_metadata = { "name" : "CustomImageGlobeOverlay",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def CustomImageGlobeOverlay(self) -> "IAgStkGraphicsCustomImageGlobeOverlay":
        """Returns a custom image globe overlay."""
        return self._intf.get_property(IAgStkGraphicsCustomImageGlobeOverlayPluginProxy._metadata, IAgStkGraphicsCustomImageGlobeOverlayPluginProxy._get_CustomImageGlobeOverlay_metadata)

    _get_IsCustomImageGlobeOverlaySupported_metadata = { "name" : "IsCustomImageGlobeOverlaySupported",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def IsCustomImageGlobeOverlaySupported(self) -> bool:
        """Returns true if custom image globe overlays are supported."""
        return self._intf.get_property(IAgStkGraphicsCustomImageGlobeOverlayPluginProxy._metadata, IAgStkGraphicsCustomImageGlobeOverlayPluginProxy._get_IsCustomImageGlobeOverlaySupported_metadata)

    _get_RealPluginObject_metadata = { "name" : "RealPluginObject",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def RealPluginObject(self) -> typing.Any:
        """Returns a pointer to plugin object's IUnknown interface."""
        return self._intf.get_property(IAgStkGraphicsCustomImageGlobeOverlayPluginProxy._metadata, IAgStkGraphicsCustomImageGlobeOverlayPluginProxy._get_RealPluginObject_metadata)


agcls.AgClassCatalog.add_catalog_entry("{197fbafd-0f9c-44d9-b2d0-14c8b30f312e}", IAgStkGraphicsCustomImageGlobeOverlayPluginProxy)
agcls.AgTypeNameMap["IAgStkGraphicsCustomImageGlobeOverlayPluginProxy"] = IAgStkGraphicsCustomImageGlobeOverlayPluginProxy

class IAgStkGraphicsGeospatialImageGlobeOverlay(object):
    """A globe image overlay for handling <a href='https://jpeg.org/jpeg2000/'>JPEG 2000</a> (.jp2), ECW (.ecw), ECWP, and MrSid (.sid) image formats in the WGS84 geographic projection."""
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{fd42a5ba-5049-4c58-bf40-61ca5943dccf}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_UseTransparentColor" : 1,
                             "set_UseTransparentColor" : 2,
                             "get_TransparentColor" : 3,
                             "set_TransparentColor" : 4, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsGeospatialImageGlobeOverlay._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsGeospatialImageGlobeOverlay from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsGeospatialImageGlobeOverlay.__dict__ and type(IAgStkGraphicsGeospatialImageGlobeOverlay.__dict__[attrname]) == property:
            return IAgStkGraphicsGeospatialImageGlobeOverlay.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsGeospatialImageGlobeOverlay.")
    
    _get_UseTransparentColor_metadata = { "name" : "UseTransparentColor",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def UseTransparentColor(self) -> bool:
        """Gets or sets whether transparent color should be used."""
        return self._intf.get_property(IAgStkGraphicsGeospatialImageGlobeOverlay._metadata, IAgStkGraphicsGeospatialImageGlobeOverlay._get_UseTransparentColor_metadata)

    _set_UseTransparentColor_metadata = { "name" : "UseTransparentColor",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @UseTransparentColor.setter
    def UseTransparentColor(self, useTransparentColor:bool) -> None:
        return self._intf.set_property(IAgStkGraphicsGeospatialImageGlobeOverlay._metadata, IAgStkGraphicsGeospatialImageGlobeOverlay._set_UseTransparentColor_metadata, useTransparentColor)

    _get_TransparentColor_metadata = { "name" : "TransparentColor",
            "arg_types" : (POINTER(agcom.OLE_COLOR),),
            "marshallers" : (agmarshall.OLE_COLOR_arg,) }
    @property
    def TransparentColor(self) -> agcolor.Color:
        """Gets or sets the color that will become transparent."""
        return self._intf.get_property(IAgStkGraphicsGeospatialImageGlobeOverlay._metadata, IAgStkGraphicsGeospatialImageGlobeOverlay._get_TransparentColor_metadata)

    _set_TransparentColor_metadata = { "name" : "TransparentColor",
            "arg_types" : (agcom.OLE_COLOR,),
            "marshallers" : (agmarshall.OLE_COLOR_arg,) }
    @TransparentColor.setter
    def TransparentColor(self, transparentColor:agcolor.Color) -> None:
        return self._intf.set_property(IAgStkGraphicsGeospatialImageGlobeOverlay._metadata, IAgStkGraphicsGeospatialImageGlobeOverlay._set_TransparentColor_metadata, transparentColor)


agcls.AgClassCatalog.add_catalog_entry("{fd42a5ba-5049-4c58-bf40-61ca5943dccf}", IAgStkGraphicsGeospatialImageGlobeOverlay)
agcls.AgTypeNameMap["IAgStkGraphicsGeospatialImageGlobeOverlay"] = IAgStkGraphicsGeospatialImageGlobeOverlay

class IAgStkGraphicsGlobeOverlay(object):
    """The base class of all terrain overlay and globe image overlay objects."""
    _num_methods = 7
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{983949c2-68a3-46ee-9670-f174091286ad}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_CentralBody" : 1,
                             "get_Extent" : 2,
                             "get_Role" : 3,
                             "get_UriAsString" : 4,
                             "get_IsValid" : 5,
                             "get_DisplayCondition" : 6,
                             "set_DisplayCondition" : 7, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsGlobeOverlay._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsGlobeOverlay from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsGlobeOverlay.__dict__ and type(IAgStkGraphicsGlobeOverlay.__dict__[attrname]) == property:
            return IAgStkGraphicsGlobeOverlay.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsGlobeOverlay.")
    
    _get_CentralBody_metadata = { "name" : "CentralBody",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def CentralBody(self) -> str:
        """Gets the central body that the globe overlay is displayed on. It will return <see langword='null' /> if the globe overlay hasn't been added to a central body."""
        return self._intf.get_property(IAgStkGraphicsGlobeOverlay._metadata, IAgStkGraphicsGlobeOverlay._get_CentralBody_metadata)

    _get_Extent_metadata = { "name" : "Extent",
            "arg_types" : (POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg,) }
    @property
    def Extent(self) -> list:
        """Gets the cartographic extent that represents the area covered by the globe overlay. The array elements are arranged in the order west longitude, south latitude, east longitude, north latitude."""
        return self._intf.get_property(IAgStkGraphicsGlobeOverlay._metadata, IAgStkGraphicsGlobeOverlay._get_Extent_metadata)

    _get_Role_metadata = { "name" : "Role",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEStkGraphicsGlobeOverlayRole),) }
    @property
    def Role(self) -> "AgEStkGraphicsGlobeOverlayRole":
        """Gets the globe overlay role of the globe overlay."""
        return self._intf.get_property(IAgStkGraphicsGlobeOverlay._metadata, IAgStkGraphicsGlobeOverlay._get_Role_metadata)

    _get_UriAsString_metadata = { "name" : "UriAsString",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def UriAsString(self) -> str:
        """Gets the absolute URI specifying the location of the globe overlay."""
        return self._intf.get_property(IAgStkGraphicsGlobeOverlay._metadata, IAgStkGraphicsGlobeOverlay._get_UriAsString_metadata)

    _get_IsValid_metadata = { "name" : "IsValid",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def IsValid(self) -> bool:
        """Gets whether or not the overlay is valid. It can be invalid because of a missing file, corrupt file, unlicensed file, or a file on the incorrect central body."""
        return self._intf.get_property(IAgStkGraphicsGlobeOverlay._metadata, IAgStkGraphicsGlobeOverlay._get_IsValid_metadata)

    _get_DisplayCondition_metadata = { "name" : "DisplayCondition",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def DisplayCondition(self) -> "IAgStkGraphicsDisplayCondition":
        """Gets or sets the display condition that controls whether or not the globe overlay is displayed."""
        return self._intf.get_property(IAgStkGraphicsGlobeOverlay._metadata, IAgStkGraphicsGlobeOverlay._get_DisplayCondition_metadata)

    _set_DisplayCondition_metadata = { "name" : "DisplayCondition",
            "arg_types" : (agcom.PVOID,),
            "marshallers" : (agmarshall.AgInterface_in_arg("IAgStkGraphicsDisplayCondition"),) }
    @DisplayCondition.setter
    def DisplayCondition(self, displayCondition:"IAgStkGraphicsDisplayCondition") -> None:
        return self._intf.set_property(IAgStkGraphicsGlobeOverlay._metadata, IAgStkGraphicsGlobeOverlay._set_DisplayCondition_metadata, displayCondition)


agcls.AgClassCatalog.add_catalog_entry("{983949c2-68a3-46ee-9670-f174091286ad}", IAgStkGraphicsGlobeOverlay)
agcls.AgTypeNameMap["IAgStkGraphicsGlobeOverlay"] = IAgStkGraphicsGlobeOverlay

class IAgStkGraphicsGlobeOverlaySettings(object):
    """Settings used by globe overlay objects. These setting affect all scenes."""
    _num_methods = 6
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{2864d6df-bbe2-42b7-9838-27d1f5ff5be6}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_TerrainCacheSize" : 1,
                             "set_TerrainCacheSize" : 2,
                             "get_ImageryCacheSize" : 3,
                             "set_ImageryCacheSize" : 4,
                             "get_PreloadTerrainAndImagery" : 5,
                             "set_PreloadTerrainAndImagery" : 6, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsGlobeOverlaySettings._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsGlobeOverlaySettings from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsGlobeOverlaySettings.__dict__ and type(IAgStkGraphicsGlobeOverlaySettings.__dict__[attrname]) == property:
            return IAgStkGraphicsGlobeOverlaySettings.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsGlobeOverlaySettings.")
    
    _get_TerrainCacheSize_metadata = { "name" : "TerrainCacheSize",
            "arg_types" : (POINTER(agcom.INT),),
            "marshallers" : (agmarshall.INT_arg,) }
    @property
    def TerrainCacheSize(self) -> int:
        """Gets or sets the size of the terrain cache in megabytes. It is not recommended to go above 128 megabytes. Large cache sizes can slow down rendering since so much imagery will be rendered."""
        return self._intf.get_property(IAgStkGraphicsGlobeOverlaySettings._metadata, IAgStkGraphicsGlobeOverlaySettings._get_TerrainCacheSize_metadata)

    _set_TerrainCacheSize_metadata = { "name" : "TerrainCacheSize",
            "arg_types" : (agcom.INT,),
            "marshallers" : (agmarshall.INT_arg,) }
    @TerrainCacheSize.setter
    def TerrainCacheSize(self, terrainCacheSize:int) -> None:
        return self._intf.set_property(IAgStkGraphicsGlobeOverlaySettings._metadata, IAgStkGraphicsGlobeOverlaySettings._set_TerrainCacheSize_metadata, terrainCacheSize)

    _get_ImageryCacheSize_metadata = { "name" : "ImageryCacheSize",
            "arg_types" : (POINTER(agcom.INT),),
            "marshallers" : (agmarshall.INT_arg,) }
    @property
    def ImageryCacheSize(self) -> int:
        """Gets or sets the size of the imagery cache in megabytes. It is not recommended to go above 128 megabytes. Large cache sizes can slow down rendering since so much imagery will be rendered."""
        return self._intf.get_property(IAgStkGraphicsGlobeOverlaySettings._metadata, IAgStkGraphicsGlobeOverlaySettings._get_ImageryCacheSize_metadata)

    _set_ImageryCacheSize_metadata = { "name" : "ImageryCacheSize",
            "arg_types" : (agcom.INT,),
            "marshallers" : (agmarshall.INT_arg,) }
    @ImageryCacheSize.setter
    def ImageryCacheSize(self, imageryCacheSize:int) -> None:
        return self._intf.set_property(IAgStkGraphicsGlobeOverlaySettings._metadata, IAgStkGraphicsGlobeOverlaySettings._set_ImageryCacheSize_metadata, imageryCacheSize)

    _get_PreloadTerrainAndImagery_metadata = { "name" : "PreloadTerrainAndImagery",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def PreloadTerrainAndImagery(self) -> bool:
        """Gets or sets whether terrain and imagery are preloaded. When set to true, terrain and imagery are preloaded to get the best visual quality; when set to false, they are not preloaded..."""
        return self._intf.get_property(IAgStkGraphicsGlobeOverlaySettings._metadata, IAgStkGraphicsGlobeOverlaySettings._get_PreloadTerrainAndImagery_metadata)

    _set_PreloadTerrainAndImagery_metadata = { "name" : "PreloadTerrainAndImagery",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @PreloadTerrainAndImagery.setter
    def PreloadTerrainAndImagery(self, preloadTerrainAndImagery:bool) -> None:
        return self._intf.set_property(IAgStkGraphicsGlobeOverlaySettings._metadata, IAgStkGraphicsGlobeOverlaySettings._set_PreloadTerrainAndImagery_metadata, preloadTerrainAndImagery)


agcls.AgClassCatalog.add_catalog_entry("{2864d6df-bbe2-42b7-9838-27d1f5ff5be6}", IAgStkGraphicsGlobeOverlaySettings)
agcls.AgTypeNameMap["IAgStkGraphicsGlobeOverlaySettings"] = IAgStkGraphicsGlobeOverlaySettings

class IAgStkGraphicsLighting(object):
    """Lighting in the 3D scene."""
    _num_methods = 8
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{683cd020-54fc-48af-b7e4-0dbe06c9bf12}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_Enabled" : 1,
                             "set_Enabled" : 2,
                             "get_AmbientIntensity" : 3,
                             "set_AmbientIntensity" : 4,
                             "get_DiffuseIntensity" : 5,
                             "set_DiffuseIntensity" : 6,
                             "get_NightLightsIntensity" : 7,
                             "set_NightLightsIntensity" : 8, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsLighting._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsLighting from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsLighting.__dict__ and type(IAgStkGraphicsLighting.__dict__[attrname]) == property:
            return IAgStkGraphicsLighting.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsLighting.")
    
    _get_Enabled_metadata = { "name" : "Enabled",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def Enabled(self) -> bool:
        """Gets or sets whether or not lighting is enabled."""
        return self._intf.get_property(IAgStkGraphicsLighting._metadata, IAgStkGraphicsLighting._get_Enabled_metadata)

    _set_Enabled_metadata = { "name" : "Enabled",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @Enabled.setter
    def Enabled(self, enabled:bool) -> None:
        return self._intf.set_property(IAgStkGraphicsLighting._metadata, IAgStkGraphicsLighting._set_Enabled_metadata, enabled)

    _get_AmbientIntensity_metadata = { "name" : "AmbientIntensity",
            "arg_types" : (POINTER(agcom.FLOAT),),
            "marshallers" : (agmarshall.FLOAT_arg,) }
    @property
    def AmbientIntensity(self) -> float:
        """Gets or sets the ambient intensity throughout the scene."""
        return self._intf.get_property(IAgStkGraphicsLighting._metadata, IAgStkGraphicsLighting._get_AmbientIntensity_metadata)

    _set_AmbientIntensity_metadata = { "name" : "AmbientIntensity",
            "arg_types" : (agcom.FLOAT,),
            "marshallers" : (agmarshall.FLOAT_arg,) }
    @AmbientIntensity.setter
    def AmbientIntensity(self, ambientIntensity:float) -> None:
        return self._intf.set_property(IAgStkGraphicsLighting._metadata, IAgStkGraphicsLighting._set_AmbientIntensity_metadata, ambientIntensity)

    _get_DiffuseIntensity_metadata = { "name" : "DiffuseIntensity",
            "arg_types" : (POINTER(agcom.FLOAT),),
            "marshallers" : (agmarshall.FLOAT_arg,) }
    @property
    def DiffuseIntensity(self) -> float:
        """Gets or sets the diffuse intensity from the sun."""
        return self._intf.get_property(IAgStkGraphicsLighting._metadata, IAgStkGraphicsLighting._get_DiffuseIntensity_metadata)

    _set_DiffuseIntensity_metadata = { "name" : "DiffuseIntensity",
            "arg_types" : (agcom.FLOAT,),
            "marshallers" : (agmarshall.FLOAT_arg,) }
    @DiffuseIntensity.setter
    def DiffuseIntensity(self, diffuseIntensity:float) -> None:
        return self._intf.set_property(IAgStkGraphicsLighting._metadata, IAgStkGraphicsLighting._set_DiffuseIntensity_metadata, diffuseIntensity)

    _get_NightLightsIntensity_metadata = { "name" : "NightLightsIntensity",
            "arg_types" : (POINTER(agcom.FLOAT),),
            "marshallers" : (agmarshall.FLOAT_arg,) }
    @property
    def NightLightsIntensity(self) -> float:
        """Gets or sets the overall brightness for the night light's image overlay, night overlay."""
        return self._intf.get_property(IAgStkGraphicsLighting._metadata, IAgStkGraphicsLighting._get_NightLightsIntensity_metadata)

    _set_NightLightsIntensity_metadata = { "name" : "NightLightsIntensity",
            "arg_types" : (agcom.FLOAT,),
            "marshallers" : (agmarshall.FLOAT_arg,) }
    @NightLightsIntensity.setter
    def NightLightsIntensity(self, nightLightsIntensity:float) -> None:
        return self._intf.set_property(IAgStkGraphicsLighting._metadata, IAgStkGraphicsLighting._set_NightLightsIntensity_metadata, nightLightsIntensity)


agcls.AgClassCatalog.add_catalog_entry("{683cd020-54fc-48af-b7e4-0dbe06c9bf12}", IAgStkGraphicsLighting)
agcls.AgTypeNameMap["IAgStkGraphicsLighting"] = IAgStkGraphicsLighting

class IAgStkGraphicsPathPrimitiveUpdatePolicy(object):
    """A class that encapsulates the update logic for a path primitive. Derived classes must implement the Update method."""
    _num_methods = 1
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{71fe898e-dabb-4501-9c80-dcb1cde9c16b}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "Update" : 1, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsPathPrimitiveUpdatePolicy._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsPathPrimitiveUpdatePolicy from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsPathPrimitiveUpdatePolicy.__dict__ and type(IAgStkGraphicsPathPrimitiveUpdatePolicy.__dict__[attrname]) == property:
            return IAgStkGraphicsPathPrimitiveUpdatePolicy.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsPathPrimitiveUpdatePolicy.")
    
    _Update_metadata = { "name" : "Update",
            "arg_types" : (agcom.PVOID, agcom.PVOID,),
            "marshallers" : (agmarshall.AgInterface_in_arg("IAgStkGraphicsPathPrimitive"), agmarshall.AgInterface_in_arg("IAgDate"),) }
    def Update(self, pathPrimitive:"IAgStkGraphicsPathPrimitive", date:"IAgDate") -> None:
        """Updates the pathPrimitive at the specified date."""
        return self._intf.invoke(IAgStkGraphicsPathPrimitiveUpdatePolicy._metadata, IAgStkGraphicsPathPrimitiveUpdatePolicy._Update_metadata, pathPrimitive, date)


agcls.AgClassCatalog.add_catalog_entry("{71fe898e-dabb-4501-9c80-dcb1cde9c16b}", IAgStkGraphicsPathPrimitiveUpdatePolicy)
agcls.AgTypeNameMap["IAgStkGraphicsPathPrimitiveUpdatePolicy"] = IAgStkGraphicsPathPrimitiveUpdatePolicy

class IAgStkGraphicsProjectedRasterOverlay(object):
    """A globe image overlay which projects a raster onto the terrain or surface of the central body. You can also enable projection onto models by setting projected raster model projection to true for a Scene..."""
    _num_methods = 36
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{7cb212ed-4ef5-43c7-bbc3-f2ebd4dfd143}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_Raster" : 1,
                             "set_Raster" : 2,
                             "get_Projection" : 3,
                             "set_Projection" : 4,
                             "get_ShowShadows" : 5,
                             "set_ShowShadows" : 6,
                             "get_ShowFrustum" : 7,
                             "set_ShowFrustum" : 8,
                             "get_ShowFarPlane" : 9,
                             "set_ShowFarPlane" : 10,
                             "get_Color" : 11,
                             "set_Color" : 12,
                             "get_FrustumColor" : 13,
                             "set_FrustumColor" : 14,
                             "get_FarPlaneColor" : 15,
                             "set_FarPlaneColor" : 16,
                             "get_ShadowColor" : 17,
                             "set_ShadowColor" : 18,
                             "get_BorderColor" : 19,
                             "set_BorderColor" : 20,
                             "get_BorderWidth" : 21,
                             "set_BorderWidth" : 22,
                             "get_FrustumTranslucency" : 23,
                             "set_FrustumTranslucency" : 24,
                             "get_FarPlaneTranslucency" : 25,
                             "set_FarPlaneTranslucency" : 26,
                             "get_ShadowTranslucency" : 27,
                             "set_ShadowTranslucency" : 28,
                             "get_BorderTranslucency" : 29,
                             "set_BorderTranslucency" : 30,
                             "get_UseTransparentColor" : 31,
                             "set_UseTransparentColor" : 32,
                             "get_TransparentColor" : 33,
                             "set_TransparentColor" : 34,
                             "get_Directions" : 35,
                             "get_Supported" : 36, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsProjectedRasterOverlay._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsProjectedRasterOverlay from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsProjectedRasterOverlay.__dict__ and type(IAgStkGraphicsProjectedRasterOverlay.__dict__[attrname]) == property:
            return IAgStkGraphicsProjectedRasterOverlay.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsProjectedRasterOverlay.")
    
    _get_Raster_metadata = { "name" : "Raster",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def Raster(self) -> "IAgStkGraphicsRaster":
        """Gets or sets the raster that is projected."""
        return self._intf.get_property(IAgStkGraphicsProjectedRasterOverlay._metadata, IAgStkGraphicsProjectedRasterOverlay._get_Raster_metadata)

    _set_Raster_metadata = { "name" : "Raster",
            "arg_types" : (agcom.PVOID,),
            "marshallers" : (agmarshall.AgInterface_in_arg("IAgStkGraphicsRaster"),) }
    @Raster.setter
    def Raster(self, raster:"IAgStkGraphicsRaster") -> None:
        return self._intf.set_property(IAgStkGraphicsProjectedRasterOverlay._metadata, IAgStkGraphicsProjectedRasterOverlay._set_Raster_metadata, raster)

    _get_Projection_metadata = { "name" : "Projection",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def Projection(self) -> "IAgStkGraphicsProjection":
        """Gets or sets the projection that projects the raster."""
        return self._intf.get_property(IAgStkGraphicsProjectedRasterOverlay._metadata, IAgStkGraphicsProjectedRasterOverlay._get_Projection_metadata)

    _set_Projection_metadata = { "name" : "Projection",
            "arg_types" : (agcom.PVOID,),
            "marshallers" : (agmarshall.AgInterface_in_arg("IAgStkGraphicsProjection"),) }
    @Projection.setter
    def Projection(self, projection:"IAgStkGraphicsProjection") -> None:
        return self._intf.set_property(IAgStkGraphicsProjectedRasterOverlay._metadata, IAgStkGraphicsProjectedRasterOverlay._set_Projection_metadata, projection)

    _get_ShowShadows_metadata = { "name" : "ShowShadows",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def ShowShadows(self) -> bool:
        """Gets or sets whether to show shadows or not. When set to true, the raster will only be projected onto parts of the terrain visible from the projection's position. When false, the raster will project onto any terrain inside the projection's view frustum..."""
        return self._intf.get_property(IAgStkGraphicsProjectedRasterOverlay._metadata, IAgStkGraphicsProjectedRasterOverlay._get_ShowShadows_metadata)

    _set_ShowShadows_metadata = { "name" : "ShowShadows",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @ShowShadows.setter
    def ShowShadows(self, showShadows:bool) -> None:
        return self._intf.set_property(IAgStkGraphicsProjectedRasterOverlay._metadata, IAgStkGraphicsProjectedRasterOverlay._set_ShowShadows_metadata, showShadows)

    _get_ShowFrustum_metadata = { "name" : "ShowFrustum",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def ShowFrustum(self) -> bool:
        """Gets or sets whether to show the frustum of the projection."""
        return self._intf.get_property(IAgStkGraphicsProjectedRasterOverlay._metadata, IAgStkGraphicsProjectedRasterOverlay._get_ShowFrustum_metadata)

    _set_ShowFrustum_metadata = { "name" : "ShowFrustum",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @ShowFrustum.setter
    def ShowFrustum(self, showFrustum:bool) -> None:
        return self._intf.set_property(IAgStkGraphicsProjectedRasterOverlay._metadata, IAgStkGraphicsProjectedRasterOverlay._set_ShowFrustum_metadata, showFrustum)

    _get_ShowFarPlane_metadata = { "name" : "ShowFarPlane",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def ShowFarPlane(self) -> bool:
        """Gets or sets whether to show the far plane of the projection. If this is set to true, you will see the projected raster even when it does not intersect terrain."""
        return self._intf.get_property(IAgStkGraphicsProjectedRasterOverlay._metadata, IAgStkGraphicsProjectedRasterOverlay._get_ShowFarPlane_metadata)

    _set_ShowFarPlane_metadata = { "name" : "ShowFarPlane",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @ShowFarPlane.setter
    def ShowFarPlane(self, showFarPlane:bool) -> None:
        return self._intf.set_property(IAgStkGraphicsProjectedRasterOverlay._metadata, IAgStkGraphicsProjectedRasterOverlay._set_ShowFarPlane_metadata, showFarPlane)

    _get_Color_metadata = { "name" : "Color",
            "arg_types" : (POINTER(agcom.OLE_COLOR),),
            "marshallers" : (agmarshall.OLE_COLOR_arg,) }
    @property
    def Color(self) -> agcolor.Color:
        """Gets or sets the color of the projected raster."""
        return self._intf.get_property(IAgStkGraphicsProjectedRasterOverlay._metadata, IAgStkGraphicsProjectedRasterOverlay._get_Color_metadata)

    _set_Color_metadata = { "name" : "Color",
            "arg_types" : (agcom.OLE_COLOR,),
            "marshallers" : (agmarshall.OLE_COLOR_arg,) }
    @Color.setter
    def Color(self, color:agcolor.Color) -> None:
        return self._intf.set_property(IAgStkGraphicsProjectedRasterOverlay._metadata, IAgStkGraphicsProjectedRasterOverlay._set_Color_metadata, color)

    _get_FrustumColor_metadata = { "name" : "FrustumColor",
            "arg_types" : (POINTER(agcom.OLE_COLOR),),
            "marshallers" : (agmarshall.OLE_COLOR_arg,) }
    @property
    def FrustumColor(self) -> agcolor.Color:
        """Gets or sets the color of the projection's frustum."""
        return self._intf.get_property(IAgStkGraphicsProjectedRasterOverlay._metadata, IAgStkGraphicsProjectedRasterOverlay._get_FrustumColor_metadata)

    _set_FrustumColor_metadata = { "name" : "FrustumColor",
            "arg_types" : (agcom.OLE_COLOR,),
            "marshallers" : (agmarshall.OLE_COLOR_arg,) }
    @FrustumColor.setter
    def FrustumColor(self, frustumColor:agcolor.Color) -> None:
        return self._intf.set_property(IAgStkGraphicsProjectedRasterOverlay._metadata, IAgStkGraphicsProjectedRasterOverlay._set_FrustumColor_metadata, frustumColor)

    _get_FarPlaneColor_metadata = { "name" : "FarPlaneColor",
            "arg_types" : (POINTER(agcom.OLE_COLOR),),
            "marshallers" : (agmarshall.OLE_COLOR_arg,) }
    @property
    def FarPlaneColor(self) -> agcolor.Color:
        """Gets or sets the color of the projection's far plane."""
        return self._intf.get_property(IAgStkGraphicsProjectedRasterOverlay._metadata, IAgStkGraphicsProjectedRasterOverlay._get_FarPlaneColor_metadata)

    _set_FarPlaneColor_metadata = { "name" : "FarPlaneColor",
            "arg_types" : (agcom.OLE_COLOR,),
            "marshallers" : (agmarshall.OLE_COLOR_arg,) }
    @FarPlaneColor.setter
    def FarPlaneColor(self, farPlaneColor:agcolor.Color) -> None:
        return self._intf.set_property(IAgStkGraphicsProjectedRasterOverlay._metadata, IAgStkGraphicsProjectedRasterOverlay._set_FarPlaneColor_metadata, farPlaneColor)

    _get_ShadowColor_metadata = { "name" : "ShadowColor",
            "arg_types" : (POINTER(agcom.OLE_COLOR),),
            "marshallers" : (agmarshall.OLE_COLOR_arg,) }
    @property
    def ShadowColor(self) -> agcolor.Color:
        """Gets or sets the color of the projection's shadow."""
        return self._intf.get_property(IAgStkGraphicsProjectedRasterOverlay._metadata, IAgStkGraphicsProjectedRasterOverlay._get_ShadowColor_metadata)

    _set_ShadowColor_metadata = { "name" : "ShadowColor",
            "arg_types" : (agcom.OLE_COLOR,),
            "marshallers" : (agmarshall.OLE_COLOR_arg,) }
    @ShadowColor.setter
    def ShadowColor(self, shadowColor:agcolor.Color) -> None:
        return self._intf.set_property(IAgStkGraphicsProjectedRasterOverlay._metadata, IAgStkGraphicsProjectedRasterOverlay._set_ShadowColor_metadata, shadowColor)

    _get_BorderColor_metadata = { "name" : "BorderColor",
            "arg_types" : (POINTER(agcom.OLE_COLOR),),
            "marshallers" : (agmarshall.OLE_COLOR_arg,) }
    @property
    def BorderColor(self) -> agcolor.Color:
        """Gets or sets the color of the projection's border."""
        return self._intf.get_property(IAgStkGraphicsProjectedRasterOverlay._metadata, IAgStkGraphicsProjectedRasterOverlay._get_BorderColor_metadata)

    _set_BorderColor_metadata = { "name" : "BorderColor",
            "arg_types" : (agcom.OLE_COLOR,),
            "marshallers" : (agmarshall.OLE_COLOR_arg,) }
    @BorderColor.setter
    def BorderColor(self, borderColor:agcolor.Color) -> None:
        return self._intf.set_property(IAgStkGraphicsProjectedRasterOverlay._metadata, IAgStkGraphicsProjectedRasterOverlay._set_BorderColor_metadata, borderColor)

    _get_BorderWidth_metadata = { "name" : "BorderWidth",
            "arg_types" : (POINTER(agcom.FLOAT),),
            "marshallers" : (agmarshall.FLOAT_arg,) }
    @property
    def BorderWidth(self) -> float:
        """Gets or sets the width of the projection's border."""
        return self._intf.get_property(IAgStkGraphicsProjectedRasterOverlay._metadata, IAgStkGraphicsProjectedRasterOverlay._get_BorderWidth_metadata)

    _set_BorderWidth_metadata = { "name" : "BorderWidth",
            "arg_types" : (agcom.FLOAT,),
            "marshallers" : (agmarshall.FLOAT_arg,) }
    @BorderWidth.setter
    def BorderWidth(self, borderWidth:float) -> None:
        return self._intf.set_property(IAgStkGraphicsProjectedRasterOverlay._metadata, IAgStkGraphicsProjectedRasterOverlay._set_BorderWidth_metadata, borderWidth)

    _get_FrustumTranslucency_metadata = { "name" : "FrustumTranslucency",
            "arg_types" : (POINTER(agcom.FLOAT),),
            "marshallers" : (agmarshall.FLOAT_arg,) }
    @property
    def FrustumTranslucency(self) -> float:
        """Gets or sets the translucency of the projection's frustum."""
        return self._intf.get_property(IAgStkGraphicsProjectedRasterOverlay._metadata, IAgStkGraphicsProjectedRasterOverlay._get_FrustumTranslucency_metadata)

    _set_FrustumTranslucency_metadata = { "name" : "FrustumTranslucency",
            "arg_types" : (agcom.FLOAT,),
            "marshallers" : (agmarshall.FLOAT_arg,) }
    @FrustumTranslucency.setter
    def FrustumTranslucency(self, frustumTranslucency:float) -> None:
        return self._intf.set_property(IAgStkGraphicsProjectedRasterOverlay._metadata, IAgStkGraphicsProjectedRasterOverlay._set_FrustumTranslucency_metadata, frustumTranslucency)

    _get_FarPlaneTranslucency_metadata = { "name" : "FarPlaneTranslucency",
            "arg_types" : (POINTER(agcom.FLOAT),),
            "marshallers" : (agmarshall.FLOAT_arg,) }
    @property
    def FarPlaneTranslucency(self) -> float:
        """Gets or sets the translucency of the projection's far plane."""
        return self._intf.get_property(IAgStkGraphicsProjectedRasterOverlay._metadata, IAgStkGraphicsProjectedRasterOverlay._get_FarPlaneTranslucency_metadata)

    _set_FarPlaneTranslucency_metadata = { "name" : "FarPlaneTranslucency",
            "arg_types" : (agcom.FLOAT,),
            "marshallers" : (agmarshall.FLOAT_arg,) }
    @FarPlaneTranslucency.setter
    def FarPlaneTranslucency(self, farPlaneTranslucency:float) -> None:
        return self._intf.set_property(IAgStkGraphicsProjectedRasterOverlay._metadata, IAgStkGraphicsProjectedRasterOverlay._set_FarPlaneTranslucency_metadata, farPlaneTranslucency)

    _get_ShadowTranslucency_metadata = { "name" : "ShadowTranslucency",
            "arg_types" : (POINTER(agcom.FLOAT),),
            "marshallers" : (agmarshall.FLOAT_arg,) }
    @property
    def ShadowTranslucency(self) -> float:
        """Gets or sets the translucency of the projection's shadow."""
        return self._intf.get_property(IAgStkGraphicsProjectedRasterOverlay._metadata, IAgStkGraphicsProjectedRasterOverlay._get_ShadowTranslucency_metadata)

    _set_ShadowTranslucency_metadata = { "name" : "ShadowTranslucency",
            "arg_types" : (agcom.FLOAT,),
            "marshallers" : (agmarshall.FLOAT_arg,) }
    @ShadowTranslucency.setter
    def ShadowTranslucency(self, shadowTranslucency:float) -> None:
        return self._intf.set_property(IAgStkGraphicsProjectedRasterOverlay._metadata, IAgStkGraphicsProjectedRasterOverlay._set_ShadowTranslucency_metadata, shadowTranslucency)

    _get_BorderTranslucency_metadata = { "name" : "BorderTranslucency",
            "arg_types" : (POINTER(agcom.FLOAT),),
            "marshallers" : (agmarshall.FLOAT_arg,) }
    @property
    def BorderTranslucency(self) -> float:
        """Gets or sets the translucency of the projection's border."""
        return self._intf.get_property(IAgStkGraphicsProjectedRasterOverlay._metadata, IAgStkGraphicsProjectedRasterOverlay._get_BorderTranslucency_metadata)

    _set_BorderTranslucency_metadata = { "name" : "BorderTranslucency",
            "arg_types" : (agcom.FLOAT,),
            "marshallers" : (agmarshall.FLOAT_arg,) }
    @BorderTranslucency.setter
    def BorderTranslucency(self, borderTranslucency:float) -> None:
        return self._intf.set_property(IAgStkGraphicsProjectedRasterOverlay._metadata, IAgStkGraphicsProjectedRasterOverlay._set_BorderTranslucency_metadata, borderTranslucency)

    _get_UseTransparentColor_metadata = { "name" : "UseTransparentColor",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def UseTransparentColor(self) -> bool:
        """Gets or sets whether transparent color should be used."""
        return self._intf.get_property(IAgStkGraphicsProjectedRasterOverlay._metadata, IAgStkGraphicsProjectedRasterOverlay._get_UseTransparentColor_metadata)

    _set_UseTransparentColor_metadata = { "name" : "UseTransparentColor",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @UseTransparentColor.setter
    def UseTransparentColor(self, useTransparentColor:bool) -> None:
        return self._intf.set_property(IAgStkGraphicsProjectedRasterOverlay._metadata, IAgStkGraphicsProjectedRasterOverlay._set_UseTransparentColor_metadata, useTransparentColor)

    _get_TransparentColor_metadata = { "name" : "TransparentColor",
            "arg_types" : (POINTER(agcom.OLE_COLOR),),
            "marshallers" : (agmarshall.OLE_COLOR_arg,) }
    @property
    def TransparentColor(self) -> agcolor.Color:
        """Gets or sets the color that will become transparent."""
        return self._intf.get_property(IAgStkGraphicsProjectedRasterOverlay._metadata, IAgStkGraphicsProjectedRasterOverlay._get_TransparentColor_metadata)

    _set_TransparentColor_metadata = { "name" : "TransparentColor",
            "arg_types" : (agcom.OLE_COLOR,),
            "marshallers" : (agmarshall.OLE_COLOR_arg,) }
    @TransparentColor.setter
    def TransparentColor(self, transparentColor:agcolor.Color) -> None:
        return self._intf.set_property(IAgStkGraphicsProjectedRasterOverlay._metadata, IAgStkGraphicsProjectedRasterOverlay._set_TransparentColor_metadata, transparentColor)

    _get_Directions_metadata = { "name" : "Directions",
            "arg_types" : (POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg,) }
    @property
    def Directions(self) -> list:
        """Gets the direction vectors in the central body's fixed reference frame that define the projection's frustum..."""
        return self._intf.get_property(IAgStkGraphicsProjectedRasterOverlay._metadata, IAgStkGraphicsProjectedRasterOverlay._get_Directions_metadata)

    _get_Supported_metadata = { "name" : "Supported",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def Supported(self) -> bool:
        """Gets whether or not the video card supports the projected raster overlay."""
        return self._intf.get_property(IAgStkGraphicsProjectedRasterOverlay._metadata, IAgStkGraphicsProjectedRasterOverlay._get_Supported_metadata)


agcls.AgClassCatalog.add_catalog_entry("{7cb212ed-4ef5-43c7-bbc3-f2ebd4dfd143}", IAgStkGraphicsProjectedRasterOverlay)
agcls.AgTypeNameMap["IAgStkGraphicsProjectedRasterOverlay"] = IAgStkGraphicsProjectedRasterOverlay

class IAgStkGraphicsProjection(object):
    """A projection represents a simplified camera with a position, orientation, and field of view horizontal and field of view vertical..."""
    _num_methods = 12
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{152e3a02-23b0-4dc8-a7e5-9ee19619bcab}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_Position" : 1,
                             "set_Position" : 2,
                             "get_Orientation" : 3,
                             "set_Orientation" : 4,
                             "get_FieldOfViewHorizontal" : 5,
                             "set_FieldOfViewHorizontal" : 6,
                             "get_FieldOfViewVertical" : 7,
                             "set_FieldOfViewVertical" : 8,
                             "get_NearPlane" : 9,
                             "set_NearPlane" : 10,
                             "get_FarPlane" : 11,
                             "set_FarPlane" : 12, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsProjection._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsProjection from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsProjection.__dict__ and type(IAgStkGraphicsProjection.__dict__[attrname]) == property:
            return IAgStkGraphicsProjection.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsProjection.")
    
    _get_Position_metadata = { "name" : "Position",
            "arg_types" : (POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg,) }
    @property
    def Position(self) -> list:
        """Gets or sets the cartesian defining the position of the projection in the central body's fixed reference frame. The array contains the components of the position arranged in the order x, y, z."""
        return self._intf.get_property(IAgStkGraphicsProjection._metadata, IAgStkGraphicsProjection._get_Position_metadata)

    _set_Position_metadata = { "name" : "Position",
            "arg_types" : (agcom.LPSAFEARRAY,),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg,) }
    @Position.setter
    def Position(self, position:list) -> None:
        return self._intf.set_property(IAgStkGraphicsProjection._metadata, IAgStkGraphicsProjection._set_Position_metadata, position)

    _get_Orientation_metadata = { "name" : "Orientation",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def Orientation(self) -> "IAgOrientation":
        """Gets or sets the unit quaternion defining the orientation of the projection in the central body's fixed reference frame."""
        return self._intf.get_property(IAgStkGraphicsProjection._metadata, IAgStkGraphicsProjection._get_Orientation_metadata)

    _set_Orientation_metadata = { "name" : "Orientation",
            "arg_types" : (agcom.PVOID,),
            "marshallers" : (agmarshall.AgInterface_in_arg("IAgOrientation"),) }
    @Orientation.setter
    def Orientation(self, orientation:"IAgOrientation") -> None:
        return self._intf.set_property(IAgStkGraphicsProjection._metadata, IAgStkGraphicsProjection._set_Orientation_metadata, orientation)

    _get_FieldOfViewHorizontal_metadata = { "name" : "FieldOfViewHorizontal",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def FieldOfViewHorizontal(self) -> float:
        """Gets or sets the horizontal field of view associated with the projection."""
        return self._intf.get_property(IAgStkGraphicsProjection._metadata, IAgStkGraphicsProjection._get_FieldOfViewHorizontal_metadata)

    _set_FieldOfViewHorizontal_metadata = { "name" : "FieldOfViewHorizontal",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @FieldOfViewHorizontal.setter
    def FieldOfViewHorizontal(self, fieldOfViewHorizontal:float) -> None:
        return self._intf.set_property(IAgStkGraphicsProjection._metadata, IAgStkGraphicsProjection._set_FieldOfViewHorizontal_metadata, fieldOfViewHorizontal)

    _get_FieldOfViewVertical_metadata = { "name" : "FieldOfViewVertical",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def FieldOfViewVertical(self) -> float:
        """Gets or sets the vertical field of view associated with the projection."""
        return self._intf.get_property(IAgStkGraphicsProjection._metadata, IAgStkGraphicsProjection._get_FieldOfViewVertical_metadata)

    _set_FieldOfViewVertical_metadata = { "name" : "FieldOfViewVertical",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @FieldOfViewVertical.setter
    def FieldOfViewVertical(self, fieldOfViewVertical:float) -> None:
        return self._intf.set_property(IAgStkGraphicsProjection._metadata, IAgStkGraphicsProjection._set_FieldOfViewVertical_metadata, fieldOfViewVertical)

    _get_NearPlane_metadata = { "name" : "NearPlane",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def NearPlane(self) -> float:
        """Gets or sets the near plane associated with the projection."""
        return self._intf.get_property(IAgStkGraphicsProjection._metadata, IAgStkGraphicsProjection._get_NearPlane_metadata)

    _set_NearPlane_metadata = { "name" : "NearPlane",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @NearPlane.setter
    def NearPlane(self, nearPlane:float) -> None:
        return self._intf.set_property(IAgStkGraphicsProjection._metadata, IAgStkGraphicsProjection._set_NearPlane_metadata, nearPlane)

    _get_FarPlane_metadata = { "name" : "FarPlane",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def FarPlane(self) -> float:
        """Gets or sets the far plane associated with the projection."""
        return self._intf.get_property(IAgStkGraphicsProjection._metadata, IAgStkGraphicsProjection._get_FarPlane_metadata)

    _set_FarPlane_metadata = { "name" : "FarPlane",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @FarPlane.setter
    def FarPlane(self, farPlane:float) -> None:
        return self._intf.set_property(IAgStkGraphicsProjection._metadata, IAgStkGraphicsProjection._set_FarPlane_metadata, farPlane)


agcls.AgClassCatalog.add_catalog_entry("{152e3a02-23b0-4dc8-a7e5-9ee19619bcab}", IAgStkGraphicsProjection)
agcls.AgTypeNameMap["IAgStkGraphicsProjection"] = IAgStkGraphicsProjection

class IAgStkGraphicsProjectionStream(object):
    """A projection that is updated dynamically at the specified update delta. The class can be used to stream projection data to projection clients, like projected raster overlay..."""
    _num_methods = 3
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{7af66bcf-c123-47b2-ac63-168bbdedec66}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_UpdateDelta" : 1,
                             "set_UpdateDelta" : 2,
                             "Update" : 3, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsProjectionStream._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsProjectionStream from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsProjectionStream.__dict__ and type(IAgStkGraphicsProjectionStream.__dict__[attrname]) == property:
            return IAgStkGraphicsProjectionStream.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsProjectionStream.")
    
    _get_UpdateDelta_metadata = { "name" : "UpdateDelta",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def UpdateDelta(self) -> float:
        """Gets or sets the update delta of the projection stream in seconds. The update delta defines the interval at which the Update method will be called..."""
        return self._intf.get_property(IAgStkGraphicsProjectionStream._metadata, IAgStkGraphicsProjectionStream._get_UpdateDelta_metadata)

    _set_UpdateDelta_metadata = { "name" : "UpdateDelta",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @UpdateDelta.setter
    def UpdateDelta(self, updateDelta:float) -> None:
        return self._intf.set_property(IAgStkGraphicsProjectionStream._metadata, IAgStkGraphicsProjectionStream._set_UpdateDelta_metadata, updateDelta)

    _Update_metadata = { "name" : "Update",
            "arg_types" : (agcom.PVOID, agcom.PVOID, POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.AgInterface_in_arg("IAgDate"), agmarshall.AgInterface_in_arg("IAgDate"), agmarshall.VARIANT_BOOL_arg,) }
    def Update(self, time:"IAgDate", nextTime:"IAgDate") -> bool:
        """When overridden in a derived class, updates the projection data associated with the projection stream at the specified time. When the Update method is called, the projection stream contains the current projection data..."""
        return self._intf.invoke(IAgStkGraphicsProjectionStream._metadata, IAgStkGraphicsProjectionStream._Update_metadata, time, nextTime, out_arg())


agcls.AgClassCatalog.add_catalog_entry("{7af66bcf-c123-47b2-ac63-168bbdedec66}", IAgStkGraphicsProjectionStream)
agcls.AgTypeNameMap["IAgStkGraphicsProjectionStream"] = IAgStkGraphicsProjectionStream

class IAgStkGraphicsSceneGlobeOverlaySettings(object):
    """Settings used by globe overlay objects. These settings only affect the scene."""
    _num_methods = 8
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{6f2961c3-3fbe-4d5c-849b-d17be044dd71}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_AntiAliasImagery" : 1,
                             "set_AntiAliasImagery" : 2,
                             "get_TerrainMeshPixelError" : 3,
                             "set_TerrainMeshPixelError" : 4,
                             "get_ImageryPixelError" : 5,
                             "set_ImageryPixelError" : 6,
                             "get_ProjectedRasterModelProjection" : 7,
                             "set_ProjectedRasterModelProjection" : 8, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsSceneGlobeOverlaySettings._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsSceneGlobeOverlaySettings from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsSceneGlobeOverlaySettings.__dict__ and type(IAgStkGraphicsSceneGlobeOverlaySettings.__dict__[attrname]) == property:
            return IAgStkGraphicsSceneGlobeOverlaySettings.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsSceneGlobeOverlaySettings.")
    
    _get_AntiAliasImagery_metadata = { "name" : "AntiAliasImagery",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def AntiAliasImagery(self) -> bool:
        """Gets or sets a value indicating whether or not imagery is anti-aliased."""
        return self._intf.get_property(IAgStkGraphicsSceneGlobeOverlaySettings._metadata, IAgStkGraphicsSceneGlobeOverlaySettings._get_AntiAliasImagery_metadata)

    _set_AntiAliasImagery_metadata = { "name" : "AntiAliasImagery",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @AntiAliasImagery.setter
    def AntiAliasImagery(self, antiAliasImagery:bool) -> None:
        return self._intf.set_property(IAgStkGraphicsSceneGlobeOverlaySettings._metadata, IAgStkGraphicsSceneGlobeOverlaySettings._set_AntiAliasImagery_metadata, antiAliasImagery)

    _get_TerrainMeshPixelError_metadata = { "name" : "TerrainMeshPixelError",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def TerrainMeshPixelError(self) -> float:
        """Gets or sets the pixel error for terrain meshes. This is the number of pixels that the rendered terrain is different from the actual terrain data. The default is 2.0 pixels."""
        return self._intf.get_property(IAgStkGraphicsSceneGlobeOverlaySettings._metadata, IAgStkGraphicsSceneGlobeOverlaySettings._get_TerrainMeshPixelError_metadata)

    _set_TerrainMeshPixelError_metadata = { "name" : "TerrainMeshPixelError",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @TerrainMeshPixelError.setter
    def TerrainMeshPixelError(self, terrainMeshPixelError:float) -> None:
        return self._intf.set_property(IAgStkGraphicsSceneGlobeOverlaySettings._metadata, IAgStkGraphicsSceneGlobeOverlaySettings._set_TerrainMeshPixelError_metadata, terrainMeshPixelError)

    _get_ImageryPixelError_metadata = { "name" : "ImageryPixelError",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def ImageryPixelError(self) -> float:
        """Gets or sets the pixel error for imagery. This is the number of pixels that the rendered imagery is different from the actual imagery data. The default is 1.0 pixel."""
        return self._intf.get_property(IAgStkGraphicsSceneGlobeOverlaySettings._metadata, IAgStkGraphicsSceneGlobeOverlaySettings._get_ImageryPixelError_metadata)

    _set_ImageryPixelError_metadata = { "name" : "ImageryPixelError",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @ImageryPixelError.setter
    def ImageryPixelError(self, imageryPixelError:float) -> None:
        return self._intf.set_property(IAgStkGraphicsSceneGlobeOverlaySettings._metadata, IAgStkGraphicsSceneGlobeOverlaySettings._set_ImageryPixelError_metadata, imageryPixelError)

    _get_ProjectedRasterModelProjection_metadata = { "name" : "ProjectedRasterModelProjection",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def ProjectedRasterModelProjection(self) -> bool:
        """Gets or sets whether projected raster globe overlays will also project onto models."""
        return self._intf.get_property(IAgStkGraphicsSceneGlobeOverlaySettings._metadata, IAgStkGraphicsSceneGlobeOverlaySettings._get_ProjectedRasterModelProjection_metadata)

    _set_ProjectedRasterModelProjection_metadata = { "name" : "ProjectedRasterModelProjection",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @ProjectedRasterModelProjection.setter
    def ProjectedRasterModelProjection(self, projectedRasterModelProjection:bool) -> None:
        return self._intf.set_property(IAgStkGraphicsSceneGlobeOverlaySettings._metadata, IAgStkGraphicsSceneGlobeOverlaySettings._set_ProjectedRasterModelProjection_metadata, projectedRasterModelProjection)


agcls.AgClassCatalog.add_catalog_entry("{6f2961c3-3fbe-4d5c-849b-d17be044dd71}", IAgStkGraphicsSceneGlobeOverlaySettings)
agcls.AgTypeNameMap["IAgStkGraphicsSceneGlobeOverlaySettings"] = IAgStkGraphicsSceneGlobeOverlaySettings

class IAgStkGraphicsScreenOverlayCollectionBase(object):
    """The common base class for collections of overlays held by screen overlay and by screen overlay manager."""
    _num_methods = 8
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{49ea6365-0b8d-4fc5-ad52-c1d16ac7568d}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_Count" : 1,
                             "get_IsReadOnly" : 2,
                             "Item" : 3,
                             "get__NewEnum" : 4,
                             "Contains" : 5,
                             "Remove" : 6,
                             "Clear" : 7,
                             "Add" : 8, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsScreenOverlayCollectionBase._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsScreenOverlayCollectionBase from source object.")
        self.__dict__["_enumerator"] = None
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsScreenOverlayCollectionBase.__dict__ and type(IAgStkGraphicsScreenOverlayCollectionBase.__dict__[attrname]) == property:
            return IAgStkGraphicsScreenOverlayCollectionBase.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsScreenOverlayCollectionBase.")
    def __iter__(self):
        self.__dict__["_enumerator"] = self._NewEnum
        self._enumerator.reset()
        return self
    def __next__(self) -> "IAgStkGraphicsScreenOverlay":
        if self._enumerator is None:
            raise StopIteration
        nextval = self._enumerator.next()
        if nextval is None:
            raise StopIteration
        return nextval
    
    _get_Count_metadata = { "name" : "Count",
            "arg_types" : (POINTER(agcom.INT),),
            "marshallers" : (agmarshall.INT_arg,) }
    @property
    def Count(self) -> int:
        """Gets the number of screen overlays in the collection."""
        return self._intf.get_property(IAgStkGraphicsScreenOverlayCollectionBase._metadata, IAgStkGraphicsScreenOverlayCollectionBase._get_Count_metadata)

    _get_IsReadOnly_metadata = { "name" : "IsReadOnly",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def IsReadOnly(self) -> bool:
        """Gets a value indicating whether the collection is read-only."""
        return self._intf.get_property(IAgStkGraphicsScreenOverlayCollectionBase._metadata, IAgStkGraphicsScreenOverlayCollectionBase._get_IsReadOnly_metadata)

    _Item_metadata = { "name" : "Item",
            "arg_types" : (agcom.INT, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.INT_arg, agmarshall.AgInterface_out_arg,) }
    def Item(self, index:int) -> "IAgStkGraphicsScreenOverlay":
        """Gets the overlay at the specified index."""
        return self._intf.invoke(IAgStkGraphicsScreenOverlayCollectionBase._metadata, IAgStkGraphicsScreenOverlayCollectionBase._Item_metadata, index, out_arg())

    _get__NewEnum_metadata = { "name" : "_NewEnum",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.IEnumVARIANT_arg,) }
    @property
    def _NewEnum(self) -> enumerator_proxy:
        """Returns an enumerator that iterates through the collection."""
        return self._intf.get_property(IAgStkGraphicsScreenOverlayCollectionBase._metadata, IAgStkGraphicsScreenOverlayCollectionBase._get__NewEnum_metadata)

    _Contains_metadata = { "name" : "Contains",
            "arg_types" : (agcom.PVOID, POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.AgInterface_in_arg("IAgStkGraphicsScreenOverlay"), agmarshall.VARIANT_BOOL_arg,) }
    def Contains(self, item:"IAgStkGraphicsScreenOverlay") -> bool:
        """Determines whether the collection contains a specific overlay."""
        return self._intf.invoke(IAgStkGraphicsScreenOverlayCollectionBase._metadata, IAgStkGraphicsScreenOverlayCollectionBase._Contains_metadata, item, out_arg())

    _Remove_metadata = { "name" : "Remove",
            "arg_types" : (agcom.PVOID, POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.AgInterface_in_arg("IAgStkGraphicsScreenOverlay"), agmarshall.VARIANT_BOOL_arg,) }
    def Remove(self, item:"IAgStkGraphicsScreenOverlay") -> bool:
        """Removes the first occurrence of a specific overlay from the collection."""
        return self._intf.invoke(IAgStkGraphicsScreenOverlayCollectionBase._metadata, IAgStkGraphicsScreenOverlayCollectionBase._Remove_metadata, item, out_arg())

    _Clear_metadata = { "name" : "Clear",
            "arg_types" : (),
            "marshallers" : () }
    def Clear(self) -> None:
        """Removes all overlays from the collection."""
        return self._intf.invoke(IAgStkGraphicsScreenOverlayCollectionBase._metadata, IAgStkGraphicsScreenOverlayCollectionBase._Clear_metadata, )

    _Add_metadata = { "name" : "Add",
            "arg_types" : (agcom.PVOID,),
            "marshallers" : (agmarshall.AgInterface_in_arg("IAgStkGraphicsScreenOverlay"),) }
    def Add(self, item:"IAgStkGraphicsScreenOverlay") -> None:
        """Adds an overlay to the collection."""
        return self._intf.invoke(IAgStkGraphicsScreenOverlayCollectionBase._metadata, IAgStkGraphicsScreenOverlayCollectionBase._Add_metadata, item)

    __getitem__ = Item



agcls.AgClassCatalog.add_catalog_entry("{49ea6365-0b8d-4fc5-ad52-c1d16ac7568d}", IAgStkGraphicsScreenOverlayCollectionBase)
agcls.AgTypeNameMap["IAgStkGraphicsScreenOverlayCollectionBase"] = IAgStkGraphicsScreenOverlayCollectionBase

class IAgStkGraphicsTexture2DFactory(object):
    """A factory for creating texture 2d objects from various sources."""
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{455fd9a8-e787-4459-a613-e3367dce25b8}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "LoadFromStringUri" : 1,
                             "FromRaster" : 2, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsTexture2DFactory._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsTexture2DFactory from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsTexture2DFactory.__dict__ and type(IAgStkGraphicsTexture2DFactory.__dict__[attrname]) == property:
            return IAgStkGraphicsTexture2DFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsTexture2DFactory.")
    
    _LoadFromStringUri_metadata = { "name" : "LoadFromStringUri",
            "arg_types" : (agcom.BSTR, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.AgInterface_out_arg,) }
    def LoadFromStringUri(self, uri:str) -> "IAgStkGraphicsRendererTexture2D":
        """Creates a new texture from a Uri, which can be a file, HTTP, HTTPS, or FTP source. See raster for a list of supported raster formats."""
        return self._intf.invoke(IAgStkGraphicsTexture2DFactory._metadata, IAgStkGraphicsTexture2DFactory._LoadFromStringUri_metadata, uri, out_arg())

    _FromRaster_metadata = { "name" : "FromRaster",
            "arg_types" : (agcom.PVOID, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_in_arg("IAgStkGraphicsRaster"), agmarshall.AgInterface_out_arg,) }
    def FromRaster(self, raster:"IAgStkGraphicsRaster") -> "IAgStkGraphicsRendererTexture2D":
        """Creates a new texture from a raster."""
        return self._intf.invoke(IAgStkGraphicsTexture2DFactory._metadata, IAgStkGraphicsTexture2DFactory._FromRaster_metadata, raster, out_arg())


agcls.AgClassCatalog.add_catalog_entry("{455fd9a8-e787-4459-a613-e3367dce25b8}", IAgStkGraphicsTexture2DFactory)
agcls.AgTypeNameMap["IAgStkGraphicsTexture2DFactory"] = IAgStkGraphicsTexture2DFactory

class IAgStkGraphicsVisualEffects(object):
    """Controls various post processing effects that can be applied to the scene."""
    _num_methods = 6
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{a1b830ed-9742-4903-9773-1edbc40f0deb}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_LensFlareEnabled" : 1,
                             "set_LensFlareEnabled" : 2,
                             "get_VignetteEnabled" : 3,
                             "set_VignetteEnabled" : 4,
                             "get_VignetteStrength" : 5,
                             "set_VignetteStrength" : 6, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsVisualEffects._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsVisualEffects from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsVisualEffects.__dict__ and type(IAgStkGraphicsVisualEffects.__dict__[attrname]) == property:
            return IAgStkGraphicsVisualEffects.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsVisualEffects.")
    
    _get_LensFlareEnabled_metadata = { "name" : "LensFlareEnabled",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def LensFlareEnabled(self) -> bool:
        """Gets or sets whether or not the lens flare effect is enabled"""
        return self._intf.get_property(IAgStkGraphicsVisualEffects._metadata, IAgStkGraphicsVisualEffects._get_LensFlareEnabled_metadata)

    _set_LensFlareEnabled_metadata = { "name" : "LensFlareEnabled",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @LensFlareEnabled.setter
    def LensFlareEnabled(self, lensFlareEnabled:bool) -> None:
        return self._intf.set_property(IAgStkGraphicsVisualEffects._metadata, IAgStkGraphicsVisualEffects._set_LensFlareEnabled_metadata, lensFlareEnabled)

    _get_VignetteEnabled_metadata = { "name" : "VignetteEnabled",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def VignetteEnabled(self) -> bool:
        """Gets or sets whether or not the vignette effect is enabled. This simulates light being blocked by the lens hood, resulting in a slight darkening at the perimeter of the 3D Window."""
        return self._intf.get_property(IAgStkGraphicsVisualEffects._metadata, IAgStkGraphicsVisualEffects._get_VignetteEnabled_metadata)

    _set_VignetteEnabled_metadata = { "name" : "VignetteEnabled",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @VignetteEnabled.setter
    def VignetteEnabled(self, vignetteEnabled:bool) -> None:
        return self._intf.set_property(IAgStkGraphicsVisualEffects._metadata, IAgStkGraphicsVisualEffects._set_VignetteEnabled_metadata, vignetteEnabled)

    _get_VignetteStrength_metadata = { "name" : "VignetteStrength",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def VignetteStrength(self) -> float:
        """Sets the strength of the vignette effect, values between [0.001 and 5.0], with larger values resulting in more pronounced darkening around the perimeter of the 3D window."""
        return self._intf.get_property(IAgStkGraphicsVisualEffects._metadata, IAgStkGraphicsVisualEffects._get_VignetteStrength_metadata)

    _set_VignetteStrength_metadata = { "name" : "VignetteStrength",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @VignetteStrength.setter
    def VignetteStrength(self, vignetteStrength:float) -> None:
        return self._intf.set_property(IAgStkGraphicsVisualEffects._metadata, IAgStkGraphicsVisualEffects._set_VignetteStrength_metadata, vignetteStrength)


agcls.AgClassCatalog.add_catalog_entry("{a1b830ed-9742-4903-9773-1edbc40f0deb}", IAgStkGraphicsVisualEffects)
agcls.AgTypeNameMap["IAgStkGraphicsVisualEffects"] = IAgStkGraphicsVisualEffects

class IAgStkGraphicsAltitudeDisplayCondition(object):
    """Defines an inclusive altitude interval that determines when an object is rendered based on the camera's altitude relative to a central body."""
    _num_methods = 6
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{a6225aa6-608d-4ad8-b5f6-2afdd29b96f9}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_MinimumAltitude" : 1,
                             "set_MinimumAltitude" : 2,
                             "get_MaximumAltitude" : 3,
                             "set_MaximumAltitude" : 4,
                             "get_CentralBody" : 5,
                             "set_CentralBody" : 6, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsAltitudeDisplayCondition._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsAltitudeDisplayCondition from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsAltitudeDisplayCondition.__dict__ and type(IAgStkGraphicsAltitudeDisplayCondition.__dict__[attrname]) == property:
            return IAgStkGraphicsAltitudeDisplayCondition.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsAltitudeDisplayCondition.")
    
    _get_MinimumAltitude_metadata = { "name" : "MinimumAltitude",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def MinimumAltitude(self) -> float:
        """Gets or sets the minimum altitude of the inclusive altitude interval. Use Double.MinValue to ignore checking the minimum altitude."""
        return self._intf.get_property(IAgStkGraphicsAltitudeDisplayCondition._metadata, IAgStkGraphicsAltitudeDisplayCondition._get_MinimumAltitude_metadata)

    _set_MinimumAltitude_metadata = { "name" : "MinimumAltitude",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @MinimumAltitude.setter
    def MinimumAltitude(self, minimumAltitude:float) -> None:
        return self._intf.set_property(IAgStkGraphicsAltitudeDisplayCondition._metadata, IAgStkGraphicsAltitudeDisplayCondition._set_MinimumAltitude_metadata, minimumAltitude)

    _get_MaximumAltitude_metadata = { "name" : "MaximumAltitude",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def MaximumAltitude(self) -> float:
        """Gets or sets the maximum altitude of the inclusive altitude interval. Use Double.MaxValue to ignore checking the maximum altitude."""
        return self._intf.get_property(IAgStkGraphicsAltitudeDisplayCondition._metadata, IAgStkGraphicsAltitudeDisplayCondition._get_MaximumAltitude_metadata)

    _set_MaximumAltitude_metadata = { "name" : "MaximumAltitude",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @MaximumAltitude.setter
    def MaximumAltitude(self, maximumAltitude:float) -> None:
        return self._intf.set_property(IAgStkGraphicsAltitudeDisplayCondition._metadata, IAgStkGraphicsAltitudeDisplayCondition._set_MaximumAltitude_metadata, maximumAltitude)

    _get_CentralBody_metadata = { "name" : "CentralBody",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def CentralBody(self) -> str:
        """Gets or sets the central body to which the altitude is relative."""
        return self._intf.get_property(IAgStkGraphicsAltitudeDisplayCondition._metadata, IAgStkGraphicsAltitudeDisplayCondition._get_CentralBody_metadata)

    _set_CentralBody_metadata = { "name" : "CentralBody",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @CentralBody.setter
    def CentralBody(self, centralBody:str) -> None:
        return self._intf.set_property(IAgStkGraphicsAltitudeDisplayCondition._metadata, IAgStkGraphicsAltitudeDisplayCondition._set_CentralBody_metadata, centralBody)


agcls.AgClassCatalog.add_catalog_entry("{a6225aa6-608d-4ad8-b5f6-2afdd29b96f9}", IAgStkGraphicsAltitudeDisplayCondition)
agcls.AgTypeNameMap["IAgStkGraphicsAltitudeDisplayCondition"] = IAgStkGraphicsAltitudeDisplayCondition

class IAgStkGraphicsAxesPrimitive(object):
    """Renders an axes in the 3D scene."""
    _num_methods = 22
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{8892fb91-4aa2-4663-9307-68a737163045}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_Lighting" : 1,
                             "set_Lighting" : 2,
                             "get_Label" : 3,
                             "set_Label" : 4,
                             "get_DisplayLabel" : 5,
                             "set_DisplayLabel" : 6,
                             "get_DisplayTrace" : 7,
                             "set_DisplayTrace" : 8,
                             "get_DisplaySweep" : 9,
                             "set_DisplaySweep" : 10,
                             "get_DisplayLines" : 11,
                             "set_DisplayLines" : 12,
                             "get_PersistenceWidth" : 13,
                             "set_PersistenceWidth" : 14,
                             "get_FadePersistence" : 15,
                             "set_FadePersistence" : 16,
                             "get_PersistenceDuration" : 17,
                             "set_PersistenceDuration" : 18,
                             "get_Length" : 19,
                             "set_Length" : 20,
                             "get_Width" : 21,
                             "set_Width" : 22, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsAxesPrimitive._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsAxesPrimitive from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsAxesPrimitive.__dict__ and type(IAgStkGraphicsAxesPrimitive.__dict__[attrname]) == property:
            return IAgStkGraphicsAxesPrimitive.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsAxesPrimitive.")
    
    _get_Lighting_metadata = { "name" : "Lighting",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def Lighting(self) -> bool:
        """Gets or Sets whether the primitive is lit."""
        return self._intf.get_property(IAgStkGraphicsAxesPrimitive._metadata, IAgStkGraphicsAxesPrimitive._get_Lighting_metadata)

    _set_Lighting_metadata = { "name" : "Lighting",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @Lighting.setter
    def Lighting(self, lighting:bool) -> None:
        return self._intf.set_property(IAgStkGraphicsAxesPrimitive._metadata, IAgStkGraphicsAxesPrimitive._set_Lighting_metadata, lighting)

    _get_Label_metadata = { "name" : "Label",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def Label(self) -> str:
        """Gets or Sets the axes label."""
        return self._intf.get_property(IAgStkGraphicsAxesPrimitive._metadata, IAgStkGraphicsAxesPrimitive._get_Label_metadata)

    _set_Label_metadata = { "name" : "Label",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @Label.setter
    def Label(self, label:str) -> None:
        return self._intf.set_property(IAgStkGraphicsAxesPrimitive._metadata, IAgStkGraphicsAxesPrimitive._set_Label_metadata, label)

    _get_DisplayLabel_metadata = { "name" : "DisplayLabel",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def DisplayLabel(self) -> bool:
        """Gets or Sets whether the axes' label is displayed."""
        return self._intf.get_property(IAgStkGraphicsAxesPrimitive._metadata, IAgStkGraphicsAxesPrimitive._get_DisplayLabel_metadata)

    _set_DisplayLabel_metadata = { "name" : "DisplayLabel",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @DisplayLabel.setter
    def DisplayLabel(self, displayLabel:bool) -> None:
        return self._intf.set_property(IAgStkGraphicsAxesPrimitive._metadata, IAgStkGraphicsAxesPrimitive._set_DisplayLabel_metadata, displayLabel)

    _get_DisplayTrace_metadata = { "name" : "DisplayTrace",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def DisplayTrace(self) -> bool:
        """Gets or Sets whether the persistence trace (points) is displayed."""
        return self._intf.get_property(IAgStkGraphicsAxesPrimitive._metadata, IAgStkGraphicsAxesPrimitive._get_DisplayTrace_metadata)

    _set_DisplayTrace_metadata = { "name" : "DisplayTrace",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @DisplayTrace.setter
    def DisplayTrace(self, displayTrace:bool) -> None:
        return self._intf.set_property(IAgStkGraphicsAxesPrimitive._metadata, IAgStkGraphicsAxesPrimitive._set_DisplayTrace_metadata, displayTrace)

    _get_DisplaySweep_metadata = { "name" : "DisplaySweep",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def DisplaySweep(self) -> bool:
        """Gets or Sets whether the persistence sweep (triangles) is displayed."""
        return self._intf.get_property(IAgStkGraphicsAxesPrimitive._metadata, IAgStkGraphicsAxesPrimitive._get_DisplaySweep_metadata)

    _set_DisplaySweep_metadata = { "name" : "DisplaySweep",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @DisplaySweep.setter
    def DisplaySweep(self, displaySweep:bool) -> None:
        return self._intf.set_property(IAgStkGraphicsAxesPrimitive._metadata, IAgStkGraphicsAxesPrimitive._set_DisplaySweep_metadata, displaySweep)

    _get_DisplayLines_metadata = { "name" : "DisplayLines",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def DisplayLines(self) -> bool:
        """Gets or Sets whether persistence lines are displayed."""
        return self._intf.get_property(IAgStkGraphicsAxesPrimitive._metadata, IAgStkGraphicsAxesPrimitive._get_DisplayLines_metadata)

    _set_DisplayLines_metadata = { "name" : "DisplayLines",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @DisplayLines.setter
    def DisplayLines(self, displayLines:bool) -> None:
        return self._intf.set_property(IAgStkGraphicsAxesPrimitive._metadata, IAgStkGraphicsAxesPrimitive._set_DisplayLines_metadata, displayLines)

    _get_PersistenceWidth_metadata = { "name" : "PersistenceWidth",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def PersistenceWidth(self) -> float:
        """Gets or Sets persistence point/line width."""
        return self._intf.get_property(IAgStkGraphicsAxesPrimitive._metadata, IAgStkGraphicsAxesPrimitive._get_PersistenceWidth_metadata)

    _set_PersistenceWidth_metadata = { "name" : "PersistenceWidth",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @PersistenceWidth.setter
    def PersistenceWidth(self, persistenceWidth:float) -> None:
        return self._intf.set_property(IAgStkGraphicsAxesPrimitive._metadata, IAgStkGraphicsAxesPrimitive._set_PersistenceWidth_metadata, persistenceWidth)

    _get_FadePersistence_metadata = { "name" : "FadePersistence",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def FadePersistence(self) -> bool:
        """Gets or Sets whether the persistence path should fade over time."""
        return self._intf.get_property(IAgStkGraphicsAxesPrimitive._metadata, IAgStkGraphicsAxesPrimitive._get_FadePersistence_metadata)

    _set_FadePersistence_metadata = { "name" : "FadePersistence",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @FadePersistence.setter
    def FadePersistence(self, fadePersistence:bool) -> None:
        return self._intf.set_property(IAgStkGraphicsAxesPrimitive._metadata, IAgStkGraphicsAxesPrimitive._set_FadePersistence_metadata, fadePersistence)

    _get_PersistenceDuration_metadata = { "name" : "PersistenceDuration",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def PersistenceDuration(self) -> float:
        """Gets or Sets the maximum duration of the persistence path."""
        return self._intf.get_property(IAgStkGraphicsAxesPrimitive._metadata, IAgStkGraphicsAxesPrimitive._get_PersistenceDuration_metadata)

    _set_PersistenceDuration_metadata = { "name" : "PersistenceDuration",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @PersistenceDuration.setter
    def PersistenceDuration(self, persistenceDuration:float) -> None:
        return self._intf.set_property(IAgStkGraphicsAxesPrimitive._metadata, IAgStkGraphicsAxesPrimitive._set_PersistenceDuration_metadata, persistenceDuration)

    _get_Length_metadata = { "name" : "Length",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def Length(self) -> float:
        """Gets or Sets the axes' source-to-arrow-tip length."""
        return self._intf.get_property(IAgStkGraphicsAxesPrimitive._metadata, IAgStkGraphicsAxesPrimitive._get_Length_metadata)

    _set_Length_metadata = { "name" : "Length",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @Length.setter
    def Length(self, length:float) -> None:
        return self._intf.set_property(IAgStkGraphicsAxesPrimitive._metadata, IAgStkGraphicsAxesPrimitive._set_Length_metadata, length)

    _get_Width_metadata = { "name" : "Width",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def Width(self) -> float:
        """Gets or Sets the width in pixels. As the camera distances changes from this primitive, the geometry will autoscale to maintain this thickness."""
        return self._intf.get_property(IAgStkGraphicsAxesPrimitive._metadata, IAgStkGraphicsAxesPrimitive._get_Width_metadata)

    _set_Width_metadata = { "name" : "Width",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @Width.setter
    def Width(self, width:float) -> None:
        return self._intf.set_property(IAgStkGraphicsAxesPrimitive._metadata, IAgStkGraphicsAxesPrimitive._set_Width_metadata, width)


agcls.AgClassCatalog.add_catalog_entry("{8892fb91-4aa2-4663-9307-68a737163045}", IAgStkGraphicsAxesPrimitive)
agcls.AgTypeNameMap["IAgStkGraphicsAxesPrimitive"] = IAgStkGraphicsAxesPrimitive

class IAgStkGraphicsCamera(object):
    """Implemented by the scene camera. Contains operations to manipulate the camera position, view direction and orientation in the scene."""
    _num_methods = 50
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{c9a35fc4-8868-4b28-8622-13cfa470c315}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_Position" : 1,
                             "set_Position" : 2,
                             "get_ReferencePoint" : 3,
                             "set_ReferencePoint" : 4,
                             "get_Direction" : 5,
                             "set_Direction" : 6,
                             "get_UpVector" : 7,
                             "set_UpVector" : 8,
                             "get_Distance" : 9,
                             "set_Distance" : 10,
                             "get_Axes" : 11,
                             "set_Axes" : 12,
                             "get_ConstrainedUpAxis" : 13,
                             "set_ConstrainedUpAxis" : 14,
                             "get_AllowRotationOverConstrainedUpAxis" : 15,
                             "set_AllowRotationOverConstrainedUpAxis" : 16,
                             "get_LockViewDirection" : 17,
                             "set_LockViewDirection" : 18,
                             "get_FieldOfView" : 19,
                             "set_FieldOfView" : 20,
                             "get_HorizontalFieldOfView" : 21,
                             "get_VerticalFieldOfView" : 22,
                             "get_NearPlane" : 23,
                             "set_NearPlane" : 24,
                             "get_FarPlane" : 25,
                             "set_FarPlane" : 26,
                             "get_FarNearPlaneRatio" : 27,
                             "set_FarNearPlaneRatio" : 28,
                             "get_DistancePerRadius" : 29,
                             "get_Snapshot" : 30,
                             "get_VideoRecording" : 31,
                             "get_PixelSizePerDistance" : 32,
                             "get_PositionReferenceFrame" : 33,
                             "get_ReferencePointReferenceFrame" : 34,
                             "VisibilityTest" : 35,
                             "CartographicToWindow" : 36,
                             "TryCartographicToWindow" : 37,
                             "WindowToCartographic" : 38,
                             "TryWindowToCartographic" : 39,
                             "ViewCentralBody" : 40,
                             "ViewExtent" : 41,
                             "ViewRectangularExtent" : 42,
                             "ViewWithUpAxis" : 43,
                             "View" : 44,
                             "ViewDirectionWithUpAxis" : 45,
                             "ViewDirection" : 46,
                             "ViewOffsetWithUpAxis" : 47,
                             "ViewOffset" : 48,
                             "ViewOffsetDirectionWithUpAxis" : 49,
                             "ViewOffsetDirection" : 50, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsCamera._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsCamera from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsCamera.__dict__ and type(IAgStkGraphicsCamera.__dict__[attrname]) == property:
            return IAgStkGraphicsCamera.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsCamera.")
    
    _get_Position_metadata = { "name" : "Position",
            "arg_types" : (POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg,) }
    @property
    def Position(self) -> list:
        """Gets or sets the position of the camera. The array contains the components of the position arranged in the order x, y, z."""
        return self._intf.get_property(IAgStkGraphicsCamera._metadata, IAgStkGraphicsCamera._get_Position_metadata)

    _set_Position_metadata = { "name" : "Position",
            "arg_types" : (agcom.LPSAFEARRAY,),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg,) }
    @Position.setter
    def Position(self, position:list) -> None:
        return self._intf.set_property(IAgStkGraphicsCamera._metadata, IAgStkGraphicsCamera._set_Position_metadata, position)

    _get_ReferencePoint_metadata = { "name" : "ReferencePoint",
            "arg_types" : (POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg,) }
    @property
    def ReferencePoint(self) -> list:
        """Gets or sets the reference point of the camera. The array contains the components of the reference point arranged in the order x, y, z."""
        return self._intf.get_property(IAgStkGraphicsCamera._metadata, IAgStkGraphicsCamera._get_ReferencePoint_metadata)

    _set_ReferencePoint_metadata = { "name" : "ReferencePoint",
            "arg_types" : (agcom.LPSAFEARRAY,),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg,) }
    @ReferencePoint.setter
    def ReferencePoint(self, referencePoint:list) -> None:
        return self._intf.set_property(IAgStkGraphicsCamera._metadata, IAgStkGraphicsCamera._set_ReferencePoint_metadata, referencePoint)

    _get_Direction_metadata = { "name" : "Direction",
            "arg_types" : (POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg,) }
    @property
    def Direction(self) -> list:
        """Gets or sets the direction of the camera in axes. The array contains the components of the direction arranged in the order x, y, z."""
        return self._intf.get_property(IAgStkGraphicsCamera._metadata, IAgStkGraphicsCamera._get_Direction_metadata)

    _set_Direction_metadata = { "name" : "Direction",
            "arg_types" : (agcom.LPSAFEARRAY,),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg,) }
    @Direction.setter
    def Direction(self, direction:list) -> None:
        return self._intf.set_property(IAgStkGraphicsCamera._metadata, IAgStkGraphicsCamera._set_Direction_metadata, direction)

    _get_UpVector_metadata = { "name" : "UpVector",
            "arg_types" : (POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg,) }
    @property
    def UpVector(self) -> list:
        """Gets or sets the up direction of the camera in axes. The array contains the components of the direction arranged in the order x, y, z."""
        return self._intf.get_property(IAgStkGraphicsCamera._metadata, IAgStkGraphicsCamera._get_UpVector_metadata)

    _set_UpVector_metadata = { "name" : "UpVector",
            "arg_types" : (agcom.LPSAFEARRAY,),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg,) }
    @UpVector.setter
    def UpVector(self, upVector:list) -> None:
        return self._intf.set_property(IAgStkGraphicsCamera._metadata, IAgStkGraphicsCamera._set_UpVector_metadata, upVector)

    _get_Distance_metadata = { "name" : "Distance",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def Distance(self) -> float:
        """Gets or sets the distance the camera position is from the reference point."""
        return self._intf.get_property(IAgStkGraphicsCamera._metadata, IAgStkGraphicsCamera._get_Distance_metadata)

    _set_Distance_metadata = { "name" : "Distance",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @Distance.setter
    def Distance(self, distance:float) -> None:
        return self._intf.set_property(IAgStkGraphicsCamera._metadata, IAgStkGraphicsCamera._set_Distance_metadata, distance)

    _get_Axes_metadata = { "name" : "Axes",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def Axes(self) -> "IAgCrdnAxes":
        """Gets or sets camera's axes of rotation."""
        return self._intf.get_property(IAgStkGraphicsCamera._metadata, IAgStkGraphicsCamera._get_Axes_metadata)

    _set_Axes_metadata = { "name" : "Axes",
            "arg_types" : (agcom.PVOID,),
            "marshallers" : (agmarshall.AgInterface_in_arg("IAgCrdnAxes"),) }
    @Axes.setter
    def Axes(self, axes:"IAgCrdnAxes") -> None:
        return self._intf.set_property(IAgStkGraphicsCamera._metadata, IAgStkGraphicsCamera._set_Axes_metadata, axes)

    _get_ConstrainedUpAxis_metadata = { "name" : "ConstrainedUpAxis",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEStkGraphicsConstrainedUpAxis),) }
    @property
    def ConstrainedUpAxis(self) -> "AgEStkGraphicsConstrainedUpAxis":
        """Gets or sets the axis to constrain the up vector to."""
        return self._intf.get_property(IAgStkGraphicsCamera._metadata, IAgStkGraphicsCamera._get_ConstrainedUpAxis_metadata)

    _set_ConstrainedUpAxis_metadata = { "name" : "ConstrainedUpAxis",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEStkGraphicsConstrainedUpAxis),) }
    @ConstrainedUpAxis.setter
    def ConstrainedUpAxis(self, constrainedUpAxis:"AgEStkGraphicsConstrainedUpAxis") -> None:
        return self._intf.set_property(IAgStkGraphicsCamera._metadata, IAgStkGraphicsCamera._set_ConstrainedUpAxis_metadata, constrainedUpAxis)

    _get_AllowRotationOverConstrainedUpAxis_metadata = { "name" : "AllowRotationOverConstrainedUpAxis",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def AllowRotationOverConstrainedUpAxis(self) -> bool:
        """Gets or sets whether the camera can rotate over the constrained up axis. For example, if true the camera would be able to flip over the North Pole and view the globe upside down."""
        return self._intf.get_property(IAgStkGraphicsCamera._metadata, IAgStkGraphicsCamera._get_AllowRotationOverConstrainedUpAxis_metadata)

    _set_AllowRotationOverConstrainedUpAxis_metadata = { "name" : "AllowRotationOverConstrainedUpAxis",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @AllowRotationOverConstrainedUpAxis.setter
    def AllowRotationOverConstrainedUpAxis(self, allowRotationOverConstrainedUpAxis:bool) -> None:
        return self._intf.set_property(IAgStkGraphicsCamera._metadata, IAgStkGraphicsCamera._set_AllowRotationOverConstrainedUpAxis_metadata, allowRotationOverConstrainedUpAxis)

    _get_LockViewDirection_metadata = { "name" : "LockViewDirection",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def LockViewDirection(self) -> bool:
        """Gets or sets whether the camera's direction is locked."""
        return self._intf.get_property(IAgStkGraphicsCamera._metadata, IAgStkGraphicsCamera._get_LockViewDirection_metadata)

    _set_LockViewDirection_metadata = { "name" : "LockViewDirection",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @LockViewDirection.setter
    def LockViewDirection(self, lockViewDirection:bool) -> None:
        return self._intf.set_property(IAgStkGraphicsCamera._metadata, IAgStkGraphicsCamera._set_LockViewDirection_metadata, lockViewDirection)

    _get_FieldOfView_metadata = { "name" : "FieldOfView",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def FieldOfView(self) -> float:
        """Gets or sets field of view. The field of view is applied to the larger of the window dimensions. For example, if the window width was 640 and the height was 480, the field of view applies to the horizontal..."""
        return self._intf.get_property(IAgStkGraphicsCamera._metadata, IAgStkGraphicsCamera._get_FieldOfView_metadata)

    _set_FieldOfView_metadata = { "name" : "FieldOfView",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @FieldOfView.setter
    def FieldOfView(self, fieldOfView:float) -> None:
        return self._intf.set_property(IAgStkGraphicsCamera._metadata, IAgStkGraphicsCamera._set_FieldOfView_metadata, fieldOfView)

    _get_HorizontalFieldOfView_metadata = { "name" : "HorizontalFieldOfView",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def HorizontalFieldOfView(self) -> float:
        """Gets the horizontal field of view."""
        return self._intf.get_property(IAgStkGraphicsCamera._metadata, IAgStkGraphicsCamera._get_HorizontalFieldOfView_metadata)

    _get_VerticalFieldOfView_metadata = { "name" : "VerticalFieldOfView",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def VerticalFieldOfView(self) -> float:
        """Gets the vertical field of view."""
        return self._intf.get_property(IAgStkGraphicsCamera._metadata, IAgStkGraphicsCamera._get_VerticalFieldOfView_metadata)

    _get_NearPlane_metadata = { "name" : "NearPlane",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def NearPlane(self) -> float:
        """Gets or sets the distance from the camera to the near plane."""
        return self._intf.get_property(IAgStkGraphicsCamera._metadata, IAgStkGraphicsCamera._get_NearPlane_metadata)

    _set_NearPlane_metadata = { "name" : "NearPlane",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @NearPlane.setter
    def NearPlane(self, nearPlane:float) -> None:
        return self._intf.set_property(IAgStkGraphicsCamera._metadata, IAgStkGraphicsCamera._set_NearPlane_metadata, nearPlane)

    _get_FarPlane_metadata = { "name" : "FarPlane",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def FarPlane(self) -> float:
        """Gets or sets the distance from the camera to the far plane."""
        return self._intf.get_property(IAgStkGraphicsCamera._metadata, IAgStkGraphicsCamera._get_FarPlane_metadata)

    _set_FarPlane_metadata = { "name" : "FarPlane",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @FarPlane.setter
    def FarPlane(self, farPlane:float) -> None:
        return self._intf.set_property(IAgStkGraphicsCamera._metadata, IAgStkGraphicsCamera._set_FarPlane_metadata, farPlane)

    _get_FarNearPlaneRatio_metadata = { "name" : "FarNearPlaneRatio",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def FarNearPlaneRatio(self) -> float:
        """Gets or sets the value that is used to compute subdivisions of the viewing frustum. A large value will be faster but lose z-value precision. A small value will have better precision but perform slower..."""
        return self._intf.get_property(IAgStkGraphicsCamera._metadata, IAgStkGraphicsCamera._get_FarNearPlaneRatio_metadata)

    _set_FarNearPlaneRatio_metadata = { "name" : "FarNearPlaneRatio",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @FarNearPlaneRatio.setter
    def FarNearPlaneRatio(self, farNearPlaneRatio:float) -> None:
        return self._intf.set_property(IAgStkGraphicsCamera._metadata, IAgStkGraphicsCamera._set_FarNearPlaneRatio_metadata, farNearPlaneRatio)

    _get_DistancePerRadius_metadata = { "name" : "DistancePerRadius",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def DistancePerRadius(self) -> float:
        """Returns the distance that the Camera's Position should be from the ReferencePoint in order to ensure that a sphere with a 1 meter radius centered at the ReferencePoint fits entirely in the view frustum."""
        return self._intf.get_property(IAgStkGraphicsCamera._metadata, IAgStkGraphicsCamera._get_DistancePerRadius_metadata)

    _get_Snapshot_metadata = { "name" : "Snapshot",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def Snapshot(self) -> "IAgStkGraphicsCameraSnapshot":
        """Gets the camera snapshot settings."""
        return self._intf.get_property(IAgStkGraphicsCamera._metadata, IAgStkGraphicsCamera._get_Snapshot_metadata)

    _get_VideoRecording_metadata = { "name" : "VideoRecording",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def VideoRecording(self) -> "IAgStkGraphicsCameraVideoRecording":
        """Gets the camera video recorder."""
        return self._intf.get_property(IAgStkGraphicsCamera._metadata, IAgStkGraphicsCamera._get_VideoRecording_metadata)

    _get_PixelSizePerDistance_metadata = { "name" : "PixelSizePerDistance",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def PixelSizePerDistance(self) -> float:
        """Gets the approximate number of meters covered by a pixel that is 1 meter away from the camera. This is commonly multiplied by the distance from the camera to an object to compute the approximate number of meters covered by a pixel of the object."""
        return self._intf.get_property(IAgStkGraphicsCamera._metadata, IAgStkGraphicsCamera._get_PixelSizePerDistance_metadata)

    _get_PositionReferenceFrame_metadata = { "name" : "PositionReferenceFrame",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def PositionReferenceFrame(self) -> "IAgCrdnSystem":
        """Gets the reference frame that the position is returned in. This reference frame is composed of the camera's from point and the axes."""
        return self._intf.get_property(IAgStkGraphicsCamera._metadata, IAgStkGraphicsCamera._get_PositionReferenceFrame_metadata)

    _get_ReferencePointReferenceFrame_metadata = { "name" : "ReferencePointReferenceFrame",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def ReferencePointReferenceFrame(self) -> "IAgCrdnSystem":
        """Gets the reference frame that the reference point is returned in. This reference frame is composed of the camera's to point and the axes."""
        return self._intf.get_property(IAgStkGraphicsCamera._metadata, IAgStkGraphicsCamera._get_ReferencePointReferenceFrame_metadata)

    _VisibilityTest_metadata = { "name" : "VisibilityTest",
            "arg_types" : (agcom.PVOID, agcom.PVOID, POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgInterface_in_arg("IAgCrdnSystem"), agmarshall.AgInterface_in_arg("IAgStkGraphicsBoundingSphere"), agmarshall.AgEnum_arg(AgEStkGraphicsVisibility),) }
    def VisibilityTest(self, referenceFrame:"IAgCrdnSystem", sphere:"IAgStkGraphicsBoundingSphere") -> "AgEStkGraphicsVisibility":
        """Gets the visibility of a sphere against the view frustum and any occluding central bodies."""
        return self._intf.invoke(IAgStkGraphicsCamera._metadata, IAgStkGraphicsCamera._VisibilityTest_metadata, referenceFrame, sphere, out_arg())

    _CartographicToWindow_metadata = { "name" : "CartographicToWindow",
            "arg_types" : (agcom.BSTR, POINTER(agcom.LPSAFEARRAY), POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.LPSAFEARRAY_arg, agmarshall.LPSAFEARRAY_arg,) }
    def CartographicToWindow(self, centralBody:str, position:list) -> list:
        """Converts a cartographic position to a pixel coordinate relative to the globe control. This method can throw an exception. Returns an array containing the pixel coordinate (in the order x, y) of the cartographic position relative to the globe control..."""
        return self._intf.invoke(IAgStkGraphicsCamera._metadata, IAgStkGraphicsCamera._CartographicToWindow_metadata, centralBody, position, out_arg())

    _TryCartographicToWindow_metadata = { "name" : "TryCartographicToWindow",
            "arg_types" : (agcom.BSTR, POINTER(agcom.LPSAFEARRAY), POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.LPSAFEARRAY_arg, agmarshall.LPSAFEARRAY_arg,) }
    def TryCartographicToWindow(self, centralBody:str, position:list) -> list:
        """Converts a cartographic position to a pixel coordinate relative to the globe control. This method does not throw an exception."""
        return self._intf.invoke(IAgStkGraphicsCamera._metadata, IAgStkGraphicsCamera._TryCartographicToWindow_metadata, centralBody, position, out_arg())

    _WindowToCartographic_metadata = { "name" : "WindowToCartographic",
            "arg_types" : (agcom.BSTR, POINTER(agcom.LPSAFEARRAY), POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.LPSAFEARRAY_arg, agmarshall.LPSAFEARRAY_arg,) }
    def WindowToCartographic(self, centralBody:str, position:list) -> list:
        """Converts a pixel coordinate relative to the globe control to a cartographic position. For speed, terrain is not considered; if the pixel coordinate does not intersect the ellipsoid, an exception is thrown. Returns the cartographic position..."""
        return self._intf.invoke(IAgStkGraphicsCamera._metadata, IAgStkGraphicsCamera._WindowToCartographic_metadata, centralBody, position, out_arg())

    _TryWindowToCartographic_metadata = { "name" : "TryWindowToCartographic",
            "arg_types" : (agcom.BSTR, POINTER(agcom.LPSAFEARRAY), POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.LPSAFEARRAY_arg, agmarshall.LPSAFEARRAY_arg,) }
    def TryWindowToCartographic(self, centralBody:str, position:list) -> list:
        """Converts a pixel coordinate relative to the globe control to a cartographic position. For speed, terrain is not considered. This method does not throw an exception."""
        return self._intf.invoke(IAgStkGraphicsCamera._metadata, IAgStkGraphicsCamera._TryWindowToCartographic_metadata, centralBody, position, out_arg())

    _ViewCentralBody_metadata = { "name" : "ViewCentralBody",
            "arg_types" : (agcom.BSTR, agcom.PVOID,),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.AgInterface_in_arg("IAgCrdnAxes"),) }
    def ViewCentralBody(self, centralBody:str, axes:"IAgCrdnAxes") -> None:
        """Zoom to a central body and use the specified axes for rotation. The reference point is set to the center of the central body and the camera's position is set so the entire central body is visible."""
        return self._intf.invoke(IAgStkGraphicsCamera._metadata, IAgStkGraphicsCamera._ViewCentralBody_metadata, centralBody, axes)

    _ViewExtent_metadata = { "name" : "ViewExtent",
            "arg_types" : (agcom.BSTR, POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.LPSAFEARRAY_arg,) }
    def ViewExtent(self, centralBody:str, extent:list) -> None:
        """Zooms to a cartographic extent on the centralBody. The camera will be looking straight down at the extent, with the up vector pointing toward local north. The axes is set to an east-north-up axes at the center of extent."""
        return self._intf.invoke(IAgStkGraphicsCamera._metadata, IAgStkGraphicsCamera._ViewExtent_metadata, centralBody, extent)

    _ViewRectangularExtent_metadata = { "name" : "ViewRectangularExtent",
            "arg_types" : (agcom.BSTR, agcom.DOUBLE, agcom.DOUBLE, agcom.DOUBLE, agcom.DOUBLE,),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg,) }
    def ViewRectangularExtent(self, centralBody:str, west:float, south:float, east:float, north:float) -> None:
        """Zooms to a rectangular extent composed of west, south, east, north on the centralBody. The camera will be looking straight down at the extent, with the up vector pointing toward local north..."""
        return self._intf.invoke(IAgStkGraphicsCamera._metadata, IAgStkGraphicsCamera._ViewRectangularExtent_metadata, centralBody, west, south, east, north)

    _ViewWithUpAxis_metadata = { "name" : "ViewWithUpAxis",
            "arg_types" : (agcom.PVOID, agcom.PVOID, agcom.PVOID, POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.AgInterface_in_arg("IAgCrdnAxes"), agmarshall.AgInterface_in_arg("IAgCrdnPoint"), agmarshall.AgInterface_in_arg("IAgCrdnPoint"), agmarshall.LPSAFEARRAY_arg,) }
    def ViewWithUpAxis(self, axes:"IAgCrdnAxes", cameraPosition:"IAgCrdnPoint", referencePoint:"IAgCrdnPoint", upAxis:list) -> None:
        """Views from a point to a point. Sets the camera's position and the reference point the camera is looking at."""
        return self._intf.invoke(IAgStkGraphicsCamera._metadata, IAgStkGraphicsCamera._ViewWithUpAxis_metadata, axes, cameraPosition, referencePoint, upAxis)

    _View_metadata = { "name" : "View",
            "arg_types" : (agcom.PVOID, agcom.PVOID, agcom.PVOID,),
            "marshallers" : (agmarshall.AgInterface_in_arg("IAgCrdnAxes"), agmarshall.AgInterface_in_arg("IAgCrdnPoint"), agmarshall.AgInterface_in_arg("IAgCrdnPoint"),) }
    def View(self, axes:"IAgCrdnAxes", cameraPosition:"IAgCrdnPoint", referencePoint:"IAgCrdnPoint") -> None:
        """Views from a point to a point. Sets the camera's position and the reference point the camera is looking at."""
        return self._intf.invoke(IAgStkGraphicsCamera._metadata, IAgStkGraphicsCamera._View_metadata, axes, cameraPosition, referencePoint)

    _ViewDirectionWithUpAxis_metadata = { "name" : "ViewDirectionWithUpAxis",
            "arg_types" : (agcom.PVOID, agcom.PVOID, agcom.PVOID, POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.AgInterface_in_arg("IAgCrdnAxes"), agmarshall.AgInterface_in_arg("IAgCrdnPoint"), agmarshall.AgInterface_in_arg("IAgCrdnVector"), agmarshall.LPSAFEARRAY_arg,) }
    def ViewDirectionWithUpAxis(self, axes:"IAgCrdnAxes", cameraPosition:"IAgCrdnPoint", direction:"IAgCrdnVector", upAxis:list) -> None:
        """Views from a point to a direction. Sets the camera's position and the direction vector indicating where the camera is looking."""
        return self._intf.invoke(IAgStkGraphicsCamera._metadata, IAgStkGraphicsCamera._ViewDirectionWithUpAxis_metadata, axes, cameraPosition, direction, upAxis)

    _ViewDirection_metadata = { "name" : "ViewDirection",
            "arg_types" : (agcom.PVOID, agcom.PVOID, agcom.PVOID,),
            "marshallers" : (agmarshall.AgInterface_in_arg("IAgCrdnAxes"), agmarshall.AgInterface_in_arg("IAgCrdnPoint"), agmarshall.AgInterface_in_arg("IAgCrdnVector"),) }
    def ViewDirection(self, axes:"IAgCrdnAxes", cameraPosition:"IAgCrdnPoint", direction:"IAgCrdnVector") -> None:
        """Views from a point to a direction. Sets the camera's position and the direction vector indicating where the camera is looking."""
        return self._intf.invoke(IAgStkGraphicsCamera._metadata, IAgStkGraphicsCamera._ViewDirection_metadata, axes, cameraPosition, direction)

    _ViewOffsetWithUpAxis_metadata = { "name" : "ViewOffsetWithUpAxis",
            "arg_types" : (agcom.PVOID, agcom.PVOID, POINTER(agcom.LPSAFEARRAY), POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.AgInterface_in_arg("IAgCrdnAxes"), agmarshall.AgInterface_in_arg("IAgCrdnPoint"), agmarshall.LPSAFEARRAY_arg, agmarshall.LPSAFEARRAY_arg,) }
    def ViewOffsetWithUpAxis(self, axes:"IAgCrdnAxes", referencePoint:"IAgCrdnPoint", offset:list, upAxis:list) -> None:
        """Sets the camera's reference point - the point the camera is looking at. The camera's position is the reference point translated by the offset."""
        return self._intf.invoke(IAgStkGraphicsCamera._metadata, IAgStkGraphicsCamera._ViewOffsetWithUpAxis_metadata, axes, referencePoint, offset, upAxis)

    _ViewOffset_metadata = { "name" : "ViewOffset",
            "arg_types" : (agcom.PVOID, agcom.PVOID, POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.AgInterface_in_arg("IAgCrdnAxes"), agmarshall.AgInterface_in_arg("IAgCrdnPoint"), agmarshall.LPSAFEARRAY_arg,) }
    def ViewOffset(self, axes:"IAgCrdnAxes", referencePoint:"IAgCrdnPoint", offset:list) -> None:
        """Sets the camera's reference point - the point the camera is looking at. The camera's position is the reference point translated by the offset."""
        return self._intf.invoke(IAgStkGraphicsCamera._metadata, IAgStkGraphicsCamera._ViewOffset_metadata, axes, referencePoint, offset)

    _ViewOffsetDirectionWithUpAxis_metadata = { "name" : "ViewOffsetDirectionWithUpAxis",
            "arg_types" : (agcom.PVOID, agcom.PVOID, agcom.PVOID, POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.AgInterface_in_arg("IAgCrdnAxes"), agmarshall.AgInterface_in_arg("IAgCrdnPoint"), agmarshall.AgInterface_in_arg("IAgCrdnVector"), agmarshall.LPSAFEARRAY_arg,) }
    def ViewOffsetDirectionWithUpAxis(self, axes:"IAgCrdnAxes", referencePoint:"IAgCrdnPoint", direction:"IAgCrdnVector", upAxis:list) -> None:
        """Sets the camera's reference point - the point the camera is looking at. The camera's position is the reference point translated by the direction vector."""
        return self._intf.invoke(IAgStkGraphicsCamera._metadata, IAgStkGraphicsCamera._ViewOffsetDirectionWithUpAxis_metadata, axes, referencePoint, direction, upAxis)

    _ViewOffsetDirection_metadata = { "name" : "ViewOffsetDirection",
            "arg_types" : (agcom.PVOID, agcom.PVOID, agcom.PVOID,),
            "marshallers" : (agmarshall.AgInterface_in_arg("IAgCrdnAxes"), agmarshall.AgInterface_in_arg("IAgCrdnPoint"), agmarshall.AgInterface_in_arg("IAgCrdnVector"),) }
    def ViewOffsetDirection(self, axes:"IAgCrdnAxes", referencePoint:"IAgCrdnPoint", direction:"IAgCrdnVector") -> None:
        """Sets the camera's reference point - the point the camera is looking at. The camera's position is the reference point translated by the direction vector."""
        return self._intf.invoke(IAgStkGraphicsCamera._metadata, IAgStkGraphicsCamera._ViewOffsetDirection_metadata, axes, referencePoint, direction)


agcls.AgClassCatalog.add_catalog_entry("{c9a35fc4-8868-4b28-8622-13cfa470c315}", IAgStkGraphicsCamera)
agcls.AgTypeNameMap["IAgStkGraphicsCamera"] = IAgStkGraphicsCamera

class IAgStkGraphicsCentralBodyGraphics(object):
    """The graphical properties associated with a particular central body. Changing the central body graphics will affect how the associated central body is rendered in a scene. For instance, to show or hide the central body, use the show property..."""
    _num_methods = 23
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{27f5d32b-5adf-4fc7-a8b8-83ada5ebc0ca}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_Color" : 1,
                             "set_Color" : 2,
                             "get_SpecularColor" : 3,
                             "set_SpecularColor" : 4,
                             "get_Shininess" : 5,
                             "set_Shininess" : 6,
                             "get_ShowImagery" : 7,
                             "set_ShowImagery" : 8,
                             "get_Show" : 9,
                             "set_Show" : 10,
                             "get_ShowLabel" : 11,
                             "set_ShowLabel" : 12,
                             "get_AltitudeOffset" : 13,
                             "set_AltitudeOffset" : 14,
                             "get_BaseOverlay" : 15,
                             "set_BaseOverlay" : 16,
                             "get_NightOverlay" : 17,
                             "set_NightOverlay" : 18,
                             "get_SpecularOverlay" : 19,
                             "set_SpecularOverlay" : 20,
                             "get_Terrain" : 21,
                             "get_Imagery" : 22,
                             "get_Kml" : 23, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsCentralBodyGraphics._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsCentralBodyGraphics from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsCentralBodyGraphics.__dict__ and type(IAgStkGraphicsCentralBodyGraphics.__dict__[attrname]) == property:
            return IAgStkGraphicsCentralBodyGraphics.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsCentralBodyGraphics.")
    
    _get_Color_metadata = { "name" : "Color",
            "arg_types" : (POINTER(agcom.OLE_COLOR),),
            "marshallers" : (agmarshall.OLE_COLOR_arg,) }
    @property
    def Color(self) -> agcolor.Color:
        """Gets or sets the color of the central body in the scene."""
        return self._intf.get_property(IAgStkGraphicsCentralBodyGraphics._metadata, IAgStkGraphicsCentralBodyGraphics._get_Color_metadata)

    _set_Color_metadata = { "name" : "Color",
            "arg_types" : (agcom.OLE_COLOR,),
            "marshallers" : (agmarshall.OLE_COLOR_arg,) }
    @Color.setter
    def Color(self, color:agcolor.Color) -> None:
        return self._intf.set_property(IAgStkGraphicsCentralBodyGraphics._metadata, IAgStkGraphicsCentralBodyGraphics._set_Color_metadata, color)

    _get_SpecularColor_metadata = { "name" : "SpecularColor",
            "arg_types" : (POINTER(agcom.OLE_COLOR),),
            "marshallers" : (agmarshall.OLE_COLOR_arg,) }
    @property
    def SpecularColor(self) -> agcolor.Color:
        """Gets or sets the specular color of the central body in the scene. The specular color is associated with the specular overlay."""
        return self._intf.get_property(IAgStkGraphicsCentralBodyGraphics._metadata, IAgStkGraphicsCentralBodyGraphics._get_SpecularColor_metadata)

    _set_SpecularColor_metadata = { "name" : "SpecularColor",
            "arg_types" : (agcom.OLE_COLOR,),
            "marshallers" : (agmarshall.OLE_COLOR_arg,) }
    @SpecularColor.setter
    def SpecularColor(self, specularColor:agcolor.Color) -> None:
        return self._intf.set_property(IAgStkGraphicsCentralBodyGraphics._metadata, IAgStkGraphicsCentralBodyGraphics._set_SpecularColor_metadata, specularColor)

    _get_Shininess_metadata = { "name" : "Shininess",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def Shininess(self) -> float:
        """Gets or sets the shininess of the central body in the scene. The shininess affects the size and brightness of specular reflection associated with the specular overlay."""
        return self._intf.get_property(IAgStkGraphicsCentralBodyGraphics._metadata, IAgStkGraphicsCentralBodyGraphics._get_Shininess_metadata)

    _set_Shininess_metadata = { "name" : "Shininess",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @Shininess.setter
    def Shininess(self, shininess:float) -> None:
        return self._intf.set_property(IAgStkGraphicsCentralBodyGraphics._metadata, IAgStkGraphicsCentralBodyGraphics._set_Shininess_metadata, shininess)

    _get_ShowImagery_metadata = { "name" : "ShowImagery",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def ShowImagery(self) -> bool:
        """Gets or sets whether the imagery for central body in the scene is shown or hidden."""
        return self._intf.get_property(IAgStkGraphicsCentralBodyGraphics._metadata, IAgStkGraphicsCentralBodyGraphics._get_ShowImagery_metadata)

    _set_ShowImagery_metadata = { "name" : "ShowImagery",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @ShowImagery.setter
    def ShowImagery(self, showImagery:bool) -> None:
        return self._intf.set_property(IAgStkGraphicsCentralBodyGraphics._metadata, IAgStkGraphicsCentralBodyGraphics._set_ShowImagery_metadata, showImagery)

    _get_Show_metadata = { "name" : "Show",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def Show(self) -> bool:
        """Gets or sets whether the central body is shown or hidden in the scene. This only affects the central body itself, not the primitives that are associated with it."""
        return self._intf.get_property(IAgStkGraphicsCentralBodyGraphics._metadata, IAgStkGraphicsCentralBodyGraphics._get_Show_metadata)

    _set_Show_metadata = { "name" : "Show",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @Show.setter
    def Show(self, show:bool) -> None:
        return self._intf.set_property(IAgStkGraphicsCentralBodyGraphics._metadata, IAgStkGraphicsCentralBodyGraphics._set_Show_metadata, show)

    _get_ShowLabel_metadata = { "name" : "ShowLabel",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def ShowLabel(self) -> bool:
        """Gets or sets whether a label with the name of the central body should be rendered in the scene when the camera is at certain distance away from the central body."""
        return self._intf.get_property(IAgStkGraphicsCentralBodyGraphics._metadata, IAgStkGraphicsCentralBodyGraphics._get_ShowLabel_metadata)

    _set_ShowLabel_metadata = { "name" : "ShowLabel",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @ShowLabel.setter
    def ShowLabel(self, showLabel:bool) -> None:
        return self._intf.set_property(IAgStkGraphicsCentralBodyGraphics._metadata, IAgStkGraphicsCentralBodyGraphics._set_ShowLabel_metadata, showLabel)

    _get_AltitudeOffset_metadata = { "name" : "AltitudeOffset",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def AltitudeOffset(self) -> float:
        """Gets or sets the altitude that all terrain and imagery will be offset from the surface of the central body in the scene."""
        return self._intf.get_property(IAgStkGraphicsCentralBodyGraphics._metadata, IAgStkGraphicsCentralBodyGraphics._get_AltitudeOffset_metadata)

    _set_AltitudeOffset_metadata = { "name" : "AltitudeOffset",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @AltitudeOffset.setter
    def AltitudeOffset(self, altitudeOffset:float) -> None:
        return self._intf.set_property(IAgStkGraphicsCentralBodyGraphics._metadata, IAgStkGraphicsCentralBodyGraphics._set_AltitudeOffset_metadata, altitudeOffset)

    _get_BaseOverlay_metadata = { "name" : "BaseOverlay",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def BaseOverlay(self) -> "IAgStkGraphicsGlobeImageOverlay":
        """Gets or sets the base globe image overlay associated with the central body in the scene. The base overlay is always rendered before any other imagery..."""
        return self._intf.get_property(IAgStkGraphicsCentralBodyGraphics._metadata, IAgStkGraphicsCentralBodyGraphics._get_BaseOverlay_metadata)

    _set_BaseOverlay_metadata = { "name" : "BaseOverlay",
            "arg_types" : (agcom.PVOID,),
            "marshallers" : (agmarshall.AgInterface_in_arg("IAgStkGraphicsGlobeImageOverlay"),) }
    @BaseOverlay.setter
    def BaseOverlay(self, baseOverlay:"IAgStkGraphicsGlobeImageOverlay") -> None:
        return self._intf.set_property(IAgStkGraphicsCentralBodyGraphics._metadata, IAgStkGraphicsCentralBodyGraphics._set_BaseOverlay_metadata, baseOverlay)

    _get_NightOverlay_metadata = { "name" : "NightOverlay",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def NightOverlay(self) -> "IAgStkGraphicsGlobeImageOverlay":
        """Gets or sets the night globe image overlay associated with the central body in the scene. The night overlay is displayed only on parts of the central body that are not in sun light..."""
        return self._intf.get_property(IAgStkGraphicsCentralBodyGraphics._metadata, IAgStkGraphicsCentralBodyGraphics._get_NightOverlay_metadata)

    _set_NightOverlay_metadata = { "name" : "NightOverlay",
            "arg_types" : (agcom.PVOID,),
            "marshallers" : (agmarshall.AgInterface_in_arg("IAgStkGraphicsGlobeImageOverlay"),) }
    @NightOverlay.setter
    def NightOverlay(self, nightOverlay:"IAgStkGraphicsGlobeImageOverlay") -> None:
        return self._intf.set_property(IAgStkGraphicsCentralBodyGraphics._metadata, IAgStkGraphicsCentralBodyGraphics._set_NightOverlay_metadata, nightOverlay)

    _get_SpecularOverlay_metadata = { "name" : "SpecularOverlay",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def SpecularOverlay(self) -> "IAgStkGraphicsGlobeImageOverlay":
        """Gets or sets the specular globe image overlay associated with the central body in the scene. The specular overlay is displayed only in the specular highlight of the central body."""
        return self._intf.get_property(IAgStkGraphicsCentralBodyGraphics._metadata, IAgStkGraphicsCentralBodyGraphics._get_SpecularOverlay_metadata)

    _set_SpecularOverlay_metadata = { "name" : "SpecularOverlay",
            "arg_types" : (agcom.PVOID,),
            "marshallers" : (agmarshall.AgInterface_in_arg("IAgStkGraphicsGlobeImageOverlay"),) }
    @SpecularOverlay.setter
    def SpecularOverlay(self, specularOverlay:"IAgStkGraphicsGlobeImageOverlay") -> None:
        return self._intf.set_property(IAgStkGraphicsCentralBodyGraphics._metadata, IAgStkGraphicsCentralBodyGraphics._set_SpecularOverlay_metadata, specularOverlay)

    _get_Terrain_metadata = { "name" : "Terrain",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def Terrain(self) -> "IAgStkGraphicsTerrainCollection":
        """Gets the collection of terrain overlay associated with the central body in the scene."""
        return self._intf.get_property(IAgStkGraphicsCentralBodyGraphics._metadata, IAgStkGraphicsCentralBodyGraphics._get_Terrain_metadata)

    _get_Imagery_metadata = { "name" : "Imagery",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def Imagery(self) -> "IAgStkGraphicsImageCollection":
        """Gets the collection of imagery associated with the central body in the scene."""
        return self._intf.get_property(IAgStkGraphicsCentralBodyGraphics._metadata, IAgStkGraphicsCentralBodyGraphics._get_Imagery_metadata)

    _get_Kml_metadata = { "name" : "Kml",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def Kml(self) -> "IAgStkGraphicsKmlGraphics":
        """Gets the kml graphics associated with the central body in the scene."""
        return self._intf.get_property(IAgStkGraphicsCentralBodyGraphics._metadata, IAgStkGraphicsCentralBodyGraphics._get_Kml_metadata)


agcls.AgClassCatalog.add_catalog_entry("{27f5d32b-5adf-4fc7-a8b8-83ada5ebc0ca}", IAgStkGraphicsCentralBodyGraphics)
agcls.AgTypeNameMap["IAgStkGraphicsCentralBodyGraphics"] = IAgStkGraphicsCentralBodyGraphics

class IAgStkGraphicsClouds(object):
    """Load, show and hide clouds in the scene."""
    _num_methods = 9
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{0f5265b8-2d96-440a-9b86-522d90bf2bc3}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_Show" : 1,
                             "set_Show" : 2,
                             "get_CloudsUri" : 3,
                             "set_CloudsUri" : 4,
                             "get_Roundness" : 5,
                             "set_Roundness" : 6,
                             "get_Altitude" : 7,
                             "set_Altitude" : 8,
                             "get_IsValid" : 9, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsClouds._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsClouds from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsClouds.__dict__ and type(IAgStkGraphicsClouds.__dict__[attrname]) == property:
            return IAgStkGraphicsClouds.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsClouds.")
    
    _get_Show_metadata = { "name" : "Show",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def Show(self) -> bool:
        """Gets or sets whether clouds are rendered."""
        return self._intf.get_property(IAgStkGraphicsClouds._metadata, IAgStkGraphicsClouds._get_Show_metadata)

    _set_Show_metadata = { "name" : "Show",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @Show.setter
    def Show(self, show:bool) -> None:
        return self._intf.set_property(IAgStkGraphicsClouds._metadata, IAgStkGraphicsClouds._set_Show_metadata, show)

    _get_CloudsUri_metadata = { "name" : "CloudsUri",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def CloudsUri(self) -> str:
        """The URI of the clouds index file. A cloud index file is an ascii file that contains a time-ordered list of images that display over the globe."""
        return self._intf.get_property(IAgStkGraphicsClouds._metadata, IAgStkGraphicsClouds._get_CloudsUri_metadata)

    _set_CloudsUri_metadata = { "name" : "CloudsUri",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @CloudsUri.setter
    def CloudsUri(self, cloudsUri:str) -> None:
        return self._intf.set_property(IAgStkGraphicsClouds._metadata, IAgStkGraphicsClouds._set_CloudsUri_metadata, cloudsUri)

    _get_Roundness_metadata = { "name" : "Roundness",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def Roundness(self) -> float:
        """The roundness of the clouds."""
        return self._intf.get_property(IAgStkGraphicsClouds._metadata, IAgStkGraphicsClouds._get_Roundness_metadata)

    _set_Roundness_metadata = { "name" : "Roundness",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @Roundness.setter
    def Roundness(self, roundness:float) -> None:
        return self._intf.set_property(IAgStkGraphicsClouds._metadata, IAgStkGraphicsClouds._set_Roundness_metadata, roundness)

    _get_Altitude_metadata = { "name" : "Altitude",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def Altitude(self) -> float:
        """The altitude of the clouds."""
        return self._intf.get_property(IAgStkGraphicsClouds._metadata, IAgStkGraphicsClouds._get_Altitude_metadata)

    _set_Altitude_metadata = { "name" : "Altitude",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @Altitude.setter
    def Altitude(self, altitude:float) -> None:
        return self._intf.set_property(IAgStkGraphicsClouds._metadata, IAgStkGraphicsClouds._set_Altitude_metadata, altitude)

    _get_IsValid_metadata = { "name" : "IsValid",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def IsValid(self) -> bool:
        """Returns whether or not the clouds file is valid."""
        return self._intf.get_property(IAgStkGraphicsClouds._metadata, IAgStkGraphicsClouds._get_IsValid_metadata)


agcls.AgClassCatalog.add_catalog_entry("{0f5265b8-2d96-440a-9b86-522d90bf2bc3}", IAgStkGraphicsClouds)
agcls.AgTypeNameMap["IAgStkGraphicsClouds"] = IAgStkGraphicsClouds

class IAgStkGraphicsCompositeDisplayCondition(object):
    """A composite of display conditions combined using a binary logic operation. For example, several time interval display condition objects can be added to a composite..."""
    _num_methods = 18
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{afe0e66f-0fc5-46ad-801f-22670cfe99a9}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_Count" : 1,
                             "get_Capacity" : 2,
                             "get_LogicOperation" : 3,
                             "set_LogicOperation" : 4,
                             "Item" : 5,
                             "get__NewEnum" : 6,
                             "Reserve" : 7,
                             "AddWithNegate" : 8,
                             "Add" : 9,
                             "InsertWithNegate" : 10,
                             "Insert" : 11,
                             "Remove" : 12,
                             "RemoveAt" : 13,
                             "Clear" : 14,
                             "GetNegate" : 15,
                             "SetNegate" : 16,
                             "GetNegateAt" : 17,
                             "SetNegateAt" : 18, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsCompositeDisplayCondition._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsCompositeDisplayCondition from source object.")
        self.__dict__["_enumerator"] = None
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsCompositeDisplayCondition.__dict__ and type(IAgStkGraphicsCompositeDisplayCondition.__dict__[attrname]) == property:
            return IAgStkGraphicsCompositeDisplayCondition.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsCompositeDisplayCondition.")
    def __iter__(self):
        self.__dict__["_enumerator"] = self._NewEnum
        self._enumerator.reset()
        return self
    def __next__(self) -> "IAgStkGraphicsDisplayCondition":
        if self._enumerator is None:
            raise StopIteration
        nextval = self._enumerator.next()
        if nextval is None:
            raise StopIteration
        return nextval
    
    _get_Count_metadata = { "name" : "Count",
            "arg_types" : (POINTER(agcom.INT),),
            "marshallers" : (agmarshall.INT_arg,) }
    @property
    def Count(self) -> int:
        """Gets the number of display conditions in the composite."""
        return self._intf.get_property(IAgStkGraphicsCompositeDisplayCondition._metadata, IAgStkGraphicsCompositeDisplayCondition._get_Count_metadata)

    _get_Capacity_metadata = { "name" : "Capacity",
            "arg_types" : (POINTER(agcom.INT),),
            "marshallers" : (agmarshall.INT_arg,) }
    @property
    def Capacity(self) -> int:
        """Gets the number of display conditions for which memory has been allocated. This will always be greater or equal to count."""
        return self._intf.get_property(IAgStkGraphicsCompositeDisplayCondition._metadata, IAgStkGraphicsCompositeDisplayCondition._get_Capacity_metadata)

    _get_LogicOperation_metadata = { "name" : "LogicOperation",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEStkGraphicsBinaryLogicOperation),) }
    @property
    def LogicOperation(self) -> "AgEStkGraphicsBinaryLogicOperation":
        """Gets or sets the binary logic operation applied to all display conditions in the composite when the composite is evaluated. To combine logical and and or operations in the same expression, create composites containing composites."""
        return self._intf.get_property(IAgStkGraphicsCompositeDisplayCondition._metadata, IAgStkGraphicsCompositeDisplayCondition._get_LogicOperation_metadata)

    _set_LogicOperation_metadata = { "name" : "LogicOperation",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEStkGraphicsBinaryLogicOperation),) }
    @LogicOperation.setter
    def LogicOperation(self, logicOperation:"AgEStkGraphicsBinaryLogicOperation") -> None:
        return self._intf.set_property(IAgStkGraphicsCompositeDisplayCondition._metadata, IAgStkGraphicsCompositeDisplayCondition._set_LogicOperation_metadata, logicOperation)

    _Item_metadata = { "name" : "Item",
            "arg_types" : (agcom.INT, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.INT_arg, agmarshall.AgInterface_out_arg,) }
    def Item(self, index:int) -> "IAgStkGraphicsDisplayCondition":
        """Returns the condition at the given zero-based index."""
        return self._intf.invoke(IAgStkGraphicsCompositeDisplayCondition._metadata, IAgStkGraphicsCompositeDisplayCondition._Item_metadata, index, out_arg())

    _get__NewEnum_metadata = { "name" : "_NewEnum",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.IEnumVARIANT_arg,) }
    @property
    def _NewEnum(self) -> enumerator_proxy:
        """Returns an enumerator that iterates through the collection."""
        return self._intf.get_property(IAgStkGraphicsCompositeDisplayCondition._metadata, IAgStkGraphicsCompositeDisplayCondition._get__NewEnum_metadata)

    _Reserve_metadata = { "name" : "Reserve",
            "arg_types" : (agcom.INT,),
            "marshallers" : (agmarshall.INT_arg,) }
    def Reserve(self, count:int) -> None:
        """Requests enough memory for the composite to contain at least count display conditions. count will not be affected but capacity may be."""
        return self._intf.invoke(IAgStkGraphicsCompositeDisplayCondition._metadata, IAgStkGraphicsCompositeDisplayCondition._Reserve_metadata, count)

    _AddWithNegate_metadata = { "name" : "AddWithNegate",
            "arg_types" : (agcom.PVOID, agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.AgInterface_in_arg("IAgStkGraphicsDisplayCondition"), agmarshall.VARIANT_BOOL_arg,) }
    def AddWithNegate(self, displayCondition:"IAgStkGraphicsDisplayCondition", negate:bool) -> None:
        """Adds a display condition to the end of the composite."""
        return self._intf.invoke(IAgStkGraphicsCompositeDisplayCondition._metadata, IAgStkGraphicsCompositeDisplayCondition._AddWithNegate_metadata, displayCondition, negate)

    _Add_metadata = { "name" : "Add",
            "arg_types" : (agcom.PVOID,),
            "marshallers" : (agmarshall.AgInterface_in_arg("IAgStkGraphicsDisplayCondition"),) }
    def Add(self, displayCondition:"IAgStkGraphicsDisplayCondition") -> None:
        """Adds a display condition to the end of the composite."""
        return self._intf.invoke(IAgStkGraphicsCompositeDisplayCondition._metadata, IAgStkGraphicsCompositeDisplayCondition._Add_metadata, displayCondition)

    _InsertWithNegate_metadata = { "name" : "InsertWithNegate",
            "arg_types" : (agcom.INT, agcom.PVOID, agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.INT_arg, agmarshall.AgInterface_in_arg("IAgStkGraphicsDisplayCondition"), agmarshall.VARIANT_BOOL_arg,) }
    def InsertWithNegate(self, index:int, displayCondition:"IAgStkGraphicsDisplayCondition", negate:bool) -> None:
        """Inserts a display condition at the given zero-based index, shifting existing display conditions."""
        return self._intf.invoke(IAgStkGraphicsCompositeDisplayCondition._metadata, IAgStkGraphicsCompositeDisplayCondition._InsertWithNegate_metadata, index, displayCondition, negate)

    _Insert_metadata = { "name" : "Insert",
            "arg_types" : (agcom.INT, agcom.PVOID,),
            "marshallers" : (agmarshall.INT_arg, agmarshall.AgInterface_in_arg("IAgStkGraphicsDisplayCondition"),) }
    def Insert(self, index:int, displayCondition:"IAgStkGraphicsDisplayCondition") -> None:
        """Inserts a display condition at the given zero-based index, shifting existing display conditions."""
        return self._intf.invoke(IAgStkGraphicsCompositeDisplayCondition._metadata, IAgStkGraphicsCompositeDisplayCondition._Insert_metadata, index, displayCondition)

    _Remove_metadata = { "name" : "Remove",
            "arg_types" : (agcom.PVOID,),
            "marshallers" : (agmarshall.AgInterface_in_arg("IAgStkGraphicsDisplayCondition"),) }
    def Remove(self, displayCondition:"IAgStkGraphicsDisplayCondition") -> None:
        """Removes a display condition from the composite."""
        return self._intf.invoke(IAgStkGraphicsCompositeDisplayCondition._metadata, IAgStkGraphicsCompositeDisplayCondition._Remove_metadata, displayCondition)

    _RemoveAt_metadata = { "name" : "RemoveAt",
            "arg_types" : (agcom.INT,),
            "marshallers" : (agmarshall.INT_arg,) }
    def RemoveAt(self, index:int) -> None:
        """Removes the display condition at the given zero-based index, shifting existing display conditions."""
        return self._intf.invoke(IAgStkGraphicsCompositeDisplayCondition._metadata, IAgStkGraphicsCompositeDisplayCondition._RemoveAt_metadata, index)

    _Clear_metadata = { "name" : "Clear",
            "arg_types" : (),
            "marshallers" : () }
    def Clear(self) -> None:
        """Removes all display conditions from the composite."""
        return self._intf.invoke(IAgStkGraphicsCompositeDisplayCondition._metadata, IAgStkGraphicsCompositeDisplayCondition._Clear_metadata, )

    _GetNegate_metadata = { "name" : "GetNegate",
            "arg_types" : (agcom.PVOID, POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.AgInterface_in_arg("IAgStkGraphicsDisplayCondition"), agmarshall.VARIANT_BOOL_arg,) }
    def GetNegate(self, displayCondition:"IAgStkGraphicsDisplayCondition") -> bool:
        """Determines if a logical not operation is applied to a display condition in the composite."""
        return self._intf.invoke(IAgStkGraphicsCompositeDisplayCondition._metadata, IAgStkGraphicsCompositeDisplayCondition._GetNegate_metadata, displayCondition, out_arg())

    _SetNegate_metadata = { "name" : "SetNegate",
            "arg_types" : (agcom.PVOID, agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.AgInterface_in_arg("IAgStkGraphicsDisplayCondition"), agmarshall.VARIANT_BOOL_arg,) }
    def SetNegate(self, displayCondition:"IAgStkGraphicsDisplayCondition", negate:bool) -> None:
        """Sets if a logical not operation is applied to a display condition in the composite when the composite is evaluated."""
        return self._intf.invoke(IAgStkGraphicsCompositeDisplayCondition._metadata, IAgStkGraphicsCompositeDisplayCondition._SetNegate_metadata, displayCondition, negate)

    _GetNegateAt_metadata = { "name" : "GetNegateAt",
            "arg_types" : (agcom.INT, POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.INT_arg, agmarshall.VARIANT_BOOL_arg,) }
    def GetNegateAt(self, index:int) -> bool:
        """Determines if a logical not operation is applied to a display condition in the composite."""
        return self._intf.invoke(IAgStkGraphicsCompositeDisplayCondition._metadata, IAgStkGraphicsCompositeDisplayCondition._GetNegateAt_metadata, index, out_arg())

    _SetNegateAt_metadata = { "name" : "SetNegateAt",
            "arg_types" : (agcom.INT, agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.INT_arg, agmarshall.VARIANT_BOOL_arg,) }
    def SetNegateAt(self, index:int, negate:bool) -> None:
        """Sets if a logical not operation is applied to a display condition in the composite when the composite is evaluated."""
        return self._intf.invoke(IAgStkGraphicsCompositeDisplayCondition._metadata, IAgStkGraphicsCompositeDisplayCondition._SetNegateAt_metadata, index, negate)

    __getitem__ = Item



agcls.AgClassCatalog.add_catalog_entry("{afe0e66f-0fc5-46ad-801f-22670cfe99a9}", IAgStkGraphicsCompositeDisplayCondition)
agcls.AgTypeNameMap["IAgStkGraphicsCompositeDisplayCondition"] = IAgStkGraphicsCompositeDisplayCondition

class IAgStkGraphicsCompositePrimitive(object):
    """ A primitive that is composed of multiple other primitives. Since composites can contain other composites, they are commonly used to build hierarchies of primitives to efficiently evaluate display conditions..."""
    _num_methods = 8
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{c24448a9-4fe7-4905-86e0-70a71346fcf2}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_Count" : 1,
                             "get_TranslucentPrimitivesSortOrder" : 2,
                             "set_TranslucentPrimitivesSortOrder" : 3,
                             "Add" : 4,
                             "Remove" : 5,
                             "Contains" : 6,
                             "Clear" : 7,
                             "get__NewEnum" : 8, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsCompositePrimitive._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsCompositePrimitive from source object.")
        self.__dict__["_enumerator"] = None
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsCompositePrimitive.__dict__ and type(IAgStkGraphicsCompositePrimitive.__dict__[attrname]) == property:
            return IAgStkGraphicsCompositePrimitive.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsCompositePrimitive.")
    def __iter__(self):
        self.__dict__["_enumerator"] = self._NewEnum
        self._enumerator.reset()
        return self
    def __next__(self) -> typing.Any:
        if self._enumerator is None:
            raise StopIteration
        nextval = self._enumerator.next()
        if nextval is None:
            raise StopIteration
        return nextval
    
    _get_Count_metadata = { "name" : "Count",
            "arg_types" : (POINTER(agcom.INT),),
            "marshallers" : (agmarshall.INT_arg,) }
    @property
    def Count(self) -> int:
        """Gets the number of primitives in the composite."""
        return self._intf.get_property(IAgStkGraphicsCompositePrimitive._metadata, IAgStkGraphicsCompositePrimitive._get_Count_metadata)

    _get_TranslucentPrimitivesSortOrder_metadata = { "name" : "TranslucentPrimitivesSortOrder",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEStkGraphicsPrimitivesSortOrder),) }
    @property
    def TranslucentPrimitivesSortOrder(self) -> "AgEStkGraphicsPrimitivesSortOrder":
        """Gets or sets the sort order for translucent primitives in this composite. This determines a trade-off between rendering speed and quality..."""
        return self._intf.get_property(IAgStkGraphicsCompositePrimitive._metadata, IAgStkGraphicsCompositePrimitive._get_TranslucentPrimitivesSortOrder_metadata)

    _set_TranslucentPrimitivesSortOrder_metadata = { "name" : "TranslucentPrimitivesSortOrder",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEStkGraphicsPrimitivesSortOrder),) }
    @TranslucentPrimitivesSortOrder.setter
    def TranslucentPrimitivesSortOrder(self, translucentPrimitivesSortOrder:"AgEStkGraphicsPrimitivesSortOrder") -> None:
        return self._intf.set_property(IAgStkGraphicsCompositePrimitive._metadata, IAgStkGraphicsCompositePrimitive._set_TranslucentPrimitivesSortOrder_metadata, translucentPrimitivesSortOrder)

    _Add_metadata = { "name" : "Add",
            "arg_types" : (agcom.PVOID,),
            "marshallers" : (agmarshall.AgInterface_in_arg("IAgStkGraphicsPrimitive"),) }
    def Add(self, primitive:"IAgStkGraphicsPrimitive") -> None:
        """Adds a primitive to the composite."""
        return self._intf.invoke(IAgStkGraphicsCompositePrimitive._metadata, IAgStkGraphicsCompositePrimitive._Add_metadata, primitive)

    _Remove_metadata = { "name" : "Remove",
            "arg_types" : (agcom.PVOID,),
            "marshallers" : (agmarshall.AgInterface_in_arg("IAgStkGraphicsPrimitive"),) }
    def Remove(self, primitive:"IAgStkGraphicsPrimitive") -> None:
        """Removes a primitive from the composite."""
        return self._intf.invoke(IAgStkGraphicsCompositePrimitive._metadata, IAgStkGraphicsCompositePrimitive._Remove_metadata, primitive)

    _Contains_metadata = { "name" : "Contains",
            "arg_types" : (agcom.PVOID, POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.AgInterface_in_arg("IAgStkGraphicsPrimitive"), agmarshall.VARIANT_BOOL_arg,) }
    def Contains(self, primitive:"IAgStkGraphicsPrimitive") -> bool:
        """Determines whether the composite contains a primitive."""
        return self._intf.invoke(IAgStkGraphicsCompositePrimitive._metadata, IAgStkGraphicsCompositePrimitive._Contains_metadata, primitive, out_arg())

    _Clear_metadata = { "name" : "Clear",
            "arg_types" : (),
            "marshallers" : () }
    def Clear(self) -> None:
        """Removes all primitives from the composite."""
        return self._intf.invoke(IAgStkGraphicsCompositePrimitive._metadata, IAgStkGraphicsCompositePrimitive._Clear_metadata, )

    _get__NewEnum_metadata = { "name" : "_NewEnum",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.IEnumVARIANT_arg,) }
    @property
    def _NewEnum(self) -> enumerator_proxy:
        """Returns an enumerator that iterates through the collection. The order of the primitives is not guaranteed to be the order that the primitives were added."""
        return self._intf.get_property(IAgStkGraphicsCompositePrimitive._metadata, IAgStkGraphicsCompositePrimitive._get__NewEnum_metadata)


agcls.AgClassCatalog.add_catalog_entry("{c24448a9-4fe7-4905-86e0-70a71346fcf2}", IAgStkGraphicsCompositePrimitive)
agcls.AgTypeNameMap["IAgStkGraphicsCompositePrimitive"] = IAgStkGraphicsCompositePrimitive

class IAgStkGraphicsConstantDisplayCondition(object):
    """A display condition that evaluates to a user-defined value. This is commonly used to hide primitives by assigning to a primitive a display condition that always returns false."""
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{efede07b-4d59-4622-ba51-0281a5108aab}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_Display" : 1,
                             "set_Display" : 2, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsConstantDisplayCondition._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsConstantDisplayCondition from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsConstantDisplayCondition.__dict__ and type(IAgStkGraphicsConstantDisplayCondition.__dict__[attrname]) == property:
            return IAgStkGraphicsConstantDisplayCondition.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsConstantDisplayCondition.")
    
    _get_Display_metadata = { "name" : "Display",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def Display(self) -> bool:
        """Gets or sets the value the display condition evaluates to."""
        return self._intf.get_property(IAgStkGraphicsConstantDisplayCondition._metadata, IAgStkGraphicsConstantDisplayCondition._get_Display_metadata)

    _set_Display_metadata = { "name" : "Display",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @Display.setter
    def Display(self, display:bool) -> None:
        return self._intf.set_property(IAgStkGraphicsConstantDisplayCondition._metadata, IAgStkGraphicsConstantDisplayCondition._set_Display_metadata, display)


agcls.AgClassCatalog.add_catalog_entry("{efede07b-4d59-4622-ba51-0281a5108aab}", IAgStkGraphicsConstantDisplayCondition)
agcls.AgTypeNameMap["IAgStkGraphicsConstantDisplayCondition"] = IAgStkGraphicsConstantDisplayCondition

class IAgStkGraphicsDisplayCondition(object):
    """When assigned to objects, such as primitives or globe overlays, display conditions are evaluated to determine if the object should be rendered."""
    _num_methods = 0
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{5214ce90-6448-4cc7-bc5c-f06485ec5bb8}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : {  }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsDisplayCondition._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsDisplayCondition from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsDisplayCondition.__dict__ and type(IAgStkGraphicsDisplayCondition.__dict__[attrname]) == property:
            return IAgStkGraphicsDisplayCondition.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsDisplayCondition.")
    

agcls.AgClassCatalog.add_catalog_entry("{5214ce90-6448-4cc7-bc5c-f06485ec5bb8}", IAgStkGraphicsDisplayCondition)
agcls.AgTypeNameMap["IAgStkGraphicsDisplayCondition"] = IAgStkGraphicsDisplayCondition

class IAgStkGraphicsDistanceDisplayCondition(object):
    """Defines an inclusive distance interval that determines when an object, such as a primitive, is rendered based on the distance from the camera to the object."""
    _num_methods = 6
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{b1b3130c-bebb-4a64-a5b7-2357384e2b8c}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_MinimumDistance" : 1,
                             "set_MinimumDistance" : 2,
                             "get_MaximumDistance" : 3,
                             "set_MaximumDistance" : 4,
                             "get_MinimumDistanceSquared" : 5,
                             "get_MaximumDistanceSquared" : 6, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsDistanceDisplayCondition._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsDistanceDisplayCondition from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsDistanceDisplayCondition.__dict__ and type(IAgStkGraphicsDistanceDisplayCondition.__dict__[attrname]) == property:
            return IAgStkGraphicsDistanceDisplayCondition.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsDistanceDisplayCondition.")
    
    _get_MinimumDistance_metadata = { "name" : "MinimumDistance",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def MinimumDistance(self) -> float:
        """Gets or sets the minimum distance of the inclusive distance interval."""
        return self._intf.get_property(IAgStkGraphicsDistanceDisplayCondition._metadata, IAgStkGraphicsDistanceDisplayCondition._get_MinimumDistance_metadata)

    _set_MinimumDistance_metadata = { "name" : "MinimumDistance",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @MinimumDistance.setter
    def MinimumDistance(self, minimumDistance:float) -> None:
        return self._intf.set_property(IAgStkGraphicsDistanceDisplayCondition._metadata, IAgStkGraphicsDistanceDisplayCondition._set_MinimumDistance_metadata, minimumDistance)

    _get_MaximumDistance_metadata = { "name" : "MaximumDistance",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def MaximumDistance(self) -> float:
        """Gets or sets the maximum distance of the inclusive distance interval. Use Double.MaxValue to ignore checking the maximum distance."""
        return self._intf.get_property(IAgStkGraphicsDistanceDisplayCondition._metadata, IAgStkGraphicsDistanceDisplayCondition._get_MaximumDistance_metadata)

    _set_MaximumDistance_metadata = { "name" : "MaximumDistance",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @MaximumDistance.setter
    def MaximumDistance(self, maximumDistance:float) -> None:
        return self._intf.set_property(IAgStkGraphicsDistanceDisplayCondition._metadata, IAgStkGraphicsDistanceDisplayCondition._set_MaximumDistance_metadata, maximumDistance)

    _get_MinimumDistanceSquared_metadata = { "name" : "MinimumDistanceSquared",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def MinimumDistanceSquared(self) -> float:
        """Gets the squared minimum distance of the inclusive distance interval."""
        return self._intf.get_property(IAgStkGraphicsDistanceDisplayCondition._metadata, IAgStkGraphicsDistanceDisplayCondition._get_MinimumDistanceSquared_metadata)

    _get_MaximumDistanceSquared_metadata = { "name" : "MaximumDistanceSquared",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def MaximumDistanceSquared(self) -> float:
        """Gets the squared maximum distance of the inclusive distance interval."""
        return self._intf.get_property(IAgStkGraphicsDistanceDisplayCondition._metadata, IAgStkGraphicsDistanceDisplayCondition._get_MaximumDistanceSquared_metadata)


agcls.AgClassCatalog.add_catalog_entry("{b1b3130c-bebb-4a64-a5b7-2357384e2b8c}", IAgStkGraphicsDistanceDisplayCondition)
agcls.AgTypeNameMap["IAgStkGraphicsDistanceDisplayCondition"] = IAgStkGraphicsDistanceDisplayCondition

class IAgStkGraphicsDistanceToGlobeOverlayDisplayCondition(object):
    """Defines an inclusive distance interval that determines when an object, such as a primitive, is rendered based on the distance from the camera to the globe overlay..."""
    _num_methods = 8
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{212b00ec-ff3a-4f1b-9fc3-5a900c6536dc}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_GlobeOverlay" : 1,
                             "set_GlobeOverlay" : 2,
                             "get_MinimumDistance" : 3,
                             "set_MinimumDistance" : 4,
                             "get_MinimumDistanceSquared" : 5,
                             "get_MaximumDistance" : 6,
                             "set_MaximumDistance" : 7,
                             "get_MaximumDistanceSquared" : 8, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsDistanceToGlobeOverlayDisplayCondition._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsDistanceToGlobeOverlayDisplayCondition from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsDistanceToGlobeOverlayDisplayCondition.__dict__ and type(IAgStkGraphicsDistanceToGlobeOverlayDisplayCondition.__dict__[attrname]) == property:
            return IAgStkGraphicsDistanceToGlobeOverlayDisplayCondition.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsDistanceToGlobeOverlayDisplayCondition.")
    
    _get_GlobeOverlay_metadata = { "name" : "GlobeOverlay",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def GlobeOverlay(self) -> "IAgStkGraphicsGlobeOverlay":
        """Gets or sets the globe overlay associated with this instance."""
        return self._intf.get_property(IAgStkGraphicsDistanceToGlobeOverlayDisplayCondition._metadata, IAgStkGraphicsDistanceToGlobeOverlayDisplayCondition._get_GlobeOverlay_metadata)

    _set_GlobeOverlay_metadata = { "name" : "GlobeOverlay",
            "arg_types" : (agcom.PVOID,),
            "marshallers" : (agmarshall.AgInterface_in_arg("IAgStkGraphicsGlobeOverlay"),) }
    @GlobeOverlay.setter
    def GlobeOverlay(self, globeOverlay:"IAgStkGraphicsGlobeOverlay") -> None:
        return self._intf.set_property(IAgStkGraphicsDistanceToGlobeOverlayDisplayCondition._metadata, IAgStkGraphicsDistanceToGlobeOverlayDisplayCondition._set_GlobeOverlay_metadata, globeOverlay)

    _get_MinimumDistance_metadata = { "name" : "MinimumDistance",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def MinimumDistance(self) -> float:
        """Gets or sets the minimum distance of the inclusive distance interval."""
        return self._intf.get_property(IAgStkGraphicsDistanceToGlobeOverlayDisplayCondition._metadata, IAgStkGraphicsDistanceToGlobeOverlayDisplayCondition._get_MinimumDistance_metadata)

    _set_MinimumDistance_metadata = { "name" : "MinimumDistance",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @MinimumDistance.setter
    def MinimumDistance(self, minimumDistance:float) -> None:
        return self._intf.set_property(IAgStkGraphicsDistanceToGlobeOverlayDisplayCondition._metadata, IAgStkGraphicsDistanceToGlobeOverlayDisplayCondition._set_MinimumDistance_metadata, minimumDistance)

    _get_MinimumDistanceSquared_metadata = { "name" : "MinimumDistanceSquared",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def MinimumDistanceSquared(self) -> float:
        """Gets the squared minimum distance of the inclusive distance interval."""
        return self._intf.get_property(IAgStkGraphicsDistanceToGlobeOverlayDisplayCondition._metadata, IAgStkGraphicsDistanceToGlobeOverlayDisplayCondition._get_MinimumDistanceSquared_metadata)

    _get_MaximumDistance_metadata = { "name" : "MaximumDistance",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def MaximumDistance(self) -> float:
        """Gets or sets the maximum distance of the inclusive distance interval. Use Double.MaxValue to ignore checking the maximum distance."""
        return self._intf.get_property(IAgStkGraphicsDistanceToGlobeOverlayDisplayCondition._metadata, IAgStkGraphicsDistanceToGlobeOverlayDisplayCondition._get_MaximumDistance_metadata)

    _set_MaximumDistance_metadata = { "name" : "MaximumDistance",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @MaximumDistance.setter
    def MaximumDistance(self, maximumDistance:float) -> None:
        return self._intf.set_property(IAgStkGraphicsDistanceToGlobeOverlayDisplayCondition._metadata, IAgStkGraphicsDistanceToGlobeOverlayDisplayCondition._set_MaximumDistance_metadata, maximumDistance)

    _get_MaximumDistanceSquared_metadata = { "name" : "MaximumDistanceSquared",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def MaximumDistanceSquared(self) -> float:
        """Gets the squared maximum distance of the inclusive distance interval."""
        return self._intf.get_property(IAgStkGraphicsDistanceToGlobeOverlayDisplayCondition._metadata, IAgStkGraphicsDistanceToGlobeOverlayDisplayCondition._get_MaximumDistanceSquared_metadata)


agcls.AgClassCatalog.add_catalog_entry("{212b00ec-ff3a-4f1b-9fc3-5a900c6536dc}", IAgStkGraphicsDistanceToGlobeOverlayDisplayCondition)
agcls.AgTypeNameMap["IAgStkGraphicsDistanceToGlobeOverlayDisplayCondition"] = IAgStkGraphicsDistanceToGlobeOverlayDisplayCondition

class IAgStkGraphicsDistanceToPositionDisplayCondition(object):
    """Defines an inclusive distance interval that determines when an object, such as a primitive, is rendered based on the distance from the camera to a position defined in the given reference frame."""
    _num_methods = 10
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{0110db74-d567-4804-9bec-d7cce8ed59d0}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_MinimumDistance" : 1,
                             "set_MinimumDistance" : 2,
                             "get_MinimumDistanceSquared" : 3,
                             "get_MaximumDistance" : 4,
                             "set_MaximumDistance" : 5,
                             "get_MaximumDistanceSquared" : 6,
                             "get_Position" : 7,
                             "set_Position" : 8,
                             "get_ReferenceFrame" : 9,
                             "set_ReferenceFrame" : 10, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsDistanceToPositionDisplayCondition._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsDistanceToPositionDisplayCondition from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsDistanceToPositionDisplayCondition.__dict__ and type(IAgStkGraphicsDistanceToPositionDisplayCondition.__dict__[attrname]) == property:
            return IAgStkGraphicsDistanceToPositionDisplayCondition.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsDistanceToPositionDisplayCondition.")
    
    _get_MinimumDistance_metadata = { "name" : "MinimumDistance",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def MinimumDistance(self) -> float:
        """Gets or sets the minimum distance of the inclusive distance interval."""
        return self._intf.get_property(IAgStkGraphicsDistanceToPositionDisplayCondition._metadata, IAgStkGraphicsDistanceToPositionDisplayCondition._get_MinimumDistance_metadata)

    _set_MinimumDistance_metadata = { "name" : "MinimumDistance",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @MinimumDistance.setter
    def MinimumDistance(self, minimumDistance:float) -> None:
        return self._intf.set_property(IAgStkGraphicsDistanceToPositionDisplayCondition._metadata, IAgStkGraphicsDistanceToPositionDisplayCondition._set_MinimumDistance_metadata, minimumDistance)

    _get_MinimumDistanceSquared_metadata = { "name" : "MinimumDistanceSquared",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def MinimumDistanceSquared(self) -> float:
        """Gets the squared minimum distance of the inclusive distance interval."""
        return self._intf.get_property(IAgStkGraphicsDistanceToPositionDisplayCondition._metadata, IAgStkGraphicsDistanceToPositionDisplayCondition._get_MinimumDistanceSquared_metadata)

    _get_MaximumDistance_metadata = { "name" : "MaximumDistance",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def MaximumDistance(self) -> float:
        """Gets or sets the maximum distance of the inclusive distance interval. Use Double.MaxValue to ignore checking the maximum distance."""
        return self._intf.get_property(IAgStkGraphicsDistanceToPositionDisplayCondition._metadata, IAgStkGraphicsDistanceToPositionDisplayCondition._get_MaximumDistance_metadata)

    _set_MaximumDistance_metadata = { "name" : "MaximumDistance",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @MaximumDistance.setter
    def MaximumDistance(self, maximumDistance:float) -> None:
        return self._intf.set_property(IAgStkGraphicsDistanceToPositionDisplayCondition._metadata, IAgStkGraphicsDistanceToPositionDisplayCondition._set_MaximumDistance_metadata, maximumDistance)

    _get_MaximumDistanceSquared_metadata = { "name" : "MaximumDistanceSquared",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def MaximumDistanceSquared(self) -> float:
        """Gets the squared maximum distance of the inclusive distance interval."""
        return self._intf.get_property(IAgStkGraphicsDistanceToPositionDisplayCondition._metadata, IAgStkGraphicsDistanceToPositionDisplayCondition._get_MaximumDistanceSquared_metadata)

    _get_Position_metadata = { "name" : "Position",
            "arg_types" : (POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg,) }
    @property
    def Position(self) -> list:
        """Gets or sets the position used to compute the distance from the camera. The array contains the components of the position arranged in the order x, y, z."""
        return self._intf.get_property(IAgStkGraphicsDistanceToPositionDisplayCondition._metadata, IAgStkGraphicsDistanceToPositionDisplayCondition._get_Position_metadata)

    _set_Position_metadata = { "name" : "Position",
            "arg_types" : (agcom.LPSAFEARRAY,),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg,) }
    @Position.setter
    def Position(self, position:list) -> None:
        return self._intf.set_property(IAgStkGraphicsDistanceToPositionDisplayCondition._metadata, IAgStkGraphicsDistanceToPositionDisplayCondition._set_Position_metadata, position)

    _get_ReferenceFrame_metadata = { "name" : "ReferenceFrame",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def ReferenceFrame(self) -> "IAgCrdnSystem":
        """Gets or sets the reference frame that position is defined in."""
        return self._intf.get_property(IAgStkGraphicsDistanceToPositionDisplayCondition._metadata, IAgStkGraphicsDistanceToPositionDisplayCondition._get_ReferenceFrame_metadata)

    _set_ReferenceFrame_metadata = { "name" : "ReferenceFrame",
            "arg_types" : (agcom.PVOID,),
            "marshallers" : (agmarshall.AgInterface_in_arg("IAgCrdnSystem"),) }
    @ReferenceFrame.setter
    def ReferenceFrame(self, referenceFrame:"IAgCrdnSystem") -> None:
        return self._intf.set_property(IAgStkGraphicsDistanceToPositionDisplayCondition._metadata, IAgStkGraphicsDistanceToPositionDisplayCondition._set_ReferenceFrame_metadata, referenceFrame)


agcls.AgClassCatalog.add_catalog_entry("{0110db74-d567-4804-9bec-d7cce8ed59d0}", IAgStkGraphicsDistanceToPositionDisplayCondition)
agcls.AgTypeNameMap["IAgStkGraphicsDistanceToPositionDisplayCondition"] = IAgStkGraphicsDistanceToPositionDisplayCondition

class IAgStkGraphicsDistanceToPrimitiveDisplayCondition(object):
    """Defines an inclusive distance interval that determines when an object, such as a screen overlay, is rendered based on the distance from the camera to the primitive..."""
    _num_methods = 8
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{bf9664c2-e8c4-471b-a071-865f1448a031}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_Primitive" : 1,
                             "set_Primitive" : 2,
                             "get_MinimumDistance" : 3,
                             "set_MinimumDistance" : 4,
                             "get_MinimumDistanceSquared" : 5,
                             "get_MaximumDistance" : 6,
                             "set_MaximumDistance" : 7,
                             "get_MaximumDistanceSquared" : 8, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsDistanceToPrimitiveDisplayCondition._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsDistanceToPrimitiveDisplayCondition from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsDistanceToPrimitiveDisplayCondition.__dict__ and type(IAgStkGraphicsDistanceToPrimitiveDisplayCondition.__dict__[attrname]) == property:
            return IAgStkGraphicsDistanceToPrimitiveDisplayCondition.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsDistanceToPrimitiveDisplayCondition.")
    
    _get_Primitive_metadata = { "name" : "Primitive",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def Primitive(self) -> "IAgStkGraphicsPrimitive":
        """Gets or sets the primitive associated with this instance."""
        return self._intf.get_property(IAgStkGraphicsDistanceToPrimitiveDisplayCondition._metadata, IAgStkGraphicsDistanceToPrimitiveDisplayCondition._get_Primitive_metadata)

    _set_Primitive_metadata = { "name" : "Primitive",
            "arg_types" : (agcom.PVOID,),
            "marshallers" : (agmarshall.AgInterface_in_arg("IAgStkGraphicsPrimitive"),) }
    @Primitive.setter
    def Primitive(self, primitive:"IAgStkGraphicsPrimitive") -> None:
        return self._intf.set_property(IAgStkGraphicsDistanceToPrimitiveDisplayCondition._metadata, IAgStkGraphicsDistanceToPrimitiveDisplayCondition._set_Primitive_metadata, primitive)

    _get_MinimumDistance_metadata = { "name" : "MinimumDistance",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def MinimumDistance(self) -> float:
        """Gets or sets the minimum distance of the inclusive distance interval."""
        return self._intf.get_property(IAgStkGraphicsDistanceToPrimitiveDisplayCondition._metadata, IAgStkGraphicsDistanceToPrimitiveDisplayCondition._get_MinimumDistance_metadata)

    _set_MinimumDistance_metadata = { "name" : "MinimumDistance",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @MinimumDistance.setter
    def MinimumDistance(self, minimumDistance:float) -> None:
        return self._intf.set_property(IAgStkGraphicsDistanceToPrimitiveDisplayCondition._metadata, IAgStkGraphicsDistanceToPrimitiveDisplayCondition._set_MinimumDistance_metadata, minimumDistance)

    _get_MinimumDistanceSquared_metadata = { "name" : "MinimumDistanceSquared",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def MinimumDistanceSquared(self) -> float:
        """Gets the squared minimum distance of the inclusive distance interval."""
        return self._intf.get_property(IAgStkGraphicsDistanceToPrimitiveDisplayCondition._metadata, IAgStkGraphicsDistanceToPrimitiveDisplayCondition._get_MinimumDistanceSquared_metadata)

    _get_MaximumDistance_metadata = { "name" : "MaximumDistance",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def MaximumDistance(self) -> float:
        """Gets or sets the maximum distance of the inclusive distance interval. Use Double.MaxValue to ignore checking the maximum distance."""
        return self._intf.get_property(IAgStkGraphicsDistanceToPrimitiveDisplayCondition._metadata, IAgStkGraphicsDistanceToPrimitiveDisplayCondition._get_MaximumDistance_metadata)

    _set_MaximumDistance_metadata = { "name" : "MaximumDistance",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @MaximumDistance.setter
    def MaximumDistance(self, maximumDistance:float) -> None:
        return self._intf.set_property(IAgStkGraphicsDistanceToPrimitiveDisplayCondition._metadata, IAgStkGraphicsDistanceToPrimitiveDisplayCondition._set_MaximumDistance_metadata, maximumDistance)

    _get_MaximumDistanceSquared_metadata = { "name" : "MaximumDistanceSquared",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def MaximumDistanceSquared(self) -> float:
        """Gets the squared maximum distance of the inclusive distance interval."""
        return self._intf.get_property(IAgStkGraphicsDistanceToPrimitiveDisplayCondition._metadata, IAgStkGraphicsDistanceToPrimitiveDisplayCondition._get_MaximumDistanceSquared_metadata)


agcls.AgClassCatalog.add_catalog_entry("{bf9664c2-e8c4-471b-a071-865f1448a031}", IAgStkGraphicsDistanceToPrimitiveDisplayCondition)
agcls.AgTypeNameMap["IAgStkGraphicsDistanceToPrimitiveDisplayCondition"] = IAgStkGraphicsDistanceToPrimitiveDisplayCondition

class IAgStkGraphicsDurationPathPrimitiveUpdatePolicy(object):
    """path primitive update policy that removes points from remove location after a given duration."""
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{23d3c9c4-b242-4a5a-89cf-58387bd9f935}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_Duration" : 1,
                             "set_Duration" : 2,
                             "get_RemoveLocation" : 3,
                             "set_RemoveLocation" : 4, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsDurationPathPrimitiveUpdatePolicy._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsDurationPathPrimitiveUpdatePolicy from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsDurationPathPrimitiveUpdatePolicy.__dict__ and type(IAgStkGraphicsDurationPathPrimitiveUpdatePolicy.__dict__[attrname]) == property:
            return IAgStkGraphicsDurationPathPrimitiveUpdatePolicy.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsDurationPathPrimitiveUpdatePolicy.")
    
    _get_Duration_metadata = { "name" : "Duration",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def Duration(self) -> float:
        """Gets or sets the maximum duration that a point will lie on the line."""
        return self._intf.get_property(IAgStkGraphicsDurationPathPrimitiveUpdatePolicy._metadata, IAgStkGraphicsDurationPathPrimitiveUpdatePolicy._get_Duration_metadata)

    _set_Duration_metadata = { "name" : "Duration",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @Duration.setter
    def Duration(self, duration:float) -> None:
        return self._intf.set_property(IAgStkGraphicsDurationPathPrimitiveUpdatePolicy._metadata, IAgStkGraphicsDurationPathPrimitiveUpdatePolicy._set_Duration_metadata, duration)

    _get_RemoveLocation_metadata = { "name" : "RemoveLocation",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEStkGraphicsPathPrimitiveRemoveLocation),) }
    @property
    def RemoveLocation(self) -> "AgEStkGraphicsPathPrimitiveRemoveLocation":
        """Gets or sets where the positions on the path are removed from."""
        return self._intf.get_property(IAgStkGraphicsDurationPathPrimitiveUpdatePolicy._metadata, IAgStkGraphicsDurationPathPrimitiveUpdatePolicy._get_RemoveLocation_metadata)

    _set_RemoveLocation_metadata = { "name" : "RemoveLocation",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEStkGraphicsPathPrimitiveRemoveLocation),) }
    @RemoveLocation.setter
    def RemoveLocation(self, removeLocation:"AgEStkGraphicsPathPrimitiveRemoveLocation") -> None:
        return self._intf.set_property(IAgStkGraphicsDurationPathPrimitiveUpdatePolicy._metadata, IAgStkGraphicsDurationPathPrimitiveUpdatePolicy._set_RemoveLocation_metadata, removeLocation)


agcls.AgClassCatalog.add_catalog_entry("{23d3c9c4-b242-4a5a-89cf-58387bd9f935}", IAgStkGraphicsDurationPathPrimitiveUpdatePolicy)
agcls.AgTypeNameMap["IAgStkGraphicsDurationPathPrimitiveUpdatePolicy"] = IAgStkGraphicsDurationPathPrimitiveUpdatePolicy

class IAgStkGraphicsFrameRate(object):
    """Keeps track of how many times the scenes are rendered per second."""
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{9bbe1077-fcb3-4d73-ae9e-727155e14288}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_FramesPerSecond" : 1,
                             "get_MaximumNumberOfFrames" : 2,
                             "set_MaximumNumberOfFrames" : 3,
                             "Reset" : 4, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsFrameRate._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsFrameRate from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsFrameRate.__dict__ and type(IAgStkGraphicsFrameRate.__dict__[attrname]) == property:
            return IAgStkGraphicsFrameRate.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsFrameRate.")
    
    _get_FramesPerSecond_metadata = { "name" : "FramesPerSecond",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def FramesPerSecond(self) -> float:
        """Gets the current frame rate in frames per second."""
        return self._intf.get_property(IAgStkGraphicsFrameRate._metadata, IAgStkGraphicsFrameRate._get_FramesPerSecond_metadata)

    _get_MaximumNumberOfFrames_metadata = { "name" : "MaximumNumberOfFrames",
            "arg_types" : (POINTER(agcom.INT),),
            "marshallers" : (agmarshall.INT_arg,) }
    @property
    def MaximumNumberOfFrames(self) -> int:
        """Gets or sets the maximum number of frames used to determine frame rate. More frames means that the frame rate is averaged over a longer period of time and will fluctuate less than fewer frames would. The minimum value is 2."""
        return self._intf.get_property(IAgStkGraphicsFrameRate._metadata, IAgStkGraphicsFrameRate._get_MaximumNumberOfFrames_metadata)

    _set_MaximumNumberOfFrames_metadata = { "name" : "MaximumNumberOfFrames",
            "arg_types" : (agcom.INT,),
            "marshallers" : (agmarshall.INT_arg,) }
    @MaximumNumberOfFrames.setter
    def MaximumNumberOfFrames(self, maximumNumberOfFrames:int) -> None:
        return self._intf.set_property(IAgStkGraphicsFrameRate._metadata, IAgStkGraphicsFrameRate._set_MaximumNumberOfFrames_metadata, maximumNumberOfFrames)

    _Reset_metadata = { "name" : "Reset",
            "arg_types" : (),
            "marshallers" : () }
    def Reset(self) -> None:
        """This resets the frame rate counter back to zero. The frame rate computation begins anew."""
        return self._intf.invoke(IAgStkGraphicsFrameRate._metadata, IAgStkGraphicsFrameRate._Reset_metadata, )


agcls.AgClassCatalog.add_catalog_entry("{9bbe1077-fcb3-4d73-ae9e-727155e14288}", IAgStkGraphicsFrameRate)
agcls.AgTypeNameMap["IAgStkGraphicsFrameRate"] = IAgStkGraphicsFrameRate

class IAgStkGraphicsGlobeImageOverlay(object):
    """A globe overlay that shows an image."""
    _num_methods = 13
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{ac17f1dd-17dc-41bd-8429-80f90234b53f}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_Translucency" : 1,
                             "set_Translucency" : 2,
                             "get_UseAltitudeBasedTranslucency" : 3,
                             "set_UseAltitudeBasedTranslucency" : 4,
                             "get_AltitudeBasedTranslucencyLowerTranslucency" : 5,
                             "set_AltitudeBasedTranslucencyLowerTranslucency" : 6,
                             "get_AltitudeBasedTranslucencyUpperTranslucency" : 7,
                             "set_AltitudeBasedTranslucencyUpperTranslucency" : 8,
                             "get_AltitudeBasedTranslucencyLowerAltitude" : 9,
                             "set_AltitudeBasedTranslucencyLowerAltitude" : 10,
                             "get_AltitudeBasedTranslucencyUpperAltitude" : 11,
                             "set_AltitudeBasedTranslucencyUpperAltitude" : 12,
                             "get_MoreThanOneImageGlobeOverlaySupported" : 13, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsGlobeImageOverlay._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsGlobeImageOverlay from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsGlobeImageOverlay.__dict__ and type(IAgStkGraphicsGlobeImageOverlay.__dict__[attrname]) == property:
            return IAgStkGraphicsGlobeImageOverlay.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsGlobeImageOverlay.")
    
    _get_Translucency_metadata = { "name" : "Translucency",
            "arg_types" : (POINTER(agcom.FLOAT),),
            "marshallers" : (agmarshall.FLOAT_arg,) }
    @property
    def Translucency(self) -> float:
        """Gets or sets the translucency value for the image. The translucency is between 0 and 1, where 0 is fully opaque and 1 is invisible."""
        return self._intf.get_property(IAgStkGraphicsGlobeImageOverlay._metadata, IAgStkGraphicsGlobeImageOverlay._get_Translucency_metadata)

    _set_Translucency_metadata = { "name" : "Translucency",
            "arg_types" : (agcom.FLOAT,),
            "marshallers" : (agmarshall.FLOAT_arg,) }
    @Translucency.setter
    def Translucency(self, translucency:float) -> None:
        return self._intf.set_property(IAgStkGraphicsGlobeImageOverlay._metadata, IAgStkGraphicsGlobeImageOverlay._set_Translucency_metadata, translucency)

    _get_UseAltitudeBasedTranslucency_metadata = { "name" : "UseAltitudeBasedTranslucency",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def UseAltitudeBasedTranslucency(self) -> bool:
        """Gets or sets whether to use altitude to determine the translucency value for the image or not. If <see langword='false' />, the translucency value is used..."""
        return self._intf.get_property(IAgStkGraphicsGlobeImageOverlay._metadata, IAgStkGraphicsGlobeImageOverlay._get_UseAltitudeBasedTranslucency_metadata)

    _set_UseAltitudeBasedTranslucency_metadata = { "name" : "UseAltitudeBasedTranslucency",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @UseAltitudeBasedTranslucency.setter
    def UseAltitudeBasedTranslucency(self, useAltitudeBasedTranslucency:bool) -> None:
        return self._intf.set_property(IAgStkGraphicsGlobeImageOverlay._metadata, IAgStkGraphicsGlobeImageOverlay._set_UseAltitudeBasedTranslucency_metadata, useAltitudeBasedTranslucency)

    _get_AltitudeBasedTranslucencyLowerTranslucency_metadata = { "name" : "AltitudeBasedTranslucencyLowerTranslucency",
            "arg_types" : (POINTER(agcom.FLOAT),),
            "marshallers" : (agmarshall.FLOAT_arg,) }
    @property
    def AltitudeBasedTranslucencyLowerTranslucency(self) -> float:
        """Gets or sets the lower translucency value for the image when use altitude based translucency is set to <see langword='true' />..."""
        return self._intf.get_property(IAgStkGraphicsGlobeImageOverlay._metadata, IAgStkGraphicsGlobeImageOverlay._get_AltitudeBasedTranslucencyLowerTranslucency_metadata)

    _set_AltitudeBasedTranslucencyLowerTranslucency_metadata = { "name" : "AltitudeBasedTranslucencyLowerTranslucency",
            "arg_types" : (agcom.FLOAT,),
            "marshallers" : (agmarshall.FLOAT_arg,) }
    @AltitudeBasedTranslucencyLowerTranslucency.setter
    def AltitudeBasedTranslucencyLowerTranslucency(self, altitudeBasedTranslucencyLowerTranslucency:float) -> None:
        return self._intf.set_property(IAgStkGraphicsGlobeImageOverlay._metadata, IAgStkGraphicsGlobeImageOverlay._set_AltitudeBasedTranslucencyLowerTranslucency_metadata, altitudeBasedTranslucencyLowerTranslucency)

    _get_AltitudeBasedTranslucencyUpperTranslucency_metadata = { "name" : "AltitudeBasedTranslucencyUpperTranslucency",
            "arg_types" : (POINTER(agcom.FLOAT),),
            "marshallers" : (agmarshall.FLOAT_arg,) }
    @property
    def AltitudeBasedTranslucencyUpperTranslucency(self) -> float:
        """Gets or sets the upper translucency value for the image when use altitude based translucency is set to <see langword='true' />..."""
        return self._intf.get_property(IAgStkGraphicsGlobeImageOverlay._metadata, IAgStkGraphicsGlobeImageOverlay._get_AltitudeBasedTranslucencyUpperTranslucency_metadata)

    _set_AltitudeBasedTranslucencyUpperTranslucency_metadata = { "name" : "AltitudeBasedTranslucencyUpperTranslucency",
            "arg_types" : (agcom.FLOAT,),
            "marshallers" : (agmarshall.FLOAT_arg,) }
    @AltitudeBasedTranslucencyUpperTranslucency.setter
    def AltitudeBasedTranslucencyUpperTranslucency(self, altitudeBasedTranslucencyUpperTranslucency:float) -> None:
        return self._intf.set_property(IAgStkGraphicsGlobeImageOverlay._metadata, IAgStkGraphicsGlobeImageOverlay._set_AltitudeBasedTranslucencyUpperTranslucency_metadata, altitudeBasedTranslucencyUpperTranslucency)

    _get_AltitudeBasedTranslucencyLowerAltitude_metadata = { "name" : "AltitudeBasedTranslucencyLowerAltitude",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def AltitudeBasedTranslucencyLowerAltitude(self) -> float:
        """Gets or sets the lower altitude bound used to calculate translucency for the image when use altitude based translucency is set to <see langword='true' />..."""
        return self._intf.get_property(IAgStkGraphicsGlobeImageOverlay._metadata, IAgStkGraphicsGlobeImageOverlay._get_AltitudeBasedTranslucencyLowerAltitude_metadata)

    _set_AltitudeBasedTranslucencyLowerAltitude_metadata = { "name" : "AltitudeBasedTranslucencyLowerAltitude",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @AltitudeBasedTranslucencyLowerAltitude.setter
    def AltitudeBasedTranslucencyLowerAltitude(self, altitudeBasedTranslucencyLowerAltitude:float) -> None:
        return self._intf.set_property(IAgStkGraphicsGlobeImageOverlay._metadata, IAgStkGraphicsGlobeImageOverlay._set_AltitudeBasedTranslucencyLowerAltitude_metadata, altitudeBasedTranslucencyLowerAltitude)

    _get_AltitudeBasedTranslucencyUpperAltitude_metadata = { "name" : "AltitudeBasedTranslucencyUpperAltitude",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def AltitudeBasedTranslucencyUpperAltitude(self) -> float:
        """Gets or sets the upper altitude bound used to calculate translucency for the image when use altitude based translucency is set to <see langword='true' />..."""
        return self._intf.get_property(IAgStkGraphicsGlobeImageOverlay._metadata, IAgStkGraphicsGlobeImageOverlay._get_AltitudeBasedTranslucencyUpperAltitude_metadata)

    _set_AltitudeBasedTranslucencyUpperAltitude_metadata = { "name" : "AltitudeBasedTranslucencyUpperAltitude",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @AltitudeBasedTranslucencyUpperAltitude.setter
    def AltitudeBasedTranslucencyUpperAltitude(self, altitudeBasedTranslucencyUpperAltitude:float) -> None:
        return self._intf.set_property(IAgStkGraphicsGlobeImageOverlay._metadata, IAgStkGraphicsGlobeImageOverlay._set_AltitudeBasedTranslucencyUpperAltitude_metadata, altitudeBasedTranslucencyUpperAltitude)

    _get_MoreThanOneImageGlobeOverlaySupported_metadata = { "name" : "MoreThanOneImageGlobeOverlaySupported",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def MoreThanOneImageGlobeOverlaySupported(self) -> bool:
        """Gets whether or not the video card allows for more than one image globe overlay globe image overlay to be added."""
        return self._intf.get_property(IAgStkGraphicsGlobeImageOverlay._metadata, IAgStkGraphicsGlobeImageOverlay._get_MoreThanOneImageGlobeOverlaySupported_metadata)


agcls.AgClassCatalog.add_catalog_entry("{ac17f1dd-17dc-41bd-8429-80f90234b53f}", IAgStkGraphicsGlobeImageOverlay)
agcls.AgTypeNameMap["IAgStkGraphicsGlobeImageOverlay"] = IAgStkGraphicsGlobeImageOverlay

class IAgStkGraphicsGraphicsFont(object):
    """A font that is suitable for use with the text batch primitive. For best performance, avoid creating duplicate font objects. Instead assign the same font object to several text batch primitives."""
    _num_methods = 9
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{36a67d60-3f13-435b-92d8-b6a76ed1a74a}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_Name" : 1,
                             "get_Size" : 2,
                             "get_Bold" : 3,
                             "get_Italic" : 4,
                             "get_Underline" : 5,
                             "get_Strikeout" : 6,
                             "get_Outline" : 7,
                             "get_Style" : 8,
                             "get_Antialias" : 9, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsGraphicsFont._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsGraphicsFont from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsGraphicsFont.__dict__ and type(IAgStkGraphicsGraphicsFont.__dict__[attrname]) == property:
            return IAgStkGraphicsGraphicsFont.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsGraphicsFont.")
    
    _get_Name_metadata = { "name" : "Name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def Name(self) -> str:
        """Gets the typeface name of the font."""
        return self._intf.get_property(IAgStkGraphicsGraphicsFont._metadata, IAgStkGraphicsGraphicsFont._get_Name_metadata)

    _get_Size_metadata = { "name" : "Size",
            "arg_types" : (POINTER(agcom.INT),),
            "marshallers" : (agmarshall.INT_arg,) }
    @property
    def Size(self) -> int:
        """Gets the size of the font."""
        return self._intf.get_property(IAgStkGraphicsGraphicsFont._metadata, IAgStkGraphicsGraphicsFont._get_Size_metadata)

    _get_Bold_metadata = { "name" : "Bold",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def Bold(self) -> bool:
        """Gets a value that indicates whether this font is bold."""
        return self._intf.get_property(IAgStkGraphicsGraphicsFont._metadata, IAgStkGraphicsGraphicsFont._get_Bold_metadata)

    _get_Italic_metadata = { "name" : "Italic",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def Italic(self) -> bool:
        """Gets a value that indicates whether this font is italic."""
        return self._intf.get_property(IAgStkGraphicsGraphicsFont._metadata, IAgStkGraphicsGraphicsFont._get_Italic_metadata)

    _get_Underline_metadata = { "name" : "Underline",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def Underline(self) -> bool:
        """Gets a value that indicates whether this font is underlined."""
        return self._intf.get_property(IAgStkGraphicsGraphicsFont._metadata, IAgStkGraphicsGraphicsFont._get_Underline_metadata)

    _get_Strikeout_metadata = { "name" : "Strikeout",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def Strikeout(self) -> bool:
        """Gets a value that indicates whether this font has a horizontal line through its characters."""
        return self._intf.get_property(IAgStkGraphicsGraphicsFont._metadata, IAgStkGraphicsGraphicsFont._get_Strikeout_metadata)

    _get_Outline_metadata = { "name" : "Outline",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def Outline(self) -> bool:
        """Gets a value that indicates whether this font has an outline around its characters."""
        return self._intf.get_property(IAgStkGraphicsGraphicsFont._metadata, IAgStkGraphicsGraphicsFont._get_Outline_metadata)

    _get_Style_metadata = { "name" : "Style",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEStkGraphicsFontStyle),) }
    @property
    def Style(self) -> "AgEStkGraphicsFontStyle":
        """Gets the font style enumeration that contains the style for this font. This does not include the outline property."""
        return self._intf.get_property(IAgStkGraphicsGraphicsFont._metadata, IAgStkGraphicsGraphicsFont._get_Style_metadata)

    _get_Antialias_metadata = { "name" : "Antialias",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def Antialias(self) -> bool:
        """Gets a value that indicates whether this font is antialiased."""
        return self._intf.get_property(IAgStkGraphicsGraphicsFont._metadata, IAgStkGraphicsGraphicsFont._get_Antialias_metadata)


agcls.AgClassCatalog.add_catalog_entry("{36a67d60-3f13-435b-92d8-b6a76ed1a74a}", IAgStkGraphicsGraphicsFont)
agcls.AgTypeNameMap["IAgStkGraphicsGraphicsFont"] = IAgStkGraphicsGraphicsFont

class IAgStkGraphicsGreatArcInterpolator(object):
    """The great arc interpolator computes interpolated positions along a great arc. A great arc is the shortest path between two positions on an ellipsoid."""
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{8de070c1-de8f-48ee-96ea-5dc046706d28}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_CentralBody" : 1,
                             "set_CentralBody" : 2,
                             "get_Granularity" : 3,
                             "set_Granularity" : 4, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsGreatArcInterpolator._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsGreatArcInterpolator from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsGreatArcInterpolator.__dict__ and type(IAgStkGraphicsGreatArcInterpolator.__dict__[attrname]) == property:
            return IAgStkGraphicsGreatArcInterpolator.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsGreatArcInterpolator.")
    
    _get_CentralBody_metadata = { "name" : "CentralBody",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def CentralBody(self) -> str:
        """Gets or sets the central body used when interpolating with interpolate."""
        return self._intf.get_property(IAgStkGraphicsGreatArcInterpolator._metadata, IAgStkGraphicsGreatArcInterpolator._get_CentralBody_metadata)

    _set_CentralBody_metadata = { "name" : "CentralBody",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @CentralBody.setter
    def CentralBody(self, centralBody:str) -> None:
        return self._intf.set_property(IAgStkGraphicsGreatArcInterpolator._metadata, IAgStkGraphicsGreatArcInterpolator._set_CentralBody_metadata, centralBody)

    _get_Granularity_metadata = { "name" : "Granularity",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def Granularity(self) -> float:
        """Gets or sets the granularity used when interpolating with interpolate. Lower granularities are more precise but create more positions."""
        return self._intf.get_property(IAgStkGraphicsGreatArcInterpolator._metadata, IAgStkGraphicsGreatArcInterpolator._get_Granularity_metadata)

    _set_Granularity_metadata = { "name" : "Granularity",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @Granularity.setter
    def Granularity(self, granularity:float) -> None:
        return self._intf.set_property(IAgStkGraphicsGreatArcInterpolator._metadata, IAgStkGraphicsGreatArcInterpolator._set_Granularity_metadata, granularity)


agcls.AgClassCatalog.add_catalog_entry("{8de070c1-de8f-48ee-96ea-5dc046706d28}", IAgStkGraphicsGreatArcInterpolator)
agcls.AgTypeNameMap["IAgStkGraphicsGreatArcInterpolator"] = IAgStkGraphicsGreatArcInterpolator

class IAgStkGraphicsImageCollection(object):
    """A collection of globe image overlay objects."""
    _num_methods = 20
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{797b7253-9205-47a1-b49b-edf6e06326c0}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_Count" : 1,
                             "get_IsReadOnly" : 2,
                             "Item" : 3,
                             "get__NewEnum" : 4,
                             "Contains" : 5,
                             "ContainsUriString" : 6,
                             "Remove" : 7,
                             "Clear" : 8,
                             "Add" : 9,
                             "AddAsync" : 10,
                             "IndexOf" : 11,
                             "IndexOfUriString" : 12,
                             "AddUriString" : 13,
                             "AddAsyncUriString" : 14,
                             "Swap" : 15,
                             "SwapByIndex" : 16,
                             "Move" : 17,
                             "MoveByIndex" : 18,
                             "BringToFront" : 19,
                             "SendToBack" : 20, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsImageCollection._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsImageCollection from source object.")
        self.__dict__["_enumerator"] = None
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsImageCollection.__dict__ and type(IAgStkGraphicsImageCollection.__dict__[attrname]) == property:
            return IAgStkGraphicsImageCollection.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsImageCollection.")
    def __iter__(self):
        self.__dict__["_enumerator"] = self._NewEnum
        self._enumerator.reset()
        return self
    def __next__(self) -> "IAgStkGraphicsGlobeImageOverlay":
        if self._enumerator is None:
            raise StopIteration
        nextval = self._enumerator.next()
        if nextval is None:
            raise StopIteration
        return nextval
    def Subscribe(self) -> IAgStkGraphicsImageCollectionEventHandler:
        """Returns an IAgStkGraphicsImageCollectionEventHandler that is subscribed to handle events associated with this instance of IAgStkGraphicsImageCollection."""
        return IAgStkGraphicsImageCollectionEventHandler(self._intf)
    
    _get_Count_metadata = { "name" : "Count",
            "arg_types" : (POINTER(agcom.INT),),
            "marshallers" : (agmarshall.INT_arg,) }
    @property
    def Count(self) -> int:
        """Gets the number of globe overlay objects in the collection."""
        return self._intf.get_property(IAgStkGraphicsImageCollection._metadata, IAgStkGraphicsImageCollection._get_Count_metadata)

    _get_IsReadOnly_metadata = { "name" : "IsReadOnly",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def IsReadOnly(self) -> bool:
        """Gets whether or not the collection is read only."""
        return self._intf.get_property(IAgStkGraphicsImageCollection._metadata, IAgStkGraphicsImageCollection._get_IsReadOnly_metadata)

    _Item_metadata = { "name" : "Item",
            "arg_types" : (agcom.INT, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.INT_arg, agmarshall.AgInterface_out_arg,) }
    def Item(self, index:int) -> "IAgStkGraphicsGlobeImageOverlay":
        """Gets the globe image overlay at the specified index."""
        return self._intf.invoke(IAgStkGraphicsImageCollection._metadata, IAgStkGraphicsImageCollection._Item_metadata, index, out_arg())

    _get__NewEnum_metadata = { "name" : "_NewEnum",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.IEnumVARIANT_arg,) }
    @property
    def _NewEnum(self) -> enumerator_proxy:
        """Constructs an iterator that can be used to iterate the collection."""
        return self._intf.get_property(IAgStkGraphicsImageCollection._metadata, IAgStkGraphicsImageCollection._get__NewEnum_metadata)

    _Contains_metadata = { "name" : "Contains",
            "arg_types" : (agcom.PVOID, POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.AgInterface_in_arg("IAgStkGraphicsGlobeImageOverlay"), agmarshall.VARIANT_BOOL_arg,) }
    def Contains(self, imageryOverlay:"IAgStkGraphicsGlobeImageOverlay") -> bool:
        """Checks the presence of a globe image overlay in the collection."""
        return self._intf.invoke(IAgStkGraphicsImageCollection._metadata, IAgStkGraphicsImageCollection._Contains_metadata, imageryOverlay, out_arg())

    _ContainsUriString_metadata = { "name" : "ContainsUriString",
            "arg_types" : (agcom.BSTR, POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.VARIANT_BOOL_arg,) }
    def ContainsUriString(self, stringUri:str) -> bool:
        """Checks the presence of a globe image overlay with the specified Uri in the collection."""
        return self._intf.invoke(IAgStkGraphicsImageCollection._metadata, IAgStkGraphicsImageCollection._ContainsUriString_metadata, stringUri, out_arg())

    _Remove_metadata = { "name" : "Remove",
            "arg_types" : (agcom.PVOID, POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.AgInterface_in_arg("IAgStkGraphicsGlobeImageOverlay"), agmarshall.VARIANT_BOOL_arg,) }
    def Remove(self, globeOverlay:"IAgStkGraphicsGlobeImageOverlay") -> bool:
        """Removes a globe image overlay from the collection."""
        return self._intf.invoke(IAgStkGraphicsImageCollection._metadata, IAgStkGraphicsImageCollection._Remove_metadata, globeOverlay, out_arg())

    _Clear_metadata = { "name" : "Clear",
            "arg_types" : (),
            "marshallers" : () }
    def Clear(self) -> None:
        """Removes all globe image overlay objects from the collection."""
        return self._intf.invoke(IAgStkGraphicsImageCollection._metadata, IAgStkGraphicsImageCollection._Clear_metadata, )

    _Add_metadata = { "name" : "Add",
            "arg_types" : (agcom.PVOID,),
            "marshallers" : (agmarshall.AgInterface_in_arg("IAgStkGraphicsGlobeImageOverlay"),) }
    def Add(self, imageryOverlay:"IAgStkGraphicsGlobeImageOverlay") -> None:
        """Adds imageryOverlay to the collection."""
        return self._intf.invoke(IAgStkGraphicsImageCollection._metadata, IAgStkGraphicsImageCollection._Add_metadata, imageryOverlay)

    _AddAsync_metadata = { "name" : "AddAsync",
            "arg_types" : (agcom.PVOID,),
            "marshallers" : (agmarshall.AgInterface_in_arg("IAgStkGraphicsGlobeImageOverlay"),) }
    def AddAsync(self, imageryOverlay:"IAgStkGraphicsGlobeImageOverlay") -> None:
        """Adds imageryOverlay to the collection asynchronously."""
        return self._intf.invoke(IAgStkGraphicsImageCollection._metadata, IAgStkGraphicsImageCollection._AddAsync_metadata, imageryOverlay)

    _IndexOf_metadata = { "name" : "IndexOf",
            "arg_types" : (agcom.PVOID, POINTER(agcom.INT),),
            "marshallers" : (agmarshall.AgInterface_in_arg("IAgStkGraphicsGlobeImageOverlay"), agmarshall.INT_arg,) }
    def IndexOf(self, imageryOverlay:"IAgStkGraphicsGlobeImageOverlay") -> int:
        """Gets the index of the specified globe image overlay."""
        return self._intf.invoke(IAgStkGraphicsImageCollection._metadata, IAgStkGraphicsImageCollection._IndexOf_metadata, imageryOverlay, out_arg())

    _IndexOfUriString_metadata = { "name" : "IndexOfUriString",
            "arg_types" : (agcom.BSTR, POINTER(agcom.INT),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.INT_arg,) }
    def IndexOfUriString(self, stringUri:str) -> int:
        """Gets the index of the globe image overlay with the specified Uri."""
        return self._intf.invoke(IAgStkGraphicsImageCollection._metadata, IAgStkGraphicsImageCollection._IndexOfUriString_metadata, stringUri, out_arg())

    _AddUriString_metadata = { "name" : "AddUriString",
            "arg_types" : (agcom.BSTR, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.AgInterface_out_arg,) }
    def AddUriString(self, uri:str) -> "IAgStkGraphicsGlobeImageOverlay":
        """Creates a globe overlay from the uri, which represents a uri, and adds it to the collection."""
        return self._intf.invoke(IAgStkGraphicsImageCollection._metadata, IAgStkGraphicsImageCollection._AddUriString_metadata, uri, out_arg())

    _AddAsyncUriString_metadata = { "name" : "AddAsyncUriString",
            "arg_types" : (agcom.BSTR, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.AgInterface_out_arg,) }
    def AddAsyncUriString(self, uri:str) -> "IAgStkGraphicsGlobeImageOverlay":
        """Creates a globe image overlay from the uri, which represents a uri, and adds it to the collection asynchronously."""
        return self._intf.invoke(IAgStkGraphicsImageCollection._metadata, IAgStkGraphicsImageCollection._AddAsyncUriString_metadata, uri, out_arg())

    _Swap_metadata = { "name" : "Swap",
            "arg_types" : (agcom.PVOID, agcom.PVOID,),
            "marshallers" : (agmarshall.AgInterface_in_arg("IAgStkGraphicsGlobeImageOverlay"), agmarshall.AgInterface_in_arg("IAgStkGraphicsGlobeImageOverlay"),) }
    def Swap(self, imageryOverlay1:"IAgStkGraphicsGlobeImageOverlay", imageryOverlay2:"IAgStkGraphicsGlobeImageOverlay") -> None:
        """Swaps the position of two globe image overlay objects."""
        return self._intf.invoke(IAgStkGraphicsImageCollection._metadata, IAgStkGraphicsImageCollection._Swap_metadata, imageryOverlay1, imageryOverlay2)

    _SwapByIndex_metadata = { "name" : "SwapByIndex",
            "arg_types" : (agcom.INT, agcom.INT,),
            "marshallers" : (agmarshall.INT_arg, agmarshall.INT_arg,) }
    def SwapByIndex(self, index1:int, index2:int) -> None:
        """Swaps the position of two globe image overlay objects at the specified indices."""
        return self._intf.invoke(IAgStkGraphicsImageCollection._metadata, IAgStkGraphicsImageCollection._SwapByIndex_metadata, index1, index2)

    _Move_metadata = { "name" : "Move",
            "arg_types" : (agcom.PVOID, agcom.INT,),
            "marshallers" : (agmarshall.AgInterface_in_arg("IAgStkGraphicsGlobeImageOverlay"), agmarshall.INT_arg,) }
    def Move(self, imageryOverlay:"IAgStkGraphicsGlobeImageOverlay", newPosition:int) -> None:
        """Moves the globe image overlay to the specified position."""
        return self._intf.invoke(IAgStkGraphicsImageCollection._metadata, IAgStkGraphicsImageCollection._Move_metadata, imageryOverlay, newPosition)

    _MoveByIndex_metadata = { "name" : "MoveByIndex",
            "arg_types" : (agcom.INT, agcom.INT,),
            "marshallers" : (agmarshall.INT_arg, agmarshall.INT_arg,) }
    def MoveByIndex(self, index:int, newPosition:int) -> None:
        """Moves the globe image overlay at the specified index to the specified position."""
        return self._intf.invoke(IAgStkGraphicsImageCollection._metadata, IAgStkGraphicsImageCollection._MoveByIndex_metadata, index, newPosition)

    _BringToFront_metadata = { "name" : "BringToFront",
            "arg_types" : (agcom.PVOID,),
            "marshallers" : (agmarshall.AgInterface_in_arg("IAgStkGraphicsGlobeImageOverlay"),) }
    def BringToFront(self, imageryOverlay:"IAgStkGraphicsGlobeImageOverlay") -> None:
        """Brings the globe image overlay to the front of the collection so it is rendered first or on the bottom."""
        return self._intf.invoke(IAgStkGraphicsImageCollection._metadata, IAgStkGraphicsImageCollection._BringToFront_metadata, imageryOverlay)

    _SendToBack_metadata = { "name" : "SendToBack",
            "arg_types" : (agcom.PVOID,),
            "marshallers" : (agmarshall.AgInterface_in_arg("IAgStkGraphicsGlobeImageOverlay"),) }
    def SendToBack(self, imageryOverlay:"IAgStkGraphicsGlobeImageOverlay") -> None:
        """Sends the globe image overlay to the back of the collection so it is rendered last or on the top."""
        return self._intf.invoke(IAgStkGraphicsImageCollection._metadata, IAgStkGraphicsImageCollection._SendToBack_metadata, imageryOverlay)

    __getitem__ = Item



agcls.AgClassCatalog.add_catalog_entry("{797b7253-9205-47a1-b49b-edf6e06326c0}", IAgStkGraphicsImageCollection)
agcls.AgTypeNameMap["IAgStkGraphicsImageCollection"] = IAgStkGraphicsImageCollection

class IAgStkGraphicsAlphaFromLuminanceFilter(object):
    """Adds an alpha band to the source raster derived from the luminance of the raster's color bands."""
    _num_methods = 0
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{9ee1933e-8f0d-4fca-8386-e03194e483da}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : {  }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsAlphaFromLuminanceFilter._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsAlphaFromLuminanceFilter from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsAlphaFromLuminanceFilter.__dict__ and type(IAgStkGraphicsAlphaFromLuminanceFilter.__dict__[attrname]) == property:
            return IAgStkGraphicsAlphaFromLuminanceFilter.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsAlphaFromLuminanceFilter.")
    

agcls.AgClassCatalog.add_catalog_entry("{9ee1933e-8f0d-4fca-8386-e03194e483da}", IAgStkGraphicsAlphaFromLuminanceFilter)
agcls.AgTypeNameMap["IAgStkGraphicsAlphaFromLuminanceFilter"] = IAgStkGraphicsAlphaFromLuminanceFilter

class IAgStkGraphicsAlphaFromPixelFilter(object):
    """Adds an alpha band to the source raster based on the value of its first pixel. All pixels in the source raster that are the same color as the first pixel will be made transparent."""
    _num_methods = 0
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{071460a3-f86a-4c28-b2bf-22946db06ac8}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : {  }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsAlphaFromPixelFilter._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsAlphaFromPixelFilter from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsAlphaFromPixelFilter.__dict__ and type(IAgStkGraphicsAlphaFromPixelFilter.__dict__[attrname]) == property:
            return IAgStkGraphicsAlphaFromPixelFilter.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsAlphaFromPixelFilter.")
    

agcls.AgClassCatalog.add_catalog_entry("{071460a3-f86a-4c28-b2bf-22946db06ac8}", IAgStkGraphicsAlphaFromPixelFilter)
agcls.AgTypeNameMap["IAgStkGraphicsAlphaFromPixelFilter"] = IAgStkGraphicsAlphaFromPixelFilter

class IAgStkGraphicsAlphaFromRasterFilter(object):
    """Adds an alpha band to the source raster derived from the color bands or alpha of another raster. This filter can be used to apply an alpha mask to the source raster."""
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{77326f5e-c3f3-4660-8df4-6225cfdc0870}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_Raster" : 1,
                             "set_Raster" : 2, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsAlphaFromRasterFilter._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsAlphaFromRasterFilter from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsAlphaFromRasterFilter.__dict__ and type(IAgStkGraphicsAlphaFromRasterFilter.__dict__[attrname]) == property:
            return IAgStkGraphicsAlphaFromRasterFilter.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsAlphaFromRasterFilter.")
    
    _get_Raster_metadata = { "name" : "Raster",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def Raster(self) -> "IAgStkGraphicsRaster":
        """Gets or sets the raster that the source raster will use to derive an alpha band."""
        return self._intf.get_property(IAgStkGraphicsAlphaFromRasterFilter._metadata, IAgStkGraphicsAlphaFromRasterFilter._get_Raster_metadata)

    _set_Raster_metadata = { "name" : "Raster",
            "arg_types" : (agcom.PVOID,),
            "marshallers" : (agmarshall.AgInterface_in_arg("IAgStkGraphicsRaster"),) }
    @Raster.setter
    def Raster(self, raster:"IAgStkGraphicsRaster") -> None:
        return self._intf.set_property(IAgStkGraphicsAlphaFromRasterFilter._metadata, IAgStkGraphicsAlphaFromRasterFilter._set_Raster_metadata, raster)


agcls.AgClassCatalog.add_catalog_entry("{77326f5e-c3f3-4660-8df4-6225cfdc0870}", IAgStkGraphicsAlphaFromRasterFilter)
agcls.AgTypeNameMap["IAgStkGraphicsAlphaFromRasterFilter"] = IAgStkGraphicsAlphaFromRasterFilter

class IAgStkGraphicsBandExtractFilter(object):
    """Extracts a band or set of bands from the source raster. The extract format property specifies the bands and the order of the bands that will be extracted."""
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{68723ebb-619a-4d11-bb5a-27200ef0e15c}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_ExtractFormat" : 1,
                             "set_ExtractFormat" : 2, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsBandExtractFilter._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsBandExtractFilter from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsBandExtractFilter.__dict__ and type(IAgStkGraphicsBandExtractFilter.__dict__[attrname]) == property:
            return IAgStkGraphicsBandExtractFilter.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsBandExtractFilter.")
    
    _get_ExtractFormat_metadata = { "name" : "ExtractFormat",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEStkGraphicsRasterFormat),) }
    @property
    def ExtractFormat(self) -> "AgEStkGraphicsRasterFormat":
        """Gets or sets the raster format containing the bands and the order of the bands that will be extracted."""
        return self._intf.get_property(IAgStkGraphicsBandExtractFilter._metadata, IAgStkGraphicsBandExtractFilter._get_ExtractFormat_metadata)

    _set_ExtractFormat_metadata = { "name" : "ExtractFormat",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEStkGraphicsRasterFormat),) }
    @ExtractFormat.setter
    def ExtractFormat(self, extractFormat:"AgEStkGraphicsRasterFormat") -> None:
        return self._intf.set_property(IAgStkGraphicsBandExtractFilter._metadata, IAgStkGraphicsBandExtractFilter._set_ExtractFormat_metadata, extractFormat)


agcls.AgClassCatalog.add_catalog_entry("{68723ebb-619a-4d11-bb5a-27200ef0e15c}", IAgStkGraphicsBandExtractFilter)
agcls.AgTypeNameMap["IAgStkGraphicsBandExtractFilter"] = IAgStkGraphicsBandExtractFilter

class IAgStkGraphicsBandOrderFilter(object):
    """Reorders or swizzles the bands of the source raster to match the band order of the raster format specified by the band order property. When maintain raster format is true, the source raster's format is maintained after swizzling."""
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{a4a76805-e8e4-4bb6-878c-dcb0da6d84d3}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_BandOrder" : 1,
                             "set_BandOrder" : 2,
                             "get_MaintainRasterFormat" : 3,
                             "set_MaintainRasterFormat" : 4, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsBandOrderFilter._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsBandOrderFilter from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsBandOrderFilter.__dict__ and type(IAgStkGraphicsBandOrderFilter.__dict__[attrname]) == property:
            return IAgStkGraphicsBandOrderFilter.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsBandOrderFilter.")
    
    _get_BandOrder_metadata = { "name" : "BandOrder",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEStkGraphicsRasterFormat),) }
    @property
    def BandOrder(self) -> "AgEStkGraphicsRasterFormat":
        """Gets or sets the raster format indicating the desired order of the bands in the source raster."""
        return self._intf.get_property(IAgStkGraphicsBandOrderFilter._metadata, IAgStkGraphicsBandOrderFilter._get_BandOrder_metadata)

    _set_BandOrder_metadata = { "name" : "BandOrder",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEStkGraphicsRasterFormat),) }
    @BandOrder.setter
    def BandOrder(self, bandOrder:"AgEStkGraphicsRasterFormat") -> None:
        return self._intf.set_property(IAgStkGraphicsBandOrderFilter._metadata, IAgStkGraphicsBandOrderFilter._set_BandOrder_metadata, bandOrder)

    _get_MaintainRasterFormat_metadata = { "name" : "MaintainRasterFormat",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def MaintainRasterFormat(self) -> bool:
        """Gets or sets a value indicating whether to maintain the source raster's format after the filter is applied. When true, the source raster's format is maintained after swizzling."""
        return self._intf.get_property(IAgStkGraphicsBandOrderFilter._metadata, IAgStkGraphicsBandOrderFilter._get_MaintainRasterFormat_metadata)

    _set_MaintainRasterFormat_metadata = { "name" : "MaintainRasterFormat",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @MaintainRasterFormat.setter
    def MaintainRasterFormat(self, maintainRasterFormat:bool) -> None:
        return self._intf.set_property(IAgStkGraphicsBandOrderFilter._metadata, IAgStkGraphicsBandOrderFilter._set_MaintainRasterFormat_metadata, maintainRasterFormat)


agcls.AgClassCatalog.add_catalog_entry("{a4a76805-e8e4-4bb6-878c-dcb0da6d84d3}", IAgStkGraphicsBandOrderFilter)
agcls.AgTypeNameMap["IAgStkGraphicsBandOrderFilter"] = IAgStkGraphicsBandOrderFilter

class IAgStkGraphicsBlurFilter(object):
    """Applies a convolution filter to blur or smooth the source raster. Can be used to reduce noise in the raster."""
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{78e623b1-dc80-478d-acb8-a552fa136ccc}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_Method" : 1,
                             "set_Method" : 2, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsBlurFilter._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsBlurFilter from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsBlurFilter.__dict__ and type(IAgStkGraphicsBlurFilter.__dict__[attrname]) == property:
            return IAgStkGraphicsBlurFilter.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsBlurFilter.")
    
    _get_Method_metadata = { "name" : "Method",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEStkGraphicsBlurMethod),) }
    @property
    def Method(self) -> "AgEStkGraphicsBlurMethod":
        """Gets or sets the method used to blur the source raster."""
        return self._intf.get_property(IAgStkGraphicsBlurFilter._metadata, IAgStkGraphicsBlurFilter._get_Method_metadata)

    _set_Method_metadata = { "name" : "Method",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEStkGraphicsBlurMethod),) }
    @Method.setter
    def Method(self, method:"AgEStkGraphicsBlurMethod") -> None:
        return self._intf.set_property(IAgStkGraphicsBlurFilter._metadata, IAgStkGraphicsBlurFilter._set_Method_metadata, method)


agcls.AgClassCatalog.add_catalog_entry("{78e623b1-dc80-478d-acb8-a552fa136ccc}", IAgStkGraphicsBlurFilter)
agcls.AgTypeNameMap["IAgStkGraphicsBlurFilter"] = IAgStkGraphicsBlurFilter

class IAgStkGraphicsBrightnessFilter(object):
    """Adjusts the brightness of the source raster's color bands. The adjustment to brightness is a value between -1 and 1, corresponding to least bright to most bright."""
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{fd8324ea-dbc2-42a5-88ba-c2769fd4a28e}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_Adjustment" : 1,
                             "set_Adjustment" : 2, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsBrightnessFilter._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsBrightnessFilter from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsBrightnessFilter.__dict__ and type(IAgStkGraphicsBrightnessFilter.__dict__[attrname]) == property:
            return IAgStkGraphicsBrightnessFilter.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsBrightnessFilter.")
    
    _get_Adjustment_metadata = { "name" : "Adjustment",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def Adjustment(self) -> float:
        """Gets or sets the brightness adjustment value for the filter. The value must be between -1 and 1, corresponding to least bright to most bright."""
        return self._intf.get_property(IAgStkGraphicsBrightnessFilter._metadata, IAgStkGraphicsBrightnessFilter._get_Adjustment_metadata)

    _set_Adjustment_metadata = { "name" : "Adjustment",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @Adjustment.setter
    def Adjustment(self, adjustment:float) -> None:
        return self._intf.set_property(IAgStkGraphicsBrightnessFilter._metadata, IAgStkGraphicsBrightnessFilter._set_Adjustment_metadata, adjustment)


agcls.AgClassCatalog.add_catalog_entry("{fd8324ea-dbc2-42a5-88ba-c2769fd4a28e}", IAgStkGraphicsBrightnessFilter)
agcls.AgTypeNameMap["IAgStkGraphicsBrightnessFilter"] = IAgStkGraphicsBrightnessFilter

class IAgStkGraphicsColorToLuminanceFilter(object):
    """Extracts a luminance band derived from the color bands of the source raster."""
    _num_methods = 0
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{bc1d198f-705b-452b-8e51-1c600c547594}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : {  }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsColorToLuminanceFilter._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsColorToLuminanceFilter from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsColorToLuminanceFilter.__dict__ and type(IAgStkGraphicsColorToLuminanceFilter.__dict__[attrname]) == property:
            return IAgStkGraphicsColorToLuminanceFilter.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsColorToLuminanceFilter.")
    

agcls.AgClassCatalog.add_catalog_entry("{bc1d198f-705b-452b-8e51-1c600c547594}", IAgStkGraphicsColorToLuminanceFilter)
agcls.AgTypeNameMap["IAgStkGraphicsColorToLuminanceFilter"] = IAgStkGraphicsColorToLuminanceFilter

class IAgStkGraphicsContrastFilter(object):
    """Adjusts the contrast of the source raster. The adjustment to contrast is a value between -1 and 1, corresponding to least contrast to most contrast."""
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{47ea43c3-5ffd-4935-8569-bb19ee6b0799}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_Adjustment" : 1,
                             "set_Adjustment" : 2, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsContrastFilter._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsContrastFilter from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsContrastFilter.__dict__ and type(IAgStkGraphicsContrastFilter.__dict__[attrname]) == property:
            return IAgStkGraphicsContrastFilter.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsContrastFilter.")
    
    _get_Adjustment_metadata = { "name" : "Adjustment",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def Adjustment(self) -> float:
        """Gets or sets the contrast adjustment value for the filter. The value must be between -1 and 1, corresponding to least contrast to most contrast."""
        return self._intf.get_property(IAgStkGraphicsContrastFilter._metadata, IAgStkGraphicsContrastFilter._get_Adjustment_metadata)

    _set_Adjustment_metadata = { "name" : "Adjustment",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @Adjustment.setter
    def Adjustment(self, adjustment:float) -> None:
        return self._intf.set_property(IAgStkGraphicsContrastFilter._metadata, IAgStkGraphicsContrastFilter._set_Adjustment_metadata, adjustment)


agcls.AgClassCatalog.add_catalog_entry("{47ea43c3-5ffd-4935-8569-bb19ee6b0799}", IAgStkGraphicsContrastFilter)
agcls.AgTypeNameMap["IAgStkGraphicsContrastFilter"] = IAgStkGraphicsContrastFilter

class IAgStkGraphicsConvolutionFilter(object):
    """Applies convolution to the source raster. Convolution is the modification of a pixel's value based on the values of its surrounding pixels. The kernel is the numerical matrix that is applied to each pixel in this process..."""
    _num_methods = 6
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{65e3646d-dfac-40af-b37f-15596ef13292}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_Divisor" : 1,
                             "set_Divisor" : 2,
                             "get_Offset" : 3,
                             "set_Offset" : 4,
                             "get_Kernel" : 5,
                             "set_Kernel" : 6, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsConvolutionFilter._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsConvolutionFilter from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsConvolutionFilter.__dict__ and type(IAgStkGraphicsConvolutionFilter.__dict__[attrname]) == property:
            return IAgStkGraphicsConvolutionFilter.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsConvolutionFilter.")
    
    _get_Divisor_metadata = { "name" : "Divisor",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def Divisor(self) -> float:
        """Gets or sets the divisor for the result of the convolution kernel operation."""
        return self._intf.get_property(IAgStkGraphicsConvolutionFilter._metadata, IAgStkGraphicsConvolutionFilter._get_Divisor_metadata)

    _set_Divisor_metadata = { "name" : "Divisor",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @Divisor.setter
    def Divisor(self, divisor:float) -> None:
        return self._intf.set_property(IAgStkGraphicsConvolutionFilter._metadata, IAgStkGraphicsConvolutionFilter._set_Divisor_metadata, divisor)

    _get_Offset_metadata = { "name" : "Offset",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def Offset(self) -> float:
        """Gets or sets the offset for the result of the convolution kernel operation. The value is added to the result of the operation."""
        return self._intf.get_property(IAgStkGraphicsConvolutionFilter._metadata, IAgStkGraphicsConvolutionFilter._get_Offset_metadata)

    _set_Offset_metadata = { "name" : "Offset",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @Offset.setter
    def Offset(self, offset:float) -> None:
        return self._intf.set_property(IAgStkGraphicsConvolutionFilter._metadata, IAgStkGraphicsConvolutionFilter._set_Offset_metadata, offset)

    _get_Kernel_metadata = { "name" : "Kernel",
            "arg_types" : (POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg,) }
    @property
    def Kernel(self) -> list:
        """Gets or sets the convolution kernel of the filter. The array contains the 9 elements of the kernel of the convolution matrix..."""
        return self._intf.get_property(IAgStkGraphicsConvolutionFilter._metadata, IAgStkGraphicsConvolutionFilter._get_Kernel_metadata)

    _set_Kernel_metadata = { "name" : "Kernel",
            "arg_types" : (agcom.LPSAFEARRAY,),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg,) }
    @Kernel.setter
    def Kernel(self, kernel:list) -> None:
        return self._intf.set_property(IAgStkGraphicsConvolutionFilter._metadata, IAgStkGraphicsConvolutionFilter._set_Kernel_metadata, kernel)


agcls.AgClassCatalog.add_catalog_entry("{65e3646d-dfac-40af-b37f-15596ef13292}", IAgStkGraphicsConvolutionFilter)
agcls.AgTypeNameMap["IAgStkGraphicsConvolutionFilter"] = IAgStkGraphicsConvolutionFilter

class IAgStkGraphicsEdgeDetectFilter(object):
    """Applies a convolution filter to detect edges in the source raster."""
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{0919d5b6-9497-4027-9fa2-69afe60c5f02}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_Method" : 1,
                             "set_Method" : 2, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsEdgeDetectFilter._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsEdgeDetectFilter from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsEdgeDetectFilter.__dict__ and type(IAgStkGraphicsEdgeDetectFilter.__dict__[attrname]) == property:
            return IAgStkGraphicsEdgeDetectFilter.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsEdgeDetectFilter.")
    
    _get_Method_metadata = { "name" : "Method",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEStkGraphicsEdgeDetectMethod),) }
    @property
    def Method(self) -> "AgEStkGraphicsEdgeDetectMethod":
        """Gets or sets the method used to detect edges in the source raster."""
        return self._intf.get_property(IAgStkGraphicsEdgeDetectFilter._metadata, IAgStkGraphicsEdgeDetectFilter._get_Method_metadata)

    _set_Method_metadata = { "name" : "Method",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEStkGraphicsEdgeDetectMethod),) }
    @Method.setter
    def Method(self, method:"AgEStkGraphicsEdgeDetectMethod") -> None:
        return self._intf.set_property(IAgStkGraphicsEdgeDetectFilter._metadata, IAgStkGraphicsEdgeDetectFilter._set_Method_metadata, method)


agcls.AgClassCatalog.add_catalog_entry("{0919d5b6-9497-4027-9fa2-69afe60c5f02}", IAgStkGraphicsEdgeDetectFilter)
agcls.AgTypeNameMap["IAgStkGraphicsEdgeDetectFilter"] = IAgStkGraphicsEdgeDetectFilter

class IAgStkGraphicsFilteringRasterStream(object):
    """A class decorator for applying a raster filter to each update of a raster stream. Can be used to apply filters to videos and other raster streams as they are updated."""
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{75917a6b-c2f9-4350-879a-248bcc239e6b}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_Filter" : 1,
                             "get_Stream" : 2, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsFilteringRasterStream._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsFilteringRasterStream from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsFilteringRasterStream.__dict__ and type(IAgStkGraphicsFilteringRasterStream.__dict__[attrname]) == property:
            return IAgStkGraphicsFilteringRasterStream.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsFilteringRasterStream.")
    
    _get_Filter_metadata = { "name" : "Filter",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def Filter(self) -> "IAgStkGraphicsRasterFilter":
        """Gets the raster filter that will be applied to the raster stream on each update."""
        return self._intf.get_property(IAgStkGraphicsFilteringRasterStream._metadata, IAgStkGraphicsFilteringRasterStream._get_Filter_metadata)

    _get_Stream_metadata = { "name" : "Stream",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def Stream(self) -> "IAgStkGraphicsRasterStream":
        """Gets the raster stream that will have the raster filter applied on each update."""
        return self._intf.get_property(IAgStkGraphicsFilteringRasterStream._metadata, IAgStkGraphicsFilteringRasterStream._get_Stream_metadata)


agcls.AgClassCatalog.add_catalog_entry("{75917a6b-c2f9-4350-879a-248bcc239e6b}", IAgStkGraphicsFilteringRasterStream)
agcls.AgTypeNameMap["IAgStkGraphicsFilteringRasterStream"] = IAgStkGraphicsFilteringRasterStream

class IAgStkGraphicsFlipFilter(object):
    """Flips the source raster along the given flip axis."""
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{478edb08-272a-42b6-b486-a81a5bcaf92b}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_FlipAxis" : 1,
                             "set_FlipAxis" : 2, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsFlipFilter._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsFlipFilter from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsFlipFilter.__dict__ and type(IAgStkGraphicsFlipFilter.__dict__[attrname]) == property:
            return IAgStkGraphicsFlipFilter.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsFlipFilter.")
    
    _get_FlipAxis_metadata = { "name" : "FlipAxis",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEStkGraphicsFlipAxis),) }
    @property
    def FlipAxis(self) -> "AgEStkGraphicsFlipAxis":
        """Gets or sets the flip axis along which the source raster will be flipped."""
        return self._intf.get_property(IAgStkGraphicsFlipFilter._metadata, IAgStkGraphicsFlipFilter._get_FlipAxis_metadata)

    _set_FlipAxis_metadata = { "name" : "FlipAxis",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEStkGraphicsFlipAxis),) }
    @FlipAxis.setter
    def FlipAxis(self, flipAxis:"AgEStkGraphicsFlipAxis") -> None:
        return self._intf.set_property(IAgStkGraphicsFlipFilter._metadata, IAgStkGraphicsFlipFilter._set_FlipAxis_metadata, flipAxis)


agcls.AgClassCatalog.add_catalog_entry("{478edb08-272a-42b6-b486-a81a5bcaf92b}", IAgStkGraphicsFlipFilter)
agcls.AgTypeNameMap["IAgStkGraphicsFlipFilter"] = IAgStkGraphicsFlipFilter

class IAgStkGraphicsGammaCorrectionFilter(object):
    """Applies gamma correction to the source raster. The gamma is a value between .2 and 5. The default gamma value is 2.2."""
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{c4b3703d-c059-47c7-8b49-11bbedd7975a}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_Gamma" : 1,
                             "set_Gamma" : 2, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsGammaCorrectionFilter._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsGammaCorrectionFilter from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsGammaCorrectionFilter.__dict__ and type(IAgStkGraphicsGammaCorrectionFilter.__dict__[attrname]) == property:
            return IAgStkGraphicsGammaCorrectionFilter.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsGammaCorrectionFilter.")
    
    _get_Gamma_metadata = { "name" : "Gamma",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def Gamma(self) -> float:
        """Gets or sets the gamma value for the filter. The value must be between .2 and 5. The default gamma value is 2.2."""
        return self._intf.get_property(IAgStkGraphicsGammaCorrectionFilter._metadata, IAgStkGraphicsGammaCorrectionFilter._get_Gamma_metadata)

    _set_Gamma_metadata = { "name" : "Gamma",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @Gamma.setter
    def Gamma(self, gamma:float) -> None:
        return self._intf.set_property(IAgStkGraphicsGammaCorrectionFilter._metadata, IAgStkGraphicsGammaCorrectionFilter._set_Gamma_metadata, gamma)


agcls.AgClassCatalog.add_catalog_entry("{c4b3703d-c059-47c7-8b49-11bbedd7975a}", IAgStkGraphicsGammaCorrectionFilter)
agcls.AgTypeNameMap["IAgStkGraphicsGammaCorrectionFilter"] = IAgStkGraphicsGammaCorrectionFilter

class IAgStkGraphicsGaussianBlurFilter(object):
    """Applies a convolution filter to blur the source raster using the Gaussian function."""
    _num_methods = 0
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{b5b0a55e-980a-453f-b7b4-7c7024f92ef4}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : {  }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsGaussianBlurFilter._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsGaussianBlurFilter from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsGaussianBlurFilter.__dict__ and type(IAgStkGraphicsGaussianBlurFilter.__dict__[attrname]) == property:
            return IAgStkGraphicsGaussianBlurFilter.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsGaussianBlurFilter.")
    

agcls.AgClassCatalog.add_catalog_entry("{b5b0a55e-980a-453f-b7b4-7c7024f92ef4}", IAgStkGraphicsGaussianBlurFilter)
agcls.AgTypeNameMap["IAgStkGraphicsGaussianBlurFilter"] = IAgStkGraphicsGaussianBlurFilter

class IAgStkGraphicsGradientDetectFilter(object):
    """Applies a convolution filter to detect gradients in the source raster."""
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{5a9e0d4c-4f36-47c8-8f81-ffdfe63cb112}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_Method" : 1,
                             "set_Method" : 2, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsGradientDetectFilter._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsGradientDetectFilter from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsGradientDetectFilter.__dict__ and type(IAgStkGraphicsGradientDetectFilter.__dict__[attrname]) == property:
            return IAgStkGraphicsGradientDetectFilter.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsGradientDetectFilter.")
    
    _get_Method_metadata = { "name" : "Method",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEStkGraphicsGradientDetectMethod),) }
    @property
    def Method(self) -> "AgEStkGraphicsGradientDetectMethod":
        """Gets or sets the method used to detect gradients in the source raster."""
        return self._intf.get_property(IAgStkGraphicsGradientDetectFilter._metadata, IAgStkGraphicsGradientDetectFilter._get_Method_metadata)

    _set_Method_metadata = { "name" : "Method",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEStkGraphicsGradientDetectMethod),) }
    @Method.setter
    def Method(self, method:"AgEStkGraphicsGradientDetectMethod") -> None:
        return self._intf.set_property(IAgStkGraphicsGradientDetectFilter._metadata, IAgStkGraphicsGradientDetectFilter._set_Method_metadata, method)


agcls.AgClassCatalog.add_catalog_entry("{5a9e0d4c-4f36-47c8-8f81-ffdfe63cb112}", IAgStkGraphicsGradientDetectFilter)
agcls.AgTypeNameMap["IAgStkGraphicsGradientDetectFilter"] = IAgStkGraphicsGradientDetectFilter

class IAgStkGraphicsLevelsFilter(object):
    """Adjusts the band levels of the source raster linearly."""
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{e0d6dad5-cfcb-476a-95fd-2cd486114a68}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "SetLevelAdjustment" : 1,
                             "ClearAdjustments" : 2, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsLevelsFilter._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsLevelsFilter from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsLevelsFilter.__dict__ and type(IAgStkGraphicsLevelsFilter.__dict__[attrname]) == property:
            return IAgStkGraphicsLevelsFilter.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsLevelsFilter.")
    
    _SetLevelAdjustment_metadata = { "name" : "SetLevelAdjustment",
            "arg_types" : (agcom.LONG, agcom.INT,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEStkGraphicsRasterBand), agmarshall.INT_arg,) }
    def SetLevelAdjustment(self, band:"AgEStkGraphicsRasterBand", adjustment:int) -> None:
        """Sets the linear level adjustment value for the given raster band. Both negative and positive values are accepted."""
        return self._intf.invoke(IAgStkGraphicsLevelsFilter._metadata, IAgStkGraphicsLevelsFilter._SetLevelAdjustment_metadata, band, adjustment)

    _ClearAdjustments_metadata = { "name" : "ClearAdjustments",
            "arg_types" : (),
            "marshallers" : () }
    def ClearAdjustments(self) -> None:
        """Clears the level adjustment values for all bands."""
        return self._intf.invoke(IAgStkGraphicsLevelsFilter._metadata, IAgStkGraphicsLevelsFilter._ClearAdjustments_metadata, )


agcls.AgClassCatalog.add_catalog_entry("{e0d6dad5-cfcb-476a-95fd-2cd486114a68}", IAgStkGraphicsLevelsFilter)
agcls.AgTypeNameMap["IAgStkGraphicsLevelsFilter"] = IAgStkGraphicsLevelsFilter

class IAgStkGraphicsProjectionRasterStreamPluginActivator(object):
    """The Activator class provides methods to load COM plugins that implement projection and raster streaming. For more information about the projection and raster plugins, see the STK Programming Interface."""
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{0c1e9236-42e6-4539-9003-06e06f906432}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "CreateFromDisplayName" : 1,
                             "GetAvailableDisplayNames" : 2, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsProjectionRasterStreamPluginActivator._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsProjectionRasterStreamPluginActivator from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsProjectionRasterStreamPluginActivator.__dict__ and type(IAgStkGraphicsProjectionRasterStreamPluginActivator.__dict__[attrname]) == property:
            return IAgStkGraphicsProjectionRasterStreamPluginActivator.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsProjectionRasterStreamPluginActivator.")
    
    _CreateFromDisplayName_metadata = { "name" : "CreateFromDisplayName",
            "arg_types" : (agcom.BSTR, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.AgInterface_out_arg,) }
    def CreateFromDisplayName(self, displayName:str) -> "IAgStkGraphicsProjectionRasterStreamPluginProxy":
        """Loads a projection/raster COM plugin associated with the specified display name and returns a proxy object that allows accessing the raster and projection streams implemented by the plugin."""
        return self._intf.invoke(IAgStkGraphicsProjectionRasterStreamPluginActivator._metadata, IAgStkGraphicsProjectionRasterStreamPluginActivator._CreateFromDisplayName_metadata, displayName, out_arg())

    _GetAvailableDisplayNames_metadata = { "name" : "GetAvailableDisplayNames",
            "arg_types" : (POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg,) }
    def GetAvailableDisplayNames(self) -> list:
        """Gets a list of available projection/raster plugins' Display Names (Programmatic Identifiers)."""
        return self._intf.invoke(IAgStkGraphicsProjectionRasterStreamPluginActivator._metadata, IAgStkGraphicsProjectionRasterStreamPluginActivator._GetAvailableDisplayNames_metadata, out_arg())


agcls.AgClassCatalog.add_catalog_entry("{0c1e9236-42e6-4539-9003-06e06f906432}", IAgStkGraphicsProjectionRasterStreamPluginActivator)
agcls.AgTypeNameMap["IAgStkGraphicsProjectionRasterStreamPluginActivator"] = IAgStkGraphicsProjectionRasterStreamPluginActivator

class IAgStkGraphicsProjectionRasterStreamPluginProxy(object):
    """A proxy class provides access to the raster and projection streams implemented by a plugin. Proxies are instantiated using projection raster stream plugin activator."""
    _num_methods = 5
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{5a28d922-9211-4860-81ae-0d98d38ca6d7}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_RasterStream" : 1,
                             "get_ProjectionStream" : 2,
                             "get_IsRasterStreamSupported" : 3,
                             "get_IsProjectionStreamSupported" : 4,
                             "get_RealPluginObject" : 5, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsProjectionRasterStreamPluginProxy._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsProjectionRasterStreamPluginProxy from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsProjectionRasterStreamPluginProxy.__dict__ and type(IAgStkGraphicsProjectionRasterStreamPluginProxy.__dict__[attrname]) == property:
            return IAgStkGraphicsProjectionRasterStreamPluginProxy.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsProjectionRasterStreamPluginProxy.")
    
    _get_RasterStream_metadata = { "name" : "RasterStream",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def RasterStream(self) -> "IAgStkGraphicsRasterStream":
        """Returns a raster stream."""
        return self._intf.get_property(IAgStkGraphicsProjectionRasterStreamPluginProxy._metadata, IAgStkGraphicsProjectionRasterStreamPluginProxy._get_RasterStream_metadata)

    _get_ProjectionStream_metadata = { "name" : "ProjectionStream",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def ProjectionStream(self) -> "IAgStkGraphicsProjectionStream":
        """Returns a projection stream."""
        return self._intf.get_property(IAgStkGraphicsProjectionRasterStreamPluginProxy._metadata, IAgStkGraphicsProjectionRasterStreamPluginProxy._get_ProjectionStream_metadata)

    _get_IsRasterStreamSupported_metadata = { "name" : "IsRasterStreamSupported",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def IsRasterStreamSupported(self) -> bool:
        """Returns true if the raster streaming is supported."""
        return self._intf.get_property(IAgStkGraphicsProjectionRasterStreamPluginProxy._metadata, IAgStkGraphicsProjectionRasterStreamPluginProxy._get_IsRasterStreamSupported_metadata)

    _get_IsProjectionStreamSupported_metadata = { "name" : "IsProjectionStreamSupported",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def IsProjectionStreamSupported(self) -> bool:
        """Returns true if the projection streaming is supported."""
        return self._intf.get_property(IAgStkGraphicsProjectionRasterStreamPluginProxy._metadata, IAgStkGraphicsProjectionRasterStreamPluginProxy._get_IsProjectionStreamSupported_metadata)

    _get_RealPluginObject_metadata = { "name" : "RealPluginObject",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def RealPluginObject(self) -> typing.Any:
        """Returns a pointer to plugin object's IUnknown interface."""
        return self._intf.get_property(IAgStkGraphicsProjectionRasterStreamPluginProxy._metadata, IAgStkGraphicsProjectionRasterStreamPluginProxy._get_RealPluginObject_metadata)


agcls.AgClassCatalog.add_catalog_entry("{5a28d922-9211-4860-81ae-0d98d38ca6d7}", IAgStkGraphicsProjectionRasterStreamPluginProxy)
agcls.AgTypeNameMap["IAgStkGraphicsProjectionRasterStreamPluginProxy"] = IAgStkGraphicsProjectionRasterStreamPluginProxy

class IAgStkGraphicsRaster(object):
    """A raster dataset. A raster consists of one or more bands, or sets of values, which are most commonly associated with colors when the raster represents an image..."""
    _num_methods = 10
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{e0113161-7dd5-4411-bca9-6175aad19b4e}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_Attributes" : 1,
                             "get_Width" : 2,
                             "get_Height" : 3,
                             "Flip" : 4,
                             "Rotate" : 5,
                             "Apply" : 6,
                             "ApplyInPlace" : 7,
                             "ExtractBand" : 8,
                             "ExtractBandFromRasterFormat" : 9,
                             "CopyFromRaster" : 10, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsRaster._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsRaster from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsRaster.__dict__ and type(IAgStkGraphicsRaster.__dict__[attrname]) == property:
            return IAgStkGraphicsRaster.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsRaster.")
    
    _get_Attributes_metadata = { "name" : "Attributes",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def Attributes(self) -> "IAgStkGraphicsRasterAttributes":
        """Gets the raster attributes that define the raster data."""
        return self._intf.get_property(IAgStkGraphicsRaster._metadata, IAgStkGraphicsRaster._get_Attributes_metadata)

    _get_Width_metadata = { "name" : "Width",
            "arg_types" : (POINTER(agcom.INT),),
            "marshallers" : (agmarshall.INT_arg,) }
    @property
    def Width(self) -> int:
        """Gets the width of the raster in pixels."""
        return self._intf.get_property(IAgStkGraphicsRaster._metadata, IAgStkGraphicsRaster._get_Width_metadata)

    _get_Height_metadata = { "name" : "Height",
            "arg_types" : (POINTER(agcom.INT),),
            "marshallers" : (agmarshall.INT_arg,) }
    @property
    def Height(self) -> int:
        """Gets the height of the raster in pixels."""
        return self._intf.get_property(IAgStkGraphicsRaster._metadata, IAgStkGraphicsRaster._get_Height_metadata)

    _Flip_metadata = { "name" : "Flip",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEStkGraphicsFlipAxis),) }
    def Flip(self, axis:"AgEStkGraphicsFlipAxis") -> None:
        """Flips the raster along the given axis."""
        return self._intf.invoke(IAgStkGraphicsRaster._metadata, IAgStkGraphicsRaster._Flip_metadata, axis)

    _Rotate_metadata = { "name" : "Rotate",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    def Rotate(self, angle:float) -> None:
        """Rotates the raster by the given angle."""
        return self._intf.invoke(IAgStkGraphicsRaster._metadata, IAgStkGraphicsRaster._Rotate_metadata, angle)

    _Apply_metadata = { "name" : "Apply",
            "arg_types" : (agcom.PVOID, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_in_arg("IAgStkGraphicsRasterFilter"), agmarshall.AgInterface_out_arg,) }
    def Apply(self, filter:"IAgStkGraphicsRasterFilter") -> "IAgStkGraphicsRaster":
        """Applies a raster filter to the raster and returns a new raster with the results of the filtering. The current raster is not modified."""
        return self._intf.invoke(IAgStkGraphicsRaster._metadata, IAgStkGraphicsRaster._Apply_metadata, filter, out_arg())

    _ApplyInPlace_metadata = { "name" : "ApplyInPlace",
            "arg_types" : (agcom.PVOID,),
            "marshallers" : (agmarshall.AgInterface_in_arg("IAgStkGraphicsRasterFilter"),) }
    def ApplyInPlace(self, filter:"IAgStkGraphicsRasterFilter") -> None:
        """Applies a raster filter to the raster. The current raster will contain the results of the filtering."""
        return self._intf.invoke(IAgStkGraphicsRaster._metadata, IAgStkGraphicsRaster._ApplyInPlace_metadata, filter)

    _ExtractBand_metadata = { "name" : "ExtractBand",
            "arg_types" : (agcom.LONG, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEStkGraphicsRasterBand), agmarshall.AgInterface_out_arg,) }
    def ExtractBand(self, band:"AgEStkGraphicsRasterBand") -> "IAgStkGraphicsRaster":
        """Extracts the band of raster data associated with the given raster band."""
        return self._intf.invoke(IAgStkGraphicsRaster._metadata, IAgStkGraphicsRaster._ExtractBand_metadata, band, out_arg())

    _ExtractBandFromRasterFormat_metadata = { "name" : "ExtractBandFromRasterFormat",
            "arg_types" : (agcom.LONG, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEStkGraphicsRasterFormat), agmarshall.AgInterface_out_arg,) }
    def ExtractBandFromRasterFormat(self, format:"AgEStkGraphicsRasterFormat") -> "IAgStkGraphicsRaster":
        """Extracts the bands of raster data associated with the given raster format."""
        return self._intf.invoke(IAgStkGraphicsRaster._metadata, IAgStkGraphicsRaster._ExtractBandFromRasterFormat_metadata, format, out_arg())

    _CopyFromRaster_metadata = { "name" : "CopyFromRaster",
            "arg_types" : (agcom.PVOID,),
            "marshallers" : (agmarshall.AgInterface_in_arg("IAgStkGraphicsRaster"),) }
    def CopyFromRaster(self, raster:"IAgStkGraphicsRaster") -> None:
        """Copies the data associated with the given raster into this raster."""
        return self._intf.invoke(IAgStkGraphicsRaster._metadata, IAgStkGraphicsRaster._CopyFromRaster_metadata, raster)


agcls.AgClassCatalog.add_catalog_entry("{e0113161-7dd5-4411-bca9-6175aad19b4e}", IAgStkGraphicsRaster)
agcls.AgTypeNameMap["IAgStkGraphicsRaster"] = IAgStkGraphicsRaster

class IAgStkGraphicsRasterAttributes(object):
    """The attributes describing a raster dataset. raster attributes define the memory layout of a raster, and includes properties defining the order of each raster band that the raster contains, as specified by the raster format..."""
    _num_methods = 11
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{067e0cd7-c1c5-41b7-93a8-f9ae8b67df25}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_Format" : 1,
                             "get_Type" : 2,
                             "get_Orientation" : 3,
                             "get_ByteLength" : 4,
                             "get_Width" : 5,
                             "get_Height" : 6,
                             "get_PixelAspectRatio" : 7,
                             "get_RowAlignment" : 8,
                             "get_NumberOfBands" : 9,
                             "get_RowStride" : 10,
                             "HasBand" : 11, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsRasterAttributes._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsRasterAttributes from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsRasterAttributes.__dict__ and type(IAgStkGraphicsRasterAttributes.__dict__[attrname]) == property:
            return IAgStkGraphicsRasterAttributes.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsRasterAttributes.")
    
    _get_Format_metadata = { "name" : "Format",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEStkGraphicsRasterFormat),) }
    @property
    def Format(self) -> "AgEStkGraphicsRasterFormat":
        """Gets the raster format associated with the attributes."""
        return self._intf.get_property(IAgStkGraphicsRasterAttributes._metadata, IAgStkGraphicsRasterAttributes._get_Format_metadata)

    _get_Type_metadata = { "name" : "Type",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEStkGraphicsRasterType),) }
    @property
    def Type(self) -> "AgEStkGraphicsRasterType":
        """Gets the raster type associated with the attributes."""
        return self._intf.get_property(IAgStkGraphicsRasterAttributes._metadata, IAgStkGraphicsRasterAttributes._get_Type_metadata)

    _get_Orientation_metadata = { "name" : "Orientation",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEStkGraphicsRasterOrientation),) }
    @property
    def Orientation(self) -> "AgEStkGraphicsRasterOrientation":
        """Gets the raster orientation associated with the attributes."""
        return self._intf.get_property(IAgStkGraphicsRasterAttributes._metadata, IAgStkGraphicsRasterAttributes._get_Orientation_metadata)

    _get_ByteLength_metadata = { "name" : "ByteLength",
            "arg_types" : (POINTER(agcom.INT),),
            "marshallers" : (agmarshall.INT_arg,) }
    @property
    def ByteLength(self) -> int:
        """Gets the size of the raster data in bytes."""
        return self._intf.get_property(IAgStkGraphicsRasterAttributes._metadata, IAgStkGraphicsRasterAttributes._get_ByteLength_metadata)

    _get_Width_metadata = { "name" : "Width",
            "arg_types" : (POINTER(agcom.INT),),
            "marshallers" : (agmarshall.INT_arg,) }
    @property
    def Width(self) -> int:
        """Gets the width of the raster in pixels."""
        return self._intf.get_property(IAgStkGraphicsRasterAttributes._metadata, IAgStkGraphicsRasterAttributes._get_Width_metadata)

    _get_Height_metadata = { "name" : "Height",
            "arg_types" : (POINTER(agcom.INT),),
            "marshallers" : (agmarshall.INT_arg,) }
    @property
    def Height(self) -> int:
        """Gets the height of the raster in pixels."""
        return self._intf.get_property(IAgStkGraphicsRasterAttributes._metadata, IAgStkGraphicsRasterAttributes._get_Height_metadata)

    _get_PixelAspectRatio_metadata = { "name" : "PixelAspectRatio",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def PixelAspectRatio(self) -> float:
        """Gets the pixel aspect ratio of the raster."""
        return self._intf.get_property(IAgStkGraphicsRasterAttributes._metadata, IAgStkGraphicsRasterAttributes._get_PixelAspectRatio_metadata)

    _get_RowAlignment_metadata = { "name" : "RowAlignment",
            "arg_types" : (POINTER(agcom.INT),),
            "marshallers" : (agmarshall.INT_arg,) }
    @property
    def RowAlignment(self) -> int:
        """Gets the row alignment of the raster data in bytes."""
        return self._intf.get_property(IAgStkGraphicsRasterAttributes._metadata, IAgStkGraphicsRasterAttributes._get_RowAlignment_metadata)

    _get_NumberOfBands_metadata = { "name" : "NumberOfBands",
            "arg_types" : (POINTER(agcom.INT),),
            "marshallers" : (agmarshall.INT_arg,) }
    @property
    def NumberOfBands(self) -> int:
        """Gets the number of bands comprising the raster."""
        return self._intf.get_property(IAgStkGraphicsRasterAttributes._metadata, IAgStkGraphicsRasterAttributes._get_NumberOfBands_metadata)

    _get_RowStride_metadata = { "name" : "RowStride",
            "arg_types" : (POINTER(agcom.INT),),
            "marshallers" : (agmarshall.INT_arg,) }
    @property
    def RowStride(self) -> int:
        """Gets the stride or scan/row width in bytes of the raster data."""
        return self._intf.get_property(IAgStkGraphicsRasterAttributes._metadata, IAgStkGraphicsRasterAttributes._get_RowStride_metadata)

    _HasBand_metadata = { "name" : "HasBand",
            "arg_types" : (agcom.LONG, POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEStkGraphicsRasterBand), agmarshall.VARIANT_BOOL_arg,) }
    def HasBand(self, band:"AgEStkGraphicsRasterBand") -> bool:
        """Gets whether the raster contains the given band."""
        return self._intf.invoke(IAgStkGraphicsRasterAttributes._metadata, IAgStkGraphicsRasterAttributes._HasBand_metadata, band, out_arg())


agcls.AgClassCatalog.add_catalog_entry("{067e0cd7-c1c5-41b7-93a8-f9ae8b67df25}", IAgStkGraphicsRasterAttributes)
agcls.AgTypeNameMap["IAgStkGraphicsRasterAttributes"] = IAgStkGraphicsRasterAttributes

class IAgStkGraphicsRasterFilter(object):
    """A filter for processing raster datasets. RasterFilter is the base class for all raster filters..."""
    _num_methods = 0
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{1d21525d-4204-47cc-8457-996e1a6eab7e}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : {  }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsRasterFilter._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsRasterFilter from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsRasterFilter.__dict__ and type(IAgStkGraphicsRasterFilter.__dict__[attrname]) == property:
            return IAgStkGraphicsRasterFilter.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsRasterFilter.")
    

agcls.AgClassCatalog.add_catalog_entry("{1d21525d-4204-47cc-8457-996e1a6eab7e}", IAgStkGraphicsRasterFilter)
agcls.AgTypeNameMap["IAgStkGraphicsRasterFilter"] = IAgStkGraphicsRasterFilter

class IAgStkGraphicsRasterStream(object):
    """A raster, the data of which, is updated dynamically at the specified update delta. The class can be used to stream video and other dynamic raster data to textures and other raster clients..."""
    _num_methods = 3
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{63f024ca-7113-4841-8d26-7a286458bd7c}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_UpdateDelta" : 1,
                             "set_UpdateDelta" : 2,
                             "Update" : 3, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsRasterStream._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsRasterStream from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsRasterStream.__dict__ and type(IAgStkGraphicsRasterStream.__dict__[attrname]) == property:
            return IAgStkGraphicsRasterStream.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsRasterStream.")
    
    _get_UpdateDelta_metadata = { "name" : "UpdateDelta",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def UpdateDelta(self) -> float:
        """Gets or sets the update delta of the raster stream in seconds. The update delta defines the interval at which the Update method will be called. The default update delta is 0, which will call the Update method every time the scene manager time changes..."""
        return self._intf.get_property(IAgStkGraphicsRasterStream._metadata, IAgStkGraphicsRasterStream._get_UpdateDelta_metadata)

    _set_UpdateDelta_metadata = { "name" : "UpdateDelta",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @UpdateDelta.setter
    def UpdateDelta(self, updateDelta:float) -> None:
        return self._intf.set_property(IAgStkGraphicsRasterStream._metadata, IAgStkGraphicsRasterStream._set_UpdateDelta_metadata, updateDelta)

    _Update_metadata = { "name" : "Update",
            "arg_types" : (agcom.PVOID, agcom.PVOID, POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.AgInterface_in_arg("IAgDate"), agmarshall.AgInterface_in_arg("IAgDate"), agmarshall.VARIANT_BOOL_arg,) }
    def Update(self, time:"IAgDate", nextTime:"IAgDate") -> bool:
        """When overridden in a derived class, updates the raster data associated with the raster stream at the specified time..."""
        return self._intf.invoke(IAgStkGraphicsRasterStream._metadata, IAgStkGraphicsRasterStream._Update_metadata, time, nextTime, out_arg())


agcls.AgClassCatalog.add_catalog_entry("{63f024ca-7113-4841-8d26-7a286458bd7c}", IAgStkGraphicsRasterStream)
agcls.AgTypeNameMap["IAgStkGraphicsRasterStream"] = IAgStkGraphicsRasterStream

class IAgStkGraphicsRotateFilter(object):
    """Rotates the source raster clockwise by the specified angle."""
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{4b6dc620-04e1-4956-be55-890fdb25bd40}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_Angle" : 1,
                             "set_Angle" : 2, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsRotateFilter._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsRotateFilter from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsRotateFilter.__dict__ and type(IAgStkGraphicsRotateFilter.__dict__[attrname]) == property:
            return IAgStkGraphicsRotateFilter.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsRotateFilter.")
    
    _get_Angle_metadata = { "name" : "Angle",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def Angle(self) -> float:
        """Gets or sets the counterclockwise rotation angle."""
        return self._intf.get_property(IAgStkGraphicsRotateFilter._metadata, IAgStkGraphicsRotateFilter._get_Angle_metadata)

    _set_Angle_metadata = { "name" : "Angle",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @Angle.setter
    def Angle(self, angle:float) -> None:
        return self._intf.set_property(IAgStkGraphicsRotateFilter._metadata, IAgStkGraphicsRotateFilter._set_Angle_metadata, angle)


agcls.AgClassCatalog.add_catalog_entry("{4b6dc620-04e1-4956-be55-890fdb25bd40}", IAgStkGraphicsRotateFilter)
agcls.AgTypeNameMap["IAgStkGraphicsRotateFilter"] = IAgStkGraphicsRotateFilter

class IAgStkGraphicsSequenceFilter(object):
    """Applies a sequence of filters to the source raster in the order in which they were added. When continue on failure is set to true, subsequent filters will still be applied to the source raster even if one or more filters in the sequence cannot be applied."""
    _num_methods = 7
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{72e2b4cb-2be3-418e-b0c8-69f33164e475}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_ContinueOnFailure" : 1,
                             "set_ContinueOnFailure" : 2,
                             "get_Count" : 3,
                             "Add" : 4,
                             "Remove" : 5,
                             "Clear" : 6,
                             "Contains" : 7, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsSequenceFilter._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsSequenceFilter from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsSequenceFilter.__dict__ and type(IAgStkGraphicsSequenceFilter.__dict__[attrname]) == property:
            return IAgStkGraphicsSequenceFilter.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsSequenceFilter.")
    
    _get_ContinueOnFailure_metadata = { "name" : "ContinueOnFailure",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def ContinueOnFailure(self) -> bool:
        """Gets or sets whether to continue applying filters in the sequence regardless of individual filter failures. When set to true, subsequent filters will still be applied to the source raster even if one or more filters in the sequence cannot be applied."""
        return self._intf.get_property(IAgStkGraphicsSequenceFilter._metadata, IAgStkGraphicsSequenceFilter._get_ContinueOnFailure_metadata)

    _set_ContinueOnFailure_metadata = { "name" : "ContinueOnFailure",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @ContinueOnFailure.setter
    def ContinueOnFailure(self, continueOnFailure:bool) -> None:
        return self._intf.set_property(IAgStkGraphicsSequenceFilter._metadata, IAgStkGraphicsSequenceFilter._set_ContinueOnFailure_metadata, continueOnFailure)

    _get_Count_metadata = { "name" : "Count",
            "arg_types" : (POINTER(agcom.INT),),
            "marshallers" : (agmarshall.INT_arg,) }
    @property
    def Count(self) -> int:
        """Gets the number of filters in the collection."""
        return self._intf.get_property(IAgStkGraphicsSequenceFilter._metadata, IAgStkGraphicsSequenceFilter._get_Count_metadata)

    _Add_metadata = { "name" : "Add",
            "arg_types" : (agcom.PVOID,),
            "marshallers" : (agmarshall.AgInterface_in_arg("IAgStkGraphicsRasterFilter"),) }
    def Add(self, filter:"IAgStkGraphicsRasterFilter") -> None:
        """Adds a filter to the sequence."""
        return self._intf.invoke(IAgStkGraphicsSequenceFilter._metadata, IAgStkGraphicsSequenceFilter._Add_metadata, filter)

    _Remove_metadata = { "name" : "Remove",
            "arg_types" : (agcom.PVOID,),
            "marshallers" : (agmarshall.AgInterface_in_arg("IAgStkGraphicsRasterFilter"),) }
    def Remove(self, filter:"IAgStkGraphicsRasterFilter") -> None:
        """Removes a filter from the sequence."""
        return self._intf.invoke(IAgStkGraphicsSequenceFilter._metadata, IAgStkGraphicsSequenceFilter._Remove_metadata, filter)

    _Clear_metadata = { "name" : "Clear",
            "arg_types" : (),
            "marshallers" : () }
    def Clear(self) -> None:
        """Clears all filters from the sequence."""
        return self._intf.invoke(IAgStkGraphicsSequenceFilter._metadata, IAgStkGraphicsSequenceFilter._Clear_metadata, )

    _Contains_metadata = { "name" : "Contains",
            "arg_types" : (agcom.PVOID, POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.AgInterface_in_arg("IAgStkGraphicsRasterFilter"), agmarshall.VARIANT_BOOL_arg,) }
    def Contains(self, filter:"IAgStkGraphicsRasterFilter") -> bool:
        """Returns true if the sequence contains the filter."""
        return self._intf.invoke(IAgStkGraphicsSequenceFilter._metadata, IAgStkGraphicsSequenceFilter._Contains_metadata, filter, out_arg())


agcls.AgClassCatalog.add_catalog_entry("{72e2b4cb-2be3-418e-b0c8-69f33164e475}", IAgStkGraphicsSequenceFilter)
agcls.AgTypeNameMap["IAgStkGraphicsSequenceFilter"] = IAgStkGraphicsSequenceFilter

class IAgStkGraphicsSharpenFilter(object):
    """Applies a convolution filter to increase the sharpness of the source raster."""
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{927e244d-ace0-4387-8e3e-6f14bfe230eb}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_Method" : 1,
                             "set_Method" : 2, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsSharpenFilter._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsSharpenFilter from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsSharpenFilter.__dict__ and type(IAgStkGraphicsSharpenFilter.__dict__[attrname]) == property:
            return IAgStkGraphicsSharpenFilter.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsSharpenFilter.")
    
    _get_Method_metadata = { "name" : "Method",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEStkGraphicsSharpenMethod),) }
    @property
    def Method(self) -> "AgEStkGraphicsSharpenMethod":
        """Gets or sets the method used to sharpen the source raster."""
        return self._intf.get_property(IAgStkGraphicsSharpenFilter._metadata, IAgStkGraphicsSharpenFilter._get_Method_metadata)

    _set_Method_metadata = { "name" : "Method",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEStkGraphicsSharpenMethod),) }
    @Method.setter
    def Method(self, method:"AgEStkGraphicsSharpenMethod") -> None:
        return self._intf.set_property(IAgStkGraphicsSharpenFilter._metadata, IAgStkGraphicsSharpenFilter._set_Method_metadata, method)


agcls.AgClassCatalog.add_catalog_entry("{927e244d-ace0-4387-8e3e-6f14bfe230eb}", IAgStkGraphicsSharpenFilter)
agcls.AgTypeNameMap["IAgStkGraphicsSharpenFilter"] = IAgStkGraphicsSharpenFilter

class IAgStkGraphicsVideoStream(object):
    """A raster stream that streams from a video. The video can be read from a file, or streamed from an HTTP, RTP, UDP, or TCP source. See the Video Streams Overview for a list of supported video formats and Uri usage."""
    _num_methods = 35
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{95fcc91e-a95a-48c4-a34f-9ed67f8e4f4a}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_Uri" : 1,
                             "get_Playback" : 2,
                             "set_Playback" : 3,
                             "get_FrameRate" : 4,
                             "set_FrameRate" : 5,
                             "get_IntervalStartTime" : 6,
                             "set_IntervalStartTime" : 7,
                             "get_IntervalEndTime" : 8,
                             "set_IntervalEndTime" : 9,
                             "get_StartTime" : 10,
                             "set_StartTime" : 11,
                             "get_EndTime" : 12,
                             "set_EndTime" : 13,
                             "get_StartFrame" : 14,
                             "set_StartFrame" : 15,
                             "get_EndFrame" : 16,
                             "set_EndFrame" : 17,
                             "get_Loop" : 18,
                             "set_Loop" : 19,
                             "get_IsPlaying" : 20,
                             "get_PacketAcquirementYieldTime" : 21,
                             "set_PacketAcquirementYieldTime" : 22,
                             "get_PacketBufferLimit" : 23,
                             "set_PacketBufferLimit" : 24,
                             "get_AllowFrameDrop" : 25,
                             "set_AllowFrameDrop" : 26,
                             "get_EnableAudio" : 27,
                             "set_EnableAudio" : 28,
                             "ReinitializeWithStringUri" : 29,
                             "Play" : 30,
                             "Pause" : 31,
                             "Stop" : 32,
                             "Reset" : 33,
                             "Close" : 34,
                             "get_AudioUri" : 35, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsVideoStream._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsVideoStream from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsVideoStream.__dict__ and type(IAgStkGraphicsVideoStream.__dict__[attrname]) == property:
            return IAgStkGraphicsVideoStream.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsVideoStream.")
    
    _get_Uri_metadata = { "name" : "Uri",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def Uri(self) -> str:
        """Gets the uri of the video."""
        return self._intf.get_property(IAgStkGraphicsVideoStream._metadata, IAgStkGraphicsVideoStream._get_Uri_metadata)

    _get_Playback_metadata = { "name" : "Playback",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEStkGraphicsVideoPlayback),) }
    @property
    def Playback(self) -> "AgEStkGraphicsVideoPlayback":
        """Gets or sets the video playback mode of the video."""
        return self._intf.get_property(IAgStkGraphicsVideoStream._metadata, IAgStkGraphicsVideoStream._get_Playback_metadata)

    _set_Playback_metadata = { "name" : "Playback",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEStkGraphicsVideoPlayback),) }
    @Playback.setter
    def Playback(self, playback:"AgEStkGraphicsVideoPlayback") -> None:
        return self._intf.set_property(IAgStkGraphicsVideoStream._metadata, IAgStkGraphicsVideoStream._set_Playback_metadata, playback)

    _get_FrameRate_metadata = { "name" : "FrameRate",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def FrameRate(self) -> float:
        """Gets or sets the frame rate of the video when the playback property is set to real time. If this property is not set, the internal framerate of the video is used."""
        return self._intf.get_property(IAgStkGraphicsVideoStream._metadata, IAgStkGraphicsVideoStream._get_FrameRate_metadata)

    _set_FrameRate_metadata = { "name" : "FrameRate",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @FrameRate.setter
    def FrameRate(self, frameRate:float) -> None:
        return self._intf.set_property(IAgStkGraphicsVideoStream._metadata, IAgStkGraphicsVideoStream._set_FrameRate_metadata, frameRate)

    _get_IntervalStartTime_metadata = { "name" : "IntervalStartTime",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def IntervalStartTime(self) -> "IAgDate":
        """Gets or sets the scene manager time at which the video will begin playing when the playback property is set to time interval."""
        return self._intf.get_property(IAgStkGraphicsVideoStream._metadata, IAgStkGraphicsVideoStream._get_IntervalStartTime_metadata)

    _set_IntervalStartTime_metadata = { "name" : "IntervalStartTime",
            "arg_types" : (agcom.PVOID,),
            "marshallers" : (agmarshall.AgInterface_in_arg("IAgDate"),) }
    @IntervalStartTime.setter
    def IntervalStartTime(self, intervalStartTime:"IAgDate") -> None:
        return self._intf.set_property(IAgStkGraphicsVideoStream._metadata, IAgStkGraphicsVideoStream._set_IntervalStartTime_metadata, intervalStartTime)

    _get_IntervalEndTime_metadata = { "name" : "IntervalEndTime",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def IntervalEndTime(self) -> "IAgDate":
        """Gets or sets the scene manager time at which the video will stop playing when the playback property is set to time interval."""
        return self._intf.get_property(IAgStkGraphicsVideoStream._metadata, IAgStkGraphicsVideoStream._get_IntervalEndTime_metadata)

    _set_IntervalEndTime_metadata = { "name" : "IntervalEndTime",
            "arg_types" : (agcom.PVOID,),
            "marshallers" : (agmarshall.AgInterface_in_arg("IAgDate"),) }
    @IntervalEndTime.setter
    def IntervalEndTime(self, intervalEndTime:"IAgDate") -> None:
        return self._intf.set_property(IAgStkGraphicsVideoStream._metadata, IAgStkGraphicsVideoStream._set_IntervalEndTime_metadata, intervalEndTime)

    _get_StartTime_metadata = { "name" : "StartTime",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def StartTime(self) -> float:
        """Gets or sets the start time of the video in seconds. Changing the start time property also changes the start frame property to the frame in the video that corresponds to the specified time."""
        return self._intf.get_property(IAgStkGraphicsVideoStream._metadata, IAgStkGraphicsVideoStream._get_StartTime_metadata)

    _set_StartTime_metadata = { "name" : "StartTime",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @StartTime.setter
    def StartTime(self, startTime:float) -> None:
        return self._intf.set_property(IAgStkGraphicsVideoStream._metadata, IAgStkGraphicsVideoStream._set_StartTime_metadata, startTime)

    _get_EndTime_metadata = { "name" : "EndTime",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def EndTime(self) -> float:
        """Gets or sets the end time of the video in seconds. Changing the end time property also changes the end frame property to the frame in the video that corresponds to the specified time."""
        return self._intf.get_property(IAgStkGraphicsVideoStream._metadata, IAgStkGraphicsVideoStream._get_EndTime_metadata)

    _set_EndTime_metadata = { "name" : "EndTime",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @EndTime.setter
    def EndTime(self, endTime:float) -> None:
        return self._intf.set_property(IAgStkGraphicsVideoStream._metadata, IAgStkGraphicsVideoStream._set_EndTime_metadata, endTime)

    _get_StartFrame_metadata = { "name" : "StartFrame",
            "arg_types" : (POINTER(agcom.INT),),
            "marshallers" : (agmarshall.INT_arg,) }
    @property
    def StartFrame(self) -> int:
        """Gets or sets the start frame of the video. Changing the start frame property also changes the start time property to the time in the video that corresponds to the specified frame."""
        return self._intf.get_property(IAgStkGraphicsVideoStream._metadata, IAgStkGraphicsVideoStream._get_StartFrame_metadata)

    _set_StartFrame_metadata = { "name" : "StartFrame",
            "arg_types" : (agcom.INT,),
            "marshallers" : (agmarshall.INT_arg,) }
    @StartFrame.setter
    def StartFrame(self, startFrame:int) -> None:
        return self._intf.set_property(IAgStkGraphicsVideoStream._metadata, IAgStkGraphicsVideoStream._set_StartFrame_metadata, startFrame)

    _get_EndFrame_metadata = { "name" : "EndFrame",
            "arg_types" : (POINTER(agcom.INT),),
            "marshallers" : (agmarshall.INT_arg,) }
    @property
    def EndFrame(self) -> int:
        """Gets or sets the end frame of the video. Changing the end frame property also changes the end time property to the time in the video that corresponds to the specified frame."""
        return self._intf.get_property(IAgStkGraphicsVideoStream._metadata, IAgStkGraphicsVideoStream._get_EndFrame_metadata)

    _set_EndFrame_metadata = { "name" : "EndFrame",
            "arg_types" : (agcom.INT,),
            "marshallers" : (agmarshall.INT_arg,) }
    @EndFrame.setter
    def EndFrame(self, endFrame:int) -> None:
        return self._intf.set_property(IAgStkGraphicsVideoStream._metadata, IAgStkGraphicsVideoStream._set_EndFrame_metadata, endFrame)

    _get_Loop_metadata = { "name" : "Loop",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def Loop(self) -> bool:
        """Gets or sets whether the video will loop when it reaches its last frame when the playback property is set to real time."""
        return self._intf.get_property(IAgStkGraphicsVideoStream._metadata, IAgStkGraphicsVideoStream._get_Loop_metadata)

    _set_Loop_metadata = { "name" : "Loop",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @Loop.setter
    def Loop(self, loop:bool) -> None:
        return self._intf.set_property(IAgStkGraphicsVideoStream._metadata, IAgStkGraphicsVideoStream._set_Loop_metadata, loop)

    _get_IsPlaying_metadata = { "name" : "IsPlaying",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def IsPlaying(self) -> bool:
        """Gets whether or not the video is playing. Use the play, pause, stop, and Reset methods to control the playback of the video when the playback property is set to real time."""
        return self._intf.get_property(IAgStkGraphicsVideoStream._metadata, IAgStkGraphicsVideoStream._get_IsPlaying_metadata)

    _get_PacketAcquirementYieldTime_metadata = { "name" : "PacketAcquirementYieldTime",
            "arg_types" : (POINTER(agcom.INT),),
            "marshallers" : (agmarshall.INT_arg,) }
    @property
    def PacketAcquirementYieldTime(self) -> int:
        """Gets or sets the thread processing yield time for asynchronous streaming of video over common protocols like udp. Setting a high value may increase performance, but may cause frames or packets to drop, effecting visual quality..."""
        return self._intf.get_property(IAgStkGraphicsVideoStream._metadata, IAgStkGraphicsVideoStream._get_PacketAcquirementYieldTime_metadata)

    _set_PacketAcquirementYieldTime_metadata = { "name" : "PacketAcquirementYieldTime",
            "arg_types" : (agcom.INT,),
            "marshallers" : (agmarshall.INT_arg,) }
    @PacketAcquirementYieldTime.setter
    def PacketAcquirementYieldTime(self, packetAcquirementYieldTime:int) -> None:
        return self._intf.set_property(IAgStkGraphicsVideoStream._metadata, IAgStkGraphicsVideoStream._set_PacketAcquirementYieldTime_metadata, packetAcquirementYieldTime)

    _get_PacketBufferLimit_metadata = { "name" : "PacketBufferLimit",
            "arg_types" : (POINTER(agcom.INT),),
            "marshallers" : (agmarshall.INT_arg,) }
    @property
    def PacketBufferLimit(self) -> int:
        """Gets or sets a value indicating the buffering limit for packets when processing a video stream..."""
        return self._intf.get_property(IAgStkGraphicsVideoStream._metadata, IAgStkGraphicsVideoStream._get_PacketBufferLimit_metadata)

    _set_PacketBufferLimit_metadata = { "name" : "PacketBufferLimit",
            "arg_types" : (agcom.INT,),
            "marshallers" : (agmarshall.INT_arg,) }
    @PacketBufferLimit.setter
    def PacketBufferLimit(self, packetBufferLimit:int) -> None:
        return self._intf.set_property(IAgStkGraphicsVideoStream._metadata, IAgStkGraphicsVideoStream._set_PacketBufferLimit_metadata, packetBufferLimit)

    _get_AllowFrameDrop_metadata = { "name" : "AllowFrameDrop",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def AllowFrameDrop(self) -> bool:
        """Gets or sets a value indicating if frames should be dropped if video processing can not keep up with a video stream. If this is set to false, the video quality may degrade when the processing load is too high..."""
        return self._intf.get_property(IAgStkGraphicsVideoStream._metadata, IAgStkGraphicsVideoStream._get_AllowFrameDrop_metadata)

    _set_AllowFrameDrop_metadata = { "name" : "AllowFrameDrop",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @AllowFrameDrop.setter
    def AllowFrameDrop(self, allowFrameDrop:bool) -> None:
        return self._intf.set_property(IAgStkGraphicsVideoStream._metadata, IAgStkGraphicsVideoStream._set_AllowFrameDrop_metadata, allowFrameDrop)

    _get_EnableAudio_metadata = { "name" : "EnableAudio",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def EnableAudio(self) -> bool:
        """Gets or sets a value indicating if the encoded audio stream should be synchronized to video playback If this is set to false, the audio stream will be disabled..."""
        return self._intf.get_property(IAgStkGraphicsVideoStream._metadata, IAgStkGraphicsVideoStream._get_EnableAudio_metadata)

    _set_EnableAudio_metadata = { "name" : "EnableAudio",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @EnableAudio.setter
    def EnableAudio(self, enableAudio:bool) -> None:
        return self._intf.set_property(IAgStkGraphicsVideoStream._metadata, IAgStkGraphicsVideoStream._set_EnableAudio_metadata, enableAudio)

    _ReinitializeWithStringUri_metadata = { "name" : "ReinitializeWithStringUri",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    def ReinitializeWithStringUri(self, uri:str) -> None:
        """Reinitializes the video stream from a Uri, which can be a file, HTTP, RTP, UDP, or TCP source. See the Video Streams Overview for a list of supported video formats and Uri usage."""
        return self._intf.invoke(IAgStkGraphicsVideoStream._metadata, IAgStkGraphicsVideoStream._ReinitializeWithStringUri_metadata, uri)

    _Play_metadata = { "name" : "Play",
            "arg_types" : (),
            "marshallers" : () }
    def Play(self) -> None:
        """Begins playing the video when the playback property is set to real time."""
        return self._intf.invoke(IAgStkGraphicsVideoStream._metadata, IAgStkGraphicsVideoStream._Play_metadata, )

    _Pause_metadata = { "name" : "Pause",
            "arg_types" : (),
            "marshallers" : () }
    def Pause(self) -> None:
        """Pauses the video when the playback property is set to real time."""
        return self._intf.invoke(IAgStkGraphicsVideoStream._metadata, IAgStkGraphicsVideoStream._Pause_metadata, )

    _Stop_metadata = { "name" : "Stop",
            "arg_types" : (),
            "marshallers" : () }
    def Stop(self) -> None:
        """Stops the video when the playback property is set to real time. Stopping the video will seek to the first frame and pause playback. Use the Play method to begin playing the video again."""
        return self._intf.invoke(IAgStkGraphicsVideoStream._metadata, IAgStkGraphicsVideoStream._Stop_metadata, )

    _Reset_metadata = { "name" : "Reset",
            "arg_types" : (),
            "marshallers" : () }
    def Reset(self) -> None:
        """Seeks the video to its first frame and begins playing the video when the playback property is set to real time."""
        return self._intf.invoke(IAgStkGraphicsVideoStream._metadata, IAgStkGraphicsVideoStream._Reset_metadata, )

    _Close_metadata = { "name" : "Close",
            "arg_types" : (),
            "marshallers" : () }
    def Close(self) -> None:
        """Closes the video stream and any associated resources."""
        return self._intf.invoke(IAgStkGraphicsVideoStream._metadata, IAgStkGraphicsVideoStream._Close_metadata, )

    _get_AudioUri_metadata = { "name" : "AudioUri",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def AudioUri(self) -> str:
        """Gets the uri of the audio."""
        return self._intf.get_property(IAgStkGraphicsVideoStream._metadata, IAgStkGraphicsVideoStream._get_AudioUri_metadata)


agcls.AgClassCatalog.add_catalog_entry("{95fcc91e-a95a-48c4-a34f-9ed67f8e4f4a}", IAgStkGraphicsVideoStream)
agcls.AgTypeNameMap["IAgStkGraphicsVideoStream"] = IAgStkGraphicsVideoStream

class IAgStkGraphicsKmlContainer(object):
    """A KmlContainer contains a collection of children kml features."""
    _num_methods = 1
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{32147ba1-8610-4270-9365-b8966730dd6f}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_Children" : 1, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsKmlContainer._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsKmlContainer from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsKmlContainer.__dict__ and type(IAgStkGraphicsKmlContainer.__dict__[attrname]) == property:
            return IAgStkGraphicsKmlContainer.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsKmlContainer.")
    
    _get_Children_metadata = { "name" : "Children",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def Children(self) -> "IAgStkGraphicsKmlFeatureCollection":
        """The collection of kml features that are children of this container."""
        return self._intf.get_property(IAgStkGraphicsKmlContainer._metadata, IAgStkGraphicsKmlContainer._get_Children_metadata)


agcls.AgClassCatalog.add_catalog_entry("{32147ba1-8610-4270-9365-b8966730dd6f}", IAgStkGraphicsKmlContainer)
agcls.AgTypeNameMap["IAgStkGraphicsKmlContainer"] = IAgStkGraphicsKmlContainer

class IAgStkGraphicsKmlDocument(object):
    """A KML document."""
    _num_methods = 1
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{2e284efe-3dda-4fac-91ab-7b8c84eb3ad2}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_Uri" : 1, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsKmlDocument._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsKmlDocument from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsKmlDocument.__dict__ and type(IAgStkGraphicsKmlDocument.__dict__[attrname]) == property:
            return IAgStkGraphicsKmlDocument.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsKmlDocument.")
    
    _get_Uri_metadata = { "name" : "Uri",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def Uri(self) -> str:
        """Gets the uri of the document."""
        return self._intf.get_property(IAgStkGraphicsKmlDocument._metadata, IAgStkGraphicsKmlDocument._get_Uri_metadata)


agcls.AgClassCatalog.add_catalog_entry("{2e284efe-3dda-4fac-91ab-7b8c84eb3ad2}", IAgStkGraphicsKmlDocument)
agcls.AgTypeNameMap["IAgStkGraphicsKmlDocument"] = IAgStkGraphicsKmlDocument

class IAgStkGraphicsKmlFeature(object):
    """A KML feature."""
    _num_methods = 9
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{bc7646ca-da52-4a62-8ef4-838382f21a08}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_IsLoaded" : 1,
                             "get_Display" : 2,
                             "set_Display" : 3,
                             "get_Content" : 4,
                             "get_Name" : 5,
                             "get_Description" : 6,
                             "get_Snippet" : 7,
                             "get_BoundingSphere" : 8,
                             "FlyTo" : 9, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsKmlFeature._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsKmlFeature from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsKmlFeature.__dict__ and type(IAgStkGraphicsKmlFeature.__dict__[attrname]) == property:
            return IAgStkGraphicsKmlFeature.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsKmlFeature.")
    
    _get_IsLoaded_metadata = { "name" : "IsLoaded",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def IsLoaded(self) -> bool:
        """Gets whether the document associated with this feature is loaded."""
        return self._intf.get_property(IAgStkGraphicsKmlFeature._metadata, IAgStkGraphicsKmlFeature._get_IsLoaded_metadata)

    _get_Display_metadata = { "name" : "Display",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def Display(self) -> bool:
        """Gets or sets whether this feature will be displayed in the Scene."""
        return self._intf.get_property(IAgStkGraphicsKmlFeature._metadata, IAgStkGraphicsKmlFeature._get_Display_metadata)

    _set_Display_metadata = { "name" : "Display",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @Display.setter
    def Display(self, display:bool) -> None:
        return self._intf.set_property(IAgStkGraphicsKmlFeature._metadata, IAgStkGraphicsKmlFeature._set_Display_metadata, display)

    _get_Content_metadata = { "name" : "Content",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def Content(self) -> str:
        """Gets the content associated with this feature."""
        return self._intf.get_property(IAgStkGraphicsKmlFeature._metadata, IAgStkGraphicsKmlFeature._get_Content_metadata)

    _get_Name_metadata = { "name" : "Name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def Name(self) -> str:
        """Gets the name of this feature."""
        return self._intf.get_property(IAgStkGraphicsKmlFeature._metadata, IAgStkGraphicsKmlFeature._get_Name_metadata)

    _get_Description_metadata = { "name" : "Description",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def Description(self) -> str:
        """Gets the description associated with this feature."""
        return self._intf.get_property(IAgStkGraphicsKmlFeature._metadata, IAgStkGraphicsKmlFeature._get_Description_metadata)

    _get_Snippet_metadata = { "name" : "Snippet",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def Snippet(self) -> str:
        """Gets the snippet associated with this feature."""
        return self._intf.get_property(IAgStkGraphicsKmlFeature._metadata, IAgStkGraphicsKmlFeature._get_Snippet_metadata)

    _get_BoundingSphere_metadata = { "name" : "BoundingSphere",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def BoundingSphere(self) -> "IAgStkGraphicsBoundingSphere":
        """The bounding sphere encompassing the area associated with this feature."""
        return self._intf.get_property(IAgStkGraphicsKmlFeature._metadata, IAgStkGraphicsKmlFeature._get_BoundingSphere_metadata)

    _FlyTo_metadata = { "name" : "FlyTo",
            "arg_types" : (),
            "marshallers" : () }
    def FlyTo(self) -> None:
        """Moves the camera to the area encompassing this feature."""
        return self._intf.invoke(IAgStkGraphicsKmlFeature._metadata, IAgStkGraphicsKmlFeature._FlyTo_metadata, )


agcls.AgClassCatalog.add_catalog_entry("{bc7646ca-da52-4a62-8ef4-838382f21a08}", IAgStkGraphicsKmlFeature)
agcls.AgTypeNameMap["IAgStkGraphicsKmlFeature"] = IAgStkGraphicsKmlFeature

class IAgStkGraphicsKmlFolder(object):
    """A KML folder."""
    _num_methods = 0
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{28b2dfb1-4f4c-4697-a0f9-076ebd92eb1f}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : {  }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsKmlFolder._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsKmlFolder from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsKmlFolder.__dict__ and type(IAgStkGraphicsKmlFolder.__dict__[attrname]) == property:
            return IAgStkGraphicsKmlFolder.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsKmlFolder.")
    

agcls.AgClassCatalog.add_catalog_entry("{28b2dfb1-4f4c-4697-a0f9-076ebd92eb1f}", IAgStkGraphicsKmlFolder)
agcls.AgTypeNameMap["IAgStkGraphicsKmlFolder"] = IAgStkGraphicsKmlFolder

class IAgStkGraphicsKmlGraphics(object):
    """Provides loading and unloading of kml documents for a particular central body."""
    _num_methods = 9
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{056eb708-4504-4d62-b4d8-3ca00b0b91fa}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_Documents" : 1,
                             "LoadDocument" : 2,
                             "LoadDocumentString" : 3,
                             "Load" : 4,
                             "LoadDocumentAsync" : 5,
                             "LoadDocumentAsyncString" : 6,
                             "LoadAsync" : 7,
                             "Unload" : 8,
                             "UnloadAll" : 9, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsKmlGraphics._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsKmlGraphics from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsKmlGraphics.__dict__ and type(IAgStkGraphicsKmlGraphics.__dict__[attrname]) == property:
            return IAgStkGraphicsKmlGraphics.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsKmlGraphics.")
    def Subscribe(self) -> IAgStkGraphicsKmlGraphicsEventHandler:
        """Returns an IAgStkGraphicsKmlGraphicsEventHandler that is subscribed to handle events associated with this instance of IAgStkGraphicsKmlGraphics."""
        return IAgStkGraphicsKmlGraphicsEventHandler(self._intf)
    
    _get_Documents_metadata = { "name" : "Documents",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def Documents(self) -> "IAgStkGraphicsKmlDocumentCollection":
        """The collection of kml documents that are currently loaded."""
        return self._intf.get_property(IAgStkGraphicsKmlGraphics._metadata, IAgStkGraphicsKmlGraphics._get_Documents_metadata)

    _LoadDocument_metadata = { "name" : "LoadDocument",
            "arg_types" : (agcom.BSTR, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.AgInterface_out_arg,) }
    def LoadDocument(self, kmlUri:str) -> "IAgStkGraphicsKmlDocument":
        """Loads a kml document from a uri."""
        return self._intf.invoke(IAgStkGraphicsKmlGraphics._metadata, IAgStkGraphicsKmlGraphics._LoadDocument_metadata, kmlUri, out_arg())

    _LoadDocumentString_metadata = { "name" : "LoadDocumentString",
            "arg_types" : (agcom.BSTR, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.AgInterface_out_arg,) }
    def LoadDocumentString(self, kmlUri:str) -> "IAgStkGraphicsKmlDocument":
        """Loads a kml document from a Uri."""
        return self._intf.invoke(IAgStkGraphicsKmlGraphics._metadata, IAgStkGraphicsKmlGraphics._LoadDocumentString_metadata, kmlUri, out_arg())

    _Load_metadata = { "name" : "Load",
            "arg_types" : (agcom.BSTR, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.AgInterface_out_arg,) }
    def Load(self, kmlDocument:str) -> "IAgStkGraphicsKmlDocument":
        """Loads a kml document from a string containing the document."""
        return self._intf.invoke(IAgStkGraphicsKmlGraphics._metadata, IAgStkGraphicsKmlGraphics._Load_metadata, kmlDocument, out_arg())

    _LoadDocumentAsync_metadata = { "name" : "LoadDocumentAsync",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    def LoadDocumentAsync(self, kmlUri:str) -> None:
        """Loads a kml document asynchronously from a uri. The document loaded event is raised when the document is loaded."""
        return self._intf.invoke(IAgStkGraphicsKmlGraphics._metadata, IAgStkGraphicsKmlGraphics._LoadDocumentAsync_metadata, kmlUri)

    _LoadDocumentAsyncString_metadata = { "name" : "LoadDocumentAsyncString",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    def LoadDocumentAsyncString(self, kmlUri:str) -> None:
        """Loads a kml document asynchronously from a Uri. The document loaded event is raised when the document is loaded."""
        return self._intf.invoke(IAgStkGraphicsKmlGraphics._metadata, IAgStkGraphicsKmlGraphics._LoadDocumentAsyncString_metadata, kmlUri)

    _LoadAsync_metadata = { "name" : "LoadAsync",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    def LoadAsync(self, kmlDocument:str) -> None:
        """Loads a kml document asynchronously from a string containing the document. The document loaded event is raised when the document is loaded."""
        return self._intf.invoke(IAgStkGraphicsKmlGraphics._metadata, IAgStkGraphicsKmlGraphics._LoadAsync_metadata, kmlDocument)

    _Unload_metadata = { "name" : "Unload",
            "arg_types" : (agcom.PVOID,),
            "marshallers" : (agmarshall.AgInterface_in_arg("IAgStkGraphicsKmlDocument"),) }
    def Unload(self, kmlDocument:"IAgStkGraphicsKmlDocument") -> None:
        """Unloads a kml document. All associated visual features will be removed from the Scene. Once a KmlDocument is unloaded, it is no longer valid and will throw when accessing properties or methods."""
        return self._intf.invoke(IAgStkGraphicsKmlGraphics._metadata, IAgStkGraphicsKmlGraphics._Unload_metadata, kmlDocument)

    _UnloadAll_metadata = { "name" : "UnloadAll",
            "arg_types" : (),
            "marshallers" : () }
    def UnloadAll(self) -> None:
        """Unloads all kml documents associated with this central body. All associated visual features will be removed from the Scene. Once a KmlDocument is unloaded, it is no longer valid and will throw when accessing properties or methods."""
        return self._intf.invoke(IAgStkGraphicsKmlGraphics._metadata, IAgStkGraphicsKmlGraphics._UnloadAll_metadata, )


agcls.AgClassCatalog.add_catalog_entry("{056eb708-4504-4d62-b4d8-3ca00b0b91fa}", IAgStkGraphicsKmlGraphics)
agcls.AgTypeNameMap["IAgStkGraphicsKmlGraphics"] = IAgStkGraphicsKmlGraphics

class IAgStkGraphicsKmlNetworkLink(object):
    """A KML network link."""
    _num_methods = 17
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{0b66ea82-dd0d-444f-b097-dda9427e1b87}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_Uri" : 1,
                             "get_RefreshMode" : 2,
                             "set_RefreshMode" : 3,
                             "get_RefreshInterval" : 4,
                             "set_RefreshInterval" : 5,
                             "get_ViewRefreshMode" : 6,
                             "set_ViewRefreshMode" : 7,
                             "get_ViewRefreshTime" : 8,
                             "set_ViewRefreshTime" : 9,
                             "get_ViewBoundScale" : 10,
                             "set_ViewBoundScale" : 11,
                             "get_MinimumRefreshPeriod" : 12,
                             "get_Cookie" : 13,
                             "get_Message" : 14,
                             "get_LinkSnippet" : 15,
                             "get_Expires" : 16,
                             "Refresh" : 17, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsKmlNetworkLink._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsKmlNetworkLink from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsKmlNetworkLink.__dict__ and type(IAgStkGraphicsKmlNetworkLink.__dict__[attrname]) == property:
            return IAgStkGraphicsKmlNetworkLink.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsKmlNetworkLink.")
    
    _get_Uri_metadata = { "name" : "Uri",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def Uri(self) -> str:
        """Gets the uri of the network link."""
        return self._intf.get_property(IAgStkGraphicsKmlNetworkLink._metadata, IAgStkGraphicsKmlNetworkLink._get_Uri_metadata)

    _get_RefreshMode_metadata = { "name" : "RefreshMode",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEStkGraphicsKmlNetworkLinkRefreshMode),) }
    @property
    def RefreshMode(self) -> "AgEStkGraphicsKmlNetworkLinkRefreshMode":
        """Gets or sets the refresh mode of the network link. The refresh mode specifies a time-based refresh policy for this link."""
        return self._intf.get_property(IAgStkGraphicsKmlNetworkLink._metadata, IAgStkGraphicsKmlNetworkLink._get_RefreshMode_metadata)

    _set_RefreshMode_metadata = { "name" : "RefreshMode",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEStkGraphicsKmlNetworkLinkRefreshMode),) }
    @RefreshMode.setter
    def RefreshMode(self, refreshMode:"AgEStkGraphicsKmlNetworkLinkRefreshMode") -> None:
        return self._intf.set_property(IAgStkGraphicsKmlNetworkLink._metadata, IAgStkGraphicsKmlNetworkLink._set_RefreshMode_metadata, refreshMode)

    _get_RefreshInterval_metadata = { "name" : "RefreshInterval",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def RefreshInterval(self) -> float:
        """Gets or sets the interval duration at which this network link will refresh, when refresh mode is set to on interval."""
        return self._intf.get_property(IAgStkGraphicsKmlNetworkLink._metadata, IAgStkGraphicsKmlNetworkLink._get_RefreshInterval_metadata)

    _set_RefreshInterval_metadata = { "name" : "RefreshInterval",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @RefreshInterval.setter
    def RefreshInterval(self, refreshInterval:float) -> None:
        return self._intf.set_property(IAgStkGraphicsKmlNetworkLink._metadata, IAgStkGraphicsKmlNetworkLink._set_RefreshInterval_metadata, refreshInterval)

    _get_ViewRefreshMode_metadata = { "name" : "ViewRefreshMode",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEStkGraphicsKmlNetworkLinkViewRefreshMode),) }
    @property
    def ViewRefreshMode(self) -> "AgEStkGraphicsKmlNetworkLinkViewRefreshMode":
        """Gets or sets the view refresh mode of the network link. The view refresh mode specifies the refresh policy for the when the camera's view changes."""
        return self._intf.get_property(IAgStkGraphicsKmlNetworkLink._metadata, IAgStkGraphicsKmlNetworkLink._get_ViewRefreshMode_metadata)

    _set_ViewRefreshMode_metadata = { "name" : "ViewRefreshMode",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEStkGraphicsKmlNetworkLinkViewRefreshMode),) }
    @ViewRefreshMode.setter
    def ViewRefreshMode(self, viewRefreshMode:"AgEStkGraphicsKmlNetworkLinkViewRefreshMode") -> None:
        return self._intf.set_property(IAgStkGraphicsKmlNetworkLink._metadata, IAgStkGraphicsKmlNetworkLink._set_ViewRefreshMode_metadata, viewRefreshMode)

    _get_ViewRefreshTime_metadata = { "name" : "ViewRefreshTime",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def ViewRefreshTime(self) -> float:
        """Gets or sets the duration after camera view movement stops that this network link will refresh, when view refresh mode is set to on stop."""
        return self._intf.get_property(IAgStkGraphicsKmlNetworkLink._metadata, IAgStkGraphicsKmlNetworkLink._get_ViewRefreshTime_metadata)

    _set_ViewRefreshTime_metadata = { "name" : "ViewRefreshTime",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @ViewRefreshTime.setter
    def ViewRefreshTime(self, viewRefreshTime:float) -> None:
        return self._intf.set_property(IAgStkGraphicsKmlNetworkLink._metadata, IAgStkGraphicsKmlNetworkLink._set_ViewRefreshTime_metadata, viewRefreshTime)

    _get_ViewBoundScale_metadata = { "name" : "ViewBoundScale",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def ViewBoundScale(self) -> float:
        """Gets or sets the value that scales the bounding box defining the view associated with this network link. A value less than 1.0 specifies to use less than the full view (screen). A value greater than 1..."""
        return self._intf.get_property(IAgStkGraphicsKmlNetworkLink._metadata, IAgStkGraphicsKmlNetworkLink._get_ViewBoundScale_metadata)

    _set_ViewBoundScale_metadata = { "name" : "ViewBoundScale",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @ViewBoundScale.setter
    def ViewBoundScale(self, viewBoundScale:float) -> None:
        return self._intf.set_property(IAgStkGraphicsKmlNetworkLink._metadata, IAgStkGraphicsKmlNetworkLink._set_ViewBoundScale_metadata, viewBoundScale)

    _get_MinimumRefreshPeriod_metadata = { "name" : "MinimumRefreshPeriod",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def MinimumRefreshPeriod(self) -> float:
        """Gets the duration that is the minimum allowed time between refreshes of this network link."""
        return self._intf.get_property(IAgStkGraphicsKmlNetworkLink._metadata, IAgStkGraphicsKmlNetworkLink._get_MinimumRefreshPeriod_metadata)

    _get_Cookie_metadata = { "name" : "Cookie",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def Cookie(self) -> str:
        """Gets the cookie string associated with this network link."""
        return self._intf.get_property(IAgStkGraphicsKmlNetworkLink._metadata, IAgStkGraphicsKmlNetworkLink._get_Cookie_metadata)

    _get_Message_metadata = { "name" : "Message",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def Message(self) -> str:
        """Gets the message string associated with this network link."""
        return self._intf.get_property(IAgStkGraphicsKmlNetworkLink._metadata, IAgStkGraphicsKmlNetworkLink._get_Message_metadata)

    _get_LinkSnippet_metadata = { "name" : "LinkSnippet",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def LinkSnippet(self) -> str:
        """Gets the link snippet associated with this network link."""
        return self._intf.get_property(IAgStkGraphicsKmlNetworkLink._metadata, IAgStkGraphicsKmlNetworkLink._get_LinkSnippet_metadata)

    _get_Expires_metadata = { "name" : "Expires",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def Expires(self) -> str:
        """Gets the string specifying the date/time this network should expire and be refreshed."""
        return self._intf.get_property(IAgStkGraphicsKmlNetworkLink._metadata, IAgStkGraphicsKmlNetworkLink._get_Expires_metadata)

    _Refresh_metadata = { "name" : "Refresh",
            "arg_types" : (),
            "marshallers" : () }
    def Refresh(self) -> None:
        """Refreshes the network link."""
        return self._intf.invoke(IAgStkGraphicsKmlNetworkLink._metadata, IAgStkGraphicsKmlNetworkLink._Refresh_metadata, )


agcls.AgClassCatalog.add_catalog_entry("{0b66ea82-dd0d-444f-b097-dda9427e1b87}", IAgStkGraphicsKmlNetworkLink)
agcls.AgTypeNameMap["IAgStkGraphicsKmlNetworkLink"] = IAgStkGraphicsKmlNetworkLink

class IAgStkGraphicsMarkerBatchPrimitive(object):
    """ Renders one or more markers in the 3D scene. Markers are 2D images that always face the viewer which can be sized in pixels or meters. Markers are also referred to as sprites or billboards..."""
    _num_methods = 54
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{235878c1-62d9-4ce6-85ff-9d82aff701e9}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_SizeSource" : 1,
                             "get_SortOrder" : 2,
                             "get_SetHint" : 3,
                             "get_RenderingMethod" : 4,
                             "get_RenderPass" : 5,
                             "set_RenderPass" : 6,
                             "get_BoundingSphereScale" : 7,
                             "set_BoundingSphereScale" : 8,
                             "get_DistanceDisplayConditionPerMarker" : 9,
                             "set_DistanceDisplayConditionPerMarker" : 10,
                             "get_Texture" : 11,
                             "set_Texture" : 12,
                             "get_SizeUnit" : 13,
                             "set_SizeUnit" : 14,
                             "get_Size" : 15,
                             "set_Size" : 16,
                             "get_Origin" : 17,
                             "set_Origin" : 18,
                             "get_PixelOffset" : 19,
                             "set_PixelOffset" : 20,
                             "get_EyeOffset" : 21,
                             "set_EyeOffset" : 22,
                             "get_Rotation" : 23,
                             "set_Rotation" : 24,
                             "get_TextureCoordinate" : 25,
                             "set_TextureCoordinate" : 26,
                             "get_Wireframe" : 27,
                             "set_Wireframe" : 28,
                             "get_PerItemPickingEnabled" : 29,
                             "set_PerItemPickingEnabled" : 30,
                             "get_TextureFilter" : 31,
                             "set_TextureFilter" : 32,
                             "Set" : 33,
                             "SetWithOptionalParameters" : 34,
                             "SetWithOptionalParametersAndRenderPassHint" : 35,
                             "SetCartographic" : 36,
                             "SetCartographicWithOptionalParameters" : 37,
                             "SetCartographicWithOptionalParametersAndRenderPassHint" : 38,
                             "SetPartial" : 39,
                             "SetPartialWithIndicesOrder" : 40,
                             "SetPartialWithOptionalParameters" : 41,
                             "SetPartialWithOptionalParametersIndicesOrderAndRenderPass" : 42,
                             "SetPartialCartographic" : 43,
                             "SetPartialCartographicWithIndicesOrder" : 44,
                             "SetPartialCartographicWithOptionalParameters" : 45,
                             "SetPartialCartographicWithOptionalParametersIndicesOrderAndRenderPass" : 46,
                             "Supported" : 47,
                             "get_ClampToPixel" : 48,
                             "set_ClampToPixel" : 49,
                             "get_CentralBodyClipped" : 50,
                             "set_CentralBodyClipped" : 51,
                             "AlignToScreen" : 52,
                             "AlignToNorth" : 53,
                             "AlignToAxis" : 54, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsMarkerBatchPrimitive._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsMarkerBatchPrimitive from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsMarkerBatchPrimitive.__dict__ and type(IAgStkGraphicsMarkerBatchPrimitive.__dict__[attrname]) == property:
            return IAgStkGraphicsMarkerBatchPrimitive.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsMarkerBatchPrimitive.")
    
    _get_SizeSource_metadata = { "name" : "SizeSource",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEStkGraphicsMarkerBatchSizeSource),) }
    @property
    def SizeSource(self) -> "AgEStkGraphicsMarkerBatchSizeSource":
        """Gets the source used for the size of markers in the batch."""
        return self._intf.get_property(IAgStkGraphicsMarkerBatchPrimitive._metadata, IAgStkGraphicsMarkerBatchPrimitive._get_SizeSource_metadata)

    _get_SortOrder_metadata = { "name" : "SortOrder",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEStkGraphicsMarkerBatchSortOrder),) }
    @property
    def SortOrder(self) -> "AgEStkGraphicsMarkerBatchSortOrder":
        """Gets the order in which markers in the marker batch are sorted before rendering."""
        return self._intf.get_property(IAgStkGraphicsMarkerBatchPrimitive._metadata, IAgStkGraphicsMarkerBatchPrimitive._get_SortOrder_metadata)

    _get_SetHint_metadata = { "name" : "SetHint",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEStkGraphicsSetHint),) }
    @property
    def SetHint(self) -> "AgEStkGraphicsSetHint":
        """Gets the primitive's set hint. See the Set Hint Performance Overview for selecting an appropriate value to construct the primitive with."""
        return self._intf.get_property(IAgStkGraphicsMarkerBatchPrimitive._metadata, IAgStkGraphicsMarkerBatchPrimitive._get_SetHint_metadata)

    _get_RenderingMethod_metadata = { "name" : "RenderingMethod",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEStkGraphicsMarkerBatchRenderingMethod),) }
    @property
    def RenderingMethod(self) -> "AgEStkGraphicsMarkerBatchRenderingMethod":
        """Gets the rendering method used to render the marker batch."""
        return self._intf.get_property(IAgStkGraphicsMarkerBatchPrimitive._metadata, IAgStkGraphicsMarkerBatchPrimitive._get_RenderingMethod_metadata)

    _get_RenderPass_metadata = { "name" : "RenderPass",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEStkGraphicsMarkerBatchRenderPass),) }
    @property
    def RenderPass(self) -> "AgEStkGraphicsMarkerBatchRenderPass":
        """Gets or sets the pass during which the marker batch is rendered."""
        return self._intf.get_property(IAgStkGraphicsMarkerBatchPrimitive._metadata, IAgStkGraphicsMarkerBatchPrimitive._get_RenderPass_metadata)

    _set_RenderPass_metadata = { "name" : "RenderPass",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEStkGraphicsMarkerBatchRenderPass),) }
    @RenderPass.setter
    def RenderPass(self, renderPass:"AgEStkGraphicsMarkerBatchRenderPass") -> None:
        return self._intf.set_property(IAgStkGraphicsMarkerBatchPrimitive._metadata, IAgStkGraphicsMarkerBatchPrimitive._set_RenderPass_metadata, renderPass)

    _get_BoundingSphereScale_metadata = { "name" : "BoundingSphereScale",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def BoundingSphereScale(self) -> float:
        """Gets or sets the scale applied to the radius of this primitive's bounding sphere."""
        return self._intf.get_property(IAgStkGraphicsMarkerBatchPrimitive._metadata, IAgStkGraphicsMarkerBatchPrimitive._get_BoundingSphereScale_metadata)

    _set_BoundingSphereScale_metadata = { "name" : "BoundingSphereScale",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @BoundingSphereScale.setter
    def BoundingSphereScale(self, boundingSphereScale:float) -> None:
        return self._intf.set_property(IAgStkGraphicsMarkerBatchPrimitive._metadata, IAgStkGraphicsMarkerBatchPrimitive._set_BoundingSphereScale_metadata, boundingSphereScale)

    _get_DistanceDisplayConditionPerMarker_metadata = { "name" : "DistanceDisplayConditionPerMarker",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def DistanceDisplayConditionPerMarker(self) -> "IAgStkGraphicsDistanceDisplayCondition":
        """Gets or sets a distance display condition that is evaluated per marker in the marker batch during rendering. This is different than display condition, which is evaluated once for the entire marker batch..."""
        return self._intf.get_property(IAgStkGraphicsMarkerBatchPrimitive._metadata, IAgStkGraphicsMarkerBatchPrimitive._get_DistanceDisplayConditionPerMarker_metadata)

    _set_DistanceDisplayConditionPerMarker_metadata = { "name" : "DistanceDisplayConditionPerMarker",
            "arg_types" : (agcom.PVOID,),
            "marshallers" : (agmarshall.AgInterface_in_arg("IAgStkGraphicsDistanceDisplayCondition"),) }
    @DistanceDisplayConditionPerMarker.setter
    def DistanceDisplayConditionPerMarker(self, distanceDisplayConditionPerMarker:"IAgStkGraphicsDistanceDisplayCondition") -> None:
        return self._intf.set_property(IAgStkGraphicsMarkerBatchPrimitive._metadata, IAgStkGraphicsMarkerBatchPrimitive._set_DistanceDisplayConditionPerMarker_metadata, distanceDisplayConditionPerMarker)

    _get_Texture_metadata = { "name" : "Texture",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def Texture(self) -> "IAgStkGraphicsRendererTexture2D":
        """Gets or sets the per-batch texture, which is applied to each marker in the batch."""
        return self._intf.get_property(IAgStkGraphicsMarkerBatchPrimitive._metadata, IAgStkGraphicsMarkerBatchPrimitive._get_Texture_metadata)

    _set_Texture_metadata = { "name" : "Texture",
            "arg_types" : (agcom.PVOID,),
            "marshallers" : (agmarshall.AgInterface_in_arg("IAgStkGraphicsRendererTexture2D"),) }
    @Texture.setter
    def Texture(self, texture:"IAgStkGraphicsRendererTexture2D") -> None:
        return self._intf.set_property(IAgStkGraphicsMarkerBatchPrimitive._metadata, IAgStkGraphicsMarkerBatchPrimitive._set_Texture_metadata, texture)

    _get_SizeUnit_metadata = { "name" : "SizeUnit",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEStkGraphicsMarkerBatchUnit),) }
    @property
    def SizeUnit(self) -> "AgEStkGraphicsMarkerBatchUnit":
        """Gets or sets the unit that each marker's size is defined in."""
        return self._intf.get_property(IAgStkGraphicsMarkerBatchPrimitive._metadata, IAgStkGraphicsMarkerBatchPrimitive._get_SizeUnit_metadata)

    _set_SizeUnit_metadata = { "name" : "SizeUnit",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEStkGraphicsMarkerBatchUnit),) }
    @SizeUnit.setter
    def SizeUnit(self, sizeUnit:"AgEStkGraphicsMarkerBatchUnit") -> None:
        return self._intf.set_property(IAgStkGraphicsMarkerBatchPrimitive._metadata, IAgStkGraphicsMarkerBatchPrimitive._set_SizeUnit_metadata, sizeUnit)

    _get_Size_metadata = { "name" : "Size",
            "arg_types" : (POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg,) }
    @property
    def Size(self) -> list:
        """Gets or sets the per-batch size, which is applied to each marker in the batch. The array contains one width followed by one height."""
        return self._intf.get_property(IAgStkGraphicsMarkerBatchPrimitive._metadata, IAgStkGraphicsMarkerBatchPrimitive._get_Size_metadata)

    _set_Size_metadata = { "name" : "Size",
            "arg_types" : (agcom.LPSAFEARRAY,),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg,) }
    @Size.setter
    def Size(self, size:list) -> None:
        return self._intf.set_property(IAgStkGraphicsMarkerBatchPrimitive._metadata, IAgStkGraphicsMarkerBatchPrimitive._set_Size_metadata, size)

    _get_Origin_metadata = { "name" : "Origin",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEStkGraphicsOrigin),) }
    @property
    def Origin(self) -> "AgEStkGraphicsOrigin":
        """Gets or sets the per-batch origin, which is applied to each marker in the batch."""
        return self._intf.get_property(IAgStkGraphicsMarkerBatchPrimitive._metadata, IAgStkGraphicsMarkerBatchPrimitive._get_Origin_metadata)

    _set_Origin_metadata = { "name" : "Origin",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEStkGraphicsOrigin),) }
    @Origin.setter
    def Origin(self, origin:"AgEStkGraphicsOrigin") -> None:
        return self._intf.set_property(IAgStkGraphicsMarkerBatchPrimitive._metadata, IAgStkGraphicsMarkerBatchPrimitive._set_Origin_metadata, origin)

    _get_PixelOffset_metadata = { "name" : "PixelOffset",
            "arg_types" : (POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg,) }
    @property
    def PixelOffset(self) -> list:
        """Gets or sets the per-batch pixel offset, which is applied to each marker in the batch. The array contains one x pixel offset followed by one y pixel offset."""
        return self._intf.get_property(IAgStkGraphicsMarkerBatchPrimitive._metadata, IAgStkGraphicsMarkerBatchPrimitive._get_PixelOffset_metadata)

    _set_PixelOffset_metadata = { "name" : "PixelOffset",
            "arg_types" : (agcom.LPSAFEARRAY,),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg,) }
    @PixelOffset.setter
    def PixelOffset(self, pixelOffset:list) -> None:
        return self._intf.set_property(IAgStkGraphicsMarkerBatchPrimitive._metadata, IAgStkGraphicsMarkerBatchPrimitive._set_PixelOffset_metadata, pixelOffset)

    _get_EyeOffset_metadata = { "name" : "EyeOffset",
            "arg_types" : (POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg,) }
    @property
    def EyeOffset(self) -> list:
        """Gets or sets the per-batch eye offset, which is applied to each marker in the batch. The array contains the components of the eye offset in the order x, y, z."""
        return self._intf.get_property(IAgStkGraphicsMarkerBatchPrimitive._metadata, IAgStkGraphicsMarkerBatchPrimitive._get_EyeOffset_metadata)

    _set_EyeOffset_metadata = { "name" : "EyeOffset",
            "arg_types" : (agcom.LPSAFEARRAY,),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg,) }
    @EyeOffset.setter
    def EyeOffset(self, eyeOffset:list) -> None:
        return self._intf.set_property(IAgStkGraphicsMarkerBatchPrimitive._metadata, IAgStkGraphicsMarkerBatchPrimitive._set_EyeOffset_metadata, eyeOffset)

    _get_Rotation_metadata = { "name" : "Rotation",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def Rotation(self) -> float:
        """Gets or sets the per-batch rotation angle which is applied to each marker in the batch."""
        return self._intf.get_property(IAgStkGraphicsMarkerBatchPrimitive._metadata, IAgStkGraphicsMarkerBatchPrimitive._get_Rotation_metadata)

    _set_Rotation_metadata = { "name" : "Rotation",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @Rotation.setter
    def Rotation(self, rotation:float) -> None:
        return self._intf.set_property(IAgStkGraphicsMarkerBatchPrimitive._metadata, IAgStkGraphicsMarkerBatchPrimitive._set_Rotation_metadata, rotation)

    _get_TextureCoordinate_metadata = { "name" : "TextureCoordinate",
            "arg_types" : (POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg,) }
    @property
    def TextureCoordinate(self) -> list:
        """Gets or sets the per-batch texture coordinate, which is applied to each marker in the batch. The array contains the texture coordinates arranged in the order s, t, p, q."""
        return self._intf.get_property(IAgStkGraphicsMarkerBatchPrimitive._metadata, IAgStkGraphicsMarkerBatchPrimitive._get_TextureCoordinate_metadata)

    _set_TextureCoordinate_metadata = { "name" : "TextureCoordinate",
            "arg_types" : (agcom.LPSAFEARRAY,),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg,) }
    @TextureCoordinate.setter
    def TextureCoordinate(self, textureCoordinate:list) -> None:
        return self._intf.set_property(IAgStkGraphicsMarkerBatchPrimitive._metadata, IAgStkGraphicsMarkerBatchPrimitive._set_TextureCoordinate_metadata, textureCoordinate)

    _get_Wireframe_metadata = { "name" : "Wireframe",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def Wireframe(self) -> bool:
        """Gets or sets whether the primitive is rendered in wireframe. This is useful for debugging."""
        return self._intf.get_property(IAgStkGraphicsMarkerBatchPrimitive._metadata, IAgStkGraphicsMarkerBatchPrimitive._get_Wireframe_metadata)

    _set_Wireframe_metadata = { "name" : "Wireframe",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @Wireframe.setter
    def Wireframe(self, wireframe:bool) -> None:
        return self._intf.set_property(IAgStkGraphicsMarkerBatchPrimitive._metadata, IAgStkGraphicsMarkerBatchPrimitive._set_Wireframe_metadata, wireframe)

    _get_PerItemPickingEnabled_metadata = { "name" : "PerItemPickingEnabled",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def PerItemPickingEnabled(self) -> bool:
        """Gets or sets whether individual marker indices will be included in the pick results returned from the scene's Pick method. Each marker index that is picked will be returned as a batch primitive index."""
        return self._intf.get_property(IAgStkGraphicsMarkerBatchPrimitive._metadata, IAgStkGraphicsMarkerBatchPrimitive._get_PerItemPickingEnabled_metadata)

    _set_PerItemPickingEnabled_metadata = { "name" : "PerItemPickingEnabled",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @PerItemPickingEnabled.setter
    def PerItemPickingEnabled(self, perItemPickingEnabled:bool) -> None:
        return self._intf.set_property(IAgStkGraphicsMarkerBatchPrimitive._metadata, IAgStkGraphicsMarkerBatchPrimitive._set_PerItemPickingEnabled_metadata, perItemPickingEnabled)

    _get_TextureFilter_metadata = { "name" : "TextureFilter",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def TextureFilter(self) -> "IAgStkGraphicsTextureFilter2D":
        """Gets or sets the filter used for per-marker or per-batch textures."""
        return self._intf.get_property(IAgStkGraphicsMarkerBatchPrimitive._metadata, IAgStkGraphicsMarkerBatchPrimitive._get_TextureFilter_metadata)

    _set_TextureFilter_metadata = { "name" : "TextureFilter",
            "arg_types" : (agcom.PVOID,),
            "marshallers" : (agmarshall.AgInterface_in_arg("IAgStkGraphicsTextureFilter2D"),) }
    @TextureFilter.setter
    def TextureFilter(self, textureFilter:"IAgStkGraphicsTextureFilter2D") -> None:
        return self._intf.set_property(IAgStkGraphicsMarkerBatchPrimitive._metadata, IAgStkGraphicsMarkerBatchPrimitive._set_TextureFilter_metadata, textureFilter)

    _Set_metadata = { "name" : "Set",
            "arg_types" : (POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg,) }
    def Set(self, positions:list) -> None:
        """Defines the positions of markers in a marker batch. The markers are rendered in the primitive's reference frame."""
        return self._intf.invoke(IAgStkGraphicsMarkerBatchPrimitive._metadata, IAgStkGraphicsMarkerBatchPrimitive._Set_metadata, positions)

    _SetWithOptionalParameters_metadata = { "name" : "SetWithOptionalParameters",
            "arg_types" : (POINTER(agcom.LPSAFEARRAY), agcom.PVOID,),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg, agmarshall.AgInterface_in_arg("IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters"),) }
    def SetWithOptionalParameters(self, positions:list, optionalParameters:"IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters") -> None:
        """Defines the positions and optional per-marker parameters of markers in a marker batch. The markers are rendered in the primitive's reference frame."""
        return self._intf.invoke(IAgStkGraphicsMarkerBatchPrimitive._metadata, IAgStkGraphicsMarkerBatchPrimitive._SetWithOptionalParameters_metadata, positions, optionalParameters)

    _SetWithOptionalParametersAndRenderPassHint_metadata = { "name" : "SetWithOptionalParametersAndRenderPassHint",
            "arg_types" : (POINTER(agcom.LPSAFEARRAY), agcom.PVOID, agcom.LONG,),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg, agmarshall.AgInterface_in_arg("IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters"), agmarshall.AgEnum_arg(AgEStkGraphicsRenderPassHint),) }
    def SetWithOptionalParametersAndRenderPassHint(self, positions:list, optionalParameters:"IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters", renderPassHint:"AgEStkGraphicsRenderPassHint") -> None:
        """Defines the positions and optional per-marker parameters of markers in a marker batch. The markers are rendered in the primitive's reference frame. renderPassHint is provided for efficiency."""
        return self._intf.invoke(IAgStkGraphicsMarkerBatchPrimitive._metadata, IAgStkGraphicsMarkerBatchPrimitive._SetWithOptionalParametersAndRenderPassHint_metadata, positions, optionalParameters, renderPassHint)

    _SetCartographic_metadata = { "name" : "SetCartographic",
            "arg_types" : (agcom.BSTR, POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.LPSAFEARRAY_arg,) }
    def SetCartographic(self, centralBody:str, positions:list) -> None:
        """For convenience. Defines the positions of markers in a marker batch using cartographic positions. This is equivalent to converting each position in positions to cartesian and calling Set."""
        return self._intf.invoke(IAgStkGraphicsMarkerBatchPrimitive._metadata, IAgStkGraphicsMarkerBatchPrimitive._SetCartographic_metadata, centralBody, positions)

    _SetCartographicWithOptionalParameters_metadata = { "name" : "SetCartographicWithOptionalParameters",
            "arg_types" : (agcom.BSTR, POINTER(agcom.LPSAFEARRAY), agcom.PVOID,),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.LPSAFEARRAY_arg, agmarshall.AgInterface_in_arg("IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters"),) }
    def SetCartographicWithOptionalParameters(self, centralBody:str, positions:list, optionalParameters:"IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters") -> None:
        """For convenience. Defines the positions and optional per-marker parameters of markers in a marker batch using cartographic positions. This is equivalent to converting each position in positions to cartesian and calling Set."""
        return self._intf.invoke(IAgStkGraphicsMarkerBatchPrimitive._metadata, IAgStkGraphicsMarkerBatchPrimitive._SetCartographicWithOptionalParameters_metadata, centralBody, positions, optionalParameters)

    _SetCartographicWithOptionalParametersAndRenderPassHint_metadata = { "name" : "SetCartographicWithOptionalParametersAndRenderPassHint",
            "arg_types" : (agcom.BSTR, POINTER(agcom.LPSAFEARRAY), agcom.PVOID, agcom.LONG,),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.LPSAFEARRAY_arg, agmarshall.AgInterface_in_arg("IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters"), agmarshall.AgEnum_arg(AgEStkGraphicsRenderPassHint),) }
    def SetCartographicWithOptionalParametersAndRenderPassHint(self, centralBody:str, positions:list, optionalParameters:"IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters", renderPassHint:"AgEStkGraphicsRenderPassHint") -> None:
        """For convenience. Defines the positions and optional per-marker parameters of markers in a marker batch using cartographic positions. renderPassHint is provided for efficiency..."""
        return self._intf.invoke(IAgStkGraphicsMarkerBatchPrimitive._metadata, IAgStkGraphicsMarkerBatchPrimitive._SetCartographicWithOptionalParametersAndRenderPassHint_metadata, centralBody, positions, optionalParameters, renderPassHint)

    _SetPartial_metadata = { "name" : "SetPartial",
            "arg_types" : (POINTER(agcom.LPSAFEARRAY), POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg, agmarshall.LPSAFEARRAY_arg,) }
    def SetPartial(self, positions:list, indices:list) -> None:
        """Updates a subset of marker positions in a marker batch."""
        return self._intf.invoke(IAgStkGraphicsMarkerBatchPrimitive._metadata, IAgStkGraphicsMarkerBatchPrimitive._SetPartial_metadata, positions, indices)

    _SetPartialWithIndicesOrder_metadata = { "name" : "SetPartialWithIndicesOrder",
            "arg_types" : (POINTER(agcom.LPSAFEARRAY), POINTER(agcom.LPSAFEARRAY), agcom.LONG,),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg, agmarshall.LPSAFEARRAY_arg, agmarshall.AgEnum_arg(AgEStkGraphicsIndicesOrderHint),) }
    def SetPartialWithIndicesOrder(self, positions:list, indices:list, indicesOrderHint:"AgEStkGraphicsIndicesOrderHint") -> None:
        """Updates a subset of marker positions in a marker batch."""
        return self._intf.invoke(IAgStkGraphicsMarkerBatchPrimitive._metadata, IAgStkGraphicsMarkerBatchPrimitive._SetPartialWithIndicesOrder_metadata, positions, indices, indicesOrderHint)

    _SetPartialWithOptionalParameters_metadata = { "name" : "SetPartialWithOptionalParameters",
            "arg_types" : (POINTER(agcom.LPSAFEARRAY), agcom.PVOID, POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg, agmarshall.AgInterface_in_arg("IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters"), agmarshall.LPSAFEARRAY_arg,) }
    def SetPartialWithOptionalParameters(self, positions:list, optionalParameters:"IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters", indices:list) -> None:
        """Updates a subset of marker positions and/or per-marker parameters in a marker batch."""
        return self._intf.invoke(IAgStkGraphicsMarkerBatchPrimitive._metadata, IAgStkGraphicsMarkerBatchPrimitive._SetPartialWithOptionalParameters_metadata, positions, optionalParameters, indices)

    _SetPartialWithOptionalParametersIndicesOrderAndRenderPass_metadata = { "name" : "SetPartialWithOptionalParametersIndicesOrderAndRenderPass",
            "arg_types" : (POINTER(agcom.LPSAFEARRAY), agcom.PVOID, POINTER(agcom.LPSAFEARRAY), agcom.LONG, agcom.LONG,),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg, agmarshall.AgInterface_in_arg("IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters"), agmarshall.LPSAFEARRAY_arg, agmarshall.AgEnum_arg(AgEStkGraphicsIndicesOrderHint), agmarshall.AgEnum_arg(AgEStkGraphicsRenderPassHint),) }
    def SetPartialWithOptionalParametersIndicesOrderAndRenderPass(self, positions:list, optionalParameters:"IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters", indices:list, indicesOrderHint:"AgEStkGraphicsIndicesOrderHint", renderPassHint:"AgEStkGraphicsRenderPassHint") -> None:
        """Updates a subset of marker positions and/or per-marker parameters in a marker batch."""
        return self._intf.invoke(IAgStkGraphicsMarkerBatchPrimitive._metadata, IAgStkGraphicsMarkerBatchPrimitive._SetPartialWithOptionalParametersIndicesOrderAndRenderPass_metadata, positions, optionalParameters, indices, indicesOrderHint, renderPassHint)

    _SetPartialCartographic_metadata = { "name" : "SetPartialCartographic",
            "arg_types" : (agcom.BSTR, POINTER(agcom.LPSAFEARRAY), POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.LPSAFEARRAY_arg, agmarshall.LPSAFEARRAY_arg,) }
    def SetPartialCartographic(self, centralBody:str, positions:list, indices:list) -> None:
        """For convenience. Updates a subset of positions in a marker batch using cartographic positions. This is equivalent to converting each position in positions to cartesian and calling SetPartial."""
        return self._intf.invoke(IAgStkGraphicsMarkerBatchPrimitive._metadata, IAgStkGraphicsMarkerBatchPrimitive._SetPartialCartographic_metadata, centralBody, positions, indices)

    _SetPartialCartographicWithIndicesOrder_metadata = { "name" : "SetPartialCartographicWithIndicesOrder",
            "arg_types" : (agcom.BSTR, POINTER(agcom.LPSAFEARRAY), POINTER(agcom.LPSAFEARRAY), agcom.LONG,),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.LPSAFEARRAY_arg, agmarshall.LPSAFEARRAY_arg, agmarshall.AgEnum_arg(AgEStkGraphicsIndicesOrderHint),) }
    def SetPartialCartographicWithIndicesOrder(self, centralBody:str, positions:list, indices:list, indicesOrderHint:"AgEStkGraphicsIndicesOrderHint") -> None:
        """For convenience. Updates a subset of positions in a marker batch using cartographic positions. This is equivalent to converting each position in positions to cartesian and calling SetPartial."""
        return self._intf.invoke(IAgStkGraphicsMarkerBatchPrimitive._metadata, IAgStkGraphicsMarkerBatchPrimitive._SetPartialCartographicWithIndicesOrder_metadata, centralBody, positions, indices, indicesOrderHint)

    _SetPartialCartographicWithOptionalParameters_metadata = { "name" : "SetPartialCartographicWithOptionalParameters",
            "arg_types" : (agcom.BSTR, POINTER(agcom.LPSAFEARRAY), agcom.PVOID, POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.LPSAFEARRAY_arg, agmarshall.AgInterface_in_arg("IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters"), agmarshall.LPSAFEARRAY_arg,) }
    def SetPartialCartographicWithOptionalParameters(self, centralBody:str, positions:list, optionalParameters:"IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters", indices:list) -> None:
        """For convenience. Updates a subset of positions and/or optional per-marker parameters of markers in a marker batch using cartographic positions. This is equivalent to converting each position in positions to cartesian and calling SetPartial."""
        return self._intf.invoke(IAgStkGraphicsMarkerBatchPrimitive._metadata, IAgStkGraphicsMarkerBatchPrimitive._SetPartialCartographicWithOptionalParameters_metadata, centralBody, positions, optionalParameters, indices)

    _SetPartialCartographicWithOptionalParametersIndicesOrderAndRenderPass_metadata = { "name" : "SetPartialCartographicWithOptionalParametersIndicesOrderAndRenderPass",
            "arg_types" : (agcom.BSTR, POINTER(agcom.LPSAFEARRAY), agcom.PVOID, POINTER(agcom.LPSAFEARRAY), agcom.LONG, agcom.LONG,),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.LPSAFEARRAY_arg, agmarshall.AgInterface_in_arg("IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters"), agmarshall.LPSAFEARRAY_arg, agmarshall.AgEnum_arg(AgEStkGraphicsIndicesOrderHint), agmarshall.AgEnum_arg(AgEStkGraphicsRenderPassHint),) }
    def SetPartialCartographicWithOptionalParametersIndicesOrderAndRenderPass(self, centralBody:str, positions:list, optionalParameters:"IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters", indices:list, indicesOrderHint:"AgEStkGraphicsIndicesOrderHint", renderPassHint:"AgEStkGraphicsRenderPassHint") -> None:
        """For convenience. Updates a subset of positions and/or optional per-marker parameters of markers in a marker batch using cartographic positions. renderPassHint is provided for efficiency..."""
        return self._intf.invoke(IAgStkGraphicsMarkerBatchPrimitive._metadata, IAgStkGraphicsMarkerBatchPrimitive._SetPartialCartographicWithOptionalParametersIndicesOrderAndRenderPass_metadata, centralBody, positions, optionalParameters, indices, indicesOrderHint, renderPassHint)

    _Supported_metadata = { "name" : "Supported",
            "arg_types" : (agcom.LONG, POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEStkGraphicsMarkerBatchRenderingMethod), agmarshall.VARIANT_BOOL_arg,) }
    def Supported(self, renderingMethod:"AgEStkGraphicsMarkerBatchRenderingMethod") -> bool:
        """Determines whether or not the video card supports the marker batch primitive with the given renderingMethod."""
        return self._intf.invoke(IAgStkGraphicsMarkerBatchPrimitive._metadata, IAgStkGraphicsMarkerBatchPrimitive._Supported_metadata, renderingMethod, out_arg())

    _get_ClampToPixel_metadata = { "name" : "ClampToPixel",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def ClampToPixel(self) -> bool:
        """Gets or sets whether the screen space position of each marker is clamped to a pixel."""
        return self._intf.get_property(IAgStkGraphicsMarkerBatchPrimitive._metadata, IAgStkGraphicsMarkerBatchPrimitive._get_ClampToPixel_metadata)

    _set_ClampToPixel_metadata = { "name" : "ClampToPixel",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @ClampToPixel.setter
    def ClampToPixel(self, clampToPixel:bool) -> None:
        return self._intf.set_property(IAgStkGraphicsMarkerBatchPrimitive._metadata, IAgStkGraphicsMarkerBatchPrimitive._set_ClampToPixel_metadata, clampToPixel)

    _get_CentralBodyClipped_metadata = { "name" : "CentralBodyClipped",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def CentralBodyClipped(self) -> bool:
        """Gets or sets whether the markers are clipped by the central body."""
        return self._intf.get_property(IAgStkGraphicsMarkerBatchPrimitive._metadata, IAgStkGraphicsMarkerBatchPrimitive._get_CentralBodyClipped_metadata)

    _set_CentralBodyClipped_metadata = { "name" : "CentralBodyClipped",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @CentralBodyClipped.setter
    def CentralBodyClipped(self, centralBodyClipped:bool) -> None:
        return self._intf.set_property(IAgStkGraphicsMarkerBatchPrimitive._metadata, IAgStkGraphicsMarkerBatchPrimitive._set_CentralBodyClipped_metadata, centralBodyClipped)

    _AlignToScreen_metadata = { "name" : "AlignToScreen",
            "arg_types" : (),
            "marshallers" : () }
    def AlignToScreen(self) -> None:
        """Sets the up vector of the markers to always be aligned to the up vector of the camera. This is the default alignment."""
        return self._intf.invoke(IAgStkGraphicsMarkerBatchPrimitive._metadata, IAgStkGraphicsMarkerBatchPrimitive._AlignToScreen_metadata, )

    _AlignToNorth_metadata = { "name" : "AlignToNorth",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    def AlignToNorth(self, centralBody:str) -> None:
        """Sets the up vector of the markers to point towards the north axis of centralBody. It will be aligned with the tangent vector of the surface that points north."""
        return self._intf.invoke(IAgStkGraphicsMarkerBatchPrimitive._metadata, IAgStkGraphicsMarkerBatchPrimitive._AlignToNorth_metadata, centralBody)

    _AlignToAxis_metadata = { "name" : "AlignToAxis",
            "arg_types" : (agcom.BSTR, POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.LPSAFEARRAY_arg,) }
    def AlignToAxis(self, centralBody:str, axis:list) -> None:
        """Sets the up vector of the markers to point towards the axis of centralBody. It will be aligned with the tangent vector of the surface that points towards the axis..."""
        return self._intf.invoke(IAgStkGraphicsMarkerBatchPrimitive._metadata, IAgStkGraphicsMarkerBatchPrimitive._AlignToAxis_metadata, centralBody, axis)


agcls.AgClassCatalog.add_catalog_entry("{235878c1-62d9-4ce6-85ff-9d82aff701e9}", IAgStkGraphicsMarkerBatchPrimitive)
agcls.AgTypeNameMap["IAgStkGraphicsMarkerBatchPrimitive"] = IAgStkGraphicsMarkerBatchPrimitive

class IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters(object):
    """Optional per-marker parameters for marker batch primitive that overrides the marker batch's per-batch parameters..."""
    _num_methods = 10
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{7303b63e-a1b7-445e-90e0-508a6937de86}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "SetTextures" : 1,
                             "SetSizes" : 2,
                             "SetColors" : 3,
                             "SetOrigins" : 4,
                             "SetPixelOffsets" : 5,
                             "SetEyeOffsets" : 6,
                             "SetRotations" : 7,
                             "SetTextureCoordinates" : 8,
                             "SetTimeIntervalDisplayConditions" : 9,
                             "SetDisplays" : 10, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters.__dict__ and type(IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters.__dict__[attrname]) == property:
            return IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters.")
    
    _SetTextures_metadata = { "name" : "SetTextures",
            "arg_types" : (POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg,) }
    def SetTextures(self, textures:list) -> None:
        """Defines a collection of textures, one for each marker in the batch."""
        return self._intf.invoke(IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters._metadata, IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters._SetTextures_metadata, textures)

    _SetSizes_metadata = { "name" : "SetSizes",
            "arg_types" : (POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg,) }
    def SetSizes(self, sizes:list) -> None:
        """Defines a collection of sizes, one for each marker in the batch."""
        return self._intf.invoke(IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters._metadata, IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters._SetSizes_metadata, sizes)

    _SetColors_metadata = { "name" : "SetColors",
            "arg_types" : (POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg,) }
    def SetColors(self, colors:list) -> None:
        """Defines a collection of colors, one for each marker in the batch."""
        return self._intf.invoke(IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters._metadata, IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters._SetColors_metadata, colors)

    _SetOrigins_metadata = { "name" : "SetOrigins",
            "arg_types" : (POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg,) }
    def SetOrigins(self, origins:list) -> None:
        """Defines a collection of origins, one for each marker in the batch."""
        return self._intf.invoke(IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters._metadata, IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters._SetOrigins_metadata, origins)

    _SetPixelOffsets_metadata = { "name" : "SetPixelOffsets",
            "arg_types" : (POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg,) }
    def SetPixelOffsets(self, pixelOffsets:list) -> None:
        """Defines a collection of pixel offsets, one for each marker in the batch."""
        return self._intf.invoke(IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters._metadata, IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters._SetPixelOffsets_metadata, pixelOffsets)

    _SetEyeOffsets_metadata = { "name" : "SetEyeOffsets",
            "arg_types" : (POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg,) }
    def SetEyeOffsets(self, eyeOffsets:list) -> None:
        """Defines a collection of eye offsets, one for each marker in the batch."""
        return self._intf.invoke(IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters._metadata, IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters._SetEyeOffsets_metadata, eyeOffsets)

    _SetRotations_metadata = { "name" : "SetRotations",
            "arg_types" : (POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg,) }
    def SetRotations(self, rotationAngles:list) -> None:
        """Defines a collection of rotation angles, one for each marker in the batch."""
        return self._intf.invoke(IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters._metadata, IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters._SetRotations_metadata, rotationAngles)

    _SetTextureCoordinates_metadata = { "name" : "SetTextureCoordinates",
            "arg_types" : (POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg,) }
    def SetTextureCoordinates(self, textureCoordinates:list) -> None:
        """Defines a collection of texture coordinates, one for each marker in the batch."""
        return self._intf.invoke(IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters._metadata, IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters._SetTextureCoordinates_metadata, textureCoordinates)

    _SetTimeIntervalDisplayConditions_metadata = { "name" : "SetTimeIntervalDisplayConditions",
            "arg_types" : (POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg,) }
    def SetTimeIntervalDisplayConditions(self, timeIntervals:list) -> None:
        """Defines a collection of time interval display conditions, one for each marker in the batch."""
        return self._intf.invoke(IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters._metadata, IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters._SetTimeIntervalDisplayConditions_metadata, timeIntervals)

    _SetDisplays_metadata = { "name" : "SetDisplays",
            "arg_types" : (POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg,) }
    def SetDisplays(self, displays:list) -> None:
        """Defines a collection of boolean display flags, one for each marker in the batch."""
        return self._intf.invoke(IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters._metadata, IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters._SetDisplays_metadata, displays)


agcls.AgClassCatalog.add_catalog_entry("{7303b63e-a1b7-445e-90e0-508a6937de86}", IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters)
agcls.AgTypeNameMap["IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters"] = IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters

class IAgStkGraphicsMaximumCountPathPrimitiveUpdatePolicy(object):
    """path primitive update policy that removes points from remove location when the number of points in the path exceeds maximum count."""
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{fcacfb20-3ffb-46c4-9e07-495b1446c52b}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_MaximumCount" : 1,
                             "set_MaximumCount" : 2,
                             "get_RemoveLocation" : 3,
                             "set_RemoveLocation" : 4, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsMaximumCountPathPrimitiveUpdatePolicy._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsMaximumCountPathPrimitiveUpdatePolicy from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsMaximumCountPathPrimitiveUpdatePolicy.__dict__ and type(IAgStkGraphicsMaximumCountPathPrimitiveUpdatePolicy.__dict__[attrname]) == property:
            return IAgStkGraphicsMaximumCountPathPrimitiveUpdatePolicy.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsMaximumCountPathPrimitiveUpdatePolicy.")
    
    _get_MaximumCount_metadata = { "name" : "MaximumCount",
            "arg_types" : (POINTER(agcom.INT),),
            "marshallers" : (agmarshall.INT_arg,) }
    @property
    def MaximumCount(self) -> int:
        """Gets or sets the maximum number of points in the path."""
        return self._intf.get_property(IAgStkGraphicsMaximumCountPathPrimitiveUpdatePolicy._metadata, IAgStkGraphicsMaximumCountPathPrimitiveUpdatePolicy._get_MaximumCount_metadata)

    _set_MaximumCount_metadata = { "name" : "MaximumCount",
            "arg_types" : (agcom.INT,),
            "marshallers" : (agmarshall.INT_arg,) }
    @MaximumCount.setter
    def MaximumCount(self, maximumCount:int) -> None:
        return self._intf.set_property(IAgStkGraphicsMaximumCountPathPrimitiveUpdatePolicy._metadata, IAgStkGraphicsMaximumCountPathPrimitiveUpdatePolicy._set_MaximumCount_metadata, maximumCount)

    _get_RemoveLocation_metadata = { "name" : "RemoveLocation",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEStkGraphicsPathPrimitiveRemoveLocation),) }
    @property
    def RemoveLocation(self) -> "AgEStkGraphicsPathPrimitiveRemoveLocation":
        """Gets or sets where the positions on the path are removed from."""
        return self._intf.get_property(IAgStkGraphicsMaximumCountPathPrimitiveUpdatePolicy._metadata, IAgStkGraphicsMaximumCountPathPrimitiveUpdatePolicy._get_RemoveLocation_metadata)

    _set_RemoveLocation_metadata = { "name" : "RemoveLocation",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEStkGraphicsPathPrimitiveRemoveLocation),) }
    @RemoveLocation.setter
    def RemoveLocation(self, removeLocation:"AgEStkGraphicsPathPrimitiveRemoveLocation") -> None:
        return self._intf.set_property(IAgStkGraphicsMaximumCountPathPrimitiveUpdatePolicy._metadata, IAgStkGraphicsMaximumCountPathPrimitiveUpdatePolicy._set_RemoveLocation_metadata, removeLocation)


agcls.AgClassCatalog.add_catalog_entry("{fcacfb20-3ffb-46c4-9e07-495b1446c52b}", IAgStkGraphicsMaximumCountPathPrimitiveUpdatePolicy)
agcls.AgTypeNameMap["IAgStkGraphicsMaximumCountPathPrimitiveUpdatePolicy"] = IAgStkGraphicsMaximumCountPathPrimitiveUpdatePolicy

class IAgStkGraphicsModelArticulation(object):
    """A model articulation identifies geometry on the model and is a collection of transformations that can be applied to that geometry."""
    _num_methods = 7
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{4554a375-123b-4a39-b727-3e9131879196}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_Name" : 1,
                             "get_Count" : 2,
                             "Item" : 3,
                             "GetItemByString" : 4,
                             "GetByName" : 5,
                             "Contains" : 6,
                             "get__NewEnum" : 7, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsModelArticulation._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsModelArticulation from source object.")
        self.__dict__["_enumerator"] = None
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsModelArticulation.__dict__ and type(IAgStkGraphicsModelArticulation.__dict__[attrname]) == property:
            return IAgStkGraphicsModelArticulation.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsModelArticulation.")
    def __iter__(self):
        self.__dict__["_enumerator"] = self._NewEnum
        self._enumerator.reset()
        return self
    def __next__(self) -> "IAgStkGraphicsModelTransformation":
        if self._enumerator is None:
            raise StopIteration
        nextval = self._enumerator.next()
        if nextval is None:
            raise StopIteration
        return nextval
    
    _get_Name_metadata = { "name" : "Name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def Name(self) -> str:
        """Gets the name of the articulation."""
        return self._intf.get_property(IAgStkGraphicsModelArticulation._metadata, IAgStkGraphicsModelArticulation._get_Name_metadata)

    _get_Count_metadata = { "name" : "Count",
            "arg_types" : (POINTER(agcom.INT),),
            "marshallers" : (agmarshall.INT_arg,) }
    @property
    def Count(self) -> int:
        """Gets the number of transformations in the collection."""
        return self._intf.get_property(IAgStkGraphicsModelArticulation._metadata, IAgStkGraphicsModelArticulation._get_Count_metadata)

    _Item_metadata = { "name" : "Item",
            "arg_types" : (agcom.INT, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.INT_arg, agmarshall.AgInterface_out_arg,) }
    def Item(self, index:int) -> "IAgStkGraphicsModelTransformation":
        """Gets the transformation at the given index. The index is zero-based."""
        return self._intf.invoke(IAgStkGraphicsModelArticulation._metadata, IAgStkGraphicsModelArticulation._Item_metadata, index, out_arg())

    _GetItemByString_metadata = { "name" : "GetItemByString",
            "arg_types" : (agcom.BSTR, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.AgInterface_out_arg,) }
    def GetItemByString(self, name:str) -> "IAgStkGraphicsModelTransformation":
        """Gets a transformation by name."""
        return self._intf.invoke(IAgStkGraphicsModelArticulation._metadata, IAgStkGraphicsModelArticulation._GetItemByString_metadata, name, out_arg())

    _GetByName_metadata = { "name" : "GetByName",
            "arg_types" : (agcom.BSTR, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.AgInterface_out_arg,) }
    def GetByName(self, name:str) -> "IAgStkGraphicsModelTransformation":
        """Gets a transformation by name."""
        return self._intf.invoke(IAgStkGraphicsModelArticulation._metadata, IAgStkGraphicsModelArticulation._GetByName_metadata, name, out_arg())

    _Contains_metadata = { "name" : "Contains",
            "arg_types" : (agcom.BSTR, POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.VARIANT_BOOL_arg,) }
    def Contains(self, name:str) -> bool:
        """Returns true if the collection contains the transformation."""
        return self._intf.invoke(IAgStkGraphicsModelArticulation._metadata, IAgStkGraphicsModelArticulation._Contains_metadata, name, out_arg())

    _get__NewEnum_metadata = { "name" : "_NewEnum",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.IEnumVARIANT_arg,) }
    @property
    def _NewEnum(self) -> enumerator_proxy:
        """Returns the enumerator for this collection."""
        return self._intf.get_property(IAgStkGraphicsModelArticulation._metadata, IAgStkGraphicsModelArticulation._get__NewEnum_metadata)

    __getitem__ = Item



agcls.AgClassCatalog.add_catalog_entry("{4554a375-123b-4a39-b727-3e9131879196}", IAgStkGraphicsModelArticulation)
agcls.AgTypeNameMap["IAgStkGraphicsModelArticulation"] = IAgStkGraphicsModelArticulation

class IAgStkGraphicsModelArticulationCollection(object):
    """A collection containing a model primitive's available articulations. A model articulation identifies geometry on the model and is a collection of transformations that can be applied to that geometry."""
    _num_methods = 6
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{cf6e3054-4d92-42f8-ac4d-e43bfd93d23d}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_Count" : 1,
                             "Item" : 2,
                             "GetItemByString" : 3,
                             "GetByName" : 4,
                             "Contains" : 5,
                             "get__NewEnum" : 6, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsModelArticulationCollection._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsModelArticulationCollection from source object.")
        self.__dict__["_enumerator"] = None
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsModelArticulationCollection.__dict__ and type(IAgStkGraphicsModelArticulationCollection.__dict__[attrname]) == property:
            return IAgStkGraphicsModelArticulationCollection.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsModelArticulationCollection.")
    def __iter__(self):
        self.__dict__["_enumerator"] = self._NewEnum
        self._enumerator.reset()
        return self
    def __next__(self) -> "IAgStkGraphicsModelArticulation":
        if self._enumerator is None:
            raise StopIteration
        nextval = self._enumerator.next()
        if nextval is None:
            raise StopIteration
        return nextval
    
    _get_Count_metadata = { "name" : "Count",
            "arg_types" : (POINTER(agcom.INT),),
            "marshallers" : (agmarshall.INT_arg,) }
    @property
    def Count(self) -> int:
        """Gets the number of articulations in the collection."""
        return self._intf.get_property(IAgStkGraphicsModelArticulationCollection._metadata, IAgStkGraphicsModelArticulationCollection._get_Count_metadata)

    _Item_metadata = { "name" : "Item",
            "arg_types" : (agcom.INT, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.INT_arg, agmarshall.AgInterface_out_arg,) }
    def Item(self, index:int) -> "IAgStkGraphicsModelArticulation":
        """Gets the articulation at the given index. The index is zero-based."""
        return self._intf.invoke(IAgStkGraphicsModelArticulationCollection._metadata, IAgStkGraphicsModelArticulationCollection._Item_metadata, index, out_arg())

    _GetItemByString_metadata = { "name" : "GetItemByString",
            "arg_types" : (agcom.BSTR, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.AgInterface_out_arg,) }
    def GetItemByString(self, name:str) -> "IAgStkGraphicsModelArticulation":
        """Gets an articulation by name."""
        return self._intf.invoke(IAgStkGraphicsModelArticulationCollection._metadata, IAgStkGraphicsModelArticulationCollection._GetItemByString_metadata, name, out_arg())

    _GetByName_metadata = { "name" : "GetByName",
            "arg_types" : (agcom.BSTR, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.AgInterface_out_arg,) }
    def GetByName(self, name:str) -> "IAgStkGraphicsModelArticulation":
        """Gets an articulation by name."""
        return self._intf.invoke(IAgStkGraphicsModelArticulationCollection._metadata, IAgStkGraphicsModelArticulationCollection._GetByName_metadata, name, out_arg())

    _Contains_metadata = { "name" : "Contains",
            "arg_types" : (agcom.BSTR, POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.VARIANT_BOOL_arg,) }
    def Contains(self, name:str) -> bool:
        """Returns true if the collection contains the articulation."""
        return self._intf.invoke(IAgStkGraphicsModelArticulationCollection._metadata, IAgStkGraphicsModelArticulationCollection._Contains_metadata, name, out_arg())

    _get__NewEnum_metadata = { "name" : "_NewEnum",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.IEnumVARIANT_arg,) }
    @property
    def _NewEnum(self) -> enumerator_proxy:
        """Returns the enumerator for this collection."""
        return self._intf.get_property(IAgStkGraphicsModelArticulationCollection._metadata, IAgStkGraphicsModelArticulationCollection._get__NewEnum_metadata)

    __getitem__ = Item



agcls.AgClassCatalog.add_catalog_entry("{cf6e3054-4d92-42f8-ac4d-e43bfd93d23d}", IAgStkGraphicsModelArticulationCollection)
agcls.AgTypeNameMap["IAgStkGraphicsModelArticulationCollection"] = IAgStkGraphicsModelArticulationCollection

class IAgStkGraphicsModelPrimitive(object):
    """The model primitive loads and renders <a href='https://www.khronos.org/collada/'>COLLADA</a> (DAE) and AGI <a href='https://support.agi.com/3d-models'>MDL</a> (MDL) models."""
    _num_methods = 11
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{67a2ad57-e9b2-4dc9-b509-62cbebc405ca}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_UriAsString" : 1,
                             "get_Scale" : 2,
                             "set_Scale" : 3,
                             "get_Position" : 4,
                             "set_Position" : 5,
                             "get_Orientation" : 6,
                             "set_Orientation" : 7,
                             "get_Articulations" : 8,
                             "LoadWithStringUri" : 9,
                             "LoadWithStringUriAndUpAxis" : 10,
                             "SetPositionCartographic" : 11, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsModelPrimitive._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsModelPrimitive from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsModelPrimitive.__dict__ and type(IAgStkGraphicsModelPrimitive.__dict__[attrname]) == property:
            return IAgStkGraphicsModelPrimitive.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsModelPrimitive.")
    
    _get_UriAsString_metadata = { "name" : "UriAsString",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def UriAsString(self) -> str:
        """Gets the URI of the file used to load the file."""
        return self._intf.get_property(IAgStkGraphicsModelPrimitive._metadata, IAgStkGraphicsModelPrimitive._get_UriAsString_metadata)

    _get_Scale_metadata = { "name" : "Scale",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def Scale(self) -> float:
        """Gets or sets the linear scale used to increase or decrease the size of the rendered model."""
        return self._intf.get_property(IAgStkGraphicsModelPrimitive._metadata, IAgStkGraphicsModelPrimitive._get_Scale_metadata)

    _set_Scale_metadata = { "name" : "Scale",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @Scale.setter
    def Scale(self, scale:float) -> None:
        return self._intf.set_property(IAgStkGraphicsModelPrimitive._metadata, IAgStkGraphicsModelPrimitive._set_Scale_metadata, scale)

    _get_Position_metadata = { "name" : "Position",
            "arg_types" : (POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg,) }
    @property
    def Position(self) -> list:
        """Gets or sets the position of the model. The position is defined in the model's reference frame. The array contains the components of the position in the order x, y, z."""
        return self._intf.get_property(IAgStkGraphicsModelPrimitive._metadata, IAgStkGraphicsModelPrimitive._get_Position_metadata)

    _set_Position_metadata = { "name" : "Position",
            "arg_types" : (agcom.LPSAFEARRAY,),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg,) }
    @Position.setter
    def Position(self, position:list) -> None:
        return self._intf.set_property(IAgStkGraphicsModelPrimitive._metadata, IAgStkGraphicsModelPrimitive._set_Position_metadata, position)

    _get_Orientation_metadata = { "name" : "Orientation",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def Orientation(self) -> "IAgOrientation":
        """Gets or sets the model's orientation. The quaternion is a rotation from the model's local axes to the axes of the model's reference frame."""
        return self._intf.get_property(IAgStkGraphicsModelPrimitive._metadata, IAgStkGraphicsModelPrimitive._get_Orientation_metadata)

    _set_Orientation_metadata = { "name" : "Orientation",
            "arg_types" : (agcom.PVOID,),
            "marshallers" : (agmarshall.AgInterface_in_arg("IAgOrientation"),) }
    @Orientation.setter
    def Orientation(self, orientation:"IAgOrientation") -> None:
        return self._intf.set_property(IAgStkGraphicsModelPrimitive._metadata, IAgStkGraphicsModelPrimitive._set_Orientation_metadata, orientation)

    _get_Articulations_metadata = { "name" : "Articulations",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def Articulations(self) -> "IAgStkGraphicsModelArticulationCollection":
        """Gets the model's articulations. Articulations identify geometry and contain transformations for manipulating that geometry."""
        return self._intf.get_property(IAgStkGraphicsModelPrimitive._metadata, IAgStkGraphicsModelPrimitive._get_Articulations_metadata)

    _LoadWithStringUri_metadata = { "name" : "LoadWithStringUri",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    def LoadWithStringUri(self, uri:str) -> None:
        """For convenience. Loads a <a href='https://www.khronos.org/collada/'>COLLADA</a> (DAE) or AGI <a href='https://support.agi.com/3d-models'>MDL</a> (MDL) model using a file path."""
        return self._intf.invoke(IAgStkGraphicsModelPrimitive._metadata, IAgStkGraphicsModelPrimitive._LoadWithStringUri_metadata, uri)

    _LoadWithStringUriAndUpAxis_metadata = { "name" : "LoadWithStringUriAndUpAxis",
            "arg_types" : (agcom.BSTR, agcom.LONG,),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.AgEnum_arg(AgEStkGraphicsModelUpAxis),) }
    def LoadWithStringUriAndUpAxis(self, uri:str, upAxis:"AgEStkGraphicsModelUpAxis") -> None:
        """For convenience. Loads a <a href='https://www.khronos.org/collada/'>COLLADA</a> (DAE) or AGI <a href='https://support.agi.com/3d-models'>MDL</a> (MDL) model using a file path."""
        return self._intf.invoke(IAgStkGraphicsModelPrimitive._metadata, IAgStkGraphicsModelPrimitive._LoadWithStringUriAndUpAxis_metadata, uri, upAxis)

    _SetPositionCartographic_metadata = { "name" : "SetPositionCartographic",
            "arg_types" : (agcom.BSTR, POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.LPSAFEARRAY_arg,) }
    def SetPositionCartographic(self, centralBody:str, position:list) -> None:
        """For convenience. Sets the cartographic position of the model. This also sets position."""
        return self._intf.invoke(IAgStkGraphicsModelPrimitive._metadata, IAgStkGraphicsModelPrimitive._SetPositionCartographic_metadata, centralBody, position)


agcls.AgClassCatalog.add_catalog_entry("{67a2ad57-e9b2-4dc9-b509-62cbebc405ca}", IAgStkGraphicsModelPrimitive)
agcls.AgTypeNameMap["IAgStkGraphicsModelPrimitive"] = IAgStkGraphicsModelPrimitive

class IAgStkGraphicsModelTransformation(object):
    """A model transformation defines a transformation that is applied to geometry on a model primitive. That geometry is identified by the model articulation which contains the transformation..."""
    _num_methods = 8
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{c58f7fc4-2f63-494d-a461-2c385a53b9a2}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_CurrentValue" : 1,
                             "set_CurrentValue" : 2,
                             "get_MinimumValue" : 3,
                             "get_MaximumValue" : 4,
                             "get_DefaultValue" : 5,
                             "get_Range" : 6,
                             "get_Name" : 7,
                             "get_Type" : 8, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsModelTransformation._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsModelTransformation from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsModelTransformation.__dict__ and type(IAgStkGraphicsModelTransformation.__dict__[attrname]) == property:
            return IAgStkGraphicsModelTransformation.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsModelTransformation.")
    
    _get_CurrentValue_metadata = { "name" : "CurrentValue",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def CurrentValue(self) -> float:
        """Gets or sets the current value of the transformation. The current value of the transformation will be reflected in the geometry of the model primitive that it is associated with."""
        return self._intf.get_property(IAgStkGraphicsModelTransformation._metadata, IAgStkGraphicsModelTransformation._get_CurrentValue_metadata)

    _set_CurrentValue_metadata = { "name" : "CurrentValue",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @CurrentValue.setter
    def CurrentValue(self, currentValue:float) -> None:
        return self._intf.set_property(IAgStkGraphicsModelTransformation._metadata, IAgStkGraphicsModelTransformation._set_CurrentValue_metadata, currentValue)

    _get_MinimumValue_metadata = { "name" : "MinimumValue",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def MinimumValue(self) -> float:
        """Gets the minimum value of the transformation."""
        return self._intf.get_property(IAgStkGraphicsModelTransformation._metadata, IAgStkGraphicsModelTransformation._get_MinimumValue_metadata)

    _get_MaximumValue_metadata = { "name" : "MaximumValue",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def MaximumValue(self) -> float:
        """Gets the maximum value of the transformation."""
        return self._intf.get_property(IAgStkGraphicsModelTransformation._metadata, IAgStkGraphicsModelTransformation._get_MaximumValue_metadata)

    _get_DefaultValue_metadata = { "name" : "DefaultValue",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def DefaultValue(self) -> float:
        """Gets the default value of the transformation. The current value property of the transformation will have this value when the model primitive is initialized."""
        return self._intf.get_property(IAgStkGraphicsModelTransformation._metadata, IAgStkGraphicsModelTransformation._get_DefaultValue_metadata)

    _get_Range_metadata = { "name" : "Range",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def Range(self) -> float:
        """Gets the value range of the transformation. Equivalent to the difference of the maximum value and minimum value properties."""
        return self._intf.get_property(IAgStkGraphicsModelTransformation._metadata, IAgStkGraphicsModelTransformation._get_Range_metadata)

    _get_Name_metadata = { "name" : "Name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def Name(self) -> str:
        """Gets the name of the transformation."""
        return self._intf.get_property(IAgStkGraphicsModelTransformation._metadata, IAgStkGraphicsModelTransformation._get_Name_metadata)

    _get_Type_metadata = { "name" : "Type",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEStkGraphicsModelTransformationType),) }
    @property
    def Type(self) -> "AgEStkGraphicsModelTransformationType":
        """Gets the model transformation type associated with the transformation."""
        return self._intf.get_property(IAgStkGraphicsModelTransformation._metadata, IAgStkGraphicsModelTransformation._get_Type_metadata)


agcls.AgClassCatalog.add_catalog_entry("{c58f7fc4-2f63-494d-a461-2c385a53b9a2}", IAgStkGraphicsModelTransformation)
agcls.AgTypeNameMap["IAgStkGraphicsModelTransformation"] = IAgStkGraphicsModelTransformation

class IAgStkGraphicsOverlay(object):
    """A visible element drawn in screen space. Overlays are useful for floating logos, heads up displays, and integrating user interfaces into the 3D window."""
    _num_methods = 76
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{b7007235-5a52-450b-83af-1e8080d3b0be}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_Position" : 1,
                             "set_Position" : 2,
                             "get_PinningPosition" : 3,
                             "set_PinningPosition" : 4,
                             "get_X" : 5,
                             "set_X" : 6,
                             "get_XUnit" : 7,
                             "set_XUnit" : 8,
                             "get_Y" : 9,
                             "set_Y" : 10,
                             "get_YUnit" : 11,
                             "set_YUnit" : 12,
                             "get_Size" : 13,
                             "set_Size" : 14,
                             "get_Width" : 15,
                             "set_Width" : 16,
                             "get_WidthUnit" : 17,
                             "set_WidthUnit" : 18,
                             "get_Height" : 19,
                             "set_Height" : 20,
                             "get_HeightUnit" : 21,
                             "set_HeightUnit" : 22,
                             "get_MinimumSize" : 23,
                             "set_MinimumSize" : 24,
                             "get_MaximumSize" : 25,
                             "set_MaximumSize" : 26,
                             "get_Bounds" : 27,
                             "get_BorderColor" : 28,
                             "set_BorderColor" : 29,
                             "get_BorderSize" : 30,
                             "set_BorderSize" : 31,
                             "get_BorderTranslucency" : 32,
                             "set_BorderTranslucency" : 33,
                             "get_TranslationX" : 34,
                             "set_TranslationX" : 35,
                             "get_TranslationY" : 36,
                             "set_TranslationY" : 37,
                             "get_RotationAngle" : 38,
                             "set_RotationAngle" : 39,
                             "get_RotationPoint" : 40,
                             "set_RotationPoint" : 41,
                             "get_Scale" : 42,
                             "set_Scale" : 43,
                             "get_FlipX" : 44,
                             "set_FlipX" : 45,
                             "get_FlipY" : 46,
                             "set_FlipY" : 47,
                             "get_Origin" : 48,
                             "set_Origin" : 49,
                             "get_PinningOrigin" : 50,
                             "set_PinningOrigin" : 51,
                             "get_Parent" : 52,
                             "get_Translucency" : 53,
                             "set_Translucency" : 54,
                             "get_Color" : 55,
                             "set_Color" : 56,
                             "get_PickingEnabled" : 57,
                             "set_PickingEnabled" : 58,
                             "get_ClipToParent" : 59,
                             "set_ClipToParent" : 60,
                             "get_Display" : 61,
                             "set_Display" : 62,
                             "get_ControlPosition" : 63,
                             "get_ControlSize" : 64,
                             "get_ControlBounds" : 65,
                             "get_DisplayCondition" : 66,
                             "set_DisplayCondition" : 67,
                             "get_Overlays" : 68,
                             "get_Padding" : 69,
                             "set_Padding" : 70,
                             "BringToFront" : 71,
                             "SendToBack" : 72,
                             "OverlayToControl" : 73,
                             "ControlToOverlay" : 74,
                             "get_Tag" : 75,
                             "set_Tag" : 76, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsOverlay._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsOverlay from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsOverlay.__dict__ and type(IAgStkGraphicsOverlay.__dict__[attrname]) == property:
            return IAgStkGraphicsOverlay.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsOverlay.")
    
    _get_Position_metadata = { "name" : "Position",
            "arg_types" : (POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg,) }
    @property
    def Position(self) -> list:
        """Gets or sets the position of the overlay relative to its parent. The array represents the position of the overlay and has a size of 4. The elements are in the order x position, y position, x screen overlay unit, y screen overlay unit."""
        return self._intf.get_property(IAgStkGraphicsOverlay._metadata, IAgStkGraphicsOverlay._get_Position_metadata)

    _set_Position_metadata = { "name" : "Position",
            "arg_types" : (agcom.LPSAFEARRAY,),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg,) }
    @Position.setter
    def Position(self, position:list) -> None:
        return self._intf.set_property(IAgStkGraphicsOverlay._metadata, IAgStkGraphicsOverlay._set_Position_metadata, position)

    _get_PinningPosition_metadata = { "name" : "PinningPosition",
            "arg_types" : (POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg,) }
    @property
    def PinningPosition(self) -> list:
        """Gets or sets the pinning position of the overlay, relative to the overlay, which determines the point on the overlay that corresponds to the position property. The array represents the pinning position of the overlay and has a size of 4..."""
        return self._intf.get_property(IAgStkGraphicsOverlay._metadata, IAgStkGraphicsOverlay._get_PinningPosition_metadata)

    _set_PinningPosition_metadata = { "name" : "PinningPosition",
            "arg_types" : (agcom.LPSAFEARRAY,),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg,) }
    @PinningPosition.setter
    def PinningPosition(self, pinningPosition:list) -> None:
        return self._intf.set_property(IAgStkGraphicsOverlay._metadata, IAgStkGraphicsOverlay._set_PinningPosition_metadata, pinningPosition)

    _get_X_metadata = { "name" : "X",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def X(self) -> float:
        """Gets or sets the X position of the overlay relative to its parent. The unit in which the position is defined is specified by the x unit property. The position is measured horizontally from the origin, which is, by default, the lower-left corner."""
        return self._intf.get_property(IAgStkGraphicsOverlay._metadata, IAgStkGraphicsOverlay._get_X_metadata)

    _set_X_metadata = { "name" : "X",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @X.setter
    def X(self, x:float) -> None:
        return self._intf.set_property(IAgStkGraphicsOverlay._metadata, IAgStkGraphicsOverlay._set_X_metadata, x)

    _get_XUnit_metadata = { "name" : "XUnit",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEStkGraphicsScreenOverlayUnit),) }
    @property
    def XUnit(self) -> "AgEStkGraphicsScreenOverlayUnit":
        """Gets or sets the unit of the x property."""
        return self._intf.get_property(IAgStkGraphicsOverlay._metadata, IAgStkGraphicsOverlay._get_XUnit_metadata)

    _set_XUnit_metadata = { "name" : "XUnit",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEStkGraphicsScreenOverlayUnit),) }
    @XUnit.setter
    def XUnit(self, xUnit:"AgEStkGraphicsScreenOverlayUnit") -> None:
        return self._intf.set_property(IAgStkGraphicsOverlay._metadata, IAgStkGraphicsOverlay._set_XUnit_metadata, xUnit)

    _get_Y_metadata = { "name" : "Y",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def Y(self) -> float:
        """Gets or sets the Y position of the overlay relative to its parent. The unit in which the position is defined is specified by the y unit property. The position is measured vertically from the origin, which is, by default, the lower-left corner."""
        return self._intf.get_property(IAgStkGraphicsOverlay._metadata, IAgStkGraphicsOverlay._get_Y_metadata)

    _set_Y_metadata = { "name" : "Y",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @Y.setter
    def Y(self, y:float) -> None:
        return self._intf.set_property(IAgStkGraphicsOverlay._metadata, IAgStkGraphicsOverlay._set_Y_metadata, y)

    _get_YUnit_metadata = { "name" : "YUnit",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEStkGraphicsScreenOverlayUnit),) }
    @property
    def YUnit(self) -> "AgEStkGraphicsScreenOverlayUnit":
        """Gets or sets the unit of the y property."""
        return self._intf.get_property(IAgStkGraphicsOverlay._metadata, IAgStkGraphicsOverlay._get_YUnit_metadata)

    _set_YUnit_metadata = { "name" : "YUnit",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEStkGraphicsScreenOverlayUnit),) }
    @YUnit.setter
    def YUnit(self, yUnit:"AgEStkGraphicsScreenOverlayUnit") -> None:
        return self._intf.set_property(IAgStkGraphicsOverlay._metadata, IAgStkGraphicsOverlay._set_YUnit_metadata, yUnit)

    _get_Size_metadata = { "name" : "Size",
            "arg_types" : (POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg,) }
    @property
    def Size(self) -> list:
        """Gets or sets the size of the overlay. The array elements represent the size of the overlay in the order width, height, width screen overlay unit, height screen overlay unit."""
        return self._intf.get_property(IAgStkGraphicsOverlay._metadata, IAgStkGraphicsOverlay._get_Size_metadata)

    _set_Size_metadata = { "name" : "Size",
            "arg_types" : (agcom.LPSAFEARRAY,),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg,) }
    @Size.setter
    def Size(self, size:list) -> None:
        return self._intf.set_property(IAgStkGraphicsOverlay._metadata, IAgStkGraphicsOverlay._set_Size_metadata, size)

    _get_Width_metadata = { "name" : "Width",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def Width(self) -> float:
        """Gets or sets the width of the overlay. The unit in which the width is defined is specified by the width unit property."""
        return self._intf.get_property(IAgStkGraphicsOverlay._metadata, IAgStkGraphicsOverlay._get_Width_metadata)

    _set_Width_metadata = { "name" : "Width",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @Width.setter
    def Width(self, width:float) -> None:
        return self._intf.set_property(IAgStkGraphicsOverlay._metadata, IAgStkGraphicsOverlay._set_Width_metadata, width)

    _get_WidthUnit_metadata = { "name" : "WidthUnit",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEStkGraphicsScreenOverlayUnit),) }
    @property
    def WidthUnit(self) -> "AgEStkGraphicsScreenOverlayUnit":
        """Gets or sets the unit of the width property."""
        return self._intf.get_property(IAgStkGraphicsOverlay._metadata, IAgStkGraphicsOverlay._get_WidthUnit_metadata)

    _set_WidthUnit_metadata = { "name" : "WidthUnit",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEStkGraphicsScreenOverlayUnit),) }
    @WidthUnit.setter
    def WidthUnit(self, widthUnit:"AgEStkGraphicsScreenOverlayUnit") -> None:
        return self._intf.set_property(IAgStkGraphicsOverlay._metadata, IAgStkGraphicsOverlay._set_WidthUnit_metadata, widthUnit)

    _get_Height_metadata = { "name" : "Height",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def Height(self) -> float:
        """Gets or sets the height of the overlay. The unit in which the height is defined is specified by the height unit property."""
        return self._intf.get_property(IAgStkGraphicsOverlay._metadata, IAgStkGraphicsOverlay._get_Height_metadata)

    _set_Height_metadata = { "name" : "Height",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @Height.setter
    def Height(self, height:float) -> None:
        return self._intf.set_property(IAgStkGraphicsOverlay._metadata, IAgStkGraphicsOverlay._set_Height_metadata, height)

    _get_HeightUnit_metadata = { "name" : "HeightUnit",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEStkGraphicsScreenOverlayUnit),) }
    @property
    def HeightUnit(self) -> "AgEStkGraphicsScreenOverlayUnit":
        """Gets or sets the unit of the height property."""
        return self._intf.get_property(IAgStkGraphicsOverlay._metadata, IAgStkGraphicsOverlay._get_HeightUnit_metadata)

    _set_HeightUnit_metadata = { "name" : "HeightUnit",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEStkGraphicsScreenOverlayUnit),) }
    @HeightUnit.setter
    def HeightUnit(self, heightUnit:"AgEStkGraphicsScreenOverlayUnit") -> None:
        return self._intf.set_property(IAgStkGraphicsOverlay._metadata, IAgStkGraphicsOverlay._set_HeightUnit_metadata, heightUnit)

    _get_MinimumSize_metadata = { "name" : "MinimumSize",
            "arg_types" : (POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg,) }
    @property
    def MinimumSize(self) -> list:
        """Gets or sets the minimum size of the overlay. The overlay will never be smaller than this size, even if the overlay's size is specified as a percentage of its parent and its parent is very small..."""
        return self._intf.get_property(IAgStkGraphicsOverlay._metadata, IAgStkGraphicsOverlay._get_MinimumSize_metadata)

    _set_MinimumSize_metadata = { "name" : "MinimumSize",
            "arg_types" : (agcom.LPSAFEARRAY,),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg,) }
    @MinimumSize.setter
    def MinimumSize(self, minimumSize:list) -> None:
        return self._intf.set_property(IAgStkGraphicsOverlay._metadata, IAgStkGraphicsOverlay._set_MinimumSize_metadata, minimumSize)

    _get_MaximumSize_metadata = { "name" : "MaximumSize",
            "arg_types" : (POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg,) }
    @property
    def MaximumSize(self) -> list:
        """Gets or sets the maximum size of the overlay. The overlay will never be larger than this size, even if the overlay's size is specified as a percentage of its parent and its parent is very large..."""
        return self._intf.get_property(IAgStkGraphicsOverlay._metadata, IAgStkGraphicsOverlay._get_MaximumSize_metadata)

    _set_MaximumSize_metadata = { "name" : "MaximumSize",
            "arg_types" : (agcom.LPSAFEARRAY,),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg,) }
    @MaximumSize.setter
    def MaximumSize(self, maximumSize:list) -> None:
        return self._intf.set_property(IAgStkGraphicsOverlay._metadata, IAgStkGraphicsOverlay._set_MaximumSize_metadata, maximumSize)

    _get_Bounds_metadata = { "name" : "Bounds",
            "arg_types" : (POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg,) }
    @property
    def Bounds(self) -> list:
        """Gets the bounds of the overlay relative to its parent. The array contains the properties defining the bounds in the order left x location, top y location, width, height."""
        return self._intf.get_property(IAgStkGraphicsOverlay._metadata, IAgStkGraphicsOverlay._get_Bounds_metadata)

    _get_BorderColor_metadata = { "name" : "BorderColor",
            "arg_types" : (POINTER(agcom.OLE_COLOR),),
            "marshallers" : (agmarshall.OLE_COLOR_arg,) }
    @property
    def BorderColor(self) -> agcolor.Color:
        """Gets or sets the overlay's border color. By default, the border color is white. However, also by default, the overlay has a border size of 0.0 so the border is not displayed."""
        return self._intf.get_property(IAgStkGraphicsOverlay._metadata, IAgStkGraphicsOverlay._get_BorderColor_metadata)

    _set_BorderColor_metadata = { "name" : "BorderColor",
            "arg_types" : (agcom.OLE_COLOR,),
            "marshallers" : (agmarshall.OLE_COLOR_arg,) }
    @BorderColor.setter
    def BorderColor(self, borderColor:agcolor.Color) -> None:
        return self._intf.set_property(IAgStkGraphicsOverlay._metadata, IAgStkGraphicsOverlay._set_BorderColor_metadata, borderColor)

    _get_BorderSize_metadata = { "name" : "BorderSize",
            "arg_types" : (POINTER(agcom.INT),),
            "marshallers" : (agmarshall.INT_arg,) }
    @property
    def BorderSize(self) -> int:
        """Gets or sets the size of the overlay's border. By default, this is 0.0 so the border is not displayed."""
        return self._intf.get_property(IAgStkGraphicsOverlay._metadata, IAgStkGraphicsOverlay._get_BorderSize_metadata)

    _set_BorderSize_metadata = { "name" : "BorderSize",
            "arg_types" : (agcom.INT,),
            "marshallers" : (agmarshall.INT_arg,) }
    @BorderSize.setter
    def BorderSize(self, borderSize:int) -> None:
        return self._intf.set_property(IAgStkGraphicsOverlay._metadata, IAgStkGraphicsOverlay._set_BorderSize_metadata, borderSize)

    _get_BorderTranslucency_metadata = { "name" : "BorderTranslucency",
            "arg_types" : (POINTER(agcom.FLOAT),),
            "marshallers" : (agmarshall.FLOAT_arg,) }
    @property
    def BorderTranslucency(self) -> float:
        """Gets or sets the translucency of the overlay border. Translucency is a value between 0.0 and 1.0, where 0.0 is completely opaque and 1.0 is completely transparent."""
        return self._intf.get_property(IAgStkGraphicsOverlay._metadata, IAgStkGraphicsOverlay._get_BorderTranslucency_metadata)

    _set_BorderTranslucency_metadata = { "name" : "BorderTranslucency",
            "arg_types" : (agcom.FLOAT,),
            "marshallers" : (agmarshall.FLOAT_arg,) }
    @BorderTranslucency.setter
    def BorderTranslucency(self, borderTranslucency:float) -> None:
        return self._intf.set_property(IAgStkGraphicsOverlay._metadata, IAgStkGraphicsOverlay._set_BorderTranslucency_metadata, borderTranslucency)

    _get_TranslationX_metadata = { "name" : "TranslationX",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def TranslationX(self) -> float:
        """Gets or sets the value with which the overlay will be translated from the X value of the position property."""
        return self._intf.get_property(IAgStkGraphicsOverlay._metadata, IAgStkGraphicsOverlay._get_TranslationX_metadata)

    _set_TranslationX_metadata = { "name" : "TranslationX",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @TranslationX.setter
    def TranslationX(self, translationX:float) -> None:
        return self._intf.set_property(IAgStkGraphicsOverlay._metadata, IAgStkGraphicsOverlay._set_TranslationX_metadata, translationX)

    _get_TranslationY_metadata = { "name" : "TranslationY",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def TranslationY(self) -> float:
        """Gets or sets the value with which the overlay will be translated from the Y value of the position property."""
        return self._intf.get_property(IAgStkGraphicsOverlay._metadata, IAgStkGraphicsOverlay._get_TranslationY_metadata)

    _set_TranslationY_metadata = { "name" : "TranslationY",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @TranslationY.setter
    def TranslationY(self, translationY:float) -> None:
        return self._intf.set_property(IAgStkGraphicsOverlay._metadata, IAgStkGraphicsOverlay._set_TranslationY_metadata, translationY)

    _get_RotationAngle_metadata = { "name" : "RotationAngle",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def RotationAngle(self) -> float:
        """Gets or sets the counter-clockwise rotation of the overlay. The overlay is rotated around the point specified by the rotation point property."""
        return self._intf.get_property(IAgStkGraphicsOverlay._metadata, IAgStkGraphicsOverlay._get_RotationAngle_metadata)

    _set_RotationAngle_metadata = { "name" : "RotationAngle",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @RotationAngle.setter
    def RotationAngle(self, rotationAngle:float) -> None:
        return self._intf.set_property(IAgStkGraphicsOverlay._metadata, IAgStkGraphicsOverlay._set_RotationAngle_metadata, rotationAngle)

    _get_RotationPoint_metadata = { "name" : "RotationPoint",
            "arg_types" : (POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg,) }
    @property
    def RotationPoint(self) -> list:
        """Gets or sets the point that the overlay is rotated around when the rotation angle property has a value other than 0.0. The array contains seven elements defining the properties of the rotation point..."""
        return self._intf.get_property(IAgStkGraphicsOverlay._metadata, IAgStkGraphicsOverlay._get_RotationPoint_metadata)

    _set_RotationPoint_metadata = { "name" : "RotationPoint",
            "arg_types" : (agcom.LPSAFEARRAY,),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg,) }
    @RotationPoint.setter
    def RotationPoint(self, rotationPoint:list) -> None:
        return self._intf.set_property(IAgStkGraphicsOverlay._metadata, IAgStkGraphicsOverlay._set_RotationPoint_metadata, rotationPoint)

    _get_Scale_metadata = { "name" : "Scale",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def Scale(self) -> float:
        """Gets or sets the fractional value used to scale the overlay's size property. A value greater than 1.0 will make the overlay larger while a value less than 1.0 will make it smaller."""
        return self._intf.get_property(IAgStkGraphicsOverlay._metadata, IAgStkGraphicsOverlay._get_Scale_metadata)

    _set_Scale_metadata = { "name" : "Scale",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @Scale.setter
    def Scale(self, scale:float) -> None:
        return self._intf.set_property(IAgStkGraphicsOverlay._metadata, IAgStkGraphicsOverlay._set_Scale_metadata, scale)

    _get_FlipX_metadata = { "name" : "FlipX",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def FlipX(self) -> bool:
        """Gets or sets whether the overlay will be flipped along its X axis."""
        return self._intf.get_property(IAgStkGraphicsOverlay._metadata, IAgStkGraphicsOverlay._get_FlipX_metadata)

    _set_FlipX_metadata = { "name" : "FlipX",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @FlipX.setter
    def FlipX(self, flipX:bool) -> None:
        return self._intf.set_property(IAgStkGraphicsOverlay._metadata, IAgStkGraphicsOverlay._set_FlipX_metadata, flipX)

    _get_FlipY_metadata = { "name" : "FlipY",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def FlipY(self) -> bool:
        """Gets or sets whether the overlay will be flipped along its Y axis."""
        return self._intf.get_property(IAgStkGraphicsOverlay._metadata, IAgStkGraphicsOverlay._get_FlipY_metadata)

    _set_FlipY_metadata = { "name" : "FlipY",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @FlipY.setter
    def FlipY(self, flipY:bool) -> None:
        return self._intf.set_property(IAgStkGraphicsOverlay._metadata, IAgStkGraphicsOverlay._set_FlipY_metadata, flipY)

    _get_Origin_metadata = { "name" : "Origin",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEStkGraphicsScreenOverlayOrigin),) }
    @property
    def Origin(self) -> "AgEStkGraphicsScreenOverlayOrigin":
        """Gets or sets the origin from which the overlay's position is defined. By default, the value of this property is bottom left..."""
        return self._intf.get_property(IAgStkGraphicsOverlay._metadata, IAgStkGraphicsOverlay._get_Origin_metadata)

    _set_Origin_metadata = { "name" : "Origin",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEStkGraphicsScreenOverlayOrigin),) }
    @Origin.setter
    def Origin(self, origin:"AgEStkGraphicsScreenOverlayOrigin") -> None:
        return self._intf.set_property(IAgStkGraphicsOverlay._metadata, IAgStkGraphicsOverlay._set_Origin_metadata, origin)

    _get_PinningOrigin_metadata = { "name" : "PinningOrigin",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEStkGraphicsScreenOverlayPinningOrigin),) }
    @property
    def PinningOrigin(self) -> "AgEStkGraphicsScreenOverlayPinningOrigin":
        """Gets or sets the origin of the pinning position property, relative to the overlay..."""
        return self._intf.get_property(IAgStkGraphicsOverlay._metadata, IAgStkGraphicsOverlay._get_PinningOrigin_metadata)

    _set_PinningOrigin_metadata = { "name" : "PinningOrigin",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEStkGraphicsScreenOverlayPinningOrigin),) }
    @PinningOrigin.setter
    def PinningOrigin(self, pinningOrigin:"AgEStkGraphicsScreenOverlayPinningOrigin") -> None:
        return self._intf.set_property(IAgStkGraphicsOverlay._metadata, IAgStkGraphicsOverlay._set_PinningOrigin_metadata, pinningOrigin)

    _get_Parent_metadata = { "name" : "Parent",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def Parent(self) -> "IAgStkGraphicsScreenOverlayContainer":
        """Gets the overlay's parent. This may be another overlay if this overlay was added to that overlay's overlays collection. Or, it may be the screen overlay manager if this overlay was added to the scene manager'sscreen overlays collection."""
        return self._intf.get_property(IAgStkGraphicsOverlay._metadata, IAgStkGraphicsOverlay._get_Parent_metadata)

    _get_Translucency_metadata = { "name" : "Translucency",
            "arg_types" : (POINTER(agcom.FLOAT),),
            "marshallers" : (agmarshall.FLOAT_arg,) }
    @property
    def Translucency(self) -> float:
        """Gets or sets the overlay's translucency. Translucency is a value between 0.0 and 1.0, where 0.0 is completely opaque and 1.0 is completely transparent."""
        return self._intf.get_property(IAgStkGraphicsOverlay._metadata, IAgStkGraphicsOverlay._get_Translucency_metadata)

    _set_Translucency_metadata = { "name" : "Translucency",
            "arg_types" : (agcom.FLOAT,),
            "marshallers" : (agmarshall.FLOAT_arg,) }
    @Translucency.setter
    def Translucency(self, translucency:float) -> None:
        return self._intf.set_property(IAgStkGraphicsOverlay._metadata, IAgStkGraphicsOverlay._set_Translucency_metadata, translucency)

    _get_Color_metadata = { "name" : "Color",
            "arg_types" : (POINTER(agcom.OLE_COLOR),),
            "marshallers" : (agmarshall.OLE_COLOR_arg,) }
    @property
    def Color(self) -> agcolor.Color:
        """Gets or sets the overlay's color. By default, the overlay is white."""
        return self._intf.get_property(IAgStkGraphicsOverlay._metadata, IAgStkGraphicsOverlay._get_Color_metadata)

    _set_Color_metadata = { "name" : "Color",
            "arg_types" : (agcom.OLE_COLOR,),
            "marshallers" : (agmarshall.OLE_COLOR_arg,) }
    @Color.setter
    def Color(self, color:agcolor.Color) -> None:
        return self._intf.set_property(IAgStkGraphicsOverlay._metadata, IAgStkGraphicsOverlay._set_Color_metadata, color)

    _get_PickingEnabled_metadata = { "name" : "PickingEnabled",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def PickingEnabled(self) -> bool:
        """Gets or sets a value indicating whether or not picking on the overlay is enabled. If picking is disabled, this overlay will never show up in the result of PickScreenOverlay, even if it occupies the specified pick position."""
        return self._intf.get_property(IAgStkGraphicsOverlay._metadata, IAgStkGraphicsOverlay._get_PickingEnabled_metadata)

    _set_PickingEnabled_metadata = { "name" : "PickingEnabled",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @PickingEnabled.setter
    def PickingEnabled(self, pickingEnabled:bool) -> None:
        return self._intf.set_property(IAgStkGraphicsOverlay._metadata, IAgStkGraphicsOverlay._set_PickingEnabled_metadata, pickingEnabled)

    _get_ClipToParent_metadata = { "name" : "ClipToParent",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def ClipToParent(self) -> bool:
        """Gets or sets a value indicating whether or not the overlay will be clipped by the bounds of its parent. If this property is <see langword='false' />, part of this overlay may be visible outside of its parent's bounds."""
        return self._intf.get_property(IAgStkGraphicsOverlay._metadata, IAgStkGraphicsOverlay._get_ClipToParent_metadata)

    _set_ClipToParent_metadata = { "name" : "ClipToParent",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @ClipToParent.setter
    def ClipToParent(self, clipToParent:bool) -> None:
        return self._intf.set_property(IAgStkGraphicsOverlay._metadata, IAgStkGraphicsOverlay._set_ClipToParent_metadata, clipToParent)

    _get_Display_metadata = { "name" : "Display",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def Display(self) -> bool:
        """Gets or sets if this overlay and the collection of overlays that are contained within this overlay should be rendered."""
        return self._intf.get_property(IAgStkGraphicsOverlay._metadata, IAgStkGraphicsOverlay._get_Display_metadata)

    _set_Display_metadata = { "name" : "Display",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @Display.setter
    def Display(self, display:bool) -> None:
        return self._intf.set_property(IAgStkGraphicsOverlay._metadata, IAgStkGraphicsOverlay._set_Display_metadata, display)

    _get_ControlPosition_metadata = { "name" : "ControlPosition",
            "arg_types" : (POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg,) }
    @property
    def ControlPosition(self) -> list:
        """Gets the position of the overlay in coordinates relative to the overall globe control. The array represents the position of the overlay and has a size of 4. The elements are in the order x position, y position, x screen overlay unit, y screen overlay unit."""
        return self._intf.get_property(IAgStkGraphicsOverlay._metadata, IAgStkGraphicsOverlay._get_ControlPosition_metadata)

    _get_ControlSize_metadata = { "name" : "ControlSize",
            "arg_types" : (POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg,) }
    @property
    def ControlSize(self) -> list:
        """Gets the size of the overlay in coordinates relative to the overall globe control. The elements are in the order width, height, width screen overlay unit, height screen overlay unit."""
        return self._intf.get_property(IAgStkGraphicsOverlay._metadata, IAgStkGraphicsOverlay._get_ControlSize_metadata)

    _get_ControlBounds_metadata = { "name" : "ControlBounds",
            "arg_types" : (POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg,) }
    @property
    def ControlBounds(self) -> list:
        """Gets the bounds of the overlay in coordinates relative to the overall globe control. The array contains the properties defining the bounds in the order left x location, top y location, width, height."""
        return self._intf.get_property(IAgStkGraphicsOverlay._metadata, IAgStkGraphicsOverlay._get_ControlBounds_metadata)

    _get_DisplayCondition_metadata = { "name" : "DisplayCondition",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def DisplayCondition(self) -> "IAgStkGraphicsDisplayCondition":
        """Gets or sets the display condition that determines if the overlay should be rendered. Both this and display must evaluate to true for the overlay to be rendered."""
        return self._intf.get_property(IAgStkGraphicsOverlay._metadata, IAgStkGraphicsOverlay._get_DisplayCondition_metadata)

    _set_DisplayCondition_metadata = { "name" : "DisplayCondition",
            "arg_types" : (agcom.PVOID,),
            "marshallers" : (agmarshall.AgInterface_in_arg("IAgStkGraphicsDisplayCondition"),) }
    @DisplayCondition.setter
    def DisplayCondition(self, displayCondition:"IAgStkGraphicsDisplayCondition") -> None:
        return self._intf.set_property(IAgStkGraphicsOverlay._metadata, IAgStkGraphicsOverlay._set_DisplayCondition_metadata, displayCondition)

    _get_Overlays_metadata = { "name" : "Overlays",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def Overlays(self) -> "IAgStkGraphicsScreenOverlayCollection":
        """Gets the collection of overlays that are contained within this overlay."""
        return self._intf.get_property(IAgStkGraphicsOverlay._metadata, IAgStkGraphicsOverlay._get_Overlays_metadata)

    _get_Padding_metadata = { "name" : "Padding",
            "arg_types" : (POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg,) }
    @property
    def Padding(self) -> list:
        """Gets or sets the padding surrounding the overlays that are contained within this overlay. The array contains the components of the padding arranged in the order left, top, right, bottom."""
        return self._intf.get_property(IAgStkGraphicsOverlay._metadata, IAgStkGraphicsOverlay._get_Padding_metadata)

    _set_Padding_metadata = { "name" : "Padding",
            "arg_types" : (agcom.LPSAFEARRAY,),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg,) }
    @Padding.setter
    def Padding(self, padding:list) -> None:
        return self._intf.set_property(IAgStkGraphicsOverlay._metadata, IAgStkGraphicsOverlay._set_Padding_metadata, padding)

    _BringToFront_metadata = { "name" : "BringToFront",
            "arg_types" : (),
            "marshallers" : () }
    def BringToFront(self) -> None:
        """Brings the overlay to the front of the z-order, so it is on top of all other overlays with the same parent"""
        return self._intf.invoke(IAgStkGraphicsOverlay._metadata, IAgStkGraphicsOverlay._BringToFront_metadata, )

    _SendToBack_metadata = { "name" : "SendToBack",
            "arg_types" : (),
            "marshallers" : () }
    def SendToBack(self) -> None:
        """Sends the overlay to the back of the z-order, so it is underneath all other overlays with the same parent"""
        return self._intf.invoke(IAgStkGraphicsOverlay._metadata, IAgStkGraphicsOverlay._SendToBack_metadata, )

    _OverlayToControl_metadata = { "name" : "OverlayToControl",
            "arg_types" : (agcom.DOUBLE, agcom.DOUBLE, POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg, agmarshall.LPSAFEARRAY_arg,) }
    def OverlayToControl(self, x:float, y:float) -> list:
        """Transforms a given position, specified relative to the overlay, into coordinates relative to the overall globe control..."""
        return self._intf.invoke(IAgStkGraphicsOverlay._metadata, IAgStkGraphicsOverlay._OverlayToControl_metadata, x, y, out_arg())

    _ControlToOverlay_metadata = { "name" : "ControlToOverlay",
            "arg_types" : (agcom.DOUBLE, agcom.DOUBLE, POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg, agmarshall.LPSAFEARRAY_arg,) }
    def ControlToOverlay(self, x:float, y:float) -> list:
        """Transforms a given position, specified relative to the overall globe control, into coordinates relative to this overlay..."""
        return self._intf.invoke(IAgStkGraphicsOverlay._metadata, IAgStkGraphicsOverlay._ControlToOverlay_metadata, x, y, out_arg())

    _get_Tag_metadata = { "name" : "Tag",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def Tag(self) -> typing.Any:
        """Gets or sets custom value associated with this primitive."""
        return self._intf.get_property(IAgStkGraphicsOverlay._metadata, IAgStkGraphicsOverlay._get_Tag_metadata)

    _set_Tag_metadata = { "name" : "Tag",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @Tag.setter
    def Tag(self, tag:typing.Any) -> None:
        return self._intf.set_property(IAgStkGraphicsOverlay._metadata, IAgStkGraphicsOverlay._set_Tag_metadata, tag)


agcls.AgClassCatalog.add_catalog_entry("{b7007235-5a52-450b-83af-1e8080d3b0be}", IAgStkGraphicsOverlay)
agcls.AgTypeNameMap["IAgStkGraphicsOverlay"] = IAgStkGraphicsOverlay

class IAgStkGraphicsPathPrimitive(object):
    """Renders a line to the 3D scene. Similar to the polyline primitive; however, the PathPrimitive was designed for the efficient addition/removal of points to/from the front or back of the line."""
    _num_methods = 31
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{264ef2e0-ae0d-412d-9d89-f5f17f095a52}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_Count" : 1,
                             "get_Capacity" : 2,
                             "get_UpdatePolicy" : 3,
                             "set_UpdatePolicy" : 4,
                             "get_PolylineType" : 5,
                             "set_PolylineType" : 6,
                             "get_Width" : 7,
                             "set_Width" : 8,
                             "get_MinimumWidthSupported" : 9,
                             "get_MaximumWidthSupported" : 10,
                             "get_DisplayOutline" : 11,
                             "set_DisplayOutline" : 12,
                             "get_OutlineWidth" : 13,
                             "set_OutlineWidth" : 14,
                             "get_PerItemPickingEnabled" : 15,
                             "set_PerItemPickingEnabled" : 16,
                             "Item" : 17,
                             "get__NewEnum" : 18,
                             "AddFront" : 19,
                             "AddRangeToFront" : 20,
                             "AddBack" : 21,
                             "AddRangeToBack" : 22,
                             "RemoveFront" : 23,
                             "RemoveAllBefore" : 24,
                             "RemoveBack" : 25,
                             "RemoveAllAfter" : 26,
                             "Front" : 27,
                             "Back" : 28,
                             "Clear" : 29,
                             "get_CentralBodyClipped" : 30,
                             "set_CentralBodyClipped" : 31, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsPathPrimitive._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsPathPrimitive from source object.")
        self.__dict__["_enumerator"] = None
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsPathPrimitive.__dict__ and type(IAgStkGraphicsPathPrimitive.__dict__[attrname]) == property:
            return IAgStkGraphicsPathPrimitive.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsPathPrimitive.")
    def __iter__(self):
        self.__dict__["_enumerator"] = self._NewEnum
        self._enumerator.reset()
        return self
    def __next__(self) -> "IAgStkGraphicsPathPoint":
        if self._enumerator is None:
            raise StopIteration
        nextval = self._enumerator.next()
        if nextval is None:
            raise StopIteration
        return nextval
    
    _get_Count_metadata = { "name" : "Count",
            "arg_types" : (POINTER(agcom.INT),),
            "marshallers" : (agmarshall.INT_arg,) }
    @property
    def Count(self) -> int:
        """Returns the number of points."""
        return self._intf.get_property(IAgStkGraphicsPathPrimitive._metadata, IAgStkGraphicsPathPrimitive._get_Count_metadata)

    _get_Capacity_metadata = { "name" : "Capacity",
            "arg_types" : (POINTER(agcom.INT),),
            "marshallers" : (agmarshall.INT_arg,) }
    @property
    def Capacity(self) -> int:
        """Returns the capacity that was set during object construction. The capacity is the amount of memory reserved for storing the points on the path. This will be automatically updated when adding/removing points."""
        return self._intf.get_property(IAgStkGraphicsPathPrimitive._metadata, IAgStkGraphicsPathPrimitive._get_Capacity_metadata)

    _get_UpdatePolicy_metadata = { "name" : "UpdatePolicy",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def UpdatePolicy(self) -> "IAgStkGraphicsPathPrimitiveUpdatePolicy":
        """Gets or sets how the primitive will be updated based on the current animation time."""
        return self._intf.get_property(IAgStkGraphicsPathPrimitive._metadata, IAgStkGraphicsPathPrimitive._get_UpdatePolicy_metadata)

    _set_UpdatePolicy_metadata = { "name" : "UpdatePolicy",
            "arg_types" : (agcom.PVOID,),
            "marshallers" : (agmarshall.AgInterface_in_arg("IAgStkGraphicsPathPrimitiveUpdatePolicy"),) }
    @UpdatePolicy.setter
    def UpdatePolicy(self, updatePolicy:"IAgStkGraphicsPathPrimitiveUpdatePolicy") -> None:
        return self._intf.set_property(IAgStkGraphicsPathPrimitive._metadata, IAgStkGraphicsPathPrimitive._set_UpdatePolicy_metadata, updatePolicy)

    _get_PolylineType_metadata = { "name" : "PolylineType",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEStkGraphicsPolylineType),) }
    @property
    def PolylineType(self) -> "AgEStkGraphicsPolylineType":
        """Gets or sets how the primitive interprets the positions."""
        return self._intf.get_property(IAgStkGraphicsPathPrimitive._metadata, IAgStkGraphicsPathPrimitive._get_PolylineType_metadata)

    _set_PolylineType_metadata = { "name" : "PolylineType",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEStkGraphicsPolylineType),) }
    @PolylineType.setter
    def PolylineType(self, polylineType:"AgEStkGraphicsPolylineType") -> None:
        return self._intf.set_property(IAgStkGraphicsPathPrimitive._metadata, IAgStkGraphicsPathPrimitive._set_PolylineType_metadata, polylineType)

    _get_Width_metadata = { "name" : "Width",
            "arg_types" : (POINTER(agcom.FLOAT),),
            "marshallers" : (agmarshall.FLOAT_arg,) }
    @property
    def Width(self) -> float:
        """Gets or sets the line width, in pixels."""
        return self._intf.get_property(IAgStkGraphicsPathPrimitive._metadata, IAgStkGraphicsPathPrimitive._get_Width_metadata)

    _set_Width_metadata = { "name" : "Width",
            "arg_types" : (agcom.FLOAT,),
            "marshallers" : (agmarshall.FLOAT_arg,) }
    @Width.setter
    def Width(self, width:float) -> None:
        return self._intf.set_property(IAgStkGraphicsPathPrimitive._metadata, IAgStkGraphicsPathPrimitive._set_Width_metadata, width)

    _get_MinimumWidthSupported_metadata = { "name" : "MinimumWidthSupported",
            "arg_types" : (POINTER(agcom.FLOAT),),
            "marshallers" : (agmarshall.FLOAT_arg,) }
    @property
    def MinimumWidthSupported(self) -> float:
        """Gets the minimum width, in pixels, supported by the video card."""
        return self._intf.get_property(IAgStkGraphicsPathPrimitive._metadata, IAgStkGraphicsPathPrimitive._get_MinimumWidthSupported_metadata)

    _get_MaximumWidthSupported_metadata = { "name" : "MaximumWidthSupported",
            "arg_types" : (POINTER(agcom.FLOAT),),
            "marshallers" : (agmarshall.FLOAT_arg,) }
    @property
    def MaximumWidthSupported(self) -> float:
        """Gets the maximum width, in pixels, supported by the video card."""
        return self._intf.get_property(IAgStkGraphicsPathPrimitive._metadata, IAgStkGraphicsPathPrimitive._get_MaximumWidthSupported_metadata)

    _get_DisplayOutline_metadata = { "name" : "DisplayOutline",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def DisplayOutline(self) -> bool:
        """Gets or sets whether an outline is rendered around the line."""
        return self._intf.get_property(IAgStkGraphicsPathPrimitive._metadata, IAgStkGraphicsPathPrimitive._get_DisplayOutline_metadata)

    _set_DisplayOutline_metadata = { "name" : "DisplayOutline",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @DisplayOutline.setter
    def DisplayOutline(self, displayOutline:bool) -> None:
        return self._intf.set_property(IAgStkGraphicsPathPrimitive._metadata, IAgStkGraphicsPathPrimitive._set_DisplayOutline_metadata, displayOutline)

    _get_OutlineWidth_metadata = { "name" : "OutlineWidth",
            "arg_types" : (POINTER(agcom.FLOAT),),
            "marshallers" : (agmarshall.FLOAT_arg,) }
    @property
    def OutlineWidth(self) -> float:
        """Gets or sets the width, in pixels, of the outline around the line."""
        return self._intf.get_property(IAgStkGraphicsPathPrimitive._metadata, IAgStkGraphicsPathPrimitive._get_OutlineWidth_metadata)

    _set_OutlineWidth_metadata = { "name" : "OutlineWidth",
            "arg_types" : (agcom.FLOAT,),
            "marshallers" : (agmarshall.FLOAT_arg,) }
    @OutlineWidth.setter
    def OutlineWidth(self, outlineWidth:float) -> None:
        return self._intf.set_property(IAgStkGraphicsPathPrimitive._metadata, IAgStkGraphicsPathPrimitive._set_OutlineWidth_metadata, outlineWidth)

    _get_PerItemPickingEnabled_metadata = { "name" : "PerItemPickingEnabled",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def PerItemPickingEnabled(self) -> bool:
        """Gets or sets whether individual line indices will be included in the pick results returned from the scene's Pick method. Each line index that is picked will be returned as a batch primitive index."""
        return self._intf.get_property(IAgStkGraphicsPathPrimitive._metadata, IAgStkGraphicsPathPrimitive._get_PerItemPickingEnabled_metadata)

    _set_PerItemPickingEnabled_metadata = { "name" : "PerItemPickingEnabled",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @PerItemPickingEnabled.setter
    def PerItemPickingEnabled(self, perItemPickingEnabled:bool) -> None:
        return self._intf.set_property(IAgStkGraphicsPathPrimitive._metadata, IAgStkGraphicsPathPrimitive._set_PerItemPickingEnabled_metadata, perItemPickingEnabled)

    _Item_metadata = { "name" : "Item",
            "arg_types" : (agcom.INT, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.INT_arg, agmarshall.AgInterface_out_arg,) }
    def Item(self, index:int) -> "IAgStkGraphicsPathPoint":
        """Returns the point at the given zero-based index."""
        return self._intf.invoke(IAgStkGraphicsPathPrimitive._metadata, IAgStkGraphicsPathPrimitive._Item_metadata, index, out_arg())

    _get__NewEnum_metadata = { "name" : "_NewEnum",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.IEnumVARIANT_arg,) }
    @property
    def _NewEnum(self) -> enumerator_proxy:
        """Returns an enumerator that iterates through the collection."""
        return self._intf.get_property(IAgStkGraphicsPathPrimitive._metadata, IAgStkGraphicsPathPrimitive._get__NewEnum_metadata)

    _AddFront_metadata = { "name" : "AddFront",
            "arg_types" : (agcom.PVOID,),
            "marshallers" : (agmarshall.AgInterface_in_arg("IAgStkGraphicsPathPoint"),) }
    def AddFront(self, pathPoint:"IAgStkGraphicsPathPoint") -> None:
        """Add a path point to the front of the line."""
        return self._intf.invoke(IAgStkGraphicsPathPrimitive._metadata, IAgStkGraphicsPathPrimitive._AddFront_metadata, pathPoint)

    _AddRangeToFront_metadata = { "name" : "AddRangeToFront",
            "arg_types" : (POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg,) }
    def AddRangeToFront(self, positions:list) -> None:
        """Add the range of path points to the front of the line."""
        return self._intf.invoke(IAgStkGraphicsPathPrimitive._metadata, IAgStkGraphicsPathPrimitive._AddRangeToFront_metadata, positions)

    _AddBack_metadata = { "name" : "AddBack",
            "arg_types" : (agcom.PVOID,),
            "marshallers" : (agmarshall.AgInterface_in_arg("IAgStkGraphicsPathPoint"),) }
    def AddBack(self, pathPoint:"IAgStkGraphicsPathPoint") -> None:
        """Add a path point to the back of the line."""
        return self._intf.invoke(IAgStkGraphicsPathPrimitive._metadata, IAgStkGraphicsPathPrimitive._AddBack_metadata, pathPoint)

    _AddRangeToBack_metadata = { "name" : "AddRangeToBack",
            "arg_types" : (POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg,) }
    def AddRangeToBack(self, positions:list) -> None:
        """Add the range of path points to the back of the line."""
        return self._intf.invoke(IAgStkGraphicsPathPrimitive._metadata, IAgStkGraphicsPathPrimitive._AddRangeToBack_metadata, positions)

    _RemoveFront_metadata = { "name" : "RemoveFront",
            "arg_types" : (),
            "marshallers" : () }
    def RemoveFront(self) -> None:
        """Remove a path point to the front of the line."""
        return self._intf.invoke(IAgStkGraphicsPathPrimitive._metadata, IAgStkGraphicsPathPrimitive._RemoveFront_metadata, )

    _RemoveAllBefore_metadata = { "name" : "RemoveAllBefore",
            "arg_types" : (agcom.INT,),
            "marshallers" : (agmarshall.INT_arg,) }
    def RemoveAllBefore(self, index:int) -> None:
        """Remove all points before index."""
        return self._intf.invoke(IAgStkGraphicsPathPrimitive._metadata, IAgStkGraphicsPathPrimitive._RemoveAllBefore_metadata, index)

    _RemoveBack_metadata = { "name" : "RemoveBack",
            "arg_types" : (),
            "marshallers" : () }
    def RemoveBack(self) -> None:
        """Remove a path point to the back of the line."""
        return self._intf.invoke(IAgStkGraphicsPathPrimitive._metadata, IAgStkGraphicsPathPrimitive._RemoveBack_metadata, )

    _RemoveAllAfter_metadata = { "name" : "RemoveAllAfter",
            "arg_types" : (agcom.INT,),
            "marshallers" : (agmarshall.INT_arg,) }
    def RemoveAllAfter(self, index:int) -> None:
        """Remove all points after index."""
        return self._intf.invoke(IAgStkGraphicsPathPrimitive._metadata, IAgStkGraphicsPathPrimitive._RemoveAllAfter_metadata, index)

    _Front_metadata = { "name" : "Front",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    def Front(self) -> "IAgStkGraphicsPathPoint":
        """Access the path point at the front of the line."""
        return self._intf.invoke(IAgStkGraphicsPathPrimitive._metadata, IAgStkGraphicsPathPrimitive._Front_metadata, out_arg())

    _Back_metadata = { "name" : "Back",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    def Back(self) -> "IAgStkGraphicsPathPoint":
        """Access the path point at the back of the line."""
        return self._intf.invoke(IAgStkGraphicsPathPrimitive._metadata, IAgStkGraphicsPathPrimitive._Back_metadata, out_arg())

    _Clear_metadata = { "name" : "Clear",
            "arg_types" : (),
            "marshallers" : () }
    def Clear(self) -> None:
        """Removes all of the points."""
        return self._intf.invoke(IAgStkGraphicsPathPrimitive._metadata, IAgStkGraphicsPathPrimitive._Clear_metadata, )

    _get_CentralBodyClipped_metadata = { "name" : "CentralBodyClipped",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def CentralBodyClipped(self) -> bool:
        """Gets or sets whether the polyline will be clipped by the central body."""
        return self._intf.get_property(IAgStkGraphicsPathPrimitive._metadata, IAgStkGraphicsPathPrimitive._get_CentralBodyClipped_metadata)

    _set_CentralBodyClipped_metadata = { "name" : "CentralBodyClipped",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @CentralBodyClipped.setter
    def CentralBodyClipped(self, centralBodyClipped:bool) -> None:
        return self._intf.set_property(IAgStkGraphicsPathPrimitive._metadata, IAgStkGraphicsPathPrimitive._set_CentralBodyClipped_metadata, centralBodyClipped)

    __getitem__ = Item



agcls.AgClassCatalog.add_catalog_entry("{264ef2e0-ae0d-412d-9d89-f5f17f095a52}", IAgStkGraphicsPathPrimitive)
agcls.AgTypeNameMap["IAgStkGraphicsPathPrimitive"] = IAgStkGraphicsPathPrimitive

class IAgStkGraphicsPickResult(object):
    """A single result from Pick."""
    _num_methods = 3
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{55238a64-4c7f-4be7-abcb-1d2321f8f64a}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_Objects" : 1,
                             "get_Depth" : 2,
                             "get_Position" : 3, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsPickResult._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsPickResult from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsPickResult.__dict__ and type(IAgStkGraphicsPickResult.__dict__[attrname]) == property:
            return IAgStkGraphicsPickResult.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsPickResult.")
    
    _get_Objects_metadata = { "name" : "Objects",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def Objects(self) -> "IAgStkGraphicsObjectCollection":
        """Gets a collection of objects that were on the pick stack for the picked object."""
        return self._intf.get_property(IAgStkGraphicsPickResult._metadata, IAgStkGraphicsPickResult._get_Objects_metadata)

    _get_Depth_metadata = { "name" : "Depth",
            "arg_types" : (POINTER(agcom.FLOAT),),
            "marshallers" : (agmarshall.FLOAT_arg,) }
    @property
    def Depth(self) -> float:
        """Gets the depth of the picked location in the 3D scene."""
        return self._intf.get_property(IAgStkGraphicsPickResult._metadata, IAgStkGraphicsPickResult._get_Depth_metadata)

    _get_Position_metadata = { "name" : "Position",
            "arg_types" : (POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg,) }
    @property
    def Position(self) -> list:
        """Gets the position of the picked location in the central body's fixed reference frame. The array contains the components of the position arranged in the order x, y, z."""
        return self._intf.get_property(IAgStkGraphicsPickResult._metadata, IAgStkGraphicsPickResult._get_Position_metadata)


agcls.AgClassCatalog.add_catalog_entry("{55238a64-4c7f-4be7-abcb-1d2321f8f64a}", IAgStkGraphicsPickResult)
agcls.AgTypeNameMap["IAgStkGraphicsPickResult"] = IAgStkGraphicsPickResult

class IAgStkGraphicsPixelSizeDisplayCondition(object):
    """Defines an inclusive interval, in pixels, that determines when an object, such as a primitive, is rendered based on the number of pixels the object's bounding sphere (or in the case of screen overlays, bounding rectangle) covers on the screen..."""
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{e5ccd610-a3b3-4f0c-9d51-e367a9ea5abf}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_MinimumPixelSize" : 1,
                             "set_MinimumPixelSize" : 2,
                             "get_MaximumPixelSize" : 3,
                             "set_MaximumPixelSize" : 4, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsPixelSizeDisplayCondition._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsPixelSizeDisplayCondition from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsPixelSizeDisplayCondition.__dict__ and type(IAgStkGraphicsPixelSizeDisplayCondition.__dict__[attrname]) == property:
            return IAgStkGraphicsPixelSizeDisplayCondition.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsPixelSizeDisplayCondition.")
    
    _get_MinimumPixelSize_metadata = { "name" : "MinimumPixelSize",
            "arg_types" : (POINTER(agcom.INT),),
            "marshallers" : (agmarshall.INT_arg,) }
    @property
    def MinimumPixelSize(self) -> int:
        """Gets or sets the minimum pixel size of the inclusive distance interval."""
        return self._intf.get_property(IAgStkGraphicsPixelSizeDisplayCondition._metadata, IAgStkGraphicsPixelSizeDisplayCondition._get_MinimumPixelSize_metadata)

    _set_MinimumPixelSize_metadata = { "name" : "MinimumPixelSize",
            "arg_types" : (agcom.INT,),
            "marshallers" : (agmarshall.INT_arg,) }
    @MinimumPixelSize.setter
    def MinimumPixelSize(self, minimumPixelSize:int) -> None:
        return self._intf.set_property(IAgStkGraphicsPixelSizeDisplayCondition._metadata, IAgStkGraphicsPixelSizeDisplayCondition._set_MinimumPixelSize_metadata, minimumPixelSize)

    _get_MaximumPixelSize_metadata = { "name" : "MaximumPixelSize",
            "arg_types" : (POINTER(agcom.INT),),
            "marshallers" : (agmarshall.INT_arg,) }
    @property
    def MaximumPixelSize(self) -> int:
        """Gets or sets the maximum pixel size of the inclusive distance interval. Use Int32.MaxValue to ignore checking the maximum distance."""
        return self._intf.get_property(IAgStkGraphicsPixelSizeDisplayCondition._metadata, IAgStkGraphicsPixelSizeDisplayCondition._get_MaximumPixelSize_metadata)

    _set_MaximumPixelSize_metadata = { "name" : "MaximumPixelSize",
            "arg_types" : (agcom.INT,),
            "marshallers" : (agmarshall.INT_arg,) }
    @MaximumPixelSize.setter
    def MaximumPixelSize(self, maximumPixelSize:int) -> None:
        return self._intf.set_property(IAgStkGraphicsPixelSizeDisplayCondition._metadata, IAgStkGraphicsPixelSizeDisplayCondition._set_MaximumPixelSize_metadata, maximumPixelSize)


agcls.AgClassCatalog.add_catalog_entry("{e5ccd610-a3b3-4f0c-9d51-e367a9ea5abf}", IAgStkGraphicsPixelSizeDisplayCondition)
agcls.AgTypeNameMap["IAgStkGraphicsPixelSizeDisplayCondition"] = IAgStkGraphicsPixelSizeDisplayCondition

class IAgStkGraphicsPointBatchPrimitive(object):
    """ Renders one or more points in the 3D scene. Each point in the batch has a unique position and an optional color. All points in the batch share the same pixel size. For best performance, avoid creating lots of batches with only a few points each..."""
    _num_methods = 34
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{ae6c6dca-3afe-4419-8aad-dd56bee51446}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_DisplayOutline" : 1,
                             "set_DisplayOutline" : 2,
                             "get_OutlineColor" : 3,
                             "set_OutlineColor" : 4,
                             "get_OutlineTranslucency" : 5,
                             "set_OutlineTranslucency" : 6,
                             "get_OutlineWidth" : 7,
                             "set_OutlineWidth" : 8,
                             "get_PixelSize" : 9,
                             "set_PixelSize" : 10,
                             "get_MinimumPixelSizeSupported" : 11,
                             "get_MaximumPixelSizeSupported" : 12,
                             "get_DistanceDisplayConditionPerPoint" : 13,
                             "set_DistanceDisplayConditionPerPoint" : 14,
                             "get_SetHint" : 15,
                             "get_PerItemPickingEnabled" : 16,
                             "set_PerItemPickingEnabled" : 17,
                             "Set" : 18,
                             "SetWithColors" : 19,
                             "SetWithColorsAndRenderPass" : 20,
                             "SetCartographic" : 21,
                             "SetCartographicWithColors" : 22,
                             "SetCartographicWithColorsAndRenderPass" : 23,
                             "SetPartial" : 24,
                             "SetPartialWithIndicesOrder" : 25,
                             "SetPartialWithColors" : 26,
                             "SetPartialWithColorsIndicesOrderAndRenderPass" : 27,
                             "SetPartialCartographic" : 28,
                             "SetPartialCartographicWithIndicesOrder" : 29,
                             "SetPartialCartographicWithColors" : 30,
                             "SetPartialCartographicWithColorsIndicesOrderAndRenderPass" : 31,
                             "get_CentralBodyClipped" : 32,
                             "set_CentralBodyClipped" : 33,
                             "SetWithOptionalParameters" : 34, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsPointBatchPrimitive._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsPointBatchPrimitive from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsPointBatchPrimitive.__dict__ and type(IAgStkGraphicsPointBatchPrimitive.__dict__[attrname]) == property:
            return IAgStkGraphicsPointBatchPrimitive.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsPointBatchPrimitive.")
    
    _get_DisplayOutline_metadata = { "name" : "DisplayOutline",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def DisplayOutline(self) -> bool:
        """Gets or sets whether an outline is rendered around each point in the batch."""
        return self._intf.get_property(IAgStkGraphicsPointBatchPrimitive._metadata, IAgStkGraphicsPointBatchPrimitive._get_DisplayOutline_metadata)

    _set_DisplayOutline_metadata = { "name" : "DisplayOutline",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @DisplayOutline.setter
    def DisplayOutline(self, displayOutline:bool) -> None:
        return self._intf.set_property(IAgStkGraphicsPointBatchPrimitive._metadata, IAgStkGraphicsPointBatchPrimitive._set_DisplayOutline_metadata, displayOutline)

    _get_OutlineColor_metadata = { "name" : "OutlineColor",
            "arg_types" : (POINTER(agcom.OLE_COLOR),),
            "marshallers" : (agmarshall.OLE_COLOR_arg,) }
    @property
    def OutlineColor(self) -> agcolor.Color:
        """Gets or sets the outline's color."""
        return self._intf.get_property(IAgStkGraphicsPointBatchPrimitive._metadata, IAgStkGraphicsPointBatchPrimitive._get_OutlineColor_metadata)

    _set_OutlineColor_metadata = { "name" : "OutlineColor",
            "arg_types" : (agcom.OLE_COLOR,),
            "marshallers" : (agmarshall.OLE_COLOR_arg,) }
    @OutlineColor.setter
    def OutlineColor(self, outlineColor:agcolor.Color) -> None:
        return self._intf.set_property(IAgStkGraphicsPointBatchPrimitive._metadata, IAgStkGraphicsPointBatchPrimitive._set_OutlineColor_metadata, outlineColor)

    _get_OutlineTranslucency_metadata = { "name" : "OutlineTranslucency",
            "arg_types" : (POINTER(agcom.FLOAT),),
            "marshallers" : (agmarshall.FLOAT_arg,) }
    @property
    def OutlineTranslucency(self) -> float:
        """Gets or sets the translucency of the outline. Translucency is between 0 and 1, where 0 is opaque and 1 is transparent."""
        return self._intf.get_property(IAgStkGraphicsPointBatchPrimitive._metadata, IAgStkGraphicsPointBatchPrimitive._get_OutlineTranslucency_metadata)

    _set_OutlineTranslucency_metadata = { "name" : "OutlineTranslucency",
            "arg_types" : (agcom.FLOAT,),
            "marshallers" : (agmarshall.FLOAT_arg,) }
    @OutlineTranslucency.setter
    def OutlineTranslucency(self, outlineTranslucency:float) -> None:
        return self._intf.set_property(IAgStkGraphicsPointBatchPrimitive._metadata, IAgStkGraphicsPointBatchPrimitive._set_OutlineTranslucency_metadata, outlineTranslucency)

    _get_OutlineWidth_metadata = { "name" : "OutlineWidth",
            "arg_types" : (POINTER(agcom.FLOAT),),
            "marshallers" : (agmarshall.FLOAT_arg,) }
    @property
    def OutlineWidth(self) -> float:
        """Gets or sets the size, in pixels, of the outline around each point in the batch."""
        return self._intf.get_property(IAgStkGraphicsPointBatchPrimitive._metadata, IAgStkGraphicsPointBatchPrimitive._get_OutlineWidth_metadata)

    _set_OutlineWidth_metadata = { "name" : "OutlineWidth",
            "arg_types" : (agcom.FLOAT,),
            "marshallers" : (agmarshall.FLOAT_arg,) }
    @OutlineWidth.setter
    def OutlineWidth(self, outlineWidth:float) -> None:
        return self._intf.set_property(IAgStkGraphicsPointBatchPrimitive._metadata, IAgStkGraphicsPointBatchPrimitive._set_OutlineWidth_metadata, outlineWidth)

    _get_PixelSize_metadata = { "name" : "PixelSize",
            "arg_types" : (POINTER(agcom.FLOAT),),
            "marshallers" : (agmarshall.FLOAT_arg,) }
    @property
    def PixelSize(self) -> float:
        """Gets or sets the size, in pixels, of each point in the point batch."""
        return self._intf.get_property(IAgStkGraphicsPointBatchPrimitive._metadata, IAgStkGraphicsPointBatchPrimitive._get_PixelSize_metadata)

    _set_PixelSize_metadata = { "name" : "PixelSize",
            "arg_types" : (agcom.FLOAT,),
            "marshallers" : (agmarshall.FLOAT_arg,) }
    @PixelSize.setter
    def PixelSize(self, pixelSize:float) -> None:
        return self._intf.set_property(IAgStkGraphicsPointBatchPrimitive._metadata, IAgStkGraphicsPointBatchPrimitive._set_PixelSize_metadata, pixelSize)

    _get_MinimumPixelSizeSupported_metadata = { "name" : "MinimumPixelSizeSupported",
            "arg_types" : (POINTER(agcom.FLOAT),),
            "marshallers" : (agmarshall.FLOAT_arg,) }
    @property
    def MinimumPixelSizeSupported(self) -> float:
        """Gets the minimum pixel size supported by the video card."""
        return self._intf.get_property(IAgStkGraphicsPointBatchPrimitive._metadata, IAgStkGraphicsPointBatchPrimitive._get_MinimumPixelSizeSupported_metadata)

    _get_MaximumPixelSizeSupported_metadata = { "name" : "MaximumPixelSizeSupported",
            "arg_types" : (POINTER(agcom.FLOAT),),
            "marshallers" : (agmarshall.FLOAT_arg,) }
    @property
    def MaximumPixelSizeSupported(self) -> float:
        """Gets the maximum pixel size supported by the video card."""
        return self._intf.get_property(IAgStkGraphicsPointBatchPrimitive._metadata, IAgStkGraphicsPointBatchPrimitive._get_MaximumPixelSizeSupported_metadata)

    _get_DistanceDisplayConditionPerPoint_metadata = { "name" : "DistanceDisplayConditionPerPoint",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def DistanceDisplayConditionPerPoint(self) -> "IAgStkGraphicsDistanceDisplayCondition":
        """Gets or sets a distance display condition that is evaluated per point in the point batch during rendering. This is different than display condition, which is evaluated once for the entire point batch..."""
        return self._intf.get_property(IAgStkGraphicsPointBatchPrimitive._metadata, IAgStkGraphicsPointBatchPrimitive._get_DistanceDisplayConditionPerPoint_metadata)

    _set_DistanceDisplayConditionPerPoint_metadata = { "name" : "DistanceDisplayConditionPerPoint",
            "arg_types" : (agcom.PVOID,),
            "marshallers" : (agmarshall.AgInterface_in_arg("IAgStkGraphicsDistanceDisplayCondition"),) }
    @DistanceDisplayConditionPerPoint.setter
    def DistanceDisplayConditionPerPoint(self, distanceDisplayConditionPerPoint:"IAgStkGraphicsDistanceDisplayCondition") -> None:
        return self._intf.set_property(IAgStkGraphicsPointBatchPrimitive._metadata, IAgStkGraphicsPointBatchPrimitive._set_DistanceDisplayConditionPerPoint_metadata, distanceDisplayConditionPerPoint)

    _get_SetHint_metadata = { "name" : "SetHint",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEStkGraphicsSetHint),) }
    @property
    def SetHint(self) -> "AgEStkGraphicsSetHint":
        """Gets the primitive's set hint. See the Set Hint Performance Overview for selecting an appropriate value to construct the primitive with."""
        return self._intf.get_property(IAgStkGraphicsPointBatchPrimitive._metadata, IAgStkGraphicsPointBatchPrimitive._get_SetHint_metadata)

    _get_PerItemPickingEnabled_metadata = { "name" : "PerItemPickingEnabled",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def PerItemPickingEnabled(self) -> bool:
        """Gets or sets whether individual point indices will be included in the pick results returned from the scene's Pick method. Each point index that is picked will be returned as a batch primitive index."""
        return self._intf.get_property(IAgStkGraphicsPointBatchPrimitive._metadata, IAgStkGraphicsPointBatchPrimitive._get_PerItemPickingEnabled_metadata)

    _set_PerItemPickingEnabled_metadata = { "name" : "PerItemPickingEnabled",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @PerItemPickingEnabled.setter
    def PerItemPickingEnabled(self, perItemPickingEnabled:bool) -> None:
        return self._intf.set_property(IAgStkGraphicsPointBatchPrimitive._metadata, IAgStkGraphicsPointBatchPrimitive._set_PerItemPickingEnabled_metadata, perItemPickingEnabled)

    _Set_metadata = { "name" : "Set",
            "arg_types" : (POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg,) }
    def Set(self, positions:list) -> None:
        """Defines the positions of points in a point batch. The points are rendered in the primitive's reference frame."""
        return self._intf.invoke(IAgStkGraphicsPointBatchPrimitive._metadata, IAgStkGraphicsPointBatchPrimitive._Set_metadata, positions)

    _SetWithColors_metadata = { "name" : "SetWithColors",
            "arg_types" : (POINTER(agcom.LPSAFEARRAY), POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg, agmarshall.LPSAFEARRAY_arg,) }
    def SetWithColors(self, positions:list, colors:list) -> None:
        """Defines the positions and colors of points in a point batch. The points are rendered in the primitive's reference frame."""
        return self._intf.invoke(IAgStkGraphicsPointBatchPrimitive._metadata, IAgStkGraphicsPointBatchPrimitive._SetWithColors_metadata, positions, colors)

    _SetWithColorsAndRenderPass_metadata = { "name" : "SetWithColorsAndRenderPass",
            "arg_types" : (POINTER(agcom.LPSAFEARRAY), POINTER(agcom.LPSAFEARRAY), agcom.LONG,),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg, agmarshall.LPSAFEARRAY_arg, agmarshall.AgEnum_arg(AgEStkGraphicsRenderPassHint),) }
    def SetWithColorsAndRenderPass(self, positions:list, colors:list, renderPassHint:"AgEStkGraphicsRenderPassHint") -> None:
        """Defines the positions and colors of points in a point batch. The points are rendered in the primitive's reference frame. renderPassHint is provided for efficiency."""
        return self._intf.invoke(IAgStkGraphicsPointBatchPrimitive._metadata, IAgStkGraphicsPointBatchPrimitive._SetWithColorsAndRenderPass_metadata, positions, colors, renderPassHint)

    _SetCartographic_metadata = { "name" : "SetCartographic",
            "arg_types" : (agcom.BSTR, POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.LPSAFEARRAY_arg,) }
    def SetCartographic(self, centralBody:str, positions:list) -> None:
        """For convenience. Defines the positions of points in a point batch using cartographic positions. This is equivalent to converting each position in positions to cartesian and calling Set."""
        return self._intf.invoke(IAgStkGraphicsPointBatchPrimitive._metadata, IAgStkGraphicsPointBatchPrimitive._SetCartographic_metadata, centralBody, positions)

    _SetCartographicWithColors_metadata = { "name" : "SetCartographicWithColors",
            "arg_types" : (agcom.BSTR, POINTER(agcom.LPSAFEARRAY), POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.LPSAFEARRAY_arg, agmarshall.LPSAFEARRAY_arg,) }
    def SetCartographicWithColors(self, centralBody:str, positions:list, colors:list) -> None:
        """For convenience. Defines the positions and colors of points in a point batch using cartographic positions. This is equivalent to converting each position in positions to cartesian and calling Set."""
        return self._intf.invoke(IAgStkGraphicsPointBatchPrimitive._metadata, IAgStkGraphicsPointBatchPrimitive._SetCartographicWithColors_metadata, centralBody, positions, colors)

    _SetCartographicWithColorsAndRenderPass_metadata = { "name" : "SetCartographicWithColorsAndRenderPass",
            "arg_types" : (agcom.BSTR, POINTER(agcom.LPSAFEARRAY), POINTER(agcom.LPSAFEARRAY), agcom.LONG,),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.LPSAFEARRAY_arg, agmarshall.LPSAFEARRAY_arg, agmarshall.AgEnum_arg(AgEStkGraphicsRenderPassHint),) }
    def SetCartographicWithColorsAndRenderPass(self, centralBody:str, positions:list, colors:list, renderPassHint:"AgEStkGraphicsRenderPassHint") -> None:
        """For convenience. Defines the positions and colors of points in a point batch using cartographic positions. renderPassHint is provided for efficiency. This is equivalent to converting each position in positions to cartesian and calling Set."""
        return self._intf.invoke(IAgStkGraphicsPointBatchPrimitive._metadata, IAgStkGraphicsPointBatchPrimitive._SetCartographicWithColorsAndRenderPass_metadata, centralBody, positions, colors, renderPassHint)

    _SetPartial_metadata = { "name" : "SetPartial",
            "arg_types" : (POINTER(agcom.LPSAFEARRAY), POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg, agmarshall.LPSAFEARRAY_arg,) }
    def SetPartial(self, positions:list, indices:list) -> None:
        """Updates a subset of positions in a point batch."""
        return self._intf.invoke(IAgStkGraphicsPointBatchPrimitive._metadata, IAgStkGraphicsPointBatchPrimitive._SetPartial_metadata, positions, indices)

    _SetPartialWithIndicesOrder_metadata = { "name" : "SetPartialWithIndicesOrder",
            "arg_types" : (POINTER(agcom.LPSAFEARRAY), POINTER(agcom.LPSAFEARRAY), agcom.LONG,),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg, agmarshall.LPSAFEARRAY_arg, agmarshall.AgEnum_arg(AgEStkGraphicsIndicesOrderHint),) }
    def SetPartialWithIndicesOrder(self, positions:list, indices:list, indicesOrderHint:"AgEStkGraphicsIndicesOrderHint") -> None:
        """Updates a subset of positions in a point batch."""
        return self._intf.invoke(IAgStkGraphicsPointBatchPrimitive._metadata, IAgStkGraphicsPointBatchPrimitive._SetPartialWithIndicesOrder_metadata, positions, indices, indicesOrderHint)

    _SetPartialWithColors_metadata = { "name" : "SetPartialWithColors",
            "arg_types" : (POINTER(agcom.LPSAFEARRAY), POINTER(agcom.LPSAFEARRAY), POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg, agmarshall.LPSAFEARRAY_arg, agmarshall.LPSAFEARRAY_arg,) }
    def SetPartialWithColors(self, positions:list, colors:list, indices:list) -> None:
        """Updates a subset of positions and/or colors in a point batch."""
        return self._intf.invoke(IAgStkGraphicsPointBatchPrimitive._metadata, IAgStkGraphicsPointBatchPrimitive._SetPartialWithColors_metadata, positions, colors, indices)

    _SetPartialWithColorsIndicesOrderAndRenderPass_metadata = { "name" : "SetPartialWithColorsIndicesOrderAndRenderPass",
            "arg_types" : (POINTER(agcom.LPSAFEARRAY), POINTER(agcom.LPSAFEARRAY), POINTER(agcom.LPSAFEARRAY), agcom.LONG, agcom.LONG,),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg, agmarshall.LPSAFEARRAY_arg, agmarshall.LPSAFEARRAY_arg, agmarshall.AgEnum_arg(AgEStkGraphicsIndicesOrderHint), agmarshall.AgEnum_arg(AgEStkGraphicsRenderPassHint),) }
    def SetPartialWithColorsIndicesOrderAndRenderPass(self, positions:list, colors:list, indices:list, indicesOrderHint:"AgEStkGraphicsIndicesOrderHint", renderPassHint:"AgEStkGraphicsRenderPassHint") -> None:
        """Updates a subset of positions and/or colors in a point batch."""
        return self._intf.invoke(IAgStkGraphicsPointBatchPrimitive._metadata, IAgStkGraphicsPointBatchPrimitive._SetPartialWithColorsIndicesOrderAndRenderPass_metadata, positions, colors, indices, indicesOrderHint, renderPassHint)

    _SetPartialCartographic_metadata = { "name" : "SetPartialCartographic",
            "arg_types" : (agcom.BSTR, POINTER(agcom.LPSAFEARRAY), POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.LPSAFEARRAY_arg, agmarshall.LPSAFEARRAY_arg,) }
    def SetPartialCartographic(self, centralBody:str, positions:list, indices:list) -> None:
        """For convenience. Updates a subset of positions in a point batch using cartographic positions. This is equivalent to converting each position in positions to cartesian and calling SetPartial"""
        return self._intf.invoke(IAgStkGraphicsPointBatchPrimitive._metadata, IAgStkGraphicsPointBatchPrimitive._SetPartialCartographic_metadata, centralBody, positions, indices)

    _SetPartialCartographicWithIndicesOrder_metadata = { "name" : "SetPartialCartographicWithIndicesOrder",
            "arg_types" : (agcom.BSTR, POINTER(agcom.LPSAFEARRAY), POINTER(agcom.LPSAFEARRAY), agcom.LONG,),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.LPSAFEARRAY_arg, agmarshall.LPSAFEARRAY_arg, agmarshall.AgEnum_arg(AgEStkGraphicsIndicesOrderHint),) }
    def SetPartialCartographicWithIndicesOrder(self, centralBody:str, positions:list, indices:list, indicesOrderHint:"AgEStkGraphicsIndicesOrderHint") -> None:
        """For convenience. Updates a subset of positions in a point batch using cartographic positions. This is equivalent to converting each position in positions to cartesian and calling SetPartial"""
        return self._intf.invoke(IAgStkGraphicsPointBatchPrimitive._metadata, IAgStkGraphicsPointBatchPrimitive._SetPartialCartographicWithIndicesOrder_metadata, centralBody, positions, indices, indicesOrderHint)

    _SetPartialCartographicWithColors_metadata = { "name" : "SetPartialCartographicWithColors",
            "arg_types" : (agcom.BSTR, POINTER(agcom.LPSAFEARRAY), POINTER(agcom.LPSAFEARRAY), POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.LPSAFEARRAY_arg, agmarshall.LPSAFEARRAY_arg, agmarshall.LPSAFEARRAY_arg,) }
    def SetPartialCartographicWithColors(self, centralBody:str, positions:list, colors:list, indices:list) -> None:
        """For convenience. Updates a subset of positions and/or colors in a point batch using cartographic positions. This is equivalent to converting each position in positions to cartesian and calling SetPartial"""
        return self._intf.invoke(IAgStkGraphicsPointBatchPrimitive._metadata, IAgStkGraphicsPointBatchPrimitive._SetPartialCartographicWithColors_metadata, centralBody, positions, colors, indices)

    _SetPartialCartographicWithColorsIndicesOrderAndRenderPass_metadata = { "name" : "SetPartialCartographicWithColorsIndicesOrderAndRenderPass",
            "arg_types" : (agcom.BSTR, POINTER(agcom.LPSAFEARRAY), POINTER(agcom.LPSAFEARRAY), POINTER(agcom.LPSAFEARRAY), agcom.LONG, agcom.LONG,),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.LPSAFEARRAY_arg, agmarshall.LPSAFEARRAY_arg, agmarshall.LPSAFEARRAY_arg, agmarshall.AgEnum_arg(AgEStkGraphicsIndicesOrderHint), agmarshall.AgEnum_arg(AgEStkGraphicsRenderPassHint),) }
    def SetPartialCartographicWithColorsIndicesOrderAndRenderPass(self, centralBody:str, positions:list, colors:list, indices:list, indicesOrderHint:"AgEStkGraphicsIndicesOrderHint", renderPassHint:"AgEStkGraphicsRenderPassHint") -> None:
        """For convenience. Updates a subset of positions and/or colors in a point batch using cartographic positions. This is equivalent to converting each position in positions to cartesian and calling SetPartial"""
        return self._intf.invoke(IAgStkGraphicsPointBatchPrimitive._metadata, IAgStkGraphicsPointBatchPrimitive._SetPartialCartographicWithColorsIndicesOrderAndRenderPass_metadata, centralBody, positions, colors, indices, indicesOrderHint, renderPassHint)

    _get_CentralBodyClipped_metadata = { "name" : "CentralBodyClipped",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def CentralBodyClipped(self) -> bool:
        """Gets or sets whether individual points will be clipped by the central body."""
        return self._intf.get_property(IAgStkGraphicsPointBatchPrimitive._metadata, IAgStkGraphicsPointBatchPrimitive._get_CentralBodyClipped_metadata)

    _set_CentralBodyClipped_metadata = { "name" : "CentralBodyClipped",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @CentralBodyClipped.setter
    def CentralBodyClipped(self, centralBodyClipped:bool) -> None:
        return self._intf.set_property(IAgStkGraphicsPointBatchPrimitive._metadata, IAgStkGraphicsPointBatchPrimitive._set_CentralBodyClipped_metadata, centralBodyClipped)

    _SetWithOptionalParameters_metadata = { "name" : "SetWithOptionalParameters",
            "arg_types" : (POINTER(agcom.LPSAFEARRAY), POINTER(agcom.LPSAFEARRAY), agcom.PVOID, agcom.LONG,),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg, agmarshall.LPSAFEARRAY_arg, agmarshall.AgInterface_in_arg("IAgStkGraphicsPointBatchPrimitiveOptionalParameters"), agmarshall.AgEnum_arg(AgEStkGraphicsRenderPassHint),) }
    def SetWithOptionalParameters(self, positions:list, colors:list, optionalParameters:"IAgStkGraphicsPointBatchPrimitiveOptionalParameters", renderPassHint:"AgEStkGraphicsRenderPassHint") -> None:
        """Defines the positions, colors, and optional parameters of points in a point batch. The points are rendered in the primitive's reference frame. renderPassHint is provided for efficiency."""
        return self._intf.invoke(IAgStkGraphicsPointBatchPrimitive._metadata, IAgStkGraphicsPointBatchPrimitive._SetWithOptionalParameters_metadata, positions, colors, optionalParameters, renderPassHint)


agcls.AgClassCatalog.add_catalog_entry("{ae6c6dca-3afe-4419-8aad-dd56bee51446}", IAgStkGraphicsPointBatchPrimitive)
agcls.AgTypeNameMap["IAgStkGraphicsPointBatchPrimitive"] = IAgStkGraphicsPointBatchPrimitive

class IAgStkGraphicsPointBatchPrimitiveOptionalParameters(object):
    """Optional per-point parameters for point batch primitive that overrides the point batch primitive's global parameters..."""
    _num_methods = 1
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{e8b88732-1377-483c-bf19-ffafeb1d8d52}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "SetPixelSizes" : 1, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsPointBatchPrimitiveOptionalParameters._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsPointBatchPrimitiveOptionalParameters from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsPointBatchPrimitiveOptionalParameters.__dict__ and type(IAgStkGraphicsPointBatchPrimitiveOptionalParameters.__dict__[attrname]) == property:
            return IAgStkGraphicsPointBatchPrimitiveOptionalParameters.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsPointBatchPrimitiveOptionalParameters.")
    
    _SetPixelSizes_metadata = { "name" : "SetPixelSizes",
            "arg_types" : (POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg,) }
    def SetPixelSizes(self, pixelSizes:list) -> None:
        """Defines a collection of pixel sizes, one for each point in the point batch."""
        return self._intf.invoke(IAgStkGraphicsPointBatchPrimitiveOptionalParameters._metadata, IAgStkGraphicsPointBatchPrimitiveOptionalParameters._SetPixelSizes_metadata, pixelSizes)


agcls.AgClassCatalog.add_catalog_entry("{e8b88732-1377-483c-bf19-ffafeb1d8d52}", IAgStkGraphicsPointBatchPrimitiveOptionalParameters)
agcls.AgTypeNameMap["IAgStkGraphicsPointBatchPrimitiveOptionalParameters"] = IAgStkGraphicsPointBatchPrimitiveOptionalParameters

class IAgStkGraphicsPolylinePrimitive(object):
    """Renders a polyline in the 3D scene. Each line segment may have a different color. A polyline can be constructed with a position interpolator to render great arcs or rhumb lines."""
    _num_methods = 42
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{0122dc2b-4232-443d-b8da-09b42967b841}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_Width" : 1,
                             "set_Width" : 2,
                             "get_MinimumWidthSupported" : 3,
                             "get_MaximumWidthSupported" : 4,
                             "get_PositionInterpolator" : 5,
                             "get_PolylineType" : 6,
                             "get_SetHint" : 7,
                             "get_DisplayOutline" : 8,
                             "set_DisplayOutline" : 9,
                             "get_OutlineColor" : 10,
                             "set_OutlineColor" : 11,
                             "get_OutlineTranslucency" : 12,
                             "set_OutlineTranslucency" : 13,
                             "get_OutlineWidth" : 14,
                             "set_OutlineWidth" : 15,
                             "get_PerItemPickingEnabled" : 16,
                             "set_PerItemPickingEnabled" : 17,
                             "Set" : 18,
                             "SetWithColors" : 19,
                             "SetWithColorsAndHint" : 20,
                             "SetWithSurfaceShapesResult" : 21,
                             "SetWithSurfaceTriangulatorResult" : 22,
                             "SetWithSolidTriangulatorResult" : 23,
                             "SetCartographic" : 24,
                             "SetCartographicWithColors" : 25,
                             "SetCartographicWithColorsAndHint" : 26,
                             "SetSubset" : 27,
                             "SetSubsetCartographic" : 28,
                             "SetPartial" : 29,
                             "SetPartialWithIndicesOrder" : 30,
                             "SetPartialWithColors" : 31,
                             "SetPartialWithColorsIndicesOrderAndRenderPassHint" : 32,
                             "SetPartialCartographic" : 33,
                             "SetPartialCartographicWithIndicesOrder" : 34,
                             "SetPartialCartographicWithColors" : 35,
                             "SetPartialCartographicWithColorsIndicesOrderAndRenderPass" : 36,
                             "get_CentralBodyClipped" : 37,
                             "set_CentralBodyClipped" : 38,
                             "SetWithColorsAndOptionalParameters" : 39,
                             "SetCartographicWithColorsAndOptionalParameters" : 40,
                             "SetPartialWithColorsAndOptionalParameters" : 41,
                             "SetPartialCartographicWithOptionalParameters" : 42, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsPolylinePrimitive._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsPolylinePrimitive from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsPolylinePrimitive.__dict__ and type(IAgStkGraphicsPolylinePrimitive.__dict__[attrname]) == property:
            return IAgStkGraphicsPolylinePrimitive.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsPolylinePrimitive.")
    
    _get_Width_metadata = { "name" : "Width",
            "arg_types" : (POINTER(agcom.FLOAT),),
            "marshallers" : (agmarshall.FLOAT_arg,) }
    @property
    def Width(self) -> float:
        """Gets or sets the line width, in pixels."""
        return self._intf.get_property(IAgStkGraphicsPolylinePrimitive._metadata, IAgStkGraphicsPolylinePrimitive._get_Width_metadata)

    _set_Width_metadata = { "name" : "Width",
            "arg_types" : (agcom.FLOAT,),
            "marshallers" : (agmarshall.FLOAT_arg,) }
    @Width.setter
    def Width(self, width:float) -> None:
        return self._intf.set_property(IAgStkGraphicsPolylinePrimitive._metadata, IAgStkGraphicsPolylinePrimitive._set_Width_metadata, width)

    _get_MinimumWidthSupported_metadata = { "name" : "MinimumWidthSupported",
            "arg_types" : (POINTER(agcom.FLOAT),),
            "marshallers" : (agmarshall.FLOAT_arg,) }
    @property
    def MinimumWidthSupported(self) -> float:
        """Gets the minimum width, in pixels, supported by the video card."""
        return self._intf.get_property(IAgStkGraphicsPolylinePrimitive._metadata, IAgStkGraphicsPolylinePrimitive._get_MinimumWidthSupported_metadata)

    _get_MaximumWidthSupported_metadata = { "name" : "MaximumWidthSupported",
            "arg_types" : (POINTER(agcom.FLOAT),),
            "marshallers" : (agmarshall.FLOAT_arg,) }
    @property
    def MaximumWidthSupported(self) -> float:
        """Gets the maximum width, in pixels, supported by the video card."""
        return self._intf.get_property(IAgStkGraphicsPolylinePrimitive._metadata, IAgStkGraphicsPolylinePrimitive._get_MaximumWidthSupported_metadata)

    _get_PositionInterpolator_metadata = { "name" : "PositionInterpolator",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def PositionInterpolator(self) -> "IAgStkGraphicsPositionInterpolator":
        """Gets the position interpolator applied to positions passed to Set, SetCartographic, SetSubset, and SetSubsetCartographic methods. When this property is null, linear interpolation is used."""
        return self._intf.get_property(IAgStkGraphicsPolylinePrimitive._metadata, IAgStkGraphicsPolylinePrimitive._get_PositionInterpolator_metadata)

    _get_PolylineType_metadata = { "name" : "PolylineType",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEStkGraphicsPolylineType),) }
    @property
    def PolylineType(self) -> "AgEStkGraphicsPolylineType":
        """Gets how the polyline interprets the positions passed to Set methods."""
        return self._intf.get_property(IAgStkGraphicsPolylinePrimitive._metadata, IAgStkGraphicsPolylinePrimitive._get_PolylineType_metadata)

    _get_SetHint_metadata = { "name" : "SetHint",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEStkGraphicsSetHint),) }
    @property
    def SetHint(self) -> "AgEStkGraphicsSetHint":
        """Gets the primitive's set hint. See the Set Hint Performance Overview for selecting an appropriate value to construct the primitive with."""
        return self._intf.get_property(IAgStkGraphicsPolylinePrimitive._metadata, IAgStkGraphicsPolylinePrimitive._get_SetHint_metadata)

    _get_DisplayOutline_metadata = { "name" : "DisplayOutline",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def DisplayOutline(self) -> bool:
        """Gets or sets whether an outline is rendered around the polyline."""
        return self._intf.get_property(IAgStkGraphicsPolylinePrimitive._metadata, IAgStkGraphicsPolylinePrimitive._get_DisplayOutline_metadata)

    _set_DisplayOutline_metadata = { "name" : "DisplayOutline",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @DisplayOutline.setter
    def DisplayOutline(self, displayOutline:bool) -> None:
        return self._intf.set_property(IAgStkGraphicsPolylinePrimitive._metadata, IAgStkGraphicsPolylinePrimitive._set_DisplayOutline_metadata, displayOutline)

    _get_OutlineColor_metadata = { "name" : "OutlineColor",
            "arg_types" : (POINTER(agcom.OLE_COLOR),),
            "marshallers" : (agmarshall.OLE_COLOR_arg,) }
    @property
    def OutlineColor(self) -> agcolor.Color:
        """Gets or sets the outline's color."""
        return self._intf.get_property(IAgStkGraphicsPolylinePrimitive._metadata, IAgStkGraphicsPolylinePrimitive._get_OutlineColor_metadata)

    _set_OutlineColor_metadata = { "name" : "OutlineColor",
            "arg_types" : (agcom.OLE_COLOR,),
            "marshallers" : (agmarshall.OLE_COLOR_arg,) }
    @OutlineColor.setter
    def OutlineColor(self, outlineColor:agcolor.Color) -> None:
        return self._intf.set_property(IAgStkGraphicsPolylinePrimitive._metadata, IAgStkGraphicsPolylinePrimitive._set_OutlineColor_metadata, outlineColor)

    _get_OutlineTranslucency_metadata = { "name" : "OutlineTranslucency",
            "arg_types" : (POINTER(agcom.FLOAT),),
            "marshallers" : (agmarshall.FLOAT_arg,) }
    @property
    def OutlineTranslucency(self) -> float:
        """Gets or sets the translucency of the outline. Translucency is between 0 and 1, where 0 is opaque and 1 is transparent."""
        return self._intf.get_property(IAgStkGraphicsPolylinePrimitive._metadata, IAgStkGraphicsPolylinePrimitive._get_OutlineTranslucency_metadata)

    _set_OutlineTranslucency_metadata = { "name" : "OutlineTranslucency",
            "arg_types" : (agcom.FLOAT,),
            "marshallers" : (agmarshall.FLOAT_arg,) }
    @OutlineTranslucency.setter
    def OutlineTranslucency(self, outlineTranslucency:float) -> None:
        return self._intf.set_property(IAgStkGraphicsPolylinePrimitive._metadata, IAgStkGraphicsPolylinePrimitive._set_OutlineTranslucency_metadata, outlineTranslucency)

    _get_OutlineWidth_metadata = { "name" : "OutlineWidth",
            "arg_types" : (POINTER(agcom.FLOAT),),
            "marshallers" : (agmarshall.FLOAT_arg,) }
    @property
    def OutlineWidth(self) -> float:
        """Gets or sets the width, in pixels, of the outline around the polyline."""
        return self._intf.get_property(IAgStkGraphicsPolylinePrimitive._metadata, IAgStkGraphicsPolylinePrimitive._get_OutlineWidth_metadata)

    _set_OutlineWidth_metadata = { "name" : "OutlineWidth",
            "arg_types" : (agcom.FLOAT,),
            "marshallers" : (agmarshall.FLOAT_arg,) }
    @OutlineWidth.setter
    def OutlineWidth(self, outlineWidth:float) -> None:
        return self._intf.set_property(IAgStkGraphicsPolylinePrimitive._metadata, IAgStkGraphicsPolylinePrimitive._set_OutlineWidth_metadata, outlineWidth)

    _get_PerItemPickingEnabled_metadata = { "name" : "PerItemPickingEnabled",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def PerItemPickingEnabled(self) -> bool:
        """Gets or sets whether individual line indices will be included in the pick results returned from the scene's Pick method. Each line index that is picked will be returned as a batch primitive index."""
        return self._intf.get_property(IAgStkGraphicsPolylinePrimitive._metadata, IAgStkGraphicsPolylinePrimitive._get_PerItemPickingEnabled_metadata)

    _set_PerItemPickingEnabled_metadata = { "name" : "PerItemPickingEnabled",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @PerItemPickingEnabled.setter
    def PerItemPickingEnabled(self, perItemPickingEnabled:bool) -> None:
        return self._intf.set_property(IAgStkGraphicsPolylinePrimitive._metadata, IAgStkGraphicsPolylinePrimitive._set_PerItemPickingEnabled_metadata, perItemPickingEnabled)

    _Set_metadata = { "name" : "Set",
            "arg_types" : (POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg,) }
    def Set(self, positions:list) -> None:
        """Defines the positions for a polyline primitive. The polyline is rendered in its reference frame."""
        return self._intf.invoke(IAgStkGraphicsPolylinePrimitive._metadata, IAgStkGraphicsPolylinePrimitive._Set_metadata, positions)

    _SetWithColors_metadata = { "name" : "SetWithColors",
            "arg_types" : (POINTER(agcom.LPSAFEARRAY), POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg, agmarshall.LPSAFEARRAY_arg,) }
    def SetWithColors(self, positions:list, colors:list) -> None:
        """Defines the positions and colors of a polyline. The polyline is rendered in its reference frame."""
        return self._intf.invoke(IAgStkGraphicsPolylinePrimitive._metadata, IAgStkGraphicsPolylinePrimitive._SetWithColors_metadata, positions, colors)

    _SetWithColorsAndHint_metadata = { "name" : "SetWithColorsAndHint",
            "arg_types" : (POINTER(agcom.LPSAFEARRAY), POINTER(agcom.LPSAFEARRAY), agcom.LONG,),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg, agmarshall.LPSAFEARRAY_arg, agmarshall.AgEnum_arg(AgEStkGraphicsRenderPassHint),) }
    def SetWithColorsAndHint(self, positions:list, colors:list, renderPassHint:"AgEStkGraphicsRenderPassHint") -> None:
        """Defines the positions and colors of a polyline. The polyline is rendered in its reference frame. renderPassHint is provided for efficiency."""
        return self._intf.invoke(IAgStkGraphicsPolylinePrimitive._metadata, IAgStkGraphicsPolylinePrimitive._SetWithColorsAndHint_metadata, positions, colors, renderPassHint)

    _SetWithSurfaceShapesResult_metadata = { "name" : "SetWithSurfaceShapesResult",
            "arg_types" : (agcom.PVOID,),
            "marshallers" : (agmarshall.AgInterface_in_arg("IAgStkGraphicsSurfaceShapesResult"),) }
    def SetWithSurfaceShapesResult(self, surfaceShapesResult:"IAgStkGraphicsSurfaceShapesResult") -> None:
        """Defines the positions of a polyline using the positions of the specified surfaceShapesResult."""
        return self._intf.invoke(IAgStkGraphicsPolylinePrimitive._metadata, IAgStkGraphicsPolylinePrimitive._SetWithSurfaceShapesResult_metadata, surfaceShapesResult)

    _SetWithSurfaceTriangulatorResult_metadata = { "name" : "SetWithSurfaceTriangulatorResult",
            "arg_types" : (agcom.PVOID,),
            "marshallers" : (agmarshall.AgInterface_in_arg("IAgStkGraphicsSurfaceTriangulatorResult"),) }
    def SetWithSurfaceTriangulatorResult(self, surfaceTriangulatorResult:"IAgStkGraphicsSurfaceTriangulatorResult") -> None:
        """Defines the positions of a polyline using the boundary positions of the specified surfaceTriangulatorResult."""
        return self._intf.invoke(IAgStkGraphicsPolylinePrimitive._metadata, IAgStkGraphicsPolylinePrimitive._SetWithSurfaceTriangulatorResult_metadata, surfaceTriangulatorResult)

    _SetWithSolidTriangulatorResult_metadata = { "name" : "SetWithSolidTriangulatorResult",
            "arg_types" : (agcom.PVOID,),
            "marshallers" : (agmarshall.AgInterface_in_arg("IAgStkGraphicsSolidTriangulatorResult"),) }
    def SetWithSolidTriangulatorResult(self, solidTriangulatorResult:"IAgStkGraphicsSolidTriangulatorResult") -> None:
        """Defines the positions of a polyline using the outline positions of the specified solidTriangulatorResult."""
        return self._intf.invoke(IAgStkGraphicsPolylinePrimitive._metadata, IAgStkGraphicsPolylinePrimitive._SetWithSolidTriangulatorResult_metadata, solidTriangulatorResult)

    _SetCartographic_metadata = { "name" : "SetCartographic",
            "arg_types" : (agcom.BSTR, POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.LPSAFEARRAY_arg,) }
    def SetCartographic(self, centralBody:str, positions:list) -> None:
        """For convenience. Defines the positions of a polyline using cartographic positions. This is equivalent to converting each position in positions to cartesian and calling Set."""
        return self._intf.invoke(IAgStkGraphicsPolylinePrimitive._metadata, IAgStkGraphicsPolylinePrimitive._SetCartographic_metadata, centralBody, positions)

    _SetCartographicWithColors_metadata = { "name" : "SetCartographicWithColors",
            "arg_types" : (agcom.BSTR, POINTER(agcom.LPSAFEARRAY), POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.LPSAFEARRAY_arg, agmarshall.LPSAFEARRAY_arg,) }
    def SetCartographicWithColors(self, centralBody:str, positions:list, colors:list) -> None:
        """For convenience. Defines the positions and colors of a polyline using cartographic positions. This is equivalent to converting each position in positions to cartesian and calling Set."""
        return self._intf.invoke(IAgStkGraphicsPolylinePrimitive._metadata, IAgStkGraphicsPolylinePrimitive._SetCartographicWithColors_metadata, centralBody, positions, colors)

    _SetCartographicWithColorsAndHint_metadata = { "name" : "SetCartographicWithColorsAndHint",
            "arg_types" : (agcom.BSTR, POINTER(agcom.LPSAFEARRAY), POINTER(agcom.LPSAFEARRAY), agcom.LONG,),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.LPSAFEARRAY_arg, agmarshall.LPSAFEARRAY_arg, agmarshall.AgEnum_arg(AgEStkGraphicsRenderPassHint),) }
    def SetCartographicWithColorsAndHint(self, centralBody:str, positions:list, colors:list, renderPassHint:"AgEStkGraphicsRenderPassHint") -> None:
        """For convenience. Defines the positions and colors of a polyline using cartographic positions. renderPassHint is provided for efficiency. This is equivalent to converting each position in positions to cartesian and calling Set."""
        return self._intf.invoke(IAgStkGraphicsPolylinePrimitive._metadata, IAgStkGraphicsPolylinePrimitive._SetCartographicWithColorsAndHint_metadata, centralBody, positions, colors, renderPassHint)

    _SetSubset_metadata = { "name" : "SetSubset",
            "arg_types" : (POINTER(agcom.LPSAFEARRAY), agcom.INT, agcom.INT,),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg, agmarshall.INT_arg, agmarshall.INT_arg,) }
    def SetSubset(self, positions:list, index:int, count:int) -> None:
        """Defines the positions of a polyline using a subset of input positions."""
        return self._intf.invoke(IAgStkGraphicsPolylinePrimitive._metadata, IAgStkGraphicsPolylinePrimitive._SetSubset_metadata, positions, index, count)

    _SetSubsetCartographic_metadata = { "name" : "SetSubsetCartographic",
            "arg_types" : (agcom.BSTR, POINTER(agcom.LPSAFEARRAY), agcom.INT, agcom.INT,),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.LPSAFEARRAY_arg, agmarshall.INT_arg, agmarshall.INT_arg,) }
    def SetSubsetCartographic(self, centralBody:str, positions:list, index:int, count:int) -> None:
        """For convenience. Defines the positions of a polyline using a subset of input cartographic positions. This is equivalent to converting the subset of positions to cartesian and calling SetSubset."""
        return self._intf.invoke(IAgStkGraphicsPolylinePrimitive._metadata, IAgStkGraphicsPolylinePrimitive._SetSubsetCartographic_metadata, centralBody, positions, index, count)

    _SetPartial_metadata = { "name" : "SetPartial",
            "arg_types" : (POINTER(agcom.LPSAFEARRAY), POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg, agmarshall.LPSAFEARRAY_arg,) }
    def SetPartial(self, positions:list, indices:list) -> None:
        """Updates a subset of positions in a polyline."""
        return self._intf.invoke(IAgStkGraphicsPolylinePrimitive._metadata, IAgStkGraphicsPolylinePrimitive._SetPartial_metadata, positions, indices)

    _SetPartialWithIndicesOrder_metadata = { "name" : "SetPartialWithIndicesOrder",
            "arg_types" : (POINTER(agcom.LPSAFEARRAY), POINTER(agcom.LPSAFEARRAY), agcom.LONG,),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg, agmarshall.LPSAFEARRAY_arg, agmarshall.AgEnum_arg(AgEStkGraphicsIndicesOrderHint),) }
    def SetPartialWithIndicesOrder(self, positions:list, indices:list, indicesOrderHint:"AgEStkGraphicsIndicesOrderHint") -> None:
        """Updates a subset of positions in a polyline."""
        return self._intf.invoke(IAgStkGraphicsPolylinePrimitive._metadata, IAgStkGraphicsPolylinePrimitive._SetPartialWithIndicesOrder_metadata, positions, indices, indicesOrderHint)

    _SetPartialWithColors_metadata = { "name" : "SetPartialWithColors",
            "arg_types" : (POINTER(agcom.LPSAFEARRAY), POINTER(agcom.LPSAFEARRAY), POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg, agmarshall.LPSAFEARRAY_arg, agmarshall.LPSAFEARRAY_arg,) }
    def SetPartialWithColors(self, positions:list, colors:list, indices:list) -> None:
        """Updates a subset of positions and/or colors in a polyline."""
        return self._intf.invoke(IAgStkGraphicsPolylinePrimitive._metadata, IAgStkGraphicsPolylinePrimitive._SetPartialWithColors_metadata, positions, colors, indices)

    _SetPartialWithColorsIndicesOrderAndRenderPassHint_metadata = { "name" : "SetPartialWithColorsIndicesOrderAndRenderPassHint",
            "arg_types" : (POINTER(agcom.LPSAFEARRAY), POINTER(agcom.LPSAFEARRAY), POINTER(agcom.LPSAFEARRAY), agcom.LONG, agcom.LONG,),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg, agmarshall.LPSAFEARRAY_arg, agmarshall.LPSAFEARRAY_arg, agmarshall.AgEnum_arg(AgEStkGraphicsIndicesOrderHint), agmarshall.AgEnum_arg(AgEStkGraphicsRenderPassHint),) }
    def SetPartialWithColorsIndicesOrderAndRenderPassHint(self, positions:list, colors:list, indices:list, indicesOrderHint:"AgEStkGraphicsIndicesOrderHint", renderPassHint:"AgEStkGraphicsRenderPassHint") -> None:
        """Updates a subset of positions and/or colors in a polyline."""
        return self._intf.invoke(IAgStkGraphicsPolylinePrimitive._metadata, IAgStkGraphicsPolylinePrimitive._SetPartialWithColorsIndicesOrderAndRenderPassHint_metadata, positions, colors, indices, indicesOrderHint, renderPassHint)

    _SetPartialCartographic_metadata = { "name" : "SetPartialCartographic",
            "arg_types" : (agcom.BSTR, POINTER(agcom.LPSAFEARRAY), POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.LPSAFEARRAY_arg, agmarshall.LPSAFEARRAY_arg,) }
    def SetPartialCartographic(self, centralBody:str, positions:list, indices:list) -> None:
        """For convenience. Updates a subset of positions in a polyline using cartographic positions. This is equivalent to converting each position in positions to cartesian and calling SetPartial"""
        return self._intf.invoke(IAgStkGraphicsPolylinePrimitive._metadata, IAgStkGraphicsPolylinePrimitive._SetPartialCartographic_metadata, centralBody, positions, indices)

    _SetPartialCartographicWithIndicesOrder_metadata = { "name" : "SetPartialCartographicWithIndicesOrder",
            "arg_types" : (agcom.BSTR, POINTER(agcom.LPSAFEARRAY), POINTER(agcom.LPSAFEARRAY), agcom.LONG,),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.LPSAFEARRAY_arg, agmarshall.LPSAFEARRAY_arg, agmarshall.AgEnum_arg(AgEStkGraphicsIndicesOrderHint),) }
    def SetPartialCartographicWithIndicesOrder(self, centralBody:str, positions:list, indices:list, indicesOrderHint:"AgEStkGraphicsIndicesOrderHint") -> None:
        """For convenience. Updates a subset of positions in a polyline using cartographic positions. This is equivalent to converting each position in positions to cartesian and calling SetPartial"""
        return self._intf.invoke(IAgStkGraphicsPolylinePrimitive._metadata, IAgStkGraphicsPolylinePrimitive._SetPartialCartographicWithIndicesOrder_metadata, centralBody, positions, indices, indicesOrderHint)

    _SetPartialCartographicWithColors_metadata = { "name" : "SetPartialCartographicWithColors",
            "arg_types" : (agcom.BSTR, POINTER(agcom.LPSAFEARRAY), POINTER(agcom.LPSAFEARRAY), POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.LPSAFEARRAY_arg, agmarshall.LPSAFEARRAY_arg, agmarshall.LPSAFEARRAY_arg,) }
    def SetPartialCartographicWithColors(self, centralBody:str, positions:list, colors:list, indices:list) -> None:
        """For convenience. Updates a subset of positions and/or colors in a polyline using cartographic positions. This is equivalent to converting each position in positions to cartesian and calling SetPartial"""
        return self._intf.invoke(IAgStkGraphicsPolylinePrimitive._metadata, IAgStkGraphicsPolylinePrimitive._SetPartialCartographicWithColors_metadata, centralBody, positions, colors, indices)

    _SetPartialCartographicWithColorsIndicesOrderAndRenderPass_metadata = { "name" : "SetPartialCartographicWithColorsIndicesOrderAndRenderPass",
            "arg_types" : (agcom.BSTR, POINTER(agcom.LPSAFEARRAY), POINTER(agcom.LPSAFEARRAY), POINTER(agcom.LPSAFEARRAY), agcom.LONG, agcom.LONG,),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.LPSAFEARRAY_arg, agmarshall.LPSAFEARRAY_arg, agmarshall.LPSAFEARRAY_arg, agmarshall.AgEnum_arg(AgEStkGraphicsIndicesOrderHint), agmarshall.AgEnum_arg(AgEStkGraphicsRenderPassHint),) }
    def SetPartialCartographicWithColorsIndicesOrderAndRenderPass(self, centralBody:str, positions:list, colors:list, indices:list, indicesOrderHint:"AgEStkGraphicsIndicesOrderHint", renderPassHint:"AgEStkGraphicsRenderPassHint") -> None:
        """For convenience. Updates a subset of positions and/or colors in a polyline using cartographic positions. This is equivalent to converting each position in positions to cartesian and calling SetPartial"""
        return self._intf.invoke(IAgStkGraphicsPolylinePrimitive._metadata, IAgStkGraphicsPolylinePrimitive._SetPartialCartographicWithColorsIndicesOrderAndRenderPass_metadata, centralBody, positions, colors, indices, indicesOrderHint, renderPassHint)

    _get_CentralBodyClipped_metadata = { "name" : "CentralBodyClipped",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def CentralBodyClipped(self) -> bool:
        """Gets or sets whether the polyline will be clipped by the central body."""
        return self._intf.get_property(IAgStkGraphicsPolylinePrimitive._metadata, IAgStkGraphicsPolylinePrimitive._get_CentralBodyClipped_metadata)

    _set_CentralBodyClipped_metadata = { "name" : "CentralBodyClipped",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @CentralBodyClipped.setter
    def CentralBodyClipped(self, centralBodyClipped:bool) -> None:
        return self._intf.set_property(IAgStkGraphicsPolylinePrimitive._metadata, IAgStkGraphicsPolylinePrimitive._set_CentralBodyClipped_metadata, centralBodyClipped)

    _SetWithColorsAndOptionalParameters_metadata = { "name" : "SetWithColorsAndOptionalParameters",
            "arg_types" : (POINTER(agcom.LPSAFEARRAY), POINTER(agcom.LPSAFEARRAY), agcom.PVOID,),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg, agmarshall.LPSAFEARRAY_arg, agmarshall.AgInterface_in_arg("IAgStkGraphicsPolylinePrimitiveOptionalParameters"),) }
    def SetWithColorsAndOptionalParameters(self, positions:list, colors:list, optionalParameters:"IAgStkGraphicsPolylinePrimitiveOptionalParameters") -> None:
        """Defines the positions, colors, and/or optional point properties of a polyline. The polyline is rendered in its reference frame."""
        return self._intf.invoke(IAgStkGraphicsPolylinePrimitive._metadata, IAgStkGraphicsPolylinePrimitive._SetWithColorsAndOptionalParameters_metadata, positions, colors, optionalParameters)

    _SetCartographicWithColorsAndOptionalParameters_metadata = { "name" : "SetCartographicWithColorsAndOptionalParameters",
            "arg_types" : (agcom.BSTR, POINTER(agcom.LPSAFEARRAY), POINTER(agcom.LPSAFEARRAY), agcom.PVOID,),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.LPSAFEARRAY_arg, agmarshall.LPSAFEARRAY_arg, agmarshall.AgInterface_in_arg("IAgStkGraphicsPolylinePrimitiveOptionalParameters"),) }
    def SetCartographicWithColorsAndOptionalParameters(self, centralBody:str, positions:list, colors:list, optionalParameters:"IAgStkGraphicsPolylinePrimitiveOptionalParameters") -> None:
        """For convenience. Defines the positions, colors, and/or optional point properties of a polyline using cartographic positions. This is equivalent to converting each position in positions to cartesian and calling Set."""
        return self._intf.invoke(IAgStkGraphicsPolylinePrimitive._metadata, IAgStkGraphicsPolylinePrimitive._SetCartographicWithColorsAndOptionalParameters_metadata, centralBody, positions, colors, optionalParameters)

    _SetPartialWithColorsAndOptionalParameters_metadata = { "name" : "SetPartialWithColorsAndOptionalParameters",
            "arg_types" : (POINTER(agcom.LPSAFEARRAY), POINTER(agcom.LPSAFEARRAY), agcom.PVOID, POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg, agmarshall.LPSAFEARRAY_arg, agmarshall.AgInterface_in_arg("IAgStkGraphicsPolylinePrimitiveOptionalParameters"), agmarshall.LPSAFEARRAY_arg,) }
    def SetPartialWithColorsAndOptionalParameters(self, positions:list, colors:list, optionalParameters:"IAgStkGraphicsPolylinePrimitiveOptionalParameters", indices:list) -> None:
        """Updates a subset of positions, colors, and/or optional point properties in a polyline."""
        return self._intf.invoke(IAgStkGraphicsPolylinePrimitive._metadata, IAgStkGraphicsPolylinePrimitive._SetPartialWithColorsAndOptionalParameters_metadata, positions, colors, optionalParameters, indices)

    _SetPartialCartographicWithOptionalParameters_metadata = { "name" : "SetPartialCartographicWithOptionalParameters",
            "arg_types" : (agcom.BSTR, POINTER(agcom.LPSAFEARRAY), POINTER(agcom.LPSAFEARRAY), agcom.PVOID, POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.LPSAFEARRAY_arg, agmarshall.LPSAFEARRAY_arg, agmarshall.AgInterface_in_arg("IAgStkGraphicsPolylinePrimitiveOptionalParameters"), agmarshall.LPSAFEARRAY_arg,) }
    def SetPartialCartographicWithOptionalParameters(self, centralBody:str, positions:list, colors:list, optionalParameters:"IAgStkGraphicsPolylinePrimitiveOptionalParameters", indices:list) -> None:
        """For convenience. Updates a subset of positions, colors, and/or optional point properties in a polyline using cartographic positions. This is equivalent to converting each position in positions to cartesian and calling SetPartial"""
        return self._intf.invoke(IAgStkGraphicsPolylinePrimitive._metadata, IAgStkGraphicsPolylinePrimitive._SetPartialCartographicWithOptionalParameters_metadata, centralBody, positions, colors, optionalParameters, indices)


agcls.AgClassCatalog.add_catalog_entry("{0122dc2b-4232-443d-b8da-09b42967b841}", IAgStkGraphicsPolylinePrimitive)
agcls.AgTypeNameMap["IAgStkGraphicsPolylinePrimitive"] = IAgStkGraphicsPolylinePrimitive

class IAgStkGraphicsPolylinePrimitiveOptionalParameters(object):
    """Optional per-point or per-segment parameters for polyline primitive that overrides the polyline primitive's global parameters..."""
    _num_methods = 1
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{7ccefc1c-372f-43ff-91ca-fca3de401669}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "SetTimeIntervals" : 1, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsPolylinePrimitiveOptionalParameters._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsPolylinePrimitiveOptionalParameters from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsPolylinePrimitiveOptionalParameters.__dict__ and type(IAgStkGraphicsPolylinePrimitiveOptionalParameters.__dict__[attrname]) == property:
            return IAgStkGraphicsPolylinePrimitiveOptionalParameters.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsPolylinePrimitiveOptionalParameters.")
    
    _SetTimeIntervals_metadata = { "name" : "SetTimeIntervals",
            "arg_types" : (POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg,) }
    def SetTimeIntervals(self, timeIntervals:list) -> None:
        """Defines a collection of TimeIntervals defined by MinimumTime and MaximumTime in Epoch Seconds, one for each point in the Polyline"""
        return self._intf.invoke(IAgStkGraphicsPolylinePrimitiveOptionalParameters._metadata, IAgStkGraphicsPolylinePrimitiveOptionalParameters._SetTimeIntervals_metadata, timeIntervals)


agcls.AgClassCatalog.add_catalog_entry("{7ccefc1c-372f-43ff-91ca-fca3de401669}", IAgStkGraphicsPolylinePrimitiveOptionalParameters)
agcls.AgTypeNameMap["IAgStkGraphicsPolylinePrimitiveOptionalParameters"] = IAgStkGraphicsPolylinePrimitiveOptionalParameters

class IAgStkGraphicsPositionInterpolator(object):
    """Position interpolators compute positions based on a collection of input positions. Position interpolators are used in conjunction with the polyline primitive to render things such as great arcs and rhumb lines."""
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{512c0d62-559e-42ce-98e2-218c02662290}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_PolylineType" : 1,
                             "Interpolate" : 2, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsPositionInterpolator._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsPositionInterpolator from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsPositionInterpolator.__dict__ and type(IAgStkGraphicsPositionInterpolator.__dict__[attrname]) == property:
            return IAgStkGraphicsPositionInterpolator.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsPositionInterpolator.")
    
    _get_PolylineType_metadata = { "name" : "PolylineType",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEStkGraphicsPolylineType),) }
    @property
    def PolylineType(self) -> "AgEStkGraphicsPolylineType":
        """Gets the polyline type of positions returned from interpolate"""
        return self._intf.get_property(IAgStkGraphicsPositionInterpolator._metadata, IAgStkGraphicsPositionInterpolator._get_PolylineType_metadata)

    _Interpolate_metadata = { "name" : "Interpolate",
            "arg_types" : (POINTER(agcom.LPSAFEARRAY), POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg, agmarshall.LPSAFEARRAY_arg,) }
    def Interpolate(self, positions:list) -> list:
        """Computes interpolated positions based on the input positions. Returns an array of positions in the order x, y, z."""
        return self._intf.invoke(IAgStkGraphicsPositionInterpolator._metadata, IAgStkGraphicsPositionInterpolator._Interpolate_metadata, positions, out_arg())


agcls.AgClassCatalog.add_catalog_entry("{512c0d62-559e-42ce-98e2-218c02662290}", IAgStkGraphicsPositionInterpolator)
agcls.AgTypeNameMap["IAgStkGraphicsPositionInterpolator"] = IAgStkGraphicsPositionInterpolator

class IAgStkGraphicsPrimitive(object):
    """Primitives represent objects rendered in the 3D scene."""
    _num_methods = 16
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{b593dc7b-315a-4c37-9f3c-42dfbd996ac2}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_ReferenceFrame" : 1,
                             "set_ReferenceFrame" : 2,
                             "get_BoundingSphere" : 3,
                             "set_BoundingSphere" : 4,
                             "get_AutomaticallyComputeBoundingSphere" : 5,
                             "set_AutomaticallyComputeBoundingSphere" : 6,
                             "get_DisplayCondition" : 7,
                             "set_DisplayCondition" : 8,
                             "get_Display" : 9,
                             "set_Display" : 10,
                             "get_Color" : 11,
                             "set_Color" : 12,
                             "get_Translucency" : 13,
                             "set_Translucency" : 14,
                             "get_Tag" : 15,
                             "set_Tag" : 16, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsPrimitive._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsPrimitive from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsPrimitive.__dict__ and type(IAgStkGraphicsPrimitive.__dict__[attrname]) == property:
            return IAgStkGraphicsPrimitive.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsPrimitive.")
    
    _get_ReferenceFrame_metadata = { "name" : "ReferenceFrame",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def ReferenceFrame(self) -> "IAgCrdnSystem":
        """Gets or sets the reference frame this primitive is defined and rendered in."""
        return self._intf.get_property(IAgStkGraphicsPrimitive._metadata, IAgStkGraphicsPrimitive._get_ReferenceFrame_metadata)

    _set_ReferenceFrame_metadata = { "name" : "ReferenceFrame",
            "arg_types" : (agcom.PVOID,),
            "marshallers" : (agmarshall.AgInterface_in_arg("IAgCrdnSystem"),) }
    @ReferenceFrame.setter
    def ReferenceFrame(self, referenceFrame:"IAgCrdnSystem") -> None:
        return self._intf.set_property(IAgStkGraphicsPrimitive._metadata, IAgStkGraphicsPrimitive._set_ReferenceFrame_metadata, referenceFrame)

    _get_BoundingSphere_metadata = { "name" : "BoundingSphere",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def BoundingSphere(self) -> "IAgStkGraphicsBoundingSphere":
        """Gets or sets the bounding sphere that encompasses the primitive. The center is defined in the primitive's reference frame."""
        return self._intf.get_property(IAgStkGraphicsPrimitive._metadata, IAgStkGraphicsPrimitive._get_BoundingSphere_metadata)

    _set_BoundingSphere_metadata = { "name" : "BoundingSphere",
            "arg_types" : (agcom.PVOID,),
            "marshallers" : (agmarshall.AgInterface_in_arg("IAgStkGraphicsBoundingSphere"),) }
    @BoundingSphere.setter
    def BoundingSphere(self, boundingSphere:"IAgStkGraphicsBoundingSphere") -> None:
        return self._intf.set_property(IAgStkGraphicsPrimitive._metadata, IAgStkGraphicsPrimitive._set_BoundingSphere_metadata, boundingSphere)

    _get_AutomaticallyComputeBoundingSphere_metadata = { "name" : "AutomaticallyComputeBoundingSphere",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def AutomaticallyComputeBoundingSphere(self) -> bool:
        """Gets or sets if the primitive's bounding sphere is automatically computed."""
        return self._intf.get_property(IAgStkGraphicsPrimitive._metadata, IAgStkGraphicsPrimitive._get_AutomaticallyComputeBoundingSphere_metadata)

    _set_AutomaticallyComputeBoundingSphere_metadata = { "name" : "AutomaticallyComputeBoundingSphere",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @AutomaticallyComputeBoundingSphere.setter
    def AutomaticallyComputeBoundingSphere(self, automaticallyComputeBoundingSphere:bool) -> None:
        return self._intf.set_property(IAgStkGraphicsPrimitive._metadata, IAgStkGraphicsPrimitive._set_AutomaticallyComputeBoundingSphere_metadata, automaticallyComputeBoundingSphere)

    _get_DisplayCondition_metadata = { "name" : "DisplayCondition",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def DisplayCondition(self) -> "IAgStkGraphicsDisplayCondition":
        """Gets or sets the display condition that determines if the primitive should be rendered. Both this and display must evaluate to true for the primitive to be rendered."""
        return self._intf.get_property(IAgStkGraphicsPrimitive._metadata, IAgStkGraphicsPrimitive._get_DisplayCondition_metadata)

    _set_DisplayCondition_metadata = { "name" : "DisplayCondition",
            "arg_types" : (agcom.PVOID,),
            "marshallers" : (agmarshall.AgInterface_in_arg("IAgStkGraphicsDisplayCondition"),) }
    @DisplayCondition.setter
    def DisplayCondition(self, displayCondition:"IAgStkGraphicsDisplayCondition") -> None:
        return self._intf.set_property(IAgStkGraphicsPrimitive._metadata, IAgStkGraphicsPrimitive._set_DisplayCondition_metadata, displayCondition)

    _get_Display_metadata = { "name" : "Display",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def Display(self) -> bool:
        """Gets or sets if the primitive should be rendered. Both this and display condition must evaluate to true for the primitive to be rendered."""
        return self._intf.get_property(IAgStkGraphicsPrimitive._metadata, IAgStkGraphicsPrimitive._get_Display_metadata)

    _set_Display_metadata = { "name" : "Display",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @Display.setter
    def Display(self, display:bool) -> None:
        return self._intf.set_property(IAgStkGraphicsPrimitive._metadata, IAgStkGraphicsPrimitive._set_Display_metadata, display)

    _get_Color_metadata = { "name" : "Color",
            "arg_types" : (POINTER(agcom.OLE_COLOR),),
            "marshallers" : (agmarshall.OLE_COLOR_arg,) }
    @property
    def Color(self) -> agcolor.Color:
        """Gets or sets the primitive's color."""
        return self._intf.get_property(IAgStkGraphicsPrimitive._metadata, IAgStkGraphicsPrimitive._get_Color_metadata)

    _set_Color_metadata = { "name" : "Color",
            "arg_types" : (agcom.OLE_COLOR,),
            "marshallers" : (agmarshall.OLE_COLOR_arg,) }
    @Color.setter
    def Color(self, color:agcolor.Color) -> None:
        return self._intf.set_property(IAgStkGraphicsPrimitive._metadata, IAgStkGraphicsPrimitive._set_Color_metadata, color)

    _get_Translucency_metadata = { "name" : "Translucency",
            "arg_types" : (POINTER(agcom.FLOAT),),
            "marshallers" : (agmarshall.FLOAT_arg,) }
    @property
    def Translucency(self) -> float:
        """Gets or sets the primitive's translucency. Translucency is between 0 and 1, where 0 is opaque and 1 is transparent."""
        return self._intf.get_property(IAgStkGraphicsPrimitive._metadata, IAgStkGraphicsPrimitive._get_Translucency_metadata)

    _set_Translucency_metadata = { "name" : "Translucency",
            "arg_types" : (agcom.FLOAT,),
            "marshallers" : (agmarshall.FLOAT_arg,) }
    @Translucency.setter
    def Translucency(self, translucency:float) -> None:
        return self._intf.set_property(IAgStkGraphicsPrimitive._metadata, IAgStkGraphicsPrimitive._set_Translucency_metadata, translucency)

    _get_Tag_metadata = { "name" : "Tag",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def Tag(self) -> typing.Any:
        """Gets or sets custom value associated with this primitive."""
        return self._intf.get_property(IAgStkGraphicsPrimitive._metadata, IAgStkGraphicsPrimitive._get_Tag_metadata)

    _set_Tag_metadata = { "name" : "Tag",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @Tag.setter
    def Tag(self, tag:typing.Any) -> None:
        return self._intf.set_property(IAgStkGraphicsPrimitive._metadata, IAgStkGraphicsPrimitive._set_Tag_metadata, tag)


agcls.AgClassCatalog.add_catalog_entry("{b593dc7b-315a-4c37-9f3c-42dfbd996ac2}", IAgStkGraphicsPrimitive)
agcls.AgTypeNameMap["IAgStkGraphicsPrimitive"] = IAgStkGraphicsPrimitive

class IAgStkGraphicsPrimitiveManager(object):
    """The primitive manager contains spatial data structures used to efficiently render primitives. Once a primitive is constructed, it must be added to the primitive manager before it will be rendered."""
    _num_methods = 10
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{39006599-c2ac-4f46-a190-958d173714fc}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_Count" : 1,
                             "get_PrecisionExponent" : 2,
                             "set_PrecisionExponent" : 3,
                             "get_TranslucentPrimitivesSortOrder" : 4,
                             "set_TranslucentPrimitivesSortOrder" : 5,
                             "Add" : 6,
                             "Remove" : 7,
                             "Contains" : 8,
                             "Clear" : 9,
                             "get__NewEnum" : 10, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsPrimitiveManager._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsPrimitiveManager from source object.")
        self.__dict__["_enumerator"] = None
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsPrimitiveManager.__dict__ and type(IAgStkGraphicsPrimitiveManager.__dict__[attrname]) == property:
            return IAgStkGraphicsPrimitiveManager.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsPrimitiveManager.")
    def __iter__(self):
        self.__dict__["_enumerator"] = self._NewEnum
        self._enumerator.reset()
        return self
    def __next__(self) -> typing.Any:
        if self._enumerator is None:
            raise StopIteration
        nextval = self._enumerator.next()
        if nextval is None:
            raise StopIteration
        return nextval
    
    _get_Count_metadata = { "name" : "Count",
            "arg_types" : (POINTER(agcom.INT),),
            "marshallers" : (agmarshall.INT_arg,) }
    @property
    def Count(self) -> int:
        """Gets the number of primitives in the manager."""
        return self._intf.get_property(IAgStkGraphicsPrimitiveManager._metadata, IAgStkGraphicsPrimitiveManager._get_Count_metadata)

    _get_PrecisionExponent_metadata = { "name" : "PrecisionExponent",
            "arg_types" : (POINTER(agcom.INT),),
            "marshallers" : (agmarshall.INT_arg,) }
    @property
    def PrecisionExponent(self) -> int:
        """This property is deprecated. This property is no longer in use Gets or sets the exponent used to compute the maximum precision for primitive rendering. For example, a value of -3 indicates the maximum precision of 2^-3, 0.125 m along the x, y, or z axis..."""
        return self._intf.get_property(IAgStkGraphicsPrimitiveManager._metadata, IAgStkGraphicsPrimitiveManager._get_PrecisionExponent_metadata)

    _set_PrecisionExponent_metadata = { "name" : "PrecisionExponent",
            "arg_types" : (agcom.INT,),
            "marshallers" : (agmarshall.INT_arg,) }
    @PrecisionExponent.setter
    def PrecisionExponent(self, precisionExponent:int) -> None:
        return self._intf.set_property(IAgStkGraphicsPrimitiveManager._metadata, IAgStkGraphicsPrimitiveManager._set_PrecisionExponent_metadata, precisionExponent)

    _get_TranslucentPrimitivesSortOrder_metadata = { "name" : "TranslucentPrimitivesSortOrder",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEStkGraphicsPrimitivesSortOrder),) }
    @property
    def TranslucentPrimitivesSortOrder(self) -> "AgEStkGraphicsPrimitivesSortOrder":
        """Gets or sets the sort order for translucent primitives in the primitive manager. This determines a trade-off between rendering speed and quality..."""
        return self._intf.get_property(IAgStkGraphicsPrimitiveManager._metadata, IAgStkGraphicsPrimitiveManager._get_TranslucentPrimitivesSortOrder_metadata)

    _set_TranslucentPrimitivesSortOrder_metadata = { "name" : "TranslucentPrimitivesSortOrder",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEStkGraphicsPrimitivesSortOrder),) }
    @TranslucentPrimitivesSortOrder.setter
    def TranslucentPrimitivesSortOrder(self, translucentPrimitivesSortOrder:"AgEStkGraphicsPrimitivesSortOrder") -> None:
        return self._intf.set_property(IAgStkGraphicsPrimitiveManager._metadata, IAgStkGraphicsPrimitiveManager._set_TranslucentPrimitivesSortOrder_metadata, translucentPrimitivesSortOrder)

    _Add_metadata = { "name" : "Add",
            "arg_types" : (agcom.PVOID,),
            "marshallers" : (agmarshall.AgInterface_in_arg("IAgStkGraphicsPrimitive"),) }
    def Add(self, primitive:"IAgStkGraphicsPrimitive") -> None:
        """Adds a primitive to the manager. Primitives must be added to the manager to be rendered."""
        return self._intf.invoke(IAgStkGraphicsPrimitiveManager._metadata, IAgStkGraphicsPrimitiveManager._Add_metadata, primitive)

    _Remove_metadata = { "name" : "Remove",
            "arg_types" : (agcom.PVOID,),
            "marshallers" : (agmarshall.AgInterface_in_arg("IAgStkGraphicsPrimitive"),) }
    def Remove(self, primitive:"IAgStkGraphicsPrimitive") -> None:
        """Removes a primitive from the manager. The primitive is no longer rendered unless it is added back into the manager."""
        return self._intf.invoke(IAgStkGraphicsPrimitiveManager._metadata, IAgStkGraphicsPrimitiveManager._Remove_metadata, primitive)

    _Contains_metadata = { "name" : "Contains",
            "arg_types" : (agcom.PVOID, POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.AgInterface_in_arg("IAgStkGraphicsPrimitive"), agmarshall.VARIANT_BOOL_arg,) }
    def Contains(self, primitive:"IAgStkGraphicsPrimitive") -> bool:
        """Determines whether the manager contains a primitive."""
        return self._intf.invoke(IAgStkGraphicsPrimitiveManager._metadata, IAgStkGraphicsPrimitiveManager._Contains_metadata, primitive, out_arg())

    _Clear_metadata = { "name" : "Clear",
            "arg_types" : (),
            "marshallers" : () }
    def Clear(self) -> None:
        """Removes all primitives from the manager."""
        return self._intf.invoke(IAgStkGraphicsPrimitiveManager._metadata, IAgStkGraphicsPrimitiveManager._Clear_metadata, )

    _get__NewEnum_metadata = { "name" : "_NewEnum",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.IEnumVARIANT_arg,) }
    @property
    def _NewEnum(self) -> enumerator_proxy:
        """Returns an enumerator that iterates through the collection. The order of the primitives is not guaranteed to be the order that the primitives were added."""
        return self._intf.get_property(IAgStkGraphicsPrimitiveManager._metadata, IAgStkGraphicsPrimitiveManager._get__NewEnum_metadata)


agcls.AgClassCatalog.add_catalog_entry("{39006599-c2ac-4f46-a190-958d173714fc}", IAgStkGraphicsPrimitiveManager)
agcls.AgTypeNameMap["IAgStkGraphicsPrimitiveManager"] = IAgStkGraphicsPrimitiveManager

class IAgStkGraphicsRasterImageGlobeOverlay(object):
    """A globe image overlay for handling rasters."""
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{de016591-933e-4085-b6a4-401e117109e9}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_UseTransparentColor" : 1,
                             "set_UseTransparentColor" : 2,
                             "get_TransparentColor" : 3,
                             "set_TransparentColor" : 4, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsRasterImageGlobeOverlay._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsRasterImageGlobeOverlay from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsRasterImageGlobeOverlay.__dict__ and type(IAgStkGraphicsRasterImageGlobeOverlay.__dict__[attrname]) == property:
            return IAgStkGraphicsRasterImageGlobeOverlay.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsRasterImageGlobeOverlay.")
    
    _get_UseTransparentColor_metadata = { "name" : "UseTransparentColor",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def UseTransparentColor(self) -> bool:
        """Gets or sets whether transparent color should be used."""
        return self._intf.get_property(IAgStkGraphicsRasterImageGlobeOverlay._metadata, IAgStkGraphicsRasterImageGlobeOverlay._get_UseTransparentColor_metadata)

    _set_UseTransparentColor_metadata = { "name" : "UseTransparentColor",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @UseTransparentColor.setter
    def UseTransparentColor(self, useTransparentColor:bool) -> None:
        return self._intf.set_property(IAgStkGraphicsRasterImageGlobeOverlay._metadata, IAgStkGraphicsRasterImageGlobeOverlay._set_UseTransparentColor_metadata, useTransparentColor)

    _get_TransparentColor_metadata = { "name" : "TransparentColor",
            "arg_types" : (POINTER(agcom.OLE_COLOR),),
            "marshallers" : (agmarshall.OLE_COLOR_arg,) }
    @property
    def TransparentColor(self) -> agcolor.Color:
        """Gets or sets the color that will become transparent."""
        return self._intf.get_property(IAgStkGraphicsRasterImageGlobeOverlay._metadata, IAgStkGraphicsRasterImageGlobeOverlay._get_TransparentColor_metadata)

    _set_TransparentColor_metadata = { "name" : "TransparentColor",
            "arg_types" : (agcom.OLE_COLOR,),
            "marshallers" : (agmarshall.OLE_COLOR_arg,) }
    @TransparentColor.setter
    def TransparentColor(self, transparentColor:agcolor.Color) -> None:
        return self._intf.set_property(IAgStkGraphicsRasterImageGlobeOverlay._metadata, IAgStkGraphicsRasterImageGlobeOverlay._set_TransparentColor_metadata, transparentColor)


agcls.AgClassCatalog.add_catalog_entry("{de016591-933e-4085-b6a4-401e117109e9}", IAgStkGraphicsRasterImageGlobeOverlay)
agcls.AgTypeNameMap["IAgStkGraphicsRasterImageGlobeOverlay"] = IAgStkGraphicsRasterImageGlobeOverlay

class IAgStkGraphicsRhumbLineInterpolator(object):
    """The rhumb line interpolator computes interpolated positions along a rhumb line. Rhumb lines are lines of constant bearing. They appear as straight lines on a Mercator 2D map projection and are well suited to navigation."""
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{ccdec605-222e-4dea-a897-2632b43af87f}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_CentralBody" : 1,
                             "set_CentralBody" : 2,
                             "get_Granularity" : 3,
                             "set_Granularity" : 4, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsRhumbLineInterpolator._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsRhumbLineInterpolator from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsRhumbLineInterpolator.__dict__ and type(IAgStkGraphicsRhumbLineInterpolator.__dict__[attrname]) == property:
            return IAgStkGraphicsRhumbLineInterpolator.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsRhumbLineInterpolator.")
    
    _get_CentralBody_metadata = { "name" : "CentralBody",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def CentralBody(self) -> str:
        """Gets or sets the central body used when interpolating with interpolate."""
        return self._intf.get_property(IAgStkGraphicsRhumbLineInterpolator._metadata, IAgStkGraphicsRhumbLineInterpolator._get_CentralBody_metadata)

    _set_CentralBody_metadata = { "name" : "CentralBody",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @CentralBody.setter
    def CentralBody(self, centralBody:str) -> None:
        return self._intf.set_property(IAgStkGraphicsRhumbLineInterpolator._metadata, IAgStkGraphicsRhumbLineInterpolator._set_CentralBody_metadata, centralBody)

    _get_Granularity_metadata = { "name" : "Granularity",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def Granularity(self) -> float:
        """Gets or sets the granularity used when interpolating with interpolate. Lower granularities are more precise but create more positions."""
        return self._intf.get_property(IAgStkGraphicsRhumbLineInterpolator._metadata, IAgStkGraphicsRhumbLineInterpolator._get_Granularity_metadata)

    _set_Granularity_metadata = { "name" : "Granularity",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @Granularity.setter
    def Granularity(self, granularity:float) -> None:
        return self._intf.set_property(IAgStkGraphicsRhumbLineInterpolator._metadata, IAgStkGraphicsRhumbLineInterpolator._set_Granularity_metadata, granularity)


agcls.AgClassCatalog.add_catalog_entry("{ccdec605-222e-4dea-a897-2632b43af87f}", IAgStkGraphicsRhumbLineInterpolator)
agcls.AgTypeNameMap["IAgStkGraphicsRhumbLineInterpolator"] = IAgStkGraphicsRhumbLineInterpolator

class IAgStkGraphicsScene(object):
    """A scene provides properties and functionality that are reflected in the rendering of the globe control that it is associated with. An globe control's scene is available from the scene property..."""
    _num_methods = 23
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{2d15c682-efb5-499f-8851-a49599b2097d}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_Camera" : 1,
                             "get_Lighting" : 2,
                             "get_ShowSunshine" : 3,
                             "set_ShowSunshine" : 4,
                             "get_CentralBodies" : 5,
                             "get_BackgroundColor" : 6,
                             "set_BackgroundColor" : 7,
                             "get_ShadeSkyBasedOnAltitude" : 8,
                             "set_ShadeSkyBasedOnAltitude" : 9,
                             "get_ShowStars" : 10,
                             "set_ShowStars" : 11,
                             "get_GlobeOverlaySettings" : 12,
                             "Render" : 13,
                             "Pick" : 14,
                             "PickRectangular" : 15,
                             "PickScreenOverlays" : 16,
                             "get_SceneID" : 17,
                             "get_ShowWaterSurface" : 18,
                             "set_ShowWaterSurface" : 19,
                             "get_AntiAliasing" : 20,
                             "set_AntiAliasing" : 21,
                             "get_VisualEffects" : 22,
                             "get_Clouds" : 23, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsScene._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsScene from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsScene.__dict__ and type(IAgStkGraphicsScene.__dict__[attrname]) == property:
            return IAgStkGraphicsScene.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsScene.")
    def Subscribe(self) -> IAgStkGraphicsSceneEventHandler:
        """Returns an IAgStkGraphicsSceneEventHandler that is subscribed to handle events associated with this instance of IAgStkGraphicsScene."""
        return IAgStkGraphicsSceneEventHandler(self._intf)
    
    _get_Camera_metadata = { "name" : "Camera",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def Camera(self) -> "IAgStkGraphicsCamera":
        """Gets the camera associated with the scene, which affects the view that is rendered by the scene."""
        return self._intf.get_property(IAgStkGraphicsScene._metadata, IAgStkGraphicsScene._get_Camera_metadata)

    _get_Lighting_metadata = { "name" : "Lighting",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def Lighting(self) -> "IAgStkGraphicsLighting":
        """Gets the lighting associated with the scene."""
        return self._intf.get_property(IAgStkGraphicsScene._metadata, IAgStkGraphicsScene._get_Lighting_metadata)

    _get_ShowSunshine_metadata = { "name" : "ShowSunshine",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def ShowSunshine(self) -> bool:
        """Gets or sets whether sunshine is rendered by the Sun central body. Sunshine renders a halo effect around the sun when it is viewed in the scene."""
        return self._intf.get_property(IAgStkGraphicsScene._metadata, IAgStkGraphicsScene._get_ShowSunshine_metadata)

    _set_ShowSunshine_metadata = { "name" : "ShowSunshine",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @ShowSunshine.setter
    def ShowSunshine(self, showSunshine:bool) -> None:
        return self._intf.set_property(IAgStkGraphicsScene._metadata, IAgStkGraphicsScene._set_ShowSunshine_metadata, showSunshine)

    _get_CentralBodies_metadata = { "name" : "CentralBodies",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def CentralBodies(self) -> "IAgStkGraphicsCentralBodyGraphicsIndexer":
        """Gets the central body graphics for a specified central body."""
        return self._intf.get_property(IAgStkGraphicsScene._metadata, IAgStkGraphicsScene._get_CentralBodies_metadata)

    _get_BackgroundColor_metadata = { "name" : "BackgroundColor",
            "arg_types" : (POINTER(agcom.OLE_COLOR),),
            "marshallers" : (agmarshall.OLE_COLOR_arg,) }
    @property
    def BackgroundColor(self) -> agcolor.Color:
        """Gets or sets the background color of the scene."""
        return self._intf.get_property(IAgStkGraphicsScene._metadata, IAgStkGraphicsScene._get_BackgroundColor_metadata)

    _set_BackgroundColor_metadata = { "name" : "BackgroundColor",
            "arg_types" : (agcom.OLE_COLOR,),
            "marshallers" : (agmarshall.OLE_COLOR_arg,) }
    @BackgroundColor.setter
    def BackgroundColor(self, backgroundColor:agcolor.Color) -> None:
        return self._intf.set_property(IAgStkGraphicsScene._metadata, IAgStkGraphicsScene._set_BackgroundColor_metadata, backgroundColor)

    _get_ShadeSkyBasedOnAltitude_metadata = { "name" : "ShadeSkyBasedOnAltitude",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def ShadeSkyBasedOnAltitude(self) -> bool:
        """Gets or sets whether the sky will be shaded based on camera altitude. When shade sky based on altitude is set to true, the sky will become more blue as the Camera gets closer to the surface of the central body."""
        return self._intf.get_property(IAgStkGraphicsScene._metadata, IAgStkGraphicsScene._get_ShadeSkyBasedOnAltitude_metadata)

    _set_ShadeSkyBasedOnAltitude_metadata = { "name" : "ShadeSkyBasedOnAltitude",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @ShadeSkyBasedOnAltitude.setter
    def ShadeSkyBasedOnAltitude(self, shadeSkyBasedOnAltitude:bool) -> None:
        return self._intf.set_property(IAgStkGraphicsScene._metadata, IAgStkGraphicsScene._set_ShadeSkyBasedOnAltitude_metadata, shadeSkyBasedOnAltitude)

    _get_ShowStars_metadata = { "name" : "ShowStars",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def ShowStars(self) -> bool:
        """Gets or sets whether stars are shown or hidden in the scene."""
        return self._intf.get_property(IAgStkGraphicsScene._metadata, IAgStkGraphicsScene._get_ShowStars_metadata)

    _set_ShowStars_metadata = { "name" : "ShowStars",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @ShowStars.setter
    def ShowStars(self, showStars:bool) -> None:
        return self._intf.set_property(IAgStkGraphicsScene._metadata, IAgStkGraphicsScene._set_ShowStars_metadata, showStars)

    _get_GlobeOverlaySettings_metadata = { "name" : "GlobeOverlaySettings",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def GlobeOverlaySettings(self) -> "IAgStkGraphicsSceneGlobeOverlaySettings":
        """Gets the scene globe overlay settings for the scene."""
        return self._intf.get_property(IAgStkGraphicsScene._metadata, IAgStkGraphicsScene._get_GlobeOverlaySettings_metadata)

    _Render_metadata = { "name" : "Render",
            "arg_types" : (),
            "marshallers" : () }
    def Render(self) -> None:
        """Renders the scene. To render all the scenes within an application, use the Render method."""
        return self._intf.invoke(IAgStkGraphicsScene._metadata, IAgStkGraphicsScene._Render_metadata, )

    _Pick_metadata = { "name" : "Pick",
            "arg_types" : (agcom.INT, agcom.INT, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.INT_arg, agmarshall.INT_arg, agmarshall.AgInterface_out_arg,) }
    def Pick(self, x:int, y:int) -> "IAgStkGraphicsPickResultCollection":
        """Executes a pick at the given x, y and returns a depth sorted collection of picked objects. The coordinate origin is top, left. To pick screen overlays, use the PickScreenOverlays method."""
        return self._intf.invoke(IAgStkGraphicsScene._metadata, IAgStkGraphicsScene._Pick_metadata, x, y, out_arg())

    _PickRectangular_metadata = { "name" : "PickRectangular",
            "arg_types" : (agcom.INT, agcom.INT, agcom.INT, agcom.INT, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.INT_arg, agmarshall.INT_arg, agmarshall.INT_arg, agmarshall.INT_arg, agmarshall.AgInterface_out_arg,) }
    def PickRectangular(self, left:int, bottom:int, right:int, top:int) -> "IAgStkGraphicsPickResultCollection":
        """Executes a pick in the given rectangular region and returns a depth sorted collection of picked objects. The coordinate origin is top, left. To pick screen overlays, use the PickScreenOverlays method."""
        return self._intf.invoke(IAgStkGraphicsScene._metadata, IAgStkGraphicsScene._PickRectangular_metadata, left, bottom, right, top, out_arg())

    _PickScreenOverlays_metadata = { "name" : "PickScreenOverlays",
            "arg_types" : (agcom.INT, agcom.INT, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.INT_arg, agmarshall.INT_arg, agmarshall.AgInterface_out_arg,) }
    def PickScreenOverlays(self, x:int, y:int) -> "IAgStkGraphicsScreenOverlayPickResultCollection":
        """Executes a pick on screen overlays at the given x, y and returns a front to back sorted collection of picked overlays. The coordinate origin is top, left. To pick other objects in the scene, use the Pick method."""
        return self._intf.invoke(IAgStkGraphicsScene._metadata, IAgStkGraphicsScene._PickScreenOverlays_metadata, x, y, out_arg())

    _get_SceneID_metadata = { "name" : "SceneID",
            "arg_types" : (POINTER(agcom.INT),),
            "marshallers" : (agmarshall.INT_arg,) }
    @property
    def SceneID(self) -> int:
        """Returns the scene identifier."""
        return self._intf.get_property(IAgStkGraphicsScene._metadata, IAgStkGraphicsScene._get_SceneID_metadata)

    _get_ShowWaterSurface_metadata = { "name" : "ShowWaterSurface",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def ShowWaterSurface(self) -> bool:
        """Gets or sets whether water surface on earth is shown or hidden in the scene."""
        return self._intf.get_property(IAgStkGraphicsScene._metadata, IAgStkGraphicsScene._get_ShowWaterSurface_metadata)

    _set_ShowWaterSurface_metadata = { "name" : "ShowWaterSurface",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @ShowWaterSurface.setter
    def ShowWaterSurface(self, showWaterSurface:bool) -> None:
        return self._intf.set_property(IAgStkGraphicsScene._metadata, IAgStkGraphicsScene._set_ShowWaterSurface_metadata, showWaterSurface)

    _get_AntiAliasing_metadata = { "name" : "AntiAliasing",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEStkGraphicsAntiAliasing),) }
    @property
    def AntiAliasing(self) -> "AgEStkGraphicsAntiAliasing":
        """Gets or sets the multisample anti-aliasing (MSAA) option for this scene. As the level of anti-aliasing increases, performance will generally decrease, but the quality of the anti-aliasing will improve."""
        return self._intf.get_property(IAgStkGraphicsScene._metadata, IAgStkGraphicsScene._get_AntiAliasing_metadata)

    _set_AntiAliasing_metadata = { "name" : "AntiAliasing",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEStkGraphicsAntiAliasing),) }
    @AntiAliasing.setter
    def AntiAliasing(self, antiAliasing:"AgEStkGraphicsAntiAliasing") -> None:
        return self._intf.set_property(IAgStkGraphicsScene._metadata, IAgStkGraphicsScene._set_AntiAliasing_metadata, antiAliasing)

    _get_VisualEffects_metadata = { "name" : "VisualEffects",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def VisualEffects(self) -> "IAgStkGraphicsVisualEffects":
        """Gets the visual  effects associated with the scene."""
        return self._intf.get_property(IAgStkGraphicsScene._metadata, IAgStkGraphicsScene._get_VisualEffects_metadata)

    _get_Clouds_metadata = { "name" : "Clouds",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def Clouds(self) -> "IAgStkGraphicsClouds":
        """Gets the clouds for the scene."""
        return self._intf.get_property(IAgStkGraphicsScene._metadata, IAgStkGraphicsScene._get_Clouds_metadata)


agcls.AgClassCatalog.add_catalog_entry("{2d15c682-efb5-499f-8851-a49599b2097d}", IAgStkGraphicsScene)
agcls.AgTypeNameMap["IAgStkGraphicsScene"] = IAgStkGraphicsScene

class IAgStkGraphicsSceneDisplayCondition(object):
    """A display condition used to control what scene or scenes an object, such as a primitive, is rendered in. This is used to show an object in some scenes and hide it in others."""
    _num_methods = 3
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{84cbf48f-1672-460e-86fd-9afda647bcca}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "SetDisplayInScene" : 1,
                             "GetDisplayInScene" : 2,
                             "DisplayOnlyInScene" : 3, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsSceneDisplayCondition._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsSceneDisplayCondition from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsSceneDisplayCondition.__dict__ and type(IAgStkGraphicsSceneDisplayCondition.__dict__[attrname]) == property:
            return IAgStkGraphicsSceneDisplayCondition.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsSceneDisplayCondition.")
    
    _SetDisplayInScene_metadata = { "name" : "SetDisplayInScene",
            "arg_types" : (agcom.PVOID, agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.AgInterface_in_arg("IAgStkGraphicsScene"), agmarshall.VARIANT_BOOL_arg,) }
    def SetDisplayInScene(self, scene:"IAgStkGraphicsScene", on:bool) -> None:
        """Allows or disallows rendering for in a particular scene for."""
        return self._intf.invoke(IAgStkGraphicsSceneDisplayCondition._metadata, IAgStkGraphicsSceneDisplayCondition._SetDisplayInScene_metadata, scene, on)

    _GetDisplayInScene_metadata = { "name" : "GetDisplayInScene",
            "arg_types" : (agcom.PVOID, POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.AgInterface_in_arg("IAgStkGraphicsScene"), agmarshall.VARIANT_BOOL_arg,) }
    def GetDisplayInScene(self, scene:"IAgStkGraphicsScene") -> bool:
        """Determines whether the display condition allows rendering rendering in the given scene."""
        return self._intf.invoke(IAgStkGraphicsSceneDisplayCondition._metadata, IAgStkGraphicsSceneDisplayCondition._GetDisplayInScene_metadata, scene, out_arg())

    _DisplayOnlyInScene_metadata = { "name" : "DisplayOnlyInScene",
            "arg_types" : (agcom.PVOID,),
            "marshallers" : (agmarshall.AgInterface_in_arg("IAgStkGraphicsScene"),) }
    def DisplayOnlyInScene(self, scene:"IAgStkGraphicsScene") -> None:
        """Allows rendering only in the given scene. The display condition will not allow rendering in other scenes, including newly created ones."""
        return self._intf.invoke(IAgStkGraphicsSceneDisplayCondition._metadata, IAgStkGraphicsSceneDisplayCondition._DisplayOnlyInScene_metadata, scene)


agcls.AgClassCatalog.add_catalog_entry("{84cbf48f-1672-460e-86fd-9afda647bcca}", IAgStkGraphicsSceneDisplayCondition)
agcls.AgTypeNameMap["IAgStkGraphicsSceneDisplayCondition"] = IAgStkGraphicsSceneDisplayCondition

class IAgStkGraphicsSceneManager(object):
    """The static scene manager class provides global properties and functionality that apply to all scenes and thus affect the rendering of every globe control..."""
    _num_methods = 8
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{257b97ef-839b-4a17-a924-c40320174d13}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_Primitives" : 1,
                             "get_ScreenOverlays" : 2,
                             "get_Textures" : 3,
                             "get_GlobeOverlaySettings" : 4,
                             "get_Scenes" : 5,
                             "Render" : 6,
                             "get_Initializers" : 7,
                             "get_FrameRate" : 8, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsSceneManager._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsSceneManager from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsSceneManager.__dict__ and type(IAgStkGraphicsSceneManager.__dict__[attrname]) == property:
            return IAgStkGraphicsSceneManager.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsSceneManager.")
    
    _get_Primitives_metadata = { "name" : "Primitives",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def Primitives(self) -> "IAgStkGraphicsPrimitiveManager":
        """Gets the primitive manager, which is used to add primitives to your scenes."""
        return self._intf.get_property(IAgStkGraphicsSceneManager._metadata, IAgStkGraphicsSceneManager._get_Primitives_metadata)

    _get_ScreenOverlays_metadata = { "name" : "ScreenOverlays",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def ScreenOverlays(self) -> "IAgStkGraphicsScreenOverlayManager":
        """Gets the screen overlay manager, which is used to add screen overlays to your scenes."""
        return self._intf.get_property(IAgStkGraphicsSceneManager._metadata, IAgStkGraphicsSceneManager._get_ScreenOverlays_metadata)

    _get_Textures_metadata = { "name" : "Textures",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def Textures(self) -> "IAgStkGraphicsTexture2DFactory":
        """Gets the texture 2d factory, which can be used to create textures from various sources."""
        return self._intf.get_property(IAgStkGraphicsSceneManager._metadata, IAgStkGraphicsSceneManager._get_Textures_metadata)

    _get_GlobeOverlaySettings_metadata = { "name" : "GlobeOverlaySettings",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def GlobeOverlaySettings(self) -> "IAgStkGraphicsGlobeOverlaySettings":
        """Gets the globe overlay settings, which are used to set global settings for all globe overlays."""
        return self._intf.get_property(IAgStkGraphicsSceneManager._metadata, IAgStkGraphicsSceneManager._get_GlobeOverlaySettings_metadata)

    _get_Scenes_metadata = { "name" : "Scenes",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def Scenes(self) -> "IAgStkGraphicsSceneCollection":
        """Gets a read-only collection of scenes that are associated with the scene manager."""
        return self._intf.get_property(IAgStkGraphicsSceneManager._metadata, IAgStkGraphicsSceneManager._get_Scenes_metadata)

    _Render_metadata = { "name" : "Render",
            "arg_types" : (),
            "marshallers" : () }
    def Render(self) -> None:
        """Renders all scenes within an application. To render a specific scene, use the Render method."""
        return self._intf.invoke(IAgStkGraphicsSceneManager._metadata, IAgStkGraphicsSceneManager._Render_metadata, )

    _get_Initializers_metadata = { "name" : "Initializers",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def Initializers(self) -> "IAgStkGraphicsFactoryAndInitializers":
        """Allows the user to create or initialize primitives, display conditions, tringulators and other types of objects."""
        return self._intf.get_property(IAgStkGraphicsSceneManager._metadata, IAgStkGraphicsSceneManager._get_Initializers_metadata)

    _get_FrameRate_metadata = { "name" : "FrameRate",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def FrameRate(self) -> "IAgStkGraphicsFrameRate":
        """Gets the frame rate class, which can be used to keep track of how fast scenes are being <see ref='Render'>rendered</see>."""
        return self._intf.get_property(IAgStkGraphicsSceneManager._metadata, IAgStkGraphicsSceneManager._get_FrameRate_metadata)


agcls.AgClassCatalog.add_catalog_entry("{257b97ef-839b-4a17-a924-c40320174d13}", IAgStkGraphicsSceneManager)
agcls.AgTypeNameMap["IAgStkGraphicsSceneManager"] = IAgStkGraphicsSceneManager

class IAgStkGraphicsScreenOverlay(object):
    """A visible element drawn in screen space. Overlays are useful for floating logos, heads up displays, and integrating user interfaces into the 3D window."""
    _num_methods = 0
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{e9bdc8ad-dc02-4b22-9513-eb0cdfa85cf3}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : {  }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsScreenOverlay._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsScreenOverlay from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsScreenOverlay.__dict__ and type(IAgStkGraphicsScreenOverlay.__dict__[attrname]) == property:
            return IAgStkGraphicsScreenOverlay.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsScreenOverlay.")
    

agcls.AgClassCatalog.add_catalog_entry("{e9bdc8ad-dc02-4b22-9513-eb0cdfa85cf3}", IAgStkGraphicsScreenOverlay)
agcls.AgTypeNameMap["IAgStkGraphicsScreenOverlay"] = IAgStkGraphicsScreenOverlay

class IAgStkGraphicsScreenOverlayCollection(object):
    """A collection of screen overlays."""
    _num_methods = 0
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{1bf5a224-26b7-4907-aa7d-fd6fc81a51f3}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : {  }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsScreenOverlayCollection._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsScreenOverlayCollection from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsScreenOverlayCollection.__dict__ and type(IAgStkGraphicsScreenOverlayCollection.__dict__[attrname]) == property:
            return IAgStkGraphicsScreenOverlayCollection.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsScreenOverlayCollection.")
    

agcls.AgClassCatalog.add_catalog_entry("{1bf5a224-26b7-4907-aa7d-fd6fc81a51f3}", IAgStkGraphicsScreenOverlayCollection)
agcls.AgTypeNameMap["IAgStkGraphicsScreenOverlayCollection"] = IAgStkGraphicsScreenOverlayCollection

class IAgStkGraphicsScreenOverlayManager(object):
    """The top-level container for screen overlays. All child screen overlays that are added to this container are specified relative to the overall globe control."""
    _num_methods = 6
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{25bf4e85-98ce-48e3-9c15-f517115bc794}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_Bounds" : 1,
                             "get_Overlays" : 2,
                             "get_Padding" : 3,
                             "set_Padding" : 4,
                             "get_Display" : 5,
                             "set_Display" : 6, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsScreenOverlayManager._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsScreenOverlayManager from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsScreenOverlayManager.__dict__ and type(IAgStkGraphicsScreenOverlayManager.__dict__[attrname]) == property:
            return IAgStkGraphicsScreenOverlayManager.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsScreenOverlayManager.")
    
    _get_Bounds_metadata = { "name" : "Bounds",
            "arg_types" : (POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg,) }
    @property
    def Bounds(self) -> list:
        """Gets the overall bounds of the globe control. The array contains the properties defining the bounds in the order left x location, top y location, width, height."""
        return self._intf.get_property(IAgStkGraphicsScreenOverlayManager._metadata, IAgStkGraphicsScreenOverlayManager._get_Bounds_metadata)

    _get_Overlays_metadata = { "name" : "Overlays",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def Overlays(self) -> "IAgStkGraphicsScreenOverlayCollection":
        """Gets the collection of overlays that are contained within this manager."""
        return self._intf.get_property(IAgStkGraphicsScreenOverlayManager._metadata, IAgStkGraphicsScreenOverlayManager._get_Overlays_metadata)

    _get_Padding_metadata = { "name" : "Padding",
            "arg_types" : (POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg,) }
    @property
    def Padding(self) -> list:
        """Gets or sets the padding surrounding the overlays that are contained within this manager. The array contains the components of the padding arranged in the order left, top, right, bottom."""
        return self._intf.get_property(IAgStkGraphicsScreenOverlayManager._metadata, IAgStkGraphicsScreenOverlayManager._get_Padding_metadata)

    _set_Padding_metadata = { "name" : "Padding",
            "arg_types" : (agcom.LPSAFEARRAY,),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg,) }
    @Padding.setter
    def Padding(self, padding:list) -> None:
        return self._intf.set_property(IAgStkGraphicsScreenOverlayManager._metadata, IAgStkGraphicsScreenOverlayManager._set_Padding_metadata, padding)

    _get_Display_metadata = { "name" : "Display",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def Display(self) -> bool:
        """Gets or sets if the collection of overlays that are contained within this manager should be rendered."""
        return self._intf.get_property(IAgStkGraphicsScreenOverlayManager._metadata, IAgStkGraphicsScreenOverlayManager._get_Display_metadata)

    _set_Display_metadata = { "name" : "Display",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @Display.setter
    def Display(self, display:bool) -> None:
        return self._intf.set_property(IAgStkGraphicsScreenOverlayManager._metadata, IAgStkGraphicsScreenOverlayManager._set_Display_metadata, display)


agcls.AgClassCatalog.add_catalog_entry("{25bf4e85-98ce-48e3-9c15-f517115bc794}", IAgStkGraphicsScreenOverlayManager)
agcls.AgTypeNameMap["IAgStkGraphicsScreenOverlayManager"] = IAgStkGraphicsScreenOverlayManager

class IAgStkGraphicsScreenOverlayPickResult(object):
    """Describes a picked screen overlay as a result of a call to pick screen overlays."""
    _num_methods = 3
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{4872a8d1-b96f-4713-96f8-5ed5e5d6b8b4}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_Position" : 1,
                             "get_ControlPosition" : 2,
                             "get_Overlay" : 3, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsScreenOverlayPickResult._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsScreenOverlayPickResult from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsScreenOverlayPickResult.__dict__ and type(IAgStkGraphicsScreenOverlayPickResult.__dict__[attrname]) == property:
            return IAgStkGraphicsScreenOverlayPickResult.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsScreenOverlayPickResult.")
    
    _get_Position_metadata = { "name" : "Position",
            "arg_types" : (POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg,) }
    @property
    def Position(self) -> list:
        """Gets the position that was picked within the picked overlay. The array represents the picked position and has a size of 4. The elements are in the order x position, y position, x screen overlay unit, y screen overlay unit."""
        return self._intf.get_property(IAgStkGraphicsScreenOverlayPickResult._metadata, IAgStkGraphicsScreenOverlayPickResult._get_Position_metadata)

    _get_ControlPosition_metadata = { "name" : "ControlPosition",
            "arg_types" : (POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg,) }
    @property
    def ControlPosition(self) -> list:
        """Gets the position that was picked within the overall globe control. This is essentially the same position that was passed to pick screen overlays. The array represents the picked position and has a size of 4..."""
        return self._intf.get_property(IAgStkGraphicsScreenOverlayPickResult._metadata, IAgStkGraphicsScreenOverlayPickResult._get_ControlPosition_metadata)

    _get_Overlay_metadata = { "name" : "Overlay",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def Overlay(self) -> "IAgStkGraphicsScreenOverlay":
        """Gets the screen overlay that was picked."""
        return self._intf.get_property(IAgStkGraphicsScreenOverlayPickResult._metadata, IAgStkGraphicsScreenOverlayPickResult._get_Overlay_metadata)


agcls.AgClassCatalog.add_catalog_entry("{4872a8d1-b96f-4713-96f8-5ed5e5d6b8b4}", IAgStkGraphicsScreenOverlayPickResult)
agcls.AgTypeNameMap["IAgStkGraphicsScreenOverlayPickResult"] = IAgStkGraphicsScreenOverlayPickResult

class IAgStkGraphicsSolidPrimitive(object):
    """Renders filled solid objects and their outlines. Example solids include boxes and ellipsoids. Various effects are supported, such as displaying the solid's silhouette, and hiding the outline of the backside of the solid..."""
    _num_methods = 39
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{10ae68b3-ec89-4ced-9b4c-8aae9123eb24}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_AffectedByLighting" : 1,
                             "set_AffectedByLighting" : 2,
                             "get_DisplayFill" : 3,
                             "set_DisplayFill" : 4,
                             "get_DisplaySilhouette" : 5,
                             "set_DisplaySilhouette" : 6,
                             "get_SilhouetteColor" : 7,
                             "set_SilhouetteColor" : 8,
                             "get_SilhouetteTranslucency" : 9,
                             "set_SilhouetteTranslucency" : 10,
                             "get_SilhouetteWidth" : 11,
                             "set_SilhouetteWidth" : 12,
                             "get_MinimumSilhouetteWidthSupported" : 13,
                             "get_MaximumSilhouetteWidthSupported" : 14,
                             "get_DisplayOutline" : 15,
                             "set_DisplayOutline" : 16,
                             "get_OutlineColor" : 17,
                             "set_OutlineColor" : 18,
                             "get_OutlineTranslucency" : 19,
                             "set_OutlineTranslucency" : 20,
                             "get_OutlineWidth" : 21,
                             "set_OutlineWidth" : 22,
                             "get_OutlineAppearance" : 23,
                             "set_OutlineAppearance" : 24,
                             "get_BackLineColor" : 25,
                             "set_BackLineColor" : 26,
                             "get_BackLineTranslucency" : 27,
                             "set_BackLineTranslucency" : 28,
                             "get_Position" : 29,
                             "set_Position" : 30,
                             "get_Rotation" : 31,
                             "set_Rotation" : 32,
                             "get_Scale" : 33,
                             "set_Scale" : 34,
                             "get_BackLineWidth" : 35,
                             "set_BackLineWidth" : 36,
                             "get_SetHint" : 37,
                             "SetWithResult" : 38,
                             "Set" : 39, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsSolidPrimitive._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsSolidPrimitive from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsSolidPrimitive.__dict__ and type(IAgStkGraphicsSolidPrimitive.__dict__[attrname]) == property:
            return IAgStkGraphicsSolidPrimitive.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsSolidPrimitive.")
    
    _get_AffectedByLighting_metadata = { "name" : "AffectedByLighting",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def AffectedByLighting(self) -> bool:
        """Gets or sets whether the primitive is affected by lighting."""
        return self._intf.get_property(IAgStkGraphicsSolidPrimitive._metadata, IAgStkGraphicsSolidPrimitive._get_AffectedByLighting_metadata)

    _set_AffectedByLighting_metadata = { "name" : "AffectedByLighting",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @AffectedByLighting.setter
    def AffectedByLighting(self, affectedByLighting:bool) -> None:
        return self._intf.set_property(IAgStkGraphicsSolidPrimitive._metadata, IAgStkGraphicsSolidPrimitive._set_AffectedByLighting_metadata, affectedByLighting)

    _get_DisplayFill_metadata = { "name" : "DisplayFill",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def DisplayFill(self) -> bool:
        """Gets or sets whether the solid's fill is displayed."""
        return self._intf.get_property(IAgStkGraphicsSolidPrimitive._metadata, IAgStkGraphicsSolidPrimitive._get_DisplayFill_metadata)

    _set_DisplayFill_metadata = { "name" : "DisplayFill",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @DisplayFill.setter
    def DisplayFill(self, displayFill:bool) -> None:
        return self._intf.set_property(IAgStkGraphicsSolidPrimitive._metadata, IAgStkGraphicsSolidPrimitive._set_DisplayFill_metadata, displayFill)

    _get_DisplaySilhouette_metadata = { "name" : "DisplaySilhouette",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def DisplaySilhouette(self) -> bool:
        """Gets or sets whether the solid's silhouette is displayed."""
        return self._intf.get_property(IAgStkGraphicsSolidPrimitive._metadata, IAgStkGraphicsSolidPrimitive._get_DisplaySilhouette_metadata)

    _set_DisplaySilhouette_metadata = { "name" : "DisplaySilhouette",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @DisplaySilhouette.setter
    def DisplaySilhouette(self, displaySilhouette:bool) -> None:
        return self._intf.set_property(IAgStkGraphicsSolidPrimitive._metadata, IAgStkGraphicsSolidPrimitive._set_DisplaySilhouette_metadata, displaySilhouette)

    _get_SilhouetteColor_metadata = { "name" : "SilhouetteColor",
            "arg_types" : (POINTER(agcom.OLE_COLOR),),
            "marshallers" : (agmarshall.OLE_COLOR_arg,) }
    @property
    def SilhouetteColor(self) -> agcolor.Color:
        """Gets or sets the silhouette's color."""
        return self._intf.get_property(IAgStkGraphicsSolidPrimitive._metadata, IAgStkGraphicsSolidPrimitive._get_SilhouetteColor_metadata)

    _set_SilhouetteColor_metadata = { "name" : "SilhouetteColor",
            "arg_types" : (agcom.OLE_COLOR,),
            "marshallers" : (agmarshall.OLE_COLOR_arg,) }
    @SilhouetteColor.setter
    def SilhouetteColor(self, silhouetteColor:agcolor.Color) -> None:
        return self._intf.set_property(IAgStkGraphicsSolidPrimitive._metadata, IAgStkGraphicsSolidPrimitive._set_SilhouetteColor_metadata, silhouetteColor)

    _get_SilhouetteTranslucency_metadata = { "name" : "SilhouetteTranslucency",
            "arg_types" : (POINTER(agcom.FLOAT),),
            "marshallers" : (agmarshall.FLOAT_arg,) }
    @property
    def SilhouetteTranslucency(self) -> float:
        """Gets or sets the silhouette's translucency. Translucency is between 0 and 1, where 0 is opaque and 1 is transparent."""
        return self._intf.get_property(IAgStkGraphicsSolidPrimitive._metadata, IAgStkGraphicsSolidPrimitive._get_SilhouetteTranslucency_metadata)

    _set_SilhouetteTranslucency_metadata = { "name" : "SilhouetteTranslucency",
            "arg_types" : (agcom.FLOAT,),
            "marshallers" : (agmarshall.FLOAT_arg,) }
    @SilhouetteTranslucency.setter
    def SilhouetteTranslucency(self, silhouetteTranslucency:float) -> None:
        return self._intf.set_property(IAgStkGraphicsSolidPrimitive._metadata, IAgStkGraphicsSolidPrimitive._set_SilhouetteTranslucency_metadata, silhouetteTranslucency)

    _get_SilhouetteWidth_metadata = { "name" : "SilhouetteWidth",
            "arg_types" : (POINTER(agcom.FLOAT),),
            "marshallers" : (agmarshall.FLOAT_arg,) }
    @property
    def SilhouetteWidth(self) -> float:
        """Gets or sets the silhouette' width, in pixels."""
        return self._intf.get_property(IAgStkGraphicsSolidPrimitive._metadata, IAgStkGraphicsSolidPrimitive._get_SilhouetteWidth_metadata)

    _set_SilhouetteWidth_metadata = { "name" : "SilhouetteWidth",
            "arg_types" : (agcom.FLOAT,),
            "marshallers" : (agmarshall.FLOAT_arg,) }
    @SilhouetteWidth.setter
    def SilhouetteWidth(self, silhouetteWidth:float) -> None:
        return self._intf.set_property(IAgStkGraphicsSolidPrimitive._metadata, IAgStkGraphicsSolidPrimitive._set_SilhouetteWidth_metadata, silhouetteWidth)

    _get_MinimumSilhouetteWidthSupported_metadata = { "name" : "MinimumSilhouetteWidthSupported",
            "arg_types" : (POINTER(agcom.FLOAT),),
            "marshallers" : (agmarshall.FLOAT_arg,) }
    @property
    def MinimumSilhouetteWidthSupported(self) -> float:
        """Gets the minimum silhouette width, in pixels, supported by the video card."""
        return self._intf.get_property(IAgStkGraphicsSolidPrimitive._metadata, IAgStkGraphicsSolidPrimitive._get_MinimumSilhouetteWidthSupported_metadata)

    _get_MaximumSilhouetteWidthSupported_metadata = { "name" : "MaximumSilhouetteWidthSupported",
            "arg_types" : (POINTER(agcom.FLOAT),),
            "marshallers" : (agmarshall.FLOAT_arg,) }
    @property
    def MaximumSilhouetteWidthSupported(self) -> float:
        """Gets the maximum silhouette width, in pixels, supported by the video card."""
        return self._intf.get_property(IAgStkGraphicsSolidPrimitive._metadata, IAgStkGraphicsSolidPrimitive._get_MaximumSilhouetteWidthSupported_metadata)

    _get_DisplayOutline_metadata = { "name" : "DisplayOutline",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def DisplayOutline(self) -> bool:
        """Gets or sets whether the solid's outline is displayed."""
        return self._intf.get_property(IAgStkGraphicsSolidPrimitive._metadata, IAgStkGraphicsSolidPrimitive._get_DisplayOutline_metadata)

    _set_DisplayOutline_metadata = { "name" : "DisplayOutline",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @DisplayOutline.setter
    def DisplayOutline(self, displayOutline:bool) -> None:
        return self._intf.set_property(IAgStkGraphicsSolidPrimitive._metadata, IAgStkGraphicsSolidPrimitive._set_DisplayOutline_metadata, displayOutline)

    _get_OutlineColor_metadata = { "name" : "OutlineColor",
            "arg_types" : (POINTER(agcom.OLE_COLOR),),
            "marshallers" : (agmarshall.OLE_COLOR_arg,) }
    @property
    def OutlineColor(self) -> agcolor.Color:
        """Gets or sets the outline's color."""
        return self._intf.get_property(IAgStkGraphicsSolidPrimitive._metadata, IAgStkGraphicsSolidPrimitive._get_OutlineColor_metadata)

    _set_OutlineColor_metadata = { "name" : "OutlineColor",
            "arg_types" : (agcom.OLE_COLOR,),
            "marshallers" : (agmarshall.OLE_COLOR_arg,) }
    @OutlineColor.setter
    def OutlineColor(self, outlineColor:agcolor.Color) -> None:
        return self._intf.set_property(IAgStkGraphicsSolidPrimitive._metadata, IAgStkGraphicsSolidPrimitive._set_OutlineColor_metadata, outlineColor)

    _get_OutlineTranslucency_metadata = { "name" : "OutlineTranslucency",
            "arg_types" : (POINTER(agcom.FLOAT),),
            "marshallers" : (agmarshall.FLOAT_arg,) }
    @property
    def OutlineTranslucency(self) -> float:
        """Gets or sets the outline's translucency. Translucency is between 0 and 1, where 0 is opaque and 1 is transparent."""
        return self._intf.get_property(IAgStkGraphicsSolidPrimitive._metadata, IAgStkGraphicsSolidPrimitive._get_OutlineTranslucency_metadata)

    _set_OutlineTranslucency_metadata = { "name" : "OutlineTranslucency",
            "arg_types" : (agcom.FLOAT,),
            "marshallers" : (agmarshall.FLOAT_arg,) }
    @OutlineTranslucency.setter
    def OutlineTranslucency(self, outlineTranslucency:float) -> None:
        return self._intf.set_property(IAgStkGraphicsSolidPrimitive._metadata, IAgStkGraphicsSolidPrimitive._set_OutlineTranslucency_metadata, outlineTranslucency)

    _get_OutlineWidth_metadata = { "name" : "OutlineWidth",
            "arg_types" : (POINTER(agcom.FLOAT),),
            "marshallers" : (agmarshall.FLOAT_arg,) }
    @property
    def OutlineWidth(self) -> float:
        """Gets or sets the outline's width, in pixels."""
        return self._intf.get_property(IAgStkGraphicsSolidPrimitive._metadata, IAgStkGraphicsSolidPrimitive._get_OutlineWidth_metadata)

    _set_OutlineWidth_metadata = { "name" : "OutlineWidth",
            "arg_types" : (agcom.FLOAT,),
            "marshallers" : (agmarshall.FLOAT_arg,) }
    @OutlineWidth.setter
    def OutlineWidth(self, outlineWidth:float) -> None:
        return self._intf.set_property(IAgStkGraphicsSolidPrimitive._metadata, IAgStkGraphicsSolidPrimitive._set_OutlineWidth_metadata, outlineWidth)

    _get_OutlineAppearance_metadata = { "name" : "OutlineAppearance",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEStkGraphicsOutlineAppearance),) }
    @property
    def OutlineAppearance(self) -> "AgEStkGraphicsOutlineAppearance":
        """Gets or sets the outline's appearance."""
        return self._intf.get_property(IAgStkGraphicsSolidPrimitive._metadata, IAgStkGraphicsSolidPrimitive._get_OutlineAppearance_metadata)

    _set_OutlineAppearance_metadata = { "name" : "OutlineAppearance",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEStkGraphicsOutlineAppearance),) }
    @OutlineAppearance.setter
    def OutlineAppearance(self, outlineAppearance:"AgEStkGraphicsOutlineAppearance") -> None:
        return self._intf.set_property(IAgStkGraphicsSolidPrimitive._metadata, IAgStkGraphicsSolidPrimitive._set_OutlineAppearance_metadata, outlineAppearance)

    _get_BackLineColor_metadata = { "name" : "BackLineColor",
            "arg_types" : (POINTER(agcom.OLE_COLOR),),
            "marshallers" : (agmarshall.OLE_COLOR_arg,) }
    @property
    def BackLineColor(self) -> agcolor.Color:
        """Gets or sets the back line's color."""
        return self._intf.get_property(IAgStkGraphicsSolidPrimitive._metadata, IAgStkGraphicsSolidPrimitive._get_BackLineColor_metadata)

    _set_BackLineColor_metadata = { "name" : "BackLineColor",
            "arg_types" : (agcom.OLE_COLOR,),
            "marshallers" : (agmarshall.OLE_COLOR_arg,) }
    @BackLineColor.setter
    def BackLineColor(self, backLineColor:agcolor.Color) -> None:
        return self._intf.set_property(IAgStkGraphicsSolidPrimitive._metadata, IAgStkGraphicsSolidPrimitive._set_BackLineColor_metadata, backLineColor)

    _get_BackLineTranslucency_metadata = { "name" : "BackLineTranslucency",
            "arg_types" : (POINTER(agcom.FLOAT),),
            "marshallers" : (agmarshall.FLOAT_arg,) }
    @property
    def BackLineTranslucency(self) -> float:
        """Gets or sets the back line's translucency. Translucency is between 0 and 1, where 0 is opaque and 1 is transparent."""
        return self._intf.get_property(IAgStkGraphicsSolidPrimitive._metadata, IAgStkGraphicsSolidPrimitive._get_BackLineTranslucency_metadata)

    _set_BackLineTranslucency_metadata = { "name" : "BackLineTranslucency",
            "arg_types" : (agcom.FLOAT,),
            "marshallers" : (agmarshall.FLOAT_arg,) }
    @BackLineTranslucency.setter
    def BackLineTranslucency(self, backLineTranslucency:float) -> None:
        return self._intf.set_property(IAgStkGraphicsSolidPrimitive._metadata, IAgStkGraphicsSolidPrimitive._set_BackLineTranslucency_metadata, backLineTranslucency)

    _get_Position_metadata = { "name" : "Position",
            "arg_types" : (POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg,) }
    @property
    def Position(self) -> list:
        """Gets or sets the solid's position. The position is defined in the solid's reference frame. The array contains the components of the position in the order x, y, z."""
        return self._intf.get_property(IAgStkGraphicsSolidPrimitive._metadata, IAgStkGraphicsSolidPrimitive._get_Position_metadata)

    _set_Position_metadata = { "name" : "Position",
            "arg_types" : (agcom.LPSAFEARRAY,),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg,) }
    @Position.setter
    def Position(self, position:list) -> None:
        return self._intf.set_property(IAgStkGraphicsSolidPrimitive._metadata, IAgStkGraphicsSolidPrimitive._set_Position_metadata, position)

    _get_Rotation_metadata = { "name" : "Rotation",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def Rotation(self) -> "IAgOrientation":
        """Gets or sets the rotation applied to the solid before rendering."""
        return self._intf.get_property(IAgStkGraphicsSolidPrimitive._metadata, IAgStkGraphicsSolidPrimitive._get_Rotation_metadata)

    _set_Rotation_metadata = { "name" : "Rotation",
            "arg_types" : (agcom.PVOID,),
            "marshallers" : (agmarshall.AgInterface_in_arg("IAgOrientation"),) }
    @Rotation.setter
    def Rotation(self, rotation:"IAgOrientation") -> None:
        return self._intf.set_property(IAgStkGraphicsSolidPrimitive._metadata, IAgStkGraphicsSolidPrimitive._set_Rotation_metadata, rotation)

    _get_Scale_metadata = { "name" : "Scale",
            "arg_types" : (POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg,) }
    @property
    def Scale(self) -> list:
        """Gets or sets a non-uniform scale that is applied to the solid to increase or decrease its rendered size. The array contains the scale for each component of the size in the order x scale, y scale, z scale."""
        return self._intf.get_property(IAgStkGraphicsSolidPrimitive._metadata, IAgStkGraphicsSolidPrimitive._get_Scale_metadata)

    _set_Scale_metadata = { "name" : "Scale",
            "arg_types" : (agcom.LPSAFEARRAY,),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg,) }
    @Scale.setter
    def Scale(self, scale:list) -> None:
        return self._intf.set_property(IAgStkGraphicsSolidPrimitive._metadata, IAgStkGraphicsSolidPrimitive._set_Scale_metadata, scale)

    _get_BackLineWidth_metadata = { "name" : "BackLineWidth",
            "arg_types" : (POINTER(agcom.FLOAT),),
            "marshallers" : (agmarshall.FLOAT_arg,) }
    @property
    def BackLineWidth(self) -> float:
        """Gets or sets the back line's width, in pixels."""
        return self._intf.get_property(IAgStkGraphicsSolidPrimitive._metadata, IAgStkGraphicsSolidPrimitive._get_BackLineWidth_metadata)

    _set_BackLineWidth_metadata = { "name" : "BackLineWidth",
            "arg_types" : (agcom.FLOAT,),
            "marshallers" : (agmarshall.FLOAT_arg,) }
    @BackLineWidth.setter
    def BackLineWidth(self, backLineWidth:float) -> None:
        return self._intf.set_property(IAgStkGraphicsSolidPrimitive._metadata, IAgStkGraphicsSolidPrimitive._set_BackLineWidth_metadata, backLineWidth)

    _get_SetHint_metadata = { "name" : "SetHint",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEStkGraphicsSetHint),) }
    @property
    def SetHint(self) -> "AgEStkGraphicsSetHint":
        """Gets the primitive's set hint. See the Set Hint Performance Overview for selecting an appropriate value to construct the primitive with."""
        return self._intf.get_property(IAgStkGraphicsSolidPrimitive._metadata, IAgStkGraphicsSolidPrimitive._get_SetHint_metadata)

    _SetWithResult_metadata = { "name" : "SetWithResult",
            "arg_types" : (agcom.PVOID,),
            "marshallers" : (agmarshall.AgInterface_in_arg("IAgStkGraphicsSolidTriangulatorResult"),) }
    def SetWithResult(self, solidTriangulatorResult:"IAgStkGraphicsSolidTriangulatorResult") -> None:
        """Defines the solid using the specified solidTriangulatorResult. The solid is rendered in the primitive's reference frame."""
        return self._intf.invoke(IAgStkGraphicsSolidPrimitive._metadata, IAgStkGraphicsSolidPrimitive._SetWithResult_metadata, solidTriangulatorResult)

    _Set_metadata = { "name" : "Set",
            "arg_types" : (POINTER(agcom.LPSAFEARRAY), POINTER(agcom.LPSAFEARRAY), POINTER(agcom.LPSAFEARRAY), POINTER(agcom.LPSAFEARRAY), agcom.LONG, agcom.PVOID, agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg, agmarshall.LPSAFEARRAY_arg, agmarshall.LPSAFEARRAY_arg, agmarshall.LPSAFEARRAY_arg, agmarshall.AgEnum_arg(AgEStkGraphicsWindingOrder), agmarshall.AgInterface_in_arg("IAgStkGraphicsBoundingSphere"), agmarshall.VARIANT_BOOL_arg,) }
    def Set(self, positions:list, normals:list, indices:list, outlineIndices:list, windingOrder:"AgEStkGraphicsWindingOrder", boundingSphere:"IAgStkGraphicsBoundingSphere", closed:bool) -> None:
        """Defines the solid using the specified parameters. The solid is rendered in the primitive's reference frame."""
        return self._intf.invoke(IAgStkGraphicsSolidPrimitive._metadata, IAgStkGraphicsSolidPrimitive._Set_metadata, positions, normals, indices, outlineIndices, windingOrder, boundingSphere, closed)


agcls.AgClassCatalog.add_catalog_entry("{10ae68b3-ec89-4ced-9b4c-8aae9123eb24}", IAgStkGraphicsSolidPrimitive)
agcls.AgTypeNameMap["IAgStkGraphicsSolidPrimitive"] = IAgStkGraphicsSolidPrimitive

class IAgStkGraphicsStereoscopic(object):
    """Gets the stereoscopic options for all Scenes. To use a particular stereoscopic display mode, ensure that your system supports the feature and that it is enabled."""
    _num_methods = 8
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{41d0e11b-d00c-4255-b869-2fc8430f994e}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_DisplayMode" : 1,
                             "set_DisplayMode" : 2,
                             "get_ProjectionMode" : 3,
                             "set_ProjectionMode" : 4,
                             "get_ProjectionDistance" : 5,
                             "set_ProjectionDistance" : 6,
                             "get_EyeSeparationFactor" : 7,
                             "set_EyeSeparationFactor" : 8, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsStereoscopic._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsStereoscopic from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsStereoscopic.__dict__ and type(IAgStkGraphicsStereoscopic.__dict__[attrname]) == property:
            return IAgStkGraphicsStereoscopic.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsStereoscopic.")
    
    _get_DisplayMode_metadata = { "name" : "DisplayMode",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEStkGraphicsStereoscopicDisplayMode),) }
    @property
    def DisplayMode(self) -> "AgEStkGraphicsStereoscopicDisplayMode":
        """Gets or sets the stereoscopic display mode for all Scenes. To use a particular stereoscopic display mode, ensure that your system supports the feature and that it is enabled."""
        return self._intf.get_property(IAgStkGraphicsStereoscopic._metadata, IAgStkGraphicsStereoscopic._get_DisplayMode_metadata)

    _set_DisplayMode_metadata = { "name" : "DisplayMode",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEStkGraphicsStereoscopicDisplayMode),) }
    @DisplayMode.setter
    def DisplayMode(self, displayMode:"AgEStkGraphicsStereoscopicDisplayMode") -> None:
        return self._intf.set_property(IAgStkGraphicsStereoscopic._metadata, IAgStkGraphicsStereoscopic._set_DisplayMode_metadata, displayMode)

    _get_ProjectionMode_metadata = { "name" : "ProjectionMode",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEStkGraphicsStereoProjectionMode),) }
    @property
    def ProjectionMode(self) -> "AgEStkGraphicsStereoProjectionMode":
        """Gets or sets whether the type of stereo projection that will be used."""
        return self._intf.get_property(IAgStkGraphicsStereoscopic._metadata, IAgStkGraphicsStereoscopic._get_ProjectionMode_metadata)

    _set_ProjectionMode_metadata = { "name" : "ProjectionMode",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEStkGraphicsStereoProjectionMode),) }
    @ProjectionMode.setter
    def ProjectionMode(self, projectionMode:"AgEStkGraphicsStereoProjectionMode") -> None:
        return self._intf.set_property(IAgStkGraphicsStereoscopic._metadata, IAgStkGraphicsStereoscopic._set_ProjectionMode_metadata, projectionMode)

    _get_ProjectionDistance_metadata = { "name" : "ProjectionDistance",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def ProjectionDistance(self) -> float:
        """Gets or sets the projection distance. If projection mode is set to eStkGraphicsStereoProjectionAutomatic, the value of this property will be ignored."""
        return self._intf.get_property(IAgStkGraphicsStereoscopic._metadata, IAgStkGraphicsStereoscopic._get_ProjectionDistance_metadata)

    _set_ProjectionDistance_metadata = { "name" : "ProjectionDistance",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @ProjectionDistance.setter
    def ProjectionDistance(self, projectionDistance:float) -> None:
        return self._intf.set_property(IAgStkGraphicsStereoscopic._metadata, IAgStkGraphicsStereoscopic._set_ProjectionDistance_metadata, projectionDistance)

    _get_EyeSeparationFactor_metadata = { "name" : "EyeSeparationFactor",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def EyeSeparationFactor(self) -> float:
        """Gets or sets the eye separation factor."""
        return self._intf.get_property(IAgStkGraphicsStereoscopic._metadata, IAgStkGraphicsStereoscopic._get_EyeSeparationFactor_metadata)

    _set_EyeSeparationFactor_metadata = { "name" : "EyeSeparationFactor",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @EyeSeparationFactor.setter
    def EyeSeparationFactor(self, eyeSeparationFactor:float) -> None:
        return self._intf.set_property(IAgStkGraphicsStereoscopic._metadata, IAgStkGraphicsStereoscopic._set_EyeSeparationFactor_metadata, eyeSeparationFactor)


agcls.AgClassCatalog.add_catalog_entry("{41d0e11b-d00c-4255-b869-2fc8430f994e}", IAgStkGraphicsStereoscopic)
agcls.AgTypeNameMap["IAgStkGraphicsStereoscopic"] = IAgStkGraphicsStereoscopic

class IAgStkGraphicsSurfaceMeshPrimitive(object):
    """A triangle mesh primitive for meshes on the surface that need to conform to terrain."""
    _num_methods = 17
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{9f13f05b-9c30-4118-8d6b-ab331881aba6}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_Texture" : 1,
                             "set_Texture" : 2,
                             "get_Wireframe" : 3,
                             "set_Wireframe" : 4,
                             "get_TriangleWindingOrder" : 5,
                             "get_SetHint" : 6,
                             "get_RenderingMethod" : 7,
                             "get_TextureFilter" : 8,
                             "set_TextureFilter" : 9,
                             "get_TextureMatrix" : 10,
                             "set_TextureMatrix" : 11,
                             "get_TransparentTextureBorder" : 12,
                             "set_TransparentTextureBorder" : 13,
                             "Set" : 14,
                             "SetWithoutTexturing" : 15,
                             "Supported" : 16,
                             "SupportedWithDefaultRenderingMethod" : 17, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsSurfaceMeshPrimitive._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsSurfaceMeshPrimitive from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsSurfaceMeshPrimitive.__dict__ and type(IAgStkGraphicsSurfaceMeshPrimitive.__dict__[attrname]) == property:
            return IAgStkGraphicsSurfaceMeshPrimitive.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsSurfaceMeshPrimitive.")
    
    _get_Texture_metadata = { "name" : "Texture",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def Texture(self) -> "IAgStkGraphicsRendererTexture2D":
        """Gets or sets the texture applied to this primitive when rendering."""
        return self._intf.get_property(IAgStkGraphicsSurfaceMeshPrimitive._metadata, IAgStkGraphicsSurfaceMeshPrimitive._get_Texture_metadata)

    _set_Texture_metadata = { "name" : "Texture",
            "arg_types" : (agcom.PVOID,),
            "marshallers" : (agmarshall.AgInterface_in_arg("IAgStkGraphicsRendererTexture2D"),) }
    @Texture.setter
    def Texture(self, texture:"IAgStkGraphicsRendererTexture2D") -> None:
        return self._intf.set_property(IAgStkGraphicsSurfaceMeshPrimitive._metadata, IAgStkGraphicsSurfaceMeshPrimitive._set_Texture_metadata, texture)

    _get_Wireframe_metadata = { "name" : "Wireframe",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def Wireframe(self) -> bool:
        """Gets or sets whether the primitive is rendered in wireframe. This is useful for debugging."""
        return self._intf.get_property(IAgStkGraphicsSurfaceMeshPrimitive._metadata, IAgStkGraphicsSurfaceMeshPrimitive._get_Wireframe_metadata)

    _set_Wireframe_metadata = { "name" : "Wireframe",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @Wireframe.setter
    def Wireframe(self, wireframe:bool) -> None:
        return self._intf.set_property(IAgStkGraphicsSurfaceMeshPrimitive._metadata, IAgStkGraphicsSurfaceMeshPrimitive._set_Wireframe_metadata, wireframe)

    _get_TriangleWindingOrder_metadata = { "name" : "TriangleWindingOrder",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEStkGraphicsWindingOrder),) }
    @property
    def TriangleWindingOrder(self) -> "AgEStkGraphicsWindingOrder":
        """Gets the orientation of front-facing triangles in the mesh."""
        return self._intf.get_property(IAgStkGraphicsSurfaceMeshPrimitive._metadata, IAgStkGraphicsSurfaceMeshPrimitive._get_TriangleWindingOrder_metadata)

    _get_SetHint_metadata = { "name" : "SetHint",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEStkGraphicsSetHint),) }
    @property
    def SetHint(self) -> "AgEStkGraphicsSetHint":
        """Gets the primitive's set hint. See the Set Hint Performance Overview for selecting an appropriate value to construct the primitive with."""
        return self._intf.get_property(IAgStkGraphicsSurfaceMeshPrimitive._metadata, IAgStkGraphicsSurfaceMeshPrimitive._get_SetHint_metadata)

    _get_RenderingMethod_metadata = { "name" : "RenderingMethod",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEStkGraphicsSurfaceMeshRenderingMethod),) }
    @property
    def RenderingMethod(self) -> "AgEStkGraphicsSurfaceMeshRenderingMethod":
        """Gets the rendering method used to render the mesh."""
        return self._intf.get_property(IAgStkGraphicsSurfaceMeshPrimitive._metadata, IAgStkGraphicsSurfaceMeshPrimitive._get_RenderingMethod_metadata)

    _get_TextureFilter_metadata = { "name" : "TextureFilter",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def TextureFilter(self) -> "IAgStkGraphicsTextureFilter2D":
        """Gets or sets the filter used when a texture is applied to this primitive."""
        return self._intf.get_property(IAgStkGraphicsSurfaceMeshPrimitive._metadata, IAgStkGraphicsSurfaceMeshPrimitive._get_TextureFilter_metadata)

    _set_TextureFilter_metadata = { "name" : "TextureFilter",
            "arg_types" : (agcom.PVOID,),
            "marshallers" : (agmarshall.AgInterface_in_arg("IAgStkGraphicsTextureFilter2D"),) }
    @TextureFilter.setter
    def TextureFilter(self, textureFilter:"IAgStkGraphicsTextureFilter2D") -> None:
        return self._intf.set_property(IAgStkGraphicsSurfaceMeshPrimitive._metadata, IAgStkGraphicsSurfaceMeshPrimitive._set_TextureFilter_metadata, textureFilter)

    _get_TextureMatrix_metadata = { "name" : "TextureMatrix",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def TextureMatrix(self) -> "IAgStkGraphicsTextureMatrix":
        """Gets or sets the matrix used to transform texture coordinates when a texture is applied to this primitive."""
        return self._intf.get_property(IAgStkGraphicsSurfaceMeshPrimitive._metadata, IAgStkGraphicsSurfaceMeshPrimitive._get_TextureMatrix_metadata)

    _set_TextureMatrix_metadata = { "name" : "TextureMatrix",
            "arg_types" : (agcom.PVOID,),
            "marshallers" : (agmarshall.AgInterface_in_arg("IAgStkGraphicsTextureMatrix"),) }
    @TextureMatrix.setter
    def TextureMatrix(self, textureMatrix:"IAgStkGraphicsTextureMatrix") -> None:
        return self._intf.set_property(IAgStkGraphicsSurfaceMeshPrimitive._metadata, IAgStkGraphicsSurfaceMeshPrimitive._set_TextureMatrix_metadata, textureMatrix)

    _get_TransparentTextureBorder_metadata = { "name" : "TransparentTextureBorder",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def TransparentTextureBorder(self) -> bool:
        """Gets or set the boolean that defines if the color obtained from texture coordinates beyond the texture border should be considered transparent or not. This is typically used in conjunction with the a texture matrix."""
        return self._intf.get_property(IAgStkGraphicsSurfaceMeshPrimitive._metadata, IAgStkGraphicsSurfaceMeshPrimitive._get_TransparentTextureBorder_metadata)

    _set_TransparentTextureBorder_metadata = { "name" : "TransparentTextureBorder",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @TransparentTextureBorder.setter
    def TransparentTextureBorder(self, transparentTextureBorder:bool) -> None:
        return self._intf.set_property(IAgStkGraphicsSurfaceMeshPrimitive._metadata, IAgStkGraphicsSurfaceMeshPrimitive._set_TransparentTextureBorder_metadata, transparentTextureBorder)

    _Set_metadata = { "name" : "Set",
            "arg_types" : (agcom.PVOID,),
            "marshallers" : (agmarshall.AgInterface_in_arg("IAgStkGraphicsSurfaceTriangulatorResult"),) }
    def Set(self, surfaceTriangulator:"IAgStkGraphicsSurfaceTriangulatorResult") -> None:
        """Defines the surface mesh using the specified surfaceTriangulator. The mesh is rendered in the primitive's reference frame."""
        return self._intf.invoke(IAgStkGraphicsSurfaceMeshPrimitive._metadata, IAgStkGraphicsSurfaceMeshPrimitive._Set_metadata, surfaceTriangulator)

    _SetWithoutTexturing_metadata = { "name" : "SetWithoutTexturing",
            "arg_types" : (agcom.PVOID,),
            "marshallers" : (agmarshall.AgInterface_in_arg("IAgStkGraphicsSurfaceTriangulatorResult"),) }
    def SetWithoutTexturing(self, surfaceTriangulator:"IAgStkGraphicsSurfaceTriangulatorResult") -> None:
        """Defines the surface mesh using the specified surfaceTriangulator. The mesh is rendered in the primitive's reference frame."""
        return self._intf.invoke(IAgStkGraphicsSurfaceMeshPrimitive._metadata, IAgStkGraphicsSurfaceMeshPrimitive._SetWithoutTexturing_metadata, surfaceTriangulator)

    _Supported_metadata = { "name" : "Supported",
            "arg_types" : (agcom.LONG, POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEStkGraphicsSurfaceMeshRenderingMethod), agmarshall.VARIANT_BOOL_arg,) }
    def Supported(self, renderingMethod:"AgEStkGraphicsSurfaceMeshRenderingMethod") -> bool:
        """Determines whether or not the video card supports the surface mesh primitive with the given renderingMethod."""
        return self._intf.invoke(IAgStkGraphicsSurfaceMeshPrimitive._metadata, IAgStkGraphicsSurfaceMeshPrimitive._Supported_metadata, renderingMethod, out_arg())

    _SupportedWithDefaultRenderingMethod_metadata = { "name" : "SupportedWithDefaultRenderingMethod",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    def SupportedWithDefaultRenderingMethod(self) -> bool:
        """Determines whether or not the video card supports the surface mesh primitive. This is equivalent to calling Supported with automatic."""
        return self._intf.invoke(IAgStkGraphicsSurfaceMeshPrimitive._metadata, IAgStkGraphicsSurfaceMeshPrimitive._SupportedWithDefaultRenderingMethod_metadata, out_arg())


agcls.AgClassCatalog.add_catalog_entry("{9f13f05b-9c30-4118-8d6b-ab331881aba6}", IAgStkGraphicsSurfaceMeshPrimitive)
agcls.AgTypeNameMap["IAgStkGraphicsSurfaceMeshPrimitive"] = IAgStkGraphicsSurfaceMeshPrimitive

class IAgStkGraphicsTerrainCollection(object):
    """A collection of terrain overlay objects."""
    _num_methods = 20
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{6dbd63a6-624b-4318-8fec-daf384f070c4}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_Count" : 1,
                             "get_IsReadOnly" : 2,
                             "Item" : 3,
                             "get__NewEnum" : 4,
                             "Contains" : 5,
                             "ContainsUriString" : 6,
                             "Remove" : 7,
                             "Clear" : 8,
                             "Add" : 9,
                             "AddAsync" : 10,
                             "IndexOf" : 11,
                             "IndexOfUriString" : 12,
                             "AddUriString" : 13,
                             "AddAsyncUriString" : 14,
                             "Swap" : 15,
                             "SwapByIndex" : 16,
                             "Move" : 17,
                             "MoveByIndex" : 18,
                             "BringToFront" : 19,
                             "SendToBack" : 20, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsTerrainCollection._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsTerrainCollection from source object.")
        self.__dict__["_enumerator"] = None
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsTerrainCollection.__dict__ and type(IAgStkGraphicsTerrainCollection.__dict__[attrname]) == property:
            return IAgStkGraphicsTerrainCollection.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsTerrainCollection.")
    def __iter__(self):
        self.__dict__["_enumerator"] = self._NewEnum
        self._enumerator.reset()
        return self
    def __next__(self) -> "IAgStkGraphicsTerrainOverlay":
        if self._enumerator is None:
            raise StopIteration
        nextval = self._enumerator.next()
        if nextval is None:
            raise StopIteration
        return nextval
    def Subscribe(self) -> IAgStkGraphicsTerrainCollectionEventHandler:
        """Returns an IAgStkGraphicsTerrainCollectionEventHandler that is subscribed to handle events associated with this instance of IAgStkGraphicsTerrainCollection."""
        return IAgStkGraphicsTerrainCollectionEventHandler(self._intf)
    
    _get_Count_metadata = { "name" : "Count",
            "arg_types" : (POINTER(agcom.INT),),
            "marshallers" : (agmarshall.INT_arg,) }
    @property
    def Count(self) -> int:
        """Gets the number of terrain overlay objects in the collection."""
        return self._intf.get_property(IAgStkGraphicsTerrainCollection._metadata, IAgStkGraphicsTerrainCollection._get_Count_metadata)

    _get_IsReadOnly_metadata = { "name" : "IsReadOnly",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def IsReadOnly(self) -> bool:
        """Gets whether or not the collection is read only."""
        return self._intf.get_property(IAgStkGraphicsTerrainCollection._metadata, IAgStkGraphicsTerrainCollection._get_IsReadOnly_metadata)

    _Item_metadata = { "name" : "Item",
            "arg_types" : (agcom.INT, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.INT_arg, agmarshall.AgInterface_out_arg,) }
    def Item(self, index:int) -> "IAgStkGraphicsTerrainOverlay":
        """Gets the terrain overlay at the specified index."""
        return self._intf.invoke(IAgStkGraphicsTerrainCollection._metadata, IAgStkGraphicsTerrainCollection._Item_metadata, index, out_arg())

    _get__NewEnum_metadata = { "name" : "_NewEnum",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.IEnumVARIANT_arg,) }
    @property
    def _NewEnum(self) -> enumerator_proxy:
        """Constructs an iterator that can be used to iterate the collection."""
        return self._intf.get_property(IAgStkGraphicsTerrainCollection._metadata, IAgStkGraphicsTerrainCollection._get__NewEnum_metadata)

    _Contains_metadata = { "name" : "Contains",
            "arg_types" : (agcom.PVOID, POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.AgInterface_in_arg("IAgStkGraphicsTerrainOverlay"), agmarshall.VARIANT_BOOL_arg,) }
    def Contains(self, terrainOverlay:"IAgStkGraphicsTerrainOverlay") -> bool:
        """Checks the presence of a terrain overlay in the collection."""
        return self._intf.invoke(IAgStkGraphicsTerrainCollection._metadata, IAgStkGraphicsTerrainCollection._Contains_metadata, terrainOverlay, out_arg())

    _ContainsUriString_metadata = { "name" : "ContainsUriString",
            "arg_types" : (agcom.BSTR, POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.VARIANT_BOOL_arg,) }
    def ContainsUriString(self, stringUri:str) -> bool:
        """Checks the presence of a terrain overlay with the specified Uri in the collection."""
        return self._intf.invoke(IAgStkGraphicsTerrainCollection._metadata, IAgStkGraphicsTerrainCollection._ContainsUriString_metadata, stringUri, out_arg())

    _Remove_metadata = { "name" : "Remove",
            "arg_types" : (agcom.PVOID, POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.AgInterface_in_arg("IAgStkGraphicsTerrainOverlay"), agmarshall.VARIANT_BOOL_arg,) }
    def Remove(self, terrainOverlay:"IAgStkGraphicsTerrainOverlay") -> bool:
        """Removes a terrain overlay from the collection."""
        return self._intf.invoke(IAgStkGraphicsTerrainCollection._metadata, IAgStkGraphicsTerrainCollection._Remove_metadata, terrainOverlay, out_arg())

    _Clear_metadata = { "name" : "Clear",
            "arg_types" : (),
            "marshallers" : () }
    def Clear(self) -> None:
        """Removes all terrain overlay objects from the collection."""
        return self._intf.invoke(IAgStkGraphicsTerrainCollection._metadata, IAgStkGraphicsTerrainCollection._Clear_metadata, )

    _Add_metadata = { "name" : "Add",
            "arg_types" : (agcom.PVOID,),
            "marshallers" : (agmarshall.AgInterface_in_arg("IAgStkGraphicsTerrainOverlay"),) }
    def Add(self, terrainOverlay:"IAgStkGraphicsTerrainOverlay") -> None:
        """Adds terrainOverlay to the collection."""
        return self._intf.invoke(IAgStkGraphicsTerrainCollection._metadata, IAgStkGraphicsTerrainCollection._Add_metadata, terrainOverlay)

    _AddAsync_metadata = { "name" : "AddAsync",
            "arg_types" : (agcom.PVOID,),
            "marshallers" : (agmarshall.AgInterface_in_arg("IAgStkGraphicsTerrainOverlay"),) }
    def AddAsync(self, terrainOverlay:"IAgStkGraphicsTerrainOverlay") -> None:
        """Adds terrainOverlay to the collection asynchronously."""
        return self._intf.invoke(IAgStkGraphicsTerrainCollection._metadata, IAgStkGraphicsTerrainCollection._AddAsync_metadata, terrainOverlay)

    _IndexOf_metadata = { "name" : "IndexOf",
            "arg_types" : (agcom.PVOID, POINTER(agcom.INT),),
            "marshallers" : (agmarshall.AgInterface_in_arg("IAgStkGraphicsTerrainOverlay"), agmarshall.INT_arg,) }
    def IndexOf(self, terrainOverlay:"IAgStkGraphicsTerrainOverlay") -> int:
        """Gets the index of the specified terrain overlay."""
        return self._intf.invoke(IAgStkGraphicsTerrainCollection._metadata, IAgStkGraphicsTerrainCollection._IndexOf_metadata, terrainOverlay, out_arg())

    _IndexOfUriString_metadata = { "name" : "IndexOfUriString",
            "arg_types" : (agcom.BSTR, POINTER(agcom.INT),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.INT_arg,) }
    def IndexOfUriString(self, stringUri:str) -> int:
        """Gets the index of the terrain overlay with the specified Uri."""
        return self._intf.invoke(IAgStkGraphicsTerrainCollection._metadata, IAgStkGraphicsTerrainCollection._IndexOfUriString_metadata, stringUri, out_arg())

    _AddUriString_metadata = { "name" : "AddUriString",
            "arg_types" : (agcom.BSTR, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.AgInterface_out_arg,) }
    def AddUriString(self, uri:str) -> "IAgStkGraphicsTerrainOverlay":
        """Creates a terrain overlay from the uri, which represents a uri, and adds it to the collection."""
        return self._intf.invoke(IAgStkGraphicsTerrainCollection._metadata, IAgStkGraphicsTerrainCollection._AddUriString_metadata, uri, out_arg())

    _AddAsyncUriString_metadata = { "name" : "AddAsyncUriString",
            "arg_types" : (agcom.BSTR, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.AgInterface_out_arg,) }
    def AddAsyncUriString(self, uri:str) -> "IAgStkGraphicsTerrainOverlay":
        """Creates a terrain overlay from the uri, which represents a uri, and adds it to the collection asynchronously."""
        return self._intf.invoke(IAgStkGraphicsTerrainCollection._metadata, IAgStkGraphicsTerrainCollection._AddAsyncUriString_metadata, uri, out_arg())

    _Swap_metadata = { "name" : "Swap",
            "arg_types" : (agcom.PVOID, agcom.PVOID,),
            "marshallers" : (agmarshall.AgInterface_in_arg("IAgStkGraphicsTerrainOverlay"), agmarshall.AgInterface_in_arg("IAgStkGraphicsTerrainOverlay"),) }
    def Swap(self, terrainOverlay1:"IAgStkGraphicsTerrainOverlay", terrainOverlay2:"IAgStkGraphicsTerrainOverlay") -> None:
        """Swaps the position of two terrain overlay objects."""
        return self._intf.invoke(IAgStkGraphicsTerrainCollection._metadata, IAgStkGraphicsTerrainCollection._Swap_metadata, terrainOverlay1, terrainOverlay2)

    _SwapByIndex_metadata = { "name" : "SwapByIndex",
            "arg_types" : (agcom.INT, agcom.INT,),
            "marshallers" : (agmarshall.INT_arg, agmarshall.INT_arg,) }
    def SwapByIndex(self, index1:int, index2:int) -> None:
        """Swaps the position of two terrain overlay objects at the specified indices."""
        return self._intf.invoke(IAgStkGraphicsTerrainCollection._metadata, IAgStkGraphicsTerrainCollection._SwapByIndex_metadata, index1, index2)

    _Move_metadata = { "name" : "Move",
            "arg_types" : (agcom.PVOID, agcom.INT,),
            "marshallers" : (agmarshall.AgInterface_in_arg("IAgStkGraphicsTerrainOverlay"), agmarshall.INT_arg,) }
    def Move(self, terrainOverlay:"IAgStkGraphicsTerrainOverlay", newPosition:int) -> None:
        """Moves the terrain overlay to the specified position."""
        return self._intf.invoke(IAgStkGraphicsTerrainCollection._metadata, IAgStkGraphicsTerrainCollection._Move_metadata, terrainOverlay, newPosition)

    _MoveByIndex_metadata = { "name" : "MoveByIndex",
            "arg_types" : (agcom.INT, agcom.INT,),
            "marshallers" : (agmarshall.INT_arg, agmarshall.INT_arg,) }
    def MoveByIndex(self, index:int, newPosition:int) -> None:
        """Moves the terrain overlay at the specified index to the specified position."""
        return self._intf.invoke(IAgStkGraphicsTerrainCollection._metadata, IAgStkGraphicsTerrainCollection._MoveByIndex_metadata, index, newPosition)

    _BringToFront_metadata = { "name" : "BringToFront",
            "arg_types" : (agcom.PVOID,),
            "marshallers" : (agmarshall.AgInterface_in_arg("IAgStkGraphicsTerrainOverlay"),) }
    def BringToFront(self, terrainOverlay:"IAgStkGraphicsTerrainOverlay") -> None:
        """Brings the terrain overlay to the front of the collection so it is rendered first or on the bottom."""
        return self._intf.invoke(IAgStkGraphicsTerrainCollection._metadata, IAgStkGraphicsTerrainCollection._BringToFront_metadata, terrainOverlay)

    _SendToBack_metadata = { "name" : "SendToBack",
            "arg_types" : (agcom.PVOID,),
            "marshallers" : (agmarshall.AgInterface_in_arg("IAgStkGraphicsTerrainOverlay"),) }
    def SendToBack(self, terrainOverlay:"IAgStkGraphicsTerrainOverlay") -> None:
        """Sends the terrain overlay to the back of the collection so it is rendered last or on the top."""
        return self._intf.invoke(IAgStkGraphicsTerrainCollection._metadata, IAgStkGraphicsTerrainCollection._SendToBack_metadata, terrainOverlay)

    __getitem__ = Item



agcls.AgClassCatalog.add_catalog_entry("{6dbd63a6-624b-4318-8fec-daf384f070c4}", IAgStkGraphicsTerrainCollection)
agcls.AgTypeNameMap["IAgStkGraphicsTerrainCollection"] = IAgStkGraphicsTerrainCollection

class IAgStkGraphicsTerrainOverlay(object):
    """A globe overlay which shows terrain."""
    _num_methods = 5
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{dfe57e34-7b31-4360-a7a8-8db856882670}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_AltitudeOffset" : 1,
                             "set_AltitudeOffset" : 2,
                             "get_AltitudeScale" : 3,
                             "set_AltitudeScale" : 4,
                             "get_Supported" : 5, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsTerrainOverlay._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsTerrainOverlay from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsTerrainOverlay.__dict__ and type(IAgStkGraphicsTerrainOverlay.__dict__[attrname]) == property:
            return IAgStkGraphicsTerrainOverlay.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsTerrainOverlay.")
    
    _get_AltitudeOffset_metadata = { "name" : "AltitudeOffset",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def AltitudeOffset(self) -> float:
        """Gets or sets the value from which to offset the terrain height."""
        return self._intf.get_property(IAgStkGraphicsTerrainOverlay._metadata, IAgStkGraphicsTerrainOverlay._get_AltitudeOffset_metadata)

    _set_AltitudeOffset_metadata = { "name" : "AltitudeOffset",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @AltitudeOffset.setter
    def AltitudeOffset(self, altitudeOffset:float) -> None:
        return self._intf.set_property(IAgStkGraphicsTerrainOverlay._metadata, IAgStkGraphicsTerrainOverlay._set_AltitudeOffset_metadata, altitudeOffset)

    _get_AltitudeScale_metadata = { "name" : "AltitudeScale",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def AltitudeScale(self) -> float:
        """Gets or sets the value from which to scale the terrain height."""
        return self._intf.get_property(IAgStkGraphicsTerrainOverlay._metadata, IAgStkGraphicsTerrainOverlay._get_AltitudeScale_metadata)

    _set_AltitudeScale_metadata = { "name" : "AltitudeScale",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @AltitudeScale.setter
    def AltitudeScale(self, altitudeScale:float) -> None:
        return self._intf.set_property(IAgStkGraphicsTerrainOverlay._metadata, IAgStkGraphicsTerrainOverlay._set_AltitudeScale_metadata, altitudeScale)

    _get_Supported_metadata = { "name" : "Supported",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def Supported(self) -> bool:
        """Gets whether the video card supports adding terrain overlay objects. Video cards that support OpenGL 1.2 or higher support terrain overlay objects."""
        return self._intf.get_property(IAgStkGraphicsTerrainOverlay._metadata, IAgStkGraphicsTerrainOverlay._get_Supported_metadata)


agcls.AgClassCatalog.add_catalog_entry("{dfe57e34-7b31-4360-a7a8-8db856882670}", IAgStkGraphicsTerrainOverlay)
agcls.AgTypeNameMap["IAgStkGraphicsTerrainOverlay"] = IAgStkGraphicsTerrainOverlay

class IAgStkGraphicsTextBatchPrimitive(object):
    """ Renders one or more strings in the 3D scene.  For best performance, avoid creating lots of batches with only a few strings each. See the Batching Performance Overview. """
    _num_methods = 32
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{037722fb-c0e5-4052-b34d-60aa662b5d2b}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_SetHint" : 1,
                             "get_BoundingSphereScale" : 2,
                             "set_BoundingSphereScale" : 3,
                             "get_Font" : 4,
                             "get_OutlineColor" : 5,
                             "set_OutlineColor" : 6,
                             "get_OutlineTranslucency" : 7,
                             "set_OutlineTranslucency" : 8,
                             "get_AlignToPixel" : 9,
                             "set_AlignToPixel" : 10,
                             "get_DistanceDisplayConditionPerString" : 11,
                             "set_DistanceDisplayConditionPerString" : 12,
                             "get_PerItemPickingEnabled" : 13,
                             "set_PerItemPickingEnabled" : 14,
                             "get_TextureFilter" : 15,
                             "set_TextureFilter" : 16,
                             "Set" : 17,
                             "SetWithOptionalParameters" : 18,
                             "SetWithOptionalParametersAndRenderPass" : 19,
                             "SetCartographic" : 20,
                             "SetCartographicWithOptionalParameters" : 21,
                             "SetCartographicWithOptionalParametersAndRenderPass" : 22,
                             "SetPartial" : 23,
                             "SetPartialWithIndicesOrder" : 24,
                             "SetPartialWithOptionalParameters" : 25,
                             "SetPartialWithOptionalParametersIndicesOrderAndRenderPass" : 26,
                             "SetPartialCartographic" : 27,
                             "SetPartialCartographicWithIndicesOrder" : 28,
                             "SetPartialCartographicWithOptionalParameters" : 29,
                             "SetPartialCartographicWithOptionalParametersIndicesOrderAndRenderPass" : 30,
                             "get_RenderInScreenSpace" : 31,
                             "set_RenderInScreenSpace" : 32, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsTextBatchPrimitive._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsTextBatchPrimitive from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsTextBatchPrimitive.__dict__ and type(IAgStkGraphicsTextBatchPrimitive.__dict__[attrname]) == property:
            return IAgStkGraphicsTextBatchPrimitive.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsTextBatchPrimitive.")
    
    _get_SetHint_metadata = { "name" : "SetHint",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEStkGraphicsSetHint),) }
    @property
    def SetHint(self) -> "AgEStkGraphicsSetHint":
        """Gets the primitive's set hint. See the Set Hint Performance Overview for selecting an appropriate value to construct the primitive with."""
        return self._intf.get_property(IAgStkGraphicsTextBatchPrimitive._metadata, IAgStkGraphicsTextBatchPrimitive._get_SetHint_metadata)

    _get_BoundingSphereScale_metadata = { "name" : "BoundingSphereScale",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def BoundingSphereScale(self) -> float:
        """Gets or sets the scale applied to the radius of this primitive's bounding sphere."""
        return self._intf.get_property(IAgStkGraphicsTextBatchPrimitive._metadata, IAgStkGraphicsTextBatchPrimitive._get_BoundingSphereScale_metadata)

    _set_BoundingSphereScale_metadata = { "name" : "BoundingSphereScale",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @BoundingSphereScale.setter
    def BoundingSphereScale(self, boundingSphereScale:float) -> None:
        return self._intf.set_property(IAgStkGraphicsTextBatchPrimitive._metadata, IAgStkGraphicsTextBatchPrimitive._set_BoundingSphereScale_metadata, boundingSphereScale)

    _get_Font_metadata = { "name" : "Font",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def Font(self) -> "IAgStkGraphicsGraphicsFont":
        """Gets the font used to render the text batch."""
        return self._intf.get_property(IAgStkGraphicsTextBatchPrimitive._metadata, IAgStkGraphicsTextBatchPrimitive._get_Font_metadata)

    _get_OutlineColor_metadata = { "name" : "OutlineColor",
            "arg_types" : (POINTER(agcom.OLE_COLOR),),
            "marshallers" : (agmarshall.OLE_COLOR_arg,) }
    @property
    def OutlineColor(self) -> agcolor.Color:
        """Gets or sets the text's outline color."""
        return self._intf.get_property(IAgStkGraphicsTextBatchPrimitive._metadata, IAgStkGraphicsTextBatchPrimitive._get_OutlineColor_metadata)

    _set_OutlineColor_metadata = { "name" : "OutlineColor",
            "arg_types" : (agcom.OLE_COLOR,),
            "marshallers" : (agmarshall.OLE_COLOR_arg,) }
    @OutlineColor.setter
    def OutlineColor(self, outlineColor:agcolor.Color) -> None:
        return self._intf.set_property(IAgStkGraphicsTextBatchPrimitive._metadata, IAgStkGraphicsTextBatchPrimitive._set_OutlineColor_metadata, outlineColor)

    _get_OutlineTranslucency_metadata = { "name" : "OutlineTranslucency",
            "arg_types" : (POINTER(agcom.FLOAT),),
            "marshallers" : (agmarshall.FLOAT_arg,) }
    @property
    def OutlineTranslucency(self) -> float:
        """Gets or sets the text's outline translucency. Translucency is between 0 and 1, where 0 is opaque and 1 is transparent."""
        return self._intf.get_property(IAgStkGraphicsTextBatchPrimitive._metadata, IAgStkGraphicsTextBatchPrimitive._get_OutlineTranslucency_metadata)

    _set_OutlineTranslucency_metadata = { "name" : "OutlineTranslucency",
            "arg_types" : (agcom.FLOAT,),
            "marshallers" : (agmarshall.FLOAT_arg,) }
    @OutlineTranslucency.setter
    def OutlineTranslucency(self, outlineTranslucency:float) -> None:
        return self._intf.set_property(IAgStkGraphicsTextBatchPrimitive._metadata, IAgStkGraphicsTextBatchPrimitive._set_OutlineTranslucency_metadata, outlineTranslucency)

    _get_AlignToPixel_metadata = { "name" : "AlignToPixel",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def AlignToPixel(self) -> bool:
        """Gets or sets whether the screen space position of each string is aligned to a pixel."""
        return self._intf.get_property(IAgStkGraphicsTextBatchPrimitive._metadata, IAgStkGraphicsTextBatchPrimitive._get_AlignToPixel_metadata)

    _set_AlignToPixel_metadata = { "name" : "AlignToPixel",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @AlignToPixel.setter
    def AlignToPixel(self, alignToPixel:bool) -> None:
        return self._intf.set_property(IAgStkGraphicsTextBatchPrimitive._metadata, IAgStkGraphicsTextBatchPrimitive._set_AlignToPixel_metadata, alignToPixel)

    _get_DistanceDisplayConditionPerString_metadata = { "name" : "DistanceDisplayConditionPerString",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def DistanceDisplayConditionPerString(self) -> "IAgStkGraphicsDistanceDisplayCondition":
        """Gets or sets a distance display condition that is evaluated per string in the text batch during rendering. This is different than display condition, which is evaluated once for the entire text batch..."""
        return self._intf.get_property(IAgStkGraphicsTextBatchPrimitive._metadata, IAgStkGraphicsTextBatchPrimitive._get_DistanceDisplayConditionPerString_metadata)

    _set_DistanceDisplayConditionPerString_metadata = { "name" : "DistanceDisplayConditionPerString",
            "arg_types" : (agcom.PVOID,),
            "marshallers" : (agmarshall.AgInterface_in_arg("IAgStkGraphicsDistanceDisplayCondition"),) }
    @DistanceDisplayConditionPerString.setter
    def DistanceDisplayConditionPerString(self, distanceDisplayConditionPerString:"IAgStkGraphicsDistanceDisplayCondition") -> None:
        return self._intf.set_property(IAgStkGraphicsTextBatchPrimitive._metadata, IAgStkGraphicsTextBatchPrimitive._set_DistanceDisplayConditionPerString_metadata, distanceDisplayConditionPerString)

    _get_PerItemPickingEnabled_metadata = { "name" : "PerItemPickingEnabled",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def PerItemPickingEnabled(self) -> bool:
        """Gets or sets whether individual text indices will be included in the pick results returned from the scene's Pick method. Each text index that is picked will be returned as a batch primitive index."""
        return self._intf.get_property(IAgStkGraphicsTextBatchPrimitive._metadata, IAgStkGraphicsTextBatchPrimitive._get_PerItemPickingEnabled_metadata)

    _set_PerItemPickingEnabled_metadata = { "name" : "PerItemPickingEnabled",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @PerItemPickingEnabled.setter
    def PerItemPickingEnabled(self, perItemPickingEnabled:bool) -> None:
        return self._intf.set_property(IAgStkGraphicsTextBatchPrimitive._metadata, IAgStkGraphicsTextBatchPrimitive._set_PerItemPickingEnabled_metadata, perItemPickingEnabled)

    _get_TextureFilter_metadata = { "name" : "TextureFilter",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def TextureFilter(self) -> "IAgStkGraphicsTextureFilter2D":
        """Gets or sets the filter used to filter the texture-based font."""
        return self._intf.get_property(IAgStkGraphicsTextBatchPrimitive._metadata, IAgStkGraphicsTextBatchPrimitive._get_TextureFilter_metadata)

    _set_TextureFilter_metadata = { "name" : "TextureFilter",
            "arg_types" : (agcom.PVOID,),
            "marshallers" : (agmarshall.AgInterface_in_arg("IAgStkGraphicsTextureFilter2D"),) }
    @TextureFilter.setter
    def TextureFilter(self, textureFilter:"IAgStkGraphicsTextureFilter2D") -> None:
        return self._intf.set_property(IAgStkGraphicsTextBatchPrimitive._metadata, IAgStkGraphicsTextBatchPrimitive._set_TextureFilter_metadata, textureFilter)

    _Set_metadata = { "name" : "Set",
            "arg_types" : (POINTER(agcom.LPSAFEARRAY), POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg, agmarshall.LPSAFEARRAY_arg,) }
    def Set(self, positions:list, text:list) -> None:
        """Defines the positions and text of strings in a text batch. The strings are rendered in the primitive's reference frame."""
        return self._intf.invoke(IAgStkGraphicsTextBatchPrimitive._metadata, IAgStkGraphicsTextBatchPrimitive._Set_metadata, positions, text)

    _SetWithOptionalParameters_metadata = { "name" : "SetWithOptionalParameters",
            "arg_types" : (POINTER(agcom.LPSAFEARRAY), POINTER(agcom.LPSAFEARRAY), agcom.PVOID,),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg, agmarshall.LPSAFEARRAY_arg, agmarshall.AgInterface_in_arg("IAgStkGraphicsTextBatchPrimitiveOptionalParameters"),) }
    def SetWithOptionalParameters(self, positions:list, text:list, optionalParameters:"IAgStkGraphicsTextBatchPrimitiveOptionalParameters") -> None:
        """Defines the positions, text, and optional parameters of strings in a text batch. The strings are rendered in the primitive's reference frame."""
        return self._intf.invoke(IAgStkGraphicsTextBatchPrimitive._metadata, IAgStkGraphicsTextBatchPrimitive._SetWithOptionalParameters_metadata, positions, text, optionalParameters)

    _SetWithOptionalParametersAndRenderPass_metadata = { "name" : "SetWithOptionalParametersAndRenderPass",
            "arg_types" : (POINTER(agcom.LPSAFEARRAY), POINTER(agcom.LPSAFEARRAY), agcom.PVOID, agcom.LONG,),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg, agmarshall.LPSAFEARRAY_arg, agmarshall.AgInterface_in_arg("IAgStkGraphicsTextBatchPrimitiveOptionalParameters"), agmarshall.AgEnum_arg(AgEStkGraphicsRenderPassHint),) }
    def SetWithOptionalParametersAndRenderPass(self, positions:list, text:list, optionalParameters:"IAgStkGraphicsTextBatchPrimitiveOptionalParameters", renderPassHint:"AgEStkGraphicsRenderPassHint") -> None:
        """Defines the positions, text, and optional parameters of strings in a text batch. The strings are rendered in the primitive's reference frame. renderPassHint is provided for efficiency."""
        return self._intf.invoke(IAgStkGraphicsTextBatchPrimitive._metadata, IAgStkGraphicsTextBatchPrimitive._SetWithOptionalParametersAndRenderPass_metadata, positions, text, optionalParameters, renderPassHint)

    _SetCartographic_metadata = { "name" : "SetCartographic",
            "arg_types" : (agcom.BSTR, POINTER(agcom.LPSAFEARRAY), POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.LPSAFEARRAY_arg, agmarshall.LPSAFEARRAY_arg,) }
    def SetCartographic(self, centralBody:str, positions:list, text:list) -> None:
        """For convenience. Defines the positions and text of strings in a text batch using cartographic positions. This is equivalent to converting each position in positions to cartesian and calling Set."""
        return self._intf.invoke(IAgStkGraphicsTextBatchPrimitive._metadata, IAgStkGraphicsTextBatchPrimitive._SetCartographic_metadata, centralBody, positions, text)

    _SetCartographicWithOptionalParameters_metadata = { "name" : "SetCartographicWithOptionalParameters",
            "arg_types" : (agcom.BSTR, POINTER(agcom.LPSAFEARRAY), POINTER(agcom.LPSAFEARRAY), agcom.PVOID,),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.LPSAFEARRAY_arg, agmarshall.LPSAFEARRAY_arg, agmarshall.AgInterface_in_arg("IAgStkGraphicsTextBatchPrimitiveOptionalParameters"),) }
    def SetCartographicWithOptionalParameters(self, centralBody:str, positions:list, text:list, optionalParameters:"IAgStkGraphicsTextBatchPrimitiveOptionalParameters") -> None:
        """For convenience. Defines the positions, text, and optional parameters of strings in a text batch using cartographic positions. This is equivalent to converting each position in positions to cartesian and calling Set."""
        return self._intf.invoke(IAgStkGraphicsTextBatchPrimitive._metadata, IAgStkGraphicsTextBatchPrimitive._SetCartographicWithOptionalParameters_metadata, centralBody, positions, text, optionalParameters)

    _SetCartographicWithOptionalParametersAndRenderPass_metadata = { "name" : "SetCartographicWithOptionalParametersAndRenderPass",
            "arg_types" : (agcom.BSTR, POINTER(agcom.LPSAFEARRAY), POINTER(agcom.LPSAFEARRAY), agcom.PVOID, agcom.LONG,),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.LPSAFEARRAY_arg, agmarshall.LPSAFEARRAY_arg, agmarshall.AgInterface_in_arg("IAgStkGraphicsTextBatchPrimitiveOptionalParameters"), agmarshall.AgEnum_arg(AgEStkGraphicsRenderPassHint),) }
    def SetCartographicWithOptionalParametersAndRenderPass(self, centralBody:str, positions:list, text:list, optionalParameters:"IAgStkGraphicsTextBatchPrimitiveOptionalParameters", renderPassHint:"AgEStkGraphicsRenderPassHint") -> None:
        """For convenience. Defines the positions, text, and optional parameters of strings in a text batch using cartographic positions. This is equivalent to converting each position in positions to cartesian and calling Set."""
        return self._intf.invoke(IAgStkGraphicsTextBatchPrimitive._metadata, IAgStkGraphicsTextBatchPrimitive._SetCartographicWithOptionalParametersAndRenderPass_metadata, centralBody, positions, text, optionalParameters, renderPassHint)

    _SetPartial_metadata = { "name" : "SetPartial",
            "arg_types" : (POINTER(agcom.LPSAFEARRAY), POINTER(agcom.LPSAFEARRAY), POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg, agmarshall.LPSAFEARRAY_arg, agmarshall.LPSAFEARRAY_arg,) }
    def SetPartial(self, positions:list, text:list, indices:list) -> None:
        """Updates a subset of positions and/or text in a text batch."""
        return self._intf.invoke(IAgStkGraphicsTextBatchPrimitive._metadata, IAgStkGraphicsTextBatchPrimitive._SetPartial_metadata, positions, text, indices)

    _SetPartialWithIndicesOrder_metadata = { "name" : "SetPartialWithIndicesOrder",
            "arg_types" : (POINTER(agcom.LPSAFEARRAY), POINTER(agcom.LPSAFEARRAY), POINTER(agcom.LPSAFEARRAY), agcom.LONG,),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg, agmarshall.LPSAFEARRAY_arg, agmarshall.LPSAFEARRAY_arg, agmarshall.AgEnum_arg(AgEStkGraphicsIndicesOrderHint),) }
    def SetPartialWithIndicesOrder(self, positions:list, text:list, indices:list, indicesOrderHint:"AgEStkGraphicsIndicesOrderHint") -> None:
        """Updates a subset of positions and/or text in a text batch."""
        return self._intf.invoke(IAgStkGraphicsTextBatchPrimitive._metadata, IAgStkGraphicsTextBatchPrimitive._SetPartialWithIndicesOrder_metadata, positions, text, indices, indicesOrderHint)

    _SetPartialWithOptionalParameters_metadata = { "name" : "SetPartialWithOptionalParameters",
            "arg_types" : (POINTER(agcom.LPSAFEARRAY), POINTER(agcom.LPSAFEARRAY), agcom.PVOID, POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg, agmarshall.LPSAFEARRAY_arg, agmarshall.AgInterface_in_arg("IAgStkGraphicsTextBatchPrimitiveOptionalParameters"), agmarshall.LPSAFEARRAY_arg,) }
    def SetPartialWithOptionalParameters(self, positions:list, text:list, optionalParameters:"IAgStkGraphicsTextBatchPrimitiveOptionalParameters", indices:list) -> None:
        """Updates a subset of positions, text, and/or optional per-string parameters in a text batch."""
        return self._intf.invoke(IAgStkGraphicsTextBatchPrimitive._metadata, IAgStkGraphicsTextBatchPrimitive._SetPartialWithOptionalParameters_metadata, positions, text, optionalParameters, indices)

    _SetPartialWithOptionalParametersIndicesOrderAndRenderPass_metadata = { "name" : "SetPartialWithOptionalParametersIndicesOrderAndRenderPass",
            "arg_types" : (POINTER(agcom.LPSAFEARRAY), POINTER(agcom.LPSAFEARRAY), agcom.PVOID, POINTER(agcom.LPSAFEARRAY), agcom.LONG, agcom.LONG,),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg, agmarshall.LPSAFEARRAY_arg, agmarshall.AgInterface_in_arg("IAgStkGraphicsTextBatchPrimitiveOptionalParameters"), agmarshall.LPSAFEARRAY_arg, agmarshall.AgEnum_arg(AgEStkGraphicsIndicesOrderHint), agmarshall.AgEnum_arg(AgEStkGraphicsRenderPassHint),) }
    def SetPartialWithOptionalParametersIndicesOrderAndRenderPass(self, positions:list, text:list, optionalParameters:"IAgStkGraphicsTextBatchPrimitiveOptionalParameters", indices:list, indicesOrderHint:"AgEStkGraphicsIndicesOrderHint", renderPassHint:"AgEStkGraphicsRenderPassHint") -> None:
        """Updates a subset of positions, text, and/or optional per-string parameters in a text batch."""
        return self._intf.invoke(IAgStkGraphicsTextBatchPrimitive._metadata, IAgStkGraphicsTextBatchPrimitive._SetPartialWithOptionalParametersIndicesOrderAndRenderPass_metadata, positions, text, optionalParameters, indices, indicesOrderHint, renderPassHint)

    _SetPartialCartographic_metadata = { "name" : "SetPartialCartographic",
            "arg_types" : (agcom.BSTR, POINTER(agcom.LPSAFEARRAY), POINTER(agcom.LPSAFEARRAY), POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.LPSAFEARRAY_arg, agmarshall.LPSAFEARRAY_arg, agmarshall.LPSAFEARRAY_arg,) }
    def SetPartialCartographic(self, centralBody:str, positions:list, text:list, indices:list) -> None:
        """For convenience. Updates a subset of positions and/or text in a text batch using cartographic positions. This is equivalent to converting each position in positions to cartesian and calling SetPartial."""
        return self._intf.invoke(IAgStkGraphicsTextBatchPrimitive._metadata, IAgStkGraphicsTextBatchPrimitive._SetPartialCartographic_metadata, centralBody, positions, text, indices)

    _SetPartialCartographicWithIndicesOrder_metadata = { "name" : "SetPartialCartographicWithIndicesOrder",
            "arg_types" : (agcom.BSTR, POINTER(agcom.LPSAFEARRAY), POINTER(agcom.LPSAFEARRAY), POINTER(agcom.LPSAFEARRAY), agcom.LONG,),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.LPSAFEARRAY_arg, agmarshall.LPSAFEARRAY_arg, agmarshall.LPSAFEARRAY_arg, agmarshall.AgEnum_arg(AgEStkGraphicsIndicesOrderHint),) }
    def SetPartialCartographicWithIndicesOrder(self, centralBody:str, positions:list, text:list, indices:list, indicesOrderHint:"AgEStkGraphicsIndicesOrderHint") -> None:
        """For convenience. Updates a subset of positions and/or text in a text batch using cartographic positions. This is equivalent to converting each position in positions to cartesian and calling SetPartial."""
        return self._intf.invoke(IAgStkGraphicsTextBatchPrimitive._metadata, IAgStkGraphicsTextBatchPrimitive._SetPartialCartographicWithIndicesOrder_metadata, centralBody, positions, text, indices, indicesOrderHint)

    _SetPartialCartographicWithOptionalParameters_metadata = { "name" : "SetPartialCartographicWithOptionalParameters",
            "arg_types" : (agcom.BSTR, POINTER(agcom.LPSAFEARRAY), POINTER(agcom.LPSAFEARRAY), agcom.PVOID, POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.LPSAFEARRAY_arg, agmarshall.LPSAFEARRAY_arg, agmarshall.AgInterface_in_arg("IAgStkGraphicsTextBatchPrimitiveOptionalParameters"), agmarshall.LPSAFEARRAY_arg,) }
    def SetPartialCartographicWithOptionalParameters(self, centralBody:str, positions:list, text:list, optionalParameters:"IAgStkGraphicsTextBatchPrimitiveOptionalParameters", indices:list) -> None:
        """For convenience. Updates a subset of positions, text, and/or per-string parameters in a text batch using cartographic positions. This is equivalent to converting each position in positions to cartesian and calling SetPartial."""
        return self._intf.invoke(IAgStkGraphicsTextBatchPrimitive._metadata, IAgStkGraphicsTextBatchPrimitive._SetPartialCartographicWithOptionalParameters_metadata, centralBody, positions, text, optionalParameters, indices)

    _SetPartialCartographicWithOptionalParametersIndicesOrderAndRenderPass_metadata = { "name" : "SetPartialCartographicWithOptionalParametersIndicesOrderAndRenderPass",
            "arg_types" : (agcom.BSTR, POINTER(agcom.LPSAFEARRAY), POINTER(agcom.LPSAFEARRAY), agcom.PVOID, POINTER(agcom.LPSAFEARRAY), agcom.LONG, agcom.LONG,),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.LPSAFEARRAY_arg, agmarshall.LPSAFEARRAY_arg, agmarshall.AgInterface_in_arg("IAgStkGraphicsTextBatchPrimitiveOptionalParameters"), agmarshall.LPSAFEARRAY_arg, agmarshall.AgEnum_arg(AgEStkGraphicsIndicesOrderHint), agmarshall.AgEnum_arg(AgEStkGraphicsRenderPassHint),) }
    def SetPartialCartographicWithOptionalParametersIndicesOrderAndRenderPass(self, centralBody:str, positions:list, text:list, optionalParameters:"IAgStkGraphicsTextBatchPrimitiveOptionalParameters", indices:list, indicesOrderHint:"AgEStkGraphicsIndicesOrderHint", renderPassHint:"AgEStkGraphicsRenderPassHint") -> None:
        """For convenience. Updates a subset of positions, text, and/or per-string parameters in a text batch using cartographic positions. This is equivalent to converting each position in positions to cartesian and calling SetPartial."""
        return self._intf.invoke(IAgStkGraphicsTextBatchPrimitive._metadata, IAgStkGraphicsTextBatchPrimitive._SetPartialCartographicWithOptionalParametersIndicesOrderAndRenderPass_metadata, centralBody, positions, text, optionalParameters, indices, indicesOrderHint, renderPassHint)

    _get_RenderInScreenSpace_metadata = { "name" : "RenderInScreenSpace",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def RenderInScreenSpace(self) -> bool:
        """Gets or sets whether the primitive is positioned and rendered in screen space coordinates."""
        return self._intf.get_property(IAgStkGraphicsTextBatchPrimitive._metadata, IAgStkGraphicsTextBatchPrimitive._get_RenderInScreenSpace_metadata)

    _set_RenderInScreenSpace_metadata = { "name" : "RenderInScreenSpace",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @RenderInScreenSpace.setter
    def RenderInScreenSpace(self, renderInScreenSpace:bool) -> None:
        return self._intf.set_property(IAgStkGraphicsTextBatchPrimitive._metadata, IAgStkGraphicsTextBatchPrimitive._set_RenderInScreenSpace_metadata, renderInScreenSpace)


agcls.AgClassCatalog.add_catalog_entry("{037722fb-c0e5-4052-b34d-60aa662b5d2b}", IAgStkGraphicsTextBatchPrimitive)
agcls.AgTypeNameMap["IAgStkGraphicsTextBatchPrimitive"] = IAgStkGraphicsTextBatchPrimitive

class IAgStkGraphicsTextBatchPrimitiveOptionalParameters(object):
    """Optional per-string and per-batch parameters for text batch primitive..."""
    _num_methods = 14
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{e18b012f-840d-4f32-8810-dd253c38ce7f}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_Origin" : 1,
                             "set_Origin" : 2,
                             "get_EyeOffset" : 3,
                             "set_EyeOffset" : 4,
                             "get_PixelOffset" : 5,
                             "set_PixelOffset" : 6,
                             "get_MaximumStringLength" : 7,
                             "set_MaximumStringLength" : 8,
                             "SetOrigins" : 9,
                             "SetEyeOffsets" : 10,
                             "SetPixelOffsets" : 11,
                             "SetColors" : 12,
                             "get_ScreenSpaceRendering" : 13,
                             "set_ScreenSpaceRendering" : 14, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsTextBatchPrimitiveOptionalParameters._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsTextBatchPrimitiveOptionalParameters from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsTextBatchPrimitiveOptionalParameters.__dict__ and type(IAgStkGraphicsTextBatchPrimitiveOptionalParameters.__dict__[attrname]) == property:
            return IAgStkGraphicsTextBatchPrimitiveOptionalParameters.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsTextBatchPrimitiveOptionalParameters.")
    
    _get_Origin_metadata = { "name" : "Origin",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEStkGraphicsOrigin),) }
    @property
    def Origin(self) -> "AgEStkGraphicsOrigin":
        """Gets or sets the per-batch origin, which is applied to each string in the text batch."""
        return self._intf.get_property(IAgStkGraphicsTextBatchPrimitiveOptionalParameters._metadata, IAgStkGraphicsTextBatchPrimitiveOptionalParameters._get_Origin_metadata)

    _set_Origin_metadata = { "name" : "Origin",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEStkGraphicsOrigin),) }
    @Origin.setter
    def Origin(self, origin:"AgEStkGraphicsOrigin") -> None:
        return self._intf.set_property(IAgStkGraphicsTextBatchPrimitiveOptionalParameters._metadata, IAgStkGraphicsTextBatchPrimitiveOptionalParameters._set_Origin_metadata, origin)

    _get_EyeOffset_metadata = { "name" : "EyeOffset",
            "arg_types" : (POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg,) }
    @property
    def EyeOffset(self) -> list:
        """Gets or sets the per-batch eye offset, which is applied to each string in the text batch. The array contains the components of the offset arranged in the order x, y, z."""
        return self._intf.get_property(IAgStkGraphicsTextBatchPrimitiveOptionalParameters._metadata, IAgStkGraphicsTextBatchPrimitiveOptionalParameters._get_EyeOffset_metadata)

    _set_EyeOffset_metadata = { "name" : "EyeOffset",
            "arg_types" : (agcom.LPSAFEARRAY,),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg,) }
    @EyeOffset.setter
    def EyeOffset(self, eyeOffset:list) -> None:
        return self._intf.set_property(IAgStkGraphicsTextBatchPrimitiveOptionalParameters._metadata, IAgStkGraphicsTextBatchPrimitiveOptionalParameters._set_EyeOffset_metadata, eyeOffset)

    _get_PixelOffset_metadata = { "name" : "PixelOffset",
            "arg_types" : (POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg,) }
    @property
    def PixelOffset(self) -> list:
        """Gets or sets the per-batch pixel offset, which is applied to each string in the text batch. The array contains one x pixel offset followed by one y pixel offset."""
        return self._intf.get_property(IAgStkGraphicsTextBatchPrimitiveOptionalParameters._metadata, IAgStkGraphicsTextBatchPrimitiveOptionalParameters._get_PixelOffset_metadata)

    _set_PixelOffset_metadata = { "name" : "PixelOffset",
            "arg_types" : (agcom.LPSAFEARRAY,),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg,) }
    @PixelOffset.setter
    def PixelOffset(self, pixelOffset:list) -> None:
        return self._intf.set_property(IAgStkGraphicsTextBatchPrimitiveOptionalParameters._metadata, IAgStkGraphicsTextBatchPrimitiveOptionalParameters._set_PixelOffset_metadata, pixelOffset)

    _get_MaximumStringLength_metadata = { "name" : "MaximumStringLength",
            "arg_types" : (POINTER(agcom.INT),),
            "marshallers" : (agmarshall.INT_arg,) }
    @property
    def MaximumStringLength(self) -> int:
        """Gets or sets the maximum length of each string in the text batch."""
        return self._intf.get_property(IAgStkGraphicsTextBatchPrimitiveOptionalParameters._metadata, IAgStkGraphicsTextBatchPrimitiveOptionalParameters._get_MaximumStringLength_metadata)

    _set_MaximumStringLength_metadata = { "name" : "MaximumStringLength",
            "arg_types" : (agcom.INT,),
            "marshallers" : (agmarshall.INT_arg,) }
    @MaximumStringLength.setter
    def MaximumStringLength(self, maximumStringLength:int) -> None:
        return self._intf.set_property(IAgStkGraphicsTextBatchPrimitiveOptionalParameters._metadata, IAgStkGraphicsTextBatchPrimitiveOptionalParameters._set_MaximumStringLength_metadata, maximumStringLength)

    _SetOrigins_metadata = { "name" : "SetOrigins",
            "arg_types" : (POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg,) }
    def SetOrigins(self, origins:list) -> None:
        """Defines a collection of origins, one for each string in the batch."""
        return self._intf.invoke(IAgStkGraphicsTextBatchPrimitiveOptionalParameters._metadata, IAgStkGraphicsTextBatchPrimitiveOptionalParameters._SetOrigins_metadata, origins)

    _SetEyeOffsets_metadata = { "name" : "SetEyeOffsets",
            "arg_types" : (POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg,) }
    def SetEyeOffsets(self, eyeOffsets:list) -> None:
        """Defines a collection of eye offsets, one for each string in the batch."""
        return self._intf.invoke(IAgStkGraphicsTextBatchPrimitiveOptionalParameters._metadata, IAgStkGraphicsTextBatchPrimitiveOptionalParameters._SetEyeOffsets_metadata, eyeOffsets)

    _SetPixelOffsets_metadata = { "name" : "SetPixelOffsets",
            "arg_types" : (POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg,) }
    def SetPixelOffsets(self, pixelOffsets:list) -> None:
        """Defines a collection of pixel offsets, one for each string in the batch."""
        return self._intf.invoke(IAgStkGraphicsTextBatchPrimitiveOptionalParameters._metadata, IAgStkGraphicsTextBatchPrimitiveOptionalParameters._SetPixelOffsets_metadata, pixelOffsets)

    _SetColors_metadata = { "name" : "SetColors",
            "arg_types" : (POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg,) }
    def SetColors(self, colors:list) -> None:
        """Defines a collection of colors, one for each string in the batch."""
        return self._intf.invoke(IAgStkGraphicsTextBatchPrimitiveOptionalParameters._metadata, IAgStkGraphicsTextBatchPrimitiveOptionalParameters._SetColors_metadata, colors)

    _get_ScreenSpaceRendering_metadata = { "name" : "ScreenSpaceRendering",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def ScreenSpaceRendering(self) -> bool:
        """Gets or sets a flag that informs the CTextBatchPrimitive to use rendering optimized for screen space text."""
        return self._intf.get_property(IAgStkGraphicsTextBatchPrimitiveOptionalParameters._metadata, IAgStkGraphicsTextBatchPrimitiveOptionalParameters._get_ScreenSpaceRendering_metadata)

    _set_ScreenSpaceRendering_metadata = { "name" : "ScreenSpaceRendering",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @ScreenSpaceRendering.setter
    def ScreenSpaceRendering(self, screenSpaceRendering:bool) -> None:
        return self._intf.set_property(IAgStkGraphicsTextBatchPrimitiveOptionalParameters._metadata, IAgStkGraphicsTextBatchPrimitiveOptionalParameters._set_ScreenSpaceRendering_metadata, screenSpaceRendering)


agcls.AgClassCatalog.add_catalog_entry("{e18b012f-840d-4f32-8810-dd253c38ce7f}", IAgStkGraphicsTextBatchPrimitiveOptionalParameters)
agcls.AgTypeNameMap["IAgStkGraphicsTextBatchPrimitiveOptionalParameters"] = IAgStkGraphicsTextBatchPrimitiveOptionalParameters

class IAgStkGraphicsTextOverlay(object):
    """A rectangular overlay that contains text."""
    _num_methods = 6
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{7d847a28-dfe3-4f2c-923b-683f0250c491}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_Text" : 1,
                             "set_Text" : 2,
                             "get_OutlineColor" : 3,
                             "set_OutlineColor" : 4,
                             "get_Font" : 5,
                             "set_Font" : 6, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsTextOverlay._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsTextOverlay from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsTextOverlay.__dict__ and type(IAgStkGraphicsTextOverlay.__dict__[attrname]) == property:
            return IAgStkGraphicsTextOverlay.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsTextOverlay.")
    
    _get_Text_metadata = { "name" : "Text",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def Text(self) -> str:
        r"""Sets the Text to be rendered to an overlay using newline characters ('\n') to mark the start of the next line in the text."""
        return self._intf.get_property(IAgStkGraphicsTextOverlay._metadata, IAgStkGraphicsTextOverlay._get_Text_metadata)

    _set_Text_metadata = { "name" : "Text",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @Text.setter
    def Text(self, text:str) -> None:
        return self._intf.set_property(IAgStkGraphicsTextOverlay._metadata, IAgStkGraphicsTextOverlay._set_Text_metadata, text)

    _get_OutlineColor_metadata = { "name" : "OutlineColor",
            "arg_types" : (POINTER(agcom.OLE_COLOR),),
            "marshallers" : (agmarshall.OLE_COLOR_arg,) }
    @property
    def OutlineColor(self) -> agcolor.Color:
        """Gets or sets the text's outline color."""
        return self._intf.get_property(IAgStkGraphicsTextOverlay._metadata, IAgStkGraphicsTextOverlay._get_OutlineColor_metadata)

    _set_OutlineColor_metadata = { "name" : "OutlineColor",
            "arg_types" : (agcom.OLE_COLOR,),
            "marshallers" : (agmarshall.OLE_COLOR_arg,) }
    @OutlineColor.setter
    def OutlineColor(self, outlineColor:agcolor.Color) -> None:
        return self._intf.set_property(IAgStkGraphicsTextOverlay._metadata, IAgStkGraphicsTextOverlay._set_OutlineColor_metadata, outlineColor)

    _get_Font_metadata = { "name" : "Font",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def Font(self) -> "IAgStkGraphicsGraphicsFont":
        """Get the graphics font used to style the text."""
        return self._intf.get_property(IAgStkGraphicsTextOverlay._metadata, IAgStkGraphicsTextOverlay._get_Font_metadata)

    _set_Font_metadata = { "name" : "Font",
            "arg_types" : (agcom.PVOID,),
            "marshallers" : (agmarshall.AgInterface_in_arg("IAgStkGraphicsGraphicsFont"),) }
    @Font.setter
    def Font(self, font:"IAgStkGraphicsGraphicsFont") -> None:
        return self._intf.set_property(IAgStkGraphicsTextOverlay._metadata, IAgStkGraphicsTextOverlay._set_Font_metadata, font)


agcls.AgClassCatalog.add_catalog_entry("{7d847a28-dfe3-4f2c-923b-683f0250c491}", IAgStkGraphicsTextOverlay)
agcls.AgTypeNameMap["IAgStkGraphicsTextOverlay"] = IAgStkGraphicsTextOverlay

class IAgStkGraphicsTextureMatrix(object):
    """A 4 by 4 matrix applied to a texture coordinate."""
    _num_methods = 16
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{0a4c4c8f-0131-466f-99a5-1f41f9db403b}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_M11" : 1,
                             "get_M12" : 2,
                             "get_M13" : 3,
                             "get_M14" : 4,
                             "get_M21" : 5,
                             "get_M22" : 6,
                             "get_M23" : 7,
                             "get_M24" : 8,
                             "get_M31" : 9,
                             "get_M32" : 10,
                             "get_M33" : 11,
                             "get_M34" : 12,
                             "get_M41" : 13,
                             "get_M42" : 14,
                             "get_M43" : 15,
                             "get_M44" : 16, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsTextureMatrix._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsTextureMatrix from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsTextureMatrix.__dict__ and type(IAgStkGraphicsTextureMatrix.__dict__[attrname]) == property:
            return IAgStkGraphicsTextureMatrix.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsTextureMatrix.")
    
    _get_M11_metadata = { "name" : "M11",
            "arg_types" : (POINTER(agcom.FLOAT),),
            "marshallers" : (agmarshall.FLOAT_arg,) }
    @property
    def M11(self) -> float:
        """Gets the element in the first row, first column."""
        return self._intf.get_property(IAgStkGraphicsTextureMatrix._metadata, IAgStkGraphicsTextureMatrix._get_M11_metadata)

    _get_M12_metadata = { "name" : "M12",
            "arg_types" : (POINTER(agcom.FLOAT),),
            "marshallers" : (agmarshall.FLOAT_arg,) }
    @property
    def M12(self) -> float:
        """Gets the element in the first row, second column."""
        return self._intf.get_property(IAgStkGraphicsTextureMatrix._metadata, IAgStkGraphicsTextureMatrix._get_M12_metadata)

    _get_M13_metadata = { "name" : "M13",
            "arg_types" : (POINTER(agcom.FLOAT),),
            "marshallers" : (agmarshall.FLOAT_arg,) }
    @property
    def M13(self) -> float:
        """Gets the element in the first row, third column."""
        return self._intf.get_property(IAgStkGraphicsTextureMatrix._metadata, IAgStkGraphicsTextureMatrix._get_M13_metadata)

    _get_M14_metadata = { "name" : "M14",
            "arg_types" : (POINTER(agcom.FLOAT),),
            "marshallers" : (agmarshall.FLOAT_arg,) }
    @property
    def M14(self) -> float:
        """Gets the element in the first row, fourth column."""
        return self._intf.get_property(IAgStkGraphicsTextureMatrix._metadata, IAgStkGraphicsTextureMatrix._get_M14_metadata)

    _get_M21_metadata = { "name" : "M21",
            "arg_types" : (POINTER(agcom.FLOAT),),
            "marshallers" : (agmarshall.FLOAT_arg,) }
    @property
    def M21(self) -> float:
        """Gets the element in the second row, first column."""
        return self._intf.get_property(IAgStkGraphicsTextureMatrix._metadata, IAgStkGraphicsTextureMatrix._get_M21_metadata)

    _get_M22_metadata = { "name" : "M22",
            "arg_types" : (POINTER(agcom.FLOAT),),
            "marshallers" : (agmarshall.FLOAT_arg,) }
    @property
    def M22(self) -> float:
        """Gets the element in the second row, second column."""
        return self._intf.get_property(IAgStkGraphicsTextureMatrix._metadata, IAgStkGraphicsTextureMatrix._get_M22_metadata)

    _get_M23_metadata = { "name" : "M23",
            "arg_types" : (POINTER(agcom.FLOAT),),
            "marshallers" : (agmarshall.FLOAT_arg,) }
    @property
    def M23(self) -> float:
        """Gets the element in the second row, third column."""
        return self._intf.get_property(IAgStkGraphicsTextureMatrix._metadata, IAgStkGraphicsTextureMatrix._get_M23_metadata)

    _get_M24_metadata = { "name" : "M24",
            "arg_types" : (POINTER(agcom.FLOAT),),
            "marshallers" : (agmarshall.FLOAT_arg,) }
    @property
    def M24(self) -> float:
        """Gets the element in the second row, fourth column."""
        return self._intf.get_property(IAgStkGraphicsTextureMatrix._metadata, IAgStkGraphicsTextureMatrix._get_M24_metadata)

    _get_M31_metadata = { "name" : "M31",
            "arg_types" : (POINTER(agcom.FLOAT),),
            "marshallers" : (agmarshall.FLOAT_arg,) }
    @property
    def M31(self) -> float:
        """Gets the element in the third row, first column."""
        return self._intf.get_property(IAgStkGraphicsTextureMatrix._metadata, IAgStkGraphicsTextureMatrix._get_M31_metadata)

    _get_M32_metadata = { "name" : "M32",
            "arg_types" : (POINTER(agcom.FLOAT),),
            "marshallers" : (agmarshall.FLOAT_arg,) }
    @property
    def M32(self) -> float:
        """Gets the element in the third row, second column."""
        return self._intf.get_property(IAgStkGraphicsTextureMatrix._metadata, IAgStkGraphicsTextureMatrix._get_M32_metadata)

    _get_M33_metadata = { "name" : "M33",
            "arg_types" : (POINTER(agcom.FLOAT),),
            "marshallers" : (agmarshall.FLOAT_arg,) }
    @property
    def M33(self) -> float:
        """Gets the element in the third row, third column."""
        return self._intf.get_property(IAgStkGraphicsTextureMatrix._metadata, IAgStkGraphicsTextureMatrix._get_M33_metadata)

    _get_M34_metadata = { "name" : "M34",
            "arg_types" : (POINTER(agcom.FLOAT),),
            "marshallers" : (agmarshall.FLOAT_arg,) }
    @property
    def M34(self) -> float:
        """Gets the element in the third row, fourth column."""
        return self._intf.get_property(IAgStkGraphicsTextureMatrix._metadata, IAgStkGraphicsTextureMatrix._get_M34_metadata)

    _get_M41_metadata = { "name" : "M41",
            "arg_types" : (POINTER(agcom.FLOAT),),
            "marshallers" : (agmarshall.FLOAT_arg,) }
    @property
    def M41(self) -> float:
        """Gets the element in the fourth row, first column."""
        return self._intf.get_property(IAgStkGraphicsTextureMatrix._metadata, IAgStkGraphicsTextureMatrix._get_M41_metadata)

    _get_M42_metadata = { "name" : "M42",
            "arg_types" : (POINTER(agcom.FLOAT),),
            "marshallers" : (agmarshall.FLOAT_arg,) }
    @property
    def M42(self) -> float:
        """Gets the element in the fourth row, second column."""
        return self._intf.get_property(IAgStkGraphicsTextureMatrix._metadata, IAgStkGraphicsTextureMatrix._get_M42_metadata)

    _get_M43_metadata = { "name" : "M43",
            "arg_types" : (POINTER(agcom.FLOAT),),
            "marshallers" : (agmarshall.FLOAT_arg,) }
    @property
    def M43(self) -> float:
        """Gets the element in the fourth row, third column."""
        return self._intf.get_property(IAgStkGraphicsTextureMatrix._metadata, IAgStkGraphicsTextureMatrix._get_M43_metadata)

    _get_M44_metadata = { "name" : "M44",
            "arg_types" : (POINTER(agcom.FLOAT),),
            "marshallers" : (agmarshall.FLOAT_arg,) }
    @property
    def M44(self) -> float:
        """Gets the element in the fourth row, fourth column."""
        return self._intf.get_property(IAgStkGraphicsTextureMatrix._metadata, IAgStkGraphicsTextureMatrix._get_M44_metadata)


agcls.AgClassCatalog.add_catalog_entry("{0a4c4c8f-0131-466f-99a5-1f41f9db403b}", IAgStkGraphicsTextureMatrix)
agcls.AgTypeNameMap["IAgStkGraphicsTextureMatrix"] = IAgStkGraphicsTextureMatrix

class IAgStkGraphicsTextureScreenOverlay(object):
    """A rectangular overlay that can be assigned a texture."""
    _num_methods = 6
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{4d09eb77-14cf-40a7-b7bb-130f4ddd60c6}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_Texture" : 1,
                             "set_Texture" : 2,
                             "get_TextureFilter" : 3,
                             "set_TextureFilter" : 4,
                             "get_MaintainAspectRatio" : 5,
                             "set_MaintainAspectRatio" : 6, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsTextureScreenOverlay._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsTextureScreenOverlay from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsTextureScreenOverlay.__dict__ and type(IAgStkGraphicsTextureScreenOverlay.__dict__[attrname]) == property:
            return IAgStkGraphicsTextureScreenOverlay.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsTextureScreenOverlay.")
    
    _get_Texture_metadata = { "name" : "Texture",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def Texture(self) -> "IAgStkGraphicsRendererTexture2D":
        """Gets or sets the texture (image) to be drawn on the overlay. Textures can be obtained from textures."""
        return self._intf.get_property(IAgStkGraphicsTextureScreenOverlay._metadata, IAgStkGraphicsTextureScreenOverlay._get_Texture_metadata)

    _set_Texture_metadata = { "name" : "Texture",
            "arg_types" : (agcom.PVOID,),
            "marshallers" : (agmarshall.AgInterface_in_arg("IAgStkGraphicsRendererTexture2D"),) }
    @Texture.setter
    def Texture(self, texture:"IAgStkGraphicsRendererTexture2D") -> None:
        return self._intf.set_property(IAgStkGraphicsTextureScreenOverlay._metadata, IAgStkGraphicsTextureScreenOverlay._set_Texture_metadata, texture)

    _get_TextureFilter_metadata = { "name" : "TextureFilter",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def TextureFilter(self) -> "IAgStkGraphicsTextureFilter2D":
        """Gets or sets the filter used for the texture associated with this overlay."""
        return self._intf.get_property(IAgStkGraphicsTextureScreenOverlay._metadata, IAgStkGraphicsTextureScreenOverlay._get_TextureFilter_metadata)

    _set_TextureFilter_metadata = { "name" : "TextureFilter",
            "arg_types" : (agcom.PVOID,),
            "marshallers" : (agmarshall.AgInterface_in_arg("IAgStkGraphicsTextureFilter2D"),) }
    @TextureFilter.setter
    def TextureFilter(self, textureFilter:"IAgStkGraphicsTextureFilter2D") -> None:
        return self._intf.set_property(IAgStkGraphicsTextureScreenOverlay._metadata, IAgStkGraphicsTextureScreenOverlay._set_TextureFilter_metadata, textureFilter)

    _get_MaintainAspectRatio_metadata = { "name" : "MaintainAspectRatio",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEStkGraphicsMaintainAspectRatio),) }
    @property
    def MaintainAspectRatio(self) -> "AgEStkGraphicsMaintainAspectRatio":
        """Gets or sets a value indicating whether the aspect ratio of the texture screen overlay is maintained or not."""
        return self._intf.get_property(IAgStkGraphicsTextureScreenOverlay._metadata, IAgStkGraphicsTextureScreenOverlay._get_MaintainAspectRatio_metadata)

    _set_MaintainAspectRatio_metadata = { "name" : "MaintainAspectRatio",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEStkGraphicsMaintainAspectRatio),) }
    @MaintainAspectRatio.setter
    def MaintainAspectRatio(self, maintainAspectRatio:"AgEStkGraphicsMaintainAspectRatio") -> None:
        return self._intf.set_property(IAgStkGraphicsTextureScreenOverlay._metadata, IAgStkGraphicsTextureScreenOverlay._set_MaintainAspectRatio_metadata, maintainAspectRatio)


agcls.AgClassCatalog.add_catalog_entry("{4d09eb77-14cf-40a7-b7bb-130f4ddd60c6}", IAgStkGraphicsTextureScreenOverlay)
agcls.AgTypeNameMap["IAgStkGraphicsTextureScreenOverlay"] = IAgStkGraphicsTextureScreenOverlay

class IAgStkGraphicsTimeIntervalDisplayCondition(object):
    """Defines an inclusive time interval that determines when an object, such as a primitive, is rendered based on the current animation time ."""
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{2f0f3c32-c1d9-42a1-9422-8ecd2b9c1ad0}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_MinimumTime" : 1,
                             "set_MinimumTime" : 2,
                             "get_MaximumTime" : 3,
                             "set_MaximumTime" : 4, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsTimeIntervalDisplayCondition._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsTimeIntervalDisplayCondition from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsTimeIntervalDisplayCondition.__dict__ and type(IAgStkGraphicsTimeIntervalDisplayCondition.__dict__[attrname]) == property:
            return IAgStkGraphicsTimeIntervalDisplayCondition.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsTimeIntervalDisplayCondition.")
    
    _get_MinimumTime_metadata = { "name" : "MinimumTime",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def MinimumTime(self) -> "IAgDate":
        """Gets or sets the minimum time of the inclusive time interval."""
        return self._intf.get_property(IAgStkGraphicsTimeIntervalDisplayCondition._metadata, IAgStkGraphicsTimeIntervalDisplayCondition._get_MinimumTime_metadata)

    _set_MinimumTime_metadata = { "name" : "MinimumTime",
            "arg_types" : (agcom.PVOID,),
            "marshallers" : (agmarshall.AgInterface_in_arg("IAgDate"),) }
    @MinimumTime.setter
    def MinimumTime(self, minimumTime:"IAgDate") -> None:
        return self._intf.set_property(IAgStkGraphicsTimeIntervalDisplayCondition._metadata, IAgStkGraphicsTimeIntervalDisplayCondition._set_MinimumTime_metadata, minimumTime)

    _get_MaximumTime_metadata = { "name" : "MaximumTime",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def MaximumTime(self) -> "IAgDate":
        """Gets or sets the maximum time of the inclusive time interval."""
        return self._intf.get_property(IAgStkGraphicsTimeIntervalDisplayCondition._metadata, IAgStkGraphicsTimeIntervalDisplayCondition._get_MaximumTime_metadata)

    _set_MaximumTime_metadata = { "name" : "MaximumTime",
            "arg_types" : (agcom.PVOID,),
            "marshallers" : (agmarshall.AgInterface_in_arg("IAgDate"),) }
    @MaximumTime.setter
    def MaximumTime(self, maximumTime:"IAgDate") -> None:
        return self._intf.set_property(IAgStkGraphicsTimeIntervalDisplayCondition._metadata, IAgStkGraphicsTimeIntervalDisplayCondition._set_MaximumTime_metadata, maximumTime)


agcls.AgClassCatalog.add_catalog_entry("{2f0f3c32-c1d9-42a1-9422-8ecd2b9c1ad0}", IAgStkGraphicsTimeIntervalDisplayCondition)
agcls.AgTypeNameMap["IAgStkGraphicsTimeIntervalDisplayCondition"] = IAgStkGraphicsTimeIntervalDisplayCondition

class IAgStkGraphicsTriangleMeshPrimitive(object):
    """Renders a triangle mesh in the 3D scene. Examples of triangle meshes includes polygons on the globe (e.g. states or countries), terrain and imagery extents, ellipses, and extrusions."""
    _num_methods = 22
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{b878e10c-0fc9-446e-88ba-1e1088970150}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_Wireframe" : 1,
                             "set_Wireframe" : 2,
                             "get_RenderBackThenFrontFaces" : 3,
                             "set_RenderBackThenFrontFaces" : 4,
                             "get_Lighting" : 5,
                             "set_Lighting" : 6,
                             "get_TriangleWindingOrder" : 7,
                             "set_TriangleWindingOrder" : 8,
                             "get_CullFace" : 9,
                             "set_CullFace" : 10,
                             "get_ShadeModel" : 11,
                             "set_ShadeModel" : 12,
                             "get_Texture" : 13,
                             "set_Texture" : 14,
                             "get_TextureFilter" : 15,
                             "set_TextureFilter" : 16,
                             "get_SetHint" : 17,
                             "Set" : 18,
                             "SetWithOptionalParameters" : 19,
                             "SetTriangulator" : 20,
                             "get_CentralBodyClipped" : 21,
                             "set_CentralBodyClipped" : 22, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsTriangleMeshPrimitive._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsTriangleMeshPrimitive from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsTriangleMeshPrimitive.__dict__ and type(IAgStkGraphicsTriangleMeshPrimitive.__dict__[attrname]) == property:
            return IAgStkGraphicsTriangleMeshPrimitive.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsTriangleMeshPrimitive.")
    
    _get_Wireframe_metadata = { "name" : "Wireframe",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def Wireframe(self) -> bool:
        """Gets or sets whether the primitive is rendered in wireframe. This is useful for debugging."""
        return self._intf.get_property(IAgStkGraphicsTriangleMeshPrimitive._metadata, IAgStkGraphicsTriangleMeshPrimitive._get_Wireframe_metadata)

    _set_Wireframe_metadata = { "name" : "Wireframe",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @Wireframe.setter
    def Wireframe(self, wireframe:bool) -> None:
        return self._intf.set_property(IAgStkGraphicsTriangleMeshPrimitive._metadata, IAgStkGraphicsTriangleMeshPrimitive._set_Wireframe_metadata, wireframe)

    _get_RenderBackThenFrontFaces_metadata = { "name" : "RenderBackThenFrontFaces",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def RenderBackThenFrontFaces(self) -> bool:
        """Gets or sets whether the primitive is rendered in two passes to improve the visual quality for translucent, convex meshes."""
        return self._intf.get_property(IAgStkGraphicsTriangleMeshPrimitive._metadata, IAgStkGraphicsTriangleMeshPrimitive._get_RenderBackThenFrontFaces_metadata)

    _set_RenderBackThenFrontFaces_metadata = { "name" : "RenderBackThenFrontFaces",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @RenderBackThenFrontFaces.setter
    def RenderBackThenFrontFaces(self, renderBackThenFrontFaces:bool) -> None:
        return self._intf.set_property(IAgStkGraphicsTriangleMeshPrimitive._metadata, IAgStkGraphicsTriangleMeshPrimitive._set_RenderBackThenFrontFaces_metadata, renderBackThenFrontFaces)

    _get_Lighting_metadata = { "name" : "Lighting",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def Lighting(self) -> bool:
        """Gets or sets whether the primitive is lit."""
        return self._intf.get_property(IAgStkGraphicsTriangleMeshPrimitive._metadata, IAgStkGraphicsTriangleMeshPrimitive._get_Lighting_metadata)

    _set_Lighting_metadata = { "name" : "Lighting",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @Lighting.setter
    def Lighting(self, lighting:bool) -> None:
        return self._intf.set_property(IAgStkGraphicsTriangleMeshPrimitive._metadata, IAgStkGraphicsTriangleMeshPrimitive._set_Lighting_metadata, lighting)

    _get_TriangleWindingOrder_metadata = { "name" : "TriangleWindingOrder",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEStkGraphicsWindingOrder),) }
    @property
    def TriangleWindingOrder(self) -> "AgEStkGraphicsWindingOrder":
        """Gets or sets the orientation of front-facing triangles. This is used in combination with cull face for culling."""
        return self._intf.get_property(IAgStkGraphicsTriangleMeshPrimitive._metadata, IAgStkGraphicsTriangleMeshPrimitive._get_TriangleWindingOrder_metadata)

    _set_TriangleWindingOrder_metadata = { "name" : "TriangleWindingOrder",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEStkGraphicsWindingOrder),) }
    @TriangleWindingOrder.setter
    def TriangleWindingOrder(self, triangleWindingOrder:"AgEStkGraphicsWindingOrder") -> None:
        return self._intf.set_property(IAgStkGraphicsTriangleMeshPrimitive._metadata, IAgStkGraphicsTriangleMeshPrimitive._set_TriangleWindingOrder_metadata, triangleWindingOrder)

    _get_CullFace_metadata = { "name" : "CullFace",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEStkGraphicsCullFace),) }
    @property
    def CullFace(self) -> "AgEStkGraphicsCullFace":
        """Gets or sets whether front and/or back-facing triangles may be culled. This is used in combination with triangle winding order for culling."""
        return self._intf.get_property(IAgStkGraphicsTriangleMeshPrimitive._metadata, IAgStkGraphicsTriangleMeshPrimitive._get_CullFace_metadata)

    _set_CullFace_metadata = { "name" : "CullFace",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEStkGraphicsCullFace),) }
    @CullFace.setter
    def CullFace(self, cullFace:"AgEStkGraphicsCullFace") -> None:
        return self._intf.set_property(IAgStkGraphicsTriangleMeshPrimitive._metadata, IAgStkGraphicsTriangleMeshPrimitive._set_CullFace_metadata, cullFace)

    _get_ShadeModel_metadata = { "name" : "ShadeModel",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEStkGraphicsRendererShadeModel),) }
    @property
    def ShadeModel(self) -> "AgEStkGraphicsRendererShadeModel":
        """Gets or sets the shading model for the mesh."""
        return self._intf.get_property(IAgStkGraphicsTriangleMeshPrimitive._metadata, IAgStkGraphicsTriangleMeshPrimitive._get_ShadeModel_metadata)

    _set_ShadeModel_metadata = { "name" : "ShadeModel",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(AgEStkGraphicsRendererShadeModel),) }
    @ShadeModel.setter
    def ShadeModel(self, shadeModel:"AgEStkGraphicsRendererShadeModel") -> None:
        return self._intf.set_property(IAgStkGraphicsTriangleMeshPrimitive._metadata, IAgStkGraphicsTriangleMeshPrimitive._set_ShadeModel_metadata, shadeModel)

    _get_Texture_metadata = { "name" : "Texture",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def Texture(self) -> "IAgStkGraphicsRendererTexture2D":
        """Gets or sets the texture to be drawn on the triangle mesh. Textures can be obtained from textures."""
        return self._intf.get_property(IAgStkGraphicsTriangleMeshPrimitive._metadata, IAgStkGraphicsTriangleMeshPrimitive._get_Texture_metadata)

    _set_Texture_metadata = { "name" : "Texture",
            "arg_types" : (agcom.PVOID,),
            "marshallers" : (agmarshall.AgInterface_in_arg("IAgStkGraphicsRendererTexture2D"),) }
    @Texture.setter
    def Texture(self, texture:"IAgStkGraphicsRendererTexture2D") -> None:
        return self._intf.set_property(IAgStkGraphicsTriangleMeshPrimitive._metadata, IAgStkGraphicsTriangleMeshPrimitive._set_Texture_metadata, texture)

    _get_TextureFilter_metadata = { "name" : "TextureFilter",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def TextureFilter(self) -> "IAgStkGraphicsTextureFilter2D":
        """Gets or sets the filter used for the texture associated with this triangle mesh."""
        return self._intf.get_property(IAgStkGraphicsTriangleMeshPrimitive._metadata, IAgStkGraphicsTriangleMeshPrimitive._get_TextureFilter_metadata)

    _set_TextureFilter_metadata = { "name" : "TextureFilter",
            "arg_types" : (agcom.PVOID,),
            "marshallers" : (agmarshall.AgInterface_in_arg("IAgStkGraphicsTextureFilter2D"),) }
    @TextureFilter.setter
    def TextureFilter(self, textureFilter:"IAgStkGraphicsTextureFilter2D") -> None:
        return self._intf.set_property(IAgStkGraphicsTriangleMeshPrimitive._metadata, IAgStkGraphicsTriangleMeshPrimitive._set_TextureFilter_metadata, textureFilter)

    _get_SetHint_metadata = { "name" : "SetHint",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEStkGraphicsSetHint),) }
    @property
    def SetHint(self) -> "AgEStkGraphicsSetHint":
        """Gets the primitive's set hint. See the Set Hint Performance Overview for selecting an appropriate value to construct the primitive with."""
        return self._intf.get_property(IAgStkGraphicsTriangleMeshPrimitive._metadata, IAgStkGraphicsTriangleMeshPrimitive._get_SetHint_metadata)

    _Set_metadata = { "name" : "Set",
            "arg_types" : (POINTER(agcom.LPSAFEARRAY), POINTER(agcom.LPSAFEARRAY), POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg, agmarshall.LPSAFEARRAY_arg, agmarshall.LPSAFEARRAY_arg,) }
    def Set(self, positions:list, normals:list, indices:list) -> None:
        """Defines the triangle mesh using an indexed triangle list specified by positions, normals, and indices. The mesh is rendered in the primitive's reference frame."""
        return self._intf.invoke(IAgStkGraphicsTriangleMeshPrimitive._metadata, IAgStkGraphicsTriangleMeshPrimitive._Set_metadata, positions, normals, indices)

    _SetWithOptionalParameters_metadata = { "name" : "SetWithOptionalParameters",
            "arg_types" : (POINTER(agcom.LPSAFEARRAY), POINTER(agcom.LPSAFEARRAY), POINTER(agcom.LPSAFEARRAY), agcom.PVOID,),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg, agmarshall.LPSAFEARRAY_arg, agmarshall.LPSAFEARRAY_arg, agmarshall.AgInterface_in_arg("IAgStkGraphicsTriangleMeshPrimitiveOptionalParameters"),) }
    def SetWithOptionalParameters(self, positions:list, normals:list, indices:list, optionalParameters:"IAgStkGraphicsTriangleMeshPrimitiveOptionalParameters") -> None:
        """Defines the triangle mesh using an indexed triangle list specified by positions, normals, indices, and optionalParameters. The mesh is rendered in the primitive's reference frame."""
        return self._intf.invoke(IAgStkGraphicsTriangleMeshPrimitive._metadata, IAgStkGraphicsTriangleMeshPrimitive._SetWithOptionalParameters_metadata, positions, normals, indices, optionalParameters)

    _SetTriangulator_metadata = { "name" : "SetTriangulator",
            "arg_types" : (agcom.PVOID,),
            "marshallers" : (agmarshall.AgInterface_in_arg("IAgStkGraphicsTriangulatorResult"),) }
    def SetTriangulator(self, triangulator:"IAgStkGraphicsTriangulatorResult") -> None:
        """Defines the triangle mesh using the specified triangulator. The mesh is rendered in the primitive's reference frame."""
        return self._intf.invoke(IAgStkGraphicsTriangleMeshPrimitive._metadata, IAgStkGraphicsTriangleMeshPrimitive._SetTriangulator_metadata, triangulator)

    _get_CentralBodyClipped_metadata = { "name" : "CentralBodyClipped",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def CentralBodyClipped(self) -> bool:
        """Gets or sets whether individual points will be clipped by the central body."""
        return self._intf.get_property(IAgStkGraphicsTriangleMeshPrimitive._metadata, IAgStkGraphicsTriangleMeshPrimitive._get_CentralBodyClipped_metadata)

    _set_CentralBodyClipped_metadata = { "name" : "CentralBodyClipped",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @CentralBodyClipped.setter
    def CentralBodyClipped(self, centralBodyClipped:bool) -> None:
        return self._intf.set_property(IAgStkGraphicsTriangleMeshPrimitive._metadata, IAgStkGraphicsTriangleMeshPrimitive._set_CentralBodyClipped_metadata, centralBodyClipped)


agcls.AgClassCatalog.add_catalog_entry("{b878e10c-0fc9-446e-88ba-1e1088970150}", IAgStkGraphicsTriangleMeshPrimitive)
agcls.AgTypeNameMap["IAgStkGraphicsTriangleMeshPrimitive"] = IAgStkGraphicsTriangleMeshPrimitive

class IAgStkGraphicsTriangleMeshPrimitiveOptionalParameters(object):
    """Optional parameters for triangle mesh primitive..."""
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{881b260c-4a26-4fb7-9fec-779b3c540a94}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "SetTextureCoordinates" : 1,
                             "SetPerVertexColors" : 2, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsTriangleMeshPrimitiveOptionalParameters._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsTriangleMeshPrimitiveOptionalParameters from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsTriangleMeshPrimitiveOptionalParameters.__dict__ and type(IAgStkGraphicsTriangleMeshPrimitiveOptionalParameters.__dict__[attrname]) == property:
            return IAgStkGraphicsTriangleMeshPrimitiveOptionalParameters.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsTriangleMeshPrimitiveOptionalParameters.")
    
    _SetTextureCoordinates_metadata = { "name" : "SetTextureCoordinates",
            "arg_types" : (POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg,) }
    def SetTextureCoordinates(self, textureCoordinates:list) -> None:
        """Defines a collection of texture coordinates."""
        return self._intf.invoke(IAgStkGraphicsTriangleMeshPrimitiveOptionalParameters._metadata, IAgStkGraphicsTriangleMeshPrimitiveOptionalParameters._SetTextureCoordinates_metadata, textureCoordinates)

    _SetPerVertexColors_metadata = { "name" : "SetPerVertexColors",
            "arg_types" : (POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg,) }
    def SetPerVertexColors(self, colors:list) -> None:
        """Defines a collection of colors."""
        return self._intf.invoke(IAgStkGraphicsTriangleMeshPrimitiveOptionalParameters._metadata, IAgStkGraphicsTriangleMeshPrimitiveOptionalParameters._SetPerVertexColors_metadata, colors)


agcls.AgClassCatalog.add_catalog_entry("{881b260c-4a26-4fb7-9fec-779b3c540a94}", IAgStkGraphicsTriangleMeshPrimitiveOptionalParameters)
agcls.AgTypeNameMap["IAgStkGraphicsTriangleMeshPrimitiveOptionalParameters"] = IAgStkGraphicsTriangleMeshPrimitiveOptionalParameters

class IAgStkGraphicsVectorPrimitive(object):
    """Renders a vector in the 3D scene. A vector is defined by a source (given by an ISystem) and a direction (given by an IVector or IPoint). Length is auto-calculated or can be set separately."""
    _num_methods = 28
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{8244e37a-140a-40a8-9554-37dc0be9bd1b}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_Lighting" : 1,
                             "set_Lighting" : 2,
                             "get_Label" : 3,
                             "set_Label" : 4,
                             "get_DisplayLabel" : 5,
                             "set_DisplayLabel" : 6,
                             "get_DisplayMagnitude" : 7,
                             "set_DisplayMagnitude" : 8,
                             "get_DisplayRADec" : 9,
                             "set_DisplayRADec" : 10,
                             "get_DisplayTrace" : 11,
                             "set_DisplayTrace" : 12,
                             "get_DisplaySweep" : 13,
                             "set_DisplaySweep" : 14,
                             "get_DisplayLines" : 15,
                             "set_DisplayLines" : 16,
                             "get_PersistenceWidth" : 17,
                             "set_PersistenceWidth" : 18,
                             "get_FadePersistence" : 19,
                             "set_FadePersistence" : 20,
                             "get_PersistenceDuration" : 21,
                             "set_PersistenceDuration" : 22,
                             "get_Length" : 23,
                             "set_Length" : 24,
                             "get_Width" : 25,
                             "set_Width" : 26,
                             "get_TrueScale" : 27,
                             "set_TrueScale" : 28, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsVectorPrimitive._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsVectorPrimitive from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsVectorPrimitive.__dict__ and type(IAgStkGraphicsVectorPrimitive.__dict__[attrname]) == property:
            return IAgStkGraphicsVectorPrimitive.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsVectorPrimitive.")
    
    _get_Lighting_metadata = { "name" : "Lighting",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def Lighting(self) -> bool:
        """Gets or Sets whether the primitive is lit."""
        return self._intf.get_property(IAgStkGraphicsVectorPrimitive._metadata, IAgStkGraphicsVectorPrimitive._get_Lighting_metadata)

    _set_Lighting_metadata = { "name" : "Lighting",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @Lighting.setter
    def Lighting(self, lighting:bool) -> None:
        return self._intf.set_property(IAgStkGraphicsVectorPrimitive._metadata, IAgStkGraphicsVectorPrimitive._set_Lighting_metadata, lighting)

    _get_Label_metadata = { "name" : "Label",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def Label(self) -> str:
        """Gets or Sets the a user-defined label."""
        return self._intf.get_property(IAgStkGraphicsVectorPrimitive._metadata, IAgStkGraphicsVectorPrimitive._get_Label_metadata)

    _set_Label_metadata = { "name" : "Label",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @Label.setter
    def Label(self, label:str) -> None:
        return self._intf.set_property(IAgStkGraphicsVectorPrimitive._metadata, IAgStkGraphicsVectorPrimitive._set_Label_metadata, label)

    _get_DisplayLabel_metadata = { "name" : "DisplayLabel",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def DisplayLabel(self) -> bool:
        """Gets or Sets whether the vector's label is displayed."""
        return self._intf.get_property(IAgStkGraphicsVectorPrimitive._metadata, IAgStkGraphicsVectorPrimitive._get_DisplayLabel_metadata)

    _set_DisplayLabel_metadata = { "name" : "DisplayLabel",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @DisplayLabel.setter
    def DisplayLabel(self, displayLabel:bool) -> None:
        return self._intf.set_property(IAgStkGraphicsVectorPrimitive._metadata, IAgStkGraphicsVectorPrimitive._set_DisplayLabel_metadata, displayLabel)

    _get_DisplayMagnitude_metadata = { "name" : "DisplayMagnitude",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def DisplayMagnitude(self) -> bool:
        """Gets or Sets whether the vector's magnitude is displayed. Formatter controls unit conversions."""
        return self._intf.get_property(IAgStkGraphicsVectorPrimitive._metadata, IAgStkGraphicsVectorPrimitive._get_DisplayMagnitude_metadata)

    _set_DisplayMagnitude_metadata = { "name" : "DisplayMagnitude",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @DisplayMagnitude.setter
    def DisplayMagnitude(self, displayMagnitude:bool) -> None:
        return self._intf.set_property(IAgStkGraphicsVectorPrimitive._metadata, IAgStkGraphicsVectorPrimitive._set_DisplayMagnitude_metadata, displayMagnitude)

    _get_DisplayRADec_metadata = { "name" : "DisplayRADec",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def DisplayRADec(self) -> bool:
        """Gets or Sets whether the vector's RA-Dec is displayed. Formatter controls unit conversions."""
        return self._intf.get_property(IAgStkGraphicsVectorPrimitive._metadata, IAgStkGraphicsVectorPrimitive._get_DisplayRADec_metadata)

    _set_DisplayRADec_metadata = { "name" : "DisplayRADec",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @DisplayRADec.setter
    def DisplayRADec(self, displayRADec:bool) -> None:
        return self._intf.set_property(IAgStkGraphicsVectorPrimitive._metadata, IAgStkGraphicsVectorPrimitive._set_DisplayRADec_metadata, displayRADec)

    _get_DisplayTrace_metadata = { "name" : "DisplayTrace",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def DisplayTrace(self) -> bool:
        """Gets or Sets whether the persistence trace (points) is displayed."""
        return self._intf.get_property(IAgStkGraphicsVectorPrimitive._metadata, IAgStkGraphicsVectorPrimitive._get_DisplayTrace_metadata)

    _set_DisplayTrace_metadata = { "name" : "DisplayTrace",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @DisplayTrace.setter
    def DisplayTrace(self, displayTrace:bool) -> None:
        return self._intf.set_property(IAgStkGraphicsVectorPrimitive._metadata, IAgStkGraphicsVectorPrimitive._set_DisplayTrace_metadata, displayTrace)

    _get_DisplaySweep_metadata = { "name" : "DisplaySweep",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def DisplaySweep(self) -> bool:
        """Gets or Sets whether the persistence sweep (triangles) is displayed."""
        return self._intf.get_property(IAgStkGraphicsVectorPrimitive._metadata, IAgStkGraphicsVectorPrimitive._get_DisplaySweep_metadata)

    _set_DisplaySweep_metadata = { "name" : "DisplaySweep",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @DisplaySweep.setter
    def DisplaySweep(self, displaySweep:bool) -> None:
        return self._intf.set_property(IAgStkGraphicsVectorPrimitive._metadata, IAgStkGraphicsVectorPrimitive._set_DisplaySweep_metadata, displaySweep)

    _get_DisplayLines_metadata = { "name" : "DisplayLines",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def DisplayLines(self) -> bool:
        """Gets or Sets whether persistence lines are displayed."""
        return self._intf.get_property(IAgStkGraphicsVectorPrimitive._metadata, IAgStkGraphicsVectorPrimitive._get_DisplayLines_metadata)

    _set_DisplayLines_metadata = { "name" : "DisplayLines",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @DisplayLines.setter
    def DisplayLines(self, displayLines:bool) -> None:
        return self._intf.set_property(IAgStkGraphicsVectorPrimitive._metadata, IAgStkGraphicsVectorPrimitive._set_DisplayLines_metadata, displayLines)

    _get_PersistenceWidth_metadata = { "name" : "PersistenceWidth",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def PersistenceWidth(self) -> float:
        """Gets or Sets persistence point/line width."""
        return self._intf.get_property(IAgStkGraphicsVectorPrimitive._metadata, IAgStkGraphicsVectorPrimitive._get_PersistenceWidth_metadata)

    _set_PersistenceWidth_metadata = { "name" : "PersistenceWidth",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @PersistenceWidth.setter
    def PersistenceWidth(self, persistenceWidth:float) -> None:
        return self._intf.set_property(IAgStkGraphicsVectorPrimitive._metadata, IAgStkGraphicsVectorPrimitive._set_PersistenceWidth_metadata, persistenceWidth)

    _get_FadePersistence_metadata = { "name" : "FadePersistence",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def FadePersistence(self) -> bool:
        """Gets or Sets whether the persistence path should fade over time."""
        return self._intf.get_property(IAgStkGraphicsVectorPrimitive._metadata, IAgStkGraphicsVectorPrimitive._get_FadePersistence_metadata)

    _set_FadePersistence_metadata = { "name" : "FadePersistence",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @FadePersistence.setter
    def FadePersistence(self, fadePersistence:bool) -> None:
        return self._intf.set_property(IAgStkGraphicsVectorPrimitive._metadata, IAgStkGraphicsVectorPrimitive._set_FadePersistence_metadata, fadePersistence)

    _get_PersistenceDuration_metadata = { "name" : "PersistenceDuration",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def PersistenceDuration(self) -> float:
        """Gets or Sets the maximum duration of the persistence path."""
        return self._intf.get_property(IAgStkGraphicsVectorPrimitive._metadata, IAgStkGraphicsVectorPrimitive._get_PersistenceDuration_metadata)

    _set_PersistenceDuration_metadata = { "name" : "PersistenceDuration",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @PersistenceDuration.setter
    def PersistenceDuration(self, persistenceDuration:float) -> None:
        return self._intf.set_property(IAgStkGraphicsVectorPrimitive._metadata, IAgStkGraphicsVectorPrimitive._set_PersistenceDuration_metadata, persistenceDuration)

    _get_Length_metadata = { "name" : "Length",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def Length(self) -> float:
        """Gets or Sets the vector's source-to-arrow-tip length."""
        return self._intf.get_property(IAgStkGraphicsVectorPrimitive._metadata, IAgStkGraphicsVectorPrimitive._get_Length_metadata)

    _set_Length_metadata = { "name" : "Length",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @Length.setter
    def Length(self, length:float) -> None:
        return self._intf.set_property(IAgStkGraphicsVectorPrimitive._metadata, IAgStkGraphicsVectorPrimitive._set_Length_metadata, length)

    _get_Width_metadata = { "name" : "Width",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def Width(self) -> float:
        """Gets or Sets the vector's width in pixels. As the camera distances changes from this primitive, the geometry will autoscale to maintain this thickness."""
        return self._intf.get_property(IAgStkGraphicsVectorPrimitive._metadata, IAgStkGraphicsVectorPrimitive._get_Width_metadata)

    _set_Width_metadata = { "name" : "Width",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @Width.setter
    def Width(self, width:float) -> None:
        return self._intf.set_property(IAgStkGraphicsVectorPrimitive._metadata, IAgStkGraphicsVectorPrimitive._set_Width_metadata, width)

    _get_TrueScale_metadata = { "name" : "TrueScale",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def TrueScale(self) -> bool:
        """Gets or Sets whether vector's 'true scale' length (based on how the primitive was created) should be used."""
        return self._intf.get_property(IAgStkGraphicsVectorPrimitive._metadata, IAgStkGraphicsVectorPrimitive._get_TrueScale_metadata)

    _set_TrueScale_metadata = { "name" : "TrueScale",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @TrueScale.setter
    def TrueScale(self, trueScale:bool) -> None:
        return self._intf.set_property(IAgStkGraphicsVectorPrimitive._metadata, IAgStkGraphicsVectorPrimitive._set_TrueScale_metadata, trueScale)


agcls.AgClassCatalog.add_catalog_entry("{8244e37a-140a-40a8-9554-37dc0be9bd1b}", IAgStkGraphicsVectorPrimitive)
agcls.AgTypeNameMap["IAgStkGraphicsVectorPrimitive"] = IAgStkGraphicsVectorPrimitive

class IAgStkGraphicsBoxTriangulatorInitializer(object):
    """Triangulates a box. It is recommended to visualize the box using a solid primitive. Although, if only the fill is desired for visualization, a triangle mesh primitive with render back then front faces set to true can be used..."""
    _num_methods = 1
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{3d49da39-dbe0-4ef9-b589-bc0cf5e78085}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "Compute" : 1, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsBoxTriangulatorInitializer._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsBoxTriangulatorInitializer from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsBoxTriangulatorInitializer.__dict__ and type(IAgStkGraphicsBoxTriangulatorInitializer.__dict__[attrname]) == property:
            return IAgStkGraphicsBoxTriangulatorInitializer.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsBoxTriangulatorInitializer.")
    
    _Compute_metadata = { "name" : "Compute",
            "arg_types" : (POINTER(agcom.LPSAFEARRAY), POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg, agmarshall.AgInterface_out_arg,) }
    def Compute(self, size:list) -> "IAgStkGraphicsSolidTriangulatorResult":
        """Computes the triangulation for a box of the specified size, centered at the origin."""
        return self._intf.invoke(IAgStkGraphicsBoxTriangulatorInitializer._metadata, IAgStkGraphicsBoxTriangulatorInitializer._Compute_metadata, size, out_arg())


agcls.AgClassCatalog.add_catalog_entry("{3d49da39-dbe0-4ef9-b589-bc0cf5e78085}", IAgStkGraphicsBoxTriangulatorInitializer)
agcls.AgTypeNameMap["IAgStkGraphicsBoxTriangulatorInitializer"] = IAgStkGraphicsBoxTriangulatorInitializer

class IAgStkGraphicsCylinderTriangulatorInitializer(object):
    """Triangulates a cylinder. It is recommended to visualize the cylinder using a solid primitive. Although, if only the fill is desired for visualization, a triangle mesh primitive with render back then front faces set to true can be used..."""
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{ee39d933-ce2c-4087-8c8a-f38ebe83842f}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "CreateSimple" : 1,
                             "Compute" : 2, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsCylinderTriangulatorInitializer._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsCylinderTriangulatorInitializer from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsCylinderTriangulatorInitializer.__dict__ and type(IAgStkGraphicsCylinderTriangulatorInitializer.__dict__[attrname]) == property:
            return IAgStkGraphicsCylinderTriangulatorInitializer.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsCylinderTriangulatorInitializer.")
    
    _CreateSimple_metadata = { "name" : "CreateSimple",
            "arg_types" : (agcom.DOUBLE, agcom.DOUBLE, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg, agmarshall.AgInterface_out_arg,) }
    def CreateSimple(self, length:float, radius:float) -> "IAgStkGraphicsSolidTriangulatorResult":
        """Computes the triangulation for a cylinder centered at the origin."""
        return self._intf.invoke(IAgStkGraphicsCylinderTriangulatorInitializer._metadata, IAgStkGraphicsCylinderTriangulatorInitializer._CreateSimple_metadata, length, radius, out_arg())

    _Compute_metadata = { "name" : "Compute",
            "arg_types" : (agcom.DOUBLE, agcom.DOUBLE, agcom.DOUBLE, agcom.INT, agcom.LONG, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg, agmarshall.INT_arg, agmarshall.AgEnum_arg(AgEStkGraphicsCylinderFill), agmarshall.AgInterface_out_arg,) }
    def Compute(self, length:float, bottomRadius:float, topRadius:float, slices:int, cylinderFill:"AgEStkGraphicsCylinderFill") -> "IAgStkGraphicsSolidTriangulatorResult":
        """Computes the triangulation for a cylinder centered at the origin."""
        return self._intf.invoke(IAgStkGraphicsCylinderTriangulatorInitializer._metadata, IAgStkGraphicsCylinderTriangulatorInitializer._Compute_metadata, length, bottomRadius, topRadius, slices, cylinderFill, out_arg())


agcls.AgClassCatalog.add_catalog_entry("{ee39d933-ce2c-4087-8c8a-f38ebe83842f}", IAgStkGraphicsCylinderTriangulatorInitializer)
agcls.AgTypeNameMap["IAgStkGraphicsCylinderTriangulatorInitializer"] = IAgStkGraphicsCylinderTriangulatorInitializer

class IAgStkGraphicsEllipsoidTriangulatorInitializer(object):
    """Triangulates an ellipsoid. It is recommended to visualize the ellipsoid using a solid primitive. Although, if only the fill is desired for visualization, a triangle mesh primitive with render back then front faces set to true can be used..."""
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{8c50173b-e1e0-4321-aeac-5c75e4ef323f}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "ComputeSimple" : 1,
                             "Compute" : 2, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsEllipsoidTriangulatorInitializer._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsEllipsoidTriangulatorInitializer from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsEllipsoidTriangulatorInitializer.__dict__ and type(IAgStkGraphicsEllipsoidTriangulatorInitializer.__dict__[attrname]) == property:
            return IAgStkGraphicsEllipsoidTriangulatorInitializer.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsEllipsoidTriangulatorInitializer.")
    
    _ComputeSimple_metadata = { "name" : "ComputeSimple",
            "arg_types" : (POINTER(agcom.LPSAFEARRAY), POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg, agmarshall.AgInterface_out_arg,) }
    def ComputeSimple(self, radii:list) -> "IAgStkGraphicsSolidTriangulatorResult":
        """Computes the triangulation for an ellipsoid with the specified radii, centered at the origin, using 32 slices and 16 stacks."""
        return self._intf.invoke(IAgStkGraphicsEllipsoidTriangulatorInitializer._metadata, IAgStkGraphicsEllipsoidTriangulatorInitializer._ComputeSimple_metadata, radii, out_arg())

    _Compute_metadata = { "name" : "Compute",
            "arg_types" : (POINTER(agcom.LPSAFEARRAY), agcom.INT, agcom.INT, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg, agmarshall.INT_arg, agmarshall.INT_arg, agmarshall.AgInterface_out_arg,) }
    def Compute(self, radii:list, slices:int, stacks:int) -> "IAgStkGraphicsSolidTriangulatorResult":
        """Computes the triangulation for an ellipsoid with the specified radii, centered at the origin."""
        return self._intf.invoke(IAgStkGraphicsEllipsoidTriangulatorInitializer._metadata, IAgStkGraphicsEllipsoidTriangulatorInitializer._Compute_metadata, radii, slices, stacks, out_arg())


agcls.AgClassCatalog.add_catalog_entry("{8c50173b-e1e0-4321-aeac-5c75e4ef323f}", IAgStkGraphicsEllipsoidTriangulatorInitializer)
agcls.AgTypeNameMap["IAgStkGraphicsEllipsoidTriangulatorInitializer"] = IAgStkGraphicsEllipsoidTriangulatorInitializer

class IAgStkGraphicsExtrudedPolylineTriangulatorInitializer(object):
    """Triangulates a polyline into an extrusion with bottom and top boundaries."""
    _num_methods = 12
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{b6b79988-0b1f-4b6e-8970-ff86b6d94b36}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "Compute" : 1,
                             "ComputeWithWindingOrder" : 2,
                             "ComputeCartographic" : 3,
                             "ComputeCartographicWithWindingOrder" : 4,
                             "ComputeWithAltitudes" : 5,
                             "ComputeWithAltitudesAndWindingOrder" : 6,
                             "ComputeCartographicWithAltitudes" : 7,
                             "ComputeCartographicWithAltitudesAndWindingOrder" : 8,
                             "ComputeSingleConstantAltitude" : 9,
                             "ComputeSingleConstantAltitudeWithWindingOrder" : 10,
                             "ComputeSingleConstantAltitudeCartographic" : 11,
                             "ComputeSingleConstantAltitudeCartographicWithWindingOrder" : 12, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsExtrudedPolylineTriangulatorInitializer._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsExtrudedPolylineTriangulatorInitializer from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsExtrudedPolylineTriangulatorInitializer.__dict__ and type(IAgStkGraphicsExtrudedPolylineTriangulatorInitializer.__dict__[attrname]) == property:
            return IAgStkGraphicsExtrudedPolylineTriangulatorInitializer.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsExtrudedPolylineTriangulatorInitializer.")
    
    _Compute_metadata = { "name" : "Compute",
            "arg_types" : (agcom.BSTR, POINTER(agcom.LPSAFEARRAY), POINTER(agcom.LPSAFEARRAY), POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.LPSAFEARRAY_arg, agmarshall.LPSAFEARRAY_arg, agmarshall.AgInterface_out_arg,) }
    def Compute(self, centralBody:str, bottomPositions:list, topPositions:list) -> "IAgStkGraphicsExtrudedPolylineTriangulatorResult":
        """Computes an extrusion between bottomPositions and topPositions on the specified centralBody. This is equivalent to calling Compute with a positionsWindingOrder of compute."""
        return self._intf.invoke(IAgStkGraphicsExtrudedPolylineTriangulatorInitializer._metadata, IAgStkGraphicsExtrudedPolylineTriangulatorInitializer._Compute_metadata, centralBody, bottomPositions, topPositions, out_arg())

    _ComputeWithWindingOrder_metadata = { "name" : "ComputeWithWindingOrder",
            "arg_types" : (agcom.BSTR, POINTER(agcom.LPSAFEARRAY), POINTER(agcom.LPSAFEARRAY), agcom.LONG, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.LPSAFEARRAY_arg, agmarshall.LPSAFEARRAY_arg, agmarshall.AgEnum_arg(AgEStkGraphicsWindingOrder), agmarshall.AgInterface_out_arg,) }
    def ComputeWithWindingOrder(self, centralBody:str, bottomPositions:list, topPositions:list, positionsWindingOrder:"AgEStkGraphicsWindingOrder") -> "IAgStkGraphicsExtrudedPolylineTriangulatorResult":
        """Computes an extrusion between bottomPositions and topPositions on the specified centralBody."""
        return self._intf.invoke(IAgStkGraphicsExtrudedPolylineTriangulatorInitializer._metadata, IAgStkGraphicsExtrudedPolylineTriangulatorInitializer._ComputeWithWindingOrder_metadata, centralBody, bottomPositions, topPositions, positionsWindingOrder, out_arg())

    _ComputeCartographic_metadata = { "name" : "ComputeCartographic",
            "arg_types" : (agcom.BSTR, POINTER(agcom.LPSAFEARRAY), POINTER(agcom.LPSAFEARRAY), POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.LPSAFEARRAY_arg, agmarshall.LPSAFEARRAY_arg, agmarshall.AgInterface_out_arg,) }
    def ComputeCartographic(self, centralBody:str, bottomPositions:list, topPositions:list) -> "IAgStkGraphicsExtrudedPolylineTriangulatorResult":
        """For convenience. Computes an extrusion between bottomPositions and topPositions on the specified centralBody using cartographic positions. This is equivalent to converting each position in bottomPositions and topPositions to cartesian and calling Compute"""
        return self._intf.invoke(IAgStkGraphicsExtrudedPolylineTriangulatorInitializer._metadata, IAgStkGraphicsExtrudedPolylineTriangulatorInitializer._ComputeCartographic_metadata, centralBody, bottomPositions, topPositions, out_arg())

    _ComputeCartographicWithWindingOrder_metadata = { "name" : "ComputeCartographicWithWindingOrder",
            "arg_types" : (agcom.BSTR, POINTER(agcom.LPSAFEARRAY), POINTER(agcom.LPSAFEARRAY), agcom.LONG, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.LPSAFEARRAY_arg, agmarshall.LPSAFEARRAY_arg, agmarshall.AgEnum_arg(AgEStkGraphicsWindingOrder), agmarshall.AgInterface_out_arg,) }
    def ComputeCartographicWithWindingOrder(self, centralBody:str, bottomPositions:list, topPositions:list, positionsWindingOrder:"AgEStkGraphicsWindingOrder") -> "IAgStkGraphicsExtrudedPolylineTriangulatorResult":
        """For convenience. Computes an extrusion between bottomPositions and topPositions on the specified centralBody using cartographic positions. This is equivalent to converting each position in bottomPositions and topPositions to cartesian and calling Compute"""
        return self._intf.invoke(IAgStkGraphicsExtrudedPolylineTriangulatorInitializer._metadata, IAgStkGraphicsExtrudedPolylineTriangulatorInitializer._ComputeCartographicWithWindingOrder_metadata, centralBody, bottomPositions, topPositions, positionsWindingOrder, out_arg())

    _ComputeWithAltitudes_metadata = { "name" : "ComputeWithAltitudes",
            "arg_types" : (agcom.BSTR, POINTER(agcom.LPSAFEARRAY), agcom.DOUBLE, agcom.DOUBLE, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.LPSAFEARRAY_arg, agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg, agmarshall.AgInterface_out_arg,) }
    def ComputeWithAltitudes(self, centralBody:str, positions:list, bottomAltitude:float, topAltitude:float) -> "IAgStkGraphicsExtrudedPolylineTriangulatorResult":
        """Computes an extrusion of positions on the specified centralBody with a constant bottomAltitude and topAltitude. This is equivalent to calling Compute with a positionsWindingOrder of compute."""
        return self._intf.invoke(IAgStkGraphicsExtrudedPolylineTriangulatorInitializer._metadata, IAgStkGraphicsExtrudedPolylineTriangulatorInitializer._ComputeWithAltitudes_metadata, centralBody, positions, bottomAltitude, topAltitude, out_arg())

    _ComputeWithAltitudesAndWindingOrder_metadata = { "name" : "ComputeWithAltitudesAndWindingOrder",
            "arg_types" : (agcom.BSTR, POINTER(agcom.LPSAFEARRAY), agcom.DOUBLE, agcom.DOUBLE, agcom.LONG, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.LPSAFEARRAY_arg, agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg, agmarshall.AgEnum_arg(AgEStkGraphicsWindingOrder), agmarshall.AgInterface_out_arg,) }
    def ComputeWithAltitudesAndWindingOrder(self, centralBody:str, positions:list, bottomAltitude:float, topAltitude:float, positionsWindingOrder:"AgEStkGraphicsWindingOrder") -> "IAgStkGraphicsExtrudedPolylineTriangulatorResult":
        """Computes an extrusion of positions on the specified centralBody with a constant bottomAltitude and topAltitude."""
        return self._intf.invoke(IAgStkGraphicsExtrudedPolylineTriangulatorInitializer._metadata, IAgStkGraphicsExtrudedPolylineTriangulatorInitializer._ComputeWithAltitudesAndWindingOrder_metadata, centralBody, positions, bottomAltitude, topAltitude, positionsWindingOrder, out_arg())

    _ComputeCartographicWithAltitudes_metadata = { "name" : "ComputeCartographicWithAltitudes",
            "arg_types" : (agcom.BSTR, POINTER(agcom.LPSAFEARRAY), agcom.DOUBLE, agcom.DOUBLE, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.LPSAFEARRAY_arg, agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg, agmarshall.AgInterface_out_arg,) }
    def ComputeCartographicWithAltitudes(self, centralBody:str, positions:list, bottomAltitude:float, topAltitude:float) -> "IAgStkGraphicsExtrudedPolylineTriangulatorResult":
        """For convenience. Computes an extrusion of positions on the specified centralBody with a constant bottomAltitude and topAltitude using cartographic positions. This is equivalent to converting each position in positions to cartesian and calling Compute"""
        return self._intf.invoke(IAgStkGraphicsExtrudedPolylineTriangulatorInitializer._metadata, IAgStkGraphicsExtrudedPolylineTriangulatorInitializer._ComputeCartographicWithAltitudes_metadata, centralBody, positions, bottomAltitude, topAltitude, out_arg())

    _ComputeCartographicWithAltitudesAndWindingOrder_metadata = { "name" : "ComputeCartographicWithAltitudesAndWindingOrder",
            "arg_types" : (agcom.BSTR, POINTER(agcom.LPSAFEARRAY), agcom.DOUBLE, agcom.DOUBLE, agcom.LONG, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.LPSAFEARRAY_arg, agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg, agmarshall.AgEnum_arg(AgEStkGraphicsWindingOrder), agmarshall.AgInterface_out_arg,) }
    def ComputeCartographicWithAltitudesAndWindingOrder(self, centralBody:str, positions:list, bottomAltitude:float, topAltitude:float, positionsWindingOrder:"AgEStkGraphicsWindingOrder") -> "IAgStkGraphicsExtrudedPolylineTriangulatorResult":
        """For convenience. Computes an extrusion of positions on the specified centralBody with a constant bottomAltitude and topAltitude using cartographic positions. This is equivalent to converting each position in positions to cartesian and calling Compute"""
        return self._intf.invoke(IAgStkGraphicsExtrudedPolylineTriangulatorInitializer._metadata, IAgStkGraphicsExtrudedPolylineTriangulatorInitializer._ComputeCartographicWithAltitudesAndWindingOrder_metadata, centralBody, positions, bottomAltitude, topAltitude, positionsWindingOrder, out_arg())

    _ComputeSingleConstantAltitude_metadata = { "name" : "ComputeSingleConstantAltitude",
            "arg_types" : (agcom.BSTR, POINTER(agcom.LPSAFEARRAY), agcom.DOUBLE, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.LPSAFEARRAY_arg, agmarshall.DOUBLE_arg, agmarshall.AgInterface_out_arg,) }
    def ComputeSingleConstantAltitude(self, centralBody:str, positions:list, altitude:float) -> "IAgStkGraphicsExtrudedPolylineTriangulatorResult":
        """Computes an extrusion of positions on the specified centralBody. One side of the extrusion has a constant altitude and the other has the original altitudes from positions..."""
        return self._intf.invoke(IAgStkGraphicsExtrudedPolylineTriangulatorInitializer._metadata, IAgStkGraphicsExtrudedPolylineTriangulatorInitializer._ComputeSingleConstantAltitude_metadata, centralBody, positions, altitude, out_arg())

    _ComputeSingleConstantAltitudeWithWindingOrder_metadata = { "name" : "ComputeSingleConstantAltitudeWithWindingOrder",
            "arg_types" : (agcom.BSTR, POINTER(agcom.LPSAFEARRAY), agcom.DOUBLE, agcom.LONG, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.LPSAFEARRAY_arg, agmarshall.DOUBLE_arg, agmarshall.AgEnum_arg(AgEStkGraphicsWindingOrder), agmarshall.AgInterface_out_arg,) }
    def ComputeSingleConstantAltitudeWithWindingOrder(self, centralBody:str, positions:list, altitude:float, positionsWindingOrder:"AgEStkGraphicsWindingOrder") -> "IAgStkGraphicsExtrudedPolylineTriangulatorResult":
        """Computes an extrusion of positions on the specified centralBody. One side of the extrusion has a constant altitude and the other has the original altitudes from positions."""
        return self._intf.invoke(IAgStkGraphicsExtrudedPolylineTriangulatorInitializer._metadata, IAgStkGraphicsExtrudedPolylineTriangulatorInitializer._ComputeSingleConstantAltitudeWithWindingOrder_metadata, centralBody, positions, altitude, positionsWindingOrder, out_arg())

    _ComputeSingleConstantAltitudeCartographic_metadata = { "name" : "ComputeSingleConstantAltitudeCartographic",
            "arg_types" : (agcom.BSTR, POINTER(agcom.LPSAFEARRAY), agcom.DOUBLE, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.LPSAFEARRAY_arg, agmarshall.DOUBLE_arg, agmarshall.AgInterface_out_arg,) }
    def ComputeSingleConstantAltitudeCartographic(self, centralBody:str, positions:list, altitude:float) -> "IAgStkGraphicsExtrudedPolylineTriangulatorResult":
        """For convenience. Computes an extrusion of positions on the specified centralBody using cartographic positions. One side of the extrusion has a constant altitude and the other has the original altitudes from positions..."""
        return self._intf.invoke(IAgStkGraphicsExtrudedPolylineTriangulatorInitializer._metadata, IAgStkGraphicsExtrudedPolylineTriangulatorInitializer._ComputeSingleConstantAltitudeCartographic_metadata, centralBody, positions, altitude, out_arg())

    _ComputeSingleConstantAltitudeCartographicWithWindingOrder_metadata = { "name" : "ComputeSingleConstantAltitudeCartographicWithWindingOrder",
            "arg_types" : (agcom.BSTR, POINTER(agcom.LPSAFEARRAY), agcom.DOUBLE, agcom.LONG, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.LPSAFEARRAY_arg, agmarshall.DOUBLE_arg, agmarshall.AgEnum_arg(AgEStkGraphicsWindingOrder), agmarshall.AgInterface_out_arg,) }
    def ComputeSingleConstantAltitudeCartographicWithWindingOrder(self, centralBody:str, positions:list, altitude:float, positionsWindingOrder:"AgEStkGraphicsWindingOrder") -> "IAgStkGraphicsExtrudedPolylineTriangulatorResult":
        """For convenience. Computes an extrusion of positions on the specified centralBody using cartographic positions. One side of the extrusion has a constant altitude and the other has the original altitudes from positions..."""
        return self._intf.invoke(IAgStkGraphicsExtrudedPolylineTriangulatorInitializer._metadata, IAgStkGraphicsExtrudedPolylineTriangulatorInitializer._ComputeSingleConstantAltitudeCartographicWithWindingOrder_metadata, centralBody, positions, altitude, positionsWindingOrder, out_arg())


agcls.AgClassCatalog.add_catalog_entry("{b6b79988-0b1f-4b6e-8970-ff86b6d94b36}", IAgStkGraphicsExtrudedPolylineTriangulatorInitializer)
agcls.AgTypeNameMap["IAgStkGraphicsExtrudedPolylineTriangulatorInitializer"] = IAgStkGraphicsExtrudedPolylineTriangulatorInitializer

class IAgStkGraphicsSurfaceExtentTriangulatorInitializer(object):
    """Triangulates an extent on a central body into a triangle mesh and a surrounding boundary. The mesh is commonly visualized with the triangle mesh primitive or surface mesh primitive. The boundary is commonly visualized with the polyline primitive."""
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{74b85e21-b114-46b6-820d-2be8adc7ea7a}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "ComputeSimple" : 1,
                             "Compute" : 2, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsSurfaceExtentTriangulatorInitializer._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsSurfaceExtentTriangulatorInitializer from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsSurfaceExtentTriangulatorInitializer.__dict__ and type(IAgStkGraphicsSurfaceExtentTriangulatorInitializer.__dict__[attrname]) == property:
            return IAgStkGraphicsSurfaceExtentTriangulatorInitializer.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsSurfaceExtentTriangulatorInitializer.")
    
    _ComputeSimple_metadata = { "name" : "ComputeSimple",
            "arg_types" : (agcom.BSTR, POINTER(agcom.LPSAFEARRAY), POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.LPSAFEARRAY_arg, agmarshall.AgInterface_out_arg,) }
    def ComputeSimple(self, centralBody:str, extent:list) -> "IAgStkGraphicsSurfaceTriangulatorResult":
        """Computes a triangulation on the specified centralBody for the specified extent. This is equivalent to calling Compute with an altitude of 0 and a granularity of 1 degree."""
        return self._intf.invoke(IAgStkGraphicsSurfaceExtentTriangulatorInitializer._metadata, IAgStkGraphicsSurfaceExtentTriangulatorInitializer._ComputeSimple_metadata, centralBody, extent, out_arg())

    _Compute_metadata = { "name" : "Compute",
            "arg_types" : (agcom.BSTR, POINTER(agcom.LPSAFEARRAY), agcom.DOUBLE, agcom.DOUBLE, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.LPSAFEARRAY_arg, agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg, agmarshall.AgInterface_out_arg,) }
    def Compute(self, centralBody:str, extent:list, altitude:float, granularity:float) -> "IAgStkGraphicsSurfaceTriangulatorResult":
        """Computes a triangulation on the specified centralBody for the specified extent."""
        return self._intf.invoke(IAgStkGraphicsSurfaceExtentTriangulatorInitializer._metadata, IAgStkGraphicsSurfaceExtentTriangulatorInitializer._Compute_metadata, centralBody, extent, altitude, granularity, out_arg())


agcls.AgClassCatalog.add_catalog_entry("{74b85e21-b114-46b6-820d-2be8adc7ea7a}", IAgStkGraphicsSurfaceExtentTriangulatorInitializer)
agcls.AgTypeNameMap["IAgStkGraphicsSurfaceExtentTriangulatorInitializer"] = IAgStkGraphicsSurfaceExtentTriangulatorInitializer

class IAgStkGraphicsSurfacePolygonTriangulatorInitializer(object):
    """Triangulates a polygon, with an optional hole, on a central body, into a triangle mesh and a surrounding boundary. The mesh is commonly visualized with the triangle mesh primitive or surface mesh primitive..."""
    _num_methods = 6
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{52654c8a-3c27-415f-b346-c0e433241b49}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "Compute" : 1,
                             "ComputeCartographic" : 2,
                             "ComputeWithHole" : 3,
                             "ComputeWithHoleAltitudeAndGranularity" : 4,
                             "ComputeWithAltitudeAndGranularity" : 5,
                             "ComputeCartographicWithAltitudeAndGranularity" : 6, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsSurfacePolygonTriangulatorInitializer._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsSurfacePolygonTriangulatorInitializer from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsSurfacePolygonTriangulatorInitializer.__dict__ and type(IAgStkGraphicsSurfacePolygonTriangulatorInitializer.__dict__[attrname]) == property:
            return IAgStkGraphicsSurfacePolygonTriangulatorInitializer.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsSurfacePolygonTriangulatorInitializer.")
    
    _Compute_metadata = { "name" : "Compute",
            "arg_types" : (agcom.BSTR, POINTER(agcom.LPSAFEARRAY), POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.LPSAFEARRAY_arg, agmarshall.AgInterface_out_arg,) }
    def Compute(self, centralBody:str, positions:list) -> "IAgStkGraphicsSurfaceTriangulatorResult":
        """Computes the triangulation on the specified centralBody for a polygon whose boundary is defined by the specified positions. This is equivalent to calling Compute with an altitude of 0, a granularity of 1 degree, and a positionsWindingOrder of compute."""
        return self._intf.invoke(IAgStkGraphicsSurfacePolygonTriangulatorInitializer._metadata, IAgStkGraphicsSurfacePolygonTriangulatorInitializer._Compute_metadata, centralBody, positions, out_arg())

    _ComputeCartographic_metadata = { "name" : "ComputeCartographic",
            "arg_types" : (agcom.BSTR, POINTER(agcom.LPSAFEARRAY), POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.LPSAFEARRAY_arg, agmarshall.AgInterface_out_arg,) }
    def ComputeCartographic(self, centralBody:str, positions:list) -> "IAgStkGraphicsSurfaceTriangulatorResult":
        """For convenience. Computes the triangulation on the specified centralBody for a polygon whose boundary is defined by the specified cartographic positions. This is equivalent to converting each position in positions to cartesian and calling Compute"""
        return self._intf.invoke(IAgStkGraphicsSurfacePolygonTriangulatorInitializer._metadata, IAgStkGraphicsSurfacePolygonTriangulatorInitializer._ComputeCartographic_metadata, centralBody, positions, out_arg())

    _ComputeWithHole_metadata = { "name" : "ComputeWithHole",
            "arg_types" : (agcom.BSTR, POINTER(agcom.LPSAFEARRAY), POINTER(agcom.LPSAFEARRAY), POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.LPSAFEARRAY_arg, agmarshall.LPSAFEARRAY_arg, agmarshall.AgInterface_out_arg,) }
    def ComputeWithHole(self, centralBody:str, positions:list, holePositions:list) -> "IAgStkGraphicsSurfaceTriangulatorResult":
        """Computes the triangulation on the specified centralBody for a polygon whose boundary is defined by the specified positions with a hole specified by holePositions. This is equivalent to calling Compute with an altitude of 0 and a granularity of 1 degree."""
        return self._intf.invoke(IAgStkGraphicsSurfacePolygonTriangulatorInitializer._metadata, IAgStkGraphicsSurfacePolygonTriangulatorInitializer._ComputeWithHole_metadata, centralBody, positions, holePositions, out_arg())

    _ComputeWithHoleAltitudeAndGranularity_metadata = { "name" : "ComputeWithHoleAltitudeAndGranularity",
            "arg_types" : (agcom.BSTR, POINTER(agcom.LPSAFEARRAY), POINTER(agcom.LPSAFEARRAY), agcom.DOUBLE, agcom.DOUBLE, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.LPSAFEARRAY_arg, agmarshall.LPSAFEARRAY_arg, agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg, agmarshall.AgInterface_out_arg,) }
    def ComputeWithHoleAltitudeAndGranularity(self, centralBody:str, positions:list, holePositions:list, altitude:float, granularity:float) -> "IAgStkGraphicsSurfaceTriangulatorResult":
        """Computes the triangulation on the specified centralBody for a polygon whose boundary is defined by the specified positions with a hole specified by holePositions."""
        return self._intf.invoke(IAgStkGraphicsSurfacePolygonTriangulatorInitializer._metadata, IAgStkGraphicsSurfacePolygonTriangulatorInitializer._ComputeWithHoleAltitudeAndGranularity_metadata, centralBody, positions, holePositions, altitude, granularity, out_arg())

    _ComputeWithAltitudeAndGranularity_metadata = { "name" : "ComputeWithAltitudeAndGranularity",
            "arg_types" : (agcom.BSTR, POINTER(agcom.LPSAFEARRAY), agcom.DOUBLE, agcom.DOUBLE, agcom.LONG, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.LPSAFEARRAY_arg, agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg, agmarshall.AgEnum_arg(AgEStkGraphicsWindingOrder), agmarshall.AgInterface_out_arg,) }
    def ComputeWithAltitudeAndGranularity(self, centralBody:str, positions:list, altitude:float, granularity:float, positionsWindingOrder:"AgEStkGraphicsWindingOrder") -> "IAgStkGraphicsSurfaceTriangulatorResult":
        """Computes the triangulation on the specified centralBody for a polygon whose boundary is defined by the specified positions."""
        return self._intf.invoke(IAgStkGraphicsSurfacePolygonTriangulatorInitializer._metadata, IAgStkGraphicsSurfacePolygonTriangulatorInitializer._ComputeWithAltitudeAndGranularity_metadata, centralBody, positions, altitude, granularity, positionsWindingOrder, out_arg())

    _ComputeCartographicWithAltitudeAndGranularity_metadata = { "name" : "ComputeCartographicWithAltitudeAndGranularity",
            "arg_types" : (agcom.BSTR, POINTER(agcom.LPSAFEARRAY), agcom.DOUBLE, agcom.DOUBLE, agcom.LONG, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.LPSAFEARRAY_arg, agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg, agmarshall.AgEnum_arg(AgEStkGraphicsWindingOrder), agmarshall.AgInterface_out_arg,) }
    def ComputeCartographicWithAltitudeAndGranularity(self, centralBody:str, positions:list, altitude:float, granularity:float, positionsWindingOrder:"AgEStkGraphicsWindingOrder") -> "IAgStkGraphicsSurfaceTriangulatorResult":
        """For convenience. Computes the triangulation on the specified centralBody for a polygon whose boundary is defined by the specified cartographic positions. This is equivalent to converting each position in positions to cartesian and calling Compute"""
        return self._intf.invoke(IAgStkGraphicsSurfacePolygonTriangulatorInitializer._metadata, IAgStkGraphicsSurfacePolygonTriangulatorInitializer._ComputeCartographicWithAltitudeAndGranularity_metadata, centralBody, positions, altitude, granularity, positionsWindingOrder, out_arg())


agcls.AgClassCatalog.add_catalog_entry("{52654c8a-3c27-415f-b346-c0e433241b49}", IAgStkGraphicsSurfacePolygonTriangulatorInitializer)
agcls.AgTypeNameMap["IAgStkGraphicsSurfacePolygonTriangulatorInitializer"] = IAgStkGraphicsSurfacePolygonTriangulatorInitializer

class IAgStkGraphicsSurfaceShapesInitializer(object):
    """Computes boundary positions for shapes on the surface such as circles, ellipses, and sectors."""
    _num_methods = 12
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{8b711790-8bc2-4e20-8795-89a4863a0566}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "ComputeCircleWithGranularity" : 1,
                             "ComputeCircle" : 2,
                             "ComputeCircleCartographicWithGranularity" : 3,
                             "ComputeCircleCartographic" : 4,
                             "ComputeEllipseWithGranularity" : 5,
                             "ComputeEllipse" : 6,
                             "ComputeEllipseCartographicWithGranularity" : 7,
                             "ComputeEllipseCartographic" : 8,
                             "ComputeSectorWithGranularity" : 9,
                             "ComputeSector" : 10,
                             "ComputeSectorCartographicWithGranularity" : 11,
                             "ComputeSectorCartographic" : 12, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsSurfaceShapesInitializer._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsSurfaceShapesInitializer from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsSurfaceShapesInitializer.__dict__ and type(IAgStkGraphicsSurfaceShapesInitializer.__dict__[attrname]) == property:
            return IAgStkGraphicsSurfaceShapesInitializer.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsSurfaceShapesInitializer.")
    
    _ComputeCircleWithGranularity_metadata = { "name" : "ComputeCircleWithGranularity",
            "arg_types" : (agcom.BSTR, POINTER(agcom.LPSAFEARRAY), agcom.DOUBLE, agcom.DOUBLE, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.LPSAFEARRAY_arg, agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg, agmarshall.AgInterface_out_arg,) }
    def ComputeCircleWithGranularity(self, centralBody:str, center:list, radius:float, granularity:float) -> "IAgStkGraphicsSurfaceShapesResult":
        """Computes boundary positions for a circle on the specified centralBody with the specified center, radius and granularity."""
        return self._intf.invoke(IAgStkGraphicsSurfaceShapesInitializer._metadata, IAgStkGraphicsSurfaceShapesInitializer._ComputeCircleWithGranularity_metadata, centralBody, center, radius, granularity, out_arg())

    _ComputeCircle_metadata = { "name" : "ComputeCircle",
            "arg_types" : (agcom.BSTR, POINTER(agcom.LPSAFEARRAY), agcom.DOUBLE, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.LPSAFEARRAY_arg, agmarshall.DOUBLE_arg, agmarshall.AgInterface_out_arg,) }
    def ComputeCircle(self, centralBody:str, center:list, radius:float) -> "IAgStkGraphicsSurfaceShapesResult":
        """Computes boundary positions for a circle on the specified centralBody with the specified center and radius. This is equivalent to calling ComputeCircle with a granularity of 1 degree."""
        return self._intf.invoke(IAgStkGraphicsSurfaceShapesInitializer._metadata, IAgStkGraphicsSurfaceShapesInitializer._ComputeCircle_metadata, centralBody, center, radius, out_arg())

    _ComputeCircleCartographicWithGranularity_metadata = { "name" : "ComputeCircleCartographicWithGranularity",
            "arg_types" : (agcom.BSTR, POINTER(agcom.LPSAFEARRAY), agcom.DOUBLE, agcom.DOUBLE, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.LPSAFEARRAY_arg, agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg, agmarshall.AgInterface_out_arg,) }
    def ComputeCircleCartographicWithGranularity(self, centralBody:str, center:list, radius:float, granularity:float) -> "IAgStkGraphicsSurfaceShapesResult":
        """For convenience. Computes boundary positions for a circle on the specified centralBody using a cartographic center. This is equivalent to converting center to cartesian and calling ComputeCircle"""
        return self._intf.invoke(IAgStkGraphicsSurfaceShapesInitializer._metadata, IAgStkGraphicsSurfaceShapesInitializer._ComputeCircleCartographicWithGranularity_metadata, centralBody, center, radius, granularity, out_arg())

    _ComputeCircleCartographic_metadata = { "name" : "ComputeCircleCartographic",
            "arg_types" : (agcom.BSTR, POINTER(agcom.LPSAFEARRAY), agcom.DOUBLE, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.LPSAFEARRAY_arg, agmarshall.DOUBLE_arg, agmarshall.AgInterface_out_arg,) }
    def ComputeCircleCartographic(self, centralBody:str, center:list, radius:float) -> "IAgStkGraphicsSurfaceShapesResult":
        """For convenience. Computes boundary positions for a circle on the specified centralBody using a cartographic center. This is equivalent to converting center to cartesian and calling ComputeCircle"""
        return self._intf.invoke(IAgStkGraphicsSurfaceShapesInitializer._metadata, IAgStkGraphicsSurfaceShapesInitializer._ComputeCircleCartographic_metadata, centralBody, center, radius, out_arg())

    _ComputeEllipseWithGranularity_metadata = { "name" : "ComputeEllipseWithGranularity",
            "arg_types" : (agcom.BSTR, POINTER(agcom.LPSAFEARRAY), agcom.DOUBLE, agcom.DOUBLE, agcom.DOUBLE, agcom.DOUBLE, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.LPSAFEARRAY_arg, agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg, agmarshall.AgInterface_out_arg,) }
    def ComputeEllipseWithGranularity(self, centralBody:str, center:list, majorAxisRadius:float, minorAxisRadius:float, bearing:float, granularity:float) -> "IAgStkGraphicsSurfaceShapesResult":
        """Computes boundary positions for an ellipse on the specified centralBody."""
        return self._intf.invoke(IAgStkGraphicsSurfaceShapesInitializer._metadata, IAgStkGraphicsSurfaceShapesInitializer._ComputeEllipseWithGranularity_metadata, centralBody, center, majorAxisRadius, minorAxisRadius, bearing, granularity, out_arg())

    _ComputeEllipse_metadata = { "name" : "ComputeEllipse",
            "arg_types" : (agcom.BSTR, POINTER(agcom.LPSAFEARRAY), agcom.DOUBLE, agcom.DOUBLE, agcom.DOUBLE, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.LPSAFEARRAY_arg, agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg, agmarshall.AgInterface_out_arg,) }
    def ComputeEllipse(self, centralBody:str, center:list, majorAxisRadius:float, minorAxisRadius:float, bearing:float) -> "IAgStkGraphicsSurfaceShapesResult":
        """Computes boundary positions for an ellipse on the specified centralBody This is equivalent to calling ComputeEllipse with a granularity of 1 degree."""
        return self._intf.invoke(IAgStkGraphicsSurfaceShapesInitializer._metadata, IAgStkGraphicsSurfaceShapesInitializer._ComputeEllipse_metadata, centralBody, center, majorAxisRadius, minorAxisRadius, bearing, out_arg())

    _ComputeEllipseCartographicWithGranularity_metadata = { "name" : "ComputeEllipseCartographicWithGranularity",
            "arg_types" : (agcom.BSTR, POINTER(agcom.LPSAFEARRAY), agcom.DOUBLE, agcom.DOUBLE, agcom.DOUBLE, agcom.DOUBLE, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.LPSAFEARRAY_arg, agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg, agmarshall.AgInterface_out_arg,) }
    def ComputeEllipseCartographicWithGranularity(self, centralBody:str, center:list, majorAxisRadius:float, minorAxisRadius:float, bearing:float, granularity:float) -> "IAgStkGraphicsSurfaceShapesResult":
        """For convenience. Computes boundary positions for an ellipse on the specified centralBody using a cartographic center. This is equivalent to converting center to cartesian and calling ComputeEllipse"""
        return self._intf.invoke(IAgStkGraphicsSurfaceShapesInitializer._metadata, IAgStkGraphicsSurfaceShapesInitializer._ComputeEllipseCartographicWithGranularity_metadata, centralBody, center, majorAxisRadius, minorAxisRadius, bearing, granularity, out_arg())

    _ComputeEllipseCartographic_metadata = { "name" : "ComputeEllipseCartographic",
            "arg_types" : (agcom.BSTR, POINTER(agcom.LPSAFEARRAY), agcom.DOUBLE, agcom.DOUBLE, agcom.DOUBLE, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.LPSAFEARRAY_arg, agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg, agmarshall.AgInterface_out_arg,) }
    def ComputeEllipseCartographic(self, centralBody:str, center:list, majorAxisRadius:float, minorAxisRadius:float, bearing:float) -> "IAgStkGraphicsSurfaceShapesResult":
        """For convenience. Computes boundary positions for an ellipse on the specified centralBody using a cartographic center. This is equivalent to converting center to cartesian and calling ComputeEllipse"""
        return self._intf.invoke(IAgStkGraphicsSurfaceShapesInitializer._metadata, IAgStkGraphicsSurfaceShapesInitializer._ComputeEllipseCartographic_metadata, centralBody, center, majorAxisRadius, minorAxisRadius, bearing, out_arg())

    _ComputeSectorWithGranularity_metadata = { "name" : "ComputeSectorWithGranularity",
            "arg_types" : (agcom.BSTR, POINTER(agcom.LPSAFEARRAY), agcom.DOUBLE, agcom.DOUBLE, agcom.DOUBLE, agcom.DOUBLE, agcom.DOUBLE, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.LPSAFEARRAY_arg, agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg, agmarshall.AgInterface_out_arg,) }
    def ComputeSectorWithGranularity(self, centralBody:str, center:list, innerRadius:float, outerRadius:float, startBearing:float, endBearing:float, granularity:float) -> "IAgStkGraphicsSurfaceShapesResult":
        """Computes boundary positions for a sector on the specified centralBody."""
        return self._intf.invoke(IAgStkGraphicsSurfaceShapesInitializer._metadata, IAgStkGraphicsSurfaceShapesInitializer._ComputeSectorWithGranularity_metadata, centralBody, center, innerRadius, outerRadius, startBearing, endBearing, granularity, out_arg())

    _ComputeSector_metadata = { "name" : "ComputeSector",
            "arg_types" : (agcom.BSTR, POINTER(agcom.LPSAFEARRAY), agcom.DOUBLE, agcom.DOUBLE, agcom.DOUBLE, agcom.DOUBLE, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.LPSAFEARRAY_arg, agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg, agmarshall.AgInterface_out_arg,) }
    def ComputeSector(self, centralBody:str, center:list, innerRadius:float, outerRadius:float, startBearing:float, endBearing:float) -> "IAgStkGraphicsSurfaceShapesResult":
        """Computes boundary positions for a sector on the specified centralBody This is equivalent to calling ComputeSector with a granularity of 1 degree."""
        return self._intf.invoke(IAgStkGraphicsSurfaceShapesInitializer._metadata, IAgStkGraphicsSurfaceShapesInitializer._ComputeSector_metadata, centralBody, center, innerRadius, outerRadius, startBearing, endBearing, out_arg())

    _ComputeSectorCartographicWithGranularity_metadata = { "name" : "ComputeSectorCartographicWithGranularity",
            "arg_types" : (agcom.BSTR, POINTER(agcom.LPSAFEARRAY), agcom.DOUBLE, agcom.DOUBLE, agcom.DOUBLE, agcom.DOUBLE, agcom.DOUBLE, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.LPSAFEARRAY_arg, agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg, agmarshall.AgInterface_out_arg,) }
    def ComputeSectorCartographicWithGranularity(self, centralBody:str, center:list, innerRadius:float, outerRadius:float, startBearing:float, endBearing:float, granularity:float) -> "IAgStkGraphicsSurfaceShapesResult":
        """For convenience. Computes boundary positions for a sector on the specified centralBody using a cartographic center. This is equivalent to converting center to cartesian and calling ComputeSector"""
        return self._intf.invoke(IAgStkGraphicsSurfaceShapesInitializer._metadata, IAgStkGraphicsSurfaceShapesInitializer._ComputeSectorCartographicWithGranularity_metadata, centralBody, center, innerRadius, outerRadius, startBearing, endBearing, granularity, out_arg())

    _ComputeSectorCartographic_metadata = { "name" : "ComputeSectorCartographic",
            "arg_types" : (agcom.BSTR, POINTER(agcom.LPSAFEARRAY), agcom.DOUBLE, agcom.DOUBLE, agcom.DOUBLE, agcom.DOUBLE, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.LPSAFEARRAY_arg, agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg, agmarshall.AgInterface_out_arg,) }
    def ComputeSectorCartographic(self, centralBody:str, center:list, innerRadius:float, outerRadius:float, startBearing:float, endBearing:float) -> "IAgStkGraphicsSurfaceShapesResult":
        """For convenience. Computes boundary positions for a sector on the specified centralBody using a cartographic center. This is equivalent to converting center to cartesian and calling ComputeSector"""
        return self._intf.invoke(IAgStkGraphicsSurfaceShapesInitializer._metadata, IAgStkGraphicsSurfaceShapesInitializer._ComputeSectorCartographic_metadata, centralBody, center, innerRadius, outerRadius, startBearing, endBearing, out_arg())


agcls.AgClassCatalog.add_catalog_entry("{8b711790-8bc2-4e20-8795-89a4863a0566}", IAgStkGraphicsSurfaceShapesInitializer)
agcls.AgTypeNameMap["IAgStkGraphicsSurfaceShapesInitializer"] = IAgStkGraphicsSurfaceShapesInitializer

class IAgStkGraphicsAGICustomTerrainOverlayFactory(object):
    """A terrain overlay for handling AGI Cesium Terrain."""
    _num_methods = 1
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{1af28259-1c26-45f4-8156-079012d5bce3}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "InitializeWithString" : 1, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsAGICustomTerrainOverlayFactory._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsAGICustomTerrainOverlayFactory from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsAGICustomTerrainOverlayFactory.__dict__ and type(IAgStkGraphicsAGICustomTerrainOverlayFactory.__dict__[attrname]) == property:
            return IAgStkGraphicsAGICustomTerrainOverlayFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsAGICustomTerrainOverlayFactory.")
    
    _InitializeWithString_metadata = { "name" : "InitializeWithString",
            "arg_types" : (agcom.BSTR, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.AgInterface_out_arg,) }
    def InitializeWithString(self, uri:str) -> "IAgStkGraphicsAGICustomTerrainOverlay":
        """Initializes an agi custom terrain overlay with the provided values."""
        return self._intf.invoke(IAgStkGraphicsAGICustomTerrainOverlayFactory._metadata, IAgStkGraphicsAGICustomTerrainOverlayFactory._InitializeWithString_metadata, uri, out_arg())


agcls.AgClassCatalog.add_catalog_entry("{1af28259-1c26-45f4-8156-079012d5bce3}", IAgStkGraphicsAGICustomTerrainOverlayFactory)
agcls.AgTypeNameMap["IAgStkGraphicsAGICustomTerrainOverlayFactory"] = IAgStkGraphicsAGICustomTerrainOverlayFactory

class IAgStkGraphicsAGIProcessedImageGlobeOverlayFactory(object):
    """A globe image overlay for handling AGI Processed Image (PDTTX) files."""
    _num_methods = 1
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{0d8e18a4-cda4-4b24-9ab0-2f25c83eb32e}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "InitializeWithString" : 1, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsAGIProcessedImageGlobeOverlayFactory._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsAGIProcessedImageGlobeOverlayFactory from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsAGIProcessedImageGlobeOverlayFactory.__dict__ and type(IAgStkGraphicsAGIProcessedImageGlobeOverlayFactory.__dict__[attrname]) == property:
            return IAgStkGraphicsAGIProcessedImageGlobeOverlayFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsAGIProcessedImageGlobeOverlayFactory.")
    
    _InitializeWithString_metadata = { "name" : "InitializeWithString",
            "arg_types" : (agcom.BSTR, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.AgInterface_out_arg,) }
    def InitializeWithString(self, uri:str) -> "IAgStkGraphicsAGIProcessedImageGlobeOverlay":
        """Initializes an agi processed image globe overlay with the provided values."""
        return self._intf.invoke(IAgStkGraphicsAGIProcessedImageGlobeOverlayFactory._metadata, IAgStkGraphicsAGIProcessedImageGlobeOverlayFactory._InitializeWithString_metadata, uri, out_arg())


agcls.AgClassCatalog.add_catalog_entry("{0d8e18a4-cda4-4b24-9ab0-2f25c83eb32e}", IAgStkGraphicsAGIProcessedImageGlobeOverlayFactory)
agcls.AgTypeNameMap["IAgStkGraphicsAGIProcessedImageGlobeOverlayFactory"] = IAgStkGraphicsAGIProcessedImageGlobeOverlayFactory

class IAgStkGraphicsAGIProcessedTerrainOverlayFactory(object):
    """A terrain overlay for handling AGI Processed Terrain (PDTT) files."""
    _num_methods = 1
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{dfeee7d8-cd40-43a5-b168-843f26b027ea}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "InitializeWithString" : 1, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsAGIProcessedTerrainOverlayFactory._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsAGIProcessedTerrainOverlayFactory from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsAGIProcessedTerrainOverlayFactory.__dict__ and type(IAgStkGraphicsAGIProcessedTerrainOverlayFactory.__dict__[attrname]) == property:
            return IAgStkGraphicsAGIProcessedTerrainOverlayFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsAGIProcessedTerrainOverlayFactory.")
    
    _InitializeWithString_metadata = { "name" : "InitializeWithString",
            "arg_types" : (agcom.BSTR, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.AgInterface_out_arg,) }
    def InitializeWithString(self, uri:str) -> "IAgStkGraphicsAGIProcessedTerrainOverlay":
        """Initializes an agi processed terrain overlay with the provided values."""
        return self._intf.invoke(IAgStkGraphicsAGIProcessedTerrainOverlayFactory._metadata, IAgStkGraphicsAGIProcessedTerrainOverlayFactory._InitializeWithString_metadata, uri, out_arg())


agcls.AgClassCatalog.add_catalog_entry("{dfeee7d8-cd40-43a5-b168-843f26b027ea}", IAgStkGraphicsAGIProcessedTerrainOverlayFactory)
agcls.AgTypeNameMap["IAgStkGraphicsAGIProcessedTerrainOverlayFactory"] = IAgStkGraphicsAGIProcessedTerrainOverlayFactory

class IAgStkGraphicsAGIRoamImageGlobeOverlayFactory(object):
    """A globe image overlay for handling ROAM (TXM/TXB) files."""
    _num_methods = 1
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{709d626f-1b45-448d-ad5c-1ff3cb17410e}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "InitializeWithString" : 1, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsAGIRoamImageGlobeOverlayFactory._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsAGIRoamImageGlobeOverlayFactory from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsAGIRoamImageGlobeOverlayFactory.__dict__ and type(IAgStkGraphicsAGIRoamImageGlobeOverlayFactory.__dict__[attrname]) == property:
            return IAgStkGraphicsAGIRoamImageGlobeOverlayFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsAGIRoamImageGlobeOverlayFactory.")
    
    _InitializeWithString_metadata = { "name" : "InitializeWithString",
            "arg_types" : (agcom.BSTR, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.AgInterface_out_arg,) }
    def InitializeWithString(self, uri:str) -> "IAgStkGraphicsAGIRoamImageGlobeOverlay":
        """Initializes an agi roam image globe overlay with the provided values."""
        return self._intf.invoke(IAgStkGraphicsAGIRoamImageGlobeOverlayFactory._metadata, IAgStkGraphicsAGIRoamImageGlobeOverlayFactory._InitializeWithString_metadata, uri, out_arg())


agcls.AgClassCatalog.add_catalog_entry("{709d626f-1b45-448d-ad5c-1ff3cb17410e}", IAgStkGraphicsAGIRoamImageGlobeOverlayFactory)
agcls.AgTypeNameMap["IAgStkGraphicsAGIRoamImageGlobeOverlayFactory"] = IAgStkGraphicsAGIRoamImageGlobeOverlayFactory

class IAgStkGraphicsCustomImageGlobeOverlayPluginActivatorFactory(object):
    """The Activator class provides methods to load COM plugins that implement custom image globe overlays. For more information about custom image globe overlays, see the STK Programming Interface."""
    _num_methods = 1
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{c80d1ae6-db35-4f55-a9a4-131260022535}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "Initialize" : 1, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsCustomImageGlobeOverlayPluginActivatorFactory._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsCustomImageGlobeOverlayPluginActivatorFactory from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsCustomImageGlobeOverlayPluginActivatorFactory.__dict__ and type(IAgStkGraphicsCustomImageGlobeOverlayPluginActivatorFactory.__dict__[attrname]) == property:
            return IAgStkGraphicsCustomImageGlobeOverlayPluginActivatorFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsCustomImageGlobeOverlayPluginActivatorFactory.")
    
    _Initialize_metadata = { "name" : "Initialize",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    def Initialize(self) -> "IAgStkGraphicsCustomImageGlobeOverlayPluginActivator":
        """Initializes a new instance of the Activator type."""
        return self._intf.invoke(IAgStkGraphicsCustomImageGlobeOverlayPluginActivatorFactory._metadata, IAgStkGraphicsCustomImageGlobeOverlayPluginActivatorFactory._Initialize_metadata, out_arg())


agcls.AgClassCatalog.add_catalog_entry("{c80d1ae6-db35-4f55-a9a4-131260022535}", IAgStkGraphicsCustomImageGlobeOverlayPluginActivatorFactory)
agcls.AgTypeNameMap["IAgStkGraphicsCustomImageGlobeOverlayPluginActivatorFactory"] = IAgStkGraphicsCustomImageGlobeOverlayPluginActivatorFactory

class IAgStkGraphicsGeospatialImageGlobeOverlayFactory(object):
    """A globe image overlay for handling <a href='https://jpeg.org/jpeg2000/'>JPEG 2000</a> (.jp2), ECW (.ecw), ECWP, and MrSid (.sid) image formats in the WGS84 geographic projection."""
    _num_methods = 1
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{77060b41-7b24-4118-ab48-22efb3007c76}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "InitializeWithString" : 1, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsGeospatialImageGlobeOverlayFactory._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsGeospatialImageGlobeOverlayFactory from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsGeospatialImageGlobeOverlayFactory.__dict__ and type(IAgStkGraphicsGeospatialImageGlobeOverlayFactory.__dict__[attrname]) == property:
            return IAgStkGraphicsGeospatialImageGlobeOverlayFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsGeospatialImageGlobeOverlayFactory.")
    
    _InitializeWithString_metadata = { "name" : "InitializeWithString",
            "arg_types" : (agcom.BSTR, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.AgInterface_out_arg,) }
    def InitializeWithString(self, uri:str) -> "IAgStkGraphicsGeospatialImageGlobeOverlay":
        """Initializes a geospatial image globe overlay with the provided values."""
        return self._intf.invoke(IAgStkGraphicsGeospatialImageGlobeOverlayFactory._metadata, IAgStkGraphicsGeospatialImageGlobeOverlayFactory._InitializeWithString_metadata, uri, out_arg())


agcls.AgClassCatalog.add_catalog_entry("{77060b41-7b24-4118-ab48-22efb3007c76}", IAgStkGraphicsGeospatialImageGlobeOverlayFactory)
agcls.AgTypeNameMap["IAgStkGraphicsGeospatialImageGlobeOverlayFactory"] = IAgStkGraphicsGeospatialImageGlobeOverlayFactory

class IAgStkGraphicsProjectedRasterOverlayFactory(object):
    """A globe image overlay which projects a raster onto the terrain or surface of the central body. You can also enable projection onto models by setting projected raster model projection to true for a Scene..."""
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{616abf78-55f7-41a7-a6b7-2da4ae822856}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "Initialize" : 1,
                             "get_Supported" : 2, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsProjectedRasterOverlayFactory._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsProjectedRasterOverlayFactory from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsProjectedRasterOverlayFactory.__dict__ and type(IAgStkGraphicsProjectedRasterOverlayFactory.__dict__[attrname]) == property:
            return IAgStkGraphicsProjectedRasterOverlayFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsProjectedRasterOverlayFactory.")
    
    _Initialize_metadata = { "name" : "Initialize",
            "arg_types" : (agcom.PVOID, agcom.PVOID, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_in_arg("IAgStkGraphicsRaster"), agmarshall.AgInterface_in_arg("IAgStkGraphicsProjection"), agmarshall.AgInterface_out_arg,) }
    def Initialize(self, raster:"IAgStkGraphicsRaster", projection:"IAgStkGraphicsProjection") -> "IAgStkGraphicsProjectedRasterOverlay":
        """Initializes a new instance."""
        return self._intf.invoke(IAgStkGraphicsProjectedRasterOverlayFactory._metadata, IAgStkGraphicsProjectedRasterOverlayFactory._Initialize_metadata, raster, projection, out_arg())

    _get_Supported_metadata = { "name" : "Supported",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def Supported(self) -> bool:
        """Gets whether or not the video card supports the projected raster overlay."""
        return self._intf.get_property(IAgStkGraphicsProjectedRasterOverlayFactory._metadata, IAgStkGraphicsProjectedRasterOverlayFactory._get_Supported_metadata)


agcls.AgClassCatalog.add_catalog_entry("{616abf78-55f7-41a7-a6b7-2da4ae822856}", IAgStkGraphicsProjectedRasterOverlayFactory)
agcls.AgTypeNameMap["IAgStkGraphicsProjectedRasterOverlayFactory"] = IAgStkGraphicsProjectedRasterOverlayFactory

class IAgStkGraphicsProjectionFactory(object):
    """A projection represents a simplified camera with a position, orientation, and field of view horizontal and field of view vertical..."""
    _num_methods = 3
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{db047d3d-5afd-4b64-b396-034fd95ec57a}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "Initialize" : 1,
                             "InitializeWithData" : 2,
                             "InitializeFromProjection" : 3, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsProjectionFactory._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsProjectionFactory from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsProjectionFactory.__dict__ and type(IAgStkGraphicsProjectionFactory.__dict__[attrname]) == property:
            return IAgStkGraphicsProjectionFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsProjectionFactory.")
    
    _Initialize_metadata = { "name" : "Initialize",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    def Initialize(self) -> "IAgStkGraphicsProjection":
        """Initializes a new instance."""
        return self._intf.invoke(IAgStkGraphicsProjectionFactory._metadata, IAgStkGraphicsProjectionFactory._Initialize_metadata, out_arg())

    _InitializeWithData_metadata = { "name" : "InitializeWithData",
            "arg_types" : (POINTER(agcom.LPSAFEARRAY), agcom.PVOID, agcom.DOUBLE, agcom.DOUBLE, agcom.DOUBLE, agcom.DOUBLE, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg, agmarshall.AgInterface_in_arg("IAgOrientation"), agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg, agmarshall.AgInterface_out_arg,) }
    def InitializeWithData(self, position:list, orientation:"IAgOrientation", fieldOfViewHorizontal:float, fieldOfViewVertical:float, nearPlane:float, farPlane:float) -> "IAgStkGraphicsProjection":
        """Initializes a new instance."""
        return self._intf.invoke(IAgStkGraphicsProjectionFactory._metadata, IAgStkGraphicsProjectionFactory._InitializeWithData_metadata, position, orientation, fieldOfViewHorizontal, fieldOfViewVertical, nearPlane, farPlane, out_arg())

    _InitializeFromProjection_metadata = { "name" : "InitializeFromProjection",
            "arg_types" : (agcom.PVOID, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_in_arg("IAgStkGraphicsProjection"), agmarshall.AgInterface_out_arg,) }
    def InitializeFromProjection(self, projection:"IAgStkGraphicsProjection") -> "IAgStkGraphicsProjection":
        """Initializes a new instance from another projection."""
        return self._intf.invoke(IAgStkGraphicsProjectionFactory._metadata, IAgStkGraphicsProjectionFactory._InitializeFromProjection_metadata, projection, out_arg())


agcls.AgClassCatalog.add_catalog_entry("{db047d3d-5afd-4b64-b396-034fd95ec57a}", IAgStkGraphicsProjectionFactory)
agcls.AgTypeNameMap["IAgStkGraphicsProjectionFactory"] = IAgStkGraphicsProjectionFactory

class IAgStkGraphicsAltitudeDisplayConditionFactory(object):
    """Defines an inclusive altitude interval that determines when an object is rendered based on the camera's altitude relative to a central body."""
    _num_methods = 3
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{ee1efbf0-ddbf-41ff-9257-ff73e164d27a}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "Initialize" : 1,
                             "InitializeWithAltitudes" : 2,
                             "InitializeWithCentralBodyAndAltitudes" : 3, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsAltitudeDisplayConditionFactory._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsAltitudeDisplayConditionFactory from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsAltitudeDisplayConditionFactory.__dict__ and type(IAgStkGraphicsAltitudeDisplayConditionFactory.__dict__[attrname]) == property:
            return IAgStkGraphicsAltitudeDisplayConditionFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsAltitudeDisplayConditionFactory.")
    
    _Initialize_metadata = { "name" : "Initialize",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    def Initialize(self) -> "IAgStkGraphicsAltitudeDisplayCondition":
        """Initializes a default altitude display condition. With this constructor, an object is always rendered regardless of the camera's altitude."""
        return self._intf.invoke(IAgStkGraphicsAltitudeDisplayConditionFactory._metadata, IAgStkGraphicsAltitudeDisplayConditionFactory._Initialize_metadata, out_arg())

    _InitializeWithAltitudes_metadata = { "name" : "InitializeWithAltitudes",
            "arg_types" : (agcom.DOUBLE, agcom.DOUBLE, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg, agmarshall.AgInterface_out_arg,) }
    def InitializeWithAltitudes(self, minimumAltitude:float, maximumAltitude:float) -> "IAgStkGraphicsAltitudeDisplayCondition":
        """Initializes an altitude display condition with the inclusive altitude interval [minimumAltitude, maximumAltitude]..."""
        return self._intf.invoke(IAgStkGraphicsAltitudeDisplayConditionFactory._metadata, IAgStkGraphicsAltitudeDisplayConditionFactory._InitializeWithAltitudes_metadata, minimumAltitude, maximumAltitude, out_arg())

    _InitializeWithCentralBodyAndAltitudes_metadata = { "name" : "InitializeWithCentralBodyAndAltitudes",
            "arg_types" : (agcom.BSTR, agcom.DOUBLE, agcom.DOUBLE, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg, agmarshall.AgInterface_out_arg,) }
    def InitializeWithCentralBodyAndAltitudes(self, centralBody:str, minimumAltitude:float, maximumAltitude:float) -> "IAgStkGraphicsAltitudeDisplayCondition":
        """Initializes an altitude display condition with the inclusive altitude interval [minimumAltitude, maximumAltitude]..."""
        return self._intf.invoke(IAgStkGraphicsAltitudeDisplayConditionFactory._metadata, IAgStkGraphicsAltitudeDisplayConditionFactory._InitializeWithCentralBodyAndAltitudes_metadata, centralBody, minimumAltitude, maximumAltitude, out_arg())


agcls.AgClassCatalog.add_catalog_entry("{ee1efbf0-ddbf-41ff-9257-ff73e164d27a}", IAgStkGraphicsAltitudeDisplayConditionFactory)
agcls.AgTypeNameMap["IAgStkGraphicsAltitudeDisplayConditionFactory"] = IAgStkGraphicsAltitudeDisplayConditionFactory

class IAgStkGraphicsAxesPrimitiveFactory(object):
    """Renders an axes in the 3D scene."""
    _num_methods = 1
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{ff0a767c-8a84-47f9-a108-32cc0bff8366}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "InitializeWithDirection" : 1, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsAxesPrimitiveFactory._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsAxesPrimitiveFactory from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsAxesPrimitiveFactory.__dict__ and type(IAgStkGraphicsAxesPrimitiveFactory.__dict__[attrname]) == property:
            return IAgStkGraphicsAxesPrimitiveFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsAxesPrimitiveFactory.")
    
    _InitializeWithDirection_metadata = { "name" : "InitializeWithDirection",
            "arg_types" : (agcom.PVOID, agcom.PVOID, agcom.PVOID, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_in_arg("IAgCrdnSystem"), agmarshall.AgInterface_in_arg("IAgCrdnAxes"), agmarshall.AgInterface_in_arg("IAgStkGraphicsGraphicsFont"), agmarshall.AgInterface_out_arg,) }
    def InitializeWithDirection(self, sys:"IAgCrdnSystem", axes:"IAgCrdnAxes", font:"IAgStkGraphicsGraphicsFont") -> "IAgStkGraphicsAxesPrimitive":
        """Initializes an axes primitive with the specified ISystem sys as its source."""
        return self._intf.invoke(IAgStkGraphicsAxesPrimitiveFactory._metadata, IAgStkGraphicsAxesPrimitiveFactory._InitializeWithDirection_metadata, sys, axes, font, out_arg())


agcls.AgClassCatalog.add_catalog_entry("{ff0a767c-8a84-47f9-a108-32cc0bff8366}", IAgStkGraphicsAxesPrimitiveFactory)
agcls.AgTypeNameMap["IAgStkGraphicsAxesPrimitiveFactory"] = IAgStkGraphicsAxesPrimitiveFactory

class IAgStkGraphicsCompositeDisplayConditionFactory(object):
    """A composite of display conditions combined using a binary logic operation. For example, several time interval display condition objects can be added to a composite..."""
    _num_methods = 1
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{a2ca541e-a860-4e47-b0e9-f0e973733e67}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "Initialize" : 1, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsCompositeDisplayConditionFactory._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsCompositeDisplayConditionFactory from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsCompositeDisplayConditionFactory.__dict__ and type(IAgStkGraphicsCompositeDisplayConditionFactory.__dict__[attrname]) == property:
            return IAgStkGraphicsCompositeDisplayConditionFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsCompositeDisplayConditionFactory.")
    
    _Initialize_metadata = { "name" : "Initialize",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    def Initialize(self) -> "IAgStkGraphicsCompositeDisplayCondition":
        """Initializes an empty composite display condition."""
        return self._intf.invoke(IAgStkGraphicsCompositeDisplayConditionFactory._metadata, IAgStkGraphicsCompositeDisplayConditionFactory._Initialize_metadata, out_arg())


agcls.AgClassCatalog.add_catalog_entry("{a2ca541e-a860-4e47-b0e9-f0e973733e67}", IAgStkGraphicsCompositeDisplayConditionFactory)
agcls.AgTypeNameMap["IAgStkGraphicsCompositeDisplayConditionFactory"] = IAgStkGraphicsCompositeDisplayConditionFactory

class IAgStkGraphicsCompositePrimitiveFactory(object):
    """ A primitive that is composed of multiple other primitives. Since composites can contain other composites, they are commonly used to build hierarchies of primitives to efficiently evaluate display conditions..."""
    _num_methods = 1
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{6828c6a1-7018-4b65-90af-8bb36f478a6d}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "Initialize" : 1, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsCompositePrimitiveFactory._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsCompositePrimitiveFactory from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsCompositePrimitiveFactory.__dict__ and type(IAgStkGraphicsCompositePrimitiveFactory.__dict__[attrname]) == property:
            return IAgStkGraphicsCompositePrimitiveFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsCompositePrimitiveFactory.")
    
    _Initialize_metadata = { "name" : "Initialize",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    def Initialize(self) -> "IAgStkGraphicsCompositePrimitive":
        """Initializes a default composite primitive."""
        return self._intf.invoke(IAgStkGraphicsCompositePrimitiveFactory._metadata, IAgStkGraphicsCompositePrimitiveFactory._Initialize_metadata, out_arg())


agcls.AgClassCatalog.add_catalog_entry("{6828c6a1-7018-4b65-90af-8bb36f478a6d}", IAgStkGraphicsCompositePrimitiveFactory)
agcls.AgTypeNameMap["IAgStkGraphicsCompositePrimitiveFactory"] = IAgStkGraphicsCompositePrimitiveFactory

class IAgStkGraphicsConstantDisplayConditionFactory(object):
    """A display condition that evaluates to a user-defined value. This is commonly used to hide primitives by assigning to a primitive a display condition that always returns false."""
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{4c5226f9-a98e-4af0-a9a4-1e5926908d4c}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "Initialize" : 1,
                             "InitializeDisplay" : 2, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsConstantDisplayConditionFactory._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsConstantDisplayConditionFactory from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsConstantDisplayConditionFactory.__dict__ and type(IAgStkGraphicsConstantDisplayConditionFactory.__dict__[attrname]) == property:
            return IAgStkGraphicsConstantDisplayConditionFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsConstantDisplayConditionFactory.")
    
    _Initialize_metadata = { "name" : "Initialize",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    def Initialize(self) -> "IAgStkGraphicsConstantDisplayCondition":
        """Initializes a default constant display condition. display is set to false so when this display condition is assigned to an object, such as a primitive, the object is not rendered."""
        return self._intf.invoke(IAgStkGraphicsConstantDisplayConditionFactory._metadata, IAgStkGraphicsConstantDisplayConditionFactory._Initialize_metadata, out_arg())

    _InitializeDisplay_metadata = { "name" : "InitializeDisplay",
            "arg_types" : (agcom.VARIANT_BOOL, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg, agmarshall.AgInterface_out_arg,) }
    def InitializeDisplay(self, display:bool) -> "IAgStkGraphicsConstantDisplayCondition":
        """Initializes a constant display condition with the value the display condition evaluates to."""
        return self._intf.invoke(IAgStkGraphicsConstantDisplayConditionFactory._metadata, IAgStkGraphicsConstantDisplayConditionFactory._InitializeDisplay_metadata, display, out_arg())


agcls.AgClassCatalog.add_catalog_entry("{4c5226f9-a98e-4af0-a9a4-1e5926908d4c}", IAgStkGraphicsConstantDisplayConditionFactory)
agcls.AgTypeNameMap["IAgStkGraphicsConstantDisplayConditionFactory"] = IAgStkGraphicsConstantDisplayConditionFactory

class IAgStkGraphicsDistanceDisplayConditionFactory(object):
    """Defines an inclusive distance interval that determines when an object, such as a primitive, is rendered based on the distance from the camera to the object."""
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{d7dda546-31d2-4bbd-a44d-b9dc413a2412}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "Initialize" : 1,
                             "InitializeWithDistances" : 2, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsDistanceDisplayConditionFactory._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsDistanceDisplayConditionFactory from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsDistanceDisplayConditionFactory.__dict__ and type(IAgStkGraphicsDistanceDisplayConditionFactory.__dict__[attrname]) == property:
            return IAgStkGraphicsDistanceDisplayConditionFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsDistanceDisplayConditionFactory.")
    
    _Initialize_metadata = { "name" : "Initialize",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    def Initialize(self) -> "IAgStkGraphicsDistanceDisplayCondition":
        """Initializes a default distance display condition. minimum distance is set to 0 and maximum distance is set to Double.MaxValue. With this interval, an object is always rendered regardless of its distance to the camera."""
        return self._intf.invoke(IAgStkGraphicsDistanceDisplayConditionFactory._metadata, IAgStkGraphicsDistanceDisplayConditionFactory._Initialize_metadata, out_arg())

    _InitializeWithDistances_metadata = { "name" : "InitializeWithDistances",
            "arg_types" : (agcom.DOUBLE, agcom.DOUBLE, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg, agmarshall.AgInterface_out_arg,) }
    def InitializeWithDistances(self, minimumDistance:float, maximumDistance:float) -> "IAgStkGraphicsDistanceDisplayCondition":
        """Initializes a distance display condition with the inclusive distance interval [minimumDistance, maximumDistance]..."""
        return self._intf.invoke(IAgStkGraphicsDistanceDisplayConditionFactory._metadata, IAgStkGraphicsDistanceDisplayConditionFactory._InitializeWithDistances_metadata, minimumDistance, maximumDistance, out_arg())


agcls.AgClassCatalog.add_catalog_entry("{d7dda546-31d2-4bbd-a44d-b9dc413a2412}", IAgStkGraphicsDistanceDisplayConditionFactory)
agcls.AgTypeNameMap["IAgStkGraphicsDistanceDisplayConditionFactory"] = IAgStkGraphicsDistanceDisplayConditionFactory

class IAgStkGraphicsDistanceToGlobeOverlayDisplayConditionFactory(object):
    """Defines an inclusive distance interval that determines when an object, such as a primitive, is rendered based on the distance from the camera to the globe overlay..."""
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{05bc2dbc-8533-467a-85d2-720c583f1c7e}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "Initialize" : 1,
                             "InitializeWithDistances" : 2, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsDistanceToGlobeOverlayDisplayConditionFactory._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsDistanceToGlobeOverlayDisplayConditionFactory from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsDistanceToGlobeOverlayDisplayConditionFactory.__dict__ and type(IAgStkGraphicsDistanceToGlobeOverlayDisplayConditionFactory.__dict__[attrname]) == property:
            return IAgStkGraphicsDistanceToGlobeOverlayDisplayConditionFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsDistanceToGlobeOverlayDisplayConditionFactory.")
    
    _Initialize_metadata = { "name" : "Initialize",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    def Initialize(self) -> "IAgStkGraphicsDistanceToGlobeOverlayDisplayCondition":
        """Initializes a default distance to globe overlay display condition. With this constructor, an object is always rendered regardless of the camera's distance to the globe overlay."""
        return self._intf.invoke(IAgStkGraphicsDistanceToGlobeOverlayDisplayConditionFactory._metadata, IAgStkGraphicsDistanceToGlobeOverlayDisplayConditionFactory._Initialize_metadata, out_arg())

    _InitializeWithDistances_metadata = { "name" : "InitializeWithDistances",
            "arg_types" : (agcom.PVOID, agcom.DOUBLE, agcom.DOUBLE, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_in_arg("IAgStkGraphicsGlobeOverlay"), agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg, agmarshall.AgInterface_out_arg,) }
    def InitializeWithDistances(self, globeOverlay:"IAgStkGraphicsGlobeOverlay", minimumDistance:float, maximumDistance:float) -> "IAgStkGraphicsDistanceToGlobeOverlayDisplayCondition":
        """Initializes a distance display condition with the globe overlay and the inclusive distance interval [minimumDistance, maximumDistance]..."""
        return self._intf.invoke(IAgStkGraphicsDistanceToGlobeOverlayDisplayConditionFactory._metadata, IAgStkGraphicsDistanceToGlobeOverlayDisplayConditionFactory._InitializeWithDistances_metadata, globeOverlay, minimumDistance, maximumDistance, out_arg())


agcls.AgClassCatalog.add_catalog_entry("{05bc2dbc-8533-467a-85d2-720c583f1c7e}", IAgStkGraphicsDistanceToGlobeOverlayDisplayConditionFactory)
agcls.AgTypeNameMap["IAgStkGraphicsDistanceToGlobeOverlayDisplayConditionFactory"] = IAgStkGraphicsDistanceToGlobeOverlayDisplayConditionFactory

class IAgStkGraphicsDistanceToPositionDisplayConditionFactory(object):
    """Defines an inclusive distance interval that determines when an object, such as a primitive, is rendered based on the distance from the camera to a position defined in the given reference frame."""
    _num_methods = 3
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{913dd9f7-a91b-4346-b233-180126a8d1bd}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "Initialize" : 1,
                             "InitializeWithDistances" : 2,
                             "InitializeWithReferenceFrameAndDistances" : 3, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsDistanceToPositionDisplayConditionFactory._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsDistanceToPositionDisplayConditionFactory from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsDistanceToPositionDisplayConditionFactory.__dict__ and type(IAgStkGraphicsDistanceToPositionDisplayConditionFactory.__dict__[attrname]) == property:
            return IAgStkGraphicsDistanceToPositionDisplayConditionFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsDistanceToPositionDisplayConditionFactory.")
    
    _Initialize_metadata = { "name" : "Initialize",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    def Initialize(self) -> "IAgStkGraphicsDistanceToPositionDisplayCondition":
        """Initializes a default distance to position display condition. With this constructor, an object is always rendered regardless of the camera's distance to the position."""
        return self._intf.invoke(IAgStkGraphicsDistanceToPositionDisplayConditionFactory._metadata, IAgStkGraphicsDistanceToPositionDisplayConditionFactory._Initialize_metadata, out_arg())

    _InitializeWithDistances_metadata = { "name" : "InitializeWithDistances",
            "arg_types" : (POINTER(agcom.LPSAFEARRAY), agcom.DOUBLE, agcom.DOUBLE, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg, agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg, agmarshall.AgInterface_out_arg,) }
    def InitializeWithDistances(self, position:list, minimumDistance:float, maximumDistance:float) -> "IAgStkGraphicsDistanceToPositionDisplayCondition":
        """Initializes a distance display condition with the inclusive distance interval [minimumDistance, maximumDistance]..."""
        return self._intf.invoke(IAgStkGraphicsDistanceToPositionDisplayConditionFactory._metadata, IAgStkGraphicsDistanceToPositionDisplayConditionFactory._InitializeWithDistances_metadata, position, minimumDistance, maximumDistance, out_arg())

    _InitializeWithReferenceFrameAndDistances_metadata = { "name" : "InitializeWithReferenceFrameAndDistances",
            "arg_types" : (agcom.PVOID, POINTER(agcom.LPSAFEARRAY), agcom.DOUBLE, agcom.DOUBLE, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_in_arg("IAgCrdnSystem"), agmarshall.LPSAFEARRAY_arg, agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg, agmarshall.AgInterface_out_arg,) }
    def InitializeWithReferenceFrameAndDistances(self, referenceFrame:"IAgCrdnSystem", position:list, minimumDistance:float, maximumDistance:float) -> "IAgStkGraphicsDistanceToPositionDisplayCondition":
        """Initializes a distance display condition with the inclusive distance interval [minimumDistance, maximumDistance]..."""
        return self._intf.invoke(IAgStkGraphicsDistanceToPositionDisplayConditionFactory._metadata, IAgStkGraphicsDistanceToPositionDisplayConditionFactory._InitializeWithReferenceFrameAndDistances_metadata, referenceFrame, position, minimumDistance, maximumDistance, out_arg())


agcls.AgClassCatalog.add_catalog_entry("{913dd9f7-a91b-4346-b233-180126a8d1bd}", IAgStkGraphicsDistanceToPositionDisplayConditionFactory)
agcls.AgTypeNameMap["IAgStkGraphicsDistanceToPositionDisplayConditionFactory"] = IAgStkGraphicsDistanceToPositionDisplayConditionFactory

class IAgStkGraphicsDistanceToPrimitiveDisplayConditionFactory(object):
    """Defines an inclusive distance interval that determines when an object, such as a screen overlay, is rendered based on the distance from the camera to the primitive..."""
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{f103b596-f16c-4ad6-8242-bef8ecb83383}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "Initialize" : 1,
                             "InitializeWithDistances" : 2, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsDistanceToPrimitiveDisplayConditionFactory._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsDistanceToPrimitiveDisplayConditionFactory from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsDistanceToPrimitiveDisplayConditionFactory.__dict__ and type(IAgStkGraphicsDistanceToPrimitiveDisplayConditionFactory.__dict__[attrname]) == property:
            return IAgStkGraphicsDistanceToPrimitiveDisplayConditionFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsDistanceToPrimitiveDisplayConditionFactory.")
    
    _Initialize_metadata = { "name" : "Initialize",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    def Initialize(self) -> "IAgStkGraphicsDistanceToPrimitiveDisplayCondition":
        """Initializes a default distance to primitive display condition. With this constructor, an object is always rendered regardless of the camera's distance to the primitive."""
        return self._intf.invoke(IAgStkGraphicsDistanceToPrimitiveDisplayConditionFactory._metadata, IAgStkGraphicsDistanceToPrimitiveDisplayConditionFactory._Initialize_metadata, out_arg())

    _InitializeWithDistances_metadata = { "name" : "InitializeWithDistances",
            "arg_types" : (agcom.PVOID, agcom.DOUBLE, agcom.DOUBLE, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_in_arg("IAgStkGraphicsPrimitive"), agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg, agmarshall.AgInterface_out_arg,) }
    def InitializeWithDistances(self, primitive:"IAgStkGraphicsPrimitive", minimumDistance:float, maximumDistance:float) -> "IAgStkGraphicsDistanceToPrimitiveDisplayCondition":
        """Initializes a distance to primitive display condition with the inclusive distance interval [minimumDistance, maximumDistance]..."""
        return self._intf.invoke(IAgStkGraphicsDistanceToPrimitiveDisplayConditionFactory._metadata, IAgStkGraphicsDistanceToPrimitiveDisplayConditionFactory._InitializeWithDistances_metadata, primitive, minimumDistance, maximumDistance, out_arg())


agcls.AgClassCatalog.add_catalog_entry("{f103b596-f16c-4ad6-8242-bef8ecb83383}", IAgStkGraphicsDistanceToPrimitiveDisplayConditionFactory)
agcls.AgTypeNameMap["IAgStkGraphicsDistanceToPrimitiveDisplayConditionFactory"] = IAgStkGraphicsDistanceToPrimitiveDisplayConditionFactory

class IAgStkGraphicsDurationPathPrimitiveUpdatePolicyFactory(object):
    """path primitive update policy that removes points from remove location after a given duration."""
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{4ea0bb3e-5620-4a74-b721-6b0000eafdc2}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "Initialize" : 1,
                             "InitializeWithParameters" : 2, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsDurationPathPrimitiveUpdatePolicyFactory._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsDurationPathPrimitiveUpdatePolicyFactory from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsDurationPathPrimitiveUpdatePolicyFactory.__dict__ and type(IAgStkGraphicsDurationPathPrimitiveUpdatePolicyFactory.__dict__[attrname]) == property:
            return IAgStkGraphicsDurationPathPrimitiveUpdatePolicyFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsDurationPathPrimitiveUpdatePolicyFactory.")
    
    _Initialize_metadata = { "name" : "Initialize",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    def Initialize(self) -> "IAgStkGraphicsDurationPathPrimitiveUpdatePolicy":
        """Constructs a default update policy. This is equivalent to constructing a policy with duration set to 0 and a remove location of Front."""
        return self._intf.invoke(IAgStkGraphicsDurationPathPrimitiveUpdatePolicyFactory._metadata, IAgStkGraphicsDurationPathPrimitiveUpdatePolicyFactory._Initialize_metadata, out_arg())

    _InitializeWithParameters_metadata = { "name" : "InitializeWithParameters",
            "arg_types" : (agcom.DOUBLE, agcom.LONG, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.DOUBLE_arg, agmarshall.AgEnum_arg(AgEStkGraphicsPathPrimitiveRemoveLocation), agmarshall.AgInterface_out_arg,) }
    def InitializeWithParameters(self, duration:float, removeLocation:"AgEStkGraphicsPathPrimitiveRemoveLocation") -> "IAgStkGraphicsDurationPathPrimitiveUpdatePolicy":
        """Initializes a policy with the specified duration and removeLocation."""
        return self._intf.invoke(IAgStkGraphicsDurationPathPrimitiveUpdatePolicyFactory._metadata, IAgStkGraphicsDurationPathPrimitiveUpdatePolicyFactory._InitializeWithParameters_metadata, duration, removeLocation, out_arg())


agcls.AgClassCatalog.add_catalog_entry("{4ea0bb3e-5620-4a74-b721-6b0000eafdc2}", IAgStkGraphicsDurationPathPrimitiveUpdatePolicyFactory)
agcls.AgTypeNameMap["IAgStkGraphicsDurationPathPrimitiveUpdatePolicyFactory"] = IAgStkGraphicsDurationPathPrimitiveUpdatePolicyFactory

class IAgStkGraphicsGlobeImageOverlayInitializer(object):
    """A globe overlay that shows an image."""
    _num_methods = 1
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{cf06dc51-75ad-45a2-a1ff-9e3b550be24f}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_MoreThanOneImageGlobeOverlaySupported" : 1, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsGlobeImageOverlayInitializer._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsGlobeImageOverlayInitializer from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsGlobeImageOverlayInitializer.__dict__ and type(IAgStkGraphicsGlobeImageOverlayInitializer.__dict__[attrname]) == property:
            return IAgStkGraphicsGlobeImageOverlayInitializer.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsGlobeImageOverlayInitializer.")
    
    _get_MoreThanOneImageGlobeOverlaySupported_metadata = { "name" : "MoreThanOneImageGlobeOverlaySupported",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def MoreThanOneImageGlobeOverlaySupported(self) -> bool:
        """Gets whether or not the video card allows for more than one image globe overlay globe image overlay to be added."""
        return self._intf.get_property(IAgStkGraphicsGlobeImageOverlayInitializer._metadata, IAgStkGraphicsGlobeImageOverlayInitializer._get_MoreThanOneImageGlobeOverlaySupported_metadata)


agcls.AgClassCatalog.add_catalog_entry("{cf06dc51-75ad-45a2-a1ff-9e3b550be24f}", IAgStkGraphicsGlobeImageOverlayInitializer)
agcls.AgTypeNameMap["IAgStkGraphicsGlobeImageOverlayInitializer"] = IAgStkGraphicsGlobeImageOverlayInitializer

class IAgStkGraphicsGraphicsFontFactory(object):
    """A font that is suitable for use with the text batch primitive. For best performance, avoid creating duplicate font objects. Instead assign the same font object to several text batch primitives."""
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{1a87aeee-c00b-462b-bf99-90cb94ae1eb7}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "InitializeWithNameSizeFontStyleOutline" : 1,
                             "InitializeWithNameSize" : 2, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsGraphicsFontFactory._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsGraphicsFontFactory from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsGraphicsFontFactory.__dict__ and type(IAgStkGraphicsGraphicsFontFactory.__dict__[attrname]) == property:
            return IAgStkGraphicsGraphicsFontFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsGraphicsFontFactory.")
    
    _InitializeWithNameSizeFontStyleOutline_metadata = { "name" : "InitializeWithNameSizeFontStyleOutline",
            "arg_types" : (agcom.BSTR, agcom.INT, agcom.LONG, agcom.VARIANT_BOOL, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.INT_arg, agmarshall.AgEnum_arg(AgEStkGraphicsFontStyle), agmarshall.VARIANT_BOOL_arg, agmarshall.AgInterface_out_arg,) }
    def InitializeWithNameSizeFontStyleOutline(self, name:str, size:int, fontStyle:"AgEStkGraphicsFontStyle", outline:bool) -> "IAgStkGraphicsGraphicsFont":
        """Initializes a graphics font with the given arguments."""
        return self._intf.invoke(IAgStkGraphicsGraphicsFontFactory._metadata, IAgStkGraphicsGraphicsFontFactory._InitializeWithNameSizeFontStyleOutline_metadata, name, size, fontStyle, outline, out_arg())

    _InitializeWithNameSize_metadata = { "name" : "InitializeWithNameSize",
            "arg_types" : (agcom.BSTR, agcom.INT, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.INT_arg, agmarshall.AgInterface_out_arg,) }
    def InitializeWithNameSize(self, name:str, size:int) -> "IAgStkGraphicsGraphicsFont":
        """Initializes a graphics font with the typeface name and size."""
        return self._intf.invoke(IAgStkGraphicsGraphicsFontFactory._metadata, IAgStkGraphicsGraphicsFontFactory._InitializeWithNameSize_metadata, name, size, out_arg())


agcls.AgClassCatalog.add_catalog_entry("{1a87aeee-c00b-462b-bf99-90cb94ae1eb7}", IAgStkGraphicsGraphicsFontFactory)
agcls.AgTypeNameMap["IAgStkGraphicsGraphicsFontFactory"] = IAgStkGraphicsGraphicsFontFactory

class IAgStkGraphicsGreatArcInterpolatorFactory(object):
    """The great arc interpolator computes interpolated positions along a great arc. A great arc is the shortest path between two positions on an ellipsoid."""
    _num_methods = 3
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{35afb348-117f-4db0-87ec-643b4b0364dd}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "Initialize" : 1,
                             "InitializeWithCentralBody" : 2,
                             "InitializeWithCentralBodyAndGranularity" : 3, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsGreatArcInterpolatorFactory._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsGreatArcInterpolatorFactory from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsGreatArcInterpolatorFactory.__dict__ and type(IAgStkGraphicsGreatArcInterpolatorFactory.__dict__[attrname]) == property:
            return IAgStkGraphicsGreatArcInterpolatorFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsGreatArcInterpolatorFactory.")
    
    _Initialize_metadata = { "name" : "Initialize",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    def Initialize(self) -> "IAgStkGraphicsGreatArcInterpolator":
        """Initializes a default great arc interpolator. This is equivalent to constructing a great arc interpolator with a central body equal to an instance of earth central body and a granularity of 1 degree."""
        return self._intf.invoke(IAgStkGraphicsGreatArcInterpolatorFactory._metadata, IAgStkGraphicsGreatArcInterpolatorFactory._Initialize_metadata, out_arg())

    _InitializeWithCentralBody_metadata = { "name" : "InitializeWithCentralBody",
            "arg_types" : (agcom.BSTR, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.AgInterface_out_arg,) }
    def InitializeWithCentralBody(self, centralBody:str) -> "IAgStkGraphicsGreatArcInterpolator":
        """Initializes a great arc interpolator with the specified centralBody and a granularity of 1 degree."""
        return self._intf.invoke(IAgStkGraphicsGreatArcInterpolatorFactory._metadata, IAgStkGraphicsGreatArcInterpolatorFactory._InitializeWithCentralBody_metadata, centralBody, out_arg())

    _InitializeWithCentralBodyAndGranularity_metadata = { "name" : "InitializeWithCentralBodyAndGranularity",
            "arg_types" : (agcom.BSTR, agcom.DOUBLE, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.DOUBLE_arg, agmarshall.AgInterface_out_arg,) }
    def InitializeWithCentralBodyAndGranularity(self, centralBody:str, granularity:float) -> "IAgStkGraphicsGreatArcInterpolator":
        """Initializes a great arc interpolator with the specified centralBody and granularity."""
        return self._intf.invoke(IAgStkGraphicsGreatArcInterpolatorFactory._metadata, IAgStkGraphicsGreatArcInterpolatorFactory._InitializeWithCentralBodyAndGranularity_metadata, centralBody, granularity, out_arg())


agcls.AgClassCatalog.add_catalog_entry("{35afb348-117f-4db0-87ec-643b4b0364dd}", IAgStkGraphicsGreatArcInterpolatorFactory)
agcls.AgTypeNameMap["IAgStkGraphicsGreatArcInterpolatorFactory"] = IAgStkGraphicsGreatArcInterpolatorFactory

class IAgStkGraphicsAlphaFromLuminanceFilterFactory(object):
    """Adds an alpha band to the source raster derived from the luminance of the raster's color bands."""
    _num_methods = 1
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{2317f609-231f-4266-b38c-f4fa812a0306}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "Initialize" : 1, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsAlphaFromLuminanceFilterFactory._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsAlphaFromLuminanceFilterFactory from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsAlphaFromLuminanceFilterFactory.__dict__ and type(IAgStkGraphicsAlphaFromLuminanceFilterFactory.__dict__[attrname]) == property:
            return IAgStkGraphicsAlphaFromLuminanceFilterFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsAlphaFromLuminanceFilterFactory.")
    
    _Initialize_metadata = { "name" : "Initialize",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    def Initialize(self) -> "IAgStkGraphicsAlphaFromLuminanceFilter":
        """Initializes a new instance."""
        return self._intf.invoke(IAgStkGraphicsAlphaFromLuminanceFilterFactory._metadata, IAgStkGraphicsAlphaFromLuminanceFilterFactory._Initialize_metadata, out_arg())


agcls.AgClassCatalog.add_catalog_entry("{2317f609-231f-4266-b38c-f4fa812a0306}", IAgStkGraphicsAlphaFromLuminanceFilterFactory)
agcls.AgTypeNameMap["IAgStkGraphicsAlphaFromLuminanceFilterFactory"] = IAgStkGraphicsAlphaFromLuminanceFilterFactory

class IAgStkGraphicsAlphaFromPixelFilterFactory(object):
    """Adds an alpha band to the source raster based on the value of its first pixel. All pixels in the source raster that are the same color as the first pixel will be made transparent."""
    _num_methods = 1
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{f9802000-aea6-453d-b797-d68fae4a491b}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "Initialize" : 1, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsAlphaFromPixelFilterFactory._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsAlphaFromPixelFilterFactory from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsAlphaFromPixelFilterFactory.__dict__ and type(IAgStkGraphicsAlphaFromPixelFilterFactory.__dict__[attrname]) == property:
            return IAgStkGraphicsAlphaFromPixelFilterFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsAlphaFromPixelFilterFactory.")
    
    _Initialize_metadata = { "name" : "Initialize",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    def Initialize(self) -> "IAgStkGraphicsAlphaFromPixelFilter":
        """Initializes a new instance."""
        return self._intf.invoke(IAgStkGraphicsAlphaFromPixelFilterFactory._metadata, IAgStkGraphicsAlphaFromPixelFilterFactory._Initialize_metadata, out_arg())


agcls.AgClassCatalog.add_catalog_entry("{f9802000-aea6-453d-b797-d68fae4a491b}", IAgStkGraphicsAlphaFromPixelFilterFactory)
agcls.AgTypeNameMap["IAgStkGraphicsAlphaFromPixelFilterFactory"] = IAgStkGraphicsAlphaFromPixelFilterFactory

class IAgStkGraphicsAlphaFromRasterFilterFactory(object):
    """Adds an alpha band to the source raster derived from the color bands or alpha of another raster. This filter can be used to apply an alpha mask to the source raster."""
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{f7139fc1-f8f8-4bd2-a33f-9e06fdb4f63c}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "Initialize" : 1,
                             "InitializeWithRaster" : 2, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsAlphaFromRasterFilterFactory._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsAlphaFromRasterFilterFactory from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsAlphaFromRasterFilterFactory.__dict__ and type(IAgStkGraphicsAlphaFromRasterFilterFactory.__dict__[attrname]) == property:
            return IAgStkGraphicsAlphaFromRasterFilterFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsAlphaFromRasterFilterFactory.")
    
    _Initialize_metadata = { "name" : "Initialize",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    def Initialize(self) -> "IAgStkGraphicsAlphaFromRasterFilter":
        """Initializes a new instance."""
        return self._intf.invoke(IAgStkGraphicsAlphaFromRasterFilterFactory._metadata, IAgStkGraphicsAlphaFromRasterFilterFactory._Initialize_metadata, out_arg())

    _InitializeWithRaster_metadata = { "name" : "InitializeWithRaster",
            "arg_types" : (agcom.PVOID, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_in_arg("IAgStkGraphicsRaster"), agmarshall.AgInterface_out_arg,) }
    def InitializeWithRaster(self, raster:"IAgStkGraphicsRaster") -> "IAgStkGraphicsAlphaFromRasterFilter":
        """Initializes a new instance with the raster that the source raster will use to derive an alpha band."""
        return self._intf.invoke(IAgStkGraphicsAlphaFromRasterFilterFactory._metadata, IAgStkGraphicsAlphaFromRasterFilterFactory._InitializeWithRaster_metadata, raster, out_arg())


agcls.AgClassCatalog.add_catalog_entry("{f7139fc1-f8f8-4bd2-a33f-9e06fdb4f63c}", IAgStkGraphicsAlphaFromRasterFilterFactory)
agcls.AgTypeNameMap["IAgStkGraphicsAlphaFromRasterFilterFactory"] = IAgStkGraphicsAlphaFromRasterFilterFactory

class IAgStkGraphicsBandExtractFilterFactory(object):
    """Extracts a band or set of bands from the source raster. The extract format property specifies the bands and the order of the bands that will be extracted."""
    _num_methods = 3
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{76a65e3a-1868-4312-8a66-8e16a525effd}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "Initialize" : 1,
                             "InitializeWithBand" : 2,
                             "InitializeWithFormat" : 3, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsBandExtractFilterFactory._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsBandExtractFilterFactory from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsBandExtractFilterFactory.__dict__ and type(IAgStkGraphicsBandExtractFilterFactory.__dict__[attrname]) == property:
            return IAgStkGraphicsBandExtractFilterFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsBandExtractFilterFactory.")
    
    _Initialize_metadata = { "name" : "Initialize",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    def Initialize(self) -> "IAgStkGraphicsBandExtractFilter":
        """Initializes a new instance."""
        return self._intf.invoke(IAgStkGraphicsBandExtractFilterFactory._metadata, IAgStkGraphicsBandExtractFilterFactory._Initialize_metadata, out_arg())

    _InitializeWithBand_metadata = { "name" : "InitializeWithBand",
            "arg_types" : (agcom.LONG, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEStkGraphicsRasterBand), agmarshall.AgInterface_out_arg,) }
    def InitializeWithBand(self, rasterBand:"AgEStkGraphicsRasterBand") -> "IAgStkGraphicsBandExtractFilter":
        """Initializes a new instance with the raster band to be extracted from the source raster."""
        return self._intf.invoke(IAgStkGraphicsBandExtractFilterFactory._metadata, IAgStkGraphicsBandExtractFilterFactory._InitializeWithBand_metadata, rasterBand, out_arg())

    _InitializeWithFormat_metadata = { "name" : "InitializeWithFormat",
            "arg_types" : (agcom.LONG, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEStkGraphicsRasterFormat), agmarshall.AgInterface_out_arg,) }
    def InitializeWithFormat(self, rasterFormat:"AgEStkGraphicsRasterFormat") -> "IAgStkGraphicsBandExtractFilter":
        """Initializes a new instance with the raster format containing the bands to be extracted from the source raster."""
        return self._intf.invoke(IAgStkGraphicsBandExtractFilterFactory._metadata, IAgStkGraphicsBandExtractFilterFactory._InitializeWithFormat_metadata, rasterFormat, out_arg())


agcls.AgClassCatalog.add_catalog_entry("{76a65e3a-1868-4312-8a66-8e16a525effd}", IAgStkGraphicsBandExtractFilterFactory)
agcls.AgTypeNameMap["IAgStkGraphicsBandExtractFilterFactory"] = IAgStkGraphicsBandExtractFilterFactory

class IAgStkGraphicsBandOrderFilterFactory(object):
    """Reorders or swizzles the bands of the source raster to match the band order of the raster format specified by the band order property. When maintain raster format is true, the source raster's format is maintained after swizzling."""
    _num_methods = 3
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{1bfcf1dd-1ada-47b7-829b-ea60fc04b61d}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "Initialize" : 1,
                             "InitializeWithOrder" : 2,
                             "InitializeWithOrderAndBool" : 3, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsBandOrderFilterFactory._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsBandOrderFilterFactory from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsBandOrderFilterFactory.__dict__ and type(IAgStkGraphicsBandOrderFilterFactory.__dict__[attrname]) == property:
            return IAgStkGraphicsBandOrderFilterFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsBandOrderFilterFactory.")
    
    _Initialize_metadata = { "name" : "Initialize",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    def Initialize(self) -> "IAgStkGraphicsBandOrderFilter":
        """Initializes a new instance."""
        return self._intf.invoke(IAgStkGraphicsBandOrderFilterFactory._metadata, IAgStkGraphicsBandOrderFilterFactory._Initialize_metadata, out_arg())

    _InitializeWithOrder_metadata = { "name" : "InitializeWithOrder",
            "arg_types" : (agcom.LONG, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEStkGraphicsRasterFormat), agmarshall.AgInterface_out_arg,) }
    def InitializeWithOrder(self, bandOrder:"AgEStkGraphicsRasterFormat") -> "IAgStkGraphicsBandOrderFilter":
        """Initializes a new instance with a raster format indicating the desired order of the bands in the source raster."""
        return self._intf.invoke(IAgStkGraphicsBandOrderFilterFactory._metadata, IAgStkGraphicsBandOrderFilterFactory._InitializeWithOrder_metadata, bandOrder, out_arg())

    _InitializeWithOrderAndBool_metadata = { "name" : "InitializeWithOrderAndBool",
            "arg_types" : (agcom.LONG, agcom.VARIANT_BOOL, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEStkGraphicsRasterFormat), agmarshall.VARIANT_BOOL_arg, agmarshall.AgInterface_out_arg,) }
    def InitializeWithOrderAndBool(self, bandOrder:"AgEStkGraphicsRasterFormat", maintainImageFormat:bool) -> "IAgStkGraphicsBandOrderFilter":
        """Initializes a new instance with a raster format indicating the desired order of the bands in the source raster, and whether to maintain the source raster's format after swizzling."""
        return self._intf.invoke(IAgStkGraphicsBandOrderFilterFactory._metadata, IAgStkGraphicsBandOrderFilterFactory._InitializeWithOrderAndBool_metadata, bandOrder, maintainImageFormat, out_arg())


agcls.AgClassCatalog.add_catalog_entry("{1bfcf1dd-1ada-47b7-829b-ea60fc04b61d}", IAgStkGraphicsBandOrderFilterFactory)
agcls.AgTypeNameMap["IAgStkGraphicsBandOrderFilterFactory"] = IAgStkGraphicsBandOrderFilterFactory

class IAgStkGraphicsBlurFilterFactory(object):
    """Applies a convolution filter to blur or smooth the source raster. Can be used to reduce noise in the raster."""
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{99188b11-f0f6-4452-b2e9-c53472860aa1}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "Initialize" : 1,
                             "InitializeWithMethod" : 2, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsBlurFilterFactory._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsBlurFilterFactory from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsBlurFilterFactory.__dict__ and type(IAgStkGraphicsBlurFilterFactory.__dict__[attrname]) == property:
            return IAgStkGraphicsBlurFilterFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsBlurFilterFactory.")
    
    _Initialize_metadata = { "name" : "Initialize",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    def Initialize(self) -> "IAgStkGraphicsBlurFilter":
        """Initializes a new instance."""
        return self._intf.invoke(IAgStkGraphicsBlurFilterFactory._metadata, IAgStkGraphicsBlurFilterFactory._Initialize_metadata, out_arg())

    _InitializeWithMethod_metadata = { "name" : "InitializeWithMethod",
            "arg_types" : (agcom.LONG, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEStkGraphicsBlurMethod), agmarshall.AgInterface_out_arg,) }
    def InitializeWithMethod(self, method:"AgEStkGraphicsBlurMethod") -> "IAgStkGraphicsBlurFilter":
        """Initialize a new instance with the specified blur method."""
        return self._intf.invoke(IAgStkGraphicsBlurFilterFactory._metadata, IAgStkGraphicsBlurFilterFactory._InitializeWithMethod_metadata, method, out_arg())


agcls.AgClassCatalog.add_catalog_entry("{99188b11-f0f6-4452-b2e9-c53472860aa1}", IAgStkGraphicsBlurFilterFactory)
agcls.AgTypeNameMap["IAgStkGraphicsBlurFilterFactory"] = IAgStkGraphicsBlurFilterFactory

class IAgStkGraphicsBrightnessFilterFactory(object):
    """Adjusts the brightness of the source raster's color bands. The adjustment to brightness is a value between -1 and 1, corresponding to least bright to most bright."""
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{85e2696a-638c-4151-8ba4-e1fdef462598}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "Initialize" : 1,
                             "InitializeWithAdjustment" : 2, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsBrightnessFilterFactory._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsBrightnessFilterFactory from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsBrightnessFilterFactory.__dict__ and type(IAgStkGraphicsBrightnessFilterFactory.__dict__[attrname]) == property:
            return IAgStkGraphicsBrightnessFilterFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsBrightnessFilterFactory.")
    
    _Initialize_metadata = { "name" : "Initialize",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    def Initialize(self) -> "IAgStkGraphicsBrightnessFilter":
        """Initializes a new instance."""
        return self._intf.invoke(IAgStkGraphicsBrightnessFilterFactory._metadata, IAgStkGraphicsBrightnessFilterFactory._Initialize_metadata, out_arg())

    _InitializeWithAdjustment_metadata = { "name" : "InitializeWithAdjustment",
            "arg_types" : (agcom.DOUBLE, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.DOUBLE_arg, agmarshall.AgInterface_out_arg,) }
    def InitializeWithAdjustment(self, adjustment:float) -> "IAgStkGraphicsBrightnessFilter":
        """Initializes a new instance with the adjustment to brightness."""
        return self._intf.invoke(IAgStkGraphicsBrightnessFilterFactory._metadata, IAgStkGraphicsBrightnessFilterFactory._InitializeWithAdjustment_metadata, adjustment, out_arg())


agcls.AgClassCatalog.add_catalog_entry("{85e2696a-638c-4151-8ba4-e1fdef462598}", IAgStkGraphicsBrightnessFilterFactory)
agcls.AgTypeNameMap["IAgStkGraphicsBrightnessFilterFactory"] = IAgStkGraphicsBrightnessFilterFactory

class IAgStkGraphicsColorToLuminanceFilterFactory(object):
    """Extracts a luminance band derived from the color bands of the source raster."""
    _num_methods = 1
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{361263b5-d7ef-468a-9804-c1c9342ffeb8}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "Initialize" : 1, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsColorToLuminanceFilterFactory._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsColorToLuminanceFilterFactory from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsColorToLuminanceFilterFactory.__dict__ and type(IAgStkGraphicsColorToLuminanceFilterFactory.__dict__[attrname]) == property:
            return IAgStkGraphicsColorToLuminanceFilterFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsColorToLuminanceFilterFactory.")
    
    _Initialize_metadata = { "name" : "Initialize",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    def Initialize(self) -> "IAgStkGraphicsColorToLuminanceFilter":
        """Initializes a new instance."""
        return self._intf.invoke(IAgStkGraphicsColorToLuminanceFilterFactory._metadata, IAgStkGraphicsColorToLuminanceFilterFactory._Initialize_metadata, out_arg())


agcls.AgClassCatalog.add_catalog_entry("{361263b5-d7ef-468a-9804-c1c9342ffeb8}", IAgStkGraphicsColorToLuminanceFilterFactory)
agcls.AgTypeNameMap["IAgStkGraphicsColorToLuminanceFilterFactory"] = IAgStkGraphicsColorToLuminanceFilterFactory

class IAgStkGraphicsContrastFilterFactory(object):
    """Adjusts the contrast of the source raster. The adjustment to contrast is a value between -1 and 1, corresponding to least contrast to most contrast."""
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{d78a7285-c3ff-47b5-b5af-ea67faffae92}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "Initialize" : 1,
                             "InitializeWithAdjustment" : 2, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsContrastFilterFactory._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsContrastFilterFactory from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsContrastFilterFactory.__dict__ and type(IAgStkGraphicsContrastFilterFactory.__dict__[attrname]) == property:
            return IAgStkGraphicsContrastFilterFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsContrastFilterFactory.")
    
    _Initialize_metadata = { "name" : "Initialize",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    def Initialize(self) -> "IAgStkGraphicsContrastFilter":
        """Initializes a new instance."""
        return self._intf.invoke(IAgStkGraphicsContrastFilterFactory._metadata, IAgStkGraphicsContrastFilterFactory._Initialize_metadata, out_arg())

    _InitializeWithAdjustment_metadata = { "name" : "InitializeWithAdjustment",
            "arg_types" : (agcom.DOUBLE, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.DOUBLE_arg, agmarshall.AgInterface_out_arg,) }
    def InitializeWithAdjustment(self, adjustment:float) -> "IAgStkGraphicsContrastFilter":
        """Initializes a new instance with the adjustment to contrast."""
        return self._intf.invoke(IAgStkGraphicsContrastFilterFactory._metadata, IAgStkGraphicsContrastFilterFactory._InitializeWithAdjustment_metadata, adjustment, out_arg())


agcls.AgClassCatalog.add_catalog_entry("{d78a7285-c3ff-47b5-b5af-ea67faffae92}", IAgStkGraphicsContrastFilterFactory)
agcls.AgTypeNameMap["IAgStkGraphicsContrastFilterFactory"] = IAgStkGraphicsContrastFilterFactory

class IAgStkGraphicsConvolutionFilterFactory(object):
    """Applies convolution to the source raster. Convolution is the modification of a pixel's value based on the values of its surrounding pixels. The kernel is the numerical matrix that is applied to each pixel in this process..."""
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{f262f8e7-74a5-440e-9754-d3c8a4196abf}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "Initialize" : 1,
                             "InitializeWithKernel" : 2,
                             "InitializeWithKernelAndDivisor" : 3,
                             "InitializeWithKernelDivisorAndOffset" : 4, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsConvolutionFilterFactory._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsConvolutionFilterFactory from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsConvolutionFilterFactory.__dict__ and type(IAgStkGraphicsConvolutionFilterFactory.__dict__[attrname]) == property:
            return IAgStkGraphicsConvolutionFilterFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsConvolutionFilterFactory.")
    
    _Initialize_metadata = { "name" : "Initialize",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    def Initialize(self) -> "IAgStkGraphicsConvolutionFilter":
        """Initializes a new instance."""
        return self._intf.invoke(IAgStkGraphicsConvolutionFilterFactory._metadata, IAgStkGraphicsConvolutionFilterFactory._Initialize_metadata, out_arg())

    _InitializeWithKernel_metadata = { "name" : "InitializeWithKernel",
            "arg_types" : (POINTER(agcom.LPSAFEARRAY), POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg, agmarshall.AgInterface_out_arg,) }
    def InitializeWithKernel(self, kernel:list) -> "IAgStkGraphicsConvolutionFilter":
        """Initializes a new instance with the specified kernel."""
        return self._intf.invoke(IAgStkGraphicsConvolutionFilterFactory._metadata, IAgStkGraphicsConvolutionFilterFactory._InitializeWithKernel_metadata, kernel, out_arg())

    _InitializeWithKernelAndDivisor_metadata = { "name" : "InitializeWithKernelAndDivisor",
            "arg_types" : (POINTER(agcom.LPSAFEARRAY), agcom.DOUBLE, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg, agmarshall.DOUBLE_arg, agmarshall.AgInterface_out_arg,) }
    def InitializeWithKernelAndDivisor(self, kernel:list, divisor:float) -> "IAgStkGraphicsConvolutionFilter":
        """Initializes a new instance with the specified kernel and divisor."""
        return self._intf.invoke(IAgStkGraphicsConvolutionFilterFactory._metadata, IAgStkGraphicsConvolutionFilterFactory._InitializeWithKernelAndDivisor_metadata, kernel, divisor, out_arg())

    _InitializeWithKernelDivisorAndOffset_metadata = { "name" : "InitializeWithKernelDivisorAndOffset",
            "arg_types" : (POINTER(agcom.LPSAFEARRAY), agcom.DOUBLE, agcom.DOUBLE, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg, agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg, agmarshall.AgInterface_out_arg,) }
    def InitializeWithKernelDivisorAndOffset(self, kernel:list, divisor:float, offset:float) -> "IAgStkGraphicsConvolutionFilter":
        """Initializes a new instance with the specified kernel, divisor, and offset."""
        return self._intf.invoke(IAgStkGraphicsConvolutionFilterFactory._metadata, IAgStkGraphicsConvolutionFilterFactory._InitializeWithKernelDivisorAndOffset_metadata, kernel, divisor, offset, out_arg())


agcls.AgClassCatalog.add_catalog_entry("{f262f8e7-74a5-440e-9754-d3c8a4196abf}", IAgStkGraphicsConvolutionFilterFactory)
agcls.AgTypeNameMap["IAgStkGraphicsConvolutionFilterFactory"] = IAgStkGraphicsConvolutionFilterFactory

class IAgStkGraphicsEdgeDetectFilterFactory(object):
    """Applies a convolution filter to detect edges in the source raster."""
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{d471ae80-2bf6-40d7-9c5b-48c08d0e3819}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "Initialize" : 1,
                             "InitializeWithMethod" : 2, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsEdgeDetectFilterFactory._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsEdgeDetectFilterFactory from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsEdgeDetectFilterFactory.__dict__ and type(IAgStkGraphicsEdgeDetectFilterFactory.__dict__[attrname]) == property:
            return IAgStkGraphicsEdgeDetectFilterFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsEdgeDetectFilterFactory.")
    
    _Initialize_metadata = { "name" : "Initialize",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    def Initialize(self) -> "IAgStkGraphicsEdgeDetectFilter":
        """Initializes a new instance."""
        return self._intf.invoke(IAgStkGraphicsEdgeDetectFilterFactory._metadata, IAgStkGraphicsEdgeDetectFilterFactory._Initialize_metadata, out_arg())

    _InitializeWithMethod_metadata = { "name" : "InitializeWithMethod",
            "arg_types" : (agcom.LONG, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEStkGraphicsEdgeDetectMethod), agmarshall.AgInterface_out_arg,) }
    def InitializeWithMethod(self, method:"AgEStkGraphicsEdgeDetectMethod") -> "IAgStkGraphicsEdgeDetectFilter":
        """Initializes a new instance with the specified edge detect method."""
        return self._intf.invoke(IAgStkGraphicsEdgeDetectFilterFactory._metadata, IAgStkGraphicsEdgeDetectFilterFactory._InitializeWithMethod_metadata, method, out_arg())


agcls.AgClassCatalog.add_catalog_entry("{d471ae80-2bf6-40d7-9c5b-48c08d0e3819}", IAgStkGraphicsEdgeDetectFilterFactory)
agcls.AgTypeNameMap["IAgStkGraphicsEdgeDetectFilterFactory"] = IAgStkGraphicsEdgeDetectFilterFactory

class IAgStkGraphicsFilteringRasterStreamFactory(object):
    """A class decorator for applying a raster filter to each update of a raster stream. Can be used to apply filters to videos and other raster streams as they are updated."""
    _num_methods = 1
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{3c0a84bb-9330-422b-808e-6f9cf0aa3055}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "Initialize" : 1, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsFilteringRasterStreamFactory._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsFilteringRasterStreamFactory from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsFilteringRasterStreamFactory.__dict__ and type(IAgStkGraphicsFilteringRasterStreamFactory.__dict__[attrname]) == property:
            return IAgStkGraphicsFilteringRasterStreamFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsFilteringRasterStreamFactory.")
    
    _Initialize_metadata = { "name" : "Initialize",
            "arg_types" : (agcom.PVOID, agcom.PVOID, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_in_arg("IAgStkGraphicsRasterStream"), agmarshall.AgInterface_in_arg("IAgStkGraphicsRasterFilter"), agmarshall.AgInterface_out_arg,) }
    def Initialize(self, rasterStream:"IAgStkGraphicsRasterStream", filter:"IAgStkGraphicsRasterFilter") -> "IAgStkGraphicsFilteringRasterStream":
        """Initializes a new instance with a raster stream and the raster filter that will be applied to each update of that stream."""
        return self._intf.invoke(IAgStkGraphicsFilteringRasterStreamFactory._metadata, IAgStkGraphicsFilteringRasterStreamFactory._Initialize_metadata, rasterStream, filter, out_arg())


agcls.AgClassCatalog.add_catalog_entry("{3c0a84bb-9330-422b-808e-6f9cf0aa3055}", IAgStkGraphicsFilteringRasterStreamFactory)
agcls.AgTypeNameMap["IAgStkGraphicsFilteringRasterStreamFactory"] = IAgStkGraphicsFilteringRasterStreamFactory

class IAgStkGraphicsFlipFilterFactory(object):
    """Flips the source raster along the given flip axis."""
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{0f7bc6a1-42ac-41f0-8f42-d915fba6b859}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "Initialize" : 1,
                             "InitializeWithFlipAxis" : 2, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsFlipFilterFactory._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsFlipFilterFactory from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsFlipFilterFactory.__dict__ and type(IAgStkGraphicsFlipFilterFactory.__dict__[attrname]) == property:
            return IAgStkGraphicsFlipFilterFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsFlipFilterFactory.")
    
    _Initialize_metadata = { "name" : "Initialize",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    def Initialize(self) -> "IAgStkGraphicsFlipFilter":
        """Initializes a new instance."""
        return self._intf.invoke(IAgStkGraphicsFlipFilterFactory._metadata, IAgStkGraphicsFlipFilterFactory._Initialize_metadata, out_arg())

    _InitializeWithFlipAxis_metadata = { "name" : "InitializeWithFlipAxis",
            "arg_types" : (agcom.LONG, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEStkGraphicsFlipAxis), agmarshall.AgInterface_out_arg,) }
    def InitializeWithFlipAxis(self, flipAxis:"AgEStkGraphicsFlipAxis") -> "IAgStkGraphicsFlipFilter":
        """Initializes a new instance with the specified flip axis."""
        return self._intf.invoke(IAgStkGraphicsFlipFilterFactory._metadata, IAgStkGraphicsFlipFilterFactory._InitializeWithFlipAxis_metadata, flipAxis, out_arg())


agcls.AgClassCatalog.add_catalog_entry("{0f7bc6a1-42ac-41f0-8f42-d915fba6b859}", IAgStkGraphicsFlipFilterFactory)
agcls.AgTypeNameMap["IAgStkGraphicsFlipFilterFactory"] = IAgStkGraphicsFlipFilterFactory

class IAgStkGraphicsGammaCorrectionFilterFactory(object):
    """Applies gamma correction to the source raster. The gamma is a value between .2 and 5. The default gamma value is 2.2."""
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{4e0be3d1-f9ca-47b6-bc7b-31fd98c824a6}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "Initialize" : 1,
                             "InitializeWithGamma" : 2, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsGammaCorrectionFilterFactory._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsGammaCorrectionFilterFactory from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsGammaCorrectionFilterFactory.__dict__ and type(IAgStkGraphicsGammaCorrectionFilterFactory.__dict__[attrname]) == property:
            return IAgStkGraphicsGammaCorrectionFilterFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsGammaCorrectionFilterFactory.")
    
    _Initialize_metadata = { "name" : "Initialize",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    def Initialize(self) -> "IAgStkGraphicsGammaCorrectionFilter":
        """Initializes a new instance."""
        return self._intf.invoke(IAgStkGraphicsGammaCorrectionFilterFactory._metadata, IAgStkGraphicsGammaCorrectionFilterFactory._Initialize_metadata, out_arg())

    _InitializeWithGamma_metadata = { "name" : "InitializeWithGamma",
            "arg_types" : (agcom.DOUBLE, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.DOUBLE_arg, agmarshall.AgInterface_out_arg,) }
    def InitializeWithGamma(self, gamma:float) -> "IAgStkGraphicsGammaCorrectionFilter":
        """Initializes a new instance with the specified gamma."""
        return self._intf.invoke(IAgStkGraphicsGammaCorrectionFilterFactory._metadata, IAgStkGraphicsGammaCorrectionFilterFactory._InitializeWithGamma_metadata, gamma, out_arg())


agcls.AgClassCatalog.add_catalog_entry("{4e0be3d1-f9ca-47b6-bc7b-31fd98c824a6}", IAgStkGraphicsGammaCorrectionFilterFactory)
agcls.AgTypeNameMap["IAgStkGraphicsGammaCorrectionFilterFactory"] = IAgStkGraphicsGammaCorrectionFilterFactory

class IAgStkGraphicsGaussianBlurFilterFactory(object):
    """Applies a convolution filter to blur the source raster using the Gaussian function."""
    _num_methods = 1
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{c4f3b576-0d25-4b06-9a79-773821d5c97b}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "Initialize" : 1, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsGaussianBlurFilterFactory._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsGaussianBlurFilterFactory from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsGaussianBlurFilterFactory.__dict__ and type(IAgStkGraphicsGaussianBlurFilterFactory.__dict__[attrname]) == property:
            return IAgStkGraphicsGaussianBlurFilterFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsGaussianBlurFilterFactory.")
    
    _Initialize_metadata = { "name" : "Initialize",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    def Initialize(self) -> "IAgStkGraphicsGaussianBlurFilter":
        """Initializes a new instance."""
        return self._intf.invoke(IAgStkGraphicsGaussianBlurFilterFactory._metadata, IAgStkGraphicsGaussianBlurFilterFactory._Initialize_metadata, out_arg())


agcls.AgClassCatalog.add_catalog_entry("{c4f3b576-0d25-4b06-9a79-773821d5c97b}", IAgStkGraphicsGaussianBlurFilterFactory)
agcls.AgTypeNameMap["IAgStkGraphicsGaussianBlurFilterFactory"] = IAgStkGraphicsGaussianBlurFilterFactory

class IAgStkGraphicsGradientDetectFilterFactory(object):
    """Applies a convolution filter to detect gradients in the source raster."""
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{ab421e7c-80f3-4503-a29c-5becb2178d44}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "Initialize" : 1,
                             "InitializeWithMethod" : 2, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsGradientDetectFilterFactory._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsGradientDetectFilterFactory from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsGradientDetectFilterFactory.__dict__ and type(IAgStkGraphicsGradientDetectFilterFactory.__dict__[attrname]) == property:
            return IAgStkGraphicsGradientDetectFilterFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsGradientDetectFilterFactory.")
    
    _Initialize_metadata = { "name" : "Initialize",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    def Initialize(self) -> "IAgStkGraphicsGradientDetectFilter":
        """Initializes a new instance."""
        return self._intf.invoke(IAgStkGraphicsGradientDetectFilterFactory._metadata, IAgStkGraphicsGradientDetectFilterFactory._Initialize_metadata, out_arg())

    _InitializeWithMethod_metadata = { "name" : "InitializeWithMethod",
            "arg_types" : (agcom.LONG, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEStkGraphicsGradientDetectMethod), agmarshall.AgInterface_out_arg,) }
    def InitializeWithMethod(self, method:"AgEStkGraphicsGradientDetectMethod") -> "IAgStkGraphicsGradientDetectFilter":
        """Initializes a new instance with specified gradient detect method."""
        return self._intf.invoke(IAgStkGraphicsGradientDetectFilterFactory._metadata, IAgStkGraphicsGradientDetectFilterFactory._InitializeWithMethod_metadata, method, out_arg())


agcls.AgClassCatalog.add_catalog_entry("{ab421e7c-80f3-4503-a29c-5becb2178d44}", IAgStkGraphicsGradientDetectFilterFactory)
agcls.AgTypeNameMap["IAgStkGraphicsGradientDetectFilterFactory"] = IAgStkGraphicsGradientDetectFilterFactory

class IAgStkGraphicsJpeg2000WriterInitializer(object):
    """Converts an image, such as a BMP, to a GeoJP2 file that can be used as an image globe overlay."""
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{e2227905-c4e6-46ab-a89f-6d53e201e1a3}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "WriteString" : 1,
                             "WriteExtentString" : 2,
                             "WriteExtentAndSubExtentString" : 3,
                             "WriteExtentAndSubExtentTransparentColorString" : 4, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsJpeg2000WriterInitializer._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsJpeg2000WriterInitializer from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsJpeg2000WriterInitializer.__dict__ and type(IAgStkGraphicsJpeg2000WriterInitializer.__dict__[attrname]) == property:
            return IAgStkGraphicsJpeg2000WriterInitializer.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsJpeg2000WriterInitializer.")
    
    _WriteString_metadata = { "name" : "WriteString",
            "arg_types" : (agcom.BSTR, agcom.LONG, agcom.INT, agcom.BSTR, agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.AgEnum_arg(AgEStkGraphicsJpeg2000CompressionProfile), agmarshall.INT_arg, agmarshall.BSTR_arg, agmarshall.VARIANT_BOOL_arg,) }
    def WriteString(self, imageUri:str, compressionProfile:"AgEStkGraphicsJpeg2000CompressionProfile", compressionRate:int, jpeg2000Uri:str, overwriteExistingFile:bool) -> None:
        """Converts an image, such as a BMP, to a GeoJP2 file that can be used as an image globe overlay. The extent of the image must be in the image, as in a GeoTIFF."""
        return self._intf.invoke(IAgStkGraphicsJpeg2000WriterInitializer._metadata, IAgStkGraphicsJpeg2000WriterInitializer._WriteString_metadata, imageUri, compressionProfile, compressionRate, jpeg2000Uri, overwriteExistingFile)

    _WriteExtentString_metadata = { "name" : "WriteExtentString",
            "arg_types" : (agcom.BSTR, POINTER(agcom.LPSAFEARRAY), agcom.LONG, agcom.INT, agcom.BSTR, agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.LPSAFEARRAY_arg, agmarshall.AgEnum_arg(AgEStkGraphicsJpeg2000CompressionProfile), agmarshall.INT_arg, agmarshall.BSTR_arg, agmarshall.VARIANT_BOOL_arg,) }
    def WriteExtentString(self, imageUri:str, extent:list, compressionProfile:"AgEStkGraphicsJpeg2000CompressionProfile", compressionRate:int, jpeg2000Uri:str, overwriteExistingFile:bool) -> None:
        """Converts an image, such as a BMP, to a GeoJP2 file that can be used as an image globe overlay. The extent of the image can be defined as an input parameter if necessary."""
        return self._intf.invoke(IAgStkGraphicsJpeg2000WriterInitializer._metadata, IAgStkGraphicsJpeg2000WriterInitializer._WriteExtentString_metadata, imageUri, extent, compressionProfile, compressionRate, jpeg2000Uri, overwriteExistingFile)

    _WriteExtentAndSubExtentString_metadata = { "name" : "WriteExtentAndSubExtentString",
            "arg_types" : (agcom.BSTR, POINTER(agcom.LPSAFEARRAY), POINTER(agcom.LPSAFEARRAY), agcom.LONG, agcom.INT, agcom.BSTR, agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.LPSAFEARRAY_arg, agmarshall.LPSAFEARRAY_arg, agmarshall.AgEnum_arg(AgEStkGraphicsJpeg2000CompressionProfile), agmarshall.INT_arg, agmarshall.BSTR_arg, agmarshall.VARIANT_BOOL_arg,) }
    def WriteExtentAndSubExtentString(self, imageUri:str, extent:list, subExtent:list, compressionProfile:"AgEStkGraphicsJpeg2000CompressionProfile", compressionRate:int, jpeg2000Uri:str, overwriteExistingFile:bool) -> None:
        """Converts an image, such as a BMP, to a GeoJP2 file that can be used as an image globe overlay. The extent of the image can be defined as an input parameter if necessary."""
        return self._intf.invoke(IAgStkGraphicsJpeg2000WriterInitializer._metadata, IAgStkGraphicsJpeg2000WriterInitializer._WriteExtentAndSubExtentString_metadata, imageUri, extent, subExtent, compressionProfile, compressionRate, jpeg2000Uri, overwriteExistingFile)

    _WriteExtentAndSubExtentTransparentColorString_metadata = { "name" : "WriteExtentAndSubExtentTransparentColorString",
            "arg_types" : (agcom.BSTR, POINTER(agcom.LPSAFEARRAY), POINTER(agcom.LPSAFEARRAY), agcom.LONG, agcom.INT, agcom.BSTR, agcom.VARIANT_BOOL, agcom.OLE_COLOR,),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.LPSAFEARRAY_arg, agmarshall.LPSAFEARRAY_arg, agmarshall.AgEnum_arg(AgEStkGraphicsJpeg2000CompressionProfile), agmarshall.INT_arg, agmarshall.BSTR_arg, agmarshall.VARIANT_BOOL_arg, agmarshall.OLE_COLOR_arg,) }
    def WriteExtentAndSubExtentTransparentColorString(self, imageUri:str, extent:list, subExtent:list, compressionProfile:"AgEStkGraphicsJpeg2000CompressionProfile", compressionRate:int, jpeg2000Uri:str, overwriteExistingFile:bool, transparentColor:agcolor.Color) -> None:
        """Converts an image, such as a BMP, to a GeoJP2 file that can be used as an image globe overlay. The extent of the image can be defined as an input parameter if necessary."""
        return self._intf.invoke(IAgStkGraphicsJpeg2000WriterInitializer._metadata, IAgStkGraphicsJpeg2000WriterInitializer._WriteExtentAndSubExtentTransparentColorString_metadata, imageUri, extent, subExtent, compressionProfile, compressionRate, jpeg2000Uri, overwriteExistingFile, transparentColor)


agcls.AgClassCatalog.add_catalog_entry("{e2227905-c4e6-46ab-a89f-6d53e201e1a3}", IAgStkGraphicsJpeg2000WriterInitializer)
agcls.AgTypeNameMap["IAgStkGraphicsJpeg2000WriterInitializer"] = IAgStkGraphicsJpeg2000WriterInitializer

class IAgStkGraphicsLevelsFilterFactory(object):
    """Adjusts the band levels of the source raster linearly."""
    _num_methods = 1
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{30236afe-b593-4e6c-9e61-099216f14db1}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "Initialize" : 1, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsLevelsFilterFactory._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsLevelsFilterFactory from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsLevelsFilterFactory.__dict__ and type(IAgStkGraphicsLevelsFilterFactory.__dict__[attrname]) == property:
            return IAgStkGraphicsLevelsFilterFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsLevelsFilterFactory.")
    
    _Initialize_metadata = { "name" : "Initialize",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    def Initialize(self) -> "IAgStkGraphicsLevelsFilter":
        """Initializes a new instance."""
        return self._intf.invoke(IAgStkGraphicsLevelsFilterFactory._metadata, IAgStkGraphicsLevelsFilterFactory._Initialize_metadata, out_arg())


agcls.AgClassCatalog.add_catalog_entry("{30236afe-b593-4e6c-9e61-099216f14db1}", IAgStkGraphicsLevelsFilterFactory)
agcls.AgTypeNameMap["IAgStkGraphicsLevelsFilterFactory"] = IAgStkGraphicsLevelsFilterFactory

class IAgStkGraphicsProjectionRasterStreamPluginActivatorFactory(object):
    """The Activator class provides methods to load COM plugins that implement projection and raster streaming. For more information about the projection and raster plugins, see the STK Programming Interface."""
    _num_methods = 1
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{d7df6203-7dc8-4f07-8211-78e6d3c268a1}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "Initialize" : 1, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsProjectionRasterStreamPluginActivatorFactory._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsProjectionRasterStreamPluginActivatorFactory from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsProjectionRasterStreamPluginActivatorFactory.__dict__ and type(IAgStkGraphicsProjectionRasterStreamPluginActivatorFactory.__dict__[attrname]) == property:
            return IAgStkGraphicsProjectionRasterStreamPluginActivatorFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsProjectionRasterStreamPluginActivatorFactory.")
    
    _Initialize_metadata = { "name" : "Initialize",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    def Initialize(self) -> "IAgStkGraphicsProjectionRasterStreamPluginActivator":
        """Initializes a new instance of the Activator type."""
        return self._intf.invoke(IAgStkGraphicsProjectionRasterStreamPluginActivatorFactory._metadata, IAgStkGraphicsProjectionRasterStreamPluginActivatorFactory._Initialize_metadata, out_arg())


agcls.AgClassCatalog.add_catalog_entry("{d7df6203-7dc8-4f07-8211-78e6d3c268a1}", IAgStkGraphicsProjectionRasterStreamPluginActivatorFactory)
agcls.AgTypeNameMap["IAgStkGraphicsProjectionRasterStreamPluginActivatorFactory"] = IAgStkGraphicsProjectionRasterStreamPluginActivatorFactory

class IAgStkGraphicsRasterFactory(object):
    """A raster dataset. A raster consists of one or more bands, or sets of values, which are most commonly associated with colors when the raster represents an image..."""
    _num_methods = 3
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{b4777c93-7685-452a-87df-8fd8bfd10e6f}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "InitializeWithStringUri" : 1,
                             "InitializeWithStringUriXYWidthAndHeight" : 2,
                             "InitializeWithRaster" : 3, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsRasterFactory._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsRasterFactory from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsRasterFactory.__dict__ and type(IAgStkGraphicsRasterFactory.__dict__[attrname]) == property:
            return IAgStkGraphicsRasterFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsRasterFactory.")
    
    _InitializeWithStringUri_metadata = { "name" : "InitializeWithStringUri",
            "arg_types" : (agcom.BSTR, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.AgInterface_out_arg,) }
    def InitializeWithStringUri(self, uri:str) -> "IAgStkGraphicsRaster":
        """Initializes a raster from a Uri, which can be a file, HTTP, HTTPS, or FTP source. See raster for a list of supported formats."""
        return self._intf.invoke(IAgStkGraphicsRasterFactory._metadata, IAgStkGraphicsRasterFactory._InitializeWithStringUri_metadata, uri, out_arg())

    _InitializeWithStringUriXYWidthAndHeight_metadata = { "name" : "InitializeWithStringUriXYWidthAndHeight",
            "arg_types" : (agcom.BSTR, agcom.INT, agcom.INT, agcom.INT, agcom.INT, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.INT_arg, agmarshall.INT_arg, agmarshall.INT_arg, agmarshall.INT_arg, agmarshall.AgInterface_out_arg,) }
    def InitializeWithStringUriXYWidthAndHeight(self, uri:str, x:int, y:int, width:int, height:int) -> "IAgStkGraphicsRaster":
        """Initializes a raster from a Uri. Only the specified subsection of the raster is read. See raster for a list of supported formats."""
        return self._intf.invoke(IAgStkGraphicsRasterFactory._metadata, IAgStkGraphicsRasterFactory._InitializeWithStringUriXYWidthAndHeight_metadata, uri, x, y, width, height, out_arg())

    _InitializeWithRaster_metadata = { "name" : "InitializeWithRaster",
            "arg_types" : (agcom.PVOID, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_in_arg("IAgStkGraphicsRaster"), agmarshall.AgInterface_out_arg,) }
    def InitializeWithRaster(self, raster:"IAgStkGraphicsRaster") -> "IAgStkGraphicsRaster":
        """Initializes a raster from another raster."""
        return self._intf.invoke(IAgStkGraphicsRasterFactory._metadata, IAgStkGraphicsRasterFactory._InitializeWithRaster_metadata, raster, out_arg())


agcls.AgClassCatalog.add_catalog_entry("{b4777c93-7685-452a-87df-8fd8bfd10e6f}", IAgStkGraphicsRasterFactory)
agcls.AgTypeNameMap["IAgStkGraphicsRasterFactory"] = IAgStkGraphicsRasterFactory

class IAgStkGraphicsRasterAttributesFactory(object):
    """The attributes describing a raster dataset. raster attributes define the memory layout of a raster, and includes properties defining the order of each raster band that the raster contains, as specified by the raster format..."""
    _num_methods = 6
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{5e2aeff9-22ff-4a0f-984d-dc0d92d738c9}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "InitializeWithFormat" : 1,
                             "InitializeWithFormatAndType" : 2,
                             "InitializeWithFormatTypeAndOrientation" : 3,
                             "InitializeWithFormatTypeOrientationAndAlignment" : 4,
                             "InitializeWithFormatTypeOrientationAlignmentAndRatio" : 5,
                             "InitializeWithRaster" : 6, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsRasterAttributesFactory._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsRasterAttributesFactory from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsRasterAttributesFactory.__dict__ and type(IAgStkGraphicsRasterAttributesFactory.__dict__[attrname]) == property:
            return IAgStkGraphicsRasterAttributesFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsRasterAttributesFactory.")
    
    _InitializeWithFormat_metadata = { "name" : "InitializeWithFormat",
            "arg_types" : (agcom.INT, agcom.INT, agcom.LONG, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.INT_arg, agmarshall.INT_arg, agmarshall.AgEnum_arg(AgEStkGraphicsRasterFormat), agmarshall.AgInterface_out_arg,) }
    def InitializeWithFormat(self, width:int, height:int, rasterFormat:"AgEStkGraphicsRasterFormat") -> "IAgStkGraphicsRasterAttributes":
        """Initializes a new instance with the width and height of the raster in pixels, and the given raster format."""
        return self._intf.invoke(IAgStkGraphicsRasterAttributesFactory._metadata, IAgStkGraphicsRasterAttributesFactory._InitializeWithFormat_metadata, width, height, rasterFormat, out_arg())

    _InitializeWithFormatAndType_metadata = { "name" : "InitializeWithFormatAndType",
            "arg_types" : (agcom.INT, agcom.INT, agcom.LONG, agcom.LONG, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.INT_arg, agmarshall.INT_arg, agmarshall.AgEnum_arg(AgEStkGraphicsRasterFormat), agmarshall.AgEnum_arg(AgEStkGraphicsRasterType), agmarshall.AgInterface_out_arg,) }
    def InitializeWithFormatAndType(self, width:int, height:int, rasterFormat:"AgEStkGraphicsRasterFormat", rasterType:"AgEStkGraphicsRasterType") -> "IAgStkGraphicsRasterAttributes":
        """Initializes a new instance with the width and height of the raster in pixels, and the given raster format and raster type."""
        return self._intf.invoke(IAgStkGraphicsRasterAttributesFactory._metadata, IAgStkGraphicsRasterAttributesFactory._InitializeWithFormatAndType_metadata, width, height, rasterFormat, rasterType, out_arg())

    _InitializeWithFormatTypeAndOrientation_metadata = { "name" : "InitializeWithFormatTypeAndOrientation",
            "arg_types" : (agcom.INT, agcom.INT, agcom.LONG, agcom.LONG, agcom.LONG, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.INT_arg, agmarshall.INT_arg, agmarshall.AgEnum_arg(AgEStkGraphicsRasterFormat), agmarshall.AgEnum_arg(AgEStkGraphicsRasterType), agmarshall.AgEnum_arg(AgEStkGraphicsRasterOrientation), agmarshall.AgInterface_out_arg,) }
    def InitializeWithFormatTypeAndOrientation(self, width:int, height:int, rasterFormat:"AgEStkGraphicsRasterFormat", rasterType:"AgEStkGraphicsRasterType", rasterOrientation:"AgEStkGraphicsRasterOrientation") -> "IAgStkGraphicsRasterAttributes":
        """Initializes a new instance with the width and height of the raster in pixels, and the given raster format, raster type, and raster orientation."""
        return self._intf.invoke(IAgStkGraphicsRasterAttributesFactory._metadata, IAgStkGraphicsRasterAttributesFactory._InitializeWithFormatTypeAndOrientation_metadata, width, height, rasterFormat, rasterType, rasterOrientation, out_arg())

    _InitializeWithFormatTypeOrientationAndAlignment_metadata = { "name" : "InitializeWithFormatTypeOrientationAndAlignment",
            "arg_types" : (agcom.INT, agcom.INT, agcom.LONG, agcom.LONG, agcom.LONG, agcom.INT, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.INT_arg, agmarshall.INT_arg, agmarshall.AgEnum_arg(AgEStkGraphicsRasterFormat), agmarshall.AgEnum_arg(AgEStkGraphicsRasterType), agmarshall.AgEnum_arg(AgEStkGraphicsRasterOrientation), agmarshall.INT_arg, agmarshall.AgInterface_out_arg,) }
    def InitializeWithFormatTypeOrientationAndAlignment(self, width:int, height:int, rasterFormat:"AgEStkGraphicsRasterFormat", rasterType:"AgEStkGraphicsRasterType", rasterOrientation:"AgEStkGraphicsRasterOrientation", rowAlignment:int) -> "IAgStkGraphicsRasterAttributes":
        """Initializes a new instance with the width and height of the raster in pixels, and the given raster format, raster type, raster orientation, and row alignment."""
        return self._intf.invoke(IAgStkGraphicsRasterAttributesFactory._metadata, IAgStkGraphicsRasterAttributesFactory._InitializeWithFormatTypeOrientationAndAlignment_metadata, width, height, rasterFormat, rasterType, rasterOrientation, rowAlignment, out_arg())

    _InitializeWithFormatTypeOrientationAlignmentAndRatio_metadata = { "name" : "InitializeWithFormatTypeOrientationAlignmentAndRatio",
            "arg_types" : (agcom.INT, agcom.INT, agcom.LONG, agcom.LONG, agcom.LONG, agcom.INT, agcom.DOUBLE, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.INT_arg, agmarshall.INT_arg, agmarshall.AgEnum_arg(AgEStkGraphicsRasterFormat), agmarshall.AgEnum_arg(AgEStkGraphicsRasterType), agmarshall.AgEnum_arg(AgEStkGraphicsRasterOrientation), agmarshall.INT_arg, agmarshall.DOUBLE_arg, agmarshall.AgInterface_out_arg,) }
    def InitializeWithFormatTypeOrientationAlignmentAndRatio(self, width:int, height:int, rasterFormat:"AgEStkGraphicsRasterFormat", rasterType:"AgEStkGraphicsRasterType", rasterOrientation:"AgEStkGraphicsRasterOrientation", rowAlignment:int, pixelAspectRatio:float) -> "IAgStkGraphicsRasterAttributes":
        """Initializes a new instance with the width and height of the raster in pixels, and the given raster format, raster type, raster orientation, row alignment, and pixel aspect ratio."""
        return self._intf.invoke(IAgStkGraphicsRasterAttributesFactory._metadata, IAgStkGraphicsRasterAttributesFactory._InitializeWithFormatTypeOrientationAlignmentAndRatio_metadata, width, height, rasterFormat, rasterType, rasterOrientation, rowAlignment, pixelAspectRatio, out_arg())

    _InitializeWithRaster_metadata = { "name" : "InitializeWithRaster",
            "arg_types" : (agcom.PVOID, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_in_arg("IAgStkGraphicsRaster"), agmarshall.AgInterface_out_arg,) }
    def InitializeWithRaster(self, raster:"IAgStkGraphicsRaster") -> "IAgStkGraphicsRasterAttributes":
        """Initializes a new instance with the attributes of the specified raster"""
        return self._intf.invoke(IAgStkGraphicsRasterAttributesFactory._metadata, IAgStkGraphicsRasterAttributesFactory._InitializeWithRaster_metadata, raster, out_arg())


agcls.AgClassCatalog.add_catalog_entry("{5e2aeff9-22ff-4a0f-984d-dc0d92d738c9}", IAgStkGraphicsRasterAttributesFactory)
agcls.AgTypeNameMap["IAgStkGraphicsRasterAttributesFactory"] = IAgStkGraphicsRasterAttributesFactory

class IAgStkGraphicsRotateFilterFactory(object):
    """Rotates the source raster clockwise by the specified angle."""
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{413b5f7f-9fa5-48ba-bb49-d57948acc6ed}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "Initialize" : 1,
                             "InitializeWithAngle" : 2, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsRotateFilterFactory._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsRotateFilterFactory from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsRotateFilterFactory.__dict__ and type(IAgStkGraphicsRotateFilterFactory.__dict__[attrname]) == property:
            return IAgStkGraphicsRotateFilterFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsRotateFilterFactory.")
    
    _Initialize_metadata = { "name" : "Initialize",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    def Initialize(self) -> "IAgStkGraphicsRotateFilter":
        """Initializes a new instance."""
        return self._intf.invoke(IAgStkGraphicsRotateFilterFactory._metadata, IAgStkGraphicsRotateFilterFactory._Initialize_metadata, out_arg())

    _InitializeWithAngle_metadata = { "name" : "InitializeWithAngle",
            "arg_types" : (agcom.DOUBLE, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.DOUBLE_arg, agmarshall.AgInterface_out_arg,) }
    def InitializeWithAngle(self, rotateAngle:float) -> "IAgStkGraphicsRotateFilter":
        """Initializes a new instance with a counterclockwise rotation angle."""
        return self._intf.invoke(IAgStkGraphicsRotateFilterFactory._metadata, IAgStkGraphicsRotateFilterFactory._InitializeWithAngle_metadata, rotateAngle, out_arg())


agcls.AgClassCatalog.add_catalog_entry("{413b5f7f-9fa5-48ba-bb49-d57948acc6ed}", IAgStkGraphicsRotateFilterFactory)
agcls.AgTypeNameMap["IAgStkGraphicsRotateFilterFactory"] = IAgStkGraphicsRotateFilterFactory

class IAgStkGraphicsSequenceFilterFactory(object):
    """Applies a sequence of filters to the source raster in the order in which they were added. When continue on failure is set to true, subsequent filters will still be applied to the source raster even if one or more filters in the sequence cannot be applied."""
    _num_methods = 1
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{b3f075e4-7de5-4d8c-adbe-89862537e530}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "Initialize" : 1, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsSequenceFilterFactory._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsSequenceFilterFactory from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsSequenceFilterFactory.__dict__ and type(IAgStkGraphicsSequenceFilterFactory.__dict__[attrname]) == property:
            return IAgStkGraphicsSequenceFilterFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsSequenceFilterFactory.")
    
    _Initialize_metadata = { "name" : "Initialize",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    def Initialize(self) -> "IAgStkGraphicsSequenceFilter":
        """Initializes a new instance."""
        return self._intf.invoke(IAgStkGraphicsSequenceFilterFactory._metadata, IAgStkGraphicsSequenceFilterFactory._Initialize_metadata, out_arg())


agcls.AgClassCatalog.add_catalog_entry("{b3f075e4-7de5-4d8c-adbe-89862537e530}", IAgStkGraphicsSequenceFilterFactory)
agcls.AgTypeNameMap["IAgStkGraphicsSequenceFilterFactory"] = IAgStkGraphicsSequenceFilterFactory

class IAgStkGraphicsSharpenFilterFactory(object):
    """Applies a convolution filter to increase the sharpness of the source raster."""
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{953f907c-8223-40fa-9827-cb08278d5af4}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "Initialize" : 1,
                             "InitializeWithMethod" : 2, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsSharpenFilterFactory._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsSharpenFilterFactory from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsSharpenFilterFactory.__dict__ and type(IAgStkGraphicsSharpenFilterFactory.__dict__[attrname]) == property:
            return IAgStkGraphicsSharpenFilterFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsSharpenFilterFactory.")
    
    _Initialize_metadata = { "name" : "Initialize",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    def Initialize(self) -> "IAgStkGraphicsSharpenFilter":
        """Initialize a new instance."""
        return self._intf.invoke(IAgStkGraphicsSharpenFilterFactory._metadata, IAgStkGraphicsSharpenFilterFactory._Initialize_metadata, out_arg())

    _InitializeWithMethod_metadata = { "name" : "InitializeWithMethod",
            "arg_types" : (agcom.LONG, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEStkGraphicsSharpenMethod), agmarshall.AgInterface_out_arg,) }
    def InitializeWithMethod(self, method:"AgEStkGraphicsSharpenMethod") -> "IAgStkGraphicsSharpenFilter":
        """Initialize a new instance with the specified sharpen method."""
        return self._intf.invoke(IAgStkGraphicsSharpenFilterFactory._metadata, IAgStkGraphicsSharpenFilterFactory._InitializeWithMethod_metadata, method, out_arg())


agcls.AgClassCatalog.add_catalog_entry("{953f907c-8223-40fa-9827-cb08278d5af4}", IAgStkGraphicsSharpenFilterFactory)
agcls.AgTypeNameMap["IAgStkGraphicsSharpenFilterFactory"] = IAgStkGraphicsSharpenFilterFactory

class IAgStkGraphicsVideoStreamFactory(object):
    """A raster stream that streams from a video. The video can be read from a file, or streamed from an HTTP, RTP, UDP, or TCP source. See the Video Streams Overview for a list of supported video formats and Uri usage."""
    _num_methods = 3
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{fbde7847-ccff-4c4e-83cf-5f7b05468709}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "InitializeWithStringUri" : 1,
                             "InitializeWithStringUriAndAudio" : 2,
                             "InitializeAudioVideoWithStringUri" : 3, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsVideoStreamFactory._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsVideoStreamFactory from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsVideoStreamFactory.__dict__ and type(IAgStkGraphicsVideoStreamFactory.__dict__[attrname]) == property:
            return IAgStkGraphicsVideoStreamFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsVideoStreamFactory.")
    
    _InitializeWithStringUri_metadata = { "name" : "InitializeWithStringUri",
            "arg_types" : (agcom.BSTR, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.AgInterface_out_arg,) }
    def InitializeWithStringUri(self, uri:str) -> "IAgStkGraphicsVideoStream":
        """Initializes the video stream from a Uri, which can be a file, HTTP, RTP, UDP, or TCP source. See the Video Streams Overview for a list of supported video formats and Uri usage."""
        return self._intf.invoke(IAgStkGraphicsVideoStreamFactory._metadata, IAgStkGraphicsVideoStreamFactory._InitializeWithStringUri_metadata, uri, out_arg())

    _InitializeWithStringUriAndAudio_metadata = { "name" : "InitializeWithStringUriAndAudio",
            "arg_types" : (agcom.BSTR, agcom.VARIANT_BOOL, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.VARIANT_BOOL_arg, agmarshall.AgInterface_out_arg,) }
    def InitializeWithStringUriAndAudio(self, uri:str, loadAudio:bool) -> "IAgStkGraphicsVideoStream":
        """Initializes the video stream from a Uri, which can be a file, HTTP, RTP, UDP, or TCP source. See the Video Streams Overview for a list of supported video formats and Uri usage."""
        return self._intf.invoke(IAgStkGraphicsVideoStreamFactory._metadata, IAgStkGraphicsVideoStreamFactory._InitializeWithStringUriAndAudio_metadata, uri, loadAudio, out_arg())

    _InitializeAudioVideoWithStringUri_metadata = { "name" : "InitializeAudioVideoWithStringUri",
            "arg_types" : (agcom.BSTR, agcom.BSTR, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.BSTR_arg, agmarshall.AgInterface_out_arg,) }
    def InitializeAudioVideoWithStringUri(self, uri:str, audioUri:str) -> "IAgStkGraphicsVideoStream":
        """Initializes the video stream from a Uri, which can be a file, HTTP, RTP, UDP, or TCP source. See the Video Streams Overview for a list of supported video formats and Uri usage."""
        return self._intf.invoke(IAgStkGraphicsVideoStreamFactory._metadata, IAgStkGraphicsVideoStreamFactory._InitializeAudioVideoWithStringUri_metadata, uri, audioUri, out_arg())


agcls.AgClassCatalog.add_catalog_entry("{fbde7847-ccff-4c4e-83cf-5f7b05468709}", IAgStkGraphicsVideoStreamFactory)
agcls.AgTypeNameMap["IAgStkGraphicsVideoStreamFactory"] = IAgStkGraphicsVideoStreamFactory

class IAgStkGraphicsMarkerBatchPrimitiveFactory(object):
    """ Renders one or more markers in the 3D scene. Markers are 2D images that always face the viewer which can be sized in pixels or meters. Markers are also referred to as sprites or billboards..."""
    _num_methods = 7
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{02a33d9e-cfb3-41c8-be66-e452ae1b7ac3}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "Initialize" : 1,
                             "InitializeWithSetHint" : 2,
                             "InitializeWithSizeSource" : 3,
                             "InitializeWithSizeSourceAndSortOrder" : 4,
                             "InitializeSizeSourceSortOrderAndSetHint" : 5,
                             "InitializeSizeSourceSortOrderSetHintAndRenderingMethod" : 6,
                             "Supported" : 7, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsMarkerBatchPrimitiveFactory._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsMarkerBatchPrimitiveFactory from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsMarkerBatchPrimitiveFactory.__dict__ and type(IAgStkGraphicsMarkerBatchPrimitiveFactory.__dict__[attrname]) == property:
            return IAgStkGraphicsMarkerBatchPrimitiveFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsMarkerBatchPrimitiveFactory.")
    
    _Initialize_metadata = { "name" : "Initialize",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    def Initialize(self) -> "IAgStkGraphicsMarkerBatchPrimitive":
        """Initializes a default marker batch primitive..."""
        return self._intf.invoke(IAgStkGraphicsMarkerBatchPrimitiveFactory._metadata, IAgStkGraphicsMarkerBatchPrimitiveFactory._Initialize_metadata, out_arg())

    _InitializeWithSetHint_metadata = { "name" : "InitializeWithSetHint",
            "arg_types" : (agcom.LONG, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEStkGraphicsSetHint), agmarshall.AgInterface_out_arg,) }
    def InitializeWithSetHint(self, setHint:"AgEStkGraphicsSetHint") -> "IAgStkGraphicsMarkerBatchPrimitive":
        """Initializes a marker batch primitive with the specified setHint..."""
        return self._intf.invoke(IAgStkGraphicsMarkerBatchPrimitiveFactory._metadata, IAgStkGraphicsMarkerBatchPrimitiveFactory._InitializeWithSetHint_metadata, setHint, out_arg())

    _InitializeWithSizeSource_metadata = { "name" : "InitializeWithSizeSource",
            "arg_types" : (agcom.LONG, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEStkGraphicsMarkerBatchSizeSource), agmarshall.AgInterface_out_arg,) }
    def InitializeWithSizeSource(self, sizeSource:"AgEStkGraphicsMarkerBatchSizeSource") -> "IAgStkGraphicsMarkerBatchPrimitive":
        """Initializes a marker batch primitive with the specified sizeSource..."""
        return self._intf.invoke(IAgStkGraphicsMarkerBatchPrimitiveFactory._metadata, IAgStkGraphicsMarkerBatchPrimitiveFactory._InitializeWithSizeSource_metadata, sizeSource, out_arg())

    _InitializeWithSizeSourceAndSortOrder_metadata = { "name" : "InitializeWithSizeSourceAndSortOrder",
            "arg_types" : (agcom.LONG, agcom.LONG, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEStkGraphicsMarkerBatchSizeSource), agmarshall.AgEnum_arg(AgEStkGraphicsMarkerBatchSortOrder), agmarshall.AgInterface_out_arg,) }
    def InitializeWithSizeSourceAndSortOrder(self, sizeSource:"AgEStkGraphicsMarkerBatchSizeSource", sortOrder:"AgEStkGraphicsMarkerBatchSortOrder") -> "IAgStkGraphicsMarkerBatchPrimitive":
        """Initializes a marker batch primitive with the specified sizeSource and sortOrder..."""
        return self._intf.invoke(IAgStkGraphicsMarkerBatchPrimitiveFactory._metadata, IAgStkGraphicsMarkerBatchPrimitiveFactory._InitializeWithSizeSourceAndSortOrder_metadata, sizeSource, sortOrder, out_arg())

    _InitializeSizeSourceSortOrderAndSetHint_metadata = { "name" : "InitializeSizeSourceSortOrderAndSetHint",
            "arg_types" : (agcom.LONG, agcom.LONG, agcom.LONG, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEStkGraphicsMarkerBatchSizeSource), agmarshall.AgEnum_arg(AgEStkGraphicsMarkerBatchSortOrder), agmarshall.AgEnum_arg(AgEStkGraphicsSetHint), agmarshall.AgInterface_out_arg,) }
    def InitializeSizeSourceSortOrderAndSetHint(self, sizeSource:"AgEStkGraphicsMarkerBatchSizeSource", sortOrder:"AgEStkGraphicsMarkerBatchSortOrder", setHint:"AgEStkGraphicsSetHint") -> "IAgStkGraphicsMarkerBatchPrimitive":
        """Initializes a marker batch primitive with the specified sizeSource, sortOrder, and setHint. This is equivalent to constructing a marker batch with the specified arguments and a marker batch rendering method of Automatic."""
        return self._intf.invoke(IAgStkGraphicsMarkerBatchPrimitiveFactory._metadata, IAgStkGraphicsMarkerBatchPrimitiveFactory._InitializeSizeSourceSortOrderAndSetHint_metadata, sizeSource, sortOrder, setHint, out_arg())

    _InitializeSizeSourceSortOrderSetHintAndRenderingMethod_metadata = { "name" : "InitializeSizeSourceSortOrderSetHintAndRenderingMethod",
            "arg_types" : (agcom.LONG, agcom.LONG, agcom.LONG, agcom.LONG, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEStkGraphicsMarkerBatchSizeSource), agmarshall.AgEnum_arg(AgEStkGraphicsMarkerBatchSortOrder), agmarshall.AgEnum_arg(AgEStkGraphicsSetHint), agmarshall.AgEnum_arg(AgEStkGraphicsMarkerBatchRenderingMethod), agmarshall.AgInterface_out_arg,) }
    def InitializeSizeSourceSortOrderSetHintAndRenderingMethod(self, sizeSource:"AgEStkGraphicsMarkerBatchSizeSource", sortOrder:"AgEStkGraphicsMarkerBatchSortOrder", setHint:"AgEStkGraphicsSetHint", renderingMethod:"AgEStkGraphicsMarkerBatchRenderingMethod") -> "IAgStkGraphicsMarkerBatchPrimitive":
        """Initializes a marker batch primitive with the specified arguments."""
        return self._intf.invoke(IAgStkGraphicsMarkerBatchPrimitiveFactory._metadata, IAgStkGraphicsMarkerBatchPrimitiveFactory._InitializeSizeSourceSortOrderSetHintAndRenderingMethod_metadata, sizeSource, sortOrder, setHint, renderingMethod, out_arg())

    _Supported_metadata = { "name" : "Supported",
            "arg_types" : (agcom.LONG, POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEStkGraphicsMarkerBatchRenderingMethod), agmarshall.VARIANT_BOOL_arg,) }
    def Supported(self, renderingMethod:"AgEStkGraphicsMarkerBatchRenderingMethod") -> bool:
        """Determines whether or not the video card supports the marker batch primitive with the given renderingMethod."""
        return self._intf.invoke(IAgStkGraphicsMarkerBatchPrimitiveFactory._metadata, IAgStkGraphicsMarkerBatchPrimitiveFactory._Supported_metadata, renderingMethod, out_arg())


agcls.AgClassCatalog.add_catalog_entry("{02a33d9e-cfb3-41c8-be66-e452ae1b7ac3}", IAgStkGraphicsMarkerBatchPrimitiveFactory)
agcls.AgTypeNameMap["IAgStkGraphicsMarkerBatchPrimitiveFactory"] = IAgStkGraphicsMarkerBatchPrimitiveFactory

class IAgStkGraphicsMarkerBatchPrimitiveOptionalParametersFactory(object):
    """Optional per-marker parameters for marker batch primitive that overrides the marker batch's per-batch parameters..."""
    _num_methods = 1
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{9b29c9ab-8fd6-4f2b-8183-b504e319617e}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "Initialize" : 1, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsMarkerBatchPrimitiveOptionalParametersFactory._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsMarkerBatchPrimitiveOptionalParametersFactory from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsMarkerBatchPrimitiveOptionalParametersFactory.__dict__ and type(IAgStkGraphicsMarkerBatchPrimitiveOptionalParametersFactory.__dict__[attrname]) == property:
            return IAgStkGraphicsMarkerBatchPrimitiveOptionalParametersFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsMarkerBatchPrimitiveOptionalParametersFactory.")
    
    _Initialize_metadata = { "name" : "Initialize",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    def Initialize(self) -> "IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters":
        """Initializes default marker batch primitive optional parameters. All per-marker parameters are initially empty."""
        return self._intf.invoke(IAgStkGraphicsMarkerBatchPrimitiveOptionalParametersFactory._metadata, IAgStkGraphicsMarkerBatchPrimitiveOptionalParametersFactory._Initialize_metadata, out_arg())


agcls.AgClassCatalog.add_catalog_entry("{9b29c9ab-8fd6-4f2b-8183-b504e319617e}", IAgStkGraphicsMarkerBatchPrimitiveOptionalParametersFactory)
agcls.AgTypeNameMap["IAgStkGraphicsMarkerBatchPrimitiveOptionalParametersFactory"] = IAgStkGraphicsMarkerBatchPrimitiveOptionalParametersFactory

class IAgStkGraphicsMaximumCountPathPrimitiveUpdatePolicyFactory(object):
    """path primitive update policy that removes points from remove location when the number of points in the path exceeds maximum count."""
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{046383cc-b5b9-4ff5-b662-701e694170ba}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "Initialize" : 1,
                             "InitializeWithParameters" : 2, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsMaximumCountPathPrimitiveUpdatePolicyFactory._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsMaximumCountPathPrimitiveUpdatePolicyFactory from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsMaximumCountPathPrimitiveUpdatePolicyFactory.__dict__ and type(IAgStkGraphicsMaximumCountPathPrimitiveUpdatePolicyFactory.__dict__[attrname]) == property:
            return IAgStkGraphicsMaximumCountPathPrimitiveUpdatePolicyFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsMaximumCountPathPrimitiveUpdatePolicyFactory.")
    
    _Initialize_metadata = { "name" : "Initialize",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    def Initialize(self) -> "IAgStkGraphicsMaximumCountPathPrimitiveUpdatePolicy":
        """Constructs a default update policy. This is equivalent to constructing a policy with maximum count set to 0 and a remove location of Front."""
        return self._intf.invoke(IAgStkGraphicsMaximumCountPathPrimitiveUpdatePolicyFactory._metadata, IAgStkGraphicsMaximumCountPathPrimitiveUpdatePolicyFactory._Initialize_metadata, out_arg())

    _InitializeWithParameters_metadata = { "name" : "InitializeWithParameters",
            "arg_types" : (agcom.INT, agcom.LONG, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.INT_arg, agmarshall.AgEnum_arg(AgEStkGraphicsPathPrimitiveRemoveLocation), agmarshall.AgInterface_out_arg,) }
    def InitializeWithParameters(self, maximumCount:int, removeLocation:"AgEStkGraphicsPathPrimitiveRemoveLocation") -> "IAgStkGraphicsMaximumCountPathPrimitiveUpdatePolicy":
        """Initializes a policy with the specified maximumCount and removeLocation."""
        return self._intf.invoke(IAgStkGraphicsMaximumCountPathPrimitiveUpdatePolicyFactory._metadata, IAgStkGraphicsMaximumCountPathPrimitiveUpdatePolicyFactory._InitializeWithParameters_metadata, maximumCount, removeLocation, out_arg())


agcls.AgClassCatalog.add_catalog_entry("{046383cc-b5b9-4ff5-b662-701e694170ba}", IAgStkGraphicsMaximumCountPathPrimitiveUpdatePolicyFactory)
agcls.AgTypeNameMap["IAgStkGraphicsMaximumCountPathPrimitiveUpdatePolicyFactory"] = IAgStkGraphicsMaximumCountPathPrimitiveUpdatePolicyFactory

class IAgStkGraphicsModelPrimitiveFactory(object):
    """The model primitive loads and renders <a href='https://www.khronos.org/collada/'>COLLADA</a> (DAE) and AGI <a href='https://support.agi.com/3d-models'>MDL</a> (MDL) models."""
    _num_methods = 3
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{93ea79ef-8da7-4992-b8fa-81d372d4258a}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "Initialize" : 1,
                             "InitializeWithStringUri" : 2,
                             "InitializeWithStringUriAndUpAxis" : 3, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsModelPrimitiveFactory._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsModelPrimitiveFactory from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsModelPrimitiveFactory.__dict__ and type(IAgStkGraphicsModelPrimitiveFactory.__dict__[attrname]) == property:
            return IAgStkGraphicsModelPrimitiveFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsModelPrimitiveFactory.")
    
    _Initialize_metadata = { "name" : "Initialize",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    def Initialize(self) -> "IAgStkGraphicsModelPrimitive":
        """Initializes a default model primitive."""
        return self._intf.invoke(IAgStkGraphicsModelPrimitiveFactory._metadata, IAgStkGraphicsModelPrimitiveFactory._Initialize_metadata, out_arg())

    _InitializeWithStringUri_metadata = { "name" : "InitializeWithStringUri",
            "arg_types" : (agcom.BSTR, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.AgInterface_out_arg,) }
    def InitializeWithStringUri(self, uri:str) -> "IAgStkGraphicsModelPrimitive":
        """For convenience. Initializes a model primitive with the specified file path."""
        return self._intf.invoke(IAgStkGraphicsModelPrimitiveFactory._metadata, IAgStkGraphicsModelPrimitiveFactory._InitializeWithStringUri_metadata, uri, out_arg())

    _InitializeWithStringUriAndUpAxis_metadata = { "name" : "InitializeWithStringUriAndUpAxis",
            "arg_types" : (agcom.BSTR, agcom.LONG, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.AgEnum_arg(AgEStkGraphicsModelUpAxis), agmarshall.AgInterface_out_arg,) }
    def InitializeWithStringUriAndUpAxis(self, uri:str, upAxis:"AgEStkGraphicsModelUpAxis") -> "IAgStkGraphicsModelPrimitive":
        """For convenience. Initializes a model primitive with the specified file path and up axis."""
        return self._intf.invoke(IAgStkGraphicsModelPrimitiveFactory._metadata, IAgStkGraphicsModelPrimitiveFactory._InitializeWithStringUriAndUpAxis_metadata, uri, upAxis, out_arg())


agcls.AgClassCatalog.add_catalog_entry("{93ea79ef-8da7-4992-b8fa-81d372d4258a}", IAgStkGraphicsModelPrimitiveFactory)
agcls.AgTypeNameMap["IAgStkGraphicsModelPrimitiveFactory"] = IAgStkGraphicsModelPrimitiveFactory

class IAgStkGraphicsPathPrimitiveFactory(object):
    """Renders a line to the 3D scene. Similar to the polyline primitive; however, the PathPrimitive was designed for the efficient addition/removal of points to/from the front or back of the line."""
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{2b9b98c4-17d2-4b72-a6cf-c9bc87eb11e8}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "Initialize" : 1,
                             "InitializeWithCapacity" : 2,
                             "get_MinimumWidthSupported" : 3,
                             "get_MaximumWidthSupported" : 4, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsPathPrimitiveFactory._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsPathPrimitiveFactory from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsPathPrimitiveFactory.__dict__ and type(IAgStkGraphicsPathPrimitiveFactory.__dict__[attrname]) == property:
            return IAgStkGraphicsPathPrimitiveFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsPathPrimitiveFactory.")
    
    _Initialize_metadata = { "name" : "Initialize",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    def Initialize(self) -> "IAgStkGraphicsPathPrimitive":
        """Initializes a default path primitive. This is equivalent to constructing a path primitive with an initial capacity of 16."""
        return self._intf.invoke(IAgStkGraphicsPathPrimitiveFactory._metadata, IAgStkGraphicsPathPrimitiveFactory._Initialize_metadata, out_arg())

    _InitializeWithCapacity_metadata = { "name" : "InitializeWithCapacity",
            "arg_types" : (agcom.INT, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.INT_arg, agmarshall.AgInterface_out_arg,) }
    def InitializeWithCapacity(self, capacity:int) -> "IAgStkGraphicsPathPrimitive":
        """Initializes a path primitive with the specified capacity."""
        return self._intf.invoke(IAgStkGraphicsPathPrimitiveFactory._metadata, IAgStkGraphicsPathPrimitiveFactory._InitializeWithCapacity_metadata, capacity, out_arg())

    _get_MinimumWidthSupported_metadata = { "name" : "MinimumWidthSupported",
            "arg_types" : (POINTER(agcom.FLOAT),),
            "marshallers" : (agmarshall.FLOAT_arg,) }
    @property
    def MinimumWidthSupported(self) -> float:
        """Gets the minimum width, in pixels, supported by the video card."""
        return self._intf.get_property(IAgStkGraphicsPathPrimitiveFactory._metadata, IAgStkGraphicsPathPrimitiveFactory._get_MinimumWidthSupported_metadata)

    _get_MaximumWidthSupported_metadata = { "name" : "MaximumWidthSupported",
            "arg_types" : (POINTER(agcom.FLOAT),),
            "marshallers" : (agmarshall.FLOAT_arg,) }
    @property
    def MaximumWidthSupported(self) -> float:
        """Gets the maximum width, in pixels, supported by the video card."""
        return self._intf.get_property(IAgStkGraphicsPathPrimitiveFactory._metadata, IAgStkGraphicsPathPrimitiveFactory._get_MaximumWidthSupported_metadata)


agcls.AgClassCatalog.add_catalog_entry("{2b9b98c4-17d2-4b72-a6cf-c9bc87eb11e8}", IAgStkGraphicsPathPrimitiveFactory)
agcls.AgTypeNameMap["IAgStkGraphicsPathPrimitiveFactory"] = IAgStkGraphicsPathPrimitiveFactory

class IAgStkGraphicsPixelSizeDisplayConditionFactory(object):
    """Defines an inclusive interval, in pixels, that determines when an object, such as a primitive, is rendered based on the number of pixels the object's bounding sphere (or in the case of screen overlays, bounding rectangle) covers on the screen..."""
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{2c7bb493-89f9-40f9-b562-feed771d08b7}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "Initialize" : 1,
                             "InitializeWithPixelSizes" : 2, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsPixelSizeDisplayConditionFactory._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsPixelSizeDisplayConditionFactory from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsPixelSizeDisplayConditionFactory.__dict__ and type(IAgStkGraphicsPixelSizeDisplayConditionFactory.__dict__[attrname]) == property:
            return IAgStkGraphicsPixelSizeDisplayConditionFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsPixelSizeDisplayConditionFactory.")
    
    _Initialize_metadata = { "name" : "Initialize",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    def Initialize(self) -> "IAgStkGraphicsPixelSizeDisplayCondition":
        """Initializes a default pixel size display condition. minimum pixel size is set to 0 and maximum pixel size is set to Int32.MaxValue. With this interval, an object is always rendered regardless of how many pixels its bounding sphere or rectangle covers."""
        return self._intf.invoke(IAgStkGraphicsPixelSizeDisplayConditionFactory._metadata, IAgStkGraphicsPixelSizeDisplayConditionFactory._Initialize_metadata, out_arg())

    _InitializeWithPixelSizes_metadata = { "name" : "InitializeWithPixelSizes",
            "arg_types" : (agcom.INT, agcom.INT, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.INT_arg, agmarshall.INT_arg, agmarshall.AgInterface_out_arg,) }
    def InitializeWithPixelSizes(self, minimumPixelSize:int, maximumPixelSize:int) -> "IAgStkGraphicsPixelSizeDisplayCondition":
        """Initializes a pixel size display condition with the inclusive interval [minimumPixelSize, maximumPixelSize]..."""
        return self._intf.invoke(IAgStkGraphicsPixelSizeDisplayConditionFactory._metadata, IAgStkGraphicsPixelSizeDisplayConditionFactory._InitializeWithPixelSizes_metadata, minimumPixelSize, maximumPixelSize, out_arg())


agcls.AgClassCatalog.add_catalog_entry("{2c7bb493-89f9-40f9-b562-feed771d08b7}", IAgStkGraphicsPixelSizeDisplayConditionFactory)
agcls.AgTypeNameMap["IAgStkGraphicsPixelSizeDisplayConditionFactory"] = IAgStkGraphicsPixelSizeDisplayConditionFactory

class IAgStkGraphicsPointBatchPrimitiveFactory(object):
    """ Renders one or more points in the 3D scene. Each point in the batch has a unique position and an optional color. All points in the batch share the same pixel size. For best performance, avoid creating lots of batches with only a few points each..."""
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{5dd03481-3541-486c-973f-f079eb35973c}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "Initialize" : 1,
                             "InitializeWithSetHint" : 2,
                             "get_MinimumPixelSizeSupported" : 3,
                             "get_MaximumPixelSizeSupported" : 4, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsPointBatchPrimitiveFactory._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsPointBatchPrimitiveFactory from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsPointBatchPrimitiveFactory.__dict__ and type(IAgStkGraphicsPointBatchPrimitiveFactory.__dict__[attrname]) == property:
            return IAgStkGraphicsPointBatchPrimitiveFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsPointBatchPrimitiveFactory.")
    
    _Initialize_metadata = { "name" : "Initialize",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    def Initialize(self) -> "IAgStkGraphicsPointBatchPrimitive":
        """Initializes a default point batch primitive. This is equivalent to constructing a point batch with a set hint of Frequent."""
        return self._intf.invoke(IAgStkGraphicsPointBatchPrimitiveFactory._metadata, IAgStkGraphicsPointBatchPrimitiveFactory._Initialize_metadata, out_arg())

    _InitializeWithSetHint_metadata = { "name" : "InitializeWithSetHint",
            "arg_types" : (agcom.LONG, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEStkGraphicsSetHint), agmarshall.AgInterface_out_arg,) }
    def InitializeWithSetHint(self, setHint:"AgEStkGraphicsSetHint") -> "IAgStkGraphicsPointBatchPrimitive":
        """Initializes a new instance of a point batch primitive with the specified set hint."""
        return self._intf.invoke(IAgStkGraphicsPointBatchPrimitiveFactory._metadata, IAgStkGraphicsPointBatchPrimitiveFactory._InitializeWithSetHint_metadata, setHint, out_arg())

    _get_MinimumPixelSizeSupported_metadata = { "name" : "MinimumPixelSizeSupported",
            "arg_types" : (POINTER(agcom.FLOAT),),
            "marshallers" : (agmarshall.FLOAT_arg,) }
    @property
    def MinimumPixelSizeSupported(self) -> float:
        """Gets the minimum pixel size supported by the video card."""
        return self._intf.get_property(IAgStkGraphicsPointBatchPrimitiveFactory._metadata, IAgStkGraphicsPointBatchPrimitiveFactory._get_MinimumPixelSizeSupported_metadata)

    _get_MaximumPixelSizeSupported_metadata = { "name" : "MaximumPixelSizeSupported",
            "arg_types" : (POINTER(agcom.FLOAT),),
            "marshallers" : (agmarshall.FLOAT_arg,) }
    @property
    def MaximumPixelSizeSupported(self) -> float:
        """Gets the maximum pixel size supported by the video card."""
        return self._intf.get_property(IAgStkGraphicsPointBatchPrimitiveFactory._metadata, IAgStkGraphicsPointBatchPrimitiveFactory._get_MaximumPixelSizeSupported_metadata)


agcls.AgClassCatalog.add_catalog_entry("{5dd03481-3541-486c-973f-f079eb35973c}", IAgStkGraphicsPointBatchPrimitiveFactory)
agcls.AgTypeNameMap["IAgStkGraphicsPointBatchPrimitiveFactory"] = IAgStkGraphicsPointBatchPrimitiveFactory

class IAgStkGraphicsPointBatchPrimitiveOptionalParametersFactory(object):
    """Optional per-point parameters for point batch primitive that overrides the point batch primitive's global parameters..."""
    _num_methods = 1
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{b108564a-969c-43cb-97ce-e96dc0c7001c}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "Initialize" : 1, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsPointBatchPrimitiveOptionalParametersFactory._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsPointBatchPrimitiveOptionalParametersFactory from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsPointBatchPrimitiveOptionalParametersFactory.__dict__ and type(IAgStkGraphicsPointBatchPrimitiveOptionalParametersFactory.__dict__[attrname]) == property:
            return IAgStkGraphicsPointBatchPrimitiveOptionalParametersFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsPointBatchPrimitiveOptionalParametersFactory.")
    
    _Initialize_metadata = { "name" : "Initialize",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    def Initialize(self) -> "IAgStkGraphicsPointBatchPrimitiveOptionalParameters":
        """Initializes a default point batch primitive optional parameters object."""
        return self._intf.invoke(IAgStkGraphicsPointBatchPrimitiveOptionalParametersFactory._metadata, IAgStkGraphicsPointBatchPrimitiveOptionalParametersFactory._Initialize_metadata, out_arg())


agcls.AgClassCatalog.add_catalog_entry("{b108564a-969c-43cb-97ce-e96dc0c7001c}", IAgStkGraphicsPointBatchPrimitiveOptionalParametersFactory)
agcls.AgTypeNameMap["IAgStkGraphicsPointBatchPrimitiveOptionalParametersFactory"] = IAgStkGraphicsPointBatchPrimitiveOptionalParametersFactory

class IAgStkGraphicsPolylinePrimitiveFactory(object):
    """Renders a polyline in the 3D scene. Each line segment may have a different color. A polyline can be constructed with a position interpolator to render great arcs or rhumb lines."""
    _num_methods = 8
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{16a27023-42d5-4994-9ace-165e027e72d8}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "Initialize" : 1,
                             "InitializeWithInterpolatorAndSetHint" : 2,
                             "InitializeWithTypeAndHint" : 3,
                             "InitializeWithInterpolator" : 4,
                             "InitializeWithHint" : 5,
                             "InitializeWithType" : 6,
                             "get_MinimumWidthSupported" : 7,
                             "get_MaximumWidthSupported" : 8, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsPolylinePrimitiveFactory._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsPolylinePrimitiveFactory from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsPolylinePrimitiveFactory.__dict__ and type(IAgStkGraphicsPolylinePrimitiveFactory.__dict__[attrname]) == property:
            return IAgStkGraphicsPolylinePrimitiveFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsPolylinePrimitiveFactory.")
    
    _Initialize_metadata = { "name" : "Initialize",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    def Initialize(self) -> "IAgStkGraphicsPolylinePrimitive":
        """Initializes a default polyline primitive. This is equivalent to constructing a polyline with a set hint of Frequent and a polyline type of LineStrip."""
        return self._intf.invoke(IAgStkGraphicsPolylinePrimitiveFactory._metadata, IAgStkGraphicsPolylinePrimitiveFactory._Initialize_metadata, out_arg())

    _InitializeWithInterpolatorAndSetHint_metadata = { "name" : "InitializeWithInterpolatorAndSetHint",
            "arg_types" : (agcom.PVOID, agcom.LONG, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_in_arg("IAgStkGraphicsPositionInterpolator"), agmarshall.AgEnum_arg(AgEStkGraphicsSetHint), agmarshall.AgInterface_out_arg,) }
    def InitializeWithInterpolatorAndSetHint(self, interpolator:"IAgStkGraphicsPositionInterpolator", setHint:"AgEStkGraphicsSetHint") -> "IAgStkGraphicsPolylinePrimitive":
        """Initializes a polyline primitive with the specified interpolator and setHint."""
        return self._intf.invoke(IAgStkGraphicsPolylinePrimitiveFactory._metadata, IAgStkGraphicsPolylinePrimitiveFactory._InitializeWithInterpolatorAndSetHint_metadata, interpolator, setHint, out_arg())

    _InitializeWithTypeAndHint_metadata = { "name" : "InitializeWithTypeAndHint",
            "arg_types" : (agcom.LONG, agcom.LONG, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEStkGraphicsPolylineType), agmarshall.AgEnum_arg(AgEStkGraphicsSetHint), agmarshall.AgInterface_out_arg,) }
    def InitializeWithTypeAndHint(self, polylineType:"AgEStkGraphicsPolylineType", setHint:"AgEStkGraphicsSetHint") -> "IAgStkGraphicsPolylinePrimitive":
        """Initializes a new instance of a polyline primitive with the specified polylineType and setHint."""
        return self._intf.invoke(IAgStkGraphicsPolylinePrimitiveFactory._metadata, IAgStkGraphicsPolylinePrimitiveFactory._InitializeWithTypeAndHint_metadata, polylineType, setHint, out_arg())

    _InitializeWithInterpolator_metadata = { "name" : "InitializeWithInterpolator",
            "arg_types" : (agcom.PVOID, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_in_arg("IAgStkGraphicsPositionInterpolator"), agmarshall.AgInterface_out_arg,) }
    def InitializeWithInterpolator(self, interpolator:"IAgStkGraphicsPositionInterpolator") -> "IAgStkGraphicsPolylinePrimitive":
        """Initializes a polyline primitive with the specified interpolator. This is equivalent to constructing a polyline with the specified interpolator and a set hint of Frequent."""
        return self._intf.invoke(IAgStkGraphicsPolylinePrimitiveFactory._metadata, IAgStkGraphicsPolylinePrimitiveFactory._InitializeWithInterpolator_metadata, interpolator, out_arg())

    _InitializeWithHint_metadata = { "name" : "InitializeWithHint",
            "arg_types" : (agcom.LONG, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEStkGraphicsSetHint), agmarshall.AgInterface_out_arg,) }
    def InitializeWithHint(self, setHint:"AgEStkGraphicsSetHint") -> "IAgStkGraphicsPolylinePrimitive":
        """Initializes a new instance of a polyline primitive with the specified set hint. This is equivalent to constructing a polyline with a polyline type of LineStrip and the specified set hint."""
        return self._intf.invoke(IAgStkGraphicsPolylinePrimitiveFactory._metadata, IAgStkGraphicsPolylinePrimitiveFactory._InitializeWithHint_metadata, setHint, out_arg())

    _InitializeWithType_metadata = { "name" : "InitializeWithType",
            "arg_types" : (agcom.LONG, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEStkGraphicsPolylineType), agmarshall.AgInterface_out_arg,) }
    def InitializeWithType(self, polylineType:"AgEStkGraphicsPolylineType") -> "IAgStkGraphicsPolylinePrimitive":
        """Initializes a polyline primitive with the specified polylineType. This is equivalent to constructing a polyline with the specified polylineType and a set hint of Frequent."""
        return self._intf.invoke(IAgStkGraphicsPolylinePrimitiveFactory._metadata, IAgStkGraphicsPolylinePrimitiveFactory._InitializeWithType_metadata, polylineType, out_arg())

    _get_MinimumWidthSupported_metadata = { "name" : "MinimumWidthSupported",
            "arg_types" : (POINTER(agcom.FLOAT),),
            "marshallers" : (agmarshall.FLOAT_arg,) }
    @property
    def MinimumWidthSupported(self) -> float:
        """Gets the minimum width, in pixels, supported by the video card."""
        return self._intf.get_property(IAgStkGraphicsPolylinePrimitiveFactory._metadata, IAgStkGraphicsPolylinePrimitiveFactory._get_MinimumWidthSupported_metadata)

    _get_MaximumWidthSupported_metadata = { "name" : "MaximumWidthSupported",
            "arg_types" : (POINTER(agcom.FLOAT),),
            "marshallers" : (agmarshall.FLOAT_arg,) }
    @property
    def MaximumWidthSupported(self) -> float:
        """Gets the maximum width, in pixels, supported by the video card."""
        return self._intf.get_property(IAgStkGraphicsPolylinePrimitiveFactory._metadata, IAgStkGraphicsPolylinePrimitiveFactory._get_MaximumWidthSupported_metadata)


agcls.AgClassCatalog.add_catalog_entry("{16a27023-42d5-4994-9ace-165e027e72d8}", IAgStkGraphicsPolylinePrimitiveFactory)
agcls.AgTypeNameMap["IAgStkGraphicsPolylinePrimitiveFactory"] = IAgStkGraphicsPolylinePrimitiveFactory

class IAgStkGraphicsPolylinePrimitiveOptionalParametersFactory(object):
    """Optional per-point or per-segment parameters for polyline primitive that overrides the polyline primitive's global parameters..."""
    _num_methods = 1
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{7f416edb-d9ac-41bd-8216-893ca9ccc16b}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "Initialize" : 1, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsPolylinePrimitiveOptionalParametersFactory._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsPolylinePrimitiveOptionalParametersFactory from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsPolylinePrimitiveOptionalParametersFactory.__dict__ and type(IAgStkGraphicsPolylinePrimitiveOptionalParametersFactory.__dict__[attrname]) == property:
            return IAgStkGraphicsPolylinePrimitiveOptionalParametersFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsPolylinePrimitiveOptionalParametersFactory.")
    
    _Initialize_metadata = { "name" : "Initialize",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    def Initialize(self) -> "IAgStkGraphicsPolylinePrimitiveOptionalParameters":
        """Initializes default polyline primitive optional parameters. All per-segment parameters are initially empty."""
        return self._intf.invoke(IAgStkGraphicsPolylinePrimitiveOptionalParametersFactory._metadata, IAgStkGraphicsPolylinePrimitiveOptionalParametersFactory._Initialize_metadata, out_arg())


agcls.AgClassCatalog.add_catalog_entry("{7f416edb-d9ac-41bd-8216-893ca9ccc16b}", IAgStkGraphicsPolylinePrimitiveOptionalParametersFactory)
agcls.AgTypeNameMap["IAgStkGraphicsPolylinePrimitiveOptionalParametersFactory"] = IAgStkGraphicsPolylinePrimitiveOptionalParametersFactory

class IAgStkGraphicsRasterImageGlobeOverlayFactory(object):
    """A globe image overlay for handling rasters."""
    _num_methods = 3
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{00a01c47-a9d0-4020-a469-fd874b219713}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "InitializeWithString" : 1,
                             "InitializeWithColor" : 2,
                             "InitializeWithRaster" : 3, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsRasterImageGlobeOverlayFactory._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsRasterImageGlobeOverlayFactory from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsRasterImageGlobeOverlayFactory.__dict__ and type(IAgStkGraphicsRasterImageGlobeOverlayFactory.__dict__[attrname]) == property:
            return IAgStkGraphicsRasterImageGlobeOverlayFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsRasterImageGlobeOverlayFactory.")
    
    _InitializeWithString_metadata = { "name" : "InitializeWithString",
            "arg_types" : (agcom.BSTR, POINTER(agcom.LPSAFEARRAY), POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.LPSAFEARRAY_arg, agmarshall.AgInterface_out_arg,) }
    def InitializeWithString(self, uri:str, extent:list) -> "IAgStkGraphicsRasterImageGlobeOverlay":
        """Initializes a raster image globe overlay with the provided values."""
        return self._intf.invoke(IAgStkGraphicsRasterImageGlobeOverlayFactory._metadata, IAgStkGraphicsRasterImageGlobeOverlayFactory._InitializeWithString_metadata, uri, extent, out_arg())

    _InitializeWithColor_metadata = { "name" : "InitializeWithColor",
            "arg_types" : (agcom.OLE_COLOR, POINTER(agcom.LPSAFEARRAY), POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.OLE_COLOR_arg, agmarshall.LPSAFEARRAY_arg, agmarshall.AgInterface_out_arg,) }
    def InitializeWithColor(self, color:agcolor.Color, extent:list) -> "IAgStkGraphicsRasterImageGlobeOverlay":
        """Initializes a raster image globe overlay with the provided values."""
        return self._intf.invoke(IAgStkGraphicsRasterImageGlobeOverlayFactory._metadata, IAgStkGraphicsRasterImageGlobeOverlayFactory._InitializeWithColor_metadata, color, extent, out_arg())

    _InitializeWithRaster_metadata = { "name" : "InitializeWithRaster",
            "arg_types" : (agcom.PVOID, POINTER(agcom.LPSAFEARRAY), POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_in_arg("IAgStkGraphicsRaster"), agmarshall.LPSAFEARRAY_arg, agmarshall.AgInterface_out_arg,) }
    def InitializeWithRaster(self, raster:"IAgStkGraphicsRaster", extent:list) -> "IAgStkGraphicsRasterImageGlobeOverlay":
        """Initializes a raster image globe overlay with the provided values."""
        return self._intf.invoke(IAgStkGraphicsRasterImageGlobeOverlayFactory._metadata, IAgStkGraphicsRasterImageGlobeOverlayFactory._InitializeWithRaster_metadata, raster, extent, out_arg())


agcls.AgClassCatalog.add_catalog_entry("{00a01c47-a9d0-4020-a469-fd874b219713}", IAgStkGraphicsRasterImageGlobeOverlayFactory)
agcls.AgTypeNameMap["IAgStkGraphicsRasterImageGlobeOverlayFactory"] = IAgStkGraphicsRasterImageGlobeOverlayFactory

class IAgStkGraphicsRhumbLineInterpolatorFactory(object):
    """The rhumb line interpolator computes interpolated positions along a rhumb line. Rhumb lines are lines of constant bearing. They appear as straight lines on a Mercator 2D map projection and are well suited to navigation."""
    _num_methods = 3
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{1cf08578-668b-431a-9df2-8bb329e3fdf5}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "Initialize" : 1,
                             "InitializeWithCentralBody" : 2,
                             "InitializeWithCentralBodyAndGranularity" : 3, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsRhumbLineInterpolatorFactory._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsRhumbLineInterpolatorFactory from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsRhumbLineInterpolatorFactory.__dict__ and type(IAgStkGraphicsRhumbLineInterpolatorFactory.__dict__[attrname]) == property:
            return IAgStkGraphicsRhumbLineInterpolatorFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsRhumbLineInterpolatorFactory.")
    
    _Initialize_metadata = { "name" : "Initialize",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    def Initialize(self) -> "IAgStkGraphicsRhumbLineInterpolator":
        """Initializes a default rhumb line interpolator. This is equivalent to constructing a rhumb line interpolator with a central body equal to an instance of earth central body and a granularity of 1 degree."""
        return self._intf.invoke(IAgStkGraphicsRhumbLineInterpolatorFactory._metadata, IAgStkGraphicsRhumbLineInterpolatorFactory._Initialize_metadata, out_arg())

    _InitializeWithCentralBody_metadata = { "name" : "InitializeWithCentralBody",
            "arg_types" : (agcom.BSTR, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.AgInterface_out_arg,) }
    def InitializeWithCentralBody(self, centralBody:str) -> "IAgStkGraphicsRhumbLineInterpolator":
        """Initializes a rhumb line interpolator with the specified centralBody and a granularity of 1 degree."""
        return self._intf.invoke(IAgStkGraphicsRhumbLineInterpolatorFactory._metadata, IAgStkGraphicsRhumbLineInterpolatorFactory._InitializeWithCentralBody_metadata, centralBody, out_arg())

    _InitializeWithCentralBodyAndGranularity_metadata = { "name" : "InitializeWithCentralBodyAndGranularity",
            "arg_types" : (agcom.BSTR, agcom.DOUBLE, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.DOUBLE_arg, agmarshall.AgInterface_out_arg,) }
    def InitializeWithCentralBodyAndGranularity(self, centralBody:str, granularity:float) -> "IAgStkGraphicsRhumbLineInterpolator":
        """Initializes a rhumb line interpolator with the specified centralBody and granularity."""
        return self._intf.invoke(IAgStkGraphicsRhumbLineInterpolatorFactory._metadata, IAgStkGraphicsRhumbLineInterpolatorFactory._InitializeWithCentralBodyAndGranularity_metadata, centralBody, granularity, out_arg())


agcls.AgClassCatalog.add_catalog_entry("{1cf08578-668b-431a-9df2-8bb329e3fdf5}", IAgStkGraphicsRhumbLineInterpolatorFactory)
agcls.AgTypeNameMap["IAgStkGraphicsRhumbLineInterpolatorFactory"] = IAgStkGraphicsRhumbLineInterpolatorFactory

class IAgStkGraphicsSceneDisplayConditionFactory(object):
    """A display condition used to control what scene or scenes an object, such as a primitive, is rendered in. This is used to show an object in some scenes and hide it in others."""
    _num_methods = 1
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{930929f7-1d93-4575-a18f-b376e9a16cf7}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "Initialize" : 1, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsSceneDisplayConditionFactory._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsSceneDisplayConditionFactory from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsSceneDisplayConditionFactory.__dict__ and type(IAgStkGraphicsSceneDisplayConditionFactory.__dict__[attrname]) == property:
            return IAgStkGraphicsSceneDisplayConditionFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsSceneDisplayConditionFactory.")
    
    _Initialize_metadata = { "name" : "Initialize",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    def Initialize(self) -> "IAgStkGraphicsSceneDisplayCondition":
        """Initializes a default scene display condition. When this display condition is assigned to an object, such as a primitive, the object can be restricted to only render in certain scenes. Call set display in scene or display only in scene to limit the scenes."""
        return self._intf.invoke(IAgStkGraphicsSceneDisplayConditionFactory._metadata, IAgStkGraphicsSceneDisplayConditionFactory._Initialize_metadata, out_arg())


agcls.AgClassCatalog.add_catalog_entry("{930929f7-1d93-4575-a18f-b376e9a16cf7}", IAgStkGraphicsSceneDisplayConditionFactory)
agcls.AgTypeNameMap["IAgStkGraphicsSceneDisplayConditionFactory"] = IAgStkGraphicsSceneDisplayConditionFactory

class IAgStkGraphicsSceneManagerInitializer(object):
    """The static scene manager class provides global properties and functionality that apply to all scenes and thus affect the rendering of every globe control..."""
    _num_methods = 7
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{dd3adf22-21f0-4220-8f3f-bda974157d48}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_Primitives" : 1,
                             "get_ScreenOverlays" : 2,
                             "get_Textures" : 3,
                             "get_GlobeOverlaySettings" : 4,
                             "get_Scenes" : 5,
                             "Render" : 6,
                             "get_FrameRate" : 7, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsSceneManagerInitializer._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsSceneManagerInitializer from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsSceneManagerInitializer.__dict__ and type(IAgStkGraphicsSceneManagerInitializer.__dict__[attrname]) == property:
            return IAgStkGraphicsSceneManagerInitializer.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsSceneManagerInitializer.")
    
    _get_Primitives_metadata = { "name" : "Primitives",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def Primitives(self) -> "IAgStkGraphicsPrimitiveManager":
        """Gets the primitive manager, which is used to add primitives to your scenes."""
        return self._intf.get_property(IAgStkGraphicsSceneManagerInitializer._metadata, IAgStkGraphicsSceneManagerInitializer._get_Primitives_metadata)

    _get_ScreenOverlays_metadata = { "name" : "ScreenOverlays",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def ScreenOverlays(self) -> "IAgStkGraphicsScreenOverlayManager":
        """Gets the screen overlay manager, which is used to add screen overlays to your scenes."""
        return self._intf.get_property(IAgStkGraphicsSceneManagerInitializer._metadata, IAgStkGraphicsSceneManagerInitializer._get_ScreenOverlays_metadata)

    _get_Textures_metadata = { "name" : "Textures",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def Textures(self) -> "IAgStkGraphicsTexture2DFactory":
        """Gets the texture 2d factory, which can be used to create textures from various sources."""
        return self._intf.get_property(IAgStkGraphicsSceneManagerInitializer._metadata, IAgStkGraphicsSceneManagerInitializer._get_Textures_metadata)

    _get_GlobeOverlaySettings_metadata = { "name" : "GlobeOverlaySettings",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def GlobeOverlaySettings(self) -> "IAgStkGraphicsGlobeOverlaySettings":
        """Gets the globe overlay settings, which are used to set global settings for all globe overlays."""
        return self._intf.get_property(IAgStkGraphicsSceneManagerInitializer._metadata, IAgStkGraphicsSceneManagerInitializer._get_GlobeOverlaySettings_metadata)

    _get_Scenes_metadata = { "name" : "Scenes",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def Scenes(self) -> "IAgStkGraphicsSceneCollection":
        """Gets a read-only collection of scenes that are associated with the scene manager."""
        return self._intf.get_property(IAgStkGraphicsSceneManagerInitializer._metadata, IAgStkGraphicsSceneManagerInitializer._get_Scenes_metadata)

    _Render_metadata = { "name" : "Render",
            "arg_types" : (),
            "marshallers" : () }
    def Render(self) -> None:
        """Renders all scenes within an application. To render a specific scene, use the Render method."""
        return self._intf.invoke(IAgStkGraphicsSceneManagerInitializer._metadata, IAgStkGraphicsSceneManagerInitializer._Render_metadata, )

    _get_FrameRate_metadata = { "name" : "FrameRate",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def FrameRate(self) -> "IAgStkGraphicsFrameRate":
        """Gets the frame rate class, which can be used to keep track of how fast scenes are being <see ref='Render'>rendered</see>."""
        return self._intf.get_property(IAgStkGraphicsSceneManagerInitializer._metadata, IAgStkGraphicsSceneManagerInitializer._get_FrameRate_metadata)


agcls.AgClassCatalog.add_catalog_entry("{dd3adf22-21f0-4220-8f3f-bda974157d48}", IAgStkGraphicsSceneManagerInitializer)
agcls.AgTypeNameMap["IAgStkGraphicsSceneManagerInitializer"] = IAgStkGraphicsSceneManagerInitializer

class IAgStkGraphicsScreenOverlayFactory(object):
    """A visible element drawn in screen space. Overlays are useful for floating logos, heads up displays, and integrating user interfaces into the 3D window."""
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{45754d2a-e83f-4c32-9792-c90d9620a83a}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "Initialize" : 1,
                             "InitializeWithPosAndSize" : 2, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsScreenOverlayFactory._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsScreenOverlayFactory from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsScreenOverlayFactory.__dict__ and type(IAgStkGraphicsScreenOverlayFactory.__dict__[attrname]) == property:
            return IAgStkGraphicsScreenOverlayFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsScreenOverlayFactory.")
    
    _Initialize_metadata = { "name" : "Initialize",
            "arg_types" : (agcom.DOUBLE, agcom.DOUBLE, agcom.DOUBLE, agcom.DOUBLE, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg, agmarshall.AgInterface_out_arg,) }
    def Initialize(self, xPixels:float, yPixels:float, widthPixels:float, heightPixels:float) -> "IAgStkGraphicsScreenOverlay":
        """Initializes the overlay with the specified x position, y position, width, and height, all specified in pixels."""
        return self._intf.invoke(IAgStkGraphicsScreenOverlayFactory._metadata, IAgStkGraphicsScreenOverlayFactory._Initialize_metadata, xPixels, yPixels, widthPixels, heightPixels, out_arg())

    _InitializeWithPosAndSize_metadata = { "name" : "InitializeWithPosAndSize",
            "arg_types" : (POINTER(agcom.LPSAFEARRAY), POINTER(agcom.LPSAFEARRAY), POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg, agmarshall.LPSAFEARRAY_arg, agmarshall.AgInterface_out_arg,) }
    def InitializeWithPosAndSize(self, position:list, size:list) -> "IAgStkGraphicsScreenOverlay":
        """Initializes the overlay with the specified position and size."""
        return self._intf.invoke(IAgStkGraphicsScreenOverlayFactory._metadata, IAgStkGraphicsScreenOverlayFactory._InitializeWithPosAndSize_metadata, position, size, out_arg())


agcls.AgClassCatalog.add_catalog_entry("{45754d2a-e83f-4c32-9792-c90d9620a83a}", IAgStkGraphicsScreenOverlayFactory)
agcls.AgTypeNameMap["IAgStkGraphicsScreenOverlayFactory"] = IAgStkGraphicsScreenOverlayFactory

class IAgStkGraphicsSolidPrimitiveFactory(object):
    """Renders filled solid objects and their outlines. Example solids include boxes and ellipsoids. Various effects are supported, such as displaying the solid's silhouette, and hiding the outline of the backside of the solid..."""
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{b76858bc-4b6c-41c0-928a-2ae8fe8d6e03}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "Initialize" : 1,
                             "InitializeWithHint" : 2,
                             "get_MinimumSilhouetteWidthSupported" : 3,
                             "get_MaximumSilhouetteWidthSupported" : 4, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsSolidPrimitiveFactory._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsSolidPrimitiveFactory from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsSolidPrimitiveFactory.__dict__ and type(IAgStkGraphicsSolidPrimitiveFactory.__dict__[attrname]) == property:
            return IAgStkGraphicsSolidPrimitiveFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsSolidPrimitiveFactory.")
    
    _Initialize_metadata = { "name" : "Initialize",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    def Initialize(self) -> "IAgStkGraphicsSolidPrimitive":
        """Initializes a default solid primitive. This is equivalent to constructing a solid primitive with a set hint of Frequent."""
        return self._intf.invoke(IAgStkGraphicsSolidPrimitiveFactory._metadata, IAgStkGraphicsSolidPrimitiveFactory._Initialize_metadata, out_arg())

    _InitializeWithHint_metadata = { "name" : "InitializeWithHint",
            "arg_types" : (agcom.LONG, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEStkGraphicsSetHint), agmarshall.AgInterface_out_arg,) }
    def InitializeWithHint(self, setHint:"AgEStkGraphicsSetHint") -> "IAgStkGraphicsSolidPrimitive":
        """Initializes a solid primitive with the specified setHint."""
        return self._intf.invoke(IAgStkGraphicsSolidPrimitiveFactory._metadata, IAgStkGraphicsSolidPrimitiveFactory._InitializeWithHint_metadata, setHint, out_arg())

    _get_MinimumSilhouetteWidthSupported_metadata = { "name" : "MinimumSilhouetteWidthSupported",
            "arg_types" : (POINTER(agcom.FLOAT),),
            "marshallers" : (agmarshall.FLOAT_arg,) }
    @property
    def MinimumSilhouetteWidthSupported(self) -> float:
        """Gets the minimum silhouette width, in pixels, supported by the video card."""
        return self._intf.get_property(IAgStkGraphicsSolidPrimitiveFactory._metadata, IAgStkGraphicsSolidPrimitiveFactory._get_MinimumSilhouetteWidthSupported_metadata)

    _get_MaximumSilhouetteWidthSupported_metadata = { "name" : "MaximumSilhouetteWidthSupported",
            "arg_types" : (POINTER(agcom.FLOAT),),
            "marshallers" : (agmarshall.FLOAT_arg,) }
    @property
    def MaximumSilhouetteWidthSupported(self) -> float:
        """Gets the maximum silhouette width, in pixels, supported by the video card."""
        return self._intf.get_property(IAgStkGraphicsSolidPrimitiveFactory._metadata, IAgStkGraphicsSolidPrimitiveFactory._get_MaximumSilhouetteWidthSupported_metadata)


agcls.AgClassCatalog.add_catalog_entry("{b76858bc-4b6c-41c0-928a-2ae8fe8d6e03}", IAgStkGraphicsSolidPrimitiveFactory)
agcls.AgTypeNameMap["IAgStkGraphicsSolidPrimitiveFactory"] = IAgStkGraphicsSolidPrimitiveFactory

class IAgStkGraphicsSurfaceMeshPrimitiveFactory(object):
    """A triangle mesh primitive for meshes on the surface that need to conform to terrain."""
    _num_methods = 5
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{08c3d10b-0cf0-41e9-93d0-e73b9d25e329}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "Initialize" : 1,
                             "InitializeWithSetHint" : 2,
                             "InitializeWithSetHintAndRenderingMethod" : 3,
                             "Supported" : 4,
                             "SupportedWithDefaultRenderingMethod" : 5, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsSurfaceMeshPrimitiveFactory._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsSurfaceMeshPrimitiveFactory from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsSurfaceMeshPrimitiveFactory.__dict__ and type(IAgStkGraphicsSurfaceMeshPrimitiveFactory.__dict__[attrname]) == property:
            return IAgStkGraphicsSurfaceMeshPrimitiveFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsSurfaceMeshPrimitiveFactory.")
    
    _Initialize_metadata = { "name" : "Initialize",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    def Initialize(self) -> "IAgStkGraphicsSurfaceMeshPrimitive":
        """Initializes a default surface mesh primitive. This is equivalent to constructing a surface mesh with a set hint of Frequent and a surface mesh rendering method of Automatic."""
        return self._intf.invoke(IAgStkGraphicsSurfaceMeshPrimitiveFactory._metadata, IAgStkGraphicsSurfaceMeshPrimitiveFactory._Initialize_metadata, out_arg())

    _InitializeWithSetHint_metadata = { "name" : "InitializeWithSetHint",
            "arg_types" : (agcom.LONG, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEStkGraphicsSetHint), agmarshall.AgInterface_out_arg,) }
    def InitializeWithSetHint(self, setHint:"AgEStkGraphicsSetHint") -> "IAgStkGraphicsSurfaceMeshPrimitive":
        """Initializes a surface mesh primitive with the specified setHint. This is equivalent to constructing a surface mesh with the specified setHint and a surface mesh rendering method of Automatic."""
        return self._intf.invoke(IAgStkGraphicsSurfaceMeshPrimitiveFactory._metadata, IAgStkGraphicsSurfaceMeshPrimitiveFactory._InitializeWithSetHint_metadata, setHint, out_arg())

    _InitializeWithSetHintAndRenderingMethod_metadata = { "name" : "InitializeWithSetHintAndRenderingMethod",
            "arg_types" : (agcom.LONG, agcom.LONG, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEStkGraphicsSetHint), agmarshall.AgEnum_arg(AgEStkGraphicsSurfaceMeshRenderingMethod), agmarshall.AgInterface_out_arg,) }
    def InitializeWithSetHintAndRenderingMethod(self, setHint:"AgEStkGraphicsSetHint", renderingMethod:"AgEStkGraphicsSurfaceMeshRenderingMethod") -> "IAgStkGraphicsSurfaceMeshPrimitive":
        """Initializes a surface mesh primitive with the specified setHint and renderingMethod."""
        return self._intf.invoke(IAgStkGraphicsSurfaceMeshPrimitiveFactory._metadata, IAgStkGraphicsSurfaceMeshPrimitiveFactory._InitializeWithSetHintAndRenderingMethod_metadata, setHint, renderingMethod, out_arg())

    _Supported_metadata = { "name" : "Supported",
            "arg_types" : (agcom.LONG, POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEStkGraphicsSurfaceMeshRenderingMethod), agmarshall.VARIANT_BOOL_arg,) }
    def Supported(self, renderingMethod:"AgEStkGraphicsSurfaceMeshRenderingMethod") -> bool:
        """Determines whether or not the video card supports the surface mesh primitive with the given renderingMethod."""
        return self._intf.invoke(IAgStkGraphicsSurfaceMeshPrimitiveFactory._metadata, IAgStkGraphicsSurfaceMeshPrimitiveFactory._Supported_metadata, renderingMethod, out_arg())

    _SupportedWithDefaultRenderingMethod_metadata = { "name" : "SupportedWithDefaultRenderingMethod",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    def SupportedWithDefaultRenderingMethod(self) -> bool:
        """Determines whether or not the video card supports the surface mesh primitive. This is equivalent to calling Supported with automatic."""
        return self._intf.invoke(IAgStkGraphicsSurfaceMeshPrimitiveFactory._metadata, IAgStkGraphicsSurfaceMeshPrimitiveFactory._SupportedWithDefaultRenderingMethod_metadata, out_arg())


agcls.AgClassCatalog.add_catalog_entry("{08c3d10b-0cf0-41e9-93d0-e73b9d25e329}", IAgStkGraphicsSurfaceMeshPrimitiveFactory)
agcls.AgTypeNameMap["IAgStkGraphicsSurfaceMeshPrimitiveFactory"] = IAgStkGraphicsSurfaceMeshPrimitiveFactory

class IAgStkGraphicsTerrainOverlayInitializer(object):
    """A globe overlay which shows terrain."""
    _num_methods = 1
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{74c0acde-8d75-49df-87c1-2c39e3240283}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_Supported" : 1, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsTerrainOverlayInitializer._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsTerrainOverlayInitializer from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsTerrainOverlayInitializer.__dict__ and type(IAgStkGraphicsTerrainOverlayInitializer.__dict__[attrname]) == property:
            return IAgStkGraphicsTerrainOverlayInitializer.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsTerrainOverlayInitializer.")
    
    _get_Supported_metadata = { "name" : "Supported",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def Supported(self) -> bool:
        """Gets whether the video card supports adding terrain overlay objects. Video cards that support OpenGL 1.2 or higher support terrain overlay objects."""
        return self._intf.get_property(IAgStkGraphicsTerrainOverlayInitializer._metadata, IAgStkGraphicsTerrainOverlayInitializer._get_Supported_metadata)


agcls.AgClassCatalog.add_catalog_entry("{74c0acde-8d75-49df-87c1-2c39e3240283}", IAgStkGraphicsTerrainOverlayInitializer)
agcls.AgTypeNameMap["IAgStkGraphicsTerrainOverlayInitializer"] = IAgStkGraphicsTerrainOverlayInitializer

class IAgStkGraphicsTextBatchPrimitiveFactory(object):
    """ Renders one or more strings in the 3D scene.  For best performance, avoid creating lots of batches with only a few strings each. See the Batching Performance Overview. """
    _num_methods = 3
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{dfcc32bb-e95a-46c5-a1e4-ed3acf184d3a}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "InitializeWithGraphicsFont" : 1,
                             "InitializeWithGraphicsFontAndSetHint" : 2,
                             "InitializeWithGraphicsFontAndSetHint2d" : 3, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsTextBatchPrimitiveFactory._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsTextBatchPrimitiveFactory from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsTextBatchPrimitiveFactory.__dict__ and type(IAgStkGraphicsTextBatchPrimitiveFactory.__dict__[attrname]) == property:
            return IAgStkGraphicsTextBatchPrimitiveFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsTextBatchPrimitiveFactory.")
    
    _InitializeWithGraphicsFont_metadata = { "name" : "InitializeWithGraphicsFont",
            "arg_types" : (agcom.PVOID, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_in_arg("IAgStkGraphicsGraphicsFont"), agmarshall.AgInterface_out_arg,) }
    def InitializeWithGraphicsFont(self, font:"IAgStkGraphicsGraphicsFont") -> "IAgStkGraphicsTextBatchPrimitive":
        """Initializes a marker batch primitive with the specified font. This is equivalent to constructing a text batch with the specified font and a set hint of Frequent."""
        return self._intf.invoke(IAgStkGraphicsTextBatchPrimitiveFactory._metadata, IAgStkGraphicsTextBatchPrimitiveFactory._InitializeWithGraphicsFont_metadata, font, out_arg())

    _InitializeWithGraphicsFontAndSetHint_metadata = { "name" : "InitializeWithGraphicsFontAndSetHint",
            "arg_types" : (agcom.PVOID, agcom.LONG, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_in_arg("IAgStkGraphicsGraphicsFont"), agmarshall.AgEnum_arg(AgEStkGraphicsSetHint), agmarshall.AgInterface_out_arg,) }
    def InitializeWithGraphicsFontAndSetHint(self, font:"IAgStkGraphicsGraphicsFont", setHint:"AgEStkGraphicsSetHint") -> "IAgStkGraphicsTextBatchPrimitive":
        """Initializes a marker batch primitive with the specified font and setHint."""
        return self._intf.invoke(IAgStkGraphicsTextBatchPrimitiveFactory._metadata, IAgStkGraphicsTextBatchPrimitiveFactory._InitializeWithGraphicsFontAndSetHint_metadata, font, setHint, out_arg())

    _InitializeWithGraphicsFontAndSetHint2d_metadata = { "name" : "InitializeWithGraphicsFontAndSetHint2d",
            "arg_types" : (agcom.PVOID, agcom.LONG, agcom.VARIANT_BOOL, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_in_arg("IAgStkGraphicsGraphicsFont"), agmarshall.AgEnum_arg(AgEStkGraphicsSetHint), agmarshall.VARIANT_BOOL_arg, agmarshall.AgInterface_out_arg,) }
    def InitializeWithGraphicsFontAndSetHint2d(self, font:"IAgStkGraphicsGraphicsFont", setHint:"AgEStkGraphicsSetHint", renderInScreenSpace:bool) -> "IAgStkGraphicsTextBatchPrimitive":
        """Initializes a text batch primitive with the specified font and setHint, optimized for 2d screen space rendering."""
        return self._intf.invoke(IAgStkGraphicsTextBatchPrimitiveFactory._metadata, IAgStkGraphicsTextBatchPrimitiveFactory._InitializeWithGraphicsFontAndSetHint2d_metadata, font, setHint, renderInScreenSpace, out_arg())


agcls.AgClassCatalog.add_catalog_entry("{dfcc32bb-e95a-46c5-a1e4-ed3acf184d3a}", IAgStkGraphicsTextBatchPrimitiveFactory)
agcls.AgTypeNameMap["IAgStkGraphicsTextBatchPrimitiveFactory"] = IAgStkGraphicsTextBatchPrimitiveFactory

class IAgStkGraphicsTextBatchPrimitiveOptionalParametersFactory(object):
    """Optional per-string and per-batch parameters for text batch primitive..."""
    _num_methods = 1
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{03511893-3980-4c0e-9b99-7f86398acadf}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "Initialize" : 1, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsTextBatchPrimitiveOptionalParametersFactory._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsTextBatchPrimitiveOptionalParametersFactory from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsTextBatchPrimitiveOptionalParametersFactory.__dict__ and type(IAgStkGraphicsTextBatchPrimitiveOptionalParametersFactory.__dict__[attrname]) == property:
            return IAgStkGraphicsTextBatchPrimitiveOptionalParametersFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsTextBatchPrimitiveOptionalParametersFactory.")
    
    _Initialize_metadata = { "name" : "Initialize",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    def Initialize(self) -> "IAgStkGraphicsTextBatchPrimitiveOptionalParameters":
        """Initializes default text batch primitive optional parameters."""
        return self._intf.invoke(IAgStkGraphicsTextBatchPrimitiveOptionalParametersFactory._metadata, IAgStkGraphicsTextBatchPrimitiveOptionalParametersFactory._Initialize_metadata, out_arg())


agcls.AgClassCatalog.add_catalog_entry("{03511893-3980-4c0e-9b99-7f86398acadf}", IAgStkGraphicsTextBatchPrimitiveOptionalParametersFactory)
agcls.AgTypeNameMap["IAgStkGraphicsTextBatchPrimitiveOptionalParametersFactory"] = IAgStkGraphicsTextBatchPrimitiveOptionalParametersFactory

class IAgStkGraphicsTextOverlayFactory(object):
    """A rectangular overlay that contains text."""
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{183a48a5-a123-493a-9e6e-688775a7ca79}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "Initialize" : 1,
                             "InitializeWithXYWidthHeight" : 2,
                             "InitializeWithPositionSize" : 3,
                             "InitializeWithWidthHeightUnits" : 4, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsTextOverlayFactory._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsTextOverlayFactory from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsTextOverlayFactory.__dict__ and type(IAgStkGraphicsTextOverlayFactory.__dict__[attrname]) == property:
            return IAgStkGraphicsTextOverlayFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsTextOverlayFactory.")
    
    _Initialize_metadata = { "name" : "Initialize",
            "arg_types" : (agcom.PVOID, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_in_arg("IAgStkGraphicsGraphicsFont"), agmarshall.AgInterface_out_arg,) }
    def Initialize(self, font:"IAgStkGraphicsGraphicsFont") -> "IAgStkGraphicsTextOverlay":
        """Initializes the overlay with a position of (0, 0), a width of 100 pixels, and a height of 50 pixels. <param name='font'>The graphics font that defines how text is drawn.</param>"""
        return self._intf.invoke(IAgStkGraphicsTextOverlayFactory._metadata, IAgStkGraphicsTextOverlayFactory._Initialize_metadata, font, out_arg())

    _InitializeWithXYWidthHeight_metadata = { "name" : "InitializeWithXYWidthHeight",
            "arg_types" : (agcom.PVOID, agcom.DOUBLE, agcom.DOUBLE, agcom.DOUBLE, agcom.DOUBLE, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_in_arg("IAgStkGraphicsGraphicsFont"), agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg, agmarshall.AgInterface_out_arg,) }
    def InitializeWithXYWidthHeight(self, font:"IAgStkGraphicsGraphicsFont", xPixels:float, yPixels:float, widthPixels:float, heightPixels:float) -> "IAgStkGraphicsTextOverlay":
        """Initializes the overlay with the specified x position, y position, width, and height, all specified in pixels."""
        return self._intf.invoke(IAgStkGraphicsTextOverlayFactory._metadata, IAgStkGraphicsTextOverlayFactory._InitializeWithXYWidthHeight_metadata, font, xPixels, yPixels, widthPixels, heightPixels, out_arg())

    _InitializeWithPositionSize_metadata = { "name" : "InitializeWithPositionSize",
            "arg_types" : (agcom.PVOID, POINTER(agcom.LPSAFEARRAY), POINTER(agcom.LPSAFEARRAY), POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_in_arg("IAgStkGraphicsGraphicsFont"), agmarshall.LPSAFEARRAY_arg, agmarshall.LPSAFEARRAY_arg, agmarshall.AgInterface_out_arg,) }
    def InitializeWithPositionSize(self, font:"IAgStkGraphicsGraphicsFont", position:list, size:list) -> "IAgStkGraphicsTextOverlay":
        """Initializes the overlay with the specified position and size."""
        return self._intf.invoke(IAgStkGraphicsTextOverlayFactory._metadata, IAgStkGraphicsTextOverlayFactory._InitializeWithPositionSize_metadata, font, position, size, out_arg())

    _InitializeWithWidthHeightUnits_metadata = { "name" : "InitializeWithWidthHeightUnits",
            "arg_types" : (agcom.PVOID, agcom.DOUBLE, agcom.LONG, agcom.DOUBLE, agcom.LONG, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_in_arg("IAgStkGraphicsGraphicsFont"), agmarshall.DOUBLE_arg, agmarshall.AgEnum_arg(AgEStkGraphicsScreenOverlayUnit), agmarshall.DOUBLE_arg, agmarshall.AgEnum_arg(AgEStkGraphicsScreenOverlayUnit), agmarshall.AgInterface_out_arg,) }
    def InitializeWithWidthHeightUnits(self, font:"IAgStkGraphicsGraphicsFont", width:float, widthUnit:"AgEStkGraphicsScreenOverlayUnit", height:float, heightUnit:"AgEStkGraphicsScreenOverlayUnit") -> "IAgStkGraphicsTextOverlay":
        """Initializes the overlay with the specified position and size."""
        return self._intf.invoke(IAgStkGraphicsTextOverlayFactory._metadata, IAgStkGraphicsTextOverlayFactory._InitializeWithWidthHeightUnits_metadata, font, width, widthUnit, height, heightUnit, out_arg())


agcls.AgClassCatalog.add_catalog_entry("{183a48a5-a123-493a-9e6e-688775a7ca79}", IAgStkGraphicsTextOverlayFactory)
agcls.AgTypeNameMap["IAgStkGraphicsTextOverlayFactory"] = IAgStkGraphicsTextOverlayFactory

class IAgStkGraphicsTextureMatrixFactory(object):
    """A 4 by 4 matrix applied to a texture coordinate."""
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{d4fcc6c9-d53a-4988-a09e-3edc080936d4}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "Initialize" : 1,
                             "InitializeByValues" : 2,
                             "InitializeWithAffineTransform" : 3,
                             "InitializeWithRectangles" : 4, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsTextureMatrixFactory._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsTextureMatrixFactory from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsTextureMatrixFactory.__dict__ and type(IAgStkGraphicsTextureMatrixFactory.__dict__[attrname]) == property:
            return IAgStkGraphicsTextureMatrixFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsTextureMatrixFactory.")
    
    _Initialize_metadata = { "name" : "Initialize",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    def Initialize(self) -> "IAgStkGraphicsTextureMatrix":
        """Initializes a texture matrix to the identity matrix."""
        return self._intf.invoke(IAgStkGraphicsTextureMatrixFactory._metadata, IAgStkGraphicsTextureMatrixFactory._Initialize_metadata, out_arg())

    _InitializeByValues_metadata = { "name" : "InitializeByValues",
            "arg_types" : (agcom.FLOAT, agcom.FLOAT, agcom.FLOAT, agcom.FLOAT, agcom.FLOAT, agcom.FLOAT, agcom.FLOAT, agcom.FLOAT, agcom.FLOAT, agcom.FLOAT, agcom.FLOAT, agcom.FLOAT, agcom.FLOAT, agcom.FLOAT, agcom.FLOAT, agcom.FLOAT, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.FLOAT_arg, agmarshall.FLOAT_arg, agmarshall.FLOAT_arg, agmarshall.FLOAT_arg, agmarshall.FLOAT_arg, agmarshall.FLOAT_arg, agmarshall.FLOAT_arg, agmarshall.FLOAT_arg, agmarshall.FLOAT_arg, agmarshall.FLOAT_arg, agmarshall.FLOAT_arg, agmarshall.FLOAT_arg, agmarshall.FLOAT_arg, agmarshall.FLOAT_arg, agmarshall.FLOAT_arg, agmarshall.FLOAT_arg, agmarshall.AgInterface_out_arg,) }
    def InitializeByValues(self, m11:float, m12:float, m13:float, m14:float, m21:float, m22:float, m23:float, m24:float, m31:float, m32:float, m33:float, m34:float, m41:float, m42:float, m43:float, m44:float) -> "IAgStkGraphicsTextureMatrix":
        """Initializes a texture matrix. The subscripts define [row][column]."""
        return self._intf.invoke(IAgStkGraphicsTextureMatrixFactory._metadata, IAgStkGraphicsTextureMatrixFactory._InitializeByValues_metadata, m11, m12, m13, m14, m21, m22, m23, m24, m31, m32, m33, m34, m41, m42, m43, m44, out_arg())

    _InitializeWithAffineTransform_metadata = { "name" : "InitializeWithAffineTransform",
            "arg_types" : (POINTER(agcom.LPSAFEARRAY), POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg, agmarshall.AgInterface_out_arg,) }
    def InitializeWithAffineTransform(self, matrix:list) -> "IAgStkGraphicsTextureMatrix":
        """Initializes a texture matrix from a matrix. The upper left 2x2 matrix defines rotation and scaling. The top two elements of the last column define translation."""
        return self._intf.invoke(IAgStkGraphicsTextureMatrixFactory._metadata, IAgStkGraphicsTextureMatrixFactory._InitializeWithAffineTransform_metadata, matrix, out_arg())

    _InitializeWithRectangles_metadata = { "name" : "InitializeWithRectangles",
            "arg_types" : (POINTER(agcom.LPSAFEARRAY), POINTER(agcom.LPSAFEARRAY), POINTER(agcom.LPSAFEARRAY), POINTER(agcom.LPSAFEARRAY), POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg, agmarshall.LPSAFEARRAY_arg, agmarshall.LPSAFEARRAY_arg, agmarshall.LPSAFEARRAY_arg, agmarshall.AgInterface_out_arg,) }
    def InitializeWithRectangles(self, corner0:list, corner1:list, corner2:list, corner3:list) -> "IAgStkGraphicsTextureMatrix":
        """Initializes a texture matrix from texture corner points. Normally, a texture is mapped such that the lower left corner is texture coordinate (0, 0), the lower right is (1, 0), the upper right is (1, 1), and the upper left is (0, 1)..."""
        return self._intf.invoke(IAgStkGraphicsTextureMatrixFactory._metadata, IAgStkGraphicsTextureMatrixFactory._InitializeWithRectangles_metadata, corner0, corner1, corner2, corner3, out_arg())


agcls.AgClassCatalog.add_catalog_entry("{d4fcc6c9-d53a-4988-a09e-3edc080936d4}", IAgStkGraphicsTextureMatrixFactory)
agcls.AgTypeNameMap["IAgStkGraphicsTextureMatrixFactory"] = IAgStkGraphicsTextureMatrixFactory

class IAgStkGraphicsTextureScreenOverlayFactory(object):
    """A rectangular overlay that can be assigned a texture."""
    _num_methods = 5
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{d68b862b-50c5-4803-9a98-d404c0aa967a}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "Initialize" : 1,
                             "InitializeWithXYWidthHeight" : 2,
                             "InitializeWithPositionSize" : 3,
                             "InitializeWithXYTexture" : 4,
                             "InitializeWithPositionTexture" : 5, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsTextureScreenOverlayFactory._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsTextureScreenOverlayFactory from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsTextureScreenOverlayFactory.__dict__ and type(IAgStkGraphicsTextureScreenOverlayFactory.__dict__[attrname]) == property:
            return IAgStkGraphicsTextureScreenOverlayFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsTextureScreenOverlayFactory.")
    
    _Initialize_metadata = { "name" : "Initialize",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    def Initialize(self) -> "IAgStkGraphicsTextureScreenOverlay":
        """Initializes the overlay with a position of (0, 0), a width of 100 pixels, and a height of 50 pixels."""
        return self._intf.invoke(IAgStkGraphicsTextureScreenOverlayFactory._metadata, IAgStkGraphicsTextureScreenOverlayFactory._Initialize_metadata, out_arg())

    _InitializeWithXYWidthHeight_metadata = { "name" : "InitializeWithXYWidthHeight",
            "arg_types" : (agcom.DOUBLE, agcom.DOUBLE, agcom.DOUBLE, agcom.DOUBLE, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg, agmarshall.AgInterface_out_arg,) }
    def InitializeWithXYWidthHeight(self, xPixels:float, yPixels:float, widthPixels:float, heightPixels:float) -> "IAgStkGraphicsTextureScreenOverlay":
        """Initializes the overlay with the specified x position, y position, width, and height, all specified in pixels."""
        return self._intf.invoke(IAgStkGraphicsTextureScreenOverlayFactory._metadata, IAgStkGraphicsTextureScreenOverlayFactory._InitializeWithXYWidthHeight_metadata, xPixels, yPixels, widthPixels, heightPixels, out_arg())

    _InitializeWithPositionSize_metadata = { "name" : "InitializeWithPositionSize",
            "arg_types" : (POINTER(agcom.LPSAFEARRAY), POINTER(agcom.LPSAFEARRAY), POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg, agmarshall.LPSAFEARRAY_arg, agmarshall.AgInterface_out_arg,) }
    def InitializeWithPositionSize(self, position:list, size:list) -> "IAgStkGraphicsTextureScreenOverlay":
        """Initializes the overlay with the specified position and size."""
        return self._intf.invoke(IAgStkGraphicsTextureScreenOverlayFactory._metadata, IAgStkGraphicsTextureScreenOverlayFactory._InitializeWithPositionSize_metadata, position, size, out_arg())

    _InitializeWithXYTexture_metadata = { "name" : "InitializeWithXYTexture",
            "arg_types" : (agcom.DOUBLE, agcom.DOUBLE, agcom.PVOID, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg, agmarshall.AgInterface_in_arg("IAgStkGraphicsRendererTexture2D"), agmarshall.AgInterface_out_arg,) }
    def InitializeWithXYTexture(self, xPixels:float, yPixels:float, texture:"IAgStkGraphicsRendererTexture2D") -> "IAgStkGraphicsTextureScreenOverlay":
        """Initializes the overlay with a specified background texture. The size of the overlay will be the same as the size of the texture."""
        return self._intf.invoke(IAgStkGraphicsTextureScreenOverlayFactory._metadata, IAgStkGraphicsTextureScreenOverlayFactory._InitializeWithXYTexture_metadata, xPixels, yPixels, texture, out_arg())

    _InitializeWithPositionTexture_metadata = { "name" : "InitializeWithPositionTexture",
            "arg_types" : (POINTER(agcom.LPSAFEARRAY), agcom.PVOID, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg, agmarshall.AgInterface_in_arg("IAgStkGraphicsRendererTexture2D"), agmarshall.AgInterface_out_arg,) }
    def InitializeWithPositionTexture(self, position:list, texture:"IAgStkGraphicsRendererTexture2D") -> "IAgStkGraphicsTextureScreenOverlay":
        """Initializes the overlay with a specified background texture. The size of the overlay will be the same as the size of the texture."""
        return self._intf.invoke(IAgStkGraphicsTextureScreenOverlayFactory._metadata, IAgStkGraphicsTextureScreenOverlayFactory._InitializeWithPositionTexture_metadata, position, texture, out_arg())


agcls.AgClassCatalog.add_catalog_entry("{d68b862b-50c5-4803-9a98-d404c0aa967a}", IAgStkGraphicsTextureScreenOverlayFactory)
agcls.AgTypeNameMap["IAgStkGraphicsTextureScreenOverlayFactory"] = IAgStkGraphicsTextureScreenOverlayFactory

class IAgStkGraphicsTimeIntervalDisplayConditionFactory(object):
    """Defines an inclusive time interval that determines when an object, such as a primitive, is rendered based on the current animation time ."""
    _num_methods = 3
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{99ca1422-3ae0-4620-9046-d0bc4ca2bee5}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "Initialize" : 1,
                             "InitializeWithTimes" : 2,
                             "InitializeWithTimeInterval" : 3, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsTimeIntervalDisplayConditionFactory._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsTimeIntervalDisplayConditionFactory from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsTimeIntervalDisplayConditionFactory.__dict__ and type(IAgStkGraphicsTimeIntervalDisplayConditionFactory.__dict__[attrname]) == property:
            return IAgStkGraphicsTimeIntervalDisplayConditionFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsTimeIntervalDisplayConditionFactory.")
    
    _Initialize_metadata = { "name" : "Initialize",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    def Initialize(self) -> "IAgStkGraphicsTimeIntervalDisplayCondition":
        """Initializes a default time display condition. minimum time is set to JulianDate.MinValue and maximum time is set to JulianDate.MaxValue. With this interval, an object is always rendered regardless of the current animation time."""
        return self._intf.invoke(IAgStkGraphicsTimeIntervalDisplayConditionFactory._metadata, IAgStkGraphicsTimeIntervalDisplayConditionFactory._Initialize_metadata, out_arg())

    _InitializeWithTimes_metadata = { "name" : "InitializeWithTimes",
            "arg_types" : (agcom.PVOID, agcom.PVOID, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_in_arg("IAgDate"), agmarshall.AgInterface_in_arg("IAgDate"), agmarshall.AgInterface_out_arg,) }
    def InitializeWithTimes(self, minimumTime:"IAgDate", maximumTime:"IAgDate") -> "IAgStkGraphicsTimeIntervalDisplayCondition":
        """Initializes a time display condition with the inclusive time interval [minimumTime, maximumTime]..."""
        return self._intf.invoke(IAgStkGraphicsTimeIntervalDisplayConditionFactory._metadata, IAgStkGraphicsTimeIntervalDisplayConditionFactory._InitializeWithTimes_metadata, minimumTime, maximumTime, out_arg())

    _InitializeWithTimeInterval_metadata = { "name" : "InitializeWithTimeInterval",
            "arg_types" : (POINTER(agcom.LPSAFEARRAY), POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg, agmarshall.AgInterface_out_arg,) }
    def InitializeWithTimeInterval(self, timeInterval:list) -> "IAgStkGraphicsTimeIntervalDisplayCondition":
        """Initializes a time display condition with a time interval."""
        return self._intf.invoke(IAgStkGraphicsTimeIntervalDisplayConditionFactory._metadata, IAgStkGraphicsTimeIntervalDisplayConditionFactory._InitializeWithTimeInterval_metadata, timeInterval, out_arg())


agcls.AgClassCatalog.add_catalog_entry("{99ca1422-3ae0-4620-9046-d0bc4ca2bee5}", IAgStkGraphicsTimeIntervalDisplayConditionFactory)
agcls.AgTypeNameMap["IAgStkGraphicsTimeIntervalDisplayConditionFactory"] = IAgStkGraphicsTimeIntervalDisplayConditionFactory

class IAgStkGraphicsTriangleMeshPrimitiveFactory(object):
    """Renders a triangle mesh in the 3D scene. Examples of triangle meshes includes polygons on the globe (e.g. states or countries), terrain and imagery extents, ellipses, and extrusions."""
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{efd9ac8c-e2f0-4a06-9e92-15ebe59d5c38}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "Initialize" : 1,
                             "InitializeWithSetHint" : 2, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsTriangleMeshPrimitiveFactory._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsTriangleMeshPrimitiveFactory from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsTriangleMeshPrimitiveFactory.__dict__ and type(IAgStkGraphicsTriangleMeshPrimitiveFactory.__dict__[attrname]) == property:
            return IAgStkGraphicsTriangleMeshPrimitiveFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsTriangleMeshPrimitiveFactory.")
    
    _Initialize_metadata = { "name" : "Initialize",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    def Initialize(self) -> "IAgStkGraphicsTriangleMeshPrimitive":
        """Initializes a default triangle mesh primitive. This is equivalent to constructing a triangle mesh with a set hint of Frequent."""
        return self._intf.invoke(IAgStkGraphicsTriangleMeshPrimitiveFactory._metadata, IAgStkGraphicsTriangleMeshPrimitiveFactory._Initialize_metadata, out_arg())

    _InitializeWithSetHint_metadata = { "name" : "InitializeWithSetHint",
            "arg_types" : (agcom.LONG, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgEnum_arg(AgEStkGraphicsSetHint), agmarshall.AgInterface_out_arg,) }
    def InitializeWithSetHint(self, setHint:"AgEStkGraphicsSetHint") -> "IAgStkGraphicsTriangleMeshPrimitive":
        """Initializes a triangle mesh primitive with the specified setHint ."""
        return self._intf.invoke(IAgStkGraphicsTriangleMeshPrimitiveFactory._metadata, IAgStkGraphicsTriangleMeshPrimitiveFactory._InitializeWithSetHint_metadata, setHint, out_arg())


agcls.AgClassCatalog.add_catalog_entry("{efd9ac8c-e2f0-4a06-9e92-15ebe59d5c38}", IAgStkGraphicsTriangleMeshPrimitiveFactory)
agcls.AgTypeNameMap["IAgStkGraphicsTriangleMeshPrimitiveFactory"] = IAgStkGraphicsTriangleMeshPrimitiveFactory

class IAgStkGraphicsTriangleMeshPrimitiveOptionalParametersFactory(object):
    """Optional parameters for triangle mesh primitive..."""
    _num_methods = 1
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{dab0d95c-d51e-4152-9f63-01441ca43ad9}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "Initialize" : 1, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsTriangleMeshPrimitiveOptionalParametersFactory._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsTriangleMeshPrimitiveOptionalParametersFactory from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsTriangleMeshPrimitiveOptionalParametersFactory.__dict__ and type(IAgStkGraphicsTriangleMeshPrimitiveOptionalParametersFactory.__dict__[attrname]) == property:
            return IAgStkGraphicsTriangleMeshPrimitiveOptionalParametersFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsTriangleMeshPrimitiveOptionalParametersFactory.")
    
    _Initialize_metadata = { "name" : "Initialize",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    def Initialize(self) -> "IAgStkGraphicsTriangleMeshPrimitiveOptionalParameters":
        """Initializes default triangle mesh primitive optional parameters."""
        return self._intf.invoke(IAgStkGraphicsTriangleMeshPrimitiveOptionalParametersFactory._metadata, IAgStkGraphicsTriangleMeshPrimitiveOptionalParametersFactory._Initialize_metadata, out_arg())


agcls.AgClassCatalog.add_catalog_entry("{dab0d95c-d51e-4152-9f63-01441ca43ad9}", IAgStkGraphicsTriangleMeshPrimitiveOptionalParametersFactory)
agcls.AgTypeNameMap["IAgStkGraphicsTriangleMeshPrimitiveOptionalParametersFactory"] = IAgStkGraphicsTriangleMeshPrimitiveOptionalParametersFactory

class IAgStkGraphicsVectorPrimitiveFactory(object):
    """Renders a vector in the 3D scene. A vector is defined by a source (given by an ISystem) and a direction (given by an IVector or IPoint). Length is auto-calculated or can be set separately."""
    _num_methods = 1
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{a7013a6a-64ea-43b6-807f-4f789df05438}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "InitializeWithDirection" : 1, }
    }
    def __init__(self, sourceObject=None):
        self.__dict__["_intf"] = interface_proxy()
        if sourceObject is not None and sourceObject._intf is not None:
            intf = sourceObject._intf.query_interface(agcom.GUID(IAgStkGraphicsVectorPrimitiveFactory._metadata["uuid"]))
            if intf is not None:
                self._private_init(intf)
                del(intf)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsVectorPrimitiveFactory from source object.")
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsVectorPrimitiveFactory.__dict__ and type(IAgStkGraphicsVectorPrimitiveFactory.__dict__[attrname]) == property:
            return IAgStkGraphicsVectorPrimitiveFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsVectorPrimitiveFactory.")
    
    _InitializeWithDirection_metadata = { "name" : "InitializeWithDirection",
            "arg_types" : (agcom.PVOID, agcom.PVOID, agcom.PVOID, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_in_arg("IAgCrdnSystem"), agmarshall.AgInterface_in_arg("IAgCrdnVector"), agmarshall.AgInterface_in_arg("IAgStkGraphicsGraphicsFont"), agmarshall.AgInterface_out_arg,) }
    def InitializeWithDirection(self, sys:"IAgCrdnSystem", dir:"IAgCrdnVector", font:"IAgStkGraphicsGraphicsFont") -> "IAgStkGraphicsVectorPrimitive":
        """Initializes a vector primitive with the specified ISystem sys as its source and pointing in direction dir."""
        return self._intf.invoke(IAgStkGraphicsVectorPrimitiveFactory._metadata, IAgStkGraphicsVectorPrimitiveFactory._InitializeWithDirection_metadata, sys, dir, font, out_arg())


agcls.AgClassCatalog.add_catalog_entry("{a7013a6a-64ea-43b6-807f-4f789df05438}", IAgStkGraphicsVectorPrimitiveFactory)
agcls.AgTypeNameMap["IAgStkGraphicsVectorPrimitiveFactory"] = IAgStkGraphicsVectorPrimitiveFactory



class AgStkGraphicsPathPoint(IAgStkGraphicsPathPoint):
    """Represents a path point used in conjunction with the Path Primitive."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsPathPoint.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsPathPoint._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsPathPoint._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsPathPoint._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsPathPoint.")

agcls.AgClassCatalog.add_catalog_entry("{4C86EAB3-9C30-4D1B-9391-A27010590176}", AgStkGraphicsPathPoint)


class AgStkGraphicsPathPointFactory(IAgStkGraphicsPathPointFactory):
    """Factory creates path points."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsPathPointFactory.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsPathPointFactory._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsPathPointFactory._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsPathPointFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsPathPointFactory.")

agcls.AgClassCatalog.add_catalog_entry("{997C56C5-C114-4C2E-A25A-4D4860FA913F}", AgStkGraphicsPathPointFactory)


class AgStkGraphicsBoundingSphere(IAgStkGraphicsBoundingSphere):
    """A sphere that encapsulates an object."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsBoundingSphere.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsBoundingSphere._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsBoundingSphere._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsBoundingSphere._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsBoundingSphere.")

agcls.AgClassCatalog.add_catalog_entry("{40BA7967-5508-4D2C-9048-76EA16351F61}", AgStkGraphicsBoundingSphere)


class AgStkGraphicsBoundingSphereFactory(IAgStkGraphicsBoundingSphereFactory):
    """Creates bounding spheres."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsBoundingSphereFactory.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsBoundingSphereFactory._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsBoundingSphereFactory._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsBoundingSphereFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsBoundingSphereFactory.")

agcls.AgClassCatalog.add_catalog_entry("{4CAEE1FD-33BB-4928-8363-39237A62C150}", AgStkGraphicsBoundingSphereFactory)


class AgStkGraphicsTextureFilter2D(IAgStkGraphicsTextureFilter2D):
    """A texture filter."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsTextureFilter2D.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsTextureFilter2D._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsTextureFilter2D._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsTextureFilter2D._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsTextureFilter2D.")

agcls.AgClassCatalog.add_catalog_entry("{DAE13DA7-D678-4F1F-9F87-F584DF78B8FE}", AgStkGraphicsTextureFilter2D)


class AgStkGraphicsTextureFilter2DFactory(IAgStkGraphicsTextureFilter2DFactory):
    """Create texture filters."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsTextureFilter2DFactory.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsTextureFilter2DFactory._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsTextureFilter2DFactory._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsTextureFilter2DFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsTextureFilter2DFactory.")

agcls.AgClassCatalog.add_catalog_entry("{C17EDE04-6594-4662-975E-795B7623414B}", AgStkGraphicsTextureFilter2DFactory)


class AgStkGraphicsRendererTexture2D(IAgStkGraphicsRendererTexture2D):
    """A 2D Texture. A texture represents an image that is ready for use by objects such as primitives and overlays. Textures typically reside in video memory."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsRendererTexture2D.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsRendererTexture2D._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsRendererTexture2D._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsRendererTexture2D._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsRendererTexture2D.")

agcls.AgClassCatalog.add_catalog_entry("{295B9996-B4D8-4AAD-B612-CB0348444732}", AgStkGraphicsRendererTexture2D)


class AgStkGraphicsRendererTextureTemplate2D(IAgStkGraphicsRendererTextureTemplate2D):
    """Template object containing attributes required to create a 2D texture."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsRendererTextureTemplate2D.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsRendererTextureTemplate2D._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsRendererTextureTemplate2D._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsRendererTextureTemplate2D._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsRendererTextureTemplate2D.")

agcls.AgClassCatalog.add_catalog_entry("{0192E348-0FD1-440D-881D-EF3B882D7190}", AgStkGraphicsRendererTextureTemplate2D)


class AgStkGraphicsPathPointCollection(IAgStkGraphicsPathPointCollection):
    """A collection of path points."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsPathPointCollection.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsPathPointCollection._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsPathPointCollection._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsPathPointCollection._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsPathPointCollection.")

agcls.AgClassCatalog.add_catalog_entry("{B1EBC1AA-0D8C-417B-BD4B-3A1489C8D39E}", AgStkGraphicsPathPointCollection)


class AgStkGraphicsObjectCollection(IAgStkGraphicsObjectCollection):
    """A collection of objects."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsObjectCollection.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsObjectCollection._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsObjectCollection._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsObjectCollection._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsObjectCollection.")

agcls.AgClassCatalog.add_catalog_entry("{EEFF034B-5D72-4EF4-A76D-A25AEBD04B1E}", AgStkGraphicsObjectCollection)


class AgStkGraphicsSceneCollection(IAgStkGraphicsSceneCollection):
    """A collection of scenes."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsSceneCollection.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsSceneCollection._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsSceneCollection._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsSceneCollection._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsSceneCollection.")

agcls.AgClassCatalog.add_catalog_entry("{1F9129CC-D135-4993-8E14-0AA4B8402AC8}", AgStkGraphicsSceneCollection)


class AgStkGraphicsScreenOverlayPickResultCollection(IAgStkGraphicsScreenOverlayPickResultCollection):
    """A collection of pick results."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsScreenOverlayPickResultCollection.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsScreenOverlayPickResultCollection._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsScreenOverlayPickResultCollection._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsScreenOverlayPickResultCollection._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsScreenOverlayPickResultCollection.")

agcls.AgClassCatalog.add_catalog_entry("{566B0B55-437E-40E9-BB0C-1119BC58C3A4}", AgStkGraphicsScreenOverlayPickResultCollection)


class AgStkGraphicsGlobeImageOverlayAddCompleteEventArgs(IAgStkGraphicsGlobeImageOverlayAddCompleteEventArgs):
    """The event is raised when the globe image overlay is displayed for the first time after being added using AddAsync."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsGlobeImageOverlayAddCompleteEventArgs.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsGlobeImageOverlayAddCompleteEventArgs._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsGlobeImageOverlayAddCompleteEventArgs._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsGlobeImageOverlayAddCompleteEventArgs._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsGlobeImageOverlayAddCompleteEventArgs.")

agcls.AgClassCatalog.add_catalog_entry("{817BEFE9-18ED-489B-952E-8088AF90331D}", AgStkGraphicsGlobeImageOverlayAddCompleteEventArgs)


class AgStkGraphicsTerrainOverlayAddCompleteEventArgs(IAgStkGraphicsTerrainOverlayAddCompleteEventArgs):
    """The event is raised when the terrain overlay is displayed for the first time after having been added using AddAsync."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsTerrainOverlayAddCompleteEventArgs.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsTerrainOverlayAddCompleteEventArgs._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsTerrainOverlayAddCompleteEventArgs._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsTerrainOverlayAddCompleteEventArgs._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsTerrainOverlayAddCompleteEventArgs.")

agcls.AgClassCatalog.add_catalog_entry("{589B5FC6-D8FE-4387-8E3E-188F6C6704C8}", AgStkGraphicsTerrainOverlayAddCompleteEventArgs)


class AgStkGraphicsPickResultCollection(IAgStkGraphicsPickResultCollection):
    """A collection of picked objects."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsPickResultCollection.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsPickResultCollection._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsPickResultCollection._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsPickResultCollection._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsPickResultCollection.")

agcls.AgClassCatalog.add_catalog_entry("{E6DDBF58-AB3C-4F46-AA2F-4D9A2E0884F8}", AgStkGraphicsPickResultCollection)


class AgStkGraphicsRenderingEventArgs(IAgStkGraphicsRenderingEventArgs):
    """The event is raised when the scene is rendered."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsRenderingEventArgs.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsRenderingEventArgs._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsRenderingEventArgs._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsRenderingEventArgs._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsRenderingEventArgs.")

agcls.AgClassCatalog.add_catalog_entry("{46B2FD61-672F-4AD5-8588-F635D1EFB00C}", AgStkGraphicsRenderingEventArgs)


class AgStkGraphicsBatchPrimitiveIndex(IAgStkGraphicsBatchPrimitiveIndex):
    """Represents an individual item index that is associated with a batch primitive. Provides the Index of the individual item and the Primitive that contains that index..."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsBatchPrimitiveIndex.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsBatchPrimitiveIndex._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsBatchPrimitiveIndex._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsBatchPrimitiveIndex._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsBatchPrimitiveIndex.")

agcls.AgClassCatalog.add_catalog_entry("{1AC81969-B283-482A-89A3-AE66819F864E}", AgStkGraphicsBatchPrimitiveIndex)


class AgStkGraphicsKmlDocumentCollection(IAgStkGraphicsKmlDocumentCollection):
    """A collection of KML documents."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsKmlDocumentCollection.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsKmlDocumentCollection._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsKmlDocumentCollection._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsKmlDocumentCollection._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsKmlDocumentCollection.")

agcls.AgClassCatalog.add_catalog_entry("{2FB2F974-55DD-4862-B78F-8D9AA8B9167C}", AgStkGraphicsKmlDocumentCollection)


class AgStkGraphicsKmlFeatureCollection(IAgStkGraphicsKmlFeatureCollection):
    """A collection of KML features."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsKmlFeatureCollection.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsKmlFeatureCollection._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsKmlFeatureCollection._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsKmlFeatureCollection._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsKmlFeatureCollection.")

agcls.AgClassCatalog.add_catalog_entry("{11C36E9E-AB1B-4F7A-B5CD-75B5E1F9DCA7}", AgStkGraphicsKmlFeatureCollection)


class AgStkGraphicsKmlDocumentLoadedEventArgs(IAgStkGraphicsKmlDocumentLoadedEventArgs):
    """The event is raised when a KML document has been loaded."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsKmlDocumentLoadedEventArgs.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsKmlDocumentLoadedEventArgs._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsKmlDocumentLoadedEventArgs._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsKmlDocumentLoadedEventArgs._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsKmlDocumentLoadedEventArgs.")

agcls.AgClassCatalog.add_catalog_entry("{77E26868-F894-4E5D-AE27-3D259B9763E3}", AgStkGraphicsKmlDocumentLoadedEventArgs)


class AgStkGraphicsFactoryAndInitializers(IAgStkGraphicsFactoryAndInitializers):
    """Methods and properties are used to initialize new primitives, display conditions, screen overlays, textures and many other types; compute and retrieve triangulator results and access global properties (what's known as static properties, static methods a..."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsFactoryAndInitializers.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsFactoryAndInitializers._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsFactoryAndInitializers._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsFactoryAndInitializers._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsFactoryAndInitializers.")

agcls.AgClassCatalog.add_catalog_entry("{06756FC9-1EF3-45CD-8A1F-CE6652BEA6C1}", AgStkGraphicsFactoryAndInitializers)


class AgStkGraphicsExtrudedPolylineTriangulatorResult(IAgStkGraphicsExtrudedPolylineTriangulatorResult, IAgStkGraphicsTriangulatorResult):
    """The result from extruded polyline triangulation: a triangle mesh defined using an indexed triangle list with top and bottom boundary positions. The mesh is commonly visualized with the triangle mesh primitive or surface mesh primitive..."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsExtrudedPolylineTriangulatorResult.__init__(self, sourceObject)
        IAgStkGraphicsTriangulatorResult.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsExtrudedPolylineTriangulatorResult._private_init(self, intf)
        IAgStkGraphicsTriangulatorResult._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsExtrudedPolylineTriangulatorResult._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsExtrudedPolylineTriangulatorResult._get_property(self, attrname)
        if IAgStkGraphicsTriangulatorResult._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsTriangulatorResult._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsExtrudedPolylineTriangulatorResult.")

agcls.AgClassCatalog.add_catalog_entry("{BD7096DB-7447-43A4-B1D7-7E831565C909}", AgStkGraphicsExtrudedPolylineTriangulatorResult)


class AgStkGraphicsSolidTriangulatorResult(IAgStkGraphicsSolidTriangulatorResult, IAgStkGraphicsTriangulatorResult):
    """The result from a triangulation of a solid: a triangle mesh defined using an indexed triangle list and positions outlining the solid. It is recommended to visualize the solid using a solid primitive..."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsSolidTriangulatorResult.__init__(self, sourceObject)
        IAgStkGraphicsTriangulatorResult.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsSolidTriangulatorResult._private_init(self, intf)
        IAgStkGraphicsTriangulatorResult._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsSolidTriangulatorResult._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsSolidTriangulatorResult._get_property(self, attrname)
        if IAgStkGraphicsTriangulatorResult._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsTriangulatorResult._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsSolidTriangulatorResult.")

agcls.AgClassCatalog.add_catalog_entry("{D97A5AF7-129F-4972-9DFB-B894D917B328}", AgStkGraphicsSolidTriangulatorResult)


class AgStkGraphicsSurfaceShapesResult(IAgStkGraphicsSurfaceShapesResult):
    """Represents the boundary positions of a shape on the surface computed from by a surface shapes method."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsSurfaceShapesResult.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsSurfaceShapesResult._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsSurfaceShapesResult._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsSurfaceShapesResult._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsSurfaceShapesResult.")

agcls.AgClassCatalog.add_catalog_entry("{627EC36E-26FE-4D33-81B1-3A4CE5955DED}", AgStkGraphicsSurfaceShapesResult)


class AgStkGraphicsSurfaceTriangulatorResult(IAgStkGraphicsSurfaceTriangulatorResult, IAgStkGraphicsTriangulatorResult):
    """The result from a triangulation on the surface of a central body: a triangle mesh defined using an indexed triangle list and boundary positions surrounding the mesh..."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsSurfaceTriangulatorResult.__init__(self, sourceObject)
        IAgStkGraphicsTriangulatorResult.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsSurfaceTriangulatorResult._private_init(self, intf)
        IAgStkGraphicsTriangulatorResult._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsSurfaceTriangulatorResult._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsSurfaceTriangulatorResult._get_property(self, attrname)
        if IAgStkGraphicsTriangulatorResult._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsTriangulatorResult._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsSurfaceTriangulatorResult.")

agcls.AgClassCatalog.add_catalog_entry("{484F03DF-F617-49CC-A3AD-6AB09C86C400}", AgStkGraphicsSurfaceTriangulatorResult)


class AgStkGraphicsTriangulatorResult(IAgStkGraphicsTriangulatorResult):
    """The result from triangulation: a triangle mesh defined using an indexed triangle list. This is commonly visualized with the triangle mesh primitive or surface mesh primitive."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsTriangulatorResult.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsTriangulatorResult._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsTriangulatorResult._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsTriangulatorResult._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsTriangulatorResult.")

agcls.AgClassCatalog.add_catalog_entry("{1981E859-F957-4752-9B11-76A77512222B}", AgStkGraphicsTriangulatorResult)


class AgStkGraphicsAGICustomTerrainOverlay(IAgStkGraphicsAGICustomTerrainOverlay, IAgStkGraphicsTerrainOverlay, IAgStkGraphicsGlobeOverlay):
    """A terrain overlay for handling AGI Cesium Terrain."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsAGICustomTerrainOverlay.__init__(self, sourceObject)
        IAgStkGraphicsTerrainOverlay.__init__(self, sourceObject)
        IAgStkGraphicsGlobeOverlay.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsAGICustomTerrainOverlay._private_init(self, intf)
        IAgStkGraphicsTerrainOverlay._private_init(self, intf)
        IAgStkGraphicsGlobeOverlay._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsAGICustomTerrainOverlay._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsAGICustomTerrainOverlay._get_property(self, attrname)
        if IAgStkGraphicsTerrainOverlay._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsTerrainOverlay._get_property(self, attrname)
        if IAgStkGraphicsGlobeOverlay._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsGlobeOverlay._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsAGICustomTerrainOverlay.")

agcls.AgClassCatalog.add_catalog_entry("{474FD730-8942-48A2-B5C1-F84E6E5B112E}", AgStkGraphicsAGICustomTerrainOverlay)


class AgStkGraphicsAGIProcessedImageGlobeOverlay(IAgStkGraphicsAGIProcessedImageGlobeOverlay, IAgStkGraphicsGlobeImageOverlay, IAgStkGraphicsGlobeOverlay):
    """A globe image overlay for handling AGI Processed Image (PDTTX) files."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsAGIProcessedImageGlobeOverlay.__init__(self, sourceObject)
        IAgStkGraphicsGlobeImageOverlay.__init__(self, sourceObject)
        IAgStkGraphicsGlobeOverlay.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsAGIProcessedImageGlobeOverlay._private_init(self, intf)
        IAgStkGraphicsGlobeImageOverlay._private_init(self, intf)
        IAgStkGraphicsGlobeOverlay._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsAGIProcessedImageGlobeOverlay._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsAGIProcessedImageGlobeOverlay._get_property(self, attrname)
        if IAgStkGraphicsGlobeImageOverlay._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsGlobeImageOverlay._get_property(self, attrname)
        if IAgStkGraphicsGlobeOverlay._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsGlobeOverlay._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsAGIProcessedImageGlobeOverlay.")

agcls.AgClassCatalog.add_catalog_entry("{26895086-F748-4134-8B1E-E51EF358363D}", AgStkGraphicsAGIProcessedImageGlobeOverlay)


class AgStkGraphicsAGIProcessedTerrainOverlay(IAgStkGraphicsAGIProcessedTerrainOverlay, IAgStkGraphicsTerrainOverlay, IAgStkGraphicsGlobeOverlay):
    """A terrain overlay for handling AGI Processed Terrain (PDTT) files."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsAGIProcessedTerrainOverlay.__init__(self, sourceObject)
        IAgStkGraphicsTerrainOverlay.__init__(self, sourceObject)
        IAgStkGraphicsGlobeOverlay.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsAGIProcessedTerrainOverlay._private_init(self, intf)
        IAgStkGraphicsTerrainOverlay._private_init(self, intf)
        IAgStkGraphicsGlobeOverlay._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsAGIProcessedTerrainOverlay._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsAGIProcessedTerrainOverlay._get_property(self, attrname)
        if IAgStkGraphicsTerrainOverlay._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsTerrainOverlay._get_property(self, attrname)
        if IAgStkGraphicsGlobeOverlay._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsGlobeOverlay._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsAGIProcessedTerrainOverlay.")

agcls.AgClassCatalog.add_catalog_entry("{8B835120-12BD-4D18-AD78-2C507068F582}", AgStkGraphicsAGIProcessedTerrainOverlay)


class AgStkGraphicsAGIRoamImageGlobeOverlay(IAgStkGraphicsAGIRoamImageGlobeOverlay, IAgStkGraphicsGlobeImageOverlay, IAgStkGraphicsGlobeOverlay):
    """A globe image overlay for handling ROAM (TXM/TXB) files."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsAGIRoamImageGlobeOverlay.__init__(self, sourceObject)
        IAgStkGraphicsGlobeImageOverlay.__init__(self, sourceObject)
        IAgStkGraphicsGlobeOverlay.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsAGIRoamImageGlobeOverlay._private_init(self, intf)
        IAgStkGraphicsGlobeImageOverlay._private_init(self, intf)
        IAgStkGraphicsGlobeOverlay._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsAGIRoamImageGlobeOverlay._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsAGIRoamImageGlobeOverlay._get_property(self, attrname)
        if IAgStkGraphicsGlobeImageOverlay._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsGlobeImageOverlay._get_property(self, attrname)
        if IAgStkGraphicsGlobeOverlay._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsGlobeOverlay._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsAGIRoamImageGlobeOverlay.")

agcls.AgClassCatalog.add_catalog_entry("{278C21A7-3D85-48C1-B934-BE89B25019CE}", AgStkGraphicsAGIRoamImageGlobeOverlay)


class AgStkGraphicsCameraSnapshot(IAgStkGraphicsCameraSnapshot):
    """Takes snapshots of the 3D window."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsCameraSnapshot.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsCameraSnapshot._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsCameraSnapshot._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsCameraSnapshot._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsCameraSnapshot.")

agcls.AgClassCatalog.add_catalog_entry("{27A8C9DC-6AF7-436A-80B0-7B426D85EAB1}", AgStkGraphicsCameraSnapshot)


class AgStkGraphicsCameraVideoRecording(IAgStkGraphicsCameraVideoRecording):
    """Records the 3D window to either a movie file or to consecutively ordered image files each time the scene is rendered."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsCameraVideoRecording.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsCameraVideoRecording._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsCameraVideoRecording._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsCameraVideoRecording._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsCameraVideoRecording.")

agcls.AgClassCatalog.add_catalog_entry("{BBACA9D4-20A3-44B1-BF0F-174652805D72}", AgStkGraphicsCameraVideoRecording)


class AgStkGraphicsCentralBodyGraphicsIndexer(IAgStkGraphicsCentralBodyGraphicsIndexer):
    """An indexer into the central body graphics for a particular central body, which provides graphical properties such as showing or hiding the central body in the scene, and working with terrain and imagery for the specified central body."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsCentralBodyGraphicsIndexer.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsCentralBodyGraphicsIndexer._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsCentralBodyGraphicsIndexer._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsCentralBodyGraphicsIndexer._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsCentralBodyGraphicsIndexer.")

agcls.AgClassCatalog.add_catalog_entry("{55BA55ED-B236-40BB-9F77-F7C32F3679FD}", AgStkGraphicsCentralBodyGraphicsIndexer)


class AgStkGraphicsCustomImageGlobeOverlay(IAgStkGraphicsCustomImageGlobeOverlay, IAgStkGraphicsGlobeImageOverlay, IAgStkGraphicsGlobeOverlay):
    """A globe image overlay that allows for a user defined image to be specified."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsCustomImageGlobeOverlay.__init__(self, sourceObject)
        IAgStkGraphicsGlobeImageOverlay.__init__(self, sourceObject)
        IAgStkGraphicsGlobeOverlay.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsCustomImageGlobeOverlay._private_init(self, intf)
        IAgStkGraphicsGlobeImageOverlay._private_init(self, intf)
        IAgStkGraphicsGlobeOverlay._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsCustomImageGlobeOverlay._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsCustomImageGlobeOverlay._get_property(self, attrname)
        if IAgStkGraphicsGlobeImageOverlay._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsGlobeImageOverlay._get_property(self, attrname)
        if IAgStkGraphicsGlobeOverlay._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsGlobeOverlay._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsCustomImageGlobeOverlay.")

agcls.AgClassCatalog.add_catalog_entry("{FAFB3856-9989-4712-8355-8047D169B49F}", AgStkGraphicsCustomImageGlobeOverlay)


class AgStkGraphicsCustomImageGlobeOverlayPluginActivator(IAgStkGraphicsCustomImageGlobeOverlayPluginActivator):
    """The Activator class provides methods to load COM plugins that implement custom image globe overlays. For more information about custom image globe overlays, see the STK Programming Interface."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsCustomImageGlobeOverlayPluginActivator.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsCustomImageGlobeOverlayPluginActivator._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsCustomImageGlobeOverlayPluginActivator._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsCustomImageGlobeOverlayPluginActivator._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsCustomImageGlobeOverlayPluginActivator.")

agcls.AgClassCatalog.add_catalog_entry("{06EE5B12-485C-4AFE-8D16-B1516F3D6BFE}", AgStkGraphicsCustomImageGlobeOverlayPluginActivator)


class AgStkGraphicsCustomImageGlobeOverlayPluginProxy(IAgStkGraphicsCustomImageGlobeOverlayPluginProxy):
    """A proxy class provides access to a custom image globe overlay implemented by a plugin. Proxies are instantiated using custom image globe overlay plugin activator."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsCustomImageGlobeOverlayPluginProxy.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsCustomImageGlobeOverlayPluginProxy._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsCustomImageGlobeOverlayPluginProxy._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsCustomImageGlobeOverlayPluginProxy._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsCustomImageGlobeOverlayPluginProxy.")

agcls.AgClassCatalog.add_catalog_entry("{1A2C5F92-FEFD-4961-B840-D940D30D3637}", AgStkGraphicsCustomImageGlobeOverlayPluginProxy)


class AgStkGraphicsGeospatialImageGlobeOverlay(IAgStkGraphicsGeospatialImageGlobeOverlay, IAgStkGraphicsGlobeImageOverlay, IAgStkGraphicsGlobeOverlay):
    """A globe image overlay for handling <a href='https://jpeg.org/jpeg2000/'>JPEG 2000</a> (.jp2), ECW (.ecw), ECWP, and MrSid (.sid) image formats in the WGS84 geographic projection."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsGeospatialImageGlobeOverlay.__init__(self, sourceObject)
        IAgStkGraphicsGlobeImageOverlay.__init__(self, sourceObject)
        IAgStkGraphicsGlobeOverlay.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsGeospatialImageGlobeOverlay._private_init(self, intf)
        IAgStkGraphicsGlobeImageOverlay._private_init(self, intf)
        IAgStkGraphicsGlobeOverlay._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsGeospatialImageGlobeOverlay._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsGeospatialImageGlobeOverlay._get_property(self, attrname)
        if IAgStkGraphicsGlobeImageOverlay._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsGlobeImageOverlay._get_property(self, attrname)
        if IAgStkGraphicsGlobeOverlay._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsGlobeOverlay._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsGeospatialImageGlobeOverlay.")

agcls.AgClassCatalog.add_catalog_entry("{B2C72817-48CC-498A-BAF5-71CBDEEE4BD2}", AgStkGraphicsGeospatialImageGlobeOverlay)


class AgStkGraphicsGlobeOverlay(IAgStkGraphicsGlobeOverlay):
    """The base class of all terrain overlay and globe image overlay objects."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsGlobeOverlay.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsGlobeOverlay._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsGlobeOverlay._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsGlobeOverlay._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsGlobeOverlay.")

agcls.AgClassCatalog.add_catalog_entry("{4D2E94A8-DE1F-4382-AF9D-5664313F3E49}", AgStkGraphicsGlobeOverlay)


class AgStkGraphicsGlobeOverlaySettings(IAgStkGraphicsGlobeOverlaySettings):
    """Settings used by globe overlay objects. These setting affect all scenes."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsGlobeOverlaySettings.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsGlobeOverlaySettings._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsGlobeOverlaySettings._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsGlobeOverlaySettings._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsGlobeOverlaySettings.")

agcls.AgClassCatalog.add_catalog_entry("{0F326F62-7A92-46B9-8CD4-F73A14B32A42}", AgStkGraphicsGlobeOverlaySettings)


class AgStkGraphicsLighting(IAgStkGraphicsLighting):
    """Lighting in the 3D scene."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsLighting.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsLighting._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsLighting._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsLighting._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsLighting.")

agcls.AgClassCatalog.add_catalog_entry("{29C20830-2D8B-4E6B-854A-FDE514F4396A}", AgStkGraphicsLighting)


class AgStkGraphicsPathPrimitiveUpdatePolicy(IAgStkGraphicsPathPrimitiveUpdatePolicy):
    """A class that encapsulates the update logic for a path primitive. Derived classes must implement the Update method."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsPathPrimitiveUpdatePolicy.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsPathPrimitiveUpdatePolicy._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsPathPrimitiveUpdatePolicy._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsPathPrimitiveUpdatePolicy._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsPathPrimitiveUpdatePolicy.")

agcls.AgClassCatalog.add_catalog_entry("{E1D3DA5F-ABD5-4C2D-891B-AB5A0FCE78A6}", AgStkGraphicsPathPrimitiveUpdatePolicy)


class AgStkGraphicsProjectedRasterOverlay(IAgStkGraphicsProjectedRasterOverlay, IAgStkGraphicsGlobeImageOverlay, IAgStkGraphicsGlobeOverlay):
    """A globe image overlay which projects a raster onto the terrain or surface of the central body. You can also enable projection onto models by setting projected raster model projection to true for a Scene..."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsProjectedRasterOverlay.__init__(self, sourceObject)
        IAgStkGraphicsGlobeImageOverlay.__init__(self, sourceObject)
        IAgStkGraphicsGlobeOverlay.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsProjectedRasterOverlay._private_init(self, intf)
        IAgStkGraphicsGlobeImageOverlay._private_init(self, intf)
        IAgStkGraphicsGlobeOverlay._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsProjectedRasterOverlay._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsProjectedRasterOverlay._get_property(self, attrname)
        if IAgStkGraphicsGlobeImageOverlay._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsGlobeImageOverlay._get_property(self, attrname)
        if IAgStkGraphicsGlobeOverlay._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsGlobeOverlay._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsProjectedRasterOverlay.")

agcls.AgClassCatalog.add_catalog_entry("{ED508BB0-4EF1-412D-BEC2-46CF8F9BC5E2}", AgStkGraphicsProjectedRasterOverlay)


class AgStkGraphicsProjection(IAgStkGraphicsProjection):
    """A projection represents a simplified camera with a position, orientation, and field of view horizontal and field of view vertical..."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsProjection.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsProjection._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsProjection._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsProjection._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsProjection.")

agcls.AgClassCatalog.add_catalog_entry("{3C06C59D-E24C-4145-9634-15ABB16CF69F}", AgStkGraphicsProjection)


class AgStkGraphicsProjectionStream(IAgStkGraphicsProjectionStream, IAgStkGraphicsProjection):
    """A projection that is updated dynamically at the specified update delta. The class can be used to stream projection data to projection clients, like projected raster overlay..."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsProjectionStream.__init__(self, sourceObject)
        IAgStkGraphicsProjection.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsProjectionStream._private_init(self, intf)
        IAgStkGraphicsProjection._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsProjectionStream._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsProjectionStream._get_property(self, attrname)
        if IAgStkGraphicsProjection._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsProjection._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsProjectionStream.")

agcls.AgClassCatalog.add_catalog_entry("{02371735-0B2F-48AA-A51E-53DAEC21903D}", AgStkGraphicsProjectionStream)


class AgStkGraphicsSceneGlobeOverlaySettings(IAgStkGraphicsSceneGlobeOverlaySettings):
    """Settings used by globe overlay objects. These settings only affect the scene."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsSceneGlobeOverlaySettings.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsSceneGlobeOverlaySettings._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsSceneGlobeOverlaySettings._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsSceneGlobeOverlaySettings._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsSceneGlobeOverlaySettings.")

agcls.AgClassCatalog.add_catalog_entry("{AA19929F-DE78-4CDB-90C5-12D89532D4C4}", AgStkGraphicsSceneGlobeOverlaySettings)


class AgStkGraphicsScreenOverlayCollectionBase(IAgStkGraphicsScreenOverlayCollectionBase):
    """The common base class for collections of overlays held by screen overlay and by screen overlay manager."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsScreenOverlayCollectionBase.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsScreenOverlayCollectionBase._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsScreenOverlayCollectionBase._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsScreenOverlayCollectionBase._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsScreenOverlayCollectionBase.")

agcls.AgClassCatalog.add_catalog_entry("{B1764146-8986-45CB-A5B9-426988A9F289}", AgStkGraphicsScreenOverlayCollectionBase)


class AgStkGraphicsTexture2DFactory(IAgStkGraphicsTexture2DFactory):
    """A factory for creating texture 2d objects from various sources."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsTexture2DFactory.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsTexture2DFactory._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsTexture2DFactory._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsTexture2DFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsTexture2DFactory.")

agcls.AgClassCatalog.add_catalog_entry("{1BA44C8C-0CFB-4A7C-B687-788BD4D49AB2}", AgStkGraphicsTexture2DFactory)


class AgStkGraphicsVisualEffects(IAgStkGraphicsVisualEffects):
    """Controls various post processing effects that can be applied to the scene."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsVisualEffects.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsVisualEffects._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsVisualEffects._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsVisualEffects._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsVisualEffects.")

agcls.AgClassCatalog.add_catalog_entry("{901f26d9-644b-4513-a3e9-d4d1f4c3df48}", AgStkGraphicsVisualEffects)


class AgStkGraphicsAltitudeDisplayCondition(IAgStkGraphicsAltitudeDisplayCondition, IAgStkGraphicsDisplayCondition):
    """Defines an inclusive altitude interval that determines when an object is rendered based on the camera's altitude relative to a central body."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsAltitudeDisplayCondition.__init__(self, sourceObject)
        IAgStkGraphicsDisplayCondition.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsAltitudeDisplayCondition._private_init(self, intf)
        IAgStkGraphicsDisplayCondition._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsAltitudeDisplayCondition._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsAltitudeDisplayCondition._get_property(self, attrname)
        if IAgStkGraphicsDisplayCondition._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsDisplayCondition._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsAltitudeDisplayCondition.")

agcls.AgClassCatalog.add_catalog_entry("{E5AFCA9A-2850-44C4-BE11-930BB559872B}", AgStkGraphicsAltitudeDisplayCondition)


class AgStkGraphicsAxesPrimitive(IAgStkGraphicsAxesPrimitive, IAgStkGraphicsPrimitive):
    """Renders an axes in the 3D scene."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsAxesPrimitive.__init__(self, sourceObject)
        IAgStkGraphicsPrimitive.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsAxesPrimitive._private_init(self, intf)
        IAgStkGraphicsPrimitive._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsAxesPrimitive._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsAxesPrimitive._get_property(self, attrname)
        if IAgStkGraphicsPrimitive._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsPrimitive._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsAxesPrimitive.")

agcls.AgClassCatalog.add_catalog_entry("{AE8A4146-1A03-4D94-95E4-4D1C67D5501F}", AgStkGraphicsAxesPrimitive)


class AgStkGraphicsCamera(IAgStkGraphicsCamera):
    """Implemented by the scene camera. Contains operations to manipulate the camera position, view direction and orientation in the scene."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsCamera.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsCamera._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsCamera._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsCamera._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsCamera.")

agcls.AgClassCatalog.add_catalog_entry("{B11DEE46-76FD-46E6-9476-AEA896C1E2AF}", AgStkGraphicsCamera)


class AgStkGraphicsCentralBodyGraphics(IAgStkGraphicsCentralBodyGraphics):
    """The graphical properties associated with a particular central body. Changing the central body graphics will affect how the associated central body is rendered in a scene. For instance, to show or hide the central body, use the show property..."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsCentralBodyGraphics.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsCentralBodyGraphics._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsCentralBodyGraphics._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsCentralBodyGraphics._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsCentralBodyGraphics.")

agcls.AgClassCatalog.add_catalog_entry("{47858749-2CF1-48AF-ADCA-426C6E87B7EB}", AgStkGraphicsCentralBodyGraphics)


class AgStkGraphicsClouds(IAgStkGraphicsClouds):
    """Load, show and hide clouds in the scene."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsClouds.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsClouds._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsClouds._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsClouds._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsClouds.")

agcls.AgClassCatalog.add_catalog_entry("{a98d31c3-daf0-40dd-ba64-0ceb18f0e522}", AgStkGraphicsClouds)


class AgStkGraphicsCompositeDisplayCondition(IAgStkGraphicsCompositeDisplayCondition, IAgStkGraphicsDisplayCondition):
    """A composite of display conditions combined using a binary logic operation. For example, several time interval display condition objects can be added to a composite..."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsCompositeDisplayCondition.__init__(self, sourceObject)
        IAgStkGraphicsDisplayCondition.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsCompositeDisplayCondition._private_init(self, intf)
        IAgStkGraphicsDisplayCondition._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsCompositeDisplayCondition._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsCompositeDisplayCondition._get_property(self, attrname)
        if IAgStkGraphicsDisplayCondition._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsDisplayCondition._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsCompositeDisplayCondition.")

agcls.AgClassCatalog.add_catalog_entry("{B59D2316-7712-462C-BB2F-3C882D18388E}", AgStkGraphicsCompositeDisplayCondition)


class AgStkGraphicsCompositePrimitive(IAgStkGraphicsCompositePrimitive, IAgStkGraphicsPrimitive):
    """ A primitive that is composed of multiple other primitives. Since composites can contain other composites, they are commonly used to build hierarchies of primitives to efficiently evaluate display conditions..."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsCompositePrimitive.__init__(self, sourceObject)
        IAgStkGraphicsPrimitive.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsCompositePrimitive._private_init(self, intf)
        IAgStkGraphicsPrimitive._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsCompositePrimitive._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsCompositePrimitive._get_property(self, attrname)
        if IAgStkGraphicsPrimitive._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsPrimitive._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsCompositePrimitive.")

agcls.AgClassCatalog.add_catalog_entry("{8F6F69B8-80C9-40F2-BC5B-BCEE656C8917}", AgStkGraphicsCompositePrimitive)


class AgStkGraphicsConstantDisplayCondition(IAgStkGraphicsConstantDisplayCondition, IAgStkGraphicsDisplayCondition):
    """A display condition that evaluates to a user-defined value. This is commonly used to hide primitives by assigning to a primitive a display condition that always returns false."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsConstantDisplayCondition.__init__(self, sourceObject)
        IAgStkGraphicsDisplayCondition.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsConstantDisplayCondition._private_init(self, intf)
        IAgStkGraphicsDisplayCondition._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsConstantDisplayCondition._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsConstantDisplayCondition._get_property(self, attrname)
        if IAgStkGraphicsDisplayCondition._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsDisplayCondition._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsConstantDisplayCondition.")

agcls.AgClassCatalog.add_catalog_entry("{C21814A8-7591-412D-9390-A6CE73468CA3}", AgStkGraphicsConstantDisplayCondition)


class AgStkGraphicsDisplayCondition(IAgStkGraphicsDisplayCondition):
    """When assigned to objects, such as primitives or globe overlays, display conditions are evaluated to determine if the object should be rendered."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsDisplayCondition.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsDisplayCondition._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsDisplayCondition._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsDisplayCondition._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsDisplayCondition.")

agcls.AgClassCatalog.add_catalog_entry("{CEC5D5EB-5AF8-4CCD-BD3D-EFF95DC04F26}", AgStkGraphicsDisplayCondition)


class AgStkGraphicsDistanceDisplayCondition(IAgStkGraphicsDistanceDisplayCondition, IAgStkGraphicsDisplayCondition):
    """Defines an inclusive distance interval that determines when an object, such as a primitive, is rendered based on the distance from the camera to the object."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsDistanceDisplayCondition.__init__(self, sourceObject)
        IAgStkGraphicsDisplayCondition.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsDistanceDisplayCondition._private_init(self, intf)
        IAgStkGraphicsDisplayCondition._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsDistanceDisplayCondition._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsDistanceDisplayCondition._get_property(self, attrname)
        if IAgStkGraphicsDisplayCondition._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsDisplayCondition._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsDistanceDisplayCondition.")

agcls.AgClassCatalog.add_catalog_entry("{0B5589C8-51E7-4191-BD54-8326BFF56CE2}", AgStkGraphicsDistanceDisplayCondition)


class AgStkGraphicsDistanceToGlobeOverlayDisplayCondition(IAgStkGraphicsDistanceToGlobeOverlayDisplayCondition, IAgStkGraphicsDisplayCondition):
    """Defines an inclusive distance interval that determines when an object, such as a primitive, is rendered based on the distance from the camera to the globe overlay..."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsDistanceToGlobeOverlayDisplayCondition.__init__(self, sourceObject)
        IAgStkGraphicsDisplayCondition.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsDistanceToGlobeOverlayDisplayCondition._private_init(self, intf)
        IAgStkGraphicsDisplayCondition._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsDistanceToGlobeOverlayDisplayCondition._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsDistanceToGlobeOverlayDisplayCondition._get_property(self, attrname)
        if IAgStkGraphicsDisplayCondition._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsDisplayCondition._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsDistanceToGlobeOverlayDisplayCondition.")

agcls.AgClassCatalog.add_catalog_entry("{E9C27719-711F-4E36-9FF9-DEF15D35581E}", AgStkGraphicsDistanceToGlobeOverlayDisplayCondition)


class AgStkGraphicsDistanceToPositionDisplayCondition(IAgStkGraphicsDistanceToPositionDisplayCondition, IAgStkGraphicsDisplayCondition):
    """Defines an inclusive distance interval that determines when an object, such as a primitive, is rendered based on the distance from the camera to a position defined in the given reference frame."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsDistanceToPositionDisplayCondition.__init__(self, sourceObject)
        IAgStkGraphicsDisplayCondition.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsDistanceToPositionDisplayCondition._private_init(self, intf)
        IAgStkGraphicsDisplayCondition._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsDistanceToPositionDisplayCondition._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsDistanceToPositionDisplayCondition._get_property(self, attrname)
        if IAgStkGraphicsDisplayCondition._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsDisplayCondition._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsDistanceToPositionDisplayCondition.")

agcls.AgClassCatalog.add_catalog_entry("{ACD2A88B-E930-4994-AA0A-D37AEDB51182}", AgStkGraphicsDistanceToPositionDisplayCondition)


class AgStkGraphicsDistanceToPrimitiveDisplayCondition(IAgStkGraphicsDistanceToPrimitiveDisplayCondition, IAgStkGraphicsDisplayCondition):
    """Defines an inclusive distance interval that determines when an object, such as a screen overlay, is rendered based on the distance from the camera to the primitive..."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsDistanceToPrimitiveDisplayCondition.__init__(self, sourceObject)
        IAgStkGraphicsDisplayCondition.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsDistanceToPrimitiveDisplayCondition._private_init(self, intf)
        IAgStkGraphicsDisplayCondition._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsDistanceToPrimitiveDisplayCondition._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsDistanceToPrimitiveDisplayCondition._get_property(self, attrname)
        if IAgStkGraphicsDisplayCondition._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsDisplayCondition._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsDistanceToPrimitiveDisplayCondition.")

agcls.AgClassCatalog.add_catalog_entry("{90A5B7AD-6FE1-4387-96B1-66A17A54FDA2}", AgStkGraphicsDistanceToPrimitiveDisplayCondition)


class AgStkGraphicsDurationPathPrimitiveUpdatePolicy(IAgStkGraphicsDurationPathPrimitiveUpdatePolicy, IAgStkGraphicsPathPrimitiveUpdatePolicy):
    """path primitive update policy that removes points from remove location after a given duration."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsDurationPathPrimitiveUpdatePolicy.__init__(self, sourceObject)
        IAgStkGraphicsPathPrimitiveUpdatePolicy.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsDurationPathPrimitiveUpdatePolicy._private_init(self, intf)
        IAgStkGraphicsPathPrimitiveUpdatePolicy._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsDurationPathPrimitiveUpdatePolicy._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsDurationPathPrimitiveUpdatePolicy._get_property(self, attrname)
        if IAgStkGraphicsPathPrimitiveUpdatePolicy._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsPathPrimitiveUpdatePolicy._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsDurationPathPrimitiveUpdatePolicy.")

agcls.AgClassCatalog.add_catalog_entry("{8628CCF8-7803-4528-B013-66116C059454}", AgStkGraphicsDurationPathPrimitiveUpdatePolicy)


class AgStkGraphicsFrameRate(IAgStkGraphicsFrameRate):
    """Keeps track of how many times the scenes are rendered per second."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsFrameRate.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsFrameRate._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsFrameRate._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsFrameRate._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsFrameRate.")

agcls.AgClassCatalog.add_catalog_entry("{EB82B58B-6E32-4E91-92A8-E8008A5C4B77}", AgStkGraphicsFrameRate)


class AgStkGraphicsGlobeImageOverlay(IAgStkGraphicsGlobeImageOverlay, IAgStkGraphicsGlobeOverlay):
    """A globe overlay that shows an image."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsGlobeImageOverlay.__init__(self, sourceObject)
        IAgStkGraphicsGlobeOverlay.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsGlobeImageOverlay._private_init(self, intf)
        IAgStkGraphicsGlobeOverlay._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsGlobeImageOverlay._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsGlobeImageOverlay._get_property(self, attrname)
        if IAgStkGraphicsGlobeOverlay._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsGlobeOverlay._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsGlobeImageOverlay.")

agcls.AgClassCatalog.add_catalog_entry("{5316E632-3018-4625-866F-E56F29FFBC05}", AgStkGraphicsGlobeImageOverlay)


class AgStkGraphicsGraphicsFont(IAgStkGraphicsGraphicsFont):
    """A font that is suitable for use with the text batch primitive. For best performance, avoid creating duplicate font objects. Instead assign the same font object to several text batch primitives."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsGraphicsFont.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsGraphicsFont._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsGraphicsFont._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsGraphicsFont._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsGraphicsFont.")

agcls.AgClassCatalog.add_catalog_entry("{C48AD7DF-40C9-4A57-86CD-E7B0E4BFCF52}", AgStkGraphicsGraphicsFont)


class AgStkGraphicsGreatArcInterpolator(IAgStkGraphicsGreatArcInterpolator, IAgStkGraphicsPositionInterpolator):
    """The great arc interpolator computes interpolated positions along a great arc. A great arc is the shortest path between two positions on an ellipsoid."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsGreatArcInterpolator.__init__(self, sourceObject)
        IAgStkGraphicsPositionInterpolator.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsGreatArcInterpolator._private_init(self, intf)
        IAgStkGraphicsPositionInterpolator._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsGreatArcInterpolator._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsGreatArcInterpolator._get_property(self, attrname)
        if IAgStkGraphicsPositionInterpolator._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsPositionInterpolator._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsGreatArcInterpolator.")

agcls.AgClassCatalog.add_catalog_entry("{A91AC76D-7326-4103-996E-DE20EB349A61}", AgStkGraphicsGreatArcInterpolator)


class AgStkGraphicsImageCollection(IAgStkGraphicsImageCollection):
    """A collection of globe image overlay objects."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsImageCollection.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsImageCollection._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsImageCollection._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsImageCollection._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsImageCollection.")

agcls.AgClassCatalog.add_catalog_entry("{26812ED6-0AB2-4554-A01F-A1E52687763D}", AgStkGraphicsImageCollection)


class AgStkGraphicsAlphaFromLuminanceFilter(IAgStkGraphicsAlphaFromLuminanceFilter, IAgStkGraphicsRasterFilter):
    """Adds an alpha band to the source raster derived from the luminance of the raster's color bands."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsAlphaFromLuminanceFilter.__init__(self, sourceObject)
        IAgStkGraphicsRasterFilter.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsAlphaFromLuminanceFilter._private_init(self, intf)
        IAgStkGraphicsRasterFilter._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsAlphaFromLuminanceFilter._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsAlphaFromLuminanceFilter._get_property(self, attrname)
        if IAgStkGraphicsRasterFilter._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsRasterFilter._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsAlphaFromLuminanceFilter.")

agcls.AgClassCatalog.add_catalog_entry("{7D660FC7-F1D2-4189-A5C7-B2BFD97E1B4E}", AgStkGraphicsAlphaFromLuminanceFilter)


class AgStkGraphicsAlphaFromPixelFilter(IAgStkGraphicsAlphaFromPixelFilter, IAgStkGraphicsRasterFilter):
    """Adds an alpha band to the source raster based on the value of its first pixel. All pixels in the source raster that are the same color as the first pixel will be made transparent."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsAlphaFromPixelFilter.__init__(self, sourceObject)
        IAgStkGraphicsRasterFilter.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsAlphaFromPixelFilter._private_init(self, intf)
        IAgStkGraphicsRasterFilter._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsAlphaFromPixelFilter._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsAlphaFromPixelFilter._get_property(self, attrname)
        if IAgStkGraphicsRasterFilter._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsRasterFilter._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsAlphaFromPixelFilter.")

agcls.AgClassCatalog.add_catalog_entry("{B2D2B3A3-9FA8-4B58-9CA5-89705663DEDB}", AgStkGraphicsAlphaFromPixelFilter)


class AgStkGraphicsAlphaFromRasterFilter(IAgStkGraphicsAlphaFromRasterFilter, IAgStkGraphicsRasterFilter):
    """Adds an alpha band to the source raster derived from the color bands or alpha of another raster. This filter can be used to apply an alpha mask to the source raster."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsAlphaFromRasterFilter.__init__(self, sourceObject)
        IAgStkGraphicsRasterFilter.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsAlphaFromRasterFilter._private_init(self, intf)
        IAgStkGraphicsRasterFilter._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsAlphaFromRasterFilter._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsAlphaFromRasterFilter._get_property(self, attrname)
        if IAgStkGraphicsRasterFilter._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsRasterFilter._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsAlphaFromRasterFilter.")

agcls.AgClassCatalog.add_catalog_entry("{5E83A2AD-0A40-4CFC-823A-311AC8B034B3}", AgStkGraphicsAlphaFromRasterFilter)


class AgStkGraphicsBandExtractFilter(IAgStkGraphicsBandExtractFilter, IAgStkGraphicsRasterFilter):
    """Extracts a band or set of bands from the source raster. The extract format property specifies the bands and the order of the bands that will be extracted."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsBandExtractFilter.__init__(self, sourceObject)
        IAgStkGraphicsRasterFilter.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsBandExtractFilter._private_init(self, intf)
        IAgStkGraphicsRasterFilter._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsBandExtractFilter._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsBandExtractFilter._get_property(self, attrname)
        if IAgStkGraphicsRasterFilter._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsRasterFilter._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsBandExtractFilter.")

agcls.AgClassCatalog.add_catalog_entry("{DC9176BE-3DBD-40D1-A0BC-CEDE39C747E2}", AgStkGraphicsBandExtractFilter)


class AgStkGraphicsBandOrderFilter(IAgStkGraphicsBandOrderFilter, IAgStkGraphicsRasterFilter):
    """Reorders or swizzles the bands of the source raster to match the band order of the raster format specified by the band order property. When maintain raster format is true, the source raster's format is maintained after swizzling."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsBandOrderFilter.__init__(self, sourceObject)
        IAgStkGraphicsRasterFilter.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsBandOrderFilter._private_init(self, intf)
        IAgStkGraphicsRasterFilter._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsBandOrderFilter._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsBandOrderFilter._get_property(self, attrname)
        if IAgStkGraphicsRasterFilter._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsRasterFilter._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsBandOrderFilter.")

agcls.AgClassCatalog.add_catalog_entry("{91749CD4-8503-4C71-AD42-DB5AAF1BC240}", AgStkGraphicsBandOrderFilter)


class AgStkGraphicsBlurFilter(IAgStkGraphicsBlurFilter, IAgStkGraphicsConvolutionFilter, IAgStkGraphicsRasterFilter):
    """Applies a convolution filter to blur or smooth the source raster. Can be used to reduce noise in the raster."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsBlurFilter.__init__(self, sourceObject)
        IAgStkGraphicsConvolutionFilter.__init__(self, sourceObject)
        IAgStkGraphicsRasterFilter.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsBlurFilter._private_init(self, intf)
        IAgStkGraphicsConvolutionFilter._private_init(self, intf)
        IAgStkGraphicsRasterFilter._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsBlurFilter._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsBlurFilter._get_property(self, attrname)
        if IAgStkGraphicsConvolutionFilter._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsConvolutionFilter._get_property(self, attrname)
        if IAgStkGraphicsRasterFilter._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsRasterFilter._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsBlurFilter.")

agcls.AgClassCatalog.add_catalog_entry("{A3E1128F-DE2D-4A57-AC68-C7C938480BF2}", AgStkGraphicsBlurFilter)


class AgStkGraphicsBrightnessFilter(IAgStkGraphicsBrightnessFilter, IAgStkGraphicsRasterFilter):
    """Adjusts the brightness of the source raster's color bands. The adjustment to brightness is a value between -1 and 1, corresponding to least bright to most bright."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsBrightnessFilter.__init__(self, sourceObject)
        IAgStkGraphicsRasterFilter.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsBrightnessFilter._private_init(self, intf)
        IAgStkGraphicsRasterFilter._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsBrightnessFilter._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsBrightnessFilter._get_property(self, attrname)
        if IAgStkGraphicsRasterFilter._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsRasterFilter._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsBrightnessFilter.")

agcls.AgClassCatalog.add_catalog_entry("{E6FF496E-64E8-41CA-BED7-8FEBDDB6B9C9}", AgStkGraphicsBrightnessFilter)


class AgStkGraphicsColorToLuminanceFilter(IAgStkGraphicsColorToLuminanceFilter, IAgStkGraphicsRasterFilter):
    """Extracts a luminance band derived from the color bands of the source raster."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsColorToLuminanceFilter.__init__(self, sourceObject)
        IAgStkGraphicsRasterFilter.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsColorToLuminanceFilter._private_init(self, intf)
        IAgStkGraphicsRasterFilter._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsColorToLuminanceFilter._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsColorToLuminanceFilter._get_property(self, attrname)
        if IAgStkGraphicsRasterFilter._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsRasterFilter._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsColorToLuminanceFilter.")

agcls.AgClassCatalog.add_catalog_entry("{BE472786-A17B-490A-8DE7-4831AC3FEEDE}", AgStkGraphicsColorToLuminanceFilter)


class AgStkGraphicsContrastFilter(IAgStkGraphicsContrastFilter, IAgStkGraphicsRasterFilter):
    """Adjusts the contrast of the source raster. The adjustment to contrast is a value between -1 and 1, corresponding to least contrast to most contrast."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsContrastFilter.__init__(self, sourceObject)
        IAgStkGraphicsRasterFilter.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsContrastFilter._private_init(self, intf)
        IAgStkGraphicsRasterFilter._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsContrastFilter._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsContrastFilter._get_property(self, attrname)
        if IAgStkGraphicsRasterFilter._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsRasterFilter._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsContrastFilter.")

agcls.AgClassCatalog.add_catalog_entry("{20FA2A78-30D4-4DDE-84D7-EBF001730166}", AgStkGraphicsContrastFilter)


class AgStkGraphicsConvolutionFilter(IAgStkGraphicsConvolutionFilter, IAgStkGraphicsRasterFilter):
    """Applies convolution to the source raster. Convolution is the modification of a pixel's value based on the values of its surrounding pixels. The kernel is the numerical matrix that is applied to each pixel in this process..."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsConvolutionFilter.__init__(self, sourceObject)
        IAgStkGraphicsRasterFilter.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsConvolutionFilter._private_init(self, intf)
        IAgStkGraphicsRasterFilter._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsConvolutionFilter._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsConvolutionFilter._get_property(self, attrname)
        if IAgStkGraphicsRasterFilter._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsRasterFilter._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsConvolutionFilter.")

agcls.AgClassCatalog.add_catalog_entry("{113D939E-C5B0-49BD-A38B-53DD961CAC5B}", AgStkGraphicsConvolutionFilter)


class AgStkGraphicsEdgeDetectFilter(IAgStkGraphicsEdgeDetectFilter, IAgStkGraphicsConvolutionFilter, IAgStkGraphicsRasterFilter):
    """Applies a convolution filter to detect edges in the source raster."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsEdgeDetectFilter.__init__(self, sourceObject)
        IAgStkGraphicsConvolutionFilter.__init__(self, sourceObject)
        IAgStkGraphicsRasterFilter.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsEdgeDetectFilter._private_init(self, intf)
        IAgStkGraphicsConvolutionFilter._private_init(self, intf)
        IAgStkGraphicsRasterFilter._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsEdgeDetectFilter._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsEdgeDetectFilter._get_property(self, attrname)
        if IAgStkGraphicsConvolutionFilter._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsConvolutionFilter._get_property(self, attrname)
        if IAgStkGraphicsRasterFilter._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsRasterFilter._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsEdgeDetectFilter.")

agcls.AgClassCatalog.add_catalog_entry("{04E73117-38A1-4EE3-854D-253934DE9B54}", AgStkGraphicsEdgeDetectFilter)


class AgStkGraphicsFilteringRasterStream(IAgStkGraphicsFilteringRasterStream, IAgStkGraphicsRasterStream, IAgStkGraphicsRaster):
    """A class decorator for applying a raster filter to each update of a raster stream. Can be used to apply filters to videos and other raster streams as they are updated."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsFilteringRasterStream.__init__(self, sourceObject)
        IAgStkGraphicsRasterStream.__init__(self, sourceObject)
        IAgStkGraphicsRaster.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsFilteringRasterStream._private_init(self, intf)
        IAgStkGraphicsRasterStream._private_init(self, intf)
        IAgStkGraphicsRaster._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsFilteringRasterStream._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsFilteringRasterStream._get_property(self, attrname)
        if IAgStkGraphicsRasterStream._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsRasterStream._get_property(self, attrname)
        if IAgStkGraphicsRaster._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsRaster._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsFilteringRasterStream.")

agcls.AgClassCatalog.add_catalog_entry("{9D59ED29-9EF8-4D85-BE0F-9E244736C814}", AgStkGraphicsFilteringRasterStream)


class AgStkGraphicsFlipFilter(IAgStkGraphicsFlipFilter, IAgStkGraphicsRasterFilter):
    """Flips the source raster along the given flip axis."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsFlipFilter.__init__(self, sourceObject)
        IAgStkGraphicsRasterFilter.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsFlipFilter._private_init(self, intf)
        IAgStkGraphicsRasterFilter._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsFlipFilter._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsFlipFilter._get_property(self, attrname)
        if IAgStkGraphicsRasterFilter._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsRasterFilter._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsFlipFilter.")

agcls.AgClassCatalog.add_catalog_entry("{08E0C45D-A187-4B74-93AE-BF29B39D50C3}", AgStkGraphicsFlipFilter)


class AgStkGraphicsGammaCorrectionFilter(IAgStkGraphicsGammaCorrectionFilter, IAgStkGraphicsRasterFilter):
    """Applies gamma correction to the source raster. The gamma is a value between .2 and 5. The default gamma value is 2.2."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsGammaCorrectionFilter.__init__(self, sourceObject)
        IAgStkGraphicsRasterFilter.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsGammaCorrectionFilter._private_init(self, intf)
        IAgStkGraphicsRasterFilter._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsGammaCorrectionFilter._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsGammaCorrectionFilter._get_property(self, attrname)
        if IAgStkGraphicsRasterFilter._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsRasterFilter._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsGammaCorrectionFilter.")

agcls.AgClassCatalog.add_catalog_entry("{A560ACC2-4642-44FD-A5FC-BD3AB7A0FC2F}", AgStkGraphicsGammaCorrectionFilter)


class AgStkGraphicsGaussianBlurFilter(IAgStkGraphicsGaussianBlurFilter, IAgStkGraphicsConvolutionFilter, IAgStkGraphicsRasterFilter):
    """Applies a convolution filter to blur the source raster using the Gaussian function."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsGaussianBlurFilter.__init__(self, sourceObject)
        IAgStkGraphicsConvolutionFilter.__init__(self, sourceObject)
        IAgStkGraphicsRasterFilter.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsGaussianBlurFilter._private_init(self, intf)
        IAgStkGraphicsConvolutionFilter._private_init(self, intf)
        IAgStkGraphicsRasterFilter._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsGaussianBlurFilter._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsGaussianBlurFilter._get_property(self, attrname)
        if IAgStkGraphicsConvolutionFilter._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsConvolutionFilter._get_property(self, attrname)
        if IAgStkGraphicsRasterFilter._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsRasterFilter._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsGaussianBlurFilter.")

agcls.AgClassCatalog.add_catalog_entry("{BCEE5F1C-66D8-48C6-8485-8435260855DE}", AgStkGraphicsGaussianBlurFilter)


class AgStkGraphicsGradientDetectFilter(IAgStkGraphicsGradientDetectFilter, IAgStkGraphicsConvolutionFilter, IAgStkGraphicsRasterFilter):
    """Applies a convolution filter to detect gradients in the source raster."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsGradientDetectFilter.__init__(self, sourceObject)
        IAgStkGraphicsConvolutionFilter.__init__(self, sourceObject)
        IAgStkGraphicsRasterFilter.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsGradientDetectFilter._private_init(self, intf)
        IAgStkGraphicsConvolutionFilter._private_init(self, intf)
        IAgStkGraphicsRasterFilter._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsGradientDetectFilter._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsGradientDetectFilter._get_property(self, attrname)
        if IAgStkGraphicsConvolutionFilter._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsConvolutionFilter._get_property(self, attrname)
        if IAgStkGraphicsRasterFilter._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsRasterFilter._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsGradientDetectFilter.")

agcls.AgClassCatalog.add_catalog_entry("{7F410D2F-C209-4F22-A906-5F8BA0C8CA40}", AgStkGraphicsGradientDetectFilter)


class AgStkGraphicsLevelsFilter(IAgStkGraphicsLevelsFilter, IAgStkGraphicsRasterFilter):
    """Adjusts the band levels of the source raster linearly."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsLevelsFilter.__init__(self, sourceObject)
        IAgStkGraphicsRasterFilter.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsLevelsFilter._private_init(self, intf)
        IAgStkGraphicsRasterFilter._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsLevelsFilter._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsLevelsFilter._get_property(self, attrname)
        if IAgStkGraphicsRasterFilter._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsRasterFilter._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsLevelsFilter.")

agcls.AgClassCatalog.add_catalog_entry("{C21CE0FC-3E94-47C9-9E21-C8478A46E75C}", AgStkGraphicsLevelsFilter)


class AgStkGraphicsProjectionRasterStreamPluginActivator(IAgStkGraphicsProjectionRasterStreamPluginActivator):
    """The Activator class provides methods to load COM plugins that implement projection and raster streaming. For more information about the projection and raster plugins, see the STK Programming Interface."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsProjectionRasterStreamPluginActivator.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsProjectionRasterStreamPluginActivator._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsProjectionRasterStreamPluginActivator._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsProjectionRasterStreamPluginActivator._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsProjectionRasterStreamPluginActivator.")

agcls.AgClassCatalog.add_catalog_entry("{5365D424-8630-4D9D-B209-F946D5116080}", AgStkGraphicsProjectionRasterStreamPluginActivator)


class AgStkGraphicsProjectionRasterStreamPluginProxy(IAgStkGraphicsProjectionRasterStreamPluginProxy):
    """A proxy class provides access to the raster and projection streams implemented by a plugin. Proxies are instantiated using projection raster stream plugin activator."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsProjectionRasterStreamPluginProxy.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsProjectionRasterStreamPluginProxy._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsProjectionRasterStreamPluginProxy._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsProjectionRasterStreamPluginProxy._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsProjectionRasterStreamPluginProxy.")

agcls.AgClassCatalog.add_catalog_entry("{82E6B1F4-DC2D-40C3-8251-8207F218B820}", AgStkGraphicsProjectionRasterStreamPluginProxy)


class AgStkGraphicsRaster(IAgStkGraphicsRaster):
    """A raster dataset. A raster consists of one or more bands, or sets of values, which are most commonly associated with colors when the raster represents an image..."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsRaster.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsRaster._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsRaster._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsRaster._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsRaster.")

agcls.AgClassCatalog.add_catalog_entry("{50AB6A3A-54CA-4619-9B99-FB7BD497EA92}", AgStkGraphicsRaster)


class AgStkGraphicsRasterAttributes(IAgStkGraphicsRasterAttributes):
    """The attributes describing a raster dataset. raster attributes define the memory layout of a raster, and includes properties defining the order of each raster band that the raster contains, as specified by the raster format..."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsRasterAttributes.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsRasterAttributes._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsRasterAttributes._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsRasterAttributes._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsRasterAttributes.")

agcls.AgClassCatalog.add_catalog_entry("{32DEB10A-1039-43AF-AA36-BA94F8CC8531}", AgStkGraphicsRasterAttributes)


class AgStkGraphicsRasterFilter(IAgStkGraphicsRasterFilter):
    """A filter for processing raster datasets. RasterFilter is the base class for all raster filters..."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsRasterFilter.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsRasterFilter._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsRasterFilter._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsRasterFilter._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsRasterFilter.")

agcls.AgClassCatalog.add_catalog_entry("{0345FD5E-C6A6-42D3-AEA9-57A7444BFF42}", AgStkGraphicsRasterFilter)


class AgStkGraphicsRasterStream(IAgStkGraphicsRasterStream, IAgStkGraphicsRaster):
    """A raster, the data of which, is updated dynamically at the specified update delta. The class can be used to stream video and other dynamic raster data to textures and other raster clients..."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsRasterStream.__init__(self, sourceObject)
        IAgStkGraphicsRaster.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsRasterStream._private_init(self, intf)
        IAgStkGraphicsRaster._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsRasterStream._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsRasterStream._get_property(self, attrname)
        if IAgStkGraphicsRaster._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsRaster._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsRasterStream.")

agcls.AgClassCatalog.add_catalog_entry("{CAFADC5E-933C-46AC-BD09-18B089E86346}", AgStkGraphicsRasterStream)


class AgStkGraphicsRotateFilter(IAgStkGraphicsRotateFilter, IAgStkGraphicsRasterFilter):
    """Rotates the source raster clockwise by the specified angle."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsRotateFilter.__init__(self, sourceObject)
        IAgStkGraphicsRasterFilter.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsRotateFilter._private_init(self, intf)
        IAgStkGraphicsRasterFilter._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsRotateFilter._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsRotateFilter._get_property(self, attrname)
        if IAgStkGraphicsRasterFilter._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsRasterFilter._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsRotateFilter.")

agcls.AgClassCatalog.add_catalog_entry("{AEDFA944-E740-4D19-9819-CB179C43E060}", AgStkGraphicsRotateFilter)


class AgStkGraphicsSequenceFilter(IAgStkGraphicsSequenceFilter, IAgStkGraphicsRasterFilter):
    """Applies a sequence of filters to the source raster in the order in which they were added. When continue on failure is set to true, subsequent filters will still be applied to the source raster even if one or more filters in the sequence cannot be applied."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsSequenceFilter.__init__(self, sourceObject)
        IAgStkGraphicsRasterFilter.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsSequenceFilter._private_init(self, intf)
        IAgStkGraphicsRasterFilter._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsSequenceFilter._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsSequenceFilter._get_property(self, attrname)
        if IAgStkGraphicsRasterFilter._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsRasterFilter._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsSequenceFilter.")

agcls.AgClassCatalog.add_catalog_entry("{37330024-90FE-47DD-9548-C13089A085FC}", AgStkGraphicsSequenceFilter)


class AgStkGraphicsSharpenFilter(IAgStkGraphicsSharpenFilter, IAgStkGraphicsConvolutionFilter, IAgStkGraphicsRasterFilter):
    """Applies a convolution filter to increase the sharpness of the source raster."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsSharpenFilter.__init__(self, sourceObject)
        IAgStkGraphicsConvolutionFilter.__init__(self, sourceObject)
        IAgStkGraphicsRasterFilter.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsSharpenFilter._private_init(self, intf)
        IAgStkGraphicsConvolutionFilter._private_init(self, intf)
        IAgStkGraphicsRasterFilter._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsSharpenFilter._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsSharpenFilter._get_property(self, attrname)
        if IAgStkGraphicsConvolutionFilter._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsConvolutionFilter._get_property(self, attrname)
        if IAgStkGraphicsRasterFilter._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsRasterFilter._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsSharpenFilter.")

agcls.AgClassCatalog.add_catalog_entry("{0F6FC309-D30E-41AD-A7B6-E70039313B6E}", AgStkGraphicsSharpenFilter)


class AgStkGraphicsVideoStream(IAgStkGraphicsVideoStream, IAgStkGraphicsRasterStream, IAgStkGraphicsRaster):
    """A raster stream that streams from a video. The video can be read from a file, or streamed from an HTTP, RTP, UDP, or TCP source. See the Video Streams Overview for a list of supported video formats and Uri usage."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsVideoStream.__init__(self, sourceObject)
        IAgStkGraphicsRasterStream.__init__(self, sourceObject)
        IAgStkGraphicsRaster.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsVideoStream._private_init(self, intf)
        IAgStkGraphicsRasterStream._private_init(self, intf)
        IAgStkGraphicsRaster._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsVideoStream._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsVideoStream._get_property(self, attrname)
        if IAgStkGraphicsRasterStream._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsRasterStream._get_property(self, attrname)
        if IAgStkGraphicsRaster._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsRaster._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsVideoStream.")

agcls.AgClassCatalog.add_catalog_entry("{80D82D96-D87B-4910-B8BB-1FBE9E121A4F}", AgStkGraphicsVideoStream)


class AgStkGraphicsKmlContainer(IAgStkGraphicsKmlContainer, IAgStkGraphicsKmlFeature):
    """A KmlContainer contains a collection of children kml features."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsKmlContainer.__init__(self, sourceObject)
        IAgStkGraphicsKmlFeature.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsKmlContainer._private_init(self, intf)
        IAgStkGraphicsKmlFeature._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsKmlContainer._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsKmlContainer._get_property(self, attrname)
        if IAgStkGraphicsKmlFeature._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsKmlFeature._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsKmlContainer.")

agcls.AgClassCatalog.add_catalog_entry("{24AA1395-417E-4845-A9D2-61C4D59BCABF}", AgStkGraphicsKmlContainer)


class AgStkGraphicsKmlDocument(IAgStkGraphicsKmlDocument, IAgStkGraphicsKmlContainer, IAgStkGraphicsKmlFeature):
    """A KML document."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsKmlDocument.__init__(self, sourceObject)
        IAgStkGraphicsKmlContainer.__init__(self, sourceObject)
        IAgStkGraphicsKmlFeature.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsKmlDocument._private_init(self, intf)
        IAgStkGraphicsKmlContainer._private_init(self, intf)
        IAgStkGraphicsKmlFeature._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsKmlDocument._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsKmlDocument._get_property(self, attrname)
        if IAgStkGraphicsKmlContainer._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsKmlContainer._get_property(self, attrname)
        if IAgStkGraphicsKmlFeature._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsKmlFeature._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsKmlDocument.")

agcls.AgClassCatalog.add_catalog_entry("{130689C0-43C6-4C34-9AC7-252E155E9F66}", AgStkGraphicsKmlDocument)


class AgStkGraphicsKmlFeature(IAgStkGraphicsKmlFeature):
    """A KML feature."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsKmlFeature.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsKmlFeature._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsKmlFeature._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsKmlFeature._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsKmlFeature.")

agcls.AgClassCatalog.add_catalog_entry("{20C290F8-9102-4960-AD19-F5EFC321F796}", AgStkGraphicsKmlFeature)


class AgStkGraphicsKmlFolder(IAgStkGraphicsKmlFolder, IAgStkGraphicsKmlContainer, IAgStkGraphicsKmlFeature):
    """A KML folder."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsKmlFolder.__init__(self, sourceObject)
        IAgStkGraphicsKmlContainer.__init__(self, sourceObject)
        IAgStkGraphicsKmlFeature.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsKmlFolder._private_init(self, intf)
        IAgStkGraphicsKmlContainer._private_init(self, intf)
        IAgStkGraphicsKmlFeature._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsKmlFolder._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsKmlFolder._get_property(self, attrname)
        if IAgStkGraphicsKmlContainer._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsKmlContainer._get_property(self, attrname)
        if IAgStkGraphicsKmlFeature._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsKmlFeature._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsKmlFolder.")

agcls.AgClassCatalog.add_catalog_entry("{C7BE1A8D-28BF-4298-AE7D-656B40FFB3D0}", AgStkGraphicsKmlFolder)


class AgStkGraphicsKmlGraphics(IAgStkGraphicsKmlGraphics):
    """Provides loading and unloading of kml documents for a particular central body."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsKmlGraphics.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsKmlGraphics._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsKmlGraphics._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsKmlGraphics._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsKmlGraphics.")

agcls.AgClassCatalog.add_catalog_entry("{A094F5DE-8BF2-4079-8009-0450D2E4EF11}", AgStkGraphicsKmlGraphics)


class AgStkGraphicsKmlNetworkLink(IAgStkGraphicsKmlNetworkLink, IAgStkGraphicsKmlFeature):
    """A KML network link."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsKmlNetworkLink.__init__(self, sourceObject)
        IAgStkGraphicsKmlFeature.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsKmlNetworkLink._private_init(self, intf)
        IAgStkGraphicsKmlFeature._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsKmlNetworkLink._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsKmlNetworkLink._get_property(self, attrname)
        if IAgStkGraphicsKmlFeature._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsKmlFeature._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsKmlNetworkLink.")

agcls.AgClassCatalog.add_catalog_entry("{BD2ECA7D-919B-4C64-8AA1-E503A80EF3EA}", AgStkGraphicsKmlNetworkLink)


class AgStkGraphicsMarkerBatchPrimitive(IAgStkGraphicsMarkerBatchPrimitive, IAgStkGraphicsPrimitive):
    """ Renders one or more markers in the 3D scene. Markers are 2D images that always face the viewer which can be sized in pixels or meters. Markers are also referred to as sprites or billboards..."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsMarkerBatchPrimitive.__init__(self, sourceObject)
        IAgStkGraphicsPrimitive.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsMarkerBatchPrimitive._private_init(self, intf)
        IAgStkGraphicsPrimitive._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsMarkerBatchPrimitive._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsMarkerBatchPrimitive._get_property(self, attrname)
        if IAgStkGraphicsPrimitive._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsPrimitive._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsMarkerBatchPrimitive.")

agcls.AgClassCatalog.add_catalog_entry("{C7F4992D-BBE2-4C68-BB4E-51BB8CD2D124}", AgStkGraphicsMarkerBatchPrimitive)


class AgStkGraphicsMarkerBatchPrimitiveOptionalParameters(IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters):
    """Optional per-marker parameters for marker batch primitive that overrides the marker batch's per-batch parameters..."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsMarkerBatchPrimitiveOptionalParameters.")

agcls.AgClassCatalog.add_catalog_entry("{24750753-2036-4221-83F0-F9045DCA0A5D}", AgStkGraphicsMarkerBatchPrimitiveOptionalParameters)


class AgStkGraphicsMaximumCountPathPrimitiveUpdatePolicy(IAgStkGraphicsMaximumCountPathPrimitiveUpdatePolicy, IAgStkGraphicsPathPrimitiveUpdatePolicy):
    """path primitive update policy that removes points from remove location when the number of points in the path exceeds maximum count."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsMaximumCountPathPrimitiveUpdatePolicy.__init__(self, sourceObject)
        IAgStkGraphicsPathPrimitiveUpdatePolicy.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsMaximumCountPathPrimitiveUpdatePolicy._private_init(self, intf)
        IAgStkGraphicsPathPrimitiveUpdatePolicy._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsMaximumCountPathPrimitiveUpdatePolicy._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsMaximumCountPathPrimitiveUpdatePolicy._get_property(self, attrname)
        if IAgStkGraphicsPathPrimitiveUpdatePolicy._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsPathPrimitiveUpdatePolicy._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsMaximumCountPathPrimitiveUpdatePolicy.")

agcls.AgClassCatalog.add_catalog_entry("{4D41C220-2CE4-4CA1-942A-9AF4F7F34C4A}", AgStkGraphicsMaximumCountPathPrimitiveUpdatePolicy)


class AgStkGraphicsModelArticulation(IAgStkGraphicsModelArticulation):
    """A model articulation identifies geometry on the model and is a collection of transformations that can be applied to that geometry."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsModelArticulation.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsModelArticulation._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsModelArticulation._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsModelArticulation._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsModelArticulation.")

agcls.AgClassCatalog.add_catalog_entry("{A9E72E72-17D6-4D7C-A4EF-5A970232ED93}", AgStkGraphicsModelArticulation)


class AgStkGraphicsModelArticulationCollection(IAgStkGraphicsModelArticulationCollection):
    """A collection containing a model primitive's available articulations. A model articulation identifies geometry on the model and is a collection of transformations that can be applied to that geometry."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsModelArticulationCollection.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsModelArticulationCollection._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsModelArticulationCollection._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsModelArticulationCollection._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsModelArticulationCollection.")

agcls.AgClassCatalog.add_catalog_entry("{ACC4920A-6D6B-4374-937F-2469F439ABA8}", AgStkGraphicsModelArticulationCollection)


class AgStkGraphicsModelPrimitive(IAgStkGraphicsModelPrimitive, IAgStkGraphicsPrimitive):
    """The model primitive loads and renders <a href='https://www.khronos.org/collada/'>COLLADA</a> (DAE) and AGI <a href='https://support.agi.com/3d-models'>MDL</a> (MDL) models."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsModelPrimitive.__init__(self, sourceObject)
        IAgStkGraphicsPrimitive.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsModelPrimitive._private_init(self, intf)
        IAgStkGraphicsPrimitive._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsModelPrimitive._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsModelPrimitive._get_property(self, attrname)
        if IAgStkGraphicsPrimitive._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsPrimitive._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsModelPrimitive.")

agcls.AgClassCatalog.add_catalog_entry("{FD89B6D8-F106-4929-889A-3304A9CDBE97}", AgStkGraphicsModelPrimitive)


class AgStkGraphicsModelTransformation(IAgStkGraphicsModelTransformation):
    """A model transformation defines a transformation that is applied to geometry on a model primitive. That geometry is identified by the model articulation which contains the transformation..."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsModelTransformation.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsModelTransformation._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsModelTransformation._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsModelTransformation._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsModelTransformation.")

agcls.AgClassCatalog.add_catalog_entry("{BC56F0E9-D0F3-4C3E-9AAA-AB5AB255927C}", AgStkGraphicsModelTransformation)


class AgStkGraphicsOverlay(IAgStkGraphicsOverlay, IAgStkGraphicsScreenOverlayContainer):
    """A visible element drawn in screen space. Overlays are useful for floating logos, heads up displays, and integrating user interfaces into the 3D window."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsOverlay.__init__(self, sourceObject)
        IAgStkGraphicsScreenOverlayContainer.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsOverlay._private_init(self, intf)
        IAgStkGraphicsScreenOverlayContainer._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsOverlay._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsOverlay._get_property(self, attrname)
        if IAgStkGraphicsScreenOverlayContainer._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsScreenOverlayContainer._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsOverlay.")

agcls.AgClassCatalog.add_catalog_entry("{6D9C8A3B-0EC8-428F-BC05-1F30315E92DC}", AgStkGraphicsOverlay)


class AgStkGraphicsPathPrimitive(IAgStkGraphicsPathPrimitive, IAgStkGraphicsPrimitive):
    """Renders a line to the 3D scene. Similar to the polyline primitive; however, the PathPrimitive was designed for the efficient addition/removal of points to/from the front or back of the line."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsPathPrimitive.__init__(self, sourceObject)
        IAgStkGraphicsPrimitive.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsPathPrimitive._private_init(self, intf)
        IAgStkGraphicsPrimitive._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsPathPrimitive._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsPathPrimitive._get_property(self, attrname)
        if IAgStkGraphicsPrimitive._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsPrimitive._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsPathPrimitive.")

agcls.AgClassCatalog.add_catalog_entry("{AFDCAA13-BE39-4E17-9AC5-06C08933A910}", AgStkGraphicsPathPrimitive)


class AgStkGraphicsPickResult(IAgStkGraphicsPickResult):
    """A single result from Pick."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsPickResult.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsPickResult._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsPickResult._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsPickResult._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsPickResult.")

agcls.AgClassCatalog.add_catalog_entry("{E007C42E-13D7-4006-992A-B996CEA3BE49}", AgStkGraphicsPickResult)


class AgStkGraphicsPixelSizeDisplayCondition(IAgStkGraphicsPixelSizeDisplayCondition, IAgStkGraphicsDisplayCondition):
    """Defines an inclusive interval, in pixels, that determines when an object, such as a primitive, is rendered based on the number of pixels the object's bounding sphere (or in the case of screen overlays, bounding rectangle) covers on the screen..."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsPixelSizeDisplayCondition.__init__(self, sourceObject)
        IAgStkGraphicsDisplayCondition.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsPixelSizeDisplayCondition._private_init(self, intf)
        IAgStkGraphicsDisplayCondition._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsPixelSizeDisplayCondition._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsPixelSizeDisplayCondition._get_property(self, attrname)
        if IAgStkGraphicsDisplayCondition._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsDisplayCondition._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsPixelSizeDisplayCondition.")

agcls.AgClassCatalog.add_catalog_entry("{26B1DA4F-DA20-4E44-A98D-D54CC67821B8}", AgStkGraphicsPixelSizeDisplayCondition)


class AgStkGraphicsPointBatchPrimitive(IAgStkGraphicsPointBatchPrimitive, IAgStkGraphicsPrimitive):
    """ Renders one or more points in the 3D scene. Each point in the batch has a unique position and an optional color. All points in the batch share the same pixel size. For best performance, avoid creating lots of batches with only a few points each..."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsPointBatchPrimitive.__init__(self, sourceObject)
        IAgStkGraphicsPrimitive.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsPointBatchPrimitive._private_init(self, intf)
        IAgStkGraphicsPrimitive._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsPointBatchPrimitive._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsPointBatchPrimitive._get_property(self, attrname)
        if IAgStkGraphicsPrimitive._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsPrimitive._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsPointBatchPrimitive.")

agcls.AgClassCatalog.add_catalog_entry("{D8019323-F9C3-4238-BB4C-CD917C83E0F6}", AgStkGraphicsPointBatchPrimitive)


class AgStkGraphicsPointBatchPrimitiveOptionalParameters(IAgStkGraphicsPointBatchPrimitiveOptionalParameters):
    """Optional per-point parameters for point batch primitive that overrides the point batch primitive's global parameters..."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsPointBatchPrimitiveOptionalParameters.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsPointBatchPrimitiveOptionalParameters._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsPointBatchPrimitiveOptionalParameters._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsPointBatchPrimitiveOptionalParameters._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsPointBatchPrimitiveOptionalParameters.")

agcls.AgClassCatalog.add_catalog_entry("{944f2ade-d0e5-4896-a1e2-28b1c9e74f08}", AgStkGraphicsPointBatchPrimitiveOptionalParameters)


class AgStkGraphicsPolylinePrimitive(IAgStkGraphicsPolylinePrimitive, IAgStkGraphicsPrimitive):
    """Renders a polyline in the 3D scene. Each line segment may have a different color. A polyline can be constructed with a position interpolator to render great arcs or rhumb lines."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsPolylinePrimitive.__init__(self, sourceObject)
        IAgStkGraphicsPrimitive.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsPolylinePrimitive._private_init(self, intf)
        IAgStkGraphicsPrimitive._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsPolylinePrimitive._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsPolylinePrimitive._get_property(self, attrname)
        if IAgStkGraphicsPrimitive._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsPrimitive._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsPolylinePrimitive.")

agcls.AgClassCatalog.add_catalog_entry("{F6E930C1-39F1-471B-A6F3-AFE651B00A95}", AgStkGraphicsPolylinePrimitive)


class AgStkGraphicsPolylinePrimitiveOptionalParameters(IAgStkGraphicsPolylinePrimitiveOptionalParameters):
    """Optional per-point or per-segment parameters for polyline primitive that overrides the polyline primitive's global parameters..."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsPolylinePrimitiveOptionalParameters.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsPolylinePrimitiveOptionalParameters._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsPolylinePrimitiveOptionalParameters._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsPolylinePrimitiveOptionalParameters._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsPolylinePrimitiveOptionalParameters.")

agcls.AgClassCatalog.add_catalog_entry("{eee51ba6-73ae-4626-9fac-62a0f82cb3d1}", AgStkGraphicsPolylinePrimitiveOptionalParameters)


class AgStkGraphicsPositionInterpolator(IAgStkGraphicsPositionInterpolator):
    """Position interpolators compute positions based on a collection of input positions. Position interpolators are used in conjunction with the polyline primitive to render things such as great arcs and rhumb lines."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsPositionInterpolator.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsPositionInterpolator._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsPositionInterpolator._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsPositionInterpolator._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsPositionInterpolator.")

agcls.AgClassCatalog.add_catalog_entry("{3D14E044-4128-4F60-9F08-797AA09205B5}", AgStkGraphicsPositionInterpolator)


class AgStkGraphicsPrimitive(IAgStkGraphicsPrimitive):
    """Primitives represent objects rendered in the 3D scene."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsPrimitive.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsPrimitive._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsPrimitive._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsPrimitive._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsPrimitive.")

agcls.AgClassCatalog.add_catalog_entry("{0BE64D00-03FF-41C1-8F8E-DCDB5D260FCE}", AgStkGraphicsPrimitive)


class AgStkGraphicsPrimitiveManager(IAgStkGraphicsPrimitiveManager):
    """The primitive manager contains spatial data structures used to efficiently render primitives. Once a primitive is constructed, it must be added to the primitive manager before it will be rendered."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsPrimitiveManager.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsPrimitiveManager._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsPrimitiveManager._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsPrimitiveManager._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsPrimitiveManager.")

agcls.AgClassCatalog.add_catalog_entry("{29884E1F-F498-4FED-9B83-AFC57A4BB09B}", AgStkGraphicsPrimitiveManager)


class AgStkGraphicsRasterImageGlobeOverlay(IAgStkGraphicsRasterImageGlobeOverlay, IAgStkGraphicsGlobeImageOverlay, IAgStkGraphicsGlobeOverlay):
    """A globe image overlay for handling rasters."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsRasterImageGlobeOverlay.__init__(self, sourceObject)
        IAgStkGraphicsGlobeImageOverlay.__init__(self, sourceObject)
        IAgStkGraphicsGlobeOverlay.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsRasterImageGlobeOverlay._private_init(self, intf)
        IAgStkGraphicsGlobeImageOverlay._private_init(self, intf)
        IAgStkGraphicsGlobeOverlay._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsRasterImageGlobeOverlay._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsRasterImageGlobeOverlay._get_property(self, attrname)
        if IAgStkGraphicsGlobeImageOverlay._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsGlobeImageOverlay._get_property(self, attrname)
        if IAgStkGraphicsGlobeOverlay._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsGlobeOverlay._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsRasterImageGlobeOverlay.")

agcls.AgClassCatalog.add_catalog_entry("{49EC3E96-9494-4D95-A9C2-C722C46197FC}", AgStkGraphicsRasterImageGlobeOverlay)


class AgStkGraphicsRhumbLineInterpolator(IAgStkGraphicsRhumbLineInterpolator, IAgStkGraphicsPositionInterpolator):
    """The rhumb line interpolator computes interpolated positions along a rhumb line. Rhumb lines are lines of constant bearing. They appear as straight lines on a Mercator 2D map projection and are well suited to navigation."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsRhumbLineInterpolator.__init__(self, sourceObject)
        IAgStkGraphicsPositionInterpolator.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsRhumbLineInterpolator._private_init(self, intf)
        IAgStkGraphicsPositionInterpolator._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsRhumbLineInterpolator._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsRhumbLineInterpolator._get_property(self, attrname)
        if IAgStkGraphicsPositionInterpolator._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsPositionInterpolator._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsRhumbLineInterpolator.")

agcls.AgClassCatalog.add_catalog_entry("{E791A602-85BA-4413-9C8D-479D1692254C}", AgStkGraphicsRhumbLineInterpolator)


class AgStkGraphicsScene(IAgStkGraphicsScene):
    """A scene provides properties and functionality that are reflected in the rendering of the globe control that it is associated with. An globe control's scene is available from the scene property..."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsScene.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsScene._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsScene._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsScene._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsScene.")

agcls.AgClassCatalog.add_catalog_entry("{E664A9F1-8A89-4B4C-9AA2-E5BEB603AF3C}", AgStkGraphicsScene)


class AgStkGraphicsSceneDisplayCondition(IAgStkGraphicsSceneDisplayCondition, IAgStkGraphicsDisplayCondition):
    """A display condition used to control what scene or scenes an object, such as a primitive, is rendered in. This is used to show an object in some scenes and hide it in others."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsSceneDisplayCondition.__init__(self, sourceObject)
        IAgStkGraphicsDisplayCondition.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsSceneDisplayCondition._private_init(self, intf)
        IAgStkGraphicsDisplayCondition._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsSceneDisplayCondition._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsSceneDisplayCondition._get_property(self, attrname)
        if IAgStkGraphicsDisplayCondition._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsDisplayCondition._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsSceneDisplayCondition.")

agcls.AgClassCatalog.add_catalog_entry("{8074B463-1740-4C65-870C-E231589EE5CE}", AgStkGraphicsSceneDisplayCondition)


class AgStkGraphicsSceneManager(IAgStkGraphicsSceneManager):
    """The static scene manager class provides global properties and functionality that apply to all scenes and thus affect the rendering of every globe control..."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsSceneManager.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsSceneManager._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsSceneManager._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsSceneManager._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsSceneManager.")

agcls.AgClassCatalog.add_catalog_entry("{B671433F-CA75-4628-B84D-4878A247AFC3}", AgStkGraphicsSceneManager)


class AgStkGraphicsScreenOverlay(IAgStkGraphicsScreenOverlay, IAgStkGraphicsOverlay, IAgStkGraphicsScreenOverlayContainer):
    """A visible element drawn in screen space. Overlays are useful for floating logos, heads up displays, and integrating user interfaces into the 3D window."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsScreenOverlay.__init__(self, sourceObject)
        IAgStkGraphicsOverlay.__init__(self, sourceObject)
        IAgStkGraphicsScreenOverlayContainer.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsScreenOverlay._private_init(self, intf)
        IAgStkGraphicsOverlay._private_init(self, intf)
        IAgStkGraphicsScreenOverlayContainer._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsScreenOverlay._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsScreenOverlay._get_property(self, attrname)
        if IAgStkGraphicsOverlay._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsOverlay._get_property(self, attrname)
        if IAgStkGraphicsScreenOverlayContainer._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsScreenOverlayContainer._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsScreenOverlay.")

agcls.AgClassCatalog.add_catalog_entry("{B50A73BA-5299-4746-B30B-EEB80699546E}", AgStkGraphicsScreenOverlay)


class AgStkGraphicsScreenOverlayCollection(IAgStkGraphicsScreenOverlayCollection, IAgStkGraphicsScreenOverlayCollectionBase):
    """A collection of screen overlays."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsScreenOverlayCollection.__init__(self, sourceObject)
        IAgStkGraphicsScreenOverlayCollectionBase.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsScreenOverlayCollection._private_init(self, intf)
        IAgStkGraphicsScreenOverlayCollectionBase._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsScreenOverlayCollection._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsScreenOverlayCollection._get_property(self, attrname)
        if IAgStkGraphicsScreenOverlayCollectionBase._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsScreenOverlayCollectionBase._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsScreenOverlayCollection.")

agcls.AgClassCatalog.add_catalog_entry("{F75B7693-A40E-4B54-AB6F-EE8F974D2E6C}", AgStkGraphicsScreenOverlayCollection)


class AgStkGraphicsScreenOverlayManager(IAgStkGraphicsScreenOverlayManager, IAgStkGraphicsScreenOverlayCollectionBase, IAgStkGraphicsScreenOverlayContainer):
    """The top-level container for screen overlays. All child screen overlays that are added to this container are specified relative to the overall globe control."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsScreenOverlayManager.__init__(self, sourceObject)
        IAgStkGraphicsScreenOverlayCollectionBase.__init__(self, sourceObject)
        IAgStkGraphicsScreenOverlayContainer.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsScreenOverlayManager._private_init(self, intf)
        IAgStkGraphicsScreenOverlayCollectionBase._private_init(self, intf)
        IAgStkGraphicsScreenOverlayContainer._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsScreenOverlayManager._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsScreenOverlayManager._get_property(self, attrname)
        if IAgStkGraphicsScreenOverlayCollectionBase._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsScreenOverlayCollectionBase._get_property(self, attrname)
        if IAgStkGraphicsScreenOverlayContainer._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsScreenOverlayContainer._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsScreenOverlayManager.")

agcls.AgClassCatalog.add_catalog_entry("{9853EC1E-531C-4494-B308-BC6644CF672C}", AgStkGraphicsScreenOverlayManager)


class AgStkGraphicsScreenOverlayPickResult(IAgStkGraphicsScreenOverlayPickResult):
    """Describes a picked screen overlay as a result of a call to pick screen overlays."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsScreenOverlayPickResult.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsScreenOverlayPickResult._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsScreenOverlayPickResult._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsScreenOverlayPickResult._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsScreenOverlayPickResult.")

agcls.AgClassCatalog.add_catalog_entry("{6E7F318E-F7E5-4B19-A532-50EC60EF09FA}", AgStkGraphicsScreenOverlayPickResult)


class AgStkGraphicsSolidPrimitive(IAgStkGraphicsSolidPrimitive, IAgStkGraphicsPrimitive):
    """Renders filled solid objects and their outlines. Example solids include boxes and ellipsoids. Various effects are supported, such as displaying the solid's silhouette, and hiding the outline of the backside of the solid..."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsSolidPrimitive.__init__(self, sourceObject)
        IAgStkGraphicsPrimitive.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsSolidPrimitive._private_init(self, intf)
        IAgStkGraphicsPrimitive._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsSolidPrimitive._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsSolidPrimitive._get_property(self, attrname)
        if IAgStkGraphicsPrimitive._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsPrimitive._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsSolidPrimitive.")

agcls.AgClassCatalog.add_catalog_entry("{12343DC0-99FF-48B6-9D93-9B7A2CE34DB9}", AgStkGraphicsSolidPrimitive)


class AgStkGraphicsStereoscopic(IAgStkGraphicsStereoscopic):
    """Gets the stereoscopic options for all Scenes. To use a particular stereoscopic display mode, ensure that your system supports the feature and that it is enabled."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsStereoscopic.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsStereoscopic._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsStereoscopic._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsStereoscopic._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsStereoscopic.")

agcls.AgClassCatalog.add_catalog_entry("{5FDA997C-0450-4574-BFD9-D803A3AA6167}", AgStkGraphicsStereoscopic)


class AgStkGraphicsSurfaceMeshPrimitive(IAgStkGraphicsSurfaceMeshPrimitive, IAgStkGraphicsPrimitive):
    """A triangle mesh primitive for meshes on the surface that need to conform to terrain."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsSurfaceMeshPrimitive.__init__(self, sourceObject)
        IAgStkGraphicsPrimitive.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsSurfaceMeshPrimitive._private_init(self, intf)
        IAgStkGraphicsPrimitive._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsSurfaceMeshPrimitive._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsSurfaceMeshPrimitive._get_property(self, attrname)
        if IAgStkGraphicsPrimitive._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsPrimitive._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsSurfaceMeshPrimitive.")

agcls.AgClassCatalog.add_catalog_entry("{C4B2DB74-EBA8-4B18-8BE4-372FCA665F5D}", AgStkGraphicsSurfaceMeshPrimitive)


class AgStkGraphicsTerrainCollection(IAgStkGraphicsTerrainCollection):
    """A collection of terrain overlay objects."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsTerrainCollection.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsTerrainCollection._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsTerrainCollection._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsTerrainCollection._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsTerrainCollection.")

agcls.AgClassCatalog.add_catalog_entry("{168D1247-7208-45C3-AF31-7E4009DE2EA7}", AgStkGraphicsTerrainCollection)


class AgStkGraphicsTerrainOverlay(IAgStkGraphicsTerrainOverlay, IAgStkGraphicsGlobeOverlay):
    """A globe overlay which shows terrain."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsTerrainOverlay.__init__(self, sourceObject)
        IAgStkGraphicsGlobeOverlay.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsTerrainOverlay._private_init(self, intf)
        IAgStkGraphicsGlobeOverlay._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsTerrainOverlay._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsTerrainOverlay._get_property(self, attrname)
        if IAgStkGraphicsGlobeOverlay._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsGlobeOverlay._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsTerrainOverlay.")

agcls.AgClassCatalog.add_catalog_entry("{C1640FF1-07BB-4584-940C-50BDD48CFE14}", AgStkGraphicsTerrainOverlay)


class AgStkGraphicsTextBatchPrimitive(IAgStkGraphicsTextBatchPrimitive, IAgStkGraphicsPrimitive):
    """ Renders one or more strings in the 3D scene.  For best performance, avoid creating lots of batches with only a few strings each. See the Batching Performance Overview. """
    def __init__(self, sourceObject=None):
        IAgStkGraphicsTextBatchPrimitive.__init__(self, sourceObject)
        IAgStkGraphicsPrimitive.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsTextBatchPrimitive._private_init(self, intf)
        IAgStkGraphicsPrimitive._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsTextBatchPrimitive._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsTextBatchPrimitive._get_property(self, attrname)
        if IAgStkGraphicsPrimitive._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsPrimitive._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsTextBatchPrimitive.")

agcls.AgClassCatalog.add_catalog_entry("{EEE49615-F2F3-4810-B877-4C7729F56DD1}", AgStkGraphicsTextBatchPrimitive)


class AgStkGraphicsTextBatchPrimitiveOptionalParameters(IAgStkGraphicsTextBatchPrimitiveOptionalParameters):
    """Optional per-string and per-batch parameters for text batch primitive..."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsTextBatchPrimitiveOptionalParameters.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsTextBatchPrimitiveOptionalParameters._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsTextBatchPrimitiveOptionalParameters._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsTextBatchPrimitiveOptionalParameters._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsTextBatchPrimitiveOptionalParameters.")

agcls.AgClassCatalog.add_catalog_entry("{D68422E0-31FC-4E61-9A7C-6E4BCB261A9D}", AgStkGraphicsTextBatchPrimitiveOptionalParameters)


class AgStkGraphicsTextOverlay(IAgStkGraphicsTextOverlay, IAgStkGraphicsScreenOverlay, IAgStkGraphicsOverlay, IAgStkGraphicsScreenOverlayContainer):
    """A rectangular overlay that contains text."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsTextOverlay.__init__(self, sourceObject)
        IAgStkGraphicsScreenOverlay.__init__(self, sourceObject)
        IAgStkGraphicsOverlay.__init__(self, sourceObject)
        IAgStkGraphicsScreenOverlayContainer.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsTextOverlay._private_init(self, intf)
        IAgStkGraphicsScreenOverlay._private_init(self, intf)
        IAgStkGraphicsOverlay._private_init(self, intf)
        IAgStkGraphicsScreenOverlayContainer._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsTextOverlay._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsTextOverlay._get_property(self, attrname)
        if IAgStkGraphicsScreenOverlay._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsScreenOverlay._get_property(self, attrname)
        if IAgStkGraphicsOverlay._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsOverlay._get_property(self, attrname)
        if IAgStkGraphicsScreenOverlayContainer._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsScreenOverlayContainer._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsTextOverlay.")

agcls.AgClassCatalog.add_catalog_entry("{46BE31F3-1A5B-4B51-AA77-27CCA844F5CD}", AgStkGraphicsTextOverlay)


class AgStkGraphicsTextureMatrix(IAgStkGraphicsTextureMatrix):
    """A 4 by 4 matrix applied to a texture coordinate."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsTextureMatrix.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsTextureMatrix._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsTextureMatrix._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsTextureMatrix._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsTextureMatrix.")

agcls.AgClassCatalog.add_catalog_entry("{E05D3E06-18C5-49DE-B9AC-B2245C83E62B}", AgStkGraphicsTextureMatrix)


class AgStkGraphicsTextureScreenOverlay(IAgStkGraphicsTextureScreenOverlay, IAgStkGraphicsScreenOverlay, IAgStkGraphicsOverlay, IAgStkGraphicsScreenOverlayContainer):
    """A rectangular overlay that can be assigned a texture."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsTextureScreenOverlay.__init__(self, sourceObject)
        IAgStkGraphicsScreenOverlay.__init__(self, sourceObject)
        IAgStkGraphicsOverlay.__init__(self, sourceObject)
        IAgStkGraphicsScreenOverlayContainer.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsTextureScreenOverlay._private_init(self, intf)
        IAgStkGraphicsScreenOverlay._private_init(self, intf)
        IAgStkGraphicsOverlay._private_init(self, intf)
        IAgStkGraphicsScreenOverlayContainer._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsTextureScreenOverlay._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsTextureScreenOverlay._get_property(self, attrname)
        if IAgStkGraphicsScreenOverlay._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsScreenOverlay._get_property(self, attrname)
        if IAgStkGraphicsOverlay._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsOverlay._get_property(self, attrname)
        if IAgStkGraphicsScreenOverlayContainer._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsScreenOverlayContainer._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsTextureScreenOverlay.")

agcls.AgClassCatalog.add_catalog_entry("{51136098-508C-4DD3-B39C-D342235E58BD}", AgStkGraphicsTextureScreenOverlay)


class AgStkGraphicsTimeIntervalDisplayCondition(IAgStkGraphicsTimeIntervalDisplayCondition, IAgStkGraphicsDisplayCondition):
    """Defines an inclusive time interval that determines when an object, such as a primitive, is rendered based on the current animation time ."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsTimeIntervalDisplayCondition.__init__(self, sourceObject)
        IAgStkGraphicsDisplayCondition.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsTimeIntervalDisplayCondition._private_init(self, intf)
        IAgStkGraphicsDisplayCondition._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsTimeIntervalDisplayCondition._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsTimeIntervalDisplayCondition._get_property(self, attrname)
        if IAgStkGraphicsDisplayCondition._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsDisplayCondition._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsTimeIntervalDisplayCondition.")

agcls.AgClassCatalog.add_catalog_entry("{256AACC3-3E56-4BA6-80F9-15BD968C3863}", AgStkGraphicsTimeIntervalDisplayCondition)


class AgStkGraphicsTriangleMeshPrimitive(IAgStkGraphicsTriangleMeshPrimitive, IAgStkGraphicsPrimitive):
    """Renders a triangle mesh in the 3D scene. Examples of triangle meshes includes polygons on the globe (e.g. states or countries), terrain and imagery extents, ellipses, and extrusions."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsTriangleMeshPrimitive.__init__(self, sourceObject)
        IAgStkGraphicsPrimitive.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsTriangleMeshPrimitive._private_init(self, intf)
        IAgStkGraphicsPrimitive._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsTriangleMeshPrimitive._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsTriangleMeshPrimitive._get_property(self, attrname)
        if IAgStkGraphicsPrimitive._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsPrimitive._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsTriangleMeshPrimitive.")

agcls.AgClassCatalog.add_catalog_entry("{DA3D4743-D0D9-49B8-8037-3DDC3075170E}", AgStkGraphicsTriangleMeshPrimitive)


class AgStkGraphicsTriangleMeshPrimitiveOptionalParameters(IAgStkGraphicsTriangleMeshPrimitiveOptionalParameters):
    """Optional parameters for triangle mesh primitive..."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsTriangleMeshPrimitiveOptionalParameters.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsTriangleMeshPrimitiveOptionalParameters._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsTriangleMeshPrimitiveOptionalParameters._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsTriangleMeshPrimitiveOptionalParameters._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsTriangleMeshPrimitiveOptionalParameters.")

agcls.AgClassCatalog.add_catalog_entry("{07985409-9BA1-406C-8A91-D4E99DDB406F}", AgStkGraphicsTriangleMeshPrimitiveOptionalParameters)


class AgStkGraphicsVectorPrimitive(IAgStkGraphicsVectorPrimitive, IAgStkGraphicsPrimitive):
    """Renders a vector in the 3D scene. A vector is defined by a source (given by an ISystem) and a direction (given by an IVector or IPoint). Length is auto-calculated or can be set separately."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsVectorPrimitive.__init__(self, sourceObject)
        IAgStkGraphicsPrimitive.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsVectorPrimitive._private_init(self, intf)
        IAgStkGraphicsPrimitive._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsVectorPrimitive._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsVectorPrimitive._get_property(self, attrname)
        if IAgStkGraphicsPrimitive._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsPrimitive._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsVectorPrimitive.")

agcls.AgClassCatalog.add_catalog_entry("{8DE433D5-0E13-44ED-B3CF-DF380B8BEA7D}", AgStkGraphicsVectorPrimitive)


class AgStkGraphicsBoxTriangulatorInitializer(IAgStkGraphicsBoxTriangulatorInitializer):
    """Triangulates a box. It is recommended to visualize the box using a solid primitive. Although, if only the fill is desired for visualization, a triangle mesh primitive with render back then front faces set to true can be used..."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsBoxTriangulatorInitializer.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsBoxTriangulatorInitializer._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsBoxTriangulatorInitializer._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsBoxTriangulatorInitializer._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsBoxTriangulatorInitializer.")

agcls.AgClassCatalog.add_catalog_entry("{F5AA6E13-2989-46FD-8BA7-341870EE56CB}", AgStkGraphicsBoxTriangulatorInitializer)


class AgStkGraphicsCylinderTriangulatorInitializer(IAgStkGraphicsCylinderTriangulatorInitializer):
    """Triangulates a cylinder. It is recommended to visualize the cylinder using a solid primitive. Although, if only the fill is desired for visualization, a triangle mesh primitive with render back then front faces set to true can be used..."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsCylinderTriangulatorInitializer.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsCylinderTriangulatorInitializer._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsCylinderTriangulatorInitializer._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsCylinderTriangulatorInitializer._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsCylinderTriangulatorInitializer.")

agcls.AgClassCatalog.add_catalog_entry("{351F63E3-5430-4B7C-8811-1353D7FDBA79}", AgStkGraphicsCylinderTriangulatorInitializer)


class AgStkGraphicsEllipsoidTriangulatorInitializer(IAgStkGraphicsEllipsoidTriangulatorInitializer):
    """Triangulates an ellipsoid. It is recommended to visualize the ellipsoid using a solid primitive. Although, if only the fill is desired for visualization, a triangle mesh primitive with render back then front faces set to true can be used..."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsEllipsoidTriangulatorInitializer.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsEllipsoidTriangulatorInitializer._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsEllipsoidTriangulatorInitializer._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsEllipsoidTriangulatorInitializer._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsEllipsoidTriangulatorInitializer.")

agcls.AgClassCatalog.add_catalog_entry("{DEBC2954-C0E9-4562-8AD6-A93E7EDD3E82}", AgStkGraphicsEllipsoidTriangulatorInitializer)


class AgStkGraphicsExtrudedPolylineTriangulatorInitializer(IAgStkGraphicsExtrudedPolylineTriangulatorInitializer):
    """Triangulates a polyline into an extrusion with bottom and top boundaries."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsExtrudedPolylineTriangulatorInitializer.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsExtrudedPolylineTriangulatorInitializer._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsExtrudedPolylineTriangulatorInitializer._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsExtrudedPolylineTriangulatorInitializer._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsExtrudedPolylineTriangulatorInitializer.")

agcls.AgClassCatalog.add_catalog_entry("{9DD61791-420A-401D-8C10-251999CA274B}", AgStkGraphicsExtrudedPolylineTriangulatorInitializer)


class AgStkGraphicsSurfaceExtentTriangulatorInitializer(IAgStkGraphicsSurfaceExtentTriangulatorInitializer):
    """Triangulates an extent on a central body into a triangle mesh and a surrounding boundary. The mesh is commonly visualized with the triangle mesh primitive or surface mesh primitive. The boundary is commonly visualized with the polyline primitive."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsSurfaceExtentTriangulatorInitializer.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsSurfaceExtentTriangulatorInitializer._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsSurfaceExtentTriangulatorInitializer._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsSurfaceExtentTriangulatorInitializer._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsSurfaceExtentTriangulatorInitializer.")

agcls.AgClassCatalog.add_catalog_entry("{F86CAF5F-4B95-4CD0-9E8A-7C04AF8B7E9B}", AgStkGraphicsSurfaceExtentTriangulatorInitializer)


class AgStkGraphicsSurfacePolygonTriangulatorInitializer(IAgStkGraphicsSurfacePolygonTriangulatorInitializer):
    """Triangulates a polygon, with an optional hole, on a central body, into a triangle mesh and a surrounding boundary. The mesh is commonly visualized with the triangle mesh primitive or surface mesh primitive..."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsSurfacePolygonTriangulatorInitializer.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsSurfacePolygonTriangulatorInitializer._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsSurfacePolygonTriangulatorInitializer._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsSurfacePolygonTriangulatorInitializer._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsSurfacePolygonTriangulatorInitializer.")

agcls.AgClassCatalog.add_catalog_entry("{FB4D2919-C9DB-4C93-A64B-35A9EB884E6B}", AgStkGraphicsSurfacePolygonTriangulatorInitializer)


class AgStkGraphicsSurfaceShapesInitializer(IAgStkGraphicsSurfaceShapesInitializer):
    """Computes boundary positions for shapes on the surface such as circles, ellipses, and sectors."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsSurfaceShapesInitializer.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsSurfaceShapesInitializer._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsSurfaceShapesInitializer._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsSurfaceShapesInitializer._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsSurfaceShapesInitializer.")

agcls.AgClassCatalog.add_catalog_entry("{2B227F07-5BB0-43E5-9AE2-7288A73856BC}", AgStkGraphicsSurfaceShapesInitializer)


class AgStkGraphicsAGICustomTerrainOverlayFactory(IAgStkGraphicsAGICustomTerrainOverlayFactory):
    """A terrain overlay for handling AGI Cesium Terrain."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsAGICustomTerrainOverlayFactory.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsAGICustomTerrainOverlayFactory._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsAGICustomTerrainOverlayFactory._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsAGICustomTerrainOverlayFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsAGICustomTerrainOverlayFactory.")

agcls.AgClassCatalog.add_catalog_entry("{3B6233AF-5A82-45AB-8371-0C1430585060}", AgStkGraphicsAGICustomTerrainOverlayFactory)


class AgStkGraphicsAGIProcessedImageGlobeOverlayFactory(IAgStkGraphicsAGIProcessedImageGlobeOverlayFactory):
    """A globe image overlay for handling AGI Processed Image (PDTTX) files."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsAGIProcessedImageGlobeOverlayFactory.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsAGIProcessedImageGlobeOverlayFactory._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsAGIProcessedImageGlobeOverlayFactory._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsAGIProcessedImageGlobeOverlayFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsAGIProcessedImageGlobeOverlayFactory.")

agcls.AgClassCatalog.add_catalog_entry("{668251C7-6113-4243-B563-8F58F25A9281}", AgStkGraphicsAGIProcessedImageGlobeOverlayFactory)


class AgStkGraphicsAGIProcessedTerrainOverlayFactory(IAgStkGraphicsAGIProcessedTerrainOverlayFactory):
    """A terrain overlay for handling AGI Processed Terrain (PDTT) files."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsAGIProcessedTerrainOverlayFactory.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsAGIProcessedTerrainOverlayFactory._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsAGIProcessedTerrainOverlayFactory._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsAGIProcessedTerrainOverlayFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsAGIProcessedTerrainOverlayFactory.")

agcls.AgClassCatalog.add_catalog_entry("{AD84EB3C-79EC-43F8-B042-0B9180B94D75}", AgStkGraphicsAGIProcessedTerrainOverlayFactory)


class AgStkGraphicsAGIRoamImageGlobeOverlayFactory(IAgStkGraphicsAGIRoamImageGlobeOverlayFactory):
    """A globe image overlay for handling ROAM (TXM/TXB) files."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsAGIRoamImageGlobeOverlayFactory.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsAGIRoamImageGlobeOverlayFactory._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsAGIRoamImageGlobeOverlayFactory._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsAGIRoamImageGlobeOverlayFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsAGIRoamImageGlobeOverlayFactory.")

agcls.AgClassCatalog.add_catalog_entry("{BB6E5A38-778A-4E22-91FB-7B4E63F40D6E}", AgStkGraphicsAGIRoamImageGlobeOverlayFactory)


class AgStkGraphicsCustomImageGlobeOverlayPluginActivatorFactory(IAgStkGraphicsCustomImageGlobeOverlayPluginActivatorFactory):
    """The Activator class provides methods to load COM plugins that implement custom image globe overlays. For more information about custom image globe overlays, see the STK Programming Interface."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsCustomImageGlobeOverlayPluginActivatorFactory.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsCustomImageGlobeOverlayPluginActivatorFactory._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsCustomImageGlobeOverlayPluginActivatorFactory._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsCustomImageGlobeOverlayPluginActivatorFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsCustomImageGlobeOverlayPluginActivatorFactory.")

agcls.AgClassCatalog.add_catalog_entry("{2B0D7F25-8A54-40C5-BD10-75EB00788704}", AgStkGraphicsCustomImageGlobeOverlayPluginActivatorFactory)


class AgStkGraphicsGeospatialImageGlobeOverlayFactory(IAgStkGraphicsGeospatialImageGlobeOverlayFactory):
    """A globe image overlay for handling <a href='https://jpeg.org/jpeg2000/'>JPEG 2000</a> (.jp2), ECW (.ecw), ECWP, and MrSid (.sid) image formats in the WGS84 geographic projection."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsGeospatialImageGlobeOverlayFactory.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsGeospatialImageGlobeOverlayFactory._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsGeospatialImageGlobeOverlayFactory._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsGeospatialImageGlobeOverlayFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsGeospatialImageGlobeOverlayFactory.")

agcls.AgClassCatalog.add_catalog_entry("{636E2A9D-49B9-4673-8BD5-4DF7E06A696E}", AgStkGraphicsGeospatialImageGlobeOverlayFactory)


class AgStkGraphicsProjectedRasterOverlayFactory(IAgStkGraphicsProjectedRasterOverlayFactory):
    """A globe image overlay which projects a raster onto the terrain or surface of the central body. You can also enable projection onto models by setting projected raster model projection to true for a Scene..."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsProjectedRasterOverlayFactory.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsProjectedRasterOverlayFactory._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsProjectedRasterOverlayFactory._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsProjectedRasterOverlayFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsProjectedRasterOverlayFactory.")

agcls.AgClassCatalog.add_catalog_entry("{FDAAFAF9-B61B-4DB8-8157-96EF4D476457}", AgStkGraphicsProjectedRasterOverlayFactory)


class AgStkGraphicsProjectionFactory(IAgStkGraphicsProjectionFactory):
    """A projection represents a simplified camera with a position, orientation, and field of view horizontal and field of view vertical..."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsProjectionFactory.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsProjectionFactory._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsProjectionFactory._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsProjectionFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsProjectionFactory.")

agcls.AgClassCatalog.add_catalog_entry("{C22AAF01-98CE-41E1-8A98-E164A61D40CC}", AgStkGraphicsProjectionFactory)


class AgStkGraphicsAltitudeDisplayConditionFactory(IAgStkGraphicsAltitudeDisplayConditionFactory):
    """Defines an inclusive altitude interval that determines when an object is rendered based on the camera's altitude relative to a central body."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsAltitudeDisplayConditionFactory.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsAltitudeDisplayConditionFactory._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsAltitudeDisplayConditionFactory._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsAltitudeDisplayConditionFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsAltitudeDisplayConditionFactory.")

agcls.AgClassCatalog.add_catalog_entry("{75D5CF9A-FBCE-482C-9520-7811D9E71EC1}", AgStkGraphicsAltitudeDisplayConditionFactory)


class AgStkGraphicsAxesPrimitiveFactory(IAgStkGraphicsAxesPrimitiveFactory):
    """Renders an axes in the 3D scene."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsAxesPrimitiveFactory.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsAxesPrimitiveFactory._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsAxesPrimitiveFactory._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsAxesPrimitiveFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsAxesPrimitiveFactory.")

agcls.AgClassCatalog.add_catalog_entry("{166D78CD-1000-4EDC-B031-AAB1B1B45E8D}", AgStkGraphicsAxesPrimitiveFactory)


class AgStkGraphicsCompositeDisplayConditionFactory(IAgStkGraphicsCompositeDisplayConditionFactory):
    """A composite of display conditions combined using a binary logic operation. For example, several time interval display condition objects can be added to a composite..."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsCompositeDisplayConditionFactory.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsCompositeDisplayConditionFactory._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsCompositeDisplayConditionFactory._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsCompositeDisplayConditionFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsCompositeDisplayConditionFactory.")

agcls.AgClassCatalog.add_catalog_entry("{375A535B-557C-4E7B-A2AD-0905381BA46F}", AgStkGraphicsCompositeDisplayConditionFactory)


class AgStkGraphicsCompositePrimitiveFactory(IAgStkGraphicsCompositePrimitiveFactory):
    """ A primitive that is composed of multiple other primitives. Since composites can contain other composites, they are commonly used to build hierarchies of primitives to efficiently evaluate display conditions..."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsCompositePrimitiveFactory.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsCompositePrimitiveFactory._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsCompositePrimitiveFactory._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsCompositePrimitiveFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsCompositePrimitiveFactory.")

agcls.AgClassCatalog.add_catalog_entry("{7F9D1191-7973-4B59-B2E6-9A4D4F19A222}", AgStkGraphicsCompositePrimitiveFactory)


class AgStkGraphicsConstantDisplayConditionFactory(IAgStkGraphicsConstantDisplayConditionFactory):
    """A display condition that evaluates to a user-defined value. This is commonly used to hide primitives by assigning to a primitive a display condition that always returns false."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsConstantDisplayConditionFactory.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsConstantDisplayConditionFactory._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsConstantDisplayConditionFactory._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsConstantDisplayConditionFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsConstantDisplayConditionFactory.")

agcls.AgClassCatalog.add_catalog_entry("{84B6B505-833D-4A3B-BD6B-99266C8C5284}", AgStkGraphicsConstantDisplayConditionFactory)


class AgStkGraphicsDistanceDisplayConditionFactory(IAgStkGraphicsDistanceDisplayConditionFactory):
    """Defines an inclusive distance interval that determines when an object, such as a primitive, is rendered based on the distance from the camera to the object."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsDistanceDisplayConditionFactory.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsDistanceDisplayConditionFactory._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsDistanceDisplayConditionFactory._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsDistanceDisplayConditionFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsDistanceDisplayConditionFactory.")

agcls.AgClassCatalog.add_catalog_entry("{F8A027DC-AE3B-464A-A5C4-39AA37368ED7}", AgStkGraphicsDistanceDisplayConditionFactory)


class AgStkGraphicsDistanceToGlobeOverlayDisplayConditionFactory(IAgStkGraphicsDistanceToGlobeOverlayDisplayConditionFactory):
    """Defines an inclusive distance interval that determines when an object, such as a primitive, is rendered based on the distance from the camera to the globe overlay..."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsDistanceToGlobeOverlayDisplayConditionFactory.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsDistanceToGlobeOverlayDisplayConditionFactory._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsDistanceToGlobeOverlayDisplayConditionFactory._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsDistanceToGlobeOverlayDisplayConditionFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsDistanceToGlobeOverlayDisplayConditionFactory.")

agcls.AgClassCatalog.add_catalog_entry("{0BF7DA00-8B06-41FA-A580-15D898A0837F}", AgStkGraphicsDistanceToGlobeOverlayDisplayConditionFactory)


class AgStkGraphicsDistanceToPositionDisplayConditionFactory(IAgStkGraphicsDistanceToPositionDisplayConditionFactory):
    """Defines an inclusive distance interval that determines when an object, such as a primitive, is rendered based on the distance from the camera to a position defined in the given reference frame."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsDistanceToPositionDisplayConditionFactory.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsDistanceToPositionDisplayConditionFactory._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsDistanceToPositionDisplayConditionFactory._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsDistanceToPositionDisplayConditionFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsDistanceToPositionDisplayConditionFactory.")

agcls.AgClassCatalog.add_catalog_entry("{F19A2CB9-BF83-4F3F-9B76-82794467A872}", AgStkGraphicsDistanceToPositionDisplayConditionFactory)


class AgStkGraphicsDistanceToPrimitiveDisplayConditionFactory(IAgStkGraphicsDistanceToPrimitiveDisplayConditionFactory):
    """Defines an inclusive distance interval that determines when an object, such as a screen overlay, is rendered based on the distance from the camera to the primitive..."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsDistanceToPrimitiveDisplayConditionFactory.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsDistanceToPrimitiveDisplayConditionFactory._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsDistanceToPrimitiveDisplayConditionFactory._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsDistanceToPrimitiveDisplayConditionFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsDistanceToPrimitiveDisplayConditionFactory.")

agcls.AgClassCatalog.add_catalog_entry("{8D977F6C-359B-4353-AD7A-B1317BE7136E}", AgStkGraphicsDistanceToPrimitiveDisplayConditionFactory)


class AgStkGraphicsDurationPathPrimitiveUpdatePolicyFactory(IAgStkGraphicsDurationPathPrimitiveUpdatePolicyFactory):
    """path primitive update policy that removes points from remove location after a given duration."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsDurationPathPrimitiveUpdatePolicyFactory.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsDurationPathPrimitiveUpdatePolicyFactory._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsDurationPathPrimitiveUpdatePolicyFactory._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsDurationPathPrimitiveUpdatePolicyFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsDurationPathPrimitiveUpdatePolicyFactory.")

agcls.AgClassCatalog.add_catalog_entry("{D10A5794-C75B-43DA-8277-FAA18D9C988A}", AgStkGraphicsDurationPathPrimitiveUpdatePolicyFactory)


class AgStkGraphicsGlobeImageOverlayInitializer(IAgStkGraphicsGlobeImageOverlayInitializer):
    """A globe overlay that shows an image."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsGlobeImageOverlayInitializer.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsGlobeImageOverlayInitializer._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsGlobeImageOverlayInitializer._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsGlobeImageOverlayInitializer._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsGlobeImageOverlayInitializer.")

agcls.AgClassCatalog.add_catalog_entry("{6CA56657-186B-4768-B747-AB0071E02C05}", AgStkGraphicsGlobeImageOverlayInitializer)


class AgStkGraphicsGraphicsFontFactory(IAgStkGraphicsGraphicsFontFactory):
    """A font that is suitable for use with the text batch primitive. For best performance, avoid creating duplicate font objects. Instead assign the same font object to several text batch primitives."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsGraphicsFontFactory.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsGraphicsFontFactory._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsGraphicsFontFactory._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsGraphicsFontFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsGraphicsFontFactory.")

agcls.AgClassCatalog.add_catalog_entry("{4890C7DD-6EAC-4F44-94DB-A72E75BEDAF0}", AgStkGraphicsGraphicsFontFactory)


class AgStkGraphicsGreatArcInterpolatorFactory(IAgStkGraphicsGreatArcInterpolatorFactory):
    """The great arc interpolator computes interpolated positions along a great arc. A great arc is the shortest path between two positions on an ellipsoid."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsGreatArcInterpolatorFactory.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsGreatArcInterpolatorFactory._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsGreatArcInterpolatorFactory._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsGreatArcInterpolatorFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsGreatArcInterpolatorFactory.")

agcls.AgClassCatalog.add_catalog_entry("{6882FDC8-B958-498D-A274-46AE40AE78D5}", AgStkGraphicsGreatArcInterpolatorFactory)


class AgStkGraphicsAlphaFromLuminanceFilterFactory(IAgStkGraphicsAlphaFromLuminanceFilterFactory):
    """Adds an alpha band to the source raster derived from the luminance of the raster's color bands."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsAlphaFromLuminanceFilterFactory.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsAlphaFromLuminanceFilterFactory._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsAlphaFromLuminanceFilterFactory._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsAlphaFromLuminanceFilterFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsAlphaFromLuminanceFilterFactory.")

agcls.AgClassCatalog.add_catalog_entry("{1190FF7A-66F4-4B54-B35B-57BBBEDD35AA}", AgStkGraphicsAlphaFromLuminanceFilterFactory)


class AgStkGraphicsAlphaFromPixelFilterFactory(IAgStkGraphicsAlphaFromPixelFilterFactory):
    """Adds an alpha band to the source raster based on the value of its first pixel. All pixels in the source raster that are the same color as the first pixel will be made transparent."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsAlphaFromPixelFilterFactory.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsAlphaFromPixelFilterFactory._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsAlphaFromPixelFilterFactory._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsAlphaFromPixelFilterFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsAlphaFromPixelFilterFactory.")

agcls.AgClassCatalog.add_catalog_entry("{72AEEA38-C86F-48DE-A8D7-F993011E6466}", AgStkGraphicsAlphaFromPixelFilterFactory)


class AgStkGraphicsAlphaFromRasterFilterFactory(IAgStkGraphicsAlphaFromRasterFilterFactory):
    """Adds an alpha band to the source raster derived from the color bands or alpha of another raster. This filter can be used to apply an alpha mask to the source raster."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsAlphaFromRasterFilterFactory.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsAlphaFromRasterFilterFactory._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsAlphaFromRasterFilterFactory._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsAlphaFromRasterFilterFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsAlphaFromRasterFilterFactory.")

agcls.AgClassCatalog.add_catalog_entry("{F578725F-3B1F-4B45-AA36-FADF0AA5516F}", AgStkGraphicsAlphaFromRasterFilterFactory)


class AgStkGraphicsBandExtractFilterFactory(IAgStkGraphicsBandExtractFilterFactory):
    """Extracts a band or set of bands from the source raster. The extract format property specifies the bands and the order of the bands that will be extracted."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsBandExtractFilterFactory.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsBandExtractFilterFactory._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsBandExtractFilterFactory._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsBandExtractFilterFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsBandExtractFilterFactory.")

agcls.AgClassCatalog.add_catalog_entry("{52C5D954-F113-46CA-BF7C-3BFCA6637B6D}", AgStkGraphicsBandExtractFilterFactory)


class AgStkGraphicsBandOrderFilterFactory(IAgStkGraphicsBandOrderFilterFactory):
    """Reorders or swizzles the bands of the source raster to match the band order of the raster format specified by the band order property. When maintain raster format is true, the source raster's format is maintained after swizzling."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsBandOrderFilterFactory.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsBandOrderFilterFactory._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsBandOrderFilterFactory._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsBandOrderFilterFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsBandOrderFilterFactory.")

agcls.AgClassCatalog.add_catalog_entry("{F238EFB7-84AC-4648-AB58-42C01DADA9A9}", AgStkGraphicsBandOrderFilterFactory)


class AgStkGraphicsBlurFilterFactory(IAgStkGraphicsBlurFilterFactory):
    """Applies a convolution filter to blur or smooth the source raster. Can be used to reduce noise in the raster."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsBlurFilterFactory.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsBlurFilterFactory._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsBlurFilterFactory._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsBlurFilterFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsBlurFilterFactory.")

agcls.AgClassCatalog.add_catalog_entry("{8FE6B4C1-2607-4213-A2C6-EBD012D3A51F}", AgStkGraphicsBlurFilterFactory)


class AgStkGraphicsBrightnessFilterFactory(IAgStkGraphicsBrightnessFilterFactory):
    """Adjusts the brightness of the source raster's color bands. The adjustment to brightness is a value between -1 and 1, corresponding to least bright to most bright."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsBrightnessFilterFactory.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsBrightnessFilterFactory._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsBrightnessFilterFactory._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsBrightnessFilterFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsBrightnessFilterFactory.")

agcls.AgClassCatalog.add_catalog_entry("{C03BF579-ED2C-480E-835C-A2F17B7B1E02}", AgStkGraphicsBrightnessFilterFactory)


class AgStkGraphicsColorToLuminanceFilterFactory(IAgStkGraphicsColorToLuminanceFilterFactory):
    """Extracts a luminance band derived from the color bands of the source raster."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsColorToLuminanceFilterFactory.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsColorToLuminanceFilterFactory._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsColorToLuminanceFilterFactory._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsColorToLuminanceFilterFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsColorToLuminanceFilterFactory.")

agcls.AgClassCatalog.add_catalog_entry("{7311B5AA-FC01-4B35-A1A3-76DE69555938}", AgStkGraphicsColorToLuminanceFilterFactory)


class AgStkGraphicsContrastFilterFactory(IAgStkGraphicsContrastFilterFactory):
    """Adjusts the contrast of the source raster. The adjustment to contrast is a value between -1 and 1, corresponding to least contrast to most contrast."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsContrastFilterFactory.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsContrastFilterFactory._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsContrastFilterFactory._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsContrastFilterFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsContrastFilterFactory.")

agcls.AgClassCatalog.add_catalog_entry("{9B1023F6-67C4-4DC9-8EA1-9171564EFA42}", AgStkGraphicsContrastFilterFactory)


class AgStkGraphicsConvolutionFilterFactory(IAgStkGraphicsConvolutionFilterFactory):
    """Applies convolution to the source raster. Convolution is the modification of a pixel's value based on the values of its surrounding pixels. The kernel is the numerical matrix that is applied to each pixel in this process..."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsConvolutionFilterFactory.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsConvolutionFilterFactory._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsConvolutionFilterFactory._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsConvolutionFilterFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsConvolutionFilterFactory.")

agcls.AgClassCatalog.add_catalog_entry("{64B119DD-A78C-4815-A9DD-4D77B310D28D}", AgStkGraphicsConvolutionFilterFactory)


class AgStkGraphicsEdgeDetectFilterFactory(IAgStkGraphicsEdgeDetectFilterFactory):
    """Applies a convolution filter to detect edges in the source raster."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsEdgeDetectFilterFactory.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsEdgeDetectFilterFactory._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsEdgeDetectFilterFactory._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsEdgeDetectFilterFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsEdgeDetectFilterFactory.")

agcls.AgClassCatalog.add_catalog_entry("{E14D1269-91FA-4A83-92A7-F5117E1E9DE9}", AgStkGraphicsEdgeDetectFilterFactory)


class AgStkGraphicsFilteringRasterStreamFactory(IAgStkGraphicsFilteringRasterStreamFactory):
    """A class decorator for applying a raster filter to each update of a raster stream. Can be used to apply filters to videos and other raster streams as they are updated."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsFilteringRasterStreamFactory.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsFilteringRasterStreamFactory._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsFilteringRasterStreamFactory._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsFilteringRasterStreamFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsFilteringRasterStreamFactory.")

agcls.AgClassCatalog.add_catalog_entry("{8B9D2671-491B-4D5B-8410-B8A8ED881970}", AgStkGraphicsFilteringRasterStreamFactory)


class AgStkGraphicsFlipFilterFactory(IAgStkGraphicsFlipFilterFactory):
    """Flips the source raster along the given flip axis."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsFlipFilterFactory.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsFlipFilterFactory._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsFlipFilterFactory._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsFlipFilterFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsFlipFilterFactory.")

agcls.AgClassCatalog.add_catalog_entry("{0C012B18-9467-42CE-8EC5-E7B70012BA73}", AgStkGraphicsFlipFilterFactory)


class AgStkGraphicsGammaCorrectionFilterFactory(IAgStkGraphicsGammaCorrectionFilterFactory):
    """Applies gamma correction to the source raster. The gamma is a value between .2 and 5. The default gamma value is 2.2."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsGammaCorrectionFilterFactory.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsGammaCorrectionFilterFactory._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsGammaCorrectionFilterFactory._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsGammaCorrectionFilterFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsGammaCorrectionFilterFactory.")

agcls.AgClassCatalog.add_catalog_entry("{E09D6B71-6E82-45A1-A208-B761D82266E9}", AgStkGraphicsGammaCorrectionFilterFactory)


class AgStkGraphicsGaussianBlurFilterFactory(IAgStkGraphicsGaussianBlurFilterFactory):
    """Applies a convolution filter to blur the source raster using the Gaussian function."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsGaussianBlurFilterFactory.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsGaussianBlurFilterFactory._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsGaussianBlurFilterFactory._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsGaussianBlurFilterFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsGaussianBlurFilterFactory.")

agcls.AgClassCatalog.add_catalog_entry("{B98AC54E-10BB-4E81-9766-806A2F0EA8C4}", AgStkGraphicsGaussianBlurFilterFactory)


class AgStkGraphicsGradientDetectFilterFactory(IAgStkGraphicsGradientDetectFilterFactory):
    """Applies a convolution filter to detect gradients in the source raster."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsGradientDetectFilterFactory.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsGradientDetectFilterFactory._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsGradientDetectFilterFactory._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsGradientDetectFilterFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsGradientDetectFilterFactory.")

agcls.AgClassCatalog.add_catalog_entry("{B88D6D7C-4807-4905-B52F-DF054A4AD186}", AgStkGraphicsGradientDetectFilterFactory)


class AgStkGraphicsJpeg2000WriterInitializer(IAgStkGraphicsJpeg2000WriterInitializer):
    """Converts an image, such as a BMP, to a GeoJP2 file that can be used as an image globe overlay."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsJpeg2000WriterInitializer.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsJpeg2000WriterInitializer._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsJpeg2000WriterInitializer._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsJpeg2000WriterInitializer._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsJpeg2000WriterInitializer.")

agcls.AgClassCatalog.add_catalog_entry("{0F29EA41-17E7-4252-B419-B2573C015DC6}", AgStkGraphicsJpeg2000WriterInitializer)


class AgStkGraphicsLevelsFilterFactory(IAgStkGraphicsLevelsFilterFactory):
    """Adjusts the band levels of the source raster linearly."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsLevelsFilterFactory.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsLevelsFilterFactory._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsLevelsFilterFactory._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsLevelsFilterFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsLevelsFilterFactory.")

agcls.AgClassCatalog.add_catalog_entry("{69CBD183-936F-480E-B0FF-4D140DDC9232}", AgStkGraphicsLevelsFilterFactory)


class AgStkGraphicsProjectionRasterStreamPluginActivatorFactory(IAgStkGraphicsProjectionRasterStreamPluginActivatorFactory):
    """The Activator class provides methods to load COM plugins that implement projection and raster streaming. For more information about the projection and raster plugins, see the STK Programming Interface."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsProjectionRasterStreamPluginActivatorFactory.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsProjectionRasterStreamPluginActivatorFactory._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsProjectionRasterStreamPluginActivatorFactory._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsProjectionRasterStreamPluginActivatorFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsProjectionRasterStreamPluginActivatorFactory.")

agcls.AgClassCatalog.add_catalog_entry("{51F36FBA-E366-4A66-A452-FEE99786ED2E}", AgStkGraphicsProjectionRasterStreamPluginActivatorFactory)


class AgStkGraphicsRasterFactory(IAgStkGraphicsRasterFactory):
    """A raster dataset. A raster consists of one or more bands, or sets of values, which are most commonly associated with colors when the raster represents an image..."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsRasterFactory.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsRasterFactory._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsRasterFactory._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsRasterFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsRasterFactory.")

agcls.AgClassCatalog.add_catalog_entry("{390E63D5-4C79-48B3-98CD-55B1983F859A}", AgStkGraphicsRasterFactory)


class AgStkGraphicsRasterAttributesFactory(IAgStkGraphicsRasterAttributesFactory):
    """The attributes describing a raster dataset. raster attributes define the memory layout of a raster, and includes properties defining the order of each raster band that the raster contains, as specified by the raster format..."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsRasterAttributesFactory.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsRasterAttributesFactory._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsRasterAttributesFactory._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsRasterAttributesFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsRasterAttributesFactory.")

agcls.AgClassCatalog.add_catalog_entry("{94CA0CCD-4D74-47BD-8E5F-E2D96403DACF}", AgStkGraphicsRasterAttributesFactory)


class AgStkGraphicsRotateFilterFactory(IAgStkGraphicsRotateFilterFactory):
    """Rotates the source raster clockwise by the specified angle."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsRotateFilterFactory.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsRotateFilterFactory._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsRotateFilterFactory._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsRotateFilterFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsRotateFilterFactory.")

agcls.AgClassCatalog.add_catalog_entry("{12C8E395-4E61-4484-A97D-33742C841A6D}", AgStkGraphicsRotateFilterFactory)


class AgStkGraphicsSequenceFilterFactory(IAgStkGraphicsSequenceFilterFactory):
    """Applies a sequence of filters to the source raster in the order in which they were added. When continue on failure is set to true, subsequent filters will still be applied to the source raster even if one or more filters in the sequence cannot be applied."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsSequenceFilterFactory.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsSequenceFilterFactory._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsSequenceFilterFactory._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsSequenceFilterFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsSequenceFilterFactory.")

agcls.AgClassCatalog.add_catalog_entry("{4CC16FDF-B6CE-4C06-B47F-AD7812566215}", AgStkGraphicsSequenceFilterFactory)


class AgStkGraphicsSharpenFilterFactory(IAgStkGraphicsSharpenFilterFactory):
    """Applies a convolution filter to increase the sharpness of the source raster."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsSharpenFilterFactory.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsSharpenFilterFactory._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsSharpenFilterFactory._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsSharpenFilterFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsSharpenFilterFactory.")

agcls.AgClassCatalog.add_catalog_entry("{98011831-2D99-4FED-AC53-DFB4090D132C}", AgStkGraphicsSharpenFilterFactory)


class AgStkGraphicsVideoStreamFactory(IAgStkGraphicsVideoStreamFactory):
    """A raster stream that streams from a video. The video can be read from a file, or streamed from an HTTP, RTP, UDP, or TCP source. See the Video Streams Overview for a list of supported video formats and Uri usage."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsVideoStreamFactory.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsVideoStreamFactory._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsVideoStreamFactory._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsVideoStreamFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsVideoStreamFactory.")

agcls.AgClassCatalog.add_catalog_entry("{A977E2D9-785B-4AB0-B01F-927486E3170B}", AgStkGraphicsVideoStreamFactory)


class AgStkGraphicsMarkerBatchPrimitiveFactory(IAgStkGraphicsMarkerBatchPrimitiveFactory):
    """ Renders one or more markers in the 3D scene. Markers are 2D images that always face the viewer which can be sized in pixels or meters. Markers are also referred to as sprites or billboards..."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsMarkerBatchPrimitiveFactory.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsMarkerBatchPrimitiveFactory._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsMarkerBatchPrimitiveFactory._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsMarkerBatchPrimitiveFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsMarkerBatchPrimitiveFactory.")

agcls.AgClassCatalog.add_catalog_entry("{E2AC5708-26C2-469F-AE1C-C48AED18565E}", AgStkGraphicsMarkerBatchPrimitiveFactory)


class AgStkGraphicsMarkerBatchPrimitiveOptionalParametersFactory(IAgStkGraphicsMarkerBatchPrimitiveOptionalParametersFactory):
    """Optional per-marker parameters for marker batch primitive that overrides the marker batch's per-batch parameters..."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsMarkerBatchPrimitiveOptionalParametersFactory.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsMarkerBatchPrimitiveOptionalParametersFactory._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsMarkerBatchPrimitiveOptionalParametersFactory._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsMarkerBatchPrimitiveOptionalParametersFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsMarkerBatchPrimitiveOptionalParametersFactory.")

agcls.AgClassCatalog.add_catalog_entry("{120D8907-DB34-481B-93B1-C61A4C5C61EF}", AgStkGraphicsMarkerBatchPrimitiveOptionalParametersFactory)


class AgStkGraphicsMaximumCountPathPrimitiveUpdatePolicyFactory(IAgStkGraphicsMaximumCountPathPrimitiveUpdatePolicyFactory):
    """path primitive update policy that removes points from remove location when the number of points in the path exceeds maximum count."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsMaximumCountPathPrimitiveUpdatePolicyFactory.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsMaximumCountPathPrimitiveUpdatePolicyFactory._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsMaximumCountPathPrimitiveUpdatePolicyFactory._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsMaximumCountPathPrimitiveUpdatePolicyFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsMaximumCountPathPrimitiveUpdatePolicyFactory.")

agcls.AgClassCatalog.add_catalog_entry("{C3F59BCB-635A-4E50-B5AA-269CD0380069}", AgStkGraphicsMaximumCountPathPrimitiveUpdatePolicyFactory)


class AgStkGraphicsModelPrimitiveFactory(IAgStkGraphicsModelPrimitiveFactory):
    """The model primitive loads and renders <a href='https://www.khronos.org/collada/'>COLLADA</a> (DAE) and AGI <a href='https://support.agi.com/3d-models'>MDL</a> (MDL) models."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsModelPrimitiveFactory.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsModelPrimitiveFactory._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsModelPrimitiveFactory._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsModelPrimitiveFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsModelPrimitiveFactory.")

agcls.AgClassCatalog.add_catalog_entry("{90BABAB0-7D1E-420F-B91F-46E2E5B31763}", AgStkGraphicsModelPrimitiveFactory)


class AgStkGraphicsPathPrimitiveFactory(IAgStkGraphicsPathPrimitiveFactory):
    """Renders a line to the 3D scene. Similar to the polyline primitive; however, the PathPrimitive was designed for the efficient addition/removal of points to/from the front or back of the line."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsPathPrimitiveFactory.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsPathPrimitiveFactory._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsPathPrimitiveFactory._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsPathPrimitiveFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsPathPrimitiveFactory.")

agcls.AgClassCatalog.add_catalog_entry("{1847AEAB-C6B6-4561-BBDB-D979A443CCF0}", AgStkGraphicsPathPrimitiveFactory)


class AgStkGraphicsPixelSizeDisplayConditionFactory(IAgStkGraphicsPixelSizeDisplayConditionFactory):
    """Defines an inclusive interval, in pixels, that determines when an object, such as a primitive, is rendered based on the number of pixels the object's bounding sphere (or in the case of screen overlays, bounding rectangle) covers on the screen..."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsPixelSizeDisplayConditionFactory.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsPixelSizeDisplayConditionFactory._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsPixelSizeDisplayConditionFactory._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsPixelSizeDisplayConditionFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsPixelSizeDisplayConditionFactory.")

agcls.AgClassCatalog.add_catalog_entry("{52EC4EAD-B9A0-4940-BAE8-BD115805BB46}", AgStkGraphicsPixelSizeDisplayConditionFactory)


class AgStkGraphicsPointBatchPrimitiveFactory(IAgStkGraphicsPointBatchPrimitiveFactory):
    """ Renders one or more points in the 3D scene. Each point in the batch has a unique position and an optional color. All points in the batch share the same pixel size. For best performance, avoid creating lots of batches with only a few points each..."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsPointBatchPrimitiveFactory.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsPointBatchPrimitiveFactory._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsPointBatchPrimitiveFactory._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsPointBatchPrimitiveFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsPointBatchPrimitiveFactory.")

agcls.AgClassCatalog.add_catalog_entry("{B497A3DE-DF9F-4EFD-8CB8-2767415F4889}", AgStkGraphicsPointBatchPrimitiveFactory)


class AgStkGraphicsPointBatchPrimitiveOptionalParametersFactory(IAgStkGraphicsPointBatchPrimitiveOptionalParametersFactory):
    """Optional per-point parameters for point batch primitive that overrides the point batch primitive's global parameters..."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsPointBatchPrimitiveOptionalParametersFactory.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsPointBatchPrimitiveOptionalParametersFactory._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsPointBatchPrimitiveOptionalParametersFactory._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsPointBatchPrimitiveOptionalParametersFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsPointBatchPrimitiveOptionalParametersFactory.")

agcls.AgClassCatalog.add_catalog_entry("{aa54a6e1-f927-48b6-8a29-7b718bb0cb7b}", AgStkGraphicsPointBatchPrimitiveOptionalParametersFactory)


class AgStkGraphicsPolylinePrimitiveFactory(IAgStkGraphicsPolylinePrimitiveFactory):
    """Renders a polyline in the 3D scene. Each line segment may have a different color. A polyline can be constructed with a position interpolator to render great arcs or rhumb lines."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsPolylinePrimitiveFactory.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsPolylinePrimitiveFactory._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsPolylinePrimitiveFactory._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsPolylinePrimitiveFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsPolylinePrimitiveFactory.")

agcls.AgClassCatalog.add_catalog_entry("{825E24B9-F4B9-4EF4-8F98-A8BD8F7A6C4B}", AgStkGraphicsPolylinePrimitiveFactory)


class AgStkGraphicsPolylinePrimitiveOptionalParametersFactory(IAgStkGraphicsPolylinePrimitiveOptionalParametersFactory):
    """Optional per-point or per-segment parameters for polyline primitive that overrides the polyline primitive's global parameters..."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsPolylinePrimitiveOptionalParametersFactory.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsPolylinePrimitiveOptionalParametersFactory._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsPolylinePrimitiveOptionalParametersFactory._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsPolylinePrimitiveOptionalParametersFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsPolylinePrimitiveOptionalParametersFactory.")

agcls.AgClassCatalog.add_catalog_entry("{2ff372bc-ad1c-4fa2-82e9-75c9b407f19c}", AgStkGraphicsPolylinePrimitiveOptionalParametersFactory)


class AgStkGraphicsRasterImageGlobeOverlayFactory(IAgStkGraphicsRasterImageGlobeOverlayFactory):
    """A globe image overlay for handling rasters."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsRasterImageGlobeOverlayFactory.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsRasterImageGlobeOverlayFactory._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsRasterImageGlobeOverlayFactory._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsRasterImageGlobeOverlayFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsRasterImageGlobeOverlayFactory.")

agcls.AgClassCatalog.add_catalog_entry("{73782D85-0307-4B70-B793-2930A8880AEE}", AgStkGraphicsRasterImageGlobeOverlayFactory)


class AgStkGraphicsRhumbLineInterpolatorFactory(IAgStkGraphicsRhumbLineInterpolatorFactory):
    """The rhumb line interpolator computes interpolated positions along a rhumb line. Rhumb lines are lines of constant bearing. They appear as straight lines on a Mercator 2D map projection and are well suited to navigation."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsRhumbLineInterpolatorFactory.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsRhumbLineInterpolatorFactory._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsRhumbLineInterpolatorFactory._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsRhumbLineInterpolatorFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsRhumbLineInterpolatorFactory.")

agcls.AgClassCatalog.add_catalog_entry("{0B6D54BD-A46B-4770-A936-23F247B6F038}", AgStkGraphicsRhumbLineInterpolatorFactory)


class AgStkGraphicsSceneDisplayConditionFactory(IAgStkGraphicsSceneDisplayConditionFactory):
    """A display condition used to control what scene or scenes an object, such as a primitive, is rendered in. This is used to show an object in some scenes and hide it in others."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsSceneDisplayConditionFactory.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsSceneDisplayConditionFactory._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsSceneDisplayConditionFactory._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsSceneDisplayConditionFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsSceneDisplayConditionFactory.")

agcls.AgClassCatalog.add_catalog_entry("{19159366-8E64-467F-922B-739678DA01C2}", AgStkGraphicsSceneDisplayConditionFactory)


class AgStkGraphicsSceneManagerInitializer(IAgStkGraphicsSceneManagerInitializer):
    """The static scene manager class provides global properties and functionality that apply to all scenes and thus affect the rendering of every globe control..."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsSceneManagerInitializer.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsSceneManagerInitializer._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsSceneManagerInitializer._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsSceneManagerInitializer._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsSceneManagerInitializer.")

agcls.AgClassCatalog.add_catalog_entry("{956AD97D-96ED-4898-89BE-08AF68BF1EA6}", AgStkGraphicsSceneManagerInitializer)


class AgStkGraphicsScreenOverlayFactory(IAgStkGraphicsScreenOverlayFactory):
    """A visible element drawn in screen space. Overlays are useful for floating logos, heads up displays, and integrating user interfaces into the 3D window."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsScreenOverlayFactory.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsScreenOverlayFactory._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsScreenOverlayFactory._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsScreenOverlayFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsScreenOverlayFactory.")

agcls.AgClassCatalog.add_catalog_entry("{C2F5A068-E483-4CCF-819D-FBB25DC85A71}", AgStkGraphicsScreenOverlayFactory)


class AgStkGraphicsSolidPrimitiveFactory(IAgStkGraphicsSolidPrimitiveFactory):
    """Renders filled solid objects and their outlines. Example solids include boxes and ellipsoids. Various effects are supported, such as displaying the solid's silhouette, and hiding the outline of the backside of the solid..."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsSolidPrimitiveFactory.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsSolidPrimitiveFactory._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsSolidPrimitiveFactory._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsSolidPrimitiveFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsSolidPrimitiveFactory.")

agcls.AgClassCatalog.add_catalog_entry("{9F23AC4E-DCB0-45B1-BE07-E4BEBA9B4AFF}", AgStkGraphicsSolidPrimitiveFactory)


class AgStkGraphicsSurfaceMeshPrimitiveFactory(IAgStkGraphicsSurfaceMeshPrimitiveFactory):
    """A triangle mesh primitive for meshes on the surface that need to conform to terrain."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsSurfaceMeshPrimitiveFactory.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsSurfaceMeshPrimitiveFactory._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsSurfaceMeshPrimitiveFactory._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsSurfaceMeshPrimitiveFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsSurfaceMeshPrimitiveFactory.")

agcls.AgClassCatalog.add_catalog_entry("{A9B40191-F8D7-46D8-B217-30C1C41E2369}", AgStkGraphicsSurfaceMeshPrimitiveFactory)


class AgStkGraphicsTerrainOverlayInitializer(IAgStkGraphicsTerrainOverlayInitializer):
    """A globe overlay which shows terrain."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsTerrainOverlayInitializer.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsTerrainOverlayInitializer._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsTerrainOverlayInitializer._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsTerrainOverlayInitializer._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsTerrainOverlayInitializer.")

agcls.AgClassCatalog.add_catalog_entry("{8D76F5E3-BACE-4CA4-9C4D-9F14464ACAFD}", AgStkGraphicsTerrainOverlayInitializer)


class AgStkGraphicsTextBatchPrimitiveFactory(IAgStkGraphicsTextBatchPrimitiveFactory):
    """ Renders one or more strings in the 3D scene.  For best performance, avoid creating lots of batches with only a few strings each. See the Batching Performance Overview. """
    def __init__(self, sourceObject=None):
        IAgStkGraphicsTextBatchPrimitiveFactory.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsTextBatchPrimitiveFactory._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsTextBatchPrimitiveFactory._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsTextBatchPrimitiveFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsTextBatchPrimitiveFactory.")

agcls.AgClassCatalog.add_catalog_entry("{246D4DAA-4CD0-4E10-98C7-791A17E5A736}", AgStkGraphicsTextBatchPrimitiveFactory)


class AgStkGraphicsTextBatchPrimitiveOptionalParametersFactory(IAgStkGraphicsTextBatchPrimitiveOptionalParametersFactory):
    """Optional per-string and per-batch parameters for text batch primitive..."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsTextBatchPrimitiveOptionalParametersFactory.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsTextBatchPrimitiveOptionalParametersFactory._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsTextBatchPrimitiveOptionalParametersFactory._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsTextBatchPrimitiveOptionalParametersFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsTextBatchPrimitiveOptionalParametersFactory.")

agcls.AgClassCatalog.add_catalog_entry("{A3C12306-7202-468F-B0A5-306D98A7E2BC}", AgStkGraphicsTextBatchPrimitiveOptionalParametersFactory)


class AgStkGraphicsTextOverlayFactory(IAgStkGraphicsTextOverlayFactory):
    """A rectangular overlay that contains text."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsTextOverlayFactory.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsTextOverlayFactory._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsTextOverlayFactory._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsTextOverlayFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsTextOverlayFactory.")

agcls.AgClassCatalog.add_catalog_entry("{5DFA35A5-B53D-4B58-A32E-B2B2690D3104}", AgStkGraphicsTextOverlayFactory)


class AgStkGraphicsTextureMatrixFactory(IAgStkGraphicsTextureMatrixFactory):
    """A 4 by 4 matrix applied to a texture coordinate."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsTextureMatrixFactory.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsTextureMatrixFactory._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsTextureMatrixFactory._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsTextureMatrixFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsTextureMatrixFactory.")

agcls.AgClassCatalog.add_catalog_entry("{0169DB20-811D-4DF6-8EDF-51C47B485D6B}", AgStkGraphicsTextureMatrixFactory)


class AgStkGraphicsTextureScreenOverlayFactory(IAgStkGraphicsTextureScreenOverlayFactory):
    """A rectangular overlay that can be assigned a texture."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsTextureScreenOverlayFactory.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsTextureScreenOverlayFactory._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsTextureScreenOverlayFactory._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsTextureScreenOverlayFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsTextureScreenOverlayFactory.")

agcls.AgClassCatalog.add_catalog_entry("{C4060E65-DD40-40CE-B462-55E08E6D63AF}", AgStkGraphicsTextureScreenOverlayFactory)


class AgStkGraphicsTimeIntervalDisplayConditionFactory(IAgStkGraphicsTimeIntervalDisplayConditionFactory):
    """Defines an inclusive time interval that determines when an object, such as a primitive, is rendered based on the current animation time ."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsTimeIntervalDisplayConditionFactory.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsTimeIntervalDisplayConditionFactory._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsTimeIntervalDisplayConditionFactory._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsTimeIntervalDisplayConditionFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsTimeIntervalDisplayConditionFactory.")

agcls.AgClassCatalog.add_catalog_entry("{526637D4-DD61-4B7D-BAE9-6FEF3673BF5D}", AgStkGraphicsTimeIntervalDisplayConditionFactory)


class AgStkGraphicsTriangleMeshPrimitiveFactory(IAgStkGraphicsTriangleMeshPrimitiveFactory):
    """Renders a triangle mesh in the 3D scene. Examples of triangle meshes includes polygons on the globe (e.g. states or countries), terrain and imagery extents, ellipses, and extrusions."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsTriangleMeshPrimitiveFactory.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsTriangleMeshPrimitiveFactory._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsTriangleMeshPrimitiveFactory._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsTriangleMeshPrimitiveFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsTriangleMeshPrimitiveFactory.")

agcls.AgClassCatalog.add_catalog_entry("{D904C0D6-FEAE-4E13-9BBC-98F22CC2F0AF}", AgStkGraphicsTriangleMeshPrimitiveFactory)


class AgStkGraphicsTriangleMeshPrimitiveOptionalParametersFactory(IAgStkGraphicsTriangleMeshPrimitiveOptionalParametersFactory):
    """Optional parameters for triangle mesh primitive..."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsTriangleMeshPrimitiveOptionalParametersFactory.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsTriangleMeshPrimitiveOptionalParametersFactory._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsTriangleMeshPrimitiveOptionalParametersFactory._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsTriangleMeshPrimitiveOptionalParametersFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsTriangleMeshPrimitiveOptionalParametersFactory.")

agcls.AgClassCatalog.add_catalog_entry("{9D9FB947-B9EB-4964-8FD8-6FF54D734BD8}", AgStkGraphicsTriangleMeshPrimitiveOptionalParametersFactory)


class AgStkGraphicsVectorPrimitiveFactory(IAgStkGraphicsVectorPrimitiveFactory):
    """Renders a vector in the 3D scene. A vector is defined by a source (given by an ISystem) and a direction (given by an IVector or IPoint). Length is auto-calculated or can be set separately."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsVectorPrimitiveFactory.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAgStkGraphicsVectorPrimitiveFactory._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsVectorPrimitiveFactory._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsVectorPrimitiveFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsVectorPrimitiveFactory.")

agcls.AgClassCatalog.add_catalog_entry("{380CA28E-1D09-4F5B-9341-6E96BA4CACCE}", AgStkGraphicsVectorPrimitiveFactory)



################################################################################
#          Copyright 2020-2023, Ansys Government Initiatives
################################################################################
